[
  {
    "db_id": "dog_kennels",
    "feedback": "Change breeds table with treatments table .",
    "question": "How many dogs went through any treatments?",
    "gold_parse": "SELECT count(DISTINCT dog_id) FROM Treatments",
    "beam": [
      [
        "SELECT Count ( * ) FROM Breeds",
        -0.5414700508117676
      ],
      [
        "SELECT Count ( DISTINCT dog_id ) FROM Treatments",
        -0.8722524642944336
      ],
      [
        "SELECT Count ( * ) FROM Treatments WHERE treatment_type_code = value",
        -10.163511753082275
      ],
      [
        "SELECT Count ( dog_id ) FROM Treatments",
        -11.011947631835938
      ],
      [
        "SELECT Count ( DISTINCT treatment_type_code ) FROM Treatments",
        -11.804057121276855
      ],
      [
        "SELECT Sum ( date_adopted ) FROM Dogs",
        -12.087299704551697
      ],
      [
        "SELECT Sum ( date_arrived ) FROM Dogs",
        -12.274675488471985
      ],
      [
        "SELECT Sum ( dog_id ) FROM Treatments",
        -12.737468481063843
      ],
      [
        "SELECT Sum ( * ) FROM Breeds",
        -12.833148956298828
      ],
      [
        "SELECT Sum ( weight ) FROM Dogs",
        -13.22375774383545
      ],
      [
        "SELECT Sum ( DISTINCT dog_id ) FROM Treatments",
        -13.303364515304565
      ],
      [
        "SELECT Count ( DISTINCT dog_id ) FROM Treatments WHERE treatment_type_code = value",
        -13.610508441925049
      ],
      [
        "SELECT Count ( date_adopted ) FROM Dogs",
        -14.093955516815186
      ],
      [
        "SELECT Count ( DISTINCT treatment_type_description ) FROM Treatment_Types",
        -14.234445571899414
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM Breeds",
        -14.361622333526611
      ],
      [
        "SELECT Count ( DISTINCT weight ) FROM Dogs",
        -14.42734146118164
      ],
      [
        "SELECT Count ( date_arrived ) FROM Dogs",
        -14.62847089767456
      ],
      [
        "SELECT Count ( DISTINCT treatment_type_code ) FROM Treatment_Types",
        -14.790623664855957
      ],
      [
        "SELECT Count ( * ) FROM Treatments ORDER BY dog_id Asc",
        -14.956301122903824
      ],
      [
        "SELECT Count ( * ) , dog_id FROM Treatments",
        -14.968766927719116
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM Breeds",
    "predicted_parse": "SELECT Count ( * ) FROM Breeds",
    "predicted_parse_explanation": [
      "find the number of rows in breeds table"
    ],
    "template_feedback": "use treatments table in place of breeds table . find number of different dog id in place of number of rows .",
    "primary_span": [
      [
        0,
        2
      ],
      [
        9,
        14
      ]
    ],
    "secondary_span": [
      [
        3,
        8
      ],
      [
        15,
        21
      ]
    ],
    "edits": [
      "number of distinct dog id",
      "number of rows",
      "treatments",
      "breeds"
    ],
    "edits_original": "< select > add number of distinct dog id </ select > < select > remove number of rows </ select > < from > add treatments </ from > < from > remove breeds </ from >"
  },
  {
    "db_id": "network_1",
    "feedback": "In step 1, the grade and high schooler table should be replace with student Id and friend table respectively.",
    "question": "What is the name of the high schooler who has the greatest number of friends?",
    "gold_parse": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
    "beam": [
      [
        "SELECT name FROM Highschooler GROUP BY grade ORDER BY Count ( * ) Desc LIMIT value",
        -1.1436901092529297
      ],
      [
        "SELECT name FROM Highschooler GROUP BY grade , grade ORDER BY Count ( * ) Desc LIMIT value",
        -1.758752465248108
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id ORDER BY Count ( * ) Desc LIMIT value",
        -2.111774444580078
      ],
      [
        "SELECT name FROM Highschooler GROUP BY grade , name ORDER BY Count ( * ) Desc LIMIT value",
        -2.478680372238159
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id GROUP BY T1.grade , T2.liked_id ORDER BY Count ( * ) Desc LIMIT value",
        -2.7463693618774414
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T1.grade , T2.friend_id ORDER BY Count ( * ) Desc LIMIT value",
        -2.943875551223755
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id GROUP BY T1.grade , T2.student_id ORDER BY Count ( * ) Desc LIMIT value",
        -3.203610897064209
      ],
      [
        "SELECT name FROM Highschooler GROUP BY name , grade ORDER BY Count ( * ) Desc LIMIT value",
        -3.251126766204834
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T1.grade , T2.student_id ORDER BY Count ( * ) Desc LIMIT value",
        -3.4241175651550293
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id GROUP BY T2.student_id ORDER BY Count ( * ) Desc LIMIT value",
        -3.454984664916992
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id GROUP BY T2.liked_id ORDER BY Count ( * ) Desc LIMIT value",
        -4.110175132751465
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id , T1.grade ORDER BY Count ( * ) Desc LIMIT value",
        -4.3791704177856445
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id GROUP BY T2.liked_id , T1.grade ORDER BY Count ( * ) Desc LIMIT value",
        -5.679518699645996
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id GROUP BY T2.student_id , T1.grade ORDER BY Count ( * ) Desc LIMIT value",
        -5.806609153747559
      ],
      [
        "SELECT name FROM Highschooler GROUP BY grade , Count ( * ) ORDER BY Count ( * ) Desc LIMIT value",
        -5.920927047729492
      ],
      [
        "SELECT name FROM Highschooler GROUP BY grade , ID ORDER BY Count ( * ) Desc LIMIT value",
        -6.025552749633789
      ],
      [
        "SELECT name FROM Highschooler GROUP BY grade , * ORDER BY Count ( * ) Desc LIMIT value",
        -6.571228981018066
      ],
      [
        "SELECT name FROM Highschooler GROUP BY ID , grade ORDER BY Count ( * ) Desc LIMIT value",
        -7.672840118408203
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.friend_id ORDER BY Count ( * ) Desc LIMIT value",
        -7.7088494300842285
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.friend_id , T1.grade ORDER BY Count ( * ) Desc LIMIT value",
        -8.136776447296143
      ]
    ],
    "predicted_parse_with_values": "SELECT name FROM Highschooler GROUP BY grade ORDER BY Count ( * ) Desc LIMIT 1",
    "predicted_parse": "SELECT name FROM Highschooler GROUP BY grade ORDER BY Count ( * ) Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of grade in high schooler table",
      "Step 2: find the name in high schooler table with largest value in the results of step 1"
    ],
    "template_feedback": "in step 1 , additionally use the information from the friend table besides the high schooler table . find for each value of student id in place of grade .",
    "primary_span": [
      [
        4,
        11
      ],
      [
        18,
        24
      ]
    ],
    "secondary_span": [
      [
        12,
        17
      ],
      [
        25,
        29
      ]
    ],
    "edits": [
      "friend",
      "student id",
      "grade"
    ],
    "edits_original": "< from > add friend </ from > < groupBy > add student id </ groupBy > < groupBy > remove grade </ groupBy >"
  },
  {
    "db_id": "concert_singer",
    "feedback": "I want song name as Hey.",
    "question": "what is the name and nation of the singer who have a song having 'Hey' in its name?",
    "gold_parse": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'",
    "beam": [
      [
        "SELECT Name , Country FROM singer WHERE Name LIKE value",
        -0.5834646224975586
      ],
      [
        "SELECT Name , Country FROM singer WHERE Song_Name LIKE value",
        -0.9058437347412109
      ],
      [
        "SELECT Song_Name , Country FROM singer WHERE Name LIKE value",
        -3.845317840576172
      ],
      [
        "SELECT Song_Name , Country FROM singer WHERE Song_Name LIKE value",
        -4.163100242614746
      ],
      [
        "SELECT T1.Name , T1.Country FROM singer AS T1 JOIN concert AS T2 JOIN singer_in_concert AS T3 ON T1.Singer_ID = T3.Singer_ID AND T3.concert_ID = T2.concert_ID WHERE T2.concert_Name LIKE value",
        -7.59306526184082
      ],
      [
        "SELECT Name , Country FROM singer WHERE Is_male LIKE value",
        -8.12611198425293
      ],
      [
        "SELECT Name , Country FROM singer WHERE Country BETWEEN value AND value",
        -10.242524147033691
      ],
      [
        "SELECT T1.Song_Name , T1.Country FROM singer AS T1 JOIN concert AS T2 JOIN singer_in_concert AS T3 ON T1.Singer_ID = T3.Singer_ID AND T3.concert_ID = T2.concert_ID WHERE T2.concert_Name LIKE value",
        -10.848215103149414
      ],
      [
        "SELECT Song_Name , Country FROM singer WHERE Is_male LIKE value",
        -11.380136489868164
      ],
      [
        "SELECT T1.Name , T1.Country FROM singer AS T1 JOIN concert AS T2 JOIN singer_in_concert AS T3 ON T1.Singer_ID = T3.Singer_ID AND T3.concert_ID = T2.concert_ID WHERE T2.Theme LIKE value",
        -11.772363662719727
      ],
      [
        "SELECT Name , Country FROM singer WHERE Song_release_year LIKE value",
        -12.10838508605957
      ],
      [
        "SELECT Name , Country FROM singer WHERE Song_Name BETWEEN value AND value",
        -12.395735740661621
      ],
      [
        "SELECT Song_Name , Country FROM singer WHERE Country BETWEEN value AND value",
        -13.527061700820923
      ],
      [
        "SELECT Name FROM singer WHERE Name LIKE value",
        -13.612439155578613
      ],
      [
        "SELECT Name FROM singer WHERE Song_Name LIKE value",
        -13.676997184753418
      ],
      [
        "SELECT Name , Country , Country FROM singer WHERE Name LIKE value",
        -13.793257713317871
      ],
      [
        "SELECT T1.Name , T1.Country FROM singer AS T1 WHERE T1.Singer_ID IN ( SELECT T2.Singer_ID FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T1.Name LIKE value )",
        -14.025282859802246
      ],
      [
        "SELECT Name , Country FROM singer",
        -16.25263023376465
      ],
      [
        "SELECT Song_Name FROM singer WHERE Name LIKE value",
        -16.461674690246582
      ],
      [
        "SELECT Song_Name FROM singer WHERE Song_Name LIKE value",
        -16.544340133666992
      ]
    ],
    "predicted_parse_with_values": "SELECT Name , Country FROM singer WHERE Name LIKE \"Hey\"",
    "predicted_parse": "SELECT Name , Country FROM singer WHERE Name LIKE value",
    "predicted_parse_explanation": [
      "find the name and country in singer table whose name like Hey"
    ],
    "template_feedback": "consider the song name like % Hey % conditions in place of the name like Hey conditions .",
    "primary_span": [
      [
        0,
        8
      ]
    ],
    "secondary_span": [
      [
        9,
        17
      ]
    ],
    "edits": [
      "song name like \"%Hey%\"",
      "name like \"Hey\""
    ],
    "edits_original": "< where > add song name like \" % Hey % \" </ where > < where > remove name like \" Hey \" </ where >"
  },
  {
    "db_id": "world_1",
    "feedback": "swap continent with head of state because it is not required. ",
    "question": "Give the name, population, and head of state for the country that has the largest area.",
    "gold_parse": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",
    "beam": [
      [
        "SELECT Name , Population , Continent FROM country ORDER BY SurfaceArea Desc LIMIT value",
        -0.6074542999267578
      ],
      [
        "SELECT Name , LifeExpectancy , Continent FROM country ORDER BY SurfaceArea Desc LIMIT value",
        -0.7963085174560547
      ],
      [
        "SELECT LocalName , Population , Continent FROM country ORDER BY SurfaceArea Desc LIMIT value",
        -6.4282073974609375
      ],
      [
        "SELECT LocalName , LifeExpectancy , Continent FROM country ORDER BY SurfaceArea Desc LIMIT value",
        -6.60356330871582
      ],
      [
        "SELECT Name , Population , Region FROM country ORDER BY SurfaceArea Desc LIMIT value",
        -8.305346488952637
      ],
      [
        "SELECT Name , Population , HeadOfState FROM country ORDER BY SurfaceArea Desc LIMIT value",
        -8.463369369506836
      ],
      [
        "SELECT Name , LifeExpectancy , Region FROM country ORDER BY SurfaceArea Desc LIMIT value",
        -8.527904510498047
      ],
      [
        "SELECT Name , Population , SurfaceArea FROM country ORDER BY SurfaceArea Desc LIMIT value",
        -8.613631248474121
      ],
      [
        "SELECT Name , LifeExpectancy , HeadOfState FROM country ORDER BY SurfaceArea Desc LIMIT value",
        -8.646684646606445
      ],
      [
        "SELECT Name , LifeExpectancy , SurfaceArea FROM country ORDER BY SurfaceArea Desc LIMIT value",
        -8.931049346923828
      ],
      [
        "SELECT Name , Population , Population FROM country ORDER BY SurfaceArea Desc LIMIT value",
        -11.114995956420898
      ],
      [
        "SELECT Name , Population , Continent FROM country WHERE SurfaceArea = ( SELECT Max ( SurfaceArea ) FROM country ) ORDER BY SurfaceArea Desc LIMIT value",
        -11.137145042419434
      ],
      [
        "SELECT Name , LifeExpectancy , Population FROM country ORDER BY SurfaceArea Desc LIMIT value",
        -11.231160163879395
      ],
      [
        "SELECT Name , Population , LifeExpectancy FROM country ORDER BY SurfaceArea Desc LIMIT value",
        -11.233232498168945
      ],
      [
        "SELECT Name , LifeExpectancy , Continent FROM country WHERE SurfaceArea = ( SELECT Max ( SurfaceArea ) FROM country ) ORDER BY SurfaceArea Desc LIMIT value",
        -11.320823669433594
      ],
      [
        "SELECT Name , LifeExpectancy , LifeExpectancy FROM country ORDER BY SurfaceArea Desc LIMIT value",
        -11.34316349029541
      ],
      [
        "SELECT Name , Max ( Population ) , Continent FROM country ORDER BY SurfaceArea Desc LIMIT value",
        -12.122625350952148
      ],
      [
        "SELECT Name , Population , Continent FROM country WHERE SurfaceArea = ( SELECT Max ( SurfaceArea ) FROM country )",
        -12.211287498474121
      ],
      [
        "SELECT Name , Population , GovernmentForm FROM country ORDER BY SurfaceArea Desc LIMIT value",
        -12.254467010498047
      ],
      [
        "SELECT Name , Max ( LifeExpectancy ) , Continent FROM country ORDER BY SurfaceArea Desc LIMIT value",
        -12.316129684448242
      ]
    ],
    "predicted_parse_with_values": "SELECT Name , Population , Continent FROM country ORDER BY SurfaceArea Desc LIMIT 1",
    "predicted_parse": "SELECT Name , Population , Continent FROM country ORDER BY SurfaceArea Desc LIMIT value",
    "predicted_parse_explanation": [
      "find the name , population , continent in country table with largest value of surface area"
    ],
    "template_feedback": "find head of state in place of continent .",
    "primary_span": [
      [
        0,
        3
      ]
    ],
    "secondary_span": [
      [
        4,
        8
      ]
    ],
    "edits": [
      "head of state",
      "continent"
    ],
    "edits_original": "< select > add head of state </ select > < select > remove continent </ select >"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "feedback": "We have to use templates table instead of reference template types table.",
    "question": "How many templates do we have?",
    "gold_parse": "SELECT count(*) FROM Templates",
    "beam": [
      [
        "SELECT Count ( * ) FROM Ref_Template_Types",
        -1.239776611328125e-05
      ],
      [
        "SELECT Sum ( * ) FROM Ref_Template_Types",
        -12.934898614883423
      ],
      [
        "SELECT Count ( * ) , Template_ID FROM Documents",
        -13.946965456008911
      ],
      [
        "SELECT Count ( * ) FROM Documents GROUP BY Template_ID",
        -14.00022029876709
      ],
      [
        "SELECT Sum ( Version_Number ) FROM Templates",
        -14.029449224472046
      ],
      [
        "SELECT Count ( * ) FROM Templates WHERE Version_Number = value",
        -14.04408311843872
      ],
      [
        "SELECT Avg ( * ) FROM Ref_Template_Types",
        -14.086286544799805
      ],
      [
        "SELECT Count ( Count ( * ) ) FROM Ref_Template_Types",
        -14.20938777923584
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM Ref_Template_Types",
        -14.224188804626465
      ],
      [
        "SELECT Avg ( Version_Number ) FROM Templates",
        -15.681646347045898
      ],
      [
        "SELECT Count ( * ) FROM Templates ORDER BY Template_ID Desc",
        -15.890565633773804
      ],
      [
        "SELECT Count ( * ) FROM Templates ORDER BY Version_Number Desc",
        -16.08732295036316
      ],
      [
        "SELECT Sum ( Template_ID ) FROM Documents",
        -16.564003705978394
      ],
      [
        "SELECT Count ( DISTINCT Template_ID ) FROM Documents",
        -16.626111030578613
      ],
      [
        "SELECT Sum ( Template_ID ) FROM Templates",
        -16.799067497253418
      ],
      [
        "SELECT Count ( * ) FROM Ref_Template_Types LIMIT value",
        -17.10350513458252
      ],
      [
        "SELECT Count ( DISTINCT * ) FROM Ref_Template_Types",
        -17.132019996643066
      ],
      [
        "SELECT Count ( Avg ( * ) ) FROM Ref_Template_Types",
        -17.282763481140137
      ],
      [
        "SELECT Count ( Max ( * ) ) FROM Ref_Template_Types",
        -17.434340476989746
      ],
      [
        "SELECT Template_ID FROM Documents",
        -17.48572015762329
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM Ref_Template_Types",
    "predicted_parse": "SELECT Count ( * ) FROM Ref_Template_Types",
    "predicted_parse_explanation": [
      "find the number of rows in reference template types table"
    ],
    "template_feedback": "use templates table in place of reference template types table .",
    "primary_span": [
      [
        0,
        2
      ]
    ],
    "secondary_span": [
      [
        3,
        10
      ]
    ],
    "edits": [
      "templates",
      "reference template types"
    ],
    "edits_original": "< from > add templates </ from > < from > remove reference template types </ from >"
  },
  {
    "db_id": "tvshow",
    "feedback": "Delete the phrase and written by Ben Jones.",
    "question": "What are the names of all cartoons directed by Ben Jones?",
    "gold_parse": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\"",
    "beam": [
      [
        "SELECT Title FROM Cartoon WHERE Written_by = value AND Directed_by = value",
        -0.006335258483886719
      ],
      [
        "SELECT Title FROM Cartoon WHERE Written_by = value AND Written_by = value",
        -5.298269271850586
      ],
      [
        "SELECT Title FROM Cartoon WHERE Written_by = value",
        -7.336806297302246
      ],
      [
        "SELECT Title FROM Cartoon WHERE Directed_by = value AND Directed_by = value",
        -7.388324737548828
      ],
      [
        "SELECT DISTINCT Title FROM Cartoon WHERE Written_by = value AND Directed_by = value",
        -11.022716522216797
      ],
      [
        "SELECT Title FROM Cartoon WHERE Directed_by = value",
        -11.254796981811523
      ],
      [
        "SELECT Title FROM Cartoon WHERE Directed_by = value AND Written_by = value",
        -12.628169059753418
      ],
      [
        "SELECT DISTINCT Title FROM Cartoon WHERE Written_by = value AND Directed_by = value",
        -13.098491668701172
      ],
      [
        "SELECT Title FROM Cartoon WHERE Written_by = value AND Directed_by LIKE value",
        -13.429752349853516
      ],
      [
        "SELECT Title , Directed_by FROM Cartoon WHERE Written_by = value AND Directed_by = value",
        -13.53997802734375
      ],
      [
        "SELECT Title , Written_by FROM Cartoon WHERE Written_by = value AND Directed_by = value",
        -13.569302558898926
      ],
      [
        "SELECT Title FROM Cartoon WHERE Written_by LIKE value AND Directed_by = value",
        -14.392863273620605
      ],
      [
        "SELECT Title FROM Cartoon WHERE Written_by = value AND Directed_by = value AND Directed_by = value",
        -15.003725051879883
      ],
      [
        "SELECT Title FROM Cartoon WHERE Written_by = value AND Written_by = value AND Directed_by = value",
        -15.19073486328125
      ],
      [
        "SELECT T3.Title , T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T2.Channel = T1.id JOIN Cartoon AS T3 ON T1.id = T3.Channel WHERE T3.Written_by = value AND T3.Directed_by = value",
        -15.293314695358276
      ],
      [
        "SELECT Title FROM Cartoon WHERE Written_by = value AND Count ( Directed_by ) = value",
        -15.629467010498047
      ],
      [
        "SELECT DISTINCT Title FROM Cartoon WHERE Written_by = value",
        -16.227463722229004
      ],
      [
        "SELECT Title FROM Cartoon WHERE Written_by < value",
        -16.61022186279297
      ],
      [
        "SELECT Title FROM Cartoon WHERE Directed_by < value",
        -16.7135591506958
      ],
      [
        "SELECT Title FROM Cartoon",
        -18.787466049194336
      ]
    ],
    "predicted_parse_with_values": "SELECT Title FROM Cartoon WHERE Written_by = \"Ben Jones\" AND Directed_by = \"Ben Jones\"",
    "predicted_parse": "SELECT Title FROM Cartoon WHERE Written_by = value AND Directed_by = value",
    "predicted_parse_explanation": [
      "find the title in cartoon table whose written by equals Ben Jones and directed by equals Ben Jones"
    ],
    "template_feedback": "remove the written by equals Ben Jones conditions .",
    "primary_span": [
      [
        0,
        8
      ]
    ],
    "secondary_span": [],
    "edits": [
      "written by equals \"Ben Jones\""
    ],
    "edits_original": "< where > remove written by equals \" Ben Jones \" </ where >"
  },
  {
    "db_id": "orchestra",
    "feedback": "find the major record format of orchestra ordered ascending by share .",
    "question": "What are the major record formats of orchestras, sorted by their frequency?",
    "gold_parse": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC",
    "beam": [
      [
        "SELECT Type FROM performance ORDER BY Share Desc",
        -1.271963119506836
      ],
      [
        "SELECT T1.Major_Record_Format FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID ORDER BY T2.Share Desc",
        -1.8587275743484497
      ],
      [
        "SELECT * FROM performance ORDER BY Share Desc",
        -2.5201802253723145
      ],
      [
        "SELECT Type FROM performance ORDER BY Date Desc",
        -3.0444709062576294
      ],
      [
        "SELECT Type FROM performance ORDER BY Type Desc",
        -3.055083394050598
      ],
      [
        "SELECT Type FROM performance ORDER BY Weekly_rank Desc",
        -3.3044618368148804
      ],
      [
        "SELECT T2.Type FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID ORDER BY T1.Major_Record_Format Desc",
        -3.368613123893738
      ],
      [
        "SELECT T1.Type FROM performance AS T1 JOIN show AS T2 ON T1.Performance_ID = T2.Performance_ID ORDER BY T2.Attendance Desc",
        -3.5002249479293823
      ],
      [
        "SELECT T1.Major_Record_Format FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID ORDER BY T2.Date Desc",
        -3.643065571784973
      ],
      [
        "SELECT T1.Major_Record_Format FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID ORDER BY T2.Type Desc",
        -3.646738886833191
      ],
      [
        "SELECT T1.Major_Record_Format FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID ORDER BY T2.Weekly_rank Desc",
        -3.8969591856002808
      ],
      [
        "SELECT Major_Record_Format FROM orchestra ORDER BY Major_Record_Format Desc",
        -3.952954649925232
      ],
      [
        "SELECT T1.Type FROM performance AS T1 JOIN show AS T2 ON T1.Performance_ID = T2.Performance_ID ORDER BY T2.If_first_show Desc",
        -3.96009624004364
      ],
      [
        "SELECT T1.Major_Record_Format FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID JOIN show AS T3 ON T2.Performance_ID = T3.Performance_ID ORDER BY T3.Attendance Desc",
        -4.081389784812927
      ],
      [
        "SELECT * FROM performance ORDER BY Date Desc",
        -4.310475468635559
      ],
      [
        "SELECT * FROM performance ORDER BY Type Desc",
        -4.337497353553772
      ],
      [
        "SELECT * FROM performance ORDER BY Weekly_rank Desc",
        -4.528067231178284
      ],
      [
        "SELECT T1.Major_Record_Format FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID JOIN show AS T3 ON T2.Performance_ID = T3.Performance_ID ORDER BY T3.If_first_show Desc",
        -4.542124152183533
      ],
      [
        "SELECT * FROM orchestra ORDER BY Major_Record_Format Desc",
        -4.567887902259827
      ],
      [
        "SELECT Date FROM performance ORDER BY Share Desc",
        -4.621019601821899
      ]
    ],
    "predicted_parse_with_values": "SELECT Type FROM performance ORDER BY Share Desc",
    "predicted_parse": "SELECT Type FROM performance ORDER BY Share Desc",
    "predicted_parse_explanation": [
      "find the type in performance table ordered descending by share"
    ],
    "template_feedback": "use orchestra table in place of performance table . find for each value of major record format . find major record format in place of type . order the results ascending by number of rows in place of ordering descending by share .",
    "primary_span": [
      [
        0,
        2
      ],
      [
        9,
        17
      ],
      [
        18,
        21
      ],
      [
        27,
        34
      ]
    ],
    "secondary_span": [
      [
        3,
        8
      ],
      [
        22,
        26
      ],
      [
        35,
        42
      ]
    ],
    "edits": [
      "major record format",
      "type",
      "orchestra",
      "performance",
      "major record format",
      "number of rows",
      "share",
      "descending"
    ],
    "edits_original": "< select > add major record format </ select > < select > remove type </ select > < from > add orchestra </ from > < from > remove performance </ from > < groupBy > add major record format </ groupBy > < orderBy > add number of rows </ orderBy > < orderBy > remove share </ orderBy > < orderBy > remove descending </ orderBy >"
  },
  {
    "db_id": "world_1",
    "feedback": "Need to change continent with code in both step 1 and 3.",
    "question": "What are the country codes for countries that do not speak English?",
    "gold_parse": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
    "beam": [
      [
        "SELECT T1.Continent FROM country AS T1 EXCEPT SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value",
        -0.5968418121337891
      ],
      [
        "SELECT T1.Continent FROM country AS T1 EXCEPT SELECT T2.CountryCode FROM countrylanguage AS T2 WHERE T2.Language = value",
        -1.1599760055541992
      ],
      [
        "SELECT T1.Code FROM country AS T1 EXCEPT SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value",
        -3.089466094970703
      ],
      [
        "SELECT T1.Continent FROM country AS T1 EXCEPT SELECT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value",
        -3.286892890930176
      ],
      [
        "SELECT T1.Code FROM country AS T1 EXCEPT SELECT T2.CountryCode FROM countrylanguage AS T2 WHERE T2.Language = value",
        -3.7419538497924805
      ],
      [
        "SELECT T1.Region FROM country AS T1 EXCEPT SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value",
        -4.1165008544921875
      ],
      [
        "SELECT T1.Region FROM country AS T1 EXCEPT SELECT T2.CountryCode FROM countrylanguage AS T2 WHERE T2.Language = value",
        -5.203131675720215
      ],
      [
        "SELECT T1.Code FROM country AS T1 EXCEPT SELECT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value",
        -5.7758989334106445
      ],
      [
        "SELECT T1.Continent FROM country AS T1 EXCEPT SELECT T1.GovernmentForm FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value",
        -6.564927101135254
      ],
      [
        "SELECT T1.Region FROM country AS T1 EXCEPT SELECT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value",
        -6.8024702072143555
      ],
      [
        "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language ! = value",
        -6.881381988525391
      ],
      [
        "SELECT Continent FROM country WHERE Name ! = value",
        -8.139492988586426
      ],
      [
        "SELECT T1.GovernmentForm FROM country AS T1 EXCEPT SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value",
        -8.934283256530762
      ],
      [
        "SELECT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language ! = value",
        -10.276345252990723
      ],
      [
        "SELECT T1.Code FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language ! = value",
        -10.352846145629883
      ],
      [
        "SELECT Continent FROM country WHERE Code ! = value",
        -11.116257667541504
      ],
      [
        "SELECT Region FROM country WHERE Name ! = value",
        -11.36347770690918
      ],
      [
        "SELECT Continent FROM country WHERE LocalName ! = value",
        -11.919673919677734
      ],
      [
        "SELECT Continent FROM country WHERE Continent ! = value",
        -11.919862270355225
      ],
      [
        "SELECT Code FROM country WHERE Name ! = value",
        -12.045158386230469
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.Continent FROM country AS T1 EXCEPT SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\"",
    "predicted_parse": "SELECT T1.Continent FROM country AS T1 EXCEPT SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value",
    "predicted_parse_explanation": [
      "Step 1: find the continent in country table",
      "Step 2: for each row in country table , find the corresponding rows in countrylanguage table",
      "Step 3: find the continent of the results of step 2 whose language equals English",
      "Step 4: show the rows that are in the results of step 1 but not in the results of step 3"
    ],
    "template_feedback": "in step 1 , use countrylanguage table in place of country table . find countrycode in place of continent . in step 2 , do not use the country table . in step 3 , find countrycode in place of continent .",
    "primary_span": [
      [
        4,
        6
      ],
      [
        13,
        14
      ],
      [
        24,
        30
      ],
      [
        35,
        36
      ]
    ],
    "secondary_span": [
      [
        7,
        12
      ],
      [
        15,
        19
      ],
      [
        24,
        30
      ],
      [
        37,
        41
      ]
    ],
    "edits": [
      "countrycode",
      "continent",
      "countrylanguage",
      "country",
      "countrycode",
      "continent",
      "country"
    ],
    "edits_original": "< select > add countrycode </ select > < select > remove continent </ select > < from > add countrylanguage </ from > < from > remove country </ from > < select > add countrycode </ select > < select > remove continent </ select > < from > remove country </ from >"
  },
  {
    "db_id": "flight_2",
    "feedback": "source airport should be APG not airport name .",
    "question": "What are flight numbers of flights departing from Airport \"APG\"?",
    "gold_parse": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
    "beam": [
      [
        "SELECT T2.FlightNo FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.AirportName = value",
        -0.00012683868408203125
      ],
      [
        "SELECT T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Airline = value",
        -9.597331047058105
      ],
      [
        "SELECT T2.FlightNo FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.City = value",
        -10.360001564025879
      ],
      [
        "SELECT T2.FlightNo FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.Country = value",
        -10.611079216003418
      ],
      [
        "SELECT T2.FlightNo FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.CountryAbbrev = value",
        -13.29770278930664
      ],
      [
        "SELECT DISTINCT T2.FlightNo FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.AirportName = value",
        -13.690229415893555
      ],
      [
        "SELECT T2.FlightNo , T2.FlightNo FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.AirportName = value",
        -13.98879361152649
      ],
      [
        "SELECT T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Abbreviation = value",
        -15.138769149780273
      ],
      [
        "SELECT T2.FlightNo FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.AirportName LIKE value",
        -15.347671508789062
      ],
      [
        "SELECT DISTINCT T2.FlightNo FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.AirportName = value",
        -15.955035209655762
      ],
      [
        "SELECT T2.FlightNo FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.AirportName = value AND T1.AirportName = value",
        -16.197575330734253
      ],
      [
        "SELECT T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Country = value",
        -16.241286277770996
      ],
      [
        "SELECT T2.FlightNo FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.AirportName < value",
        -16.762442350387573
      ],
      [
        "SELECT FlightNo FROM flights WHERE FlightNo LIKE value",
        -16.966113567352295
      ],
      [
        "SELECT Count ( T2.FlightNo ) FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.AirportName = value",
        -17.06145715713501
      ],
      [
        "SELECT FlightNo FROM flights",
        -17.190979957580566
      ],
      [
        "SELECT T2.FlightNo FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE DISTINCT T1.AirportName = value",
        -17.199522972106934
      ],
      [
        "SELECT T2.FlightNo FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.AirportName = value LIMIT value",
        -17.30595874786377
      ],
      [
        "SELECT T2.FlightNo , T2.Airline FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.AirportName = value",
        -17.455296754837036
      ],
      [
        "SELECT T2.FlightNo FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.AirportName = T2.FlightNo",
        -17.49219799041748
      ]
    ],
    "predicted_parse_with_values": "SELECT T2.FlightNo FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.AirportName = \"APG\"",
    "predicted_parse": "SELECT T2.FlightNo FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.AirportName = value",
    "predicted_parse_explanation": [
      "Step 1: for each row in airports table , find the corresponding rows in flights table",
      "Step 2: find the flight number of the results of step 1 whose airport name equals APG"
    ],
    "template_feedback": "in step 1 , do not use the airports table . in step 2 , consider the source airport equals APG conditions in place of the airport name equals APG conditions .",
    "primary_span": [
      [
        4,
        10
      ],
      [
        15,
        21
      ]
    ],
    "secondary_span": [
      [
        4,
        10
      ],
      [
        22,
        31
      ]
    ],
    "edits": [
      "airports",
      "source airport equals \"APG\"",
      "airport name equals \"APG\""
    ],
    "edits_original": "< from > remove airports </ from > < where > add source airport equals \" APG \" </ where > < where > remove airport name equals \" APG \" </ where >"
  },
  {
    "db_id": "student_transcripts_tracking",
    "feedback": "I want table of degree programs in place of table of departments.",
    "question": "Which department offers the most number of degrees? List department name and id.",
    "gold_parse": "SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1",
    "beam": [
      [
        "SELECT department_name , department_id FROM Departments GROUP BY department_id ORDER BY Count ( * ) Desc LIMIT value",
        -0.000102996826171875
      ],
      [
        "SELECT department_name , department_id FROM Departments GROUP BY department_name ORDER BY Count ( * ) Desc LIMIT value",
        -9.627917289733887
      ],
      [
        "SELECT T1.department_name , T1.department_id FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id GROUP BY T2.department_id ORDER BY Count ( * ) Desc LIMIT value",
        -11.035213470458984
      ],
      [
        "SELECT department_name , department_id FROM Departments GROUP BY department_id ORDER BY Count ( * ) Desc",
        -11.892829895019531
      ],
      [
        "SELECT department_name , department_id FROM Departments GROUP BY department_id ORDER BY Count ( * ) Asc LIMIT value",
        -12.388484001159668
      ],
      [
        "SELECT department_name , department_id FROM Departments GROUP BY department_id ORDER BY Sum ( * ) Desc LIMIT value",
        -12.927011966705322
      ],
      [
        "SELECT department_name , department_id , department_id FROM Departments GROUP BY department_id ORDER BY Count ( * ) Desc LIMIT value",
        -13.690556049346924
      ],
      [
        "SELECT DISTINCT department_name , department_id FROM Departments GROUP BY department_id ORDER BY Count ( * ) Desc LIMIT value",
        -13.716156959533691
      ],
      [
        "SELECT department_name , department_id FROM Departments GROUP BY department_id",
        -13.970611572265625
      ],
      [
        "SELECT department_name FROM Departments GROUP BY department_id ORDER BY Count ( * ) Desc LIMIT value",
        -14.220927238464355
      ],
      [
        "SELECT T1.department_name , T2.department_id FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id GROUP BY T1.department_id ORDER BY Count ( * ) Desc LIMIT value",
        -14.603371620178223
      ],
      [
        "SELECT department_name , department_id FROM Departments GROUP BY department_id HAVING Count ( * ) > = value",
        -14.882227897644043
      ],
      [
        "SELECT Count ( department_name ) , department_id FROM Departments GROUP BY department_id ORDER BY Count ( * ) Desc LIMIT value",
        -15.071114540100098
      ],
      [
        "SELECT department_name , department_id FROM Departments GROUP BY department_id ORDER BY Avg ( * ) Desc LIMIT value",
        -15.409190654754639
      ],
      [
        "SELECT department_name , department_id FROM Departments GROUP BY department_id HAVING Count ( * ) < = value",
        -15.581661224365234
      ],
      [
        "SELECT department_name , department_id FROM Departments GROUP BY Count ( * ) ORDER BY Count ( * ) Desc LIMIT value",
        -15.699660301208496
      ],
      [
        "SELECT T2.degree_summary_name , T1.department_id FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id GROUP BY T1.department_id ORDER BY Count ( * ) Desc LIMIT value",
        -15.865446090698242
      ],
      [
        "SELECT department_name , department_id FROM Departments GROUP BY Sum ( department_id ) ORDER BY Count ( * ) Desc LIMIT value",
        -15.912518501281738
      ],
      [
        "SELECT T2.department_name , T2.department_id FROM Courses AS T1 JOIN Departments AS T2 JOIN Degree_Programs AS T3 ON T3.department_id = T2.department_id JOIN Student_Enrolment AS T4 ON T4.degree_program_id = T3.degree_program_id JOIN Student_Enrolment_Courses AS T5 ON T1.course_id = T5.course_id AND T5.student_enrolment_id = T4.student_enrolment_id GROUP BY T1.course_id ORDER BY Count ( * ) Desc LIMIT value",
        -15.941240310668945
      ],
      [
        "SELECT department_name , department_id FROM Departments ORDER BY department_name Desc LIMIT value",
        -16.16243624687195
      ]
    ],
    "predicted_parse_with_values": "SELECT department_name , department_id FROM Departments GROUP BY department_id ORDER BY Count ( * ) Desc LIMIT 1",
    "predicted_parse": "SELECT department_name , department_id FROM Departments GROUP BY department_id ORDER BY Count ( * ) Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of department id in departments table",
      "Step 2: find the department name and department id in departments table with largest value in the results of step 1"
    ],
    "template_feedback": "in step 1 , additionally use the information from the degree programs table besides the departments table .",
    "primary_span": [
      [
        4,
        12
      ]
    ],
    "secondary_span": [
      [
        13,
        17
      ]
    ],
    "edits": [
      "degree programs"
    ],
    "edits_original": "< from > add degree programs </ from >"
  },
  {
    "db_id": "flight_2",
    "feedback": "in flights table sourceairport's equivalent city is aberdeen look for such rows number.",
    "question": "How many flights depart from City Aberdeen?",
    "gold_parse": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
    "beam": [
      [
        "SELECT Count ( * ) FROM airports WHERE City = value",
        -0.1332540512084961
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE AirportName = value",
        -2.097379684448242
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE AirportName = value AND City = value",
        -6.241168975830078
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE Country = value",
        -10.893143653869629
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE City = value AND City = value",
        -11.869972229003906
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE CountryAbbrev = value",
        -13.55180835723877
      ],
      [
        "SELECT Count ( * ) FROM flights AS T1 WHERE T1.DestAirport IN ( SELECT T2.AirportCode FROM airports AS T2 WHERE T2.City = value )",
        -14.282464504241943
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE City > value",
        -14.445050716400146
      ],
      [
        "SELECT Count ( * ) FROM flights AS T1 WHERE T1.DestAirport IN ( SELECT T2.AirportName FROM airports AS T2 WHERE T2.City = value )",
        -14.495113372802734
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM airports WHERE City = value",
        -14.55345344543457
      ],
      [
        "SELECT Avg ( * ) FROM airports WHERE City = value",
        -14.849285364151001
      ],
      [
        "SELECT * FROM airports WHERE City = value",
        -15.54818844795227
      ],
      [
        "SELECT Count ( Count ( * ) ) FROM airports WHERE City = value",
        -15.672724723815918
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE AirportName LIKE value",
        -15.789641380310059
      ],
      [
        "SELECT Count ( * ) , AirportName FROM airports WHERE City = value",
        -15.905969738960266
      ],
      [
        "SELECT Count ( * ) FROM flights AS T1 WHERE T1.DestAirport IN ( SELECT * FROM airports AS T2 WHERE T2.City = value )",
        -15.940426349639893
      ],
      [
        "SELECT Sum ( * ) FROM airports WHERE City = value",
        -15.992004871368408
      ],
      [
        "SELECT Count ( * ) FROM flights WHERE DestAirport = value",
        -16.2912015914917
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM airports WHERE AirportName = value",
        -16.6366024017334
      ],
      [
        "SELECT Count ( * ) FROM airlines",
        -18.555978775024414
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM airports WHERE City = \"Aberdeen\"",
    "predicted_parse": "SELECT Count ( * ) FROM airports WHERE City = value",
    "predicted_parse_explanation": [
      "find the number of rows in airports table whose city equals Aberdeen"
    ],
    "template_feedback": "additionally use the information from the flights table besides the airports table .",
    "primary_span": [
      [
        0,
        7
      ]
    ],
    "secondary_span": [
      [
        8,
        12
      ]
    ],
    "edits": [
      "flights"
    ],
    "edits_original": "< from > add flights </ from >"
  },
  {
    "db_id": "dog_kennels",
    "feedback": "You should remove 'treatment type' and insert 'charger type' in its place.",
    "question": "List each charge type and its amount.",
    "gold_parse": "SELECT charge_type ,  charge_amount FROM Charges",
    "beam": [
      [
        "SELECT T2.treatment_type_code , T1.charge_amount FROM Charges AS T1 JOIN Treatment_Types AS T2",
        -0.07323646545410156
      ],
      [
        "SELECT T2.treatment_type_code , T1.charge_amount FROM Charges AS T1 JOIN Treatments AS T2",
        -2.79093074798584
      ],
      [
        "SELECT charge_type , charge_amount FROM Charges",
        -5.115971565246582
      ],
      [
        "SELECT T2.treatment_type_code , T1.charge_amount FROM Charges AS T1 JOIN Treatment_Types AS T2 JOIN Treatments AS T3 GROUP BY T3.treatment_type_code",
        -6.513180732727051
      ],
      [
        "SELECT T2.treatment_type_code , Sum ( T1.charge_amount ) FROM Charges AS T1 JOIN Treatment_Types AS T2",
        -7.447005271911621
      ],
      [
        "SELECT T2.treatment_type_code , T1.charge_amount FROM Charges AS T1 JOIN Treatments AS T2 GROUP BY T2.treatment_type_code",
        -7.556225776672363
      ],
      [
        "SELECT T2.treatment_type_code , Sum ( T1.charge_amount ) FROM Charges AS T1 JOIN Treatments AS T2",
        -8.110186576843262
      ],
      [
        "SELECT T2.treatment_type_code , T1.charge_amount FROM Charges AS T1 JOIN Treatment_Types AS T2 GROUP BY T2.treatment_type_code",
        -8.868955612182617
      ],
      [
        "SELECT T1.charge_type , T1.charge_amount FROM Charges AS T1 JOIN Treatments AS T2 GROUP BY T2.treatment_type_code",
        -9.903120040893555
      ],
      [
        "SELECT T3.treatment_type_code , T1.charge_amount FROM Charges AS T1 JOIN Treatment_Types AS T2 JOIN Treatments AS T3 GROUP BY T2.treatment_type_code",
        -9.972644805908203
      ],
      [
        "SELECT T2.treatment_type_code , Sum ( T1.charge_amount ) FROM Charges AS T1 JOIN Treatments AS T2 GROUP BY T2.treatment_type_code",
        -10.59880256652832
      ],
      [
        "SELECT treatment_type_code , Count ( * ) FROM Treatment_Types",
        -11.118143558502197
      ],
      [
        "SELECT T2.treatment_type_code , Sum ( T1.charge_amount ) FROM Charges AS T1 JOIN Treatment_Types AS T2 JOIN Treatments AS T3 GROUP BY T3.treatment_type_code",
        -11.312990188598633
      ],
      [
        "SELECT T2.treatment_type_code , Count ( T1.charge_amount ) FROM Charges AS T1 JOIN Treatment_Types AS T2",
        -11.50113296508789
      ],
      [
        "SELECT treatment_type_code , Count ( * ) FROM Treatments",
        -12.08101749420166
      ],
      [
        "SELECT T1.charge_type , T1.charge_amount FROM Charges AS T1 JOIN Treatment_Types AS T2 GROUP BY T2.treatment_type_code",
        -12.268767356872559
      ],
      [
        "SELECT charge_type , Sum ( charge_amount ) FROM Charges",
        -12.271116256713867
      ],
      [
        "SELECT T2.treatment_type_code , Count ( T1.charge_amount ) FROM Charges AS T1 JOIN Treatments AS T2",
        -12.378462314605713
      ],
      [
        "SELECT T2.treatment_type_code , T1.charge_amount FROM Charges AS T1 JOIN Treatment_Types AS T2 UNION SELECT T1.charge_type FROM Charges AS T1",
        -12.73632287979126
      ],
      [
        "SELECT T2.treatment_type_code , T1.charge_amount FROM Charges AS T1 JOIN Treatment_Types AS T2 WHERE T2.treatment_type_description = value",
        -12.903962552547455
      ]
    ],
    "predicted_parse_with_values": "SELECT T2.treatment_type_code , T1.charge_amount FROM Charges AS T1 JOIN Treatment_Types AS T2",
    "predicted_parse": "SELECT T2.treatment_type_code , T1.charge_amount FROM Charges AS T1 JOIN Treatment_Types AS T2",
    "predicted_parse_explanation": [
      "Step 1: for each row in charges table , find the corresponding rows in treatment types table",
      "Step 2: find the treatment type code and charge amount of the results of step 1"
    ],
    "template_feedback": "in step 1 , do not use the treatment types table . in step 2 , find charge type in place of treatment type code .",
    "primary_span": [
      [
        4,
        11
      ],
      [
        16,
        18
      ]
    ],
    "secondary_span": [
      [
        4,
        11
      ],
      [
        19,
        25
      ]
    ],
    "edits": [
      "charge type",
      "treatment type code",
      "treatment types"
    ],
    "edits_original": "< select > add charge type </ select > < select > remove treatment type code </ select > < from > remove treatment types </ from >"
  },
  {
    "db_id": "car_1",
    "feedback": "And also Corresponding model of model list table .",
    "question": "What are all the makers and models?",
    "gold_parse": "SELECT Maker ,  Model FROM MODEL_LIST",
    "beam": [
      [
        "SELECT Maker FROM car_makers",
        -0.31635332107543945
      ],
      [
        "SELECT Model FROM model_list",
        -1.4556641578674316
      ],
      [
        "SELECT * FROM continents",
        -3.953040838241577
      ],
      [
        "SELECT Make FROM car_names",
        -4.911764144897461
      ],
      [
        "SELECT T1.Maker , T2.Model FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker",
        -5.198111295700073
      ],
      [
        "SELECT FullName FROM car_makers",
        -5.803190231323242
      ],
      [
        "SELECT Model , Model FROM model_list",
        -7.028489589691162
      ],
      [
        "SELECT Maker FROM model_list",
        -7.835210800170898
      ],
      [
        "SELECT Continent FROM continents",
        -7.964555740356445
      ],
      [
        "SELECT MPG FROM cars_data",
        -8.51301097869873
      ],
      [
        "SELECT ModelId FROM model_list",
        -8.671175003051758
      ],
      [
        "SELECT * , Model FROM model_list",
        -8.83679485321045
      ],
      [
        "SELECT Country FROM car_makers",
        -8.924602508544922
      ],
      [
        "SELECT Horsepower FROM cars_data",
        -9.079545974731445
      ],
      [
        "SELECT T2.Make , T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model",
        -9.101251125335693
      ],
      [
        "SELECT T1.FullName , T2.Model FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker",
        -9.525157928466797
      ],
      [
        "SELECT CountryName FROM countries",
        -9.656302452087402
      ],
      [
        "SELECT Weight FROM cars_data",
        -9.965469360351562
      ],
      [
        "SELECT Year FROM cars_data",
        -10.40966796875
      ],
      [
        "SELECT Edispl FROM cars_data",
        -10.731751441955566
      ]
    ],
    "predicted_parse_with_values": "SELECT Maker FROM car_makers",
    "predicted_parse": "SELECT Maker FROM car_makers",
    "predicted_parse_explanation": [
      "find the maker in car makers table"
    ],
    "template_feedback": "use model list table in place of car makers table . find model list 's maker and model in place of car makers 's maker .",
    "primary_span": [
      [
        0,
        3
      ],
      [
        11,
        17
      ]
    ],
    "secondary_span": [
      [
        4,
        10
      ],
      [
        18,
        25
      ]
    ],
    "edits": [
      "model",
      "model list",
      "car makers"
    ],
    "edits_original": "< select > add model </ select > < from > add model list </ from > < from > remove car makers </ from >"
  },
  {
    "db_id": "wta_1",
    "feedback": "In step 2 Substitute last name with loser name , smallest value of winner name with largest value of minutes .",
    "question": "What are the names of the winner and loser who played in the longest match?",
    "gold_parse": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
    "beam": [
      [
        "SELECT T2.winner_name , T1.last_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.winner_name Asc LIMIT value",
        -1.3305931091308594
      ],
      [
        "SELECT T2.winner_name , T1.last_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.loser_name Asc LIMIT value",
        -1.6097793579101562
      ],
      [
        "SELECT T2.winner_name , T1.last_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.tourney_name Asc LIMIT value",
        -2.240462303161621
      ],
      [
        "SELECT T2.tourney_name , T1.last_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.winner_name Asc LIMIT value",
        -2.7564239501953125
      ],
      [
        "SELECT T2.tourney_name , T1.last_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.loser_name Asc LIMIT value",
        -3.035569667816162
      ],
      [
        "SELECT T1.first_name , T1.last_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.winner_name Asc LIMIT value",
        -3.3486881256103516
      ],
      [
        "SELECT winner_name , loser_entry FROM matches ORDER BY winner_name Asc LIMIT value",
        -3.42191219329834
      ],
      [
        "SELECT winner_name , loser_entry FROM matches ORDER BY loser_name Asc LIMIT value",
        -3.506344795227051
      ],
      [
        "SELECT T2.winner_name , T1.last_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.loser_entry Asc LIMIT value",
        -3.627265453338623
      ],
      [
        "SELECT T1.first_name , T1.last_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.loser_name Asc LIMIT value",
        -3.6278295516967773
      ],
      [
        "SELECT T2.tourney_name , T1.last_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.tourney_name Asc LIMIT value",
        -3.6649560928344727
      ],
      [
        "SELECT winner_name , loser_entry FROM matches ORDER BY tourney_name Asc LIMIT value",
        -4.204052925109863
      ],
      [
        "SELECT T1.first_name , T1.last_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.tourney_name Asc LIMIT value",
        -4.257098197937012
      ],
      [
        "SELECT T2.loser_name , T1.last_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.winner_name Asc LIMIT value",
        -4.266407012939453
      ],
      [
        "SELECT T2.loser_name , T1.last_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.loser_name Asc LIMIT value",
        -4.549396991729736
      ],
      [
        "SELECT winner_name , loser_entry FROM matches ORDER BY loser_entry Asc LIMIT value",
        -4.932462692260742
      ],
      [
        "SELECT tourney_name , loser_entry FROM matches ORDER BY winner_name Asc LIMIT value",
        -5.019871711730957
      ],
      [
        "SELECT T2.tourney_name , T1.last_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.loser_entry Asc LIMIT value",
        -5.0549492835998535
      ],
      [
        "SELECT tourney_name , loser_entry FROM matches ORDER BY loser_name Asc LIMIT value",
        -5.109322547912598
      ],
      [
        "SELECT T2.loser_name , T1.last_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.tourney_name Asc LIMIT value",
        -5.179184436798096
      ]
    ],
    "predicted_parse_with_values": "SELECT T2.winner_name , T1.last_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.winner_name Asc LIMIT 1",
    "predicted_parse": "SELECT T2.winner_name , T1.last_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.winner_name Asc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: for each row in players table , find the corresponding rows in matches table",
      "Step 2: find the winner name and last name of the results of step 1 with smallest value of winner name"
    ],
    "template_feedback": "in step 1 , do not use the players table . in step 2 , find loser name in place of last name . order the results descending by minutes in place of ordering ascending by winner name .",
    "primary_span": [
      [
        4,
        10
      ],
      [
        15,
        17
      ],
      [
        24,
        29
      ]
    ],
    "secondary_span": [
      [
        4,
        10
      ],
      [
        18,
        23
      ],
      [
        30,
        38
      ]
    ],
    "edits": [
      "loser name",
      "last name",
      "players",
      "minutes",
      "descending",
      "winner name"
    ],
    "edits_original": "< select > add loser name </ select > < select > remove last name </ select > < from > remove players </ from > < orderBy > add minutes </ orderBy > < orderBy > add descending </ orderBy > < orderBy > remove winner name </ orderBy >"
  },
  {
    "db_id": "tvshow",
    "feedback": "Remove \"and directed by equals Ben Jones\".",
    "question": "What are the countries that have cartoons on TV that were written by Todd Casey?",
    "gold_parse": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
    "beam": [
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value AND T2.Directed_by = value",
        -0.17794132232666016
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value AND T2.Written_by = value",
        -2.2390732765197754
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel JOIN Cartoon AS T3 ON T1.id = T3.Channel WHERE T3.Written_by = value AND T2.Episode = value",
        -3.7108683586120605
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = value AND T2.Directed_by = value",
        -4.133120536804199
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel JOIN Cartoon AS T3 ON T1.id = T3.Channel WHERE T3.Written_by = value AND T2.Rating = value",
        -5.0395097732543945
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value AND T1.series_name = value",
        -5.677289009094238
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = value AND T2.Written_by = value",
        -6.189545154571533
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value AND T1.Content = value",
        -6.245051383972168
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value",
        -7.473569869995117
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel JOIN Cartoon AS T3 ON T1.id = T3.Channel WHERE T3.Directed_by = value AND T2.Episode = value",
        -7.674941539764404
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value AND T1.Language = value",
        -7.912673473358154
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel JOIN Cartoon AS T3 ON T1.id = T3.Channel WHERE T3.Directed_by = value AND T2.Rating = value",
        -9.005004405975342
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value INTERSECT SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value",
        -9.433722496032715
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value AND T1.Pay_per_view_PPV = value",
        -9.438553810119629
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = value AND T1.series_name = value",
        -9.618152618408203
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = value",
        -9.794723510742188
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel JOIN Cartoon AS T3 ON T1.id = T3.Channel WHERE T3.Written_by = value AND T2.Share = value",
        -10.03036880493164
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = value AND T1.Content = value",
        -10.1982421875
      ],
      [
        "SELECT DISTINCT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value AND T2.Directed_by = value",
        -10.405345916748047
      ],
      [
        "SELECT Country FROM TV_Channel",
        -16.55386734008789
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = \"Todd Casey\" AND T2.Directed_by = \"Ben Jones\"",
    "predicted_parse": "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value AND T2.Directed_by = value",
    "predicted_parse_explanation": [
      "Step 1: for each row in tv channel table , find the corresponding rows in cartoon table",
      "Step 2: find the country of the results of step 1 whose written by equals Todd Casey and directed by equals Ben Jones"
    ],
    "template_feedback": "in step 2 , remove the directed by equals Ben Jones conditions .",
    "primary_span": [
      [
        4,
        12
      ]
    ],
    "secondary_span": [],
    "edits": [
      "directed by equals \"Ben Jones\""
    ],
    "edits_original": "< where > remove directed by equals \" Ben Jones \" </ where >"
  },
  {
    "db_id": "tvshow",
    "feedback": "Skip \" and directed by equals Ben Jones \".",
    "question": "What is the number of cartoones written by Joseph Kuhr?",
    "gold_parse": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\"",
    "beam": [
      [
        "SELECT Count ( * ) FROM Cartoon WHERE Written_by = value AND Directed_by = value",
        -0.08048248291015625
      ],
      [
        "SELECT Count ( * ) FROM Cartoon WHERE Written_by = value AND Written_by = value",
        -2.800891876220703
      ],
      [
        "SELECT Count ( * ) FROM Cartoon WHERE Directed_by = value AND Directed_by = value",
        -4.502720832824707
      ],
      [
        "SELECT Count ( * ) FROM Cartoon WHERE Written_by = value",
        -6.117766380310059
      ],
      [
        "SELECT Count ( * ) FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.Language = value AND T2.Directed_by = value",
        -6.547404766082764
      ],
      [
        "SELECT Count ( * ) FROM Cartoon WHERE Directed_by = value AND Written_by = value",
        -7.1129069328308105
      ],
      [
        "SELECT Count ( * ) FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value AND T1.Language = value",
        -7.996701717376709
      ],
      [
        "SELECT Count ( * ) FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value AND T1.series_name = value",
        -8.480340957641602
      ],
      [
        "SELECT Count ( * ) FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.Language = value AND T2.Written_by = value",
        -8.761784553527832
      ],
      [
        "SELECT Count ( * ) FROM Cartoon WHERE Directed_by = value",
        -8.893311023712158
      ],
      [
        "SELECT Count ( * ) FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = value AND T2.Directed_by = value",
        -9.127702713012695
      ],
      [
        "SELECT Count ( * ) FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.Country = value AND T2.Directed_by = value",
        -10.153273582458496
      ],
      [
        "SELECT Count ( * ) FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = value AND T2.Written_by = value",
        -11.050971031188965
      ],
      [
        "SELECT Count ( * ) FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = value AND T1.Language = value",
        -12.139021396636963
      ],
      [
        "SELECT Count ( * ) FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.Country = value AND T2.Written_by = value",
        -12.319840431213379
      ],
      [
        "SELECT Count ( * ) FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value AND T1.Country = value",
        -12.419050216674805
      ],
      [
        "SELECT Count ( * ) FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = value AND T1.series_name = value",
        -12.69496774673462
      ],
      [
        "SELECT Count ( * ) FROM Cartoon WHERE Written_by = value AND Title = value",
        -13.06935977935791
      ],
      [
        "SELECT Count ( * ) FROM TV_Channel WHERE Language = value",
        -14.1492280960083
      ],
      [
        "SELECT Count ( * ) FROM Cartoon WHERE Written_by < value",
        -14.929509162902832
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\" AND Directed_by = \"Ben Jones\"",
    "predicted_parse": "SELECT Count ( * ) FROM Cartoon WHERE Written_by = value AND Directed_by = value",
    "predicted_parse_explanation": [
      "find the number of rows in cartoon table whose written by equals Joseph Kuhr and directed by equals Ben Jones"
    ],
    "template_feedback": "remove the directed by equals Ben Jones conditions .",
    "primary_span": [
      [
        0,
        8
      ]
    ],
    "secondary_span": [],
    "edits": [
      "directed by equals \"Ben Jones\""
    ],
    "edits_original": "< where > remove directed by equals \" Ben Jones \" </ where >"
  },
  {
    "db_id": "course_teach",
    "feedback": "Swap between course and teacher table.",
    "question": "How many teachers are there?",
    "gold_parse": "SELECT count(*) FROM teacher",
    "beam": [
      [
        "SELECT Count ( * ) FROM course",
        -1.049041748046875e-05
      ],
      [
        "SELECT Sum ( * ) FROM course",
        -12.65207839012146
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM course",
        -13.560286521911621
      ],
      [
        "SELECT Count ( * ) FROM teacher WHERE Hometown = value",
        -13.630189895629883
      ],
      [
        "SELECT Sum ( Teacher_ID ) FROM teacher",
        -14.105971574783325
      ],
      [
        "SELECT Avg ( * ) FROM course",
        -14.73497462272644
      ],
      [
        "SELECT Count ( * ) , Name FROM teacher",
        -14.795637249946594
      ],
      [
        "SELECT Count ( Count ( * ) ) FROM course",
        -14.964415550231934
      ],
      [
        "SELECT Count ( * ) FROM teacher WHERE Name = value",
        -15.040467262268066
      ],
      [
        "SELECT Count ( * ) FROM teacher GROUP BY Teacher_ID",
        -15.059301376342773
      ],
      [
        "SELECT Count ( * ) FROM teacher GROUP BY Name",
        -15.07386565208435
      ],
      [
        "SELECT Count ( * ) FROM course_arrange GROUP BY Teacher_ID",
        -15.180646777153015
      ],
      [
        "SELECT Avg ( Teacher_ID ) FROM teacher",
        -15.616098165512085
      ],
      [
        "SELECT Count ( * ) FROM teacher ORDER BY Teacher_ID Desc LIMIT value",
        -15.99117374420166
      ],
      [
        "SELECT Sum ( Hometown ) FROM teacher",
        -16.4084255695343
      ],
      [
        "SELECT Count ( * ) FROM course LIMIT value",
        -17.03117084503174
      ],
      [
        "SELECT Count ( DISTINCT * ) FROM course",
        -17.25309658050537
      ],
      [
        "SELECT Sum ( Name ) FROM teacher",
        -17.35026741027832
      ],
      [
        "SELECT Max ( * ) FROM course",
        -17.457791805267334
      ],
      [
        "SELECT Teacher_ID FROM teacher",
        -17.72667956352234
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM course",
    "predicted_parse": "SELECT Count ( * ) FROM course",
    "predicted_parse_explanation": [
      "find the number of rows in course table"
    ],
    "template_feedback": "use teacher table in place of course table .",
    "primary_span": [
      [
        0,
        2
      ]
    ],
    "secondary_span": [
      [
        3,
        8
      ]
    ],
    "edits": [
      "teacher",
      "course"
    ],
    "edits_original": "< from > add teacher </ from > < from > remove course </ from >"
  },
  {
    "db_id": "tvshow",
    "feedback": "You need to order based on original air date and use production code in place of title.",
    "question": "What is the produdction code and channel of the most recent cartoon?",
    "gold_parse": "SELECT production_code ,  channel FROM cartoon ORDER BY original_air_date LIMIT 1",
    "beam": [
      [
        "SELECT Title , Channel FROM Cartoon GROUP BY Channel ORDER BY Count ( * ) Desc LIMIT value",
        -0.4143190383911133
      ],
      [
        "SELECT T1.Content , T2.Channel FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel GROUP BY T2.Channel ORDER BY Count ( * ) Desc LIMIT value",
        -2.1167850494384766
      ],
      [
        "SELECT T2.Episode , T3.Channel FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T2.Channel = T1.id JOIN Cartoon AS T3 ON T1.id = T3.Channel GROUP BY T3.Channel ORDER BY Count ( * ) Desc LIMIT value",
        -2.5218076705932617
      ],
      [
        "SELECT T2.Title , T2.Channel FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel GROUP BY T1.Content ORDER BY Count ( * ) Desc LIMIT value",
        -3.229672431945801
      ],
      [
        "SELECT T3.Title , T3.Channel FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T2.Channel = T1.id JOIN Cartoon AS T3 ON T1.id = T3.Channel GROUP BY T2.Channel ORDER BY Count ( * ) Desc LIMIT value",
        -3.3441529273986816
      ],
      [
        "SELECT T1.Content , T2.Channel FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel GROUP BY T1.Content ORDER BY Count ( * ) Desc LIMIT value",
        -4.974571704864502
      ],
      [
        "SELECT T1.Content , T3.Channel FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel JOIN Cartoon AS T3 ON T1.id = T3.Channel GROUP BY T2.Channel ORDER BY Count ( * ) Desc LIMIT value",
        -5.043280124664307
      ],
      [
        "SELECT T2.Episode , T3.Channel FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel JOIN Cartoon AS T3 ON T1.id = T3.Channel GROUP BY T1.Content ORDER BY Count ( * ) Desc LIMIT value",
        -5.058856010437012
      ],
      [
        "SELECT T1.Language , T2.Channel FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel GROUP BY T2.Channel ORDER BY Count ( * ) Desc LIMIT value",
        -5.177303314208984
      ],
      [
        "SELECT Production_code , Channel FROM Cartoon GROUP BY Channel ORDER BY Count ( * ) Desc LIMIT value",
        -5.283632278442383
      ],
      [
        "SELECT T3.Title , T3.Channel FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T2.Channel = T1.id JOIN Cartoon AS T3 ON T1.id = T3.Channel GROUP BY T2.Episode ORDER BY Count ( * ) Desc LIMIT value",
        -5.2862019538879395
      ],
      [
        "SELECT T2.Title , T2.Channel FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel GROUP BY T1.id ORDER BY Count ( * ) Desc LIMIT value",
        -5.364205837249756
      ],
      [
        "SELECT T2.Episode , T3.Channel FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T2.Channel = T1.id JOIN Cartoon AS T3 ON T1.id = T3.Channel GROUP BY T2.Channel ORDER BY Count ( * ) Desc LIMIT value",
        -5.399739742279053
      ],
      [
        "SELECT T2.Title , T2.Channel FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel GROUP BY T1.Language ORDER BY Count ( * ) Desc LIMIT value",
        -5.52885627746582
      ],
      [
        "SELECT T2.Title , T2.Channel FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel GROUP BY T1.series_name ORDER BY Count ( * ) Desc LIMIT value",
        -6.064836025238037
      ],
      [
        "SELECT T3.Title , T2.Channel FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T2.Channel = T1.id JOIN Cartoon AS T3 ON T1.id = T3.Channel GROUP BY T3.Channel ORDER BY Count ( * ) Desc LIMIT value",
        -6.882508277893066
      ],
      [
        "SELECT T1.Content , T3.Channel FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel JOIN Cartoon AS T3 ON T1.id = T3.Channel GROUP BY T2.Episode ORDER BY Count ( * ) Desc LIMIT value",
        -7.032698631286621
      ],
      [
        "SELECT T1.Content , T2.Channel FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel GROUP BY T1.id ORDER BY Count ( * ) Desc LIMIT value",
        -7.06144380569458
      ],
      [
        "SELECT T2.Title , T2.Channel FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel GROUP BY T1.Country ORDER BY Count ( * ) Desc LIMIT value",
        -7.1087493896484375
      ],
      [
        "SELECT T1.Content , T2.Channel FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel GROUP BY T1.Language ORDER BY Count ( * ) Desc LIMIT value",
        -7.273665428161621
      ]
    ],
    "predicted_parse_with_values": "SELECT Title , Channel FROM Cartoon GROUP BY Channel ORDER BY Count ( * ) Desc LIMIT 1",
    "predicted_parse": "SELECT Title , Channel FROM Cartoon GROUP BY Channel ORDER BY Count ( * ) Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of channel in cartoon table",
      "Step 2: find the title and channel in cartoon table with largest value in the results of step 1"
    ],
    "template_feedback": "in step 1 , do not find for each value of channel . in step 2 , find production code in place of title . order the results ascending by original air date in place of ordering descending by number of rows .",
    "primary_span": [
      [
        4,
        12
      ],
      [
        17,
        19
      ],
      [
        25,
        32
      ]
    ],
    "secondary_span": [
      [
        20,
        24
      ],
      [
        33,
        42
      ]
    ],
    "edits": [
      "production code",
      "title",
      "channel",
      "original air date",
      "number of rows",
      "descending"
    ],
    "edits_original": "< select > add production code </ select > < select > remove title </ select > < groupBy > remove channel </ groupBy > < orderBy > add original air date </ orderBy > < orderBy > remove number of rows </ orderBy > < orderBy > remove descending </ orderBy >"
  },
  {
    "db_id": "flight_2",
    "feedback": "In step 1. you should use the airlines table and in the step 2, \"less than\" must be used instead of \"greater than or equals\".",
    "question": "Find all airlines that have fewer than 200 flights.",
    "gold_parse": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200",
    "beam": [
      [
        "SELECT Airline FROM airlines GROUP BY Airline HAVING Count ( * ) > = value",
        -0.15213298797607422
      ],
      [
        "SELECT Airline FROM airlines GROUP BY Airline HAVING Count ( * ) < value",
        -2.7238712310791016
      ],
      [
        "SELECT Airline FROM airlines WHERE Abbreviation < value",
        -3.3670566082000732
      ],
      [
        "SELECT Airline FROM airlines WHERE uid < value",
        -4.090151429176331
      ],
      [
        "SELECT Airline FROM airlines GROUP BY Airline HAVING Count ( * ) BETWEEN value AND value",
        -4.398968696594238
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 WHERE T2.Airline < value",
        -5.137440204620361
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 WHERE T2.FlightNo < value",
        -5.747816562652588
      ],
      [
        "SELECT Airline FROM airlines GROUP BY Abbreviation HAVING Count ( * ) > = value",
        -6.486652374267578
      ],
      [
        "SELECT Airline FROM airlines GROUP BY uid HAVING Count ( * ) > = value",
        -7.807252407073975
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 GROUP BY T2.FlightNo HAVING Count ( * ) > = value",
        -8.634408950805664
      ],
      [
        "SELECT Airline FROM airlines GROUP BY Airline HAVING Count ( * ) = value",
        -8.81607723236084
      ],
      [
        "SELECT Airline FROM airlines WHERE Abbreviation = value",
        -9.325833082199097
      ],
      [
        "SELECT Airline FROM airlines WHERE Country < value",
        -9.35210371017456
      ],
      [
        "SELECT Airline FROM airlines WHERE Abbreviation > = value",
        -9.766016602516174
      ],
      [
        "SELECT Airline FROM airlines WHERE Airline < value",
        -10.126842975616455
      ],
      [
        "SELECT Airline FROM airlines WHERE Abbreviation BETWEEN value AND value",
        -10.304515600204468
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 WHERE T2.FlightNo = value",
        -10.864918828010559
      ],
      [
        "SELECT Airline FROM airlines GROUP BY Airline HAVING Count ( * ) > value",
        -10.877562522888184
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 WHERE T2.Airline = value",
        -11.217651605606079
      ],
      [
        "SELECT Airline FROM airlines",
        -11.472249031066895
      ]
    ],
    "predicted_parse_with_values": "SELECT Airline FROM airlines GROUP BY Airline HAVING Count ( * ) > = 200",
    "predicted_parse": "SELECT Airline FROM airlines GROUP BY Airline HAVING Count ( * ) > = value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of airline name in airlines table",
      "Step 2: find the airline name in airlines table whose corresponding value in step 1 is greater than or equals 200"
    ],
    "template_feedback": "in step 1 , additionally use the information from the flights table besides the airlines table . in step 2 , make sure that the corresponding value in step 1 less than 200 .",
    "primary_span": [
      [
        4,
        11
      ],
      [
        21,
        33
      ]
    ],
    "secondary_span": [
      [
        12,
        16
      ]
    ],
    "edits": [
      "flights",
      "number of rows less than 200",
      "number of rows greater than or equals to 200"
    ],
    "edits_original": "< from > add flights </ from > < having > add number of rows less than 200 </ having > < having > remove number of rows greater than or equals to 200 </ having >"
  },
  {
    "db_id": "singer",
    "feedback": "Verify birth year less than 1945 in step 1 , Ensure birth year greater than 1955 in step 2.",
    "question": "Show the citizenship shared by singers with birth year before 1945 and after 1955.",
    "gold_parse": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955",
    "beam": [
      [
        "SELECT Citizenship FROM singer WHERE Birth_Year > value INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year < value",
        -0.025836944580078125
      ],
      [
        "SELECT Citizenship FROM singer WHERE Birth_Year > = value INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year > value",
        -3.8971118927001953
      ],
      [
        "SELECT Citizenship FROM singer WHERE Birth_Year < value INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year > value",
        -5.385075569152832
      ],
      [
        "SELECT Citizenship FROM singer WHERE Birth_Year > value INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year > value",
        -8.283540725708008
      ],
      [
        "SELECT Citizenship FROM singer WHERE Birth_Year > value INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year LIKE value",
        -8.72779369354248
      ],
      [
        "SELECT Citizenship FROM singer WHERE Birth_Year = value INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year > value",
        -9.252376556396484
      ],
      [
        "SELECT Citizenship FROM singer WHERE Birth_Year > value INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year BETWEEN value AND value",
        -10.86778450012207
      ],
      [
        "SELECT Citizenship FROM singer WHERE Birth_Year > = value INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year < value",
        -10.955184936523438
      ],
      [
        "SELECT Citizenship FROM singer WHERE Birth_Year > value INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year = value",
        -11.213665008544922
      ],
      [
        "SELECT Citizenship FROM singer WHERE Birth_Year LIKE value INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year > value",
        -11.956561088562012
      ],
      [
        "SELECT Citizenship FROM singer WHERE Birth_Year < value INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year < value",
        -12.341070175170898
      ],
      [
        "SELECT Citizenship FROM singer WHERE Birth_Year > value INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year IN ( SELECT Max ( Birth_Year ) FROM singer )",
        -12.442500591278076
      ],
      [
        "SELECT Citizenship FROM singer WHERE Birth_Year BETWEEN value AND value",
        -12.928800582885742
      ],
      [
        "SELECT Citizenship FROM singer WHERE Birth_Year LIKE value INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year < value",
        -12.961382865905762
      ],
      [
        "SELECT Citizenship FROM singer WHERE Birth_Year > value INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year IN ( SELECT Citizenship FROM singer )",
        -13.4889075756073
      ],
      [
        "SELECT Citizenship FROM singer WHERE Birth_Year BETWEEN value AND value INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year > value",
        -13.5671968460083
      ],
      [
        "SELECT Citizenship FROM singer WHERE Birth_Year > value INTERSECT SELECT Citizenship FROM singer GROUP BY Citizenship HAVING Count ( * ) < value",
        -13.579835891723633
      ],
      [
        "SELECT Citizenship FROM singer WHERE Birth_Year > = value INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year > = value",
        -13.591900825500488
      ],
      [
        "SELECT Citizenship FROM singer WHERE Birth_Year > value INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year > = value",
        -13.602994918823242
      ],
      [
        "SELECT Citizenship FROM singer WHERE Birth_Year = value INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year < value",
        -13.818354606628418
      ]
    ],
    "predicted_parse_with_values": "SELECT Citizenship FROM singer WHERE Birth_Year > 1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year < 1955",
    "predicted_parse": "SELECT Citizenship FROM singer WHERE Birth_Year > value INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year < value",
    "predicted_parse_explanation": [
      "Step 1: find the citizenship in singer table whose birth year greater than 1945",
      "Step 2: find the citizenship in singer table whose birth year less than 1955",
      "Step 3: show the rows that are in both the results of step 1 and step 2"
    ],
    "template_feedback": "in step 1 , consider the birth year less than 1945 conditions in place of the birth year greater than 1945 conditions . in step 2 , consider the birth year greater than 1955 conditions in place of the birth year less than 1955 conditions .",
    "primary_span": [
      [
        4,
        11
      ],
      [
        27,
        34
      ]
    ],
    "secondary_span": [
      [
        12,
        22
      ],
      [
        35,
        45
      ]
    ],
    "edits": [
      "birth year less than 1945",
      "birth year greater than 1945",
      "birth year greater than 1955",
      "birth year less than 1955"
    ],
    "edits_original": "< where > add birth year less than 1945 </ where > < where > remove birth year greater than 1945 </ where > < where > add birth year greater than 1955 </ where > < where > remove birth year less than 1955 </ where >"
  },
  {
    "db_id": "car_1",
    "feedback": "Countries need to be put on behalf of continents.",
    "question": "How many countries exist?",
    "gold_parse": "SELECT count(*) FROM COUNTRIES",
    "beam": [
      [
        "SELECT Count ( * ) FROM continents",
        -1.9073486328125e-05
      ],
      [
        "SELECT Sum ( * ) FROM continents",
        -12.407729685306549
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM continents",
        -12.997554779052734
      ],
      [
        "SELECT Sum ( Continent ) FROM countries",
        -13.295982837677002
      ],
      [
        "SELECT Count ( * ) FROM countries GROUP BY CountryId",
        -13.745386123657227
      ],
      [
        "SELECT Sum ( CountryId ) FROM countries",
        -13.844122409820557
      ],
      [
        "SELECT Count ( * ) FROM countries WHERE CountryName = value",
        -14.151626825332642
      ],
      [
        "SELECT Count ( * ) , CountryName FROM countries",
        -14.486527025699615
      ],
      [
        "SELECT Sum ( Continent ) FROM continents",
        -14.582224607467651
      ],
      [
        "SELECT Count ( * ) , Continent FROM countries",
        -15.077553510665894
      ],
      [
        "SELECT Count ( Count ( * ) ) FROM continents",
        -15.086935043334961
      ],
      [
        "SELECT Avg ( Continent ) FROM countries",
        -15.449537098407745
      ],
      [
        "SELECT Sum ( CountryName ) FROM countries",
        -15.570470571517944
      ],
      [
        "SELECT Count ( * ) FROM countries ORDER BY Continent Desc",
        -15.79421180486679
      ],
      [
        "SELECT Avg ( * ) FROM continents",
        -16.37929391860962
      ],
      [
        "SELECT Avg ( CountryId ) FROM countries",
        -16.476850748062134
      ],
      [
        "SELECT Max ( Continent ) FROM countries",
        -16.504980266094208
      ],
      [
        "SELECT Count ( DISTINCT Continent ) FROM countries",
        -16.722725868225098
      ],
      [
        "SELECT Count ( DISTINCT * ) FROM continents",
        -16.95623016357422
      ],
      [
        "SELECT Count ( * ) FROM continents LIMIT value",
        -16.96702766418457
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM continents",
    "predicted_parse": "SELECT Count ( * ) FROM continents",
    "predicted_parse_explanation": [
      "find the number of rows in continents table"
    ],
    "template_feedback": "use countries table in place of continents table .",
    "primary_span": [
      [
        0,
        2
      ]
    ],
    "secondary_span": [
      [
        3,
        8
      ]
    ],
    "edits": [
      "countries",
      "continents"
    ],
    "edits_original": "< from > add countries </ from > < from > remove continents </ from >"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "feedback": "Paragraph id , paragraph text and paragraphs table have to be use not the document id , template id and documents table.",
    "question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.",
    "gold_parse": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'",
    "beam": [
      [
        "SELECT Document_ID , Template_ID FROM Documents WHERE Document_Name = value",
        -0.4465208053588867
      ],
      [
        "SELECT Template_ID , Template_ID FROM Documents WHERE Document_Name = value",
        -1.5555095672607422
      ],
      [
        "SELECT Document_ID , Document_ID FROM Documents WHERE Document_Name = value",
        -2.4243454933166504
      ],
      [
        "SELECT Template_ID , Document_ID FROM Documents WHERE Document_Name = value",
        -3.0268750190734863
      ],
      [
        "SELECT Template_ID , Document_Name FROM Documents WHERE Document_Name = value",
        -5.110461473464966
      ],
      [
        "SELECT Document_ID , Document_Name FROM Documents WHERE Document_Name = value",
        -6.247785568237305
      ],
      [
        "SELECT T1.Document_ID , T2.Paragraph_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Name = value",
        -6.738480567932129
      ],
      [
        "SELECT T2.Document_ID , T1.Date_Effective_To FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Document_Name = value",
        -7.320241928100586
      ],
      [
        "SELECT T1.Template_ID , T2.Paragraph_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Name = value",
        -7.379220485687256
      ],
      [
        "SELECT T2.Paragraph_ID , T1.Template_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Name = value",
        -7.472116947174072
      ],
      [
        "SELECT T2.Template_ID , T1.Date_Effective_To FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Document_Name = value",
        -7.740672588348389
      ],
      [
        "SELECT T1.Template_ID , T2.Document_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Name = value",
        -8.807594776153564
      ],
      [
        "SELECT T1.Document_ID , T2.Document_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Name = value",
        -8.820770263671875
      ],
      [
        "SELECT T2.Paragraph_ID , T1.Document_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Name = value",
        -9.034661769866943
      ],
      [
        "SELECT Template_ID , Document_Description FROM Documents WHERE Document_Name = value",
        -9.935344696044922
      ],
      [
        "SELECT T1.Template_ID , T2.Paragraph_Text FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Name = value",
        -10.153943061828613
      ],
      [
        "SELECT T1.Document_ID , T2.Paragraph_Text FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Name = value",
        -10.403403282165527
      ],
      [
        "SELECT Document_ID , Document_Description FROM Documents WHERE Document_Name = value",
        -10.683219909667969
      ],
      [
        "SELECT T2.Document_ID , T1.Template_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Name = value",
        -11.501360893249512
      ],
      [
        "SELECT Document_ID , Template_ID FROM Documents WHERE Document_Name LIKE value",
        -11.65365219116211
      ]
    ],
    "predicted_parse_with_values": "SELECT Document_ID , Template_ID FROM Documents WHERE Document_Name = \"Welcome to NY\"",
    "predicted_parse": "SELECT Document_ID , Template_ID FROM Documents WHERE Document_Name = value",
    "predicted_parse_explanation": [
      "find the document id and template id in documents table whose document name equals Welcome to NY"
    ],
    "template_feedback": "additionally use the information from the paragraphs table besides the documents table . find paragraph text and paragraph id in place of documents 's document id and template id .",
    "primary_span": [
      [
        0,
        7
      ],
      [
        13,
        18
      ]
    ],
    "secondary_span": [
      [
        8,
        12
      ],
      [
        19,
        29
      ]
    ],
    "edits": [
      "paragraph id",
      "paragraph text",
      "document id",
      "template id",
      "paragraphs"
    ],
    "edits_original": "< select > add paragraph id </ select > < select > add paragraph text </ select > < select > remove document id </ select > < select > remove template id </ select > < from > add paragraphs </ from >"
  },
  {
    "db_id": "world_1",
    "feedback": "Swap GNPOid and continent with life expectancy and name name .",
    "question": "What are the population and life expectancies in Brazil?",
    "gold_parse": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"",
    "beam": [
      [
        "SELECT Population , GNPOld FROM country WHERE Continent = value",
        -0.11453437805175781
      ],
      [
        "SELECT Population , LifeExpectancy FROM country WHERE Continent = value",
        -2.6408729553222656
      ],
      [
        "SELECT Population , Capital FROM country WHERE Continent = value",
        -3.455465316772461
      ],
      [
        "SELECT LifeExpectancy , GNPOld FROM country WHERE Continent = value",
        -5.702142715454102
      ],
      [
        "SELECT LifeExpectancy , Capital FROM country WHERE Continent = value",
        -6.6019439697265625
      ],
      [
        "SELECT Population , Population FROM country WHERE Continent = value",
        -8.01795482635498
      ],
      [
        "SELECT LifeExpectancy , LifeExpectancy FROM country WHERE Continent = value",
        -8.537171363830566
      ],
      [
        "SELECT Population , GNP FROM country WHERE Continent = value",
        -9.723930358886719
      ],
      [
        "SELECT LifeExpectancy , Population FROM country WHERE Continent = value",
        -10.501626968383789
      ],
      [
        "SELECT LifeExpectancy , GNP FROM country WHERE Continent = value",
        -11.98601245880127
      ],
      [
        "SELECT Population , GNPOld FROM country",
        -12.27281665802002
      ],
      [
        "SELECT Population , GNPOld FROM country WHERE Name = value",
        -12.276673316955566
      ],
      [
        "SELECT Population , GNPOld , Continent FROM country WHERE Continent = value",
        -12.609333992004395
      ],
      [
        "SELECT GNP , GNPOld FROM country WHERE Continent = value",
        -12.848749160766602
      ],
      [
        "SELECT Population FROM country WHERE Continent = value",
        -12.95206069946289
      ],
      [
        "SELECT Capital , GNPOld FROM country WHERE Continent = value",
        -13.271108627319336
      ],
      [
        "SELECT GNP , Capital FROM country WHERE Continent = value",
        -13.38826847076416
      ],
      [
        "SELECT Population , Sum ( GNPOld ) FROM country WHERE Continent = value",
        -13.626710891723633
      ],
      [
        "SELECT Population , LifeExpectancy , Capital FROM country WHERE Continent = value",
        -13.89323616027832
      ],
      [
        "SELECT Capital , Capital FROM country WHERE Continent = value",
        -14.237153053283691
      ]
    ],
    "predicted_parse_with_values": "SELECT Population , GNPOld FROM country WHERE Continent = \"Brazil\"",
    "predicted_parse": "SELECT Population , GNPOld FROM country WHERE Continent = value",
    "predicted_parse_explanation": [
      "find the population and gnp old in country table whose continent equals Brazil"
    ],
    "template_feedback": "consider the name equals Brazil conditions in place of the continent equals Brazil conditions . find life expectancy in place of gnp old .",
    "primary_span": [
      [
        0,
        5
      ],
      [
        15,
        17
      ]
    ],
    "secondary_span": [
      [
        6,
        14
      ],
      [
        18,
        23
      ]
    ],
    "edits": [
      "life expectancy",
      "gnp old",
      "name equals \"Brazil\"",
      "continent equals \"Brazil\""
    ],
    "edits_original": "< select > add life expectancy </ select > < select > remove gnp old </ select > < where > add name equals \" Brazil \" </ where > < where > remove continent equals \" Brazil \" </ where >"
  },
  {
    "db_id": "world_1",
    "feedback": "you have to calculate the percentage in step 1 and use language in countrylanguage. be certain the name is aruba.  ",
    "question": "Which language is the most popular in Aruba?",
    "gold_parse": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1",
    "beam": [
      [
        "SELECT Code2 FROM country GROUP BY Code2 ORDER BY Count ( * ) Desc LIMIT value",
        -0.38524436950683594
      ],
      [
        "SELECT Code2 FROM country WHERE Continent = value GROUP BY Code2 ORDER BY Count ( * ) Desc LIMIT value",
        -1.647883415222168
      ],
      [
        "SELECT Code2 FROM country GROUP BY Name ORDER BY Count ( * ) Desc LIMIT value",
        -3.3621459007263184
      ],
      [
        "SELECT Code2 FROM country GROUP BY LocalName ORDER BY Count ( * ) Desc LIMIT value",
        -3.5715250968933105
      ],
      [
        "SELECT T1.Code2 FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T2.Language ORDER BY Count ( * ) Desc LIMIT value",
        -4.796713829040527
      ],
      [
        "SELECT Code2 FROM country WHERE Continent = ( SELECT Code2 FROM country ORDER BY LifeExpectancy Desc LIMIT value )",
        -4.863738059997559
      ],
      [
        "SELECT Code2 FROM country GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value",
        -4.898263931274414
      ],
      [
        "SELECT Name FROM country GROUP BY Code2 ORDER BY Count ( * ) Desc LIMIT value",
        -5.402504920959473
      ],
      [
        "SELECT Code2 FROM country WHERE Continent = value GROUP BY LocalName ORDER BY Count ( * ) Desc LIMIT value",
        -5.624772548675537
      ],
      [
        "SELECT Code2 FROM country WHERE Continent = ( SELECT Continent FROM country ORDER BY LifeExpectancy Desc LIMIT value )",
        -5.8142805099487305
      ],
      [
        "SELECT Code2 FROM country WHERE Continent = ( SELECT Code2 FROM country ORDER BY LifeExpectancy Desc LIMIT value ) GROUP BY Code2 ORDER BY Count ( * ) Desc LIMIT value",
        -5.901425838470459
      ],
      [
        "SELECT Code2 FROM country WHERE Continent = value GROUP BY Name ORDER BY Count ( * ) Desc LIMIT value",
        -6.282154083251953
      ],
      [
        "SELECT Code2 FROM country WHERE Continent = ( SELECT Name FROM country ORDER BY LifeExpectancy Desc LIMIT value )",
        -6.432661533355713
      ],
      [
        "SELECT Code2 FROM country WHERE Continent = ( SELECT Continent FROM country ORDER BY LifeExpectancy Desc LIMIT value ) GROUP BY Code2 ORDER BY Count ( * ) Desc LIMIT value",
        -6.436905860900879
      ],
      [
        "SELECT Code2 FROM country WHERE Continent = ( SELECT Continent FROM country GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value )",
        -6.617130756378174
      ],
      [
        "SELECT Name FROM country WHERE Continent = value GROUP BY Code2 ORDER BY Count ( * ) Desc LIMIT value",
        -6.622749328613281
      ],
      [
        "SELECT Code2 FROM country WHERE Continent = ( SELECT Code2 FROM country GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value )",
        -6.692043781280518
      ],
      [
        "SELECT Code2 FROM country GROUP BY HeadOfState ORDER BY Count ( * ) Desc LIMIT value",
        -6.837808132171631
      ],
      [
        "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Code2 ORDER BY Count ( * ) Desc LIMIT value",
        -7.1085100173950195
      ],
      [
        "SELECT Code2 FROM country ORDER BY LifeExpectancy Desc LIMIT value",
        -7.156648635864258
      ]
    ],
    "predicted_parse_with_values": "SELECT Code2 FROM country GROUP BY Code2 ORDER BY Count ( * ) Desc LIMIT 1",
    "predicted_parse": "SELECT Code2 FROM country GROUP BY Code2 ORDER BY Count ( * ) Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of code2 in country table",
      "Step 2: find the code2 in country table with largest value in the results of step 1"
    ],
    "template_feedback": "in step 1 , additionally use the information from the countrylanguage table besides the country table . additionally make sure that name equals Aruba . do not find for each value of code2 . in step 2 , find language in place of code2 . order the results by percentage in place of number of rows .",
    "primary_span": [
      [
        4,
        11
      ],
      [
        17,
        24
      ],
      [
        25,
        33
      ],
      [
        38,
        39
      ],
      [
        45,
        49
      ]
    ],
    "secondary_span": [
      [
        12,
        16
      ],
      [
        40,
        44
      ],
      [
        50,
        56
      ]
    ],
    "edits": [
      "language",
      "code2",
      "countrylanguage",
      "name equals \"Aruba\"",
      "code2",
      "percentage",
      "number of rows"
    ],
    "edits_original": "< select > add language </ select > < select > remove code2 </ select > < from > add countrylanguage </ from > < where > add name equals \" Aruba \" </ where > < groupBy > remove code2 </ groupBy > < orderBy > add percentage </ orderBy > < orderBy > remove number of rows </ orderBy >"
  },
  {
    "db_id": "dog_kennels",
    "feedback": "Find number of rows of distinct professional id in treatments table .",
    "question": "How many professionals have performed any treatment to dogs?",
    "gold_parse": "SELECT count(DISTINCT professional_id) FROM Treatments",
    "beam": [
      [
        "SELECT Count ( * ) FROM Dogs WHERE weight = value",
        -0.0914463996887207
      ],
      [
        "SELECT Count ( DISTINCT T2.professional_id ) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.weight = value",
        -2.4501867294311523
      ],
      [
        "SELECT Count ( * ) FROM Treatments WHERE dog_id = value",
        -8.358760356903076
      ],
      [
        "SELECT Count ( * ) FROM Breeds WHERE breed_name = value",
        -8.657171726226807
      ],
      [
        "SELECT Count ( * ) FROM Dogs WHERE gender = value",
        -8.868731021881104
      ],
      [
        "SELECT Count ( DISTINCT professional_id ) FROM Treatments",
        -9.544008731842041
      ],
      [
        "SELECT Count ( * ) FROM Breeds",
        -9.613255977630615
      ],
      [
        "SELECT Count ( * ) FROM Treatments WHERE treatment_type_code = value",
        -9.88999319076538
      ],
      [
        "SELECT Count ( * ) FROM Dogs WHERE name = value",
        -10.377183437347412
      ],
      [
        "SELECT Count ( * ) FROM Treatments WHERE date_of_treatment = value",
        -10.65507173538208
      ],
      [
        "SELECT Count ( DISTINCT T2.role_code ) FROM Dogs AS T1 JOIN Professionals AS T2 JOIN Treatments AS T3 ON T1.dog_id = T3.dog_id AND T3.professional_id = T2.professional_id WHERE T1.weight = value",
        -10.656574249267578
      ],
      [
        "SELECT Count ( DISTINCT professional_id ) FROM Treatments WHERE dog_id = value",
        -10.935698509216309
      ],
      [
        "SELECT Count ( DISTINCT T1.owner_id ) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T2.weight = value",
        -10.954408645629883
      ],
      [
        "SELECT Count ( T2.professional_id ) FROM Dogs AS T1 JOIN Professionals AS T2 JOIN Treatments AS T3 ON T1.dog_id = T3.dog_id AND T3.professional_id = T2.professional_id WHERE T1.weight = value",
        -10.965850353240967
      ],
      [
        "SELECT Count ( DISTINCT T3.professional_id ) FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id WHERE T1.breed_name = value",
        -11.063006401062012
      ],
      [
        "SELECT Count ( * ) FROM Dogs WHERE dog_id = value",
        -11.145508289337158
      ],
      [
        "SELECT Count ( T1.treatment_type_code ) FROM Treatment_Types AS T1 JOIN Dogs AS T2 JOIN Treatments AS T3 ON T1.treatment_type_code = T3.treatment_type_code AND T3.dog_id = T2.dog_id WHERE T2.weight = value",
        -11.209572315216064
      ],
      [
        "SELECT Count ( DISTINCT T2.professional_id ) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.gender = value",
        -11.367887496948242
      ],
      [
        "SELECT Count ( * ) FROM Professionals WHERE state = value",
        -11.435883045196533
      ],
      [
        "SELECT Count ( * ) FROM Professionals WHERE first_name = value",
        -11.539791584014893
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM Dogs WHERE weight = 7.57",
    "predicted_parse": "SELECT Count ( * ) FROM Dogs WHERE weight = value",
    "predicted_parse_explanation": [
      "find the number of rows in dogs table whose weight equals 7.57"
    ],
    "template_feedback": "use treatments table in place of dogs table . remove the weight equals 7.57 conditions . find number of different professional id in place of number of rows .",
    "primary_span": [
      [
        0,
        2
      ],
      [
        9,
        15
      ],
      [
        16,
        21
      ]
    ],
    "secondary_span": [
      [
        3,
        8
      ],
      [
        22,
        28
      ]
    ],
    "edits": [
      "number of distinct professional id",
      "number of rows",
      "treatments",
      "dogs",
      "weight equals 7.57"
    ],
    "edits_original": "< select > add number of distinct professional id </ select > < select > remove number of rows </ select > < from > add treatments </ from > < from > remove dogs </ from > < where > remove weight equals 7.57 </ where >"
  },
  {
    "db_id": "network_1",
    "feedback": "Ensure to find student id in likes table in step 1.",
    "question": "What is the name of the high schooler who has the greatest number of likes?",
    "gold_parse": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
    "beam": [
      [
        "SELECT name FROM Highschooler GROUP BY grade ORDER BY Count ( * ) Desc LIMIT value",
        -0.4118328094482422
      ],
      [
        "SELECT name FROM Highschooler GROUP BY grade , grade ORDER BY Count ( * ) Desc LIMIT value",
        -1.9277582168579102
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id GROUP BY T1.grade , T2.liked_id ORDER BY Count ( * ) Desc LIMIT value",
        -2.417297601699829
      ],
      [
        "SELECT name FROM Highschooler GROUP BY grade , name ORDER BY Count ( * ) Desc LIMIT value",
        -2.7597705125808716
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id GROUP BY T2.student_id ORDER BY Count ( * ) Desc LIMIT value",
        -4.594456672668457
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id GROUP BY T1.grade , T2.student_id ORDER BY Count ( * ) Desc LIMIT value",
        -4.78585147857666
      ],
      [
        "SELECT name FROM Highschooler GROUP BY name , grade ORDER BY Count ( * ) Desc LIMIT value",
        -5.01863956451416
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id GROUP BY T2.liked_id ORDER BY Count ( * ) Desc LIMIT value",
        -5.2389421463012695
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id GROUP BY T2.liked_id , T1.grade ORDER BY Count ( * ) Desc LIMIT value",
        -5.752694606781006
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T1.grade , T2.friend_id ORDER BY Count ( * ) Desc LIMIT value",
        -6.576590061187744
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id ORDER BY Count ( * ) Desc LIMIT value",
        -6.673894882202148
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id GROUP BY T2.student_id , T1.grade ORDER BY Count ( * ) Desc LIMIT value",
        -7.016308307647705
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T1.grade , T2.student_id ORDER BY Count ( * ) Desc LIMIT value",
        -7.245301246643066
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id , T1.grade ORDER BY Count ( * ) Desc LIMIT value",
        -8.20541763305664
      ],
      [
        "SELECT grade FROM Highschooler GROUP BY grade ORDER BY Count ( * ) Desc LIMIT value",
        -8.2614164352417
      ],
      [
        "SELECT name FROM Highschooler ORDER BY grade Desc LIMIT value",
        -8.3339204788208
      ],
      [
        "SELECT name FROM Highschooler GROUP BY name ORDER BY Count ( * ) Desc LIMIT value",
        -8.597273826599121
      ],
      [
        "SELECT name FROM Highschooler GROUP BY grade , * ORDER BY Count ( * ) Desc LIMIT value",
        -8.711374759674072
      ],
      [
        "SELECT name FROM Highschooler GROUP BY grade , ID ORDER BY Count ( * ) Desc LIMIT value",
        -8.90576696395874
      ],
      [
        "SELECT name FROM Highschooler GROUP BY grade , Count ( * ) ORDER BY Count ( * ) Desc LIMIT value",
        -9.332447052001953
      ]
    ],
    "predicted_parse_with_values": "SELECT name FROM Highschooler GROUP BY grade ORDER BY Count ( * ) Desc LIMIT 1",
    "predicted_parse": "SELECT name FROM Highschooler GROUP BY grade ORDER BY Count ( * ) Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of grade in high schooler table",
      "Step 2: find the name in high schooler table with largest value in the results of step 1"
    ],
    "template_feedback": "in step 1 , additionally use the information from the likes table besides the high schooler table . find for each value of student id in place of grade .",
    "primary_span": [
      [
        4,
        11
      ],
      [
        18,
        24
      ]
    ],
    "secondary_span": [
      [
        12,
        17
      ],
      [
        25,
        29
      ]
    ],
    "edits": [
      "likes",
      "student id",
      "grade"
    ],
    "edits_original": "< from > add likes </ from > < groupBy > add student id </ groupBy > < groupBy > remove grade </ groupBy >"
  },
  {
    "db_id": "student_transcripts_tracking",
    "feedback": "I want table of courses instead of table of addresses.",
    "question": "How many courses in total are listed?",
    "gold_parse": "SELECT count(*) FROM Courses",
    "beam": [
      [
        "SELECT Count ( * ) FROM Addresses",
        -4.76837158203125e-05
      ],
      [
        "SELECT Sum ( course_name ) FROM Courses",
        -10.728966534137726
      ],
      [
        "SELECT Sum ( * ) FROM Addresses",
        -12.308323621749878
      ],
      [
        "SELECT Count ( * ) FROM Courses WHERE course_name = value",
        -12.847787380218506
      ],
      [
        "SELECT Count ( Count ( * ) ) FROM Addresses",
        -13.092928886413574
      ],
      [
        "SELECT Sum ( course_id ) FROM Courses",
        -13.569973945617676
      ],
      [
        "SELECT Sum ( DISTINCT course_name ) FROM Courses",
        -13.671626389026642
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM Addresses",
        -13.837386131286621
      ],
      [
        "SELECT Count ( DISTINCT course_name ) FROM Courses",
        -13.858339309692383
      ],
      [
        "SELECT Count ( * ) , course_name FROM Courses",
        -14.274977207183838
      ],
      [
        "SELECT Count ( * ) FROM Courses ORDER BY course_name Asc",
        -14.615167341195047
      ],
      [
        "SELECT Count ( * ) FROM Courses GROUP BY course_name",
        -14.636628150939941
      ],
      [
        "SELECT Avg ( course_name ) FROM Courses",
        -14.773395776748657
      ],
      [
        "SELECT Avg ( * ) FROM Addresses",
        -15.312401294708252
      ],
      [
        "SELECT Count ( Avg ( * ) ) FROM Addresses",
        -15.662080764770508
      ],
      [
        "SELECT Count ( * ) , course_name FROM Courses GROUP BY course_name",
        -15.747682094573975
      ],
      [
        "SELECT Count ( * ) FROM Courses ORDER BY course_name Desc",
        -16.113338589668274
      ],
      [
        "SELECT Sum ( course_description ) FROM Courses",
        -16.32345151901245
      ],
      [
        "SELECT Avg ( course_id ) FROM Courses",
        -16.52721118927002
      ],
      [
        "SELECT Count ( * ) FROM Addresses AS T1 UNION SELECT T2.course_name FROM Courses AS T2",
        -16.968380451202393
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM Addresses",
    "predicted_parse": "SELECT Count ( * ) FROM Addresses",
    "predicted_parse_explanation": [
      "find the number of rows in addresses table"
    ],
    "template_feedback": "use courses table in place of addresses table .",
    "primary_span": [
      [
        0,
        2
      ]
    ],
    "secondary_span": [
      [
        3,
        8
      ]
    ],
    "edits": [
      "courses",
      "addresses"
    ],
    "edits_original": "< from > add courses </ from > < from > remove addresses </ from >"
  },
  {
    "db_id": "battle_death",
    "feedback": "Search for the word 'east' from the note in step 2.",
    "question": "What are the notes of the death events which has substring 'East'?",
    "gold_parse": "SELECT note FROM death WHERE note LIKE '%East%'",
    "beam": [
      [
        "SELECT T3.note FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle JOIN death AS T3 ON T2.id = T3.caused_by_ship_id WHERE T1.date LIKE value",
        -0.50830078125
      ],
      [
        "SELECT T2.note FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id WHERE T1.name LIKE value",
        -1.3546686172485352
      ],
      [
        "SELECT note FROM death WHERE note LIKE value",
        -2.4063987731933594
      ],
      [
        "SELECT T3.note FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle JOIN death AS T3 ON T2.id = T3.caused_by_ship_id WHERE T1.name LIKE value",
        -3.3998630046844482
      ],
      [
        "SELECT T2.note FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id WHERE T1.location LIKE value",
        -4.846065521240234
      ],
      [
        "SELECT note FROM death WHERE killed LIKE value",
        -5.601365566253662
      ],
      [
        "SELECT T3.note FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle JOIN death AS T3 ON T2.id = T3.caused_by_ship_id WHERE T1.result LIKE value",
        -5.7336554527282715
      ],
      [
        "SELECT note FROM death WHERE injured LIKE value",
        -6.446225166320801
      ],
      [
        "SELECT T2.note FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id WHERE T1.tonnage LIKE value",
        -7.835931777954102
      ],
      [
        "SELECT T2.note FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id WHERE T1.disposition_of_ship LIKE value",
        -9.110258102416992
      ],
      [
        "SELECT T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.name LIKE value",
        -10.902502059936523
      ],
      [
        "SELECT T3.note FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle JOIN death AS T3 ON T2.id = T3.caused_by_ship_id WHERE T1.latin_commander LIKE value",
        -11.212730407714844
      ],
      [
        "SELECT date FROM battle WHERE date LIKE value",
        -11.600893020629883
      ],
      [
        "SELECT T3.note FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle JOIN death AS T3 ON T2.id = T3.caused_by_ship_id WHERE T1.bulgarian_commander LIKE value",
        -12.61921215057373
      ],
      [
        "SELECT T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle JOIN death AS T3 ON T2.id = T3.caused_by_ship_id WHERE T3.note LIKE value",
        -12.915266513824463
      ],
      [
        "SELECT note FROM death WHERE killed BETWEEN value AND value",
        -12.957043170928955
      ],
      [
        "SELECT date FROM battle WHERE name LIKE value",
        -13.140608549118042
      ],
      [
        "SELECT note FROM death WHERE injured BETWEEN value AND value",
        -13.98301887512207
      ],
      [
        "SELECT T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.location LIKE value",
        -14.052813053131104
      ],
      [
        "SELECT note FROM death",
        -15.960968017578125
      ]
    ],
    "predicted_parse_with_values": "SELECT T3.note FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle JOIN death AS T3 ON T2.id = T3.caused_by_ship_id WHERE T1.date LIKE \"East\"",
    "predicted_parse": "SELECT T3.note FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle JOIN death AS T3 ON T2.id = T3.caused_by_ship_id WHERE T1.date LIKE value",
    "predicted_parse_explanation": [
      "Step 1: for each row in battle table , find the corresponding rows in ship table and in death table",
      "Step 2: find the note of the results of step 1 whose date like East"
    ],
    "template_feedback": "in step 1 , do not use the battle table and ship table . in step 2 , consider the note like % East % conditions in place of the date like East conditions .",
    "primary_span": [
      [
        4,
        13
      ],
      [
        18,
        25
      ]
    ],
    "secondary_span": [
      [
        4,
        13
      ],
      [
        26,
        34
      ]
    ],
    "edits": [
      "battle",
      "ship",
      "note like \"%East%\"",
      "date like \"East\""
    ],
    "edits_original": "< from > remove battle </ from > < from > remove ship </ from > < where > add note like \" % East % \" </ where > < where > remove date like \" East \" </ where >"
  },
  {
    "db_id": "course_teach",
    "feedback": "Exchange course table with teacher table .",
    "question": "How many teachers are there?",
    "gold_parse": "SELECT count(*) FROM teacher",
    "beam": [
      [
        "SELECT Count ( * ) FROM course",
        -1.049041748046875e-05
      ],
      [
        "SELECT Sum ( * ) FROM course",
        -12.65207839012146
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM course",
        -13.560286521911621
      ],
      [
        "SELECT Count ( * ) FROM teacher WHERE Hometown = value",
        -13.630189895629883
      ],
      [
        "SELECT Sum ( Teacher_ID ) FROM teacher",
        -14.105971574783325
      ],
      [
        "SELECT Avg ( * ) FROM course",
        -14.73497462272644
      ],
      [
        "SELECT Count ( * ) , Name FROM teacher",
        -14.795637249946594
      ],
      [
        "SELECT Count ( Count ( * ) ) FROM course",
        -14.964415550231934
      ],
      [
        "SELECT Count ( * ) FROM teacher WHERE Name = value",
        -15.040467262268066
      ],
      [
        "SELECT Count ( * ) FROM teacher GROUP BY Teacher_ID",
        -15.059301376342773
      ],
      [
        "SELECT Count ( * ) FROM teacher GROUP BY Name",
        -15.07386565208435
      ],
      [
        "SELECT Count ( * ) FROM course_arrange GROUP BY Teacher_ID",
        -15.180646777153015
      ],
      [
        "SELECT Avg ( Teacher_ID ) FROM teacher",
        -15.616098165512085
      ],
      [
        "SELECT Count ( * ) FROM teacher ORDER BY Teacher_ID Desc LIMIT value",
        -15.99117374420166
      ],
      [
        "SELECT Sum ( Hometown ) FROM teacher",
        -16.4084255695343
      ],
      [
        "SELECT Count ( * ) FROM course LIMIT value",
        -17.03117084503174
      ],
      [
        "SELECT Count ( DISTINCT * ) FROM course",
        -17.25309658050537
      ],
      [
        "SELECT Sum ( Name ) FROM teacher",
        -17.35026741027832
      ],
      [
        "SELECT Max ( * ) FROM course",
        -17.457791805267334
      ],
      [
        "SELECT Teacher_ID FROM teacher",
        -17.72667956352234
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM course",
    "predicted_parse": "SELECT Count ( * ) FROM course",
    "predicted_parse_explanation": [
      "find the number of rows in course table"
    ],
    "template_feedback": "use teacher table in place of course table .",
    "primary_span": [
      [
        0,
        2
      ]
    ],
    "secondary_span": [
      [
        3,
        8
      ]
    ],
    "edits": [
      "teacher",
      "course"
    ],
    "edits_original": "< from > add teacher </ from > < from > remove course </ from >"
  },
  {
    "db_id": "network_1",
    "feedback": "Confirm that the id of Highschooler table is available there in both friend and likes table.",
    "question": "Show the ids of high schoolers who have friends and are also liked by someone else.",
    "gold_parse": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes",
    "beam": [
      [
        "SELECT T1.ID FROM Highschooler AS T1 INTERSECT SELECT T2.liked_id FROM Likes AS T2",
        -0.2161407470703125
      ],
      [
        "SELECT T1.student_id FROM Friend AS T1 INTERSECT SELECT T2.liked_id FROM Likes AS T2",
        -1.8562145233154297
      ],
      [
        "SELECT T1.ID FROM Highschooler AS T1 INTERSECT SELECT T2.student_id FROM Likes AS T2",
        -3.4888811111450195
      ],
      [
        "SELECT T1.student_id FROM Friend AS T1 INTERSECT SELECT T2.student_id FROM Likes AS T2",
        -5.231398582458496
      ],
      [
        "SELECT T1.friend_id FROM Friend AS T1 INTERSECT SELECT T2.liked_id FROM Likes AS T2",
        -6.971261024475098
      ],
      [
        "SELECT T1.ID FROM Highschooler AS T1 INTERSECT SELECT T2.liked_id FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id WHERE T1.name = value",
        -8.35305643081665
      ],
      [
        "SELECT T1.ID FROM Highschooler AS T1 INTERSECT SELECT T2.liked_id FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id WHERE T1.grade = value",
        -8.607614517211914
      ],
      [
        "SELECT student_id FROM Likes INTERSECT SELECT liked_id FROM Likes",
        -8.779071807861328
      ],
      [
        "SELECT T1.ID FROM Highschooler AS T1 INTERSECT SELECT T2.friend_id FROM Friend AS T2",
        -9.227311134338379
      ],
      [
        "SELECT T1.ID FROM Highschooler AS T1 INTERSECT SELECT T2.student_id FROM Friend AS T2",
        -9.327276229858398
      ],
      [
        "SELECT T1.ID FROM Highschooler AS T1 INTERSECT SELECT T2.student_id FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id WHERE T1.grade = value",
        -9.337182521820068
      ],
      [
        "SELECT T1.ID FROM Highschooler AS T1 INTERSECT SELECT T2.student_id FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id WHERE T1.name = value",
        -9.411373615264893
      ],
      [
        "SELECT T1.student_id FROM Friend AS T1 INTERSECT SELECT T3.liked_id FROM Highschooler AS T2 JOIN Likes AS T3 ON T2.ID = T3.liked_id WHERE T2.name = value",
        -9.620809078216553
      ],
      [
        "SELECT liked_id FROM Likes INTERSECT SELECT liked_id FROM Likes",
        -9.748372077941895
      ],
      [
        "SELECT T1.student_id FROM Friend AS T1 INTERSECT SELECT T3.liked_id FROM Highschooler AS T2 JOIN Likes AS T3 ON T2.ID = T3.liked_id WHERE T2.grade = value",
        -10.245133876800537
      ],
      [
        "SELECT T1.friend_id FROM Friend AS T1 INTERSECT SELECT T2.student_id FROM Likes AS T2",
        -10.425986289978027
      ],
      [
        "SELECT student_id FROM Friend INTERSECT SELECT friend_id FROM Friend",
        -10.550015449523926
      ],
      [
        "SELECT student_id FROM Friend INTERSECT SELECT student_id FROM Friend",
        -10.863407135009766
      ],
      [
        "SELECT ID FROM Highschooler",
        -13.855878829956055
      ],
      [
        "SELECT student_id FROM Friend",
        -14.87884521484375
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.ID FROM Highschooler AS T1 INTERSECT SELECT T2.liked_id FROM Likes AS T2",
    "predicted_parse": "SELECT T1.ID FROM Highschooler AS T1 INTERSECT SELECT T2.liked_id FROM Likes AS T2",
    "predicted_parse_explanation": [
      "Step 1: find the id in high schooler table",
      "Step 2: find the liked id in likes table",
      "Step 3: show the rows that are in both the results of step 1 and step 2"
    ],
    "template_feedback": "in step 1 , use friend table in place of high schooler table .",
    "primary_span": [
      [
        4,
        6
      ]
    ],
    "secondary_span": [
      [
        7,
        13
      ]
    ],
    "edits": [
      "student id",
      "id",
      "friend",
      "high schooler"
    ],
    "edits_original": "< select > add student id </ select > < select > remove id </ select > < from > add friend </ from > < from > remove high schooler </ from >"
  },
  {
    "db_id": "wta_1",
    "feedback": "The tourney name and loser entry are wrong . It has to be winner name and loser name instead .",
    "question": "find the names of loser and winner who played in the match with greatest number of minutes.",
    "gold_parse": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
    "beam": [
      [
        "SELECT tourney_name , loser_entry FROM matches ORDER BY minutes Desc LIMIT value",
        -0.7228031158447266
      ],
      [
        "SELECT loser_name , loser_entry FROM matches ORDER BY minutes Desc LIMIT value",
        -1.4598064422607422
      ],
      [
        "SELECT winner_name , loser_entry FROM matches ORDER BY minutes Desc LIMIT value",
        -1.5912971496582031
      ],
      [
        "SELECT T1.first_name , T2.loser_entry FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.minutes Desc LIMIT value",
        -3.092061996459961
      ],
      [
        "SELECT tourney_name , winner_entry FROM matches ORDER BY minutes Desc LIMIT value",
        -4.797789573669434
      ],
      [
        "SELECT loser_name , winner_entry FROM matches ORDER BY minutes Desc LIMIT value",
        -5.277779579162598
      ],
      [
        "SELECT tourney_name , loser_name FROM matches ORDER BY minutes Desc LIMIT value",
        -5.293931007385254
      ],
      [
        "SELECT winner_name , winner_entry FROM matches ORDER BY minutes Desc LIMIT value",
        -5.4110107421875
      ],
      [
        "SELECT tourney_name , winner_name FROM matches ORDER BY minutes Desc LIMIT value",
        -6.048591613769531
      ],
      [
        "SELECT loser_name , loser_name FROM matches ORDER BY minutes Desc LIMIT value",
        -6.41358757019043
      ],
      [
        "SELECT winner_name , loser_name FROM matches ORDER BY minutes Desc LIMIT value",
        -6.513457298278809
      ],
      [
        "SELECT T1.first_name , T2.winner_entry FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.minutes Desc LIMIT value",
        -7.147428512573242
      ],
      [
        "SELECT loser_name , winner_name FROM matches ORDER BY minutes Desc LIMIT value",
        -7.291906356811523
      ],
      [
        "SELECT winner_name , winner_name FROM matches ORDER BY minutes Desc LIMIT value",
        -7.386592864990234
      ],
      [
        "SELECT T1.first_name , T2.loser_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.minutes Desc LIMIT value",
        -7.60899543762207
      ],
      [
        "SELECT tourney_name , winner_hand FROM matches ORDER BY minutes Desc LIMIT value",
        -7.851889610290527
      ],
      [
        "SELECT tourney_name , loser_hand FROM matches ORDER BY minutes Desc LIMIT value",
        -7.995639801025391
      ],
      [
        "SELECT T1.first_name , T2.winner_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.minutes Desc LIMIT value",
        -8.33322811126709
      ],
      [
        "SELECT loser_name , winner_hand FROM matches ORDER BY minutes Desc LIMIT value",
        -8.638617515563965
      ],
      [
        "SELECT winner_name , winner_hand FROM matches ORDER BY minutes Desc LIMIT value",
        -8.756148338317871
      ]
    ],
    "predicted_parse_with_values": "SELECT tourney_name , loser_entry FROM matches ORDER BY minutes Desc LIMIT 1",
    "predicted_parse": "SELECT tourney_name , loser_entry FROM matches ORDER BY minutes Desc LIMIT value",
    "predicted_parse_explanation": [
      "find the tourney name and loser entry in matches table with largest value of minutes"
    ],
    "template_feedback": "find winner name and loser name in place of loser entry and tourney name .",
    "primary_span": [
      [
        0,
        5
      ]
    ],
    "secondary_span": [
      [
        6,
        14
      ]
    ],
    "edits": [
      "winner name",
      "loser name",
      "tourney name",
      "loser entry"
    ],
    "edits_original": "< select > add winner name </ select > < select > add loser name </ select > < select > remove tourney name </ select > < select > remove loser entry </ select >"
  },
  {
    "db_id": "dog_kennels",
    "feedback": "Replace owners table with dogs table in step 1.",
    "question": "Return the owner id, first name and last name of the owner who has the most dogs.",
    "gold_parse": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
    "beam": [
      [
        "SELECT owner_id , first_name , last_name FROM Owners GROUP BY owner_id ORDER BY Count ( * ) Desc LIMIT value",
        -0.0016393661499023438
      ],
      [
        "SELECT T1.owner_id , T1.first_name , T3.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id GROUP BY T1.owner_id ORDER BY Count ( * ) Desc LIMIT value",
        -7.389707565307617
      ],
      [
        "SELECT first_name , last_name , last_name FROM Owners GROUP BY owner_id ORDER BY Count ( * ) Desc LIMIT value",
        -8.21666669845581
      ],
      [
        "SELECT T1.first_name , T1.last_name , T2.weight FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id ORDER BY Count ( * ) Desc LIMIT value",
        -8.493585109710693
      ],
      [
        "SELECT T2.owner_id , T1.first_name , T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id ORDER BY Count ( * ) Desc LIMIT value",
        -8.679235458374023
      ],
      [
        "SELECT first_name , last_name , owner_id FROM Owners GROUP BY owner_id ORDER BY Count ( * ) Desc LIMIT value",
        -9.05624008178711
      ],
      [
        "SELECT owner_id , first_name FROM Owners GROUP BY owner_id ORDER BY Count ( * ) Desc LIMIT value",
        -9.401881217956543
      ],
      [
        "SELECT T1.owner_id , T1.first_name , T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY T2.owner_id ORDER BY Count ( * ) Desc LIMIT value",
        -10.35848331451416
      ],
      [
        "SELECT T1.owner_id , T3.first_name , T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id GROUP BY T1.owner_id ORDER BY Count ( * ) Desc LIMIT value",
        -10.39505386352539
      ],
      [
        "SELECT T1.owner_id , T1.first_name , T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id ORDER BY Count ( T2.weight ) Desc LIMIT value",
        -10.981825828552246
      ],
      [
        "SELECT T1.first_name , T1.last_name , T3.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id GROUP BY T1.owner_id ORDER BY Count ( * ) Desc LIMIT value",
        -11.015707969665527
      ],
      [
        "SELECT T3.professional_id , T1.first_name , T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id GROUP BY T1.owner_id ORDER BY Count ( * ) Desc LIMIT value",
        -11.639389038085938
      ],
      [
        "SELECT owner_id , first_name , last_name FROM Owners GROUP BY owner_id ORDER BY Count ( * ) Desc",
        -11.855300903320312
      ],
      [
        "SELECT T1.first_name , T1.last_name , T2.age FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id ORDER BY Count ( * ) Desc LIMIT value",
        -12.058665752410889
      ],
      [
        "SELECT T1.owner_id , T1.first_name , T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id ORDER BY T2.weight Desc LIMIT value",
        -12.117130756378174
      ],
      [
        "SELECT T1.owner_id , T1.first_name , T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id ORDER BY Count ( T2.date_of_birth ) Desc LIMIT value",
        -12.268799781799316
      ],
      [
        "SELECT T1.owner_id , T1.first_name , T1.last_name , T2.weight FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id ORDER BY Count ( * ) Desc LIMIT value",
        -12.295051097869873
      ],
      [
        "SELECT T3.first_name , T1.last_name , T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id GROUP BY T1.owner_id ORDER BY Count ( * ) Desc LIMIT value",
        -12.37077283859253
      ],
      [
        "SELECT owner_id , first_name , last_name FROM Owners GROUP BY owner_id ORDER BY Count ( * ) Asc LIMIT value",
        -12.430898666381836
      ],
      [
        "SELECT T1.owner_id , T1.first_name , T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id ORDER BY T2.age Desc LIMIT value",
        -12.985096454620361
      ]
    ],
    "predicted_parse_with_values": "SELECT owner_id , first_name , last_name FROM Owners GROUP BY owner_id ORDER BY Count ( * ) Desc LIMIT 1",
    "predicted_parse": "SELECT owner_id , first_name , last_name FROM Owners GROUP BY owner_id ORDER BY Count ( * ) Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of owner id in owners table",
      "Step 2: find the owner id , first name , last name in owners table with largest value in the results of step 1"
    ],
    "template_feedback": "in step 1 , additionally use the information from the dogs table besides the owners table .",
    "primary_span": [
      [
        4,
        11
      ]
    ],
    "secondary_span": [
      [
        12,
        16
      ]
    ],
    "edits": [
      "dogs"
    ],
    "edits_original": "< from > add dogs </ from >"
  },
  {
    "db_id": "dog_kennels",
    "feedback": "Make sure to search for all dogs total treatment date hold by owner id and also include treatments table.",
    "question": "Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.",
    "gold_parse": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1",
    "beam": [
      [
        "SELECT T2.owner_id , T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY T2.owner_id ORDER BY Count ( * ) Desc LIMIT value",
        -1.1424932479858398
      ],
      [
        "SELECT T2.owner_id , T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id ORDER BY Count ( * ) Desc LIMIT value",
        -1.3589868545532227
      ],
      [
        "SELECT T1.owner_id , T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY T2.owner_id ORDER BY Count ( * ) Desc LIMIT value",
        -2.127713203430176
      ],
      [
        "SELECT owner_id , zip_code FROM Owners GROUP BY owner_id ORDER BY Count ( * ) Desc LIMIT value",
        -2.346118927001953
      ],
      [
        "SELECT T2.owner_id , T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY T2.owner_id ORDER BY Sum ( * ) Desc LIMIT value",
        -2.5377721786499023
      ],
      [
        "SELECT T2.owner_id , T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id ORDER BY Sum ( * ) Desc LIMIT value",
        -2.936160087585449
      ],
      [
        "SELECT T1.owner_id , T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY T2.owner_id ORDER BY Sum ( * ) Desc LIMIT value",
        -3.519680976867676
      ],
      [
        "SELECT owner_id , zip_code FROM Owners GROUP BY owner_id ORDER BY Sum ( * ) Desc LIMIT value",
        -3.9249343872070312
      ],
      [
        "SELECT T3.owner_id , T2.zip_code FROM Charges AS T1 JOIN Owners AS T2 JOIN Dogs AS T3 GROUP BY T3.owner_id ORDER BY Sum ( T1.charge_amount ) Desc LIMIT value",
        -4.380685806274414
      ],
      [
        "SELECT T3.owner_id , T2.zip_code FROM Charges AS T1 JOIN Owners AS T2 JOIN Dogs AS T3 GROUP BY T2.owner_id ORDER BY Sum ( T1.charge_amount ) Desc LIMIT value",
        -5.185144424438477
      ],
      [
        "SELECT T2.owner_id , T2.zip_code FROM Charges AS T1 JOIN Owners AS T2 JOIN Dogs AS T3 GROUP BY T3.owner_id ORDER BY Sum ( T1.charge_amount ) Desc LIMIT value",
        -5.366646766662598
      ],
      [
        "SELECT T2.owner_id , T2.zip_code FROM Charges AS T1 JOIN Owners AS T2 GROUP BY T2.owner_id ORDER BY Sum ( T1.charge_amount ) Desc LIMIT value",
        -6.176652431488037
      ],
      [
        "SELECT T2.owner_id , T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY T2.owner_id ORDER BY Sum ( T2.weight ) Desc LIMIT value",
        -7.014207363128662
      ],
      [
        "SELECT T2.owner_id , T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id ORDER BY Sum ( T2.weight ) Desc LIMIT value",
        -7.842493057250977
      ],
      [
        "SELECT T1.owner_id , T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY T2.owner_id ORDER BY Sum ( T2.weight ) Desc LIMIT value",
        -8.002549171447754
      ],
      [
        "SELECT T2.owner_id , T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY T2.owner_id ORDER BY Sum ( T2.age ) Desc LIMIT value",
        -8.593491554260254
      ],
      [
        "SELECT T1.owner_id , T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id ORDER BY Sum ( T2.weight ) Desc LIMIT value",
        -8.833781242370605
      ],
      [
        "SELECT T2.owner_id , T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id ORDER BY Sum ( T2.age ) Desc LIMIT value",
        -9.422397136688232
      ],
      [
        "SELECT T1.owner_id , T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY T2.owner_id ORDER BY Sum ( T2.age ) Desc LIMIT value",
        -9.581281185150146
      ],
      [
        "SELECT T2.owner_id , T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY T2.owner_id ORDER BY Avg ( * ) Desc LIMIT value",
        -9.668729782104492
      ]
    ],
    "predicted_parse_with_values": "SELECT T2.owner_id , T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY T2.owner_id ORDER BY Count ( * ) Desc LIMIT 1",
    "predicted_parse": "SELECT T2.owner_id , T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY T2.owner_id ORDER BY Count ( * ) Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: for each row in owners table , find the corresponding rows in dogs table",
      "Step 2: find the number of rows of each value of dogs 's owner id of the results of step 1",
      "Step 3: find the dogs 's owner id and zip code of the results of step 1 with largest value in the results of step 2"
    ],
    "template_feedback": "in step 1 , additionally use the information from the treatments table . in step 3 , order the results by summation of cost of treatment in place of number of rows .",
    "primary_span": [
      [
        4,
        12
      ],
      [
        17,
        25
      ]
    ],
    "secondary_span": [
      [
        26,
        32
      ]
    ],
    "edits": [
      "treatments",
      "summation of cost of treatment",
      "number of rows"
    ],
    "edits_original": "< from > add treatments </ from > < orderBy > add summation of cost of treatment </ orderBy > < orderBy > remove number of rows </ orderBy >"
  },
  {
    "db_id": "dog_kennels",
    "feedback": "the total cost of treatment need to be supplant in place of the id of average professional.",
    "question": "Give me the description of the treatment type whose total cost is the lowest.",
    "gold_parse": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1",
    "beam": [
      [
        "SELECT T2.treatment_type_description FROM Charges AS T1 JOIN Treatment_Types AS T2 JOIN Treatments AS T3 GROUP BY T3.treatment_type_code ORDER BY Avg ( T1.charge_amount ) Asc LIMIT value",
        -1.3917851448059082
      ],
      [
        "SELECT T2.treatment_type_description FROM Charges AS T1 JOIN Treatment_Types AS T2 GROUP BY T2.treatment_type_code ORDER BY Avg ( T1.charge_amount ) Asc LIMIT value",
        -1.5144662857055664
      ],
      [
        "SELECT T1.treatment_type_description FROM Treatment_Types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T2.treatment_type_code ORDER BY Avg ( T1.treatment_type_code ) Asc LIMIT value",
        -1.9079928398132324
      ],
      [
        "SELECT treatment_type_description FROM Treatment_Types GROUP BY treatment_type_code ORDER BY Avg ( treatment_type_code ) Asc LIMIT value",
        -2.173159599304199
      ],
      [
        "SELECT T2.treatment_type_description FROM Charges AS T1 JOIN Treatment_Types AS T2 JOIN Treatments AS T3 GROUP BY T3.treatment_type_code ORDER BY Count ( T1.charge_amount ) Asc LIMIT value",
        -2.8526034355163574
      ],
      [
        "SELECT T2.treatment_type_description FROM Charges AS T1 JOIN Treatment_Types AS T2 GROUP BY T2.treatment_type_code ORDER BY Count ( T1.charge_amount ) Asc LIMIT value",
        -3.0937676429748535
      ],
      [
        "SELECT treatment_type_description FROM Treatment_Types ORDER BY treatment_type_code Asc LIMIT value",
        -3.212919235229492
      ],
      [
        "SELECT T1.treatment_type_description FROM Treatment_Types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T2.treatment_type_code ORDER BY Count ( * ) Asc LIMIT value",
        -3.4594430923461914
      ],
      [
        "SELECT treatment_type_description FROM Treatment_Types GROUP BY treatment_type_code ORDER BY Count ( * ) Asc LIMIT value",
        -3.6008219718933105
      ],
      [
        "SELECT T1.treatment_type_description FROM Treatment_Types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T2.treatment_type_code ORDER BY Avg ( T2.cost_of_treatment ) Asc LIMIT value",
        -4.066135406494141
      ],
      [
        "SELECT T1.treatment_type_description FROM Treatment_Types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY Avg ( T2.cost_of_treatment ) Asc LIMIT value",
        -4.226848125457764
      ],
      [
        "SELECT T1.treatment_type_description FROM Treatment_Types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T2.treatment_type_code ORDER BY Count ( T1.treatment_type_code ) Asc LIMIT value",
        -5.250183820724487
      ],
      [
        "SELECT treatment_type_description FROM Treatment_Types ORDER BY treatment_type_description Asc LIMIT value",
        -9.497535228729248
      ],
      [
        "SELECT T2.treatment_type_description FROM Charges AS T1 JOIN Treatment_Types AS T2 ORDER BY T1.charge_amount Asc LIMIT value",
        -11.315485954284668
      ],
      [
        "SELECT treatment_type_description FROM Treatment_Types",
        -11.364611625671387
      ],
      [
        "SELECT T1.treatment_type_description FROM Treatment_Types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code ORDER BY T2.cost_of_treatment Asc LIMIT value",
        -11.841073036193848
      ],
      [
        "SELECT T1.treatment_type_description FROM Treatment_Types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T2.treatment_type_code",
        -12.065103530883789
      ],
      [
        "SELECT treatment_type_description FROM Treatment_Types GROUP BY treatment_type_code",
        -12.181760787963867
      ],
      [
        "SELECT T1.treatment_type_description FROM Treatment_Types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code ORDER BY T2.treatment_type_code Asc LIMIT value",
        -12.321916580200195
      ],
      [
        "SELECT treatment_type_description FROM Treatment_Types ORDER BY treatment_type_code Asc",
        -14.81367015838623
      ]
    ],
    "predicted_parse_with_values": "SELECT T2.treatment_type_description FROM Charges AS T1 JOIN Treatment_Types AS T2 JOIN Treatments AS T3 GROUP BY T3.treatment_type_code ORDER BY Avg ( T1.charge_amount ) Asc LIMIT 1",
    "predicted_parse": "SELECT T2.treatment_type_description FROM Charges AS T1 JOIN Treatment_Types AS T2 JOIN Treatments AS T3 GROUP BY T3.treatment_type_code ORDER BY Avg ( T1.charge_amount ) Asc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: for each row in charges table , find the corresponding rows in treatment types table and in treatments table",
      "Step 2: find the average charge amount of each value of treatments 's treatment type code of the results of step 1",
      "Step 3: find the treatment type description of the results of step 1 with smallest value in the results of step 2"
    ],
    "template_feedback": "in step 1 , do not use the charges table . in step 3 , order the results by summation of cost of treatment in place of average charge amount .",
    "primary_span": [
      [
        4,
        10
      ],
      [
        15,
        23
      ]
    ],
    "secondary_span": [
      [
        4,
        10
      ],
      [
        24,
        30
      ]
    ],
    "edits": [
      "charges",
      "summation of cost of treatment",
      "average charge amount"
    ],
    "edits_original": "< from > remove charges </ from > < orderBy > add summation of cost of treatment </ orderBy > < orderBy > remove average charge amount </ orderBy >"
  },
  {
    "db_id": "network_1",
    "feedback": "Feedback seems incomplete. So, I didn't frame the sentence.",
    "question": "How many likes correspond to each student id?",
    "gold_parse": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id",
    "beam": [
      [
        "SELECT student_id , Count ( * ) FROM Friend GROUP BY student_id",
        -0.08905220031738281
      ],
      [
        "SELECT T1.ID , Count ( * ) FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id",
        -3.2234904766082764
      ],
      [
        "SELECT T2.student_id , Count ( * ) FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T1.ID",
        -4.233128070831299
      ],
      [
        "SELECT Count ( * ) , student_id FROM Friend GROUP BY student_id",
        -4.396188259124756
      ],
      [
        "SELECT T3.liked_id , Count ( * ) FROM Highschooler AS T1 JOIN Friend AS T2 ON T2.student_id = T1.ID JOIN Likes AS T3 ON T1.ID = T3.liked_id GROUP BY T2.student_id",
        -4.452763080596924
      ],
      [
        "SELECT friend_id , Count ( * ) FROM Friend GROUP BY student_id",
        -6.632693290710449
      ],
      [
        "SELECT T3.student_id , Count ( * ) FROM Highschooler AS T1 JOIN Friend AS T2 ON T2.student_id = T1.ID JOIN Likes AS T3 ON T1.ID = T3.liked_id GROUP BY T2.student_id",
        -6.75197172164917
      ],
      [
        "SELECT T1.ID , T2.student_id FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id",
        -6.893857717514038
      ],
      [
        "SELECT T1.name , Count ( * ) FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id",
        -7.379167079925537
      ],
      [
        "SELECT ID , Count ( * ) FROM Highschooler GROUP BY ID",
        -7.45610785484314
      ],
      [
        "SELECT T2.student_id , Count ( * ) FROM Highschooler AS T1 JOIN Friend AS T2 ON T2.student_id = T1.ID JOIN Likes AS T3 ON T1.ID = T3.liked_id GROUP BY T3.liked_id",
        -8.118314743041992
      ],
      [
        "SELECT Count ( * ) , T3.liked_id FROM Highschooler AS T1 JOIN Friend AS T2 ON T2.student_id = T1.ID JOIN Likes AS T3 ON T1.ID = T3.liked_id GROUP BY T2.student_id",
        -8.30510950088501
      ],
      [
        "SELECT Count ( * ) , T2.student_id FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T1.ID",
        -8.501585960388184
      ],
      [
        "SELECT T2.liked_id , Count ( * ) FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id GROUP BY T1.ID",
        -8.567723751068115
      ],
      [
        "SELECT student_id , Count ( * ) FROM Friend GROUP BY friend_id",
        -8.635260581970215
      ],
      [
        "SELECT Count ( * ) , T1.ID FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id",
        -8.776897430419922
      ],
      [
        "SELECT T2.student_id , Count ( * ) FROM Highschooler AS T1 JOIN Friend AS T2 ON T2.student_id = T1.ID JOIN Likes AS T3 ON T1.ID = T3.liked_id GROUP BY T3.student_id",
        -8.895824432373047
      ],
      [
        "SELECT student_id FROM Friend GROUP BY student_id",
        -10.22272777557373
      ],
      [
        "SELECT Count ( * ) FROM Friend GROUP BY student_id",
        -10.737102508544922
      ],
      [
        "SELECT Count ( * ) FROM Highschooler",
        -11.28873872756958
      ]
    ],
    "predicted_parse_with_values": "SELECT student_id , Count ( * ) FROM Friend GROUP BY student_id",
    "predicted_parse": "SELECT student_id , Count ( * ) FROM Friend GROUP BY student_id",
    "predicted_parse_explanation": [
      "find each value of student id in friend table along with the number of the corresponding rows to each value"
    ],
    "template_feedback": "use likes table in place of friend table .",
    "primary_span": [
      [
        0,
        2
      ]
    ],
    "secondary_span": [
      [
        3,
        8
      ]
    ],
    "edits": [
      "likes",
      "friend"
    ],
    "edits_original": "< from > add likes </ from > < from > remove friend </ from >"
  },
  {
    "db_id": "wta_1",
    "feedback": "The smallest is the right word , not largest .",
    "question": "Find the first name and country code of the oldest player.",
    "gold_parse": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1",
    "beam": [
      [
        "SELECT first_name , country_code FROM players ORDER BY birth_date Desc LIMIT value",
        -0.7108993530273438
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.loser_age Desc LIMIT value",
        -0.8689947128295898
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.winner_age Desc LIMIT value",
        -2.522566795349121
      ],
      [
        "SELECT first_name , country_code FROM players ORDER BY birth_date Asc LIMIT value",
        -5.3586015701293945
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.loser_age Asc LIMIT value",
        -5.50071907043457
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.winner_age Asc LIMIT value",
        -7.96025276184082
      ],
      [
        "SELECT first_name , country_code FROM players",
        -11.803720474243164
      ],
      [
        "SELECT first_name , country_code FROM players ORDER BY birth_date Desc",
        -12.943992614746094
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.loser_age Desc",
        -12.976214408874512
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_age = ( SELECT Max ( T2.loser_age ) FROM matches AS T2 )",
        -14.014203071594238
      ],
      [
        "SELECT T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.loser_age Desc LIMIT value",
        -14.152294158935547
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 UNION SELECT Max ( T2.loser_age ) FROM matches AS T2",
        -14.156137466430664
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.loser_age - T1.birth_date Desc LIMIT value",
        -14.248029708862305
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_age = ( SELECT Max ( T2.loser_age ) FROM matches AS T2 ) ORDER BY T1.birth_date Asc LIMIT value",
        -14.278621673583984
      ],
      [
        "SELECT first_name FROM players ORDER BY birth_date Desc LIMIT value",
        -14.541486740112305
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T1.country_code ORDER BY T2.loser_age Desc LIMIT value",
        -14.56695556640625
      ],
      [
        "SELECT first_name , country_code , country_code FROM players ORDER BY birth_date Desc LIMIT value",
        -14.98045825958252
      ],
      [
        "SELECT T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.winner_age Desc LIMIT value",
        -16.010173797607422
      ],
      [
        "SELECT T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.loser_age Asc LIMIT value",
        -16.65322971343994
      ],
      [
        "SELECT first_name FROM players ORDER BY birth_date Asc LIMIT value",
        -16.81528377532959
      ]
    ],
    "predicted_parse_with_values": "SELECT first_name , country_code FROM players ORDER BY birth_date Desc LIMIT 1",
    "predicted_parse": "SELECT first_name , country_code FROM players ORDER BY birth_date Desc LIMIT value",
    "predicted_parse_explanation": [
      "find the first name and country code in players table with largest value of birth date"
    ],
    "template_feedback": "use the smallest in place of largest .",
    "primary_span": [
      [
        0,
        2
      ]
    ],
    "secondary_span": [
      [
        3,
        7
      ]
    ],
    "edits": [
      "descending"
    ],
    "edits_original": "< orderBy > remove descending </ orderBy >"
  },
  {
    "db_id": "world_1",
    "feedback": "Need to change capital with life expectancy .",
    "question": "Find the name, population and expected life length of asian country with the largest area?",
    "gold_parse": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1",
    "beam": [
      [
        "SELECT Name , Population , Capital FROM country WHERE Continent = value ORDER BY SurfaceArea Desc LIMIT value",
        -0.13586997985839844
      ],
      [
        "SELECT Name , Population , Capital FROM country WHERE Continent = value",
        -2.9297313690185547
      ],
      [
        "SELECT Name , LifeExpectancy , Capital FROM country WHERE Continent = value ORDER BY SurfaceArea Desc LIMIT value",
        -3.374757766723633
      ],
      [
        "SELECT Name , Population , LifeExpectancy FROM country WHERE Continent = value ORDER BY SurfaceArea Desc LIMIT value",
        -4.454875946044922
      ],
      [
        "SELECT Name , Population , Capital FROM country WHERE Region = value ORDER BY SurfaceArea Desc LIMIT value",
        -4.9783172607421875
      ],
      [
        "SELECT LocalName , Population , Capital FROM country WHERE Continent = value ORDER BY SurfaceArea Desc LIMIT value",
        -5.44752311706543
      ],
      [
        "SELECT Name , LifeExpectancy , Capital FROM country WHERE Continent = value",
        -6.089657783508301
      ],
      [
        "SELECT Name , Population , Capital FROM country WHERE Continent = value AND SurfaceArea = ( SELECT Max ( SurfaceArea ) FROM country )",
        -6.178011894226074
      ],
      [
        "SELECT Name , Population , Capital FROM country WHERE Continent = value AND SurfaceArea = ( SELECT Max ( SurfaceArea ) FROM country WHERE Continent = value )",
        -6.291378974914551
      ],
      [
        "SELECT Name , Population , Capital FROM country WHERE Region = value",
        -6.310070991516113
      ],
      [
        "SELECT Name , Population , Capital FROM country WHERE LocalName = value AND SurfaceArea = ( SELECT Max ( SurfaceArea ) FROM country )",
        -6.427040100097656
      ],
      [
        "SELECT Name , Population , Capital FROM country WHERE LocalName = value ORDER BY SurfaceArea Desc LIMIT value",
        -6.537301063537598
      ],
      [
        "SELECT Name , Population , Capital FROM country WHERE LocalName = value AND SurfaceArea = ( SELECT Max ( SurfaceArea ) FROM country WHERE Continent = value )",
        -6.572478294372559
      ],
      [
        "SELECT Name , Population , LifeExpectancy FROM country WHERE Continent = value",
        -7.284548759460449
      ],
      [
        "SELECT Name , Population , Capital FROM country WHERE SurfaceArea = ( SELECT Max ( SurfaceArea ) FROM country )",
        -7.977503776550293
      ],
      [
        "SELECT Name , LifeExpectancy , Capital FROM country WHERE Region = value ORDER BY SurfaceArea Desc LIMIT value",
        -8.178422927856445
      ],
      [
        "SELECT LocalName , Population , Capital FROM country WHERE Continent = value",
        -8.414937973022461
      ],
      [
        "SELECT LocalName , LifeExpectancy , Capital FROM country WHERE Continent = value ORDER BY SurfaceArea Desc LIMIT value",
        -8.864599227905273
      ],
      [
        "SELECT Name , Population , Capital FROM country WHERE SurfaceArea > ( SELECT Max ( SurfaceArea ) FROM country WHERE Continent = value )",
        -8.956275939941406
      ],
      [
        "SELECT Name , Population , LifeExpectancy FROM country WHERE Region = value ORDER BY SurfaceArea Desc LIMIT value",
        -8.999776840209961
      ]
    ],
    "predicted_parse_with_values": "SELECT Name , Population , Capital FROM country WHERE Continent = \"Asia\" ORDER BY SurfaceArea Desc LIMIT 1",
    "predicted_parse": "SELECT Name , Population , Capital FROM country WHERE Continent = value ORDER BY SurfaceArea Desc LIMIT value",
    "predicted_parse_explanation": [
      "find the name , population , capital in country table whose continent equals Asia with largest value of surface area"
    ],
    "template_feedback": "find life expectancy in place of capital .",
    "primary_span": [
      [
        0,
        2
      ]
    ],
    "secondary_span": [
      [
        3,
        7
      ]
    ],
    "edits": [
      "life expectancy",
      "capital"
    ],
    "edits_original": "< select > add life expectancy </ select > < select > remove capital </ select >"
  },
  {
    "db_id": "world_1",
    "feedback": "There should be language in place of name .",
    "question": "What are the regions that use English or Dutch?",
    "gold_parse": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\"",
    "beam": [
      [
        "SELECT Region FROM country WHERE Name = value OR Name = value",
        -0.6307477951049805
      ],
      [
        "SELECT Region FROM country WHERE Name = value OR LifeExpectancy = value",
        -1.2470388412475586
      ],
      [
        "SELECT Region FROM country WHERE LocalName = value OR Name = value",
        -3.4388480186462402
      ],
      [
        "SELECT Region FROM country WHERE LifeExpectancy = value OR Name = value",
        -3.666489601135254
      ],
      [
        "SELECT Region FROM country WHERE LocalName = value OR LifeExpectancy = value",
        -4.001450061798096
      ],
      [
        "SELECT Region FROM country WHERE Continent = value OR Name = value",
        -4.0179762840271
      ],
      [
        "SELECT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value OR T1.Name = value",
        -4.094491481781006
      ],
      [
        "SELECT Region FROM country WHERE Name = value OR LocalName = value",
        -4.149877071380615
      ],
      [
        "SELECT Region FROM country WHERE Continent = value OR LifeExpectancy = value",
        -4.194262981414795
      ],
      [
        "SELECT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value OR T1.LifeExpectancy = value",
        -4.484429836273193
      ],
      [
        "SELECT Region FROM country WHERE Name = value OR Continent = value",
        -5.046898365020752
      ],
      [
        "SELECT Continent FROM country WHERE Name = value OR Name = value",
        -5.844672203063965
      ],
      [
        "SELECT Region FROM country WHERE LifeExpectancy = value OR LifeExpectancy = value",
        -5.9353156089782715
      ],
      [
        "SELECT Region FROM country WHERE LifeExpectancy = value OR LocalName = value",
        -6.22235107421875
      ],
      [
        "SELECT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = value OR T2.Language = value",
        -6.238914966583252
      ],
      [
        "SELECT Continent FROM country WHERE Name = value OR LifeExpectancy = value",
        -6.317293167114258
      ],
      [
        "SELECT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.LifeExpectancy = value OR T2.Language = value",
        -6.734768867492676
      ],
      [
        "SELECT Region FROM country WHERE LocalName = value OR LocalName = value",
        -7.007853984832764
      ],
      [
        "SELECT LocalName FROM country WHERE Name = value OR Name = value",
        -7.080775260925293
      ],
      [
        "SELECT SurfaceArea FROM country WHERE Name = value OR Name = value",
        -7.275058746337891
      ]
    ],
    "predicted_parse_with_values": "SELECT Region FROM country WHERE Name = \"Dutch\" OR Name = \"English\"",
    "predicted_parse": "SELECT Region FROM country WHERE Name = value OR Name = value",
    "predicted_parse_explanation": [
      "find the region in country table whose name equals Dutch or name equals English"
    ],
    "template_feedback": "additionally use the information from the countrylanguage table besides the country table . consider the language equals English or language equals Dutch conditions in place of the name equals Dutch or name equals English conditions . make sure no repetition in the results .",
    "primary_span": [
      [
        0,
        7
      ],
      [
        13,
        22
      ],
      [
        36,
        43
      ]
    ],
    "secondary_span": [
      [
        8,
        12
      ],
      [
        23,
        35
      ]
    ],
    "edits": [
      "distinct",
      "countrylanguage",
      "language equals \"English\" or language equals \"Dutch\"",
      "name equals \"Dutch\" or name equals \"English\""
    ],
    "edits_original": "< select > add distinct </ select > < from > add countrylanguage </ from > < where > add language equals \" English \" or language equals \" Dutch \" </ where > < where > remove name equals \" Dutch \" or name equals \" English \" </ where >"
  },
  {
    "db_id": "flight_2",
    "feedback": "use airline and flight table instead of country and airline table.",
    "question": "What is the abbreviation of the airilne has the fewest flights and what country is it in?",
    "gold_parse": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1",
    "beam": [
      [
        "SELECT Abbreviation , Country FROM airlines GROUP BY Country ORDER BY Count ( * ) Asc LIMIT value",
        -0.07222366333007812
      ],
      [
        "SELECT Abbreviation , Country FROM airlines GROUP BY Abbreviation ORDER BY Count ( * ) Asc LIMIT value",
        -3.9683971405029297
      ],
      [
        "SELECT Abbreviation , Country FROM airlines GROUP BY Country , Country , Country ORDER BY Count ( * ) Asc LIMIT value",
        -4.265779495239258
      ],
      [
        "SELECT Abbreviation , Country FROM airlines GROUP BY Airline , Country , Country ORDER BY Count ( * ) Asc LIMIT value",
        -4.311768054962158
      ],
      [
        "SELECT Abbreviation , Country FROM airlines GROUP BY Abbreviation , Country , Country ORDER BY Count ( * ) Asc LIMIT value",
        -4.3778300285339355
      ],
      [
        "SELECT Abbreviation , Country FROM airlines GROUP BY Abbreviation , Country ORDER BY Count ( * ) Asc LIMIT value",
        -5.826876640319824
      ],
      [
        "SELECT Abbreviation , Country FROM airlines GROUP BY Country ORDER BY Count ( * ) Asc LIMIT value INTERSECT SELECT Abbreviation , Country FROM airlines GROUP BY Country ORDER BY Count ( * ) Asc LIMIT value",
        -6.120232582092285
      ],
      [
        "SELECT Abbreviation , Country FROM airlines GROUP BY Country , Country , Airline ORDER BY Count ( * ) Asc LIMIT value",
        -7.061832904815674
      ],
      [
        "SELECT Abbreviation , Country FROM airlines GROUP BY Country , Country , Abbreviation ORDER BY Count ( * ) Asc LIMIT value",
        -7.768155574798584
      ],
      [
        "SELECT Abbreviation , Country FROM airlines GROUP BY Abbreviation ORDER BY Count ( * ) Asc LIMIT value INTERSECT SELECT Abbreviation , Country FROM airlines GROUP BY Country ORDER BY Count ( * ) Asc LIMIT value",
        -7.957696914672852
      ],
      [
        "SELECT Abbreviation , Country FROM airlines GROUP BY Country , Airline , Country ORDER BY Count ( * ) Asc LIMIT value",
        -8.158580303192139
      ],
      [
        "SELECT Abbreviation , Country FROM airlines GROUP BY Airline , Country , Airline ORDER BY Count ( * ) Asc LIMIT value",
        -8.175267219543457
      ],
      [
        "SELECT Abbreviation , Country FROM airlines GROUP BY Abbreviation , Country , Airline ORDER BY Count ( * ) Asc LIMIT value",
        -8.35231876373291
      ],
      [
        "SELECT Abbreviation , Country FROM airlines GROUP BY Airline , Country , Abbreviation ORDER BY Count ( * ) Asc LIMIT value",
        -8.67867374420166
      ],
      [
        "SELECT Abbreviation , Country FROM airlines GROUP BY Country , Abbreviation , Country ORDER BY Count ( * ) Asc LIMIT value",
        -8.756750583648682
      ],
      [
        "SELECT Abbreviation , Country FROM airlines GROUP BY Abbreviation , Country , Abbreviation ORDER BY Count ( * ) Asc LIMIT value",
        -8.91043472290039
      ],
      [
        "SELECT Abbreviation , Country FROM airlines GROUP BY Abbreviation , Airline , Country ORDER BY Count ( * ) Asc LIMIT value",
        -9.125570297241211
      ],
      [
        "SELECT Abbreviation , Country FROM airlines INTERSECT SELECT Abbreviation , Country FROM airlines",
        -9.138756275177002
      ],
      [
        "SELECT Abbreviation , Country FROM airlines GROUP BY Airline , Airline , Country ORDER BY Count ( * ) Asc LIMIT value",
        -9.182041645050049
      ],
      [
        "SELECT Abbreviation , Country FROM airlines GROUP BY Country HAVING Abbreviation = value ORDER BY Count ( * ) Asc",
        -9.77821683883667
      ]
    ],
    "predicted_parse_with_values": "SELECT Abbreviation , Country FROM airlines GROUP BY Country ORDER BY Count ( * ) Asc LIMIT 1",
    "predicted_parse": "SELECT Abbreviation , Country FROM airlines GROUP BY Country ORDER BY Count ( * ) Asc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of country in airlines table",
      "Step 2: find the abbreviation and country in airlines table with smallest value in the results of step 1"
    ],
    "template_feedback": "in step 1 , additionally use the information from the flights table besides the airlines table . find for each value of airlines 's airline name in place of country .",
    "primary_span": [
      [
        4,
        11
      ],
      [
        17,
        25
      ]
    ],
    "secondary_span": [
      [
        12,
        16
      ],
      [
        26,
        30
      ]
    ],
    "edits": [
      "flights",
      "airline name",
      "country"
    ],
    "edits_original": "< from > add flights </ from > < groupBy > add airline name </ groupBy > < groupBy > remove country </ groupBy >"
  },
  {
    "db_id": "student_transcripts_tracking",
    "feedback": "I want id of current address from 1st step and id of address, line 1, line 2, line 3 from 2nd step.",
    "question": "Which address holds the most number of students currently? List the address id and all lines.",
    "gold_parse": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1",
    "beam": [
      [
        "SELECT current_address_id , email_address FROM Students GROUP BY permanent_address_id ORDER BY Count ( * ) Desc LIMIT value",
        -1.291400671005249
      ],
      [
        "SELECT permanent_address_id , email_address FROM Students GROUP BY permanent_address_id ORDER BY Count ( * ) Desc LIMIT value",
        -2.322356700897217
      ],
      [
        "SELECT permanent_address_id , last_name FROM Students GROUP BY permanent_address_id ORDER BY Count ( * ) Desc LIMIT value",
        -2.4784836769104004
      ],
      [
        "SELECT T1.address_id , T2.email_address FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id GROUP BY T2.permanent_address_id ORDER BY Count ( * ) Desc LIMIT value",
        -2.5074126720428467
      ],
      [
        "SELECT T2.current_address_id , T1.line_1 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id GROUP BY T2.permanent_address_id ORDER BY Count ( * ) Desc LIMIT value",
        -2.6325409412384033
      ],
      [
        "SELECT T2.permanent_address_id , T1.line_1 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id GROUP BY T2.permanent_address_id ORDER BY Count ( * ) Desc LIMIT value",
        -2.8289668560028076
      ],
      [
        "SELECT current_address_id , last_name FROM Students GROUP BY permanent_address_id ORDER BY Count ( * ) Desc LIMIT value",
        -3.238077163696289
      ],
      [
        "SELECT current_address_id , email_address FROM Students GROUP BY current_address_id ORDER BY Count ( * ) Desc LIMIT value",
        -3.3028504848480225
      ],
      [
        "SELECT current_address_id , permanent_address_id FROM Students GROUP BY permanent_address_id ORDER BY Count ( * ) Desc LIMIT value",
        -3.460146903991699
      ],
      [
        "SELECT T1.address_id , T1.line_1 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id GROUP BY T2.permanent_address_id ORDER BY Count ( * ) Desc LIMIT value",
        -3.860542058944702
      ],
      [
        "SELECT T1.address_id , T2.permanent_address_id FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id GROUP BY T2.permanent_address_id ORDER BY Count ( * ) Desc LIMIT value",
        -4.195998668670654
      ],
      [
        "SELECT permanent_address_id , last_name FROM Students GROUP BY current_address_id ORDER BY Count ( * ) Desc LIMIT value",
        -4.2299485206604
      ],
      [
        "SELECT T2.permanent_address_id , T1.country FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id GROUP BY T2.permanent_address_id ORDER BY Count ( * ) Desc LIMIT value",
        -4.231700420379639
      ],
      [
        "SELECT permanent_address_id , email_address FROM Students GROUP BY current_address_id ORDER BY Count ( * ) Desc LIMIT value",
        -4.327019214630127
      ],
      [
        "SELECT T1.address_id , T2.email_address FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id GROUP BY T2.current_address_id ORDER BY Count ( * ) Desc LIMIT value",
        -4.515817403793335
      ],
      [
        "SELECT T2.current_address_id , T1.country FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id GROUP BY T2.permanent_address_id ORDER BY Count ( * ) Desc LIMIT value",
        -4.526885509490967
      ],
      [
        "SELECT T1.address_id , T2.last_name FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id GROUP BY T2.permanent_address_id ORDER BY Count ( * ) Desc LIMIT value",
        -4.57742977142334
      ],
      [
        "SELECT T2.current_address_id , T1.line_1 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id GROUP BY T2.current_address_id ORDER BY Count ( * ) Desc LIMIT value",
        -4.588038682937622
      ],
      [
        "SELECT T2.permanent_address_id , T1.line_1 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id GROUP BY T2.current_address_id ORDER BY Count ( * ) Desc LIMIT value",
        -4.772984266281128
      ],
      [
        "SELECT current_address_id , last_name FROM Students GROUP BY current_address_id ORDER BY Count ( * ) Desc LIMIT value",
        -4.993557929992676
      ]
    ],
    "predicted_parse_with_values": "SELECT current_address_id , email_address FROM Students GROUP BY permanent_address_id ORDER BY Count ( * ) Desc LIMIT 1",
    "predicted_parse": "SELECT current_address_id , email_address FROM Students GROUP BY permanent_address_id ORDER BY Count ( * ) Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of permanent address id in students table",
      "Step 2: find the current address id and email address in students table with largest value in the results of step 1"
    ],
    "template_feedback": "in step 1 , additionally use the information from the addresses table besides the students table . in step 2 , find line 2 and line 1 in place of email address .",
    "primary_span": [
      [
        4,
        11
      ],
      [
        21,
        26
      ]
    ],
    "secondary_span": [
      [
        12,
        16
      ],
      [
        27,
        32
      ]
    ],
    "edits": [
      "address id",
      "line 1",
      "line 2",
      "current address id",
      "email address",
      "addresses",
      "address id",
      "permanent address id"
    ],
    "edits_original": "< select > add address id </ select > < select > add line 1 </ select > < select > add line 2 </ select > < select > remove current address id </ select > < select > remove email address </ select > < from > add addresses </ from > < groupBy > add address id </ groupBy > < groupBy > remove permanent address id </ groupBy >"
  },
  {
    "db_id": "world_1",
    "feedback": "Change life expectancy with population and local name with head of state .",
    "question": "What are the population, name and leader of the country with the largest area?",
    "gold_parse": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",
    "beam": [
      [
        "SELECT LifeExpectancy , Name , LocalName FROM country ORDER BY SurfaceArea Desc LIMIT value",
        -0.3971233367919922
      ],
      [
        "SELECT Population , Name , LocalName FROM country ORDER BY SurfaceArea Desc LIMIT value",
        -1.158914566040039
      ],
      [
        "SELECT LifeExpectancy , LocalName , LocalName FROM country ORDER BY SurfaceArea Desc LIMIT value",
        -4.563441276550293
      ],
      [
        "SELECT LifeExpectancy , LocalName , SurfaceArea FROM country ORDER BY SurfaceArea Desc LIMIT value",
        -6.895321846008301
      ],
      [
        "SELECT LifeExpectancy , Name , LocalName FROM country WHERE SurfaceArea = ( SELECT Max ( SurfaceArea ) FROM country ) ORDER BY SurfaceArea Desc LIMIT value",
        -7.726860046386719
      ],
      [
        "SELECT Population , LocalName , LocalName FROM country ORDER BY SurfaceArea Desc LIMIT value",
        -7.979002952575684
      ],
      [
        "SELECT LifeExpectancy , Name , LocalName FROM country WHERE Region = value ORDER BY SurfaceArea Desc LIMIT value",
        -8.044275283813477
      ],
      [
        "SELECT Population , Name , LocalName FROM country WHERE SurfaceArea = ( SELECT Max ( SurfaceArea ) FROM country ) ORDER BY SurfaceArea Desc LIMIT value",
        -8.522736549377441
      ],
      [
        "SELECT LifeExpectancy , LocalName , Region FROM country ORDER BY SurfaceArea Desc LIMIT value",
        -8.554612159729004
      ],
      [
        "SELECT LifeExpectancy , LocalName , Continent FROM country ORDER BY SurfaceArea Desc LIMIT value",
        -8.632255554199219
      ],
      [
        "SELECT Population , Name , LocalName FROM country WHERE Region = value ORDER BY SurfaceArea Desc LIMIT value",
        -8.784799575805664
      ],
      [
        "SELECT LifeExpectancy , Name , Continent FROM country ORDER BY SurfaceArea Desc LIMIT value",
        -8.986029624938965
      ],
      [
        "SELECT LifeExpectancy , LifeExpectancy , LocalName FROM country ORDER BY SurfaceArea Desc LIMIT value",
        -9.422159194946289
      ],
      [
        "SELECT Population , Name , Continent FROM country ORDER BY SurfaceArea Desc LIMIT value",
        -9.697774887084961
      ],
      [
        "SELECT Population , LifeExpectancy , LocalName FROM country ORDER BY SurfaceArea Desc LIMIT value",
        -9.759611129760742
      ],
      [
        "SELECT LifeExpectancy , Name , Region FROM country ORDER BY SurfaceArea Desc LIMIT value",
        -10.196084022521973
      ],
      [
        "SELECT Population , LocalName , SurfaceArea FROM country ORDER BY SurfaceArea Desc LIMIT value",
        -10.338257789611816
      ],
      [
        "SELECT Name , LocalName , LocalName FROM country ORDER BY SurfaceArea Desc LIMIT value",
        -10.787164688110352
      ],
      [
        "SELECT Population , Name , Region FROM country ORDER BY SurfaceArea Desc LIMIT value",
        -10.8956298828125
      ],
      [
        "SELECT LifeExpectancy , LocalName FROM country ORDER BY SurfaceArea Desc LIMIT value",
        -11.321252822875977
      ]
    ],
    "predicted_parse_with_values": "SELECT LifeExpectancy , Name , LocalName FROM country ORDER BY SurfaceArea Desc LIMIT 1",
    "predicted_parse": "SELECT LifeExpectancy , Name , LocalName FROM country ORDER BY SurfaceArea Desc LIMIT value",
    "predicted_parse_explanation": [
      "find the life expectancy , name , local name in country table with largest value of surface area"
    ],
    "template_feedback": "find head of state and population in place of local name and life expectancy .",
    "primary_span": [
      [
        0,
        5
      ]
    ],
    "secondary_span": [
      [
        6,
        14
      ]
    ],
    "edits": [
      "population",
      "head of state",
      "life expectancy",
      "local name"
    ],
    "edits_original": "< select > add population </ select > < select > add head of state </ select > < select > remove life expectancy </ select > < select > remove local name </ select >"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "feedback": "You need to search all the similar rows for individual value of documents table.",
    "question": "Show all template type codes and the number of documents using each type.",
    "gold_parse": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code",
    "beam": [
      [
        "SELECT Template_Type_Code , Count ( * ) FROM Templates GROUP BY Template_Type_Code",
        -3.24249267578125e-05
      ],
      [
        "SELECT T1.Template_Type_Code , Count ( * ) FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code GROUP BY T2.Template_Type_Code",
        -11.239479064941406
      ],
      [
        "SELECT Template_Type_Code , Count ( * ) , Template_Type_Code FROM Templates GROUP BY Template_Type_Code",
        -12.746220648288727
      ],
      [
        "SELECT Template_Type_Code , Count ( * ) FROM Templates",
        -12.819021224975586
      ],
      [
        "SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code",
        -13.086481094360352
      ],
      [
        "SELECT T1.Template_Type_Code , Sum ( T2.Document_ID ) FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T1.Template_Type_Code",
        -13.384925127029419
      ],
      [
        "SELECT Template_Type_Code , Count ( * ) FROM Templates GROUP BY Template_Type_Code HAVING Count ( * ) = value",
        -13.988677978515625
      ],
      [
        "SELECT Template_Type_Code , Count ( * ) FROM Templates GROUP BY Template_Type_Code ORDER BY Count ( * ) Desc LIMIT value",
        -14.160989761352539
      ],
      [
        "SELECT T1.Template_Type_Code , Count ( * ) , T2.Template_ID FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T1.Template_Type_Code",
        -14.309709310531616
      ],
      [
        "SELECT T2.Template_Type_Code , Count ( * ) FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code GROUP BY T1.Template_Type_Code",
        -14.567962646484375
      ],
      [
        "SELECT DISTINCT Template_Type_Code , Count ( * ) FROM Templates GROUP BY Template_Type_Code",
        -15.560356140136719
      ],
      [
        "SELECT T1.Template_Type_Code , Sum ( T2.Template_ID ) FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T1.Template_Type_Code",
        -15.72175407409668
      ],
      [
        "SELECT T1.Template_Type_Code , Sum ( T2.Document_Name ) FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T1.Template_Type_Code",
        -15.789124011993408
      ],
      [
        "SELECT Template_Type_Code , Sum ( * ) FROM Templates GROUP BY Template_Type_Code",
        -15.9865562915802
      ],
      [
        "SELECT Template_Type_Code , Sum ( Version_Number ) FROM Templates GROUP BY Template_Type_Code",
        -16.1553316116333
      ],
      [
        "SELECT DISTINCT Template_Type_Code , Count ( * ) FROM Templates GROUP BY Template_Type_Code",
        -16.181238174438477
      ],
      [
        "SELECT T1.Template_Type_Code , Sum ( T3.Document_ID ) FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID JOIN Paragraphs AS T3 ON T2.Document_ID = T3.Document_ID GROUP BY T1.Template_Type_Code",
        -16.18376636505127
      ],
      [
        "SELECT Max ( Template_Type_Code ) , Count ( * ) FROM Templates GROUP BY Template_Type_Code",
        -16.238028526306152
      ],
      [
        "SELECT Template_Type_Code , Count ( * ) FROM Templates GROUP BY Template_Type_Code LIMIT value",
        -16.34013557434082
      ],
      [
        "SELECT Template_Type_Code , Count ( * ) , Version_Number FROM Templates GROUP BY Template_Type_Code",
        -16.36510181427002
      ]
    ],
    "predicted_parse_with_values": "SELECT Template_Type_Code , Count ( * ) FROM Templates GROUP BY Template_Type_Code",
    "predicted_parse": "SELECT Template_Type_Code , Count ( * ) FROM Templates GROUP BY Template_Type_Code",
    "predicted_parse_explanation": [
      "find each value of template type code in templates table along with the number of the corresponding rows to each value"
    ],
    "template_feedback": "additionally use the information from the documents table besides the templates table .",
    "primary_span": [
      [
        0,
        7
      ]
    ],
    "secondary_span": [
      [
        8,
        12
      ]
    ],
    "edits": [
      "documents"
    ],
    "edits_original": "< from > add documents </ from >"
  },
  {
    "db_id": "flight_2",
    "feedback": "i want \" city of \"destairport from table of flights \" in step 1.",
    "question": "Which city has most number of arriving flights?",
    "gold_parse": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
    "beam": [
      [
        "SELECT City FROM airports GROUP BY City ORDER BY Count ( * ) Desc LIMIT value",
        -0.0015878677368164062
      ],
      [
        "SELECT AirportName FROM airports GROUP BY City ORDER BY Count ( * ) Desc LIMIT value",
        -6.465143203735352
      ],
      [
        "SELECT City FROM airports GROUP BY AirportCode ORDER BY Count ( * ) Desc LIMIT value",
        -11.339574813842773
      ],
      [
        "SELECT City FROM airports GROUP BY AirportName ORDER BY Count ( * ) Desc LIMIT value",
        -12.04916000366211
      ],
      [
        "SELECT City FROM airports GROUP BY City ORDER BY Count ( * ) Desc",
        -12.61600112915039
      ],
      [
        "SELECT City , Count ( * ) FROM airports GROUP BY City ORDER BY Count ( * ) Desc LIMIT value",
        -12.6647367477417
      ],
      [
        "SELECT City FROM airports GROUP BY City ORDER BY Count ( * ) Asc LIMIT value",
        -13.088825225830078
      ],
      [
        "SELECT Count ( * ) FROM airports GROUP BY City ORDER BY Count ( * ) Desc LIMIT value",
        -13.900291442871094
      ],
      [
        "SELECT City FROM airports GROUP BY City",
        -14.122091293334961
      ],
      [
        "SELECT DISTINCT City FROM airports GROUP BY City ORDER BY Count ( * ) Desc LIMIT value",
        -14.495687484741211
      ],
      [
        "SELECT City FROM airports GROUP BY City HAVING Count ( * ) = value",
        -14.885717391967773
      ],
      [
        "SELECT City FROM airports ORDER BY Count ( * ) Desc LIMIT value",
        -15.007745742797852
      ],
      [
        "SELECT City FROM airports GROUP BY City ORDER BY Avg ( * ) Desc LIMIT value",
        -15.192022323608398
      ],
      [
        "SELECT City FROM airports GROUP BY City ORDER BY Count ( DISTINCT * ) Desc LIMIT value",
        -15.921028137207031
      ],
      [
        "SELECT City FROM airports WHERE City = value GROUP BY City ORDER BY Count ( * ) Desc LIMIT value",
        -15.943968296051025
      ],
      [
        "SELECT DISTINCT City FROM airports GROUP BY City ORDER BY Count ( * ) Desc LIMIT value",
        -15.99665355682373
      ],
      [
        "SELECT City FROM airports GROUP BY City HAVING Count ( * ) IN ( SELECT City FROM airports )",
        -16.32841920852661
      ],
      [
        "SELECT City FROM airports GROUP BY City ORDER BY Sum ( * ) Desc LIMIT value",
        -16.391660690307617
      ],
      [
        "SELECT City FROM airports GROUP BY DISTINCT City ORDER BY Count ( * ) Desc LIMIT value",
        -16.593653678894043
      ],
      [
        "SELECT City FROM airports GROUP BY City HAVING Count ( * ) IN ( SELECT City FROM airports GROUP BY City ORDER BY Count ( * ) Desc LIMIT value )",
        -16.620961666107178
      ]
    ],
    "predicted_parse_with_values": "SELECT City FROM airports GROUP BY City ORDER BY Count ( * ) Desc LIMIT 1",
    "predicted_parse": "SELECT City FROM airports GROUP BY City ORDER BY Count ( * ) Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of city in airports table",
      "Step 2: find the city in airports table with largest value in the results of step 1"
    ],
    "template_feedback": "in step 1 , additionally use the information from the flights table besides the airports table .",
    "primary_span": [
      [
        4,
        11
      ]
    ],
    "secondary_span": [
      [
        12,
        16
      ]
    ],
    "edits": [
      "flights"
    ],
    "edits_original": "< from > add flights </ from >"
  },
  {
    "db_id": "tvshow",
    "feedback": "You need to search for the air date.",
    "question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?",
    "gold_parse": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\"",
    "beam": [
      [
        "SELECT Air_Date , Episode FROM TV_series WHERE Episode = value",
        -0.5062379837036133
      ],
      [
        "SELECT Air_Date FROM TV_series WHERE Episode = value",
        -1.0115318298339844
      ],
      [
        "SELECT T2.Air_Date FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = value",
        -4.053689002990723
      ],
      [
        "SELECT T2.Air_Date , T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = value",
        -4.375831604003906
      ],
      [
        "SELECT T2.Air_Date , T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = value",
        -5.757546424865723
      ],
      [
        "SELECT T2.Air_Date , T3.Title FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T2.Channel = T1.id JOIN Cartoon AS T3 ON T1.id = T3.Channel WHERE T2.Episode = value",
        -9.622225761413574
      ],
      [
        "SELECT T2.Air_Date , T1.Hight_definition_TV FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = value",
        -9.907431602478027
      ],
      [
        "SELECT Air_Date FROM TV_series WHERE Episode LIKE value",
        -10.184026718139648
      ],
      [
        "SELECT T2.Air_Date , T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = value",
        -10.195109367370605
      ],
      [
        "SELECT Air_Date , Episode FROM TV_series WHERE Episode LIKE value",
        -10.501137733459473
      ],
      [
        "SELECT T2.Air_Date , T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.Content = value",
        -10.652905464172363
      ],
      [
        "SELECT Air_Date , Episode , Episode FROM TV_series WHERE Episode = value",
        -10.689713954925537
      ],
      [
        "SELECT T2.Air_Date , T3.Original_air_date FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T2.Channel = T1.id JOIN Cartoon AS T3 ON T1.id = T3.Channel WHERE T2.Episode = value",
        -10.828055381774902
      ],
      [
        "SELECT T2.Air_Date , T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.Language = value",
        -11.373056411743164
      ],
      [
        "SELECT T2.Air_Date , T1.Content FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = value",
        -11.843749046325684
      ],
      [
        "SELECT T1.series_name , T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = value",
        -11.867066383361816
      ],
      [
        "SELECT Air_Date , Air_Date FROM TV_series WHERE Episode = value",
        -12.028453826904297
      ],
      [
        "SELECT T2.Air_Date FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.Content = value",
        -12.332356452941895
      ],
      [
        "SELECT T2.Air_Date FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.Language = value",
        -13.493461608886719
      ],
      [
        "SELECT T2.Air_Date FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name LIKE value",
        -13.542171478271484
      ]
    ],
    "predicted_parse_with_values": "SELECT Air_Date , Episode FROM TV_series WHERE Episode = \"A Love of a Lifetime\"",
    "predicted_parse": "SELECT Air_Date , Episode FROM TV_series WHERE Episode = value",
    "predicted_parse_explanation": [
      "find the air date and episode in tv series table whose episode equals A Love of a Lifetime"
    ],
    "template_feedback": "do not return episode .",
    "primary_span": [
      [
        0,
        4
      ]
    ],
    "secondary_span": [],
    "edits": [
      "episode"
    ],
    "edits_original": "< select > remove episode </ select >"
  },
  {
    "db_id": "car_1",
    "feedback": "Change horsepower with mpg , model list's model with cylinders equals 8 and ensure year less than 1980.",
    "question": "What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980?",
    "gold_parse": "SELECT mpg FROM CARS_DATA WHERE Cylinders  =  8 OR YEAR  <  1980 ORDER BY mpg DESC LIMIT 1",
    "beam": [
      [
        "SELECT Max ( T3.Horsepower ) FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T1.Model = value OR T3.Year < value",
        -0.806002140045166
      ],
      [
        "SELECT Max ( T3.Edispl ) FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T1.Model = value OR T3.Year < value",
        -1.5895938873291016
      ],
      [
        "SELECT Max ( T3.Weight ) FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T1.Model = value OR T3.Year < value",
        -1.7494416236877441
      ],
      [
        "SELECT Max ( Horsepower ) FROM cars_data WHERE Cylinders = value OR Year < value",
        -2.8792061805725098
      ],
      [
        "SELECT Max ( Weight ) FROM cars_data WHERE Cylinders = value OR Year < value",
        -2.982717514038086
      ],
      [
        "SELECT Max ( Edispl ) FROM cars_data WHERE Cylinders = value OR Year < value",
        -4.307542324066162
      ],
      [
        "SELECT Max ( Weight ) FROM cars_data WHERE Year = value OR Year < value",
        -4.402035236358643
      ],
      [
        "SELECT Max ( T3.Cylinders ) FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T1.Model = value OR T3.Year < value",
        -4.540539264678955
      ],
      [
        "SELECT Max ( Horsepower ) FROM cars_data WHERE Year = value OR Year < value",
        -5.345137596130371
      ],
      [
        "SELECT Max ( T4.Horsepower ) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id WHERE T1.Maker = value OR T4.Year < value",
        -5.516913414001465
      ],
      [
        "SELECT Max ( Cylinders ) FROM cars_data WHERE Cylinders = value OR Year < value",
        -5.843195915222168
      ],
      [
        "SELECT Max ( Edispl ) FROM cars_data WHERE Year = value OR Year < value",
        -5.897895812988281
      ],
      [
        "SELECT Max ( Cylinders ) FROM cars_data WHERE Year = value OR Year < value",
        -6.019335746765137
      ],
      [
        "SELECT Max ( T4.Weight ) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id WHERE T1.Maker = value OR T4.Year < value",
        -6.185070037841797
      ],
      [
        "SELECT Max ( T4.Edispl ) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id WHERE T1.Maker = value OR T4.Year < value",
        -6.205999374389648
      ],
      [
        "SELECT Max ( Weight ) FROM cars_data WHERE Year = value OR Year = value",
        -6.827882289886475
      ],
      [
        "SELECT Max ( Horsepower ) FROM cars_data WHERE Year = value OR Year = value",
        -6.835483074188232
      ],
      [
        "SELECT Max ( Weight ) FROM cars_data WHERE Horsepower = value OR Year < value",
        -6.8639020919799805
      ],
      [
        "SELECT Max ( Horsepower ) FROM cars_data WHERE Horsepower = value OR Year < value",
        -7.295857906341553
      ],
      [
        "SELECT Max ( * ) FROM cars_data WHERE Year = value OR Year < value",
        -7.604257106781006
      ]
    ],
    "predicted_parse_with_values": "SELECT Max ( T3.Horsepower ) FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T1.Model = \"amc\" OR T3.Year < 1",
    "predicted_parse": "SELECT Max ( T3.Horsepower ) FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T1.Model = value OR T3.Year < value",
    "predicted_parse_explanation": [
      "Step 1: for each row in model list table , find the corresponding rows in car names table and in cars data table",
      "Step 2: find the maximum horsepower of the results of step 1 whose model list 's model equals amc or year less than 1"
    ],
    "template_feedback": "in step 1 , do not use the car names table and model list table . in step 2 , consider the cylinders equals 8 or year less than 1980 conditions in place of the year less than 1 or model list 's model equals amc conditions . find mpg in place of maximum horsepower . find the result with the largest mpg .",
    "primary_span": [
      [
        4,
        15
      ],
      [
        20,
        30
      ],
      [
        48,
        49
      ],
      [
        56,
        63
      ]
    ],
    "secondary_span": [
      [
        4,
        15
      ],
      [
        31,
        47
      ],
      [
        50,
        55
      ]
    ],
    "edits": [
      "mpg",
      "maximum horsepower",
      "model list",
      "car names",
      "cylinders equals 8 or year less than 1980",
      "model equals \"amc\" or year less than 1",
      "mpg",
      "descending",
      "1"
    ],
    "edits_original": "< select > add mpg </ select > < select > remove maximum horsepower </ select > < from > remove model list </ from > < from > remove car names </ from > < where > add cylinders equals 8 or year less than 1980 </ where > < where > remove model equals \" amc \" or year less than 1 </ where > < orderBy > add mpg </ orderBy > < orderBy > add descending </ orderBy > < limit > add 1 </ limit >"
  },
  {
    "db_id": "wta_1",
    "feedback": "Supplant matches with rankings in step 1 , Only find value of ranking's tours in step 2.",
    "question": "Find the first name and country code of the player who did the most number of tours.",
    "gold_parse": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1",
    "beam": [
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.loser_id ORDER BY Count ( * ) Desc LIMIT value",
        -0.09803962707519531
      ],
      [
        "SELECT first_name , country_code FROM players GROUP BY player_id ORDER BY Count ( * ) Desc LIMIT value",
        -2.4182891845703125
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.winner_id ORDER BY Count ( * ) Desc LIMIT value",
        -5.753565311431885
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.tourney_id ORDER BY Count ( * ) Desc LIMIT value",
        -7.021500587463379
      ],
      [
        "SELECT first_name , country_code FROM players GROUP BY country_code ORDER BY Count ( * ) Desc LIMIT value",
        -8.7720308303833
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T2.player_id ORDER BY Count ( * ) Desc LIMIT value",
        -10.067566871643066
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.winner_name ORDER BY Count ( * ) Desc LIMIT value",
        -10.913323402404785
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.loser_name ORDER BY Count ( * ) Desc LIMIT value",
        -11.783577919006348
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.loser_id ORDER BY Count ( * ) Desc",
        -12.20711612701416
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.loser_ioc ORDER BY Count ( * ) Desc LIMIT value",
        -12.421319961547852
      ],
      [
        "SELECT first_name , country_code FROM players ORDER BY birth_date Desc LIMIT value",
        -13.22061824798584
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.winner_entry ORDER BY Count ( * ) Desc LIMIT value",
        -13.383007049560547
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.loser_entry ORDER BY Count ( * ) Desc LIMIT value",
        -13.438858985900879
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.tourney_name ORDER BY Count ( * ) Desc LIMIT value",
        -13.704032897949219
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.loser_id",
        -13.729421615600586
      ],
      [
        "SELECT first_name , country_code FROM players GROUP BY first_name ORDER BY Count ( * ) Desc LIMIT value",
        -13.887654304504395
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.winner_ioc ORDER BY Count ( * ) Desc LIMIT value",
        -14.033651351928711
      ],
      [
        "SELECT T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.loser_id ORDER BY Count ( * ) Desc LIMIT value",
        -14.467296600341797
      ],
      [
        "SELECT first_name , country_code FROM players GROUP BY player_id ORDER BY Count ( * ) Desc",
        -14.530317306518555
      ],
      [
        "SELECT first_name , country_code FROM players",
        -18.26570224761963
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.loser_id ORDER BY Count ( * ) Desc LIMIT 1",
    "predicted_parse": "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.loser_id ORDER BY Count ( * ) Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: for each row in players table , find the corresponding rows in matches table",
      "Step 2: find the number of rows of each value of loser id of the results of step 1",
      "Step 3: find the first name and country code of the results of step 1 with largest value in the results of step 2"
    ],
    "template_feedback": "in step 1 , use rankings table in place of matches table in step 2 , do not find for each value of loser id . in step 3 , order the results by tours in place of number of rows .",
    "primary_span": [
      [
        4,
        6
      ],
      [
        16,
        25
      ],
      [
        30,
        34
      ]
    ],
    "secondary_span": [
      [
        7,
        11
      ],
      [
        35,
        41
      ]
    ],
    "edits": [
      "rankings",
      "matches",
      "loser id",
      "tours",
      "number of rows"
    ],
    "edits_original": "< from > add rankings </ from > < from > remove matches </ from > < groupBy > remove loser id </ groupBy > < orderBy > add tours </ orderBy > < orderBy > remove number of rows </ orderBy >"
  },
  {
    "db_id": "flight_2",
    "feedback": "in step 1 and 2, use airport code instead of destination airport.",
    "question": "Give the code of the airport with the least flights.",
    "gold_parse": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1",
    "beam": [
      [
        "SELECT DestAirport FROM flights GROUP BY DestAirport ORDER BY Count ( * ) Asc LIMIT value",
        -0.6535634994506836
      ],
      [
        "SELECT T1.AirportCode FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport GROUP BY T2.DestAirport ORDER BY Count ( * ) Asc LIMIT value",
        -1.0474047660827637
      ],
      [
        "SELECT T2.AirportCode FROM airlines AS T1 JOIN airports AS T2 ORDER BY T1.Abbreviation Asc LIMIT value",
        -3.512384057044983
      ],
      [
        "SELECT T2.AirportCode FROM airlines AS T1 JOIN airports AS T2 ORDER BY T1.Airline Asc LIMIT value",
        -3.8272829055786133
      ],
      [
        "SELECT DestAirport FROM flights GROUP BY SourceAirport ORDER BY Count ( * ) Asc LIMIT value",
        -4.298356056213379
      ],
      [
        "SELECT T1.AirportCode FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport GROUP BY T2.SourceAirport ORDER BY Count ( * ) Asc LIMIT value",
        -4.373623847961426
      ],
      [
        "SELECT T2.DestAirport FROM airlines AS T1 JOIN flights AS T2 GROUP BY T1.Abbreviation ORDER BY Count ( * ) Asc LIMIT value",
        -4.390644550323486
      ],
      [
        "SELECT T2.AirportCode FROM airlines AS T1 JOIN airports AS T2 GROUP BY T1.Abbreviation ORDER BY Count ( * ) Asc LIMIT value",
        -4.414063930511475
      ],
      [
        "SELECT T1.AirportCode FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport ORDER BY T2.FlightNo Asc LIMIT value",
        -5.053790330886841
      ],
      [
        "SELECT T2.DestAirport FROM airlines AS T1 JOIN flights AS T2 ORDER BY T1.Abbreviation Asc LIMIT value",
        -5.232641696929932
      ],
      [
        "SELECT T2.DestAirport FROM airlines AS T1 JOIN flights AS T2 ORDER BY T1.Airline Asc LIMIT value",
        -5.56207275390625
      ],
      [
        "SELECT AirportCode FROM airports ORDER BY AirportName Asc LIMIT value",
        -6.2507548332214355
      ],
      [
        "SELECT DestAirport FROM flights ORDER BY FlightNo Asc LIMIT value",
        -6.53332257270813
      ],
      [
        "SELECT AirportCode FROM airports ORDER BY * Asc LIMIT value",
        -7.049674034118652
      ],
      [
        "SELECT T1.AirportCode FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport ORDER BY T2.Airline Asc LIMIT value",
        -7.05538272857666
      ],
      [
        "SELECT AirportCode FROM airports ORDER BY CountryAbbrev Asc LIMIT value",
        -7.113681793212891
      ],
      [
        "SELECT SourceAirport FROM flights GROUP BY DestAirport ORDER BY Count ( * ) Asc LIMIT value",
        -7.286880970001221
      ],
      [
        "SELECT AirportCode FROM airports ORDER BY Country Asc LIMIT value",
        -7.633755683898926
      ],
      [
        "SELECT AirportCode FROM airports",
        -10.35681438446045
      ],
      [
        "SELECT DestAirport FROM flights",
        -11.287140369415283
      ]
    ],
    "predicted_parse_with_values": "SELECT DestAirport FROM flights GROUP BY DestAirport ORDER BY Count ( * ) Asc LIMIT 1",
    "predicted_parse": "SELECT DestAirport FROM flights GROUP BY DestAirport ORDER BY Count ( * ) Asc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of destination airport in flights table",
      "Step 2: find the destination airport in flights table with smallest value in the results of step 1"
    ],
    "template_feedback": "in step 1 , additionally use the information from the airports table besides the flights table .",
    "primary_span": [
      [
        4,
        11
      ]
    ],
    "secondary_span": [
      [
        12,
        16
      ]
    ],
    "edits": [
      "airport code",
      "destination airport",
      "airports",
      "airport code",
      "destination airport"
    ],
    "edits_original": "< select > add airport code </ select > < select > remove destination airport </ select > < from > add airports </ from > < groupBy > add airport code </ groupBy > < groupBy > remove destination airport </ groupBy >"
  },
  {
    "db_id": "world_1",
    "feedback": "you need to direct population for all the name of country in step 1 and delete continent in step 2.",
    "question": "Return the names of the 3 countries with the fewest people.",
    "gold_parse": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3",
    "beam": [
      [
        "SELECT Name , Continent FROM country GROUP BY Continent ORDER BY Count ( * ) Asc LIMIT value",
        -0.2802543640136719
      ],
      [
        "SELECT Name FROM country GROUP BY Continent ORDER BY Count ( * ) Asc LIMIT value",
        -1.4250402450561523
      ],
      [
        "SELECT Continent FROM country GROUP BY Continent ORDER BY Count ( * ) Asc LIMIT value",
        -6.001697540283203
      ],
      [
        "SELECT Continent , Continent FROM country GROUP BY Continent ORDER BY Count ( * ) Asc LIMIT value",
        -7.217562675476074
      ],
      [
        "SELECT Name , Continent FROM country GROUP BY GovernmentForm ORDER BY Count ( * ) Asc LIMIT value",
        -7.838656902313232
      ],
      [
        "SELECT LocalName , Continent FROM country GROUP BY Continent ORDER BY Count ( * ) Asc LIMIT value",
        -9.379762649536133
      ],
      [
        "SELECT Name FROM country GROUP BY GovernmentForm ORDER BY Count ( * ) Asc LIMIT value",
        -9.952750205993652
      ],
      [
        "SELECT Name , Continent , Continent FROM country GROUP BY Continent ORDER BY Count ( * ) Asc LIMIT value",
        -10.241634368896484
      ],
      [
        "SELECT Name , Continent FROM country GROUP BY LocalName ORDER BY Count ( * ) Asc LIMIT value",
        -10.863531112670898
      ],
      [
        "SELECT Name , Continent FROM country GROUP BY Continent",
        -11.092048645019531
      ],
      [
        "SELECT LocalName FROM country GROUP BY Continent ORDER BY Count ( * ) Asc LIMIT value",
        -11.681741714477539
      ],
      [
        "SELECT Name , Continent FROM country GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value",
        -11.757161140441895
      ],
      [
        "SELECT Name , Continent FROM country GROUP BY Continent ORDER BY Count ( * ) Asc",
        -11.872711181640625
      ],
      [
        "SELECT Continent , Count ( * ) FROM country GROUP BY Continent ORDER BY Count ( * ) Asc LIMIT value",
        -12.35468864440918
      ],
      [
        "SELECT Name FROM country GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value",
        -12.361461639404297
      ],
      [
        "SELECT Name FROM country ORDER BY Continent Asc LIMIT value",
        -12.379600048065186
      ],
      [
        "SELECT Name FROM country GROUP BY Continent , Continent ORDER BY Count ( * ) Asc LIMIT value",
        -12.649734020233154
      ],
      [
        "SELECT Name FROM country GROUP BY LocalName ORDER BY Count ( * ) Asc LIMIT value",
        -12.924910545349121
      ],
      [
        "SELECT Name FROM country GROUP BY Continent ORDER BY Count ( * ) Asc",
        -13.033173561096191
      ],
      [
        "SELECT Name FROM country ORDER BY Name Asc LIMIT value",
        -13.421596050262451
      ]
    ],
    "predicted_parse_with_values": "SELECT Name , Continent FROM country GROUP BY Continent ORDER BY Count ( * ) Asc LIMIT 3",
    "predicted_parse": "SELECT Name , Continent FROM country GROUP BY Continent ORDER BY Count ( * ) Asc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of continent in country table",
      "Step 2: find the name and continent in country table ordered ascending by the results of step 1",
      "Step 3: only show the first 3 rows of the results"
    ],
    "template_feedback": "in step 1 , do not find for each value of continent . in step 2 , do not return continent . order the results by population in place of number of rows .",
    "primary_span": [
      [
        4,
        12
      ],
      [
        17,
        21
      ],
      [
        22,
        26
      ]
    ],
    "secondary_span": [
      [
        27,
        33
      ]
    ],
    "edits": [
      "continent",
      "continent",
      "population",
      "number of rows"
    ],
    "edits_original": "< select > remove continent </ select > < groupBy > remove continent </ groupBy > < orderBy > add population </ orderBy > < orderBy > remove number of rows </ orderBy >"
  },
  {
    "db_id": "car_1",
    "feedback": "make sure that the year is smaller than 1980 as well as use mpg and cylinders is equivalent to 8.",
    "question": "What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980?",
    "gold_parse": "SELECT mpg FROM CARS_DATA WHERE Cylinders  =  8 OR YEAR  <  1980 ORDER BY mpg DESC LIMIT 1",
    "beam": [
      [
        "SELECT Max ( T3.Horsepower ) FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T1.Model = value OR T3.Year < value",
        -0.806002140045166
      ],
      [
        "SELECT Max ( T3.Edispl ) FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T1.Model = value OR T3.Year < value",
        -1.5895938873291016
      ],
      [
        "SELECT Max ( T3.Weight ) FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T1.Model = value OR T3.Year < value",
        -1.7494416236877441
      ],
      [
        "SELECT Max ( Horsepower ) FROM cars_data WHERE Cylinders = value OR Year < value",
        -2.8792061805725098
      ],
      [
        "SELECT Max ( Weight ) FROM cars_data WHERE Cylinders = value OR Year < value",
        -2.982717514038086
      ],
      [
        "SELECT Max ( Edispl ) FROM cars_data WHERE Cylinders = value OR Year < value",
        -4.307542324066162
      ],
      [
        "SELECT Max ( Weight ) FROM cars_data WHERE Year = value OR Year < value",
        -4.402035236358643
      ],
      [
        "SELECT Max ( T3.Cylinders ) FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T1.Model = value OR T3.Year < value",
        -4.540539264678955
      ],
      [
        "SELECT Max ( Horsepower ) FROM cars_data WHERE Year = value OR Year < value",
        -5.345137596130371
      ],
      [
        "SELECT Max ( T4.Horsepower ) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id WHERE T1.Maker = value OR T4.Year < value",
        -5.516913414001465
      ],
      [
        "SELECT Max ( Cylinders ) FROM cars_data WHERE Cylinders = value OR Year < value",
        -5.843195915222168
      ],
      [
        "SELECT Max ( Edispl ) FROM cars_data WHERE Year = value OR Year < value",
        -5.897895812988281
      ],
      [
        "SELECT Max ( Cylinders ) FROM cars_data WHERE Year = value OR Year < value",
        -6.019335746765137
      ],
      [
        "SELECT Max ( T4.Weight ) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id WHERE T1.Maker = value OR T4.Year < value",
        -6.185070037841797
      ],
      [
        "SELECT Max ( T4.Edispl ) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id WHERE T1.Maker = value OR T4.Year < value",
        -6.205999374389648
      ],
      [
        "SELECT Max ( Weight ) FROM cars_data WHERE Year = value OR Year = value",
        -6.827882289886475
      ],
      [
        "SELECT Max ( Horsepower ) FROM cars_data WHERE Year = value OR Year = value",
        -6.835483074188232
      ],
      [
        "SELECT Max ( Weight ) FROM cars_data WHERE Horsepower = value OR Year < value",
        -6.8639020919799805
      ],
      [
        "SELECT Max ( Horsepower ) FROM cars_data WHERE Horsepower = value OR Year < value",
        -7.295857906341553
      ],
      [
        "SELECT Max ( * ) FROM cars_data WHERE Year = value OR Year < value",
        -7.604257106781006
      ]
    ],
    "predicted_parse_with_values": "SELECT Max ( T3.Horsepower ) FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T1.Model = \"amc\" OR T3.Year < 1",
    "predicted_parse": "SELECT Max ( T3.Horsepower ) FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T1.Model = value OR T3.Year < value",
    "predicted_parse_explanation": [
      "Step 1: for each row in model list table , find the corresponding rows in car names table and in cars data table",
      "Step 2: find the maximum horsepower of the results of step 1 whose model list 's model equals amc or year less than 1"
    ],
    "template_feedback": "in step 1 , do not use the car names table and model list table . in step 2 , consider the cylinders equals 8 or year less than 1980 conditions in place of the year less than 1 or model list 's model equals amc conditions . find mpg in place of maximum horsepower . find the result with the largest mpg .",
    "primary_span": [
      [
        4,
        15
      ],
      [
        20,
        30
      ],
      [
        48,
        49
      ],
      [
        56,
        63
      ]
    ],
    "secondary_span": [
      [
        4,
        15
      ],
      [
        31,
        47
      ],
      [
        50,
        55
      ]
    ],
    "edits": [
      "mpg",
      "maximum horsepower",
      "model list",
      "car names",
      "cylinders equals 8 or year less than 1980",
      "model equals \"amc\" or year less than 1",
      "mpg",
      "descending",
      "1"
    ],
    "edits_original": "< select > add mpg </ select > < select > remove maximum horsepower </ select > < from > remove model list </ from > < from > remove car names </ from > < where > add cylinders equals 8 or year less than 1980 </ where > < where > remove model equals \" amc \" or year less than 1 </ where > < orderBy > add mpg </ orderBy > < orderBy > add descending </ orderBy > < limit > add 1 </ limit >"
  },
  {
    "db_id": "tvshow",
    "feedback": "Use directed by rather than written by .",
    "question": "List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".",
    "gold_parse": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\"",
    "beam": [
      [
        "SELECT Title FROM Cartoon WHERE Written_by = value OR Directed_by = value",
        -0.4424467086791992
      ],
      [
        "SELECT Title FROM Cartoon WHERE Written_by = value OR Written_by = value",
        -1.443293571472168
      ],
      [
        "SELECT Title FROM Cartoon WHERE Directed_by = value OR Directed_by = value",
        -2.556417465209961
      ],
      [
        "SELECT Title FROM Cartoon WHERE Directed_by = value OR Written_by = value",
        -3.2920026779174805
      ],
      [
        "SELECT DISTINCT Title FROM Cartoon WHERE Written_by = value OR Directed_by = value",
        -5.455271244049072
      ],
      [
        "SELECT DISTINCT Title FROM Cartoon WHERE Written_by = value OR Written_by = value",
        -6.48656702041626
      ],
      [
        "SELECT DISTINCT Title FROM Cartoon WHERE Directed_by = value OR Directed_by = value",
        -7.512065410614014
      ],
      [
        "SELECT DISTINCT Title FROM Cartoon WHERE Directed_by = value OR Written_by = value",
        -8.246796131134033
      ],
      [
        "SELECT Title FROM Cartoon WHERE Written_by = value AND Directed_by = value",
        -12.68366527557373
      ],
      [
        "SELECT Title FROM Cartoon WHERE Written_by = value OR Written_by = value AND Directed_by = value",
        -12.972626686096191
      ],
      [
        "SELECT Title , Written_by FROM Cartoon WHERE Written_by = value OR Directed_by = value",
        -12.987588882446289
      ],
      [
        "SELECT Title , Title FROM Cartoon WHERE Written_by = value OR Directed_by = value",
        -13.460125923156738
      ],
      [
        "SELECT DISTINCT Title FROM Cartoon WHERE Written_by = value OR Directed_by = value",
        -13.499557495117188
      ],
      [
        "SELECT Title FROM Cartoon WHERE Written_by = value OR Directed_by = value AND Directed_by = value",
        -13.852213859558105
      ],
      [
        "SELECT Title , Directed_by FROM Cartoon WHERE Written_by = value OR Directed_by = value",
        -13.910160541534424
      ],
      [
        "SELECT Title , Written_by FROM Cartoon WHERE Written_by = value OR Written_by = value",
        -14.16490650177002
      ],
      [
        "SELECT Title FROM Cartoon WHERE Written_by = value AND Written_by = value",
        -14.19779109954834
      ],
      [
        "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value OR T1.series_name = value",
        -14.435920715332031
      ],
      [
        "SELECT DISTINCT Title FROM Cartoon WHERE Written_by = value OR Written_by = value",
        -14.526443481445312
      ],
      [
        "SELECT Title FROM Cartoon WHERE Written_by ! = value OR Directed_by = value",
        -14.536225318908691
      ]
    ],
    "predicted_parse_with_values": "SELECT Title FROM Cartoon WHERE Written_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\"",
    "predicted_parse": "SELECT Title FROM Cartoon WHERE Written_by = value OR Directed_by = value",
    "predicted_parse_explanation": [
      "find the title in cartoon table whose written by equals Ben Jones or directed by equals Brandon Vietti"
    ],
    "template_feedback": "consider the directed by equals Ben Jones conditions in place of the written by equals Ben Jones conditions .",
    "primary_span": [
      [
        0,
        7
      ]
    ],
    "secondary_span": [
      [
        8,
        18
      ]
    ],
    "edits": [
      "directed by equals \"Ben Jones\" or directed by equals \"Brandon Vietti\"",
      "written by equals \"Ben Jones\" or directed by equals \"Brandon Vietti\""
    ],
    "edits_original": "< where > add directed by equals \" Ben Jones \" or directed by equals \" Brandon Vietti \" </ where > < where > remove written by equals \" Ben Jones \" or directed by equals \" Brandon Vietti \" </ where >"
  },
  {
    "db_id": "world_1",
    "feedback": "Need to change code 2 with countrylanguage 's language .",
    "question": "Which language is the most popular on the Asian continent?",
    "gold_parse": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1",
    "beam": [
      [
        "SELECT Code2 FROM country WHERE Continent = value GROUP BY Code2 ORDER BY Count ( * ) Desc LIMIT value",
        -0.08476543426513672
      ],
      [
        "SELECT Code2 FROM country WHERE Continent = ( SELECT Continent FROM country WHERE Continent = value ) GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value",
        -4.161125659942627
      ],
      [
        "SELECT Code2 FROM country WHERE Continent = ( SELECT Max ( LifeExpectancy ) FROM country WHERE Continent = value ) GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value",
        -4.288015365600586
      ],
      [
        "SELECT Code2 FROM country WHERE Continent = ( SELECT Continent FROM country WHERE Continent = value ) GROUP BY Code2 ORDER BY Count ( * ) Desc LIMIT value",
        -4.7409844398498535
      ],
      [
        "SELECT Code2 FROM country WHERE Continent = ( SELECT Code2 FROM country WHERE Continent = value ) GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value",
        -4.794269561767578
      ],
      [
        "SELECT Code2 FROM country WHERE Continent = value GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value",
        -4.848105430603027
      ],
      [
        "SELECT Code2 FROM country WHERE Continent = ( SELECT Max ( LifeExpectancy ) FROM country WHERE Continent = value ) GROUP BY Code2 ORDER BY Count ( * ) Desc LIMIT value",
        -4.95267391204834
      ],
      [
        "SELECT Code2 FROM country WHERE Continent = ( SELECT Code2 FROM country WHERE Continent = value ) GROUP BY Code2 ORDER BY Count ( * ) Desc LIMIT value",
        -5.316681861877441
      ],
      [
        "SELECT Code2 FROM country WHERE Continent = ( SELECT Continent FROM country ORDER BY LifeExpectancy Desc LIMIT value ) GROUP BY Code2 ORDER BY Count ( * ) Desc LIMIT value",
        -5.433422565460205
      ],
      [
        "SELECT Name FROM country WHERE Continent = value GROUP BY Code2 ORDER BY Count ( * ) Desc LIMIT value",
        -6.406974792480469
      ],
      [
        "SELECT Code2 FROM country WHERE Continent = ( SELECT Continent FROM country GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value ) GROUP BY Code2 ORDER BY Count ( * ) Desc LIMIT value",
        -6.626218795776367
      ],
      [
        "SELECT Code2 FROM country WHERE Continent = ( SELECT Continent FROM country ORDER BY LifeExpectancy Desc LIMIT value ) GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value",
        -6.628714084625244
      ],
      [
        "SELECT Code2 FROM country WHERE Continent = value GROUP BY LocalName ORDER BY Count ( * ) Desc LIMIT value",
        -7.173283576965332
      ],
      [
        "SELECT Code2 FROM country WHERE Continent = ( SELECT Code2 FROM country ORDER BY LifeExpectancy Desc LIMIT value ) GROUP BY Code2 ORDER BY Count ( * ) Desc LIMIT value",
        -7.190981388092041
      ],
      [
        "SELECT Code2 FROM country WHERE Continent = value GROUP BY Name ORDER BY Count ( * ) Desc LIMIT value",
        -7.4073615074157715
      ],
      [
        "SELECT Code2 FROM country WHERE Continent = value GROUP BY HeadOfState ORDER BY Count ( * ) Desc LIMIT value",
        -7.885641098022461
      ],
      [
        "SELECT Code2 FROM country WHERE Continent = ( SELECT Continent FROM country GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value ) GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value",
        -7.937844276428223
      ],
      [
        "SELECT T1.Code2 FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = value GROUP BY T2.Language ORDER BY Count ( * ) Desc LIMIT value",
        -8.577374458312988
      ],
      [
        "SELECT Code2 FROM country WHERE Continent = value GROUP BY Code ORDER BY Count ( * ) Desc LIMIT value",
        -8.724821090698242
      ],
      [
        "SELECT HeadOfState FROM country WHERE Continent = value GROUP BY Code2 ORDER BY Count ( * ) Desc LIMIT value",
        -9.130037307739258
      ]
    ],
    "predicted_parse_with_values": "SELECT Code2 FROM country WHERE Continent = \"Asia\" GROUP BY Code2 ORDER BY Count ( * ) Desc LIMIT 1",
    "predicted_parse": "SELECT Code2 FROM country WHERE Continent = value GROUP BY Code2 ORDER BY Count ( * ) Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: find rows in country table whose continent equals Asia",
      "Step 2: find the number of rows of each value of code2 the results of step 1",
      "Step 3: find the code2 the results of step 1 with largest value in the results of step 2"
    ],
    "template_feedback": "in step 1 , additionally use the information from the countrylanguage table besides the country table . in step 2 , find for each value of language in place of code2 . in step 3 , find language in place of code2 .",
    "primary_span": [
      [
        4,
        11
      ],
      [
        21,
        26
      ],
      [
        36,
        37
      ]
    ],
    "secondary_span": [
      [
        12,
        16
      ],
      [
        27,
        31
      ],
      [
        38,
        42
      ]
    ],
    "edits": [
      "language",
      "code2",
      "countrylanguage",
      "language",
      "code2"
    ],
    "edits_original": "< select > add language </ select > < select > remove code2 </ select > < from > add countrylanguage </ from > < groupBy > add language </ groupBy > < groupBy > remove code2 </ groupBy >"
  },
  {
    "db_id": "flight_2",
    "feedback": "i want source airport, flights and source airport from step 1, 2 and 3 respectively.",
    "question": "Find all airlines that have flights from airport 'CVO' but not from 'APG'.",
    "gold_parse": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"",
    "beam": [
      [
        "SELECT T1.Airline FROM airlines AS T1 WHERE T1.Abbreviation = value EXCEPT SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = value",
        -1.1158356666564941
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 WHERE T1.Country = value EXCEPT SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = value",
        -1.7014837265014648
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = value EXCEPT SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = value",
        -1.8350825309753418
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 WHERE T1.Abbreviation = value EXCEPT SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value",
        -2.1956095695495605
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 WHERE T1.Country = value EXCEPT SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value",
        -2.6450233459472656
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = value EXCEPT SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value",
        -2.782280445098877
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value EXCEPT SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = value",
        -3.4998435974121094
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 WHERE T1.Airline = value EXCEPT SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = value",
        -3.716066837310791
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value EXCEPT SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value",
        -4.455593109130859
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 WHERE T1.Airline = value EXCEPT SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value",
        -4.722951412200928
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 WHERE T1.Abbreviation = ( SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = value ) EXCEPT SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = value",
        -6.186034202575684
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 WHERE T2.FlightNo = value EXCEPT SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T3 WHERE T3.AirportName = value",
        -6.966733932495117
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 WHERE T1.Abbreviation = ( SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = value ) EXCEPT SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value",
        -7.232165336608887
      ],
      [
        "SELECT Airline FROM airlines WHERE Abbreviation = value EXCEPT SELECT Airline FROM airlines WHERE Country = value",
        -7.474564552307129
      ],
      [
        "SELECT Airline FROM airlines WHERE Country = value EXCEPT SELECT Airline FROM airlines WHERE Country = value",
        -7.905526161193848
      ],
      [
        "SELECT Airline FROM airlines WHERE Abbreviation = value EXCEPT SELECT Airline FROM airlines WHERE Abbreviation = value",
        -8.010747909545898
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 WHERE T1.Abbreviation = value EXCEPT SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = value AND T2.Country = value",
        -8.28367805480957
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 WHERE T1.Abbreviation = value EXCEPT SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = value AND T1.Abbreviation = value",
        -8.426345348358154
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = value AND T1.Abbreviation ! = value EXCEPT SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = value",
        -8.426586151123047
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = value AND T1.Abbreviation ! = value",
        -9.403974533081055
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.Airline FROM airlines AS T1 WHERE T1.Abbreviation = \"CVO\" EXCEPT SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = \"APG\"",
    "predicted_parse": "SELECT T1.Airline FROM airlines AS T1 WHERE T1.Abbreviation = value EXCEPT SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = value",
    "predicted_parse_explanation": [
      "Step 1: find the airline name in airlines table whose abbreviation equals CVO",
      "Step 2: for each row in airlines table , find the corresponding rows in airports table",
      "Step 3: find the airline name of the results of step 2 whose airport name equals APG",
      "Step 4: show the rows that are in the results of step 1 but not in the results of step 3"
    ],
    "template_feedback": "in step 1 , additionally use the information from the flights table besides the airlines table . consider the source airport equals CVO conditions in place of the abbreviation equals CVO conditions . in step 2 , use flights table in place of airports table in step 3 , consider the source airport equals APG conditions in place of the airport name equals APG conditions .",
    "primary_span": [
      [
        4,
        11
      ],
      [
        17,
        23
      ],
      [
        37,
        39
      ],
      [
        49,
        55
      ]
    ],
    "secondary_span": [
      [
        12,
        16
      ],
      [
        24,
        32
      ],
      [
        40,
        44
      ],
      [
        56,
        65
      ]
    ],
    "edits": [
      "flights",
      "source airport equals \"CVO\"",
      "abbreviation equals \"CVO\"",
      "flights",
      "airports",
      "source airport equals \"APG\"",
      "airport name equals \"APG\""
    ],
    "edits_original": "< from > add flights </ from > < where > add source airport equals \" CVO \" </ where > < where > remove abbreviation equals \" CVO \" </ where > < from > add flights </ from > < from > remove airports </ from > < where > add source airport equals \" APG \" </ where > < where > remove airport name equals \" APG \" </ where >"
  },
  {
    "db_id": "wta_1",
    "feedback": "Substitute winner name for both tourney name .",
    "question": "What are the names of players who won in both 2013 and 2016?",
    "gold_parse": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016",
    "beam": [
      [
        "SELECT tourney_name FROM matches WHERE year = value INTERSECT SELECT tourney_name FROM matches WHERE year = value",
        -0.012896537780761719
      ],
      [
        "SELECT tourney_name FROM matches WHERE year = value INTERSECT SELECT loser_name FROM matches WHERE year = value",
        -5.385000228881836
      ],
      [
        "SELECT loser_name FROM matches WHERE year = value INTERSECT SELECT tourney_name FROM matches WHERE year = value",
        -6.076094627380371
      ],
      [
        "SELECT tourney_name FROM matches WHERE year = value INTERSECT SELECT winner_name FROM matches WHERE year = value",
        -6.276345252990723
      ],
      [
        "SELECT T1.tourney_name FROM matches AS T1 WHERE T1.year = value INTERSECT SELECT T2.first_name FROM players AS T2 JOIN matches AS T1 ON T2.player_id = T1.loser_id WHERE T1.year = value",
        -6.411374568939209
      ],
      [
        "SELECT winner_name FROM matches WHERE year = value INTERSECT SELECT tourney_name FROM matches WHERE year = value",
        -7.040855407714844
      ],
      [
        "SELECT T1.tourney_name FROM matches AS T1 WHERE T1.year = value INTERSECT SELECT T2.hand FROM players AS T2 JOIN matches AS T1 ON T2.player_id = T1.loser_id WHERE T1.year = value",
        -7.120620250701904
      ],
      [
        "SELECT T1.tourney_name FROM matches AS T1 WHERE T1.year = value INTERSECT SELECT T2.last_name FROM players AS T2 JOIN matches AS T1 ON T2.player_id = T1.loser_id WHERE T1.year = value",
        -7.741286277770996
      ],
      [
        "SELECT T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.year = value INTERSECT SELECT T2.tourney_name FROM matches AS T2 WHERE T2.year = value",
        -8.850276947021484
      ],
      [
        "SELECT T1.last_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.year = value INTERSECT SELECT T2.tourney_name FROM matches AS T2 WHERE T2.year = value",
        -10.259783744812012
      ],
      [
        "SELECT tourney_name FROM matches WHERE year = value INTERSECT SELECT tourney_name FROM matches",
        -10.530787467956543
      ],
      [
        "SELECT T1.hand FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.year = value INTERSECT SELECT T2.tourney_name FROM matches AS T2 WHERE T2.year = value",
        -11.160860061645508
      ],
      [
        "SELECT loser_name FROM matches WHERE year = value INTERSECT SELECT loser_name FROM matches WHERE year = value",
        -11.44905948638916
      ],
      [
        "SELECT tourney_name FROM matches WHERE year = value INTERSECT SELECT tourney_name FROM matches WHERE tourney_date = value",
        -11.928833961486816
      ],
      [
        "SELECT loser_name FROM matches WHERE year = value INTERSECT SELECT winner_name FROM matches WHERE year = value",
        -12.340228080749512
      ],
      [
        "SELECT winner_name FROM matches WHERE year = value INTERSECT SELECT loser_name FROM matches WHERE year = value",
        -12.412396430969238
      ],
      [
        "SELECT T1.loser_name FROM matches AS T1 WHERE T1.year = value INTERSECT SELECT T2.first_name FROM players AS T2 JOIN matches AS T1 ON T2.player_id = T1.loser_id WHERE T1.year = value",
        -12.475886344909668
      ],
      [
        "SELECT tourney_name FROM matches WHERE tourney_date = value INTERSECT SELECT tourney_name FROM matches WHERE year = value",
        -12.731584548950195
      ],
      [
        "SELECT tourney_name FROM matches WHERE year = value",
        -12.988481521606445
      ],
      [
        "SELECT tourney_name FROM matches WHERE year ! = value",
        -14.454877853393555
      ]
    ],
    "predicted_parse_with_values": "SELECT tourney_name FROM matches WHERE year = 2013 INTERSECT SELECT tourney_name FROM matches WHERE year = 2016",
    "predicted_parse": "SELECT tourney_name FROM matches WHERE year = value INTERSECT SELECT tourney_name FROM matches WHERE year = value",
    "predicted_parse_explanation": [
      "Step 1: find the tourney name in matches table whose year equals 2013",
      "Step 2: find the tourney name in matches table whose year equals 2016",
      "Step 3: show the rows that are in both the results of step 1 and step 2"
    ],
    "template_feedback": "in step 1 , find winner name in place of tourney name . in step 2 , find winner name in place of tourney name .",
    "primary_span": [
      [
        4,
        6
      ],
      [
        17,
        19
      ]
    ],
    "secondary_span": [
      [
        7,
        12
      ],
      [
        20,
        25
      ]
    ],
    "edits": [
      "winner name",
      "tourney name",
      "winner name",
      "tourney name"
    ],
    "edits_original": "< select > add winner name </ select > < select > remove tourney name </ select > < select > add winner name </ select > < select > remove tourney name </ select >"
  },
  {
    "db_id": "concert_singer",
    "feedback": "We will have to use song name contains Hey in place of name contains Hey .",
    "question": "what is the name and nation of the singer who have a song having 'Hey' in its name?",
    "gold_parse": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'",
    "beam": [
      [
        "SELECT Name , Country FROM singer WHERE Name LIKE value",
        -0.5834646224975586
      ],
      [
        "SELECT Name , Country FROM singer WHERE Song_Name LIKE value",
        -0.9058437347412109
      ],
      [
        "SELECT Song_Name , Country FROM singer WHERE Name LIKE value",
        -3.845317840576172
      ],
      [
        "SELECT Song_Name , Country FROM singer WHERE Song_Name LIKE value",
        -4.163100242614746
      ],
      [
        "SELECT T1.Name , T1.Country FROM singer AS T1 JOIN concert AS T2 JOIN singer_in_concert AS T3 ON T1.Singer_ID = T3.Singer_ID AND T3.concert_ID = T2.concert_ID WHERE T2.concert_Name LIKE value",
        -7.59306526184082
      ],
      [
        "SELECT Name , Country FROM singer WHERE Is_male LIKE value",
        -8.12611198425293
      ],
      [
        "SELECT Name , Country FROM singer WHERE Country BETWEEN value AND value",
        -10.242524147033691
      ],
      [
        "SELECT T1.Song_Name , T1.Country FROM singer AS T1 JOIN concert AS T2 JOIN singer_in_concert AS T3 ON T1.Singer_ID = T3.Singer_ID AND T3.concert_ID = T2.concert_ID WHERE T2.concert_Name LIKE value",
        -10.848215103149414
      ],
      [
        "SELECT Song_Name , Country FROM singer WHERE Is_male LIKE value",
        -11.380136489868164
      ],
      [
        "SELECT T1.Name , T1.Country FROM singer AS T1 JOIN concert AS T2 JOIN singer_in_concert AS T3 ON T1.Singer_ID = T3.Singer_ID AND T3.concert_ID = T2.concert_ID WHERE T2.Theme LIKE value",
        -11.772363662719727
      ],
      [
        "SELECT Name , Country FROM singer WHERE Song_release_year LIKE value",
        -12.10838508605957
      ],
      [
        "SELECT Name , Country FROM singer WHERE Song_Name BETWEEN value AND value",
        -12.395735740661621
      ],
      [
        "SELECT Song_Name , Country FROM singer WHERE Country BETWEEN value AND value",
        -13.527061700820923
      ],
      [
        "SELECT Name FROM singer WHERE Name LIKE value",
        -13.612439155578613
      ],
      [
        "SELECT Name FROM singer WHERE Song_Name LIKE value",
        -13.676997184753418
      ],
      [
        "SELECT Name , Country , Country FROM singer WHERE Name LIKE value",
        -13.793257713317871
      ],
      [
        "SELECT T1.Name , T1.Country FROM singer AS T1 WHERE T1.Singer_ID IN ( SELECT T2.Singer_ID FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T1.Name LIKE value )",
        -14.025282859802246
      ],
      [
        "SELECT Name , Country FROM singer",
        -16.25263023376465
      ],
      [
        "SELECT Song_Name FROM singer WHERE Name LIKE value",
        -16.461674690246582
      ],
      [
        "SELECT Song_Name FROM singer WHERE Song_Name LIKE value",
        -16.544340133666992
      ]
    ],
    "predicted_parse_with_values": "SELECT Name , Country FROM singer WHERE Name LIKE \"Hey\"",
    "predicted_parse": "SELECT Name , Country FROM singer WHERE Name LIKE value",
    "predicted_parse_explanation": [
      "find the name and country in singer table whose name like Hey"
    ],
    "template_feedback": "consider the song name like % Hey % conditions in place of the name like Hey conditions .",
    "primary_span": [
      [
        0,
        8
      ]
    ],
    "secondary_span": [
      [
        9,
        17
      ]
    ],
    "edits": [
      "song name like \"%Hey%\"",
      "name like \"Hey\""
    ],
    "edits_original": "< where > add song name like \" % Hey % \" </ where > < where > remove name like \" Hey \" </ where >"
  },
  {
    "db_id": "dog_kennels",
    "feedback": "gender equals 1 to be replaced with treatments table's dog id and date of birth with date arrived .",
    "question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?",
    "gold_parse": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id",
    "beam": [
      [
        "SELECT date_departed , date_of_birth FROM Dogs WHERE gender = value",
        -0.2642941474914551
      ],
      [
        "SELECT date_departed , date_of_birth FROM Dogs WHERE weight = value",
        -2.4404187202453613
      ],
      [
        "SELECT date_departed , date_of_birth FROM Dogs",
        -2.701481819152832
      ],
      [
        "SELECT date_departed , date_of_birth FROM Dogs WHERE name = value",
        -3.6345572471618652
      ],
      [
        "SELECT T2.date_departed , T2.date_of_birth FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code WHERE T1.breed_name = value",
        -4.08210825920105
      ],
      [
        "SELECT date_departed , date_arrived FROM Dogs WHERE gender = value",
        -4.365270137786865
      ],
      [
        "SELECT date_departed , date_of_birth FROM Dogs WHERE breed_code = value",
        -4.497034549713135
      ],
      [
        "SELECT date_departed , date_of_birth FROM Dogs WHERE age = value",
        -5.982959270477295
      ],
      [
        "SELECT date_departed , date_arrived FROM Dogs WHERE weight = value",
        -6.847499370574951
      ],
      [
        "SELECT date_departed , date_adopted FROM Dogs WHERE gender = value",
        -6.907357692718506
      ],
      [
        "SELECT date_departed , date_arrived FROM Dogs",
        -7.240793228149414
      ],
      [
        "SELECT date_arrived , date_of_birth FROM Dogs WHERE gender = value",
        -7.588282108306885
      ],
      [
        "SELECT date_departed , date_of_birth FROM Dogs WHERE size_code = value",
        -7.601734161376953
      ],
      [
        "SELECT T1.date_departed , T1.date_of_birth FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T2.treatment_type_code = value",
        -7.759667873382568
      ],
      [
        "SELECT T1.date_departed , T1.date_of_birth FROM Dogs AS T1 WHERE T1.weight = ( SELECT T2.dog_id FROM Treatments AS T2 )",
        -8.73720407485962
      ],
      [
        "SELECT date_departed , date_adopted FROM Dogs",
        -9.422489166259766
      ],
      [
        "SELECT date_arrived , date_of_birth FROM Dogs",
        -10.071361541748047
      ],
      [
        "SELECT date_departed , age FROM Dogs",
        -10.264464378356934
      ],
      [
        "SELECT date_departed , date_departed FROM Dogs",
        -11.1217622756958
      ],
      [
        "SELECT date_departed , weight FROM Dogs",
        -12.357536315917969
      ]
    ],
    "predicted_parse_with_values": "SELECT date_departed , date_of_birth FROM Dogs WHERE gender = 1",
    "predicted_parse": "SELECT date_departed , date_of_birth FROM Dogs WHERE gender = value",
    "predicted_parse_explanation": [
      "find the date departed and date of birth in dogs table whose gender equals 1"
    ],
    "template_feedback": "additionally use the information from the treatments table besides the dogs table . remove the gender equals 1 conditions . find date arrived in place of date of birth . make sure no repetition in the results .",
    "primary_span": [
      [
        0,
        7
      ],
      [
        13,
        19
      ],
      [
        20,
        22
      ],
      [
        30,
        37
      ]
    ],
    "secondary_span": [
      [
        8,
        12
      ],
      [
        23,
        29
      ]
    ],
    "edits": [
      "distinct",
      "date arrived",
      "date of birth",
      "treatments",
      "gender equals 1"
    ],
    "edits_original": "< select > add distinct </ select > < select > add date arrived </ select > < select > remove date of birth </ select > < from > add treatments </ from > < where > remove gender equals 1 </ where >"
  },
  {
    "db_id": "student_transcripts_tracking",
    "feedback": "I want the departments having department id in degree programs table. ",
    "question": "How many different departments offer degrees?",
    "gold_parse": "SELECT count(DISTINCT department_id) FROM Degree_Programs",
    "beam": [
      [
        "SELECT Count ( DISTINCT department_name ) FROM Departments",
        -4.863739013671875e-05
      ],
      [
        "SELECT Count ( DISTINCT department_name ) , department_name FROM Departments GROUP BY department_name",
        -11.65521788597107
      ],
      [
        "SELECT Count ( department_name ) FROM Departments",
        -11.85695743560791
      ],
      [
        "SELECT Count ( * ) FROM Addresses",
        -11.88189697265625
      ],
      [
        "SELECT Count ( DISTINCT department_id ) FROM Degree_Programs",
        -11.949378967285156
      ],
      [
        "SELECT Sum ( DISTINCT department_name ) FROM Departments",
        -13.117547988891602
      ],
      [
        "SELECT Count ( DISTINCT T1.department_name ) , T2.degree_summary_name FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id GROUP BY T1.department_name",
        -13.600850820541382
      ],
      [
        "SELECT Count ( DISTINCT T1.department_name ) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id WHERE T2.degree_summary_name = value",
        -13.657505989074707
      ],
      [
        "SELECT Avg ( DISTINCT department_name ) FROM Departments",
        -13.858516216278076
      ],
      [
        "SELECT Count ( DISTINCT department_name ) , Count ( DISTINCT department_name ) FROM Departments",
        -13.889984607696533
      ],
      [
        "SELECT Count ( DISTINCT T2.department_name ) , T1.city FROM Addresses AS T1 JOIN Departments AS T2 JOIN Degree_Programs AS T3 ON T3.department_id = T2.department_id JOIN Students AS T4 ON T1.address_id = T4.current_address_id JOIN Student_Enrolment AS T5 ON T4.student_id = T5.student_id AND T5.degree_program_id = T3.degree_program_id GROUP BY T2.department_name",
        -14.059879302978516
      ],
      [
        "SELECT Count ( Count ( DISTINCT department_name ) ) FROM Departments",
        -14.088013648986816
      ],
      [
        "SELECT Count ( DISTINCT T2.department_name ) , T1.course_name FROM Courses AS T1 JOIN Departments AS T2 JOIN Degree_Programs AS T3 ON T3.department_id = T2.department_id JOIN Student_Enrolment AS T4 ON T4.degree_program_id = T3.degree_program_id JOIN Student_Enrolment_Courses AS T5 ON T1.course_id = T5.course_id AND T5.student_enrolment_id = T4.student_enrolment_id GROUP BY T2.department_name",
        -14.256300926208496
      ],
      [
        "SELECT Count ( DISTINCT department_name ) , department_description FROM Departments GROUP BY department_name",
        -14.295163631439209
      ],
      [
        "SELECT Count ( DISTINCT T1.department_name ) , T2.department_id FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id GROUP BY T1.department_name",
        -14.346056938171387
      ],
      [
        "SELECT DISTINCT Count ( DISTINCT department_name ) FROM Departments",
        -14.77413558959961
      ],
      [
        "SELECT Sum ( department_name ) FROM Departments",
        -15.326976299285889
      ],
      [
        "SELECT Avg ( department_name ) FROM Departments",
        -16.568958282470703
      ],
      [
        "SELECT Count ( DISTINCT department_name ) FROM Departments LIMIT value",
        -16.97483539581299
      ],
      [
        "SELECT Count ( Avg ( DISTINCT department_name ) ) FROM Departments",
        -17.20804786682129
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( DISTINCT department_name ) FROM Departments",
    "predicted_parse": "SELECT Count ( DISTINCT department_name ) FROM Departments",
    "predicted_parse_explanation": [
      "find the number of different department name in departments table"
    ],
    "template_feedback": "use degree programs table in place of departments table . find number of different degree programs 's department id in place of number of different department name .",
    "primary_span": [
      [
        0,
        3
      ],
      [
        10,
        18
      ]
    ],
    "secondary_span": [
      [
        4,
        9
      ],
      [
        19,
        27
      ]
    ],
    "edits": [
      "number of distinct department id",
      "number of distinct department name",
      "degree programs",
      "departments"
    ],
    "edits_original": "< select > add number of distinct department id </ select > < select > remove number of distinct department name </ select > < from > add degree programs </ from > < from > remove departments </ from >"
  },
  {
    "db_id": "wta_1",
    "feedback": "Substitute loser id with hand in step 2.",
    "question": "Find the number of players for each hand type.",
    "gold_parse": "SELECT count(*) ,  hand FROM players GROUP BY hand",
    "beam": [
      [
        "SELECT T1.hand , Count ( * ) FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.loser_id",
        -1.2307432889938354
      ],
      [
        "SELECT Count ( * ) , T1.hand FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.loser_id",
        -1.9944095015525818
      ],
      [
        "SELECT loser_ioc , Count ( * ) FROM matches GROUP BY loser_id",
        -2.445551872253418
      ],
      [
        "SELECT loser_name , Count ( * ) FROM matches GROUP BY loser_id",
        -2.7575576305389404
      ],
      [
        "SELECT loser_id , Count ( * ) FROM matches GROUP BY loser_id",
        -3.058903694152832
      ],
      [
        "SELECT loser_seed , Count ( * ) FROM matches GROUP BY loser_id",
        -3.127683162689209
      ],
      [
        "SELECT surface , Count ( * ) FROM matches GROUP BY loser_id",
        -3.20900297164917
      ],
      [
        "SELECT loser_hand , Count ( * ) FROM matches GROUP BY loser_id",
        -3.2708983421325684
      ],
      [
        "SELECT T1.first_name , Count ( * ) FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.loser_id",
        -3.293999195098877
      ],
      [
        "SELECT winner_name , Count ( * ) FROM matches GROUP BY loser_id",
        -4.139007568359375
      ],
      [
        "SELECT Count ( * ) , loser_name FROM matches GROUP BY loser_id",
        -4.216287612915039
      ],
      [
        "SELECT round , Count ( * ) FROM matches GROUP BY loser_id",
        -4.223236799240112
      ],
      [
        "SELECT Count ( * ) , loser_id FROM matches GROUP BY loser_id",
        -4.288818120956421
      ],
      [
        "SELECT year , Count ( * ) FROM matches GROUP BY loser_id",
        -4.459252834320068
      ],
      [
        "SELECT loser_entry , Count ( * ) FROM matches GROUP BY loser_id",
        -4.645522117614746
      ],
      [
        "SELECT tourney_name , Count ( * ) FROM matches GROUP BY loser_id",
        -4.755753040313721
      ],
      [
        "SELECT tourney_id , Count ( * ) FROM matches GROUP BY loser_id",
        -4.866830348968506
      ],
      [
        "SELECT winner_ioc , Count ( * ) FROM matches GROUP BY loser_id",
        -5.12678861618042
      ],
      [
        "SELECT Count ( * ) , loser_hand FROM matches GROUP BY loser_id",
        -5.3298094272613525
      ],
      [
        "SELECT Count ( * ) , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.loser_id",
        -5.332536935806274
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.hand , Count ( * ) FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.loser_id",
    "predicted_parse": "SELECT T1.hand , Count ( * ) FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.loser_id",
    "predicted_parse_explanation": [
      "Step 1: for each row in players table , find the corresponding rows in matches table",
      "Step 2: find each value of loser id of the results of step 1 along with the number of the corresponding rows to each value"
    ],
    "template_feedback": "in step 1 , do not use the matches table . in step 2 , find for each value of hand in place of loser id .",
    "primary_span": [
      [
        4,
        10
      ],
      [
        15,
        20
      ]
    ],
    "secondary_span": [
      [
        4,
        10
      ],
      [
        21,
        26
      ]
    ],
    "edits": [
      "matches",
      "hand",
      "loser id"
    ],
    "edits_original": "< from > remove matches </ from > < groupBy > add hand </ groupBy > < groupBy > remove loser id </ groupBy >"
  },
  {
    "db_id": "pets_1",
    "feedback": "i want the number of rows of has pet table whose pet type is dog and sex is female.",
    "question": "How many dog pets are raised by female students?",
    "gold_parse": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'",
    "beam": [
      [
        "SELECT Count ( * ) FROM Pets WHERE PetType = value AND pet_age = value",
        -0.44783878326416016
      ],
      [
        "SELECT Count ( * ) FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value AND T1.Sex = value",
        -1.094076156616211
      ],
      [
        "SELECT Count ( * ) FROM Pets WHERE PetType = value AND PetType = value",
        -4.26595401763916
      ],
      [
        "SELECT Count ( * ) FROM Pets WHERE PetType = value",
        -4.451184272766113
      ],
      [
        "SELECT Count ( * ) FROM Pets WHERE PetType = value AND weight = value",
        -8.038832664489746
      ],
      [
        "SELECT Count ( * ) FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value AND T1.Age = value",
        -10.067183494567871
      ],
      [
        "SELECT Count ( * ) FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T1.Sex = value AND T3.PetType = value",
        -11.145304679870605
      ],
      [
        "SELECT Count ( * ) FROM Student WHERE Sex = value",
        -11.65657901763916
      ],
      [
        "SELECT Count ( * ) FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T1.Sex = value AND T3.pet_age = value",
        -11.895936012268066
      ],
      [
        "SELECT Count ( * ) FROM Student WHERE Sex = value AND Sex = value",
        -13.690556049346924
      ],
      [
        "SELECT Count ( * ) FROM Pets WHERE PetType = value AND pet_age > = value",
        -13.86830997467041
      ],
      [
        "SELECT Count ( * ) FROM Pets WHERE PetType = value AND pet_age IN ( SELECT weight FROM Pets WHERE PetType = value )",
        -14.506916761398315
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM Pets WHERE PetType = value AND pet_age = value",
        -14.736374855041504
      ],
      [
        "SELECT Count ( Count ( * ) ) FROM Pets WHERE PetType = value AND pet_age = value",
        -14.838168144226074
      ],
      [
        "SELECT Count ( * ) FROM Pets AS T1 WHERE T1.PetType = value AND T1.pet_age IN ( SELECT T2.PetID FROM Has_Pet AS T2 JOIN Pets AS T1 ON T2.PetID = T1.PetID WHERE T1.PetType = value )",
        -14.947375535964966
      ],
      [
        "SELECT Count ( * ) FROM Pets WHERE PetType = value AND pet_age < value",
        -15.105923652648926
      ],
      [
        "SELECT Count ( * ) FROM Student WHERE Sex < value",
        -15.480961799621582
      ],
      [
        "SELECT Count ( * ) FROM Pets WHERE pet_age < value",
        -15.926527976989746
      ],
      [
        "SELECT Count ( * ) FROM Pets WHERE PetType < value",
        -16.272212505340576
      ],
      [
        "SELECT T3.PetType FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T1.Sex = value",
        -17.020151138305664
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM Pets WHERE PetType = \"F\" AND pet_age = 3",
    "predicted_parse": "SELECT Count ( * ) FROM Pets WHERE PetType = value AND pet_age = value",
    "predicted_parse_explanation": [
      "find the number of rows in pets table whose pet type equals F and pet age equals 3"
    ],
    "template_feedback": "additionally use the information from the has pet table and student table besides the pets table . consider the sex equals F and pet type equals dog conditions in place of the pet age equals 3 and pet type equals F conditions .",
    "primary_span": [
      [
        0,
        11
      ],
      [
        17,
        27
      ]
    ],
    "secondary_span": [
      [
        12,
        16
      ],
      [
        28,
        42
      ]
    ],
    "edits": [
      "student",
      "has pet",
      "sex equals \"F\"",
      "pet type equals \"dog\"",
      "pet type equals \"F\"",
      "pet age equals 3"
    ],
    "edits_original": "< from > add student </ from > < from > add has pet </ from > < where > add sex equals \" F \" </ where > < where > add pet type equals \" dog \" </ where > < where > remove pet type equals \" F \" </ where > < where > remove pet age equals 3 </ where >"
  },
  {
    "db_id": "pets_1",
    "feedback": "Find student id of has pet whose pet type equals cat in Step 2.",
    "question": "Find the id of students who do not have a cat pet.",
    "gold_parse": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'",
    "beam": [
      [
        "SELECT T1.StuID FROM Student AS T1 EXCEPT SELECT T2.StuID FROM Has_Pet AS T2",
        -0.000308990478515625
      ],
      [
        "SELECT T1.StuID FROM Student AS T1 WHERE T1.StuID NOT IN ( SELECT T2.StuID FROM Has_Pet AS T2 )",
        -9.054067611694336
      ],
      [
        "SELECT T1.StuID FROM Student AS T1 EXCEPT SELECT T2.StuID FROM Has_Pet AS T2 JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value",
        -9.442151069641113
      ],
      [
        "SELECT T1.StuID FROM Student AS T1 EXCEPT SELECT T2.StuID FROM Has_Pet AS T2 JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.weight = value",
        -10.031623840332031
      ],
      [
        "SELECT T1.StuID FROM Student AS T1 EXCEPT SELECT T2.StuID FROM Has_Pet AS T2 JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.pet_age = value",
        -10.26706600189209
      ],
      [
        "SELECT T1.StuID FROM Student AS T1 WHERE T1.StuID NOT IN ( SELECT T2.StuID FROM Has_Pet AS T2 ) EXCEPT SELECT T2.StuID FROM Has_Pet AS T2",
        -11.583090782165527
      ],
      [
        "SELECT T1.StuID FROM Student AS T1 WHERE T1.StuID = value EXCEPT SELECT T2.StuID FROM Has_Pet AS T2",
        -11.712408065795898
      ],
      [
        "SELECT T1.StuID FROM Student AS T1 EXCEPT SELECT T2.StuID FROM Has_Pet AS T2 WHERE T2.PetID = value",
        -12.078877449035645
      ],
      [
        "SELECT T1.StuID FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value EXCEPT SELECT T2.StuID FROM Has_Pet AS T2",
        -13.478591918945312
      ],
      [
        "SELECT DISTINCT T1.StuID FROM Student AS T1 EXCEPT SELECT T2.StuID FROM Has_Pet AS T2",
        -13.89989948272705
      ],
      [
        "SELECT T1.StuID FROM Student AS T1 WHERE T1.StuID = ( SELECT T2.StuID FROM Has_Pet AS T2 ) EXCEPT SELECT T2.StuID FROM Has_Pet AS T2",
        -13.950052261352539
      ],
      [
        "SELECT T1.StuID FROM Student AS T1 GROUP BY T1.StuID HAVING Count ( * ) > = value EXCEPT SELECT T2.StuID FROM Has_Pet AS T2",
        -14.010161399841309
      ],
      [
        "SELECT T1.StuID FROM Student AS T1 EXCEPT SELECT DISTINCT T2.StuID FROM Has_Pet AS T2",
        -14.216816902160645
      ],
      [
        "SELECT T1.StuID FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID WHERE T1.StuID = T2.StuID EXCEPT SELECT T2.StuID FROM Has_Pet AS T2",
        -14.434255599975586
      ],
      [
        "SELECT T1.StuID FROM Student AS T1 UNION SELECT T2.StuID FROM Has_Pet AS T2",
        -14.524001121520996
      ],
      [
        "SELECT T1.StuID FROM Student AS T1 EXCEPT SELECT T2.StuID FROM Has_Pet AS T2 JOIN Pets AS T3 ON T2.PetID = T3.PetID ORDER BY T3.weight Asc LIMIT value",
        -14.90634822845459
      ],
      [
        "SELECT T1.StuID FROM Student AS T1 INTERSECT SELECT T2.StuID FROM Has_Pet AS T2",
        -14.984370231628418
      ],
      [
        "SELECT T1.StuID FROM Student AS T1 LIMIT value EXCEPT SELECT T2.StuID FROM Has_Pet AS T2",
        -15.556056022644043
      ],
      [
        "SELECT T1.StuID FROM Student AS T1 EXCEPT SELECT DISTINCT T2.StuID FROM Has_Pet AS T2",
        -15.572160720825195
      ],
      [
        "SELECT StuID FROM Student",
        -18.342397689819336
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.StuID FROM Student AS T1 EXCEPT SELECT T2.StuID FROM Has_Pet AS T2",
    "predicted_parse": "SELECT T1.StuID FROM Student AS T1 EXCEPT SELECT T2.StuID FROM Has_Pet AS T2",
    "predicted_parse_explanation": [
      "Step 1: find the student 's student id in student table",
      "Step 2: find the has pet 's student id in has pet table",
      "Step 3: show the rows that are in the results of step 1 but not in the results of step 2"
    ],
    "template_feedback": "in step 2 , additionally use the information from the student table and pets table besides the has pet table . additionally make sure that pet type equals cat .",
    "primary_span": [
      [
        4,
        14
      ],
      [
        21,
        29
      ]
    ],
    "secondary_span": [
      [
        15,
        20
      ]
    ],
    "edits": [
      "student",
      "pets",
      "pet type equals \"cat\""
    ],
    "edits_original": "< from > add student </ from > < from > add pets </ from > < where > add pet type equals \" cat \" </ where >"
  },
  {
    "db_id": "flight_2",
    "feedback": "Change flights table with airlines table instep 1 , Remove \"greater than or equals\" use \"less than\" instep 2.",
    "question": "Find all airlines that have fewer than 200 flights.",
    "gold_parse": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200",
    "beam": [
      [
        "SELECT Airline FROM airlines GROUP BY Airline HAVING Count ( * ) > = value",
        -0.15213298797607422
      ],
      [
        "SELECT Airline FROM airlines GROUP BY Airline HAVING Count ( * ) < value",
        -2.7238712310791016
      ],
      [
        "SELECT Airline FROM airlines WHERE Abbreviation < value",
        -3.3670566082000732
      ],
      [
        "SELECT Airline FROM airlines WHERE uid < value",
        -4.090151429176331
      ],
      [
        "SELECT Airline FROM airlines GROUP BY Airline HAVING Count ( * ) BETWEEN value AND value",
        -4.398968696594238
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 WHERE T2.Airline < value",
        -5.137440204620361
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 WHERE T2.FlightNo < value",
        -5.747816562652588
      ],
      [
        "SELECT Airline FROM airlines GROUP BY Abbreviation HAVING Count ( * ) > = value",
        -6.486652374267578
      ],
      [
        "SELECT Airline FROM airlines GROUP BY uid HAVING Count ( * ) > = value",
        -7.807252407073975
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 GROUP BY T2.FlightNo HAVING Count ( * ) > = value",
        -8.634408950805664
      ],
      [
        "SELECT Airline FROM airlines GROUP BY Airline HAVING Count ( * ) = value",
        -8.81607723236084
      ],
      [
        "SELECT Airline FROM airlines WHERE Abbreviation = value",
        -9.325833082199097
      ],
      [
        "SELECT Airline FROM airlines WHERE Country < value",
        -9.35210371017456
      ],
      [
        "SELECT Airline FROM airlines WHERE Abbreviation > = value",
        -9.766016602516174
      ],
      [
        "SELECT Airline FROM airlines WHERE Airline < value",
        -10.126842975616455
      ],
      [
        "SELECT Airline FROM airlines WHERE Abbreviation BETWEEN value AND value",
        -10.304515600204468
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 WHERE T2.FlightNo = value",
        -10.864918828010559
      ],
      [
        "SELECT Airline FROM airlines GROUP BY Airline HAVING Count ( * ) > value",
        -10.877562522888184
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 WHERE T2.Airline = value",
        -11.217651605606079
      ],
      [
        "SELECT Airline FROM airlines",
        -11.472249031066895
      ]
    ],
    "predicted_parse_with_values": "SELECT Airline FROM airlines GROUP BY Airline HAVING Count ( * ) > = 200",
    "predicted_parse": "SELECT Airline FROM airlines GROUP BY Airline HAVING Count ( * ) > = value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of airline name in airlines table",
      "Step 2: find the airline name in airlines table whose corresponding value in step 1 is greater than or equals 200"
    ],
    "template_feedback": "in step 1 , additionally use the information from the flights table besides the airlines table . in step 2 , make sure that the corresponding value in step 1 less than 200 .",
    "primary_span": [
      [
        4,
        11
      ],
      [
        21,
        33
      ]
    ],
    "secondary_span": [
      [
        12,
        16
      ]
    ],
    "edits": [
      "flights",
      "number of rows less than 200",
      "number of rows greater than or equals to 200"
    ],
    "edits_original": "< from > add flights </ from > < having > add number of rows less than 200 </ having > < having > remove number of rows greater than or equals to 200 </ having >"
  },
  {
    "db_id": "flight_2",
    "feedback": "flights table should be use in place of airlines table .",
    "question": "How many flights do we have?",
    "gold_parse": "SELECT count(*) FROM FLIGHTS",
    "beam": [
      [
        "SELECT Count ( * ) FROM airlines",
        -1.430511474609375e-05
      ],
      [
        "SELECT Count ( * ) FROM flights WHERE FlightNo = value",
        -12.709384083747864
      ],
      [
        "SELECT Sum ( FlightNo ) FROM flights",
        -12.89653092622757
      ],
      [
        "SELECT Count ( * ) , Airline FROM flights",
        -13.474443912506104
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM airlines",
        -13.90993881225586
      ],
      [
        "SELECT Sum ( * ) FROM airlines",
        -13.921891212463379
      ],
      [
        "SELECT Count ( * ) FROM flights WHERE Airline = value",
        -14.104486465454102
      ],
      [
        "SELECT Avg ( FlightNo ) FROM flights",
        -14.518450856208801
      ],
      [
        "SELECT Count ( DISTINCT FlightNo ) FROM flights",
        -14.702191829681396
      ],
      [
        "SELECT Count ( Count ( * ) ) FROM airlines",
        -14.791121482849121
      ],
      [
        "SELECT Count ( * ) FROM flights ORDER BY FlightNo Desc",
        -14.968759775161743
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE AirportName = value",
        -14.998234510421753
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE City = value",
        -15.093864440917969
      ],
      [
        "SELECT Avg ( * ) FROM airlines",
        -15.141705989837646
      ],
      [
        "SELECT Count ( * ) FROM flights GROUP BY FlightNo",
        -15.512564182281494
      ],
      [
        "SELECT Count ( * ) FROM airlines WHERE Abbreviation = value",
        -15.62513017654419
      ],
      [
        "SELECT FlightNo FROM flights",
        -15.968229413032532
      ],
      [
        "SELECT Count ( * ) FROM airlines LIMIT value",
        -17.15421962738037
      ],
      [
        "SELECT Count ( DISTINCT * ) FROM airlines",
        -17.160624504089355
      ],
      [
        "SELECT Count ( * ) FROM airlines",
        -17.369389533996582
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM airlines",
    "predicted_parse": "SELECT Count ( * ) FROM airlines",
    "predicted_parse_explanation": [
      "find the number of rows in airlines table"
    ],
    "template_feedback": "use flights table in place of airlines table .",
    "primary_span": [
      [
        0,
        2
      ]
    ],
    "secondary_span": [
      [
        3,
        8
      ]
    ],
    "edits": [
      "flights",
      "airlines"
    ],
    "edits_original": "< from > add flights </ from > < from > remove airlines </ from >"
  },
  {
    "db_id": "world_1",
    "feedback": "In step 2 swap district , continent and local name with city , is official and language respectively , ensure continent is Asia .",
    "question": "Whic`h unique cities are in  Asian countries where Chinese is the official language?",
    "gold_parse": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  \"Asia\"",
    "beam": [
      [
        "SELECT T1.District FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = value AND T2.LocalName = value",
        -0.07714271545410156
      ],
      [
        "SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = value AND T2.LocalName = value",
        -3.1207923889160156
      ],
      [
        "SELECT T1.Population FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = value AND T2.LocalName = value",
        -4.078193664550781
      ],
      [
        "SELECT T1.District FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Code2 = value AND T2.LocalName = value",
        -4.8660173416137695
      ],
      [
        "SELECT T1.District FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.CountryCode = value AND T2.LocalName = value",
        -6.014071464538574
      ],
      [
        "SELECT T1.District FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = value AND T2.Continent = value",
        -7.696308135986328
      ],
      [
        "SELECT T1.District FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Code2 = value AND T2.Continent = value",
        -7.807914733886719
      ],
      [
        "SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Code2 = value AND T2.LocalName = value",
        -7.9178619384765625
      ],
      [
        "SELECT T1.District FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = value AND T2.Name = value",
        -7.961770057678223
      ],
      [
        "SELECT T1.District FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = value AND T2.GovernmentForm = value",
        -8.125750541687012
      ],
      [
        "SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.CountryCode = value AND T2.LocalName = value",
        -8.232885360717773
      ],
      [
        "SELECT T1.Population FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Code2 = value AND T2.LocalName = value",
        -8.735395431518555
      ],
      [
        "SELECT T1.Population FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.CountryCode = value AND T2.LocalName = value",
        -9.182510375976562
      ],
      [
        "SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Code2 = value AND T2.Continent = value",
        -9.613912582397461
      ],
      [
        "SELECT T1.District FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Code2 = value AND T2.Name = value",
        -9.635609149932861
      ],
      [
        "SELECT T1.District FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = value AND T1.Population = value",
        -9.670089721679688
      ],
      [
        "SELECT T1.District FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.CountryCode = value AND T2.Continent = value",
        -9.860190868377686
      ],
      [
        "SELECT T1.District FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.GovernmentForm = value AND T2.LocalName = value",
        -9.919466972351074
      ],
      [
        "SELECT T1.Population FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Code2 = value AND T2.Continent = value",
        -10.257316589355469
      ],
      [
        "SELECT T1.District FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = value",
        -11.315285682678223
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.District FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = \"T\" AND T2.LocalName = \"Chinese\"",
    "predicted_parse": "SELECT T1.District FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = value AND T2.LocalName = value",
    "predicted_parse_explanation": [
      "Step 1: for each row in city table , find the corresponding rows in country table",
      "Step 2: find the district of the results of step 1 whose continent equals T and local name equals Chinese"
    ],
    "template_feedback": "in step 1 , additionally use the information from the countrylanguage table . in step 2 , consider the continent equals Asia and language equals Chinese and is official equals T conditions in place of the continent equals T and local name equals Chinese conditions . find city 's name in place of district . make sure no repetition in the results .",
    "primary_span": [
      [
        4,
        12
      ],
      [
        17,
        31
      ],
      [
        46,
        49
      ],
      [
        55,
        62
      ]
    ],
    "secondary_span": [
      [
        32,
        45
      ],
      [
        50,
        54
      ]
    ],
    "edits": [
      "distinct",
      "name",
      "district",
      "countrylanguage",
      "is official equals \"T\"",
      "language equals \"Chinese\"",
      "continent equals \"Asia\"",
      "continent equals \"T\"",
      "local name equals \"Chinese\""
    ],
    "edits_original": "< select > add distinct </ select > < select > add name </ select > < select > remove district </ select > < from > add countrylanguage </ from > < where > add is official equals \" T \" </ where > < where > add language equals \" Chinese \" </ where > < where > add continent equals \" Asia \" </ where > < where > remove continent equals \" T \" </ where > < where > remove local name equals \" Chinese \" </ where >"
  },
  {
    "db_id": "network_1",
    "feedback": "In step 1, you need student id in friend table and grade in high schooler table.",
    "question": "What are the names of high schoolers who have 3 or more friends?",
    "gold_parse": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3",
    "beam": [
      [
        "SELECT name FROM Highschooler GROUP BY grade , grade HAVING Count ( * ) > = value",
        -0.8176097869873047
      ],
      [
        "SELECT name FROM Highschooler GROUP BY grade HAVING Count ( * ) > = value",
        -1.293360710144043
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id , T1.grade HAVING Count ( * ) > = value",
        -2.22894287109375
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T1.grade , T2.student_id HAVING Count ( * ) > = value",
        -2.2497081756591797
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T1.grade , T2.friend_id HAVING Count ( * ) > = value",
        -3.8554434776306152
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) > = value",
        -4.111479759216309
      ],
      [
        "SELECT name FROM Highschooler GROUP BY name , grade HAVING Count ( * ) > = value",
        -4.579565525054932
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id GROUP BY T1.grade , T2.student_id HAVING Count ( * ) > = value",
        -4.601228713989258
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id GROUP BY T2.student_id , T1.grade HAVING Count ( * ) > = value",
        -5.7403645515441895
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id GROUP BY T1.grade , T2.liked_id HAVING Count ( * ) > = value",
        -5.761289119720459
      ],
      [
        "SELECT name FROM Highschooler GROUP BY grade , name HAVING Count ( * ) > = value",
        -6.334415435791016
      ],
      [
        "SELECT name FROM Highschooler GROUP BY grade , Count ( * ) HAVING Count ( * ) > = value",
        -6.451051712036133
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id GROUP BY T2.liked_id , T1.grade HAVING Count ( * ) > = value",
        -7.158326148986816
      ],
      [
        "SELECT name FROM Highschooler GROUP BY grade , ID HAVING Count ( * ) > = value",
        -7.655267238616943
      ],
      [
        "SELECT name FROM Highschooler GROUP BY ID , grade HAVING Count ( * ) > = value",
        -7.664860248565674
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.friend_id , T1.grade HAVING Count ( * ) > = value",
        -7.936234474182129
      ],
      [
        "SELECT T1.grade FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) > = value",
        -8.13197135925293
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id WHERE T1.grade ! = value GROUP BY T2.student_id HAVING Count ( * ) > = value",
        -8.315349578857422
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id GROUP BY T2.student_id HAVING Count ( * ) > = value",
        -8.32167387008667
      ],
      [
        "SELECT name FROM Highschooler",
        -14.705415725708008
      ]
    ],
    "predicted_parse_with_values": "SELECT name FROM Highschooler GROUP BY grade , grade HAVING Count ( * ) > = 3",
    "predicted_parse": "SELECT name FROM Highschooler GROUP BY grade , grade HAVING Count ( * ) > = value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of grade and grade in high schooler table",
      "Step 2: find the name in high schooler table whose corresponding value in step 1 is greater than or equals 3"
    ],
    "template_feedback": "in step 1 , additionally use the information from the friend table besides the high schooler table . find for value of student id in place of grade .",
    "primary_span": [
      [
        4,
        11
      ],
      [
        18,
        23
      ]
    ],
    "secondary_span": [
      [
        12,
        17
      ],
      [
        24,
        28
      ]
    ],
    "edits": [
      "friend",
      "student id",
      "grade"
    ],
    "edits_original": "< from > add friend </ from > < groupBy > add student id </ groupBy > < groupBy > remove grade </ groupBy >"
  },
  {
    "db_id": "flight_2",
    "feedback": "you need to interchange airports table which has country to flights table which has destairport.",
    "question": "How many flights have destination ATO?",
    "gold_parse": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"",
    "beam": [
      [
        "SELECT Count ( * ) FROM airports WHERE Country = value",
        -0.6936893463134766
      ],
      [
        "SELECT Count ( * ) FROM airlines WHERE Airline = value",
        -0.9269933700561523
      ],
      [
        "SELECT Count ( * ) FROM airlines WHERE Country = value",
        -2.643270492553711
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE CountryAbbrev = value",
        -3.875117301940918
      ],
      [
        "SELECT Count ( * ) FROM airlines",
        -5.170103073120117
      ],
      [
        "SELECT Count ( * ) FROM airlines WHERE Abbreviation = value",
        -5.175282955169678
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE AirportName = value",
        -6.681346893310547
      ],
      [
        "SELECT Count ( * ) FROM flights WHERE FlightNo = value",
        -10.345636367797852
      ],
      [
        "SELECT Count ( * ) FROM flights WHERE Airline = value",
        -11.114412307739258
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE City = value",
        -12.554376602172852
      ],
      [
        "SELECT Count ( * ) FROM flights WHERE DestAirport = value",
        -13.175320625305176
      ],
      [
        "SELECT Count ( * ) FROM airlines WHERE uid = value",
        -14.414484977722168
      ],
      [
        "SELECT Count ( * ) FROM airlines WHERE Airline LIKE value",
        -15.040000915527344
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM airports WHERE Country = value",
        -15.204169273376465
      ],
      [
        "SELECT Count ( * ) FROM airlines EXCEPT SELECT * FROM airlines WHERE Airline = value",
        -15.391210556030273
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM airlines WHERE Airline = value",
        -15.508804321289062
      ],
      [
        "SELECT Avg ( * ) FROM airports WHERE Country = value",
        -15.512189984321594
      ],
      [
        "SELECT Avg ( * ) FROM airlines WHERE Airline = value",
        -15.695097088813782
      ],
      [
        "SELECT Count ( * ) FROM airlines ORDER BY Airline Desc",
        -15.69974684715271
      ],
      [
        "SELECT Count ( * ) , T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Airline = value",
        -16.21349447965622
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM airports WHERE Country = \"ATO\"",
    "predicted_parse": "SELECT Count ( * ) FROM airports WHERE Country = value",
    "predicted_parse_explanation": [
      "find the number of rows in airports table whose country equals ATO"
    ],
    "template_feedback": "use flights table in place of airports table . consider the destination airport equals ATO conditions in place of the country equals ATO conditions .",
    "primary_span": [
      [
        0,
        2
      ],
      [
        9,
        15
      ]
    ],
    "secondary_span": [
      [
        3,
        8
      ],
      [
        16,
        24
      ]
    ],
    "edits": [
      "flights",
      "airports",
      "destination airport equals \"ATO\"",
      "country equals \"ATO\""
    ],
    "edits_original": "< from > add flights </ from > < from > remove airports </ from > < where > add destination airport equals \" ATO \" </ where > < where > remove country equals \" ATO \" </ where >"
  },
  {
    "db_id": "flight_2",
    "feedback": "In step 1 replace abbreviation with source airport , in step 2 airports with flights , in step 3 airport name with source airport .",
    "question": "Find all airlines that have flights from airport 'CVO' but not from 'APG'.",
    "gold_parse": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"",
    "beam": [
      [
        "SELECT T1.Airline FROM airlines AS T1 WHERE T1.Abbreviation = value EXCEPT SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = value",
        -1.1158356666564941
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 WHERE T1.Country = value EXCEPT SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = value",
        -1.7014837265014648
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = value EXCEPT SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = value",
        -1.8350825309753418
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 WHERE T1.Abbreviation = value EXCEPT SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value",
        -2.1956095695495605
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 WHERE T1.Country = value EXCEPT SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value",
        -2.6450233459472656
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = value EXCEPT SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value",
        -2.782280445098877
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value EXCEPT SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = value",
        -3.4998435974121094
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 WHERE T1.Airline = value EXCEPT SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = value",
        -3.716066837310791
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value EXCEPT SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value",
        -4.455593109130859
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 WHERE T1.Airline = value EXCEPT SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value",
        -4.722951412200928
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 WHERE T1.Abbreviation = ( SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = value ) EXCEPT SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = value",
        -6.186034202575684
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 WHERE T2.FlightNo = value EXCEPT SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T3 WHERE T3.AirportName = value",
        -6.966733932495117
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 WHERE T1.Abbreviation = ( SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = value ) EXCEPT SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value",
        -7.232165336608887
      ],
      [
        "SELECT Airline FROM airlines WHERE Abbreviation = value EXCEPT SELECT Airline FROM airlines WHERE Country = value",
        -7.474564552307129
      ],
      [
        "SELECT Airline FROM airlines WHERE Country = value EXCEPT SELECT Airline FROM airlines WHERE Country = value",
        -7.905526161193848
      ],
      [
        "SELECT Airline FROM airlines WHERE Abbreviation = value EXCEPT SELECT Airline FROM airlines WHERE Abbreviation = value",
        -8.010747909545898
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 WHERE T1.Abbreviation = value EXCEPT SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = value AND T2.Country = value",
        -8.28367805480957
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 WHERE T1.Abbreviation = value EXCEPT SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = value AND T1.Abbreviation = value",
        -8.426345348358154
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = value AND T1.Abbreviation ! = value EXCEPT SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = value",
        -8.426586151123047
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = value AND T1.Abbreviation ! = value",
        -9.403974533081055
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.Airline FROM airlines AS T1 WHERE T1.Abbreviation = \"CVO\" EXCEPT SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = \"APG\"",
    "predicted_parse": "SELECT T1.Airline FROM airlines AS T1 WHERE T1.Abbreviation = value EXCEPT SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = value",
    "predicted_parse_explanation": [
      "Step 1: find the airline name in airlines table whose abbreviation equals CVO",
      "Step 2: for each row in airlines table , find the corresponding rows in airports table",
      "Step 3: find the airline name of the results of step 2 whose airport name equals APG",
      "Step 4: show the rows that are in the results of step 1 but not in the results of step 3"
    ],
    "template_feedback": "in step 1 , additionally use the information from the flights table besides the airlines table . consider the source airport equals CVO conditions in place of the abbreviation equals CVO conditions . in step 2 , use flights table in place of airports table in step 3 , consider the source airport equals APG conditions in place of the airport name equals APG conditions .",
    "primary_span": [
      [
        4,
        11
      ],
      [
        17,
        23
      ],
      [
        37,
        39
      ],
      [
        49,
        55
      ]
    ],
    "secondary_span": [
      [
        12,
        16
      ],
      [
        24,
        32
      ],
      [
        40,
        44
      ],
      [
        56,
        65
      ]
    ],
    "edits": [
      "flights",
      "source airport equals \"CVO\"",
      "abbreviation equals \"CVO\"",
      "flights",
      "airports",
      "source airport equals \"APG\"",
      "airport name equals \"APG\""
    ],
    "edits_original": "< from > add flights </ from > < where > add source airport equals \" CVO \" </ where > < where > remove abbreviation equals \" CVO \" </ where > < from > add flights </ from > < from > remove airports </ from > < where > add source airport equals \" APG \" </ where > < where > remove airport name equals \" APG \" </ where >"
  },
  {
    "db_id": "wta_1",
    "feedback": "You should use winner's name and winner's rank instead of tourney's name and loser's rank respectively.",
    "question": "Find the name and rank points of the winner who won the most times.",
    "gold_parse": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1",
    "beam": [
      [
        "SELECT tourney_name , loser_rank FROM matches GROUP BY winner_entry ORDER BY Count ( * ) Desc LIMIT value",
        -0.5481443405151367
      ],
      [
        "SELECT tourney_name , winner_rank FROM matches GROUP BY winner_entry ORDER BY Count ( * ) Desc LIMIT value",
        -1.4135160446166992
      ],
      [
        "SELECT tourney_name , loser_rank FROM matches GROUP BY winner_id ORDER BY Count ( * ) Desc LIMIT value",
        -3.300062656402588
      ],
      [
        "SELECT tourney_name , loser_rank FROM matches GROUP BY winner_name ORDER BY Count ( * ) Desc LIMIT value",
        -3.5394105911254883
      ],
      [
        "SELECT tourney_name , loser_rank FROM matches GROUP BY loser_rank ORDER BY Count ( * ) Desc LIMIT value",
        -4.123556137084961
      ],
      [
        "SELECT tourney_name , winner_rank FROM matches GROUP BY winner_id ORDER BY Count ( * ) Desc LIMIT value",
        -4.197805404663086
      ],
      [
        "SELECT tourney_name , loser_rank FROM matches GROUP BY score ORDER BY Count ( * ) Desc LIMIT value",
        -4.30258321762085
      ],
      [
        "SELECT tourney_name , winner_rank FROM matches GROUP BY winner_name ORDER BY Count ( * ) Desc LIMIT value",
        -4.426298141479492
      ],
      [
        "SELECT T2.tourney_name , T2.loser_rank FROM players AS T1 JOIN matches AS T2 ON T2.loser_id = T1.player_id JOIN rankings AS T3 ON T1.player_id = T3.player_id GROUP BY T3.player_id ORDER BY Count ( * ) Desc LIMIT value",
        -4.936907768249512
      ],
      [
        "SELECT tourney_name , winner_rank FROM matches GROUP BY loser_rank ORDER BY Count ( * ) Desc LIMIT value",
        -4.956705093383789
      ],
      [
        "SELECT tourney_name , winner_rank FROM matches GROUP BY score ORDER BY Count ( * ) Desc LIMIT value",
        -5.1485066413879395
      ],
      [
        "SELECT tourney_name , loser_rank FROM matches GROUP BY winner_rank ORDER BY Count ( * ) Desc LIMIT value",
        -5.31472110748291
      ],
      [
        "SELECT tourney_name , loser_rank FROM matches GROUP BY winner_ioc ORDER BY Count ( * ) Desc LIMIT value",
        -5.424812316894531
      ],
      [
        "SELECT tourney_name , loser_rank FROM matches GROUP BY tourney_id ORDER BY Count ( * ) Desc LIMIT value",
        -5.527065277099609
      ],
      [
        "SELECT T2.tourney_name , T2.winner_rank FROM players AS T1 JOIN matches AS T2 ON T2.loser_id = T1.player_id JOIN rankings AS T3 ON T1.player_id = T3.player_id GROUP BY T3.player_id ORDER BY Count ( * ) Desc LIMIT value",
        -5.84791898727417
      ],
      [
        "SELECT tourney_name , winner_rank FROM matches GROUP BY winner_rank ORDER BY Count ( * ) Desc LIMIT value",
        -6.148256778717041
      ],
      [
        "SELECT tourney_name , loser_rank FROM matches GROUP BY winner_hand ORDER BY Count ( * ) Desc LIMIT value",
        -6.227151870727539
      ],
      [
        "SELECT tourney_name , winner_rank FROM matches GROUP BY winner_ioc ORDER BY Count ( * ) Desc LIMIT value",
        -6.332376956939697
      ],
      [
        "SELECT tourney_name , winner_rank_points FROM matches GROUP BY winner_entry ORDER BY Count ( * ) Desc LIMIT value",
        -6.423288345336914
      ],
      [
        "SELECT tourney_name , winner_rank FROM matches GROUP BY tourney_id ORDER BY Count ( * ) Desc LIMIT value",
        -6.430148601531982
      ]
    ],
    "predicted_parse_with_values": "SELECT tourney_name , loser_rank FROM matches GROUP BY winner_entry ORDER BY Count ( * ) Desc LIMIT 1",
    "predicted_parse": "SELECT tourney_name , loser_rank FROM matches GROUP BY winner_entry ORDER BY Count ( * ) Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of winner entry in matches table",
      "Step 2: find the tourney name and loser rank in matches table with largest value in the results of step 1"
    ],
    "template_feedback": "in step 1 , find for each value of winner name in place of winner entry . in step 2 , find winner name and winner rank points in place of tourney name and loser rank .",
    "primary_span": [
      [
        4,
        10
      ],
      [
        21,
        27
      ]
    ],
    "secondary_span": [
      [
        11,
        16
      ],
      [
        28,
        36
      ]
    ],
    "edits": [
      "winner name",
      "winner rank points",
      "tourney name",
      "loser rank",
      "winner name",
      "winner entry"
    ],
    "edits_original": "< select > add winner name </ select > < select > add winner rank points </ select > < select > remove tourney name </ select > < select > remove loser rank </ select > < groupBy > add winner name </ groupBy > < groupBy > remove winner entry </ groupBy >"
  },
  {
    "db_id": "world_1",
    "feedback": "Replace code 2 in country with language in countrylanguage and Ensure corresponding is official equals T .",
    "question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?",
    "gold_parse": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"",
    "beam": [
      [
        "SELECT Count ( DISTINCT Code2 ) FROM country WHERE IndepYear < value",
        -0.43007850646972656
      ],
      [
        "SELECT Count ( DISTINCT Code ) FROM country WHERE IndepYear < value",
        -1.0694665908813477
      ],
      [
        "SELECT Count ( DISTINCT Code ) FROM country WHERE IndepYear > value",
        -5.251236915588379
      ],
      [
        "SELECT Count ( DISTINCT T2.Language ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.IndepYear < value",
        -7.968029975891113
      ],
      [
        "SELECT Count ( DISTINCT Code2 ) FROM country WHERE IndepYear > value",
        -8.017075538635254
      ],
      [
        "SELECT Sum ( Code ) FROM country WHERE IndepYear < value",
        -8.374293804168701
      ],
      [
        "SELECT Count ( * ) FROM country WHERE IndepYear < value",
        -9.622889518737793
      ],
      [
        "SELECT Count ( DISTINCT LocalName ) FROM country WHERE IndepYear < value",
        -10.262285232543945
      ],
      [
        "SELECT Sum ( DISTINCT Code ) FROM country WHERE IndepYear < value",
        -10.414924144744873
      ],
      [
        "SELECT Count ( DISTINCT Code ) FROM country WHERE Continent = value",
        -11.611348152160645
      ],
      [
        "SELECT Count ( Code2 ) FROM country WHERE IndepYear < value",
        -11.870867729187012
      ],
      [
        "SELECT Count ( Code ) FROM country WHERE IndepYear < value",
        -12.090348243713379
      ],
      [
        "SELECT Sum ( Code2 ) FROM country WHERE IndepYear < value",
        -12.12869119644165
      ],
      [
        "SELECT Sum ( DISTINCT Code2 ) FROM country WHERE IndepYear < value",
        -12.55226993560791
      ],
      [
        "SELECT Count ( DISTINCT Name ) FROM country WHERE IndepYear < value",
        -12.585979461669922
      ],
      [
        "SELECT Avg ( Code ) FROM country WHERE IndepYear < value",
        -12.966822624206543
      ],
      [
        "SELECT Count ( DISTINCT Code ) FROM country WHERE IndepYear > value AND Continent = value",
        -13.200809478759766
      ],
      [
        "SELECT Count ( DISTINCT HeadOfState ) FROM country WHERE IndepYear < value",
        -13.204390525817871
      ],
      [
        "SELECT Count ( DISTINCT Population ) FROM country WHERE IndepYear < value",
        -13.44438362121582
      ],
      [
        "SELECT Count ( DISTINCT Code2 ) FROM country WHERE IndepYear > value AND Continent = value",
        -14.190815448760986
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( DISTINCT Code2 ) FROM country WHERE IndepYear < 1930",
    "predicted_parse": "SELECT Count ( DISTINCT Code2 ) FROM country WHERE IndepYear < value",
    "predicted_parse_explanation": [
      "find the number of different code2 in country table whose indepdent year less than 1930"
    ],
    "template_feedback": "additionally use the information from the countrylanguage table besides the country table . additionally make sure that is official equals T . find number of different language in place of number of different code2 .",
    "primary_span": [
      [
        0,
        7
      ],
      [
        13,
        20
      ],
      [
        21,
        25
      ]
    ],
    "secondary_span": [
      [
        8,
        12
      ],
      [
        26,
        33
      ]
    ],
    "edits": [
      "number of distinct language",
      "number of distinct code2",
      "countrylanguage",
      "is official equals \"T\""
    ],
    "edits_original": "< select > add number of distinct language </ select > < select > remove number of distinct code2 </ select > < from > add countrylanguage </ from > < where > add is official equals \" T \" </ where >"
  },
  {
    "db_id": "flight_2",
    "feedback": "source airport must be apg.",
    "question": "What are flight numbers of flights departing from Airport \"APG\"?",
    "gold_parse": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
    "beam": [
      [
        "SELECT T2.FlightNo FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.AirportName = value",
        -0.00012683868408203125
      ],
      [
        "SELECT T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Airline = value",
        -9.597331047058105
      ],
      [
        "SELECT T2.FlightNo FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.City = value",
        -10.360001564025879
      ],
      [
        "SELECT T2.FlightNo FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.Country = value",
        -10.611079216003418
      ],
      [
        "SELECT T2.FlightNo FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.CountryAbbrev = value",
        -13.29770278930664
      ],
      [
        "SELECT DISTINCT T2.FlightNo FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.AirportName = value",
        -13.690229415893555
      ],
      [
        "SELECT T2.FlightNo , T2.FlightNo FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.AirportName = value",
        -13.98879361152649
      ],
      [
        "SELECT T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Abbreviation = value",
        -15.138769149780273
      ],
      [
        "SELECT T2.FlightNo FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.AirportName LIKE value",
        -15.347671508789062
      ],
      [
        "SELECT DISTINCT T2.FlightNo FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.AirportName = value",
        -15.955035209655762
      ],
      [
        "SELECT T2.FlightNo FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.AirportName = value AND T1.AirportName = value",
        -16.197575330734253
      ],
      [
        "SELECT T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Country = value",
        -16.241286277770996
      ],
      [
        "SELECT T2.FlightNo FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.AirportName < value",
        -16.762442350387573
      ],
      [
        "SELECT FlightNo FROM flights WHERE FlightNo LIKE value",
        -16.966113567352295
      ],
      [
        "SELECT Count ( T2.FlightNo ) FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.AirportName = value",
        -17.06145715713501
      ],
      [
        "SELECT FlightNo FROM flights",
        -17.190979957580566
      ],
      [
        "SELECT T2.FlightNo FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE DISTINCT T1.AirportName = value",
        -17.199522972106934
      ],
      [
        "SELECT T2.FlightNo FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.AirportName = value LIMIT value",
        -17.30595874786377
      ],
      [
        "SELECT T2.FlightNo , T2.Airline FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.AirportName = value",
        -17.455296754837036
      ],
      [
        "SELECT T2.FlightNo FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.AirportName = T2.FlightNo",
        -17.49219799041748
      ]
    ],
    "predicted_parse_with_values": "SELECT T2.FlightNo FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.AirportName = \"APG\"",
    "predicted_parse": "SELECT T2.FlightNo FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.AirportName = value",
    "predicted_parse_explanation": [
      "Step 1: for each row in airports table , find the corresponding rows in flights table",
      "Step 2: find the flight number of the results of step 1 whose airport name equals APG"
    ],
    "template_feedback": "in step 1 , do not use the airports table . in step 2 , consider the source airport equals APG conditions in place of the airport name equals APG conditions .",
    "primary_span": [
      [
        4,
        10
      ],
      [
        15,
        21
      ]
    ],
    "secondary_span": [
      [
        4,
        10
      ],
      [
        22,
        31
      ]
    ],
    "edits": [
      "airports",
      "source airport equals \"APG\"",
      "airport name equals \"APG\""
    ],
    "edits_original": "< from > remove airports </ from > < where > add source airport equals \" APG \" </ where > < where > remove airport name equals \" APG \" </ where >"
  },
  {
    "db_id": "world_1",
    "feedback": "Incomplete feedback, so cannot form the sentence.",
    "question": "What is the total surface area of the continents Asia and Europe?",
    "gold_parse": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\"",
    "beam": [
      [
        "SELECT Sum ( SurfaceArea ) FROM country WHERE Continent = value AND Continent = value",
        -0.11243247985839844
      ],
      [
        "SELECT Sum ( SurfaceArea ) FROM country WHERE Continent = value",
        -3.0951108932495117
      ],
      [
        "SELECT Sum ( SurfaceArea ) FROM country WHERE Continent BETWEEN value AND value",
        -3.249818801879883
      ],
      [
        "SELECT Sum ( SurfaceArea ) FROM country WHERE Region = value AND Continent = value",
        -4.050604820251465
      ],
      [
        "SELECT Sum ( SurfaceArea ) FROM country WHERE Name = value AND Continent = value",
        -6.124317169189453
      ],
      [
        "SELECT Sum ( SurfaceArea ) FROM country WHERE Continent = value OR Continent = value",
        -7.09016752243042
      ],
      [
        "SELECT Sum ( SurfaceArea ) FROM country WHERE LocalName = value AND Continent = value",
        -7.287145614624023
      ],
      [
        "SELECT Sum ( SurfaceArea ) FROM country WHERE Continent = value AND Name = value",
        -8.791454315185547
      ],
      [
        "SELECT Sum ( SurfaceArea ) FROM country",
        -8.887990951538086
      ],
      [
        "SELECT Sum ( SurfaceArea ) FROM country WHERE Continent = value AND LocalName = value",
        -9.095598220825195
      ],
      [
        "SELECT Sum ( SurfaceArea ) FROM country WHERE Continent > = value",
        -9.816320419311523
      ],
      [
        "SELECT Sum ( SurfaceArea ) FROM country WHERE Continent > = value AND Continent < = value",
        -9.884936332702637
      ],
      [
        "SELECT Sum ( SurfaceArea ) FROM country WHERE SurfaceArea > value AND Continent = value",
        -9.89799976348877
      ],
      [
        "SELECT Sum ( SurfaceArea ) FROM country WHERE Continent > value",
        -9.937154769897461
      ],
      [
        "SELECT Sum ( SurfaceArea ) FROM country WHERE Continent = value AND Continent > = value",
        -10.802549362182617
      ],
      [
        "SELECT Sum ( SurfaceArea ) FROM country WHERE Continent > = value AND Continent = value",
        -11.08249568939209
      ],
      [
        "SELECT Sum ( SurfaceArea ) FROM country WHERE Continent = value AND Continent > value",
        -11.125489234924316
      ],
      [
        "SELECT Sum ( SurfaceArea ) FROM country WHERE Region = value",
        -11.520438194274902
      ],
      [
        "SELECT Sum ( SurfaceArea ) FROM country WHERE Continent ! = value",
        -11.651915550231934
      ],
      [
        "SELECT Sum ( SurfaceArea ) FROM country WHERE Region IN ( SELECT Region FROM country WHERE Continent = value ) AND Continent IN ( SELECT Continent FROM country WHERE Continent = value )",
        -12.675509929656982
      ]
    ],
    "predicted_parse_with_values": "SELECT Sum ( SurfaceArea ) FROM country WHERE Continent = \"Europe\" AND Continent = \"Asia\"",
    "predicted_parse": "SELECT Sum ( SurfaceArea ) FROM country WHERE Continent = value AND Continent = value",
    "predicted_parse_explanation": [
      "find the summation of surface area in country table whose continent equals Europe and continent equals Asia"
    ],
    "template_feedback": "you shoud consider either of the conditions rather than both of them .",
    "primary_span": [
      [
        0,
        12
      ]
    ],
    "secondary_span": [],
    "edits": [
      "continent equals \"Asia\" or continent equals \"Europe\"",
      "continent equals \"Europe\"",
      "continent equals \"Asia\""
    ],
    "edits_original": "< where > add continent equals \" Asia \" or continent equals \" Europe \" </ where > < where > remove continent equals \" Europe \" </ where > < where > remove continent equals \" Asia \" </ where >"
  },
  {
    "db_id": "student_transcripts_tracking",
    "feedback": "Find for departments whose department id is present in degree programs table .",
    "question": "How many different departments offer degrees?",
    "gold_parse": "SELECT count(DISTINCT department_id) FROM Degree_Programs",
    "beam": [
      [
        "SELECT Count ( DISTINCT department_name ) FROM Departments",
        -4.863739013671875e-05
      ],
      [
        "SELECT Count ( DISTINCT department_name ) , department_name FROM Departments GROUP BY department_name",
        -11.65521788597107
      ],
      [
        "SELECT Count ( department_name ) FROM Departments",
        -11.85695743560791
      ],
      [
        "SELECT Count ( * ) FROM Addresses",
        -11.88189697265625
      ],
      [
        "SELECT Count ( DISTINCT department_id ) FROM Degree_Programs",
        -11.949378967285156
      ],
      [
        "SELECT Sum ( DISTINCT department_name ) FROM Departments",
        -13.117547988891602
      ],
      [
        "SELECT Count ( DISTINCT T1.department_name ) , T2.degree_summary_name FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id GROUP BY T1.department_name",
        -13.600850820541382
      ],
      [
        "SELECT Count ( DISTINCT T1.department_name ) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id WHERE T2.degree_summary_name = value",
        -13.657505989074707
      ],
      [
        "SELECT Avg ( DISTINCT department_name ) FROM Departments",
        -13.858516216278076
      ],
      [
        "SELECT Count ( DISTINCT department_name ) , Count ( DISTINCT department_name ) FROM Departments",
        -13.889984607696533
      ],
      [
        "SELECT Count ( DISTINCT T2.department_name ) , T1.city FROM Addresses AS T1 JOIN Departments AS T2 JOIN Degree_Programs AS T3 ON T3.department_id = T2.department_id JOIN Students AS T4 ON T1.address_id = T4.current_address_id JOIN Student_Enrolment AS T5 ON T4.student_id = T5.student_id AND T5.degree_program_id = T3.degree_program_id GROUP BY T2.department_name",
        -14.059879302978516
      ],
      [
        "SELECT Count ( Count ( DISTINCT department_name ) ) FROM Departments",
        -14.088013648986816
      ],
      [
        "SELECT Count ( DISTINCT T2.department_name ) , T1.course_name FROM Courses AS T1 JOIN Departments AS T2 JOIN Degree_Programs AS T3 ON T3.department_id = T2.department_id JOIN Student_Enrolment AS T4 ON T4.degree_program_id = T3.degree_program_id JOIN Student_Enrolment_Courses AS T5 ON T1.course_id = T5.course_id AND T5.student_enrolment_id = T4.student_enrolment_id GROUP BY T2.department_name",
        -14.256300926208496
      ],
      [
        "SELECT Count ( DISTINCT department_name ) , department_description FROM Departments GROUP BY department_name",
        -14.295163631439209
      ],
      [
        "SELECT Count ( DISTINCT T1.department_name ) , T2.department_id FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id GROUP BY T1.department_name",
        -14.346056938171387
      ],
      [
        "SELECT DISTINCT Count ( DISTINCT department_name ) FROM Departments",
        -14.77413558959961
      ],
      [
        "SELECT Sum ( department_name ) FROM Departments",
        -15.326976299285889
      ],
      [
        "SELECT Avg ( department_name ) FROM Departments",
        -16.568958282470703
      ],
      [
        "SELECT Count ( DISTINCT department_name ) FROM Departments LIMIT value",
        -16.97483539581299
      ],
      [
        "SELECT Count ( Avg ( DISTINCT department_name ) ) FROM Departments",
        -17.20804786682129
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( DISTINCT department_name ) FROM Departments",
    "predicted_parse": "SELECT Count ( DISTINCT department_name ) FROM Departments",
    "predicted_parse_explanation": [
      "find the number of different department name in departments table"
    ],
    "template_feedback": "use degree programs table in place of departments table . find number of different degree programs 's department id in place of number of different department name .",
    "primary_span": [
      [
        0,
        3
      ],
      [
        10,
        18
      ]
    ],
    "secondary_span": [
      [
        4,
        9
      ],
      [
        19,
        27
      ]
    ],
    "edits": [
      "number of distinct department id",
      "number of distinct department name",
      "degree programs",
      "departments"
    ],
    "edits_original": "< select > add number of distinct department id </ select > < select > remove number of distinct department name </ select > < from > add degree programs </ from > < from > remove departments </ from >"
  },
  {
    "db_id": "car_1",
    "feedback": "Supersede continents with countries .",
    "question": "How many countries exist?",
    "gold_parse": "SELECT count(*) FROM COUNTRIES",
    "beam": [
      [
        "SELECT Count ( * ) FROM continents",
        -1.9073486328125e-05
      ],
      [
        "SELECT Sum ( * ) FROM continents",
        -12.407729685306549
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM continents",
        -12.997554779052734
      ],
      [
        "SELECT Sum ( Continent ) FROM countries",
        -13.295982837677002
      ],
      [
        "SELECT Count ( * ) FROM countries GROUP BY CountryId",
        -13.745386123657227
      ],
      [
        "SELECT Sum ( CountryId ) FROM countries",
        -13.844122409820557
      ],
      [
        "SELECT Count ( * ) FROM countries WHERE CountryName = value",
        -14.151626825332642
      ],
      [
        "SELECT Count ( * ) , CountryName FROM countries",
        -14.486527025699615
      ],
      [
        "SELECT Sum ( Continent ) FROM continents",
        -14.582224607467651
      ],
      [
        "SELECT Count ( * ) , Continent FROM countries",
        -15.077553510665894
      ],
      [
        "SELECT Count ( Count ( * ) ) FROM continents",
        -15.086935043334961
      ],
      [
        "SELECT Avg ( Continent ) FROM countries",
        -15.449537098407745
      ],
      [
        "SELECT Sum ( CountryName ) FROM countries",
        -15.570470571517944
      ],
      [
        "SELECT Count ( * ) FROM countries ORDER BY Continent Desc",
        -15.79421180486679
      ],
      [
        "SELECT Avg ( * ) FROM continents",
        -16.37929391860962
      ],
      [
        "SELECT Avg ( CountryId ) FROM countries",
        -16.476850748062134
      ],
      [
        "SELECT Max ( Continent ) FROM countries",
        -16.504980266094208
      ],
      [
        "SELECT Count ( DISTINCT Continent ) FROM countries",
        -16.722725868225098
      ],
      [
        "SELECT Count ( DISTINCT * ) FROM continents",
        -16.95623016357422
      ],
      [
        "SELECT Count ( * ) FROM continents LIMIT value",
        -16.96702766418457
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM continents",
    "predicted_parse": "SELECT Count ( * ) FROM continents",
    "predicted_parse_explanation": [
      "find the number of rows in continents table"
    ],
    "template_feedback": "use countries table in place of continents table .",
    "primary_span": [
      [
        0,
        2
      ]
    ],
    "secondary_span": [
      [
        3,
        8
      ]
    ],
    "edits": [
      "countries",
      "continents"
    ],
    "edits_original": "< from > add countries </ from > < from > remove continents </ from >"
  },
  {
    "db_id": "wta_1",
    "feedback": "Use birth date instead of loser age and winner rank points instead of winner rank .",
    "question": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches.",
    "gold_parse": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1",
    "beam": [
      [
        "SELECT T1.first_name , T1.country_code , T2.loser_age FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.winner_rank Desc LIMIT value",
        -0.4173698425292969
      ],
      [
        "SELECT T1.first_name , T1.country_code , T2.loser_age FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.winner_rank_points Desc LIMIT value",
        -2.2147693634033203
      ],
      [
        "SELECT T1.first_name , T1.country_code , T2.loser_age FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.loser_rank Desc LIMIT value",
        -2.2215747833251953
      ],
      [
        "SELECT T1.first_name , T1.country_code , T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.winner_rank Desc LIMIT value",
        -3.0029258728027344
      ],
      [
        "SELECT T1.first_name , T1.country_code , T2.loser_age FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.loser_rank_points Desc LIMIT value",
        -3.2509117126464844
      ],
      [
        "SELECT T1.first_name , T1.country_code , T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.winner_rank_points Desc LIMIT value",
        -4.7126007080078125
      ],
      [
        "SELECT T1.first_name , T1.country_code , T2.loser_age FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.winner_rank Asc LIMIT value",
        -4.84969425201416
      ],
      [
        "SELECT T1.first_name , T1.country_code , T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.loser_rank Desc LIMIT value",
        -4.913707733154297
      ],
      [
        "SELECT T1.first_name , T1.country_code , T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.loser_rank_points Desc LIMIT value",
        -5.768960952758789
      ],
      [
        "SELECT T1.first_name , T1.country_code , T2.loser_age FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.loser_rank Asc LIMIT value",
        -5.773687362670898
      ],
      [
        "SELECT T1.first_name , T1.country_code , T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.winner_rank Asc LIMIT value",
        -6.885527610778809
      ],
      [
        "SELECT T1.first_name , T1.country_code , T2.loser_age FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.winner_rank_points Asc LIMIT value",
        -7.016449928283691
      ],
      [
        "SELECT T1.first_name , T1.country_code , T2.loser_age FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.loser_rank_points Asc LIMIT value",
        -7.6110639572143555
      ],
      [
        "SELECT T1.first_name , T1.country_code , T3.ranking_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id JOIN rankings AS T3 ON T1.player_id = T3.player_id ORDER BY T2.winner_rank Desc LIMIT value",
        -7.813730239868164
      ],
      [
        "SELECT T1.first_name , T1.country_code , T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.loser_rank Asc LIMIT value",
        -7.838218688964844
      ],
      [
        "SELECT T1.first_name , T1.country_code , T2.loser_rank FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.winner_rank Desc LIMIT value",
        -8.461206436157227
      ],
      [
        "SELECT T1.first_name , T1.country_code , T2.winner_age FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.winner_rank Desc LIMIT value",
        -8.883857727050781
      ],
      [
        "SELECT T1.first_name , T1.country_code , T2.loser_age FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id JOIN rankings AS T3 ON T1.player_id = T3.player_id ORDER BY T3.ranking_points Desc LIMIT value",
        -8.915379524230957
      ],
      [
        "SELECT T1.first_name , T1.country_code , T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.winner_rank_points Asc LIMIT value",
        -9.030854225158691
      ],
      [
        "SELECT T1.first_name , T1.country_code , T2.loser_age FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id",
        -11.199237823486328
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.first_name , T1.country_code , T2.loser_age FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.winner_rank Desc LIMIT 1",
    "predicted_parse": "SELECT T1.first_name , T1.country_code , T2.loser_age FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.winner_rank Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: for each row in players table , find the corresponding rows in matches table",
      "Step 2: find the first name , country code , loser age of the results of step 1 with largest value of winner rank"
    ],
    "template_feedback": "in step 2 , find birth date in place of loser age . order the results by winner rank points in place of winner rank .",
    "primary_span": [
      [
        4,
        6
      ],
      [
        13,
        19
      ]
    ],
    "secondary_span": [
      [
        7,
        12
      ],
      [
        20,
        25
      ]
    ],
    "edits": [
      "birth date",
      "loser age",
      "winner rank points",
      "winner rank"
    ],
    "edits_original": "< select > add birth date </ select > < select > remove loser age </ select > < orderBy > add winner rank points </ orderBy > < orderBy > remove winner rank </ orderBy >"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "feedback": "Change templates table with documents in step 1.",
    "question": "Which template type code is used by most number of documents?",
    "gold_parse": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1",
    "beam": [
      [
        "SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY Count ( * ) Desc LIMIT value",
        -0.0006237030029296875
      ],
      [
        "SELECT T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T2.Template_ID ORDER BY Count ( * ) Desc LIMIT value",
        -7.518691062927246
      ],
      [
        "SELECT T2.Template_Type_Code FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code GROUP BY T1.Template_Type_Code ORDER BY Count ( * ) Desc LIMIT value",
        -10.281048774719238
      ],
      [
        "SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code GROUP BY T2.Template_Type_Code ORDER BY Count ( * ) Desc LIMIT value",
        -10.320786476135254
      ],
      [
        "SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY Count ( * ) Desc",
        -12.3750638961792
      ],
      [
        "SELECT DISTINCT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY Count ( * ) Desc LIMIT value",
        -13.431036949157715
      ],
      [
        "SELECT Template_Type_Code , Count ( * ) FROM Templates GROUP BY Template_Type_Code ORDER BY Count ( * ) Desc LIMIT value",
        -13.534340858459473
      ],
      [
        "SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code",
        -14.164786338806152
      ],
      [
        "SELECT T2.Template_ID FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T1.Template_Type_Code ORDER BY Count ( * ) Desc LIMIT value",
        -14.292108535766602
      ],
      [
        "SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY Count ( * ) Asc LIMIT value",
        -14.581592559814453
      ],
      [
        "SELECT T1.Template_Type_Description FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code GROUP BY T2.Template_Type_Code ORDER BY Count ( * ) Desc LIMIT value",
        -14.699930191040039
      ],
      [
        "SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code HAVING Count ( * ) > value",
        -14.93304443359375
      ],
      [
        "SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY Avg ( * ) Desc LIMIT value",
        -15.45605754852295
      ],
      [
        "SELECT Template_Type_Code FROM Templates GROUP BY Max ( Template_Type_Code ) ORDER BY Count ( * ) Desc LIMIT value",
        -15.458062171936035
      ],
      [
        "SELECT Template_Type_Code FROM Templates ORDER BY Count ( * ) Desc LIMIT value",
        -15.500375747680664
      ],
      [
        "SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY Sum ( * ) Desc LIMIT value",
        -15.698318481445312
      ],
      [
        "SELECT * FROM Templates GROUP BY Template_Type_Code ORDER BY Count ( * ) Desc LIMIT value",
        -15.821582794189453
      ],
      [
        "SELECT Count ( * ) FROM Templates GROUP BY Template_Type_Code ORDER BY Count ( * ) Desc LIMIT value",
        -15.873687744140625
      ],
      [
        "SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY Count ( DISTINCT * ) Desc LIMIT value",
        -15.918246269226074
      ],
      [
        "SELECT T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Document_Name = ( SELECT T1.Template_Type_Code FROM Templates AS T1 GROUP BY T1.Template_Type_Code ORDER BY Count ( * ) Desc LIMIT value ) GROUP BY T1.Template_Type_Code ORDER BY Count ( * ) Desc LIMIT value",
        -16.0109703540802
      ]
    ],
    "predicted_parse_with_values": "SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY Count ( * ) Desc LIMIT 1",
    "predicted_parse": "SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY Count ( * ) Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of template type code in templates table",
      "Step 2: find the template type code in templates table with largest value in the results of step 1"
    ],
    "template_feedback": "in step 1 , additionally use the information from the documents table besides the templates table .",
    "primary_span": [
      [
        4,
        11
      ]
    ],
    "secondary_span": [
      [
        12,
        16
      ]
    ],
    "edits": [
      "documents"
    ],
    "edits_original": "< from > add documents </ from >"
  },
  {
    "db_id": "car_1",
    "feedback": "Exchange maker with horsepower in step 2.",
    "question": "What is the average horsepower for all cards produced before 1980?",
    "gold_parse": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980",
    "beam": [
      [
        "SELECT Avg ( T1.Maker ) FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T3.Year < value",
        -0.7798967361450195
      ],
      [
        "SELECT Avg ( Edispl ) FROM cars_data WHERE Year < value",
        -1.8044068813323975
      ],
      [
        "SELECT Avg ( Horsepower ) FROM cars_data WHERE Year < value",
        -1.9762194156646729
      ],
      [
        "SELECT Avg ( T1.ModelId ) FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T3.Year < value",
        -2.015045166015625
      ],
      [
        "SELECT Avg ( DISTINCT T1.Maker ) FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T3.Year < value",
        -2.887913942337036
      ],
      [
        "SELECT Avg ( * ) FROM cars_data WHERE Year < value",
        -3.9408960342407227
      ],
      [
        "SELECT Avg ( Weight ) FROM cars_data WHERE Year < value",
        -4.22119665145874
      ],
      [
        "SELECT Avg ( Year ) FROM cars_data WHERE Year < value",
        -4.876324653625488
      ],
      [
        "SELECT Avg ( T1.Model ) FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T3.Year < value",
        -5.908873081207275
      ],
      [
        "SELECT Avg ( Accelerate ) FROM cars_data WHERE Year < value",
        -6.297555446624756
      ],
      [
        "SELECT Avg ( MPG ) FROM cars_data WHERE Year < value",
        -6.796097278594971
      ],
      [
        "SELECT Avg ( Cylinders ) FROM cars_data WHERE Year < value",
        -7.1061859130859375
      ],
      [
        "SELECT Avg ( DISTINCT T1.ModelId ) FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T3.Year < value",
        -7.255395889282227
      ],
      [
        "SELECT Avg ( T1.Maker ) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id WHERE T4.Year < value",
        -8.794540882110596
      ],
      [
        "SELECT Avg ( DISTINCT T1.Maker ) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id WHERE T4.Year < value",
        -9.198029518127441
      ],
      [
        "SELECT Avg ( T1.Maker ) FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T3.Year < value",
        -9.976212501525879
      ],
      [
        "SELECT Avg ( T1.FullName ) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id WHERE T4.Year < value",
        -10.788768768310547
      ],
      [
        "SELECT Avg ( T3.Edispl ) FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T1.Model IN ( SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T3.Year < value )",
        -11.392246961593628
      ],
      [
        "SELECT Avg ( T1.Make ) FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T2.Year < value",
        -11.583004474639893
      ],
      [
        "SELECT Avg ( T1.MakeId ) FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T2.Year < value",
        -11.660183906555176
      ]
    ],
    "predicted_parse_with_values": "SELECT Avg ( T1.Maker ) FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T3.Year < 1980",
    "predicted_parse": "SELECT Avg ( T1.Maker ) FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T3.Year < value",
    "predicted_parse_explanation": [
      "Step 1: for each row in model list table , find the corresponding rows in car names table and in cars data table",
      "Step 2: find the average maker of the results of step 1 whose year less than 1980"
    ],
    "template_feedback": "in step 1 , do not use the car names table and model list table . in step 2 , find average horsepower in place of average maker .",
    "primary_span": [
      [
        4,
        15
      ],
      [
        20,
        22
      ]
    ],
    "secondary_span": [
      [
        4,
        15
      ],
      [
        23,
        28
      ]
    ],
    "edits": [
      "average horsepower",
      "average maker",
      "model list",
      "car names"
    ],
    "edits_original": "< select > add average horsepower </ select > < select > remove average maker </ select > < from > remove model list </ from > < from > remove car names </ from >"
  },
  {
    "db_id": "world_1",
    "feedback": "in both the language you need to use region and local name.",
    "question": "Which regions speak Dutch or English?",
    "gold_parse": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\"",
    "beam": [
      [
        "SELECT Continent FROM country WHERE Continent = value OR LocalName = value",
        -1.2194795608520508
      ],
      [
        "SELECT Continent FROM country WHERE Continent = value OR Continent = value",
        -2.241379737854004
      ],
      [
        "SELECT Continent FROM country WHERE Continent = value OR Name = value",
        -2.3516693115234375
      ],
      [
        "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value OR T1.LocalName = value",
        -2.3887596130371094
      ],
      [
        "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value OR T1.Continent = value",
        -2.500349998474121
      ],
      [
        "SELECT Continent FROM country WHERE LocalName = value OR LocalName = value",
        -2.63584041595459
      ],
      [
        "SELECT Continent FROM country WHERE LocalName = value OR Continent = value",
        -2.838131904602051
      ],
      [
        "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = value OR T2.Language = value",
        -3.0810670852661133
      ],
      [
        "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value OR T1.Name = value",
        -3.265026092529297
      ],
      [
        "SELECT Continent FROM country WHERE LocalName = value OR Name = value",
        -3.414754867553711
      ],
      [
        "SELECT Continent FROM country WHERE Name = value OR LocalName = value",
        -3.5457305908203125
      ],
      [
        "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value OR T2.Language = value",
        -4.369232177734375
      ],
      [
        "SELECT Continent FROM country WHERE Name = value OR Continent = value",
        -4.5064496994018555
      ],
      [
        "SELECT Continent FROM country WHERE Name = value OR Name = value",
        -4.6937150955200195
      ],
      [
        "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.LocalName = value OR T2.Language = value",
        -4.889701843261719
      ],
      [
        "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = value OR T2.Language = value",
        -5.455277442932129
      ],
      [
        "SELECT Region FROM country WHERE Continent = value OR LocalName = value",
        -6.290884971618652
      ],
      [
        "SELECT Region FROM country WHERE Continent = value OR Continent = value",
        -7.31095027923584
      ],
      [
        "SELECT Region FROM country WHERE Continent = value OR Name = value",
        -7.322551727294922
      ],
      [
        "SELECT LocalName FROM country WHERE Continent = value OR LocalName = value",
        -7.3818230628967285
      ]
    ],
    "predicted_parse_with_values": "SELECT Continent FROM country WHERE Continent = \"English\" OR LocalName = \"Dutch\"",
    "predicted_parse": "SELECT Continent FROM country WHERE Continent = value OR LocalName = value",
    "predicted_parse_explanation": [
      "find the continent in country table whose continent equals English or local name equals Dutch"
    ],
    "template_feedback": "additionally use the information from the countrylanguage table besides the country table . consider the language equals English or language equals Dutch conditions in place of the continent equals English or local name equals Dutch conditions . find region in place of continent . make sure no repetition in the results .",
    "primary_span": [
      [
        0,
        7
      ],
      [
        13,
        22
      ],
      [
        37,
        38
      ],
      [
        44,
        51
      ]
    ],
    "secondary_span": [
      [
        8,
        12
      ],
      [
        23,
        36
      ],
      [
        39,
        43
      ]
    ],
    "edits": [
      "distinct",
      "region",
      "continent",
      "countrylanguage",
      "language equals \"English\" or language equals \"Dutch\"",
      "continent equals \"English\" or local name equals \"Dutch\""
    ],
    "edits_original": "< select > add distinct </ select > < select > add region </ select > < select > remove continent </ select > < from > add countrylanguage </ from > < where > add language equals \" English \" or language equals \" Dutch \" </ where > < where > remove continent equals \" English \" or local name equals \" Dutch \" </ where >"
  },
  {
    "db_id": "real_estate_properties",
    "feedback": "You need to mention code of property type.",
    "question": "Show the property type descriptions of properties belonging to that code.",
    "gold_parse": "SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code",
    "beam": [
      [
        "SELECT property_type_description FROM Ref_Property_Types",
        -0.00015354156494140625
      ],
      [
        "SELECT property_type_description FROM Ref_Property_Types WHERE property_type_code = value",
        -9.003016471862793
      ],
      [
        "SELECT property_feature_description FROM Other_Property_Features",
        -10.954510688781738
      ],
      [
        "SELECT property_type_description , property_type_code FROM Ref_Property_Types",
        -12.709389209747314
      ],
      [
        "SELECT property_type_description FROM Ref_Property_Types ORDER BY property_type_description Asc",
        -12.950280666351318
      ],
      [
        "SELECT property_type_description FROM Ref_Property_Types ORDER BY property_type_code Asc",
        -13.978535175323486
      ],
      [
        "SELECT DISTINCT property_type_description FROM Ref_Property_Types",
        -14.056059837341309
      ],
      [
        "SELECT T1.property_type_description FROM Ref_Property_Types AS T1 JOIN Properties AS T2 ON T1.property_type_code = T2.property_type_code WHERE T2.property_name = value",
        -14.428224086761475
      ],
      [
        "SELECT property_type_description FROM Ref_Property_Types GROUP BY property_type_description",
        -15.659165382385254
      ],
      [
        "SELECT property_type_description FROM Ref_Property_Types EXCEPT SELECT property_type_description FROM Ref_Property_Types",
        -15.702558517456055
      ],
      [
        "SELECT property_type_description FROM Ref_Property_Types UNION SELECT property_type_description FROM Ref_Property_Types",
        -16.097532272338867
      ],
      [
        "SELECT Count ( property_type_description ) FROM Ref_Property_Types",
        -16.379600524902344
      ],
      [
        "SELECT DISTINCT property_type_description FROM Ref_Property_Types",
        -16.534966468811035
      ],
      [
        "SELECT property_type_description FROM Ref_Property_Types GROUP BY property_type_description HAVING Count ( * ) = value",
        -16.56712245941162
      ],
      [
        "SELECT property_type_description FROM Ref_Property_Types",
        -16.658963203430176
      ],
      [
        "SELECT feature_description FROM Other_Available_Features",
        -17.073208808898926
      ],
      [
        "SELECT property_type_description FROM Ref_Property_Types LIMIT value",
        -17.261157035827637
      ],
      [
        "SELECT Count ( property_type_description ) FROM Ref_Property_Types",
        -17.75099468231201
      ],
      [
        "SELECT Sum ( property_type_description ) FROM Ref_Property_Types",
        -18.89492130279541
      ],
      [
        "SELECT Avg ( property_type_description ) FROM Ref_Property_Types",
        -19.30477237701416
      ]
    ],
    "predicted_parse_with_values": "SELECT property_type_description FROM Ref_Property_Types",
    "predicted_parse": "SELECT property_type_description FROM Ref_Property_Types",
    "predicted_parse_explanation": [
      "find the property type description in reference property types table"
    ],
    "template_feedback": "additionally use the information from the properties table besides the reference property types table . find for each value of properties 's property type code .",
    "primary_span": [
      [
        0,
        7
      ],
      [
        15,
        25
      ]
    ],
    "secondary_span": [
      [
        8,
        14
      ]
    ],
    "edits": [
      "properties",
      "property type code"
    ],
    "edits_original": "< from > add properties </ from > < groupBy > add property type code </ groupBy >"
  },
  {
    "db_id": "flight_2",
    "feedback": "Exchange airlines with flights table and 1st airline with destination airport and 2nd airline with source airport .",
    "question": "How many flights fly from Aberdeen to Ashley?",
    "gold_parse": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"",
    "beam": [
      [
        "SELECT Count ( * ) FROM airlines WHERE Airline = value AND Airline = value",
        -0.048213958740234375
      ],
      [
        "SELECT Count ( * ) FROM airlines WHERE Airline = value AND Country = value",
        -3.1008858680725098
      ],
      [
        "SELECT Count ( * ) FROM airlines WHERE Airline = value AND Abbreviation = value",
        -6.779435157775879
      ],
      [
        "SELECT Count ( * ) FROM airlines WHERE Airline = value",
        -7.510384559631348
      ],
      [
        "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = value AND T1.Airline = value",
        -9.123551368713379
      ],
      [
        "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T1.Airline = value AND T2.Country = value",
        -9.13187313079834
      ],
      [
        "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T1.Airline = value AND T2.CountryAbbrev = value",
        -9.781883239746094
      ],
      [
        "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T1.Airline = value AND T2.City = value",
        -10.545140266418457
      ],
      [
        "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T1.Airline = value AND T2.AirportName = value",
        -10.545933723449707
      ],
      [
        "SELECT Count ( * ) FROM airlines WHERE Country = value AND Airline = value",
        -10.910725593566895
      ],
      [
        "SELECT Count ( * ) FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Airline = value AND T2.DestAirport = value",
        -11.895478248596191
      ],
      [
        "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value AND T1.Airline = value",
        -12.685919761657715
      ],
      [
        "SELECT Count ( * ) FROM airlines WHERE Abbreviation = value AND Airline = value",
        -13.173816680908203
      ],
      [
        "SELECT Count ( * ) FROM airlines WHERE Airline = value AND * IN ( SELECT * FROM airlines WHERE Airline = value )",
        -13.345569610595703
      ],
      [
        "SELECT Count ( * ) FROM airlines AS T1 JOIN flights AS T2 WHERE T2.DestAirport = value AND T1.Airline = value",
        -13.626212120056152
      ],
      [
        "SELECT Count ( * ) FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Airline = value AND T2.SourceAirport = value",
        -13.645692825317383
      ],
      [
        "SELECT Count ( * ) FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Airline = value AND T2.Airline = value",
        -13.730290412902832
      ],
      [
        "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = value AND T1.Country = value",
        -13.739559650421143
      ],
      [
        "SELECT Count ( * ) FROM airlines WHERE Airline = value AND Airline > value",
        -13.912249088287354
      ],
      [
        "SELECT Count ( * ) FROM airlines",
        -18.78858184814453
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM airlines WHERE Airline = \"Aberdeen\" AND Airline = \"Ashley\"",
    "predicted_parse": "SELECT Count ( * ) FROM airlines WHERE Airline = value AND Airline = value",
    "predicted_parse_explanation": [
      "find the number of rows in airlines table whose airline name equals Aberdeen and airline name equals Ashley"
    ],
    "template_feedback": "use airports table and flights table in place of airlines table . consider the city equals Aberdeen and city equals Ashley conditions in place of the airlines 's airline name equals Ashley and airlines 's airline name equals Aberdeen conditions .",
    "primary_span": [
      [
        0,
        5
      ],
      [
        12,
        21
      ]
    ],
    "secondary_span": [
      [
        6,
        11
      ],
      [
        22,
        40
      ]
    ],
    "edits": [
      "flights",
      "airports",
      "airlines",
      "city equals \"Ashley\"",
      "city equals \"Aberdeen\"",
      "airline name equals \"Aberdeen\"",
      "airline name equals \"Ashley\""
    ],
    "edits_original": "< from > add flights </ from > < from > add airports </ from > < from > remove airlines </ from > < where > add city equals \" Ashley \" </ where > < where > add city equals \" Aberdeen \" </ where > < where > remove airline name equals \" Aberdeen \" </ where > < where > remove airline name equals \" Ashley \" </ where >"
  },
  {
    "db_id": "car_1",
    "feedback": "It should be number of the corresponding rows for each continent in car makers .",
    "question": "How many car makers are there in each continents? List the continent name and the count.",
    "gold_parse": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent",
    "beam": [
      [
        "SELECT Continent , Count ( * ) FROM continents GROUP BY Continent",
        -0.013735771179199219
      ],
      [
        "SELECT T1.Continent , Count ( * ) FROM continents AS T1 JOIN countries AS T2 ON T1.ContId = T2.Continent GROUP BY T2.CountryId",
        -5.310814380645752
      ],
      [
        "SELECT T2.CountryName , Count ( * ) FROM continents AS T1 JOIN countries AS T2 ON T1.ContId = T2.Continent GROUP BY T1.Continent",
        -5.3918843269348145
      ],
      [
        "SELECT T1.Continent , Count ( * ) FROM continents AS T1 JOIN countries AS T2 ON T1.ContId = T2.Continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T3.Country",
        -6.184332370758057
      ],
      [
        "SELECT T3.Country , Count ( * ) FROM continents AS T1 JOIN countries AS T2 ON T1.ContId = T2.Continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent",
        -6.939184665679932
      ],
      [
        "SELECT T2.Continent , Count ( * ) FROM continents AS T1 JOIN countries AS T2 ON T1.ContId = T2.Continent GROUP BY T1.Continent",
        -7.5915069580078125
      ],
      [
        "SELECT T1.Continent , Count ( * ) FROM continents AS T1 JOIN countries AS T2 ON T1.ContId = T2.Continent GROUP BY T2.Continent",
        -8.195395469665527
      ],
      [
        "SELECT T1.Continent , Count ( * ) FROM continents AS T1 JOIN countries AS T2 ON T1.ContId = T2.Continent GROUP BY T2.CountryName",
        -8.480989456176758
      ],
      [
        "SELECT CountryName , Count ( * ) FROM countries GROUP BY CountryId",
        -10.701318740844727
      ],
      [
        "SELECT Continent , Sum ( * ) FROM continents GROUP BY Continent",
        -10.907228350639343
      ],
      [
        "SELECT T1.CountryName , Count ( * ) FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country GROUP BY T2.Country",
        -11.565680027008057
      ],
      [
        "SELECT Count ( * ) , Continent FROM continents GROUP BY Continent",
        -11.864256858825684
      ],
      [
        "SELECT T2.Country , Count ( * ) FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country GROUP BY T1.CountryId",
        -12.237318992614746
      ],
      [
        "SELECT Continent , Count ( * ) FROM continents GROUP BY *",
        -12.718155860900879
      ],
      [
        "SELECT Continent , Count ( * ) FROM countries GROUP BY CountryId",
        -12.896509170532227
      ],
      [
        "SELECT Country , Count ( * ) FROM car_makers GROUP BY Country",
        -13.106543064117432
      ],
      [
        "SELECT Continent , Count ( * ) , Continent FROM continents GROUP BY Continent",
        -13.135620832443237
      ],
      [
        "SELECT Continent , Count ( * ) FROM continents",
        -13.23426628112793
      ],
      [
        "SELECT Continent FROM continents GROUP BY Continent",
        -13.443002700805664
      ],
      [
        "SELECT CountryName , Count ( * ) FROM countries GROUP BY Continent",
        -13.572460651397705
      ]
    ],
    "predicted_parse_with_values": "SELECT Continent , Count ( * ) FROM continents GROUP BY Continent",
    "predicted_parse": "SELECT Continent , Count ( * ) FROM continents GROUP BY Continent",
    "predicted_parse_explanation": [
      "find each value of continent in continents table along with the number of the corresponding rows to each value"
    ],
    "template_feedback": "additionally use the information from the car makers table and countries table besides the continents table .",
    "primary_span": [
      [
        0,
        11
      ]
    ],
    "secondary_span": [
      [
        12,
        16
      ]
    ],
    "edits": [
      "countries",
      "car makers"
    ],
    "edits_original": "< from > add countries </ from > < from > add car makers </ from >"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "feedback": "I want table of documents.",
    "question": "How many documents are using the template with type code 'PPT'?",
    "gold_parse": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'",
    "beam": [
      [
        "SELECT Count ( * ) FROM Templates WHERE Template_Type_Code = value",
        -9.34600830078125e-05
      ],
      [
        "SELECT Count ( * ) FROM Ref_Template_Types WHERE Template_Type_Code = value",
        -9.313553810119629
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM Templates WHERE Template_Type_Code = value",
        -14.568511009216309
      ],
      [
        "SELECT Count ( Count ( * ) ) FROM Templates WHERE Template_Type_Code = value",
        -14.650732040405273
      ],
      [
        "SELECT Count ( * ) FROM Documents WHERE Document_Name = value",
        -14.755556106567383
      ],
      [
        "SELECT Avg ( * ) FROM Templates WHERE Template_Type_Code = value",
        -14.847092628479004
      ],
      [
        "SELECT Sum ( * ) FROM Templates WHERE Template_Type_Code = value",
        -15.465026617050171
      ],
      [
        "SELECT Count ( * ) FROM Templates WHERE Template_Type_Code LIKE value",
        -15.754977226257324
      ],
      [
        "SELECT Count ( * ) FROM Templates WHERE Template_Type_Code = value AND Template_Type_Code = value",
        -15.828871726989746
      ],
      [
        "SELECT Count ( * ) , Count ( * ) FROM Templates WHERE Template_Type_Code = value",
        -16.288705825805664
      ],
      [
        "SELECT * FROM Templates WHERE Template_Type_Code = value",
        -16.65886616706848
      ],
      [
        "SELECT Count ( * ) , Template_Type_Code FROM Templates WHERE Template_Type_Code = value",
        -16.689731121063232
      ],
      [
        "SELECT Count ( DISTINCT * ) FROM Templates WHERE Template_Type_Code = value",
        -16.705577850341797
      ],
      [
        "SELECT Count ( * ) FROM Templates WHERE Template_Type_Code > value",
        -17.10728168487549
      ],
      [
        "SELECT Count ( * ) FROM Templates WHERE Template_Type_Code = value GROUP BY Template_Type_Code",
        -17.176021933555603
      ],
      [
        "SELECT Count ( * ) FROM Templates WHERE DISTINCT Template_Type_Code = value",
        -17.221467971801758
      ],
      [
        "SELECT Count ( * ) FROM Templates WHERE Template_Type_Code = value LIMIT value",
        -17.26181983947754
      ],
      [
        "SELECT Count ( * ) FROM Templates WHERE Count ( Template_Type_Code ) = value",
        -17.558037757873535
      ],
      [
        "SELECT Count ( * ) FROM Templates WHERE Template_Type_Code = value",
        -17.78597068786621
      ],
      [
        "SELECT Count ( * ) FROM Ref_Template_Types",
        -17.844130516052246
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM Templates WHERE Template_Type_Code = \"PPT\"",
    "predicted_parse": "SELECT Count ( * ) FROM Templates WHERE Template_Type_Code = value",
    "predicted_parse_explanation": [
      "find the number of rows in templates table whose template type code equals PPT"
    ],
    "template_feedback": "additionally use the information from the documents table besides the templates table .",
    "primary_span": [
      [
        0,
        7
      ]
    ],
    "secondary_span": [
      [
        8,
        12
      ]
    ],
    "edits": [
      "documents"
    ],
    "edits_original": "< from > add documents </ from >"
  },
  {
    "db_id": "wta_1",
    "feedback": "I need date of ranking in rankings table.",
    "question": "How many total tours were there for each ranking date?",
    "gold_parse": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date",
    "beam": [
      [
        "SELECT Count ( * ) , winner_rank FROM matches GROUP BY winner_rank",
        -0.12128591537475586
      ],
      [
        "SELECT Count ( * ) , T3.ranking FROM players AS T1 JOIN matches AS T2 ON T2.loser_id = T1.player_id JOIN rankings AS T3 ON T1.player_id = T3.player_id GROUP BY T2.winner_rank",
        -2.410278797149658
      ],
      [
        "SELECT Count ( * ) , T2.winner_rank FROM players AS T1 JOIN matches AS T2 ON T2.loser_id = T1.player_id JOIN rankings AS T3 ON T1.player_id = T3.player_id GROUP BY T3.ranking",
        -4.056625843048096
      ],
      [
        "SELECT Count ( * ) , loser_rank FROM matches GROUP BY winner_rank",
        -6.084956645965576
      ],
      [
        "SELECT Count ( * ) , ranking FROM rankings GROUP BY ranking",
        -6.353752136230469
      ],
      [
        "SELECT Count ( * ) , loser_entry FROM matches GROUP BY winner_rank",
        -6.795265197753906
      ],
      [
        "SELECT winner_rank , Count ( * ) FROM matches GROUP BY winner_rank",
        -7.429691314697266
      ],
      [
        "SELECT Count ( * ) , T3.ranking_date FROM players AS T1 JOIN matches AS T2 ON T2.loser_id = T1.player_id JOIN rankings AS T3 ON T1.player_id = T3.player_id GROUP BY T2.winner_rank",
        -7.796209812164307
      ],
      [
        "SELECT Count ( * ) , score FROM matches GROUP BY winner_rank",
        -8.6099214553833
      ],
      [
        "SELECT Count ( * ) , year FROM matches GROUP BY winner_rank",
        -8.855279922485352
      ],
      [
        "SELECT Count ( * ) , loser_name FROM matches GROUP BY winner_rank",
        -9.195314407348633
      ],
      [
        "SELECT Count ( * ) , winner_rank FROM matches GROUP BY loser_entry",
        -9.334819316864014
      ],
      [
        "SELECT Count ( * ) , T2.winner_rank FROM players AS T1 JOIN matches AS T2 ON T2.loser_id = T1.player_id JOIN rankings AS T3 ON T1.player_id = T3.player_id GROUP BY T3.ranking_date",
        -9.742870807647705
      ],
      [
        "SELECT Count ( * ) , T2.loser_rank FROM players AS T1 JOIN matches AS T2 ON T2.loser_id = T1.player_id JOIN rankings AS T3 ON T1.player_id = T3.player_id GROUP BY T3.ranking",
        -10.018661975860596
      ],
      [
        "SELECT Count ( * ) , winner_rank FROM matches GROUP BY loser_rank",
        -10.034882068634033
      ],
      [
        "SELECT T3.ranking , Count ( * ) FROM players AS T1 JOIN matches AS T2 ON T2.loser_id = T1.player_id JOIN rankings AS T3 ON T1.player_id = T3.player_id GROUP BY T2.winner_rank",
        -10.402411460876465
      ],
      [
        "SELECT Count ( * ) , T2.loser_entry FROM players AS T1 JOIN matches AS T2 ON T2.loser_id = T1.player_id JOIN rankings AS T3 ON T1.player_id = T3.player_id GROUP BY T3.ranking",
        -10.723198890686035
      ],
      [
        "SELECT Count ( * ) , winner_rank_points FROM matches GROUP BY winner_rank",
        -10.8975191116333
      ],
      [
        "SELECT Count ( * ) , loser_ioc FROM matches GROUP BY winner_rank",
        -11.017073631286621
      ],
      [
        "SELECT Count ( * ) FROM players",
        -13.644376754760742
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) , winner_rank FROM matches GROUP BY winner_rank",
    "predicted_parse": "SELECT Count ( * ) , winner_rank FROM matches GROUP BY winner_rank",
    "predicted_parse_explanation": [
      "find each value of winner rank in matches table along with the number of the corresponding rows to each value"
    ],
    "template_feedback": "use rankings table in place of matches table . find for each value of ranking date in place of winner rank . find summation of tours and ranking date in place of winner rank and number of rows .",
    "primary_span": [
      [
        0,
        2
      ],
      [
        9,
        15
      ],
      [
        22,
        28
      ]
    ],
    "secondary_span": [
      [
        3,
        8
      ],
      [
        16,
        21
      ],
      [
        29,
        38
      ]
    ],
    "edits": [
      "summation of tours",
      "ranking date",
      "number of rows",
      "winner rank",
      "rankings",
      "matches",
      "ranking date",
      "winner rank"
    ],
    "edits_original": "< select > add summation of tours </ select > < select > add ranking date </ select > < select > remove number of rows </ select > < select > remove winner rank </ select > < from > add rankings </ from > < from > remove matches </ from > < groupBy > add ranking date </ groupBy > < groupBy > remove winner rank </ groupBy >"
  },
  {
    "db_id": "network_1",
    "feedback": "search Names of high schooler who are friend of Kyle whose id present in friend table .",
    "question": "Show the names of all of the high schooler Kyle's friends.",
    "gold_parse": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"",
    "beam": [
      [
        "SELECT name FROM Highschooler WHERE grade = value",
        -4.673004150390625e-05
      ],
      [
        "SELECT DISTINCT name FROM Highschooler WHERE grade = value",
        -10.442777633666992
      ],
      [
        "SELECT name FROM Highschooler WHERE grade = value AND grade = value",
        -11.193541526794434
      ],
      [
        "SELECT name , grade FROM Highschooler WHERE grade = value",
        -12.968392372131348
      ],
      [
        "SELECT name FROM Highschooler WHERE grade = value INTERSECT SELECT name FROM Highschooler WHERE grade = value",
        -13.883606910705566
      ],
      [
        "SELECT DISTINCT name FROM Highschooler WHERE grade = value",
        -14.713391304016113
      ],
      [
        "SELECT name FROM Highschooler WHERE grade = value AND name = value",
        -14.874131202697754
      ],
      [
        "SELECT name , name FROM Highschooler WHERE grade = value",
        -15.022117614746094
      ],
      [
        "SELECT name FROM Highschooler WHERE grade = value ORDER BY name Asc",
        -15.364603519439697
      ],
      [
        "SELECT name FROM Highschooler WHERE grade > value",
        -16.13149642944336
      ],
      [
        "SELECT name FROM Highschooler",
        -16.830238342285156
      ],
      [
        "SELECT name FROM Highschooler WHERE grade > = value",
        -17.057122230529785
      ],
      [
        "SELECT name FROM Highschooler WHERE grade LIKE value",
        -17.162474632263184
      ],
      [
        "SELECT name FROM Highschooler WHERE grade = value LIMIT value",
        -17.279568672180176
      ],
      [
        "SELECT name FROM Highschooler WHERE DISTINCT grade = value",
        -17.31094455718994
      ],
      [
        "SELECT Count ( DISTINCT name ) FROM Highschooler WHERE grade = value",
        -17.513264656066895
      ],
      [
        "SELECT name FROM Highschooler WHERE grade ! = value",
        -18.072789192199707
      ],
      [
        "SELECT name FROM Highschooler WHERE Count ( grade ) = value",
        -18.215922355651855
      ],
      [
        "SELECT name FROM Highschooler WHERE grade < value",
        -18.28226947784424
      ],
      [
        "SELECT name FROM Highschooler WHERE grade = value GROUP BY name",
        -18.456950187683105
      ]
    ],
    "predicted_parse_with_values": "SELECT name FROM Highschooler WHERE grade = \"Kyle\"",
    "predicted_parse": "SELECT name FROM Highschooler WHERE grade = value",
    "predicted_parse_explanation": [
      "find the name in high schooler table whose grade equals Kyle"
    ],
    "template_feedback": "additionally use the information from the friend table besides the high schooler table . consider the name equals Kyle conditions in place of the grade equals Kyle conditions .",
    "primary_span": [
      [
        0,
        7
      ],
      [
        14,
        19
      ]
    ],
    "secondary_span": [
      [
        8,
        13
      ],
      [
        20,
        28
      ]
    ],
    "edits": [
      "friend",
      "high schooler",
      "name equals \"Kyle\"",
      "grade equals \"Kyle\""
    ],
    "edits_original": "< from > add friend </ from > < from > add high schooler </ from > < where > add name equals \" Kyle \" </ where > < where > remove grade equals \" Kyle \" </ where >"
  },
  {
    "db_id": "world_1",
    "feedback": "Use language instead of local name .",
    "question": "Count the number of countries for which Spanish is the predominantly spoken language.",
    "gold_parse": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
    "beam": [
      [
        "SELECT Count ( * ) FROM country WHERE LocalName = value",
        -0.10721874237060547
      ],
      [
        "SELECT Count ( DISTINCT Continent ) FROM country WHERE LocalName = value",
        -2.3545475006103516
      ],
      [
        "SELECT Count ( * ) FROM country WHERE Name = value",
        -5.344577312469482
      ],
      [
        "SELECT Count ( * ) FROM countrylanguage WHERE Language = value",
        -7.1355485916137695
      ],
      [
        "SELECT Count ( DISTINCT GovernmentForm ) FROM country WHERE LocalName = value",
        -7.142714500427246
      ],
      [
        "SELECT Count ( DISTINCT Continent ) FROM country WHERE Name = value",
        -8.084065437316895
      ],
      [
        "SELECT Count ( DISTINCT T1.Continent ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value",
        -11.129892349243164
      ],
      [
        "SELECT Count ( * ) FROM country WHERE LocalName = value AND LocalName = value",
        -11.438522338867188
      ],
      [
        "SELECT Count ( * ) FROM country WHERE Region = value",
        -11.7532958984375
      ],
      [
        "SELECT Count ( * ) FROM country WHERE Continent = value",
        -11.891606330871582
      ],
      [
        "SELECT Count ( Continent ) FROM country WHERE LocalName = value",
        -12.234167098999023
      ],
      [
        "SELECT Count ( DISTINCT GovernmentForm ) FROM country WHERE Name = value",
        -12.312945365905762
      ],
      [
        "SELECT Count ( * ) FROM country WHERE Code2 = value",
        -12.771051406860352
      ],
      [
        "SELECT Count ( * ) FROM country WHERE LifeExpectancy = value",
        -13.088400840759277
      ],
      [
        "SELECT Count ( DISTINCT Name ) FROM country WHERE LocalName = value",
        -13.732605934143066
      ],
      [
        "SELECT Count ( * ) FROM country WHERE LocalName > value",
        -14.180283546447754
      ],
      [
        "SELECT Continent FROM country WHERE LocalName = value",
        -14.191506385803223
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM country WHERE LocalName = value",
        -14.409268379211426
      ],
      [
        "SELECT Avg ( Continent ) FROM country WHERE LocalName = value",
        -14.727287292480469
      ],
      [
        "SELECT Count ( DISTINCT Continent ) FROM country WHERE LifeExpectancy = value",
        -14.766928672790527
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM country WHERE LocalName = \"Spanish\"",
    "predicted_parse": "SELECT Count ( * ) FROM country WHERE LocalName = value",
    "predicted_parse_explanation": [
      "find the number of rows in country table whose local name equals Spanish"
    ],
    "template_feedback": "use countrylanguage table in place of country table . consider the language equals Spanish conditions in place of the local name equals Spanish conditions . find for each value of countrycode . additionally find maximum percentage .",
    "primary_span": [
      [
        0,
        2
      ],
      [
        9,
        14
      ],
      [
        25,
        31
      ],
      [
        32,
        36
      ]
    ],
    "secondary_span": [
      [
        3,
        8
      ],
      [
        15,
        24
      ]
    ],
    "edits": [
      "maximum percentage",
      "countrylanguage",
      "country",
      "language equals \"Spanish\"",
      "local name equals \"Spanish\"",
      "countrycode"
    ],
    "edits_original": "< select > add maximum percentage </ select > < from > add countrylanguage </ from > < from > remove country </ from > < where > add language equals \" Spanish \" </ where > < where > remove local name equals \" Spanish \" </ where > < groupBy > add countrycode </ groupBy >"
  },
  {
    "db_id": "car_1",
    "feedback": "Make sure that car model name is volvo.",
    "question": "For model volvo, how many cylinders does the car with the least accelerate have?",
    "gold_parse": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1",
    "beam": [
      [
        "SELECT Cylinders FROM cars_data ORDER BY Accelerate Asc LIMIT value",
        -0.7818717956542969
      ],
      [
        "SELECT Year , Cylinders FROM cars_data GROUP BY Year ORDER BY Count ( * ) Asc LIMIT value",
        -1.6994867324829102
      ],
      [
        "SELECT Year , Cylinders FROM cars_data ORDER BY Accelerate Asc LIMIT value",
        -2.3906688690185547
      ],
      [
        "SELECT Cylinders FROM cars_data WHERE Year = value",
        -2.7883358001708984
      ],
      [
        "SELECT Count ( * ) FROM cars_data WHERE Year = value",
        -3.447481155395508
      ],
      [
        "SELECT Cylinders , Year FROM cars_data ORDER BY Accelerate Asc LIMIT value",
        -3.952751398086548
      ],
      [
        "SELECT Edispl , Cylinders FROM cars_data GROUP BY Year ORDER BY Count ( * ) Asc LIMIT value",
        -3.969438076019287
      ],
      [
        "SELECT T1.Model , T3.Cylinders FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id GROUP BY T3.Year ORDER BY Count ( * ) Asc LIMIT value",
        -4.050196170806885
      ],
      [
        "SELECT Edispl , Cylinders FROM cars_data ORDER BY Accelerate Asc LIMIT value",
        -4.133610725402832
      ],
      [
        "SELECT Cylinders , Year FROM cars_data GROUP BY Year ORDER BY Count ( * ) Asc LIMIT value",
        -4.31382417678833
      ],
      [
        "SELECT T3.Year , T3.Cylinders FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id GROUP BY T1.Model ORDER BY Count ( * ) Asc LIMIT value",
        -4.458949327468872
      ],
      [
        "SELECT Cylinders , Count ( * ) FROM cars_data GROUP BY Year ORDER BY Count ( * ) Asc LIMIT value",
        -4.607026100158691
      ],
      [
        "SELECT Cylinders , Accelerate FROM cars_data ORDER BY Accelerate Asc LIMIT value",
        -4.810481548309326
      ],
      [
        "SELECT T1.Model , T3.Cylinders FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id ORDER BY T3.Accelerate Asc LIMIT value",
        -4.874955177307129
      ],
      [
        "SELECT Edispl FROM cars_data ORDER BY Accelerate Asc LIMIT value",
        -5.11289644241333
      ],
      [
        "SELECT Cylinders , Count ( * ) FROM cars_data ORDER BY Accelerate Asc LIMIT value",
        -5.152805328369141
      ],
      [
        "SELECT Cylinders , Accelerate FROM cars_data GROUP BY Year ORDER BY Count ( * ) Asc LIMIT value",
        -5.377633571624756
      ],
      [
        "SELECT Cylinders , Cylinders FROM cars_data ORDER BY Accelerate Asc LIMIT value",
        -6.10735559463501
      ],
      [
        "SELECT T1.Model , T2.Cylinders FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id GROUP BY T2.Year ORDER BY Count ( * ) Asc LIMIT value",
        -6.1223835945129395
      ],
      [
        "SELECT Cylinders , Edispl FROM cars_data ORDER BY Accelerate Asc LIMIT value",
        -6.231560468673706
      ]
    ],
    "predicted_parse_with_values": "SELECT Cylinders FROM cars_data ORDER BY Accelerate Asc LIMIT 1",
    "predicted_parse": "SELECT Cylinders FROM cars_data ORDER BY Accelerate Asc LIMIT value",
    "predicted_parse_explanation": [
      "find the cylinders in cars data table with smallest value of accelerate"
    ],
    "template_feedback": "additionally use the information from the car names table besides the cars data table . additionally make sure that model equals volvo .",
    "primary_span": [
      [
        0,
        8
      ],
      [
        15,
        22
      ]
    ],
    "secondary_span": [
      [
        9,
        14
      ]
    ],
    "edits": [
      "car names",
      "model equals \"volvo\""
    ],
    "edits_original": "< from > add car names </ from > < where > add model equals \" volvo \" </ where >"
  },
  {
    "db_id": "wta_1",
    "feedback": "Swap winner rank in matches table with ranking date in rankings .",
    "question": "How many total tours were there for each ranking date?",
    "gold_parse": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date",
    "beam": [
      [
        "SELECT Count ( * ) , winner_rank FROM matches GROUP BY winner_rank",
        -0.12128591537475586
      ],
      [
        "SELECT Count ( * ) , T3.ranking FROM players AS T1 JOIN matches AS T2 ON T2.loser_id = T1.player_id JOIN rankings AS T3 ON T1.player_id = T3.player_id GROUP BY T2.winner_rank",
        -2.410278797149658
      ],
      [
        "SELECT Count ( * ) , T2.winner_rank FROM players AS T1 JOIN matches AS T2 ON T2.loser_id = T1.player_id JOIN rankings AS T3 ON T1.player_id = T3.player_id GROUP BY T3.ranking",
        -4.056625843048096
      ],
      [
        "SELECT Count ( * ) , loser_rank FROM matches GROUP BY winner_rank",
        -6.084956645965576
      ],
      [
        "SELECT Count ( * ) , ranking FROM rankings GROUP BY ranking",
        -6.353752136230469
      ],
      [
        "SELECT Count ( * ) , loser_entry FROM matches GROUP BY winner_rank",
        -6.795265197753906
      ],
      [
        "SELECT winner_rank , Count ( * ) FROM matches GROUP BY winner_rank",
        -7.429691314697266
      ],
      [
        "SELECT Count ( * ) , T3.ranking_date FROM players AS T1 JOIN matches AS T2 ON T2.loser_id = T1.player_id JOIN rankings AS T3 ON T1.player_id = T3.player_id GROUP BY T2.winner_rank",
        -7.796209812164307
      ],
      [
        "SELECT Count ( * ) , score FROM matches GROUP BY winner_rank",
        -8.6099214553833
      ],
      [
        "SELECT Count ( * ) , year FROM matches GROUP BY winner_rank",
        -8.855279922485352
      ],
      [
        "SELECT Count ( * ) , loser_name FROM matches GROUP BY winner_rank",
        -9.195314407348633
      ],
      [
        "SELECT Count ( * ) , winner_rank FROM matches GROUP BY loser_entry",
        -9.334819316864014
      ],
      [
        "SELECT Count ( * ) , T2.winner_rank FROM players AS T1 JOIN matches AS T2 ON T2.loser_id = T1.player_id JOIN rankings AS T3 ON T1.player_id = T3.player_id GROUP BY T3.ranking_date",
        -9.742870807647705
      ],
      [
        "SELECT Count ( * ) , T2.loser_rank FROM players AS T1 JOIN matches AS T2 ON T2.loser_id = T1.player_id JOIN rankings AS T3 ON T1.player_id = T3.player_id GROUP BY T3.ranking",
        -10.018661975860596
      ],
      [
        "SELECT Count ( * ) , winner_rank FROM matches GROUP BY loser_rank",
        -10.034882068634033
      ],
      [
        "SELECT T3.ranking , Count ( * ) FROM players AS T1 JOIN matches AS T2 ON T2.loser_id = T1.player_id JOIN rankings AS T3 ON T1.player_id = T3.player_id GROUP BY T2.winner_rank",
        -10.402411460876465
      ],
      [
        "SELECT Count ( * ) , T2.loser_entry FROM players AS T1 JOIN matches AS T2 ON T2.loser_id = T1.player_id JOIN rankings AS T3 ON T1.player_id = T3.player_id GROUP BY T3.ranking",
        -10.723198890686035
      ],
      [
        "SELECT Count ( * ) , winner_rank_points FROM matches GROUP BY winner_rank",
        -10.8975191116333
      ],
      [
        "SELECT Count ( * ) , loser_ioc FROM matches GROUP BY winner_rank",
        -11.017073631286621
      ],
      [
        "SELECT Count ( * ) FROM players",
        -13.644376754760742
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) , winner_rank FROM matches GROUP BY winner_rank",
    "predicted_parse": "SELECT Count ( * ) , winner_rank FROM matches GROUP BY winner_rank",
    "predicted_parse_explanation": [
      "find each value of winner rank in matches table along with the number of the corresponding rows to each value"
    ],
    "template_feedback": "use rankings table in place of matches table . find for each value of ranking date in place of winner rank . find summation of tours and ranking date in place of winner rank and number of rows .",
    "primary_span": [
      [
        0,
        2
      ],
      [
        9,
        15
      ],
      [
        22,
        28
      ]
    ],
    "secondary_span": [
      [
        3,
        8
      ],
      [
        16,
        21
      ],
      [
        29,
        38
      ]
    ],
    "edits": [
      "summation of tours",
      "ranking date",
      "number of rows",
      "winner rank",
      "rankings",
      "matches",
      "ranking date",
      "winner rank"
    ],
    "edits_original": "< select > add summation of tours </ select > < select > add ranking date </ select > < select > remove number of rows </ select > < select > remove winner rank </ select > < from > add rankings </ from > < from > remove matches </ from > < groupBy > add ranking date </ groupBy > < groupBy > remove winner rank </ groupBy >"
  },
  {
    "db_id": "tvshow",
    "feedback": "You should use directed by and id instead of written by and content respectively.",
    "question": "What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?",
    "gold_parse": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'",
    "beam": [
      [
        "SELECT T1.Content FROM TV_Channel AS T1 EXCEPT SELECT T1.Content FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value",
        -0.20060348510742188
      ],
      [
        "SELECT T1.Content FROM TV_Channel AS T1 EXCEPT SELECT T2.Channel FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T2.Channel = T1.id JOIN Cartoon AS T3 ON T1.id = T3.Channel WHERE T3.Written_by = value",
        -2.1916732788085938
      ],
      [
        "SELECT T1.Content FROM TV_Channel AS T1 EXCEPT SELECT T1.Content FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = value",
        -2.9356813430786133
      ],
      [
        "SELECT T1.Content FROM TV_Channel AS T1 EXCEPT SELECT T2.Channel FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T2.Channel = T1.id JOIN Cartoon AS T3 ON T1.id = T3.Channel WHERE T3.Directed_by = value",
        -4.76685905456543
      ],
      [
        "SELECT T1.Content FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value EXCEPT SELECT T1.Content FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value",
        -5.495960235595703
      ],
      [
        "SELECT T1.Content FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by ! = value",
        -6.568564414978027
      ],
      [
        "SELECT T1.Content FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value EXCEPT SELECT T3.Channel FROM TV_Channel AS T1 JOIN TV_series AS T3 ON T3.Channel = T1.id JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value",
        -7.033674240112305
      ],
      [
        "SELECT T1.Channel FROM TV_series AS T1 EXCEPT SELECT T2.Content FROM TV_Channel AS T2 JOIN Cartoon AS T3 ON T2.id = T3.Channel WHERE T3.Written_by = value",
        -7.039459228515625
      ],
      [
        "SELECT T1.Content FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value EXCEPT SELECT T1.Content FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = value",
        -8.145288467407227
      ],
      [
        "SELECT T1.id FROM TV_Channel AS T1 EXCEPT SELECT T1.Content FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value",
        -8.621097564697266
      ],
      [
        "SELECT T1.Channel FROM TV_series AS T1 EXCEPT SELECT T1.Channel FROM TV_Channel AS T2 JOIN TV_series AS T1 ON T1.Channel = T2.id JOIN Cartoon AS T3 ON T2.id = T3.Channel WHERE T3.Written_by = value",
        -9.076467514038086
      ],
      [
        "SELECT T1.Content FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value EXCEPT SELECT T3.Channel FROM TV_Channel AS T1 JOIN TV_series AS T3 ON T3.Channel = T1.id JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = value",
        -9.515043258666992
      ],
      [
        "SELECT T1.Channel FROM TV_series AS T1 EXCEPT SELECT T2.Content FROM TV_Channel AS T2 JOIN Cartoon AS T3 ON T2.id = T3.Channel WHERE T3.Directed_by = value",
        -9.779906272888184
      ],
      [
        "SELECT T1.id FROM TV_series AS T1 EXCEPT SELECT T2.Content FROM TV_Channel AS T2 JOIN Cartoon AS T3 ON T2.id = T3.Channel WHERE T3.Written_by = value",
        -10.359973907470703
      ],
      [
        "SELECT T1.Content FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value AND T2.Directed_by = value",
        -10.407402038574219
      ],
      [
        "SELECT T1.Content FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by ! = value",
        -10.429327964782715
      ],
      [
        "SELECT T1.id FROM TV_Channel AS T1 EXCEPT SELECT T2.Channel FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T2.Channel = T1.id JOIN Cartoon AS T3 ON T1.id = T3.Channel WHERE T3.Written_by = value",
        -10.653897285461426
      ],
      [
        "SELECT T1.Content FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value AND T2.Written_by = value",
        -10.774169921875
      ],
      [
        "SELECT T1.Content FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value",
        -10.909226417541504
      ],
      [
        "SELECT T2.Channel FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T2.Channel = T1.id JOIN Cartoon AS T3 ON T1.id = T3.Channel WHERE T3.Written_by ! = value",
        -13.97710132598877
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.Content FROM TV_Channel AS T1 EXCEPT SELECT T1.Content FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = \"Ben Jones\"",
    "predicted_parse": "SELECT T1.Content FROM TV_Channel AS T1 EXCEPT SELECT T1.Content FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value",
    "predicted_parse_explanation": [
      "Step 1: find the content in tv channel table",
      "Step 2: for each row in tv channel table , find the corresponding rows in cartoon table",
      "Step 3: find the content of the results of step 2 whose written by equals Ben Jones",
      "Step 4: show the rows that are in the results of step 1 but not in the results of step 3"
    ],
    "template_feedback": "in step 1 , find id in place of content . in step 2 , do not use the tv channel table . in step 3 , consider the directed by equals Ben Jones conditions in place of the written by equals Ben Jones conditions . find channel in place of content .",
    "primary_span": [
      [
        4,
        5
      ],
      [
        15,
        22
      ],
      [
        27,
        34
      ],
      [
        46,
        47
      ]
    ],
    "secondary_span": [
      [
        6,
        10
      ],
      [
        15,
        22
      ],
      [
        35,
        45
      ],
      [
        48,
        52
      ]
    ],
    "edits": [
      "id",
      "content",
      "channel",
      "content",
      "tv channel",
      "directed by equals \"Ben Jones\"",
      "written by equals \"Ben Jones\""
    ],
    "edits_original": "< select > add id </ select > < select > remove content </ select > < select > add channel </ select > < select > remove content </ select > < from > remove tv channel </ from > < where > add directed by equals \" Ben Jones \" </ where > < where > remove written by equals \" Ben Jones \" </ where >"
  },
  {
    "db_id": "world_1",
    "feedback": "Find summation of population and maximum gnp in country table whose continent equals Asia .",
    "question": "How many people live in Asia, and what is the largest GNP among them?",
    "gold_parse": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"",
    "beam": [
      [
        "SELECT Max ( Population ) , Min ( GNP ) FROM country",
        -1.2498226165771484
      ],
      [
        "SELECT Max ( Population ) , Count ( * ) FROM country",
        -1.5134477615356445
      ],
      [
        "SELECT Max ( Population ) , Max ( GNP ) FROM country",
        -2.2222509384155273
      ],
      [
        "SELECT Max ( Population ) , Sum ( GNP ) FROM country",
        -2.2806501388549805
      ],
      [
        "SELECT Max ( Population ) , Count ( GNP ) FROM country",
        -2.8410892486572266
      ],
      [
        "SELECT Max ( GNP ) , Min ( GNP ) FROM country",
        -3.1476144790649414
      ],
      [
        "SELECT Max ( Population ) , Continent FROM country",
        -3.2006444931030273
      ],
      [
        "SELECT Max ( GNP ) , Count ( * ) FROM country",
        -3.539872169494629
      ],
      [
        "SELECT Max ( Population ) , Count ( Population ) FROM country",
        -3.894458770751953
      ],
      [
        "SELECT Max ( GNP ) FROM country",
        -4.533999443054199
      ],
      [
        "SELECT Max ( GNP ) , Max ( GNP ) FROM country",
        -4.559901237487793
      ],
      [
        "SELECT Max ( Population ) FROM country",
        -4.607883453369141
      ],
      [
        "SELECT Max ( Population ) , Avg ( GNP ) FROM country",
        -4.685317039489746
      ],
      [
        "SELECT Max ( GNP ) , Sum ( GNP ) FROM country",
        -4.889762878417969
      ],
      [
        "SELECT Max ( Population ) FROM country WHERE Continent = value",
        -4.972161293029785
      ],
      [
        "SELECT Max ( Population ) , Continent FROM country WHERE Continent = value",
        -5.46809196472168
      ],
      [
        "SELECT Max ( Population ) , Min ( GNP ) , Continent FROM country",
        -5.572851181030273
      ],
      [
        "SELECT Max ( GNP ) , Continent FROM country",
        -5.781604766845703
      ],
      [
        "SELECT Max ( GNP ) , Count ( GNP ) FROM country",
        -6.135390758514404
      ],
      [
        "SELECT Max ( Population ) , GNP FROM country WHERE Continent = value",
        -6.172536849975586
      ]
    ],
    "predicted_parse_with_values": "SELECT Max ( Population ) , Min ( GNP ) FROM country",
    "predicted_parse": "SELECT Max ( Population ) , Min ( GNP ) FROM country",
    "predicted_parse_explanation": [
      "find the maximum population and minimum gnp in country table"
    ],
    "template_feedback": "additionally make sure that continent equals Asia . find summation of population in place of maximum population . find maximum gnp in place of minimum gnp .",
    "primary_span": [
      [
        0,
        7
      ],
      [
        8,
        11
      ],
      [
        18,
        20
      ]
    ],
    "secondary_span": [
      [
        12,
        17
      ],
      [
        21,
        26
      ]
    ],
    "edits": [
      "summation of population",
      "maximum gnp",
      "maximum population",
      "minimum gnp",
      "continent equals \"Asia\""
    ],
    "edits_original": "< select > add summation of population </ select > < select > add maximum gnp </ select > < select > remove maximum population </ select > < select > remove minimum gnp </ select > < where > add continent equals \" Asia \" </ where >"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "feedback": "steps 1 and 2 change template type code with template id , In step 3 find corresponding template type code of the result .",
    "question": "Show all template type codes that are not used by any document.",
    "gold_parse": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id",
    "beam": [
      [
        "SELECT Template_Type_Code FROM Templates EXCEPT SELECT Template_Type_Code FROM Templates",
        -0.1572723388671875
      ],
      [
        "SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 EXCEPT SELECT T2.Template_Type_Code FROM Templates AS T2",
        -2.2519617080688477
      ],
      [
        "SELECT T1.Template_Type_Code FROM Templates AS T1 EXCEPT SELECT T2.Template_Type_Code FROM Ref_Template_Types AS T2",
        -3.475022792816162
      ],
      [
        "SELECT T1.Template_Type_Code FROM Templates AS T1 EXCEPT SELECT T2.Template_ID FROM Documents AS T2",
        -5.3308234214782715
      ],
      [
        "SELECT Template_Type_Code FROM Ref_Template_Types EXCEPT SELECT Template_Type_Code FROM Ref_Template_Types",
        -5.593194961547852
      ],
      [
        "SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 EXCEPT SELECT T2.Template_ID FROM Documents AS T2",
        -7.538084506988525
      ],
      [
        "SELECT T1.Template_Type_Code FROM Templates AS T1 EXCEPT SELECT T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Document_Name = value",
        -9.321601867675781
      ],
      [
        "SELECT T1.Template_Type_Code FROM Templates AS T1 EXCEPT SELECT T2.Document_Name FROM Documents AS T2",
        -9.468583106994629
      ],
      [
        "SELECT T2.Template_Type_Code FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T1.Template_Type_Code NOT IN ( SELECT T3.Template_ID FROM Documents AS T3 )",
        -10.784685611724854
      ],
      [
        "SELECT T1.Template_Type_Code FROM Templates AS T1 WHERE T1.Template_ID NOT IN ( SELECT T2.Template_ID FROM Documents AS T2 )",
        -11.02140188217163
      ],
      [
        "SELECT T1.Template_Type_Code FROM Templates AS T1 WHERE T1.Template_Type_Code NOT IN ( SELECT T2.Template_ID FROM Documents AS T2 )",
        -11.419228553771973
      ],
      [
        "SELECT T1.Template_Type_Code FROM Templates AS T1 EXCEPT SELECT * FROM Ref_Template_Types AS T2",
        -11.6270751953125
      ],
      [
        "SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 EXCEPT SELECT T2.Document_Name FROM Documents AS T2",
        -11.627388000488281
      ],
      [
        "SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 EXCEPT SELECT T2.Template_Type_Code FROM Templates AS T2 JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID WHERE T3.Document_Name = value",
        -12.042681217193604
      ],
      [
        "SELECT T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Document_Name = value EXCEPT SELECT T1.Template_Type_Code FROM Templates AS T1",
        -12.424097776412964
      ],
      [
        "SELECT Template_Type_Code FROM Templates EXCEPT SELECT DISTINCT Template_Type_Code FROM Templates",
        -12.45324420928955
      ],
      [
        "SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 WHERE T1.Template_Type_Code NOT IN ( SELECT T2.Template_ID FROM Documents AS T2 )",
        -12.73997974395752
      ],
      [
        "SELECT T1.Template_Type_Code FROM Templates AS T1 EXCEPT SELECT T2.Template_Type_Code FROM Ref_Template_Types AS T2 JOIN Templates AS T1 ON T2.Template_Type_Code = T1.Template_Type_Code JOIN Documents AS T3 ON T1.Template_ID = T3.Template_ID WHERE T3.Document_Name = value",
        -12.767958164215088
      ],
      [
        "SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T2.Template_ID NOT IN ( SELECT T3.Template_ID FROM Documents AS T3 )",
        -13.006030082702637
      ],
      [
        "SELECT T1.Template_Type_Code FROM Templates AS T1 EXCEPT SELECT T2.Template_Type_Description FROM Ref_Template_Types AS T2",
        -13.06160831451416
      ]
    ],
    "predicted_parse_with_values": "SELECT Template_Type_Code FROM Templates EXCEPT SELECT Template_Type_Code FROM Templates",
    "predicted_parse": "SELECT Template_Type_Code FROM Templates EXCEPT SELECT Template_Type_Code FROM Templates",
    "predicted_parse_explanation": [
      "Step 1: find the template type code in templates table",
      "Step 2: find the template type code in templates table",
      "Step 3: show the rows that are in the results of step 1 but not in the results of step 2"
    ],
    "template_feedback": "in step 2 , additionally use the information from the documents table besides the templates table .",
    "primary_span": [
      [
        4,
        11
      ]
    ],
    "secondary_span": [
      [
        12,
        16
      ]
    ],
    "edits": [
      "documents"
    ],
    "edits_original": "< from > add documents </ from >"
  },
  {
    "db_id": "flight_2",
    "feedback": "you have to use airlines of airline table and destination airport instead of country of airports table and airports name respectively.also use flights table in step 1.",
    "question": "Count the number of United Airlines flights arriving in ASY Airport.",
    "gold_parse": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"",
    "beam": [
      [
        "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value AND T1.Airline = value",
        -0.20778465270996094
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE Country = value AND CountryAbbrev = value",
        -2.0996809005737305
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE Country = value",
        -3.1108102798461914
      ],
      [
        "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.CountryAbbrev = value AND T1.Airline = value",
        -4.9654130935668945
      ],
      [
        "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value AND T1.Country = value",
        -5.033575057983398
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE Country = value AND Country = value",
        -5.569018840789795
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE CountryAbbrev = value AND CountryAbbrev = value",
        -6.8470611572265625
      ],
      [
        "SELECT Count ( * ) FROM airlines WHERE Country = value AND Airline = value",
        -7.131414413452148
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE CountryAbbrev = value",
        -7.844361305236816
      ],
      [
        "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value AND T1.Abbreviation = value",
        -7.880075931549072
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE Country = value AND AirportName = value",
        -8.550487518310547
      ],
      [
        "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T1.Country = value AND T2.CountryAbbrev = value",
        -9.008654594421387
      ],
      [
        "SELECT Count ( * ) FROM airlines WHERE Country = value",
        -9.27341079711914
      ],
      [
        "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.CountryAbbrev = value AND T1.Country = value",
        -9.809369087219238
      ],
      [
        "SELECT Count ( * ) FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.Country = value AND T2.Airline = value",
        -9.812949180603027
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE CountryAbbrev = value AND Country = value",
        -10.343778610229492
      ],
      [
        "SELECT Count ( * ) FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.Country = value AND T2.FlightNo = value",
        -11.272315979003906
      ],
      [
        "SELECT Count ( * ) FROM airlines WHERE Airline > value",
        -11.708158493041992
      ],
      [
        "SELECT Count ( * ) FROM airlines WHERE Airline < value",
        -15.769947528839111
      ],
      [
        "SELECT Avg ( * ) FROM airports WHERE Country = value",
        -16.00672483444214
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = \"United Airlines\" AND T1.Airline = \"ASY\"",
    "predicted_parse": "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value AND T1.Airline = value",
    "predicted_parse_explanation": [
      "Step 1: for each row in airlines table , find the corresponding rows in airports table",
      "Step 2: find the number of rows of the results of step 1 whose airports 's country equals United Airlines and airline name equals ASY"
    ],
    "template_feedback": "in step 1 , use flights table in place of airports table in step 2 , consider the destination airport equals ASY and airlines 's airline name equals United Airlines conditions in place of the airports 's country equals United Airlines and airlines 's airline name equals ASY conditions .",
    "primary_span": [
      [
        4,
        6
      ],
      [
        16,
        30
      ]
    ],
    "secondary_span": [
      [
        7,
        11
      ],
      [
        31,
        49
      ]
    ],
    "edits": [
      "flights",
      "airports",
      "airline name equals \"United Airlines\"",
      "destination airport equals \"ASY\"",
      "country equals \"United Airlines\"",
      "airline name equals \"ASY\""
    ],
    "edits_original": "< from > add flights </ from > < from > remove airports </ from > < where > add airline name equals \" United Airlines \" </ where > < where > add destination airport equals \" ASY \" </ where > < where > remove country equals \" United Airlines \" </ where > < where > remove airline name equals \" ASY \" </ where >"
  },
  {
    "db_id": "tvshow",
    "feedback": "You need to drop And directed by equals Ben Jones.",
    "question": "What are the countries that have cartoons on TV that were written by Todd Casey?",
    "gold_parse": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
    "beam": [
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value AND T2.Directed_by = value",
        -0.17794132232666016
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value AND T2.Written_by = value",
        -2.2390732765197754
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel JOIN Cartoon AS T3 ON T1.id = T3.Channel WHERE T3.Written_by = value AND T2.Episode = value",
        -3.7108683586120605
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = value AND T2.Directed_by = value",
        -4.133120536804199
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel JOIN Cartoon AS T3 ON T1.id = T3.Channel WHERE T3.Written_by = value AND T2.Rating = value",
        -5.0395097732543945
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value AND T1.series_name = value",
        -5.677289009094238
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = value AND T2.Written_by = value",
        -6.189545154571533
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value AND T1.Content = value",
        -6.245051383972168
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value",
        -7.473569869995117
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel JOIN Cartoon AS T3 ON T1.id = T3.Channel WHERE T3.Directed_by = value AND T2.Episode = value",
        -7.674941539764404
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value AND T1.Language = value",
        -7.912673473358154
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel JOIN Cartoon AS T3 ON T1.id = T3.Channel WHERE T3.Directed_by = value AND T2.Rating = value",
        -9.005004405975342
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value INTERSECT SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value",
        -9.433722496032715
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value AND T1.Pay_per_view_PPV = value",
        -9.438553810119629
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = value AND T1.series_name = value",
        -9.618152618408203
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = value",
        -9.794723510742188
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel JOIN Cartoon AS T3 ON T1.id = T3.Channel WHERE T3.Written_by = value AND T2.Share = value",
        -10.03036880493164
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = value AND T1.Content = value",
        -10.1982421875
      ],
      [
        "SELECT DISTINCT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value AND T2.Directed_by = value",
        -10.405345916748047
      ],
      [
        "SELECT Country FROM TV_Channel",
        -16.55386734008789
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = \"Todd Casey\" AND T2.Directed_by = \"Ben Jones\"",
    "predicted_parse": "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value AND T2.Directed_by = value",
    "predicted_parse_explanation": [
      "Step 1: for each row in tv channel table , find the corresponding rows in cartoon table",
      "Step 2: find the country of the results of step 1 whose written by equals Todd Casey and directed by equals Ben Jones"
    ],
    "template_feedback": "in step 2 , remove the directed by equals Ben Jones conditions .",
    "primary_span": [
      [
        4,
        12
      ]
    ],
    "secondary_span": [],
    "edits": [
      "directed by equals \"Ben Jones\""
    ],
    "edits_original": "< where > remove directed by equals \" Ben Jones \" </ where >"
  },
  {
    "db_id": "orchestra",
    "feedback": "The year of founded is wrong , orchestra should be there .",
    "question": "Show the names of conductors and the orchestras they have conducted.",
    "gold_parse": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID",
    "beam": [
      [
        "SELECT T1.Name , T2.Year_of_Founded FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID",
        -0.5159808397293091
      ],
      [
        "SELECT T1.Name , T2.Major_Record_Format FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID",
        -1.1486806869506836
      ],
      [
        "SELECT T1.Name , T2.Record_Company FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID",
        -2.744856595993042
      ],
      [
        "SELECT Name , Year_of_Work FROM conductor",
        -4.857600688934326
      ],
      [
        "SELECT Name , Nationality FROM conductor",
        -5.040213584899902
      ],
      [
        "SELECT T1.Name , T3.Official_ratings_(millions) FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID JOIN performance AS T3 ON T2.Orchestra_ID = T3.Orchestra_ID",
        -5.839963912963867
      ],
      [
        "SELECT Name , Age FROM conductor",
        -6.6678056716918945
      ],
      [
        "SELECT Name , Name FROM conductor",
        -7.545910835266113
      ],
      [
        "SELECT T1.Name , T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID",
        -7.570583343505859
      ],
      [
        "SELECT T1.Name , T3.Type FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID JOIN performance AS T3 ON T2.Orchestra_ID = T3.Orchestra_ID",
        -7.675423622131348
      ],
      [
        "SELECT T1.Name , T3.Date FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID JOIN performance AS T3 ON T2.Orchestra_ID = T3.Orchestra_ID",
        -7.769405364990234
      ],
      [
        "SELECT T1.Name , T3.Share FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID JOIN performance AS T3 ON T2.Orchestra_ID = T3.Orchestra_ID",
        -7.994623184204102
      ],
      [
        "SELECT T1.Name , T2.Conductor_ID FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID",
        -8.163382530212402
      ],
      [
        "SELECT T1.Name , T2.Orchestra_ID FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID",
        -8.831671714782715
      ],
      [
        "SELECT T1.Name , T3.Weekly_rank FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID JOIN performance AS T3 ON T2.Orchestra_ID = T3.Orchestra_ID",
        -8.918207168579102
      ],
      [
        "SELECT Name , Conductor_ID FROM conductor",
        -9.013028144836426
      ],
      [
        "SELECT T1.Name , T4.Attendance FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID JOIN performance AS T3 ON T2.Orchestra_ID = T3.Orchestra_ID JOIN show AS T4 ON T3.Performance_ID = T4.Performance_ID",
        -9.019964218139648
      ],
      [
        "SELECT T1.Name , T4.Result FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID JOIN performance AS T3 ON T2.Orchestra_ID = T3.Orchestra_ID JOIN show AS T4 ON T3.Performance_ID = T4.Performance_ID",
        -9.432504653930664
      ],
      [
        "SELECT T1.Name , T4.If_first_show FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID JOIN performance AS T3 ON T2.Orchestra_ID = T3.Orchestra_ID JOIN show AS T4 ON T3.Performance_ID = T4.Performance_ID",
        -9.675854682922363
      ],
      [
        "SELECT Name FROM conductor",
        -13.93915843963623
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.Name , T2.Year_of_Founded FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID",
    "predicted_parse": "SELECT T1.Name , T2.Year_of_Founded FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID",
    "predicted_parse_explanation": [
      "Step 1: for each row in conductor table , find the corresponding rows in orchestra table",
      "Step 2: find the name and year of founded of the results of step 1"
    ],
    "template_feedback": "in step 2 , find orchestra in place of year of founded .",
    "primary_span": [
      [
        4,
        5
      ]
    ],
    "secondary_span": [
      [
        6,
        12
      ]
    ],
    "edits": [
      "orchestra",
      "year of founded"
    ],
    "edits_original": "< select > add orchestra </ select > < select > remove year of founded </ select >"
  },
  {
    "db_id": "dog_kennels",
    "feedback": "In step 2 Find summation of charge amount with cost of treatment from treatments table too .",
    "question": "Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.",
    "gold_parse": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1",
    "beam": [
      [
        "SELECT T2.owner_id , T2.zip_code FROM Charges AS T1 JOIN Owners AS T2 GROUP BY T2.owner_id ORDER BY Sum ( T1.charge_amount ) Desc LIMIT value",
        -0.002071380615234375
      ],
      [
        "SELECT T2.owner_id , T2.zip_code FROM Charges AS T1 JOIN Owners AS T2 GROUP BY T2.first_name ORDER BY Sum ( T1.charge_amount ) Desc LIMIT value",
        -7.018154621124268
      ],
      [
        "SELECT T2.owner_id , T2.zip_code FROM Charges AS T1 JOIN Owners AS T2 GROUP BY T2.zip_code ORDER BY Sum ( T1.charge_amount ) Desc LIMIT value",
        -7.656525135040283
      ],
      [
        "SELECT T2.owner_id , Sum ( T2.zip_code ) FROM Charges AS T1 JOIN Owners AS T2 GROUP BY T2.owner_id ORDER BY Sum ( T1.charge_amount ) Desc LIMIT value",
        -8.040052890777588
      ],
      [
        "SELECT T2.owner_id , T2.zip_code FROM Charges AS T1 JOIN Owners AS T2 JOIN Dogs AS T3 GROUP BY T3.owner_id ORDER BY Sum ( T1.charge_amount ) Desc LIMIT value",
        -9.034842491149902
      ],
      [
        "SELECT T2.owner_id , T2.zip_code FROM Charges AS T1 JOIN Owners AS T2 GROUP BY T2.state ORDER BY Sum ( T1.charge_amount ) Desc LIMIT value",
        -10.045135498046875
      ],
      [
        "SELECT T2.owner_id , T2.zip_code FROM Charges AS T1 JOIN Owners AS T2 JOIN Professionals AS T3 GROUP BY T3.first_name ORDER BY Sum ( T1.charge_amount ) Desc LIMIT value",
        -10.194873809814453
      ],
      [
        "SELECT T2.owner_id , T2.zip_code FROM Charges AS T1 JOIN Owners AS T2 GROUP BY T2.last_name ORDER BY Sum ( T1.charge_amount ) Desc LIMIT value",
        -10.336492538452148
      ],
      [
        "SELECT T2.owner_id , T2.zip_code FROM Charges AS T1 JOIN Owners AS T2 JOIN Dogs AS T3 GROUP BY T3.name ORDER BY Sum ( T1.charge_amount ) Desc LIMIT value",
        -10.879497528076172
      ],
      [
        "SELECT T2.owner_id , T2.zip_code FROM Charges AS T1 JOIN Owners AS T2 GROUP BY T1.charge_id ORDER BY Sum ( T1.charge_amount ) Desc LIMIT value",
        -11.18924331665039
      ],
      [
        "SELECT owner_id , zip_code FROM Owners GROUP BY owner_id ORDER BY Count ( * ) Desc LIMIT value",
        -11.220059394836426
      ],
      [
        "SELECT T2.owner_id , T2.zip_code FROM Charges AS T1 JOIN Owners AS T2 GROUP BY T1.charge_type ORDER BY Sum ( T1.charge_amount ) Desc LIMIT value",
        -11.301244735717773
      ],
      [
        "SELECT T2.owner_id , T2.zip_code FROM Charges AS T1 JOIN Owners AS T2 JOIN Dogs AS T3 GROUP BY T3.dog_id ORDER BY Sum ( T1.charge_amount ) Desc LIMIT value",
        -11.43316650390625
      ],
      [
        "SELECT T2.owner_id , T2.zip_code FROM Charges AS T1 JOIN Owners AS T2 JOIN Professionals AS T3 GROUP BY T3.state ORDER BY Sum ( T1.charge_amount ) Desc LIMIT value",
        -12.026834487915039
      ],
      [
        "SELECT T2.owner_id , T2.zip_code FROM Charges AS T1 JOIN Owners AS T2 JOIN Dogs AS T3 GROUP BY T3.size_code ORDER BY Sum ( T1.charge_amount ) Desc LIMIT value",
        -12.151188850402832
      ],
      [
        "SELECT T2.owner_id , T2.zip_code FROM Charges AS T1 JOIN Owners AS T2 GROUP BY T2.owner_id ORDER BY Sum ( T1.charge_amount ) Desc",
        -12.258063316345215
      ],
      [
        "SELECT T2.owner_id , T2.zip_code FROM Charges AS T1 JOIN Owners AS T2 GROUP BY T2.email_address ORDER BY Sum ( T1.charge_amount ) Desc LIMIT value",
        -12.606843948364258
      ],
      [
        "SELECT T2.owner_id , T2.zip_code FROM Charges AS T1 JOIN Owners AS T2 GROUP BY T2.city ORDER BY Sum ( T1.charge_amount ) Desc LIMIT value",
        -12.618978500366211
      ],
      [
        "SELECT T2.owner_id , T2.zip_code FROM Charges AS T1 JOIN Owners AS T2 GROUP BY * ORDER BY Sum ( T1.charge_amount ) Desc LIMIT value",
        -12.632437705993652
      ],
      [
        "SELECT T3.owner_id , T3.zip_code FROM Charges AS T1 JOIN Treatment_Types AS T2 JOIN Owners AS T3 GROUP BY T2.treatment_type_description ORDER BY Sum ( T1.charge_amount ) Desc LIMIT value",
        -12.689714431762695
      ]
    ],
    "predicted_parse_with_values": "SELECT T2.owner_id , T2.zip_code FROM Charges AS T1 JOIN Owners AS T2 GROUP BY T2.owner_id ORDER BY Sum ( T1.charge_amount ) Desc LIMIT 1",
    "predicted_parse": "SELECT T2.owner_id , T2.zip_code FROM Charges AS T1 JOIN Owners AS T2 GROUP BY T2.owner_id ORDER BY Sum ( T1.charge_amount ) Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: for each row in charges table , find the corresponding rows in owners table",
      "Step 2: find the summation of charge amount of each value of owner id of the results of step 1",
      "Step 3: find the owner id and zip code of the results of step 1 with largest value in the results of step 2"
    ],
    "template_feedback": "in step 1 , use treatments table and dogs table in place of charges table in step 3 , order the results by summation of cost of treatment in place of summation of charge amount .",
    "primary_span": [
      [
        4,
        9
      ],
      [
        19,
        27
      ]
    ],
    "secondary_span": [
      [
        10,
        14
      ],
      [
        28,
        35
      ]
    ],
    "edits": [
      "dogs",
      "treatments",
      "charges",
      "summation of cost of treatment",
      "summation of charge amount"
    ],
    "edits_original": "< from > add dogs </ from > < from > add treatments </ from > < from > remove charges </ from > < orderBy > add summation of cost of treatment </ orderBy > < orderBy > remove summation of charge amount </ orderBy >"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "feedback": "document id is wrong . Put template id in place of it .",
    "question": "Return the names and template ids for documents that contain the letter w in their description.",
    "gold_parse": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"",
    "beam": [
      [
        "SELECT Document_Name , Document_ID FROM Documents WHERE Document_Description LIKE value",
        -0.3732795715332031
      ],
      [
        "SELECT Document_Name , Template_ID FROM Documents WHERE Document_Description LIKE value",
        -1.1667108535766602
      ],
      [
        "SELECT Document_Name , Document_ID FROM Documents WHERE Document_Name LIKE value",
        -9.324257850646973
      ],
      [
        "SELECT Document_Name , Template_ID FROM Documents WHERE Document_Name LIKE value",
        -10.325224876403809
      ],
      [
        "SELECT Document_ID , Template_ID FROM Documents WHERE Document_Description LIKE value",
        -12.024746894836426
      ],
      [
        "SELECT Document_Name FROM Documents WHERE Document_Description LIKE value",
        -13.348553657531738
      ],
      [
        "SELECT T1.Document_Name , T2.Paragraph_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Description LIKE value",
        -13.861572265625
      ],
      [
        "SELECT Document_Name , Template_ID FROM Documents WHERE Document_Description BETWEEN value AND value",
        -14.00024700164795
      ],
      [
        "SELECT Document_Name , Document_ID FROM Documents WHERE Document_Description BETWEEN value AND value",
        -14.049498558044434
      ],
      [
        "SELECT Count ( Document_Name ) , Document_ID FROM Documents WHERE Document_Description LIKE value",
        -14.386608123779297
      ],
      [
        "SELECT Document_Name , Document_ID FROM Documents WHERE Document_Description = value",
        -14.50912857055664
      ],
      [
        "SELECT Document_ID , Document_ID FROM Documents WHERE Document_Description LIKE value",
        -14.531194686889648
      ],
      [
        "SELECT T1.Document_Name , T1.Document_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Paragraph_Text LIKE value",
        -14.540288925170898
      ],
      [
        "SELECT Document_Name , Template_ID , Template_ID FROM Documents WHERE Document_Description LIKE value",
        -14.758487701416016
      ],
      [
        "SELECT Document_Name , Document_ID , Template_ID FROM Documents WHERE Document_Description LIKE value",
        -14.932262420654297
      ],
      [
        "SELECT Count ( Document_Name ) , Template_ID FROM Documents WHERE Document_Description LIKE value",
        -15.000626564025879
      ],
      [
        "SELECT T1.Document_Name , T1.Template_ID FROM Documents AS T1 WHERE T1.Document_Description IN ( SELECT T2.Document_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Description LIKE value )",
        -15.25517988204956
      ],
      [
        "SELECT DISTINCT Document_Name , Document_ID FROM Documents WHERE Document_Description LIKE value",
        -15.36268138885498
      ],
      [
        "SELECT T1.Document_Name , T2.Document_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Description LIKE value",
        -15.373403549194336
      ],
      [
        "SELECT DISTINCT Document_Name , Document_ID FROM Documents WHERE Document_Description LIKE value",
        -15.42106819152832
      ]
    ],
    "predicted_parse_with_values": "SELECT Document_Name , Document_ID FROM Documents WHERE Document_Description LIKE \"w\"",
    "predicted_parse": "SELECT Document_Name , Document_ID FROM Documents WHERE Document_Description LIKE value",
    "predicted_parse_explanation": [
      "find the document name and document id in documents table whose document description like w"
    ],
    "template_feedback": "consider the document description like % w % conditions in place of the document description like w conditions . find template id in place of document id .",
    "primary_span": [
      [
        0,
        8
      ],
      [
        19,
        21
      ]
    ],
    "secondary_span": [
      [
        9,
        18
      ],
      [
        22,
        27
      ]
    ],
    "edits": [
      "template id",
      "document id",
      "document description like \"%w%\"",
      "document description like \"w\""
    ],
    "edits_original": "< select > add template id </ select > < select > remove document id </ select > < where > add document description like \" % w % \" </ where > < where > remove document description like \" w \" </ where >"
  },
  {
    "db_id": "world_1",
    "feedback": "Instead of \"summation of GNP\" , Use \"Average of GNP\".",
    "question": "Give the mean GNP and total population of nations which are considered US territory.",
    "gold_parse": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"",
    "beam": [
      [
        "SELECT Sum ( GNP ) , Sum ( Population ) FROM country WHERE Continent = value",
        -0.3896932601928711
      ],
      [
        "SELECT Sum ( GNP ) , Sum ( LifeExpectancy ) FROM country WHERE Continent = value",
        -1.878861427307129
      ],
      [
        "SELECT Sum ( GNP ) , Sum ( Population ) FROM country",
        -2.5273447036743164
      ],
      [
        "SELECT Sum ( GNP ) , Sum ( GNPOld ) FROM country WHERE Continent = value",
        -3.74739933013916
      ],
      [
        "SELECT Sum ( GNP ) , Sum ( LifeExpectancy ) FROM country",
        -3.97415828704834
      ],
      [
        "SELECT Sum ( GNP ) , Sum ( Population ) , Sum ( Population ) FROM country GROUP BY GovernmentForm",
        -4.234537124633789
      ],
      [
        "SELECT Sum ( GNP ) , Sum ( Population ) , Sum ( LifeExpectancy ) FROM country GROUP BY GovernmentForm",
        -5.445639610290527
      ],
      [
        "SELECT Sum ( GNP ) , Sum ( Population ) FROM country WHERE Region = value",
        -5.463801383972168
      ],
      [
        "SELECT Sum ( GNP ) , Sum ( LifeExpectancy ) , Sum ( Population ) FROM country GROUP BY GovernmentForm",
        -5.563913345336914
      ],
      [
        "SELECT Sum ( GNP ) , Sum ( GNPOld ) FROM country",
        -5.888232231140137
      ],
      [
        "SELECT Avg ( GNP ) , Sum ( Population ) FROM country WHERE Continent = value",
        -6.001731872558594
      ],
      [
        "SELECT GNP , Sum ( Population ) FROM country WHERE Continent = value",
        -6.246618270874023
      ],
      [
        "SELECT Sum ( GNP ) , Sum ( Population ) FROM country WHERE GovernmentForm = value",
        -6.46933650970459
      ],
      [
        "SELECT Sum ( GNP ) , Sum ( LifeExpectancy ) , Sum ( LifeExpectancy ) FROM country GROUP BY GovernmentForm",
        -6.779990196228027
      ],
      [
        "SELECT Sum ( GNP ) , Sum ( Population ) , Sum ( Population ) FROM country WHERE Continent = value GROUP BY GovernmentForm",
        -6.946934700012207
      ],
      [
        "SELECT Sum ( GNP ) , Sum ( GNPOld ) , Sum ( Population ) FROM country GROUP BY GovernmentForm",
        -6.956475257873535
      ],
      [
        "SELECT Sum ( GNP ) , Sum ( LifeExpectancy ) FROM country WHERE Region = value",
        -7.089364051818848
      ],
      [
        "SELECT Avg ( GNP ) , Sum ( LifeExpectancy ) FROM country WHERE Continent = value",
        -7.49172306060791
      ],
      [
        "SELECT Sum ( GNP ) , Sum ( Population ) FROM country WHERE Continent = value GROUP BY GovernmentForm",
        -7.578529357910156
      ],
      [
        "SELECT Sum ( GNPOld ) , Sum ( Population ) FROM country",
        -8.037742614746094
      ]
    ],
    "predicted_parse_with_values": "SELECT Sum ( GNP ) , Sum ( Population ) FROM country WHERE Continent = \"US Territory\"",
    "predicted_parse": "SELECT Sum ( GNP ) , Sum ( Population ) FROM country WHERE Continent = value",
    "predicted_parse_explanation": [
      "find the summation of gnp and summation of population in country table whose continent equals US Territory"
    ],
    "template_feedback": "consider the government form equals US Territory conditions in place of the continent equals US Territory conditions . find average gnp in place of summation of gnp .",
    "primary_span": [
      [
        0,
        7
      ],
      [
        18,
        20
      ]
    ],
    "secondary_span": [
      [
        8,
        17
      ],
      [
        21,
        27
      ]
    ],
    "edits": [
      "average gnp",
      "summation of gnp",
      "government form equals \"US Territory\"",
      "continent equals \"US Territory\""
    ],
    "edits_original": "< select > add average gnp </ select > < select > remove summation of gnp </ select > < where > add government form equals \" US Territory \" </ where > < where > remove continent equals \" US Territory \" </ where >"
  },
  {
    "db_id": "flight_2",
    "feedback": "In step 1 Change destination airport with source airport and In step 2 destination airport , flights table with airport code , airports table .",
    "question": "What is the code of airport that has fewest number of flights?",
    "gold_parse": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1",
    "beam": [
      [
        "SELECT DestAirport FROM flights GROUP BY DestAirport ORDER BY Count ( * ) Asc LIMIT value",
        -0.2473158836364746
      ],
      [
        "SELECT T1.AirportCode FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport GROUP BY T2.DestAirport ORDER BY Count ( * ) Asc LIMIT value",
        -1.7958412170410156
      ],
      [
        "SELECT T2.DestAirport FROM airlines AS T1 JOIN flights AS T2 GROUP BY T1.Abbreviation ORDER BY Count ( * ) Asc LIMIT value",
        -3.5504024028778076
      ],
      [
        "SELECT DestAirport FROM flights GROUP BY SourceAirport ORDER BY Count ( * ) Asc LIMIT value",
        -4.202847957611084
      ],
      [
        "SELECT SourceAirport FROM flights GROUP BY DestAirport ORDER BY Count ( * ) Asc LIMIT value",
        -5.858795166015625
      ],
      [
        "SELECT T1.AirportCode FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport GROUP BY T2.SourceAirport ORDER BY Count ( * ) Asc LIMIT value",
        -6.0543131828308105
      ],
      [
        "SELECT T2.AirportCode FROM airlines AS T1 JOIN airports AS T2 GROUP BY T1.Abbreviation ORDER BY Count ( * ) Asc LIMIT value",
        -6.122524261474609
      ],
      [
        "SELECT T2.DestAirport FROM airlines AS T1 JOIN flights AS T2 GROUP BY T1.Airline ORDER BY Count ( * ) Asc LIMIT value",
        -7.534569263458252
      ],
      [
        "SELECT T2.DestAirport FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport GROUP BY T1.Country ORDER BY Count ( * ) Asc LIMIT value",
        -8.498400211334229
      ],
      [
        "SELECT DestAirport FROM flights GROUP BY DestAirport HAVING Count ( * ) = value",
        -8.84452199935913
      ],
      [
        "SELECT T2.DestAirport FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport GROUP BY T1.CountryAbbrev ORDER BY Count ( * ) Asc LIMIT value",
        -9.17870569229126
      ],
      [
        "SELECT T1.Abbreviation FROM airlines AS T1 JOIN flights AS T2 GROUP BY T2.DestAirport ORDER BY Count ( * ) Asc LIMIT value",
        -9.27927017211914
      ],
      [
        "SELECT T1.Country FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport GROUP BY T2.DestAirport ORDER BY Count ( * ) Asc LIMIT value",
        -9.312471389770508
      ],
      [
        "SELECT T2.DestAirport FROM airlines AS T1 JOIN flights AS T2 GROUP BY T1.uid ORDER BY Count ( * ) Asc LIMIT value",
        -9.338751316070557
      ],
      [
        "SELECT T2.SourceAirport FROM airlines AS T1 JOIN flights AS T2 GROUP BY T1.Abbreviation ORDER BY Count ( * ) Asc LIMIT value",
        -9.378289222717285
      ],
      [
        "SELECT T2.DestAirport FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport GROUP BY T1.AirportCode ORDER BY Count ( * ) Asc LIMIT value",
        -9.454221248626709
      ],
      [
        "SELECT T2.DestAirport FROM airlines AS T1 JOIN flights AS T2 GROUP BY T1.Country ORDER BY Count ( * ) Asc LIMIT value",
        -9.540762424468994
      ],
      [
        "SELECT T2.DestAirport FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport GROUP BY T1.AirportName ORDER BY Count ( * ) Asc LIMIT value",
        -9.590948581695557
      ],
      [
        "SELECT SourceAirport FROM flights GROUP BY SourceAirport ORDER BY Count ( * ) Asc LIMIT value",
        -9.877060413360596
      ],
      [
        "SELECT T2.DestAirport FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport GROUP BY T1.City ORDER BY Count ( * ) Asc LIMIT value",
        -9.944180965423584
      ]
    ],
    "predicted_parse_with_values": "SELECT DestAirport FROM flights GROUP BY DestAirport ORDER BY Count ( * ) Asc LIMIT 1",
    "predicted_parse": "SELECT DestAirport FROM flights GROUP BY DestAirport ORDER BY Count ( * ) Asc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of destination airport in flights table",
      "Step 2: find the destination airport in flights table with smallest value in the results of step 1"
    ],
    "template_feedback": "in step 1 , additionally use the information from the airports table besides the flights table .",
    "primary_span": [
      [
        4,
        11
      ]
    ],
    "secondary_span": [
      [
        12,
        16
      ]
    ],
    "edits": [
      "airport code",
      "destination airport",
      "airports",
      "airport code",
      "destination airport"
    ],
    "edits_original": "< select > add airport code </ select > < select > remove destination airport </ select > < from > add airports </ from > < groupBy > add airport code </ groupBy > < groupBy > remove destination airport </ groupBy >"
  },
  {
    "db_id": "student_transcripts_tracking",
    "feedback": "Look for the degree summary name which have program id maximum number of time in student enrolment table.",
    "question": "Find the kind of program which most number of students are enrolled in?",
    "gold_parse": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1",
    "beam": [
      [
        "SELECT course_name FROM Courses GROUP BY course_name ORDER BY Count ( * ) Desc LIMIT value",
        -0.2838268280029297
      ],
      [
        "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment AS T2 JOIN Student_Enrolment_Courses AS T3 ON T1.course_id = T3.course_id AND T3.student_enrolment_id = T2.student_enrolment_id GROUP BY T2.student_enrolment_id ORDER BY Count ( * ) Desc LIMIT value",
        -1.406613826751709
      ],
      [
        "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T2.student_enrolment_id ORDER BY Count ( * ) Desc LIMIT value",
        -7.316222190856934
      ],
      [
        "SELECT * FROM Courses GROUP BY course_name ORDER BY Count ( * ) Desc LIMIT value",
        -8.39173698425293
      ],
      [
        "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment AS T2 JOIN Student_Enrolment_Courses AS T3 ON T1.course_id = T3.course_id AND T3.student_enrolment_id = T2.student_enrolment_id GROUP BY T2.student_id ORDER BY Count ( * ) Desc LIMIT value",
        -9.101365566253662
      ],
      [
        "SELECT course_description FROM Courses GROUP BY course_name ORDER BY Count ( * ) Desc LIMIT value",
        -9.106742858886719
      ],
      [
        "SELECT T2.department_name FROM Courses AS T1 JOIN Departments AS T2 JOIN Degree_Programs AS T3 ON T3.department_id = T2.department_id JOIN Student_Enrolment AS T4 ON T4.degree_program_id = T3.degree_program_id JOIN Student_Enrolment_Courses AS T5 ON T1.course_id = T5.course_id AND T5.student_enrolment_id = T4.student_enrolment_id GROUP BY T1.course_name ORDER BY Count ( * ) Desc LIMIT value",
        -9.131824493408203
      ],
      [
        "SELECT T2.other_details FROM Courses AS T1 JOIN Student_Enrolment AS T2 JOIN Student_Enrolment_Courses AS T3 ON T1.course_id = T3.course_id AND T3.student_enrolment_id = T2.student_enrolment_id GROUP BY T1.course_name ORDER BY Count ( * ) Desc LIMIT value",
        -9.740801811218262
      ],
      [
        "SELECT other_details FROM Courses GROUP BY course_name ORDER BY Count ( * ) Desc LIMIT value",
        -10.070783615112305
      ],
      [
        "SELECT T1.course_name FROM Courses AS T1 JOIN Students AS T2 JOIN Student_Enrolment AS T3 ON T3.student_id = T2.student_id JOIN Student_Enrolment_Courses AS T4 ON T1.course_id = T4.course_id AND T4.student_enrolment_id = T3.student_enrolment_id GROUP BY T2.student_id ORDER BY Count ( * ) Desc LIMIT value",
        -10.198835849761963
      ],
      [
        "SELECT T1.course_name FROM Courses AS T1 JOIN Semesters AS T2 JOIN Student_Enrolment AS T3 ON T3.semester_id = T2.semester_id JOIN Student_Enrolment_Courses AS T4 ON T1.course_id = T4.course_id AND T4.student_enrolment_id = T3.student_enrolment_id GROUP BY T2.semester_name ORDER BY Count ( * ) Desc LIMIT value",
        -10.223874568939209
      ],
      [
        "SELECT * FROM Student_Enrolment GROUP BY student_enrolment_id ORDER BY Count ( * ) Desc LIMIT value",
        -10.372659683227539
      ],
      [
        "SELECT T2.degree_summary_name FROM Courses AS T1 JOIN Degree_Programs AS T2 JOIN Student_Enrolment AS T3 ON T3.degree_program_id = T2.degree_program_id JOIN Student_Enrolment_Courses AS T4 ON T1.course_id = T4.course_id AND T4.student_enrolment_id = T3.student_enrolment_id GROUP BY T1.course_name ORDER BY Count ( * ) Desc LIMIT value",
        -10.604825973510742
      ],
      [
        "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id ORDER BY Count ( * ) Desc LIMIT value",
        -10.623274326324463
      ],
      [
        "SELECT T1.department_name FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id JOIN Student_Enrolment AS T3 ON T2.degree_program_id = T3.degree_program_id GROUP BY T3.student_enrolment_id ORDER BY Count ( * ) Desc LIMIT value",
        -10.6681809425354
      ],
      [
        "SELECT T2.section_name FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY Count ( * ) Desc LIMIT value",
        -10.67699909210205
      ],
      [
        "SELECT T2.degree_summary_description FROM Courses AS T1 JOIN Degree_Programs AS T2 JOIN Student_Enrolment AS T3 ON T3.degree_program_id = T2.degree_program_id JOIN Student_Enrolment_Courses AS T4 ON T1.course_id = T4.course_id AND T4.student_enrolment_id = T3.student_enrolment_id GROUP BY T1.course_name ORDER BY Count ( * ) Desc LIMIT value",
        -10.692008018493652
      ],
      [
        "SELECT T2.semester_name FROM Courses AS T1 JOIN Semesters AS T2 JOIN Student_Enrolment AS T3 ON T3.semester_id = T2.semester_id JOIN Student_Enrolment_Courses AS T4 ON T1.course_id = T4.course_id AND T4.student_enrolment_id = T3.student_enrolment_id GROUP BY T1.course_name ORDER BY Count ( * ) Desc LIMIT value",
        -10.868036270141602
      ],
      [
        "SELECT T3.other_details FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id JOIN Transcripts AS T3 JOIN Transcript_Contents AS T4 ON T2.student_course_id = T4.student_course_id AND T4.transcript_id = T3.transcript_id GROUP BY T1.course_name ORDER BY Count ( * ) Desc LIMIT value",
        -10.868302345275879
      ],
      [
        "SELECT T2.first_name FROM Courses AS T1 JOIN Students AS T2 JOIN Student_Enrolment AS T3 ON T3.student_id = T2.student_id JOIN Student_Enrolment_Courses AS T4 ON T1.course_id = T4.course_id AND T4.student_enrolment_id = T3.student_enrolment_id GROUP BY T1.course_name ORDER BY Count ( * ) Desc LIMIT value",
        -10.885932922363281
      ]
    ],
    "predicted_parse_with_values": "SELECT course_name FROM Courses GROUP BY course_name ORDER BY Count ( * ) Desc LIMIT 1",
    "predicted_parse": "SELECT course_name FROM Courses GROUP BY course_name ORDER BY Count ( * ) Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of course name in courses table",
      "Step 2: find the course name in courses table with largest value in the results of step 1"
    ],
    "template_feedback": "in step 1 , use degree programs table and student enrolment table in place of courses table . find for each value of degree summary name in place of course name . in step 2 , find degree summary name in place of course name .",
    "primary_span": [
      [
        4,
        11
      ],
      [
        18,
        25
      ],
      [
        36,
        39
      ]
    ],
    "secondary_span": [
      [
        12,
        17
      ],
      [
        26,
        31
      ],
      [
        40,
        45
      ]
    ],
    "edits": [
      "degree summary name",
      "course name",
      "degree programs",
      "student enrolment",
      "courses",
      "degree summary name",
      "course name"
    ],
    "edits_original": "< select > add degree summary name </ select > < select > remove course name </ select > < from > add degree programs </ from > < from > add student enrolment </ from > < from > remove courses </ from > < groupBy > add degree summary name </ groupBy > < groupBy > remove course name </ groupBy >"
  },
  {
    "db_id": "flight_2",
    "feedback": "in step 1, you need to use table of flights and in step 2 you need to use source airport.",
    "question": "What are airlines that have some flight departing from airport 'AHD'?",
    "gold_parse": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"",
    "beam": [
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = value",
        -2.09808349609375e-05
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value",
        -11.300881385803223
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = value AND T2.AirportName = value",
        -12.561445236206055
      ],
      [
        "SELECT DISTINCT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = value",
        -12.706314086914062
      ],
      [
        "SELECT DISTINCT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = value",
        -13.14494514465332
      ],
      [
        "SELECT T1.Airline , T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = value",
        -14.793073534965515
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName LIKE value",
        -15.229880332946777
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.CountryAbbrev = value",
        -15.762044906616211
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = value AND T2.Country = value",
        -15.901031494140625
      ],
      [
        "SELECT T1.Airline , T1.uid FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = value",
        -16.03796935081482
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 WHERE T2.FlightNo = value",
        -16.114758491516113
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE AirportName = value",
        -16.39450454711914
      ],
      [
        "SELECT Airline FROM airlines WHERE Country = value",
        -16.66389751434326
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName < value",
        -16.739347457885742
      ],
      [
        "SELECT Count ( DISTINCT T1.Airline ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = value",
        -16.763206481933594
      ],
      [
        "SELECT T2.Airline FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.AirportName = value",
        -16.823476791381836
      ],
      [
        "SELECT Airline FROM airlines WHERE Airline = value",
        -16.83295726776123
      ],
      [
        "SELECT T1.uid FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = value",
        -17.114437103271484
      ],
      [
        "SELECT T1.Abbreviation FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = value",
        -17.16505241394043
      ],
      [
        "SELECT Airline FROM airlines",
        -18.97262668609619
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = \"AHD\"",
    "predicted_parse": "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = value",
    "predicted_parse_explanation": [
      "Step 1: for each row in airlines table , find the corresponding rows in airports table",
      "Step 2: find the airline name of the results of step 1 whose airport name equals AHD"
    ],
    "template_feedback": "in step 1 , use flights table in place of airports table in step 2 , consider the source airport equals AHD conditions in place of the airport name equals AHD conditions .",
    "primary_span": [
      [
        4,
        6
      ],
      [
        16,
        22
      ]
    ],
    "secondary_span": [
      [
        7,
        11
      ],
      [
        23,
        32
      ]
    ],
    "edits": [
      "flights",
      "airports",
      "source airport equals \"AHD\"",
      "airport name equals \"AHD\""
    ],
    "edits_original": "< from > add flights </ from > < from > remove airports </ from > < where > add source airport equals \" AHD \" </ where > < where > remove airport name equals \" AHD \" </ where >"
  },
  {
    "db_id": "network_1",
    "feedback": "It should be likes table , not friend table .",
    "question": "Count the number of likes for each student id.",
    "gold_parse": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id",
    "beam": [
      [
        "SELECT Count ( * ) , student_id FROM Friend GROUP BY student_id",
        -0.1407337188720703
      ],
      [
        "SELECT Count ( * ) , T3.liked_id FROM Highschooler AS T1 JOIN Friend AS T2 ON T2.student_id = T1.ID JOIN Likes AS T3 ON T1.ID = T3.liked_id GROUP BY T2.student_id",
        -3.2895638942718506
      ],
      [
        "SELECT Count ( * ) FROM Friend GROUP BY student_id",
        -3.6014528274536133
      ],
      [
        "SELECT Count ( * ) , T2.student_id FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T1.ID",
        -3.62750244140625
      ],
      [
        "SELECT Count ( * ) , T1.ID FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id",
        -4.136709690093994
      ],
      [
        "SELECT Count ( * ) , friend_id FROM Friend GROUP BY student_id",
        -4.8287672996521
      ],
      [
        "SELECT Count ( * ) , T3.student_id FROM Highschooler AS T1 JOIN Friend AS T2 ON T2.student_id = T1.ID JOIN Likes AS T3 ON T1.ID = T3.liked_id GROUP BY T2.student_id",
        -4.996500015258789
      ],
      [
        "SELECT Count ( * ) , T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id",
        -5.982953071594238
      ],
      [
        "SELECT Count ( * ) , T2.student_id FROM Highschooler AS T1 JOIN Friend AS T2 ON T2.student_id = T1.ID JOIN Likes AS T3 ON T1.ID = T3.liked_id GROUP BY T3.student_id",
        -6.6099348068237305
      ],
      [
        "SELECT Count ( * ) FROM Highschooler GROUP BY ID",
        -6.892819404602051
      ],
      [
        "SELECT Count ( * ) , T2.liked_id FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id GROUP BY T1.ID",
        -6.913334131240845
      ],
      [
        "SELECT Count ( * ) , T2.student_id FROM Highschooler AS T1 JOIN Friend AS T2 ON T2.student_id = T1.ID JOIN Likes AS T3 ON T1.ID = T3.liked_id GROUP BY T3.liked_id",
        -7.200919151306152
      ],
      [
        "SELECT Count ( * ) , T1.grade FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id",
        -7.40739631652832
      ],
      [
        "SELECT Count ( * ) , student_id FROM Friend GROUP BY friend_id",
        -7.750064849853516
      ],
      [
        "SELECT Count ( * ) , ID FROM Highschooler GROUP BY ID",
        -7.885738372802734
      ],
      [
        "SELECT Count ( * ) , T2.student_id FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id GROUP BY T1.ID",
        -8.572324752807617
      ],
      [
        "SELECT Count ( * ) FROM Likes GROUP BY student_id",
        -10.157500267028809
      ],
      [
        "SELECT Count ( * ) FROM Likes GROUP BY liked_id",
        -10.72362995147705
      ],
      [
        "SELECT Count ( * ) FROM Friend GROUP BY friend_id",
        -10.936085224151611
      ],
      [
        "SELECT Count ( * ) FROM Highschooler",
        -11.59340763092041
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) , student_id FROM Friend GROUP BY student_id",
    "predicted_parse": "SELECT Count ( * ) , student_id FROM Friend GROUP BY student_id",
    "predicted_parse_explanation": [
      "find each value of student id in friend table along with the number of the corresponding rows to each value"
    ],
    "template_feedback": "use likes table in place of friend table .",
    "primary_span": [
      [
        0,
        2
      ]
    ],
    "secondary_span": [
      [
        3,
        8
      ]
    ],
    "edits": [
      "likes",
      "friend"
    ],
    "edits_original": "< from > add likes </ from > < from > remove friend </ from >"
  },
  {
    "db_id": "student_transcripts_tracking",
    "feedback": "You should use other student details and student table instead of other details and student enrolment table respectively.",
    "question": "What other details can you tell me about students in reverse alphabetical order?",
    "gold_parse": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC",
    "beam": [
      [
        "SELECT other_details FROM Student_Enrolment ORDER BY other_details Desc",
        -0.004380702972412109
      ],
      [
        "SELECT other_details FROM Student_Enrolment ORDER BY other_details Asc",
        -6.094260215759277
      ],
      [
        "SELECT T2.other_details FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id ORDER BY T1.other_student_details Desc",
        -7.079164505004883
      ],
      [
        "SELECT T2.other_details FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id ORDER BY T1.other_details Desc",
        -7.5806450843811035
      ],
      [
        "SELECT T2.other_details FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id ORDER BY T1.email_address Desc",
        -8.797977447509766
      ],
      [
        "SELECT other_details FROM Student_Enrolment ORDER BY * Desc",
        -9.41502857208252
      ],
      [
        "SELECT T2.other_details FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id ORDER BY T1.date_left Desc",
        -9.565641403198242
      ],
      [
        "SELECT * FROM Student_Enrolment ORDER BY other_details Desc",
        -9.680667400360107
      ],
      [
        "SELECT T2.other_details FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id ORDER BY T1.first_name Desc",
        -9.810787200927734
      ],
      [
        "SELECT T1.other_details FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id ORDER BY T2.other_details Desc",
        -10.100533723831177
      ],
      [
        "SELECT T2.other_details FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id ORDER BY T1.last_name Desc",
        -10.188066482543945
      ],
      [
        "SELECT T3.other_details FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id JOIN Student_Enrolment AS T3 ON T2.student_id = T3.student_id ORDER BY T1.other_address_details Desc",
        -10.246265411376953
      ],
      [
        "SELECT T2.other_details FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id ORDER BY T1.ssn Desc",
        -10.268352508544922
      ],
      [
        "SELECT T2.other_details FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id ORDER BY T1.semester_name Desc",
        -10.721001625061035
      ],
      [
        "SELECT T2.other_details FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id ORDER BY T1.date_first_registered Desc",
        -10.91627025604248
      ],
      [
        "SELECT other_details FROM Student_Enrolment ORDER BY student_id Desc",
        -11.151165008544922
      ],
      [
        "SELECT T2.other_details FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id ORDER BY T1.other_details Desc",
        -11.225541114807129
      ],
      [
        "SELECT T2.other_details FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id ORDER BY T1.middle_name Desc",
        -11.413871765136719
      ],
      [
        "SELECT T2.other_details FROM Courses AS T1 JOIN Student_Enrolment AS T2 JOIN Student_Enrolment_Courses AS T3 ON T1.course_id = T3.course_id AND T3.student_enrolment_id = T2.student_enrolment_id ORDER BY T1.course_name Desc",
        -11.53345012664795
      ],
      [
        "SELECT other_details FROM Student_Enrolment",
        -14.684025764465332
      ]
    ],
    "predicted_parse_with_values": "SELECT other_details FROM Student_Enrolment ORDER BY other_details Desc",
    "predicted_parse": "SELECT other_details FROM Student_Enrolment ORDER BY other_details Desc",
    "predicted_parse_explanation": [
      "find the other details in student enrolment table ordered descending by other details"
    ],
    "template_feedback": "use students table in place of student enrolment table . find other student details in place of other details . order the results by other student details in place of other details .",
    "primary_span": [
      [
        0,
        2
      ],
      [
        10,
        13
      ],
      [
        20,
        26
      ]
    ],
    "secondary_span": [
      [
        3,
        9
      ],
      [
        14,
        19
      ],
      [
        27,
        32
      ]
    ],
    "edits": [
      "other student details",
      "other details",
      "students",
      "student enrolment",
      "other student details",
      "other details"
    ],
    "edits_original": "< select > add other student details </ select > < select > remove other details </ select > < from > add students </ from > < from > remove student enrolment </ from > < orderBy > add other student details </ orderBy > < orderBy > remove other details </ orderBy >"
  },
  {
    "db_id": "world_1",
    "feedback": "in step 1 , i want the name, language of countrylanguage , life expectancy , make sure t equivalent with the is official of countrylanguage.",
    "question": "What is average life expectancy in the countries where English is not the official language?",
    "gold_parse": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")",
    "beam": [
      [
        "SELECT Avg ( Population ) FROM country WHERE Continent NOT IN ( SELECT Continent FROM country WHERE LocalName = value )",
        -1.6513862609863281
      ],
      [
        "SELECT Avg ( LifeExpectancy ) FROM country WHERE Continent NOT IN ( SELECT Continent FROM country WHERE LocalName = value )",
        -1.8078179359436035
      ],
      [
        "SELECT Avg ( LifeExpectancy ) FROM country WHERE LocalName ! = value",
        -1.9125480651855469
      ],
      [
        "SELECT Avg ( Population ) FROM country WHERE LocalName ! = value",
        -2.1170244216918945
      ],
      [
        "SELECT Avg ( GNPOld ) FROM country WHERE Continent NOT IN ( SELECT Continent FROM country WHERE LocalName = value )",
        -2.7021965980529785
      ],
      [
        "SELECT Avg ( GNPOld ) FROM country WHERE LocalName ! = value",
        -3.0286245346069336
      ],
      [
        "SELECT Avg ( LifeExpectancy ) FROM country WHERE Name ! = value",
        -3.514617919921875
      ],
      [
        "SELECT Avg ( Population ) FROM country WHERE Name ! = value",
        -3.5885400772094727
      ],
      [
        "SELECT Avg ( Population ) FROM country WHERE Continent NOT IN ( SELECT Code2 FROM country WHERE LocalName = value )",
        -3.675398349761963
      ],
      [
        "SELECT Avg ( LifeExpectancy ) FROM country WHERE Continent NOT IN ( SELECT Code2 FROM country WHERE LocalName = value )",
        -3.79581618309021
      ],
      [
        "SELECT Avg ( Population ) FROM country WHERE Continent ! = ( SELECT Continent FROM country WHERE LocalName = value )",
        -3.978105068206787
      ],
      [
        "SELECT Avg ( LifeExpectancy ) FROM country WHERE Continent ! = ( SELECT Continent FROM country WHERE LocalName = value )",
        -3.9987354278564453
      ],
      [
        "SELECT Avg ( GNPOld ) FROM country WHERE Name ! = value",
        -4.5730743408203125
      ],
      [
        "SELECT Avg ( Population ) FROM country WHERE Continent ! = value",
        -7.148479461669922
      ],
      [
        "SELECT Avg ( LifeExpectancy ) FROM country WHERE Code2 ! = value",
        -7.371204376220703
      ],
      [
        "SELECT Avg ( Population ) FROM country WHERE Code2 ! = value",
        -7.559771537780762
      ],
      [
        "SELECT Avg ( LifeExpectancy ) FROM country WHERE Continent ! = value",
        -7.72325325012207
      ],
      [
        "SELECT Avg ( T1.LifeExpectancy ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language ! = value",
        -7.921153545379639
      ],
      [
        "SELECT Avg ( T1.Population ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language ! = value",
        -8.15053129196167
      ],
      [
        "SELECT Avg ( GNPOld ) FROM country WHERE Code2 ! = value",
        -8.477979183197021
      ]
    ],
    "predicted_parse_with_values": "SELECT Avg ( Population ) FROM country WHERE Continent NOT IN ( SELECT Continent FROM country WHERE LocalName = \"English\" )",
    "predicted_parse": "SELECT Avg ( Population ) FROM country WHERE Continent NOT IN ( SELECT Continent FROM country WHERE LocalName = value )",
    "predicted_parse_explanation": [
      "Step 1: find the continent in country table whose local name equals English",
      "Step 2: find the average population in country table whose continent not one of the results of step 1"
    ],
    "template_feedback": "in step 1 , additionally use the information from the countrylanguage table besides the country table . consider the language equals English and is official equals T conditions in place of the local name equals English conditions . find name in place of continent . in step 2 , make sure the name is not one of the results of step 1 the continent is not one of the results of step 1 . find average life expectancy in place of average population .",
    "primary_span": [
      [
        4,
        11
      ],
      [
        17,
        27
      ],
      [
        38,
        39
      ],
      [
        49,
        61
      ],
      [
        74,
        77
      ]
    ],
    "secondary_span": [
      [
        12,
        16
      ],
      [
        28,
        37
      ],
      [
        40,
        44
      ],
      [
        62,
        73
      ],
      [
        78,
        83
      ]
    ],
    "edits": [
      "average life expectancy",
      "average population",
      "name not one of SUBS1",
      "continent not one of SUBS1",
      "name",
      "continent",
      "countrylanguage",
      "language equals \"English\"",
      "is official equals \"T\"",
      "local name equals \"English\""
    ],
    "edits_original": "< select > add average life expectancy </ select > < select > remove average population </ select > < where > add name not one of SUBS1 </ where > < where > remove continent not one of SUBS1 </ where > < select > add name </ select > < select > remove continent </ select > < from > add countrylanguage </ from > < where > add language equals \" English \" </ where > < where > add is official equals \" T \" </ where > < where > remove local name equals \" English \" </ where >"
  },
  {
    "db_id": "student_transcripts_tracking",
    "feedback": "I want the number of time course apperaed in transcription contents.",
    "question": "What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?",
    "gold_parse": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1",
    "beam": [
      [
        "SELECT Max ( student_course_id ) , course_id FROM Student_Enrolment_Courses GROUP BY course_id",
        -2.274965286254883
      ],
      [
        "SELECT Max ( course_id ) , course_id FROM Student_Enrolment_Courses GROUP BY course_id",
        -2.283997654914856
      ],
      [
        "SELECT Max ( * ) , course_id FROM Student_Enrolment_Courses GROUP BY course_id",
        -2.6549763679504395
      ],
      [
        "SELECT Max ( student_enrolment_id ) , course_id FROM Student_Enrolment_Courses GROUP BY course_id",
        -2.7825088500976562
      ],
      [
        "SELECT course_id , Max ( student_enrolment_id ) , course_id FROM Student_Enrolment_Courses GROUP BY course_id",
        -3.15875244140625
      ],
      [
        "SELECT T1.course_name , Max ( T2.student_enrolment_id ) , T2.course_id FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id",
        -3.488310217857361
      ],
      [
        "SELECT Max ( * ) , student_enrolment_id FROM Student_Enrolment_Courses GROUP BY course_id",
        -3.7194089889526367
      ],
      [
        "SELECT T2.course_id , Max ( T2.student_enrolment_id ) , T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id",
        -3.7537567615509033
      ],
      [
        "SELECT Max ( T1.course_description ) , T2.course_id FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id",
        -3.9265103340148926
      ],
      [
        "SELECT course_id , Max ( course_id ) , course_id FROM Student_Enrolment_Courses GROUP BY course_id",
        -4.037938356399536
      ],
      [
        "SELECT Max ( T1.student_id ) , T2.course_id FROM Student_Enrolment AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.student_enrolment_id = T2.student_enrolment_id GROUP BY T2.course_id",
        -4.114452838897705
      ],
      [
        "SELECT T1.course_name , Max ( T2.student_enrolment_id ) , T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id",
        -4.3484169244766235
      ],
      [
        "SELECT T2.course_id , Max ( T2.course_id ) , T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id",
        -4.372132778167725
      ],
      [
        "SELECT Max ( course_id ) , student_enrolment_id FROM Student_Enrolment_Courses GROUP BY course_id",
        -4.3895872831344604
      ],
      [
        "SELECT Max ( T2.course_id ) , T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id",
        -4.446792006492615
      ],
      [
        "SELECT Max ( course_id ) , course_id , Count ( * ) FROM Student_Enrolment_Courses GROUP BY course_id",
        -4.446842312812805
      ],
      [
        "SELECT Max ( student_course_id ) , course_id , Count ( * ) FROM Student_Enrolment_Courses GROUP BY course_id",
        -4.502597808837891
      ],
      [
        "SELECT Max ( T2.student_course_id ) , T1.course_id FROM Student_Enrolment_Courses AS T1 JOIN Transcript_Contents AS T2 ON T1.student_course_id = T2.student_course_id GROUP BY T1.course_id",
        -4.514253377914429
      ],
      [
        "SELECT student_course_id , course_id , Count ( * ) FROM Student_Enrolment_Courses GROUP BY course_id",
        -4.669735670089722
      ],
      [
        "SELECT T1.course_name , Max ( T3.student_enrolment_id ) , T2.student_enrolment_id FROM Courses AS T1 JOIN Student_Enrolment AS T2 JOIN Student_Enrolment_Courses AS T3 ON T1.course_id = T3.course_id AND T3.student_enrolment_id = T2.student_enrolment_id AND T1.course_id = T3.course_id GROUP BY T3.course_id",
        -5.009513735771179
      ]
    ],
    "predicted_parse_with_values": "SELECT Max ( student_course_id ) , course_id FROM Student_Enrolment_Courses GROUP BY course_id",
    "predicted_parse": "SELECT Max ( student_course_id ) , course_id FROM Student_Enrolment_Courses GROUP BY course_id",
    "predicted_parse_explanation": [
      "find each value of course id in student enrolment courses table along with the maximum student course id of the corresponding rows to each value"
    ],
    "template_feedback": "use transcript contents table in place of student enrolment courses table . find for each value of transcript contents 's student course id in place of course id . find number of rows and transcript contents 's student course id in place of maximum student enrolment courses 's student course id and course id . find the result with the largest number of rows .",
    "primary_span": [
      [
        0,
        3
      ],
      [
        12,
        22
      ],
      [
        29,
        39
      ],
      [
        55,
        64
      ]
    ],
    "secondary_span": [
      [
        4,
        11
      ],
      [
        23,
        28
      ],
      [
        40,
        54
      ]
    ],
    "edits": [
      "number of rows",
      "student course id",
      "maximum student course id",
      "course id",
      "transcript contents",
      "student enrolment courses",
      "student course id",
      "course id",
      "number of rows",
      "descending",
      "1"
    ],
    "edits_original": "< select > add number of rows </ select > < select > add student course id </ select > < select > remove maximum student course id </ select > < select > remove course id </ select > < from > add transcript contents </ from > < from > remove student enrolment courses </ from > < groupBy > add student course id </ groupBy > < groupBy > remove course id </ groupBy > < orderBy > add number of rows </ orderBy > < orderBy > add descending </ orderBy > < limit > add 1 </ limit >"
  },
  {
    "db_id": "flight_2",
    "feedback": "You need to interchange flights table for airlines table in step 1.",
    "question": "Which airline has most number of flights?",
    "gold_parse": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1",
    "beam": [
      [
        "SELECT Airline FROM airlines GROUP BY Airline ORDER BY Count ( * ) Desc LIMIT value",
        -0.015684127807617188
      ],
      [
        "SELECT Airline FROM airlines GROUP BY Abbreviation ORDER BY Count ( * ) Desc LIMIT value",
        -4.170345306396484
      ],
      [
        "SELECT Airline FROM airlines GROUP BY Airline ORDER BY Count ( * ) Asc LIMIT value",
        -9.265335083007812
      ],
      [
        "SELECT Airline FROM airlines GROUP BY Airline ORDER BY Count ( * ) Desc",
        -12.379640579223633
      ],
      [
        "SELECT Airline FROM airlines GROUP BY Abbreviation ORDER BY Count ( * ) Asc LIMIT value",
        -13.049072265625
      ],
      [
        "SELECT Airline FROM airlines GROUP BY uid ORDER BY Count ( * ) Desc LIMIT value",
        -13.2946195602417
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 GROUP BY T2.Airline ORDER BY Count ( * ) Desc LIMIT value",
        -13.43114948272705
      ],
      [
        "SELECT Airline FROM airlines GROUP BY Airline",
        -13.79532241821289
      ],
      [
        "SELECT Airline , Abbreviation FROM airlines GROUP BY Airline ORDER BY Count ( * ) Desc LIMIT value",
        -14.19135332107544
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 GROUP BY T2.FlightNo ORDER BY Count ( * ) Desc LIMIT value",
        -14.468985557556152
      ],
      [
        "SELECT DISTINCT Airline FROM airlines GROUP BY Airline ORDER BY Count ( * ) Desc LIMIT value",
        -14.567421913146973
      ],
      [
        "SELECT Airline FROM airlines ORDER BY Airline Desc LIMIT value",
        -14.655847549438477
      ],
      [
        "SELECT Airline FROM airlines ORDER BY Abbreviation Desc LIMIT value",
        -14.951091289520264
      ],
      [
        "SELECT Airline FROM airlines GROUP BY Airline HAVING Count ( * ) = value",
        -15.027966499328613
      ],
      [
        "SELECT Airline FROM airlines GROUP BY Country ORDER BY Count ( * ) Desc LIMIT value",
        -15.079294204711914
      ],
      [
        "SELECT DISTINCT Airline FROM airlines GROUP BY Airline ORDER BY Count ( * ) Desc LIMIT value",
        -15.523283004760742
      ],
      [
        "SELECT Airline FROM airlines GROUP BY Airline ORDER BY Sum ( * ) Desc LIMIT value",
        -15.746233463287354
      ],
      [
        "SELECT Airline FROM airlines GROUP BY Airline ORDER BY Avg ( * ) Desc LIMIT value",
        -15.747976303100586
      ],
      [
        "SELECT Airline , Abbreviation FROM airlines GROUP BY Abbreviation ORDER BY Count ( * ) Desc LIMIT value",
        -15.91222620010376
      ],
      [
        "SELECT Airline FROM airlines GROUP BY Airline ORDER BY Count ( DISTINCT * ) Desc LIMIT value",
        -16.1131010055542
      ]
    ],
    "predicted_parse_with_values": "SELECT Airline FROM airlines GROUP BY Airline ORDER BY Count ( * ) Desc LIMIT 1",
    "predicted_parse": "SELECT Airline FROM airlines GROUP BY Airline ORDER BY Count ( * ) Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of airline name in airlines table",
      "Step 2: find the airline name in airlines table with largest value in the results of step 1"
    ],
    "template_feedback": "in step 1 , additionally use the information from the flights table besides the airlines table .",
    "primary_span": [
      [
        4,
        11
      ]
    ],
    "secondary_span": [
      [
        12,
        16
      ]
    ],
    "edits": [
      "flights"
    ],
    "edits_original": "< from > add flights </ from >"
  },
  {
    "db_id": "employee_hire_evaluation",
    "feedback": "Replace hiring's shop id with shop's name and find corresponding rows in hiring table .",
    "question": "Find the number of employees hired in each shop; show the shop name as well.",
    "gold_parse": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name",
    "beam": [
      [
        "SELECT Count ( * ) , T1.Name FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T2.Shop_ID",
        -0.16100406646728516
      ],
      [
        "SELECT Count ( * ) , T1.Manager_name FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T2.Shop_ID",
        -2.536149024963379
      ],
      [
        "SELECT Count ( * ) , Shop_ID FROM hiring GROUP BY Shop_ID",
        -2.9474380016326904
      ],
      [
        "SELECT Count ( * ) , T1.Shop_ID FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T2.Shop_ID",
        -5.044516086578369
      ],
      [
        "SELECT Count ( * ) , Name FROM shop GROUP BY Shop_ID",
        -5.137084007263184
      ],
      [
        "SELECT Count ( * ) , T1.Name FROM employee AS T1 JOIN hiring AS T2 ON T1.Employee_ID = T2.Employee_ID GROUP BY T2.Shop_ID",
        -6.309679985046387
      ],
      [
        "SELECT T1.Name , Count ( * ) FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T2.Shop_ID",
        -7.079829216003418
      ],
      [
        "SELECT Count ( * ) , Manager_name FROM shop GROUP BY Shop_ID",
        -7.311574935913086
      ],
      [
        "SELECT Count ( * ) , T2.Shop_ID FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T1.Shop_ID",
        -7.439719915390015
      ],
      [
        "SELECT Count ( * ) , T1.Number_products FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T2.Shop_ID",
        -7.864228248596191
      ],
      [
        "SELECT Count ( * ) , T1.Location FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T2.Shop_ID",
        -8.971524238586426
      ],
      [
        "SELECT Count ( * ) , Shop_ID FROM shop GROUP BY Shop_ID",
        -9.548750400543213
      ],
      [
        "SELECT Count ( * ) , T1.District FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T2.Shop_ID",
        -9.946950912475586
      ],
      [
        "SELECT T1.Manager_name , Count ( * ) FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T2.Shop_ID",
        -9.98176383972168
      ],
      [
        "SELECT Count ( * ) , * FROM hiring GROUP BY Shop_ID",
        -10.475563049316406
      ],
      [
        "SELECT Count ( * ) FROM hiring GROUP BY Shop_ID",
        -10.78079891204834
      ],
      [
        "SELECT Count ( * ) , Is_full_time FROM hiring GROUP BY Shop_ID",
        -11.213228225708008
      ],
      [
        "SELECT Count ( * ) , T1.Name FROM employee AS T1 JOIN shop AS T2 JOIN hiring AS T3 ON T1.Employee_ID = T3.Employee_ID AND T3.Shop_ID = T2.Shop_ID GROUP BY T2.Shop_ID",
        -11.236806869506836
      ],
      [
        "SELECT Count ( * ) , T1.Name , Count ( * ) FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T2.Shop_ID",
        -11.897219181060791
      ],
      [
        "SELECT Count ( * ) FROM employee",
        -12.940725326538086
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) , T1.Name FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T2.Shop_ID",
    "predicted_parse": "SELECT Count ( * ) , T1.Name FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T2.Shop_ID",
    "predicted_parse_explanation": [
      "Step 1: for each row in shop table , find the corresponding rows in hiring table",
      "Step 2: find each value of hiring 's shop id of the results of step 1 along with the number of the corresponding rows to each value"
    ],
    "template_feedback": "in step 2 , find for each value of name in place of hiring 's shop id .",
    "primary_span": [
      [
        4,
        9
      ]
    ],
    "secondary_span": [
      [
        10,
        17
      ]
    ],
    "edits": [
      "name",
      "shop id"
    ],
    "edits_original": "< groupBy > add name </ groupBy > < groupBy > remove shop id </ groupBy >"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "feedback": "Find template id of templates table for which template type description equals Presentation .",
    "question": "Return the ids corresponding to templates with the description 'Presentation'.",
    "gold_parse": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"",
    "beam": [
      [
        "SELECT Document_ID FROM Documents WHERE Document_Description = value",
        -0.031890869140625
      ],
      [
        "SELECT T3.Document_ID FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID WHERE T1.Template_Type_Description = value",
        -4.064532279968262
      ],
      [
        "SELECT T2.Document_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Description = value",
        -4.269331932067871
      ],
      [
        "SELECT T4.Document_ID FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID JOIN Paragraphs AS T4 ON T3.Document_ID = T4.Document_ID WHERE T1.Template_Type_Description = value",
        -8.496163368225098
      ],
      [
        "SELECT Template_ID FROM Documents WHERE Document_Description = value",
        -11.671744346618652
      ],
      [
        "SELECT Document_ID FROM Documents WHERE Document_Name = value",
        -11.782336235046387
      ],
      [
        "SELECT T2.Document_ID FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T1.Template_Details = value",
        -12.925436019897461
      ],
      [
        "SELECT T2.Paragraph_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Description = value",
        -12.947907447814941
      ],
      [
        "SELECT Document_ID FROM Documents WHERE Document_Description LIKE value",
        -14.4306001663208
      ],
      [
        "SELECT Document_ID , Template_ID FROM Documents WHERE Document_Description = value",
        -14.575765132904053
      ],
      [
        "SELECT T1.Template_ID FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Document_Description = value",
        -14.703103065490723
      ],
      [
        "SELECT DISTINCT Document_ID FROM Documents WHERE Document_Description = value",
        -15.163030624389648
      ],
      [
        "SELECT T2.Document_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Name = value",
        -16.175440788269043
      ],
      [
        "SELECT T3.Template_ID FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID WHERE T1.Template_Type_Description = value",
        -16.180438995361328
      ],
      [
        "SELECT Count ( Document_ID ) FROM Documents WHERE Document_Description = value",
        -16.339879989624023
      ],
      [
        "SELECT DISTINCT Document_ID FROM Documents WHERE Document_Description = value",
        -16.64859390258789
      ],
      [
        "SELECT Document_ID FROM Documents WHERE Document_Description = value",
        -16.672561645507812
      ],
      [
        "SELECT Document_ID FROM Documents WHERE Document_Description = value AND Document_Description = value",
        -16.716254234313965
      ],
      [
        "SELECT Document_ID , Document_ID FROM Documents WHERE Document_Description = value",
        -16.724181175231934
      ],
      [
        "SELECT Document_ID FROM Documents",
        -18.435039520263672
      ]
    ],
    "predicted_parse_with_values": "SELECT Document_ID FROM Documents WHERE Document_Description = \"Presentation\"",
    "predicted_parse": "SELECT Document_ID FROM Documents WHERE Document_Description = value",
    "predicted_parse_explanation": [
      "find the document id in documents table whose document description equals Presentation"
    ],
    "template_feedback": "use templates table and reference template types table in place of documents table . consider the template type description equals Presentation conditions in place of the document description equals Presentation conditions . find templates 's template id in place of document id .",
    "primary_span": [
      [
        0,
        7
      ],
      [
        14,
        21
      ],
      [
        32,
        36
      ]
    ],
    "secondary_span": [
      [
        8,
        13
      ],
      [
        22,
        31
      ],
      [
        37,
        42
      ]
    ],
    "edits": [
      "template id",
      "document id",
      "reference template types",
      "templates",
      "documents",
      "template type description equals \"Presentation\"",
      "document description equals \"Presentation\""
    ],
    "edits_original": "< select > add template id </ select > < select > remove document id </ select > < from > add reference template types </ from > < from > add templates </ from > < from > remove documents </ from > < where > add template type description equals \" Presentation \" </ where > < where > remove document description equals \" Presentation \" </ where >"
  },
  {
    "db_id": "wta_1",
    "feedback": "In step 2, You should supplant hand rather than id of loser.",
    "question": "Find the number of players for each hand type.",
    "gold_parse": "SELECT count(*) ,  hand FROM players GROUP BY hand",
    "beam": [
      [
        "SELECT T1.hand , Count ( * ) FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.loser_id",
        -1.2307432889938354
      ],
      [
        "SELECT Count ( * ) , T1.hand FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.loser_id",
        -1.9944095015525818
      ],
      [
        "SELECT loser_ioc , Count ( * ) FROM matches GROUP BY loser_id",
        -2.445551872253418
      ],
      [
        "SELECT loser_name , Count ( * ) FROM matches GROUP BY loser_id",
        -2.7575576305389404
      ],
      [
        "SELECT loser_id , Count ( * ) FROM matches GROUP BY loser_id",
        -3.058903694152832
      ],
      [
        "SELECT loser_seed , Count ( * ) FROM matches GROUP BY loser_id",
        -3.127683162689209
      ],
      [
        "SELECT surface , Count ( * ) FROM matches GROUP BY loser_id",
        -3.20900297164917
      ],
      [
        "SELECT loser_hand , Count ( * ) FROM matches GROUP BY loser_id",
        -3.2708983421325684
      ],
      [
        "SELECT T1.first_name , Count ( * ) FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.loser_id",
        -3.293999195098877
      ],
      [
        "SELECT winner_name , Count ( * ) FROM matches GROUP BY loser_id",
        -4.139007568359375
      ],
      [
        "SELECT Count ( * ) , loser_name FROM matches GROUP BY loser_id",
        -4.216287612915039
      ],
      [
        "SELECT round , Count ( * ) FROM matches GROUP BY loser_id",
        -4.223236799240112
      ],
      [
        "SELECT Count ( * ) , loser_id FROM matches GROUP BY loser_id",
        -4.288818120956421
      ],
      [
        "SELECT year , Count ( * ) FROM matches GROUP BY loser_id",
        -4.459252834320068
      ],
      [
        "SELECT loser_entry , Count ( * ) FROM matches GROUP BY loser_id",
        -4.645522117614746
      ],
      [
        "SELECT tourney_name , Count ( * ) FROM matches GROUP BY loser_id",
        -4.755753040313721
      ],
      [
        "SELECT tourney_id , Count ( * ) FROM matches GROUP BY loser_id",
        -4.866830348968506
      ],
      [
        "SELECT winner_ioc , Count ( * ) FROM matches GROUP BY loser_id",
        -5.12678861618042
      ],
      [
        "SELECT Count ( * ) , loser_hand FROM matches GROUP BY loser_id",
        -5.3298094272613525
      ],
      [
        "SELECT Count ( * ) , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.loser_id",
        -5.332536935806274
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.hand , Count ( * ) FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.loser_id",
    "predicted_parse": "SELECT T1.hand , Count ( * ) FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.loser_id",
    "predicted_parse_explanation": [
      "Step 1: for each row in players table , find the corresponding rows in matches table",
      "Step 2: find each value of loser id of the results of step 1 along with the number of the corresponding rows to each value"
    ],
    "template_feedback": "in step 1 , do not use the matches table . in step 2 , find for each value of hand in place of loser id .",
    "primary_span": [
      [
        4,
        10
      ],
      [
        15,
        20
      ]
    ],
    "secondary_span": [
      [
        4,
        10
      ],
      [
        21,
        26
      ]
    ],
    "edits": [
      "matches",
      "hand",
      "loser id"
    ],
    "edits_original": "< from > remove matches </ from > < groupBy > add hand </ groupBy > < groupBy > remove loser id </ groupBy >"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "feedback": "It should be number of corresponding rows for each template type code in documents table .",
    "question": "What are the different template type codes, and how many documents use each type?",
    "gold_parse": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code",
    "beam": [
      [
        "SELECT Template_Type_Code , Count ( * ) FROM Templates GROUP BY Template_Type_Code",
        -0.00063323974609375
      ],
      [
        "SELECT Count ( * ) , Template_Type_Code FROM Templates GROUP BY Template_Type_Code",
        -7.491246223449707
      ],
      [
        "SELECT T1.Template_Type_Code , Count ( * ) FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code GROUP BY T2.Template_Type_Code",
        -9.88133430480957
      ],
      [
        "SELECT Template_Type_Code , Count ( * ) FROM Templates",
        -11.96083927154541
      ],
      [
        "SELECT Template_Type_Code , Count ( * ) , Template_Type_Code FROM Templates GROUP BY Template_Type_Code",
        -12.297427654266357
      ],
      [
        "SELECT Template_Type_Code , Sum ( * ) FROM Templates GROUP BY Template_Type_Code",
        -13.318025529384613
      ],
      [
        "SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code",
        -13.47438907623291
      ],
      [
        "SELECT T1.Template_Type_Code , Count ( DISTINCT T2.Document_ID ) FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T1.Template_Type_Code",
        -14.037833213806152
      ],
      [
        "SELECT T1.Template_Type_Code , Sum ( T2.Document_ID ) FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T1.Template_Type_Code",
        -14.209470510482788
      ],
      [
        "SELECT T1.Template_Type_Code , Count ( DISTINCT T3.Document_ID ) FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID JOIN Paragraphs AS T3 ON T2.Document_ID = T3.Document_ID GROUP BY T1.Template_Type_Code",
        -14.427250862121582
      ],
      [
        "SELECT T2.Template_Type_Code , Count ( * ) FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code GROUP BY T1.Template_Type_Code",
        -14.631668090820312
      ],
      [
        "SELECT Template_Type_Code , Count ( * ) FROM Templates GROUP BY Template_Type_Code ORDER BY Count ( * ) Desc LIMIT value",
        -14.769857406616211
      ],
      [
        "SELECT T1.Template_Type_Code , Sum ( DISTINCT T3.Document_ID ) FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID JOIN Paragraphs AS T3 ON T2.Document_ID = T3.Document_ID GROUP BY T1.Template_Type_Code",
        -14.930944204330444
      ],
      [
        "SELECT Template_Type_Code , Sum ( Version_Number ) FROM Templates GROUP BY Template_Type_Code",
        -14.968274593353271
      ],
      [
        "SELECT T1.Template_Type_Code , Count ( DISTINCT T3.Paragraph_ID ) FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID JOIN Paragraphs AS T3 ON T2.Document_ID = T3.Document_ID GROUP BY T1.Template_Type_Code",
        -14.986407279968262
      ],
      [
        "SELECT Template_Type_Code , Count ( * ) FROM Templates GROUP BY Template_Type_Code HAVING Count ( * ) > = value",
        -15.18431282043457
      ],
      [
        "SELECT T1.Template_Type_Code , Sum ( DISTINCT T3.Paragraph_ID ) FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID JOIN Paragraphs AS T3 ON T2.Document_ID = T3.Document_ID GROUP BY T1.Template_Type_Code",
        -15.360796451568604
      ],
      [
        "SELECT Template_Type_Code , Avg ( * ) FROM Templates GROUP BY Template_Type_Code",
        -15.557588815689087
      ],
      [
        "SELECT Template_Type_Code , Count ( * ) FROM Templates GROUP BY Template_Type_Code HAVING Count ( * ) = value",
        -15.746269226074219
      ],
      [
        "SELECT DISTINCT Template_Type_Code , Count ( * ) FROM Templates GROUP BY Template_Type_Code",
        -15.843095779418945
      ]
    ],
    "predicted_parse_with_values": "SELECT Template_Type_Code , Count ( * ) FROM Templates GROUP BY Template_Type_Code",
    "predicted_parse": "SELECT Template_Type_Code , Count ( * ) FROM Templates GROUP BY Template_Type_Code",
    "predicted_parse_explanation": [
      "find each value of template type code in templates table along with the number of the corresponding rows to each value"
    ],
    "template_feedback": "additionally use the information from the documents table besides the templates table .",
    "primary_span": [
      [
        0,
        7
      ]
    ],
    "secondary_span": [
      [
        8,
        12
      ]
    ],
    "edits": [
      "documents"
    ],
    "edits_original": "< from > add documents </ from >"
  },
  {
    "db_id": "student_transcripts_tracking",
    "feedback": "you should use course Id from student enrolment courses table in step 1.",
    "question": "What is the name of the course with the most students enrolled?",
    "gold_parse": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1",
    "beam": [
      [
        "SELECT course_name FROM Courses GROUP BY course_name ORDER BY Count ( * ) Desc LIMIT value",
        -2.384185791015625e-05
      ],
      [
        "SELECT course_name FROM Courses GROUP BY course_id ORDER BY Count ( * ) Desc LIMIT value",
        -11.692488670349121
      ],
      [
        "SELECT course_name FROM Courses GROUP BY course_name ORDER BY Count ( * ) Desc",
        -12.379347801208496
      ],
      [
        "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id ORDER BY Count ( * ) Desc LIMIT value",
        -13.314269065856934
      ],
      [
        "SELECT course_name FROM Courses GROUP BY course_name",
        -13.410811424255371
      ],
      [
        "SELECT course_name FROM Courses ORDER BY course_name Desc LIMIT value",
        -13.538057684898376
      ],
      [
        "SELECT course_name FROM Courses GROUP BY course_name ORDER BY Count ( * ) Asc LIMIT value",
        -14.075992584228516
      ],
      [
        "SELECT DISTINCT course_name FROM Courses GROUP BY course_name ORDER BY Count ( * ) Desc LIMIT value",
        -14.226727485656738
      ],
      [
        "SELECT course_name FROM Courses GROUP BY course_name HAVING Count ( * ) < value ORDER BY Count ( * ) Desc LIMIT value",
        -14.254181861877441
      ],
      [
        "SELECT course_name , course_name FROM Courses GROUP BY course_name ORDER BY Count ( * ) Desc LIMIT value",
        -14.323742389678955
      ],
      [
        "SELECT course_name FROM Courses GROUP BY course_name ORDER BY Sum ( * ) Desc LIMIT value",
        -15.198190212249756
      ],
      [
        "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id ORDER BY T2.student_enrolment_id Desc LIMIT value",
        -15.349891424179077
      ],
      [
        "SELECT course_name FROM Courses GROUP BY course_name ORDER BY Count ( DISTINCT * ) Desc LIMIT value",
        -15.880199432373047
      ],
      [
        "SELECT course_name FROM Courses GROUP BY course_name ORDER BY Avg ( * ) Desc LIMIT value",
        -15.936107635498047
      ],
      [
        "SELECT DISTINCT course_name FROM Courses GROUP BY course_name ORDER BY Count ( * ) Desc LIMIT value",
        -16.216708183288574
      ],
      [
        "SELECT course_name , Count ( * ) FROM Courses GROUP BY course_name ORDER BY Count ( * ) Desc LIMIT value",
        -16.307059288024902
      ],
      [
        "SELECT course_name FROM Courses GROUP BY course_name HAVING Count ( * ) = value",
        -16.35360050201416
      ],
      [
        "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id ORDER BY T2.student_course_id Desc LIMIT value",
        -16.783140182495117
      ],
      [
        "SELECT course_name FROM Courses ORDER BY * Desc LIMIT value",
        -17.16908884048462
      ],
      [
        "SELECT course_name FROM Courses",
        -18.75843906402588
      ]
    ],
    "predicted_parse_with_values": "SELECT course_name FROM Courses GROUP BY course_name ORDER BY Count ( * ) Desc LIMIT 1",
    "predicted_parse": "SELECT course_name FROM Courses GROUP BY course_name ORDER BY Count ( * ) Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of course name in courses table",
      "Step 2: find the course name in courses table with largest value in the results of step 1"
    ],
    "template_feedback": "in step 1 , additionally use the information from the student enrolment courses table besides the courses table .",
    "primary_span": [
      [
        4,
        13
      ]
    ],
    "secondary_span": [
      [
        14,
        18
      ]
    ],
    "edits": [
      "student enrolment courses"
    ],
    "edits_original": "< from > add student enrolment courses </ from >"
  },
  {
    "db_id": "network_1",
    "feedback": "Likes table should be used as replacement of friend table in 1st step.",
    "question": "What are the names of students who have 2 or more likes?",
    "gold_parse": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2",
    "beam": [
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) > = value",
        -0.009253501892089844
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id GROUP BY T2.student_id HAVING Count ( * ) > = value",
        -4.70081901550293
      ],
      [
        "SELECT name FROM Highschooler GROUP BY ID HAVING Count ( * ) > = value",
        -9.798749923706055
      ],
      [
        "SELECT name FROM Highschooler WHERE grade > = value",
        -10.541345596313477
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id GROUP BY T2.liked_id HAVING Count ( * ) > = value",
        -11.51244068145752
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.friend_id HAVING Count ( * ) > = value",
        -12.454695701599121
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) < = value",
        -12.528570175170898
      ],
      [
        "SELECT DISTINCT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) > = value",
        -13.7694673538208
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) = value OR Count ( * ) = value",
        -13.810919761657715
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 WHERE T1.ID NOT IN ( SELECT T2.student_id FROM Likes AS T2 )",
        -14.770208358764648
      ],
      [
        "SELECT name FROM Highschooler WHERE grade = value OR grade = value",
        -14.979933261871338
      ],
      [
        "SELECT name FROM Highschooler EXCEPT SELECT name FROM Highschooler WHERE grade > = value",
        -15.061663627624512
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id WHERE T1.grade > = value GROUP BY T2.student_id HAVING Count ( * ) > = value",
        -15.094269752502441
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) > value",
        -15.11439323425293
      ],
      [
        "SELECT name FROM Highschooler",
        -15.265399932861328
      ],
      [
        "SELECT name FROM Highschooler EXCEPT SELECT name FROM Highschooler WHERE grade > value",
        -15.297656059265137
      ],
      [
        "SELECT DISTINCT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) > = value",
        -15.423970222473145
      ],
      [
        "SELECT T1.name , T1.grade FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) > = value",
        -15.754620552062988
      ],
      [
        "SELECT name FROM Highschooler WHERE Count ( * ) > = value",
        -15.933019638061523
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id GROUP BY T2.student_id HAVING Count ( * ) < = value",
        -16.130879402160645
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) > = 2",
    "predicted_parse": "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) > = value",
    "predicted_parse_explanation": [
      "Step 1: for each row in high schooler table , find the corresponding rows in friend table",
      "Step 2: find the number of rows of each value of student id of the results of step 1",
      "Step 3: find the name of the results of step 1 whose corresponding value in step 2 is greater than or equals 2"
    ],
    "template_feedback": "in step 1 , use likes table in place of friend table",
    "primary_span": [
      [
        4,
        6
      ]
    ],
    "secondary_span": [
      [
        7,
        11
      ]
    ],
    "edits": [
      "likes",
      "friend"
    ],
    "edits_original": "< from > add likes </ from > < from > remove friend </ from >"
  },
  {
    "db_id": "world_1",
    "feedback": "Exchange name of the country table with language of countrylanguage table in step 2. In step 1, equivalence to countrylanguage also.",
    "question": "Find the city with the largest population that uses English.",
    "gold_parse": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1",
    "beam": [
      [
        "SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Name = value ORDER BY T1.Population Desc LIMIT value",
        -0.2910609245300293
      ],
      [
        "SELECT Name FROM city WHERE Population = ( SELECT Max ( Population ) FROM city ) ORDER BY Population Asc LIMIT value",
        -1.956575870513916
      ],
      [
        "SELECT Name FROM city WHERE Population = ( SELECT Max ( Population ) FROM city ) ORDER BY Population Desc LIMIT value",
        -2.7377848625183105
      ],
      [
        "SELECT Name FROM city WHERE Name = value ORDER BY Population Desc LIMIT value",
        -3.8648760318756104
      ],
      [
        "SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code JOIN countrylanguage AS T3 ON T2.Code = T3.CountryCode WHERE T3.Language = value ORDER BY T1.Population Desc LIMIT value",
        -5.104604721069336
      ],
      [
        "SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.LocalName = value ORDER BY T1.Population Desc LIMIT value",
        -5.109265327453613
      ],
      [
        "SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.LifeExpectancy = ( SELECT Max ( T1.Population ) FROM city AS T1 ) ORDER BY T1.Population Asc LIMIT value",
        -5.81334114074707
      ],
      [
        "SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Population = ( SELECT Max ( T1.Population ) FROM city AS T1 ) ORDER BY T1.Population Asc LIMIT value",
        -5.896968841552734
      ],
      [
        "SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.LifeExpectancy = ( SELECT Max ( T1.Population ) FROM city AS T1 ) ORDER BY T1.Population Desc LIMIT value",
        -6.583608627319336
      ],
      [
        "SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Population = ( SELECT Max ( T1.Population ) FROM city AS T1 ) ORDER BY T1.Population Desc LIMIT value",
        -6.662217140197754
      ],
      [
        "SELECT T1.Name FROM city AS T1 WHERE T1.Population = ( SELECT Max ( T1.Population ) FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Name = value ) ORDER BY T1.Population Desc LIMIT value",
        -6.7014031410217285
      ],
      [
        "SELECT T1.Name FROM city AS T1 WHERE T1.Population = ( SELECT Max ( T2.LifeExpectancy ) FROM country AS T2 ) ORDER BY T1.Population Asc LIMIT value",
        -7.70846700668335
      ],
      [
        "SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.HeadOfState = value ORDER BY T1.Population Desc LIMIT value",
        -7.82826566696167
      ],
      [
        "SELECT Name FROM city WHERE District = value ORDER BY Population Desc LIMIT value",
        -8.391739845275879
      ],
      [
        "SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Region = value ORDER BY T1.Population Desc LIMIT value",
        -8.848075866699219
      ],
      [
        "SELECT Name FROM city ORDER BY Population Desc LIMIT value",
        -9.338578224182129
      ],
      [
        "SELECT T1.District FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Name = value ORDER BY T1.Population Desc LIMIT value",
        -9.418006420135498
      ],
      [
        "SELECT T1.Name FROM city AS T1 JOIN sqlite_sequence AS T2 WHERE T2.name = value ORDER BY T1.Population Desc LIMIT value",
        -9.487969398498535
      ],
      [
        "SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = value ORDER BY T1.Population Desc LIMIT value",
        -10.066986083984375
      ],
      [
        "SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Name = value ORDER BY T2.LifeExpectancy Desc LIMIT value",
        -10.204835414886475
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Name = \"English\" ORDER BY T1.Population Desc LIMIT 1",
    "predicted_parse": "SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Name = value ORDER BY T1.Population Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: for each row in city table , find the corresponding rows in country table",
      "Step 2: find the city 's name of the results of step 1 whose country 's name equals English with largest value of city 's population"
    ],
    "template_feedback": "in step 1 , use countrylanguage table in place of country table in step 2 , consider the language equals English conditions in place of the country 's name equals English conditions . additionally find city 's population .",
    "primary_span": [
      [
        4,
        6
      ],
      [
        16,
        21
      ],
      [
        33,
        38
      ]
    ],
    "secondary_span": [
      [
        7,
        11
      ],
      [
        22,
        32
      ]
    ],
    "edits": [
      "population",
      "countrylanguage",
      "country",
      "language equals \"English\"",
      "name equals \"English\""
    ],
    "edits_original": "< select > add population </ select > < from > add countrylanguage </ from > < from > remove country </ from > < where > add language equals \" English \" </ where > < where > remove name equals \" English \" </ where >"
  },
  {
    "db_id": "flight_2",
    "feedback": "Exchange 'airports table whose Country' with 'flights table whose DestAirport'.",
    "question": "How many flights have destination ATO?",
    "gold_parse": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"",
    "beam": [
      [
        "SELECT Count ( * ) FROM airports WHERE Country = value",
        -0.6936893463134766
      ],
      [
        "SELECT Count ( * ) FROM airlines WHERE Airline = value",
        -0.9269933700561523
      ],
      [
        "SELECT Count ( * ) FROM airlines WHERE Country = value",
        -2.643270492553711
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE CountryAbbrev = value",
        -3.875117301940918
      ],
      [
        "SELECT Count ( * ) FROM airlines",
        -5.170103073120117
      ],
      [
        "SELECT Count ( * ) FROM airlines WHERE Abbreviation = value",
        -5.175282955169678
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE AirportName = value",
        -6.681346893310547
      ],
      [
        "SELECT Count ( * ) FROM flights WHERE FlightNo = value",
        -10.345636367797852
      ],
      [
        "SELECT Count ( * ) FROM flights WHERE Airline = value",
        -11.114412307739258
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE City = value",
        -12.554376602172852
      ],
      [
        "SELECT Count ( * ) FROM flights WHERE DestAirport = value",
        -13.175320625305176
      ],
      [
        "SELECT Count ( * ) FROM airlines WHERE uid = value",
        -14.414484977722168
      ],
      [
        "SELECT Count ( * ) FROM airlines WHERE Airline LIKE value",
        -15.040000915527344
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM airports WHERE Country = value",
        -15.204169273376465
      ],
      [
        "SELECT Count ( * ) FROM airlines EXCEPT SELECT * FROM airlines WHERE Airline = value",
        -15.391210556030273
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM airlines WHERE Airline = value",
        -15.508804321289062
      ],
      [
        "SELECT Avg ( * ) FROM airports WHERE Country = value",
        -15.512189984321594
      ],
      [
        "SELECT Avg ( * ) FROM airlines WHERE Airline = value",
        -15.695097088813782
      ],
      [
        "SELECT Count ( * ) FROM airlines ORDER BY Airline Desc",
        -15.69974684715271
      ],
      [
        "SELECT Count ( * ) , T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Airline = value",
        -16.21349447965622
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM airports WHERE Country = \"ATO\"",
    "predicted_parse": "SELECT Count ( * ) FROM airports WHERE Country = value",
    "predicted_parse_explanation": [
      "find the number of rows in airports table whose country equals ATO"
    ],
    "template_feedback": "use flights table in place of airports table . consider the destination airport equals ATO conditions in place of the country equals ATO conditions .",
    "primary_span": [
      [
        0,
        2
      ],
      [
        9,
        15
      ]
    ],
    "secondary_span": [
      [
        3,
        8
      ],
      [
        16,
        24
      ]
    ],
    "edits": [
      "flights",
      "airports",
      "destination airport equals \"ATO\"",
      "country equals \"ATO\""
    ],
    "edits_original": "< from > add flights </ from > < from > remove airports </ from > < where > add destination airport equals \" ATO \" </ where > < where > remove country equals \" ATO \" </ where >"
  },
  {
    "db_id": "student_transcripts_tracking",
    "feedback": "You need to put  other pupils information.",
    "question": "List all the student details in reversed lexicographical order.",
    "gold_parse": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC",
    "beam": [
      [
        "SELECT * FROM Students ORDER BY date_left Desc",
        -1.4966999292373657
      ],
      [
        "SELECT * FROM Students ORDER BY first_name Desc",
        -1.5683714151382446
      ],
      [
        "SELECT * FROM Students ORDER BY ssn Desc",
        -1.9569605588912964
      ],
      [
        "SELECT * FROM Student_Enrolment ORDER BY other_details Desc",
        -1.9836393594741821
      ],
      [
        "SELECT * FROM Students ORDER BY date_first_registered Desc",
        -2.245650291442871
      ],
      [
        "SELECT * FROM Students ORDER BY other_student_details Desc",
        -3.815732002258301
      ],
      [
        "SELECT * FROM Students ORDER BY email_address Desc",
        -3.944885730743408
      ],
      [
        "SELECT * FROM Students ORDER BY last_name Desc",
        -4.023731231689453
      ],
      [
        "SELECT * FROM Student_Enrolment ORDER BY student_id Desc",
        -4.369917869567871
      ],
      [
        "SELECT * FROM Student_Enrolment ORDER BY other_details Asc",
        -4.649261832237244
      ],
      [
        "SELECT * FROM Transcripts ORDER BY transcript_date Desc",
        -4.661488056182861
      ],
      [
        "SELECT * FROM Students ORDER BY middle_name Desc",
        -4.7104644775390625
      ],
      [
        "SELECT * FROM Students ORDER BY first_name Asc",
        -4.957037806510925
      ],
      [
        "SELECT * FROM Semesters ORDER BY other_details Desc",
        -5.0919060707092285
      ],
      [
        "SELECT * FROM Student_Enrolment ORDER BY student_enrolment_id Desc",
        -5.203488349914551
      ],
      [
        "SELECT * FROM Students ORDER BY date_left Asc",
        -5.344687819480896
      ],
      [
        "SELECT * FROM Students ORDER BY student_id Desc",
        -5.394789695739746
      ],
      [
        "SELECT * FROM Semesters ORDER BY semester_name Desc",
        -5.556459426879883
      ],
      [
        "SELECT * FROM Addresses ORDER BY * Desc",
        -5.5914692878723145
      ],
      [
        "SELECT * FROM Semesters ORDER BY semester_description Desc",
        -5.612504482269287
      ]
    ],
    "predicted_parse_with_values": "SELECT * FROM Students ORDER BY date_left Desc",
    "predicted_parse": "SELECT * FROM Students ORDER BY date_left Desc",
    "predicted_parse_explanation": [
      "find the rows in students table ordered descending by date left"
    ],
    "template_feedback": "find other student details in place of rows . order the results by other student details in place of date left .",
    "primary_span": [
      [
        0,
        3
      ],
      [
        9,
        15
      ]
    ],
    "secondary_span": [
      [
        4,
        8
      ],
      [
        16,
        21
      ]
    ],
    "edits": [
      "other student details",
      "rows",
      "other student details",
      "date left"
    ],
    "edits_original": "< select > add other student details </ select > < select > remove rows </ select > < orderBy > add other student details </ orderBy > < orderBy > remove date left </ orderBy >"
  },
  {
    "db_id": "car_1",
    "feedback": "make sure year should be 1974 and cylinders equivalent with 8.",
    "question": "What is the smallest weight of the car produced with 8 cylinders on 1974?",
    "gold_parse": "SELECT Weight FROM CARS_DATA WHERE Cylinders  =  4 AND YEAR  =  1974 ORDER BY Weight ASC LIMIT 1",
    "beam": [
      [
        "SELECT Min ( Weight ) FROM cars_data WHERE Year = value",
        -0.022150039672851562
      ],
      [
        "SELECT Min ( Weight ) FROM cars_data WHERE Cylinders < value",
        -4.269918441772461
      ],
      [
        "SELECT Weight FROM cars_data WHERE Year = value",
        -5.872053146362305
      ],
      [
        "SELECT Min ( Weight ) FROM cars_data WHERE Year < value",
        -6.450606346130371
      ],
      [
        "SELECT Weight FROM cars_data WHERE Year = value ORDER BY Cylinders Asc LIMIT value",
        -7.328998565673828
      ],
      [
        "SELECT Min ( Weight ) FROM cars_data WHERE Year = value AND Year = value",
        -7.534052848815918
      ],
      [
        "SELECT Weight FROM cars_data WHERE Year = value ORDER BY Cylinders Asc",
        -7.763263702392578
      ],
      [
        "SELECT Min ( Weight ) FROM cars_data WHERE Cylinders < ( SELECT Min ( Cylinders ) FROM cars_data WHERE Year = value )",
        -7.982621192932129
      ],
      [
        "SELECT Weight FROM cars_data WHERE Cylinders < value",
        -8.112634658813477
      ],
      [
        "SELECT Min ( Weight ) FROM cars_data WHERE Cylinders = ( SELECT Min ( Cylinders ) FROM cars_data WHERE Year = value )",
        -8.16540813446045
      ],
      [
        "SELECT Avg ( Weight ) FROM cars_data WHERE Year = value",
        -8.463534355163574
      ],
      [
        "SELECT Min ( Weight ) FROM cars_data WHERE Cylinders = value",
        -8.75720500946045
      ],
      [
        "SELECT Min ( Weight ) FROM cars_data WHERE Year = value ORDER BY Cylinders Asc LIMIT value",
        -9.228682041168213
      ],
      [
        "SELECT Min ( Weight ) FROM cars_data WHERE Cylinders = ( SELECT Min ( Cylinders ) FROM cars_data )",
        -9.254405975341797
      ],
      [
        "SELECT Weight FROM cars_data WHERE Year < value",
        -9.406883239746094
      ],
      [
        "SELECT Min ( Weight ) FROM cars_data WHERE Year = value ORDER BY Cylinders Asc",
        -9.708112239837646
      ],
      [
        "SELECT Min ( Weight ) FROM cars_data WHERE Year = value AND Cylinders = value",
        -11.001052856445312
      ],
      [
        "SELECT Min ( Weight ) FROM cars_data WHERE Year LIKE value",
        -11.42602252960205
      ],
      [
        "SELECT Min ( T3.Weight ) FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T1.Model = value",
        -11.507684707641602
      ],
      [
        "SELECT Max ( Weight ) FROM cars_data WHERE Year = value",
        -11.841279983520508
      ]
    ],
    "predicted_parse_with_values": "SELECT Min ( Weight ) FROM cars_data WHERE Year = 1",
    "predicted_parse": "SELECT Min ( Weight ) FROM cars_data WHERE Year = value",
    "predicted_parse_explanation": [
      "find the minimum weight in cars data table whose year equals 1"
    ],
    "template_feedback": "consider the cylinders equals 4 and year equals 1974 conditions in place of the year equals 1 conditions . find weight in place of minimum weight . find the result with the smallest weight .",
    "primary_span": [
      [
        0,
        9
      ],
      [
        19,
        20
      ],
      [
        27,
        34
      ]
    ],
    "secondary_span": [
      [
        10,
        18
      ],
      [
        21,
        26
      ]
    ],
    "edits": [
      "weight",
      "minimum weight",
      "cylinders equals 4",
      "year equals 1974",
      "year equals 1",
      "weight",
      "1"
    ],
    "edits_original": "< select > add weight </ select > < select > remove minimum weight </ select > < where > add cylinders equals 4 </ where > < where > add year equals 1974 </ where > < where > remove year equals 1 </ where > < orderBy > add weight </ orderBy > < limit > add 1 </ limit >"
  },
  {
    "db_id": "flight_2",
    "feedback": "abbreviation is wrong find source airport instead of that .",
    "question": "Which airlines have a flight with source airport AHD?",
    "gold_parse": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"",
    "beam": [
      [
        "SELECT Airline FROM airlines WHERE Abbreviation = value",
        -0.07497596740722656
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 WHERE T2.FlightNo = value",
        -2.840252637863159
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = value",
        -5.2874298095703125
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 WHERE T2.Airline = value",
        -5.688819885253906
      ],
      [
        "SELECT Airline FROM airlines",
        -6.13942813873291
      ],
      [
        "SELECT Airline FROM airlines WHERE Airline = value",
        -6.795295715332031
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.CountryAbbrev = value",
        -7.3118743896484375
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value",
        -7.441059589385986
      ],
      [
        "SELECT Airline FROM airlines WHERE Country = value",
        -7.8031182289123535
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.City = value",
        -8.488587379455566
      ],
      [
        "SELECT Airline FROM airlines WHERE uid = value",
        -8.53977108001709
      ],
      [
        "SELECT Airline FROM airlines WHERE Abbreviation = Airline",
        -11.355212211608887
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 WHERE T2.SourceAirport = value",
        -11.781344413757324
      ],
      [
        "SELECT Airline FROM airlines WHERE uid = Airline",
        -11.969810009002686
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 WHERE T2.DestAirport = value",
        -12.013272285461426
      ],
      [
        "SELECT Airline FROM airlines GROUP BY Airline HAVING Count ( * ) = value",
        -12.67961835861206
      ],
      [
        "SELECT Airline FROM airlines EXCEPT SELECT Airline FROM airlines",
        -13.28509521484375
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 WHERE T2.Airline = T1.Airline",
        -13.523185729980469
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 WHERE T2.FlightNo = T1.Airline",
        -13.662760972976685
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportCode = value",
        -13.785319328308105
      ]
    ],
    "predicted_parse_with_values": "SELECT Airline FROM airlines WHERE Abbreviation = \"AHD\"",
    "predicted_parse": "SELECT Airline FROM airlines WHERE Abbreviation = value",
    "predicted_parse_explanation": [
      "find the airline name in airlines table whose abbreviation equals AHD"
    ],
    "template_feedback": "additionally use the information from the flights table besides the airlines table . consider the source airport equals AHD conditions in place of the abbreviation equals AHD conditions .",
    "primary_span": [
      [
        0,
        7
      ],
      [
        13,
        19
      ]
    ],
    "secondary_span": [
      [
        8,
        12
      ],
      [
        20,
        28
      ]
    ],
    "edits": [
      "flights",
      "source airport equals \"AHD\"",
      "abbreviation equals \"AHD\""
    ],
    "edits_original": "< from > add flights </ from > < where > add source airport equals \" AHD \" </ where > < where > remove abbreviation equals \" AHD \" </ where >"
  },
  {
    "db_id": "student_transcripts_tracking",
    "feedback": "Provide me the id of transcript and also look for the lowest value of transcript date. ",
    "question": "What is the earliest date of a transcript release, and what details can you tell me?",
    "gold_parse": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
    "beam": [
      [
        "SELECT transcript_date , other_details FROM Transcripts",
        -0.006558418273925781
      ],
      [
        "SELECT Max ( transcript_date ) , other_details FROM Transcripts",
        -5.54708194732666
      ],
      [
        "SELECT T3.transcript_date , T1.other_details FROM Student_Enrolment AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.student_enrolment_id = T2.student_enrolment_id JOIN Transcripts AS T3 JOIN Transcript_Contents AS T4 ON T2.student_course_id = T4.student_course_id AND T4.transcript_id = T3.transcript_id",
        -6.195849418640137
      ],
      [
        "SELECT transcript_date , other_details FROM Transcripts ORDER BY transcript_date Asc LIMIT value",
        -8.898713111877441
      ],
      [
        "SELECT Min ( transcript_date ) , other_details FROM Transcripts",
        -9.215049743652344
      ],
      [
        "SELECT other_details , other_details FROM Transcripts",
        -9.572670936584473
      ],
      [
        "SELECT transcript_date , other_details FROM Transcripts UNION SELECT other_details FROM Transcripts",
        -10.127246856689453
      ],
      [
        "SELECT Max ( other_details ) , other_details FROM Transcripts",
        -10.206330299377441
      ],
      [
        "SELECT T1.date_first_registered , T4.other_details FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id JOIN Student_Enrolment_Courses AS T3 ON T2.student_enrolment_id = T3.student_enrolment_id JOIN Transcripts AS T4 JOIN Transcript_Contents AS T5 ON T3.student_course_id = T5.student_course_id AND T5.transcript_id = T4.transcript_id",
        -10.411347389221191
      ],
      [
        "SELECT T1.other_details , T3.other_details FROM Student_Enrolment AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.student_enrolment_id = T2.student_enrolment_id JOIN Transcripts AS T3 JOIN Transcript_Contents AS T4 ON T2.student_course_id = T4.student_course_id AND T4.transcript_id = T3.transcript_id",
        -10.55280590057373
      ],
      [
        "SELECT * , other_details FROM Transcripts",
        -10.554183006286621
      ],
      [
        "SELECT transcript_date , other_details FROM Transcripts WHERE other_details = value",
        -11.054854393005371
      ],
      [
        "SELECT T1.semester_description , T4.other_details FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id JOIN Student_Enrolment_Courses AS T3 ON T2.student_enrolment_id = T3.student_enrolment_id JOIN Transcripts AS T4 JOIN Transcript_Contents AS T5 ON T3.student_course_id = T5.student_course_id AND T5.transcript_id = T4.transcript_id",
        -11.311917304992676
      ],
      [
        "SELECT T4.transcript_date , T1.other_details FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id JOIN Student_Enrolment_Courses AS T3 ON T2.student_enrolment_id = T3.student_enrolment_id JOIN Transcripts AS T4 JOIN Transcript_Contents AS T5 ON T3.student_course_id = T5.student_course_id AND T5.transcript_id = T4.transcript_id",
        -11.428738594055176
      ],
      [
        "SELECT Max ( T3.transcript_date ) , T1.other_details FROM Student_Enrolment AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.student_enrolment_id = T2.student_enrolment_id JOIN Transcripts AS T3 JOIN Transcript_Contents AS T4 ON T2.student_course_id = T4.student_course_id AND T4.transcript_id = T3.transcript_id",
        -11.49462604522705
      ],
      [
        "SELECT T1.first_name , T4.other_details FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id JOIN Student_Enrolment_Courses AS T3 ON T2.student_enrolment_id = T3.student_enrolment_id JOIN Transcripts AS T4 JOIN Transcript_Contents AS T5 ON T3.student_course_id = T5.student_course_id AND T5.transcript_id = T4.transcript_id",
        -11.593969345092773
      ],
      [
        "SELECT T1.date_left , T4.other_details FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id JOIN Student_Enrolment_Courses AS T3 ON T2.student_enrolment_id = T3.student_enrolment_id JOIN Transcripts AS T4 JOIN Transcript_Contents AS T5 ON T3.student_course_id = T5.student_course_id AND T5.transcript_id = T4.transcript_id",
        -11.765884399414062
      ],
      [
        "SELECT T1.semester_name , T4.other_details FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id JOIN Student_Enrolment_Courses AS T3 ON T2.student_enrolment_id = T3.student_enrolment_id JOIN Transcripts AS T4 JOIN Transcript_Contents AS T5 ON T3.student_course_id = T5.student_course_id AND T5.transcript_id = T4.transcript_id",
        -11.812295913696289
      ],
      [
        "SELECT T1.line_1 , T5.other_details FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id JOIN Student_Enrolment AS T3 ON T2.student_id = T3.student_id JOIN Student_Enrolment_Courses AS T4 ON T3.student_enrolment_id = T4.student_enrolment_id JOIN Transcripts AS T5 JOIN Transcript_Contents AS T6 ON T4.student_course_id = T6.student_course_id AND T6.transcript_id = T5.transcript_id",
        -12.27763557434082
      ],
      [
        "SELECT Count ( transcript_date ) , other_details FROM Transcripts",
        -12.493440628051758
      ]
    ],
    "predicted_parse_with_values": "SELECT transcript_date , other_details FROM Transcripts",
    "predicted_parse": "SELECT transcript_date , other_details FROM Transcripts",
    "predicted_parse_explanation": [
      "find the transcript date and other details in transcripts table"
    ],
    "template_feedback": "find the result with the smallest transcript date .",
    "primary_span": [
      [
        0,
        8
      ]
    ],
    "secondary_span": [],
    "edits": [
      "transcript date",
      "1"
    ],
    "edits_original": "< orderBy > add transcript date </ orderBy > < limit > add 1 </ limit >"
  },
  {
    "db_id": "dog_kennels",
    "feedback": "Provide largest value not smallest value of date .",
    "question": "How much does the most recent treatment cost?",
    "gold_parse": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
    "beam": [
      [
        "SELECT * FROM Treatments ORDER BY date_of_treatment Asc LIMIT value",
        -1.6403772830963135
      ],
      [
        "SELECT * FROM Dogs ORDER BY age Asc LIMIT value",
        -1.7759249210357666
      ],
      [
        "SELECT T1.treatment_type_code FROM Treatment_Types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code ORDER BY T2.date_of_treatment Asc LIMIT value",
        -1.8714646100997925
      ],
      [
        "SELECT T1.treatment_type_code FROM Treatment_Types AS T1 JOIN Dogs AS T2 JOIN Treatments AS T3 ON T1.treatment_type_code = T3.treatment_type_code AND T3.dog_id = T2.dog_id ORDER BY T2.age Asc LIMIT value",
        -1.9759634733200073
      ],
      [
        "SELECT T1.treatment_type_description FROM Treatment_Types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code ORDER BY T2.date_of_treatment Asc LIMIT value",
        -2.39492130279541
      ],
      [
        "SELECT T1.treatment_type_description FROM Treatment_Types AS T1 JOIN Dogs AS T2 JOIN Treatments AS T3 ON T1.treatment_type_code = T3.treatment_type_code AND T3.dog_id = T2.dog_id ORDER BY T2.age Asc LIMIT value",
        -2.5470266342163086
      ],
      [
        "SELECT date_of_treatment FROM Treatments ORDER BY date_of_treatment Asc LIMIT value",
        -3.581828474998474
      ],
      [
        "SELECT T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id ORDER BY T1.age Asc LIMIT value",
        -3.7633591890335083
      ],
      [
        "SELECT * FROM Dogs ORDER BY date_of_birth Asc LIMIT value",
        -4.571131706237793
      ],
      [
        "SELECT T1.date_of_birth FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id ORDER BY T2.date_of_treatment Asc LIMIT value",
        -4.744118332862854
      ],
      [
        "SELECT T1.age FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id ORDER BY T2.date_of_treatment Asc LIMIT value",
        -4.754308462142944
      ],
      [
        "SELECT T1.treatment_type_code FROM Treatment_Types AS T1 JOIN Dogs AS T2 JOIN Treatments AS T3 ON T1.treatment_type_code = T3.treatment_type_code AND T3.dog_id = T2.dog_id ORDER BY T2.date_of_birth Asc LIMIT value",
        -4.790289282798767
      ],
      [
        "SELECT date_of_birth FROM Dogs ORDER BY age Asc LIMIT value",
        -4.943148612976074
      ],
      [
        "SELECT age FROM Dogs ORDER BY age Asc LIMIT value",
        -4.950425386428833
      ],
      [
        "SELECT T1.date_adopted FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id ORDER BY T2.date_of_treatment Asc LIMIT value",
        -4.961878299713135
      ],
      [
        "SELECT date_adopted FROM Dogs ORDER BY age Asc LIMIT value",
        -5.141512155532837
      ],
      [
        "SELECT treatment_type_code FROM Treatments ORDER BY date_of_treatment Asc LIMIT value",
        -5.158385515213013
      ],
      [
        "SELECT T2.treatment_type_code FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id ORDER BY T1.age Asc LIMIT value",
        -5.296520709991455
      ],
      [
        "SELECT Max ( age ) FROM Dogs",
        -6.211440026760101
      ],
      [
        "SELECT Max ( date_of_treatment ) FROM Treatments",
        -7.038721323013306
      ]
    ],
    "predicted_parse_with_values": "SELECT * FROM Treatments ORDER BY date_of_treatment Asc LIMIT 1",
    "predicted_parse": "SELECT * FROM Treatments ORDER BY date_of_treatment Asc LIMIT value",
    "predicted_parse_explanation": [
      "find the rows in treatments table with smallest value of date of treatment"
    ],
    "template_feedback": "find cost of treatment in place of rows . use the largest in place of smallest .",
    "primary_span": [
      [
        0,
        3
      ],
      [
        9,
        11
      ]
    ],
    "secondary_span": [
      [
        4,
        8
      ],
      [
        12,
        16
      ]
    ],
    "edits": [
      "cost of treatment",
      "rows",
      "descending"
    ],
    "edits_original": "< select > add cost of treatment </ select > < select > remove rows </ select > < orderBy > add descending </ orderBy >"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "feedback": "template type code of templates table whose corresponding template id present in documents table in step 2",
    "question": "What are the codes of template types that are not used for any document?",
    "gold_parse": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id",
    "beam": [
      [
        "SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 EXCEPT SELECT T2.Template_Type_Code FROM Templates AS T2",
        -0.012828826904296875
      ],
      [
        "SELECT Template_Type_Code FROM Ref_Template_Types EXCEPT SELECT Template_Type_Code FROM Ref_Template_Types",
        -4.735682487487793
      ],
      [
        "SELECT Template_Type_Code FROM Templates EXCEPT SELECT Template_Type_Code FROM Templates",
        -5.795694351196289
      ],
      [
        "SELECT Template_Type_Code FROM Ref_Template_Types EXCEPT SELECT Template_Type_Description FROM Ref_Template_Types",
        -8.039437294006348
      ],
      [
        "SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 WHERE T1.Template_Type_Code NOT IN ( SELECT T2.Template_Type_Code FROM Templates AS T2 )",
        -8.590470314025879
      ],
      [
        "SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 WHERE T1.Template_Type_Code NOT IN ( SELECT T2.Template_ID FROM Documents AS T2 )",
        -8.625609397888184
      ],
      [
        "SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 EXCEPT SELECT T2.Document_Name FROM Documents AS T2",
        -8.891775131225586
      ],
      [
        "SELECT T1.Template_Type_Code FROM Templates AS T1 EXCEPT SELECT T2.Template_Type_Code FROM Ref_Template_Types AS T2",
        -10.23399305343628
      ],
      [
        "SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 EXCEPT SELECT T2.Template_Type_Code FROM Templates AS T2 JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID WHERE T3.Document_Name = value",
        -10.627079963684082
      ],
      [
        "SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 EXCEPT SELECT T2.Template_ID FROM Documents AS T2",
        -11.464432716369629
      ],
      [
        "SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 WHERE T1.Template_Type_Code NOT IN ( SELECT T2.Document_Name FROM Documents AS T2 )",
        -11.814543724060059
      ],
      [
        "SELECT Template_Type_Code FROM Ref_Template_Types EXCEPT SELECT * FROM Ref_Template_Types",
        -12.14744758605957
      ],
      [
        "SELECT T2.Template_Type_Code FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T1.Template_Type_Code NOT IN ( SELECT T3.Template_ID FROM Documents AS T3 )",
        -13.556865692138672
      ],
      [
        "SELECT T1.Template_Type_Code FROM Templates AS T1 EXCEPT SELECT T2.Template_Type_Description FROM Ref_Template_Types AS T2",
        -13.751558303833008
      ],
      [
        "SELECT DISTINCT T1.Template_Type_Code FROM Ref_Template_Types AS T1 EXCEPT SELECT T2.Template_Type_Code FROM Templates AS T2",
        -13.774359703063965
      ],
      [
        "SELECT T2.Template_Type_Code FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T1.Template_Type_Code NOT IN ( SELECT T2.Template_Type_Code FROM Templates AS T2 )",
        -13.78862190246582
      ],
      [
        "SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 EXCEPT SELECT T2.Document_Description FROM Documents AS T2",
        -13.940313339233398
      ],
      [
        "SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 EXCEPT SELECT DISTINCT T2.Template_Type_Code FROM Templates AS T2",
        -14.169960021972656
      ],
      [
        "SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 UNION SELECT T2.Document_Name FROM Documents AS T2",
        -14.257344722747803
      ],
      [
        "SELECT Template_Type_Code FROM Ref_Template_Types",
        -16.79344367980957
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 EXCEPT SELECT T2.Template_Type_Code FROM Templates AS T2",
    "predicted_parse": "SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 EXCEPT SELECT T2.Template_Type_Code FROM Templates AS T2",
    "predicted_parse_explanation": [
      "Step 1: find the reference template types 's template type code in reference template types table",
      "Step 2: find the templates 's template type code in templates table",
      "Step 3: show the rows that are in the results of step 1 but not in the results of step 2"
    ],
    "template_feedback": "in step 1 , use templates table in place of reference template types table . in step 2 , additionally use the information from the documents table besides the templates table .",
    "primary_span": [
      [
        4,
        6
      ],
      [
        19,
        26
      ]
    ],
    "secondary_span": [
      [
        7,
        14
      ],
      [
        27,
        31
      ]
    ],
    "edits": [
      "templates",
      "reference template types",
      "documents"
    ],
    "edits_original": "< from > add templates </ from > < from > remove reference template types </ from > < from > add documents </ from >"
  },
  {
    "db_id": "dog_kennels",
    "feedback": "Add treatments table . Ensure to find total date of treatment for all dogs owned by each owner id .",
    "question": "Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.",
    "gold_parse": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1",
    "beam": [
      [
        "SELECT T2.owner_id , T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY T2.owner_id ORDER BY Count ( * ) Desc LIMIT value",
        -1.1424932479858398
      ],
      [
        "SELECT T2.owner_id , T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id ORDER BY Count ( * ) Desc LIMIT value",
        -1.3589868545532227
      ],
      [
        "SELECT T1.owner_id , T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY T2.owner_id ORDER BY Count ( * ) Desc LIMIT value",
        -2.127713203430176
      ],
      [
        "SELECT owner_id , zip_code FROM Owners GROUP BY owner_id ORDER BY Count ( * ) Desc LIMIT value",
        -2.346118927001953
      ],
      [
        "SELECT T2.owner_id , T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY T2.owner_id ORDER BY Sum ( * ) Desc LIMIT value",
        -2.5377721786499023
      ],
      [
        "SELECT T2.owner_id , T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id ORDER BY Sum ( * ) Desc LIMIT value",
        -2.936160087585449
      ],
      [
        "SELECT T1.owner_id , T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY T2.owner_id ORDER BY Sum ( * ) Desc LIMIT value",
        -3.519680976867676
      ],
      [
        "SELECT owner_id , zip_code FROM Owners GROUP BY owner_id ORDER BY Sum ( * ) Desc LIMIT value",
        -3.9249343872070312
      ],
      [
        "SELECT T3.owner_id , T2.zip_code FROM Charges AS T1 JOIN Owners AS T2 JOIN Dogs AS T3 GROUP BY T3.owner_id ORDER BY Sum ( T1.charge_amount ) Desc LIMIT value",
        -4.380685806274414
      ],
      [
        "SELECT T3.owner_id , T2.zip_code FROM Charges AS T1 JOIN Owners AS T2 JOIN Dogs AS T3 GROUP BY T2.owner_id ORDER BY Sum ( T1.charge_amount ) Desc LIMIT value",
        -5.185144424438477
      ],
      [
        "SELECT T2.owner_id , T2.zip_code FROM Charges AS T1 JOIN Owners AS T2 JOIN Dogs AS T3 GROUP BY T3.owner_id ORDER BY Sum ( T1.charge_amount ) Desc LIMIT value",
        -5.366646766662598
      ],
      [
        "SELECT T2.owner_id , T2.zip_code FROM Charges AS T1 JOIN Owners AS T2 GROUP BY T2.owner_id ORDER BY Sum ( T1.charge_amount ) Desc LIMIT value",
        -6.176652431488037
      ],
      [
        "SELECT T2.owner_id , T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY T2.owner_id ORDER BY Sum ( T2.weight ) Desc LIMIT value",
        -7.014207363128662
      ],
      [
        "SELECT T2.owner_id , T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id ORDER BY Sum ( T2.weight ) Desc LIMIT value",
        -7.842493057250977
      ],
      [
        "SELECT T1.owner_id , T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY T2.owner_id ORDER BY Sum ( T2.weight ) Desc LIMIT value",
        -8.002549171447754
      ],
      [
        "SELECT T2.owner_id , T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY T2.owner_id ORDER BY Sum ( T2.age ) Desc LIMIT value",
        -8.593491554260254
      ],
      [
        "SELECT T1.owner_id , T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id ORDER BY Sum ( T2.weight ) Desc LIMIT value",
        -8.833781242370605
      ],
      [
        "SELECT T2.owner_id , T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id ORDER BY Sum ( T2.age ) Desc LIMIT value",
        -9.422397136688232
      ],
      [
        "SELECT T1.owner_id , T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY T2.owner_id ORDER BY Sum ( T2.age ) Desc LIMIT value",
        -9.581281185150146
      ],
      [
        "SELECT T2.owner_id , T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY T2.owner_id ORDER BY Avg ( * ) Desc LIMIT value",
        -9.668729782104492
      ]
    ],
    "predicted_parse_with_values": "SELECT T2.owner_id , T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY T2.owner_id ORDER BY Count ( * ) Desc LIMIT 1",
    "predicted_parse": "SELECT T2.owner_id , T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY T2.owner_id ORDER BY Count ( * ) Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: for each row in owners table , find the corresponding rows in dogs table",
      "Step 2: find the number of rows of each value of dogs 's owner id of the results of step 1",
      "Step 3: find the dogs 's owner id and zip code of the results of step 1 with largest value in the results of step 2"
    ],
    "template_feedback": "in step 1 , additionally use the information from the treatments table . in step 3 , order the results by summation of cost of treatment in place of number of rows .",
    "primary_span": [
      [
        4,
        12
      ],
      [
        17,
        25
      ]
    ],
    "secondary_span": [
      [
        26,
        32
      ]
    ],
    "edits": [
      "treatments",
      "summation of cost of treatment",
      "number of rows"
    ],
    "edits_original": "< from > add treatments </ from > < orderBy > add summation of cost of treatment </ orderBy > < orderBy > remove number of rows </ orderBy >"
  },
  {
    "db_id": "student_transcripts_tracking",
    "feedback": "Find number of rows of each value of course id in student enrolment courses table in step 1.",
    "question": "What's the name of the course with most number of enrollments?",
    "gold_parse": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1",
    "beam": [
      [
        "SELECT course_name FROM Courses GROUP BY course_name ORDER BY Count ( * ) Desc LIMIT value",
        -0.3606300354003906
      ],
      [
        "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id ORDER BY Count ( * ) Desc LIMIT value",
        -1.1957950592041016
      ],
      [
        "SELECT course_name FROM Courses GROUP BY course_id ORDER BY Count ( * ) Desc LIMIT value",
        -8.172222137451172
      ],
      [
        "SELECT course_name FROM Courses GROUP BY course_name ORDER BY Count ( * ) Desc",
        -12.697487831115723
      ],
      [
        "SELECT T1.course_name , T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id ORDER BY Count ( * ) Desc LIMIT value",
        -13.125951290130615
      ],
      [
        "SELECT course_name FROM Courses GROUP BY course_name",
        -13.453290939331055
      ],
      [
        "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id ORDER BY Count ( * ) Desc",
        -13.45582103729248
      ],
      [
        "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment AS T2 JOIN Student_Enrolment_Courses AS T3 ON T1.course_id = T3.course_id AND T3.student_enrolment_id = T2.student_enrolment_id GROUP BY T2.degree_program_id ORDER BY Count ( * ) Desc LIMIT value",
        -13.488181114196777
      ],
      [
        "SELECT course_name , course_name FROM Courses GROUP BY course_name ORDER BY Count ( * ) Desc LIMIT value",
        -14.111225605010986
      ],
      [
        "SELECT DISTINCT course_name FROM Courses GROUP BY course_name ORDER BY Count ( * ) Desc LIMIT value",
        -14.427773475646973
      ],
      [
        "SELECT T1.course_name , Count ( * ) FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id ORDER BY Count ( * ) Desc LIMIT value",
        -14.492207527160645
      ],
      [
        "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id ORDER BY T2.student_enrolment_id Desc LIMIT value",
        -14.851301312446594
      ],
      [
        "SELECT course_name FROM Courses GROUP BY course_name ORDER BY Sum ( * ) Desc LIMIT value",
        -14.889123916625977
      ],
      [
        "SELECT course_name FROM Courses ORDER BY course_name Desc LIMIT value",
        -14.966983914375305
      ],
      [
        "SELECT course_name FROM Courses GROUP BY course_name ORDER BY Count ( * ) Asc LIMIT value",
        -15.043627738952637
      ],
      [
        "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id ORDER BY Count ( * ) Desc LIMIT value",
        -15.230201721191406
      ],
      [
        "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id ORDER BY Sum ( * ) Desc LIMIT value",
        -15.372286319732666
      ],
      [
        "SELECT course_name FROM Courses GROUP BY course_name HAVING Count ( * ) < = value",
        -15.613383293151855
      ],
      [
        "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id",
        -16.12606716156006
      ],
      [
        "SELECT course_name FROM Courses",
        -18.713807106018066
      ]
    ],
    "predicted_parse_with_values": "SELECT course_name FROM Courses GROUP BY course_name ORDER BY Count ( * ) Desc LIMIT 1",
    "predicted_parse": "SELECT course_name FROM Courses GROUP BY course_name ORDER BY Count ( * ) Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of course name in courses table",
      "Step 2: find the course name in courses table with largest value in the results of step 1"
    ],
    "template_feedback": "in step 1 , additionally use the information from the student enrolment courses table besides the courses table .",
    "primary_span": [
      [
        4,
        13
      ]
    ],
    "secondary_span": [
      [
        14,
        18
      ]
    ],
    "edits": [
      "student enrolment courses"
    ],
    "edits_original": "< from > add student enrolment courses </ from >"
  },
  {
    "db_id": "flight_2",
    "feedback": "you have to use source airport instead of abbreviation.",
    "question": "Which airlines have a flight with source airport AHD?",
    "gold_parse": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"",
    "beam": [
      [
        "SELECT Airline FROM airlines WHERE Abbreviation = value",
        -0.07497596740722656
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 WHERE T2.FlightNo = value",
        -2.840252637863159
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = value",
        -5.2874298095703125
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 WHERE T2.Airline = value",
        -5.688819885253906
      ],
      [
        "SELECT Airline FROM airlines",
        -6.13942813873291
      ],
      [
        "SELECT Airline FROM airlines WHERE Airline = value",
        -6.795295715332031
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.CountryAbbrev = value",
        -7.3118743896484375
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value",
        -7.441059589385986
      ],
      [
        "SELECT Airline FROM airlines WHERE Country = value",
        -7.8031182289123535
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.City = value",
        -8.488587379455566
      ],
      [
        "SELECT Airline FROM airlines WHERE uid = value",
        -8.53977108001709
      ],
      [
        "SELECT Airline FROM airlines WHERE Abbreviation = Airline",
        -11.355212211608887
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 WHERE T2.SourceAirport = value",
        -11.781344413757324
      ],
      [
        "SELECT Airline FROM airlines WHERE uid = Airline",
        -11.969810009002686
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 WHERE T2.DestAirport = value",
        -12.013272285461426
      ],
      [
        "SELECT Airline FROM airlines GROUP BY Airline HAVING Count ( * ) = value",
        -12.67961835861206
      ],
      [
        "SELECT Airline FROM airlines EXCEPT SELECT Airline FROM airlines",
        -13.28509521484375
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 WHERE T2.Airline = T1.Airline",
        -13.523185729980469
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 WHERE T2.FlightNo = T1.Airline",
        -13.662760972976685
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportCode = value",
        -13.785319328308105
      ]
    ],
    "predicted_parse_with_values": "SELECT Airline FROM airlines WHERE Abbreviation = \"AHD\"",
    "predicted_parse": "SELECT Airline FROM airlines WHERE Abbreviation = value",
    "predicted_parse_explanation": [
      "find the airline name in airlines table whose abbreviation equals AHD"
    ],
    "template_feedback": "additionally use the information from the flights table besides the airlines table . consider the source airport equals AHD conditions in place of the abbreviation equals AHD conditions .",
    "primary_span": [
      [
        0,
        7
      ],
      [
        13,
        19
      ]
    ],
    "secondary_span": [
      [
        8,
        12
      ],
      [
        20,
        28
      ]
    ],
    "edits": [
      "flights",
      "source airport equals \"AHD\"",
      "abbreviation equals \"AHD\""
    ],
    "edits_original": "< from > add flights </ from > < where > add source airport equals \" AHD \" </ where > < where > remove abbreviation equals \" AHD \" </ where >"
  },
  {
    "db_id": "student_transcripts_tracking",
    "feedback": "I want permanent address whose Addresses' country is Haiti in step 1.",
    "question": "What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582?",
    "gold_parse": "SELECT T1.first_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.permanent_address_id  =  T2.address_id WHERE T2.country  =  'Haiti' UNION SELECT first_name FROM Students WHERE cell_mobile_number  =  '09700166582'",
    "beam": [
      [
        "SELECT first_name FROM Students WHERE cell_mobile_number LIKE value UNION SELECT first_name FROM Students WHERE cell_mobile_number = value",
        -1.1392059326171875
      ],
      [
        "SELECT first_name FROM Students WHERE cell_mobile_number = value UNION SELECT first_name FROM Students WHERE cell_mobile_number = value OR cell_mobile_number = value",
        -1.345595359802246
      ],
      [
        "SELECT first_name FROM Students WHERE cell_mobile_number = value OR cell_mobile_number = value",
        -2.2522830963134766
      ],
      [
        "SELECT first_name FROM Students WHERE cell_mobile_number = value OR cell_mobile_number = value EXCEPT SELECT first_name FROM Students WHERE cell_mobile_number = value OR cell_mobile_number = value",
        -2.4566478729248047
      ],
      [
        "SELECT first_name FROM Students WHERE cell_mobile_number = value OR cell_mobile_number = value UNION SELECT first_name FROM Students WHERE cell_mobile_number = value",
        -2.929004669189453
      ],
      [
        "SELECT first_name FROM Students WHERE cell_mobile_number = value OR cell_mobile_number = value UNION SELECT first_name FROM Students WHERE cell_mobile_number = value OR cell_mobile_number = value",
        -2.974637031555176
      ],
      [
        "SELECT first_name FROM Students WHERE first_name LIKE value UNION SELECT first_name FROM Students WHERE cell_mobile_number = value OR cell_mobile_number = value",
        -3.366006851196289
      ],
      [
        "SELECT first_name FROM Students WHERE cell_mobile_number = value UNION SELECT first_name FROM Students WHERE cell_mobile_number = value",
        -3.4591941833496094
      ],
      [
        "SELECT first_name FROM Students WHERE cell_mobile_number = value OR cell_mobile_number = value EXCEPT SELECT first_name FROM Students WHERE cell_mobile_number = value",
        -3.8926639556884766
      ],
      [
        "SELECT first_name FROM Students WHERE cell_mobile_number LIKE value UNION SELECT first_name FROM Students WHERE cell_mobile_number = value OR cell_mobile_number = value",
        -4.938666343688965
      ],
      [
        "SELECT first_name FROM Students WHERE cell_mobile_number ! = value UNION SELECT first_name FROM Students WHERE cell_mobile_number = value",
        -5.711828231811523
      ],
      [
        "SELECT first_name FROM Students WHERE cell_mobile_number = value EXCEPT SELECT first_name FROM Students WHERE cell_mobile_number = value OR cell_mobile_number = value",
        -5.7584381103515625
      ],
      [
        "SELECT first_name FROM Students WHERE first_name LIKE value UNION SELECT first_name FROM Students WHERE cell_mobile_number = value",
        -6.254773139953613
      ],
      [
        "SELECT first_name FROM Students WHERE cell_mobile_number = value OR cell_mobile_number = value ORDER BY first_name Desc LIMIT value",
        -6.265740394592285
      ],
      [
        "SELECT first_name FROM Students WHERE cell_mobile_number LIKE value UNION SELECT first_name FROM Students WHERE cell_mobile_number ! = value",
        -6.432097434997559
      ],
      [
        "SELECT first_name FROM Students WHERE cell_mobile_number = value OR cell_mobile_number = value UNION SELECT first_name FROM Students WHERE cell_mobile_number ! = value",
        -6.857879638671875
      ],
      [
        "SELECT first_name FROM Students WHERE cell_mobile_number = value UNION SELECT first_name FROM Students WHERE cell_mobile_number ! = value",
        -7.169706344604492
      ],
      [
        "SELECT first_name FROM Students WHERE cell_mobile_number = value UNION SELECT first_name FROM Students WHERE cell_mobile_number = value AND cell_mobile_number = value",
        -7.205517768859863
      ],
      [
        "SELECT first_name FROM Students UNION SELECT first_name FROM Students WHERE cell_mobile_number = value",
        -7.61163330078125
      ],
      [
        "SELECT first_name FROM Students WHERE cell_mobile_number > value UNION SELECT first_name FROM Students WHERE cell_mobile_number = value",
        -8.546379089355469
      ]
    ],
    "predicted_parse_with_values": "SELECT first_name FROM Students WHERE cell_mobile_number LIKE \"Haiti\" UNION SELECT first_name FROM Students WHERE cell_mobile_number = 09700166582",
    "predicted_parse": "SELECT first_name FROM Students WHERE cell_mobile_number LIKE value UNION SELECT first_name FROM Students WHERE cell_mobile_number = value",
    "predicted_parse_explanation": [
      "Step 1: find the first name in students table whose cell mobile number like Haiti",
      "Step 2: find the first name in students table whose cell mobile number equals 9700166582",
      "Step 3: show the rows that are in any of the results of step 1 and step 2"
    ],
    "template_feedback": "in step 1 , additionally use the information from the addresses table besides the students table . consider the country equals Haiti conditions in place of the cell mobile number like Haiti conditions . in step 2 , consider the cell mobile number equals 09700166582 conditions in place of the cell mobile number equals 9700166582 conditions .",
    "primary_span": [
      [
        4,
        11
      ],
      [
        17,
        22
      ],
      [
        38,
        45
      ]
    ],
    "secondary_span": [
      [
        12,
        16
      ],
      [
        23,
        33
      ],
      [
        46,
        56
      ]
    ],
    "edits": [
      "addresses",
      "country equals \"Haiti\"",
      "cell mobile number like \"Haiti\"",
      "cell mobile number equals \"09700166582\"",
      "cell mobile number equals 9700166582"
    ],
    "edits_original": "< from > add addresses </ from > < where > add country equals \" Haiti \" </ where > < where > remove cell mobile number like \" Haiti \" </ where > < where > add cell mobile number equals \" 09700166582 \" </ where > < where > remove cell mobile number equals 9700166582 </ where >"
  },
  {
    "db_id": "student_transcripts_tracking",
    "feedback": "find how many times the course appeared in transcript contents",
    "question": "What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?",
    "gold_parse": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1",
    "beam": [
      [
        "SELECT Max ( student_course_id ) , course_id FROM Student_Enrolment_Courses GROUP BY course_id",
        -2.274965286254883
      ],
      [
        "SELECT Max ( course_id ) , course_id FROM Student_Enrolment_Courses GROUP BY course_id",
        -2.283997654914856
      ],
      [
        "SELECT Max ( * ) , course_id FROM Student_Enrolment_Courses GROUP BY course_id",
        -2.6549763679504395
      ],
      [
        "SELECT Max ( student_enrolment_id ) , course_id FROM Student_Enrolment_Courses GROUP BY course_id",
        -2.7825088500976562
      ],
      [
        "SELECT course_id , Max ( student_enrolment_id ) , course_id FROM Student_Enrolment_Courses GROUP BY course_id",
        -3.15875244140625
      ],
      [
        "SELECT T1.course_name , Max ( T2.student_enrolment_id ) , T2.course_id FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id",
        -3.488310217857361
      ],
      [
        "SELECT Max ( * ) , student_enrolment_id FROM Student_Enrolment_Courses GROUP BY course_id",
        -3.7194089889526367
      ],
      [
        "SELECT T2.course_id , Max ( T2.student_enrolment_id ) , T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id",
        -3.7537567615509033
      ],
      [
        "SELECT Max ( T1.course_description ) , T2.course_id FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id",
        -3.9265103340148926
      ],
      [
        "SELECT course_id , Max ( course_id ) , course_id FROM Student_Enrolment_Courses GROUP BY course_id",
        -4.037938356399536
      ],
      [
        "SELECT Max ( T1.student_id ) , T2.course_id FROM Student_Enrolment AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.student_enrolment_id = T2.student_enrolment_id GROUP BY T2.course_id",
        -4.114452838897705
      ],
      [
        "SELECT T1.course_name , Max ( T2.student_enrolment_id ) , T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id",
        -4.3484169244766235
      ],
      [
        "SELECT T2.course_id , Max ( T2.course_id ) , T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id",
        -4.372132778167725
      ],
      [
        "SELECT Max ( course_id ) , student_enrolment_id FROM Student_Enrolment_Courses GROUP BY course_id",
        -4.3895872831344604
      ],
      [
        "SELECT Max ( T2.course_id ) , T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id",
        -4.446792006492615
      ],
      [
        "SELECT Max ( course_id ) , course_id , Count ( * ) FROM Student_Enrolment_Courses GROUP BY course_id",
        -4.446842312812805
      ],
      [
        "SELECT Max ( student_course_id ) , course_id , Count ( * ) FROM Student_Enrolment_Courses GROUP BY course_id",
        -4.502597808837891
      ],
      [
        "SELECT Max ( T2.student_course_id ) , T1.course_id FROM Student_Enrolment_Courses AS T1 JOIN Transcript_Contents AS T2 ON T1.student_course_id = T2.student_course_id GROUP BY T1.course_id",
        -4.514253377914429
      ],
      [
        "SELECT student_course_id , course_id , Count ( * ) FROM Student_Enrolment_Courses GROUP BY course_id",
        -4.669735670089722
      ],
      [
        "SELECT T1.course_name , Max ( T3.student_enrolment_id ) , T2.student_enrolment_id FROM Courses AS T1 JOIN Student_Enrolment AS T2 JOIN Student_Enrolment_Courses AS T3 ON T1.course_id = T3.course_id AND T3.student_enrolment_id = T2.student_enrolment_id AND T1.course_id = T3.course_id GROUP BY T3.course_id",
        -5.009513735771179
      ]
    ],
    "predicted_parse_with_values": "SELECT Max ( student_course_id ) , course_id FROM Student_Enrolment_Courses GROUP BY course_id",
    "predicted_parse": "SELECT Max ( student_course_id ) , course_id FROM Student_Enrolment_Courses GROUP BY course_id",
    "predicted_parse_explanation": [
      "find each value of course id in student enrolment courses table along with the maximum student course id of the corresponding rows to each value"
    ],
    "template_feedback": "use transcript contents table in place of student enrolment courses table . find for each value of transcript contents 's student course id in place of course id . find number of rows and transcript contents 's student course id in place of maximum student enrolment courses 's student course id and course id . find the result with the largest number of rows .",
    "primary_span": [
      [
        0,
        3
      ],
      [
        12,
        22
      ],
      [
        29,
        39
      ],
      [
        55,
        64
      ]
    ],
    "secondary_span": [
      [
        4,
        11
      ],
      [
        23,
        28
      ],
      [
        40,
        54
      ]
    ],
    "edits": [
      "number of rows",
      "student course id",
      "maximum student course id",
      "course id",
      "transcript contents",
      "student enrolment courses",
      "student course id",
      "course id",
      "number of rows",
      "descending",
      "1"
    ],
    "edits_original": "< select > add number of rows </ select > < select > add student course id </ select > < select > remove maximum student course id </ select > < select > remove course id </ select > < from > add transcript contents </ from > < from > remove student enrolment courses </ from > < groupBy > add student course id </ groupBy > < groupBy > remove course id </ groupBy > < orderBy > add number of rows </ orderBy > < orderBy > add descending </ orderBy > < limit > add 1 </ limit >"
  },
  {
    "db_id": "flight_2",
    "feedback": "Substitute city in airports table with city of destination airport in flights table in step 1.",
    "question": "Which city has the most frequent destination airport?",
    "gold_parse": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
    "beam": [
      [
        "SELECT City FROM airports GROUP BY City ORDER BY Count ( * ) Desc LIMIT value",
        -0.00103759765625
      ],
      [
        "SELECT AirportName FROM airports GROUP BY City ORDER BY Count ( * ) Desc LIMIT value",
        -6.931951522827148
      ],
      [
        "SELECT City FROM airports GROUP BY AirportCode ORDER BY Count ( * ) Desc LIMIT value",
        -10.311081886291504
      ],
      [
        "SELECT City FROM airports GROUP BY AirportName ORDER BY Count ( * ) Desc LIMIT value",
        -10.907729148864746
      ],
      [
        "SELECT City FROM airports GROUP BY City ORDER BY Count ( * ) Desc",
        -12.62484359741211
      ],
      [
        "SELECT City , Count ( * ) FROM airports GROUP BY City ORDER BY Count ( * ) Desc LIMIT value",
        -12.972237586975098
      ],
      [
        "SELECT City FROM airports GROUP BY City ORDER BY Count ( * ) Asc LIMIT value",
        -14.145435333251953
      ],
      [
        "SELECT DISTINCT City FROM airports GROUP BY City ORDER BY Count ( * ) Desc LIMIT value",
        -14.218443870544434
      ],
      [
        "SELECT City FROM airports GROUP BY City",
        -14.247861862182617
      ],
      [
        "SELECT Count ( City ) FROM airports GROUP BY City ORDER BY Count ( * ) Desc LIMIT value",
        -14.949201583862305
      ],
      [
        "SELECT City FROM airports GROUP BY City HAVING Count ( * ) > value",
        -15.101831436157227
      ],
      [
        "SELECT City FROM airports GROUP BY City ORDER BY Avg ( * ) Desc LIMIT value",
        -15.489709854125977
      ],
      [
        "SELECT City FROM airports ORDER BY Count ( * ) Desc LIMIT value",
        -15.497087478637695
      ],
      [
        "SELECT DISTINCT City FROM airports GROUP BY City ORDER BY Count ( * ) Desc LIMIT value",
        -15.690866470336914
      ],
      [
        "SELECT City FROM airports GROUP BY City ORDER BY Count ( DISTINCT * ) Desc LIMIT value",
        -15.946279525756836
      ],
      [
        "SELECT City FROM airports GROUP BY City ORDER BY Sum ( * ) Desc LIMIT value",
        -16.191466331481934
      ],
      [
        "SELECT Count ( * ) FROM airports GROUP BY City ORDER BY Count ( * ) Desc LIMIT value",
        -16.26286792755127
      ],
      [
        "SELECT City FROM airports GROUP BY Max ( City ) ORDER BY Count ( * ) Desc LIMIT value",
        -16.343538284301758
      ],
      [
        "SELECT City FROM airports GROUP BY DISTINCT City ORDER BY Count ( * ) Desc LIMIT value",
        -16.374814987182617
      ],
      [
        "SELECT City FROM airports GROUP BY City HAVING Count ( * ) = value",
        -16.648059844970703
      ]
    ],
    "predicted_parse_with_values": "SELECT City FROM airports GROUP BY City ORDER BY Count ( * ) Desc LIMIT 1",
    "predicted_parse": "SELECT City FROM airports GROUP BY City ORDER BY Count ( * ) Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of city in airports table",
      "Step 2: find the city in airports table with largest value in the results of step 1"
    ],
    "template_feedback": "in step 1 , additionally use the information from the flights table besides the airports table .",
    "primary_span": [
      [
        4,
        11
      ]
    ],
    "secondary_span": [
      [
        12,
        16
      ]
    ],
    "edits": [
      "flights"
    ],
    "edits_original": "< from > add flights </ from >"
  },
  {
    "db_id": "car_1",
    "feedback": "Supersede cylinders with horsepower .",
    "question": "What is the number of the cars with horsepower more than 150?",
    "gold_parse": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150",
    "beam": [
      [
        "SELECT Count ( * ) FROM cars_data WHERE Cylinders > value",
        -0.8710713386535645
      ],
      [
        "SELECT Count ( * ) FROM cars_data WHERE Accelerate > value",
        -0.9399442672729492
      ],
      [
        "SELECT Count ( * ) FROM cars_data WHERE Horsepower > value",
        -2.0390021800994873
      ],
      [
        "SELECT Count ( * ) FROM cars_data WHERE Weight > value",
        -2.8247950077056885
      ],
      [
        "SELECT Count ( * ) FROM model_list WHERE ModelId > value",
        -6.965680122375488
      ],
      [
        "SELECT Count ( * ) FROM cars_data WHERE Edispl > value",
        -8.230222702026367
      ],
      [
        "SELECT Count ( * ) FROM cars_data WHERE MPG > value",
        -8.86207389831543
      ],
      [
        "SELECT Count ( * ) FROM cars_data WHERE Year > value",
        -12.617506980895996
      ],
      [
        "SELECT Count ( * ) FROM car_makers WHERE Maker > value",
        -13.287016868591309
      ],
      [
        "SELECT Count ( * ) FROM car_makers WHERE FullName > value",
        -13.582839965820312
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM cars_data WHERE Cylinders > value",
        -13.89440631866455
      ],
      [
        "SELECT Count ( * ) FROM cars_data WHERE Cylinders > = value",
        -14.029218196868896
      ],
      [
        "SELECT Count ( * ) FROM model_list WHERE Model > value",
        -14.039163589477539
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM cars_data WHERE Accelerate > value",
        -14.100997924804688
      ],
      [
        "SELECT Count ( * ) FROM cars_data WHERE Id > value",
        -14.185260772705078
      ],
      [
        "SELECT Count ( * ) FROM continents",
        -14.385581016540527
      ],
      [
        "SELECT Count ( * ) FROM cars_data WHERE Cylinders = value",
        -14.398609638214111
      ],
      [
        "SELECT Count ( * ) FROM cars_data WHERE MPG = value",
        -14.741548299789429
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM cars_data WHERE Horsepower > value",
        -15.12894320487976
      ],
      [
        "SELECT Count ( * ) , MPG FROM cars_data WHERE Accelerate > value",
        -15.683537721633911
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM cars_data WHERE Cylinders > 150",
    "predicted_parse": "SELECT Count ( * ) FROM cars_data WHERE Cylinders > value",
    "predicted_parse_explanation": [
      "find the number of rows in cars data table whose cylinders greater than 150"
    ],
    "template_feedback": "consider the horsepower greater than 150 conditions in place of the cylinders greater than 150 conditions .",
    "primary_span": [
      [
        0,
        6
      ]
    ],
    "secondary_span": [
      [
        7,
        16
      ]
    ],
    "edits": [
      "horsepower greater than 150",
      "cylinders greater than 150"
    ],
    "edits_original": "< where > add horsepower greater than 150 </ where > < where > remove cylinders greater than 150 </ where >"
  },
  {
    "db_id": "world_1",
    "feedback": "Replace continent with name name , code 2 with language , ensure is official equals T in both steps , T with English(step 1).",
    "question": "What are the names of nations where both English and French are official languages?",
    "gold_parse": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\"",
    "beam": [
      [
        "SELECT Continent FROM country WHERE Code2 = value INTERSECT SELECT Continent FROM country WHERE Code2 = value",
        -0.4593515396118164
      ],
      [
        "SELECT Continent FROM country WHERE LocalName = value INTERSECT SELECT Continent FROM country WHERE Code2 = value",
        -1.2485876083374023
      ],
      [
        "SELECT Continent FROM country WHERE Code2 = value INTERSECT SELECT Continent FROM country WHERE LocalName = value",
        -3.54990291595459
      ],
      [
        "SELECT T1.Continent FROM country AS T1 WHERE T1.Code2 = value INTERSECT SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value",
        -3.7966623306274414
      ],
      [
        "SELECT Continent FROM country WHERE LocalName = value INTERSECT SELECT Continent FROM country WHERE LocalName = value",
        -4.334406852722168
      ],
      [
        "SELECT T1.Continent FROM country AS T1 WHERE T1.LocalName = value INTERSECT SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value",
        -4.6127190589904785
      ],
      [
        "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value INTERSECT SELECT T1.Continent FROM country AS T1 WHERE T1.Code2 = value",
        -6.203829288482666
      ],
      [
        "SELECT Continent FROM country WHERE Name = value INTERSECT SELECT Continent FROM country WHERE Code2 = value",
        -6.8541579246521
      ],
      [
        "SELECT Continent FROM country WHERE Continent = value INTERSECT SELECT Continent FROM country WHERE Code2 = value",
        -7.1983466148376465
      ],
      [
        "SELECT Continent FROM country WHERE Code = value INTERSECT SELECT Continent FROM country WHERE Code2 = value",
        -7.530431270599365
      ],
      [
        "SELECT Name FROM country WHERE LocalName = value INTERSECT SELECT Continent FROM country WHERE Code2 = value",
        -7.815924644470215
      ],
      [
        "SELECT Name FROM country WHERE Code2 = value INTERSECT SELECT Continent FROM country WHERE Code2 = value",
        -8.065845489501953
      ],
      [
        "SELECT Continent FROM country WHERE Code2 = value INTERSECT SELECT Continent FROM country WHERE Code = value",
        -8.165665626525879
      ],
      [
        "SELECT Continent FROM country WHERE LifeExpectancy = value INTERSECT SELECT Continent FROM country WHERE Code2 = value",
        -8.323953628540039
      ],
      [
        "SELECT Continent FROM country WHERE Code2 = value INTERSECT SELECT Continent FROM country WHERE Name = value",
        -8.478109359741211
      ],
      [
        "SELECT Continent FROM country WHERE GovernmentForm = value INTERSECT SELECT Continent FROM country WHERE Code2 = value",
        -8.82470703125
      ],
      [
        "SELECT Continent FROM country WHERE LocalName = value INTERSECT SELECT Continent FROM country WHERE Code = value",
        -8.970039367675781
      ],
      [
        "SELECT Continent FROM country WHERE Code2 = value INTERSECT SELECT Name FROM country WHERE Code2 = value",
        -9.137907981872559
      ],
      [
        "SELECT Continent FROM country WHERE Code2 = value INTERSECT SELECT Continent FROM country WHERE LifeExpectancy = value",
        -9.14780044555664
      ],
      [
        "SELECT Continent FROM country WHERE Code2 = value",
        -12.699349403381348
      ]
    ],
    "predicted_parse_with_values": "SELECT Continent FROM country WHERE Code2 = \"T\" INTERSECT SELECT Continent FROM country WHERE Code2 = \"French\"",
    "predicted_parse": "SELECT Continent FROM country WHERE Code2 = value INTERSECT SELECT Continent FROM country WHERE Code2 = value",
    "predicted_parse_explanation": [
      "Step 1: find the continent in country table whose code2 equals T",
      "Step 2: find the continent in country table whose code2 equals French",
      "Step 3: show the rows that are in both the results of step 1 and step 2"
    ],
    "template_feedback": "in step 1 , additionally use the information from the countrylanguage table besides the country table . consider the language equals English and is official equals T conditions in place of the code2 equals T conditions . find name in place of continent . in step 2 , additionally use the information from the countrylanguage table besides the country table . consider the language equals French and is official equals T conditions in place of the code2 equals French conditions . find name in place of continent .",
    "primary_span": [
      [
        4,
        11
      ],
      [
        17,
        27
      ],
      [
        37,
        38
      ],
      [
        48,
        55
      ],
      [
        61,
        71
      ],
      [
        81,
        82
      ]
    ],
    "secondary_span": [
      [
        12,
        16
      ],
      [
        28,
        36
      ],
      [
        39,
        43
      ],
      [
        56,
        60
      ],
      [
        72,
        80
      ],
      [
        83,
        87
      ]
    ],
    "edits": [
      "name",
      "continent",
      "countrylanguage",
      "language equals \"English\"",
      "is official equals \"T\"",
      "code2 equals \"T\"",
      "name",
      "continent",
      "countrylanguage",
      "language equals \"French\"",
      "is official equals \"T\"",
      "code2 equals \"French\""
    ],
    "edits_original": "< select > add name </ select > < select > remove continent </ select > < from > add countrylanguage </ from > < where > add language equals \" English \" </ where > < where > add is official equals \" T \" </ where > < where > remove code2 equals \" T \" </ where > < select > add name </ select > < select > remove continent </ select > < from > add countrylanguage </ from > < where > add language equals \" French \" </ where > < where > add is official equals \" T \" </ where > < where > remove code2 equals \" French \" </ where >"
  },
  {
    "db_id": "singer",
    "feedback": "Display name of singer.",
    "question": "Show the names of singers and the total sales of their songs.",
    "gold_parse": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name",
    "beam": [
      [
        "SELECT T1.Name , Sum ( T2.Sales ) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T2.Singer_ID",
        -0.015256881713867188
      ],
      [
        "SELECT T1.Name , Sum ( T2.Sales ) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name",
        -4.212883949279785
      ],
      [
        "SELECT T1.Name , Sum ( T2.Sales ) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID",
        -8.414993286132812
      ],
      [
        "SELECT T1.Name , Sum ( T2.Sales ) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T2.Singer_ID HAVING Sum ( T2.Sales ) > = value",
        -10.36507797241211
      ],
      [
        "SELECT T1.Name , Sum ( T1.Net_Worth_Millions ) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T2.Singer_ID",
        -10.56865406036377
      ],
      [
        "SELECT T1.Name , Sum ( T2.Sales ) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T2.Singer_ID ORDER BY Sum ( T2.Sales ) Asc LIMIT value",
        -10.908422470092773
      ],
      [
        "SELECT Sum ( T1.Name ) , Sum ( T2.Sales ) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T2.Singer_ID",
        -12.039815902709961
      ],
      [
        "SELECT T1.Name , Sum ( T2.Sales ) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Singer_ID",
        -12.157923698425293
      ],
      [
        "SELECT T1.Name , Sum ( T2.Sales ) , Sum ( T2.Sales ) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T2.Singer_ID",
        -12.374077796936035
      ],
      [
        "SELECT T1.Name , Avg ( T2.Sales ) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T2.Singer_ID",
        -12.735060691833496
      ],
      [
        "SELECT T1.Name , Count ( * ) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T2.Singer_ID",
        -12.757074356079102
      ],
      [
        "SELECT T1.Name , Sum ( T2.Sales ) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T2.Singer_ID HAVING Sum ( DISTINCT T2.Title ) > = value",
        -13.143095016479492
      ],
      [
        "SELECT T1.Name , Sum ( T2.Sales ) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Title = value GROUP BY T1.Name",
        -13.642508506774902
      ],
      [
        "SELECT T1.Name , Sum ( T2.Sales ) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T2.Singer_ID HAVING Sum ( T2.Title ) = value",
        -13.926532745361328
      ],
      [
        "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T2.Singer_ID",
        -14.118297576904297
      ],
      [
        "SELECT Name , Sum ( Net_Worth_Millions ) FROM singer GROUP BY Name",
        -14.346914291381836
      ],
      [
        "SELECT Count ( * ) , Sum ( Sales ) FROM song GROUP BY Singer_ID",
        -14.378339767456055
      ],
      [
        "SELECT Name , Count ( * ) FROM singer GROUP BY Name",
        -14.918728828430176
      ],
      [
        "SELECT T1.Name , Sum ( T2.Title ) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T2.Singer_ID",
        -15.178956985473633
      ],
      [
        "SELECT Name FROM singer GROUP BY Name",
        -15.185317993164062
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.Name , Sum ( T2.Sales ) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T2.Singer_ID",
    "predicted_parse": "SELECT T1.Name , Sum ( T2.Sales ) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T2.Singer_ID",
    "predicted_parse_explanation": [
      "Step 1: for each row in singer table , find the corresponding rows in song table",
      "Step 2: find each value of song 's singer id of the results of step 1 along with the name and summation of sales of the corresponding rows to each value"
    ],
    "template_feedback": "in step 2 , find for each value of name in place of song 's singer id .",
    "primary_span": [
      [
        4,
        9
      ]
    ],
    "secondary_span": [
      [
        10,
        17
      ]
    ],
    "edits": [
      "name",
      "singer id"
    ],
    "edits_original": "< groupBy > add name </ groupBy > < groupBy > remove singer id </ groupBy >"
  },
  {
    "db_id": "wta_1",
    "feedback": "Supersede one of the loser age with winner age .",
    "question": "Find the average age of losers and winners of all matches.",
    "gold_parse": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches",
    "beam": [
      [
        "SELECT Avg ( loser_age ) , Avg ( loser_age ) FROM matches",
        -0.3672351837158203
      ],
      [
        "SELECT Avg ( loser_age ) , Avg ( winner_age ) FROM matches",
        -1.2363462448120117
      ],
      [
        "SELECT Avg ( winner_age ) , Avg ( loser_age ) FROM matches",
        -4.761435508728027
      ],
      [
        "SELECT Avg ( winner_age ) , Avg ( winner_age ) FROM matches",
        -5.797761917114258
      ],
      [
        "SELECT Avg ( loser_age ) , Min ( loser_age ) FROM matches",
        -6.471619606018066
      ],
      [
        "SELECT Avg ( loser_age ) , Min ( winner_age ) FROM matches",
        -7.140527725219727
      ],
      [
        "SELECT Avg ( loser_age ) , Max ( loser_age ) FROM matches",
        -7.260108947753906
      ],
      [
        "SELECT Avg ( loser_age ) , Avg ( loser_entry ) FROM matches",
        -7.379436492919922
      ],
      [
        "SELECT Avg ( loser_age ) , Max ( winner_age ) FROM matches",
        -8.282241821289062
      ],
      [
        "SELECT Avg ( loser_age ) , Count ( winner_age ) FROM matches",
        -8.358356475830078
      ],
      [
        "SELECT Avg ( loser_age ) , Count ( loser_age ) FROM matches",
        -8.601640701293945
      ],
      [
        "SELECT Avg ( loser_age ) , Sum ( loser_age ) FROM matches",
        -8.601946830749512
      ],
      [
        "SELECT Avg ( loser_age ) , loser_entry FROM matches",
        -8.651355743408203
      ],
      [
        "SELECT Avg ( loser_age ) , Count ( * ) FROM matches",
        -9.363755702972412
      ],
      [
        "SELECT Avg ( loser_age ) , Sum ( winner_age ) FROM matches",
        -9.435810089111328
      ],
      [
        "SELECT Avg ( loser_age ) , Avg ( winner_rank ) FROM matches",
        -9.46120834350586
      ],
      [
        "SELECT Avg ( loser_age ) , Avg ( loser_rank ) FROM matches",
        -9.731307029724121
      ],
      [
        "SELECT Avg ( loser_age ) , Avg ( draw_size ) FROM matches",
        -10.014047622680664
      ],
      [
        "SELECT Avg ( loser_age ) , Avg ( loser_rank_points ) FROM matches",
        -10.236123085021973
      ],
      [
        "SELECT Avg ( loser_age ) FROM matches",
        -12.472309112548828
      ]
    ],
    "predicted_parse_with_values": "SELECT Avg ( loser_age ) , Avg ( loser_age ) FROM matches",
    "predicted_parse": "SELECT Avg ( loser_age ) , Avg ( loser_age ) FROM matches",
    "predicted_parse_explanation": [
      "find the average loser age and average loser age in matches table"
    ],
    "template_feedback": "additionally find average winner age .",
    "primary_span": [
      [
        0,
        5
      ]
    ],
    "secondary_span": [],
    "edits": [
      "average winner age",
      "average loser age"
    ],
    "edits_original": "< select > add average winner age </ select > < select > remove average loser age </ select >"
  },
  {
    "db_id": "battle_death",
    "feedback": "In step 2 find note which contains the word 'east'.",
    "question": "What are the notes of the death events which has substring 'East'?",
    "gold_parse": "SELECT note FROM death WHERE note LIKE '%East%'",
    "beam": [
      [
        "SELECT T3.note FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle JOIN death AS T3 ON T2.id = T3.caused_by_ship_id WHERE T1.date LIKE value",
        -0.50830078125
      ],
      [
        "SELECT T2.note FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id WHERE T1.name LIKE value",
        -1.3546686172485352
      ],
      [
        "SELECT note FROM death WHERE note LIKE value",
        -2.4063987731933594
      ],
      [
        "SELECT T3.note FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle JOIN death AS T3 ON T2.id = T3.caused_by_ship_id WHERE T1.name LIKE value",
        -3.3998630046844482
      ],
      [
        "SELECT T2.note FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id WHERE T1.location LIKE value",
        -4.846065521240234
      ],
      [
        "SELECT note FROM death WHERE killed LIKE value",
        -5.601365566253662
      ],
      [
        "SELECT T3.note FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle JOIN death AS T3 ON T2.id = T3.caused_by_ship_id WHERE T1.result LIKE value",
        -5.7336554527282715
      ],
      [
        "SELECT note FROM death WHERE injured LIKE value",
        -6.446225166320801
      ],
      [
        "SELECT T2.note FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id WHERE T1.tonnage LIKE value",
        -7.835931777954102
      ],
      [
        "SELECT T2.note FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id WHERE T1.disposition_of_ship LIKE value",
        -9.110258102416992
      ],
      [
        "SELECT T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.name LIKE value",
        -10.902502059936523
      ],
      [
        "SELECT T3.note FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle JOIN death AS T3 ON T2.id = T3.caused_by_ship_id WHERE T1.latin_commander LIKE value",
        -11.212730407714844
      ],
      [
        "SELECT date FROM battle WHERE date LIKE value",
        -11.600893020629883
      ],
      [
        "SELECT T3.note FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle JOIN death AS T3 ON T2.id = T3.caused_by_ship_id WHERE T1.bulgarian_commander LIKE value",
        -12.61921215057373
      ],
      [
        "SELECT T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle JOIN death AS T3 ON T2.id = T3.caused_by_ship_id WHERE T3.note LIKE value",
        -12.915266513824463
      ],
      [
        "SELECT note FROM death WHERE killed BETWEEN value AND value",
        -12.957043170928955
      ],
      [
        "SELECT date FROM battle WHERE name LIKE value",
        -13.140608549118042
      ],
      [
        "SELECT note FROM death WHERE injured BETWEEN value AND value",
        -13.98301887512207
      ],
      [
        "SELECT T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.location LIKE value",
        -14.052813053131104
      ],
      [
        "SELECT note FROM death",
        -15.960968017578125
      ]
    ],
    "predicted_parse_with_values": "SELECT T3.note FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle JOIN death AS T3 ON T2.id = T3.caused_by_ship_id WHERE T1.date LIKE \"East\"",
    "predicted_parse": "SELECT T3.note FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle JOIN death AS T3 ON T2.id = T3.caused_by_ship_id WHERE T1.date LIKE value",
    "predicted_parse_explanation": [
      "Step 1: for each row in battle table , find the corresponding rows in ship table and in death table",
      "Step 2: find the note of the results of step 1 whose date like East"
    ],
    "template_feedback": "in step 1 , do not use the battle table and ship table . in step 2 , consider the note like % East % conditions in place of the date like East conditions .",
    "primary_span": [
      [
        4,
        13
      ],
      [
        18,
        25
      ]
    ],
    "secondary_span": [
      [
        4,
        13
      ],
      [
        26,
        34
      ]
    ],
    "edits": [
      "battle",
      "ship",
      "note like \"%East%\"",
      "date like \"East\""
    ],
    "edits_original": "< from > remove battle </ from > < from > remove ship </ from > < where > add note like \" % East % \" </ where > < where > remove date like \" East \" </ where >"
  },
  {
    "db_id": "flight_2",
    "feedback": "Step 1 switch airports with flights , Step 2 switch airports's country with airlines's airline and airline with destination airport .",
    "question": "How many 'United Airlines' flights go to Airport 'ASY'?",
    "gold_parse": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"",
    "beam": [
      [
        "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value AND T1.Airline = value",
        -0.027840614318847656
      ],
      [
        "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.CountryAbbrev = value AND T1.Airline = value",
        -3.670750617980957
      ],
      [
        "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value AND T1.Abbreviation = value",
        -6.874447822570801
      ],
      [
        "SELECT Count ( * ) FROM airlines WHERE Country = value AND Airline = value",
        -7.052338600158691
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE Country = value AND AirportName = value",
        -9.9996337890625
      ],
      [
        "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.CountryAbbrev = value AND T1.Abbreviation = value",
        -10.291191101074219
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE Country = value AND CountryAbbrev = value",
        -12.181641578674316
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE Country = value",
        -12.244850158691406
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE CountryAbbrev = value AND AirportName = value",
        -13.382431983947754
      ],
      [
        "SELECT Count ( Count ( * ) ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value AND T1.Airline = value",
        -13.733711242675781
      ],
      [
        "SELECT Count ( * ) FROM airlines WHERE Country = value AND Abbreviation = value",
        -13.766593933105469
      ],
      [
        "SELECT Count ( * ) , T2.Country FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value AND T1.Airline = value",
        -13.768961906433105
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value AND T1.Airline = value",
        -14.406815528869629
      ],
      [
        "SELECT Count ( * ) , T2.CountryAbbrev FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value AND T1.Airline = value",
        -14.80099105834961
      ],
      [
        "SELECT Avg ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value AND T1.Airline = value",
        -14.987470149993896
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE CountryAbbrev = value AND CountryAbbrev = value",
        -15.177350044250488
      ],
      [
        "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country IN ( SELECT * FROM airports AS T2 WHERE T2.Country = value ) AND T1.Airline = value",
        -15.511722087860107
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE CountryAbbrev = value",
        -15.689804077148438
      ],
      [
        "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.CountryAbbrev IN ( SELECT * FROM airports AS T2 WHERE T2.Country = value ) AND T1.Airline = value",
        -15.765821933746338
      ],
      [
        "SELECT Count ( * ) FROM airlines",
        -18.97757911682129
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = \"United Airlines\" AND T1.Airline = \"ASY\"",
    "predicted_parse": "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value AND T1.Airline = value",
    "predicted_parse_explanation": [
      "Step 1: for each row in airlines table , find the corresponding rows in airports table",
      "Step 2: find the number of rows of the results of step 1 whose airports 's country equals United Airlines and airline name equals ASY"
    ],
    "template_feedback": "in step 1 , use flights table in place of airports table in step 2 , consider the destination airport equals ASY and airlines 's airline name equals United Airlines conditions in place of the airports 's country equals United Airlines and airlines 's airline name equals ASY conditions .",
    "primary_span": [
      [
        4,
        6
      ],
      [
        16,
        30
      ]
    ],
    "secondary_span": [
      [
        7,
        11
      ],
      [
        31,
        49
      ]
    ],
    "edits": [
      "flights",
      "airports",
      "airline name equals \"United Airlines\"",
      "destination airport equals \"ASY\"",
      "country equals \"United Airlines\"",
      "airline name equals \"ASY\""
    ],
    "edits_original": "< from > add flights </ from > < from > remove airports </ from > < where > add airline name equals \" United Airlines \" </ where > < where > add destination airport equals \" ASY \" </ where > < where > remove country equals \" United Airlines \" </ where > < where > remove airline name equals \" ASY \" </ where >"
  },
  {
    "db_id": "world_1",
    "feedback": "determine the number of rows of country table, where continent is asia.",
    "question": "how many countries are in Asia?",
    "gold_parse": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"",
    "beam": [
      [
        "SELECT Count ( * ) FROM city",
        -0.02012157440185547
      ],
      [
        "SELECT Count ( * ) FROM country WHERE Continent = value",
        -4.068818092346191
      ],
      [
        "SELECT Count ( * ) FROM country WHERE Name = value",
        -6.64515495300293
      ],
      [
        "SELECT Count ( DISTINCT Continent ) FROM country",
        -6.849464416503906
      ],
      [
        "SELECT Count ( * ) FROM country WHERE Region = value",
        -8.08029842376709
      ],
      [
        "SELECT Count ( Continent ) FROM country",
        -9.719619750976562
      ],
      [
        "SELECT Count ( * ) FROM country WHERE LocalName = value",
        -10.168553829193115
      ],
      [
        "SELECT Count ( * ) FROM country GROUP BY Continent",
        -11.73190689086914
      ],
      [
        "SELECT Count ( DISTINCT Continent ) FROM country WHERE Continent = value",
        -11.766122341156006
      ],
      [
        "SELECT Count ( * ) FROM country GROUP BY Continent HAVING Continent = value",
        -12.158723831176758
      ],
      [
        "SELECT Count ( DISTINCT GovernmentForm ) FROM country",
        -12.651534080505371
      ],
      [
        "SELECT Count ( * ) FROM country GROUP BY Continent HAVING Name = value",
        -12.70542860031128
      ],
      [
        "SELECT Count ( DISTINCT Continent ) FROM country WHERE Name = value",
        -12.751752376556396
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM city",
        -13.050773620605469
      ],
      [
        "SELECT Count ( * ) FROM city AS T1 EXCEPT SELECT T2.Continent FROM country AS T2 WHERE T2.Continent = value",
        -13.243257999420166
      ],
      [
        "SELECT Count ( * ) FROM country GROUP BY Continent HAVING LocalName = value",
        -13.451062202453613
      ],
      [
        "SELECT Sum ( Continent ) FROM country",
        -13.63771677017212
      ],
      [
        "SELECT Count ( * ) FROM city EXCEPT SELECT Count ( * ) FROM city",
        -13.723264694213867
      ],
      [
        "SELECT Count ( * ) , Continent FROM country",
        -13.845343589782715
      ],
      [
        "SELECT Continent FROM country",
        -15.219895362854004
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM city",
    "predicted_parse": "SELECT Count ( * ) FROM city",
    "predicted_parse_explanation": [
      "find the number of rows in city table"
    ],
    "template_feedback": "use country table in place of city table . additionally make sure that continent equals Asia .",
    "primary_span": [
      [
        0,
        2
      ],
      [
        9,
        16
      ]
    ],
    "secondary_span": [
      [
        3,
        8
      ]
    ],
    "edits": [
      "country",
      "city",
      "continent equals \"Asia\""
    ],
    "edits_original": "< from > add country </ from > < from > remove city </ from > < where > add continent equals \" Asia \" </ where >"
  },
  {
    "db_id": "car_1",
    "feedback": "Switch country with country name .",
    "question": "How many car models are produced in the usa?",
    "gold_parse": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'",
    "beam": [
      [
        "SELECT Count ( * ) FROM car_makers WHERE Country = value",
        -0.0012712478637695312
      ],
      [
        "SELECT Count ( * ) FROM model_list WHERE Model = value",
        -7.1683244705200195
      ],
      [
        "SELECT Count ( DISTINCT T2.Model ) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker WHERE T1.Country = value",
        -7.956657886505127
      ],
      [
        "SELECT Count ( * ) FROM continents",
        -8.922123908996582
      ],
      [
        "SELECT Count ( * ) FROM continents WHERE Continent = value",
        -11.391804695129395
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM car_makers WHERE Country = value",
        -14.399866104125977
      ],
      [
        "SELECT T2.Model FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker WHERE T1.Country = value",
        -14.745175838470459
      ],
      [
        "SELECT Count ( DISTINCT T3.Model ) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model WHERE T1.Country = value",
        -14.87405014038086
      ],
      [
        "SELECT Count ( DISTINCT Model ) FROM model_list WHERE Model = value",
        -15.033488750457764
      ],
      [
        "SELECT Count ( * ) FROM car_makers WHERE FullName = value",
        -15.362373352050781
      ],
      [
        "SELECT Count ( * ) FROM cars_data WHERE MPG = value",
        -15.389960289001465
      ],
      [
        "SELECT Count ( * ) FROM car_names WHERE Model = value",
        -15.697249412536621
      ],
      [
        "SELECT Count ( DISTINCT T2.ModelId ) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker WHERE T1.Country = value",
        -15.917411804199219
      ],
      [
        "SELECT Count ( DISTINCT Model ) FROM model_list",
        -15.984850883483887
      ],
      [
        "SELECT Count ( * ) FROM car_makers WHERE Country LIKE value",
        -16.02351140975952
      ],
      [
        "SELECT Count ( * ) FROM cars_data WHERE Horsepower = value",
        -16.067770957946777
      ],
      [
        "SELECT Avg ( T2.Model ) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker WHERE T1.Country = value",
        -16.084126472473145
      ],
      [
        "SELECT Count ( Count ( * ) ) FROM car_makers WHERE Country = value",
        -16.08740234375
      ],
      [
        "SELECT Count ( * ) , T2.Model FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker WHERE T1.Country = value",
        -16.12897264957428
      ],
      [
        "SELECT Avg ( * ) FROM car_makers WHERE Country = value",
        -16.148034512996674
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM car_makers WHERE Country = \"usa\"",
    "predicted_parse": "SELECT Count ( * ) FROM car_makers WHERE Country = value",
    "predicted_parse_explanation": [
      "find the number of rows in car makers table whose country equals usa"
    ],
    "template_feedback": "additionally use the information from the countries table and model list table besides the car makers table . consider the country name equals usa conditions in place of the country equals usa conditions .",
    "primary_span": [
      [
        0,
        11
      ],
      [
        18,
        24
      ]
    ],
    "secondary_span": [
      [
        12,
        17
      ],
      [
        25,
        33
      ]
    ],
    "edits": [
      "model list",
      "countries",
      "country name equals \"usa\"",
      "country equals \"usa\""
    ],
    "edits_original": "< from > add model list </ from > < from > add countries </ from > < where > add country name equals \" usa \" </ where > < where > remove country equals \" usa \" </ where >"
  },
  {
    "db_id": "world_1",
    "feedback": "In step 1 , determine population for each country's name name and in step 2 remove continent .",
    "question": "Return the names of the 3 countries with the fewest people.",
    "gold_parse": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3",
    "beam": [
      [
        "SELECT Name , Continent FROM country GROUP BY Continent ORDER BY Count ( * ) Asc LIMIT value",
        -0.2802543640136719
      ],
      [
        "SELECT Name FROM country GROUP BY Continent ORDER BY Count ( * ) Asc LIMIT value",
        -1.4250402450561523
      ],
      [
        "SELECT Continent FROM country GROUP BY Continent ORDER BY Count ( * ) Asc LIMIT value",
        -6.001697540283203
      ],
      [
        "SELECT Continent , Continent FROM country GROUP BY Continent ORDER BY Count ( * ) Asc LIMIT value",
        -7.217562675476074
      ],
      [
        "SELECT Name , Continent FROM country GROUP BY GovernmentForm ORDER BY Count ( * ) Asc LIMIT value",
        -7.838656902313232
      ],
      [
        "SELECT LocalName , Continent FROM country GROUP BY Continent ORDER BY Count ( * ) Asc LIMIT value",
        -9.379762649536133
      ],
      [
        "SELECT Name FROM country GROUP BY GovernmentForm ORDER BY Count ( * ) Asc LIMIT value",
        -9.952750205993652
      ],
      [
        "SELECT Name , Continent , Continent FROM country GROUP BY Continent ORDER BY Count ( * ) Asc LIMIT value",
        -10.241634368896484
      ],
      [
        "SELECT Name , Continent FROM country GROUP BY LocalName ORDER BY Count ( * ) Asc LIMIT value",
        -10.863531112670898
      ],
      [
        "SELECT Name , Continent FROM country GROUP BY Continent",
        -11.092048645019531
      ],
      [
        "SELECT LocalName FROM country GROUP BY Continent ORDER BY Count ( * ) Asc LIMIT value",
        -11.681741714477539
      ],
      [
        "SELECT Name , Continent FROM country GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value",
        -11.757161140441895
      ],
      [
        "SELECT Name , Continent FROM country GROUP BY Continent ORDER BY Count ( * ) Asc",
        -11.872711181640625
      ],
      [
        "SELECT Continent , Count ( * ) FROM country GROUP BY Continent ORDER BY Count ( * ) Asc LIMIT value",
        -12.35468864440918
      ],
      [
        "SELECT Name FROM country GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value",
        -12.361461639404297
      ],
      [
        "SELECT Name FROM country ORDER BY Continent Asc LIMIT value",
        -12.379600048065186
      ],
      [
        "SELECT Name FROM country GROUP BY Continent , Continent ORDER BY Count ( * ) Asc LIMIT value",
        -12.649734020233154
      ],
      [
        "SELECT Name FROM country GROUP BY LocalName ORDER BY Count ( * ) Asc LIMIT value",
        -12.924910545349121
      ],
      [
        "SELECT Name FROM country GROUP BY Continent ORDER BY Count ( * ) Asc",
        -13.033173561096191
      ],
      [
        "SELECT Name FROM country ORDER BY Name Asc LIMIT value",
        -13.421596050262451
      ]
    ],
    "predicted_parse_with_values": "SELECT Name , Continent FROM country GROUP BY Continent ORDER BY Count ( * ) Asc LIMIT 3",
    "predicted_parse": "SELECT Name , Continent FROM country GROUP BY Continent ORDER BY Count ( * ) Asc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of continent in country table",
      "Step 2: find the name and continent in country table ordered ascending by the results of step 1",
      "Step 3: only show the first 3 rows of the results"
    ],
    "template_feedback": "in step 1 , do not find for each value of continent . in step 2 , do not return continent . order the results by population in place of number of rows .",
    "primary_span": [
      [
        4,
        12
      ],
      [
        17,
        21
      ],
      [
        22,
        26
      ]
    ],
    "secondary_span": [
      [
        27,
        33
      ]
    ],
    "edits": [
      "continent",
      "continent",
      "population",
      "number of rows"
    ],
    "edits_original": "< select > remove continent </ select > < groupBy > remove continent </ groupBy > < orderBy > add population </ orderBy > < orderBy > remove number of rows </ orderBy >"
  },
  {
    "db_id": "network_1",
    "feedback": "Looking for number of rows of friend table for Kyle.",
    "question": "How many friends does the high school student Kyle have?",
    "gold_parse": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
    "beam": [
      [
        "SELECT Count ( * ) FROM Highschooler WHERE grade = value",
        -0.0006866455078125
      ],
      [
        "SELECT Count ( * ) FROM Highschooler WHERE name = value",
        -7.307183265686035
      ],
      [
        "SELECT Count ( DISTINCT T2.friend_id ) FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id WHERE T1.grade = value",
        -11.46265983581543
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM Highschooler WHERE grade = value",
        -13.425863265991211
      ],
      [
        "SELECT Count ( * ) FROM Highschooler WHERE grade = value AND name = value",
        -14.435830116271973
      ],
      [
        "SELECT Count ( * ) FROM Highschooler WHERE grade = value AND grade = value",
        -14.7753267288208
      ],
      [
        "SELECT Count ( * ) FROM Highschooler WHERE name = grade",
        -15.07306718826294
      ],
      [
        "SELECT Avg ( grade ) FROM Highschooler WHERE grade = value",
        -15.13945198059082
      ],
      [
        "SELECT Count ( * ) FROM Highschooler WHERE grade > value",
        -15.414151191711426
      ],
      [
        "SELECT grade FROM Highschooler WHERE grade = value",
        -15.535077095031738
      ],
      [
        "SELECT Count ( * ) , grade FROM Highschooler WHERE grade = value",
        -15.737211227416992
      ],
      [
        "SELECT Avg ( * ) FROM Highschooler WHERE grade = value",
        -15.998160123825073
      ],
      [
        "SELECT T2.friend_id FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id WHERE T1.grade = value",
        -16.024281978607178
      ],
      [
        "SELECT Count ( * ) FROM Highschooler",
        -16.197800636291504
      ],
      [
        "SELECT Avg ( T2.friend_id ) FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id WHERE T1.grade = value",
        -16.358247876167297
      ],
      [
        "SELECT Count ( DISTINCT name ) FROM Highschooler WHERE grade = value",
        -16.40259552001953
      ],
      [
        "SELECT Count ( DISTINCT ID ) FROM Highschooler WHERE grade = value",
        -16.568938732147217
      ],
      [
        "SELECT Count ( Count ( * ) ) FROM Highschooler WHERE grade = value",
        -16.60647487640381
      ],
      [
        "SELECT Count ( DISTINCT T2.student_id ) FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id WHERE T1.grade = value",
        -16.792075157165527
      ],
      [
        "SELECT Sum ( * ) FROM Highschooler WHERE grade = value",
        -17.05428171157837
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM Highschooler WHERE grade = \"Kyle\"",
    "predicted_parse": "SELECT Count ( * ) FROM Highschooler WHERE grade = value",
    "predicted_parse_explanation": [
      "find the number of rows in high schooler table whose grade equals Kyle"
    ],
    "template_feedback": "additionally use the information from the friend table besides the high schooler table . consider the name equals Kyle conditions in place of the grade equals Kyle conditions .",
    "primary_span": [
      [
        0,
        7
      ],
      [
        14,
        19
      ]
    ],
    "secondary_span": [
      [
        8,
        13
      ],
      [
        20,
        28
      ]
    ],
    "edits": [
      "friend",
      "name equals \"Kyle\"",
      "grade equals \"Kyle\""
    ],
    "edits_original": "< from > add friend </ from > < where > add name equals \" Kyle \" </ where > < where > remove grade equals \" Kyle \" </ where >"
  },
  {
    "db_id": "student_transcripts_tracking",
    "feedback": "Make sure that student are enrolled in Bachelor degree programs.",
    "question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?",
    "gold_parse": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'",
    "beam": [
      [
        "SELECT first_name , middle_name , last_name FROM Students",
        -0.01981353759765625
      ],
      [
        "SELECT T2.first_name , T2.middle_name , T2.last_name FROM Semesters AS T1 JOIN Students AS T2 JOIN Student_Enrolment AS T3 ON T1.semester_id = T3.semester_id AND T3.student_id = T2.student_id WHERE T1.semester_name = value",
        -4.82416296005249
      ],
      [
        "SELECT T2.first_name , T2.middle_name , T2.last_name FROM Courses AS T1 JOIN Students AS T2 JOIN Student_Enrolment AS T3 ON T3.student_id = T2.student_id JOIN Student_Enrolment_Courses AS T4 ON T1.course_id = T4.course_id AND T4.student_enrolment_id = T3.student_enrolment_id WHERE T1.course_name = value",
        -5.338443279266357
      ],
      [
        "SELECT T2.first_name , T2.middle_name , T2.last_name FROM Degree_Programs AS T1 JOIN Students AS T2 JOIN Student_Enrolment AS T3 ON T1.degree_program_id = T3.degree_program_id AND T3.student_id = T2.student_id WHERE T1.degree_summary_name = value",
        -5.4487199783325195
      ],
      [
        "SELECT first_name , middle_name , last_name FROM Students WHERE first_name = value",
        -6.382963418960571
      ],
      [
        "SELECT first_name , middle_name , last_name FROM Students WHERE middle_name = value",
        -7.679800987243652
      ],
      [
        "SELECT T2.first_name , T2.middle_name , T2.last_name FROM Semesters AS T1 JOIN Students AS T2 JOIN Student_Enrolment AS T3 ON T1.semester_id = T3.semester_id AND T3.student_id = T2.student_id WHERE T1.semester_description = value",
        -9.298354625701904
      ],
      [
        "SELECT first_name , middle_name , last_name FROM Students EXCEPT SELECT first_name , middle_name , last_name FROM Students",
        -10.793282508850098
      ],
      [
        "SELECT first_name , middle_name , last_name FROM Students WHERE date_first_registered = value",
        -10.85253381729126
      ],
      [
        "SELECT first_name , middle_name , last_name FROM Students ORDER BY last_name Asc LIMIT value",
        -10.880986392498016
      ],
      [
        "SELECT T2.first_name , T2.middle_name , T2.last_name , T1.course_name FROM Courses AS T1 JOIN Students AS T2 JOIN Student_Enrolment AS T3 ON T3.student_id = T2.student_id JOIN Student_Enrolment_Courses AS T4 ON T1.course_id = T4.course_id AND T4.student_enrolment_id = T3.student_enrolment_id",
        -10.8824782371521
      ],
      [
        "SELECT first_name , middle_name , last_name FROM Students ORDER BY first_name Asc",
        -11.086626708507538
      ],
      [
        "SELECT first_name , middle_name , last_name FROM Students WHERE other_student_details = value",
        -11.312886714935303
      ],
      [
        "SELECT T3.first_name , T3.middle_name , T3.last_name FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id JOIN Students AS T3 JOIN Student_Enrolment AS T4 ON T2.degree_program_id = T4.degree_program_id AND T4.student_id = T3.student_id WHERE T1.department_name = value",
        -11.370729446411133
      ],
      [
        "SELECT first_name , middle_name , last_name FROM Students UNION SELECT middle_name FROM Students",
        -11.862025260925293
      ],
      [
        "SELECT T2.first_name , T2.middle_name , T2.last_name FROM Degree_Programs AS T1 JOIN Students AS T2 JOIN Student_Enrolment AS T3 ON T1.degree_program_id = T3.degree_program_id AND T3.student_id = T2.student_id WHERE T1.degree_summary_description = value",
        -12.015717506408691
      ],
      [
        "SELECT first_name , middle_name FROM Students",
        -12.800690650939941
      ],
      [
        "SELECT Count ( first_name ) , middle_name , last_name FROM Students",
        -14.701388359069824
      ],
      [
        "SELECT DISTINCT first_name , middle_name , last_name FROM Students",
        -14.952290534973145
      ],
      [
        "SELECT first_name , DISTINCT middle_name , last_name FROM Students",
        -16.45470428466797
      ]
    ],
    "predicted_parse_with_values": "SELECT first_name , middle_name , last_name FROM Students",
    "predicted_parse": "SELECT first_name , middle_name , last_name FROM Students",
    "predicted_parse_explanation": [
      "find the first name , middle name , last name in students table"
    ],
    "template_feedback": "additionally use the information from the degree programs table and student enrolment table besides the students table . additionally make sure that degree summary name equals Bachelor . make sure no repetition in the results .",
    "primary_span": [
      [
        0,
        12
      ],
      [
        18,
        27
      ],
      [
        28,
        35
      ]
    ],
    "secondary_span": [
      [
        13,
        17
      ]
    ],
    "edits": [
      "distinct",
      "student enrolment",
      "degree programs",
      "degree summary name equals \"Bachelor\""
    ],
    "edits_original": "< select > add distinct </ select > < from > add student enrolment </ from > < from > add degree programs </ from > < where > add degree summary name equals \" Bachelor \" </ where >"
  },
  {
    "db_id": "flight_2",
    "feedback": "In step 1 Exchange airlines table with flights table .",
    "question": "Which airline has most number of flights?",
    "gold_parse": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1",
    "beam": [
      [
        "SELECT Airline FROM airlines GROUP BY Airline ORDER BY Count ( * ) Desc LIMIT value",
        -0.015684127807617188
      ],
      [
        "SELECT Airline FROM airlines GROUP BY Abbreviation ORDER BY Count ( * ) Desc LIMIT value",
        -4.170345306396484
      ],
      [
        "SELECT Airline FROM airlines GROUP BY Airline ORDER BY Count ( * ) Asc LIMIT value",
        -9.265335083007812
      ],
      [
        "SELECT Airline FROM airlines GROUP BY Airline ORDER BY Count ( * ) Desc",
        -12.379640579223633
      ],
      [
        "SELECT Airline FROM airlines GROUP BY Abbreviation ORDER BY Count ( * ) Asc LIMIT value",
        -13.049072265625
      ],
      [
        "SELECT Airline FROM airlines GROUP BY uid ORDER BY Count ( * ) Desc LIMIT value",
        -13.2946195602417
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 GROUP BY T2.Airline ORDER BY Count ( * ) Desc LIMIT value",
        -13.43114948272705
      ],
      [
        "SELECT Airline FROM airlines GROUP BY Airline",
        -13.79532241821289
      ],
      [
        "SELECT Airline , Abbreviation FROM airlines GROUP BY Airline ORDER BY Count ( * ) Desc LIMIT value",
        -14.19135332107544
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 GROUP BY T2.FlightNo ORDER BY Count ( * ) Desc LIMIT value",
        -14.468985557556152
      ],
      [
        "SELECT DISTINCT Airline FROM airlines GROUP BY Airline ORDER BY Count ( * ) Desc LIMIT value",
        -14.567421913146973
      ],
      [
        "SELECT Airline FROM airlines ORDER BY Airline Desc LIMIT value",
        -14.655847549438477
      ],
      [
        "SELECT Airline FROM airlines ORDER BY Abbreviation Desc LIMIT value",
        -14.951091289520264
      ],
      [
        "SELECT Airline FROM airlines GROUP BY Airline HAVING Count ( * ) = value",
        -15.027966499328613
      ],
      [
        "SELECT Airline FROM airlines GROUP BY Country ORDER BY Count ( * ) Desc LIMIT value",
        -15.079294204711914
      ],
      [
        "SELECT DISTINCT Airline FROM airlines GROUP BY Airline ORDER BY Count ( * ) Desc LIMIT value",
        -15.523283004760742
      ],
      [
        "SELECT Airline FROM airlines GROUP BY Airline ORDER BY Sum ( * ) Desc LIMIT value",
        -15.746233463287354
      ],
      [
        "SELECT Airline FROM airlines GROUP BY Airline ORDER BY Avg ( * ) Desc LIMIT value",
        -15.747976303100586
      ],
      [
        "SELECT Airline , Abbreviation FROM airlines GROUP BY Abbreviation ORDER BY Count ( * ) Desc LIMIT value",
        -15.91222620010376
      ],
      [
        "SELECT Airline FROM airlines GROUP BY Airline ORDER BY Count ( DISTINCT * ) Desc LIMIT value",
        -16.1131010055542
      ]
    ],
    "predicted_parse_with_values": "SELECT Airline FROM airlines GROUP BY Airline ORDER BY Count ( * ) Desc LIMIT 1",
    "predicted_parse": "SELECT Airline FROM airlines GROUP BY Airline ORDER BY Count ( * ) Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of airline name in airlines table",
      "Step 2: find the airline name in airlines table with largest value in the results of step 1"
    ],
    "template_feedback": "in step 1 , additionally use the information from the flights table besides the airlines table .",
    "primary_span": [
      [
        4,
        11
      ]
    ],
    "secondary_span": [
      [
        12,
        16
      ]
    ],
    "edits": [
      "flights"
    ],
    "edits_original": "< from > add flights </ from >"
  },
  {
    "db_id": "orchestra",
    "feedback": "It should be year of work , not year of founded in step 2.",
    "question": "What is the name of the conductor who has worked the greatest number of years?",
    "gold_parse": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
    "beam": [
      [
        "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID ORDER BY T2.Year_of_Founded Desc LIMIT value",
        -1.71661376953125e-05
      ],
      [
        "SELECT Name FROM conductor ORDER BY Age Desc LIMIT value",
        -12.4425687789917
      ],
      [
        "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID ORDER BY T2.Year_of_Founded Desc",
        -12.508151054382324
      ],
      [
        "SELECT Name FROM conductor ORDER BY Year_of_Work Desc LIMIT value",
        -12.832396507263184
      ],
      [
        "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY Count ( * ) Desc LIMIT value",
        -12.874407768249512
      ],
      [
        "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Year_of_Founded = ( SELECT Max ( T2.Year_of_Founded ) FROM orchestra AS T2 ) ORDER BY T2.Year_of_Founded Desc LIMIT value",
        -13.052877426147461
      ],
      [
        "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY Sum ( T2.Year_of_Founded ) Desc LIMIT value",
        -13.191286087036133
      ],
      [
        "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID ORDER BY T2.Year_of_Founded Asc LIMIT value",
        -14.465266227722168
      ],
      [
        "SELECT T1.Name FROM conductor AS T1 UNION SELECT Max ( T2.Year_of_Founded ) FROM orchestra AS T2",
        -14.508699417114258
      ],
      [
        "SELECT Name FROM conductor",
        -14.790407180786133
      ],
      [
        "SELECT DISTINCT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID ORDER BY T2.Year_of_Founded Desc LIMIT value",
        -14.935866355895996
      ],
      [
        "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Year_of_Founded = ( SELECT Max ( T2.Year_of_Founded ) FROM orchestra AS T2 )",
        -14.953874588012695
      ],
      [
        "SELECT T1.Name FROM conductor AS T1 UNION SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Year_of_Founded = ( SELECT Max ( T2.Year_of_Founded ) FROM orchestra AS T2 )",
        -15.204934120178223
      ],
      [
        "SELECT T1.Name , T2.Record_Company FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID ORDER BY T2.Year_of_Founded Desc LIMIT value",
        -15.374616146087646
      ],
      [
        "SELECT T1.Name , T1.Age FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID ORDER BY T2.Year_of_Founded Desc LIMIT value",
        -15.459120273590088
      ],
      [
        "SELECT T1.Name , T2.Year_of_Founded FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID ORDER BY T2.Year_of_Founded Desc LIMIT value",
        -15.632134675979614
      ],
      [
        "SELECT DISTINCT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID ORDER BY T2.Year_of_Founded Desc LIMIT value",
        -16.221027374267578
      ],
      [
        "SELECT Name FROM conductor ORDER BY Count ( * ) Desc LIMIT value",
        -16.263339042663574
      ],
      [
        "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID ORDER BY DISTINCT T2.Year_of_Founded Desc LIMIT value",
        -16.28806781768799
      ],
      [
        "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded Desc LIMIT value",
        -17.425264358520508
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID ORDER BY T2.Year_of_Founded Desc LIMIT 1",
    "predicted_parse": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID ORDER BY T2.Year_of_Founded Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: for each row in conductor table , find the corresponding rows in orchestra table",
      "Step 2: find the name of the results of step 1 with largest value of year of founded"
    ],
    "template_feedback": "in step 1 , do not use the orchestra table . in step 2 , order the results by year of work in place of year of founded .",
    "primary_span": [
      [
        4,
        10
      ],
      [
        15,
        21
      ]
    ],
    "secondary_span": [
      [
        4,
        10
      ],
      [
        22,
        28
      ]
    ],
    "edits": [
      "orchestra",
      "year of work",
      "year of founded"
    ],
    "edits_original": "< from > remove orchestra </ from > < orderBy > add year of work </ orderBy > < orderBy > remove year of founded </ orderBy >"
  },
  {
    "db_id": "dog_kennels",
    "feedback": "Search for the number of rows in treatments table .",
    "question": "Count the number of dogs that went through a treatment.",
    "gold_parse": "SELECT count(DISTINCT dog_id) FROM Treatments",
    "beam": [
      [
        "SELECT Count ( * ) FROM Breeds",
        -0.004528522491455078
      ],
      [
        "SELECT Count ( DISTINCT dog_id ) FROM Treatments",
        -5.614304065704346
      ],
      [
        "SELECT Count ( DISTINCT weight ) FROM Dogs",
        -7.509397983551025
      ],
      [
        "SELECT Count ( DISTINCT treatment_id ) FROM Treatments",
        -9.490562438964844
      ],
      [
        "SELECT Count ( * ) FROM Treatments WHERE treatment_type_code = value",
        -9.546261072158813
      ],
      [
        "SELECT Count ( treatment_type_code ) FROM Treatment_Types",
        -9.769951820373535
      ],
      [
        "SELECT Count ( DISTINCT treatment_type_code ) FROM Treatment_Types",
        -10.317852020263672
      ],
      [
        "SELECT Count ( DISTINCT treatment_type_description ) FROM Treatment_Types",
        -11.499871730804443
      ],
      [
        "SELECT Count ( DISTINCT treatment_type_code ) FROM Treatments",
        -11.789771556854248
      ],
      [
        "SELECT Sum ( weight ) FROM Dogs",
        -12.647541761398315
      ],
      [
        "SELECT Count ( DISTINCT gender ) FROM Dogs",
        -13.275900840759277
      ],
      [
        "SELECT Count ( DISTINCT age ) FROM Dogs",
        -13.501856327056885
      ],
      [
        "SELECT Count ( DISTINCT state ) FROM Owners",
        -13.573589324951172
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM Breeds",
        -13.57770586013794
      ],
      [
        "SELECT Count ( DISTINCT abandoned_yn ) FROM Dogs",
        -14.041873931884766
      ],
      [
        "SELECT Count ( DISTINCT state ) FROM Professionals",
        -14.116039276123047
      ],
      [
        "SELECT Count ( size_description ) FROM Sizes",
        -14.13459587097168
      ],
      [
        "SELECT Count ( treatment_type_description ) FROM Treatment_Types",
        -14.270955085754395
      ],
      [
        "SELECT Count ( DISTINCT date_of_birth ) FROM Dogs",
        -14.374521255493164
      ],
      [
        "SELECT Count ( city ) FROM Owners",
        -14.380401611328125
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM Breeds",
    "predicted_parse": "SELECT Count ( * ) FROM Breeds",
    "predicted_parse_explanation": [
      "find the number of rows in breeds table"
    ],
    "template_feedback": "use treatments table in place of breeds table . find number of different dog id in place of number of rows .",
    "primary_span": [
      [
        0,
        2
      ],
      [
        9,
        14
      ]
    ],
    "secondary_span": [
      [
        3,
        8
      ],
      [
        15,
        21
      ]
    ],
    "edits": [
      "number of distinct dog id",
      "number of rows",
      "treatments",
      "breeds"
    ],
    "edits_original": "< select > add number of distinct dog id </ select > < select > remove number of rows </ select > < from > add treatments </ from > < from > remove breeds </ from >"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "feedback": "You need to use table of documents.",
    "question": "How many documents do we have?",
    "gold_parse": "SELECT count(*) FROM Documents",
    "beam": [
      [
        "SELECT Count ( * ) FROM Ref_Template_Types",
        -1.9073486328125e-05
      ],
      [
        "SELECT Sum ( * ) FROM Ref_Template_Types",
        -12.052688002586365
      ],
      [
        "SELECT Count ( * ) FROM Documents WHERE Document_Name = value",
        -12.987147569656372
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM Ref_Template_Types",
        -13.333991050720215
      ],
      [
        "SELECT Count ( Count ( * ) ) FROM Ref_Template_Types",
        -14.091165542602539
      ],
      [
        "SELECT Avg ( * ) FROM Ref_Template_Types",
        -14.094772458076477
      ],
      [
        "SELECT Count ( * ) FROM Paragraphs GROUP BY Document_ID",
        -14.481115341186523
      ],
      [
        "SELECT Sum ( Document_Name ) FROM Documents",
        -14.674625396728516
      ],
      [
        "SELECT Count ( * ) , Document_Name FROM Documents",
        -14.745999217033386
      ],
      [
        "SELECT Count ( * ) , Document_ID FROM Paragraphs",
        -15.097939372062683
      ],
      [
        "SELECT Count ( * ) , Template_ID FROM Documents",
        -15.695263266563416
      ],
      [
        "SELECT Count ( * ) FROM Documents ORDER BY Document_Name Desc",
        -15.83294153213501
      ],
      [
        "SELECT Count ( * ) FROM Documents ORDER BY Document_ID Desc",
        -15.884557723999023
      ],
      [
        "SELECT Sum ( Document_ID ) FROM Documents",
        -16.46923303604126
      ],
      [
        "SELECT Max ( * ) FROM Ref_Template_Types",
        -17.003360748291016
      ],
      [
        "SELECT Count ( DISTINCT * ) FROM Ref_Template_Types",
        -17.02701187133789
      ],
      [
        "SELECT Count ( * ) FROM Ref_Template_Types LIMIT value",
        -17.04969596862793
      ],
      [
        "SELECT Avg ( Document_Name ) FROM Documents",
        -17.10193395614624
      ],
      [
        "SELECT * FROM Ref_Template_Types",
        -17.197692573070526
      ],
      [
        "SELECT Sum ( Paragraph_ID ) FROM Paragraphs",
        -17.23510503768921
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM Ref_Template_Types",
    "predicted_parse": "SELECT Count ( * ) FROM Ref_Template_Types",
    "predicted_parse_explanation": [
      "find the number of rows in reference template types table"
    ],
    "template_feedback": "use documents table in place of reference template types table .",
    "primary_span": [
      [
        0,
        2
      ]
    ],
    "secondary_span": [
      [
        3,
        10
      ]
    ],
    "edits": [
      "documents",
      "reference template types"
    ],
    "edits_original": "< from > add documents </ from > < from > remove reference template types </ from >"
  },
  {
    "db_id": "employee_hire_evaluation",
    "feedback": "manager name not name and use number products instead of step 2 results",
    "question": "Find the manager name and district of the shop whose number of products is the largest.",
    "gold_parse": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1",
    "beam": [
      [
        "SELECT T1.Name , T1.District FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T2.Shop_ID ORDER BY Count ( * ) Desc LIMIT value",
        -0.1085052490234375
      ],
      [
        "SELECT T1.Manager_name , T1.District FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T2.Shop_ID ORDER BY Count ( * ) Desc LIMIT value",
        -2.7725210189819336
      ],
      [
        "SELECT Name , District FROM shop GROUP BY Shop_ID ORDER BY Count ( * ) Desc LIMIT value",
        -3.281052589416504
      ],
      [
        "SELECT Manager_name , District FROM shop GROUP BY Shop_ID ORDER BY Count ( * ) Desc LIMIT value",
        -5.928241729736328
      ],
      [
        "SELECT T1.Name , T1.Manager_name FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T2.Shop_ID ORDER BY Count ( * ) Desc LIMIT value",
        -10.566709518432617
      ],
      [
        "SELECT T1.Name , T1.District , T1.Shop_ID FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T2.Shop_ID ORDER BY Count ( * ) Desc LIMIT value",
        -11.299549102783203
      ],
      [
        "SELECT T1.Name , T1.District FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T2.Shop_ID",
        -12.078213691711426
      ],
      [
        "SELECT Name , District FROM shop ORDER BY Number_products Desc LIMIT value",
        -12.35129165649414
      ],
      [
        "SELECT T1.Name , T1.District FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T2.Shop_ID ORDER BY Count ( * ) Desc",
        -12.396798133850098
      ],
      [
        "SELECT Name , Manager_name FROM shop GROUP BY Shop_ID ORDER BY Count ( * ) Desc LIMIT value",
        -12.482348442077637
      ],
      [
        "SELECT Name , District FROM shop GROUP BY Manager_name ORDER BY Count ( * ) Desc LIMIT value",
        -13.082366943359375
      ],
      [
        "SELECT T1.Manager_name , T1.Manager_name FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T2.Shop_ID ORDER BY Count ( * ) Desc LIMIT value",
        -13.958876609802246
      ],
      [
        "SELECT Name , District FROM shop GROUP BY Name ORDER BY Count ( * ) Desc LIMIT value",
        -14.247453689575195
      ],
      [
        "SELECT T1.Name FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T2.Shop_ID ORDER BY Count ( * ) Desc LIMIT value",
        -14.341680526733398
      ],
      [
        "SELECT Name , District FROM shop GROUP BY District ORDER BY Count ( * ) Desc LIMIT value",
        -14.568009376525879
      ],
      [
        "SELECT Name , District , Shop_ID FROM shop GROUP BY Shop_ID ORDER BY Count ( * ) Desc LIMIT value",
        -14.586088180541992
      ],
      [
        "SELECT T1.Manager_name , T1.District FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T2.Shop_ID",
        -14.62482738494873
      ],
      [
        "SELECT Name , District FROM shop WHERE Number_products = ( SELECT Max ( Number_products ) FROM shop )",
        -14.696989059448242
      ],
      [
        "SELECT Name , District FROM shop GROUP BY Location ORDER BY Count ( * ) Desc LIMIT value",
        -14.781065940856934
      ],
      [
        "SELECT Name , District FROM shop",
        -15.958492279052734
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.Name , T1.District FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T2.Shop_ID ORDER BY Count ( * ) Desc LIMIT 1",
    "predicted_parse": "SELECT T1.Name , T1.District FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T2.Shop_ID ORDER BY Count ( * ) Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: for each row in shop table , find the corresponding rows in hiring table",
      "Step 2: find the number of rows of each value of hiring 's shop id of the results of step 1",
      "Step 3: find the name and district of the results of step 1 with largest value in the results of step 2"
    ],
    "template_feedback": "in step 1 , do not use the hiring table . in step 2 , do not find for each value of hiring 's shop id . in step 3 , find manager name in place of name . order the results by number products in place of number of rows .",
    "primary_span": [
      [
        4,
        10
      ],
      [
        15,
        26
      ],
      [
        31,
        33
      ],
      [
        39,
        44
      ]
    ],
    "secondary_span": [
      [
        4,
        10
      ],
      [
        34,
        38
      ],
      [
        45,
        51
      ]
    ],
    "edits": [
      "manager name",
      "name",
      "hiring",
      "shop id",
      "number products",
      "number of rows"
    ],
    "edits_original": "< select > add manager name </ select > < select > remove name </ select > < from > remove hiring </ from > < groupBy > remove shop id </ groupBy > < orderBy > add number products </ orderBy > < orderBy > remove number of rows </ orderBy >"
  },
  {
    "db_id": "student_transcripts_tracking",
    "feedback": "Replace semesters table with student enrolment table in step 1.",
    "question": "What is the semester which most student registered in? Show both the name and the id.",
    "gold_parse": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1",
    "beam": [
      [
        "SELECT semester_name , semester_id FROM Semesters GROUP BY semester_id ORDER BY Count ( * ) Desc LIMIT value",
        -0.012935638427734375
      ],
      [
        "SELECT T1.semester_name , T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id GROUP BY T2.semester_id ORDER BY Count ( * ) Desc LIMIT value",
        -4.894225120544434
      ],
      [
        "SELECT T1.semester_name , T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id GROUP BY T2.student_enrolment_id ORDER BY Count ( * ) Desc LIMIT value",
        -5.834009170532227
      ],
      [
        "SELECT T1.semester_name , T2.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id GROUP BY T1.semester_id ORDER BY Count ( * ) Desc LIMIT value",
        -6.896020889282227
      ],
      [
        "SELECT semester_name , semester_id FROM Semesters INTERSECT SELECT semester_name , semester_id FROM Semesters",
        -8.102693557739258
      ],
      [
        "SELECT T1.semester_name , T2.student_enrolment_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id GROUP BY T1.semester_id ORDER BY Count ( * ) Desc LIMIT value",
        -8.222087860107422
      ],
      [
        "SELECT semester_name , semester_id FROM Semesters GROUP BY semester_id",
        -8.847058296203613
      ],
      [
        "SELECT semester_name , semester_id FROM Semesters GROUP BY semester_id ORDER BY Count ( * ) Desc LIMIT value INTERSECT SELECT semester_name , semester_id FROM Semesters GROUP BY semester_id ORDER BY Count ( * ) Desc LIMIT value",
        -9.36778736114502
      ],
      [
        "SELECT semester_name , semester_id FROM Semesters GROUP BY semester_id ORDER BY Count ( * ) Desc LIMIT value INTERSECT SELECT semester_name , semester_id FROM Semesters",
        -9.960990905761719
      ],
      [
        "SELECT T1.course_name , T2.semester_id FROM Courses AS T1 JOIN Semesters AS T2 JOIN Student_Enrolment AS T3 ON T3.semester_id = T2.semester_id JOIN Student_Enrolment_Courses AS T4 ON T1.course_id = T4.course_id AND T4.student_enrolment_id = T3.student_enrolment_id GROUP BY T2.semester_id ORDER BY Count ( * ) Desc LIMIT value",
        -10.116507530212402
      ],
      [
        "SELECT T1.semester_name , T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id GROUP BY T2.student_id ORDER BY Count ( * ) Desc LIMIT value",
        -10.21535873413086
      ],
      [
        "SELECT semester_name , semester_id FROM Semesters GROUP BY semester_id ORDER BY Count ( * ) Desc",
        -10.868091583251953
      ],
      [
        "SELECT T1.semester_name , T2.student_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id GROUP BY T1.semester_id ORDER BY Count ( * ) Desc LIMIT value",
        -11.260979652404785
      ],
      [
        "SELECT semester_name , semester_id FROM Semesters GROUP BY semester_id HAVING Count ( * ) > = value",
        -11.31392765045166
      ],
      [
        "SELECT semester_name , semester_id FROM Semesters GROUP BY semester_id ORDER BY Count ( * ) Asc LIMIT value",
        -11.663195610046387
      ],
      [
        "SELECT T2.semester_id , T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id GROUP BY T1.semester_id ORDER BY Count ( * ) Desc LIMIT value",
        -11.781477928161621
      ],
      [
        "SELECT semester_name , semester_id FROM Semesters ORDER BY semester_description Desc LIMIT value",
        -12.03009831905365
      ],
      [
        "SELECT T1.semester_name , T1.semester_id FROM Semesters AS T1 UNION SELECT T2.semester_id FROM Student_Enrolment AS T2",
        -12.06625747680664
      ],
      [
        "SELECT T1.degree_summary_name , T2.semester_id FROM Degree_Programs AS T1 JOIN Semesters AS T2 JOIN Student_Enrolment AS T3 ON T1.degree_program_id = T3.degree_program_id AND T3.semester_id = T2.semester_id GROUP BY T2.semester_id ORDER BY Count ( * ) Desc LIMIT value",
        -12.181268692016602
      ],
      [
        "SELECT semester_name , semester_id FROM Semesters",
        -12.313032150268555
      ]
    ],
    "predicted_parse_with_values": "SELECT semester_name , semester_id FROM Semesters GROUP BY semester_id ORDER BY Count ( * ) Desc LIMIT 1",
    "predicted_parse": "SELECT semester_name , semester_id FROM Semesters GROUP BY semester_id ORDER BY Count ( * ) Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of semester id in semesters table",
      "Step 2: find the semester name and semester id in semesters table with largest value in the results of step 1"
    ],
    "template_feedback": "in step 1 , additionally use the information from the student enrolment table besides the semesters table .",
    "primary_span": [
      [
        4,
        12
      ]
    ],
    "secondary_span": [
      [
        13,
        17
      ]
    ],
    "edits": [
      "student enrolment"
    ],
    "edits_original": "< from > add student enrolment </ from >"
  },
  {
    "db_id": "orchestra",
    "feedback": "You should determine the major record format from the orchestra table and make sure it is arranged in ascending order of number of rows that appear for each major record format.",
    "question": "Please show the record formats of orchestras in ascending order of count.",
    "gold_parse": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC",
    "beam": [
      [
        "SELECT If_first_show FROM show ORDER BY If_first_show Asc",
        -0.01647210121154785
      ],
      [
        "SELECT T2.If_first_show FROM performance AS T1 JOIN show AS T2 ON T1.Performance_ID = T2.Performance_ID ORDER BY T1.Weekly_rank Asc",
        -5.107710361480713
      ],
      [
        "SELECT If_first_show FROM show ORDER BY Attendance Asc",
        -5.413851737976074
      ],
      [
        "SELECT T2.If_first_show FROM performance AS T1 JOIN show AS T2 ON T1.Performance_ID = T2.Performance_ID ORDER BY T1.Share Asc",
        -6.685934066772461
      ],
      [
        "SELECT T3.If_first_show FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID JOIN show AS T3 ON T2.Performance_ID = T3.Performance_ID ORDER BY T1.Major_Record_Format Asc",
        -6.733074188232422
      ],
      [
        "SELECT T2.If_first_show FROM performance AS T1 JOIN show AS T2 ON T1.Performance_ID = T2.Performance_ID ORDER BY T1.Date Asc",
        -6.852671146392822
      ],
      [
        "SELECT If_first_show FROM show ORDER BY * Asc",
        -7.269076824188232
      ],
      [
        "SELECT If_first_show FROM show ORDER BY Result Asc",
        -7.346282005310059
      ],
      [
        "SELECT T3.If_first_show FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID JOIN show AS T3 ON T2.Performance_ID = T3.Performance_ID ORDER BY T1.Year_of_Founded Asc",
        -7.737732887268066
      ],
      [
        "SELECT T2.If_first_show FROM performance AS T1 JOIN show AS T2 ON T1.Performance_ID = T2.Performance_ID ORDER BY T1.Official_ratings_(millions) Asc",
        -8.65027904510498
      ],
      [
        "SELECT If_first_show FROM show ORDER BY Show_ID Asc",
        -8.663583755493164
      ],
      [
        "SELECT T2.If_first_show FROM performance AS T1 JOIN show AS T2 ON T1.Performance_ID = T2.Performance_ID ORDER BY T1.Type Asc",
        -9.58108139038086
      ],
      [
        "SELECT T3.If_first_show FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID JOIN show AS T3 ON T2.Performance_ID = T3.Performance_ID ORDER BY T1.Record_Company Asc",
        -10.287481307983398
      ],
      [
        "SELECT T3.If_first_show FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID JOIN show AS T3 ON T2.Performance_ID = T3.Performance_ID ORDER BY T1.Orchestra Asc",
        -10.615642547607422
      ],
      [
        "SELECT T2.If_first_show FROM performance AS T1 JOIN show AS T2 ON T1.Performance_ID = T2.Performance_ID ORDER BY T1.Orchestra_ID Asc",
        -10.836753845214844
      ],
      [
        "SELECT T4.If_first_show FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID JOIN performance AS T3 ON T2.Orchestra_ID = T3.Orchestra_ID JOIN show AS T4 ON T3.Performance_ID = T4.Performance_ID ORDER BY T1.Year_of_Work Asc",
        -11.185393333435059
      ],
      [
        "SELECT * FROM show ORDER BY If_first_show Asc",
        -11.868828773498535
      ],
      [
        "SELECT T4.If_first_show FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID JOIN performance AS T3 ON T2.Orchestra_ID = T3.Orchestra_ID JOIN show AS T4 ON T3.Performance_ID = T4.Performance_ID ORDER BY T1.Age Asc",
        -11.999688148498535
      ],
      [
        "SELECT T3.If_first_show FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID JOIN show AS T3 ON T2.Performance_ID = T3.Performance_ID ORDER BY T1.Orchestra_ID Asc",
        -12.223133087158203
      ],
      [
        "SELECT If_first_show FROM show",
        -13.213202476501465
      ]
    ],
    "predicted_parse_with_values": "SELECT If_first_show FROM show ORDER BY If_first_show Asc",
    "predicted_parse": "SELECT If_first_show FROM show ORDER BY If_first_show Asc",
    "predicted_parse_explanation": [
      "find the if first show in show table ordered ascending by if first show"
    ],
    "template_feedback": "use orchestra table in place of show table . find for each value of major record format . find major record format in place of if first show . order the results by number of rows in place of if first show .",
    "primary_span": [
      [
        0,
        2
      ],
      [
        9,
        17
      ],
      [
        18,
        21
      ],
      [
        29,
        35
      ]
    ],
    "secondary_span": [
      [
        3,
        8
      ],
      [
        22,
        28
      ],
      [
        36,
        42
      ]
    ],
    "edits": [
      "major record format",
      "if first show",
      "orchestra",
      "show",
      "major record format",
      "number of rows",
      "if first show"
    ],
    "edits_original": "< select > add major record format </ select > < select > remove if first show </ select > < from > add orchestra </ from > < from > remove show </ from > < groupBy > add major record format </ groupBy > < orderBy > add number of rows </ orderBy > < orderBy > remove if first show </ orderBy >"
  },
  {
    "db_id": "pets_1",
    "feedback": "Put has pet table and age instead of pets table and pet age .",
    "question": "Find number of pets owned by students who are older than 20.",
    "gold_parse": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20",
    "beam": [
      [
        "SELECT Count ( * ) FROM Pets WHERE pet_age > value",
        -0.07866668701171875
      ],
      [
        "SELECT Count ( * ) FROM Student WHERE Age > value",
        -3.0491790771484375
      ],
      [
        "SELECT Count ( * ) FROM Pets WHERE weight > value",
        -4.193456649780273
      ],
      [
        "SELECT Count ( * ) FROM Pets WHERE pet_age > value AND pet_age > value",
        -4.757226943969727
      ],
      [
        "SELECT Count ( * ) FROM Pets WHERE weight > value AND pet_age > value",
        -6.125687599182129
      ],
      [
        "SELECT Count ( * ) FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.pet_age > value AND T1.Age > value",
        -6.6849365234375
      ],
      [
        "SELECT Count ( * ) FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T1.Age > value AND T3.pet_age > value",
        -7.462170600891113
      ],
      [
        "SELECT Count ( * ) FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.weight > value AND T1.Age > value",
        -8.071080207824707
      ],
      [
        "SELECT Count ( * ) FROM Student WHERE Age > value AND Age > value",
        -9.396498680114746
      ],
      [
        "SELECT Count ( * ) FROM Pets WHERE pet_age > value AND pet_age > = value",
        -10.120434761047363
      ],
      [
        "SELECT Count ( * ) FROM Pets WHERE pet_age > value AND weight > value",
        -10.906526565551758
      ],
      [
        "SELECT Count ( * ) FROM Pets WHERE pet_age > = value",
        -11.373140335083008
      ],
      [
        "SELECT Count ( * ) FROM Pets WHERE pet_age > value AND pet_age = value",
        -11.438491821289062
      ],
      [
        "SELECT Count ( * ) FROM Pets WHERE weight > value AND pet_age > = value",
        -11.59004020690918
      ],
      [
        "SELECT Count ( * ) FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.pet_age > value AND T1.Age = value",
        -11.772541999816895
      ],
      [
        "SELECT Count ( * ) FROM Pets WHERE pet_age < value",
        -12.648153305053711
      ],
      [
        "SELECT Count ( * ) FROM Pets WHERE PetType = value",
        -13.541954040527344
      ],
      [
        "SELECT Count ( * ) FROM Student WHERE Age > = value",
        -13.913409233093262
      ],
      [
        "SELECT Count ( * ) FROM Pets WHERE weight > = value",
        -14.299365997314453
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM Pets WHERE pet_age > value",
        -14.528959274291992
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM Pets WHERE pet_age > 20",
    "predicted_parse": "SELECT Count ( * ) FROM Pets WHERE pet_age > value",
    "predicted_parse_explanation": [
      "find the number of rows in pets table whose pet age greater than 20"
    ],
    "template_feedback": "use has pet table and student table in place of pets table . consider the age greater than 20 conditions in place of the pet age greater than 20 conditions .",
    "primary_span": [
      [
        0,
        6
      ],
      [
        13,
        19
      ]
    ],
    "secondary_span": [
      [
        7,
        12
      ],
      [
        20,
        30
      ]
    ],
    "edits": [
      "student",
      "has pet",
      "pets",
      "age greater than 20",
      "pet age greater than 20"
    ],
    "edits_original": "< from > add student </ from > < from > add has pet </ from > < from > remove pets </ from > < where > add age greater than 20 </ where > < where > remove pet age greater than 20 </ where >"
  },
  {
    "db_id": "singer",
    "feedback": "There should be birth year instead of citizenship .",
    "question": "What are the names of the singers whose birth years are either 1948 or 1949?",
    "gold_parse": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949",
    "beam": [
      [
        "SELECT Name FROM singer WHERE Citizenship = value OR Citizenship = value",
        -0.0022945404052734375
      ],
      [
        "SELECT Name FROM singer WHERE Birth_Year > value OR Citizenship = value",
        -6.1781415939331055
      ],
      [
        "SELECT Name FROM singer WHERE Citizenship > value OR Citizenship = value",
        -9.528624534606934
      ],
      [
        "SELECT Name FROM singer WHERE Name > value OR Citizenship = value",
        -9.97786283493042
      ],
      [
        "SELECT Name FROM singer WHERE Birth_Year = value OR Citizenship = value",
        -10.594903945922852
      ],
      [
        "SELECT Name FROM singer WHERE Citizenship = value OR Birth_Year = value",
        -11.163867950439453
      ],
      [
        "SELECT Name FROM singer WHERE Citizenship = value OR Citizenship LIKE value",
        -11.1693754196167
      ],
      [
        "SELECT DISTINCT Name FROM singer WHERE Citizenship = value OR Citizenship = value",
        -11.75859260559082
      ],
      [
        "SELECT Name FROM singer WHERE Citizenship = value OR Citizenship = value ORDER BY Name Desc LIMIT value",
        -12.44154977798462
      ],
      [
        "SELECT Name FROM singer WHERE Citizenship = value OR Citizenship = value ORDER BY Name Desc",
        -12.661040782928467
      ],
      [
        "SELECT Name FROM singer WHERE Citizenship ! = value OR Citizenship = value",
        -12.918523788452148
      ],
      [
        "SELECT Name FROM singer WHERE Citizenship = value OR Citizenship ! = value",
        -13.276869773864746
      ],
      [
        "SELECT Name FROM singer WHERE Citizenship = value OR Citizenship = value ORDER BY Birth_Year Desc LIMIT value",
        -13.381608009338379
      ],
      [
        "SELECT DISTINCT Name FROM singer WHERE Citizenship = value OR Citizenship = value",
        -13.522466659545898
      ],
      [
        "SELECT Name FROM singer WHERE Citizenship = value OR Citizenship = value EXCEPT SELECT Name FROM singer WHERE Citizenship = value OR Citizenship = value",
        -13.873034477233887
      ],
      [
        "SELECT Name , Citizenship FROM singer WHERE Citizenship = value OR Citizenship = value",
        -14.18078327178955
      ],
      [
        "SELECT Name FROM singer WHERE Birth_Year > value OR Citizenship LIKE value",
        -14.202352523803711
      ],
      [
        "SELECT Name FROM singer WHERE Citizenship LIKE value OR Citizenship = value",
        -14.397987365722656
      ],
      [
        "SELECT Name FROM singer WHERE Citizenship > value OR Citizenship LIKE value",
        -14.968477249145508
      ],
      [
        "SELECT Name FROM singer WHERE Citizenship = value OR Citizenship > value",
        -15.007981300354004
      ]
    ],
    "predicted_parse_with_values": "SELECT Name FROM singer WHERE Citizenship = 1949 OR Citizenship = 1948",
    "predicted_parse": "SELECT Name FROM singer WHERE Citizenship = value OR Citizenship = value",
    "predicted_parse_explanation": [
      "find the name in singer table whose citizenship equals 1949 or citizenship equals 1948"
    ],
    "template_feedback": "consider the birth year equals 1948 or birth year equals 1949 conditions in place of the citizenship equals 1948 or citizenship equals 1949 conditions .",
    "primary_span": [
      [
        0,
        11
      ]
    ],
    "secondary_span": [
      [
        12,
        24
      ]
    ],
    "edits": [
      "birth year equals 1948 or birth year equals 1949",
      "citizenship equals 1949 or citizenship equals 1948"
    ],
    "edits_original": "< where > add birth year equals 1948 or birth year equals 1949 </ where > < where > remove citizenship equals 1949 or citizenship equals 1948 </ where >"
  },
  {
    "db_id": "dog_kennels",
    "feedback": "in the treatment's table, you need to determine the number of rows for distinct professional id.",
    "question": "How many professionals have performed any treatment to dogs?",
    "gold_parse": "SELECT count(DISTINCT professional_id) FROM Treatments",
    "beam": [
      [
        "SELECT Count ( * ) FROM Dogs WHERE weight = value",
        -0.0914463996887207
      ],
      [
        "SELECT Count ( DISTINCT T2.professional_id ) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.weight = value",
        -2.4501867294311523
      ],
      [
        "SELECT Count ( * ) FROM Treatments WHERE dog_id = value",
        -8.358760356903076
      ],
      [
        "SELECT Count ( * ) FROM Breeds WHERE breed_name = value",
        -8.657171726226807
      ],
      [
        "SELECT Count ( * ) FROM Dogs WHERE gender = value",
        -8.868731021881104
      ],
      [
        "SELECT Count ( DISTINCT professional_id ) FROM Treatments",
        -9.544008731842041
      ],
      [
        "SELECT Count ( * ) FROM Breeds",
        -9.613255977630615
      ],
      [
        "SELECT Count ( * ) FROM Treatments WHERE treatment_type_code = value",
        -9.88999319076538
      ],
      [
        "SELECT Count ( * ) FROM Dogs WHERE name = value",
        -10.377183437347412
      ],
      [
        "SELECT Count ( * ) FROM Treatments WHERE date_of_treatment = value",
        -10.65507173538208
      ],
      [
        "SELECT Count ( DISTINCT T2.role_code ) FROM Dogs AS T1 JOIN Professionals AS T2 JOIN Treatments AS T3 ON T1.dog_id = T3.dog_id AND T3.professional_id = T2.professional_id WHERE T1.weight = value",
        -10.656574249267578
      ],
      [
        "SELECT Count ( DISTINCT professional_id ) FROM Treatments WHERE dog_id = value",
        -10.935698509216309
      ],
      [
        "SELECT Count ( DISTINCT T1.owner_id ) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T2.weight = value",
        -10.954408645629883
      ],
      [
        "SELECT Count ( T2.professional_id ) FROM Dogs AS T1 JOIN Professionals AS T2 JOIN Treatments AS T3 ON T1.dog_id = T3.dog_id AND T3.professional_id = T2.professional_id WHERE T1.weight = value",
        -10.965850353240967
      ],
      [
        "SELECT Count ( DISTINCT T3.professional_id ) FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id WHERE T1.breed_name = value",
        -11.063006401062012
      ],
      [
        "SELECT Count ( * ) FROM Dogs WHERE dog_id = value",
        -11.145508289337158
      ],
      [
        "SELECT Count ( T1.treatment_type_code ) FROM Treatment_Types AS T1 JOIN Dogs AS T2 JOIN Treatments AS T3 ON T1.treatment_type_code = T3.treatment_type_code AND T3.dog_id = T2.dog_id WHERE T2.weight = value",
        -11.209572315216064
      ],
      [
        "SELECT Count ( DISTINCT T2.professional_id ) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.gender = value",
        -11.367887496948242
      ],
      [
        "SELECT Count ( * ) FROM Professionals WHERE state = value",
        -11.435883045196533
      ],
      [
        "SELECT Count ( * ) FROM Professionals WHERE first_name = value",
        -11.539791584014893
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM Dogs WHERE weight = 7.57",
    "predicted_parse": "SELECT Count ( * ) FROM Dogs WHERE weight = value",
    "predicted_parse_explanation": [
      "find the number of rows in dogs table whose weight equals 7.57"
    ],
    "template_feedback": "use treatments table in place of dogs table . remove the weight equals 7.57 conditions . find number of different professional id in place of number of rows .",
    "primary_span": [
      [
        0,
        2
      ],
      [
        9,
        15
      ],
      [
        16,
        21
      ]
    ],
    "secondary_span": [
      [
        3,
        8
      ],
      [
        22,
        28
      ]
    ],
    "edits": [
      "number of distinct professional id",
      "number of rows",
      "treatments",
      "dogs",
      "weight equals 7.57"
    ],
    "edits_original": "< select > add number of distinct professional id </ select > < select > remove number of rows </ select > < from > add treatments </ from > < from > remove dogs </ from > < where > remove weight equals 7.57 </ where >"
  },
  {
    "db_id": "wta_1",
    "feedback": "For the pair of tourney name use winner name.",
    "question": "What are the names of players who won in both 2013 and 2016?",
    "gold_parse": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016",
    "beam": [
      [
        "SELECT tourney_name FROM matches WHERE year = value INTERSECT SELECT tourney_name FROM matches WHERE year = value",
        -0.012896537780761719
      ],
      [
        "SELECT tourney_name FROM matches WHERE year = value INTERSECT SELECT loser_name FROM matches WHERE year = value",
        -5.385000228881836
      ],
      [
        "SELECT loser_name FROM matches WHERE year = value INTERSECT SELECT tourney_name FROM matches WHERE year = value",
        -6.076094627380371
      ],
      [
        "SELECT tourney_name FROM matches WHERE year = value INTERSECT SELECT winner_name FROM matches WHERE year = value",
        -6.276345252990723
      ],
      [
        "SELECT T1.tourney_name FROM matches AS T1 WHERE T1.year = value INTERSECT SELECT T2.first_name FROM players AS T2 JOIN matches AS T1 ON T2.player_id = T1.loser_id WHERE T1.year = value",
        -6.411374568939209
      ],
      [
        "SELECT winner_name FROM matches WHERE year = value INTERSECT SELECT tourney_name FROM matches WHERE year = value",
        -7.040855407714844
      ],
      [
        "SELECT T1.tourney_name FROM matches AS T1 WHERE T1.year = value INTERSECT SELECT T2.hand FROM players AS T2 JOIN matches AS T1 ON T2.player_id = T1.loser_id WHERE T1.year = value",
        -7.120620250701904
      ],
      [
        "SELECT T1.tourney_name FROM matches AS T1 WHERE T1.year = value INTERSECT SELECT T2.last_name FROM players AS T2 JOIN matches AS T1 ON T2.player_id = T1.loser_id WHERE T1.year = value",
        -7.741286277770996
      ],
      [
        "SELECT T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.year = value INTERSECT SELECT T2.tourney_name FROM matches AS T2 WHERE T2.year = value",
        -8.850276947021484
      ],
      [
        "SELECT T1.last_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.year = value INTERSECT SELECT T2.tourney_name FROM matches AS T2 WHERE T2.year = value",
        -10.259783744812012
      ],
      [
        "SELECT tourney_name FROM matches WHERE year = value INTERSECT SELECT tourney_name FROM matches",
        -10.530787467956543
      ],
      [
        "SELECT T1.hand FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.year = value INTERSECT SELECT T2.tourney_name FROM matches AS T2 WHERE T2.year = value",
        -11.160860061645508
      ],
      [
        "SELECT loser_name FROM matches WHERE year = value INTERSECT SELECT loser_name FROM matches WHERE year = value",
        -11.44905948638916
      ],
      [
        "SELECT tourney_name FROM matches WHERE year = value INTERSECT SELECT tourney_name FROM matches WHERE tourney_date = value",
        -11.928833961486816
      ],
      [
        "SELECT loser_name FROM matches WHERE year = value INTERSECT SELECT winner_name FROM matches WHERE year = value",
        -12.340228080749512
      ],
      [
        "SELECT winner_name FROM matches WHERE year = value INTERSECT SELECT loser_name FROM matches WHERE year = value",
        -12.412396430969238
      ],
      [
        "SELECT T1.loser_name FROM matches AS T1 WHERE T1.year = value INTERSECT SELECT T2.first_name FROM players AS T2 JOIN matches AS T1 ON T2.player_id = T1.loser_id WHERE T1.year = value",
        -12.475886344909668
      ],
      [
        "SELECT tourney_name FROM matches WHERE tourney_date = value INTERSECT SELECT tourney_name FROM matches WHERE year = value",
        -12.731584548950195
      ],
      [
        "SELECT tourney_name FROM matches WHERE year = value",
        -12.988481521606445
      ],
      [
        "SELECT tourney_name FROM matches WHERE year ! = value",
        -14.454877853393555
      ]
    ],
    "predicted_parse_with_values": "SELECT tourney_name FROM matches WHERE year = 2013 INTERSECT SELECT tourney_name FROM matches WHERE year = 2016",
    "predicted_parse": "SELECT tourney_name FROM matches WHERE year = value INTERSECT SELECT tourney_name FROM matches WHERE year = value",
    "predicted_parse_explanation": [
      "Step 1: find the tourney name in matches table whose year equals 2013",
      "Step 2: find the tourney name in matches table whose year equals 2016",
      "Step 3: show the rows that are in both the results of step 1 and step 2"
    ],
    "template_feedback": "in step 1 , find winner name in place of tourney name . in step 2 , find winner name in place of tourney name .",
    "primary_span": [
      [
        4,
        6
      ],
      [
        17,
        19
      ]
    ],
    "secondary_span": [
      [
        7,
        12
      ],
      [
        20,
        25
      ]
    ],
    "edits": [
      "winner name",
      "tourney name",
      "winner name",
      "tourney name"
    ],
    "edits_original": "< select > add winner name </ select > < select > remove tourney name </ select > < select > add winner name </ select > < select > remove tourney name </ select >"
  },
  {
    "db_id": "student_transcripts_tracking",
    "feedback": "You have to reconstitute using degree program id, student enrollment, degree's summary name and degree programs.",
    "question": "Find the program which most number of students are enrolled in. List both the id and the summary.",
    "gold_parse": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1",
    "beam": [
      [
        "SELECT course_id , course_description FROM Courses GROUP BY course_id ORDER BY Count ( * ) Desc LIMIT value",
        -0.16117191314697266
      ],
      [
        "SELECT course_id , course_name FROM Courses GROUP BY course_id ORDER BY Count ( * ) Desc LIMIT value",
        -2.8894691467285156
      ],
      [
        "SELECT T1.course_id , T2.semester_description FROM Courses AS T1 JOIN Semesters AS T2 JOIN Student_Enrolment AS T3 ON T3.semester_id = T2.semester_id JOIN Student_Enrolment_Courses AS T4 ON T1.course_id = T4.course_id AND T4.student_enrolment_id = T3.student_enrolment_id GROUP BY T1.course_id ORDER BY Count ( * ) Desc LIMIT value",
        -2.959529399871826
      ],
      [
        "SELECT T1.course_id , T2.degree_summary_description FROM Courses AS T1 JOIN Degree_Programs AS T2 JOIN Student_Enrolment AS T3 ON T3.degree_program_id = T2.degree_program_id JOIN Student_Enrolment_Courses AS T4 ON T1.course_id = T4.course_id AND T4.student_enrolment_id = T3.student_enrolment_id GROUP BY T1.course_id ORDER BY Count ( * ) Desc LIMIT value",
        -4.614816188812256
      ],
      [
        "SELECT T2.student_id , T1.course_description FROM Courses AS T1 JOIN Students AS T2 JOIN Student_Enrolment AS T3 ON T3.student_id = T2.student_id JOIN Student_Enrolment_Courses AS T4 ON T1.course_id = T4.course_id AND T4.student_enrolment_id = T3.student_enrolment_id GROUP BY T1.course_id ORDER BY Count ( * ) Desc LIMIT value",
        -5.00453519821167
      ],
      [
        "SELECT T1.course_id , T1.course_description FROM Courses AS T1 JOIN Semesters AS T2 JOIN Student_Enrolment AS T3 ON T3.semester_id = T2.semester_id JOIN Student_Enrolment_Courses AS T4 ON T1.course_id = T4.course_id AND T4.student_enrolment_id = T3.student_enrolment_id GROUP BY T2.semester_description ORDER BY Count ( * ) Desc LIMIT value",
        -5.63020133972168
      ],
      [
        "SELECT T1.course_id , T1.course_description FROM Courses AS T1 JOIN Student_Enrolment AS T2 JOIN Student_Enrolment_Courses AS T3 ON T1.course_id = T3.course_id AND T3.student_enrolment_id = T2.student_enrolment_id GROUP BY T2.student_enrolment_id ORDER BY Count ( * ) Desc LIMIT value",
        -5.693995475769043
      ],
      [
        "SELECT T2.degree_program_id , T1.course_description FROM Courses AS T1 JOIN Degree_Programs AS T2 JOIN Student_Enrolment AS T3 ON T3.degree_program_id = T2.degree_program_id JOIN Student_Enrolment_Courses AS T4 ON T1.course_id = T4.course_id AND T4.student_enrolment_id = T3.student_enrolment_id GROUP BY T1.course_id ORDER BY Count ( * ) Desc LIMIT value",
        -6.337809085845947
      ],
      [
        "SELECT T2.student_enrolment_id , T1.course_description FROM Courses AS T1 JOIN Student_Enrolment AS T2 JOIN Student_Enrolment_Courses AS T3 ON T1.course_id = T3.course_id AND T3.student_enrolment_id = T2.student_enrolment_id GROUP BY T1.course_id ORDER BY Count ( * ) Desc LIMIT value",
        -6.347227096557617
      ],
      [
        "SELECT T2.semester_description , T1.course_description FROM Courses AS T1 JOIN Semesters AS T2 JOIN Student_Enrolment AS T3 ON T3.semester_id = T2.semester_id JOIN Student_Enrolment_Courses AS T4 ON T1.course_id = T4.course_id AND T4.student_enrolment_id = T3.student_enrolment_id GROUP BY T1.course_id ORDER BY Count ( * ) Desc LIMIT value",
        -6.610387325286865
      ],
      [
        "SELECT T2.course_id , T1.course_description FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id ORDER BY Count ( * ) Desc LIMIT value",
        -6.799621105194092
      ],
      [
        "SELECT course_name , course_description FROM Courses GROUP BY course_id ORDER BY Count ( * ) Desc LIMIT value",
        -6.864509582519531
      ],
      [
        "SELECT course_description , course_description FROM Courses GROUP BY course_id ORDER BY Count ( * ) Desc LIMIT value",
        -6.933600425720215
      ],
      [
        "SELECT T3.student_id , T2.semester_description FROM Courses AS T1 JOIN Semesters AS T2 JOIN Students AS T3 JOIN Student_Enrolment AS T4 ON T4.semester_id = T2.semester_id AND T4.student_id = T3.student_id JOIN Student_Enrolment_Courses AS T5 ON T1.course_id = T5.course_id AND T5.student_enrolment_id = T4.student_enrolment_id AND T1.course_id = T5.course_id AND T5.student_enrolment_id = T4.student_enrolment_id GROUP BY T1.course_id ORDER BY Count ( * ) Desc LIMIT value",
        -7.151299476623535
      ],
      [
        "SELECT T2.student_id , T1.course_name FROM Courses AS T1 JOIN Students AS T2 JOIN Student_Enrolment AS T3 ON T3.student_id = T2.student_id JOIN Student_Enrolment_Courses AS T4 ON T1.course_id = T4.course_id AND T4.student_enrolment_id = T3.student_enrolment_id GROUP BY T1.course_id ORDER BY Count ( * ) Desc LIMIT value",
        -7.224365234375
      ],
      [
        "SELECT T3.transcript_id , T1.course_description FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id JOIN Transcripts AS T3 JOIN Transcript_Contents AS T4 ON T2.student_course_id = T4.student_course_id AND T4.transcript_id = T3.transcript_id GROUP BY T1.course_id ORDER BY Count ( * ) Desc LIMIT value",
        -7.293962001800537
      ],
      [
        "SELECT T2.student_id , T1.course_description FROM Courses AS T1 JOIN Student_Enrolment AS T2 JOIN Student_Enrolment_Courses AS T3 ON T1.course_id = T3.course_id AND T3.student_enrolment_id = T2.student_enrolment_id GROUP BY T1.course_id ORDER BY Count ( * ) Desc LIMIT value",
        -7.294114112854004
      ],
      [
        "SELECT T2.degree_summary_description , T1.course_description FROM Courses AS T1 JOIN Degree_Programs AS T2 JOIN Student_Enrolment AS T3 ON T3.degree_program_id = T2.degree_program_id JOIN Student_Enrolment_Courses AS T4 ON T1.course_id = T4.course_id AND T4.student_enrolment_id = T3.student_enrolment_id GROUP BY T1.course_id ORDER BY Count ( * ) Desc LIMIT value",
        -7.533862590789795
      ],
      [
        "SELECT T1.course_id , T1.course_description FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id ORDER BY Count ( * ) Desc LIMIT value",
        -7.593780517578125
      ],
      [
        "SELECT T1.course_id , T2.semester_description FROM Courses AS T1 JOIN Semesters AS T2 JOIN Student_Enrolment AS T3 ON T3.semester_id = T2.semester_id JOIN Student_Enrolment_Courses AS T4 ON T1.course_id = T4.course_id AND T4.student_enrolment_id = T3.student_enrolment_id GROUP BY T2.semester_description ORDER BY Count ( * ) Desc LIMIT value",
        -7.937625408172607
      ]
    ],
    "predicted_parse_with_values": "SELECT course_id , course_description FROM Courses GROUP BY course_id ORDER BY Count ( * ) Desc LIMIT 1",
    "predicted_parse": "SELECT course_id , course_description FROM Courses GROUP BY course_id ORDER BY Count ( * ) Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of course id in courses table",
      "Step 2: find the course id and course description in courses table with largest value in the results of step 1"
    ],
    "template_feedback": "in step 1 , use degree programs table and student enrolment table in place of courses table . find for each value of degree programs 's degree program id in place of course id . in step 2 , find degree programs 's degree program id and degree summary name in place of course description and course id .",
    "primary_span": [
      [
        4,
        11
      ],
      [
        18,
        28
      ],
      [
        39,
        49
      ]
    ],
    "secondary_span": [
      [
        12,
        17
      ],
      [
        29,
        34
      ],
      [
        50,
        58
      ]
    ],
    "edits": [
      "degree program id",
      "degree summary name",
      "course id",
      "course description",
      "degree programs",
      "student enrolment",
      "courses",
      "degree program id",
      "course id"
    ],
    "edits_original": "< select > add degree program id </ select > < select > add degree summary name </ select > < select > remove course id </ select > < select > remove course description </ select > < from > add degree programs </ from > < from > add student enrolment </ from > < from > remove courses </ from > < groupBy > add degree program id </ groupBy > < groupBy > remove course id </ groupBy >"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "feedback": "You need to search for id of template from templates table having presentation as a description of template type.",
    "question": "Return the ids corresponding to templates with the description 'Presentation'.",
    "gold_parse": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"",
    "beam": [
      [
        "SELECT Document_ID FROM Documents WHERE Document_Description = value",
        -0.031890869140625
      ],
      [
        "SELECT T3.Document_ID FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID WHERE T1.Template_Type_Description = value",
        -4.064532279968262
      ],
      [
        "SELECT T2.Document_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Description = value",
        -4.269331932067871
      ],
      [
        "SELECT T4.Document_ID FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID JOIN Paragraphs AS T4 ON T3.Document_ID = T4.Document_ID WHERE T1.Template_Type_Description = value",
        -8.496163368225098
      ],
      [
        "SELECT Template_ID FROM Documents WHERE Document_Description = value",
        -11.671744346618652
      ],
      [
        "SELECT Document_ID FROM Documents WHERE Document_Name = value",
        -11.782336235046387
      ],
      [
        "SELECT T2.Document_ID FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T1.Template_Details = value",
        -12.925436019897461
      ],
      [
        "SELECT T2.Paragraph_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Description = value",
        -12.947907447814941
      ],
      [
        "SELECT Document_ID FROM Documents WHERE Document_Description LIKE value",
        -14.4306001663208
      ],
      [
        "SELECT Document_ID , Template_ID FROM Documents WHERE Document_Description = value",
        -14.575765132904053
      ],
      [
        "SELECT T1.Template_ID FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Document_Description = value",
        -14.703103065490723
      ],
      [
        "SELECT DISTINCT Document_ID FROM Documents WHERE Document_Description = value",
        -15.163030624389648
      ],
      [
        "SELECT T2.Document_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Name = value",
        -16.175440788269043
      ],
      [
        "SELECT T3.Template_ID FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID WHERE T1.Template_Type_Description = value",
        -16.180438995361328
      ],
      [
        "SELECT Count ( Document_ID ) FROM Documents WHERE Document_Description = value",
        -16.339879989624023
      ],
      [
        "SELECT DISTINCT Document_ID FROM Documents WHERE Document_Description = value",
        -16.64859390258789
      ],
      [
        "SELECT Document_ID FROM Documents WHERE Document_Description = value",
        -16.672561645507812
      ],
      [
        "SELECT Document_ID FROM Documents WHERE Document_Description = value AND Document_Description = value",
        -16.716254234313965
      ],
      [
        "SELECT Document_ID , Document_ID FROM Documents WHERE Document_Description = value",
        -16.724181175231934
      ],
      [
        "SELECT Document_ID FROM Documents",
        -18.435039520263672
      ]
    ],
    "predicted_parse_with_values": "SELECT Document_ID FROM Documents WHERE Document_Description = \"Presentation\"",
    "predicted_parse": "SELECT Document_ID FROM Documents WHERE Document_Description = value",
    "predicted_parse_explanation": [
      "find the document id in documents table whose document description equals Presentation"
    ],
    "template_feedback": "use templates table and reference template types table in place of documents table . consider the template type description equals Presentation conditions in place of the document description equals Presentation conditions . find templates 's template id in place of document id .",
    "primary_span": [
      [
        0,
        7
      ],
      [
        14,
        21
      ],
      [
        32,
        36
      ]
    ],
    "secondary_span": [
      [
        8,
        13
      ],
      [
        22,
        31
      ],
      [
        37,
        42
      ]
    ],
    "edits": [
      "template id",
      "document id",
      "reference template types",
      "templates",
      "documents",
      "template type description equals \"Presentation\"",
      "document description equals \"Presentation\""
    ],
    "edits_original": "< select > add template id </ select > < select > remove document id </ select > < from > add reference template types </ from > < from > add templates </ from > < from > remove documents </ from > < where > add template type description equals \" Presentation \" </ where > < where > remove document description equals \" Presentation \" </ where >"
  },
  {
    "db_id": "student_transcripts_tracking",
    "feedback": "Use degree programs table instead of departments table.",
    "question": "How many degrees does the engineering department offer?",
    "gold_parse": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'",
    "beam": [
      [
        "SELECT Count ( * ) FROM Departments WHERE department_name = value",
        -8.678436279296875e-05
      ],
      [
        "SELECT Count ( DISTINCT T2.degree_summary_name ) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id WHERE T1.department_name = value",
        -9.541388511657715
      ],
      [
        "SELECT Count ( * ) FROM Addresses",
        -11.523555755615234
      ],
      [
        "SELECT Count ( T2.degree_summary_name ) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id WHERE T1.department_name = value",
        -13.527400016784668
      ],
      [
        "SELECT Count ( * ) , T2.degree_summary_name FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id WHERE T1.department_name = value",
        -13.88144564628601
      ],
      [
        "SELECT Sum ( T2.degree_summary_name ) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id WHERE T1.department_name = value",
        -14.217606663703918
      ],
      [
        "SELECT Sum ( * ) FROM Departments WHERE department_name = value",
        -14.66688358783722
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM Departments WHERE department_name = value",
        -14.69599723815918
      ],
      [
        "SELECT T2.degree_summary_name FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id WHERE T1.department_name = value",
        -15.11033010482788
      ],
      [
        "SELECT Avg ( * ) FROM Departments WHERE department_name = value",
        -15.376945853233337
      ],
      [
        "SELECT Count ( * ) , department_name FROM Departments WHERE department_name = value",
        -15.391025185585022
      ],
      [
        "SELECT Avg ( T2.degree_summary_name ) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id WHERE T1.department_name = value",
        -15.83367770910263
      ],
      [
        "SELECT Count ( * ) FROM Departments WHERE department_name LIKE value",
        -15.975118637084961
      ],
      [
        "SELECT Count ( * ) , department_name FROM Departments WHERE department_name = value GROUP BY department_id",
        -16.229418873786926
      ],
      [
        "SELECT Count ( * ) , T2.degree_summary_name FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id WHERE T1.department_name = value GROUP BY T1.department_id",
        -16.22991943359375
      ],
      [
        "SELECT Count ( T2.degree_summary_description ) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id WHERE T1.department_name = value",
        -16.48857021331787
      ],
      [
        "SELECT Count ( DISTINCT * ) FROM Departments WHERE department_name = value",
        -16.559094429016113
      ],
      [
        "SELECT Count ( * ) FROM Departments WHERE department_name > value",
        -16.625244140625
      ],
      [
        "SELECT Count ( department_id ) FROM Departments WHERE department_name = value",
        -16.665485382080078
      ],
      [
        "SELECT Count ( * ) FROM Departments WHERE department_name = value AND department_name = value",
        -16.817152976989746
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM Departments WHERE department_name = \"engineer\"",
    "predicted_parse": "SELECT Count ( * ) FROM Departments WHERE department_name = value",
    "predicted_parse_explanation": [
      "find the number of rows in departments table whose department name equals engineer"
    ],
    "template_feedback": "additionally use the information from the degree programs table besides the departments table .",
    "primary_span": [
      [
        0,
        8
      ]
    ],
    "secondary_span": [
      [
        9,
        13
      ]
    ],
    "edits": [
      "degree programs"
    ],
    "edits_original": "< from > add degree programs </ from >"
  },
  {
    "db_id": "network_1",
    "feedback": "Find Highschooler's name whose friend is Kyle and who is also present in friend table .",
    "question": "Return the names of friends of the high school student Kyle.",
    "gold_parse": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"",
    "beam": [
      [
        "SELECT name FROM Highschooler WHERE grade = value",
        -0.00029277801513671875
      ],
      [
        "SELECT name FROM Highschooler WHERE grade > value",
        -8.152311325073242
      ],
      [
        "SELECT grade FROM Highschooler WHERE grade = value",
        -13.051786422729492
      ],
      [
        "SELECT DISTINCT name FROM Highschooler WHERE grade = value",
        -13.619150161743164
      ],
      [
        "SELECT name , grade FROM Highschooler WHERE grade = value",
        -14.105440139770508
      ],
      [
        "SELECT name FROM Highschooler WHERE grade = value AND name = value",
        -14.355051040649414
      ],
      [
        "SELECT name FROM Highschooler WHERE name = value",
        -14.391742706298828
      ],
      [
        "SELECT name FROM Highschooler WHERE grade < value",
        -14.861861228942871
      ],
      [
        "SELECT name FROM Highschooler WHERE grade > = value",
        -14.976430892944336
      ],
      [
        "SELECT DISTINCT name FROM Highschooler WHERE grade = value",
        -15.63440990447998
      ],
      [
        "SELECT name FROM Highschooler WHERE grade ! = value",
        -15.855828285217285
      ],
      [
        "SELECT name FROM Highschooler",
        -16.50078582763672
      ],
      [
        "SELECT Count ( name ) FROM Highschooler WHERE grade = value",
        -16.53050136566162
      ],
      [
        "SELECT name FROM Highschooler WHERE grade LIKE value",
        -16.6170015335083
      ],
      [
        "SELECT T2.friend_id FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id WHERE T1.grade = value",
        -16.645100593566895
      ],
      [
        "SELECT name FROM Highschooler WHERE grade = value AND grade = value",
        -17.03837776184082
      ],
      [
        "SELECT name FROM Highschooler WHERE grade = value LIMIT value",
        -17.160019874572754
      ],
      [
        "SELECT name FROM Highschooler WHERE DISTINCT grade = value",
        -17.280003547668457
      ],
      [
        "SELECT name FROM Highschooler WHERE grade IN ( SELECT name FROM Highschooler WHERE grade = value )",
        -17.76640224456787
      ],
      [
        "SELECT name FROM Highschooler WHERE grade = value INTERSECT SELECT name FROM Highschooler WHERE grade = value",
        -18.23603343963623
      ]
    ],
    "predicted_parse_with_values": "SELECT name FROM Highschooler WHERE grade = \"Kyle\"",
    "predicted_parse": "SELECT name FROM Highschooler WHERE grade = value",
    "predicted_parse_explanation": [
      "find the name in high schooler table whose grade equals Kyle"
    ],
    "template_feedback": "additionally use the information from the friend table besides the high schooler table . consider the name equals Kyle conditions in place of the grade equals Kyle conditions .",
    "primary_span": [
      [
        0,
        7
      ],
      [
        14,
        19
      ]
    ],
    "secondary_span": [
      [
        8,
        13
      ],
      [
        20,
        28
      ]
    ],
    "edits": [
      "friend",
      "high schooler",
      "name equals \"Kyle\"",
      "grade equals \"Kyle\""
    ],
    "edits_original": "< from > add friend </ from > < from > add high schooler </ from > < where > add name equals \" Kyle \" </ where > < where > remove grade equals \" Kyle \" </ where >"
  },
  {
    "db_id": "orchestra",
    "feedback": "Find major record format of orchestra ordered ascending by number of rows appear for each major record format .",
    "question": "Please show the record formats of orchestras in ascending order of count.",
    "gold_parse": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC",
    "beam": [
      [
        "SELECT If_first_show FROM show ORDER BY If_first_show Asc",
        -0.01647210121154785
      ],
      [
        "SELECT T2.If_first_show FROM performance AS T1 JOIN show AS T2 ON T1.Performance_ID = T2.Performance_ID ORDER BY T1.Weekly_rank Asc",
        -5.107710361480713
      ],
      [
        "SELECT If_first_show FROM show ORDER BY Attendance Asc",
        -5.413851737976074
      ],
      [
        "SELECT T2.If_first_show FROM performance AS T1 JOIN show AS T2 ON T1.Performance_ID = T2.Performance_ID ORDER BY T1.Share Asc",
        -6.685934066772461
      ],
      [
        "SELECT T3.If_first_show FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID JOIN show AS T3 ON T2.Performance_ID = T3.Performance_ID ORDER BY T1.Major_Record_Format Asc",
        -6.733074188232422
      ],
      [
        "SELECT T2.If_first_show FROM performance AS T1 JOIN show AS T2 ON T1.Performance_ID = T2.Performance_ID ORDER BY T1.Date Asc",
        -6.852671146392822
      ],
      [
        "SELECT If_first_show FROM show ORDER BY * Asc",
        -7.269076824188232
      ],
      [
        "SELECT If_first_show FROM show ORDER BY Result Asc",
        -7.346282005310059
      ],
      [
        "SELECT T3.If_first_show FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID JOIN show AS T3 ON T2.Performance_ID = T3.Performance_ID ORDER BY T1.Year_of_Founded Asc",
        -7.737732887268066
      ],
      [
        "SELECT T2.If_first_show FROM performance AS T1 JOIN show AS T2 ON T1.Performance_ID = T2.Performance_ID ORDER BY T1.Official_ratings_(millions) Asc",
        -8.65027904510498
      ],
      [
        "SELECT If_first_show FROM show ORDER BY Show_ID Asc",
        -8.663583755493164
      ],
      [
        "SELECT T2.If_first_show FROM performance AS T1 JOIN show AS T2 ON T1.Performance_ID = T2.Performance_ID ORDER BY T1.Type Asc",
        -9.58108139038086
      ],
      [
        "SELECT T3.If_first_show FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID JOIN show AS T3 ON T2.Performance_ID = T3.Performance_ID ORDER BY T1.Record_Company Asc",
        -10.287481307983398
      ],
      [
        "SELECT T3.If_first_show FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID JOIN show AS T3 ON T2.Performance_ID = T3.Performance_ID ORDER BY T1.Orchestra Asc",
        -10.615642547607422
      ],
      [
        "SELECT T2.If_first_show FROM performance AS T1 JOIN show AS T2 ON T1.Performance_ID = T2.Performance_ID ORDER BY T1.Orchestra_ID Asc",
        -10.836753845214844
      ],
      [
        "SELECT T4.If_first_show FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID JOIN performance AS T3 ON T2.Orchestra_ID = T3.Orchestra_ID JOIN show AS T4 ON T3.Performance_ID = T4.Performance_ID ORDER BY T1.Year_of_Work Asc",
        -11.185393333435059
      ],
      [
        "SELECT * FROM show ORDER BY If_first_show Asc",
        -11.868828773498535
      ],
      [
        "SELECT T4.If_first_show FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID JOIN performance AS T3 ON T2.Orchestra_ID = T3.Orchestra_ID JOIN show AS T4 ON T3.Performance_ID = T4.Performance_ID ORDER BY T1.Age Asc",
        -11.999688148498535
      ],
      [
        "SELECT T3.If_first_show FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID JOIN show AS T3 ON T2.Performance_ID = T3.Performance_ID ORDER BY T1.Orchestra_ID Asc",
        -12.223133087158203
      ],
      [
        "SELECT If_first_show FROM show",
        -13.213202476501465
      ]
    ],
    "predicted_parse_with_values": "SELECT If_first_show FROM show ORDER BY If_first_show Asc",
    "predicted_parse": "SELECT If_first_show FROM show ORDER BY If_first_show Asc",
    "predicted_parse_explanation": [
      "find the if first show in show table ordered ascending by if first show"
    ],
    "template_feedback": "use orchestra table in place of show table . find for each value of major record format . find major record format in place of if first show . order the results by number of rows in place of if first show .",
    "primary_span": [
      [
        0,
        2
      ],
      [
        9,
        17
      ],
      [
        18,
        21
      ],
      [
        29,
        35
      ]
    ],
    "secondary_span": [
      [
        3,
        8
      ],
      [
        22,
        28
      ],
      [
        36,
        42
      ]
    ],
    "edits": [
      "major record format",
      "if first show",
      "orchestra",
      "show",
      "major record format",
      "number of rows",
      "if first show"
    ],
    "edits_original": "< select > add major record format </ select > < select > remove if first show </ select > < from > add orchestra </ from > < from > remove show </ from > < groupBy > add major record format </ groupBy > < orderBy > add number of rows </ orderBy > < orderBy > remove if first show </ orderBy >"
  },
  {
    "db_id": "world_1",
    "feedback": "Also ensure that countrylanguage's is official equals T .",
    "question": "Return the codes of countries for which Spanish is the predominantly spoken language.",
    "gold_parse": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
    "beam": [
      [
        "SELECT Code FROM country WHERE LocalName = value",
        -0.03575706481933594
      ],
      [
        "SELECT Code FROM country WHERE Name = ( SELECT LocalName FROM country WHERE LocalName = value )",
        -4.608842134475708
      ],
      [
        "SELECT Code FROM country WHERE Name = ( SELECT Code FROM country WHERE LocalName = value )",
        -5.15836238861084
      ],
      [
        "SELECT Code FROM country WHERE LocalName = ( SELECT LocalName FROM country WHERE LocalName = value )",
        -5.5092408657073975
      ],
      [
        "SELECT Code FROM country WHERE Name = ( SELECT Continent FROM country WHERE LocalName = value )",
        -5.696282386779785
      ],
      [
        "SELECT Code FROM country WHERE Name = value",
        -5.759695053100586
      ],
      [
        "SELECT Code FROM country WHERE LocalName = value AND LocalName = value",
        -6.095881462097168
      ],
      [
        "SELECT Code FROM country WHERE Name = ( SELECT GovernmentForm FROM country WHERE LocalName = value )",
        -6.684909820556641
      ],
      [
        "SELECT Code FROM country WHERE LocalName = ( SELECT Code FROM country WHERE LocalName = value )",
        -6.753830671310425
      ],
      [
        "SELECT T1.Code FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value",
        -7.02496862411499
      ],
      [
        "SELECT Code FROM country WHERE Name = ( SELECT Name FROM country WHERE LocalName = value )",
        -7.432623863220215
      ],
      [
        "SELECT Code FROM country WHERE LocalName = ( SELECT Continent FROM country WHERE LocalName = value )",
        -7.835778474807739
      ],
      [
        "SELECT T1.Code FROM country AS T1 WHERE T1.Name = ( SELECT T2.CountryCode FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.LocalName = value )",
        -8.040611267089844
      ],
      [
        "SELECT Code FROM country WHERE Name = value AND LocalName = value",
        -8.128641128540039
      ],
      [
        "SELECT Code FROM country WHERE LocalName = ( SELECT GovernmentForm FROM country WHERE LocalName = value )",
        -8.401232242584229
      ],
      [
        "SELECT Code FROM country WHERE LocalName = ( SELECT Name FROM country WHERE LocalName = value )",
        -8.748169422149658
      ],
      [
        "SELECT Code FROM country WHERE Continent = value",
        -10.238290786743164
      ],
      [
        "SELECT T2.Code FROM sqlite_sequence AS T1 JOIN country AS T2 WHERE T1.name = value",
        -10.373886108398438
      ],
      [
        "SELECT Code FROM country WHERE LocalName > value",
        -11.424201965332031
      ],
      [
        "SELECT Code FROM country",
        -18.028162956237793
      ]
    ],
    "predicted_parse_with_values": "SELECT Code FROM country WHERE LocalName = \"Spanish\"",
    "predicted_parse": "SELECT Code FROM country WHERE LocalName = value",
    "predicted_parse_explanation": [
      "find the code in country table whose local name equals Spanish"
    ],
    "template_feedback": "use countrylanguage table in place of country table . consider the language equals Spanish conditions in place of the local name equals Spanish conditions . find for each value of countrycode . additionally find maximum percentage .",
    "primary_span": [
      [
        0,
        2
      ],
      [
        9,
        14
      ],
      [
        25,
        31
      ],
      [
        32,
        36
      ]
    ],
    "secondary_span": [
      [
        3,
        8
      ],
      [
        15,
        24
      ]
    ],
    "edits": [
      "countrycode",
      "maximum percentage",
      "code",
      "countrylanguage",
      "country",
      "language equals \"Spanish\"",
      "local name equals \"Spanish\"",
      "countrycode"
    ],
    "edits_original": "< select > add countrycode </ select > < select > add maximum percentage </ select > < select > remove code </ select > < from > add countrylanguage </ from > < from > remove country </ from > < where > add language equals \" Spanish \" </ where > < where > remove local name equals \" Spanish \" </ where > < groupBy > add countrycode </ groupBy >"
  },
  {
    "db_id": "poker_player",
    "feedback": "Specify people's people id is present in poker player table .",
    "question": "What are the names of poker players?",
    "gold_parse": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID",
    "beam": [
      [
        "SELECT Name FROM people",
        -1.52587890625e-05
      ],
      [
        "SELECT Name FROM people WHERE Name = value",
        -11.812868565320969
      ],
      [
        "SELECT Name , Name FROM people",
        -12.831639766693115
      ],
      [
        "SELECT Count ( Name ) FROM people",
        -14.415051460266113
      ],
      [
        "SELECT DISTINCT Name FROM people",
        -14.479759216308594
      ],
      [
        "SELECT Name FROM people ORDER BY Name Asc",
        -14.67047929763794
      ],
      [
        "SELECT Poker_Player_ID FROM poker_player",
        -14.76467514038086
      ],
      [
        "SELECT Name FROM people WHERE Nationality = value",
        -14.975306987762451
      ],
      [
        "SELECT Name FROM people UNION SELECT Name FROM people",
        -15.253961086273193
      ],
      [
        "SELECT Sum ( Name ) FROM people",
        -15.67480754852295
      ],
      [
        "SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Poker_Player_ID = value",
        -15.81721019744873
      ],
      [
        "SELECT Name FROM people WHERE Height = value",
        -15.871391296386719
      ],
      [
        "SELECT Name FROM people GROUP BY Name",
        -16.37413501739502
      ],
      [
        "SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Money_Rank = value",
        -16.378242015838623
      ],
      [
        "SELECT Max ( Name ) FROM people",
        -17.001261711120605
      ],
      [
        "SELECT DISTINCT Name FROM people",
        -17.056041717529297
      ],
      [
        "SELECT Name FROM people LIMIT value",
        -17.263758659362793
      ],
      [
        "SELECT Name FROM people",
        -17.817134857177734
      ],
      [
        "SELECT Min ( Name ) FROM people",
        -17.962550163269043
      ],
      [
        "SELECT Name FROM people",
        -18.734207153320312
      ]
    ],
    "predicted_parse_with_values": "SELECT Name FROM people",
    "predicted_parse": "SELECT Name FROM people",
    "predicted_parse_explanation": [
      "find the name in people table"
    ],
    "template_feedback": "additionally use the information from the poker player table besides the people table .",
    "primary_span": [
      [
        0,
        8
      ]
    ],
    "secondary_span": [
      [
        9,
        13
      ]
    ],
    "edits": [
      "poker player"
    ],
    "edits_original": "< from > add poker player </ from >"
  },
  {
    "db_id": "car_1",
    "feedback": "you need to use year in-place of both the full name.",
    "question": "What is the maker of the carr produced in the earliest year and what year was it?",
    "gold_parse": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA)",
    "beam": [
      [
        "SELECT FullName , Maker FROM car_makers ORDER BY FullName Asc LIMIT value",
        -0.3029165267944336
      ],
      [
        "SELECT FullName , Maker FROM car_makers ORDER BY FullName Asc",
        -2.373417377471924
      ],
      [
        "SELECT T1.FullName , T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id ORDER BY T4.Year Asc LIMIT value",
        -2.5650272369384766
      ],
      [
        "SELECT T1.FullName , T4.Year FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id ORDER BY T1.FullName Asc LIMIT value",
        -2.9341483116149902
      ],
      [
        "SELECT FullName , Maker FROM car_makers WHERE FullName = value ORDER BY FullName Asc LIMIT value",
        -4.969330787658691
      ],
      [
        "SELECT Maker , Maker FROM car_makers ORDER BY FullName Asc LIMIT value",
        -5.011748790740967
      ],
      [
        "SELECT T1.FullName , T4.Year FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id ORDER BY T4.Year Asc LIMIT value",
        -5.107344150543213
      ],
      [
        "SELECT T1.FullName , T4.Year FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id ORDER BY T1.FullName Asc",
        -5.470608234405518
      ],
      [
        "SELECT T1.FullName , T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id ORDER BY T4.Edispl Asc LIMIT value",
        -6.068546772003174
      ],
      [
        "SELECT FullName FROM car_makers ORDER BY FullName Asc LIMIT value",
        -6.418304443359375
      ],
      [
        "SELECT FullName , Maker FROM car_makers ORDER BY Maker Asc LIMIT value",
        -6.462290287017822
      ],
      [
        "SELECT FullName , FullName FROM car_makers ORDER BY FullName Asc LIMIT value",
        -6.691827297210693
      ],
      [
        "SELECT T1.FullName , T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id WHERE T4.Year = value ORDER BY T1.FullName Asc LIMIT value",
        -6.698495388031006
      ],
      [
        "SELECT Maker , Maker FROM car_makers ORDER BY FullName Asc",
        -7.0794243812561035
      ],
      [
        "SELECT T1.FullName , T4.Year FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id WHERE T1.FullName = value ORDER BY T1.FullName Asc LIMIT value",
        -7.390204668045044
      ],
      [
        "SELECT T1.Maker , T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id ORDER BY T4.Year Asc LIMIT value",
        -7.3922505378723145
      ],
      [
        "SELECT Maker FROM car_makers ORDER BY FullName Asc LIMIT value",
        -8.097902297973633
      ],
      [
        "SELECT T1.FullName FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id ORDER BY T4.Year Asc LIMIT value",
        -8.282717227935791
      ],
      [
        "SELECT FullName FROM car_makers ORDER BY FullName Asc",
        -9.443471431732178
      ],
      [
        "SELECT T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id ORDER BY T4.Year Asc LIMIT value",
        -9.992814540863037
      ]
    ],
    "predicted_parse_with_values": "SELECT FullName , Maker FROM car_makers ORDER BY FullName Asc LIMIT 1",
    "predicted_parse": "SELECT FullName , Maker FROM car_makers ORDER BY FullName Asc LIMIT value",
    "predicted_parse_explanation": [
      "find the full name and maker in car makers table with smallest value of full name"
    ],
    "template_feedback": "use cars data table and car names table in place of car makers table . additionally make sure that year is equals minimum year cars data . find make and year in place of maker and full name . you should not find the smallest of the results . show me all the results .",
    "primary_span": [
      [
        0,
        7
      ],
      [
        15,
        26
      ],
      [
        27,
        30
      ],
      [
        39,
        54
      ]
    ],
    "secondary_span": [
      [
        8,
        14
      ],
      [
        31,
        38
      ]
    ],
    "edits": [
      "make",
      "year",
      "full name",
      "maker",
      "cars data",
      "car names",
      "car makers",
      "year equals SUBS1",
      "full name",
      "1",
      "minimum year",
      "cars data"
    ],
    "edits_original": "< select > add make </ select > < select > add year </ select > < select > remove full name </ select > < select > remove maker </ select > < from > add cars data </ from > < from > add car names </ from > < from > remove car makers </ from > < where > add year equals SUBS1 </ where > < orderBy > remove full name </ orderBy > < limit > remove 1 </ limit > < select > add minimum year </ select > < from > add cars data </ from >"
  },
  {
    "db_id": "world_1",
    "feedback": "we need to determine the total of surface area and exchange name using region.",
    "question": "How much surface area do the countires in the Carribean cover together?",
    "gold_parse": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"",
    "beam": [
      [
        "SELECT SurfaceArea FROM country WHERE Name = value",
        -0.27551698684692383
      ],
      [
        "SELECT SurfaceArea FROM country WHERE Region = value",
        -1.987874984741211
      ],
      [
        "SELECT T2.SurfaceArea FROM sqlite_sequence AS T1 JOIN country AS T2 WHERE T1.name = value",
        -2.7434754371643066
      ],
      [
        "SELECT SurfaceArea FROM country WHERE Continent = value",
        -3.8934922218322754
      ],
      [
        "SELECT SurfaceArea FROM country WHERE LocalName = value",
        -3.98789644241333
      ],
      [
        "SELECT SurfaceArea FROM country WHERE SurfaceArea = value",
        -8.091896057128906
      ],
      [
        "SELECT T2.SurfaceArea FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Name = value",
        -9.365143775939941
      ],
      [
        "SELECT SurfaceArea , Continent FROM country WHERE Name = value",
        -9.435864448547363
      ],
      [
        "SELECT T1.SurfaceArea FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value",
        -10.568408966064453
      ],
      [
        "SELECT SurfaceArea FROM country WHERE GovernmentForm = value",
        -11.07941722869873
      ],
      [
        "SELECT SurfaceArea FROM country WHERE Code2 = value",
        -11.382308006286621
      ],
      [
        "SELECT SurfaceArea FROM country",
        -11.831088066101074
      ],
      [
        "SELECT SurfaceArea FROM country WHERE SurfaceArea LIKE value",
        -11.87017822265625
      ],
      [
        "SELECT T2.SurfaceArea , T2.Continent FROM sqlite_sequence AS T1 JOIN country AS T2 WHERE T1.name = value",
        -12.05758285522461
      ],
      [
        "SELECT SurfaceArea FROM country WHERE HeadOfState = value",
        -12.400830268859863
      ],
      [
        "SELECT SurfaceArea FROM country WHERE IndepYear = value",
        -12.414170265197754
      ],
      [
        "SELECT SurfaceArea FROM country WHERE Capital = value",
        -12.967534065246582
      ],
      [
        "SELECT T2.SurfaceArea FROM sqlite_sequence AS T1 JOIN country AS T2 WHERE T1.seq = value",
        -13.297734260559082
      ],
      [
        "SELECT SurfaceArea FROM country WHERE GNP = value",
        -13.651000022888184
      ],
      [
        "SELECT Min ( SurfaceArea ) FROM country",
        -17.020188331604004
      ]
    ],
    "predicted_parse_with_values": "SELECT SurfaceArea FROM country WHERE Name = \"Caribbean\"",
    "predicted_parse": "SELECT SurfaceArea FROM country WHERE Name = value",
    "predicted_parse_explanation": [
      "find the surface area in country table whose name equals Caribbean"
    ],
    "template_feedback": "consider the region equals Caribbean conditions in place of the name equals Caribbean conditions . find summation of surface area in place of surface area .",
    "primary_span": [
      [
        0,
        5
      ],
      [
        15,
        19
      ]
    ],
    "secondary_span": [
      [
        6,
        14
      ],
      [
        20,
        25
      ]
    ],
    "edits": [
      "summation of surface area",
      "surface area",
      "region equals \"Caribbean\"",
      "name equals \"Caribbean\""
    ],
    "edits_original": "< select > add summation of surface area </ select > < select > remove surface area </ select > < where > add region equals \" Caribbean \" </ where > < where > remove name equals \" Caribbean \" </ where >"
  },
  {
    "db_id": "world_1",
    "feedback": "i want surface area instead of population.",
    "question": "Return the names and surface areas of the 5 largest countries.",
    "gold_parse": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
    "beam": [
      [
        "SELECT Name , SurfaceArea FROM country ORDER BY Population Desc LIMIT value",
        -0.020372390747070312
      ],
      [
        "SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea Desc LIMIT value",
        -3.966952323913574
      ],
      [
        "SELECT LocalName , SurfaceArea FROM country ORDER BY Population Desc LIMIT value",
        -6.984927177429199
      ],
      [
        "SELECT Name , SurfaceArea FROM country ORDER BY Continent Desc LIMIT value",
        -8.285398483276367
      ],
      [
        "SELECT LocalName , SurfaceArea FROM country ORDER BY SurfaceArea Desc LIMIT value",
        -10.869149208068848
      ],
      [
        "SELECT T2.Name , T2.SurfaceArea FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code ORDER BY T1.Population Desc LIMIT value",
        -11.716355323791504
      ],
      [
        "SELECT Max ( SurfaceArea ) , Region FROM country ORDER BY Population Desc LIMIT value",
        -12.194047927856445
      ],
      [
        "SELECT Name , SurfaceArea FROM country ORDER BY LifeExpectancy Desc LIMIT value",
        -12.735575675964355
      ],
      [
        "SELECT Name , SurfaceArea FROM country ORDER BY Population Asc LIMIT value",
        -12.762913703918457
      ],
      [
        "SELECT Name , SurfaceArea FROM country ORDER BY Population Desc",
        -12.94981861114502
      ],
      [
        "SELECT Name FROM country ORDER BY Population Desc LIMIT value",
        -13.086108207702637
      ],
      [
        "SELECT Name , SurfaceArea FROM country GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value",
        -13.40789794921875
      ],
      [
        "SELECT Max ( SurfaceArea ) , SurfaceArea FROM country ORDER BY Population Desc LIMIT value",
        -13.59703540802002
      ],
      [
        "SELECT Name , SurfaceArea FROM country",
        -13.65913200378418
      ],
      [
        "SELECT Name , SurfaceArea , Continent FROM country ORDER BY Population Desc LIMIT value",
        -13.668437957763672
      ],
      [
        "SELECT Name , SurfaceArea FROM country ORDER BY GNP Desc LIMIT value",
        -13.84554672241211
      ],
      [
        "SELECT Region , SurfaceArea FROM country ORDER BY Population Desc LIMIT value",
        -14.043718338012695
      ],
      [
        "SELECT Name , SurfaceArea FROM country GROUP BY Region ORDER BY Count ( * ) Desc LIMIT value",
        -14.05007266998291
      ],
      [
        "SELECT Name , SurfaceArea FROM country WHERE Continent = ( SELECT Continent FROM country ORDER BY Population Desc LIMIT value ) ORDER BY Population Desc LIMIT value",
        -14.857567310333252
      ],
      [
        "SELECT Name FROM country ORDER BY SurfaceArea Desc LIMIT value",
        -15.268109321594238
      ]
    ],
    "predicted_parse_with_values": "SELECT Name , SurfaceArea FROM country ORDER BY Population Desc LIMIT 5",
    "predicted_parse": "SELECT Name , SurfaceArea FROM country ORDER BY Population Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: find the name and surface area in country table ordered descending by population",
      "Step 2: only show the first 5 rows of the results"
    ],
    "template_feedback": "in step 1 , order the results by surface area in place of population .",
    "primary_span": [
      [
        4,
        9
      ]
    ],
    "secondary_span": [
      [
        10,
        14
      ]
    ],
    "edits": [
      "surface area",
      "population"
    ],
    "edits_original": "< orderBy > add surface area </ orderBy > < orderBy > remove population </ orderBy >"
  },
  {
    "db_id": "car_1",
    "feedback": "Ensure for whose model of car names equals volvo .",
    "question": "For model volvo, how many cylinders does the car with the least accelerate have?",
    "gold_parse": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1",
    "beam": [
      [
        "SELECT Cylinders FROM cars_data ORDER BY Accelerate Asc LIMIT value",
        -0.7818717956542969
      ],
      [
        "SELECT Year , Cylinders FROM cars_data GROUP BY Year ORDER BY Count ( * ) Asc LIMIT value",
        -1.6994867324829102
      ],
      [
        "SELECT Year , Cylinders FROM cars_data ORDER BY Accelerate Asc LIMIT value",
        -2.3906688690185547
      ],
      [
        "SELECT Cylinders FROM cars_data WHERE Year = value",
        -2.7883358001708984
      ],
      [
        "SELECT Count ( * ) FROM cars_data WHERE Year = value",
        -3.447481155395508
      ],
      [
        "SELECT Cylinders , Year FROM cars_data ORDER BY Accelerate Asc LIMIT value",
        -3.952751398086548
      ],
      [
        "SELECT Edispl , Cylinders FROM cars_data GROUP BY Year ORDER BY Count ( * ) Asc LIMIT value",
        -3.969438076019287
      ],
      [
        "SELECT T1.Model , T3.Cylinders FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id GROUP BY T3.Year ORDER BY Count ( * ) Asc LIMIT value",
        -4.050196170806885
      ],
      [
        "SELECT Edispl , Cylinders FROM cars_data ORDER BY Accelerate Asc LIMIT value",
        -4.133610725402832
      ],
      [
        "SELECT Cylinders , Year FROM cars_data GROUP BY Year ORDER BY Count ( * ) Asc LIMIT value",
        -4.31382417678833
      ],
      [
        "SELECT T3.Year , T3.Cylinders FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id GROUP BY T1.Model ORDER BY Count ( * ) Asc LIMIT value",
        -4.458949327468872
      ],
      [
        "SELECT Cylinders , Count ( * ) FROM cars_data GROUP BY Year ORDER BY Count ( * ) Asc LIMIT value",
        -4.607026100158691
      ],
      [
        "SELECT Cylinders , Accelerate FROM cars_data ORDER BY Accelerate Asc LIMIT value",
        -4.810481548309326
      ],
      [
        "SELECT T1.Model , T3.Cylinders FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id ORDER BY T3.Accelerate Asc LIMIT value",
        -4.874955177307129
      ],
      [
        "SELECT Edispl FROM cars_data ORDER BY Accelerate Asc LIMIT value",
        -5.11289644241333
      ],
      [
        "SELECT Cylinders , Count ( * ) FROM cars_data ORDER BY Accelerate Asc LIMIT value",
        -5.152805328369141
      ],
      [
        "SELECT Cylinders , Accelerate FROM cars_data GROUP BY Year ORDER BY Count ( * ) Asc LIMIT value",
        -5.377633571624756
      ],
      [
        "SELECT Cylinders , Cylinders FROM cars_data ORDER BY Accelerate Asc LIMIT value",
        -6.10735559463501
      ],
      [
        "SELECT T1.Model , T2.Cylinders FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id GROUP BY T2.Year ORDER BY Count ( * ) Asc LIMIT value",
        -6.1223835945129395
      ],
      [
        "SELECT Cylinders , Edispl FROM cars_data ORDER BY Accelerate Asc LIMIT value",
        -6.231560468673706
      ]
    ],
    "predicted_parse_with_values": "SELECT Cylinders FROM cars_data ORDER BY Accelerate Asc LIMIT 1",
    "predicted_parse": "SELECT Cylinders FROM cars_data ORDER BY Accelerate Asc LIMIT value",
    "predicted_parse_explanation": [
      "find the cylinders in cars data table with smallest value of accelerate"
    ],
    "template_feedback": "additionally use the information from the car names table besides the cars data table . additionally make sure that model equals volvo .",
    "primary_span": [
      [
        0,
        8
      ],
      [
        15,
        22
      ]
    ],
    "secondary_span": [
      [
        9,
        14
      ]
    ],
    "edits": [
      "car names",
      "model equals \"volvo\""
    ],
    "edits_original": "< from > add car names </ from > < where > add model equals \" volvo \" </ where >"
  },
  {
    "db_id": "flight_2",
    "feedback": "In step 1 Swap airlines table with flights table .",
    "question": "Find all airlines that have at least 10 flights.",
    "gold_parse": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10",
    "beam": [
      [
        "SELECT Airline FROM airlines GROUP BY Airline HAVING Count ( * ) > = value",
        -0.0003337860107421875
      ],
      [
        "SELECT Airline FROM airlines GROUP BY uid HAVING Count ( * ) > = value",
        -8.45422077178955
      ],
      [
        "SELECT Airline FROM airlines GROUP BY Abbreviation HAVING Count ( * ) > = value",
        -9.365450859069824
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 GROUP BY T2.FlightNo HAVING Count ( * ) > = value",
        -11.658101081848145
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 WHERE T2.FlightNo > = value",
        -12.072543859481812
      ],
      [
        "SELECT Airline FROM airlines WHERE uid > = value",
        -12.184839725494385
      ],
      [
        "SELECT Airline FROM airlines WHERE Abbreviation > = value",
        -12.76216435432434
      ],
      [
        "SELECT Airline FROM airlines WHERE Airline > = value",
        -13.934234619140625
      ],
      [
        "SELECT T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 GROUP BY T1.Airline HAVING Count ( * ) > = value",
        -14.044914245605469
      ],
      [
        "SELECT DISTINCT Airline FROM airlines GROUP BY Airline HAVING Count ( * ) > = value",
        -14.156675338745117
      ],
      [
        "SELECT Airline FROM airlines GROUP BY Count ( * ) HAVING Count ( * ) > = value",
        -14.43893814086914
      ],
      [
        "SELECT Abbreviation FROM airlines GROUP BY Airline HAVING Count ( * ) > = value",
        -14.483405113220215
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 WHERE T2.Airline > = value",
        -14.491703033447266
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 GROUP BY T2.Airline HAVING Count ( * ) > = value",
        -14.663043975830078
      ],
      [
        "SELECT Airline FROM airlines",
        -14.703360557556152
      ],
      [
        "SELECT T2.Airline FROM airlines AS T1 JOIN flights AS T2 GROUP BY T1.Airline HAVING Count ( * ) > = value",
        -15.39096450805664
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 EXCEPT SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 WHERE T2.FlightNo = value",
        -15.478085041046143
      ],
      [
        "SELECT Airline FROM airlines GROUP BY Country HAVING Count ( * ) > = value",
        -15.594340324401855
      ],
      [
        "SELECT Airline FROM airlines GROUP BY Airline , uid HAVING Count ( * ) > = value",
        -15.88108491897583
      ],
      [
        "SELECT Airline FROM airlines GROUP BY Airline ORDER BY Count ( * ) Asc",
        -15.910923957824707
      ]
    ],
    "predicted_parse_with_values": "SELECT Airline FROM airlines GROUP BY Airline HAVING Count ( * ) > = 10",
    "predicted_parse": "SELECT Airline FROM airlines GROUP BY Airline HAVING Count ( * ) > = value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of airline name in airlines table",
      "Step 2: find the airline name in airlines table whose corresponding value in step 1 is greater than or equals 10"
    ],
    "template_feedback": "in step 1 , additionally use the information from the flights table besides the airlines table . in step 2 , make sure that the corresponding value in step 1 greater than 10 .",
    "primary_span": [
      [
        4,
        11
      ],
      [
        21,
        33
      ]
    ],
    "secondary_span": [
      [
        12,
        16
      ]
    ],
    "edits": [
      "flights",
      "number of rows greater than 10",
      "number of rows greater than or equals to 10"
    ],
    "edits_original": "< from > add flights </ from > < having > add number of rows greater than 10 </ having > < having > remove number of rows greater than or equals to 10 </ having >"
  },
  {
    "db_id": "wta_1",
    "feedback": "Supersede loser rank with summation of winner rank points in step 2.",
    "question": "What is the name of the winner who has won the most matches, and how many rank points does this player have?",
    "gold_parse": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1",
    "beam": [
      [
        "SELECT winner_name , loser_rank FROM matches GROUP BY winner_name ORDER BY Count ( * ) Desc LIMIT value",
        -0.6784086227416992
      ],
      [
        "SELECT tourney_name , loser_rank FROM matches GROUP BY winner_name ORDER BY Count ( * ) Desc LIMIT value",
        -1.200052261352539
      ],
      [
        "SELECT winner_name , winner_rank FROM matches GROUP BY winner_name ORDER BY Count ( * ) Desc LIMIT value",
        -2.9619855880737305
      ],
      [
        "SELECT tourney_name , winner_rank FROM matches GROUP BY winner_name ORDER BY Count ( * ) Desc LIMIT value",
        -3.0311031341552734
      ],
      [
        "SELECT loser_name , loser_rank FROM matches GROUP BY winner_name ORDER BY Count ( * ) Desc LIMIT value",
        -3.4714832305908203
      ],
      [
        "SELECT T2.tourney_name , T3.ranking FROM players AS T1 JOIN matches AS T2 ON T2.loser_id = T1.player_id JOIN rankings AS T3 ON T1.player_id = T3.player_id GROUP BY T2.winner_name ORDER BY Count ( * ) Desc LIMIT value",
        -4.018644332885742
      ],
      [
        "SELECT T2.winner_name , T3.ranking FROM players AS T1 JOIN matches AS T2 ON T2.loser_id = T1.player_id JOIN rankings AS T3 ON T1.player_id = T3.player_id GROUP BY T2.winner_name ORDER BY Count ( * ) Desc LIMIT value",
        -4.064288139343262
      ],
      [
        "SELECT winner_name , loser_rank FROM matches GROUP BY tourney_id ORDER BY Count ( * ) Desc LIMIT value",
        -5.195529937744141
      ],
      [
        "SELECT loser_name , winner_rank FROM matches GROUP BY winner_name ORDER BY Count ( * ) Desc LIMIT value",
        -5.308921813964844
      ],
      [
        "SELECT tourney_name , loser_rank FROM matches GROUP BY tourney_id ORDER BY Count ( * ) Desc LIMIT value",
        -5.665252685546875
      ],
      [
        "SELECT T2.loser_name , T3.ranking FROM players AS T1 JOIN matches AS T2 ON T2.loser_id = T1.player_id JOIN rankings AS T3 ON T1.player_id = T3.player_id GROUP BY T2.winner_name ORDER BY Count ( * ) Desc LIMIT value",
        -6.283416748046875
      ],
      [
        "SELECT winner_name , loser_rank FROM matches GROUP BY winner_id ORDER BY Count ( * ) Desc LIMIT value",
        -6.588784217834473
      ],
      [
        "SELECT T2.winner_name , T2.loser_rank FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T1.first_name ORDER BY Count ( * ) Desc LIMIT value",
        -6.72955322265625
      ],
      [
        "SELECT tourney_name , loser_rank FROM matches GROUP BY winner_id ORDER BY Count ( * ) Desc LIMIT value",
        -7.04534912109375
      ],
      [
        "SELECT T2.tourney_name , T2.loser_rank FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T1.first_name ORDER BY Count ( * ) Desc LIMIT value",
        -7.2237396240234375
      ],
      [
        "SELECT T2.winner_name , T2.loser_rank FROM players AS T1 JOIN matches AS T2 ON T2.loser_id = T1.player_id JOIN rankings AS T3 ON T1.player_id = T3.player_id GROUP BY T3.player_id ORDER BY Count ( * ) Desc LIMIT value",
        -7.259176254272461
      ],
      [
        "SELECT winner_name , winner_rank FROM matches GROUP BY tourney_id ORDER BY Count ( * ) Desc LIMIT value",
        -7.427984237670898
      ],
      [
        "SELECT tourney_name , winner_rank FROM matches GROUP BY tourney_id ORDER BY Count ( * ) Desc LIMIT value",
        -7.4713544845581055
      ],
      [
        "SELECT T2.tourney_name , T2.loser_rank FROM players AS T1 JOIN matches AS T2 ON T2.loser_id = T1.player_id JOIN rankings AS T3 ON T1.player_id = T3.player_id GROUP BY T3.player_id ORDER BY Count ( * ) Desc LIMIT value",
        -7.708218574523926
      ],
      [
        "SELECT loser_name , loser_rank FROM matches GROUP BY tourney_id ORDER BY Count ( * ) Desc LIMIT value",
        -7.935791969299316
      ]
    ],
    "predicted_parse_with_values": "SELECT winner_name , loser_rank FROM matches GROUP BY winner_name ORDER BY Count ( * ) Desc LIMIT 1",
    "predicted_parse": "SELECT winner_name , loser_rank FROM matches GROUP BY winner_name ORDER BY Count ( * ) Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of winner name in matches table",
      "Step 2: find the winner name and loser rank in matches table with largest value in the results of step 1"
    ],
    "template_feedback": "in step 2 , find winner rank points in place of loser rank .",
    "primary_span": [
      [
        4,
        7
      ]
    ],
    "secondary_span": [
      [
        8,
        13
      ]
    ],
    "edits": [
      "winner rank points",
      "loser rank"
    ],
    "edits_original": "< select > add winner rank points </ select > < select > remove loser rank </ select >"
  },
  {
    "db_id": "dog_kennels",
    "feedback": "There should be largest value of age instead of smallest value of age .",
    "question": "What is the age of the oldest dog?",
    "gold_parse": "SELECT max(age) FROM Dogs",
    "beam": [
      [
        "SELECT age FROM Dogs ORDER BY age Asc LIMIT value",
        -0.309722900390625
      ],
      [
        "SELECT age FROM Dogs ORDER BY age Desc LIMIT value",
        -1.7991876602172852
      ],
      [
        "SELECT age FROM Dogs ORDER BY date_of_birth Asc LIMIT value",
        -2.517862319946289
      ],
      [
        "SELECT age FROM Dogs ORDER BY date_of_birth Desc LIMIT value",
        -4.068504333496094
      ],
      [
        "SELECT Max ( age ) FROM Dogs",
        -6.724016189575195
      ],
      [
        "SELECT date_of_birth FROM Dogs ORDER BY age Asc LIMIT value",
        -6.732045650482178
      ],
      [
        "SELECT Max ( age ) FROM Dogs ORDER BY age Asc LIMIT value",
        -8.232443809509277
      ],
      [
        "SELECT date_of_birth FROM Dogs ORDER BY age Desc LIMIT value",
        -8.827707767486572
      ],
      [
        "SELECT date_of_birth FROM Dogs ORDER BY date_of_birth Asc LIMIT value",
        -8.889362812042236
      ],
      [
        "SELECT Max ( age ) FROM Dogs ORDER BY age Desc LIMIT value",
        -10.15824031829834
      ],
      [
        "SELECT Max ( age ) FROM Dogs ORDER BY date_of_birth Asc LIMIT value",
        -10.39286994934082
      ],
      [
        "SELECT date_of_birth FROM Dogs ORDER BY date_of_birth Desc LIMIT value",
        -11.090117931365967
      ],
      [
        "SELECT age FROM Dogs ORDER BY age Asc",
        -11.18030834197998
      ],
      [
        "SELECT Max ( date_of_birth ) FROM Dogs",
        -11.742510795593262
      ],
      [
        "SELECT age FROM Dogs WHERE date_of_birth = ( SELECT Max ( date_of_birth ) FROM Dogs )",
        -12.443770408630371
      ],
      [
        "SELECT Max ( age ) FROM Dogs ORDER BY date_of_birth Desc LIMIT value",
        -12.444052696228027
      ],
      [
        "SELECT age FROM Dogs WHERE age = ( SELECT Max ( date_of_birth ) FROM Dogs )",
        -12.507567882537842
      ],
      [
        "SELECT Max ( age ) FROM Dogs UNION SELECT Max ( age ) FROM Dogs",
        -12.707295417785645
      ],
      [
        "SELECT age , date_of_birth FROM Dogs ORDER BY age Asc LIMIT value",
        -12.905697345733643
      ],
      [
        "SELECT age FROM Dogs ORDER BY age Desc",
        -12.951055526733398
      ]
    ],
    "predicted_parse_with_values": "SELECT age FROM Dogs ORDER BY age Asc LIMIT 1",
    "predicted_parse": "SELECT age FROM Dogs ORDER BY age Asc LIMIT value",
    "predicted_parse_explanation": [
      "find the age in dogs table with smallest value of age"
    ],
    "template_feedback": "find maximum age in place of age . you should not find the smallest of the results . show me all the results .",
    "primary_span": [
      [
        0,
        2
      ],
      [
        8,
        23
      ]
    ],
    "secondary_span": [
      [
        3,
        7
      ]
    ],
    "edits": [
      "maximum age",
      "age",
      "age",
      "1"
    ],
    "edits_original": "< select > add maximum age </ select > < select > remove age </ select > < orderBy > remove age </ orderBy > < limit > remove 1 </ limit >"
  },
  {
    "db_id": "world_1",
    "feedback": "i want language not local name.",
    "question": "Count the number of countries for which Spanish is the predominantly spoken language.",
    "gold_parse": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
    "beam": [
      [
        "SELECT Count ( * ) FROM country WHERE LocalName = value",
        -0.10721874237060547
      ],
      [
        "SELECT Count ( DISTINCT Continent ) FROM country WHERE LocalName = value",
        -2.3545475006103516
      ],
      [
        "SELECT Count ( * ) FROM country WHERE Name = value",
        -5.344577312469482
      ],
      [
        "SELECT Count ( * ) FROM countrylanguage WHERE Language = value",
        -7.1355485916137695
      ],
      [
        "SELECT Count ( DISTINCT GovernmentForm ) FROM country WHERE LocalName = value",
        -7.142714500427246
      ],
      [
        "SELECT Count ( DISTINCT Continent ) FROM country WHERE Name = value",
        -8.084065437316895
      ],
      [
        "SELECT Count ( DISTINCT T1.Continent ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value",
        -11.129892349243164
      ],
      [
        "SELECT Count ( * ) FROM country WHERE LocalName = value AND LocalName = value",
        -11.438522338867188
      ],
      [
        "SELECT Count ( * ) FROM country WHERE Region = value",
        -11.7532958984375
      ],
      [
        "SELECT Count ( * ) FROM country WHERE Continent = value",
        -11.891606330871582
      ],
      [
        "SELECT Count ( Continent ) FROM country WHERE LocalName = value",
        -12.234167098999023
      ],
      [
        "SELECT Count ( DISTINCT GovernmentForm ) FROM country WHERE Name = value",
        -12.312945365905762
      ],
      [
        "SELECT Count ( * ) FROM country WHERE Code2 = value",
        -12.771051406860352
      ],
      [
        "SELECT Count ( * ) FROM country WHERE LifeExpectancy = value",
        -13.088400840759277
      ],
      [
        "SELECT Count ( DISTINCT Name ) FROM country WHERE LocalName = value",
        -13.732605934143066
      ],
      [
        "SELECT Count ( * ) FROM country WHERE LocalName > value",
        -14.180283546447754
      ],
      [
        "SELECT Continent FROM country WHERE LocalName = value",
        -14.191506385803223
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM country WHERE LocalName = value",
        -14.409268379211426
      ],
      [
        "SELECT Avg ( Continent ) FROM country WHERE LocalName = value",
        -14.727287292480469
      ],
      [
        "SELECT Count ( DISTINCT Continent ) FROM country WHERE LifeExpectancy = value",
        -14.766928672790527
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM country WHERE LocalName = \"Spanish\"",
    "predicted_parse": "SELECT Count ( * ) FROM country WHERE LocalName = value",
    "predicted_parse_explanation": [
      "find the number of rows in country table whose local name equals Spanish"
    ],
    "template_feedback": "use countrylanguage table in place of country table . consider the language equals Spanish conditions in place of the local name equals Spanish conditions . find for each value of countrycode . additionally find maximum percentage .",
    "primary_span": [
      [
        0,
        2
      ],
      [
        9,
        14
      ],
      [
        25,
        31
      ],
      [
        32,
        36
      ]
    ],
    "secondary_span": [
      [
        3,
        8
      ],
      [
        15,
        24
      ]
    ],
    "edits": [
      "maximum percentage",
      "countrylanguage",
      "country",
      "language equals \"Spanish\"",
      "local name equals \"Spanish\"",
      "countrycode"
    ],
    "edits_original": "< select > add maximum percentage </ select > < from > add countrylanguage </ from > < from > remove country </ from > < where > add language equals \" Spanish \" </ where > < where > remove local name equals \" Spanish \" </ where > < groupBy > add countrycode </ groupBy >"
  },
  {
    "db_id": "network_1",
    "feedback": "In Step 2 Supplant liked id of likes table with student id of friend Table .",
    "question": "Show ids of all students who do not have any friends.",
    "gold_parse": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend",
    "beam": [
      [
        "SELECT T1.ID FROM Highschooler AS T1 EXCEPT SELECT T2.liked_id FROM Likes AS T2",
        -0.8133735656738281
      ],
      [
        "SELECT T1.ID FROM Highschooler AS T1 EXCEPT SELECT T2.student_id FROM Friend AS T2",
        -1.2216911315917969
      ],
      [
        "SELECT T1.ID FROM Highschooler AS T1 EXCEPT SELECT T2.student_id FROM Likes AS T2",
        -1.407257080078125
      ],
      [
        "SELECT T1.ID FROM Highschooler AS T1 EXCEPT SELECT T2.friend_id FROM Friend AS T2",
        -4.115746974945068
      ],
      [
        "SELECT T1.ID FROM Highschooler AS T1 WHERE T1.ID NOT IN ( SELECT T2.student_id FROM Likes AS T2 )",
        -7.607892990112305
      ],
      [
        "SELECT T1.ID FROM Highschooler AS T1 WHERE T1.ID NOT IN ( SELECT T2.liked_id FROM Likes AS T2 )",
        -8.447370529174805
      ],
      [
        "SELECT T1.ID FROM Highschooler AS T1 WHERE T1.ID NOT IN ( SELECT T2.student_id FROM Friend AS T2 )",
        -10.605873107910156
      ],
      [
        "SELECT T1.ID FROM Highschooler AS T1 EXCEPT SELECT T2.student_id FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id WHERE T1.name = value",
        -11.614686965942383
      ],
      [
        "SELECT ID FROM Highschooler EXCEPT SELECT ID FROM Highschooler",
        -11.971223831176758
      ],
      [
        "SELECT T1.ID FROM Highschooler AS T1 EXCEPT SELECT T2.liked_id FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id WHERE T1.name = value",
        -12.420203924179077
      ],
      [
        "SELECT T1.ID FROM Highschooler AS T1 EXCEPT SELECT T2.student_id FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id WHERE T1.name = value",
        -12.63855528831482
      ],
      [
        "SELECT ID FROM Highschooler EXCEPT SELECT name FROM Highschooler",
        -12.937360763549805
      ],
      [
        "SELECT ID FROM Highschooler EXCEPT SELECT * FROM Highschooler",
        -13.300012588500977
      ],
      [
        "SELECT T1.student_id FROM Friend AS T1 EXCEPT SELECT T2.liked_id FROM Likes AS T2",
        -13.719358444213867
      ],
      [
        "SELECT T1.ID FROM Highschooler AS T1 WHERE T1.ID NOT IN ( SELECT T2.friend_id FROM Friend AS T2 )",
        -13.891743659973145
      ],
      [
        "SELECT T1.ID FROM Highschooler AS T1 INTERSECT SELECT T2.liked_id FROM Likes AS T2",
        -14.105169296264648
      ],
      [
        "SELECT student_id FROM Friend EXCEPT SELECT student_id FROM Friend",
        -14.12505054473877
      ],
      [
        "SELECT T1.ID FROM Highschooler AS T1 UNION SELECT T2.liked_id FROM Likes AS T2",
        -14.204895973205566
      ],
      [
        "SELECT T1.student_id FROM Friend AS T1 EXCEPT SELECT T2.student_id FROM Likes AS T2",
        -14.214174270629883
      ],
      [
        "SELECT ID FROM Highschooler",
        -14.772017478942871
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.ID FROM Highschooler AS T1 EXCEPT SELECT T2.liked_id FROM Likes AS T2",
    "predicted_parse": "SELECT T1.ID FROM Highschooler AS T1 EXCEPT SELECT T2.liked_id FROM Likes AS T2",
    "predicted_parse_explanation": [
      "Step 1: find the id in high schooler table",
      "Step 2: find the liked id in likes table",
      "Step 3: show the rows that are in the results of step 1 but not in the results of step 2"
    ],
    "template_feedback": "in step 2 , use friend table in place of likes table .",
    "primary_span": [
      [
        4,
        6
      ]
    ],
    "secondary_span": [
      [
        7,
        12
      ]
    ],
    "edits": [
      "student id",
      "liked id",
      "friend",
      "likes"
    ],
    "edits_original": "< select > add student id </ select > < select > remove liked id </ select > < from > add friend </ from > < from > remove likes </ from >"
  },
  {
    "db_id": "car_1",
    "feedback": "i want the name from cars data table with lowest accelerate and volvo should be the model of car name's.",
    "question": "For a volvo model, how many cylinders does the version with least accelerate have?",
    "gold_parse": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1",
    "beam": [
      [
        "SELECT Count ( * ) FROM cars_data WHERE Accelerate = value",
        -0.48175477981567383
      ],
      [
        "SELECT Model , Count ( * ) FROM model_list GROUP BY Model ORDER BY Count ( * ) Asc LIMIT value",
        -2.0346386432647705
      ],
      [
        "SELECT T3.Cylinders , Count ( * ) FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id GROUP BY T1.Model ORDER BY Count ( * ) Asc LIMIT value",
        -2.3510265350341797
      ],
      [
        "SELECT Count ( * ) FROM cars_data WHERE Year = value",
        -3.370906352996826
      ],
      [
        "SELECT Cylinders FROM cars_data WHERE Accelerate = value",
        -4.018920421600342
      ],
      [
        "SELECT T1.Model , Count ( * ) FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id GROUP BY T3.MPG ORDER BY Count ( * ) Asc LIMIT value",
        -4.445937395095825
      ],
      [
        "SELECT Cylinders FROM cars_data ORDER BY Accelerate Asc LIMIT value",
        -4.516180992126465
      ],
      [
        "SELECT T1.Model , Count ( * ) FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T3.Accelerate = value GROUP BY T1.Model ORDER BY Count ( * ) Asc LIMIT value",
        -4.712887287139893
      ],
      [
        "SELECT T3.Cylinders , Count ( * ) FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T3.Accelerate = value GROUP BY T1.Model ORDER BY Count ( * ) Asc LIMIT value",
        -4.718696117401123
      ],
      [
        "SELECT Cylinders , Count ( * ) FROM cars_data GROUP BY MPG ORDER BY Count ( * ) Asc LIMIT value",
        -4.96094274520874
      ],
      [
        "SELECT T3.MPG , Count ( * ) FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id GROUP BY T1.Model ORDER BY Count ( * ) Asc LIMIT value",
        -5.143734693527222
      ],
      [
        "SELECT T3.Year , Count ( * ) FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id GROUP BY T1.Model ORDER BY Count ( * ) Asc LIMIT value",
        -5.397576570510864
      ],
      [
        "SELECT T2.Model , Count ( * ) FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model GROUP BY T1.Model ORDER BY Count ( * ) Asc LIMIT value",
        -5.678754568099976
      ],
      [
        "SELECT T3.Horsepower , Count ( * ) FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id GROUP BY T1.Model ORDER BY Count ( * ) Asc LIMIT value",
        -5.964642524719238
      ],
      [
        "SELECT T3.Edispl , Count ( * ) FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id GROUP BY T1.Model ORDER BY Count ( * ) Asc LIMIT value",
        -5.997071981430054
      ],
      [
        "SELECT Count ( * ) FROM model_list WHERE Model = value",
        -6.323211193084717
      ],
      [
        "SELECT Count ( * ) FROM cars_data WHERE Accelerate < value",
        -6.392577171325684
      ],
      [
        "SELECT T1.Model , Count ( * ) FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model GROUP BY T2.Model ORDER BY Count ( * ) Asc LIMIT value",
        -6.4114670753479
      ],
      [
        "SELECT T3.Cylinders , Count ( * ) FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T3.Accelerate < value GROUP BY T1.Model ORDER BY Count ( * ) Asc LIMIT value",
        -6.616487264633179
      ],
      [
        "SELECT Cylinders , Count ( * ) FROM cars_data WHERE Accelerate = value GROUP BY MPG ORDER BY Count ( * ) Asc LIMIT value",
        -6.628116130828857
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM cars_data WHERE Accelerate = 1",
    "predicted_parse": "SELECT Count ( * ) FROM cars_data WHERE Accelerate = value",
    "predicted_parse_explanation": [
      "find the number of rows in cars data table whose accelerate equals 1"
    ],
    "template_feedback": "additionally use the information from the car names table besides the cars data table . consider the model equals volvo conditions in place of the accelerate equals 1 conditions . find cylinders in place of number of rows . find the result with the smallest accelerate .",
    "primary_span": [
      [
        0,
        8
      ],
      [
        15,
        20
      ],
      [
        30,
        31
      ],
      [
        39,
        46
      ]
    ],
    "secondary_span": [
      [
        9,
        14
      ],
      [
        21,
        29
      ],
      [
        32,
        38
      ]
    ],
    "edits": [
      "cylinders",
      "number of rows",
      "car names",
      "model equals \"volvo\"",
      "accelerate equals 1",
      "accelerate",
      "1"
    ],
    "edits_original": "< select > add cylinders </ select > < select > remove number of rows </ select > < from > add car names </ from > < where > add model equals \" volvo \" </ where > < where > remove accelerate equals 1 </ where > < orderBy > add accelerate </ orderBy > < limit > add 1 </ limit >"
  },
  {
    "db_id": "concert_singer",
    "feedback": "No need to find average of all average .",
    "question": "What is the name and capacity for the stadium with the highest average attendance?",
    "gold_parse": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1",
    "beam": [
      [
        "SELECT Name , Capacity FROM stadium GROUP BY Stadium_ID ORDER BY Avg ( Average ) Desc LIMIT value",
        -0.25406837463378906
      ],
      [
        "SELECT Name , Capacity FROM stadium GROUP BY Stadium_ID ORDER BY Avg ( Highest ) Desc LIMIT value",
        -2.082606315612793
      ],
      [
        "SELECT T1.Name , T1.Capacity FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID GROUP BY T2.Stadium_ID ORDER BY Avg ( T1.Average ) Desc LIMIT value",
        -2.5176267623901367
      ],
      [
        "SELECT T1.Name , T1.Capacity FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID GROUP BY T2.Stadium_ID ORDER BY Avg ( T1.Highest ) Desc LIMIT value",
        -4.394803047180176
      ],
      [
        "SELECT Name , Capacity FROM stadium GROUP BY Stadium_ID ORDER BY Avg ( Capacity ) Desc LIMIT value",
        -5.242814064025879
      ],
      [
        "SELECT T1.Name , T1.Capacity FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID GROUP BY T2.Stadium_ID ORDER BY Avg ( T1.Capacity ) Desc LIMIT value",
        -7.249996185302734
      ],
      [
        "SELECT Name , Capacity FROM stadium GROUP BY Stadium_ID ORDER BY Count ( * ) Desc LIMIT value",
        -8.001829147338867
      ],
      [
        "SELECT Name , Capacity FROM stadium ORDER BY Highest Desc LIMIT value",
        -8.841390609741211
      ],
      [
        "SELECT Name , Capacity FROM stadium GROUP BY Capacity ORDER BY Avg ( Average ) Desc LIMIT value",
        -9.557113647460938
      ],
      [
        "SELECT Name , Capacity FROM stadium ORDER BY Average Desc LIMIT value",
        -9.820562362670898
      ],
      [
        "SELECT T1.Name , T1.Capacity FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID GROUP BY T2.Stadium_ID ORDER BY Count ( * ) Desc LIMIT value",
        -10.110366821289062
      ],
      [
        "SELECT Name , Capacity FROM stadium GROUP BY Stadium_ID ORDER BY Sum ( Average ) Desc LIMIT value",
        -10.377236366271973
      ],
      [
        "SELECT Name , Capacity FROM stadium GROUP BY Capacity ORDER BY Avg ( Highest ) Desc LIMIT value",
        -11.173582077026367
      ],
      [
        "SELECT Name , Capacity FROM stadium GROUP BY Stadium_ID ORDER BY Sum ( Highest ) Desc LIMIT value",
        -11.386913299560547
      ],
      [
        "SELECT Name , Capacity FROM stadium GROUP BY Stadium_ID ORDER BY Avg ( Average ) Desc",
        -12.173528671264648
      ],
      [
        "SELECT Name , Capacity FROM stadium GROUP BY Name ORDER BY Avg ( Average ) Desc LIMIT value",
        -12.204304695129395
      ],
      [
        "SELECT Name , Capacity FROM stadium GROUP BY Stadium_ID",
        -13.053998947143555
      ],
      [
        "SELECT Name FROM stadium GROUP BY Stadium_ID ORDER BY Avg ( Average ) Desc LIMIT value",
        -13.694612503051758
      ],
      [
        "SELECT Name FROM stadium GROUP BY Capacity ORDER BY Avg ( Average ) Desc LIMIT value",
        -15.05265998840332
      ],
      [
        "SELECT Name , Capacity FROM stadium",
        -15.701833724975586
      ]
    ],
    "predicted_parse_with_values": "SELECT Name , Capacity FROM stadium GROUP BY Stadium_ID ORDER BY Avg ( Average ) Desc LIMIT 1",
    "predicted_parse": "SELECT Name , Capacity FROM stadium GROUP BY Stadium_ID ORDER BY Avg ( Average ) Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: find the average average of each value of stadium id in stadium table",
      "Step 2: find the name and capacity in stadium table with largest value in the results of step 1"
    ],
    "template_feedback": "in step 1 , do not find for each value of stadium id . in step 2 , order the results by average in place of average average .",
    "primary_span": [
      [
        4,
        13
      ],
      [
        18,
        22
      ]
    ],
    "secondary_span": [
      [
        23,
        28
      ]
    ],
    "edits": [
      "stadium id",
      "average",
      "average average"
    ],
    "edits_original": "< groupBy > remove stadium id </ groupBy > < orderBy > add average </ orderBy > < orderBy > remove average average </ orderBy >"
  },
  {
    "db_id": "pets_1",
    "feedback": "i want the age of pet and last name from student table having pet type cat and dog.",
    "question": "Find the name of students who have both cat and dog pets.",
    "gold_parse": "SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'",
    "beam": [
      [
        "SELECT T1.Fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value INTERSECT SELECT T2.StuID FROM Has_Pet AS T2 JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value",
        -0.3993091583251953
      ],
      [
        "SELECT T1.LName FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value INTERSECT SELECT T2.StuID FROM Has_Pet AS T2 JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value",
        -1.2141308784484863
      ],
      [
        "SELECT T1.StuID FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value INTERSECT SELECT T2.StuID FROM Has_Pet AS T2 JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value",
        -4.2735676765441895
      ],
      [
        "SELECT T1.StuID FROM Has_Pet AS T1 JOIN Pets AS T2 ON T1.PetID = T2.PetID WHERE T2.PetType = value INTERSECT SELECT T1.StuID FROM Has_Pet AS T1 JOIN Pets AS T2 ON T1.PetID = T2.PetID WHERE T2.PetType = value",
        -4.89089298248291
      ],
      [
        "SELECT T1.Fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value INTERSECT SELECT T1.Fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value",
        -5.928634166717529
      ],
      [
        "SELECT T1.Fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value INTERSECT SELECT T1.LName FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value",
        -6.301950454711914
      ],
      [
        "SELECT T1.LName FROM Student AS T1 WHERE T1.StuID IN ( SELECT T2.StuID FROM Has_Pet AS T2 JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value INTERSECT SELECT T2.StuID FROM Has_Pet AS T2 JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value ) INTERSECT SELECT T2.StuID FROM Has_Pet AS T2 JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value",
        -6.340331554412842
      ],
      [
        "SELECT T1.LName FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value INTERSECT SELECT T1.Fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value",
        -6.688953876495361
      ],
      [
        "SELECT T1.Sex FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value INTERSECT SELECT T2.StuID FROM Has_Pet AS T2 JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value",
        -6.965089797973633
      ],
      [
        "SELECT T1.LName FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value INTERSECT SELECT T1.LName FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value",
        -7.071848392486572
      ],
      [
        "SELECT T1.Sex FROM Student AS T1 WHERE T1.StuID IN ( SELECT T2.StuID FROM Has_Pet AS T2 JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value INTERSECT SELECT T2.StuID FROM Has_Pet AS T2 JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value ) INTERSECT SELECT T2.StuID FROM Has_Pet AS T2 JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value",
        -7.545339584350586
      ],
      [
        "SELECT * FROM Pets AS T1 WHERE T1.PetType = value INTERSECT SELECT T2.StuID FROM Has_Pet AS T2 JOIN Pets AS T1 ON T2.PetID = T1.PetID WHERE T1.PetType = value",
        -8.967486381530762
      ],
      [
        "SELECT T1.Fname FROM Student AS T1 WHERE T1.StuID IN ( SELECT T2.StuID FROM Has_Pet AS T2 JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value INTERSECT SELECT T2.StuID FROM Has_Pet AS T2 JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value ) INTERSECT SELECT T2.StuID FROM Has_Pet AS T2 JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value",
        -9.048669815063477
      ],
      [
        "SELECT T1.Fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value INTERSECT SELECT * FROM Pets AS T3 WHERE T3.PetType = value",
        -9.327521324157715
      ],
      [
        "SELECT T1.city_code FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value INTERSECT SELECT T2.StuID FROM Has_Pet AS T2 JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value",
        -9.568110466003418
      ],
      [
        "SELECT T1.Advisor FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value INTERSECT SELECT T2.StuID FROM Has_Pet AS T2 JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value",
        -9.611968994140625
      ],
      [
        "SELECT T1.StuID FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value INTERSECT SELECT T1.Fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value",
        -9.806338787078857
      ],
      [
        "SELECT T1.Major FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value INTERSECT SELECT T2.StuID FROM Has_Pet AS T2 JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value",
        -10.005914688110352
      ],
      [
        "SELECT T1.LName FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value INTERSECT SELECT * FROM Pets AS T3 WHERE T3.PetType = value",
        -10.100160121917725
      ],
      [
        "SELECT T1.StuID FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value INTERSECT SELECT T1.LName FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value",
        -10.171087741851807
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.Fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = \"cat\" INTERSECT SELECT T2.StuID FROM Has_Pet AS T2 JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = \"dog\"",
    "predicted_parse": "SELECT T1.Fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value INTERSECT SELECT T2.StuID FROM Has_Pet AS T2 JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value",
    "predicted_parse_explanation": [
      "Step 1: for each row in student table , find the corresponding rows in has pet table and in pets table",
      "Step 2: find the first name of the results of step 1 whose pet type equals cat",
      "Step 3: for each row in has pet table , find the corresponding rows in pets table",
      "Step 4: find the has pet 's student id of the results of step 3 whose pet type equals dog",
      "Step 5: show the rows that are in both the results of step 2 and step 4"
    ],
    "template_feedback": "in step 3 , additionally use the information from the student table . in step 4 , find first name in place of has pet 's student id .",
    "primary_span": [
      [
        4,
        12
      ],
      [
        17,
        19
      ]
    ],
    "secondary_span": [
      [
        20,
        28
      ]
    ],
    "edits": [
      "first name",
      "student id",
      "student"
    ],
    "edits_original": "< select > add first name </ select > < select > remove student id </ select > < from > add student </ from >"
  },
  {
    "db_id": "world_1",
    "feedback": "use life expectancy instead of capital.",
    "question": "Find the name, population and expected life length of asian country with the largest area?",
    "gold_parse": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1",
    "beam": [
      [
        "SELECT Name , Population , Capital FROM country WHERE Continent = value ORDER BY SurfaceArea Desc LIMIT value",
        -0.13586997985839844
      ],
      [
        "SELECT Name , Population , Capital FROM country WHERE Continent = value",
        -2.9297313690185547
      ],
      [
        "SELECT Name , LifeExpectancy , Capital FROM country WHERE Continent = value ORDER BY SurfaceArea Desc LIMIT value",
        -3.374757766723633
      ],
      [
        "SELECT Name , Population , LifeExpectancy FROM country WHERE Continent = value ORDER BY SurfaceArea Desc LIMIT value",
        -4.454875946044922
      ],
      [
        "SELECT Name , Population , Capital FROM country WHERE Region = value ORDER BY SurfaceArea Desc LIMIT value",
        -4.9783172607421875
      ],
      [
        "SELECT LocalName , Population , Capital FROM country WHERE Continent = value ORDER BY SurfaceArea Desc LIMIT value",
        -5.44752311706543
      ],
      [
        "SELECT Name , LifeExpectancy , Capital FROM country WHERE Continent = value",
        -6.089657783508301
      ],
      [
        "SELECT Name , Population , Capital FROM country WHERE Continent = value AND SurfaceArea = ( SELECT Max ( SurfaceArea ) FROM country )",
        -6.178011894226074
      ],
      [
        "SELECT Name , Population , Capital FROM country WHERE Continent = value AND SurfaceArea = ( SELECT Max ( SurfaceArea ) FROM country WHERE Continent = value )",
        -6.291378974914551
      ],
      [
        "SELECT Name , Population , Capital FROM country WHERE Region = value",
        -6.310070991516113
      ],
      [
        "SELECT Name , Population , Capital FROM country WHERE LocalName = value AND SurfaceArea = ( SELECT Max ( SurfaceArea ) FROM country )",
        -6.427040100097656
      ],
      [
        "SELECT Name , Population , Capital FROM country WHERE LocalName = value ORDER BY SurfaceArea Desc LIMIT value",
        -6.537301063537598
      ],
      [
        "SELECT Name , Population , Capital FROM country WHERE LocalName = value AND SurfaceArea = ( SELECT Max ( SurfaceArea ) FROM country WHERE Continent = value )",
        -6.572478294372559
      ],
      [
        "SELECT Name , Population , LifeExpectancy FROM country WHERE Continent = value",
        -7.284548759460449
      ],
      [
        "SELECT Name , Population , Capital FROM country WHERE SurfaceArea = ( SELECT Max ( SurfaceArea ) FROM country )",
        -7.977503776550293
      ],
      [
        "SELECT Name , LifeExpectancy , Capital FROM country WHERE Region = value ORDER BY SurfaceArea Desc LIMIT value",
        -8.178422927856445
      ],
      [
        "SELECT LocalName , Population , Capital FROM country WHERE Continent = value",
        -8.414937973022461
      ],
      [
        "SELECT LocalName , LifeExpectancy , Capital FROM country WHERE Continent = value ORDER BY SurfaceArea Desc LIMIT value",
        -8.864599227905273
      ],
      [
        "SELECT Name , Population , Capital FROM country WHERE SurfaceArea > ( SELECT Max ( SurfaceArea ) FROM country WHERE Continent = value )",
        -8.956275939941406
      ],
      [
        "SELECT Name , Population , LifeExpectancy FROM country WHERE Region = value ORDER BY SurfaceArea Desc LIMIT value",
        -8.999776840209961
      ]
    ],
    "predicted_parse_with_values": "SELECT Name , Population , Capital FROM country WHERE Continent = \"Asia\" ORDER BY SurfaceArea Desc LIMIT 1",
    "predicted_parse": "SELECT Name , Population , Capital FROM country WHERE Continent = value ORDER BY SurfaceArea Desc LIMIT value",
    "predicted_parse_explanation": [
      "find the name , population , capital in country table whose continent equals Asia with largest value of surface area"
    ],
    "template_feedback": "find life expectancy in place of capital .",
    "primary_span": [
      [
        0,
        2
      ]
    ],
    "secondary_span": [
      [
        3,
        7
      ]
    ],
    "edits": [
      "life expectancy",
      "capital"
    ],
    "edits_original": "< select > add life expectancy </ select > < select > remove capital </ select >"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "feedback": "Here need to count number of rows of paragraphs table instead of reference template types table .",
    "question": "How many paragraphs in total?",
    "gold_parse": "SELECT count(*) FROM Paragraphs",
    "beam": [
      [
        "SELECT Count ( * ) FROM Ref_Template_Types",
        -4.76837158203125e-05
      ],
      [
        "SELECT Sum ( * ) FROM Ref_Template_Types",
        -11.401402950286865
      ],
      [
        "SELECT Sum ( Paragraph_Text ) FROM Paragraphs",
        -12.469772577285767
      ],
      [
        "SELECT Count ( * ) , Paragraph_Text FROM Paragraphs",
        -12.61348181962967
      ],
      [
        "SELECT Sum ( DISTINCT Paragraph_Text ) FROM Paragraphs",
        -12.949084043502808
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM Ref_Template_Types",
        -12.977224349975586
      ],
      [
        "SELECT Count ( * ) FROM Paragraphs GROUP BY Paragraph_Text",
        -13.117297887802124
      ],
      [
        "SELECT Count ( * ) FROM Ref_Template_Types GROUP BY *",
        -13.233893752098083
      ],
      [
        "SELECT Count ( * ) FROM Ref_Template_Types UNION SELECT Count ( * ) FROM Ref_Template_Types",
        -14.289313316345215
      ],
      [
        "SELECT Count ( * ) FROM Paragraphs WHERE Paragraph_Text = value",
        -14.51349687576294
      ],
      [
        "SELECT Count ( * ) , Paragraph_Text FROM Paragraphs GROUP BY Paragraph_Text",
        -14.6299187541008
      ],
      [
        "SELECT Avg ( * ) FROM Ref_Template_Types",
        -14.92964681982994
      ],
      [
        "SELECT Count ( * ) , Count ( * ) FROM Ref_Template_Types",
        -14.961214065551758
      ],
      [
        "SELECT Sum ( Paragraph_ID ) FROM Paragraphs",
        -15.119332313537598
      ],
      [
        "SELECT Count ( * ) FROM Paragraphs ORDER BY Paragraph_Text Desc",
        -15.179735481739044
      ],
      [
        "SELECT Count ( * ) FROM Ref_Template_Types INTERSECT SELECT Count ( * ) FROM Ref_Template_Types",
        -15.214632034301758
      ],
      [
        "SELECT Count ( Count ( * ) ) FROM Ref_Template_Types",
        -16.308401107788086
      ],
      [
        "SELECT Avg ( Paragraph_Text ) FROM Paragraphs",
        -16.545403599739075
      ],
      [
        "SELECT Count ( DISTINCT * ) FROM Ref_Template_Types",
        -16.859786987304688
      ],
      [
        "SELECT Avg ( DISTINCT Paragraph_Text ) FROM Paragraphs",
        -16.922922253608704
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM Ref_Template_Types",
    "predicted_parse": "SELECT Count ( * ) FROM Ref_Template_Types",
    "predicted_parse_explanation": [
      "find the number of rows in reference template types table"
    ],
    "template_feedback": "use paragraphs table in place of reference template types table .",
    "primary_span": [
      [
        0,
        2
      ]
    ],
    "secondary_span": [
      [
        3,
        10
      ]
    ],
    "edits": [
      "paragraphs",
      "reference template types"
    ],
    "edits_original": "< from > add paragraphs </ from > < from > remove reference template types </ from >"
  },
  {
    "db_id": "wta_1",
    "feedback": "Find each value of player's country code with number of corresponding rows of each value .",
    "question": "What are the codes of countries with more than 50 players?",
    "gold_parse": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50",
    "beam": [
      [
        "SELECT country_code FROM players WHERE player_id > value",
        -0.8882482051849365
      ],
      [
        "SELECT T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_age > value",
        -1.1442606449127197
      ],
      [
        "SELECT country_code FROM players WHERE birth_date > value",
        -2.332174301147461
      ],
      [
        "SELECT T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.winner_age > value",
        -3.026690721511841
      ],
      [
        "SELECT T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_rank_points > value",
        -3.5801565647125244
      ],
      [
        "SELECT T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ht > value",
        -4.143917083740234
      ],
      [
        "SELECT T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_rank > value",
        -4.357598304748535
      ],
      [
        "SELECT T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.winner_rank_points > value",
        -4.603514194488525
      ],
      [
        "SELECT T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.best_of > value",
        -4.672457218170166
      ],
      [
        "SELECT T1.country_code FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id WHERE T2.ranking_points > value",
        -4.720440864562988
      ],
      [
        "SELECT T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.winner_ht > value",
        -4.725170135498047
      ],
      [
        "SELECT T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.draw_size > value",
        -4.836588382720947
      ],
      [
        "SELECT country_code FROM players GROUP BY country_code HAVING Count ( * ) > value",
        -4.874534606933594
      ],
      [
        "SELECT T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.score > value",
        -5.235794544219971
      ],
      [
        "SELECT T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.match_num > value",
        -5.673460483551025
      ],
      [
        "SELECT T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.winner_rank > value",
        -6.348958969116211
      ],
      [
        "SELECT T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.tourney_id > value",
        -6.785452842712402
      ],
      [
        "SELECT T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.minutes > value",
        -6.905877113342285
      ],
      [
        "SELECT T1.country_code FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id WHERE T2.ranking > value",
        -7.2909722328186035
      ],
      [
        "SELECT country_code FROM players",
        -10.635347366333008
      ]
    ],
    "predicted_parse_with_values": "SELECT country_code FROM players WHERE player_id > 50",
    "predicted_parse": "SELECT country_code FROM players WHERE player_id > value",
    "predicted_parse_explanation": [
      "find the country code in players table whose player id greater than 50"
    ],
    "template_feedback": "remove the player id greater than 50 conditions . find for each value of country code whose number of rows greater than 50 .",
    "primary_span": [
      [
        0,
        8
      ],
      [
        9,
        23
      ]
    ],
    "secondary_span": [],
    "edits": [
      "player id greater than 50",
      "country code",
      "number of rows greater than 50"
    ],
    "edits_original": "< where > remove player id greater than 50 </ where > < groupBy > add country code </ groupBy > < having > add number of rows greater than 50 </ having >"
  },
  {
    "db_id": "car_1",
    "feedback": "In step 3, you need to make sure that number of cars should be more than 3 and keep Id in both step.",
    "question": "What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?",
    "gold_parse": "SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3",
    "beam": [
      [
        "SELECT T3.MakeId , T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker AND T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model WHERE T2.Model > = value INTERSECT SELECT T3.MakeId , T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker AND T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model WHERE T2.Model > value",
        -4.50833785533905
      ],
      [
        "SELECT T2.MakeId , T1.ModelId FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model WHERE T1.Model > = value INTERSECT SELECT T2.MakeId , T3.Maker FROM car_makers AS T3 JOIN model_list AS T1 ON T3.Id = T1.Maker AND T3.Id = T1.Maker JOIN car_names AS T2 ON T1.Model = T2.Model WHERE T1.Model > value",
        -4.649211883544922
      ],
      [
        "SELECT T3.MakeId , T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker AND T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model GROUP BY T2.ModelId HAVING Count ( * ) > value INTERSECT SELECT T2.ModelId , T3.Model FROM model_list AS T2 JOIN car_names AS T3 ON T2.Model = T3.Model GROUP BY T3.Model HAVING Count ( * ) > = value",
        -4.696717143058777
      ],
      [
        "SELECT T3.MakeId , T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker AND T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model GROUP BY T2.ModelId HAVING Count ( * ) > value INTERSECT SELECT T2.ModelId , T3.Model FROM model_list AS T2 JOIN car_names AS T3 ON T2.Model = T3.Model GROUP BY T2.Model HAVING Count ( * ) > = value",
        -4.855917811393738
      ],
      [
        "SELECT T3.MakeId , T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker AND T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model GROUP BY T2.ModelId HAVING Count ( * ) > value INTERSECT SELECT T2.ModelId , T3.Model FROM model_list AS T2 JOIN car_names AS T3 ON T2.Model = T3.Model GROUP BY T3.Model HAVING Count ( * ) > value",
        -4.917014002799988
      ],
      [
        "SELECT T3.MakeId , T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker AND T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model WHERE T2.Model > = value INTERSECT SELECT T3.MakeId , T2.ModelId FROM model_list AS T2 JOIN car_names AS T3 ON T2.Model = T3.Model WHERE T2.Model > value",
        -4.969268202781677
      ],
      [
        "SELECT T2.MakeId , T2.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model GROUP BY T1.ModelId HAVING Count ( * ) > value INTERSECT SELECT T1.ModelId , T2.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model GROUP BY T2.Model HAVING Count ( * ) > = value",
        -5.030534505844116
      ],
      [
        "SELECT T2.MakeId , T1.ModelId FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model WHERE T1.Model > = value INTERSECT SELECT T2.MakeId , T1.ModelId FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model WHERE T1.Model > value",
        -5.1540443897247314
      ],
      [
        "SELECT T3.MakeId , T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker AND T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model GROUP BY T2.ModelId HAVING Count ( * ) > value INTERSECT SELECT T2.ModelId , T3.Model FROM model_list AS T2 JOIN car_names AS T3 ON T2.Model = T3.Model GROUP BY T2.ModelId HAVING Count ( * ) > = value",
        -5.1575058698654175
      ],
      [
        "SELECT T2.MakeId , T2.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model GROUP BY T1.ModelId HAVING Count ( * ) > value INTERSECT SELECT T1.ModelId , T2.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model GROUP BY T1.Model HAVING Count ( * ) > = value",
        -5.189410448074341
      ],
      [
        "SELECT T2.MakeId , T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model GROUP BY T1.ModelId HAVING Count ( * ) > value INTERSECT SELECT T1.ModelId , T2.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model GROUP BY T2.Model HAVING Count ( * ) > = value",
        -5.204325914382935
      ],
      [
        "SELECT T2.MakeId , T2.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model GROUP BY T1.ModelId HAVING Count ( * ) > value INTERSECT SELECT T1.ModelId , T2.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model GROUP BY T2.Model HAVING Count ( * ) > value",
        -5.249803304672241
      ],
      [
        "SELECT T2.MakeId , T1.ModelId FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model GROUP BY T1.ModelId HAVING Count ( * ) > value INTERSECT SELECT T1.ModelId , T2.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model GROUP BY T2.Model HAVING Count ( * ) > = value",
        -5.319616317749023
      ],
      [
        "SELECT T2.MakeId , T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model GROUP BY T1.ModelId HAVING Count ( * ) > value INTERSECT SELECT T1.ModelId , T2.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model GROUP BY T1.Model HAVING Count ( * ) > = value",
        -5.363421678543091
      ],
      [
        "SELECT T2.MakeId , T1.Maker FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model GROUP BY T1.ModelId HAVING Count ( * ) > value INTERSECT SELECT T1.ModelId , T2.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model GROUP BY T2.Model HAVING Count ( * ) > = value",
        -5.417930603027344
      ],
      [
        "SELECT T2.MakeId , T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model GROUP BY T1.ModelId HAVING Count ( * ) > value INTERSECT SELECT T1.ModelId , T2.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model GROUP BY T2.Model HAVING Count ( * ) > value",
        -5.423978090286255
      ],
      [
        "SELECT T2.MakeId , T1.ModelId FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model GROUP BY T1.ModelId HAVING Count ( * ) > value INTERSECT SELECT T1.ModelId , T2.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model GROUP BY T1.Model HAVING Count ( * ) > = value",
        -5.4781739711761475
      ],
      [
        "SELECT T2.MakeId , T2.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model GROUP BY T1.ModelId HAVING Count ( * ) > value INTERSECT SELECT T1.ModelId , T2.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model GROUP BY T1.ModelId HAVING Count ( * ) > = value",
        -5.491381406784058
      ],
      [
        "SELECT T3.MakeId , T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker AND T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model GROUP BY T2.ModelId HAVING Count ( * ) > value INTERSECT SELECT T2.ModelId , T3.Model FROM model_list AS T2 JOIN car_names AS T3 ON T2.Model = T3.Model GROUP BY T2.Model HAVING Count ( * ) > value",
        -5.5289353132247925
      ],
      [
        "SELECT T3.MakeId , T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker AND T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model GROUP BY T2.ModelId HAVING Count ( * ) > value INTERSECT SELECT T2.ModelId , T2.Model FROM model_list AS T2 JOIN car_names AS T3 ON T2.Model = T3.Model GROUP BY T3.Model HAVING Count ( * ) > = value",
        -5.534815669059753
      ]
    ],
    "predicted_parse_with_values": "SELECT T3.MakeId , T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker AND T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model WHERE T2.Model > = 2 INTERSECT SELECT T3.MakeId , T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker AND T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model WHERE T2.Model > 3",
    "predicted_parse": "SELECT T3.MakeId , T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker AND T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model WHERE T2.Model > = value INTERSECT SELECT T3.MakeId , T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker AND T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model WHERE T2.Model > value",
    "predicted_parse_explanation": [
      "Step 1: for each row in car makers table , find the corresponding rows in model list table and in car names table",
      "Step 2: find the make id and car makers 's maker of the results of step 1 whose model list 's model greater than or equals 2",
      "Step 3: for each row in car makers table , find the corresponding rows in model list table and in car names table",
      "Step 4: find the make id and car makers 's maker of the results of step 3 whose model list 's model greater than 3",
      "Step 5: show the rows that are in both the results of step 2 and step 4"
    ],
    "template_feedback": "in step 1 , do not use the car names table . in step 2 , remove the model list 's model greater than or equals 2 conditions . find for each value of id whose number of rows greater than or equals 2 . find id in place of make id . in step 4 , remove the model list 's model greater than 3 conditions . find for each value of id whose number of rows greater than 3 . find id in place of make id .",
    "primary_span": [
      [
        4,
        11
      ],
      [
        16,
        28
      ],
      [
        29,
        44
      ],
      [
        45,
        46
      ],
      [
        57,
        67
      ],
      [
        68,
        81
      ],
      [
        82,
        83
      ]
    ],
    "secondary_span": [
      [
        4,
        11
      ],
      [
        47,
        52
      ],
      [
        84,
        89
      ]
    ],
    "edits": [
      "id",
      "make id",
      "car names",
      "model greater than or equals to 2",
      "id",
      "number of rows greater than or equals to 2",
      "id",
      "make id",
      "model greater than 3",
      "id",
      "number of rows greater than 3"
    ],
    "edits_original": "< select > add id </ select > < select > remove make id </ select > < from > remove car names </ from > < where > remove model greater than or equals to 2 </ where > < groupBy > add id </ groupBy > < having > add number of rows greater than or equals to 2 </ having > < select > add id </ select > < select > remove make id </ select > < where > remove model greater than 3 </ where > < groupBy > add id </ groupBy > < having > add number of rows greater than 3 </ having >"
  },
  {
    "db_id": "car_1",
    "feedback": "from step 2, i want country of car makers table.",
    "question": "What are the names of the countries with no car makers?",
    "gold_parse": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country",
    "beam": [
      [
        "SELECT CountryName FROM countries EXCEPT SELECT CountryName FROM countries",
        -0.02883148193359375
      ],
      [
        "SELECT T1.CountryName FROM countries AS T1 WHERE T1.CountryId NOT IN ( SELECT T2.Country FROM car_makers AS T2 )",
        -3.6799755096435547
      ],
      [
        "SELECT T1.CountryName FROM countries AS T1 EXCEPT SELECT T2.Country FROM car_makers AS T2",
        -5.807099342346191
      ],
      [
        "SELECT T1.CountryName FROM countries AS T1 EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country WHERE T2.Maker = value",
        -9.592470169067383
      ],
      [
        "SELECT T1.CountryName FROM countries AS T1 EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country WHERE T2.FullName = value",
        -10.237130641937256
      ],
      [
        "SELECT T1.CountryName FROM countries AS T1 EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country JOIN model_list AS T3 ON T2.Id = T3.Maker WHERE T3.Model = value",
        -10.277656078338623
      ],
      [
        "SELECT T1.CountryName FROM countries AS T1 UNION SELECT T2.Country FROM car_makers AS T2",
        -11.914612770080566
      ],
      [
        "SELECT T1.CountryName FROM countries AS T1 WHERE T1.CountryId = ( SELECT T2.Country FROM car_makers AS T2 ) EXCEPT SELECT T1.CountryName FROM countries AS T1",
        -12.153267860412598
      ],
      [
        "SELECT T1.CountryName FROM countries AS T1 EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country JOIN model_list AS T3 ON T2.Id = T3.Maker JOIN car_names AS T4 ON T3.Model = T4.Model WHERE T4.Model = value",
        -12.540672063827515
      ],
      [
        "SELECT T1.CountryName FROM countries AS T1 EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country JOIN model_list AS T3 ON T2.Id = T3.Maker WHERE T3.ModelId = value",
        -12.928706645965576
      ],
      [
        "SELECT Continent FROM countries EXCEPT SELECT CountryName FROM countries",
        -12.971336364746094
      ],
      [
        "SELECT DISTINCT CountryName FROM countries EXCEPT SELECT CountryName FROM countries",
        -13.0205078125
      ],
      [
        "SELECT CountryName FROM countries EXCEPT SELECT CountryName FROM countries ORDER BY CountryId Asc LIMIT value",
        -13.108843922615051
      ],
      [
        "SELECT CountryName FROM countries GROUP BY CountryId HAVING Count ( * ) < = value",
        -13.534857749938965
      ],
      [
        "SELECT T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country WHERE T2.FullName ! = value",
        -13.559805631637573
      ],
      [
        "SELECT CountryName FROM countries WHERE CountryId ! = value",
        -13.747509956359863
      ],
      [
        "SELECT T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country WHERE T2.Maker ! = value",
        -13.811063051223755
      ],
      [
        "SELECT CountryName FROM countries EXCEPT SELECT DISTINCT CountryName FROM countries",
        -13.906086921691895
      ],
      [
        "SELECT CountryName FROM countries LIMIT value EXCEPT SELECT CountryName FROM countries",
        -14.158217430114746
      ],
      [
        "SELECT CountryName FROM countries",
        -14.81346321105957
      ]
    ],
    "predicted_parse_with_values": "SELECT CountryName FROM countries EXCEPT SELECT CountryName FROM countries",
    "predicted_parse": "SELECT CountryName FROM countries EXCEPT SELECT CountryName FROM countries",
    "predicted_parse_explanation": [
      "Step 1: find the country name in countries table",
      "Step 2: find the country name in countries table",
      "Step 3: show the rows that are in the results of step 1 but not in the results of step 2"
    ],
    "template_feedback": "in step 2 , additionally use the information from the car makers table besides the countries table .",
    "primary_span": [
      [
        4,
        12
      ]
    ],
    "secondary_span": [
      [
        13,
        17
      ]
    ],
    "edits": [
      "car makers"
    ],
    "edits_original": "< from > add car makers </ from >"
  },
  {
    "db_id": "singer",
    "feedback": "Interchange citizenship with birth year .",
    "question": "Show the name of singers whose birth year is either 1948 or 1949?",
    "gold_parse": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949",
    "beam": [
      [
        "SELECT Name FROM singer WHERE Citizenship = value OR Citizenship = value",
        -0.007274627685546875
      ],
      [
        "SELECT Name FROM singer WHERE Birth_Year = value OR Citizenship = value",
        -5.3876543045043945
      ],
      [
        "SELECT Name FROM singer WHERE Birth_Year > value OR Citizenship = value",
        -6.365861892700195
      ],
      [
        "SELECT Name FROM singer WHERE Citizenship = value OR Birth_Year = value",
        -7.038114547729492
      ],
      [
        "SELECT Name FROM singer WHERE Citizenship = value OR Citizenship LIKE value",
        -10.963364601135254
      ],
      [
        "SELECT DISTINCT Name FROM singer WHERE Citizenship = value OR Citizenship = value",
        -11.289305686950684
      ],
      [
        "SELECT Name FROM singer WHERE Citizenship > value OR Citizenship = value",
        -11.545008182525635
      ],
      [
        "SELECT Name FROM singer WHERE Name > value OR Citizenship = value",
        -12.278824806213379
      ],
      [
        "SELECT Name , Birth_Year FROM singer WHERE Citizenship = value OR Citizenship = value",
        -12.855291366577148
      ],
      [
        "SELECT Name FROM singer WHERE Citizenship ! = value OR Citizenship = value",
        -13.354158401489258
      ],
      [
        "SELECT DISTINCT Name FROM singer WHERE Citizenship = value OR Citizenship = value",
        -13.386927604675293
      ],
      [
        "SELECT Name FROM singer WHERE Birth_Year = value OR Birth_Year = value",
        -13.439665794372559
      ],
      [
        "SELECT Name FROM singer WHERE Citizenship = value OR Citizenship ! = value",
        -13.473872184753418
      ],
      [
        "SELECT Name FROM singer WHERE Citizenship = value OR Citizenship = value ORDER BY Name Desc LIMIT value",
        -13.863459587097168
      ],
      [
        "SELECT Name FROM singer WHERE Citizenship = value OR Citizenship = value ORDER BY Name Desc",
        -14.120099067687988
      ],
      [
        "SELECT Name FROM singer WHERE Citizenship LIKE value OR Citizenship = value",
        -14.247965812683105
      ],
      [
        "SELECT Name FROM singer WHERE Citizenship = value OR Citizenship = value EXCEPT SELECT Name FROM singer WHERE Citizenship = value OR Citizenship = value",
        -14.480687141418457
      ],
      [
        "SELECT Name , Citizenship FROM singer WHERE Citizenship = value OR Citizenship = value",
        -14.498145580291748
      ],
      [
        "SELECT Name FROM singer WHERE Birth_Year > value OR Birth_Year = value",
        -15.030901908874512
      ],
      [
        "SELECT Name FROM singer WHERE Birth_Year > = value OR Citizenship = value",
        -15.106404304504395
      ]
    ],
    "predicted_parse_with_values": "SELECT Name FROM singer WHERE Citizenship = 1949 OR Citizenship = 1948",
    "predicted_parse": "SELECT Name FROM singer WHERE Citizenship = value OR Citizenship = value",
    "predicted_parse_explanation": [
      "find the name in singer table whose citizenship equals 1949 or citizenship equals 1948"
    ],
    "template_feedback": "consider the birth year equals 1948 or birth year equals 1949 conditions in place of the citizenship equals 1948 or citizenship equals 1949 conditions .",
    "primary_span": [
      [
        0,
        11
      ]
    ],
    "secondary_span": [
      [
        12,
        24
      ]
    ],
    "edits": [
      "birth year equals 1948 or birth year equals 1949",
      "citizenship equals 1949 or citizenship equals 1948"
    ],
    "edits_original": "< where > add birth year equals 1948 or birth year equals 1949 </ where > < where > remove citizenship equals 1949 or citizenship equals 1948 </ where >"
  },
  {
    "db_id": "car_1",
    "feedback": "Swap accelerate with horsepower .",
    "question": "What is the model of the car with the smallest amount of horsepower?",
    "gold_parse": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1",
    "beam": [
      [
        "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id ORDER BY T3.Accelerate Asc LIMIT value",
        -0.2556344270706177
      ],
      [
        "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id ORDER BY T3.Horsepower Asc LIMIT value",
        -2.1939773559570312
      ],
      [
        "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id ORDER BY T3.Weight Asc LIMIT value",
        -2.4832942485809326
      ],
      [
        "SELECT Model FROM model_list ORDER BY ModelId Asc LIMIT value",
        -4.266855239868164
      ],
      [
        "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id ORDER BY T3.Edispl Asc LIMIT value",
        -4.861250877380371
      ],
      [
        "SELECT Model FROM model_list ORDER BY Model Asc LIMIT value",
        -5.7471394538879395
      ],
      [
        "SELECT T1.Model FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id ORDER BY T2.Accelerate Asc LIMIT value",
        -6.154178619384766
      ],
      [
        "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id ORDER BY T3.Cylinders Asc LIMIT value",
        -7.08078145980835
      ],
      [
        "SELECT T2.Model FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker ORDER BY T1.FullName Asc LIMIT value",
        -7.4172797203063965
      ],
      [
        "SELECT Model FROM model_list ORDER BY * Asc LIMIT value",
        -7.746248722076416
      ],
      [
        "SELECT T1.Model FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id ORDER BY T2.Horsepower Asc LIMIT value",
        -8.120584964752197
      ],
      [
        "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id ORDER BY T3.MPG Asc LIMIT value",
        -8.1765718460083
      ],
      [
        "SELECT T1.Model FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id ORDER BY T2.Weight Asc LIMIT value",
        -8.449485540390015
      ],
      [
        "SELECT T3.Model FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country JOIN model_list AS T3 ON T2.Id = T3.Maker ORDER BY T1.Continent Asc LIMIT value",
        -8.619254112243652
      ],
      [
        "SELECT Model FROM model_list ORDER BY Maker Asc LIMIT value",
        -8.886734962463379
      ],
      [
        "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model ORDER BY T2.Make Asc LIMIT value",
        -9.159567832946777
      ],
      [
        "SELECT T2.Model FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker ORDER BY T1.Maker Asc LIMIT value",
        -9.344968795776367
      ],
      [
        "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id ORDER BY T3.Year Asc LIMIT value",
        -9.501504898071289
      ],
      [
        "SELECT T3.Model FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country JOIN model_list AS T3 ON T2.Id = T3.Maker ORDER BY T1.CountryName Asc LIMIT value",
        -9.531335830688477
      ],
      [
        "SELECT Model FROM model_list",
        -13.948951721191406
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id ORDER BY T3.Accelerate Asc LIMIT 1",
    "predicted_parse": "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id ORDER BY T3.Accelerate Asc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: for each row in model list table , find the corresponding rows in car names table and in cars data table",
      "Step 2: find the model list 's model of the results of step 1 with smallest value of accelerate"
    ],
    "template_feedback": "in step 1 , do not use the model list table . in step 2 , order the results by horsepower in place of accelerate .",
    "primary_span": [
      [
        4,
        11
      ],
      [
        16,
        20
      ]
    ],
    "secondary_span": [
      [
        4,
        11
      ],
      [
        21,
        25
      ]
    ],
    "edits": [
      "model list",
      "horsepower",
      "accelerate"
    ],
    "edits_original": "< from > remove model list </ from > < orderBy > add horsepower </ orderBy > < orderBy > remove accelerate </ orderBy >"
  },
  {
    "db_id": "car_1",
    "feedback": "Substitute country , id , car makers table with country name , country id , countries table in step 2.",
    "question": "What are the countries having at least one car maker? List name and id.",
    "gold_parse": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1",
    "beam": [
      [
        "SELECT Country , Id FROM car_makers GROUP BY Country HAVING Count ( * ) > = value",
        -0.13806915283203125
      ],
      [
        "SELECT T1.Country , T2.ModelId FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T1.Country HAVING Count ( * ) > = value",
        -2.282167673110962
      ],
      [
        "SELECT T2.Country , T1.CountryId FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country GROUP BY T2.Country HAVING Count ( * ) > = value",
        -4.829171180725098
      ],
      [
        "SELECT T3.Country , T1.ContId FROM continents AS T1 JOIN countries AS T2 ON T1.ContId = T2.Continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T3.Country HAVING Count ( * ) > = value",
        -4.88185453414917
      ],
      [
        "SELECT Country , FullName FROM car_makers GROUP BY Country HAVING Count ( * ) > = value",
        -5.943767547607422
      ],
      [
        "SELECT T2.Country , T1.Continent FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country GROUP BY T2.Country HAVING Count ( * ) > = value",
        -5.992673873901367
      ],
      [
        "SELECT T2.Country , T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country GROUP BY T2.Country HAVING Count ( * ) > = value",
        -6.449741363525391
      ],
      [
        "SELECT Country , Country FROM car_makers GROUP BY Country HAVING Count ( * ) > = value",
        -6.520856857299805
      ],
      [
        "SELECT T1.Country , T3.MakeId FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model GROUP BY T1.Country HAVING Count ( * ) > = value",
        -6.8707733154296875
      ],
      [
        "SELECT Country , Maker FROM car_makers GROUP BY Country HAVING Count ( * ) > = value",
        -7.030848503112793
      ],
      [
        "SELECT T1.Country , T4.Id FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id GROUP BY T1.Country HAVING Count ( * ) > = value",
        -8.320832252502441
      ],
      [
        "SELECT FullName , Country FROM car_makers GROUP BY Country HAVING Count ( * ) > = value",
        -8.359337329864502
      ],
      [
        "SELECT T1.Continent , T2.Country FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country GROUP BY T2.Country HAVING Count ( * ) > = value",
        -8.494423866271973
      ],
      [
        "SELECT T1.CountryName , T2.Country FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country GROUP BY T2.Country HAVING Count ( * ) > = value",
        -8.704666137695312
      ],
      [
        "SELECT T3.Country , T1.Continent FROM continents AS T1 JOIN countries AS T2 ON T1.ContId = T2.Continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T3.Country HAVING Count ( * ) > = value",
        -9.416748046875
      ],
      [
        "SELECT T1.Country , T4.Year FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id GROUP BY T1.Country HAVING Count ( * ) > = value",
        -9.830582618713379
      ],
      [
        "SELECT T1.Country , T2.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T1.Country HAVING Count ( * ) > = value",
        -9.842480659484863
      ],
      [
        "SELECT FullName , Id FROM car_makers GROUP BY Country HAVING Count ( * ) > = value",
        -10.280409812927246
      ],
      [
        "SELECT T1.Country , T4.Accelerate FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id GROUP BY T1.Country HAVING Count ( * ) > = value",
        -10.544313430786133
      ],
      [
        "SELECT T1.Country , T4.Cylinders FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id GROUP BY T1.Country HAVING Count ( * ) > = value",
        -10.5569486618042
      ]
    ],
    "predicted_parse_with_values": "SELECT Country , Id FROM car_makers GROUP BY Country HAVING Count ( * ) > = 1",
    "predicted_parse": "SELECT Country , Id FROM car_makers GROUP BY Country HAVING Count ( * ) > = value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of country in car makers table",
      "Step 2: find the country and id in car makers table whose corresponding value in step 1 is greater than or equals 1"
    ],
    "template_feedback": "in step 1 , additionally use the information from the countries table besides the car makers table . in step 2 , find country name in place of id .",
    "primary_span": [
      [
        4,
        11
      ],
      [
        22,
        24
      ]
    ],
    "secondary_span": [
      [
        12,
        17
      ],
      [
        25,
        29
      ]
    ],
    "edits": [
      "country name",
      "country id",
      "country",
      "id",
      "countries",
      "country id",
      "country"
    ],
    "edits_original": "< select > add country name </ select > < select > add country id </ select > < select > remove country </ select > < select > remove id </ select > < from > add countries </ from > < groupBy > add country id </ groupBy > < groupBy > remove country </ groupBy >"
  },
  {
    "db_id": "flight_2",
    "feedback": "Exchange country with airport code in both step 2 and step 3.",
    "question": "Find all airlines that have flights from both airports 'APG' and 'CVO'.",
    "gold_parse": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\"",
    "beam": [
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value INTERSECT SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value",
        -0.3465280532836914
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 WHERE T1.Country = value INTERSECT SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value",
        -1.3006715774536133
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value INTERSECT SELECT T1.Airline FROM airlines AS T1 WHERE T1.Country = value",
        -4.241815567016602
      ],
      [
        "SELECT Airline FROM airlines WHERE Country = value INTERSECT SELECT Airline FROM airlines WHERE Country = value",
        -5.201107978820801
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value INTERSECT SELECT T3.Airline FROM airports AS T2 JOIN flights AS T3 ON T2.AirportCode = T3.SourceAirport WHERE T2.Country = value",
        -8.885021209716797
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value INTERSECT SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.CountryAbbrev = value",
        -9.370587348937988
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.CountryAbbrev = value INTERSECT SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value",
        -9.643503189086914
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 WHERE T1.Country = value INTERSECT SELECT T3.Airline FROM airports AS T2 JOIN flights AS T3 ON T2.AirportCode = T3.SourceAirport WHERE T2.Country = value",
        -9.82321834564209
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 WHERE T1.Country = value INTERSECT SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.CountryAbbrev = value",
        -10.277989387512207
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value INTERSECT SELECT T1.Abbreviation FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value",
        -10.660994529724121
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 WHERE T1.Abbreviation = value INTERSECT SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value",
        -10.832858085632324
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value INTERSECT SELECT * FROM airports AS T2 WHERE T2.Country = value",
        -10.860075950622559
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value INTERSECT SELECT T1.uid FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value",
        -11.143608093261719
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value INTERSECT SELECT T3.FlightNo FROM airports AS T2 JOIN flights AS T3 ON T2.AirportCode = T3.SourceAirport WHERE T2.Country = value",
        -11.14852523803711
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value INTERSECT SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = value",
        -11.285078048706055
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value INTERSECT SELECT T1.Country FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value",
        -11.551989555358887
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value AND T1.Country = value",
        -12.152578830718994
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value",
        -12.304397583007812
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value AND T2.Country = value",
        -12.425371170043945
      ],
      [
        "SELECT Airline FROM airlines WHERE Country = value",
        -13.433368682861328
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = \"APG\" INTERSECT SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = \"CVO\"",
    "predicted_parse": "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value INTERSECT SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value",
    "predicted_parse_explanation": [
      "Step 1: for each row in airlines table , find the corresponding rows in airports table",
      "Step 2: find the airline name of the results of step 1 whose airports 's country equals APG",
      "Step 3: for each row in airlines table , find the corresponding rows in airports table",
      "Step 4: find the airline name of the results of step 3 whose airports 's country equals CVO",
      "Step 5: show the rows that are in both the results of step 2 and step 4"
    ],
    "template_feedback": "in step 1 , use flights table in place of airports table in step 2 , consider the source airport equals APG conditions in place of the airports 's country equals APG conditions . in step 3 , use flights table in place of airports table in step 4 , consider the source airport equals CVO conditions in place of the airports 's country equals CVO conditions .",
    "primary_span": [
      [
        4,
        6
      ],
      [
        16,
        22
      ],
      [
        38,
        40
      ],
      [
        50,
        56
      ]
    ],
    "secondary_span": [
      [
        7,
        11
      ],
      [
        23,
        33
      ],
      [
        41,
        45
      ],
      [
        57,
        67
      ]
    ],
    "edits": [
      "flights",
      "airports",
      "source airport equals \"APG\"",
      "country equals \"APG\"",
      "flights",
      "airports",
      "source airport equals \"CVO\"",
      "country equals \"CVO\""
    ],
    "edits_original": "< from > add flights </ from > < from > remove airports </ from > < where > add source airport equals \" APG \" </ where > < where > remove country equals \" APG \" </ where > < from > add flights </ from > < from > remove airports </ from > < where > add source airport equals \" CVO \" </ where > < where > remove country equals \" CVO \" </ where >"
  },
  {
    "db_id": "world_1",
    "feedback": "Change continent to life expectancy , Also mention continent equals Asia and surface area is maximum .",
    "question": "What are the name, population, and life expectancy of the largest Asian country by land?",
    "gold_parse": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1",
    "beam": [
      [
        "SELECT Name , Population , Continent FROM country",
        -1.2485294342041016
      ],
      [
        "SELECT Name , Population , Continent FROM country WHERE Population = ( SELECT Max ( GNPOld ) FROM country )",
        -1.7115869522094727
      ],
      [
        "SELECT Name , Population , Capital FROM country WHERE Continent = value",
        -2.134126663208008
      ],
      [
        "SELECT Name , Population , Capital FROM country",
        -2.615236282348633
      ],
      [
        "SELECT Name , Population , Continent FROM country WHERE LifeExpectancy = ( SELECT Max ( GNPOld ) FROM country )",
        -2.7107038497924805
      ],
      [
        "SELECT Name , Population , GNPOld FROM country WHERE Continent = value",
        -2.831578254699707
      ],
      [
        "SELECT Name , Population , Continent FROM country WHERE Population = ( SELECT Max ( LifeExpectancy ) FROM country )",
        -3.2674055099487305
      ],
      [
        "SELECT Name , Population , Capital FROM country WHERE LocalName = value",
        -4.0886735916137695
      ],
      [
        "SELECT Name , Population , Continent FROM country WHERE GNPOld = ( SELECT Max ( GNPOld ) FROM country )",
        -4.190211296081543
      ],
      [
        "SELECT Name , Population , Continent FROM country WHERE Continent = value",
        -4.421809196472168
      ],
      [
        "SELECT Name , LifeExpectancy , Continent FROM country",
        -4.520386695861816
      ],
      [
        "SELECT Name , Population , GNPOld FROM country",
        -4.710309982299805
      ],
      [
        "SELECT Name , Population , GNP FROM country WHERE Continent = value",
        -4.738842964172363
      ],
      [
        "SELECT Name , Population , GNPOld FROM country WHERE LocalName = value",
        -4.866002082824707
      ],
      [
        "SELECT Name , Population , Population FROM country WHERE Continent = value",
        -5.213281631469727
      ],
      [
        "SELECT Name , Population , LifeExpectancy FROM country WHERE Continent = value",
        -5.360592842102051
      ],
      [
        "SELECT Name , Population , Continent FROM country GROUP BY Continent",
        -5.415821075439453
      ],
      [
        "SELECT Name , Population , GNP FROM country",
        -5.7720746994018555
      ],
      [
        "SELECT Name , Population , Continent FROM country UNION SELECT Max ( LifeExpectancy ) FROM country",
        -6.177654266357422
      ],
      [
        "SELECT Name , LifeExpectancy , Capital FROM country",
        -6.309933662414551
      ]
    ],
    "predicted_parse_with_values": "SELECT Name , Population , Continent FROM country",
    "predicted_parse": "SELECT Name , Population , Continent FROM country",
    "predicted_parse_explanation": [
      "find the name , population , continent in country table"
    ],
    "template_feedback": "additionally make sure that continent equals Asia . find life expectancy in place of continent . find the result with the largest surface area .",
    "primary_span": [
      [
        0,
        7
      ],
      [
        8,
        10
      ],
      [
        16,
        24
      ]
    ],
    "secondary_span": [
      [
        11,
        15
      ]
    ],
    "edits": [
      "life expectancy",
      "continent",
      "continent equals \"Asia\"",
      "surface area",
      "descending",
      "1"
    ],
    "edits_original": "< select > add life expectancy </ select > < select > remove continent </ select > < where > add continent equals \" Asia \" </ where > < orderBy > add surface area </ orderBy > < orderBy > add descending </ orderBy > < limit > add 1 </ limit >"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "feedback": "Change templates table with paragraphs table in step 1 and document id , date effective to with paragraph id , paragraph text .",
    "question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?",
    "gold_parse": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'",
    "beam": [
      [
        "SELECT T2.Document_ID , T1.Date_Effective_To FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Document_Name = value",
        -1.2104039192199707
      ],
      [
        "SELECT T1.Document_ID , T2.Paragraph_Text FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Name = value",
        -1.3329286575317383
      ],
      [
        "SELECT Document_ID , Template_ID FROM Documents WHERE Document_Name = value",
        -1.6270804405212402
      ],
      [
        "SELECT T2.Template_ID , T1.Date_Effective_To FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Document_Name = value",
        -2.4363832473754883
      ],
      [
        "SELECT T1.Template_ID , T2.Paragraph_Text FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Name = value",
        -2.6242175102233887
      ],
      [
        "SELECT T1.Document_ID , T2.Paragraph_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Name = value",
        -3.4285693168640137
      ],
      [
        "SELECT Document_ID , Document_ID FROM Documents WHERE Document_Name = value",
        -4.288336277008057
      ],
      [
        "SELECT Template_ID , Template_ID FROM Documents WHERE Document_Name = value",
        -4.450746297836304
      ],
      [
        "SELECT Document_ID , Document_Name FROM Documents WHERE Document_Name = value",
        -5.3112945556640625
      ],
      [
        "SELECT T1.Template_ID , T2.Paragraph_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Name = value",
        -5.498436212539673
      ],
      [
        "SELECT Document_ID , Document_Description FROM Documents WHERE Document_Name = value",
        -5.5492424964904785
      ],
      [
        "SELECT Template_ID , Document_Name FROM Documents WHERE Document_Name = value",
        -5.786207675933838
      ],
      [
        "SELECT Template_ID , Document_Description FROM Documents WHERE Document_Name = value",
        -6.340936183929443
      ],
      [
        "SELECT Template_ID , Document_ID FROM Documents WHERE Document_Name = value",
        -6.490518093109131
      ],
      [
        "SELECT T2.Document_ID , T1.Date_Effective_From FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Document_Name = value",
        -7.1044487953186035
      ],
      [
        "SELECT T1.Document_ID , T2.Paragraph_Text FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Name LIKE value",
        -7.184764862060547
      ],
      [
        "SELECT Document_ID , Template_ID FROM Documents WHERE Document_Name LIKE value",
        -7.675963878631592
      ],
      [
        "SELECT T2.Document_ID , T1.Template_ID FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Document_Name = value",
        -7.812219619750977
      ],
      [
        "SELECT T2.Template_ID , T1.Date_Effective_From FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Document_Name = value",
        -8.054866790771484
      ],
      [
        "SELECT T2.Paragraph_ID , T1.Template_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Name = value",
        -8.065346717834473
      ]
    ],
    "predicted_parse_with_values": "SELECT T2.Document_ID , T1.Date_Effective_To FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Document_Name = \"Welcome to NY\"",
    "predicted_parse": "SELECT T2.Document_ID , T1.Date_Effective_To FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Document_Name = value",
    "predicted_parse_explanation": [
      "Step 1: for each row in templates table , find the corresponding rows in documents table",
      "Step 2: find the document id and date effective to of the results of step 1 whose document name equals Welcome to NY"
    ],
    "template_feedback": "in step 1 , use paragraphs table in place of templates table in step 2 , find paragraph text and paragraph id in place of documents 's document id and date effective to .",
    "primary_span": [
      [
        4,
        6
      ],
      [
        16,
        21
      ]
    ],
    "secondary_span": [
      [
        7,
        11
      ],
      [
        22,
        33
      ]
    ],
    "edits": [
      "paragraph id",
      "paragraph text",
      "document id",
      "date effective to",
      "paragraphs",
      "templates"
    ],
    "edits_original": "< select > add paragraph id </ select > < select > add paragraph text </ select > < select > remove document id </ select > < select > remove date effective to </ select > < from > add paragraphs </ from > < from > remove templates </ from >"
  },
  {
    "db_id": "world_1",
    "feedback": "The code 2 is wrong . It should be government form instead .",
    "question": "How many different forms of governments are there in Africa?",
    "gold_parse": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"",
    "beam": [
      [
        "SELECT Count ( DISTINCT Code2 ) FROM country WHERE Continent = value",
        -0.0049610137939453125
      ],
      [
        "SELECT Count ( * ) FROM country WHERE Continent = value",
        -5.532753944396973
      ],
      [
        "SELECT Count ( DISTINCT GovernmentForm ) FROM country WHERE Continent = value",
        -7.337047100067139
      ],
      [
        "SELECT Count ( DISTINCT Code ) FROM country WHERE Continent = value",
        -8.431793689727783
      ],
      [
        "SELECT Count ( Code2 ) FROM country WHERE Continent = value",
        -9.84140682220459
      ],
      [
        "SELECT Count ( DISTINCT T2.Language ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = value",
        -10.859445571899414
      ],
      [
        "SELECT Count ( DISTINCT Name ) FROM country WHERE Continent = value",
        -11.091041564941406
      ],
      [
        "SELECT Count ( DISTINCT Code2 ) FROM country",
        -11.411142826080322
      ],
      [
        "SELECT Count ( DISTINCT Region ) FROM country WHERE Continent = value",
        -12.253408432006836
      ],
      [
        "SELECT Count ( DISTINCT T1.District ) FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = value",
        -13.019284725189209
      ],
      [
        "SELECT Count ( LocalName ) FROM country WHERE Continent = value",
        -13.18937873840332
      ],
      [
        "SELECT DISTINCT Count ( DISTINCT Code2 ) FROM country WHERE Continent = value",
        -13.222070217132568
      ],
      [
        "SELECT Count ( Population ) FROM country WHERE Continent = value",
        -13.319347858428955
      ],
      [
        "SELECT Count ( DISTINCT Code2 ) FROM country WHERE Name = value",
        -13.36680793762207
      ],
      [
        "SELECT Count ( DISTINCT Continent ) FROM country WHERE Continent = value",
        -13.497576236724854
      ],
      [
        "SELECT Count ( Code ) FROM country WHERE Continent = value",
        -13.732531547546387
      ],
      [
        "SELECT Count ( GovernmentForm ) FROM country WHERE Continent = value",
        -13.809211254119873
      ],
      [
        "SELECT Count ( DISTINCT LocalName ) FROM country WHERE Continent = value",
        -13.837111949920654
      ],
      [
        "SELECT Count ( * ) FROM city",
        -14.247831344604492
      ],
      [
        "SELECT Count ( DISTINCT HeadOfState ) FROM country WHERE Continent = value",
        -14.274596691131592
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( DISTINCT Code2 ) FROM country WHERE Continent = \"Africa\"",
    "predicted_parse": "SELECT Count ( DISTINCT Code2 ) FROM country WHERE Continent = value",
    "predicted_parse_explanation": [
      "find the number of different code2 in country table whose continent equals Africa"
    ],
    "template_feedback": "find number of different government form in place of number of different code2 .",
    "primary_span": [
      [
        0,
        5
      ]
    ],
    "secondary_span": [
      [
        6,
        13
      ]
    ],
    "edits": [
      "number of distinct government form",
      "number of distinct code2"
    ],
    "edits_original": "< select > add number of distinct government form </ select > < select > remove number of distinct code2 </ select >"
  },
  {
    "db_id": "network_1",
    "feedback": "Find number of rows in likes table whose student id's corresponding Highschooler's name equals Kyle .",
    "question": "How many likes does Kyle have?",
    "gold_parse": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
    "beam": [
      [
        "SELECT Count ( * ) FROM Highschooler WHERE name = value",
        -0.0018930435180664062
      ],
      [
        "SELECT Count ( DISTINCT T2.liked_id ) FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id WHERE T1.name = value",
        -6.977716445922852
      ],
      [
        "SELECT Count ( * ) FROM Highschooler",
        -7.178485870361328
      ],
      [
        "SELECT Count ( * ) FROM Highschooler WHERE grade = value",
        -8.903834342956543
      ],
      [
        "SELECT Count ( * ) FROM Likes WHERE liked_id = value",
        -10.100473403930664
      ],
      [
        "SELECT Count ( DISTINCT ID ) FROM Highschooler WHERE name = value",
        -12.6922926902771
      ],
      [
        "SELECT Count ( * ) FROM Highschooler WHERE name LIKE value",
        -12.869049310684204
      ],
      [
        "SELECT Count ( DISTINCT liked_id ) FROM Likes",
        -13.600339889526367
      ],
      [
        "SELECT Count ( ID ) FROM Highschooler WHERE name = value",
        -14.006510734558105
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM Highschooler WHERE name = value",
        -14.061390399932861
      ],
      [
        "SELECT Count ( * ) FROM Likes WHERE student_id = value",
        -14.135986328125
      ],
      [
        "SELECT Count ( * ) FROM Friend WHERE student_id = value",
        -14.306370735168457
      ],
      [
        "SELECT T2.liked_id FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id WHERE T1.name = value",
        -14.525617241859436
      ],
      [
        "SELECT Count ( * ) FROM Friend WHERE friend_id = value",
        -14.85457992553711
      ],
      [
        "SELECT Count ( DISTINCT T2.liked_id ) FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id WHERE T1.grade = value",
        -14.93591022491455
      ],
      [
        "SELECT Count ( * ) FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id GROUP BY T2.liked_id HAVING T1.name = value",
        -15.16061019897461
      ],
      [
        "SELECT Count ( DISTINCT name ) FROM Highschooler WHERE name = value",
        -15.29365348815918
      ],
      [
        "SELECT Count ( * ) FROM Highschooler WHERE ID = value",
        -15.488128662109375
      ],
      [
        "SELECT Count ( * ) , T2.liked_id FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id WHERE T1.name = value",
        -15.932899117469788
      ],
      [
        "SELECT Count ( * ) FROM Highschooler EXCEPT SELECT Count ( * ) FROM Highschooler WHERE name = value",
        -16.206254959106445
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM Highschooler WHERE name = \"Kyle\"",
    "predicted_parse": "SELECT Count ( * ) FROM Highschooler WHERE name = value",
    "predicted_parse_explanation": [
      "find the number of rows in high schooler table whose name equals Kyle"
    ],
    "template_feedback": "additionally use the information from the likes table besides the high schooler table .",
    "primary_span": [
      [
        0,
        7
      ]
    ],
    "secondary_span": [
      [
        8,
        13
      ]
    ],
    "edits": [
      "likes"
    ],
    "edits_original": "< from > add likes </ from >"
  },
  {
    "db_id": "tvshow",
    "feedback": "Instead of channel , tv series table use TV Channel's id , tv channel table in step 2.",
    "question": "What are the ids of all tv channels that have more than 2 TV channels?",
    "gold_parse": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2",
    "beam": [
      [
        "SELECT Channel FROM TV_series GROUP BY Channel HAVING Count ( * ) > value",
        -0.30211353302001953
      ],
      [
        "SELECT T1.Content FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel GROUP BY T2.Channel HAVING Count ( * ) > value",
        -1.3723392486572266
      ],
      [
        "SELECT Channel FROM TV_series WHERE 18_49_Rating_Share > value GROUP BY Channel HAVING Count ( * ) > value",
        -6.998558044433594
      ],
      [
        "SELECT T1.id FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel GROUP BY T2.Channel HAVING Count ( * ) > value",
        -7.080007553100586
      ],
      [
        "SELECT id FROM TV_series GROUP BY Channel HAVING Count ( * ) > value",
        -7.08786153793335
      ],
      [
        "SELECT T2.Channel FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel GROUP BY T1.Content HAVING Count ( * ) > value",
        -7.334649085998535
      ],
      [
        "SELECT T1.Content FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.18_49_Rating_Share > value GROUP BY T2.Channel HAVING Count ( * ) > value",
        -7.400859832763672
      ],
      [
        "SELECT Channel FROM TV_series INTERSECT SELECT Channel FROM TV_series WHERE 18_49_Rating_Share > value",
        -7.8349528312683105
      ],
      [
        "SELECT Content FROM TV_Channel GROUP BY Content HAVING Count ( * ) > value",
        -7.878474235534668
      ],
      [
        "SELECT T1.Content FROM TV_Channel AS T1 INTERSECT SELECT T2.Channel FROM TV_series AS T2 WHERE T2.18_49_Rating_Share > value",
        -8.295548439025879
      ],
      [
        "SELECT Channel FROM TV_series WHERE Viewers_m > value GROUP BY Channel HAVING Count ( * ) > value",
        -8.51534128189087
      ],
      [
        "SELECT Channel FROM TV_series",
        -8.867767333984375
      ],
      [
        "SELECT T1.Content FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.18_49_Rating_Share > value INTERSECT SELECT T2.Channel FROM TV_series AS T2 WHERE T2.18_49_Rating_Share < value",
        -8.86977767944336
      ],
      [
        "SELECT T1.Content FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Viewers_m > value GROUP BY T2.Channel HAVING Count ( * ) > value",
        -8.896001815795898
      ],
      [
        "SELECT T1.Content FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel GROUP BY T2.Channel HAVING Count ( * ) > value INTERSECT SELECT T2.Channel FROM TV_series AS T2 GROUP BY T2.Channel HAVING Count ( * ) > value",
        -9.067168235778809
      ],
      [
        "SELECT T1.Content FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.18_49_Rating_Share > value",
        -9.161334991455078
      ],
      [
        "SELECT Content FROM TV_Channel",
        -9.378453254699707
      ],
      [
        "SELECT Viewers_m FROM TV_series GROUP BY Channel HAVING Count ( * ) > value",
        -9.385056495666504
      ],
      [
        "SELECT Channel FROM TV_series INTERSECT SELECT Channel FROM TV_series WHERE Viewers_m > value",
        -9.504042625427246
      ],
      [
        "SELECT T1.Content FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.18_49_Rating_Share > value INTERSECT SELECT T2.Channel FROM TV_series AS T2 WHERE T2.Rating < value",
        -9.570807456970215
      ]
    ],
    "predicted_parse_with_values": "SELECT Channel FROM TV_series GROUP BY Channel HAVING Count ( * ) > 2",
    "predicted_parse": "SELECT Channel FROM TV_series GROUP BY Channel HAVING Count ( * ) > value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of channel in tv series table",
      "Step 2: find the channel in tv series table whose corresponding value in step 1 is greater than 2"
    ],
    "template_feedback": "in step 1 , use tv channel table in place of tv series table . find for value of country in place of channel .",
    "primary_span": [
      [
        4,
        7
      ],
      [
        15,
        19
      ]
    ],
    "secondary_span": [
      [
        8,
        14
      ],
      [
        20,
        24
      ]
    ],
    "edits": [
      "id",
      "channel",
      "tv channel",
      "tv series",
      "country",
      "channel"
    ],
    "edits_original": "< select > add id </ select > < select > remove channel </ select > < from > add tv channel </ from > < from > remove tv series </ from > < groupBy > add country </ groupBy > < groupBy > remove channel </ groupBy >"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "feedback": "Use paragraphs table in place of reference template types table .",
    "question": "Count the number of paragraphs.",
    "gold_parse": "SELECT count(*) FROM Paragraphs",
    "beam": [
      [
        "SELECT Count ( * ) FROM Ref_Template_Types",
        -2.002716064453125e-05
      ],
      [
        "SELECT Sum ( * ) FROM Ref_Template_Types",
        -12.125199556350708
      ],
      [
        "SELECT Sum ( Date_Effective_To ) FROM Templates",
        -13.44503939151764
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM Ref_Template_Types",
        -13.536986351013184
      ],
      [
        "SELECT Count ( * ) FROM Paragraphs WHERE Paragraph_Text = value",
        -14.625509977340698
      ],
      [
        "SELECT Count ( * ) , Paragraph_ID FROM Paragraphs",
        -14.758225679397583
      ],
      [
        "SELECT Count ( * ) FROM Ref_Template_Types GROUP BY *",
        -14.960749804973602
      ],
      [
        "SELECT Count ( * ) FROM Paragraphs WHERE Paragraph_ID = value",
        -15.163999080657959
      ],
      [
        "SELECT Count ( Count ( * ) ) FROM Ref_Template_Types",
        -15.525344848632812
      ],
      [
        "SELECT Avg ( * ) FROM Ref_Template_Types",
        -15.526888489723206
      ],
      [
        "SELECT Count ( * ) , Paragraph_Text FROM Paragraphs",
        -15.672361373901367
      ],
      [
        "SELECT Sum ( Version_Number ) FROM Templates",
        -15.816689014434814
      ],
      [
        "SELECT Count ( * ) FROM Templates GROUP BY Template_Type_Code",
        -15.937915086746216
      ],
      [
        "SELECT Count ( * ) , Template_Type_Code FROM Templates",
        -16.02678155899048
      ],
      [
        "SELECT Count ( * ) FROM Templates ORDER BY Date_Effective_To Desc LIMIT value",
        -16.20273447036743
      ],
      [
        "SELECT Sum ( Paragraph_ID ) FROM Paragraphs",
        -16.30445384979248
      ],
      [
        "SELECT Count ( DISTINCT * ) FROM Ref_Template_Types",
        -16.910548210144043
      ],
      [
        "SELECT Max ( * ) FROM Ref_Template_Types",
        -17.103445291519165
      ],
      [
        "SELECT Count ( * ) FROM Ref_Template_Types LIMIT value",
        -17.139738082885742
      ],
      [
        "SELECT Avg ( Date_Effective_To ) FROM Templates",
        -17.260753393173218
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM Ref_Template_Types",
    "predicted_parse": "SELECT Count ( * ) FROM Ref_Template_Types",
    "predicted_parse_explanation": [
      "find the number of rows in reference template types table"
    ],
    "template_feedback": "use paragraphs table in place of reference template types table .",
    "primary_span": [
      [
        0,
        2
      ]
    ],
    "secondary_span": [
      [
        3,
        10
      ]
    ],
    "edits": [
      "paragraphs",
      "reference template types"
    ],
    "edits_original": "< from > add paragraphs </ from > < from > remove reference template types </ from >"
  },
  {
    "db_id": "battle_death",
    "feedback": "Need to swap ship table with battle table .",
    "question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?",
    "gold_parse": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'",
    "beam": [
      [
        "SELECT DISTINCT id , name FROM ship WHERE ship_type = value",
        -0.010739326477050781
      ],
      [
        "SELECT DISTINCT T1.id , T2.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.ship_type = value",
        -4.577746391296387
      ],
      [
        "SELECT DISTINCT lost_in_battle , name FROM ship WHERE ship_type = value",
        -8.822211265563965
      ],
      [
        "SELECT id , name FROM ship WHERE ship_type = value",
        -9.21602725982666
      ],
      [
        "SELECT DISTINCT T2.id , T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.ship_type = value",
        -9.54362964630127
      ],
      [
        "SELECT DISTINCT name , name FROM ship WHERE ship_type = value",
        -9.792755126953125
      ],
      [
        "SELECT DISTINCT T2.name , T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.ship_type = value",
        -11.272618293762207
      ],
      [
        "SELECT DISTINCT T2.id , T1.name FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id WHERE T1.ship_type = value",
        -12.132264137268066
      ],
      [
        "SELECT DISTINCT T2.caused_by_ship_id , T1.name FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id WHERE T1.ship_type = value",
        -12.946819305419922
      ],
      [
        "SELECT DISTINCT T2.killed , T1.name FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id WHERE T1.ship_type = value",
        -13.001185417175293
      ],
      [
        "SELECT DISTINCT T1.id , T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.ship_type = value",
        -13.719202995300293
      ],
      [
        "SELECT DISTINCT T2.id , T2.name , T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.ship_type = value",
        -13.860469818115234
      ],
      [
        "SELECT T1.id , T2.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.ship_type = value",
        -13.892715454101562
      ],
      [
        "SELECT DISTINCT id , name FROM ship WHERE ship_type LIKE value",
        -14.003409385681152
      ],
      [
        "SELECT DISTINCT id FROM ship WHERE ship_type = value",
        -14.10595703125
      ],
      [
        "SELECT DISTINCT disposition_of_ship , name FROM ship WHERE ship_type = value",
        -14.173583030700684
      ],
      [
        "SELECT DISTINCT Count ( id ) , name FROM ship WHERE ship_type = value",
        -14.42666244506836
      ],
      [
        "SELECT DISTINCT tonnage , name FROM ship WHERE ship_type = value",
        -15.036552429199219
      ],
      [
        "SELECT DISTINCT id , name , name FROM ship WHERE ship_type = value",
        -15.291926860809326
      ],
      [
        "SELECT DISTINCT name FROM ship WHERE ship_type = value",
        -15.628847122192383
      ]
    ],
    "predicted_parse_with_values": "SELECT DISTINCT id , name FROM ship WHERE ship_type = \"Brig\"",
    "predicted_parse": "SELECT DISTINCT id , name FROM ship WHERE ship_type = value",
    "predicted_parse_explanation": [
      "find without repetition id and name in ship table whose ship type equals Brig"
    ],
    "template_feedback": "additionally use the information from the battle table besides the ship table . find battle 's name and battle 's id in place of ship 's id and ship 's name .",
    "primary_span": [
      [
        0,
        7
      ],
      [
        13,
        20
      ]
    ],
    "secondary_span": [
      [
        8,
        12
      ],
      [
        21,
        31
      ]
    ],
    "edits": [
      "battle"
    ],
    "edits_original": "< from > add battle </ from >"
  },
  {
    "db_id": "car_1",
    "feedback": "you need to search for highest accelerate.",
    "question": "What is the maximum accelerate for different number of cylinders?",
    "gold_parse": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders",
    "beam": [
      [
        "SELECT Max ( Cylinders ) , Accelerate FROM cars_data GROUP BY Cylinders",
        -0.44464266300201416
      ],
      [
        "SELECT Max ( Cylinders ) , Accelerate FROM cars_data GROUP BY Accelerate",
        -2.8566237688064575
      ],
      [
        "SELECT Max ( Cylinders ) , Accelerate FROM cars_data GROUP BY Horsepower",
        -3.367989420890808
      ],
      [
        "SELECT Max ( Cylinders ) , Year FROM cars_data GROUP BY Cylinders",
        -3.4895933866500854
      ],
      [
        "SELECT Max ( T6.Cylinders ) , T1.Continent FROM continents AS T1 JOIN countries AS T2 ON T1.ContId = T2.Continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country JOIN model_list AS T4 ON T3.Id = T4.Maker JOIN car_names AS T5 ON T4.Model = T5.Model JOIN cars_data AS T6 ON T5.MakeId = T6.Id GROUP BY T6.Cylinders",
        -4.028846621513367
      ],
      [
        "SELECT Max ( Cylinders ) , MPG FROM cars_data GROUP BY Cylinders",
        -4.075272560119629
      ],
      [
        "SELECT Max ( Cylinders ) , Cylinders FROM cars_data GROUP BY Cylinders",
        -4.186443209648132
      ],
      [
        "SELECT Max ( Cylinders ) , Horsepower FROM cars_data GROUP BY Cylinders",
        -4.233616232872009
      ],
      [
        "SELECT Max ( Cylinders ) , Accelerate FROM cars_data GROUP BY Id",
        -4.275793194770813
      ],
      [
        "SELECT Max ( Cylinders ) , Accelerate FROM cars_data GROUP BY Year",
        -4.342381119728088
      ],
      [
        "SELECT Max ( Cylinders ) , Accelerate FROM cars_data GROUP BY MPG",
        -4.422330975532532
      ],
      [
        "SELECT Max ( T3.Cylinders ) , T3.Accelerate FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id GROUP BY T1.Model",
        -4.713934540748596
      ],
      [
        "SELECT Max ( Cylinders ) , Weight FROM cars_data GROUP BY Cylinders",
        -5.0100544691085815
      ],
      [
        "SELECT Max ( T4.Cylinders ) , T4.Accelerate FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id GROUP BY T1.Country",
        -5.269593358039856
      ],
      [
        "SELECT Max ( T6.Cylinders ) , T6.Accelerate FROM continents AS T1 JOIN countries AS T2 ON T1.ContId = T2.Continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country JOIN model_list AS T4 ON T3.Id = T4.Maker JOIN car_names AS T5 ON T4.Model = T5.Model JOIN cars_data AS T6 ON T5.MakeId = T6.Id GROUP BY T1.Continent",
        -5.353216290473938
      ],
      [
        "SELECT Max ( Cylinders ) , Id FROM cars_data GROUP BY Cylinders",
        -5.361525177955627
      ],
      [
        "SELECT Max ( Cylinders ) , Year FROM cars_data GROUP BY Accelerate",
        -5.364898920059204
      ],
      [
        "SELECT Max ( T4.Cylinders ) , T1.FullName FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id GROUP BY T4.Cylinders",
        -5.399341464042664
      ],
      [
        "SELECT Max ( T2.Cylinders ) , T2.Accelerate FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id GROUP BY T1.Model",
        -5.673452973365784
      ],
      [
        "SELECT Max ( Cylinders ) FROM cars_data",
        -7.202639579772949
      ]
    ],
    "predicted_parse_with_values": "SELECT Max ( Cylinders ) , Accelerate FROM cars_data GROUP BY Cylinders",
    "predicted_parse": "SELECT Max ( Cylinders ) , Accelerate FROM cars_data GROUP BY Cylinders",
    "predicted_parse_explanation": [
      "find each value of cylinders in cars data table along with the accelerate and maximum cylinders of the corresponding rows to each value"
    ],
    "template_feedback": "find maximum accelerate in place of accelerate . find cylinders in place of maximum cylinders .",
    "primary_span": [
      [
        0,
        2
      ],
      [
        8,
        9
      ]
    ],
    "secondary_span": [
      [
        3,
        7
      ],
      [
        10,
        15
      ]
    ],
    "edits": [
      "maximum accelerate",
      "cylinders",
      "maximum cylinders",
      "accelerate"
    ],
    "edits_original": "< select > add maximum accelerate </ select > < select > add cylinders </ select > < select > remove maximum cylinders </ select > < select > remove accelerate </ select >"
  },
  {
    "db_id": "car_1",
    "feedback": "I want the id, maker and names of car model including car markers table.",
    "question": "Which are the car makers which produce at least 2 models and more than 3 car makes? List the id and the maker.",
    "gold_parse": "SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3",
    "beam": [
      [
        "SELECT T2.MakeId , T1.ModelId FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model WHERE T1.Model > = value INTERSECT SELECT T2.MakeId , T1.ModelId FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model WHERE T1.Model > value",
        -2.2449969053268433
      ],
      [
        "SELECT T2.MakeId , T1.ModelId FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model WHERE T1.Model > = value INTERSECT SELECT T2.MakeId , T3.Maker FROM car_makers AS T3 JOIN model_list AS T1 ON T3.Id = T1.Maker AND T3.Id = T1.Maker JOIN car_names AS T2 ON T1.Model = T2.Model WHERE T1.Model > value",
        -2.87361478805542
      ],
      [
        "SELECT T3.MakeId , T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker AND T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model WHERE T2.Model > = value INTERSECT SELECT T3.MakeId , T2.ModelId FROM model_list AS T2 JOIN car_names AS T3 ON T2.Model = T3.Model WHERE T2.Model > value",
        -2.9186034202575684
      ],
      [
        "SELECT T3.MakeId , T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker AND T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model WHERE T2.Model > = value INTERSECT SELECT T3.MakeId , T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker AND T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model WHERE T2.Model > value",
        -3.531345009803772
      ],
      [
        "SELECT T2.MakeId , T1.ModelId FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model WHERE T1.Model > = value INTERSECT SELECT T2.MakeId , T3.FullName FROM car_makers AS T3 JOIN model_list AS T1 ON T3.Id = T1.Maker AND T3.Id = T1.Maker JOIN car_names AS T2 ON T1.Model = T2.Model WHERE T1.Model > value",
        -3.6431342363357544
      ],
      [
        "SELECT T2.MakeId , T1.ModelId FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model WHERE T1.Model > = value INTERSECT SELECT T1.ModelId , T3.Maker FROM car_makers AS T3 JOIN model_list AS T1 ON T3.Id = T1.Maker WHERE T1.Model > value",
        -3.9363200664520264
      ],
      [
        "SELECT T3.MakeId , T1.FullName FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker AND T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model WHERE T2.Model > = value INTERSECT SELECT T3.MakeId , T2.ModelId FROM model_list AS T2 JOIN car_names AS T3 ON T2.Model = T3.Model WHERE T2.Model > value",
        -3.992463707923889
      ],
      [
        "SELECT T2.MakeId , T1.ModelId FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model WHERE T1.Model > = value INTERSECT SELECT T1.ModelId , T3.FullName FROM car_makers AS T3 JOIN model_list AS T1 ON T3.Id = T1.Maker WHERE T1.Model > value",
        -4.253141164779663
      ],
      [
        "SELECT T2.MakeId , T1.ModelId FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model WHERE T1.Model > = value INTERSECT SELECT T1.ModelId , T1.ModelId FROM model_list AS T1 WHERE T1.Model > value",
        -4.262736201286316
      ],
      [
        "SELECT T3.MakeId , T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker AND T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model WHERE T2.Model > = value INTERSECT SELECT T3.MakeId , T1.FullName FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker AND T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model WHERE T2.Model > value",
        -4.262916207313538
      ],
      [
        "SELECT T2.MakeId , T1.ModelId FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model WHERE T2.Model > = value INTERSECT SELECT T2.MakeId , T1.ModelId FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model WHERE T1.Model > value",
        -4.405007004737854
      ],
      [
        "SELECT T2.MakeId , T1.ModelId FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model WHERE T1.Model = value GROUP BY T1.ModelId HAVING Count ( * ) > = value",
        -4.536995530128479
      ],
      [
        "SELECT T3.MakeId , T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker AND T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model WHERE T2.Model > = value INTERSECT SELECT T2.ModelId , T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker WHERE T2.Model > value",
        -4.587418913841248
      ],
      [
        "SELECT T3.MakeId , T1.Id FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker AND T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model WHERE T2.Model > = value INTERSECT SELECT T3.MakeId , T2.ModelId FROM model_list AS T2 JOIN car_names AS T3 ON T2.Model = T3.Model WHERE T2.Model > value",
        -4.63054883480072
      ],
      [
        "SELECT T3.MakeId , T1.FullName FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker AND T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model WHERE T2.Model > = value INTERSECT SELECT T3.MakeId , T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker AND T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model WHERE T2.Model > value",
        -4.68499493598938
      ],
      [
        "SELECT T2.MakeId , T1.ModelId FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model WHERE T1.Model > = value GROUP BY T1.ModelId HAVING Count ( * ) > = value",
        -4.736906170845032
      ],
      [
        "SELECT T3.MakeId , T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker AND T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model WHERE T2.Model > = value INTERSECT SELECT T2.ModelId , T1.FullName FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker WHERE T2.Model > value",
        -4.86300003528595
      ],
      [
        "SELECT T3.MakeId , T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker AND T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model WHERE T2.Model > = value INTERSECT SELECT T2.ModelId , T2.ModelId FROM model_list AS T2 WHERE T2.Model > value",
        -4.936103463172913
      ],
      [
        "SELECT T2.MakeId , T2.MakeId FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model WHERE T1.Model > = value INTERSECT SELECT T2.MakeId , T1.ModelId FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model WHERE T1.Model > value",
        -4.970877170562744
      ],
      [
        "SELECT T2.MakeId , T1.ModelId FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model WHERE T1.Model > = value INTERSECT SELECT T3.Id , T1.ModelId FROM car_makers AS T3 JOIN model_list AS T1 ON T3.Id = T1.Maker WHERE T1.Model > value",
        -5.036259055137634
      ]
    ],
    "predicted_parse_with_values": "SELECT T2.MakeId , T1.ModelId FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model WHERE T1.Model > = 2 INTERSECT SELECT T2.MakeId , T1.ModelId FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model WHERE T1.Model > 3",
    "predicted_parse": "SELECT T2.MakeId , T1.ModelId FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model WHERE T1.Model > = value INTERSECT SELECT T2.MakeId , T1.ModelId FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model WHERE T1.Model > value",
    "predicted_parse_explanation": [
      "Step 1: for each row in model list table , find the corresponding rows in car names table",
      "Step 2: find the make id and model id of the results of step 1 whose model list 's model greater than or equals 2",
      "Step 3: for each row in model list table , find the corresponding rows in car names table",
      "Step 4: find the make id and model id of the results of step 3 whose model list 's model greater than 3",
      "Step 5: show the rows that are in both the results of step 2 and step 4"
    ],
    "template_feedback": "in step 1 , use car makers table in place of car names table in step 2 , remove the model list 's model greater than or equals 2 conditions . find for each value of id whose number of rows greater than or equals 2 . find id and car makers 's maker in place of make id and model id . in step 3 , additionally use the information from the car makers table . in step 4 , remove the model list 's model greater than 3 conditions . find for each value of id whose number of rows greater than 3 . find id and car makers 's maker in place of make id and model id .",
    "primary_span": [
      [
        4,
        7
      ],
      [
        18,
        30
      ],
      [
        31,
        46
      ],
      [
        47,
        53
      ],
      [
        67,
        76
      ],
      [
        81,
        91
      ],
      [
        92,
        105
      ],
      [
        106,
        112
      ]
    ],
    "secondary_span": [
      [
        8,
        13
      ],
      [
        54,
        62
      ],
      [
        113,
        121
      ]
    ],
    "edits": [
      "id",
      "maker",
      "make id",
      "model id",
      "car makers",
      "car names",
      "model greater than or equals to 2",
      "id",
      "number of rows greater than or equals to 2",
      "id",
      "maker",
      "make id",
      "model id",
      "car makers",
      "model greater than 3",
      "id",
      "number of rows greater than 3"
    ],
    "edits_original": "< select > add id </ select > < select > add maker </ select > < select > remove make id </ select > < select > remove model id </ select > < from > add car makers </ from > < from > remove car names </ from > < where > remove model greater than or equals to 2 </ where > < groupBy > add id </ groupBy > < having > add number of rows greater than or equals to 2 </ having > < select > add id </ select > < select > add maker </ select > < select > remove make id </ select > < select > remove model id </ select > < from > add car makers </ from > < where > remove model greater than 3 </ where > < groupBy > add id </ groupBy > < having > add number of rows greater than 3 </ having >"
  },
  {
    "db_id": "dog_kennels",
    "feedback": "Replace treatment type code with charge type .",
    "question": "List each charge type and its amount.",
    "gold_parse": "SELECT charge_type ,  charge_amount FROM Charges",
    "beam": [
      [
        "SELECT T2.treatment_type_code , T1.charge_amount FROM Charges AS T1 JOIN Treatment_Types AS T2",
        -0.07323646545410156
      ],
      [
        "SELECT T2.treatment_type_code , T1.charge_amount FROM Charges AS T1 JOIN Treatments AS T2",
        -2.79093074798584
      ],
      [
        "SELECT charge_type , charge_amount FROM Charges",
        -5.115971565246582
      ],
      [
        "SELECT T2.treatment_type_code , T1.charge_amount FROM Charges AS T1 JOIN Treatment_Types AS T2 JOIN Treatments AS T3 GROUP BY T3.treatment_type_code",
        -6.513180732727051
      ],
      [
        "SELECT T2.treatment_type_code , Sum ( T1.charge_amount ) FROM Charges AS T1 JOIN Treatment_Types AS T2",
        -7.447005271911621
      ],
      [
        "SELECT T2.treatment_type_code , T1.charge_amount FROM Charges AS T1 JOIN Treatments AS T2 GROUP BY T2.treatment_type_code",
        -7.556225776672363
      ],
      [
        "SELECT T2.treatment_type_code , Sum ( T1.charge_amount ) FROM Charges AS T1 JOIN Treatments AS T2",
        -8.110186576843262
      ],
      [
        "SELECT T2.treatment_type_code , T1.charge_amount FROM Charges AS T1 JOIN Treatment_Types AS T2 GROUP BY T2.treatment_type_code",
        -8.868955612182617
      ],
      [
        "SELECT T1.charge_type , T1.charge_amount FROM Charges AS T1 JOIN Treatments AS T2 GROUP BY T2.treatment_type_code",
        -9.903120040893555
      ],
      [
        "SELECT T3.treatment_type_code , T1.charge_amount FROM Charges AS T1 JOIN Treatment_Types AS T2 JOIN Treatments AS T3 GROUP BY T2.treatment_type_code",
        -9.972644805908203
      ],
      [
        "SELECT T2.treatment_type_code , Sum ( T1.charge_amount ) FROM Charges AS T1 JOIN Treatments AS T2 GROUP BY T2.treatment_type_code",
        -10.59880256652832
      ],
      [
        "SELECT treatment_type_code , Count ( * ) FROM Treatment_Types",
        -11.118143558502197
      ],
      [
        "SELECT T2.treatment_type_code , Sum ( T1.charge_amount ) FROM Charges AS T1 JOIN Treatment_Types AS T2 JOIN Treatments AS T3 GROUP BY T3.treatment_type_code",
        -11.312990188598633
      ],
      [
        "SELECT T2.treatment_type_code , Count ( T1.charge_amount ) FROM Charges AS T1 JOIN Treatment_Types AS T2",
        -11.50113296508789
      ],
      [
        "SELECT treatment_type_code , Count ( * ) FROM Treatments",
        -12.08101749420166
      ],
      [
        "SELECT T1.charge_type , T1.charge_amount FROM Charges AS T1 JOIN Treatment_Types AS T2 GROUP BY T2.treatment_type_code",
        -12.268767356872559
      ],
      [
        "SELECT charge_type , Sum ( charge_amount ) FROM Charges",
        -12.271116256713867
      ],
      [
        "SELECT T2.treatment_type_code , Count ( T1.charge_amount ) FROM Charges AS T1 JOIN Treatments AS T2",
        -12.378462314605713
      ],
      [
        "SELECT T2.treatment_type_code , T1.charge_amount FROM Charges AS T1 JOIN Treatment_Types AS T2 UNION SELECT T1.charge_type FROM Charges AS T1",
        -12.73632287979126
      ],
      [
        "SELECT T2.treatment_type_code , T1.charge_amount FROM Charges AS T1 JOIN Treatment_Types AS T2 WHERE T2.treatment_type_description = value",
        -12.903962552547455
      ]
    ],
    "predicted_parse_with_values": "SELECT T2.treatment_type_code , T1.charge_amount FROM Charges AS T1 JOIN Treatment_Types AS T2",
    "predicted_parse": "SELECT T2.treatment_type_code , T1.charge_amount FROM Charges AS T1 JOIN Treatment_Types AS T2",
    "predicted_parse_explanation": [
      "Step 1: for each row in charges table , find the corresponding rows in treatment types table",
      "Step 2: find the treatment type code and charge amount of the results of step 1"
    ],
    "template_feedback": "in step 1 , do not use the treatment types table . in step 2 , find charge type in place of treatment type code .",
    "primary_span": [
      [
        4,
        11
      ],
      [
        16,
        18
      ]
    ],
    "secondary_span": [
      [
        4,
        11
      ],
      [
        19,
        25
      ]
    ],
    "edits": [
      "charge type",
      "treatment type code",
      "treatment types"
    ],
    "edits_original": "< select > add charge type </ select > < select > remove treatment type code </ select > < from > remove treatment types </ from >"
  },
  {
    "db_id": "tvshow",
    "feedback": "Rather than hight definition tv , Use pixel aspect ratio par .",
    "question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?",
    "gold_parse": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'",
    "beam": [
      [
        "SELECT Hight_definition_TV , Country FROM TV_Channel WHERE Language ! = value",
        -0.07662391662597656
      ],
      [
        "SELECT Max ( Hight_definition_TV ) , Country FROM TV_Channel WHERE Language ! = value",
        -2.6450767517089844
      ],
      [
        "SELECT Pixel_aspect_ratio_PAR , Country FROM TV_Channel WHERE Language ! = value",
        -6.155447006225586
      ],
      [
        "SELECT Max ( Pixel_aspect_ratio_PAR ) , Country FROM TV_Channel WHERE Language ! = value",
        -7.580102920532227
      ],
      [
        "SELECT Min ( Hight_definition_TV ) , Country FROM TV_Channel WHERE Language ! = value",
        -10.040350914001465
      ],
      [
        "SELECT Max ( Pay_per_view_PPV ) , Country FROM TV_Channel WHERE Language ! = value",
        -11.440179824829102
      ],
      [
        "SELECT T1.Hight_definition_TV , T1.Country FROM TV_Channel AS T1 WHERE T1.id NOT IN ( SELECT T2.Channel FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.Language = value )",
        -11.58256483078003
      ],
      [
        "SELECT T1.Hight_definition_TV , T1.Country FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Channel NOT IN ( SELECT T2.Channel FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.Language = value )",
        -11.909771919250488
      ],
      [
        "SELECT Pay_per_view_PPV , Country FROM TV_Channel WHERE Language ! = value",
        -11.99451732635498
      ],
      [
        "SELECT Count ( Hight_definition_TV ) , Country FROM TV_Channel WHERE Language ! = value",
        -12.076698303222656
      ],
      [
        "SELECT Hight_definition_TV , Country FROM TV_Channel WHERE Content ! = value",
        -12.637704849243164
      ],
      [
        "SELECT Hight_definition_TV , Country FROM TV_Channel WHERE Language < = value",
        -12.797383308410645
      ],
      [
        "SELECT Sum ( Hight_definition_TV ) , Country FROM TV_Channel WHERE Language ! = value",
        -12.83745002746582
      ],
      [
        "SELECT T1.Hight_definition_TV , T1.Country FROM TV_Channel AS T1 WHERE T1.Content NOT IN ( SELECT T2.Channel FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.Language = value )",
        -13.109682559967041
      ],
      [
        "SELECT Hight_definition_TV , Country FROM TV_Channel WHERE Language = value",
        -13.2283353805542
      ],
      [
        "SELECT Hight_definition_TV , Country , Country FROM TV_Channel WHERE Language ! = value",
        -13.311336517333984
      ],
      [
        "SELECT T2.18_49_Rating_Share , T1.Country FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.Language ! = value",
        -13.434309959411621
      ],
      [
        "SELECT Hight_definition_TV , Country , Content FROM TV_Channel WHERE Language ! = value",
        -13.480605125427246
      ],
      [
        "SELECT Avg ( Hight_definition_TV ) , Country FROM TV_Channel WHERE Language ! = value",
        -13.601302146911621
      ],
      [
        "SELECT Max ( Hight_definition_TV ) FROM TV_Channel WHERE Language ! = value",
        -13.824427604675293
      ]
    ],
    "predicted_parse_with_values": "SELECT Hight_definition_TV , Country FROM TV_Channel WHERE Language ! = \"English\"",
    "predicted_parse": "SELECT Hight_definition_TV , Country FROM TV_Channel WHERE Language ! = value",
    "predicted_parse_explanation": [
      "find the hight definition tv and country in tv channel table whose language not equals English"
    ],
    "template_feedback": "find pixel aspect ratio par in place of hight definition tv .",
    "primary_span": [
      [
        0,
        4
      ]
    ],
    "secondary_span": [
      [
        5,
        11
      ]
    ],
    "edits": [
      "pixel aspect ratio par",
      "hight definition tv"
    ],
    "edits_original": "< select > add pixel aspect ratio par </ select > < select > remove hight definition tv </ select >"
  },
  {
    "db_id": "world_1",
    "feedback": "Switch continent with region .",
    "question": "How long is the people's average life expectancy in Central Africa?",
    "gold_parse": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"",
    "beam": [
      [
        "SELECT Avg ( LifeExpectancy ) FROM country WHERE Continent = value",
        -0.79705810546875
      ],
      [
        "SELECT Avg ( GNPOld ) FROM country WHERE Continent = value",
        -1.1929130554199219
      ],
      [
        "SELECT Avg ( LifeExpectancy ) FROM country WHERE Region = value",
        -2.2319374084472656
      ],
      [
        "SELECT Avg ( GNPOld ) FROM country WHERE Region = value",
        -2.4165115356445312
      ],
      [
        "SELECT Avg ( Population ) FROM country WHERE Continent = value",
        -3.208078384399414
      ],
      [
        "SELECT Avg ( Population ) FROM country WHERE Region = value",
        -4.999500274658203
      ],
      [
        "SELECT Avg ( GNP ) FROM country WHERE Continent = value",
        -6.413106918334961
      ],
      [
        "SELECT Avg ( GNP ) FROM country WHERE Region = value",
        -7.914480209350586
      ],
      [
        "SELECT Avg ( LifeExpectancy ) FROM country WHERE LocalName = value",
        -8.89198112487793
      ],
      [
        "SELECT Avg ( GNPOld ) FROM country WHERE LocalName = value",
        -9.193890571594238
      ],
      [
        "SELECT Avg ( Population ) FROM country WHERE LocalName = value",
        -11.348102569580078
      ],
      [
        "SELECT Avg ( LifeExpectancy ) , Avg ( GNPOld ) FROM country WHERE Continent = value",
        -12.373211860656738
      ],
      [
        "SELECT Avg ( LifeExpectancy ) FROM country WHERE Name = value",
        -12.495073318481445
      ],
      [
        "SELECT Avg ( GNPOld ) FROM country WHERE Name = value",
        -12.83356761932373
      ],
      [
        "SELECT Avg ( LifeExpectancy ) FROM country",
        -12.888766288757324
      ],
      [
        "SELECT Avg ( LifeExpectancy ) , Avg ( LifeExpectancy ) FROM country WHERE Continent = value",
        -12.940491676330566
      ],
      [
        "SELECT Avg ( GNPOld ) , Avg ( GNPOld ) FROM country WHERE Continent = value",
        -13.324070930480957
      ],
      [
        "SELECT Avg ( LifeExpectancy ) , Avg ( GNPOld ) FROM country WHERE Region = value",
        -13.349553108215332
      ],
      [
        "SELECT Avg ( GNPOld ) FROM country",
        -13.35518741607666
      ],
      [
        "SELECT Avg ( Capital ) FROM country WHERE Continent = value",
        -14.460453033447266
      ]
    ],
    "predicted_parse_with_values": "SELECT Avg ( LifeExpectancy ) FROM country WHERE Continent = \"Central Africa\"",
    "predicted_parse": "SELECT Avg ( LifeExpectancy ) FROM country WHERE Continent = value",
    "predicted_parse_explanation": [
      "find the average life expectancy in country table whose continent equals Central Africa"
    ],
    "template_feedback": "consider the region equals Central Africa conditions in place of the continent equals Central Africa conditions .",
    "primary_span": [
      [
        0,
        6
      ]
    ],
    "secondary_span": [
      [
        7,
        16
      ]
    ],
    "edits": [
      "region equals \"Central Africa\"",
      "continent equals \"Central Africa\""
    ],
    "edits_original": "< where > add region equals \" Central Africa \" </ where > < where > remove continent equals \" Central Africa \" </ where >"
  },
  {
    "db_id": "car_1",
    "feedback": "In step 1, you can use table of car names.",
    "question": "What model has the most different versions?",
    "gold_parse": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1",
    "beam": [
      [
        "SELECT Model FROM model_list GROUP BY Model ORDER BY Count ( * ) Desc LIMIT value",
        -6.008148193359375e-05
      ],
      [
        "SELECT T2.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model GROUP BY T1.Model ORDER BY Count ( * ) Desc LIMIT value",
        -10.430929183959961
      ],
      [
        "SELECT DISTINCT Model FROM model_list GROUP BY Model ORDER BY Count ( * ) Desc LIMIT value",
        -11.748013496398926
      ],
      [
        "SELECT Model FROM model_list GROUP BY Model ORDER BY Count ( * ) Desc",
        -12.35866641998291
      ],
      [
        "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model GROUP BY T2.Model ORDER BY Count ( * ) Desc LIMIT value",
        -12.598970413208008
      ],
      [
        "SELECT ModelId FROM model_list GROUP BY Model ORDER BY Count ( * ) Desc LIMIT value",
        -12.61995792388916
      ],
      [
        "SELECT Model FROM model_list GROUP BY ModelId ORDER BY Count ( * ) Desc LIMIT value",
        -12.704959869384766
      ],
      [
        "SELECT Model , Count ( * ) FROM model_list GROUP BY Model ORDER BY Count ( * ) Desc LIMIT value",
        -12.823139667510986
      ],
      [
        "SELECT Model FROM model_list GROUP BY Model HAVING Count ( * ) < = value",
        -13.33033561706543
      ],
      [
        "SELECT Model FROM model_list GROUP BY Model ORDER BY Count ( Model ) Desc LIMIT value",
        -13.669565200805664
      ],
      [
        "SELECT Model FROM model_list GROUP BY Model",
        -14.033638954162598
      ],
      [
        "SELECT Count ( DISTINCT Model ) FROM model_list GROUP BY Model ORDER BY Count ( * ) Desc LIMIT value",
        -14.042875289916992
      ],
      [
        "SELECT Count ( * ) FROM model_list GROUP BY Model ORDER BY Count ( * ) Desc LIMIT value",
        -14.315619468688965
      ],
      [
        "SELECT Model FROM model_list GROUP BY Model ORDER BY Count ( * ) Asc LIMIT value",
        -14.810179710388184
      ],
      [
        "SELECT Model FROM model_list GROUP BY Model ORDER BY Sum ( * ) Desc LIMIT value",
        -15.443138003349304
      ],
      [
        "SELECT Model FROM model_list GROUP BY Model ORDER BY Avg ( * ) Desc LIMIT value",
        -15.553759336471558
      ],
      [
        "SELECT DISTINCT Model FROM model_list GROUP BY Model ORDER BY Count ( * ) Desc LIMIT value",
        -15.569207191467285
      ],
      [
        "SELECT Model , ModelId FROM model_list GROUP BY Model ORDER BY Count ( * ) Desc LIMIT value",
        -15.588623285293579
      ],
      [
        "SELECT Model FROM model_list GROUP BY Model ORDER BY Count ( DISTINCT ModelId ) Desc LIMIT value",
        -15.874598979949951
      ],
      [
        "SELECT Model FROM model_list ORDER BY Count ( * ) Desc LIMIT value",
        -16.19998264312744
      ]
    ],
    "predicted_parse_with_values": "SELECT Model FROM model_list GROUP BY Model ORDER BY Count ( * ) Desc LIMIT 1",
    "predicted_parse": "SELECT Model FROM model_list GROUP BY Model ORDER BY Count ( * ) Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of model in model list table",
      "Step 2: find the model in model list table with largest value in the results of step 1"
    ],
    "template_feedback": "in step 1 , use car names table in place of model list table .",
    "primary_span": [
      [
        4,
        7
      ]
    ],
    "secondary_span": [
      [
        8,
        14
      ]
    ],
    "edits": [
      "car names",
      "model list"
    ],
    "edits_original": "< from > add car names </ from > < from > remove model list </ from >"
  },
  {
    "db_id": "flight_2",
    "feedback": "airport code should be present most number of times as source airport or destination airport in flights .",
    "question": "What is the code of airport that has the highest number of flights?",
    "gold_parse": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1",
    "beam": [
      [
        "SELECT T1.AirportCode FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport ORDER BY T2.FlightNo Desc LIMIT value",
        -0.14777183532714844
      ],
      [
        "SELECT T1.AirportCode FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport GROUP BY T2.DestAirport ORDER BY Count ( * ) Desc LIMIT value",
        -2.5527544021606445
      ],
      [
        "SELECT DestAirport FROM flights GROUP BY DestAirport ORDER BY Count ( * ) Desc LIMIT value",
        -3.60374116897583
      ],
      [
        "SELECT DestAirport FROM flights ORDER BY FlightNo Desc LIMIT value",
        -4.169185161590576
      ],
      [
        "SELECT T2.AirportCode FROM airlines AS T1 JOIN airports AS T2 ORDER BY T1.Abbreviation Desc LIMIT value",
        -4.676436901092529
      ],
      [
        "SELECT T1.AirportCode FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport GROUP BY T2.SourceAirport ORDER BY Count ( * ) Desc LIMIT value",
        -6.213203430175781
      ],
      [
        "SELECT T2.DestAirport FROM airlines AS T1 JOIN flights AS T2 GROUP BY T1.Abbreviation ORDER BY Count ( * ) Desc LIMIT value",
        -6.328322887420654
      ],
      [
        "SELECT T2.AirportCode FROM airlines AS T1 JOIN airports AS T2 GROUP BY T1.Abbreviation ORDER BY Count ( * ) Desc LIMIT value",
        -6.535943508148193
      ],
      [
        "SELECT DestAirport FROM flights GROUP BY SourceAirport ORDER BY Count ( * ) Desc LIMIT value",
        -6.964221954345703
      ],
      [
        "SELECT T2.AirportCode FROM airlines AS T1 JOIN airports AS T2 ORDER BY T1.Airline Desc LIMIT value",
        -7.827068328857422
      ],
      [
        "SELECT AirportCode FROM airports ORDER BY * Desc LIMIT value",
        -8.709935188293457
      ],
      [
        "SELECT T2.DestAirport FROM airlines AS T1 JOIN flights AS T2 ORDER BY T1.Abbreviation Desc LIMIT value",
        -8.749741554260254
      ],
      [
        "SELECT T2.AirportCode FROM airlines AS T1 JOIN airports AS T2 ORDER BY T1.Country Desc LIMIT value",
        -9.001255989074707
      ],
      [
        "SELECT T2.AirportCode FROM airlines AS T1 JOIN airports AS T2 GROUP BY T1.Airline ORDER BY Count ( * ) Desc LIMIT value",
        -9.993478298187256
      ],
      [
        "SELECT AirportCode FROM airports GROUP BY Country ORDER BY Count ( * ) Desc LIMIT value",
        -9.993667602539062
      ],
      [
        "SELECT T2.DestAirport FROM airlines AS T1 JOIN flights AS T2 GROUP BY T1.Airline ORDER BY Count ( * ) Desc LIMIT value",
        -10.063955783843994
      ],
      [
        "SELECT AirportCode FROM airports ORDER BY Country Desc LIMIT value",
        -10.34117603302002
      ],
      [
        "SELECT Max ( AirportCode ) FROM airports",
        -10.818230152130127
      ],
      [
        "SELECT AirportCode FROM airports",
        -11.85211181640625
      ],
      [
        "SELECT DestAirport FROM flights",
        -12.682203769683838
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.AirportCode FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport ORDER BY T2.FlightNo Desc LIMIT 1",
    "predicted_parse": "SELECT T1.AirportCode FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport ORDER BY T2.FlightNo Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: for each row in airports table , find the corresponding rows in flights table",
      "Step 2: find the airport code of the results of step 1 with largest value of flight number"
    ],
    "template_feedback": "in step 2 , find for each value of airport code . order the results by number of rows in place of flight number .",
    "primary_span": [
      [
        4,
        11
      ],
      [
        12,
        18
      ]
    ],
    "secondary_span": [
      [
        19,
        24
      ]
    ],
    "edits": [
      "airport code",
      "number of rows",
      "flight number"
    ],
    "edits_original": "< groupBy > add airport code </ groupBy > < orderBy > add number of rows </ orderBy > < orderBy > remove flight number </ orderBy >"
  },
  {
    "db_id": "course_teach",
    "feedback": "Also need to find teacher's name .",
    "question": "What are the names of the teachers and how many courses do they teach?",
    "gold_parse": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name",
    "beam": [
      [
        "SELECT T1.Name , Count ( * ) FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Teacher_ID",
        -0.15889358520507812
      ],
      [
        "SELECT Name , Count ( * ) FROM teacher GROUP BY Name",
        -1.919149398803711
      ],
      [
        "SELECT Name , Count ( * ) FROM teacher GROUP BY Teacher_ID",
        -9.024820327758789
      ],
      [
        "SELECT Count ( * ) , T1.Name FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Teacher_ID",
        -10.923899173736572
      ],
      [
        "SELECT Count ( * ) , Name FROM teacher GROUP BY Name",
        -11.298011302947998
      ],
      [
        "SELECT T1.Name , Count ( * ) FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Teacher_ID ORDER BY Count ( * ) Desc LIMIT value",
        -12.370040893554688
      ],
      [
        "SELECT T2.Name , Count ( * ) , T1.Course FROM course AS T1 JOIN teacher AS T2 JOIN course_arrange AS T3 ON T1.Course_ID = T3.Course_ID AND T3.Teacher_ID = T2.Teacher_ID AND T1.Course_ID = T3.Course_ID GROUP BY T3.Teacher_ID",
        -12.388189315795898
      ],
      [
        "SELECT Name , Count ( * ) FROM teacher",
        -12.542096138000488
      ],
      [
        "SELECT T1.Name , Count ( T2.Course_ID ) FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Teacher_ID",
        -12.788335800170898
      ],
      [
        "SELECT T2.Name , Count ( DISTINCT T1.Course ) FROM course AS T1 JOIN teacher AS T2 JOIN course_arrange AS T3 ON T1.Course_ID = T3.Course_ID AND T3.Teacher_ID = T2.Teacher_ID AND T1.Course_ID = T3.Course_ID GROUP BY T3.Teacher_ID",
        -13.124804496765137
      ],
      [
        "SELECT T2.Name , T1.Course FROM course AS T1 JOIN teacher AS T2 JOIN course_arrange AS T3 ON T1.Course_ID = T3.Course_ID AND T3.Teacher_ID = T2.Teacher_ID AND T1.Course_ID = T3.Course_ID GROUP BY T3.Teacher_ID",
        -13.222623586654663
      ],
      [
        "SELECT Name FROM teacher GROUP BY Name",
        -13.693881034851074
      ],
      [
        "SELECT T2.Name , Sum ( T1.Course ) FROM course AS T1 JOIN teacher AS T2 JOIN course_arrange AS T3 ON T1.Course_ID = T3.Course_ID AND T3.Teacher_ID = T2.Teacher_ID AND T1.Course_ID = T3.Course_ID GROUP BY T3.Teacher_ID",
        -13.890689969062805
      ],
      [
        "SELECT T1.Name FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Teacher_ID",
        -13.963711738586426
      ],
      [
        "SELECT T2.Name , Count ( * ) FROM course AS T1 JOIN teacher AS T2 JOIN course_arrange AS T3 ON T1.Course_ID = T3.Course_ID AND T3.Teacher_ID = T2.Teacher_ID GROUP BY T1.Course",
        -14.146953582763672
      ],
      [
        "SELECT T1.Name , Count ( * ) FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Course_ID",
        -14.150678634643555
      ],
      [
        "SELECT T1.Name , Count ( * ) FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Teacher_ID HAVING Count ( * ) = value",
        -14.50876522064209
      ],
      [
        "SELECT T1.Name , Count ( T2.Course_ID ) FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T1.Name",
        -14.977189064025879
      ],
      [
        "SELECT T2.Name , Count ( DISTINCT T1.Course ) FROM course AS T1 JOIN teacher AS T2 JOIN course_arrange AS T3 ON T1.Course_ID = T3.Course_ID AND T3.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name",
        -15.05100154876709
      ],
      [
        "SELECT Name , Count ( * ) FROM teacher GROUP BY Age",
        -15.08409595489502
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.Name , Count ( * ) FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Teacher_ID",
    "predicted_parse": "SELECT T1.Name , Count ( * ) FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Teacher_ID",
    "predicted_parse_explanation": [
      "Step 1: for each row in teacher table , find the corresponding rows in course arrange table",
      "Step 2: find each value of course arrange 's teacher id of the results of step 1 along with the number of the corresponding rows to each value"
    ],
    "template_feedback": "in step 2 , find for each value of name in place of course arrange 's teacher id .",
    "primary_span": [
      [
        4,
        9
      ]
    ],
    "secondary_span": [
      [
        10,
        18
      ]
    ],
    "edits": [
      "name",
      "teacher id"
    ],
    "edits_original": "< groupBy > add name </ groupBy > < groupBy > remove teacher id </ groupBy >"
  },
  {
    "db_id": "tvshow",
    "feedback": "Remove written by equals Ben Jones and\".",
    "question": "List all cartoon directed by \"Ben Jones\".",
    "gold_parse": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\"",
    "beam": [
      [
        "SELECT Title FROM Cartoon WHERE Written_by = value AND Directed_by = value",
        -0.60821533203125
      ],
      [
        "SELECT Title FROM Cartoon WHERE Written_by = value",
        -1.2551259994506836
      ],
      [
        "SELECT Title FROM Cartoon WHERE Directed_by = value",
        -1.9197607040405273
      ],
      [
        "SELECT Title FROM Cartoon WHERE Written_by = value AND Written_by = value",
        -4.427989959716797
      ],
      [
        "SELECT Title FROM Cartoon WHERE Directed_by = value AND Directed_by = value",
        -4.454753875732422
      ],
      [
        "SELECT Title FROM Cartoon WHERE Directed_by = value AND Written_by = value",
        -8.10714340209961
      ],
      [
        "SELECT Title FROM Cartoon WHERE Written_by = value AND Title = value",
        -9.872096061706543
      ],
      [
        "SELECT Title FROM Cartoon WHERE Written_by LIKE value",
        -12.28783130645752
      ],
      [
        "SELECT Title FROM Cartoon WHERE Directed_by = value AND Title = value",
        -13.448769569396973
      ],
      [
        "SELECT DISTINCT Title FROM Cartoon WHERE Written_by = value AND Directed_by = value",
        -13.509026527404785
      ],
      [
        "SELECT Title FROM Cartoon WHERE Directed_by < value",
        -13.752372741699219
      ],
      [
        "SELECT Title FROM Cartoon WHERE Written_by = value AND Directed_by LIKE value",
        -13.84053897857666
      ],
      [
        "SELECT DISTINCT Title FROM Cartoon WHERE Written_by = value",
        -13.842639923095703
      ],
      [
        "SELECT Title FROM Cartoon WHERE Directed_by LIKE value",
        -13.9996337890625
      ],
      [
        "SELECT Title FROM Cartoon WHERE Written_by = value AND Directed_by ! = value",
        -14.168614387512207
      ],
      [
        "SELECT Title FROM Cartoon WHERE Written_by < value",
        -14.334248542785645
      ],
      [
        "SELECT DISTINCT Title FROM Cartoon WHERE Directed_by = value",
        -14.443817138671875
      ],
      [
        "SELECT Title FROM Cartoon WHERE Directed_by BETWEEN value AND value",
        -14.966056823730469
      ],
      [
        "SELECT DISTINCT Title FROM Cartoon WHERE Written_by = value",
        -15.841971397399902
      ],
      [
        "SELECT Title FROM Cartoon WHERE Title > value",
        -16.212594985961914
      ]
    ],
    "predicted_parse_with_values": "SELECT Title FROM Cartoon WHERE Written_by = \"Ben Jones\" AND Directed_by = \"Ben Jones\"",
    "predicted_parse": "SELECT Title FROM Cartoon WHERE Written_by = value AND Directed_by = value",
    "predicted_parse_explanation": [
      "find the title in cartoon table whose written by equals Ben Jones and directed by equals Ben Jones"
    ],
    "template_feedback": "remove the written by equals Ben Jones conditions .",
    "primary_span": [
      [
        0,
        8
      ]
    ],
    "secondary_span": [],
    "edits": [
      "written by equals \"Ben Jones\""
    ],
    "edits_original": "< where > remove written by equals \" Ben Jones \" </ where >"
  },
  {
    "db_id": "car_1",
    "feedback": "Replace weight with horsepower , also find corresponding car names's make , and ensure cylinders equals 3",
    "question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?",
    "gold_parse": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1",
    "beam": [
      [
        "SELECT Max ( Weight ) FROM cars_data WHERE Cylinders = value",
        -0.6591243743896484
      ],
      [
        "SELECT Max ( Horsepower ) FROM cars_data WHERE Cylinders = value",
        -2.011240005493164
      ],
      [
        "SELECT Max ( T3.Horsepower ) FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T1.Model = value",
        -2.609927177429199
      ],
      [
        "SELECT Max ( T3.Weight ) FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T1.Model = value",
        -2.78360652923584
      ],
      [
        "SELECT Max ( Weight ) , Horsepower FROM cars_data WHERE Cylinders = value",
        -3.1283488273620605
      ],
      [
        "SELECT Max ( T3.Weight ) , T3.Horsepower FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T1.Model = value",
        -3.3648738861083984
      ],
      [
        "SELECT Max ( Weight ) , MPG FROM cars_data WHERE Cylinders = value",
        -4.003871440887451
      ],
      [
        "SELECT Max ( Horsepower ) , Horsepower FROM cars_data WHERE Cylinders = value",
        -4.162120580673218
      ],
      [
        "SELECT Max ( Weight ) , Cylinders FROM cars_data WHERE Cylinders = value",
        -4.418407201766968
      ],
      [
        "SELECT Max ( T3.Horsepower ) , T3.Horsepower FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T1.Model = value",
        -4.468210935592651
      ],
      [
        "SELECT Max ( Horsepower ) , MPG FROM cars_data WHERE Cylinders = value",
        -4.715700149536133
      ],
      [
        "SELECT Max ( Weight ) , Weight FROM cars_data WHERE Cylinders = value",
        -4.752024412155151
      ],
      [
        "SELECT Max ( T3.Weight ) , T3.Weight FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T1.Model = value",
        -4.808449983596802
      ],
      [
        "SELECT Max ( Horsepower ) , Cylinders FROM cars_data WHERE Cylinders = value",
        -5.396455764770508
      ],
      [
        "SELECT Max ( T3.Weight ) , T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T3.Cylinders = value",
        -5.426274299621582
      ],
      [
        "SELECT Max ( T3.Horsepower ) , T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T3.Cylinders = value",
        -5.464251279830933
      ],
      [
        "SELECT Max ( Weight ) FROM cars_data WHERE MPG = value",
        -5.721909523010254
      ],
      [
        "SELECT Max ( Horsepower ) , Weight FROM cars_data WHERE Cylinders = value",
        -5.831604480743408
      ],
      [
        "SELECT Max ( Weight ) , Accelerate FROM cars_data WHERE Cylinders = value",
        -5.849029302597046
      ],
      [
        "SELECT Max ( Horsepower ) FROM cars_data WHERE MPG = value",
        -6.562315940856934
      ]
    ],
    "predicted_parse_with_values": "SELECT Max ( Weight ) FROM cars_data WHERE Cylinders = 1",
    "predicted_parse": "SELECT Max ( Weight ) FROM cars_data WHERE Cylinders = value",
    "predicted_parse_explanation": [
      "find the maximum weight in cars data table whose cylinders equals 1"
    ],
    "template_feedback": "additionally use the information from the car names table besides the cars data table . consider the cylinders equals 3 conditions in place of the cylinders equals 1 conditions . find make and horsepower in place of maximum weight . find the result with the largest horsepower .",
    "primary_span": [
      [
        0,
        8
      ],
      [
        15,
        20
      ],
      [
        30,
        33
      ],
      [
        40,
        47
      ]
    ],
    "secondary_span": [
      [
        9,
        14
      ],
      [
        21,
        29
      ],
      [
        34,
        39
      ]
    ],
    "edits": [
      "horsepower",
      "make",
      "maximum weight",
      "car names",
      "cylinders equals 3",
      "cylinders equals 1",
      "horsepower",
      "descending",
      "1"
    ],
    "edits_original": "< select > add horsepower </ select > < select > add make </ select > < select > remove maximum weight </ select > < from > add car names </ from > < where > add cylinders equals 3 </ where > < where > remove cylinders equals 1 </ where > < orderBy > add horsepower </ orderBy > < orderBy > add descending </ orderBy > < limit > add 1 </ limit >"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "feedback": "Need to change template details with version number .",
    "question": "What is the version number and template type code for the template with version number later than 5?",
    "gold_parse": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5",
    "beam": [
      [
        "SELECT Template_Details , Template_Type_Code FROM Templates WHERE Version_Number > value",
        -0.7328243255615234
      ],
      [
        "SELECT Template_ID , Template_Type_Code FROM Templates WHERE Version_Number > value",
        -1.985093593597412
      ],
      [
        "SELECT * , Template_Type_Code FROM Templates WHERE Version_Number > value",
        -2.2887189388275146
      ],
      [
        "SELECT Template_Details , Template_Type_Code FROM Templates WHERE Date_Effective_To > value",
        -2.8902673721313477
      ],
      [
        "SELECT Template_Details , Template_Type_Code FROM Templates WHERE Version_Number < value",
        -2.9569177627563477
      ],
      [
        "SELECT Version_Number , Template_Type_Code FROM Templates WHERE Version_Number > value",
        -3.6024951934814453
      ],
      [
        "SELECT Template_ID , Template_Type_Code FROM Templates WHERE Date_Effective_To > value",
        -4.1439528465271
      ],
      [
        "SELECT Template_ID , Template_Type_Code FROM Templates WHERE Version_Number < value",
        -4.263329982757568
      ],
      [
        "SELECT T2.Document_Name , T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T1.Version_Number > value",
        -4.321505069732666
      ],
      [
        "SELECT * , Template_Type_Code FROM Templates WHERE Date_Effective_To > value",
        -4.453839063644409
      ],
      [
        "SELECT Template_Details , Template_Type_Code FROM Templates WHERE Date_Effective_To < value",
        -4.627850532531738
      ],
      [
        "SELECT T1.Template_Type_Description , T2.Template_Type_Code FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T2.Version_Number > value",
        -4.70829439163208
      ],
      [
        "SELECT * , Template_Type_Code FROM Templates WHERE Version_Number < value",
        -4.814226865768433
      ],
      [
        "SELECT T2.Document_Name , T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T1.Version_Number < value",
        -5.384113788604736
      ],
      [
        "SELECT Template_Type_Code , Template_Type_Code FROM Templates WHERE Version_Number > value",
        -5.413559913635254
      ],
      [
        "SELECT Template_Type_Code , Count ( * ) FROM Templates WHERE Version_Number > value",
        -5.418662071228027
      ],
      [
        "SELECT T2.Document_ID , T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T1.Version_Number > value",
        -5.539514064788818
      ],
      [
        "SELECT T1.Template_Details , T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T2.Template_ID HAVING Count ( * ) > value",
        -5.638607978820801
      ],
      [
        "SELECT Version_Number , Template_Type_Code FROM Templates WHERE Version_Number < value",
        -5.751047134399414
      ],
      [
        "SELECT Version_Number , Template_Type_Code FROM Templates WHERE Date_Effective_To > value",
        -5.777163505554199
      ]
    ],
    "predicted_parse_with_values": "SELECT Template_Details , Template_Type_Code FROM Templates WHERE Version_Number > 5",
    "predicted_parse": "SELECT Template_Details , Template_Type_Code FROM Templates WHERE Version_Number > value",
    "predicted_parse_explanation": [
      "find the template details and template type code in templates table whose version number greater than 5"
    ],
    "template_feedback": "find version number in place of template details .",
    "primary_span": [
      [
        0,
        2
      ]
    ],
    "secondary_span": [
      [
        3,
        8
      ]
    ],
    "edits": [
      "version number",
      "template details"
    ],
    "edits_original": "< select > add version number </ select > < select > remove template details </ select >"
  },
  {
    "db_id": "battle_death",
    "feedback": "use caused by ship id in step 2 instead of id",
    "question": "What is the ship id and name that caused most total injuries?",
    "gold_parse": "SELECT T2.id ,  T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
    "beam": [
      [
        "SELECT T1.id , T1.name FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id GROUP BY T2.id ORDER BY Sum ( T2.injured ) Desc LIMIT value",
        -0.03814983367919922
      ],
      [
        "SELECT T2.id , T1.name FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id GROUP BY T2.id ORDER BY Sum ( T2.injured ) Desc LIMIT value",
        -3.362544059753418
      ],
      [
        "SELECT T2.caused_by_ship_id , T1.name FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id GROUP BY T2.id ORDER BY Sum ( T2.injured ) Desc LIMIT value",
        -6.025937080383301
      ],
      [
        "SELECT T1.id , T1.name FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id GROUP BY T2.caused_by_ship_id ORDER BY Sum ( T2.injured ) Desc LIMIT value",
        -9.083398818969727
      ],
      [
        "SELECT T1.id , T1.name FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id GROUP BY T1.id ORDER BY Sum ( T2.injured ) Desc LIMIT value",
        -9.094120979309082
      ],
      [
        "SELECT T1.id , T1.name FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id GROUP BY T2.id ORDER BY Count ( * ) Desc LIMIT value",
        -10.688019752502441
      ],
      [
        "SELECT T1.id , T1.name FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id GROUP BY T2.id",
        -11.1514253616333
      ],
      [
        "SELECT id , Sum ( injured ) FROM death GROUP BY id ORDER BY Sum ( injured ) Desc LIMIT value",
        -11.211701393127441
      ],
      [
        "SELECT T2.id , Sum ( T1.name ) FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id GROUP BY T2.id ORDER BY Sum ( T2.injured ) Desc LIMIT value",
        -11.224089622497559
      ],
      [
        "SELECT T1.id , T1.name FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id GROUP BY T2.id ORDER BY Sum ( T2.injured ) Desc",
        -11.6438627243042
      ],
      [
        "SELECT T1.disposition_of_ship , T1.name FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id GROUP BY T2.id ORDER BY Sum ( T2.injured ) Desc LIMIT value",
        -11.908198356628418
      ],
      [
        "SELECT T2.id , T1.name FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id GROUP BY T2.caused_by_ship_id ORDER BY Sum ( T2.injured ) Desc LIMIT value",
        -12.420317649841309
      ],
      [
        "SELECT T2.id , T1.name FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id GROUP BY T1.id ORDER BY Sum ( T2.injured ) Desc LIMIT value",
        -12.431095123291016
      ],
      [
        "SELECT T1.id , T1.name FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id GROUP BY T2.id ORDER BY Avg ( T2.injured ) Desc LIMIT value",
        -12.512893676757812
      ],
      [
        "SELECT T2.killed , T1.name FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id GROUP BY T2.id ORDER BY Sum ( T2.injured ) Desc LIMIT value",
        -12.534457206726074
      ],
      [
        "SELECT T1.id , Sum ( T1.name ) FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id GROUP BY T2.id ORDER BY Sum ( T2.injured ) Desc LIMIT value",
        -12.665933609008789
      ],
      [
        "SELECT T1.id , T2.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle AND T1.id = T2.lost_in_battle JOIN death AS T3 ON T2.id = T3.caused_by_ship_id GROUP BY T3.id ORDER BY Sum ( T3.injured ) Desc LIMIT value",
        -12.68008804321289
      ],
      [
        "SELECT T2.id , T1.name FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id GROUP BY T2.id",
        -12.929976463317871
      ],
      [
        "SELECT T1.id , T1.name , Sum ( T2.injured ) FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id GROUP BY T2.id ORDER BY Sum ( T2.injured ) Desc LIMIT value",
        -13.25317096710205
      ],
      [
        "SELECT T1.id , T1.name FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id ORDER BY T2.injured Desc LIMIT value",
        -13.724791526794434
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.id , T1.name FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id GROUP BY T2.id ORDER BY Sum ( T2.injured ) Desc LIMIT 1",
    "predicted_parse": "SELECT T1.id , T1.name FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id GROUP BY T2.id ORDER BY Sum ( T2.injured ) Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: for each row in ship table , find the corresponding rows in death table",
      "Step 2: find the summation of injured of each value of death 's id of the results of step 1",
      "Step 3: find the ship 's id and name of the results of step 1 with largest value in the results of step 2"
    ],
    "template_feedback": "in step 2 , find for each value of ship 's id in place of death 's id . in step 3 , order the results by number of rows in place of summation of injured .",
    "primary_span": [
      [
        4,
        11
      ],
      [
        23,
        29
      ]
    ],
    "secondary_span": [
      [
        12,
        18
      ],
      [
        30,
        36
      ]
    ],
    "edits": [
      "number of rows",
      "summation of injured"
    ],
    "edits_original": "< orderBy > add number of rows </ orderBy > < orderBy > remove summation of injured </ orderBy >"
  },
  {
    "db_id": "world_1",
    "feedback": "Verify continent equals Asia .",
    "question": "Give the name of the country in Asia with the lowest life expectancy.",
    "gold_parse": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1",
    "beam": [
      [
        "SELECT Name FROM country ORDER BY LifeExpectancy Asc LIMIT value",
        -0.2004556655883789
      ],
      [
        "SELECT Name FROM country ORDER BY Population Asc LIMIT value",
        -2.429335594177246
      ],
      [
        "SELECT LocalName FROM country ORDER BY LifeExpectancy Asc LIMIT value",
        -2.5507936477661133
      ],
      [
        "SELECT LocalName FROM country ORDER BY Population Asc LIMIT value",
        -4.749067306518555
      ],
      [
        "SELECT Continent FROM country ORDER BY LifeExpectancy Asc LIMIT value",
        -5.398838996887207
      ],
      [
        "SELECT Name FROM country ORDER BY GNP Asc LIMIT value",
        -6.405946731567383
      ],
      [
        "SELECT Continent FROM country ORDER BY Population Asc LIMIT value",
        -7.646540641784668
      ],
      [
        "SELECT LocalName FROM country ORDER BY GNP Asc LIMIT value",
        -8.754417419433594
      ],
      [
        "SELECT Name , Continent FROM country ORDER BY LifeExpectancy Asc LIMIT value",
        -10.88553237915039
      ],
      [
        "SELECT Name FROM country ORDER BY GNPOld Asc LIMIT value",
        -11.484134674072266
      ],
      [
        "SELECT Continent FROM country ORDER BY GNP Asc LIMIT value",
        -11.685044288635254
      ],
      [
        "SELECT Name FROM country ORDER BY LifeExpectancy Asc",
        -12.821892738342285
      ],
      [
        "SELECT Name , Continent FROM country ORDER BY Population Asc LIMIT value",
        -13.08089828491211
      ],
      [
        "SELECT Name FROM country WHERE LifeExpectancy = ( SELECT Min ( LifeExpectancy ) FROM country )",
        -13.50635051727295
      ],
      [
        "SELECT Name FROM country WHERE LifeExpectancy = ( SELECT Min ( LifeExpectancy ) FROM country ) ORDER BY LifeExpectancy Asc LIMIT value",
        -13.653160095214844
      ],
      [
        "SELECT Name FROM country WHERE Population = ( SELECT Min ( LifeExpectancy ) FROM country ) ORDER BY LifeExpectancy Asc LIMIT value",
        -13.692178726196289
      ],
      [
        "SELECT LocalName FROM country ORDER BY GNPOld Asc LIMIT value",
        -13.863727569580078
      ],
      [
        "SELECT Name FROM country WHERE Population = ( SELECT Min ( LifeExpectancy ) FROM country )",
        -13.905994415283203
      ],
      [
        "SELECT Name FROM country",
        -15.101839065551758
      ],
      [
        "SELECT LocalName FROM country",
        -16.984399795532227
      ]
    ],
    "predicted_parse_with_values": "SELECT Name FROM country ORDER BY LifeExpectancy Asc LIMIT 1",
    "predicted_parse": "SELECT Name FROM country ORDER BY LifeExpectancy Asc LIMIT value",
    "predicted_parse_explanation": [
      "find the name in country table with smallest value of life expectancy"
    ],
    "template_feedback": "additionally make sure that continent equals Asia .",
    "primary_span": [
      [
        0,
        7
      ]
    ],
    "secondary_span": [],
    "edits": [
      "continent equals \"Asia\""
    ],
    "edits_original": "< where > add continent equals \" Asia \" </ where >"
  },
  {
    "db_id": "student_transcripts_tracking",
    "feedback": "Search Students'first name whose cell mobile number equals 09700166582 or country equals Haiti , ensure that student lives permanently there .",
    "question": "Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582.",
    "gold_parse": "SELECT T1.first_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.permanent_address_id  =  T2.address_id WHERE T2.country  =  'Haiti' UNION SELECT first_name FROM Students WHERE cell_mobile_number  =  '09700166582'",
    "beam": [
      [
        "SELECT T2.first_name FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id WHERE T1.country = value OR T2.cell_mobile_number = value UNION SELECT T2.first_name FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id WHERE T1.country = value OR T2.cell_mobile_number = value",
        -1.3722562789916992
      ],
      [
        "SELECT T1.first_name FROM Students AS T1 WHERE T1.cell_mobile_number = value OR T1.cell_mobile_number = value UNION SELECT T1.first_name FROM Addresses AS T2 JOIN Students AS T1 ON T2.address_id = T1.current_address_id WHERE T2.country = value OR T1.cell_mobile_number = value",
        -1.7015533447265625
      ],
      [
        "SELECT T2.first_name FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id WHERE T1.country = value OR T2.cell_mobile_number = value UNION SELECT T2.first_name FROM Students AS T2 WHERE T2.cell_mobile_number = value OR T2.cell_mobile_number = value",
        -1.8436002731323242
      ],
      [
        "SELECT first_name FROM Students WHERE cell_mobile_number = value OR cell_mobile_number = value UNION SELECT first_name FROM Students WHERE cell_mobile_number = value OR cell_mobile_number = value",
        -2.1509742736816406
      ],
      [
        "SELECT first_name FROM Students WHERE cell_mobile_number = value OR cell_mobile_number = value",
        -2.16372013092041
      ],
      [
        "SELECT T2.first_name FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id WHERE T1.country = value OR T2.cell_mobile_number = value",
        -2.2833824157714844
      ],
      [
        "SELECT T1.first_name FROM Students AS T1 WHERE T1.cell_mobile_number = value OR T1.cell_mobile_number = value EXCEPT SELECT T1.first_name FROM Addresses AS T2 JOIN Students AS T1 ON T2.address_id = T1.current_address_id WHERE T2.country = value OR T1.cell_mobile_number = value",
        -4.225672721862793
      ],
      [
        "SELECT T2.first_name FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id WHERE T1.country = value OR T2.cell_mobile_number = value EXCEPT SELECT T2.first_name FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id WHERE T1.country = value OR T2.cell_mobile_number = value",
        -4.390419960021973
      ],
      [
        "SELECT first_name FROM Students WHERE cell_mobile_number = value OR cell_mobile_number = value EXCEPT SELECT first_name FROM Students WHERE cell_mobile_number = value OR cell_mobile_number = value",
        -4.636853218078613
      ],
      [
        "SELECT T2.first_name FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id WHERE T1.country = value OR T2.cell_mobile_number = value EXCEPT SELECT T2.first_name FROM Students AS T2 WHERE T2.cell_mobile_number = value OR T2.cell_mobile_number = value",
        -4.818543434143066
      ],
      [
        "SELECT T1.first_name FROM Students AS T1 WHERE T1.cell_mobile_number = value UNION SELECT T1.first_name FROM Addresses AS T2 JOIN Students AS T1 ON T2.address_id = T1.current_address_id WHERE T2.country = value OR T1.cell_mobile_number = value",
        -6.314630508422852
      ],
      [
        "SELECT T2.first_name FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id WHERE T1.country = value OR T2.cell_mobile_number = value UNION SELECT T2.first_name FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id WHERE T2.cell_mobile_number = value OR T1.country = value",
        -6.419241905212402
      ],
      [
        "SELECT T2.first_name FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id WHERE T1.country = value OR T2.cell_mobile_number = value ORDER BY T2.first_name Desc LIMIT value",
        -6.523842811584473
      ],
      [
        "SELECT first_name FROM Students WHERE cell_mobile_number = value OR cell_mobile_number = value UNION SELECT first_name FROM Students WHERE cell_mobile_number = value",
        -6.5345458984375
      ],
      [
        "SELECT T2.first_name FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id WHERE T2.cell_mobile_number = value OR T1.country = value",
        -6.55194091796875
      ],
      [
        "SELECT T2.first_name FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id WHERE T1.country = value UNION SELECT T2.first_name FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id WHERE T1.country = value OR T2.cell_mobile_number = value",
        -6.651431083679199
      ],
      [
        "SELECT first_name FROM Students WHERE cell_mobile_number = value UNION SELECT first_name FROM Students WHERE cell_mobile_number = value OR cell_mobile_number = value",
        -6.694514274597168
      ],
      [
        "SELECT first_name FROM Students WHERE cell_mobile_number = value OR cell_mobile_number = value ORDER BY first_name Desc LIMIT value",
        -6.882180690765381
      ],
      [
        "SELECT T2.first_name FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id WHERE T1.country = value OR T2.cell_mobile_number = value ORDER BY * Desc LIMIT value",
        -8.623198986053467
      ],
      [
        "SELECT DISTINCT first_name FROM Students WHERE cell_mobile_number = value OR cell_mobile_number = value",
        -9.065980911254883
      ]
    ],
    "predicted_parse_with_values": "SELECT T2.first_name FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id WHERE T1.country = \"Iceland\" OR T2.cell_mobile_number = \"(096)889-8954x524\" UNION SELECT T2.first_name FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id WHERE T1.country = 09700166582 OR T2.cell_mobile_number = \"Haiti\"",
    "predicted_parse": "SELECT T2.first_name FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id WHERE T1.country = value OR T2.cell_mobile_number = value UNION SELECT T2.first_name FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id WHERE T1.country = value OR T2.cell_mobile_number = value",
    "predicted_parse_explanation": [
      "Step 1: for each row in addresses table , find the corresponding rows in students table",
      "Step 2: find the first name of the results of step 1 whose country equals Iceland or cell mobile number equals ( 096 ) 889-8954x524",
      "Step 3: for each row in addresses table , find the corresponding rows in students table",
      "Step 4: find the first name of the results of step 3 whose country equals 9700166582 or cell mobile number equals Haiti",
      "Step 5: show the rows that are in any of the results of step 2 and step 4"
    ],
    "template_feedback": "in step 2 , consider the country equals Haiti conditions in place of the cell mobile number equals ( 096 ) 889-8954x524 or country equals Iceland conditions . in step 3 , do not use the addresses table . in step 4 , consider the cell mobile number equals 09700166582 conditions in place of the country equals 9700166582 or cell mobile number equals Haiti conditions .",
    "primary_span": [
      [
        4,
        9
      ],
      [
        32,
        38
      ],
      [
        43,
        50
      ]
    ],
    "secondary_span": [
      [
        10,
        27
      ],
      [
        32,
        38
      ],
      [
        51,
        65
      ]
    ],
    "edits": [
      "country equals \"Haiti\"",
      "country equals \"Iceland\" or cell mobile number equals \"(096)889-8954x524\"",
      "addresses",
      "cell mobile number equals \"09700166582\"",
      "country equals 9700166582 or cell mobile number equals \"Haiti\""
    ],
    "edits_original": "< where > add country equals \" Haiti \" </ where > < where > remove country equals \" Iceland \" or cell mobile number equals \" ( 096 ) 889-8954x524 \" </ where > < from > remove addresses </ from > < where > add cell mobile number equals \" 09700166582 \" </ where > < where > remove country equals 9700166582 or cell mobile number equals \" Haiti \" </ where >"
  },
  {
    "db_id": "flight_2",
    "feedback": "i want every single value from flights table of source airport for which aberdeen is city.",
    "question": "Return the number of flights departing from Aberdeen.",
    "gold_parse": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
    "beam": [
      [
        "SELECT Count ( * ) FROM airports WHERE AirportName = value",
        -0.5530843734741211
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE City = value",
        -0.8685359954833984
      ],
      [
        "SELECT Count ( DISTINCT T2.FlightNo ) FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.AirportName = value",
        -5.812397003173828
      ],
      [
        "SELECT Count ( DISTINCT T2.FlightNo ) FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.City = value",
        -6.232259750366211
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE AirportName = value AND City = value",
        -8.362846374511719
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE Country = value",
        -10.809883117675781
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE City = value AND City = value",
        -11.455645561218262
      ],
      [
        "SELECT T2.FlightNo FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.City = value",
        -11.5651216506958
      ],
      [
        "SELECT Count ( T2.FlightNo ) FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.AirportName = value",
        -11.724117279052734
      ],
      [
        "SELECT T2.FlightNo FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.AirportName = value",
        -11.767508506774902
      ],
      [
        "SELECT Count ( T2.FlightNo ) FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.City = value",
        -11.844104766845703
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE AirportName = value AND AirportName = value",
        -13.415326118469238
      ],
      [
        "SELECT Count ( * ) FROM airlines WHERE Country = value",
        -14.302447319030762
      ],
      [
        "SELECT Avg ( T2.FlightNo ) FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.City = value",
        -14.600997924804688
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE CountryAbbrev = value",
        -14.613422393798828
      ],
      [
        "SELECT Count ( * ) FROM airlines WHERE Airline = value",
        -14.783849716186523
      ],
      [
        "SELECT Avg ( T2.FlightNo ) FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.AirportName = value",
        -15.349220275878906
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM airports WHERE AirportName = value",
        -15.591076850891113
      ],
      [
        "SELECT Count ( DISTINCT T2.FlightNo ) FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.Country = value",
        -15.718374252319336
      ],
      [
        "SELECT Count ( * ) FROM airlines",
        -18.12453842163086
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM airports WHERE AirportName = \"Aberdeen\"",
    "predicted_parse": "SELECT Count ( * ) FROM airports WHERE AirportName = value",
    "predicted_parse_explanation": [
      "find the number of rows in airports table whose airport name equals Aberdeen"
    ],
    "template_feedback": "additionally use the information from the flights table besides the airports table . consider the city equals Aberdeen conditions in place of the airport name equals Aberdeen conditions .",
    "primary_span": [
      [
        0,
        7
      ],
      [
        13,
        18
      ]
    ],
    "secondary_span": [
      [
        8,
        12
      ],
      [
        19,
        28
      ]
    ],
    "edits": [
      "flights",
      "city equals \"Aberdeen\"",
      "airport name equals \"Aberdeen\""
    ],
    "edits_original": "< from > add flights </ from > < where > add city equals \" Aberdeen \" </ where > < where > remove airport name equals \" Aberdeen \" </ where >"
  },
  {
    "db_id": "world_1",
    "feedback": "No need to find continent so exchange it with head of state .",
    "question": "Give the name, population, and head of state for the country that has the largest area.",
    "gold_parse": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",
    "beam": [
      [
        "SELECT Name , Population , Continent FROM country ORDER BY SurfaceArea Desc LIMIT value",
        -0.6074542999267578
      ],
      [
        "SELECT Name , LifeExpectancy , Continent FROM country ORDER BY SurfaceArea Desc LIMIT value",
        -0.7963085174560547
      ],
      [
        "SELECT LocalName , Population , Continent FROM country ORDER BY SurfaceArea Desc LIMIT value",
        -6.4282073974609375
      ],
      [
        "SELECT LocalName , LifeExpectancy , Continent FROM country ORDER BY SurfaceArea Desc LIMIT value",
        -6.60356330871582
      ],
      [
        "SELECT Name , Population , Region FROM country ORDER BY SurfaceArea Desc LIMIT value",
        -8.305346488952637
      ],
      [
        "SELECT Name , Population , HeadOfState FROM country ORDER BY SurfaceArea Desc LIMIT value",
        -8.463369369506836
      ],
      [
        "SELECT Name , LifeExpectancy , Region FROM country ORDER BY SurfaceArea Desc LIMIT value",
        -8.527904510498047
      ],
      [
        "SELECT Name , Population , SurfaceArea FROM country ORDER BY SurfaceArea Desc LIMIT value",
        -8.613631248474121
      ],
      [
        "SELECT Name , LifeExpectancy , HeadOfState FROM country ORDER BY SurfaceArea Desc LIMIT value",
        -8.646684646606445
      ],
      [
        "SELECT Name , LifeExpectancy , SurfaceArea FROM country ORDER BY SurfaceArea Desc LIMIT value",
        -8.931049346923828
      ],
      [
        "SELECT Name , Population , Population FROM country ORDER BY SurfaceArea Desc LIMIT value",
        -11.114995956420898
      ],
      [
        "SELECT Name , Population , Continent FROM country WHERE SurfaceArea = ( SELECT Max ( SurfaceArea ) FROM country ) ORDER BY SurfaceArea Desc LIMIT value",
        -11.137145042419434
      ],
      [
        "SELECT Name , LifeExpectancy , Population FROM country ORDER BY SurfaceArea Desc LIMIT value",
        -11.231160163879395
      ],
      [
        "SELECT Name , Population , LifeExpectancy FROM country ORDER BY SurfaceArea Desc LIMIT value",
        -11.233232498168945
      ],
      [
        "SELECT Name , LifeExpectancy , Continent FROM country WHERE SurfaceArea = ( SELECT Max ( SurfaceArea ) FROM country ) ORDER BY SurfaceArea Desc LIMIT value",
        -11.320823669433594
      ],
      [
        "SELECT Name , LifeExpectancy , LifeExpectancy FROM country ORDER BY SurfaceArea Desc LIMIT value",
        -11.34316349029541
      ],
      [
        "SELECT Name , Max ( Population ) , Continent FROM country ORDER BY SurfaceArea Desc LIMIT value",
        -12.122625350952148
      ],
      [
        "SELECT Name , Population , Continent FROM country WHERE SurfaceArea = ( SELECT Max ( SurfaceArea ) FROM country )",
        -12.211287498474121
      ],
      [
        "SELECT Name , Population , GovernmentForm FROM country ORDER BY SurfaceArea Desc LIMIT value",
        -12.254467010498047
      ],
      [
        "SELECT Name , Max ( LifeExpectancy ) , Continent FROM country ORDER BY SurfaceArea Desc LIMIT value",
        -12.316129684448242
      ]
    ],
    "predicted_parse_with_values": "SELECT Name , Population , Continent FROM country ORDER BY SurfaceArea Desc LIMIT 1",
    "predicted_parse": "SELECT Name , Population , Continent FROM country ORDER BY SurfaceArea Desc LIMIT value",
    "predicted_parse_explanation": [
      "find the name , population , continent in country table with largest value of surface area"
    ],
    "template_feedback": "find head of state in place of continent .",
    "primary_span": [
      [
        0,
        3
      ]
    ],
    "secondary_span": [
      [
        4,
        8
      ]
    ],
    "edits": [
      "head of state",
      "continent"
    ],
    "edits_original": "< select > add head of state </ select > < select > remove continent </ select >"
  },
  {
    "db_id": "dog_kennels",
    "feedback": "Change charge amount in charges with cost of treatment of treatments in step 1 and charge amount with Treatments's cost of treatment in step 3.",
    "question": "What are the first name and last name of the professionals who have done treatment with cost below average?",
    "gold_parse": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )",
    "beam": [
      [
        "SELECT T2.first_name , T2.last_name FROM Charges AS T1 JOIN Professionals AS T2 WHERE T1.charge_amount < ( SELECT Avg ( T1.charge_amount ) FROM Charges AS T1 )",
        -1.381089210510254
      ],
      [
        "SELECT T2.first_name , T3.last_name FROM Charges AS T1 JOIN Owners AS T2 JOIN Professionals AS T3 WHERE T1.charge_amount < ( SELECT Avg ( T1.charge_amount ) FROM Charges AS T1 )",
        -1.7280550003051758
      ],
      [
        "SELECT T3.first_name , T2.last_name FROM Charges AS T1 JOIN Owners AS T2 JOIN Professionals AS T3 WHERE T1.charge_amount < ( SELECT Avg ( T1.charge_amount ) FROM Charges AS T1 )",
        -1.8406667709350586
      ],
      [
        "SELECT T2.first_name , T2.last_name FROM Charges AS T1 JOIN Owners AS T2 WHERE T1.charge_amount < ( SELECT Avg ( T1.charge_amount ) FROM Charges AS T1 )",
        -2.1787824630737305
      ],
      [
        "SELECT T2.first_name , T2.last_name FROM Charges AS T1 JOIN Professionals AS T2 WHERE T1.charge_amount > ( SELECT Avg ( T1.charge_amount ) FROM Charges AS T1 )",
        -2.224371910095215
      ],
      [
        "SELECT T3.first_name , T2.last_name FROM Charges AS T1 JOIN Owners AS T2 JOIN Professionals AS T3 WHERE T1.charge_amount > ( SELECT Avg ( T1.charge_amount ) FROM Charges AS T1 )",
        -2.5908679962158203
      ],
      [
        "SELECT T2.first_name , T3.last_name FROM Charges AS T1 JOIN Owners AS T2 JOIN Professionals AS T3 WHERE T1.charge_amount > ( SELECT Avg ( T1.charge_amount ) FROM Charges AS T1 )",
        -2.686032295227051
      ],
      [
        "SELECT T2.first_name , T2.last_name FROM Charges AS T1 JOIN Owners AS T2 WHERE T1.charge_amount > ( SELECT Avg ( T1.charge_amount ) FROM Charges AS T1 )",
        -3.041166305541992
      ],
      [
        "SELECT T2.first_name , T2.last_name FROM Charges AS T1 JOIN Professionals AS T2 WHERE T1.charge_amount < ( SELECT Avg ( T3.cost_of_treatment ) FROM Treatments AS T3 )",
        -11.195589065551758
      ],
      [
        "SELECT T2.first_name , T3.last_name FROM Charges AS T1 JOIN Owners AS T2 JOIN Professionals AS T3 WHERE T1.charge_amount < ( SELECT Avg ( T4.cost_of_treatment ) FROM Treatments AS T4 )",
        -11.543061256408691
      ],
      [
        "SELECT T3.first_name , T2.last_name FROM Charges AS T1 JOIN Owners AS T2 JOIN Professionals AS T3 WHERE T1.charge_amount < ( SELECT Avg ( T4.cost_of_treatment ) FROM Treatments AS T4 )",
        -11.656083106994629
      ],
      [
        "SELECT T2.first_name , T2.last_name FROM Charges AS T1 JOIN Owners AS T2 WHERE T1.charge_amount < ( SELECT Avg ( T3.cost_of_treatment ) FROM Treatments AS T3 )",
        -11.994612693786621
      ],
      [
        "SELECT T2.first_name , T2.last_name FROM Charges AS T1 JOIN Professionals AS T2 WHERE T1.charge_amount > ( SELECT Avg ( T3.cost_of_treatment ) FROM Treatments AS T3 )",
        -12.143293380737305
      ],
      [
        "SELECT first_name , last_name FROM Professionals WHERE first_name LIKE value",
        -12.151261329650879
      ],
      [
        "SELECT T3.first_name , T2.last_name FROM Charges AS T1 JOIN Owners AS T2 JOIN Professionals AS T3 WHERE T1.charge_amount > ( SELECT Avg ( T4.cost_of_treatment ) FROM Treatments AS T4 )",
        -12.507469177246094
      ],
      [
        "SELECT T2.first_name , T2.last_name FROM Charges AS T1 JOIN Professionals AS T2 WHERE T1.charge_amount = ( SELECT Avg ( T1.charge_amount ) FROM Charges AS T1 )",
        -12.531431198120117
      ],
      [
        "SELECT T1.first_name , T3.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id WHERE T3.first_name LIKE value",
        -12.55562686920166
      ],
      [
        "SELECT T2.first_name , T3.last_name FROM Charges AS T1 JOIN Owners AS T2 JOIN Professionals AS T3 WHERE T1.charge_amount > ( SELECT Avg ( T4.cost_of_treatment ) FROM Treatments AS T4 )",
        -12.603571891784668
      ],
      [
        "SELECT T3.first_name , T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id WHERE T3.first_name LIKE value",
        -12.652848243713379
      ],
      [
        "SELECT T3.first_name , T3.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id WHERE T1.first_name LIKE value",
        -12.94779920578003
      ]
    ],
    "predicted_parse_with_values": "SELECT T2.first_name , T2.last_name FROM Charges AS T1 JOIN Professionals AS T2 WHERE T1.charge_amount < ( SELECT Avg ( T1.charge_amount ) FROM Charges AS T1 )",
    "predicted_parse": "SELECT T2.first_name , T2.last_name FROM Charges AS T1 JOIN Professionals AS T2 WHERE T1.charge_amount < ( SELECT Avg ( T1.charge_amount ) FROM Charges AS T1 )",
    "predicted_parse_explanation": [
      "Step 1: for each row in charges table , find the corresponding rows in professionals table",
      "Step 2: find the average charge amount in charges table",
      "Step 3: find the first name and last name of the results of step 1 whose charge amount less than the results of step 2"
    ],
    "template_feedback": "in step 1 , use treatments table in place of charges table in step 2 , use treatments table in place of charges table . find average cost of treatment in place of average charge amount . in step 3 , make sure the cost of treatment is less than the results of step 2 the charge amount is less than the results of step 2 . make sure no repetition in the results .",
    "primary_span": [
      [
        4,
        6
      ],
      [
        16,
        18
      ],
      [
        25,
        29
      ],
      [
        41,
        54
      ],
      [
        67,
        74
      ]
    ],
    "secondary_span": [
      [
        7,
        11
      ],
      [
        19,
        24
      ],
      [
        30,
        36
      ],
      [
        55,
        66
      ]
    ],
    "edits": [
      "distinct",
      "treatments",
      "charges",
      "cost of treatment less than SUBS1",
      "charge amount less than SUBS1",
      "average cost of treatment",
      "average charge amount",
      "treatments",
      "charges"
    ],
    "edits_original": "< select > add distinct </ select > < from > add treatments </ from > < from > remove charges </ from > < where > add cost of treatment less than SUBS1 </ where > < where > remove charge amount less than SUBS1 </ where > < select > add average cost of treatment </ select > < select > remove average charge amount </ select > < from > add treatments </ from > < from > remove charges </ from >"
  },
  {
    "db_id": "dog_kennels",
    "feedback": "Replace owner id with corresponding Dogs's size code .",
    "question": "List each owner's first name, last name, and the size of his for her dog.",
    "gold_parse": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
    "beam": [
      [
        "SELECT first_name , last_name , owner_id FROM Owners",
        -0.37257981300354004
      ],
      [
        "SELECT T2.first_name , T2.last_name , T1.size_description FROM Sizes AS T1 JOIN Owners AS T2 JOIN Dogs AS T3 ON T1.size_code = T3.size_code AND T3.owner_id = T2.owner_id",
        -2.2268924713134766
      ],
      [
        "SELECT T1.first_name , T1.last_name , T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id",
        -2.6698830127716064
      ],
      [
        "SELECT T1.first_name , T1.last_name , T2.weight FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id",
        -2.9741320610046387
      ],
      [
        "SELECT T1.first_name , T1.last_name , T2.date_arrived FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id",
        -3.4558558464050293
      ],
      [
        "SELECT first_name , last_name , last_name FROM Owners",
        -4.713837623596191
      ],
      [
        "SELECT first_name , last_name , email_address FROM Owners",
        -5.023961067199707
      ],
      [
        "SELECT T1.first_name , T1.last_name , T2.age FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id",
        -5.024929046630859
      ],
      [
        "SELECT T1.first_name , T1.last_name , T2.owner_id FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id",
        -5.038558006286621
      ],
      [
        "SELECT T1.first_name , T1.last_name , T2.date_departed FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id",
        -5.104834079742432
      ],
      [
        "SELECT first_name , last_name , home_phone FROM Owners",
        -6.12045431137085
      ],
      [
        "SELECT T2.first_name , T2.last_name , T1.charge_amount FROM Charges AS T1 JOIN Owners AS T2",
        -6.169778823852539
      ],
      [
        "SELECT T1.first_name , T1.last_name , T2.date_of_birth FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id",
        -6.651175498962402
      ],
      [
        "SELECT first_name , last_name , city FROM Owners",
        -6.651595592498779
      ],
      [
        "SELECT first_name , last_name , cell_number FROM Owners",
        -6.709595680236816
      ],
      [
        "SELECT T1.first_name , T1.last_name , T3.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id",
        -6.7572479248046875
      ],
      [
        "SELECT T2.first_name , T2.last_name , T1.treatment_type_description FROM Treatment_Types AS T1 JOIN Owners AS T2 JOIN Dogs AS T3 ON T3.owner_id = T2.owner_id JOIN Treatments AS T4 ON T1.treatment_type_code = T4.treatment_type_code AND T4.dog_id = T3.dog_id",
        -6.831467628479004
      ],
      [
        "SELECT first_name , last_name , state FROM Owners",
        -6.926563262939453
      ],
      [
        "SELECT first_name , last_name , street FROM Owners",
        -7.287389755249023
      ],
      [
        "SELECT first_name , last_name FROM Owners",
        -12.770344734191895
      ]
    ],
    "predicted_parse_with_values": "SELECT first_name , last_name , owner_id FROM Owners",
    "predicted_parse": "SELECT first_name , last_name , owner_id FROM Owners",
    "predicted_parse_explanation": [
      "find the first name , last name , owner id in owners table"
    ],
    "template_feedback": "additionally use the information from the dogs table besides the owners table . find size code in place of owners 's owner id .",
    "primary_span": [
      [
        0,
        7
      ],
      [
        13,
        15
      ]
    ],
    "secondary_span": [
      [
        8,
        12
      ],
      [
        16,
        23
      ]
    ],
    "edits": [
      "size code",
      "owner id",
      "dogs"
    ],
    "edits_original": "< select > add size code </ select > < select > remove owner id </ select > < from > add dogs </ from >"
  },
  {
    "db_id": "tvshow",
    "feedback": "We need to determine the country which is not written by Todd Casey.",
    "question": "What are the countries that are not playing cartoons written by Todd Casey?",
    "gold_parse": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
    "beam": [
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value EXCEPT SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value AND T2.Directed_by = value",
        -0.8998918533325195
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value EXCEPT SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value",
        -1.1818952560424805
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value EXCEPT SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = value",
        -2.092599868774414
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value EXCEPT SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value AND T2.Written_by = value",
        -2.929729461669922
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = value EXCEPT SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value AND T2.Directed_by = value",
        -3.27889347076416
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = value EXCEPT SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value",
        -3.496706008911133
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value EXCEPT SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = value AND T2.Directed_by = value",
        -4.064809799194336
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = value EXCEPT SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = value",
        -4.439749717712402
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 EXCEPT SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value AND T2.Directed_by = value",
        -7.862865447998047
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 EXCEPT SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value",
        -8.98000431060791
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 EXCEPT SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value AND T2.Written_by = value",
        -9.22720718383789
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value AND T2.Directed_by = value",
        -9.778803825378418
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value EXCEPT SELECT T1.Country FROM TV_Channel AS T1 WHERE T1.Language = value",
        -10.240026473999023
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 EXCEPT SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = value",
        -10.357132911682129
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value AND T2.Written_by = value",
        -11.192744255065918
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 EXCEPT SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = value AND T2.Directed_by = value",
        -11.199337005615234
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value EXCEPT SELECT T1.Country FROM TV_Channel AS T1 WHERE T1.series_name = value",
        -11.46147632598877
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value EXCEPT SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by ! = value",
        -11.624960899353027
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by ! = value ORDER BY T1.Country Asc",
        -12.703563928604126
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value ORDER BY T1.Country Asc",
        -13.833820819854736
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = \"Michael Jelenic\" EXCEPT SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = \"Todd Casey\" AND T2.Directed_by = \"Ben Jones\"",
    "predicted_parse": "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value EXCEPT SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value AND T2.Directed_by = value",
    "predicted_parse_explanation": [
      "Step 1: for each row in tv channel table , find the corresponding rows in cartoon table",
      "Step 2: find the country of the results of step 1 whose written by equals Michael Jelenic",
      "Step 3: for each row in tv channel table , find the corresponding rows in cartoon table",
      "Step 4: find the country of the results of step 3 whose written by equals Todd Casey and directed by equals Ben Jones",
      "Step 5: show the rows that are in the results of step 2 but not in the results of step 4"
    ],
    "template_feedback": "in step 1 , do not use the cartoon table . in step 2 , remove the written by equals Michael Jelenic conditions . in step 4 , remove the directed by equals Ben Jones conditions .",
    "primary_span": [
      [
        4,
        10
      ],
      [
        15,
        23
      ],
      [
        28,
        36
      ]
    ],
    "secondary_span": [
      [
        4,
        10
      ]
    ],
    "edits": [
      "cartoon",
      "written by equals \"Michael Jelenic\"",
      "directed by equals \"Ben Jones\""
    ],
    "edits_original": "< from > remove cartoon </ from > < where > remove written by equals \" Michael Jelenic \" </ where > < where > remove directed by equals \" Ben Jones \" </ where >"
  },
  {
    "db_id": "pets_1",
    "feedback": "in step 2, the student id should only be dogs.",
    "question": "Find the first name and age of students who have a dog but do not have a cat as a pet.",
    "gold_parse": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
    "beam": [
      [
        "SELECT T1.Fname , T1.Age FROM Student AS T1 WHERE T1.StuID NOT IN ( SELECT T2.StuID FROM Has_Pet AS T2 )",
        -0.05328655242919922
      ],
      [
        "SELECT T1.Fname , T1.Age FROM Student AS T1 WHERE T1.StuID NOT IN ( SELECT T2.StuID FROM Has_Pet AS T2 JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value )",
        -3.028811454772949
      ],
      [
        "SELECT T1.Fname , T1.Age FROM Student AS T1 WHERE T1.StuID NOT IN ( SELECT T2.StuID FROM Has_Pet AS T2 WHERE T2.PetID = value )",
        -6.333865165710449
      ],
      [
        "SELECT T1.Fname , T1.Age FROM Student AS T1 WHERE T1.StuID NOT IN ( SELECT T2.StuID FROM Has_Pet AS T2 JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.weight = value )",
        -7.367266654968262
      ],
      [
        "SELECT Fname , Age FROM Student EXCEPT SELECT Fname , Age FROM Student",
        -7.435033798217773
      ],
      [
        "SELECT T1.Fname , T1.Age FROM Student AS T1 WHERE T1.StuID NOT IN ( SELECT T2.StuID FROM Has_Pet AS T2 JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.weight = ( SELECT T2.StuID FROM Has_Pet AS T2 ) )",
        -8.869776725769043
      ],
      [
        "SELECT T1.Fname , T1.Age FROM Student AS T1 WHERE T1.StuID NOT IN ( SELECT T2.StuID FROM Has_Pet AS T2 JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.weight = T2.StuID )",
        -9.730494499206543
      ],
      [
        "SELECT T1.Fname , T1.Age FROM Student AS T1 WHERE T1.StuID NOT IN ( SELECT T2.StuID FROM Has_Pet AS T2 INTERSECT SELECT T2.StuID FROM Has_Pet AS T2 )",
        -9.941800117492676
      ],
      [
        "SELECT T1.Fname , T1.Age FROM Student AS T1 WHERE T1.StuID NOT IN ( SELECT T2.StuID FROM Has_Pet AS T2 JOIN Pets AS T3 ON T2.PetID = T3.PetID ORDER BY T3.weight Asc LIMIT value )",
        -10.294093132019043
      ],
      [
        "SELECT T1.Fname , T1.Age FROM Student AS T1 WHERE T1.StuID NOT IN ( SELECT T2.weight FROM Pets AS T2 )",
        -10.309821128845215
      ],
      [
        "SELECT T1.Fname , T1.Age FROM Student AS T1 WHERE T1.StuID NOT IN ( SELECT T2.StuID FROM Has_Pet AS T2 JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.weight = T3.weight )",
        -10.399100303649902
      ],
      [
        "SELECT T1.Fname , T1.Age FROM Student AS T1 WHERE T1.StuID NOT IN ( SELECT T2.StuID FROM Has_Pet AS T2 EXCEPT SELECT T2.StuID FROM Has_Pet AS T2 )",
        -10.437135696411133
      ],
      [
        "SELECT T1.Fname , T1.Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value EXCEPT SELECT T1.Fname , T1.Age FROM Student AS T1",
        -10.699923515319824
      ],
      [
        "SELECT T1.Fname , T1.Age FROM Student AS T1 WHERE T1.StuID NOT IN ( SELECT T2.StuID FROM Has_Pet AS T2 ) EXCEPT SELECT T1.Fname , T1.Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value",
        -11.638463020324707
      ],
      [
        "SELECT T1.Fname , T1.Age FROM Student AS T1 WHERE T1.StuID NOT IN ( SELECT T2.PetID FROM Has_Pet AS T2 )",
        -11.646870613098145
      ],
      [
        "SELECT T1.Fname , T1.Age FROM Student AS T1 WHERE T1.StuID IN ( SELECT T2.StuID FROM Has_Pet AS T2 )",
        -11.801554679870605
      ],
      [
        "SELECT T1.Fname , T1.Age FROM Student AS T1 WHERE T1.StuID NOT IN ( SELECT T2.StuID FROM Has_Pet AS T2 GROUP BY T2.StuID ORDER BY Count ( * ) Asc LIMIT value )",
        -11.913585662841797
      ],
      [
        "SELECT DISTINCT T1.Fname , T1.Age FROM Student AS T1 WHERE T1.StuID NOT IN ( SELECT T2.StuID FROM Has_Pet AS T2 )",
        -13.09711742401123
      ],
      [
        "SELECT T1.Fname FROM Student AS T1 WHERE T1.StuID NOT IN ( SELECT T2.StuID FROM Has_Pet AS T2 JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value )",
        -13.223440170288086
      ],
      [
        "SELECT Fname , Age FROM Student",
        -14.446197509765625
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.Fname , T1.Age FROM Student AS T1 WHERE T1.StuID NOT IN ( SELECT T2.StuID FROM Has_Pet AS T2 )",
    "predicted_parse": "SELECT T1.Fname , T1.Age FROM Student AS T1 WHERE T1.StuID NOT IN ( SELECT T2.StuID FROM Has_Pet AS T2 )",
    "predicted_parse_explanation": [
      "Step 1: find the has pet 's student id in has pet table",
      "Step 2: find the first name and age in student table whose student 's student id not one of the results of step 1"
    ],
    "template_feedback": "in step 1 , additionally use the information from the student table and pets table besides the has pet table . additionally make sure that pet type equals cat . in step 2 , additionally use the information from the has pet table and pets table besides the student table . additionally make sure that pet type equals dog .",
    "primary_span": [
      [
        4,
        14
      ],
      [
        21,
        29
      ],
      [
        34,
        45
      ],
      [
        51,
        59
      ]
    ],
    "secondary_span": [
      [
        15,
        20
      ],
      [
        46,
        50
      ]
    ],
    "edits": [
      "has pet",
      "pets",
      "pet type equals \"dog\"",
      "student",
      "pets",
      "pet type equals \"cat\""
    ],
    "edits_original": "< from > add has pet </ from > < from > add pets </ from > < where > add pet type equals \" dog \" </ where > < from > add student </ from > < from > add pets </ from > < where > add pet type equals \" cat \" </ where >"
  },
  {
    "db_id": "poker_player",
    "feedback": "Use money rank in place of earnings.",
    "question": "Return the money rank of the poker player with the greatest height.",
    "gold_parse": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
    "beam": [
      [
        "SELECT T1.Earnings FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Height Desc LIMIT value",
        -0.24726486206054688
      ],
      [
        "SELECT T1.Money_Rank FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Height Desc LIMIT value",
        -1.5186042785644531
      ],
      [
        "SELECT T1.Earnings FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height = ( SELECT Max ( T2.Height ) FROM people AS T2 )",
        -11.37618637084961
      ],
      [
        "SELECT Money_Rank FROM poker_player ORDER BY Earnings Desc LIMIT value",
        -11.577454566955566
      ],
      [
        "SELECT T1.Earnings FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Height Desc",
        -12.26116943359375
      ],
      [
        "SELECT T1.Money_Rank FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height = ( SELECT Max ( T2.Height ) FROM people AS T2 )",
        -12.869980812072754
      ],
      [
        "SELECT Earnings FROM poker_player ORDER BY Earnings Desc LIMIT value",
        -12.974874496459961
      ],
      [
        "SELECT T1.Earnings FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Height Asc LIMIT value",
        -13.09126091003418
      ],
      [
        "SELECT T1.Money_Rank FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height = ( SELECT Max ( T2.Height ) FROM people AS T2 ) ORDER BY T2.Height Asc LIMIT value",
        -13.317530632019043
      ],
      [
        "SELECT T1.Money_Rank FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Height Desc",
        -13.525178909301758
      ],
      [
        "SELECT Earnings FROM poker_player",
        -13.605329513549805
      ],
      [
        "SELECT T1.Earnings FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height = ( SELECT Max ( T2.Height ) FROM people AS T2 ) ORDER BY T2.Height Asc LIMIT value",
        -13.726750373840332
      ],
      [
        "SELECT Max ( T1.Earnings ) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Height Desc LIMIT value",
        -14.248908996582031
      ],
      [
        "SELECT T1.Earnings , T1.Money_Rank FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Height Desc LIMIT value",
        -14.425285339355469
      ],
      [
        "SELECT T1.Money_Rank FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID GROUP BY T1.Money_Rank ORDER BY T2.Height Desc LIMIT value",
        -14.584079265594482
      ],
      [
        "SELECT T1.Earnings FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID GROUP BY T1.Money_Rank ORDER BY T2.Height Desc LIMIT value",
        -14.715793132781982
      ],
      [
        "SELECT Money_Rank FROM poker_player",
        -14.718562126159668
      ],
      [
        "SELECT T1.Money_Rank FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Height Asc LIMIT value",
        -14.756532669067383
      ],
      [
        "SELECT Max ( Earnings ) FROM poker_player",
        -14.80259895324707
      ],
      [
        "SELECT T1.Money_Rank FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height = ( SELECT Max ( T2.Height ) FROM people AS T2 ) ORDER BY T2.Height Desc LIMIT value",
        -15.104768753051758
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.Earnings FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Height Desc LIMIT 1",
    "predicted_parse": "SELECT T1.Earnings FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Height Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: for each row in poker player table , find the corresponding rows in people table",
      "Step 2: find the earnings of the results of step 1 with largest value of height"
    ],
    "template_feedback": "in step 2 , find money rank in place of earnings .",
    "primary_span": [
      [
        4,
        6
      ]
    ],
    "secondary_span": [
      [
        7,
        11
      ]
    ],
    "edits": [
      "money rank",
      "earnings"
    ],
    "edits_original": "< select > add money rank </ select > < select > remove earnings </ select >"
  },
  {
    "db_id": "car_1",
    "feedback": "confirm that the year is 1974 and cylinders is 8.",
    "question": "What is the smallest weight of the car produced with 8 cylinders on 1974?",
    "gold_parse": "SELECT Weight FROM CARS_DATA WHERE Cylinders  =  4 AND YEAR  =  1974 ORDER BY Weight ASC LIMIT 1",
    "beam": [
      [
        "SELECT Min ( Weight ) FROM cars_data WHERE Year = value",
        -0.022150039672851562
      ],
      [
        "SELECT Min ( Weight ) FROM cars_data WHERE Cylinders < value",
        -4.269918441772461
      ],
      [
        "SELECT Weight FROM cars_data WHERE Year = value",
        -5.872053146362305
      ],
      [
        "SELECT Min ( Weight ) FROM cars_data WHERE Year < value",
        -6.450606346130371
      ],
      [
        "SELECT Weight FROM cars_data WHERE Year = value ORDER BY Cylinders Asc LIMIT value",
        -7.328998565673828
      ],
      [
        "SELECT Min ( Weight ) FROM cars_data WHERE Year = value AND Year = value",
        -7.534052848815918
      ],
      [
        "SELECT Weight FROM cars_data WHERE Year = value ORDER BY Cylinders Asc",
        -7.763263702392578
      ],
      [
        "SELECT Min ( Weight ) FROM cars_data WHERE Cylinders < ( SELECT Min ( Cylinders ) FROM cars_data WHERE Year = value )",
        -7.982621192932129
      ],
      [
        "SELECT Weight FROM cars_data WHERE Cylinders < value",
        -8.112634658813477
      ],
      [
        "SELECT Min ( Weight ) FROM cars_data WHERE Cylinders = ( SELECT Min ( Cylinders ) FROM cars_data WHERE Year = value )",
        -8.16540813446045
      ],
      [
        "SELECT Avg ( Weight ) FROM cars_data WHERE Year = value",
        -8.463534355163574
      ],
      [
        "SELECT Min ( Weight ) FROM cars_data WHERE Cylinders = value",
        -8.75720500946045
      ],
      [
        "SELECT Min ( Weight ) FROM cars_data WHERE Year = value ORDER BY Cylinders Asc LIMIT value",
        -9.228682041168213
      ],
      [
        "SELECT Min ( Weight ) FROM cars_data WHERE Cylinders = ( SELECT Min ( Cylinders ) FROM cars_data )",
        -9.254405975341797
      ],
      [
        "SELECT Weight FROM cars_data WHERE Year < value",
        -9.406883239746094
      ],
      [
        "SELECT Min ( Weight ) FROM cars_data WHERE Year = value ORDER BY Cylinders Asc",
        -9.708112239837646
      ],
      [
        "SELECT Min ( Weight ) FROM cars_data WHERE Year = value AND Cylinders = value",
        -11.001052856445312
      ],
      [
        "SELECT Min ( Weight ) FROM cars_data WHERE Year LIKE value",
        -11.42602252960205
      ],
      [
        "SELECT Min ( T3.Weight ) FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T1.Model = value",
        -11.507684707641602
      ],
      [
        "SELECT Max ( Weight ) FROM cars_data WHERE Year = value",
        -11.841279983520508
      ]
    ],
    "predicted_parse_with_values": "SELECT Min ( Weight ) FROM cars_data WHERE Year = 1",
    "predicted_parse": "SELECT Min ( Weight ) FROM cars_data WHERE Year = value",
    "predicted_parse_explanation": [
      "find the minimum weight in cars data table whose year equals 1"
    ],
    "template_feedback": "consider the cylinders equals 4 and year equals 1974 conditions in place of the year equals 1 conditions . find weight in place of minimum weight . find the result with the smallest weight .",
    "primary_span": [
      [
        0,
        9
      ],
      [
        19,
        20
      ],
      [
        27,
        34
      ]
    ],
    "secondary_span": [
      [
        10,
        18
      ],
      [
        21,
        26
      ]
    ],
    "edits": [
      "weight",
      "minimum weight",
      "cylinders equals 4",
      "year equals 1974",
      "year equals 1",
      "weight",
      "1"
    ],
    "edits_original": "< select > add weight </ select > < select > remove minimum weight </ select > < where > add cylinders equals 4 </ where > < where > add year equals 1974 </ where > < where > remove year equals 1 </ where > < orderBy > add weight </ orderBy > < limit > add 1 </ limit >"
  },
  {
    "db_id": "student_transcripts_tracking",
    "feedback": "You should use degree summary name in place of second semester name and semester description of step 1 and 2 respectively.",
    "question": "Find the semester when both Master students and Bachelor students got enrolled in.",
    "gold_parse": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'",
    "beam": [
      [
        "SELECT semester_name FROM Semesters WHERE semester_name = value INTERSECT SELECT semester_name FROM Semesters WHERE semester_description = value",
        -1.1605072021484375
      ],
      [
        "SELECT semester_name FROM Semesters WHERE semester_description = value INTERSECT SELECT semester_name FROM Semesters WHERE semester_description = value",
        -1.1674299240112305
      ],
      [
        "SELECT semester_name FROM Semesters WHERE semester_name = value INTERSECT SELECT semester_name FROM Semesters WHERE semester_name = value",
        -1.7362546920776367
      ],
      [
        "SELECT semester_name FROM Semesters WHERE semester_description = value INTERSECT SELECT semester_name FROM Semesters WHERE semester_name = value",
        -1.74261474609375
      ],
      [
        "SELECT semester_description FROM Semesters WHERE semester_name = value INTERSECT SELECT semester_name FROM Semesters WHERE semester_description = value",
        -5.8495683670043945
      ],
      [
        "SELECT semester_name FROM Semesters WHERE semester_description = value",
        -5.99075984954834
      ],
      [
        "SELECT T2.semester_name FROM Degree_Programs AS T1 JOIN Semesters AS T2 JOIN Student_Enrolment AS T3 ON T1.degree_program_id = T3.degree_program_id AND T3.semester_id = T2.semester_id WHERE T1.degree_summary_name = value INTERSECT SELECT T2.semester_name FROM Semesters AS T2 WHERE T2.semester_description = value",
        -6.311412811279297
      ],
      [
        "SELECT semester_name FROM Semesters WHERE semester_name = value INTERSECT SELECT semester_description FROM Semesters WHERE semester_description = value",
        -6.323058128356934
      ],
      [
        "SELECT semester_name FROM Semesters WHERE semester_description = value INTERSECT SELECT semester_description FROM Semesters WHERE semester_description = value",
        -6.328211307525635
      ],
      [
        "SELECT semester_description FROM Semesters WHERE semester_description = value INTERSECT SELECT semester_name FROM Semesters WHERE semester_description = value",
        -6.3790483474731445
      ],
      [
        "SELECT semester_name FROM Semesters WHERE semester_name = value INTERSECT SELECT semester_description FROM Semesters WHERE semester_name = value",
        -6.407318115234375
      ],
      [
        "SELECT semester_name FROM Semesters WHERE semester_description = value INTERSECT SELECT semester_description FROM Semesters WHERE semester_name = value",
        -6.418124675750732
      ],
      [
        "SELECT semester_description FROM Semesters WHERE semester_name = value INTERSECT SELECT semester_name FROM Semesters WHERE semester_name = value",
        -6.424278259277344
      ],
      [
        "SELECT semester_name FROM Semesters WHERE semester_name = value",
        -6.63843297958374
      ],
      [
        "SELECT T1.semester_name FROM Semesters AS T1 WHERE T1.semester_name = value INTERSECT SELECT T1.semester_name FROM Degree_Programs AS T2 JOIN Semesters AS T1 JOIN Student_Enrolment AS T3 ON T2.degree_program_id = T3.degree_program_id AND T3.semester_id = T1.semester_id WHERE T2.degree_summary_name = value",
        -6.810323715209961
      ],
      [
        "SELECT T1.semester_name FROM Semesters AS T1 WHERE T1.semester_description = value INTERSECT SELECT T1.semester_name FROM Degree_Programs AS T2 JOIN Semesters AS T1 JOIN Student_Enrolment AS T3 ON T2.degree_program_id = T3.degree_program_id AND T3.semester_id = T1.semester_id WHERE T2.degree_summary_name = value",
        -6.819819450378418
      ],
      [
        "SELECT semester_description FROM Semesters WHERE semester_description = value",
        -10.948647499084473
      ],
      [
        "SELECT semester_description FROM Semesters WHERE semester_name = value",
        -11.11071491241455
      ],
      [
        "SELECT T2.semester_name FROM Degree_Programs AS T1 JOIN Semesters AS T2 JOIN Student_Enrolment AS T3 ON T1.degree_program_id = T3.degree_program_id AND T3.semester_id = T2.semester_id WHERE T1.degree_summary_name = value",
        -11.154610633850098
      ],
      [
        "SELECT semester_name FROM Semesters WHERE semester_name LIKE value",
        -11.336321830749512
      ]
    ],
    "predicted_parse_with_values": "SELECT semester_name FROM Semesters WHERE semester_name = \"Master\" INTERSECT SELECT semester_name FROM Semesters WHERE semester_description = \"Bachelor\"",
    "predicted_parse": "SELECT semester_name FROM Semesters WHERE semester_name = value INTERSECT SELECT semester_name FROM Semesters WHERE semester_description = value",
    "predicted_parse_explanation": [
      "Step 1: find the semester name in semesters table whose semester name equals Master",
      "Step 2: find the semester name in semesters table whose semester description equals Bachelor",
      "Step 3: show the rows that are in both the results of step 1 and step 2"
    ],
    "template_feedback": "in step 1 , use degree programs table and student enrolment table in place of semesters table . consider the degree summary name equals Master conditions in place of the semester name equals Master conditions . find student enrolment 's semester id in place of semester name . make sure no repetition in the results . in step 2 , use degree programs table and student enrolment table in place of semesters table . consider the degree summary name equals Bachelor conditions in place of the semester description equals Bachelor conditions . find student enrolment 's semester id in place of semester name . make sure no repetition in the results .",
    "primary_span": [
      [
        4,
        11
      ],
      [
        18,
        25
      ],
      [
        36,
        41
      ],
      [
        48,
        55
      ],
      [
        60,
        67
      ],
      [
        74,
        81
      ],
      [
        92,
        97
      ],
      [
        104,
        111
      ]
    ],
    "secondary_span": [
      [
        12,
        17
      ],
      [
        26,
        35
      ],
      [
        42,
        47
      ],
      [
        68,
        73
      ],
      [
        82,
        91
      ],
      [
        98,
        103
      ]
    ],
    "edits": [
      "distinct",
      "semester id",
      "semester name",
      "degree programs",
      "student enrolment",
      "semesters",
      "degree summary name equals \"Master\"",
      "semester name equals \"Master\"",
      "distinct",
      "semester id",
      "semester name",
      "degree programs",
      "student enrolment",
      "semesters",
      "degree summary name equals \"Bachelor\"",
      "semester description equals \"Bachelor\""
    ],
    "edits_original": "< select > add distinct </ select > < select > add semester id </ select > < select > remove semester name </ select > < from > add degree programs </ from > < from > add student enrolment </ from > < from > remove semesters </ from > < where > add degree summary name equals \" Master \" </ where > < where > remove semester name equals \" Master \" </ where > < select > add distinct </ select > < select > add semester id </ select > < select > remove semester name </ select > < from > add degree programs </ from > < from > add student enrolment </ from > < from > remove semesters </ from > < where > add degree summary name equals \" Bachelor \" </ where > < where > remove semester description equals \" Bachelor \" </ where >"
  },
  {
    "db_id": "student_transcripts_tracking",
    "feedback": "In place of addresses table, search result from courses table.",
    "question": "How many courses are there?",
    "gold_parse": "SELECT count(*) FROM Courses",
    "beam": [
      [
        "SELECT Count ( * ) FROM Addresses",
        -2.288818359375e-05
      ],
      [
        "SELECT Sum ( course_name ) FROM Courses",
        -12.055608868598938
      ],
      [
        "SELECT Count ( * ) FROM Courses WHERE course_name = value",
        -12.71890115737915
      ],
      [
        "SELECT Sum ( * ) FROM Addresses",
        -12.991655230522156
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM Addresses",
        -13.082897186279297
      ],
      [
        "SELECT Count ( Count ( * ) ) FROM Addresses",
        -13.517195701599121
      ],
      [
        "SELECT Count ( * ) , course_name FROM Courses",
        -13.812331199645996
      ],
      [
        "SELECT Sum ( course_id ) FROM Courses",
        -14.083028316497803
      ],
      [
        "SELECT Sum ( DISTINCT course_name ) FROM Courses",
        -14.277621865272522
      ],
      [
        "SELECT Count ( * ) FROM Courses ORDER BY course_name Desc",
        -14.353008151054382
      ],
      [
        "SELECT Count ( * ) FROM Courses ORDER BY course_id Desc",
        -15.243051409721375
      ],
      [
        "SELECT Avg ( course_name ) FROM Courses",
        -15.360999584197998
      ],
      [
        "SELECT Count ( * ) FROM Courses GROUP BY course_name",
        -15.668410420417786
      ],
      [
        "SELECT Sum ( course_description ) FROM Courses",
        -15.733709812164307
      ],
      [
        "SELECT Count ( DISTINCT course_name ) FROM Courses",
        -15.741450309753418
      ],
      [
        "SELECT Count ( * ) FROM Courses GROUP BY course_id",
        -15.759600400924683
      ],
      [
        "SELECT Avg ( * ) FROM Addresses",
        -15.790834903717041
      ],
      [
        "SELECT Count ( * ) FROM Addresses AS T1 UNION SELECT T2.course_name FROM Courses AS T2",
        -15.876869440078735
      ],
      [
        "SELECT Avg ( course_id ) FROM Courses",
        -16.59359121322632
      ],
      [
        "SELECT Count ( * ) , Count ( * ) FROM Addresses",
        -16.740601539611816
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM Addresses",
    "predicted_parse": "SELECT Count ( * ) FROM Addresses",
    "predicted_parse_explanation": [
      "find the number of rows in addresses table"
    ],
    "template_feedback": "use courses table in place of addresses table .",
    "primary_span": [
      [
        0,
        2
      ]
    ],
    "secondary_span": [
      [
        3,
        8
      ]
    ],
    "edits": [
      "courses",
      "addresses"
    ],
    "edits_original": "< from > add courses </ from > < from > remove addresses </ from >"
  },
  {
    "db_id": "dog_kennels",
    "feedback": "In step 2 also find name , and remove \"and name equals Kacey\" phrase .",
    "question": "Find the first names of owners living in Virginia and the names of dogs they own.",
    "gold_parse": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'",
    "beam": [
      [
        "SELECT T1.first_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = value AND T2.name = value",
        -0.035859107971191406
      ],
      [
        "SELECT T1.first_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = value AND T2.gender = value",
        -4.107245445251465
      ],
      [
        "SELECT T1.first_name FROM Owners AS T1 WHERE T1.state = value INTERSECT SELECT T1.first_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T2.name = value",
        -4.505980491638184
      ],
      [
        "SELECT T1.first_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = value AND T2.name = value INTERSECT SELECT T1.first_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T2.name = value",
        -5.298467636108398
      ],
      [
        "SELECT T1.first_name FROM Owners AS T1 WHERE T1.state = value INTERSECT SELECT T1.first_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T2.gender = value",
        -6.783978462219238
      ],
      [
        "SELECT T1.first_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = value AND T2.name = value INTERSECT SELECT T1.first_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T2.gender = value",
        -7.342787742614746
      ],
      [
        "SELECT first_name FROM Owners WHERE state = value INTERSECT SELECT first_name FROM Owners WHERE state = value",
        -7.787156105041504
      ],
      [
        "SELECT first_name FROM Owners WHERE state = value",
        -8.945784568786621
      ],
      [
        "SELECT T2.first_name FROM Breeds AS T1 JOIN Owners AS T2 JOIN Dogs AS T3 ON T1.breed_code = T3.breed_code AND T3.owner_id = T2.owner_id WHERE T2.state = value AND T1.breed_name = value",
        -9.820327758789062
      ],
      [
        "SELECT first_name FROM Owners WHERE state = value ORDER BY first_name Asc",
        -10.1585111618042
      ],
      [
        "SELECT T1.first_name FROM Owners AS T1 WHERE T1.state = value INTERSECT SELECT T1.first_name FROM Breeds AS T2 JOIN Owners AS T1 JOIN Dogs AS T3 ON T2.breed_code = T3.breed_code AND T3.owner_id = T1.owner_id WHERE T2.breed_name = value",
        -10.6857271194458
      ],
      [
        "SELECT T1.first_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id AND T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id WHERE T3.state = value AND T2.name = value",
        -11.0859375
      ],
      [
        "SELECT T2.first_name FROM Breeds AS T1 JOIN Owners AS T2 JOIN Dogs AS T3 ON T1.breed_code = T3.breed_code AND T3.owner_id = T2.owner_id AND T1.breed_code = T3.breed_code WHERE T1.breed_name = value AND T3.name = value",
        -11.93254566192627
      ],
      [
        "SELECT T1.first_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T2.name = value AND T2.name = value",
        -12.041647911071777
      ],
      [
        "SELECT T1.first_name , T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = value",
        -12.054704666137695
      ],
      [
        "SELECT T1.first_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = value AND T2.weight = value",
        -12.829413414001465
      ],
      [
        "SELECT first_name FROM Owners WHERE state = value AND state = value",
        -13.45410442352295
      ],
      [
        "SELECT T1.first_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = value ORDER BY T2.weight Asc LIMIT value",
        -13.456443309783936
      ],
      [
        "SELECT T1.first_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T2.gender = value AND T2.name = value",
        -13.57263469696045
      ],
      [
        "SELECT first_name FROM Owners",
        -14.911208152770996
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.first_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = \"Virginia\" AND T2.name = \"Kacey\"",
    "predicted_parse": "SELECT T1.first_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = value AND T2.name = value",
    "predicted_parse_explanation": [
      "Step 1: for each row in owners table , find the corresponding rows in dogs table",
      "Step 2: find the first name of the results of step 1 whose state equals Virginia and name equals Kacey"
    ],
    "template_feedback": "in step 2 , remove the name equals Kacey conditions . additionally find name .",
    "primary_span": [
      [
        4,
        10
      ],
      [
        11,
        14
      ]
    ],
    "secondary_span": [],
    "edits": [
      "name",
      "name equals \"Kacey\""
    ],
    "edits_original": "< select > add name </ select > < where > remove name equals \" Kacey \" </ where >"
  },
  {
    "db_id": "concert_singer",
    "feedback": "You have to interchange ascending with descending.",
    "question": "Show name, country, age for all singers ordered by age from the oldest to the youngest.",
    "gold_parse": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC",
    "beam": [
      [
        "SELECT Name , Country , Age FROM singer ORDER BY Age Asc",
        -0.12618732452392578
      ],
      [
        "SELECT Name , Country , Song_release_year FROM singer ORDER BY Age Asc",
        -2.7889280319213867
      ],
      [
        "SELECT Name , Country , Country FROM singer ORDER BY Age Asc",
        -2.9944381713867188
      ],
      [
        "SELECT Song_Name , Country , Age FROM singer ORDER BY Age Asc",
        -5.470048904418945
      ],
      [
        "SELECT Name , Country , Age FROM singer ORDER BY Age Asc LIMIT value",
        -6.8030805587768555
      ],
      [
        "SELECT Name , Country , Age FROM singer ORDER BY Age Desc",
        -7.68806266784668
      ],
      [
        "SELECT Song_Name , Country , Song_release_year FROM singer ORDER BY Age Asc",
        -8.115498542785645
      ],
      [
        "SELECT Song_Name , Country , Country FROM singer ORDER BY Age Asc",
        -8.395529747009277
      ],
      [
        "SELECT Name , Country , Is_male FROM singer ORDER BY Age Asc",
        -8.613181114196777
      ],
      [
        "SELECT Name , Country , Age FROM singer ORDER BY Song_release_year Asc",
        -9.079100608825684
      ],
      [
        "SELECT Name , Country , Song_release_year FROM singer ORDER BY Age Asc LIMIT value",
        -9.096161365509033
      ],
      [
        "SELECT Name , Country , Country FROM singer ORDER BY Age Asc LIMIT value",
        -9.45497751235962
      ],
      [
        "SELECT Name , Country FROM singer ORDER BY Age Asc",
        -9.48494815826416
      ],
      [
        "SELECT Name , Country , Song_release_year FROM singer ORDER BY Age Desc",
        -10.12651538848877
      ],
      [
        "SELECT Name , Country , Age FROM singer ORDER BY Age - Song_release_year Asc",
        -11.015678405761719
      ],
      [
        "SELECT Name , Country , Country FROM singer ORDER BY Age Desc",
        -11.375146865844727
      ],
      [
        "SELECT Song_Name , Country , Age FROM singer ORDER BY Age Asc LIMIT value",
        -12.148491859436035
      ],
      [
        "SELECT Name , Country , Min ( Age ) FROM singer ORDER BY Age Asc",
        -12.386768341064453
      ],
      [
        "SELECT Name , Country , Max ( Age ) FROM singer ORDER BY Age Asc",
        -12.524867057800293
      ],
      [
        "SELECT Name FROM singer ORDER BY Age Asc",
        -16.800212860107422
      ]
    ],
    "predicted_parse_with_values": "SELECT Name , Country , Age FROM singer ORDER BY Age Asc",
    "predicted_parse": "SELECT Name , Country , Age FROM singer ORDER BY Age Asc",
    "predicted_parse_explanation": [
      "find the name , country , age in singer table ordered ascending by age"
    ],
    "template_feedback": "order the results descending .",
    "primary_span": [
      [
        0,
        4
      ]
    ],
    "secondary_span": [],
    "edits": [
      "descending"
    ],
    "edits_original": "< orderBy > add descending </ orderBy >"
  },
  {
    "db_id": "wta_1",
    "feedback": "Players table can be replace by matches table.",
    "question": "Find the total number of matches.",
    "gold_parse": "SELECT count(*) FROM matches",
    "beam": [
      [
        "SELECT Count ( * ) FROM players",
        -3.147125244140625e-05
      ],
      [
        "SELECT Sum ( * ) FROM players",
        -11.427745580673218
      ],
      [
        "SELECT Sum ( tourney_id ) FROM matches",
        -13.029143929481506
      ],
      [
        "SELECT Count ( * ) , Count ( * ) FROM players",
        -13.69523811340332
      ],
      [
        "SELECT Sum ( tourney_name ) FROM matches",
        -13.739094734191895
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM players",
        -14.142114639282227
      ],
      [
        "SELECT Count ( * ) , tourney_name FROM matches",
        -14.51404595375061
      ],
      [
        "SELECT Count ( Count ( * ) ) FROM players",
        -14.551506996154785
      ],
      [
        "SELECT Sum ( draw_size ) FROM matches",
        -14.847006797790527
      ],
      [
        "SELECT Sum ( match_num ) FROM matches",
        -14.9871826171875
      ],
      [
        "SELECT Count ( * ) FROM matches WHERE tourney_name = value",
        -15.072705745697021
      ],
      [
        "SELECT Count ( * ) , loser_name FROM matches",
        -15.137970447540283
      ],
      [
        "SELECT Avg ( * ) FROM players",
        -15.247907042503357
      ],
      [
        "SELECT Count ( * ) FROM matches ORDER BY tourney_id Desc",
        -15.32108211517334
      ],
      [
        "SELECT Count ( * ) FROM matches ORDER BY tourney_id Asc",
        -15.43895673751831
      ],
      [
        "SELECT Count ( * ) FROM matches GROUP BY tourney_name",
        -15.521505236625671
      ],
      [
        "SELECT Sum ( winner_seed ) FROM matches",
        -15.770104885101318
      ],
      [
        "SELECT Count ( Avg ( * ) ) FROM players",
        -15.794992446899414
      ],
      [
        "SELECT Sum ( loser_rank_points ) FROM matches",
        -15.854962348937988
      ],
      [
        "SELECT Sum ( loser_seed ) FROM matches",
        -15.87571096420288
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM players",
    "predicted_parse": "SELECT Count ( * ) FROM players",
    "predicted_parse_explanation": [
      "find the number of rows in players table"
    ],
    "template_feedback": "use matches table in place of players table .",
    "primary_span": [
      [
        0,
        2
      ]
    ],
    "secondary_span": [
      [
        3,
        8
      ]
    ],
    "edits": [
      "matches",
      "players"
    ],
    "edits_original": "< from > add matches </ from > < from > remove players </ from >"
  },
  {
    "db_id": "car_1",
    "feedback": "In step 1 car makers's model id , in step 2 needs model equals fiat , step 4 with step 3 in step 4.",
    "question": "What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?",
    "gold_parse": "SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat'",
    "beam": [
      [
        "SELECT CountryId , CountryName FROM countries GROUP BY CountryId HAVING Count ( * ) > value UNION SELECT CountryId , CountryName FROM countries GROUP BY CountryId HAVING Count ( * ) > value",
        -0.6399478912353516
      ],
      [
        "SELECT T1.CountryId , T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country JOIN model_list AS T3 ON T2.Id = T3.Maker WHERE T3.Model = value UNION SELECT T1.CountryId , T1.CountryName FROM countries AS T1 GROUP BY T1.CountryId HAVING Count ( * ) > value",
        -1.236307144165039
      ],
      [
        "SELECT T1.CountryId , T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country JOIN model_list AS T3 ON T2.Id = T3.Maker WHERE T3.Model = value UNION SELECT T1.CountryId , T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country JOIN model_list AS T3 ON T2.Id = T3.Maker WHERE T3.Model = value OR T3.Model = value",
        -2.912970542907715
      ],
      [
        "SELECT T1.CountryId , T1.CountryName FROM countries AS T1 GROUP BY T1.CountryId HAVING Count ( * ) > value UNION SELECT T1.CountryId , T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country GROUP BY T2.Country HAVING Count ( * ) > value",
        -3.5951318740844727
      ],
      [
        "SELECT T1.CountryId , T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country JOIN model_list AS T3 ON T2.Id = T3.Maker WHERE T3.Model = value UNION SELECT T1.CountryId , T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country JOIN model_list AS T3 ON T2.Id = T3.Maker WHERE T3.Model = value",
        -3.7301454544067383
      ],
      [
        "SELECT T1.CountryId , T1.CountryName FROM countries AS T1 GROUP BY T1.CountryId HAVING Count ( * ) > value UNION SELECT T1.CountryId , T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country JOIN model_list AS T3 ON T2.Id = T3.Maker WHERE T3.Model = value",
        -3.899092674255371
      ],
      [
        "SELECT T1.CountryId , T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country JOIN model_list AS T3 ON T2.Id = T3.Maker WHERE T3.Model = value UNION SELECT T1.CountryId , T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country JOIN model_list AS T3 ON T2.Id = T3.Maker JOIN car_names AS T4 ON T3.Model = T4.Model JOIN cars_data AS T5 ON T4.MakeId = T5.Id WHERE T5.Horsepower > value",
        -4.60511589050293
      ],
      [
        "SELECT T1.CountryId , T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country JOIN model_list AS T3 ON T2.Id = T3.Maker WHERE T3.Model = value UNION SELECT T1.CountryId , T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country WHERE T2.Maker > value",
        -5.082291603088379
      ],
      [
        "SELECT T1.CountryId , T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country JOIN model_list AS T3 ON T2.Id = T3.Maker WHERE T3.Model = value UNION SELECT T1.CountryId , T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country JOIN model_list AS T3 ON T2.Id = T3.Maker WHERE T3.Model > value",
        -5.558816432952881
      ],
      [
        "SELECT T1.CountryId , T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country JOIN model_list AS T3 ON T2.Id = T3.Maker WHERE T3.Model = value UNION SELECT T1.CountryId , T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country GROUP BY T2.Country HAVING Count ( * ) > value",
        -5.618429183959961
      ],
      [
        "SELECT T1.CountryId , T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country JOIN model_list AS T3 ON T2.Id = T3.Maker WHERE T3.Model = value GROUP BY T1.CountryId HAVING Count ( * ) > = value",
        -5.655523300170898
      ],
      [
        "SELECT T1.CountryId , T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country JOIN model_list AS T3 ON T2.Id = T3.Maker WHERE T3.Model = value GROUP BY T1.CountryId HAVING Count ( * ) > value",
        -5.803731918334961
      ],
      [
        "SELECT T1.CountryId , T1.CountryName FROM countries AS T1 GROUP BY T1.CountryId HAVING Count ( * ) > value UNION SELECT T1.CountryId , T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country JOIN model_list AS T3 ON T2.Id = T3.Maker WHERE T3.Model = value OR T3.Model = value",
        -5.812960624694824
      ],
      [
        "SELECT T1.CountryId , T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country WHERE T2.Maker = value UNION SELECT T1.CountryId , T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country JOIN model_list AS T3 ON T2.Id = T3.Maker WHERE T3.Model = value",
        -6.045923709869385
      ],
      [
        "SELECT T1.CountryId , T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country WHERE T2.Maker = value UNION SELECT T1.CountryId , T1.CountryName FROM countries AS T1 GROUP BY T1.CountryId HAVING Count ( * ) > value",
        -6.265443325042725
      ],
      [
        "SELECT T1.CountryId , T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country WHERE T2.Maker = value UNION SELECT T1.CountryId , T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country JOIN model_list AS T3 ON T2.Id = T3.Maker WHERE T3.Model = value OR T3.Model = value",
        -6.531493663787842
      ],
      [
        "SELECT T1.CountryId , T1.CountryName FROM countries AS T1 GROUP BY T1.CountryId HAVING Count ( * ) > value UNION SELECT T2.Id , T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country GROUP BY T1.CountryId HAVING Count ( * ) > value",
        -6.605847358703613
      ],
      [
        "SELECT T1.CountryId , T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country JOIN model_list AS T3 ON T2.Id = T3.Maker WHERE T3.Model = value UNION SELECT T1.CountryId , T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country AND T1.CountryId = T2.Country JOIN model_list AS T3 ON T2.Id = T3.Maker WHERE T3.Model = value OR T2.Maker = value",
        -6.755837440490723
      ],
      [
        "SELECT T1.CountryId , T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country JOIN model_list AS T3 ON T2.Id = T3.Maker WHERE T3.Model = value OR T3.Model = value GROUP BY T1.CountryId HAVING Count ( * ) > = value",
        -7.299812316894531
      ],
      [
        "SELECT T1.CountryId , T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country JOIN model_list AS T3 ON T2.Id = T3.Maker JOIN car_names AS T4 ON T3.Model = T4.Model JOIN cars_data AS T5 ON T4.MakeId = T5.Id WHERE T5.Horsepower > value GROUP BY T1.CountryId HAVING Count ( * ) > = value",
        -8.595995903015137
      ]
    ],
    "predicted_parse_with_values": "SELECT CountryId , CountryName FROM countries GROUP BY CountryId HAVING Count ( * ) > \"fiat\" UNION SELECT CountryId , CountryName FROM countries GROUP BY CountryId HAVING Count ( * ) > 3",
    "predicted_parse": "SELECT CountryId , CountryName FROM countries GROUP BY CountryId HAVING Count ( * ) > value UNION SELECT CountryId , CountryName FROM countries GROUP BY CountryId HAVING Count ( * ) > value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of country id in countries table",
      "Step 2: find the country id and country name in countries table whose corresponding value in step 1 is greater than fiat",
      "Step 3: find the number of rows of each value of country id in countries table",
      "Step 4: find the country id and country name in countries table whose corresponding value in step 3 is greater than 3",
      "Step 5: show the rows that are in any of the results of step 2 and step 4"
    ],
    "template_feedback": "in step 1 , additionally use the information from the car makers table besides the countries table . in step 2 , make sure that the corresponding value in step 1 greater than 3 . in step 3 , additionally use the information from the car makers table and model list table besides the countries table . do not find for each value of country id . in step 4 , additionally make sure that model equals fiat .",
    "primary_span": [
      [
        4,
        12
      ],
      [
        22,
        34
      ],
      [
        39,
        51
      ],
      [
        57,
        66
      ],
      [
        71,
        78
      ]
    ],
    "secondary_span": [
      [
        13,
        17
      ],
      [
        52,
        56
      ]
    ],
    "edits": [
      "car makers",
      "number of rows greater than 3",
      "number of rows greater than \"fiat\"",
      "car makers",
      "model list",
      "model equals \"fiat\"",
      "country id",
      "number of rows greater than 3"
    ],
    "edits_original": "< from > add car makers </ from > < having > add number of rows greater than 3 </ having > < having > remove number of rows greater than \" fiat \" </ having > < from > add car makers </ from > < from > add model list </ from > < where > add model equals \" fiat \" </ where > < groupBy > remove country id </ groupBy > < having > remove number of rows greater than 3 </ having >"
  },
  {
    "db_id": "orchestra",
    "feedback": "You need to look for working year.",
    "question": "List the name of the conductor with the most years of work.",
    "gold_parse": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
    "beam": [
      [
        "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID ORDER BY T2.Year_of_Founded Desc LIMIT value",
        -2.288818359375e-05
      ],
      [
        "SELECT Name FROM conductor ORDER BY Year_of_Work Desc LIMIT value",
        -11.948838233947754
      ],
      [
        "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID ORDER BY T2.Year_of_Founded Desc",
        -12.401759147644043
      ],
      [
        "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY Sum ( T2.Year_of_Founded ) Desc LIMIT value",
        -12.979588508605957
      ],
      [
        "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID ORDER BY T2.Year_of_Founded Asc LIMIT value",
        -13.492796897888184
      ],
      [
        "SELECT Name FROM conductor",
        -13.731234550476074
      ],
      [
        "SELECT T1.Name , T2.Year_of_Founded FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID ORDER BY T2.Year_of_Founded Desc LIMIT value",
        -13.856369018554688
      ],
      [
        "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Year_of_Founded = ( SELECT Max ( T2.Year_of_Founded ) FROM orchestra AS T2 ) ORDER BY T2.Year_of_Founded Desc LIMIT value",
        -13.905345439910889
      ],
      [
        "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Year_of_Founded = ( SELECT Max ( T2.Year_of_Founded ) FROM orchestra AS T2 )",
        -14.237841129302979
      ],
      [
        "SELECT T1.Name FROM conductor AS T1 UNION SELECT Max ( T2.Year_of_Founded ) FROM orchestra AS T2",
        -14.408408164978027
      ],
      [
        "SELECT DISTINCT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID ORDER BY T2.Year_of_Founded Desc LIMIT value",
        -14.59344482421875
      ],
      [
        "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY Count ( * ) Desc LIMIT value",
        -14.771294593811035
      ],
      [
        "SELECT Name FROM conductor ORDER BY Count ( * ) Desc LIMIT value",
        -15.733631134033203
      ],
      [
        "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID ORDER BY DISTINCT T2.Year_of_Founded Desc LIMIT value",
        -16.094101905822754
      ],
      [
        "SELECT DISTINCT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID ORDER BY T2.Year_of_Founded Desc LIMIT value",
        -16.184728622436523
      ],
      [
        "SELECT T1.Name , T1.Year_of_Work FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID ORDER BY T2.Year_of_Founded Desc LIMIT value",
        -16.719313144683838
      ],
      [
        "SELECT T1.Name , T2.Record_Company FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID ORDER BY T2.Year_of_Founded Desc LIMIT value",
        -17.48626136779785
      ],
      [
        "SELECT T1.Name , T2.Conductor_ID FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID ORDER BY T2.Year_of_Founded Desc LIMIT value",
        -17.548285961151123
      ],
      [
        "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded Desc LIMIT value",
        -17.59903907775879
      ],
      [
        "SELECT Max ( Name ) FROM conductor",
        -18.388681411743164
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID ORDER BY T2.Year_of_Founded Desc LIMIT 1",
    "predicted_parse": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID ORDER BY T2.Year_of_Founded Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: for each row in conductor table , find the corresponding rows in orchestra table",
      "Step 2: find the name of the results of step 1 with largest value of year of founded"
    ],
    "template_feedback": "in step 1 , do not use the orchestra table . in step 2 , order the results by year of work in place of year of founded .",
    "primary_span": [
      [
        4,
        10
      ],
      [
        15,
        21
      ]
    ],
    "secondary_span": [
      [
        4,
        10
      ],
      [
        22,
        28
      ]
    ],
    "edits": [
      "orchestra",
      "year of work",
      "year of founded"
    ],
    "edits_original": "< from > remove orchestra </ from > < orderBy > add year of work </ orderBy > < orderBy > remove year of founded </ orderBy >"
  },
  {
    "db_id": "orchestra",
    "feedback": "And from orchestra table, I want relative orchestra.",
    "question": "What are the names of conductors as well as the corresonding orchestras that they have conducted?",
    "gold_parse": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID",
    "beam": [
      [
        "SELECT Name FROM conductor",
        -1.217698097229004
      ],
      [
        "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Orchestra = value",
        -1.3457339406013489
      ],
      [
        "SELECT Name FROM conductor WHERE Name = value",
        -1.8501310348510742
      ],
      [
        "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID JOIN performance AS T3 ON T2.Orchestra_ID = T3.Orchestra_ID WHERE T3.Weekly_rank = value",
        -1.8828108310699463
      ],
      [
        "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID JOIN performance AS T3 ON T2.Orchestra_ID = T3.Orchestra_ID WHERE T3.Date = value",
        -2.9347188472747803
      ],
      [
        "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Major_Record_Format = value",
        -3.4974663257598877
      ],
      [
        "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Record_Company = value",
        -3.822058916091919
      ],
      [
        "SELECT Name FROM conductor WHERE Nationality = value",
        -4.5041327476501465
      ],
      [
        "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Year_of_Founded = value",
        -4.776417255401611
      ],
      [
        "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID JOIN performance AS T3 ON T2.Orchestra_ID = T3.Orchestra_ID JOIN show AS T4 ON T3.Performance_ID = T4.Performance_ID WHERE T4.Result = value",
        -5.152127265930176
      ],
      [
        "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID JOIN performance AS T3 ON T2.Orchestra_ID = T3.Orchestra_ID WHERE T3.Share = value",
        -6.6688642501831055
      ],
      [
        "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID JOIN performance AS T3 ON T2.Orchestra_ID = T3.Orchestra_ID WHERE T3.Type = value",
        -7.371723651885986
      ],
      [
        "SELECT Name FROM conductor WHERE Year_of_Work = value",
        -7.386811256408691
      ],
      [
        "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID JOIN performance AS T3 ON T2.Orchestra_ID = T3.Orchestra_ID WHERE T3.Official_ratings_(millions) = value",
        -8.133152484893799
      ],
      [
        "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID JOIN performance AS T3 ON T2.Orchestra_ID = T3.Orchestra_ID JOIN show AS T4 ON T3.Performance_ID = T4.Performance_ID WHERE T4.Attendance = value",
        -8.410534858703613
      ],
      [
        "SELECT Name FROM conductor WHERE Age = value",
        -8.561660766601562
      ],
      [
        "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID JOIN performance AS T3 ON T2.Orchestra_ID = T3.Orchestra_ID JOIN show AS T4 ON T3.Performance_ID = T4.Performance_ID WHERE T4.If_first_show = value",
        -8.785896301269531
      ],
      [
        "SELECT Name FROM conductor GROUP BY Conductor_ID HAVING Count ( * ) = value",
        -9.062973499298096
      ],
      [
        "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID JOIN performance AS T3 ON T2.Orchestra_ID = T3.Orchestra_ID JOIN show AS T4 ON T3.Performance_ID = T4.Performance_ID WHERE T4.Show_ID = value",
        -9.183932304382324
      ],
      [
        "SELECT DISTINCT Name FROM conductor",
        -13.982215881347656
      ]
    ],
    "predicted_parse_with_values": "SELECT Name FROM conductor",
    "predicted_parse": "SELECT Name FROM conductor",
    "predicted_parse_explanation": [
      "find the name in conductor table"
    ],
    "template_feedback": "additionally use the information from the orchestra table besides the conductor table . additionally find orchestra .",
    "primary_span": [
      [
        0,
        7
      ],
      [
        13,
        16
      ]
    ],
    "secondary_span": [
      [
        8,
        12
      ]
    ],
    "edits": [
      "orchestra",
      "orchestra"
    ],
    "edits_original": "< select > add orchestra </ select > < from > add orchestra </ from >"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "feedback": "Replace template id , documents table with document id , paragraphs table In step 1 and template id with document id in Step 2.",
    "question": "List all document ids with at least two paragraphs.",
    "gold_parse": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2",
    "beam": [
      [
        "SELECT Template_ID FROM Documents GROUP BY Template_ID HAVING Count ( * ) > = value",
        -0.645950436592095
      ],
      [
        "SELECT T1.Template_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T2.Document_ID HAVING Count ( * ) > = value",
        -1.0177632570266653
      ],
      [
        "SELECT T2.Document_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T1.Template_ID HAVING Count ( * ) > = value",
        -3.0931912660598684
      ],
      [
        "SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING Count ( * ) > = value",
        -3.3534966707229543
      ],
      [
        "SELECT Template_ID FROM Documents GROUP BY Document_ID HAVING Count ( * ) > = value",
        -3.7357655763626028
      ],
      [
        "SELECT Document_ID FROM Documents GROUP BY Template_ID HAVING Count ( * ) > = value",
        -5.212732434272759
      ],
      [
        "SELECT T1.Document_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T2.Document_ID HAVING Count ( * ) > = value",
        -6.005626797676079
      ],
      [
        "SELECT T2.Document_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T1.Document_ID HAVING Count ( * ) > = value",
        -6.152787327766411
      ],
      [
        "SELECT Document_ID FROM Documents GROUP BY Document_ID HAVING Count ( * ) > = value",
        -8.727045178413384
      ],
      [
        "SELECT Template_ID FROM Documents GROUP BY Template_ID HAVING Count ( * ) BETWEEN value AND value",
        -12.071867942810059
      ],
      [
        "SELECT T1.Template_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T2.Document_ID HAVING Count ( * ) BETWEEN value AND value",
        -12.57023811340332
      ],
      [
        "SELECT Template_ID FROM Documents GROUP BY Template_ID HAVING Count ( * ) > = value OR Count ( * ) > = value",
        -13.201189279556246
      ],
      [
        "SELECT Template_ID FROM Documents WHERE Document_ID > = value GROUP BY Template_ID HAVING Count ( * ) > = value",
        -13.572022199630737
      ],
      [
        "SELECT Template_ID FROM Documents",
        -13.717341423034668
      ],
      [
        "SELECT T1.Template_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T2.Document_ID HAVING Count ( * ) > = value OR Count ( * ) > = value",
        -13.839102864265435
      ],
      [
        "SELECT T2.Paragraph_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T1.Template_ID HAVING Count ( * ) > = value",
        -13.988953709602349
      ],
      [
        "SELECT Document_Name FROM Documents GROUP BY Template_ID HAVING Count ( * ) > = value",
        -14.10583317279815
      ],
      [
        "SELECT Template_ID FROM Documents WHERE Document_ID > = value",
        -14.26307201385498
      ],
      [
        "SELECT Template_ID FROM Documents GROUP BY Template_ID HAVING Sum ( * ) > = value",
        -14.291767716407769
      ],
      [
        "SELECT Document_ID FROM Paragraphs",
        -16.638667106628418
      ]
    ],
    "predicted_parse_with_values": "SELECT Template_ID FROM Documents GROUP BY Template_ID HAVING Count ( * ) > = 2",
    "predicted_parse": "SELECT Template_ID FROM Documents GROUP BY Template_ID HAVING Count ( * ) > = value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of template id in documents table",
      "Step 2: find the template id in documents table whose corresponding value in step 1 is greater than or equals 2"
    ],
    "template_feedback": "in step 1 , use paragraphs table in place of documents table . find for value of paragraphs 's document id in place of template id . in step 2 , find paragraphs 's document id in place of template id .",
    "primary_span": [
      [
        4,
        6
      ],
      [
        13,
        20
      ],
      [
        31,
        35
      ]
    ],
    "secondary_span": [
      [
        7,
        12
      ],
      [
        21,
        26
      ],
      [
        36,
        41
      ]
    ],
    "edits": [
      "document id",
      "template id",
      "paragraphs",
      "documents",
      "document id",
      "template id"
    ],
    "edits_original": "< select > add document id </ select > < select > remove template id </ select > < from > add paragraphs </ from > < from > remove documents </ from > < groupBy > add document id </ groupBy > < groupBy > remove template id </ groupBy >"
  },
  {
    "db_id": "flight_2",
    "feedback": "Replace airlines table with flights table , ensure airlines's airline equals JetBlue Airways .",
    "question": "Give the number of Jetblue Airways flights.",
    "gold_parse": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"",
    "beam": [
      [
        "SELECT Count ( * ) FROM airlines WHERE Airline = value",
        -2.09808349609375e-05
      ],
      [
        "SELECT Count ( * ) FROM airlines WHERE Abbreviation = value",
        -10.879173278808594
      ],
      [
        "SELECT Count ( DISTINCT T2.FlightNo ) FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Airline = value",
        -14.696584701538086
      ],
      [
        "SELECT T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Airline = value",
        -14.750771284103394
      ],
      [
        "SELECT Count ( * ) FROM airlines WHERE Airline LIKE value",
        -14.961376190185547
      ],
      [
        "SELECT Count ( * ) FROM airlines WHERE Airline = value AND Airline = value",
        -15.12523078918457
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM airlines WHERE Airline = value",
        -15.241850852966309
      ],
      [
        "SELECT Avg ( T2.FlightNo ) FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Airline = value",
        -15.242618083953857
      ],
      [
        "SELECT Avg ( * ) FROM airlines WHERE Airline = value",
        -15.279403686523438
      ],
      [
        "SELECT Count ( * ) , T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Airline = value",
        -16.0499507188797
      ],
      [
        "SELECT Count ( T2.FlightNo ) FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Airline = value",
        -16.287981510162354
      ],
      [
        "SELECT Count ( * ) FROM airlines",
        -16.553661346435547
      ],
      [
        "SELECT Count ( * ) FROM airlines WHERE Airline < value",
        -16.588666915893555
      ],
      [
        "SELECT Count ( Count ( * ) ) FROM airlines WHERE Airline = value",
        -16.89618492126465
      ],
      [
        "SELECT Count ( DISTINCT * ) FROM airlines WHERE Airline = value",
        -17.11129379272461
      ],
      [
        "SELECT Count ( * ) FROM airlines WHERE Airline = value LIMIT value",
        -17.183748245239258
      ],
      [
        "SELECT Count ( * ) FROM airlines WHERE DISTINCT Airline = value",
        -17.23549461364746
      ],
      [
        "SELECT Sum ( * ) FROM airlines WHERE Airline = value",
        -17.379617393016815
      ],
      [
        "SELECT Sum ( T2.FlightNo ) FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Airline = value",
        -17.39126229286194
      ],
      [
        "SELECT Count ( * ) FROM airlines WHERE Airline IN ( SELECT Airline FROM airlines WHERE Airline = value )",
        -18.159750819206238
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM airlines WHERE Airline = \"JetBlue Airways\"",
    "predicted_parse": "SELECT Count ( * ) FROM airlines WHERE Airline = value",
    "predicted_parse_explanation": [
      "find the number of rows in airlines table whose airline name equals JetBlue Airways"
    ],
    "template_feedback": "additionally use the information from the flights table besides the airlines table .",
    "primary_span": [
      [
        0,
        7
      ]
    ],
    "secondary_span": [
      [
        8,
        12
      ]
    ],
    "edits": [
      "flights"
    ],
    "edits_original": "< from > add flights </ from >"
  },
  {
    "db_id": "student_transcripts_tracking",
    "feedback": "Ensure that course id of courses table present in course id of student enrolment courses table .",
    "question": "What are the names of all courses that have some students enrolled?",
    "gold_parse": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id",
    "beam": [
      [
        "SELECT course_name FROM Courses",
        -0.023763656616210938
      ],
      [
        "SELECT DISTINCT course_name FROM Courses",
        -3.75264310836792
      ],
      [
        "SELECT T1.course_name FROM Courses AS T1 JOIN Degree_Programs AS T2 JOIN Student_Enrolment AS T3 ON T3.degree_program_id = T2.degree_program_id JOIN Student_Enrolment_Courses AS T4 ON T1.course_id = T4.course_id AND T4.student_enrolment_id = T3.student_enrolment_id WHERE T2.degree_summary_name = value",
        -11.562854826450348
      ],
      [
        "SELECT T1.course_name FROM Courses AS T1 JOIN Semesters AS T2 JOIN Student_Enrolment AS T3 ON T3.semester_id = T2.semester_id JOIN Student_Enrolment_Courses AS T4 ON T1.course_id = T4.course_id AND T4.student_enrolment_id = T3.student_enrolment_id WHERE T2.semester_name = value",
        -12.281922578811646
      ],
      [
        "SELECT course_name FROM Courses INTERSECT SELECT course_name FROM Courses",
        -12.827349662780762
      ],
      [
        "SELECT course_name FROM Courses EXCEPT SELECT course_name FROM Courses",
        -13.703542709350586
      ],
      [
        "SELECT course_name FROM Courses WHERE course_description = value",
        -14.038986921310425
      ],
      [
        "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id WHERE T2.student_enrolment_id = value",
        -14.058319807052612
      ],
      [
        "SELECT course_name FROM Courses GROUP BY course_name HAVING Count ( * ) = value",
        -14.11402416229248
      ],
      [
        "SELECT DISTINCT course_name FROM Courses",
        -14.283135414123535
      ],
      [
        "SELECT T1.course_name , T2.degree_summary_name FROM Courses AS T1 JOIN Degree_Programs AS T2 JOIN Student_Enrolment AS T3 ON T3.degree_program_id = T2.degree_program_id JOIN Student_Enrolment_Courses AS T4 ON T1.course_id = T4.course_id AND T4.student_enrolment_id = T3.student_enrolment_id",
        -14.354419887065887
      ],
      [
        "SELECT T1.course_name FROM Courses AS T1 JOIN Students AS T2 JOIN Student_Enrolment AS T3 ON T3.student_id = T2.student_id JOIN Student_Enrolment_Courses AS T4 ON T1.course_id = T4.course_id AND T4.student_enrolment_id = T3.student_enrolment_id WHERE T2.ssn = value",
        -14.871387243270874
      ],
      [
        "SELECT T1.course_name FROM Courses AS T1 JOIN Semesters AS T2 JOIN Student_Enrolment AS T3 ON T3.semester_id = T2.semester_id JOIN Student_Enrolment_Courses AS T4 ON T1.course_id = T4.course_id AND T4.student_enrolment_id = T3.student_enrolment_id WHERE T2.semester_description = value",
        -15.335835456848145
      ],
      [
        "SELECT course_name FROM Courses UNION SELECT course_name FROM Courses",
        -15.498984336853027
      ],
      [
        "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment AS T2 JOIN Student_Enrolment_Courses AS T3 ON T1.course_id = T3.course_id AND T3.student_enrolment_id = T2.student_enrolment_id WHERE T2.student_id = value",
        -15.552769184112549
      ],
      [
        "SELECT Count ( DISTINCT course_name ) FROM Courses",
        -16.837276458740234
      ],
      [
        "SELECT course_name FROM Courses LIMIT value",
        -17.191564559936523
      ],
      [
        "SELECT Count ( * ) FROM Addresses",
        -17.540230751037598
      ],
      [
        "SELECT degree_summary_name FROM Degree_Programs",
        -17.6543607711792
      ],
      [
        "SELECT Count ( course_name ) FROM Courses",
        -17.746272087097168
      ]
    ],
    "predicted_parse_with_values": "SELECT course_name FROM Courses",
    "predicted_parse": "SELECT course_name FROM Courses",
    "predicted_parse_explanation": [
      "find the course name in courses table"
    ],
    "template_feedback": "additionally use the information from the student enrolment courses table besides the courses table . make sure no repetition in the results .",
    "primary_span": [
      [
        0,
        9
      ],
      [
        15,
        22
      ]
    ],
    "secondary_span": [
      [
        10,
        14
      ]
    ],
    "edits": [
      "distinct",
      "student enrolment courses"
    ],
    "edits_original": "< select > add distinct </ select > < from > add student enrolment courses </ from >"
  },
  {
    "db_id": "flight_2",
    "feedback": "Airlines table should be used in place of airports table.",
    "question": "How many airports do we have?",
    "gold_parse": "SELECT count(*) FROM AIRPORTS",
    "beam": [
      [
        "SELECT Count ( * ) FROM airlines",
        -1.621246337890625e-05
      ],
      [
        "SELECT Sum ( * ) FROM airlines",
        -12.109508275985718
      ],
      [
        "SELECT Sum ( AirportName ) FROM airports",
        -13.313669681549072
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE City = value",
        -13.51682448387146
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM airlines",
        -14.010265350341797
      ],
      [
        "SELECT Sum ( AirportCode ) FROM airports",
        -14.097557544708252
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE AirportName = value",
        -14.236374616622925
      ],
      [
        "SELECT Avg ( * ) FROM airlines",
        -14.309602737426758
      ],
      [
        "SELECT Count ( * ) FROM airports GROUP BY AirportCode",
        -14.33113181591034
      ],
      [
        "SELECT Count ( * ) , City FROM airports",
        -14.735226154327393
      ],
      [
        "SELECT Count ( * ) , AirportName FROM airports",
        -14.795577585697174
      ],
      [
        "SELECT Count ( Count ( * ) ) FROM airlines",
        -15.200848579406738
      ],
      [
        "SELECT Sum ( City ) FROM airports",
        -15.349148273468018
      ],
      [
        "SELECT Sum ( Country ) FROM airports",
        -15.650652885437012
      ],
      [
        "SELECT Sum ( CountryAbbrev ) FROM airports",
        -16.03415822982788
      ],
      [
        "SELECT Count ( * ) FROM airports ORDER BY AirportCode Desc",
        -16.09007215499878
      ],
      [
        "SELECT Avg ( AirportName ) FROM airports",
        -16.244428873062134
      ],
      [
        "SELECT Avg ( AirportCode ) FROM airports",
        -16.389117002487183
      ],
      [
        "SELECT Count ( DISTINCT AirportName ) FROM airports",
        -16.438651084899902
      ],
      [
        "SELECT Count ( AirportName ) FROM airports",
        -16.8323917388916
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM airlines",
    "predicted_parse": "SELECT Count ( * ) FROM airlines",
    "predicted_parse_explanation": [
      "find the number of rows in airlines table"
    ],
    "template_feedback": "use airports table in place of airlines table .",
    "primary_span": [
      [
        0,
        2
      ]
    ],
    "secondary_span": [
      [
        3,
        8
      ]
    ],
    "edits": [
      "airports",
      "airlines"
    ],
    "edits_original": "< from > add airports </ from > < from > remove airlines </ from >"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "feedback": "Ensure that template is used in a Document .",
    "question": "What are the distinct template type descriptions for the templates ever used by any document?",
    "gold_parse": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID",
    "beam": [
      [
        "SELECT DISTINCT Template_Type_Description FROM Ref_Template_Types",
        -0.00036525726318359375
      ],
      [
        "SELECT DISTINCT Template_Type_Description FROM Ref_Template_Types INTERSECT SELECT DISTINCT Template_Type_Description FROM Ref_Template_Types",
        -8.74991226196289
      ],
      [
        "SELECT DISTINCT T1.Template_Type_Description FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID WHERE T3.Document_Name = value",
        -8.895495891571045
      ],
      [
        "SELECT Template_Type_Description FROM Ref_Template_Types",
        -11.264639854431152
      ],
      [
        "SELECT Template_Type_Description FROM Ref_Template_Types",
        -11.795894622802734
      ],
      [
        "SELECT DISTINCT DISTINCT Template_Type_Description FROM Ref_Template_Types",
        -11.952308654785156
      ],
      [
        "SELECT DISTINCT Template_Type_Code FROM Templates",
        -12.503264427185059
      ],
      [
        "SELECT DISTINCT T1.Template_Type_Description FROM Ref_Template_Types AS T1 INTERSECT SELECT DISTINCT T2.Document_Description FROM Documents AS T2",
        -12.735085487365723
      ],
      [
        "SELECT DISTINCT T1.Template_Type_Description FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID WHERE T3.Document_Description = value",
        -12.745207071304321
      ],
      [
        "SELECT DISTINCT Template_Type_Description FROM Ref_Template_Types ORDER BY Template_Type_Description Asc",
        -13.168532371520996
      ],
      [
        "SELECT DISTINCT Template_Type_Description FROM Ref_Template_Types EXCEPT SELECT DISTINCT Template_Type_Description FROM Ref_Template_Types",
        -13.227937698364258
      ],
      [
        "SELECT DISTINCT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = Template_Type_Description",
        -13.258112907409668
      ],
      [
        "SELECT DISTINCT T1.Template_Type_Description FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID WHERE T3.Document_Name = T1.Template_Type_Description",
        -13.608211040496826
      ],
      [
        "SELECT DISTINCT T1.Template_Type_Description FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T2.Version_Number = value",
        -14.038062572479248
      ],
      [
        "SELECT DISTINCT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Description = value",
        -14.177614688873291
      ],
      [
        "SELECT DISTINCT T1.Template_Type_Description FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code GROUP BY T2.Template_Type_Code",
        -14.432313919067383
      ],
      [
        "SELECT DISTINCT Template_Type_Description FROM Ref_Template_Types LIMIT value",
        -16.89728832244873
      ],
      [
        "SELECT DISTINCT Count ( DISTINCT Template_Type_Description ) FROM Ref_Template_Types",
        -16.99497890472412
      ],
      [
        "SELECT DISTINCT Count ( Template_Type_Description ) FROM Ref_Template_Types",
        -17.329126358032227
      ],
      [
        "SELECT DISTINCT Template_Type_Code FROM Ref_Template_Types",
        -17.861717224121094
      ]
    ],
    "predicted_parse_with_values": "SELECT DISTINCT Template_Type_Description FROM Ref_Template_Types",
    "predicted_parse": "SELECT DISTINCT Template_Type_Description FROM Ref_Template_Types",
    "predicted_parse_explanation": [
      "find without repetition template type description in reference template types table"
    ],
    "template_feedback": "additionally use the information from the templates table and documents table besides the reference template types table .",
    "primary_span": [
      [
        0,
        10
      ]
    ],
    "secondary_span": [
      [
        11,
        17
      ]
    ],
    "edits": [
      "templates",
      "documents"
    ],
    "edits_original": "< from > add templates </ from > < from > add documents </ from >"
  },
  {
    "db_id": "student_transcripts_tracking",
    "feedback": "Exchange email address with current address id .",
    "question": "What are the different addresses that have students living there?",
    "gold_parse": "SELECT count(DISTINCT current_address_id) FROM Students",
    "beam": [
      [
        "SELECT DISTINCT email_address FROM Students",
        -8.0108642578125e-05
      ],
      [
        "SELECT email_address FROM Students",
        -10.45335578918457
      ],
      [
        "SELECT DISTINCT DISTINCT email_address FROM Students",
        -10.678116798400879
      ],
      [
        "SELECT DISTINCT current_address_id FROM Students",
        -11.137277603149414
      ],
      [
        "SELECT DISTINCT Count ( DISTINCT email_address ) FROM Students",
        -12.975712776184082
      ],
      [
        "SELECT DISTINCT T2.email_address FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id WHERE T1.country = value",
        -13.070198714733124
      ],
      [
        "SELECT email_address FROM Students",
        -13.485272407531738
      ],
      [
        "SELECT DISTINCT email_address FROM Students WHERE student_id = value",
        -13.761181950569153
      ],
      [
        "SELECT DISTINCT permanent_address_id FROM Students",
        -14.062080383300781
      ],
      [
        "SELECT DISTINCT email_address FROM Students ORDER BY email_address Asc",
        -14.65409231185913
      ],
      [
        "SELECT DISTINCT email_address FROM Students WHERE student_id = email_address",
        -14.865323662757874
      ],
      [
        "SELECT DISTINCT email_address , current_address_id FROM Students",
        -15.100528001785278
      ],
      [
        "SELECT DISTINCT Avg ( email_address ) FROM Students",
        -15.422493934631348
      ],
      [
        "SELECT DISTINCT T2.email_address FROM Semesters AS T1 JOIN Students AS T2 JOIN Student_Enrolment AS T3 ON T1.semester_id = T3.semester_id AND T3.student_id = T2.student_id WHERE T1.semester_description = value",
        -15.663930177688599
      ],
      [
        "SELECT DISTINCT email_address FROM Students WHERE ssn = value",
        -15.694071769714355
      ],
      [
        "SELECT DISTINCT email_address FROM Students ORDER BY student_id Asc",
        -16.157789707183838
      ],
      [
        "SELECT DISTINCT email_address FROM Students LIMIT value",
        -17.125469207763672
      ],
      [
        "SELECT Count ( DISTINCT email_address ) FROM Students",
        -17.304311752319336
      ],
      [
        "SELECT DISTINCT Count ( email_address ) FROM Students",
        -17.361473083496094
      ],
      [
        "SELECT DISTINCT Min ( email_address ) FROM Students",
        -17.59848976135254
      ]
    ],
    "predicted_parse_with_values": "SELECT DISTINCT email_address FROM Students",
    "predicted_parse": "SELECT DISTINCT email_address FROM Students",
    "predicted_parse_explanation": [
      "find without repetition email address in students table"
    ],
    "template_feedback": "find number of different current address id in place of email address . permit repetitions in the results .",
    "primary_span": [
      [
        0,
        6
      ],
      [
        13,
        18
      ]
    ],
    "secondary_span": [
      [
        7,
        12
      ]
    ],
    "edits": [
      "number of distinct current address id",
      "distinct",
      "email address"
    ],
    "edits_original": "< select > add number of distinct current address id </ select > < select > remove distinct </ select > < select > remove email address </ select >"
  },
  {
    "db_id": "world_1",
    "feedback": "Find language of countrylanguage for which is official is T and corresponding country's name name equals Aruba .",
    "question": "What language is predominantly spoken in Aruba?",
    "gold_parse": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1",
    "beam": [
      [
        "SELECT Name FROM country WHERE Continent = value",
        -0.6618313789367676
      ],
      [
        "SELECT LocalName FROM country WHERE Continent = value",
        -0.7728261947631836
      ],
      [
        "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = value",
        -4.065793991088867
      ],
      [
        "SELECT Population FROM country WHERE Continent = value",
        -5.793560981750488
      ],
      [
        "SELECT LifeExpectancy FROM country WHERE Continent = value",
        -6.974320411682129
      ],
      [
        "SELECT HeadOfState FROM country WHERE Continent = value",
        -7.800018310546875
      ],
      [
        "SELECT Continent FROM country WHERE Continent = value",
        -7.970248222351074
      ],
      [
        "SELECT Code FROM country WHERE Continent = value",
        -8.68500804901123
      ],
      [
        "SELECT Code2 FROM country WHERE Continent = value",
        -8.835698127746582
      ],
      [
        "SELECT Region FROM country WHERE Continent = value",
        -10.553006172180176
      ],
      [
        "SELECT * FROM country WHERE Continent = value",
        -10.667535781860352
      ],
      [
        "SELECT Name FROM country WHERE LocalName = value",
        -10.680063724517822
      ],
      [
        "SELECT LocalName FROM country WHERE LocalName = value",
        -10.727278709411621
      ],
      [
        "SELECT T2.IsOfficial FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = value",
        -10.863576889038086
      ],
      [
        "SELECT T1.name FROM sqlite_sequence AS T1 JOIN country AS T2 WHERE T2.Continent = value",
        -11.177769660949707
      ],
      [
        "SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = value",
        -11.197294235229492
      ],
      [
        "SELECT GovernmentForm FROM country WHERE Continent = value",
        -11.214778900146484
      ],
      [
        "SELECT SurfaceArea FROM country WHERE Continent = value",
        -12.008260726928711
      ],
      [
        "SELECT GNPOld FROM country WHERE Continent = value",
        -12.335891723632812
      ],
      [
        "SELECT GNP FROM country WHERE Continent = value",
        -12.37528133392334
      ]
    ],
    "predicted_parse_with_values": "SELECT Name FROM country WHERE Continent = \"Aruba\"",
    "predicted_parse": "SELECT Name FROM country WHERE Continent = value",
    "predicted_parse_explanation": [
      "find the name in country table whose continent equals Aruba"
    ],
    "template_feedback": "additionally use the information from the countrylanguage table besides the country table . consider the name equals Aruba conditions in place of the continent equals Aruba conditions . find language in place of name . find the result with the largest percentage .",
    "primary_span": [
      [
        0,
        7
      ],
      [
        13,
        18
      ],
      [
        28,
        29
      ],
      [
        35,
        42
      ]
    ],
    "secondary_span": [
      [
        8,
        12
      ],
      [
        19,
        27
      ],
      [
        30,
        34
      ]
    ],
    "edits": [
      "language",
      "name",
      "countrylanguage",
      "name equals \"Aruba\"",
      "continent equals \"Aruba\"",
      "percentage",
      "descending",
      "1"
    ],
    "edits_original": "< select > add language </ select > < select > remove name </ select > < from > add countrylanguage </ from > < where > add name equals \" Aruba \" </ where > < where > remove continent equals \" Aruba \" </ where > < orderBy > add percentage </ orderBy > < orderBy > add descending </ orderBy > < limit > add 1 </ limit >"
  },
  {
    "db_id": "real_estate_properties",
    "feedback": "feature not feature types",
    "question": "How many available features are there in total?",
    "gold_parse": "SELECT count(*) FROM Other_Available_Features",
    "beam": [
      [
        "SELECT Count ( * ) FROM Ref_Feature_Types",
        -4.1961669921875e-05
      ],
      [
        "SELECT Sum ( * ) FROM Ref_Feature_Types",
        -10.467498004436493
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM Ref_Feature_Types",
        -13.353958129882812
      ],
      [
        "SELECT Count ( * ) , feature_name FROM Other_Available_Features",
        -14.455321550369263
      ],
      [
        "SELECT Count ( * ) FROM Ref_Feature_Types GROUP BY *",
        -14.51349025964737
      ],
      [
        "SELECT Avg ( * ) FROM Ref_Feature_Types",
        -14.711453676223755
      ],
      [
        "SELECT Count ( * ) FROM Other_Available_Features WHERE feature_name = value",
        -14.74610048532486
      ],
      [
        "SELECT Count ( Count ( * ) ) FROM Ref_Feature_Types",
        -14.8526029586792
      ],
      [
        "SELECT Count ( * ) , shp_feature_1 FROM Properties",
        -14.99008560180664
      ],
      [
        "SELECT Count ( * ) , feature_type_name FROM Ref_Feature_Types",
        -15.095819473266602
      ],
      [
        "SELECT Sum ( shp_feature_1 ) FROM Properties",
        -15.8223237991333
      ],
      [
        "SELECT Sum ( shp_feature_2 ) FROM Properties",
        -16.03023910522461
      ],
      [
        "SELECT Count ( Avg ( * ) ) FROM Ref_Feature_Types",
        -16.249998092651367
      ],
      [
        "SELECT Max ( * ) FROM Ref_Feature_Types",
        -16.27239203453064
      ],
      [
        "SELECT Sum ( shp_feature_3 ) FROM Properties",
        -16.273423671722412
      ],
      [
        "SELECT Sum ( room_count ) FROM Properties",
        -16.451940536499023
      ],
      [
        "SELECT Sum ( feature_description ) FROM Other_Available_Features",
        -16.484993934631348
      ],
      [
        "SELECT Count ( * ) FROM Properties ORDER BY shp_feature_2 Desc",
        -16.49053716659546
      ],
      [
        "SELECT Sum ( oth_feature_2 ) FROM Properties",
        -16.52048110961914
      ],
      [
        "SELECT Sum ( oth_feature_1 ) FROM Properties",
        -16.55971908569336
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM Ref_Feature_Types",
    "predicted_parse": "SELECT Count ( * ) FROM Ref_Feature_Types",
    "predicted_parse_explanation": [
      "find the number of rows in reference feature types table"
    ],
    "template_feedback": "use other available features table in place of reference feature types table .",
    "primary_span": [
      [
        0,
        4
      ]
    ],
    "secondary_span": [
      [
        5,
        12
      ]
    ],
    "edits": [
      "other available features",
      "reference feature types"
    ],
    "edits_original": "< from > add other available features </ from > < from > remove reference feature types </ from >"
  },
  {
    "db_id": "wta_1",
    "feedback": "You should identify the value of each player's country code with number that corresponds to the value of rows.",
    "question": "What are the codes of countries with more than 50 players?",
    "gold_parse": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50",
    "beam": [
      [
        "SELECT country_code FROM players WHERE player_id > value",
        -0.8882482051849365
      ],
      [
        "SELECT T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_age > value",
        -1.1442606449127197
      ],
      [
        "SELECT country_code FROM players WHERE birth_date > value",
        -2.332174301147461
      ],
      [
        "SELECT T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.winner_age > value",
        -3.026690721511841
      ],
      [
        "SELECT T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_rank_points > value",
        -3.5801565647125244
      ],
      [
        "SELECT T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ht > value",
        -4.143917083740234
      ],
      [
        "SELECT T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_rank > value",
        -4.357598304748535
      ],
      [
        "SELECT T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.winner_rank_points > value",
        -4.603514194488525
      ],
      [
        "SELECT T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.best_of > value",
        -4.672457218170166
      ],
      [
        "SELECT T1.country_code FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id WHERE T2.ranking_points > value",
        -4.720440864562988
      ],
      [
        "SELECT T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.winner_ht > value",
        -4.725170135498047
      ],
      [
        "SELECT T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.draw_size > value",
        -4.836588382720947
      ],
      [
        "SELECT country_code FROM players GROUP BY country_code HAVING Count ( * ) > value",
        -4.874534606933594
      ],
      [
        "SELECT T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.score > value",
        -5.235794544219971
      ],
      [
        "SELECT T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.match_num > value",
        -5.673460483551025
      ],
      [
        "SELECT T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.winner_rank > value",
        -6.348958969116211
      ],
      [
        "SELECT T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.tourney_id > value",
        -6.785452842712402
      ],
      [
        "SELECT T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.minutes > value",
        -6.905877113342285
      ],
      [
        "SELECT T1.country_code FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id WHERE T2.ranking > value",
        -7.2909722328186035
      ],
      [
        "SELECT country_code FROM players",
        -10.635347366333008
      ]
    ],
    "predicted_parse_with_values": "SELECT country_code FROM players WHERE player_id > 50",
    "predicted_parse": "SELECT country_code FROM players WHERE player_id > value",
    "predicted_parse_explanation": [
      "find the country code in players table whose player id greater than 50"
    ],
    "template_feedback": "remove the player id greater than 50 conditions . find for each value of country code whose number of rows greater than 50 .",
    "primary_span": [
      [
        0,
        8
      ],
      [
        9,
        23
      ]
    ],
    "secondary_span": [],
    "edits": [
      "player id greater than 50",
      "country code",
      "number of rows greater than 50"
    ],
    "edits_original": "< where > remove player id greater than 50 </ where > < groupBy > add country code </ groupBy > < having > add number of rows greater than 50 </ having >"
  },
  {
    "db_id": "wta_1",
    "feedback": "Provide me the rank of loser repeating frequently.",
    "question": "What is the best rank of losers across all matches?",
    "gold_parse": "SELECT min(loser_rank) FROM matches",
    "beam": [
      [
        "SELECT loser_rank FROM matches",
        -0.8407077789306641
      ],
      [
        "SELECT loser_rank FROM matches ORDER BY loser_rank_points Asc LIMIT value",
        -1.8466863632202148
      ],
      [
        "SELECT Min ( winner_rank ) FROM matches",
        -1.9182109832763672
      ],
      [
        "SELECT loser_rank FROM matches ORDER BY winner_rank_points Asc LIMIT value",
        -2.019693374633789
      ],
      [
        "SELECT loser_rank FROM matches ORDER BY winner_rank Asc LIMIT value",
        -3.1236534118652344
      ],
      [
        "SELECT winner_rank FROM matches",
        -3.6114273071289062
      ],
      [
        "SELECT Min ( loser_rank ) FROM matches",
        -4.256950378417969
      ],
      [
        "SELECT Min ( winner_rank_points ) FROM matches",
        -4.398412704467773
      ],
      [
        "SELECT Min ( loser_rank_points ) FROM matches",
        -4.982822418212891
      ],
      [
        "SELECT T2.loser_rank FROM players AS T1 JOIN matches AS T2 ON T2.loser_id = T1.player_id JOIN rankings AS T3 ON T1.player_id = T3.player_id ORDER BY T3.ranking_points Asc LIMIT value",
        -5.179088592529297
      ],
      [
        "SELECT winner_rank FROM matches ORDER BY loser_rank_points Asc LIMIT value",
        -5.261373519897461
      ],
      [
        "SELECT loser_rank FROM matches ORDER BY loser_rank Asc LIMIT value",
        -5.377179145812988
      ],
      [
        "SELECT winner_rank FROM matches ORDER BY winner_rank_points Asc LIMIT value",
        -5.493350982666016
      ],
      [
        "SELECT Max ( winner_rank ) FROM matches",
        -6.995035171508789
      ],
      [
        "SELECT score FROM matches",
        -8.426390647888184
      ],
      [
        "SELECT Min ( ranking_points ) FROM rankings",
        -8.673299789428711
      ],
      [
        "SELECT Max ( winner_rank_points ) FROM matches",
        -8.96491813659668
      ],
      [
        "SELECT Max ( loser_rank ) FROM matches",
        -9.660511016845703
      ],
      [
        "SELECT Max ( loser_rank_points ) FROM matches",
        -9.75063705444336
      ],
      [
        "SELECT Min ( score ) FROM matches",
        -10.06738567352295
      ]
    ],
    "predicted_parse_with_values": "SELECT loser_rank FROM matches",
    "predicted_parse": "SELECT loser_rank FROM matches",
    "predicted_parse_explanation": [
      "find the loser rank in matches table"
    ],
    "template_feedback": "find minimum loser rank in place of loser rank .",
    "primary_span": [
      [
        0,
        3
      ]
    ],
    "secondary_span": [
      [
        4,
        9
      ]
    ],
    "edits": [
      "minimum loser rank",
      "loser rank"
    ],
    "edits_original": "< select > add minimum loser rank </ select > < select > remove loser rank </ select >"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "feedback": "Use paragraph text in step 2 and omit name of document.",
    "question": "What are the details for the paragraph that includes the text 'Korea'?",
    "gold_parse": "SELECT Other_Details FROM Paragraphs WHERE paragraph_text  =  'Korea'",
    "beam": [
      [
        "SELECT T2.Other_Details FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Name LIKE value",
        -0.35921764373779297
      ],
      [
        "SELECT T2.Other_Details FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Name = value",
        -1.214223861694336
      ],
      [
        "SELECT Other_Details FROM Paragraphs WHERE Paragraph_Text LIKE value",
        -5.555529594421387
      ],
      [
        "SELECT Other_Details FROM Documents WHERE Document_Name LIKE value",
        -7.840925216674805
      ],
      [
        "SELECT Other_Details FROM Paragraphs WHERE Paragraph_Text = value",
        -8.559688568115234
      ],
      [
        "SELECT * FROM Documents WHERE Document_Name LIKE value",
        -8.805096626281738
      ],
      [
        "SELECT Other_Details FROM Documents WHERE Document_Name = value",
        -8.943573951721191
      ],
      [
        "SELECT * FROM Documents WHERE Document_Name = value",
        -9.859214782714844
      ],
      [
        "SELECT T2.Other_Details FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Description LIKE value",
        -11.082366943359375
      ],
      [
        "SELECT T2.Other_Details FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Name = value AND T1.Document_Name = value",
        -12.373962879180908
      ],
      [
        "SELECT T1.Template_Details FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Document_Name LIKE value",
        -12.423855781555176
      ],
      [
        "SELECT T1.Other_Details FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Paragraph_Text LIKE value",
        -13.008567810058594
      ],
      [
        "SELECT T2.Other_Details FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Name ! = value",
        -13.025856018066406
      ],
      [
        "SELECT Other_Details FROM Paragraphs WHERE Other_Details LIKE value",
        -13.284625053405762
      ],
      [
        "SELECT T2.Other_Details FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Name BETWEEN value AND value",
        -13.367358207702637
      ],
      [
        "SELECT T1.Template_Details FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Document_Name = value",
        -13.821106910705566
      ],
      [
        "SELECT Document_Description FROM Documents WHERE Document_Name LIKE value",
        -13.960509300231934
      ],
      [
        "SELECT * FROM Paragraphs WHERE Paragraph_Text LIKE value",
        -13.974610328674316
      ],
      [
        "SELECT T2.Other_Details FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Name = value AND T2.Paragraph_Text = value",
        -14.308390617370605
      ],
      [
        "SELECT T2.Other_Details FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Name < value",
        -14.319156646728516
      ]
    ],
    "predicted_parse_with_values": "SELECT T2.Other_Details FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Name LIKE \"Korea\"",
    "predicted_parse": "SELECT T2.Other_Details FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Name LIKE value",
    "predicted_parse_explanation": [
      "Step 1: for each row in documents table , find the corresponding rows in paragraphs table",
      "Step 2: find the paragraphs 's other details of the results of step 1 whose document name like Korea"
    ],
    "template_feedback": "in step 1 , do not use the documents table . in step 2 , consider the paragraph text equals Korea conditions in place of the document name like Korea conditions .",
    "primary_span": [
      [
        4,
        10
      ],
      [
        15,
        21
      ]
    ],
    "secondary_span": [
      [
        4,
        10
      ],
      [
        22,
        31
      ]
    ],
    "edits": [
      "documents",
      "paragraph text equals \"Korea\"",
      "document name like \"Korea\""
    ],
    "edits_original": "< from > remove documents </ from > < where > add paragraph text equals \" Korea \" </ where > < where > remove document name like \" Korea \" </ where >"
  },
  {
    "db_id": "student_transcripts_tracking",
    "feedback": "In step 1 exchange courses with sections .",
    "question": "What are the names and id of courses having at most 2 sections?",
    "gold_parse": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2",
    "beam": [
      [
        "SELECT course_name , course_id FROM Courses GROUP BY course_id HAVING Count ( * ) < = value",
        -0.02412700653076172
      ],
      [
        "SELECT T1.course_name , T1.course_id FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id HAVING Count ( * ) < = value",
        -3.766681671142578
      ],
      [
        "SELECT course_name , course_id FROM Courses GROUP BY course_id ORDER BY Count ( * ) Desc LIMIT value",
        -8.47860050201416
      ],
      [
        "SELECT T1.course_name , T1.course_id FROM Courses AS T1 GROUP BY T1.course_id HAVING Count ( * ) > value UNION SELECT T1.course_name , T1.course_id FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id HAVING Count ( * ) = value",
        -9.380423545837402
      ],
      [
        "SELECT course_name , course_id FROM Courses GROUP BY course_id HAVING Count ( * ) > value UNION SELECT course_name , course_id FROM Courses GROUP BY course_id HAVING Count ( * ) = value",
        -9.447033882141113
      ],
      [
        "SELECT course_name , course_id FROM Courses GROUP BY course_id HAVING Count ( * ) > value",
        -10.386966705322266
      ],
      [
        "SELECT course_name , course_id FROM Courses GROUP BY course_id HAVING Sum ( * ) < = value",
        -10.623193264007568
      ],
      [
        "SELECT course_name , course_id FROM Courses GROUP BY course_id HAVING Count ( * ) > = value",
        -10.95858097076416
      ],
      [
        "SELECT course_name , course_id FROM Courses GROUP BY course_id HAVING Count ( * ) > value OR Count ( * ) = value",
        -11.292497634887695
      ],
      [
        "SELECT T1.course_name , T1.course_id FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id HAVING Count ( * ) > = value",
        -11.643856048583984
      ],
      [
        "SELECT course_name , course_id FROM Courses GROUP BY course_id HAVING Count ( * ) > value UNION SELECT course_name , course_id FROM Courses",
        -11.796857833862305
      ],
      [
        "SELECT course_name , course_id FROM Courses GROUP BY course_id HAVING Count ( * ) < = value EXCEPT SELECT course_name , course_id FROM Courses",
        -11.984366416931152
      ],
      [
        "SELECT T1.course_name , T2.course_id FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id HAVING Count ( * ) < = value",
        -12.128340721130371
      ],
      [
        "SELECT T1.course_name , T1.course_id FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id ORDER BY Count ( * ) Desc LIMIT value",
        -12.352149963378906
      ],
      [
        "SELECT course_name , course_id FROM Courses EXCEPT SELECT course_name , course_id FROM Courses GROUP BY course_id HAVING Count ( * ) > value",
        -12.703500747680664
      ],
      [
        "SELECT course_name , course_id FROM Courses",
        -12.874043464660645
      ],
      [
        "SELECT T1.course_name , T1.course_id FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id HAVING Count ( * ) > value",
        -13.240339279174805
      ],
      [
        "SELECT course_name FROM Courses GROUP BY course_id HAVING Count ( * ) < = value",
        -13.482592582702637
      ],
      [
        "SELECT DISTINCT course_name , course_id FROM Courses GROUP BY course_id HAVING Count ( * ) < = value",
        -13.557889938354492
      ],
      [
        "SELECT course_name , course_id FROM Courses GROUP BY course_id",
        -13.575100898742676
      ]
    ],
    "predicted_parse_with_values": "SELECT course_name , course_id FROM Courses GROUP BY course_id HAVING Count ( * ) < = 2",
    "predicted_parse": "SELECT course_name , course_id FROM Courses GROUP BY course_id HAVING Count ( * ) < = value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of course id in courses table",
      "Step 2: find the course name and course id in courses table whose corresponding value in step 1 is less than or equals 2"
    ],
    "template_feedback": "in step 1 , additionally use the information from the sections table besides the courses table .",
    "primary_span": [
      [
        4,
        11
      ]
    ],
    "secondary_span": [
      [
        12,
        16
      ]
    ],
    "edits": [
      "sections"
    ],
    "edits_original": "< from > add sections </ from >"
  },
  {
    "db_id": "dog_kennels",
    "feedback": "Find charge type of charges table with largest value of charge amount .",
    "question": "How much does the most expensive charge type costs?",
    "gold_parse": "SELECT max(charge_amount) FROM Charges",
    "beam": [
      [
        "SELECT T1.treatment_type_code FROM Treatment_Types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T2.treatment_type_code ORDER BY Count ( * ) Desc LIMIT value",
        -0.45294952392578125
      ],
      [
        "SELECT treatment_type_code FROM Treatment_Types GROUP BY treatment_type_code ORDER BY Count ( * ) Desc LIMIT value",
        -1.3060169219970703
      ],
      [
        "SELECT T1.treatment_type_code FROM Treatment_Types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code ORDER BY T2.cost_of_treatment Desc LIMIT value",
        -3.2013602256774902
      ],
      [
        "SELECT T2.treatment_type_code FROM Treatment_Types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY Count ( * ) Desc LIMIT value",
        -3.9651217460632324
      ],
      [
        "SELECT treatment_type_code FROM Treatments GROUP BY treatment_type_code ORDER BY Count ( * ) Desc LIMIT value",
        -4.048014163970947
      ],
      [
        "SELECT T2.treatment_type_code FROM Charges AS T1 JOIN Treatment_Types AS T2 ORDER BY T1.charge_amount Desc LIMIT value",
        -5.403221607208252
      ],
      [
        "SELECT T1.treatment_type_description FROM Treatment_Types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T2.treatment_type_code ORDER BY Count ( * ) Desc LIMIT value",
        -5.701404094696045
      ],
      [
        "SELECT treatment_type_description FROM Treatment_Types GROUP BY treatment_type_code ORDER BY Count ( * ) Desc LIMIT value",
        -6.053025722503662
      ],
      [
        "SELECT treatment_type_code FROM Treatment_Types ORDER BY treatment_type_code Desc LIMIT value",
        -6.070357799530029
      ],
      [
        "SELECT T2.treatment_type_code FROM Charges AS T1 JOIN Treatment_Types AS T2 GROUP BY T1.charge_type ORDER BY Count ( * ) Desc LIMIT value",
        -6.914008140563965
      ],
      [
        "SELECT * FROM Treatments GROUP BY treatment_type_code ORDER BY Count ( * ) Desc LIMIT value",
        -7.329500198364258
      ],
      [
        "SELECT treatment_type_code FROM Treatments ORDER BY cost_of_treatment Desc LIMIT value",
        -7.823484420776367
      ],
      [
        "SELECT T1.treatment_type_description FROM Treatment_Types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code ORDER BY T2.cost_of_treatment Desc LIMIT value",
        -8.027169704437256
      ],
      [
        "SELECT T1.charge_type FROM Charges AS T1 JOIN Treatments AS T2 GROUP BY T2.treatment_type_code ORDER BY Count ( * ) Desc LIMIT value",
        -8.516753673553467
      ],
      [
        "SELECT T1.charge_type FROM Charges AS T1 JOIN Treatment_Types AS T2 GROUP BY T2.treatment_type_code ORDER BY Count ( * ) Desc LIMIT value",
        -8.656751155853271
      ],
      [
        "SELECT T1.treatment_type_code FROM Treatment_Types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T2.treatment_type_code ORDER BY Sum ( T2.cost_of_treatment ) Desc LIMIT value",
        -8.803060531616211
      ],
      [
        "SELECT treatment_type_code FROM Treatment_Types GROUP BY treatment_type_description ORDER BY Count ( * ) Desc LIMIT value",
        -9.443470001220703
      ],
      [
        "SELECT * FROM Treatment_Types GROUP BY treatment_type_code ORDER BY Count ( * ) Desc LIMIT value",
        -9.64848804473877
      ],
      [
        "SELECT T2.treatment_type_code FROM Charges AS T1 JOIN Treatments AS T2 ORDER BY T1.charge_amount Desc LIMIT value",
        -9.817453384399414
      ],
      [
        "SELECT * FROM Treatments ORDER BY cost_of_treatment Desc LIMIT value",
        -9.823158264160156
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.treatment_type_code FROM Treatment_Types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T2.treatment_type_code ORDER BY Count ( * ) Desc LIMIT 1",
    "predicted_parse": "SELECT T1.treatment_type_code FROM Treatment_Types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T2.treatment_type_code ORDER BY Count ( * ) Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: for each row in treatment types table , find the corresponding rows in treatments table",
      "Step 2: find the number of rows of each value of treatments 's treatment type code of the results of step 1",
      "Step 3: find the treatment types 's treatment type code of the results of step 1 with largest value in the results of step 2"
    ],
    "template_feedback": "in step 1 , use charges table in place of treatments table and treatment types table in step 2 , do not find for each value of treatments 's treatment type code . in step 3 , find maximum charge amount in place of treatment types 's treatment type code . you should not find the largest of the results . show me all the results .",
    "primary_span": [
      [
        4,
        6
      ],
      [
        20,
        32
      ],
      [
        37,
        40
      ],
      [
        51,
        66
      ]
    ],
    "secondary_span": [
      [
        7,
        15
      ],
      [
        41,
        50
      ]
    ],
    "edits": [
      "maximum charge amount",
      "treatment type code",
      "charges",
      "treatment types",
      "treatments",
      "treatment type code",
      "number of rows",
      "descending",
      "1"
    ],
    "edits_original": "< select > add maximum charge amount </ select > < select > remove treatment type code </ select > < from > add charges </ from > < from > remove treatment types </ from > < from > remove treatments </ from > < groupBy > remove treatment type code </ groupBy > < orderBy > remove number of rows </ orderBy > < orderBy > remove descending </ orderBy > < limit > remove 1 </ limit >"
  },
  {
    "db_id": "car_1",
    "feedback": "confirm that the cylinders is 8 or year is smaller than 1980 and substitute accelerate with mpg.",
    "question": "What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980?",
    "gold_parse": "SELECT mpg FROM CARS_DATA WHERE Cylinders  =  8 OR YEAR  <  1980 ORDER BY mpg DESC LIMIT 1",
    "beam": [
      [
        "SELECT Max ( Accelerate ) FROM cars_data WHERE Cylinders = value OR Year < value",
        -0.1578993797302246
      ],
      [
        "SELECT Max ( T3.Accelerate ) FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T1.Model = value OR T3.Year < value",
        -2.613572120666504
      ],
      [
        "SELECT Max ( Accelerate ) FROM cars_data WHERE Year = value OR Year < value",
        -2.734609603881836
      ],
      [
        "SELECT Max ( T4.Accelerate ) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id WHERE T1.Maker = value OR T4.Year < value",
        -5.53525447845459
      ],
      [
        "SELECT Max ( Accelerate ) FROM cars_data WHERE Edispl = value OR Year < value",
        -6.788417339324951
      ],
      [
        "SELECT Max ( Accelerate ) FROM cars_data WHERE Year = value OR Year = value",
        -6.860780715942383
      ],
      [
        "SELECT Max ( T4.Accelerate ) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id WHERE T1.FullName = value OR T4.Year < value",
        -8.553059577941895
      ],
      [
        "SELECT Max ( Accelerate ) FROM cars_data WHERE Accelerate = value OR Year < value",
        -8.563533782958984
      ],
      [
        "SELECT Max ( Accelerate ) FROM cars_data WHERE Cylinders LIKE value OR Year < value",
        -8.57313060760498
      ],
      [
        "SELECT Max ( T2.Accelerate ) FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T1.Model = value OR T2.Year < value",
        -8.765324592590332
      ],
      [
        "SELECT Max ( Accelerate ) FROM cars_data WHERE Cylinders = value OR Year > value",
        -9.022545337677002
      ],
      [
        "SELECT Max ( Accelerate ) FROM cars_data WHERE Horsepower = value OR Year < value",
        -9.103504180908203
      ],
      [
        "SELECT Max ( Accelerate ) FROM cars_data WHERE Year = value OR Year > value",
        -9.262205123901367
      ],
      [
        "SELECT Max ( Accelerate ) FROM cars_data WHERE Cylinders = value OR Year > = value",
        -9.348108768463135
      ],
      [
        "SELECT Max ( Cylinders ) FROM cars_data WHERE Cylinders = value OR Year < value",
        -9.686095714569092
      ],
      [
        "SELECT Max ( Accelerate ) FROM cars_data WHERE Cylinders = value OR Year = value",
        -9.696268558502197
      ],
      [
        "SELECT Max ( T3.Accelerate ) FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T1.ModelId = value OR T3.Year < value",
        -9.739611625671387
      ],
      [
        "SELECT Max ( Accelerate ) FROM cars_data WHERE MPG = value OR Year < value",
        -9.826900482177734
      ],
      [
        "SELECT Max ( Accelerate ) FROM cars_data WHERE Year = value OR Year > = value",
        -10.183146476745605
      ],
      [
        "SELECT Max ( Accelerate ) FROM cars_data WHERE Year > = value",
        -11.029187202453613
      ]
    ],
    "predicted_parse_with_values": "SELECT Max ( Accelerate ) FROM cars_data WHERE Cylinders = 1 OR Year < 8",
    "predicted_parse": "SELECT Max ( Accelerate ) FROM cars_data WHERE Cylinders = value OR Year < value",
    "predicted_parse_explanation": [
      "find the maximum accelerate in cars data table whose cylinders equals 1 or year less than 8"
    ],
    "template_feedback": "consider the cylinders equals 8 or year less than 1980 conditions in place of the cylinders equals 1 or year less than 8 conditions . find mpg in place of maximum accelerate . find the result with the largest mpg .",
    "primary_span": [
      [
        0,
        10
      ],
      [
        25,
        26
      ],
      [
        33,
        40
      ]
    ],
    "secondary_span": [
      [
        11,
        24
      ],
      [
        27,
        32
      ]
    ],
    "edits": [
      "mpg",
      "maximum accelerate",
      "cylinders equals 8 or year less than 1980",
      "cylinders equals 1 or year less than 8",
      "mpg",
      "descending",
      "1"
    ],
    "edits_original": "< select > add mpg </ select > < select > remove maximum accelerate </ select > < where > add cylinders equals 8 or year less than 1980 </ where > < where > remove cylinders equals 1 or year less than 8 </ where > < orderBy > add mpg </ orderBy > < orderBy > add descending </ orderBy > < limit > add 1 </ limit >"
  },
  {
    "db_id": "network_1",
    "feedback": "In step 1 ensure corresponding student id present in friend , in step 2 corresponding student id present in likes .",
    "question": "Show name of all students who have some friends and also are liked by someone else.",
    "gold_parse": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id",
    "beam": [
      [
        "SELECT name FROM Highschooler INTERSECT SELECT name FROM Highschooler",
        -0.02205657958984375
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 INTERSECT SELECT T2.liked_id FROM Likes AS T2",
        -4.266522407531738
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 INTERSECT SELECT T2.student_id FROM Likes AS T2",
        -4.891319751739502
      ],
      [
        "SELECT name FROM Highschooler WHERE grade = value INTERSECT SELECT name FROM Highschooler",
        -9.221575856208801
      ],
      [
        "SELECT name FROM Highschooler",
        -10.223089218139648
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 UNION SELECT T2.liked_id FROM Likes AS T2",
        -10.51161813735962
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 INTERSECT SELECT T2.student_id FROM Friend AS T2",
        -11.323427200317383
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 UNION SELECT T2.student_id FROM Likes AS T2",
        -11.350876331329346
      ],
      [
        "SELECT name FROM Highschooler INTERSECT SELECT grade FROM Highschooler",
        -11.603745460510254
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 INTERSECT SELECT T2.friend_id FROM Friend AS T2",
        -11.621041297912598
      ],
      [
        "SELECT name FROM Highschooler INTERSECT SELECT name FROM Highschooler WHERE grade = value",
        -11.974272698163986
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) = value INTERSECT SELECT T1.name FROM Highschooler AS T1",
        -12.100841522216797
      ],
      [
        "SELECT name FROM Highschooler EXCEPT SELECT name FROM Highschooler",
        -12.142061233520508
      ],
      [
        "SELECT name FROM Highschooler UNION SELECT name FROM Highschooler",
        -12.215973377227783
      ],
      [
        "SELECT name FROM Highschooler ORDER BY name Asc",
        -12.220757484436035
      ],
      [
        "SELECT name FROM Highschooler WHERE grade = name INTERSECT SELECT name FROM Highschooler",
        -12.327716946601868
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id ORDER BY Count ( * ) Asc INTERSECT SELECT T1.name FROM Highschooler AS T1",
        -12.637759685516357
      ],
      [
        "SELECT name FROM Highschooler INTERSECT SELECT * FROM Highschooler",
        -12.973889350891113
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) > = value",
        -13.720643043518066
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 INTERSECT SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id WHERE T2.liked_id = value",
        -14.01836609840393
      ]
    ],
    "predicted_parse_with_values": "SELECT name FROM Highschooler INTERSECT SELECT name FROM Highschooler",
    "predicted_parse": "SELECT name FROM Highschooler INTERSECT SELECT name FROM Highschooler",
    "predicted_parse_explanation": [
      "Step 1: find the name in high schooler table",
      "Step 2: find the name in high schooler table",
      "Step 3: show the rows that are in both the results of step 1 and step 2"
    ],
    "template_feedback": "in step 1 , additionally use the information from the friend table besides the high schooler table . in step 2 , additionally use the information from the likes table besides the high schooler table .",
    "primary_span": [
      [
        4,
        11
      ],
      [
        22,
        29
      ]
    ],
    "secondary_span": [
      [
        12,
        17
      ],
      [
        30,
        35
      ]
    ],
    "edits": [
      "friend",
      "likes"
    ],
    "edits_original": "< from > add friend </ from > < from > add likes </ from >"
  },
  {
    "db_id": "tvshow",
    "feedback": "You need to search different name of series and content in tv channel table.",
    "question": "How many different series and contents are listed in the TV Channel table?",
    "gold_parse": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel",
    "beam": [
      [
        "SELECT Count ( DISTINCT Episode ) , Count ( * ) FROM TV_series",
        -0.1597118377685547
      ],
      [
        "SELECT Count ( * ) , Content FROM TV_Channel",
        -2.2304654121398926
      ],
      [
        "SELECT Count ( * ) , Episode FROM TV_series",
        -4.113059997558594
      ],
      [
        "SELECT Count ( DISTINCT Episode ) , Count ( DISTINCT Episode ) FROM TV_series",
        -4.487850189208984
      ],
      [
        "SELECT Count ( DISTINCT Title ) , Count ( * ) FROM Cartoon",
        -5.793923377990723
      ],
      [
        "SELECT Count ( DISTINCT T2.Episode ) , Count ( DISTINCT T3.Title ) FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T2.Channel = T1.id JOIN Cartoon AS T3 ON T1.id = T3.Channel",
        -6.424065589904785
      ],
      [
        "SELECT Count ( DISTINCT T2.Episode ) , T1.Content FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel",
        -6.525454521179199
      ],
      [
        "SELECT Count ( DISTINCT T2.Episode ) , Count ( DISTINCT T1.Content ) FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel",
        -6.676870822906494
      ],
      [
        "SELECT Count ( * ) , series_name FROM TV_Channel",
        -6.692636013031006
      ],
      [
        "SELECT Count ( * ) , Hight_definition_TV FROM TV_Channel",
        -7.45366907119751
      ],
      [
        "SELECT Count ( * ) , Channel FROM TV_series",
        -7.792405605316162
      ],
      [
        "SELECT Count ( DISTINCT series_name ) , Count ( * ) FROM TV_Channel",
        -7.852166652679443
      ],
      [
        "SELECT Count ( DISTINCT T2.Episode ) , Count ( DISTINCT T1.Hight_definition_TV ) FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel",
        -7.945709705352783
      ],
      [
        "SELECT Count ( DISTINCT T2.Episode ) , Count ( * ) FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.Content = value",
        -8.233288764953613
      ],
      [
        "SELECT Count ( DISTINCT T3.Title ) , Count ( DISTINCT T2.Episode ) FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T2.Channel = T1.id JOIN Cartoon AS T3 ON T1.id = T3.Channel",
        -8.313433170318604
      ],
      [
        "SELECT Count ( DISTINCT Hight_definition_TV ) , Count ( * ) FROM TV_Channel",
        -8.463117122650146
      ],
      [
        "SELECT Count ( DISTINCT T2.Episode ) , Count ( DISTINCT T1.series_name ) FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel",
        -8.59162712097168
      ],
      [
        "SELECT Count ( Episode ) , Count ( * ) FROM TV_series",
        -8.939244270324707
      ],
      [
        "SELECT Count ( DISTINCT T2.Episode ) , Count ( DISTINCT T3.Original_air_date ) FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T2.Channel = T1.id JOIN Cartoon AS T3 ON T1.id = T3.Channel",
        -9.325224876403809
      ],
      [
        "SELECT Count ( DISTINCT Episode ) FROM TV_series",
        -10.099447250366211
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( DISTINCT Episode ) , Count ( * ) FROM TV_series",
    "predicted_parse": "SELECT Count ( DISTINCT Episode ) , Count ( * ) FROM TV_series",
    "predicted_parse_explanation": [
      "find the number of different episode and number of rows in tv series table"
    ],
    "template_feedback": "use tv channel table in place of tv series table . find number of different series name and number of different content in place of number of different episode and number of rows .",
    "primary_span": [
      [
        0,
        3
      ],
      [
        11,
        21
      ]
    ],
    "secondary_span": [
      [
        4,
        10
      ],
      [
        22,
        33
      ]
    ],
    "edits": [
      "number of distinct series name",
      "number of distinct content",
      "number of distinct episode",
      "number of rows",
      "tv channel",
      "tv series"
    ],
    "edits_original": "< select > add number of distinct series name </ select > < select > add number of distinct content </ select > < select > remove number of distinct episode </ select > < select > remove number of rows </ select > < from > add tv channel </ from > < from > remove tv series </ from >"
  },
  {
    "db_id": "world_1",
    "feedback": "Substitute surface area with region and specify that Country's name name equals Angola .",
    "question": "What are the region and population of Angola?",
    "gold_parse": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"",
    "beam": [
      [
        "SELECT SurfaceArea , Population FROM country",
        -0.24196624755859375
      ],
      [
        "SELECT LocalName , Population FROM country",
        -1.7886104583740234
      ],
      [
        "SELECT Region , Population FROM country",
        -3.0752410888671875
      ],
      [
        "SELECT SurfaceArea , LifeExpectancy FROM country",
        -6.858251571655273
      ],
      [
        "SELECT LocalName , LifeExpectancy FROM country",
        -8.436891555786133
      ],
      [
        "SELECT SurfaceArea , Continent FROM country",
        -8.93580436706543
      ],
      [
        "SELECT Region , LifeExpectancy FROM country",
        -9.719932556152344
      ],
      [
        "SELECT Continent , Population FROM country",
        -10.18881893157959
      ],
      [
        "SELECT LocalName , Continent FROM country",
        -10.436565399169922
      ],
      [
        "SELECT Region , Continent FROM country",
        -11.774602890014648
      ],
      [
        "SELECT SurfaceArea , Population FROM country WHERE Name = value",
        -12.482538223266602
      ],
      [
        "SELECT SurfaceArea , Population , Population FROM country",
        -13.427834510803223
      ],
      [
        "SELECT SurfaceArea , Population FROM country UNION SELECT Continent FROM country",
        -13.444072723388672
      ],
      [
        "SELECT SurfaceArea , Population FROM country WHERE Continent = value",
        -13.725368022918701
      ],
      [
        "SELECT LocalName , Population FROM country WHERE Name = value",
        -13.759716033935547
      ],
      [
        "SELECT SurfaceArea , Population , LifeExpectancy FROM country",
        -13.793049812316895
      ],
      [
        "SELECT Count ( SurfaceArea ) , Population FROM country",
        -14.35529899597168
      ],
      [
        "SELECT SurfaceArea FROM country",
        -14.647189140319824
      ],
      [
        "SELECT DISTINCT SurfaceArea , Population FROM country",
        -15.026813507080078
      ],
      [
        "SELECT LocalName , Population FROM country UNION SELECT Continent FROM country",
        -15.136405944824219
      ]
    ],
    "predicted_parse_with_values": "SELECT SurfaceArea , Population FROM country",
    "predicted_parse": "SELECT SurfaceArea , Population FROM country",
    "predicted_parse_explanation": [
      "find the surface area and population in country table"
    ],
    "template_feedback": "additionally make sure that name equals Angola . find region in place of surface area .",
    "primary_span": [
      [
        0,
        7
      ],
      [
        8,
        9
      ]
    ],
    "secondary_span": [
      [
        10,
        15
      ]
    ],
    "edits": [
      "region",
      "surface area",
      "name equals \"Angola\""
    ],
    "edits_original": "< select > add region </ select > < select > remove surface area </ select > < where > add name equals \" Angola \" </ where >"
  },
  {
    "db_id": "concert_singer",
    "feedback": "Replace stadium table with singer table .",
    "question": "How many singers do we have?",
    "gold_parse": "SELECT count(*) FROM singer",
    "beam": [
      [
        "SELECT Count ( * ) FROM stadium",
        -1.621246337890625e-05
      ],
      [
        "SELECT Sum ( * ) FROM stadium",
        -12.160548686981201
      ],
      [
        "SELECT Count ( * ) FROM singer WHERE Is_male = value",
        -13.193983554840088
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM stadium",
        -13.438127517700195
      ],
      [
        "SELECT Count ( * ) FROM singer WHERE Country = value",
        -14.029149770736694
      ],
      [
        "SELECT Count ( * ) , Is_male FROM singer",
        -14.291995167732239
      ],
      [
        "SELECT Sum ( Singer_ID ) FROM singer",
        -14.39391541481018
      ],
      [
        "SELECT Avg ( * ) FROM stadium",
        -14.609522581100464
      ],
      [
        "SELECT Count ( * ) FROM singer WHERE Name = value",
        -14.729350090026855
      ],
      [
        "SELECT Sum ( Is_male ) FROM singer",
        -14.733193159103394
      ],
      [
        "SELECT Count ( Count ( * ) ) FROM stadium",
        -14.8417329788208
      ],
      [
        "SELECT Count ( * ) FROM singer WHERE Song_Name = value",
        -15.073912620544434
      ],
      [
        "SELECT Count ( * ) , Name FROM singer",
        -15.245482683181763
      ],
      [
        "SELECT Count ( * ) FROM singer ORDER BY Singer_ID Desc",
        -15.556865215301514
      ],
      [
        "SELECT Sum ( Name ) FROM singer",
        -15.660293817520142
      ],
      [
        "SELECT Sum ( Age ) FROM singer",
        -15.810284852981567
      ],
      [
        "SELECT Sum ( Country ) FROM singer",
        -16.269853591918945
      ],
      [
        "SELECT Avg ( Singer_ID ) FROM singer",
        -16.381810426712036
      ],
      [
        "SELECT Sum ( Song_Name ) FROM singer",
        -16.730152130126953
      ],
      [
        "SELECT Count ( * ) FROM stadium LIMIT value",
        -17.08603000640869
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM stadium",
    "predicted_parse": "SELECT Count ( * ) FROM stadium",
    "predicted_parse_explanation": [
      "find the number of rows in stadium table"
    ],
    "template_feedback": "use singer table in place of stadium table .",
    "primary_span": [
      [
        0,
        2
      ]
    ],
    "secondary_span": [
      [
        3,
        8
      ]
    ],
    "edits": [
      "singer",
      "stadium"
    ],
    "edits_original": "< from > add singer </ from > < from > remove stadium </ from >"
  },
  {
    "db_id": "car_1",
    "feedback": "you should use country name in place of country.",
    "question": "How many car models are produced in the usa?",
    "gold_parse": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'",
    "beam": [
      [
        "SELECT Count ( * ) FROM car_makers WHERE Country = value",
        -0.0012712478637695312
      ],
      [
        "SELECT Count ( * ) FROM model_list WHERE Model = value",
        -7.1683244705200195
      ],
      [
        "SELECT Count ( DISTINCT T2.Model ) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker WHERE T1.Country = value",
        -7.956657886505127
      ],
      [
        "SELECT Count ( * ) FROM continents",
        -8.922123908996582
      ],
      [
        "SELECT Count ( * ) FROM continents WHERE Continent = value",
        -11.391804695129395
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM car_makers WHERE Country = value",
        -14.399866104125977
      ],
      [
        "SELECT T2.Model FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker WHERE T1.Country = value",
        -14.745175838470459
      ],
      [
        "SELECT Count ( DISTINCT T3.Model ) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model WHERE T1.Country = value",
        -14.87405014038086
      ],
      [
        "SELECT Count ( DISTINCT Model ) FROM model_list WHERE Model = value",
        -15.033488750457764
      ],
      [
        "SELECT Count ( * ) FROM car_makers WHERE FullName = value",
        -15.362373352050781
      ],
      [
        "SELECT Count ( * ) FROM cars_data WHERE MPG = value",
        -15.389960289001465
      ],
      [
        "SELECT Count ( * ) FROM car_names WHERE Model = value",
        -15.697249412536621
      ],
      [
        "SELECT Count ( DISTINCT T2.ModelId ) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker WHERE T1.Country = value",
        -15.917411804199219
      ],
      [
        "SELECT Count ( DISTINCT Model ) FROM model_list",
        -15.984850883483887
      ],
      [
        "SELECT Count ( * ) FROM car_makers WHERE Country LIKE value",
        -16.02351140975952
      ],
      [
        "SELECT Count ( * ) FROM cars_data WHERE Horsepower = value",
        -16.067770957946777
      ],
      [
        "SELECT Avg ( T2.Model ) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker WHERE T1.Country = value",
        -16.084126472473145
      ],
      [
        "SELECT Count ( Count ( * ) ) FROM car_makers WHERE Country = value",
        -16.08740234375
      ],
      [
        "SELECT Count ( * ) , T2.Model FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker WHERE T1.Country = value",
        -16.12897264957428
      ],
      [
        "SELECT Avg ( * ) FROM car_makers WHERE Country = value",
        -16.148034512996674
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM car_makers WHERE Country = \"usa\"",
    "predicted_parse": "SELECT Count ( * ) FROM car_makers WHERE Country = value",
    "predicted_parse_explanation": [
      "find the number of rows in car makers table whose country equals usa"
    ],
    "template_feedback": "additionally use the information from the countries table and model list table besides the car makers table . consider the country name equals usa conditions in place of the country equals usa conditions .",
    "primary_span": [
      [
        0,
        11
      ],
      [
        18,
        24
      ]
    ],
    "secondary_span": [
      [
        12,
        17
      ],
      [
        25,
        33
      ]
    ],
    "edits": [
      "model list",
      "countries",
      "country name equals \"usa\"",
      "country equals \"usa\""
    ],
    "edits_original": "< from > add model list </ from > < from > add countries </ from > < where > add country name equals \" usa \" </ where > < where > remove country equals \" usa \" </ where >"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "feedback": "templates table is wrong . Use documents table in place of it .",
    "question": "How many documents are using the template with type code 'PPT'?",
    "gold_parse": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'",
    "beam": [
      [
        "SELECT Count ( * ) FROM Templates WHERE Template_Type_Code = value",
        -9.34600830078125e-05
      ],
      [
        "SELECT Count ( * ) FROM Ref_Template_Types WHERE Template_Type_Code = value",
        -9.313553810119629
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM Templates WHERE Template_Type_Code = value",
        -14.568511009216309
      ],
      [
        "SELECT Count ( Count ( * ) ) FROM Templates WHERE Template_Type_Code = value",
        -14.650732040405273
      ],
      [
        "SELECT Count ( * ) FROM Documents WHERE Document_Name = value",
        -14.755556106567383
      ],
      [
        "SELECT Avg ( * ) FROM Templates WHERE Template_Type_Code = value",
        -14.847092628479004
      ],
      [
        "SELECT Sum ( * ) FROM Templates WHERE Template_Type_Code = value",
        -15.465026617050171
      ],
      [
        "SELECT Count ( * ) FROM Templates WHERE Template_Type_Code LIKE value",
        -15.754977226257324
      ],
      [
        "SELECT Count ( * ) FROM Templates WHERE Template_Type_Code = value AND Template_Type_Code = value",
        -15.828871726989746
      ],
      [
        "SELECT Count ( * ) , Count ( * ) FROM Templates WHERE Template_Type_Code = value",
        -16.288705825805664
      ],
      [
        "SELECT * FROM Templates WHERE Template_Type_Code = value",
        -16.65886616706848
      ],
      [
        "SELECT Count ( * ) , Template_Type_Code FROM Templates WHERE Template_Type_Code = value",
        -16.689731121063232
      ],
      [
        "SELECT Count ( DISTINCT * ) FROM Templates WHERE Template_Type_Code = value",
        -16.705577850341797
      ],
      [
        "SELECT Count ( * ) FROM Templates WHERE Template_Type_Code > value",
        -17.10728168487549
      ],
      [
        "SELECT Count ( * ) FROM Templates WHERE Template_Type_Code = value GROUP BY Template_Type_Code",
        -17.176021933555603
      ],
      [
        "SELECT Count ( * ) FROM Templates WHERE DISTINCT Template_Type_Code = value",
        -17.221467971801758
      ],
      [
        "SELECT Count ( * ) FROM Templates WHERE Template_Type_Code = value LIMIT value",
        -17.26181983947754
      ],
      [
        "SELECT Count ( * ) FROM Templates WHERE Count ( Template_Type_Code ) = value",
        -17.558037757873535
      ],
      [
        "SELECT Count ( * ) FROM Templates WHERE Template_Type_Code = value",
        -17.78597068786621
      ],
      [
        "SELECT Count ( * ) FROM Ref_Template_Types",
        -17.844130516052246
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM Templates WHERE Template_Type_Code = \"PPT\"",
    "predicted_parse": "SELECT Count ( * ) FROM Templates WHERE Template_Type_Code = value",
    "predicted_parse_explanation": [
      "find the number of rows in templates table whose template type code equals PPT"
    ],
    "template_feedback": "additionally use the information from the documents table besides the templates table .",
    "primary_span": [
      [
        0,
        7
      ]
    ],
    "secondary_span": [
      [
        8,
        12
      ]
    ],
    "edits": [
      "documents"
    ],
    "edits_original": "< from > add documents </ from >"
  },
  {
    "db_id": "pets_1",
    "feedback": "in step 2, verify cat is the value of pet type.",
    "question": "What are the ids of the students who do not own cats as pets?",
    "gold_parse": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'",
    "beam": [
      [
        "SELECT T1.StuID FROM Student AS T1 EXCEPT SELECT T2.StuID FROM Has_Pet AS T2",
        -0.1845245361328125
      ],
      [
        "SELECT T1.StuID FROM Student AS T1 EXCEPT SELECT T2.StuID FROM Has_Pet AS T2 JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value",
        -2.2572364807128906
      ],
      [
        "SELECT T1.StuID FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value EXCEPT SELECT T2.StuID FROM Has_Pet AS T2",
        -2.806168556213379
      ],
      [
        "SELECT T1.StuID FROM Student AS T1 WHERE T1.StuID NOT IN ( SELECT T2.StuID FROM Has_Pet AS T2 JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value ) EXCEPT SELECT T2.StuID FROM Has_Pet AS T2",
        -6.861310005187988
      ],
      [
        "SELECT T1.StuID FROM Student AS T1 WHERE T1.StuID NOT IN ( SELECT T2.StuID FROM Has_Pet AS T2 JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value )",
        -7.277170181274414
      ],
      [
        "SELECT T1.StuID FROM Student AS T1 WHERE T1.StuID IN ( SELECT T2.StuID FROM Has_Pet AS T2 JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value ) EXCEPT SELECT T2.StuID FROM Has_Pet AS T2",
        -7.90091609954834
      ],
      [
        "SELECT T1.StuID FROM Student AS T1 WHERE T1.StuID NOT IN ( SELECT T2.StuID FROM Has_Pet AS T2 ) EXCEPT SELECT T2.StuID FROM Has_Pet AS T2",
        -8.67982006072998
      ],
      [
        "SELECT T1.StuID FROM Student AS T1 WHERE T1.StuID NOT IN ( SELECT T2.StuID FROM Has_Pet AS T2 ) EXCEPT SELECT T2.StuID FROM Has_Pet AS T2 JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value",
        -8.97221851348877
      ],
      [
        "SELECT T1.StuID FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value EXCEPT SELECT T2.StuID FROM Has_Pet AS T2 JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value",
        -9.406717300415039
      ],
      [
        "SELECT T1.StuID FROM Student AS T1 EXCEPT SELECT T2.StuID FROM Has_Pet AS T2 JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.pet_age = value",
        -9.609746932983398
      ],
      [
        "SELECT T1.StuID FROM Student AS T1 WHERE T1.StuID = value EXCEPT SELECT T2.StuID FROM Has_Pet AS T2",
        -9.6389479637146
      ],
      [
        "SELECT T1.StuID FROM Student AS T1 WHERE T1.StuID = ( SELECT T2.StuID FROM Has_Pet AS T2 JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value ) EXCEPT SELECT T2.StuID FROM Has_Pet AS T2",
        -9.740210056304932
      ],
      [
        "SELECT T1.StuID FROM Student AS T1 WHERE T1.StuID IN ( SELECT T2.StuID FROM Has_Pet AS T2 ) EXCEPT SELECT T2.StuID FROM Has_Pet AS T2",
        -10.088597297668457
      ],
      [
        "SELECT T1.StuID FROM Student AS T1 WHERE T1.StuID NOT IN ( SELECT T2.StuID FROM Has_Pet AS T2 JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value ) EXCEPT SELECT T2.StuID FROM Has_Pet AS T2 JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value",
        -10.220198631286621
      ],
      [
        "SELECT T1.StuID FROM Student AS T1 WHERE T1.StuID IN ( SELECT T2.StuID FROM Has_Pet AS T2 ) EXCEPT SELECT T2.StuID FROM Has_Pet AS T2 JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value",
        -10.325761795043945
      ],
      [
        "SELECT T1.StuID FROM Student AS T1 WHERE T1.StuID NOT IN ( SELECT T2.StuID FROM Has_Pet AS T2 )",
        -10.496774673461914
      ],
      [
        "SELECT T1.StuID FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID WHERE T1.StuID = T2.StuID EXCEPT SELECT T2.StuID FROM Has_Pet AS T2",
        -11.068674087524414
      ],
      [
        "SELECT T1.StuID FROM Student AS T1 UNION SELECT T2.StuID FROM Has_Pet AS T2",
        -11.202652931213379
      ],
      [
        "SELECT T1.StuID FROM Student AS T1 EXCEPT SELECT T2.StuID FROM Has_Pet AS T2 EXCEPT SELECT T2.StuID FROM Has_Pet AS T2",
        -11.4713773727417
      ],
      [
        "SELECT T1.StuID FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID WHERE T2.PetID = value EXCEPT SELECT T2.StuID FROM Has_Pet AS T2",
        -11.492624282836914
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.StuID FROM Student AS T1 EXCEPT SELECT T2.StuID FROM Has_Pet AS T2",
    "predicted_parse": "SELECT T1.StuID FROM Student AS T1 EXCEPT SELECT T2.StuID FROM Has_Pet AS T2",
    "predicted_parse_explanation": [
      "Step 1: find the student 's student id in student table",
      "Step 2: find the has pet 's student id in has pet table",
      "Step 3: show the rows that are in the results of step 1 but not in the results of step 2"
    ],
    "template_feedback": "in step 2 , additionally use the information from the student table and pets table besides the has pet table . additionally make sure that pet type equals cat .",
    "primary_span": [
      [
        4,
        14
      ],
      [
        21,
        29
      ]
    ],
    "secondary_span": [
      [
        15,
        20
      ]
    ],
    "edits": [
      "student",
      "pets",
      "pet type equals \"cat\""
    ],
    "edits_original": "< from > add student </ from > < from > add pets </ from > < where > add pet type equals \" cat \" </ where >"
  },
  {
    "db_id": "flight_2",
    "feedback": "Swap airlines table with flights table and find only for which destination airport equals ATO .",
    "question": "Count the number of flights into ATO.",
    "gold_parse": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"",
    "beam": [
      [
        "SELECT Count ( * ) FROM airlines",
        -0.00016689300537109375
      ],
      [
        "SELECT Count ( * ) FROM airlines WHERE Airline = value",
        -9.212725162506104
      ],
      [
        "SELECT Count ( * ) FROM airlines WHERE Abbreviation = value",
        -10.223246097564697
      ],
      [
        "SELECT Count ( * ) FROM flights WHERE FlightNo = value",
        -11.713511943817139
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE AirportName = value",
        -12.062120199203491
      ],
      [
        "SELECT Count ( * ) FROM airlines WHERE Country = value",
        -12.586097955703735
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE Country = value",
        -13.119308948516846
      ],
      [
        "SELECT Count ( * ) FROM flights WHERE Airline = value",
        -13.261568069458008
      ],
      [
        "SELECT Sum ( FlightNo ) FROM flights",
        -13.917131096124649
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM airlines",
        -14.30977725982666
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE CountryAbbrev = value",
        -14.411264896392822
      ],
      [
        "SELECT Sum ( * ) FROM airlines",
        -14.551177859306335
      ],
      [
        "SELECT Avg ( FlightNo ) FROM flights",
        -15.002182841300964
      ],
      [
        "SELECT Avg ( * ) FROM airlines",
        -15.25782299041748
      ],
      [
        "SELECT FlightNo FROM flights",
        -16.21906566619873
      ],
      [
        "SELECT Count ( Count ( * ) ) FROM airlines",
        -16.304436683654785
      ],
      [
        "SELECT Count ( FlightNo ) FROM flights",
        -16.73987340927124
      ],
      [
        "SELECT Count ( DISTINCT * ) FROM airlines",
        -16.925238609313965
      ],
      [
        "SELECT Count ( * ) FROM airlines LIMIT value",
        -17.18283462524414
      ],
      [
        "SELECT * FROM airlines",
        -17.623083114624023
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM airlines",
    "predicted_parse": "SELECT Count ( * ) FROM airlines",
    "predicted_parse_explanation": [
      "find the number of rows in airlines table"
    ],
    "template_feedback": "use flights table in place of airlines table . additionally make sure that destination airport equals ATO .",
    "primary_span": [
      [
        0,
        2
      ],
      [
        9,
        17
      ]
    ],
    "secondary_span": [
      [
        3,
        8
      ]
    ],
    "edits": [
      "flights",
      "airlines",
      "destination airport equals \"ATO\""
    ],
    "edits_original": "< from > add flights </ from > < from > remove airlines </ from > < where > add destination airport equals \" ATO \" </ where >"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "feedback": "Search for korea paragraph text in paragraphs table.",
    "question": "Show paragraph details for paragraph with text 'Korea'.",
    "gold_parse": "SELECT Other_Details FROM Paragraphs WHERE paragraph_text  =  'Korea'",
    "beam": [
      [
        "SELECT T2.Other_Details FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Name = value",
        -0.00679779052734375
      ],
      [
        "SELECT T2.Other_Details FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Name LIKE value",
        -5.891047477722168
      ],
      [
        "SELECT * FROM Documents WHERE Document_Name = value",
        -5.966283798217773
      ],
      [
        "SELECT Other_Details FROM Paragraphs WHERE Paragraph_Text = value",
        -7.078404426574707
      ],
      [
        "SELECT Other_Details FROM Documents WHERE Document_Name = value",
        -8.084089279174805
      ],
      [
        "SELECT T1.Template_Details FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Document_Name = value",
        -9.245524406433105
      ],
      [
        "SELECT T2.Paragraph_Text FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Name = value",
        -9.540614128112793
      ],
      [
        "SELECT T1.Date_Effective_To FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Document_Name = value",
        -9.81924057006836
      ],
      [
        "SELECT Other_Details FROM Paragraphs WHERE Paragraph_Text LIKE value",
        -10.140790939331055
      ],
      [
        "SELECT Document_Description FROM Documents WHERE Document_Name = value",
        -11.185294151306152
      ],
      [
        "SELECT * FROM Documents WHERE Document_Name LIKE value",
        -11.567346572875977
      ],
      [
        "SELECT * FROM Paragraphs WHERE Paragraph_Text = value",
        -12.659350395202637
      ],
      [
        "SELECT T2.Other_Details FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Name = value AND T1.Document_Name = value",
        -13.361648082733154
      ],
      [
        "SELECT T2.Paragraph_Text FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Name LIKE value",
        -13.749361991882324
      ],
      [
        "SELECT Other_Details FROM Documents WHERE Document_Name LIKE value",
        -13.897616386413574
      ],
      [
        "SELECT T2.Other_Details FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Description = value",
        -14.518956184387207
      ],
      [
        "SELECT T1.Template_Details FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Document_Name LIKE value",
        -14.879528045654297
      ],
      [
        "SELECT T1.Other_Details FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Paragraph_Text = value",
        -15.033417701721191
      ],
      [
        "SELECT T2.Other_Details , T2.Paragraph_Text FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Name = value",
        -15.077078938484192
      ],
      [
        "SELECT T2.Other_Details FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Name ! = value",
        -15.138871192932129
      ]
    ],
    "predicted_parse_with_values": "SELECT T2.Other_Details FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Name = \"Korea\"",
    "predicted_parse": "SELECT T2.Other_Details FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Name = value",
    "predicted_parse_explanation": [
      "Step 1: for each row in documents table , find the corresponding rows in paragraphs table",
      "Step 2: find the paragraphs 's other details of the results of step 1 whose document name equals Korea"
    ],
    "template_feedback": "in step 1 , do not use the documents table . in step 2 , consider the paragraph text equals Korea conditions in place of the document name equals Korea conditions .",
    "primary_span": [
      [
        4,
        10
      ],
      [
        15,
        21
      ]
    ],
    "secondary_span": [
      [
        4,
        10
      ],
      [
        22,
        31
      ]
    ],
    "edits": [
      "documents",
      "paragraph text equals \"Korea\"",
      "document name equals \"Korea\""
    ],
    "edits_original": "< from > remove documents </ from > < where > add paragraph text equals \" Korea \" </ where > < where > remove document name equals \" Korea \" </ where >"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "feedback": "Change document name with paragraph text in step 2.",
    "question": "What are the details for the paragraph that includes the text 'Korea'?",
    "gold_parse": "SELECT Other_Details FROM Paragraphs WHERE paragraph_text  =  'Korea'",
    "beam": [
      [
        "SELECT T2.Other_Details FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Name LIKE value",
        -0.35921764373779297
      ],
      [
        "SELECT T2.Other_Details FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Name = value",
        -1.214223861694336
      ],
      [
        "SELECT Other_Details FROM Paragraphs WHERE Paragraph_Text LIKE value",
        -5.555529594421387
      ],
      [
        "SELECT Other_Details FROM Documents WHERE Document_Name LIKE value",
        -7.840925216674805
      ],
      [
        "SELECT Other_Details FROM Paragraphs WHERE Paragraph_Text = value",
        -8.559688568115234
      ],
      [
        "SELECT * FROM Documents WHERE Document_Name LIKE value",
        -8.805096626281738
      ],
      [
        "SELECT Other_Details FROM Documents WHERE Document_Name = value",
        -8.943573951721191
      ],
      [
        "SELECT * FROM Documents WHERE Document_Name = value",
        -9.859214782714844
      ],
      [
        "SELECT T2.Other_Details FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Description LIKE value",
        -11.082366943359375
      ],
      [
        "SELECT T2.Other_Details FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Name = value AND T1.Document_Name = value",
        -12.373962879180908
      ],
      [
        "SELECT T1.Template_Details FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Document_Name LIKE value",
        -12.423855781555176
      ],
      [
        "SELECT T1.Other_Details FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Paragraph_Text LIKE value",
        -13.008567810058594
      ],
      [
        "SELECT T2.Other_Details FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Name ! = value",
        -13.025856018066406
      ],
      [
        "SELECT Other_Details FROM Paragraphs WHERE Other_Details LIKE value",
        -13.284625053405762
      ],
      [
        "SELECT T2.Other_Details FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Name BETWEEN value AND value",
        -13.367358207702637
      ],
      [
        "SELECT T1.Template_Details FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Document_Name = value",
        -13.821106910705566
      ],
      [
        "SELECT Document_Description FROM Documents WHERE Document_Name LIKE value",
        -13.960509300231934
      ],
      [
        "SELECT * FROM Paragraphs WHERE Paragraph_Text LIKE value",
        -13.974610328674316
      ],
      [
        "SELECT T2.Other_Details FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Name = value AND T2.Paragraph_Text = value",
        -14.308390617370605
      ],
      [
        "SELECT T2.Other_Details FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Name < value",
        -14.319156646728516
      ]
    ],
    "predicted_parse_with_values": "SELECT T2.Other_Details FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Name LIKE \"Korea\"",
    "predicted_parse": "SELECT T2.Other_Details FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Name LIKE value",
    "predicted_parse_explanation": [
      "Step 1: for each row in documents table , find the corresponding rows in paragraphs table",
      "Step 2: find the paragraphs 's other details of the results of step 1 whose document name like Korea"
    ],
    "template_feedback": "in step 1 , do not use the documents table . in step 2 , consider the paragraph text equals Korea conditions in place of the document name like Korea conditions .",
    "primary_span": [
      [
        4,
        10
      ],
      [
        15,
        21
      ]
    ],
    "secondary_span": [
      [
        4,
        10
      ],
      [
        22,
        31
      ]
    ],
    "edits": [
      "documents",
      "paragraph text equals \"Korea\"",
      "document name like \"Korea\""
    ],
    "edits_original": "< from > remove documents </ from > < where > add paragraph text equals \" Korea \" </ where > < where > remove document name like \" Korea \" </ where >"
  },
  {
    "db_id": "network_1",
    "feedback": "You should use table.",
    "question": "Count the number of likes for each student id.",
    "gold_parse": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id",
    "beam": [
      [
        "SELECT Count ( * ) , student_id FROM Friend GROUP BY student_id",
        -0.1407337188720703
      ],
      [
        "SELECT Count ( * ) , T3.liked_id FROM Highschooler AS T1 JOIN Friend AS T2 ON T2.student_id = T1.ID JOIN Likes AS T3 ON T1.ID = T3.liked_id GROUP BY T2.student_id",
        -3.2895638942718506
      ],
      [
        "SELECT Count ( * ) FROM Friend GROUP BY student_id",
        -3.6014528274536133
      ],
      [
        "SELECT Count ( * ) , T2.student_id FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T1.ID",
        -3.62750244140625
      ],
      [
        "SELECT Count ( * ) , T1.ID FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id",
        -4.136709690093994
      ],
      [
        "SELECT Count ( * ) , friend_id FROM Friend GROUP BY student_id",
        -4.8287672996521
      ],
      [
        "SELECT Count ( * ) , T3.student_id FROM Highschooler AS T1 JOIN Friend AS T2 ON T2.student_id = T1.ID JOIN Likes AS T3 ON T1.ID = T3.liked_id GROUP BY T2.student_id",
        -4.996500015258789
      ],
      [
        "SELECT Count ( * ) , T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id",
        -5.982953071594238
      ],
      [
        "SELECT Count ( * ) , T2.student_id FROM Highschooler AS T1 JOIN Friend AS T2 ON T2.student_id = T1.ID JOIN Likes AS T3 ON T1.ID = T3.liked_id GROUP BY T3.student_id",
        -6.6099348068237305
      ],
      [
        "SELECT Count ( * ) FROM Highschooler GROUP BY ID",
        -6.892819404602051
      ],
      [
        "SELECT Count ( * ) , T2.liked_id FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id GROUP BY T1.ID",
        -6.913334131240845
      ],
      [
        "SELECT Count ( * ) , T2.student_id FROM Highschooler AS T1 JOIN Friend AS T2 ON T2.student_id = T1.ID JOIN Likes AS T3 ON T1.ID = T3.liked_id GROUP BY T3.liked_id",
        -7.200919151306152
      ],
      [
        "SELECT Count ( * ) , T1.grade FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id",
        -7.40739631652832
      ],
      [
        "SELECT Count ( * ) , student_id FROM Friend GROUP BY friend_id",
        -7.750064849853516
      ],
      [
        "SELECT Count ( * ) , ID FROM Highschooler GROUP BY ID",
        -7.885738372802734
      ],
      [
        "SELECT Count ( * ) , T2.student_id FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id GROUP BY T1.ID",
        -8.572324752807617
      ],
      [
        "SELECT Count ( * ) FROM Likes GROUP BY student_id",
        -10.157500267028809
      ],
      [
        "SELECT Count ( * ) FROM Likes GROUP BY liked_id",
        -10.72362995147705
      ],
      [
        "SELECT Count ( * ) FROM Friend GROUP BY friend_id",
        -10.936085224151611
      ],
      [
        "SELECT Count ( * ) FROM Highschooler",
        -11.59340763092041
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) , student_id FROM Friend GROUP BY student_id",
    "predicted_parse": "SELECT Count ( * ) , student_id FROM Friend GROUP BY student_id",
    "predicted_parse_explanation": [
      "find each value of student id in friend table along with the number of the corresponding rows to each value"
    ],
    "template_feedback": "use likes table in place of friend table .",
    "primary_span": [
      [
        0,
        2
      ]
    ],
    "secondary_span": [
      [
        3,
        8
      ]
    ],
    "edits": [
      "likes",
      "friend"
    ],
    "edits_original": "< from > add likes </ from > < from > remove friend </ from >"
  },
  {
    "db_id": "car_1",
    "feedback": "In step 3 find country name whose country is enlisted in car makers table .",
    "question": "What are the name of the countries where there is not a single car maker?",
    "gold_parse": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country",
    "beam": [
      [
        "SELECT T1.CountryName FROM countries AS T1 EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country JOIN model_list AS T3 ON T2.Id = T3.Maker WHERE T3.Model = value",
        -0.688478946685791
      ],
      [
        "SELECT T1.CountryName FROM countries AS T1 EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country WHERE T2.FullName = value",
        -1.5676026344299316
      ],
      [
        "SELECT CountryName FROM countries EXCEPT SELECT CountryName FROM countries",
        -1.7772750854492188
      ],
      [
        "SELECT T1.CountryName FROM countries AS T1 EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country WHERE T2.Maker = value",
        -2.532677173614502
      ],
      [
        "SELECT T1.CountryName FROM countries AS T1 EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country JOIN model_list AS T3 ON T2.Id = T3.Maker JOIN car_names AS T4 ON T3.Model = T4.Model WHERE T4.Model = value",
        -3.482297897338867
      ],
      [
        "SELECT T1.CountryName FROM countries AS T1 EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country JOIN model_list AS T3 ON T2.Id = T3.Maker WHERE T3.ModelId = value",
        -5.178493499755859
      ],
      [
        "SELECT T1.CountryName FROM countries AS T1 EXCEPT SELECT T2.Country FROM car_makers AS T2 JOIN model_list AS T3 ON T2.Id = T3.Maker WHERE T3.Model = value",
        -6.690472602844238
      ],
      [
        "SELECT T1.CountryName FROM countries AS T1 EXCEPT SELECT T2.Country FROM car_makers AS T2",
        -6.783722877502441
      ],
      [
        "SELECT T1.CountryName FROM countries AS T1 EXCEPT SELECT T2.Country FROM car_makers AS T2 WHERE T2.FullName = value",
        -7.469743251800537
      ],
      [
        "SELECT T1.CountryName FROM countries AS T1 EXCEPT SELECT T2.Country FROM car_makers AS T2 WHERE T2.Maker = value",
        -8.142953872680664
      ],
      [
        "SELECT T1.CountryName FROM countries AS T1 EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country JOIN model_list AS T3 ON T2.Id = T3.Maker WHERE T3.Maker = value",
        -8.808565139770508
      ],
      [
        "SELECT CountryName FROM countries EXCEPT SELECT CountryName FROM countries ORDER BY CountryName Asc",
        -9.329773306846619
      ],
      [
        "SELECT T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country WHERE T2.FullName ! = value",
        -10.130709171295166
      ],
      [
        "SELECT Continent FROM countries EXCEPT SELECT CountryName FROM countries",
        -10.51748275756836
      ],
      [
        "SELECT T1.CountryName FROM countries AS T1 EXCEPT SELECT T2.Continent FROM continents AS T2",
        -11.507216453552246
      ],
      [
        "SELECT T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country JOIN model_list AS T3 ON T2.Id = T3.Maker WHERE T3.Model ! = value",
        -12.257670879364014
      ],
      [
        "SELECT T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country WHERE T2.Maker ! = value",
        -12.64444637298584
      ],
      [
        "SELECT T1.CountryName FROM countries AS T1 UNION SELECT T2.Country FROM car_makers AS T2",
        -12.685914039611816
      ],
      [
        "SELECT T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country JOIN model_list AS T3 ON T2.Id = T3.Maker JOIN car_names AS T4 ON T3.Model = T4.Model WHERE T4.Model ! = value",
        -14.062960624694824
      ],
      [
        "SELECT CountryName FROM countries",
        -18.359604835510254
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.CountryName FROM countries AS T1 EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country JOIN model_list AS T3 ON T2.Id = T3.Maker WHERE T3.Model = \"amc\"",
    "predicted_parse": "SELECT T1.CountryName FROM countries AS T1 EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country JOIN model_list AS T3 ON T2.Id = T3.Maker WHERE T3.Model = value",
    "predicted_parse_explanation": [
      "Step 1: find the country name in countries table",
      "Step 2: for each row in countries table , find the corresponding rows in car makers table and in model list table",
      "Step 3: find the country name of the results of step 2 whose model equals amc",
      "Step 4: show the rows that are in the results of step 1 but not in the results of step 3"
    ],
    "template_feedback": "in step 2 , do not use the model list table . in step 3 , remove the model equals amc conditions .",
    "primary_span": [
      [
        4,
        11
      ],
      [
        16,
        22
      ]
    ],
    "secondary_span": [
      [
        4,
        11
      ]
    ],
    "edits": [
      "model list",
      "model equals \"amc\""
    ],
    "edits_original": "< from > remove model list </ from > < where > remove model equals \" amc \" </ where >"
  },
  {
    "db_id": "car_1",
    "feedback": "Ensure year equals 1974 and cylinders equals 8.",
    "question": "What is the minimu weight of the car with 8 cylinders produced in 1974?",
    "gold_parse": "SELECT Weight FROM CARS_DATA WHERE Cylinders  =  4 AND YEAR  =  1974 ORDER BY Weight ASC LIMIT 1",
    "beam": [
      [
        "SELECT Min ( Weight ) FROM cars_data WHERE Year = value",
        -0.41231441497802734
      ],
      [
        "SELECT Weight FROM cars_data WHERE Year = value",
        -1.1037349700927734
      ],
      [
        "SELECT Max ( Weight ) FROM cars_data WHERE Year = value",
        -5.373108863830566
      ],
      [
        "SELECT Min ( Weight ) FROM cars_data WHERE Year = value AND Year = value",
        -10.92110538482666
      ],
      [
        "SELECT Weight , Horsepower FROM cars_data WHERE Year = value",
        -10.945921897888184
      ],
      [
        "SELECT Weight , Cylinders FROM cars_data WHERE Year = value",
        -11.785119533538818
      ],
      [
        "SELECT Avg ( Weight ) FROM cars_data WHERE Year = value",
        -11.931183815002441
      ],
      [
        "SELECT Min ( Weight ) , Horsepower FROM cars_data WHERE Year = value",
        -12.297146797180176
      ],
      [
        "SELECT Min ( Weight ) , Cylinders FROM cars_data WHERE Year = value",
        -12.61029863357544
      ],
      [
        "SELECT Min ( Weight ) FROM cars_data WHERE Year LIKE value",
        -12.988261222839355
      ],
      [
        "SELECT Weight FROM cars_data WHERE Year = value AND Year = value",
        -13.08621597290039
      ],
      [
        "SELECT Min ( Weight ) FROM cars_data WHERE Year < value",
        -13.151199340820312
      ],
      [
        "SELECT Sum ( Weight ) FROM cars_data WHERE Year = value",
        -13.504499435424805
      ],
      [
        "SELECT Min ( Weight ) FROM cars_data WHERE Cylinders = ( SELECT Max ( Cylinders ) FROM cars_data WHERE Year = value )",
        -14.16018009185791
      ],
      [
        "SELECT Min ( Weight ) FROM cars_data WHERE Cylinders = value",
        -14.47861385345459
      ],
      [
        "SELECT Min ( Weight ) FROM cars_data WHERE Cylinders < value",
        -14.506961822509766
      ],
      [
        "SELECT Weight FROM cars_data WHERE Year LIKE value",
        -14.687870979309082
      ],
      [
        "SELECT Min ( DISTINCT Weight ) FROM cars_data WHERE Year = value",
        -14.730875968933105
      ],
      [
        "SELECT DISTINCT Weight FROM cars_data WHERE Year = value",
        -15.33373737335205
      ],
      [
        "SELECT Count ( DISTINCT Weight ) FROM cars_data WHERE Year = value",
        -15.540810108184814
      ]
    ],
    "predicted_parse_with_values": "SELECT Min ( Weight ) FROM cars_data WHERE Year = 1",
    "predicted_parse": "SELECT Min ( Weight ) FROM cars_data WHERE Year = value",
    "predicted_parse_explanation": [
      "find the minimum weight in cars data table whose year equals 1"
    ],
    "template_feedback": "consider the cylinders equals 4 and year equals 1974 conditions in place of the year equals 1 conditions . find weight in place of minimum weight . find the result with the smallest weight .",
    "primary_span": [
      [
        0,
        9
      ],
      [
        19,
        20
      ],
      [
        27,
        34
      ]
    ],
    "secondary_span": [
      [
        10,
        18
      ],
      [
        21,
        26
      ]
    ],
    "edits": [
      "weight",
      "minimum weight",
      "cylinders equals 4",
      "year equals 1974",
      "year equals 1",
      "weight",
      "1"
    ],
    "edits_original": "< select > add weight </ select > < select > remove minimum weight </ select > < where > add cylinders equals 4 </ where > < where > add year equals 1974 </ where > < where > remove year equals 1 </ where > < orderBy > add weight </ orderBy > < limit > add 1 </ limit >"
  },
  {
    "db_id": "flight_2",
    "feedback": "Find number of rows in airport table .",
    "question": "Return the number of  airports.",
    "gold_parse": "SELECT count(*) FROM AIRPORTS",
    "beam": [
      [
        "SELECT Count ( * ) FROM airlines",
        -1.430511474609375e-05
      ],
      [
        "SELECT Sum ( * ) FROM airlines",
        -12.204346671700478
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE City = value",
        -12.862825870513916
      ],
      [
        "SELECT Avg ( * ) FROM airlines",
        -14.173387974500656
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM airlines",
        -14.314971923828125
      ],
      [
        "SELECT Count ( * ) , City FROM airports",
        -14.698684394359589
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE AirportName = value",
        -14.83518671989441
      ],
      [
        "SELECT Count ( * ) FROM airports GROUP BY AirportName",
        -14.931569814682007
      ],
      [
        "SELECT Count ( * ) FROM airports GROUP BY City",
        -15.54971694946289
      ],
      [
        "SELECT Count ( * ) , AirportName FROM airports",
        -15.609166502952576
      ],
      [
        "SELECT Count ( Count ( * ) ) FROM airlines",
        -15.751338005065918
      ],
      [
        "SELECT Count ( * ) FROM airports ORDER BY AirportName Desc",
        -15.905632972717285
      ],
      [
        "SELECT Count ( * ) FROM flights GROUP BY DestAirport",
        -16.50611448287964
      ],
      [
        "SELECT Count ( * ) FROM airlines LIMIT value",
        -17.03682804107666
      ],
      [
        "SELECT Max ( * ) FROM airlines",
        -17.20850169658661
      ],
      [
        "SELECT Sum ( AirportName ) FROM airports",
        -17.22396183013916
      ],
      [
        "SELECT Count ( DISTINCT * ) FROM airlines",
        -17.256068229675293
      ],
      [
        "SELECT Count ( Country ) FROM airports",
        -17.60797929763794
      ],
      [
        "SELECT Count ( * ) FROM airlines",
        -17.614794731140137
      ],
      [
        "SELECT * FROM airlines",
        -17.941015005111694
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM airlines",
    "predicted_parse": "SELECT Count ( * ) FROM airlines",
    "predicted_parse_explanation": [
      "find the number of rows in airlines table"
    ],
    "template_feedback": "use airports table in place of airlines table .",
    "primary_span": [
      [
        0,
        2
      ]
    ],
    "secondary_span": [
      [
        3,
        8
      ]
    ],
    "edits": [
      "airports",
      "airlines"
    ],
    "edits_original": "< from > add airports </ from > < from > remove airlines </ from >"
  },
  {
    "db_id": "tvshow",
    "feedback": "Skip \" and directed by as Ben Jones \".",
    "question": "What are the countries that have cartoons on TV that were written by Todd Casey?",
    "gold_parse": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
    "beam": [
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value AND T2.Directed_by = value",
        -0.17794132232666016
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value AND T2.Written_by = value",
        -2.2390732765197754
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel JOIN Cartoon AS T3 ON T1.id = T3.Channel WHERE T3.Written_by = value AND T2.Episode = value",
        -3.7108683586120605
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = value AND T2.Directed_by = value",
        -4.133120536804199
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel JOIN Cartoon AS T3 ON T1.id = T3.Channel WHERE T3.Written_by = value AND T2.Rating = value",
        -5.0395097732543945
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value AND T1.series_name = value",
        -5.677289009094238
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = value AND T2.Written_by = value",
        -6.189545154571533
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value AND T1.Content = value",
        -6.245051383972168
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value",
        -7.473569869995117
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel JOIN Cartoon AS T3 ON T1.id = T3.Channel WHERE T3.Directed_by = value AND T2.Episode = value",
        -7.674941539764404
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value AND T1.Language = value",
        -7.912673473358154
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel JOIN Cartoon AS T3 ON T1.id = T3.Channel WHERE T3.Directed_by = value AND T2.Rating = value",
        -9.005004405975342
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value INTERSECT SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value",
        -9.433722496032715
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value AND T1.Pay_per_view_PPV = value",
        -9.438553810119629
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = value AND T1.series_name = value",
        -9.618152618408203
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = value",
        -9.794723510742188
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel JOIN Cartoon AS T3 ON T1.id = T3.Channel WHERE T3.Written_by = value AND T2.Share = value",
        -10.03036880493164
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = value AND T1.Content = value",
        -10.1982421875
      ],
      [
        "SELECT DISTINCT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value AND T2.Directed_by = value",
        -10.405345916748047
      ],
      [
        "SELECT Country FROM TV_Channel",
        -16.55386734008789
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = \"Todd Casey\" AND T2.Directed_by = \"Ben Jones\"",
    "predicted_parse": "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value AND T2.Directed_by = value",
    "predicted_parse_explanation": [
      "Step 1: for each row in tv channel table , find the corresponding rows in cartoon table",
      "Step 2: find the country of the results of step 1 whose written by equals Todd Casey and directed by equals Ben Jones"
    ],
    "template_feedback": "in step 2 , remove the directed by equals Ben Jones conditions .",
    "primary_span": [
      [
        4,
        12
      ]
    ],
    "secondary_span": [],
    "edits": [
      "directed by equals \"Ben Jones\""
    ],
    "edits_original": "< where > remove directed by equals \" Ben Jones \" </ where >"
  },
  {
    "db_id": "world_1",
    "feedback": "Find the summation of population whose language is not equals English .",
    "question": "How many people live in countries that do not speak English?",
    "gold_parse": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")",
    "beam": [
      [
        "SELECT T1.Population FROM country AS T1 WHERE T1.Continent NOT IN ( SELECT T2.CountryCode FROM countrylanguage AS T2 WHERE T2.Language = value )",
        -0.6485443115234375
      ],
      [
        "SELECT Count ( DISTINCT T1.Population ) FROM country AS T1 WHERE T1.Continent NOT IN ( SELECT T2.CountryCode FROM countrylanguage AS T2 WHERE T2.Language = value )",
        -1.3289923667907715
      ],
      [
        "SELECT Sum ( T1.Population ) FROM country AS T1 WHERE T1.Continent NOT IN ( SELECT T2.CountryCode FROM countrylanguage AS T2 WHERE T2.Language = value )",
        -2.2929258346557617
      ],
      [
        "SELECT Count ( T1.Population ) FROM country AS T1 WHERE T1.Continent NOT IN ( SELECT T2.CountryCode FROM countrylanguage AS T2 WHERE T2.Language = value )",
        -2.6744332313537598
      ],
      [
        "SELECT T1.Population FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language ! = value",
        -4.235491752624512
      ],
      [
        "SELECT Count ( * ) FROM country AS T1 WHERE T1.Continent NOT IN ( SELECT T2.CountryCode FROM countrylanguage AS T2 WHERE T2.Language = value )",
        -5.053483963012695
      ],
      [
        "SELECT T1.Population FROM country AS T1 WHERE T1.Continent NOT IN ( SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value )",
        -5.63154411315918
      ],
      [
        "SELECT Sum ( T1.Population ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language ! = value",
        -5.661734580993652
      ],
      [
        "SELECT Max ( T1.Population ) FROM country AS T1 WHERE T1.Continent NOT IN ( SELECT T2.CountryCode FROM countrylanguage AS T2 WHERE T2.Language = value )",
        -6.0105509757995605
      ],
      [
        "SELECT Population FROM country WHERE Continent ! = value",
        -6.128052711486816
      ],
      [
        "SELECT Count ( DISTINCT T1.Population ) FROM country AS T1 WHERE T1.Continent NOT IN ( SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value )",
        -6.258474826812744
      ],
      [
        "SELECT Sum ( Population ) FROM country WHERE Continent ! = value",
        -7.720218658447266
      ],
      [
        "SELECT Max ( T1.Population ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language ! = value",
        -7.927473545074463
      ],
      [
        "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language ! = value",
        -7.96333122253418
      ],
      [
        "SELECT Count ( DISTINCT T1.Population ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language ! = value",
        -7.977274417877197
      ],
      [
        "SELECT Count ( T1.Population ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language ! = value",
        -8.230464458465576
      ],
      [
        "SELECT Population FROM country WHERE Name ! = value",
        -8.250205993652344
      ],
      [
        "SELECT Count ( DISTINCT Population ) FROM country WHERE Continent ! = value",
        -8.89933156967163
      ],
      [
        "SELECT Count ( Population ) FROM country WHERE Continent ! = value",
        -9.086328029632568
      ],
      [
        "SELECT Max ( Population ) FROM country WHERE Continent ! = value",
        -9.839186191558838
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.Population FROM country AS T1 WHERE T1.Continent NOT IN ( SELECT T2.CountryCode FROM countrylanguage AS T2 WHERE T2.Language = \"English\" )",
    "predicted_parse": "SELECT T1.Population FROM country AS T1 WHERE T1.Continent NOT IN ( SELECT T2.CountryCode FROM countrylanguage AS T2 WHERE T2.Language = value )",
    "predicted_parse_explanation": [
      "Step 1: find the countrycode in countrylanguage table whose language equals English",
      "Step 2: find the population in country table whose continent not one of the results of step 1"
    ],
    "template_feedback": "in step 1 , additionally use the information from the country table besides the countrylanguage table . find name in place of countrycode . in step 2 , make sure the name is not one of the results of step 1 the continent is not one of the results of step 1 . find summation of population in place of population .",
    "primary_span": [
      [
        4,
        11
      ],
      [
        17,
        18
      ],
      [
        28,
        40
      ],
      [
        53,
        56
      ]
    ],
    "secondary_span": [
      [
        12,
        16
      ],
      [
        19,
        23
      ],
      [
        41,
        52
      ],
      [
        57,
        61
      ]
    ],
    "edits": [
      "summation of population",
      "population",
      "name not one of SUBS1",
      "continent not one of SUBS1",
      "name",
      "countrycode",
      "country"
    ],
    "edits_original": "< select > add summation of population </ select > < select > remove population </ select > < where > add name not one of SUBS1 </ where > < where > remove continent not one of SUBS1 </ where > < select > add name </ select > < select > remove countrycode </ select > < from > add country </ from >"
  },
  {
    "db_id": "flight_2",
    "feedback": "make sure that destination airport code is equal to aberdeen and use flights.",
    "question": "How many flights arriving in Aberdeen city?",
    "gold_parse": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
    "beam": [
      [
        "SELECT Count ( * ) FROM airports WHERE City = value",
        -0.17866039276123047
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE AirportName = value",
        -1.8158988952636719
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE AirportName = value AND City = value",
        -7.010649681091309
      ],
      [
        "SELECT Count ( * ) FROM flights AS T1 WHERE T1.DestAirport IN ( SELECT T2.AirportCode FROM airports AS T2 WHERE T2.City = value )",
        -12.49488878250122
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE Country = value",
        -13.38514232635498
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE City = value AND City = value",
        -13.6946382522583
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM airports WHERE City = value",
        -14.268184661865234
      ],
      [
        "SELECT Avg ( * ) FROM airports WHERE City = value",
        -14.850717067718506
      ],
      [
        "SELECT Count ( * ) FROM flights WHERE DestAirport = value",
        -15.101811408996582
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE City > value",
        -15.332030773162842
      ],
      [
        "SELECT * FROM airports WHERE City = value",
        -15.50903034210205
      ],
      [
        "SELECT Sum ( * ) FROM airports WHERE City = value",
        -15.685982704162598
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE AirportName LIKE value",
        -15.831204414367676
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE City LIKE value",
        -15.937514305114746
      ],
      [
        "SELECT Count ( * ) , * FROM airports WHERE City = value",
        -15.989006638526917
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE CountryAbbrev = value",
        -16.00426959991455
      ],
      [
        "SELECT Count ( * ) , AirportName FROM airports WHERE City = value",
        -16.010653614997864
      ],
      [
        "SELECT Count ( Count ( * ) ) FROM airports WHERE City = value",
        -16.02690601348877
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM airports WHERE AirportName = value",
        -16.124481201171875
      ],
      [
        "SELECT Count ( * ) FROM airlines",
        -18.58514404296875
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM airports WHERE City = \"Aberdeen\"",
    "predicted_parse": "SELECT Count ( * ) FROM airports WHERE City = value",
    "predicted_parse_explanation": [
      "find the number of rows in airports table whose city equals Aberdeen"
    ],
    "template_feedback": "additionally use the information from the flights table besides the airports table .",
    "primary_span": [
      [
        0,
        7
      ]
    ],
    "secondary_span": [
      [
        8,
        12
      ]
    ],
    "edits": [
      "flights"
    ],
    "edits_original": "< from > add flights </ from >"
  },
  {
    "db_id": "dog_kennels",
    "feedback": "Exchange home phone with cell number in both step 1 and 3 and professionals table with treatments table in step 2.",
    "question": "Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.",
    "gold_parse": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2",
    "beam": [
      [
        "SELECT professional_id , last_name , home_phone FROM Professionals WHERE state = value UNION SELECT professional_id , last_name , home_phone FROM Professionals GROUP BY professional_id HAVING Count ( * ) > = value",
        -1.2054004669189453
      ],
      [
        "SELECT professional_id , last_name , cell_number FROM Professionals WHERE state = value UNION SELECT professional_id , last_name , home_phone FROM Professionals GROUP BY professional_id HAVING Count ( * ) > = value",
        -2.466958999633789
      ],
      [
        "SELECT T1.professional_id , T1.last_name , T1.home_phone FROM Professionals AS T1 WHERE T1.state = value UNION SELECT T1.professional_id , T2.last_name , T1.home_phone FROM Owners AS T2 JOIN Dogs AS T3 ON T2.owner_id = T3.owner_id JOIN Professionals AS T1 JOIN Treatments AS T4 ON T3.dog_id = T4.dog_id AND T4.professional_id = T1.professional_id GROUP BY T1.professional_id HAVING Count ( * ) > = value",
        -2.6060562133789062
      ],
      [
        "SELECT T3.professional_id , T1.last_name , T3.home_phone FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id WHERE T3.state = value UNION SELECT T3.professional_id , T3.last_name , T3.home_phone FROM Professionals AS T3 GROUP BY T3.professional_id HAVING Count ( * ) > = value",
        -2.769937515258789
      ],
      [
        "SELECT professional_id , last_name , home_phone FROM Professionals WHERE state = value UNION SELECT professional_id , last_name , cell_number FROM Professionals GROUP BY professional_id HAVING Count ( * ) > = value",
        -2.915980339050293
      ],
      [
        "SELECT professional_id , last_name , home_phone FROM Professionals WHERE state = value UNION SELECT professional_id , last_name , home_phone FROM Professionals WHERE state = value",
        -3.4661216735839844
      ],
      [
        "SELECT T3.professional_id , T3.last_name , T1.home_phone FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id WHERE T3.state = value UNION SELECT T3.professional_id , T3.last_name , T3.home_phone FROM Professionals AS T3 GROUP BY T3.professional_id HAVING Count ( * ) > = value",
        -3.5846128463745117
      ],
      [
        "SELECT T1.professional_id , T1.last_name , T1.home_phone FROM Professionals AS T1 WHERE T1.state = value UNION SELECT T1.professional_id , T1.last_name , T2.home_phone FROM Owners AS T2 JOIN Dogs AS T3 ON T2.owner_id = T3.owner_id JOIN Professionals AS T1 JOIN Treatments AS T4 ON T3.dog_id = T4.dog_id AND T4.professional_id = T1.professional_id GROUP BY T1.professional_id HAVING Count ( * ) > = value",
        -3.8631467819213867
      ],
      [
        "SELECT T1.professional_id , T1.last_name , T1.cell_number FROM Professionals AS T1 WHERE T1.state = value UNION SELECT T1.professional_id , T2.last_name , T1.home_phone FROM Owners AS T2 JOIN Dogs AS T3 ON T2.owner_id = T3.owner_id JOIN Professionals AS T1 JOIN Treatments AS T4 ON T3.dog_id = T4.dog_id AND T4.professional_id = T1.professional_id GROUP BY T1.professional_id HAVING Count ( * ) > = value",
        -3.8661270141601562
      ],
      [
        "SELECT T3.professional_id , T1.last_name , T3.cell_number FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id WHERE T3.state = value UNION SELECT T3.professional_id , T3.last_name , T3.home_phone FROM Professionals AS T3 GROUP BY T3.professional_id HAVING Count ( * ) > = value",
        -4.009112358093262
      ],
      [
        "SELECT T1.professional_id , T1.last_name , T1.home_phone FROM Professionals AS T1 WHERE T1.state = value UNION SELECT T1.professional_id , T2.last_name , T1.cell_number FROM Owners AS T2 JOIN Dogs AS T3 ON T2.owner_id = T3.owner_id JOIN Professionals AS T1 JOIN Treatments AS T4 ON T3.dog_id = T4.dog_id AND T4.professional_id = T1.professional_id GROUP BY T1.professional_id HAVING Count ( * ) > = value",
        -4.130533218383789
      ],
      [
        "SELECT T3.professional_id , T1.last_name , T3.home_phone FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id WHERE T3.state = value UNION SELECT T3.professional_id , T1.last_name , T3.home_phone FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id GROUP BY T3.professional_id HAVING Count ( * ) > = value",
        -4.170772552490234
      ],
      [
        "SELECT professional_id , last_name , cell_number FROM Professionals WHERE state = value UNION SELECT professional_id , last_name , cell_number FROM Professionals GROUP BY professional_id HAVING Count ( * ) > = value",
        -4.177660942077637
      ],
      [
        "SELECT professional_id , last_name , home_phone FROM Professionals WHERE state = value UNION SELECT professional_id , last_name , home_phone FROM Professionals GROUP BY professional_id HAVING Count ( * ) > value",
        -4.436786651611328
      ],
      [
        "SELECT T3.professional_id , T1.last_name , T3.home_phone FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id WHERE T3.state = value UNION SELECT T3.professional_id , T3.last_name , T3.cell_number FROM Professionals AS T3 GROUP BY T3.professional_id HAVING Count ( * ) > = value",
        -4.480489730834961
      ],
      [
        "SELECT T3.professional_id , T3.last_name , T1.cell_number FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id WHERE T3.state = value UNION SELECT T3.professional_id , T3.last_name , T3.home_phone FROM Professionals AS T3 GROUP BY T3.professional_id HAVING Count ( * ) > = value",
        -4.567965507507324
      ],
      [
        "SELECT professional_id , last_name , cell_number FROM Professionals WHERE state = value UNION SELECT professional_id , last_name , home_phone FROM Professionals WHERE state = value",
        -4.75356388092041
      ],
      [
        "SELECT T1.professional_id , T1.last_name , T1.home_phone FROM Professionals AS T1 WHERE T1.state = value UNION SELECT T1.professional_id , T2.last_name , T1.home_phone FROM Owners AS T2 JOIN Dogs AS T3 ON T2.owner_id = T3.owner_id JOIN Professionals AS T1 JOIN Treatments AS T4 ON T3.dog_id = T4.dog_id AND T4.professional_id = T1.professional_id WHERE T1.state = value",
        -4.945621490478516
      ],
      [
        "SELECT T3.professional_id , T3.last_name , T1.home_phone FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id WHERE T3.state = value UNION SELECT T3.professional_id , T1.last_name , T3.home_phone FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id GROUP BY T3.professional_id HAVING Count ( * ) > = value",
        -4.984536170959473
      ],
      [
        "SELECT T1.professional_id , T1.last_name , T1.home_phone FROM Professionals AS T1 WHERE T1.state = value UNION SELECT T1.professional_id , T1.last_name , T2.cell_number FROM Owners AS T2 JOIN Dogs AS T3 ON T2.owner_id = T3.owner_id JOIN Professionals AS T1 JOIN Treatments AS T4 ON T3.dog_id = T4.dog_id AND T4.professional_id = T1.professional_id GROUP BY T1.professional_id HAVING Count ( * ) > = value",
        -5.014387130737305
      ]
    ],
    "predicted_parse_with_values": "SELECT professional_id , last_name , home_phone FROM Professionals WHERE state = \"Indiana\" UNION SELECT professional_id , last_name , home_phone FROM Professionals GROUP BY professional_id HAVING Count ( * ) > = 2",
    "predicted_parse": "SELECT professional_id , last_name , home_phone FROM Professionals WHERE state = value UNION SELECT professional_id , last_name , home_phone FROM Professionals GROUP BY professional_id HAVING Count ( * ) > = value",
    "predicted_parse_explanation": [
      "Step 1: find the professional id , last name , home phone in professionals table whose state equals Indiana",
      "Step 2: find the number of rows of each value of professional id in professionals table",
      "Step 3: find the professional id , last name , home phone in professionals table whose corresponding value in step 2 is greater than or equals 2",
      "Step 4: show the rows that are in any of the results of step 1 and step 3"
    ],
    "template_feedback": "in step 1 , find cell number in place of home phone . in step 2 , additionally use the information from the treatments table besides the professionals table . in step 3 , make sure that the corresponding value in step 2 greater than 2 . find cell number in place of home phone .",
    "primary_span": [
      [
        4,
        6
      ],
      [
        17,
        24
      ],
      [
        34,
        46
      ],
      [
        47,
        49
      ]
    ],
    "secondary_span": [
      [
        7,
        12
      ],
      [
        25,
        29
      ],
      [
        50,
        55
      ]
    ],
    "edits": [
      "cell number",
      "home phone",
      "cell number",
      "home phone",
      "treatments",
      "number of rows greater than 2",
      "number of rows greater than or equals to 2"
    ],
    "edits_original": "< select > add cell number </ select > < select > remove home phone </ select > < select > add cell number </ select > < select > remove home phone </ select > < from > add treatments </ from > < having > add number of rows greater than 2 </ having > < having > remove number of rows greater than or equals to 2 </ having >"
  },
  {
    "db_id": "dog_kennels",
    "feedback": "You should make use of treatments table in step 1 and omit professionals table.",
    "question": "Which professionals have done at least two treatments? List the professional's id, role, and first name.",
    "gold_parse": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
    "beam": [
      [
        "SELECT professional_id , role_code , first_name FROM Professionals GROUP BY professional_id HAVING Count ( * ) > = value",
        -0.05596160888671875
      ],
      [
        "SELECT professional_id , first_name , first_name FROM Professionals GROUP BY professional_id HAVING Count ( * ) > = value",
        -2.9468154907226562
      ],
      [
        "SELECT T3.professional_id , T3.role_code , T1.first_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id GROUP BY T3.professional_id HAVING Count ( * ) > = value",
        -7.317100524902344
      ],
      [
        "SELECT T3.professional_id , T3.first_name , T1.first_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id GROUP BY T3.professional_id HAVING Count ( * ) > = value",
        -7.670717716217041
      ],
      [
        "SELECT T3.professional_id , T1.first_name , T3.first_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id GROUP BY T3.professional_id HAVING Count ( * ) > = value",
        -8.356199264526367
      ],
      [
        "SELECT T1.owner_id , T3.role_code , T3.first_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id GROUP BY T3.professional_id HAVING Count ( * ) > = value",
        -8.548564910888672
      ],
      [
        "SELECT professional_id , role_code , first_name FROM Professionals GROUP BY first_name HAVING Count ( * ) > = value",
        -8.90737247467041
      ],
      [
        "SELECT role_code , first_name , first_name FROM Professionals GROUP BY professional_id HAVING Count ( * ) > = value",
        -9.00885009765625
      ],
      [
        "SELECT professional_id , role_code , first_name , first_name FROM Professionals GROUP BY professional_id HAVING Count ( * ) > = value",
        -10.500205039978027
      ],
      [
        "SELECT professional_id , first_name FROM Professionals GROUP BY professional_id HAVING Count ( * ) > = value",
        -11.088248252868652
      ],
      [
        "SELECT professional_id , first_name , first_name FROM Professionals GROUP BY first_name HAVING Count ( * ) > = value",
        -11.72414493560791
      ],
      [
        "SELECT T3.professional_id , T3.role_code , T3.first_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id GROUP BY T1.first_name HAVING Count ( * ) > = value",
        -12.655217170715332
      ],
      [
        "SELECT T3.professional_id , T3.role_code , T3.first_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id GROUP BY T1.owner_id HAVING Count ( * ) > = value",
        -12.842177391052246
      ],
      [
        "SELECT T3.professional_id , T1.first_name , T1.first_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id GROUP BY T3.professional_id HAVING Count ( * ) > = value",
        -13.63930082321167
      ],
      [
        "SELECT T3.role_code , T3.first_name , T1.first_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id GROUP BY T3.professional_id HAVING Count ( * ) > = value",
        -13.929178237915039
      ],
      [
        "SELECT professional_id , role_code , first_name FROM Professionals GROUP BY Count ( * ) HAVING Count ( * ) > = value",
        -13.930130004882812
      ],
      [
        "SELECT professional_id , role_code , first_name FROM Professionals WHERE first_name = value GROUP BY professional_id HAVING Count ( * ) > = value",
        -14.01392126083374
      ],
      [
        "SELECT T2.professional_id , T1.role_code , T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING Count ( * ) > = value",
        -14.1519136428833
      ],
      [
        "SELECT professional_id , first_name , professional_id FROM Professionals GROUP BY professional_id HAVING Count ( * ) > = value",
        -14.4790620803833
      ],
      [
        "SELECT professional_id , role_code , first_name FROM Professionals GROUP BY professional_id HAVING Sum ( * ) > = value",
        -14.618021130561829
      ]
    ],
    "predicted_parse_with_values": "SELECT professional_id , role_code , first_name FROM Professionals GROUP BY professional_id HAVING Count ( * ) > = 2",
    "predicted_parse": "SELECT professional_id , role_code , first_name FROM Professionals GROUP BY professional_id HAVING Count ( * ) > = value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of professional id in professionals table",
      "Step 2: find the professional id , role code , first name in professionals table whose corresponding value in step 1 is greater than or equals 2"
    ],
    "template_feedback": "in step 1 , additionally use the information from the treatments table besides the professionals table .",
    "primary_span": [
      [
        4,
        11
      ]
    ],
    "secondary_span": [
      [
        12,
        16
      ]
    ],
    "edits": [
      "treatments"
    ],
    "edits_original": "< from > add treatments </ from >"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "feedback": "order by document id",
    "question": "Return the different document ids along with the number of paragraphs corresponding to each, ordered by id.",
    "gold_parse": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id",
    "beam": [
      [
        "SELECT Document_ID , Count ( * ) FROM Paragraphs GROUP BY Document_ID ORDER BY Count ( * ) Asc",
        -0.0008401870727539062
      ],
      [
        "SELECT Document_ID , Count ( * ) FROM Paragraphs GROUP BY Document_ID ORDER BY Count ( * ) Desc",
        -8.168935775756836
      ],
      [
        "SELECT Document_ID , Count ( * ) FROM Paragraphs GROUP BY Document_ID ORDER BY Sum ( Paragraph_ID ) Asc",
        -9.196168661117554
      ],
      [
        "SELECT Document_ID , Sum ( Paragraph_ID ) FROM Paragraphs GROUP BY Document_ID ORDER BY Count ( * ) Asc",
        -9.345266819000244
      ],
      [
        "SELECT T2.Document_ID , Count ( * ) FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T2.Document_ID ORDER BY Sum ( T1.Template_ID ) Asc",
        -9.353832483291626
      ],
      [
        "SELECT Document_ID , Count ( * ) FROM Paragraphs GROUP BY Document_ID",
        -9.619437217712402
      ],
      [
        "SELECT Document_ID , Sum ( * ) FROM Paragraphs GROUP BY Document_ID ORDER BY Count ( * ) Asc",
        -10.959320545196533
      ],
      [
        "SELECT Document_ID , Count ( * ) FROM Paragraphs GROUP BY Document_ID ORDER BY Sum ( * ) Asc",
        -11.173646926879883
      ],
      [
        "SELECT T2.Document_ID , Count ( * ) FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T2.Document_ID ORDER BY T1.Template_ID Asc",
        -11.381858825683594
      ],
      [
        "SELECT T1.Document_ID , Count ( * ) FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T2.Document_ID ORDER BY Count ( * ) Asc",
        -11.578330993652344
      ],
      [
        "SELECT T2.Document_ID , Sum ( T1.Template_ID ) FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T2.Document_ID ORDER BY Count ( * ) Asc",
        -11.614113330841064
      ],
      [
        "SELECT Document_ID , Count ( * ) FROM Paragraphs GROUP BY Document_ID ORDER BY Document_ID Asc",
        -11.681256294250488
      ],
      [
        "SELECT T2.Document_ID , Count ( * ) FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T2.Document_ID ORDER BY Sum ( T1.Document_ID ) Asc",
        -11.962863683700562
      ],
      [
        "SELECT Document_ID , Count ( * ) FROM Paragraphs GROUP BY Document_ID ORDER BY Sum ( Paragraph_Text ) Asc",
        -12.00970256328582
      ],
      [
        "SELECT Document_ID , Count ( * ) , Document_ID FROM Paragraphs GROUP BY Document_ID ORDER BY Count ( * ) Asc",
        -12.741480827331543
      ],
      [
        "SELECT Document_ID FROM Paragraphs GROUP BY Document_ID ORDER BY Count ( * ) Asc",
        -12.929536819458008
      ],
      [
        "SELECT T1.Template_ID , Count ( * ) FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T2.Document_ID ORDER BY Count ( * ) Asc",
        -12.962247848510742
      ],
      [
        "SELECT Document_ID , Count ( * ) FROM Paragraphs GROUP BY Document_ID ORDER BY Count ( * ) Asc LIMIT value",
        -13.51868724822998
      ],
      [
        "SELECT Document_ID , Count ( * ) FROM Paragraphs GROUP BY Document_ID HAVING Count ( * ) > = value ORDER BY Count ( * ) Asc",
        -13.528483390808105
      ],
      [
        "SELECT T2.Document_ID , Count ( * ) FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID ORDER BY T1.Template_ID Asc",
        -13.854952812194824
      ]
    ],
    "predicted_parse_with_values": "SELECT Document_ID , Count ( * ) FROM Paragraphs GROUP BY Document_ID ORDER BY Count ( * ) Asc",
    "predicted_parse": "SELECT Document_ID , Count ( * ) FROM Paragraphs GROUP BY Document_ID ORDER BY Count ( * ) Asc",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of document id in paragraphs table",
      "Step 2: find the document id and number of rows in paragraphs table ordered ascending by the results of step 1"
    ],
    "template_feedback": "in step 2 , order the results by document id in place of number of rows .",
    "primary_span": [
      [
        4,
        9
      ]
    ],
    "secondary_span": [
      [
        10,
        16
      ]
    ],
    "edits": [
      "document id",
      "number of rows"
    ],
    "edits_original": "< orderBy > add document id </ orderBy > < orderBy > remove number of rows </ orderBy >"
  },
  {
    "db_id": "car_1",
    "feedback": "I want the the car names's model having highest number of make.",
    "question": "Which model has the most version(make) of cars?",
    "gold_parse": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1",
    "beam": [
      [
        "SELECT T3.Edispl FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id GROUP BY T1.Model ORDER BY Count ( * ) Desc LIMIT value",
        -0.1601119041442871
      ],
      [
        "SELECT T2.Edispl FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id GROUP BY T1.Model ORDER BY Count ( * ) Desc LIMIT value",
        -2.204254627227783
      ],
      [
        "SELECT T2.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model GROUP BY T1.Model ORDER BY Count ( * ) Desc LIMIT value",
        -3.8704710006713867
      ],
      [
        "SELECT Model FROM model_list GROUP BY Model ORDER BY Count ( * ) Desc LIMIT value",
        -4.818709850311279
      ],
      [
        "SELECT Edispl FROM cars_data GROUP BY Edispl ORDER BY Count ( * ) Desc LIMIT value",
        -5.684630870819092
      ],
      [
        "SELECT Model FROM car_names GROUP BY Model ORDER BY Count ( * ) Desc LIMIT value",
        -5.686760902404785
      ],
      [
        "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model GROUP BY T2.Model ORDER BY Count ( * ) Desc LIMIT value",
        -6.705759048461914
      ],
      [
        "SELECT T3.Edispl FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id GROUP BY T1.ModelId ORDER BY Count ( * ) Desc LIMIT value",
        -8.164129734039307
      ],
      [
        "SELECT ModelId FROM model_list GROUP BY Model ORDER BY Count ( * ) Desc LIMIT value",
        -8.933389663696289
      ],
      [
        "SELECT T1.Model FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id GROUP BY T2.Edispl ORDER BY Count ( * ) Desc LIMIT value",
        -9.186717510223389
      ],
      [
        "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id GROUP BY T3.Edispl ORDER BY Count ( * ) Desc LIMIT value",
        -10.09619951248169
      ],
      [
        "SELECT T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T2.Model ORDER BY Count ( * ) Desc LIMIT value",
        -10.57595157623291
      ],
      [
        "SELECT * FROM model_list GROUP BY Model ORDER BY Count ( * ) Desc LIMIT value",
        -10.699846267700195
      ],
      [
        "SELECT T1.ModelId FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model GROUP BY T2.Model ORDER BY Count ( * ) Desc LIMIT value",
        -11.062722206115723
      ],
      [
        "SELECT T2.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model GROUP BY T1.ModelId ORDER BY Count ( * ) Desc LIMIT value",
        -11.390743255615234
      ],
      [
        "SELECT Model FROM model_list GROUP BY ModelId ORDER BY Count ( * ) Desc LIMIT value",
        -12.235170841217041
      ],
      [
        "SELECT * FROM car_names GROUP BY Model ORDER BY Count ( * ) Desc LIMIT value",
        -12.322160720825195
      ],
      [
        "SELECT T3.Edispl FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id GROUP BY T1.Model ORDER BY Count ( * ) Desc",
        -12.444844722747803
      ],
      [
        "SELECT T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model GROUP BY T3.Model ORDER BY Count ( * ) Desc LIMIT value",
        -12.458940029144287
      ],
      [
        "SELECT T1.FullName FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T2.Model ORDER BY Count ( * ) Desc LIMIT value",
        -12.632226943969727
      ]
    ],
    "predicted_parse_with_values": "SELECT T3.Edispl FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id GROUP BY T1.Model ORDER BY Count ( * ) Desc LIMIT 1",
    "predicted_parse": "SELECT T3.Edispl FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id GROUP BY T1.Model ORDER BY Count ( * ) Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: for each row in model list table , find the corresponding rows in car names table and in cars data table",
      "Step 2: find the number of rows of each value of model list 's model of the results of step 1",
      "Step 3: find the edispl of the results of step 1 with largest value in the results of step 2"
    ],
    "template_feedback": "in step 1 , do not use the cars data table and model list table . in step 3 , find car names 's model in place of edispl .",
    "primary_span": [
      [
        4,
        15
      ],
      [
        20,
        24
      ]
    ],
    "secondary_span": [
      [
        4,
        15
      ],
      [
        25,
        29
      ]
    ],
    "edits": [
      "model",
      "edispl",
      "model list",
      "cars data"
    ],
    "edits_original": "< select > add model </ select > < select > remove edispl </ select > < from > remove model list </ from > < from > remove cars data </ from >"
  },
  {
    "db_id": "tvshow",
    "feedback": "I need pixel aspect ratio par rather than high definition tv.",
    "question": "find the pixel aspect ratio and nation of the tv channels that do not use English.",
    "gold_parse": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'",
    "beam": [
      [
        "SELECT Hight_definition_TV , Country FROM TV_Channel WHERE Language ! = value",
        -0.21093177795410156
      ],
      [
        "SELECT Max ( Hight_definition_TV ) , Country FROM TV_Channel WHERE Language ! = value",
        -2.367465019226074
      ],
      [
        "SELECT Pixel_aspect_ratio_PAR , Country FROM TV_Channel WHERE Language ! = value",
        -2.4758834838867188
      ],
      [
        "SELECT Max ( Pixel_aspect_ratio_PAR ) , Country FROM TV_Channel WHERE Language ! = value",
        -4.841094970703125
      ],
      [
        "SELECT Hight_definition_TV , Pay_per_view_PPV FROM TV_Channel WHERE Language ! = value",
        -6.310807228088379
      ],
      [
        "SELECT Min ( Hight_definition_TV ) , Country FROM TV_Channel WHERE Language ! = value",
        -6.817142486572266
      ],
      [
        "SELECT Hight_definition_TV , Hight_definition_TV FROM TV_Channel WHERE Language ! = value",
        -7.867986679077148
      ],
      [
        "SELECT Pixel_aspect_ratio_PAR , Pay_per_view_PPV FROM TV_Channel WHERE Language ! = value",
        -7.894707679748535
      ],
      [
        "SELECT Max ( Hight_definition_TV ) , Pay_per_view_PPV FROM TV_Channel WHERE Language ! = value",
        -8.70772647857666
      ],
      [
        "SELECT Min ( Pixel_aspect_ratio_PAR ) , Country FROM TV_Channel WHERE Language ! = value",
        -8.804962158203125
      ],
      [
        "SELECT T1.Hight_definition_TV , T2.Share FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.Language ! = value",
        -9.220647811889648
      ],
      [
        "SELECT Pixel_aspect_ratio_PAR , Hight_definition_TV FROM TV_Channel WHERE Language ! = value",
        -9.23906421661377
      ],
      [
        "SELECT Hight_definition_TV , Pixel_aspect_ratio_PAR FROM TV_Channel WHERE Language ! = value",
        -10.00283145904541
      ],
      [
        "SELECT T1.Hight_definition_TV , T2.18_49_Rating_Share FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.Language ! = value",
        -10.25766372680664
      ],
      [
        "SELECT Max ( Hight_definition_TV ) , Hight_definition_TV FROM TV_Channel WHERE Language ! = value",
        -10.484269142150879
      ],
      [
        "SELECT Max ( Pixel_aspect_ratio_PAR ) , Pay_per_view_PPV FROM TV_Channel WHERE Language ! = value",
        -10.709651947021484
      ],
      [
        "SELECT Max ( Pay_per_view_PPV ) , Country FROM TV_Channel WHERE Language ! = value",
        -10.899352073669434
      ],
      [
        "SELECT Pay_per_view_PPV , Country FROM TV_Channel WHERE Language ! = value",
        -10.975677490234375
      ],
      [
        "SELECT T1.Pixel_aspect_ratio_PAR , T2.Share FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.Language ! = value",
        -11.009162902832031
      ],
      [
        "SELECT T1.Hight_definition_TV , T1.Country FROM TV_Channel AS T1 WHERE T1.id NOT IN ( SELECT T2.Channel FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.Language = value )",
        -12.076159477233887
      ]
    ],
    "predicted_parse_with_values": "SELECT Hight_definition_TV , Country FROM TV_Channel WHERE Language ! = \"English\"",
    "predicted_parse": "SELECT Hight_definition_TV , Country FROM TV_Channel WHERE Language ! = value",
    "predicted_parse_explanation": [
      "find the hight definition tv and country in tv channel table whose language not equals English"
    ],
    "template_feedback": "find pixel aspect ratio par in place of hight definition tv .",
    "primary_span": [
      [
        0,
        4
      ]
    ],
    "secondary_span": [
      [
        5,
        11
      ]
    ],
    "edits": [
      "pixel aspect ratio par",
      "hight definition tv"
    ],
    "edits_original": "< select > add pixel aspect ratio par </ select > < select > remove hight definition tv </ select >"
  },
  {
    "db_id": "flight_2",
    "feedback": "Exchange 2nd airport name with airport code .",
    "question": "What is the airport name for airport 'AKO'?",
    "gold_parse": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"",
    "beam": [
      [
        "SELECT AirportName FROM airports WHERE AirportName = value",
        -0.10553693771362305
      ],
      [
        "SELECT AirportName FROM airports WHERE CountryAbbrev = value",
        -2.7679431438446045
      ],
      [
        "SELECT AirportName FROM airports WHERE Country = value",
        -3.5569398403167725
      ],
      [
        "SELECT AirportName FROM airports WHERE City = value",
        -4.895334243774414
      ],
      [
        "SELECT T1.AirportName FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T2.FlightNo = value",
        -7.445199489593506
      ],
      [
        "SELECT AirportName FROM airports WHERE AirportCode = value",
        -7.740048408508301
      ],
      [
        "SELECT * FROM airports WHERE AirportName = value",
        -8.558100700378418
      ],
      [
        "SELECT T2.AirportName FROM airlines AS T1 JOIN airports AS T2 WHERE T1.Airline = value",
        -10.026862144470215
      ],
      [
        "SELECT T2.AirportName FROM airlines AS T1 JOIN airports AS T2 WHERE T1.Country = value",
        -10.489602088928223
      ],
      [
        "SELECT T2.AirportName FROM airlines AS T1 JOIN airports AS T2 WHERE T1.Abbreviation = value",
        -10.82968521118164
      ],
      [
        "SELECT T1.AirportName FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T2.SourceAirport = value",
        -10.89669418334961
      ],
      [
        "SELECT T1.AirportName FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T2.Airline = value",
        -11.029757499694824
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = value",
        -11.988941192626953
      ],
      [
        "SELECT T2.AirportName FROM airlines AS T1 JOIN airports AS T2 WHERE T1.uid = value",
        -12.703533172607422
      ],
      [
        "SELECT AirportName FROM airports WHERE AirportName LIKE value",
        -12.847105026245117
      ],
      [
        "SELECT T1.AirportName FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T2.DestAirport = value",
        -12.847554206848145
      ],
      [
        "SELECT AirportName FROM airports",
        -12.882903099060059
      ],
      [
        "SELECT CountryAbbrev FROM airports WHERE AirportName = value",
        -13.484954595565796
      ],
      [
        "SELECT Country FROM airports WHERE AirportName = value",
        -13.571722507476807
      ],
      [
        "SELECT T1.Abbreviation FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = value",
        -13.72347640991211
      ]
    ],
    "predicted_parse_with_values": "SELECT AirportName FROM airports WHERE AirportName = \"AKO\"",
    "predicted_parse": "SELECT AirportName FROM airports WHERE AirportName = value",
    "predicted_parse_explanation": [
      "find the airport name in airports table whose airport name equals AKO"
    ],
    "template_feedback": "consider the airport code equals AKO conditions in place of the airport name equals AKO conditions .",
    "primary_span": [
      [
        0,
        6
      ]
    ],
    "secondary_span": [
      [
        7,
        16
      ]
    ],
    "edits": [
      "airport code equals \"AKO\"",
      "airport name equals \"AKO\""
    ],
    "edits_original": "< where > add airport code equals \" AKO \" </ where > < where > remove airport name equals \" AKO \" </ where >"
  },
  {
    "db_id": "orchestra",
    "feedback": "In step 1 , substitute orchestra id in performance table in place of year of founded in orchestra table .",
    "question": "Show the years in which orchestras that have given more than one performance are founded.",
    "gold_parse": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1",
    "beam": [
      [
        "SELECT Year_of_Founded FROM orchestra GROUP BY Year_of_Founded HAVING Count ( * ) > value",
        -0.0037250518798828125
      ],
      [
        "SELECT T1.Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING Count ( * ) > value",
        -5.609215259552002
      ],
      [
        "SELECT T1.Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID GROUP BY T2.Official_ratings_(millions) HAVING Count ( * ) > value",
        -11.012125015258789
      ],
      [
        "SELECT T1.Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID JOIN show AS T3 ON T2.Performance_ID = T3.Performance_ID WHERE T3.Attendance > value",
        -11.34201955795288
      ],
      [
        "SELECT Year_of_Founded FROM orchestra GROUP BY Year_of_Founded HAVING Avg ( * ) > value",
        -12.808069229125977
      ],
      [
        "SELECT Year_of_Founded FROM orchestra",
        -12.847124099731445
      ],
      [
        "SELECT Year_of_Founded FROM orchestra GROUP BY Record_Company HAVING Count ( * ) > value",
        -12.85191822052002
      ],
      [
        "SELECT T1.Year_of_Founded FROM orchestra AS T1 GROUP BY T1.Year_of_Founded HAVING Count ( * ) > ( SELECT Max ( T2.Official_ratings_(millions) ) FROM performance AS T2 )",
        -12.932894706726074
      ],
      [
        "SELECT Year_of_Founded FROM orchestra GROUP BY Orchestra_ID HAVING Count ( * ) > value",
        -12.94254207611084
      ],
      [
        "SELECT T1.Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID JOIN show AS T3 ON T2.Performance_ID = T3.Performance_ID GROUP BY T3.Attendance HAVING Count ( * ) > value",
        -13.934981346130371
      ],
      [
        "SELECT DISTINCT Year_of_Founded FROM orchestra GROUP BY Year_of_Founded HAVING Count ( * ) > value",
        -14.047676086425781
      ],
      [
        "SELECT Year_of_Founded FROM orchestra WHERE Year_of_Founded > value",
        -14.103211641311646
      ],
      [
        "SELECT T1.Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID JOIN show AS T3 ON T2.Performance_ID = T3.Performance_ID GROUP BY T1.Year_of_Founded HAVING Count ( T3.Performance_ID ) > value",
        -14.175323486328125
      ],
      [
        "SELECT Year_of_Founded FROM orchestra GROUP BY Major_Record_Format HAVING Count ( * ) > value",
        -14.283157348632812
      ],
      [
        "SELECT T1.Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID JOIN show AS T3 ON T2.Performance_ID = T3.Performance_ID WHERE T3.Attendance > value GROUP BY T1.Year_of_Founded HAVING Count ( * ) > value",
        -14.603060960769653
      ],
      [
        "SELECT Year_of_Founded FROM orchestra GROUP BY Orchestra HAVING Count ( * ) > value",
        -14.828060150146484
      ],
      [
        "SELECT Year_of_Founded FROM orchestra GROUP BY Year_of_Founded HAVING Count ( * ) = value",
        -14.853821754455566
      ],
      [
        "SELECT Year_of_Founded FROM orchestra GROUP BY Conductor_ID HAVING Count ( * ) > value",
        -15.030594825744629
      ],
      [
        "SELECT T1.Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID WHERE T2.Weekly_rank > value",
        -15.052148580551147
      ],
      [
        "SELECT T1.Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID WHERE T2.Performance_ID > value",
        -15.627662181854248
      ]
    ],
    "predicted_parse_with_values": "SELECT Year_of_Founded FROM orchestra GROUP BY Year_of_Founded HAVING Count ( * ) > 1",
    "predicted_parse": "SELECT Year_of_Founded FROM orchestra GROUP BY Year_of_Founded HAVING Count ( * ) > value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of year of founded in orchestra table",
      "Step 2: find the year of founded in orchestra table whose corresponding value in step 1 is greater than 1"
    ],
    "template_feedback": "in step 1 , additionally use the information from the performance table besides the orchestra table . find for value of performance 's orchestra id in place of year of founded .",
    "primary_span": [
      [
        4,
        11
      ],
      [
        17,
        24
      ]
    ],
    "secondary_span": [
      [
        12,
        16
      ],
      [
        25,
        31
      ]
    ],
    "edits": [
      "performance",
      "orchestra id",
      "year of founded"
    ],
    "edits_original": "< from > add performance </ from > < groupBy > add orchestra id </ groupBy > < groupBy > remove year of founded </ groupBy >"
  },
  {
    "db_id": "battle_death",
    "feedback": "In step 2 , I want caused by ship.",
    "question": "What is the ship id and name that caused most total injuries?",
    "gold_parse": "SELECT T2.id ,  T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
    "beam": [
      [
        "SELECT T1.id , T1.name FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id GROUP BY T2.id ORDER BY Sum ( T2.injured ) Desc LIMIT value",
        -0.03814983367919922
      ],
      [
        "SELECT T2.id , T1.name FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id GROUP BY T2.id ORDER BY Sum ( T2.injured ) Desc LIMIT value",
        -3.362544059753418
      ],
      [
        "SELECT T2.caused_by_ship_id , T1.name FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id GROUP BY T2.id ORDER BY Sum ( T2.injured ) Desc LIMIT value",
        -6.025937080383301
      ],
      [
        "SELECT T1.id , T1.name FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id GROUP BY T2.caused_by_ship_id ORDER BY Sum ( T2.injured ) Desc LIMIT value",
        -9.083398818969727
      ],
      [
        "SELECT T1.id , T1.name FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id GROUP BY T1.id ORDER BY Sum ( T2.injured ) Desc LIMIT value",
        -9.094120979309082
      ],
      [
        "SELECT T1.id , T1.name FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id GROUP BY T2.id ORDER BY Count ( * ) Desc LIMIT value",
        -10.688019752502441
      ],
      [
        "SELECT T1.id , T1.name FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id GROUP BY T2.id",
        -11.1514253616333
      ],
      [
        "SELECT id , Sum ( injured ) FROM death GROUP BY id ORDER BY Sum ( injured ) Desc LIMIT value",
        -11.211701393127441
      ],
      [
        "SELECT T2.id , Sum ( T1.name ) FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id GROUP BY T2.id ORDER BY Sum ( T2.injured ) Desc LIMIT value",
        -11.224089622497559
      ],
      [
        "SELECT T1.id , T1.name FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id GROUP BY T2.id ORDER BY Sum ( T2.injured ) Desc",
        -11.6438627243042
      ],
      [
        "SELECT T1.disposition_of_ship , T1.name FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id GROUP BY T2.id ORDER BY Sum ( T2.injured ) Desc LIMIT value",
        -11.908198356628418
      ],
      [
        "SELECT T2.id , T1.name FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id GROUP BY T2.caused_by_ship_id ORDER BY Sum ( T2.injured ) Desc LIMIT value",
        -12.420317649841309
      ],
      [
        "SELECT T2.id , T1.name FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id GROUP BY T1.id ORDER BY Sum ( T2.injured ) Desc LIMIT value",
        -12.431095123291016
      ],
      [
        "SELECT T1.id , T1.name FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id GROUP BY T2.id ORDER BY Avg ( T2.injured ) Desc LIMIT value",
        -12.512893676757812
      ],
      [
        "SELECT T2.killed , T1.name FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id GROUP BY T2.id ORDER BY Sum ( T2.injured ) Desc LIMIT value",
        -12.534457206726074
      ],
      [
        "SELECT T1.id , Sum ( T1.name ) FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id GROUP BY T2.id ORDER BY Sum ( T2.injured ) Desc LIMIT value",
        -12.665933609008789
      ],
      [
        "SELECT T1.id , T2.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle AND T1.id = T2.lost_in_battle JOIN death AS T3 ON T2.id = T3.caused_by_ship_id GROUP BY T3.id ORDER BY Sum ( T3.injured ) Desc LIMIT value",
        -12.68008804321289
      ],
      [
        "SELECT T2.id , T1.name FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id GROUP BY T2.id",
        -12.929976463317871
      ],
      [
        "SELECT T1.id , T1.name , Sum ( T2.injured ) FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id GROUP BY T2.id ORDER BY Sum ( T2.injured ) Desc LIMIT value",
        -13.25317096710205
      ],
      [
        "SELECT T1.id , T1.name FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id ORDER BY T2.injured Desc LIMIT value",
        -13.724791526794434
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.id , T1.name FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id GROUP BY T2.id ORDER BY Sum ( T2.injured ) Desc LIMIT 1",
    "predicted_parse": "SELECT T1.id , T1.name FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id GROUP BY T2.id ORDER BY Sum ( T2.injured ) Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: for each row in ship table , find the corresponding rows in death table",
      "Step 2: find the summation of injured of each value of death 's id of the results of step 1",
      "Step 3: find the ship 's id and name of the results of step 1 with largest value in the results of step 2"
    ],
    "template_feedback": "in step 2 , find for each value of ship 's id in place of death 's id . in step 3 , order the results by number of rows in place of summation of injured .",
    "primary_span": [
      [
        4,
        11
      ],
      [
        23,
        29
      ]
    ],
    "secondary_span": [
      [
        12,
        18
      ],
      [
        30,
        36
      ]
    ],
    "edits": [
      "number of rows",
      "summation of injured"
    ],
    "edits_original": "< orderBy > add number of rows </ orderBy > < orderBy > remove summation of injured </ orderBy >"
  },
  {
    "db_id": "orchestra",
    "feedback": "You should find the major record format of orchestra in  ascending order of share.",
    "question": "What are the major record formats of orchestras, sorted by their frequency?",
    "gold_parse": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC",
    "beam": [
      [
        "SELECT Type FROM performance ORDER BY Share Desc",
        -1.271963119506836
      ],
      [
        "SELECT T1.Major_Record_Format FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID ORDER BY T2.Share Desc",
        -1.8587275743484497
      ],
      [
        "SELECT * FROM performance ORDER BY Share Desc",
        -2.5201802253723145
      ],
      [
        "SELECT Type FROM performance ORDER BY Date Desc",
        -3.0444709062576294
      ],
      [
        "SELECT Type FROM performance ORDER BY Type Desc",
        -3.055083394050598
      ],
      [
        "SELECT Type FROM performance ORDER BY Weekly_rank Desc",
        -3.3044618368148804
      ],
      [
        "SELECT T2.Type FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID ORDER BY T1.Major_Record_Format Desc",
        -3.368613123893738
      ],
      [
        "SELECT T1.Type FROM performance AS T1 JOIN show AS T2 ON T1.Performance_ID = T2.Performance_ID ORDER BY T2.Attendance Desc",
        -3.5002249479293823
      ],
      [
        "SELECT T1.Major_Record_Format FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID ORDER BY T2.Date Desc",
        -3.643065571784973
      ],
      [
        "SELECT T1.Major_Record_Format FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID ORDER BY T2.Type Desc",
        -3.646738886833191
      ],
      [
        "SELECT T1.Major_Record_Format FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID ORDER BY T2.Weekly_rank Desc",
        -3.8969591856002808
      ],
      [
        "SELECT Major_Record_Format FROM orchestra ORDER BY Major_Record_Format Desc",
        -3.952954649925232
      ],
      [
        "SELECT T1.Type FROM performance AS T1 JOIN show AS T2 ON T1.Performance_ID = T2.Performance_ID ORDER BY T2.If_first_show Desc",
        -3.96009624004364
      ],
      [
        "SELECT T1.Major_Record_Format FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID JOIN show AS T3 ON T2.Performance_ID = T3.Performance_ID ORDER BY T3.Attendance Desc",
        -4.081389784812927
      ],
      [
        "SELECT * FROM performance ORDER BY Date Desc",
        -4.310475468635559
      ],
      [
        "SELECT * FROM performance ORDER BY Type Desc",
        -4.337497353553772
      ],
      [
        "SELECT * FROM performance ORDER BY Weekly_rank Desc",
        -4.528067231178284
      ],
      [
        "SELECT T1.Major_Record_Format FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID JOIN show AS T3 ON T2.Performance_ID = T3.Performance_ID ORDER BY T3.If_first_show Desc",
        -4.542124152183533
      ],
      [
        "SELECT * FROM orchestra ORDER BY Major_Record_Format Desc",
        -4.567887902259827
      ],
      [
        "SELECT Date FROM performance ORDER BY Share Desc",
        -4.621019601821899
      ]
    ],
    "predicted_parse_with_values": "SELECT Type FROM performance ORDER BY Share Desc",
    "predicted_parse": "SELECT Type FROM performance ORDER BY Share Desc",
    "predicted_parse_explanation": [
      "find the type in performance table ordered descending by share"
    ],
    "template_feedback": "use orchestra table in place of performance table . find for each value of major record format . find major record format in place of type . order the results ascending by number of rows in place of ordering descending by share .",
    "primary_span": [
      [
        0,
        2
      ],
      [
        9,
        17
      ],
      [
        18,
        21
      ],
      [
        27,
        34
      ]
    ],
    "secondary_span": [
      [
        3,
        8
      ],
      [
        22,
        26
      ],
      [
        35,
        42
      ]
    ],
    "edits": [
      "major record format",
      "type",
      "orchestra",
      "performance",
      "major record format",
      "number of rows",
      "share",
      "descending"
    ],
    "edits_original": "< select > add major record format </ select > < select > remove type </ select > < from > add orchestra </ from > < from > remove performance </ from > < groupBy > add major record format </ groupBy > < orderBy > add number of rows </ orderBy > < orderBy > remove share </ orderBy > < orderBy > remove descending </ orderBy >"
  },
  {
    "db_id": "car_1",
    "feedback": "Find number of rows of model list table whose corresponding car makers's maker equals American Motor Company .",
    "question": "What is the number of car models created by the car maker American Motor Company?",
    "gold_parse": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'",
    "beam": [
      [
        "SELECT Count ( * ) FROM car_makers WHERE Maker = value",
        -0.36098766326904297
      ],
      [
        "SELECT Count ( * ) FROM model_list WHERE Model = value",
        -1.5968189239501953
      ],
      [
        "SELECT Count ( * ) FROM car_makers WHERE FullName = value",
        -2.3539652824401855
      ],
      [
        "SELECT Count ( * ) FROM model_list WHERE Maker = value",
        -5.2738261222839355
      ],
      [
        "SELECT Count ( * ) FROM car_makers WHERE Country = value",
        -8.937047958374023
      ],
      [
        "SELECT Count ( * ) FROM car_names WHERE Model = value",
        -9.047014236450195
      ],
      [
        "SELECT Count ( * ) FROM countries WHERE CountryName = value",
        -9.410125732421875
      ],
      [
        "SELECT Count ( DISTINCT T2.Model ) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker WHERE T1.Maker = value",
        -11.637365341186523
      ],
      [
        "SELECT T2.Model FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker WHERE T1.Maker = value",
        -12.418935775756836
      ],
      [
        "SELECT Count ( * ) FROM cars_data WHERE Year = value",
        -13.297175407409668
      ],
      [
        "SELECT Count ( DISTINCT T2.Model ) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker WHERE T1.FullName = value",
        -13.59352445602417
      ],
      [
        "SELECT Count ( * ) FROM model_list WHERE Model LIKE value",
        -13.602699279785156
      ],
      [
        "SELECT Count ( * ) FROM cars_data WHERE Horsepower = value",
        -13.612292289733887
      ],
      [
        "SELECT Count ( * ) FROM car_names WHERE Make = value",
        -13.976397514343262
      ],
      [
        "SELECT T2.Model FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker WHERE T1.FullName = value",
        -14.150606155395508
      ],
      [
        "SELECT Count ( DISTINCT Model ) FROM model_list WHERE Model = value",
        -14.474307537078857
      ],
      [
        "SELECT Count ( * ) , T2.Model FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker WHERE T1.Maker = value",
        -14.497253656387329
      ],
      [
        "SELECT Count ( * ) FROM countries WHERE CountryId = value",
        -14.862794876098633
      ],
      [
        "SELECT Sum ( * ) FROM car_makers WHERE Maker = value",
        -14.919909119606018
      ],
      [
        "SELECT Count ( * ) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker WHERE T1.Maker = value AND T2.Maker = value",
        -15.658842325210571
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM car_makers WHERE Maker = \"American Motor Company\"",
    "predicted_parse": "SELECT Count ( * ) FROM car_makers WHERE Maker = value",
    "predicted_parse_explanation": [
      "find the number of rows in car makers table whose maker equals American Motor Company"
    ],
    "template_feedback": "additionally use the information from the model list table besides the car makers table . consider the full name equals American Motor Company conditions in place of the car makers 's maker equals American Motor Company conditions .",
    "primary_span": [
      [
        0,
        8
      ],
      [
        15,
        23
      ]
    ],
    "secondary_span": [
      [
        9,
        14
      ],
      [
        24,
        37
      ]
    ],
    "edits": [
      "model list",
      "full name equals \"American Motor Company\"",
      "maker equals \"American Motor Company\""
    ],
    "edits_original": "< from > add model list </ from > < where > add full name equals \" American Motor Company \" </ where > < where > remove maker equals \" American Motor Company \" </ where >"
  },
  {
    "db_id": "world_1",
    "feedback": "you need search for the language that are frequently used from countrylanguage's table whose continent should be asia.",
    "question": "What is the language that is used by the largest number of Asian nations?",
    "gold_parse": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1",
    "beam": [
      [
        "SELECT Name FROM country WHERE Continent = value ORDER BY Population Desc LIMIT value",
        -0.3811049461364746
      ],
      [
        "SELECT Name FROM country WHERE Continent = value ORDER BY LifeExpectancy Desc LIMIT value",
        -2.0537848472595215
      ],
      [
        "SELECT T2.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = value ORDER BY T1.Population Desc LIMIT value",
        -2.2381606101989746
      ],
      [
        "SELECT Name FROM country WHERE Continent = value ORDER BY * Desc LIMIT value",
        -2.9883270263671875
      ],
      [
        "SELECT Name FROM country WHERE Continent = value ORDER BY Continent Desc LIMIT value",
        -4.592125415802002
      ],
      [
        "SELECT LocalName FROM country WHERE Continent = value ORDER BY Population Desc LIMIT value",
        -4.973635673522949
      ],
      [
        "SELECT Name FROM country WHERE Continent = value ORDER BY SurfaceArea Desc LIMIT value",
        -6.1505327224731445
      ],
      [
        "SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = value ORDER BY T2.Population Desc LIMIT value",
        -6.222093105316162
      ],
      [
        "SELECT Name FROM country WHERE Continent = value ORDER BY GNPOld Desc LIMIT value",
        -6.516472339630127
      ],
      [
        "SELECT LocalName FROM country WHERE Continent = value ORDER BY LifeExpectancy Desc LIMIT value",
        -6.647587776184082
      ],
      [
        "SELECT T2.LocalName FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = value ORDER BY T1.Population Desc LIMIT value",
        -6.824862957000732
      ],
      [
        "SELECT T1.name FROM sqlite_sequence AS T1 JOIN country AS T2 WHERE T2.Continent = value ORDER BY T2.Population Desc LIMIT value",
        -7.131572246551514
      ],
      [
        "SELECT Name FROM country WHERE Continent = value ORDER BY LocalName Desc LIMIT value",
        -7.215455532073975
      ],
      [
        "SELECT Name FROM country WHERE Continent = value ORDER BY Capital Desc LIMIT value",
        -7.487022399902344
      ],
      [
        "SELECT Code2 FROM country WHERE Continent = value ORDER BY Population Desc LIMIT value",
        -7.493592262268066
      ],
      [
        "SELECT Name FROM country WHERE Continent = value",
        -8.353987693786621
      ],
      [
        "SELECT Name FROM country ORDER BY Population Desc LIMIT value",
        -9.16965389251709
      ],
      [
        "SELECT Name FROM country ORDER BY LifeExpectancy Desc LIMIT value",
        -10.490880012512207
      ],
      [
        "SELECT Name FROM country ORDER BY Continent Desc LIMIT value",
        -10.74806022644043
      ],
      [
        "SELECT T2.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code ORDER BY T1.Population Desc LIMIT value",
        -12.198727130889893
      ]
    ],
    "predicted_parse_with_values": "SELECT Name FROM country WHERE Continent = \"Asia\" ORDER BY Population Desc LIMIT 1",
    "predicted_parse": "SELECT Name FROM country WHERE Continent = value ORDER BY Population Desc LIMIT value",
    "predicted_parse_explanation": [
      "find the name in country table whose continent equals Asia with largest value of population"
    ],
    "template_feedback": "additionally use the information from the countrylanguage table besides the country table . find for each value of language . find language in place of name . order the results by number of rows in place of population .",
    "primary_span": [
      [
        0,
        7
      ],
      [
        13,
        19
      ],
      [
        20,
        21
      ],
      [
        27,
        33
      ]
    ],
    "secondary_span": [
      [
        8,
        12
      ],
      [
        22,
        26
      ],
      [
        34,
        38
      ]
    ],
    "edits": [
      "language",
      "name",
      "countrylanguage",
      "language",
      "number of rows",
      "population"
    ],
    "edits_original": "< select > add language </ select > < select > remove name </ select > < from > add countrylanguage </ from > < groupBy > add language </ groupBy > < orderBy > add number of rows </ orderBy > < orderBy > remove population </ orderBy >"
  },
  {
    "db_id": "concert_singer",
    "feedback": "Ensure year greater than 2013 in step 2",
    "question": "What is the name and capacity of the stadium  with the most concerts after 2013?",
    "gold_parse": "SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1",
    "beam": [
      [
        "SELECT T1.Name , T1.Capacity FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year > value GROUP BY T1.Stadium_ID ORDER BY Count ( * ) Desc LIMIT value",
        -0.0007467269897460938
      ],
      [
        "SELECT T1.Name , T1.Capacity FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year > value GROUP BY T2.Stadium_ID ORDER BY Count ( * ) Desc LIMIT value",
        -7.4426140785217285
      ],
      [
        "SELECT T1.Name , T1.Capacity FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year > value GROUP BY T1.Stadium_ID ORDER BY Count ( * ) Desc",
        -10.37925910949707
      ],
      [
        "SELECT Name , Capacity FROM stadium GROUP BY Stadium_ID ORDER BY Count ( * ) Desc LIMIT value",
        -10.438172340393066
      ],
      [
        "SELECT T1.Name , T1.Capacity FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE Max ( T2.Year ) > value GROUP BY T1.Stadium_ID ORDER BY Count ( * ) Desc LIMIT value",
        -10.490579605102539
      ],
      [
        "SELECT T1.Name , T1.Capacity , T1.Stadium_ID FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year > value GROUP BY T1.Stadium_ID ORDER BY Count ( * ) Desc LIMIT value",
        -11.538217067718506
      ],
      [
        "SELECT T1.Name , T1.Capacity FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID GROUP BY T1.Stadium_ID HAVING T2.Year > value ORDER BY Count ( * ) Desc LIMIT value",
        -11.578674793243408
      ],
      [
        "SELECT T1.Name , T1.Capacity FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year > value ORDER BY T2.Year Desc LIMIT value",
        -12.02289867401123
      ],
      [
        "SELECT T1.Name , T1.Capacity FROM stadium AS T1 JOIN singer AS T2 JOIN concert AS T3 ON T1.Stadium_ID = T3.Stadium_ID JOIN singer_in_concert AS T4 ON T3.concert_ID = T4.concert_ID AND T4.Singer_ID = T2.Singer_ID WHERE T2.Song_release_year > value GROUP BY T1.Stadium_ID ORDER BY Count ( * ) Desc LIMIT value",
        -12.139519691467285
      ],
      [
        "SELECT T1.Name , T1.Capacity , T1.Capacity FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year > value GROUP BY T1.Stadium_ID ORDER BY Count ( * ) Desc LIMIT value",
        -12.19132137298584
      ],
      [
        "SELECT T1.Name FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year > value GROUP BY T1.Stadium_ID ORDER BY Count ( * ) Desc LIMIT value",
        -12.213446617126465
      ],
      [
        "SELECT T1.Name , T1.Capacity FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year > value ORDER BY T1.Capacity Desc LIMIT value",
        -12.371932029724121
      ],
      [
        "SELECT T1.Name , T1.Capacity , T2.concert_Name FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year > value GROUP BY T1.Stadium_ID ORDER BY Count ( * ) Desc LIMIT value",
        -13.059196472167969
      ],
      [
        "SELECT Name , Capacity FROM stadium WHERE Count ( * ) > value GROUP BY Stadium_ID ORDER BY Count ( * ) Desc LIMIT value",
        -13.216779708862305
      ],
      [
        "SELECT T1.Name , T1.Capacity FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year > value",
        -13.232545852661133
      ],
      [
        "SELECT T1.Name , T1.Capacity FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year > value GROUP BY T1.Stadium_ID",
        -13.235490322113037
      ],
      [
        "SELECT T1.Name , T1.Capacity FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year = value GROUP BY T1.Stadium_ID ORDER BY Count ( * ) Desc LIMIT value",
        -13.489328384399414
      ],
      [
        "SELECT T1.Name , T1.Capacity FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year > value GROUP BY T1.Stadium_ID ORDER BY Count ( * ) Asc LIMIT value",
        -13.704129219055176
      ],
      [
        "SELECT T1.Name , T1.Capacity FROM stadium AS T1 GROUP BY T1.Stadium_ID HAVING Count ( * ) > value UNION SELECT T1.Name , T1.Capacity FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year > value",
        -13.935761451721191
      ],
      [
        "SELECT T1.Name , T1.Capacity FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID GROUP BY T1.Stadium_ID HAVING T2.Year > value ORDER BY Count ( * ) Desc",
        -14.052781581878662
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.Name , T1.Capacity FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year > 2014 GROUP BY T1.Stadium_ID ORDER BY Count ( * ) Desc LIMIT 1",
    "predicted_parse": "SELECT T1.Name , T1.Capacity FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year > value GROUP BY T1.Stadium_ID ORDER BY Count ( * ) Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: for each row in stadium table , find the corresponding rows in concert table",
      "Step 2: only keep the results of step 1 whose year greater than 2014",
      "Step 3: find the number of rows of each value of stadium 's stadium id the results of step 2",
      "Step 4: find the name and capacity the results of step 2 with largest value in the results of step 3"
    ],
    "template_feedback": "in step 2 , consider the year greater than or equals 2014 conditions in place of the year greater than 2014 conditions .",
    "primary_span": [
      [
        4,
        12
      ]
    ],
    "secondary_span": [
      [
        13,
        22
      ]
    ],
    "edits": [
      "year greater than or equals to 2014",
      "year greater than 2014"
    ],
    "edits_original": "< where > add year greater than or equals to 2014 </ where > < where > remove year greater than 2014 </ where >"
  },
  {
    "db_id": "world_1",
    "feedback": "i want the continent where highest number of different languages are spoken.",
    "question": "Which continent has the most diverse languages?",
    "gold_parse": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1",
    "beam": [
      [
        "SELECT Continent FROM country GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value",
        -0.00014495849609375
      ],
      [
        "SELECT Continent FROM country GROUP BY Region ORDER BY Count ( * ) Desc LIMIT value",
        -10.3721342086792
      ],
      [
        "SELECT Continent FROM country GROUP BY Continent ORDER BY Sum ( Population ) Desc LIMIT value",
        -10.51146125793457
      ],
      [
        "SELECT Continent FROM country GROUP BY LocalName ORDER BY Count ( * ) Desc LIMIT value",
        -10.874995231628418
      ],
      [
        "SELECT Continent FROM country GROUP BY Continent ORDER BY Count ( Population ) Desc LIMIT value",
        -11.255653381347656
      ],
      [
        "SELECT Continent FROM country ORDER BY Population Desc LIMIT value",
        -11.45891284942627
      ],
      [
        "SELECT Continent , Count ( * ) FROM country GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value",
        -11.513825416564941
      ],
      [
        "SELECT T2.Continent FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code GROUP BY T2.Continent ORDER BY Count ( T1.Population ) Desc LIMIT value",
        -11.715453147888184
      ],
      [
        "SELECT Continent , Continent FROM country GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value",
        -11.913078308105469
      ],
      [
        "SELECT Continent FROM country GROUP BY Continent ORDER BY Count ( * ) Desc",
        -12.167367935180664
      ],
      [
        "SELECT Continent , Count ( * ) FROM country GROUP BY Continent",
        -12.669985294342041
      ],
      [
        "SELECT Continent FROM country GROUP BY Continent ORDER BY Count ( DISTINCT LocalName ) Desc LIMIT value",
        -13.670797348022461
      ],
      [
        "SELECT Continent FROM country GROUP BY Continent ORDER BY Count ( LifeExpectancy ) Desc LIMIT value",
        -14.093358993530273
      ],
      [
        "SELECT Continent , Population FROM country GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value",
        -14.18588638305664
      ],
      [
        "SELECT DISTINCT Continent FROM country GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value",
        -14.22431468963623
      ],
      [
        "SELECT Continent FROM country GROUP BY Continent",
        -14.301864624023438
      ],
      [
        "SELECT Continent FROM country WHERE Population = ( SELECT Max ( Population ) FROM country ) GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value",
        -14.322280883789062
      ],
      [
        "SELECT Continent FROM country GROUP BY Continent ORDER BY Count ( * ) Asc LIMIT value",
        -14.529264450073242
      ],
      [
        "SELECT Continent FROM country GROUP BY Continent ORDER BY Count ( LocalName ) Desc LIMIT value",
        -14.557194232940674
      ],
      [
        "SELECT Continent FROM country",
        -17.68507480621338
      ]
    ],
    "predicted_parse_with_values": "SELECT Continent FROM country GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT 1",
    "predicted_parse": "SELECT Continent FROM country GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of continent in country table",
      "Step 2: find the continent in country table with largest value in the results of step 1"
    ],
    "template_feedback": "in step 1 , additionally use the information from the countrylanguage table besides the country table .",
    "primary_span": [
      [
        4,
        11
      ]
    ],
    "secondary_span": [
      [
        12,
        16
      ]
    ],
    "edits": [
      "countrylanguage"
    ],
    "edits_original": "< from > add countrylanguage </ from >"
  },
  {
    "db_id": "flight_2",
    "feedback": "Substitute abbreviation in airlines table with airline in flights table in step 1.",
    "question": "Find the abbreviation and country of the airline that has fewest number of flights?",
    "gold_parse": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1",
    "beam": [
      [
        "SELECT Abbreviation , Country FROM airlines GROUP BY Abbreviation ORDER BY Count ( * ) Asc LIMIT value",
        -0.04982948303222656
      ],
      [
        "SELECT Abbreviation , Country FROM airlines GROUP BY uid ORDER BY Count ( * ) Asc LIMIT value",
        -3.318986415863037
      ],
      [
        "SELECT Abbreviation , Country FROM airlines GROUP BY Airline ORDER BY Count ( * ) Asc LIMIT value",
        -4.982210636138916
      ],
      [
        "SELECT Abbreviation , Airline FROM airlines GROUP BY Abbreviation ORDER BY Count ( * ) Asc LIMIT value",
        -5.893782615661621
      ],
      [
        "SELECT Abbreviation , Country FROM airlines GROUP BY Country ORDER BY Count ( * ) Asc LIMIT value",
        -6.244013786315918
      ],
      [
        "SELECT Abbreviation , Airline FROM airlines GROUP BY Country ORDER BY Count ( * ) Asc LIMIT value",
        -8.23881483078003
      ],
      [
        "SELECT Abbreviation , Airline FROM airlines GROUP BY Airline ORDER BY Count ( * ) Asc LIMIT value",
        -8.358015060424805
      ],
      [
        "SELECT Abbreviation , Airline FROM airlines GROUP BY uid ORDER BY Count ( * ) Asc LIMIT value",
        -9.615671157836914
      ],
      [
        "SELECT T1.Abbreviation , T1.Country FROM airlines AS T1 JOIN flights AS T2 GROUP BY T2.Airline ORDER BY Count ( * ) Asc LIMIT value",
        -9.832866668701172
      ],
      [
        "SELECT Airline , Country FROM airlines GROUP BY Abbreviation ORDER BY Count ( * ) Asc LIMIT value",
        -10.45485782623291
      ],
      [
        "SELECT T1.Abbreviation , T1.Country FROM airlines AS T1 JOIN flights AS T2 GROUP BY T2.FlightNo ORDER BY Count ( * ) Asc LIMIT value",
        -10.74979305267334
      ],
      [
        "SELECT Abbreviation , Country FROM airlines GROUP BY Abbreviation ORDER BY Count ( * ) Asc",
        -10.833431243896484
      ],
      [
        "SELECT Abbreviation , Country FROM airlines GROUP BY Abbreviation , Country ORDER BY Count ( * ) Asc LIMIT value",
        -10.974486351013184
      ],
      [
        "SELECT Abbreviation , Country FROM airlines GROUP BY Abbreviation , Airline ORDER BY Count ( * ) Asc LIMIT value",
        -11.009136199951172
      ],
      [
        "SELECT T1.Abbreviation , T2.Country FROM airlines AS T1 JOIN airports AS T2 GROUP BY T1.Abbreviation ORDER BY Count ( * ) Asc LIMIT value",
        -11.110540390014648
      ],
      [
        "SELECT Abbreviation , Country FROM airlines ORDER BY Airline Asc LIMIT value",
        -11.252707481384277
      ],
      [
        "SELECT Abbreviation , Country FROM airlines GROUP BY Airline , Airline , Airline ORDER BY Count ( * ) Asc LIMIT value",
        -11.84745168685913
      ],
      [
        "SELECT T1.Abbreviation , T2.CountryAbbrev FROM airlines AS T1 JOIN airports AS T2 GROUP BY T1.Abbreviation ORDER BY Count ( * ) Asc LIMIT value",
        -11.907752990722656
      ],
      [
        "SELECT T1.Abbreviation , T1.Country , T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 GROUP BY T1.uid ORDER BY Count ( * ) Asc LIMIT value",
        -12.087160110473633
      ],
      [
        "SELECT Abbreviation , Country , Airline FROM airlines GROUP BY uid ORDER BY Count ( * ) Asc LIMIT value",
        -12.154441356658936
      ]
    ],
    "predicted_parse_with_values": "SELECT Abbreviation , Country FROM airlines GROUP BY Abbreviation ORDER BY Count ( * ) Asc LIMIT 1",
    "predicted_parse": "SELECT Abbreviation , Country FROM airlines GROUP BY Abbreviation ORDER BY Count ( * ) Asc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of abbreviation in airlines table",
      "Step 2: find the abbreviation and country in airlines table with smallest value in the results of step 1"
    ],
    "template_feedback": "in step 1 , additionally use the information from the flights table besides the airlines table . find for each value of airlines 's airline name in place of abbreviation .",
    "primary_span": [
      [
        4,
        11
      ],
      [
        17,
        25
      ]
    ],
    "secondary_span": [
      [
        12,
        16
      ],
      [
        26,
        30
      ]
    ],
    "edits": [
      "flights",
      "airline name",
      "abbreviation"
    ],
    "edits_original": "< from > add flights </ from > < groupBy > add airline name </ groupBy > < groupBy > remove abbreviation </ groupBy >"
  },
  {
    "db_id": "battle_death",
    "feedback": "Take ship table and disposition of ship in place of battle table and result .",
    "question": "How many ships ended up being 'Captured'?",
    "gold_parse": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'",
    "beam": [
      [
        "SELECT Count ( * ) FROM battle WHERE result = value",
        -0.19880056381225586
      ],
      [
        "SELECT Count ( * ) FROM death WHERE killed = value",
        -1.915086269378662
      ],
      [
        "SELECT Count ( * ) FROM battle WHERE latin_commander = value",
        -4.818445682525635
      ],
      [
        "SELECT Count ( * ) FROM ship WHERE disposition_of_ship = value",
        -5.010365962982178
      ],
      [
        "SELECT Count ( * ) FROM ship WHERE name = value",
        -5.045266628265381
      ],
      [
        "SELECT Count ( * ) FROM ship WHERE location = value",
        -5.485614776611328
      ],
      [
        "SELECT Count ( * ) FROM battle WHERE bulgarian_commander = value",
        -6.047897815704346
      ],
      [
        "SELECT Count ( * ) FROM death WHERE note = value",
        -6.233399391174316
      ],
      [
        "SELECT Count ( * ) FROM battle WHERE name = value",
        -6.760024070739746
      ],
      [
        "SELECT Count ( * ) FROM battle WHERE result LIKE value",
        -7.2359700202941895
      ],
      [
        "SELECT Count ( * ) FROM death WHERE injured = value",
        -7.560295581817627
      ],
      [
        "SELECT Count ( * ) FROM battle WHERE date = value",
        -7.964148998260498
      ],
      [
        "SELECT Count ( * ) FROM ship WHERE tonnage = value",
        -8.348746299743652
      ],
      [
        "SELECT Count ( * ) FROM ship WHERE ship_type = value",
        -9.022852897644043
      ],
      [
        "SELECT Count ( * ) FROM death WHERE id = value",
        -9.335346221923828
      ],
      [
        "SELECT Count ( * ) FROM battle",
        -10.021278381347656
      ],
      [
        "SELECT Count ( * ) FROM battle WHERE result < value",
        -10.777503967285156
      ],
      [
        "SELECT Count ( * ) FROM death WHERE caused_by_ship_id = value",
        -12.09282398223877
      ],
      [
        "SELECT Count ( * ) FROM death WHERE killed LIKE value",
        -12.48375415802002
      ],
      [
        "SELECT Count ( * ) FROM battle WHERE id = value",
        -12.669907569885254
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM battle WHERE result = \"Captured\"",
    "predicted_parse": "SELECT Count ( * ) FROM battle WHERE result = value",
    "predicted_parse_explanation": [
      "find the number of rows in battle table whose result equals Captured"
    ],
    "template_feedback": "use ship table in place of battle table . consider the disposition of ship equals Captured conditions in place of the result equals Captured conditions .",
    "primary_span": [
      [
        0,
        2
      ],
      [
        9,
        16
      ]
    ],
    "secondary_span": [
      [
        3,
        8
      ],
      [
        17,
        25
      ]
    ],
    "edits": [
      "ship",
      "battle",
      "disposition of ship equals \"Captured\"",
      "result equals \"Captured\""
    ],
    "edits_original": "< from > add ship </ from > < from > remove battle </ from > < where > add disposition of ship equals \" Captured \" </ where > < where > remove result equals \" Captured \" </ where >"
  },
  {
    "db_id": "flight_2",
    "feedback": "Instead of airlines table, I need flights table in step 1.",
    "question": "Which airlines have at least 10 flights?",
    "gold_parse": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10",
    "beam": [
      [
        "SELECT Airline FROM airlines GROUP BY Airline HAVING Count ( * ) > = value",
        -0.0021257400512695312
      ],
      [
        "SELECT Airline FROM airlines GROUP BY uid HAVING Count ( * ) > = value",
        -6.670986652374268
      ],
      [
        "SELECT Airline FROM airlines GROUP BY Abbreviation HAVING Count ( * ) > = value",
        -7.566471099853516
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 WHERE T2.FlightNo > = value",
        -9.048075199127197
      ],
      [
        "SELECT Airline FROM airlines WHERE Abbreviation > = value",
        -9.657052993774414
      ],
      [
        "SELECT Airline FROM airlines WHERE Airline > = value",
        -9.680182456970215
      ],
      [
        "SELECT Airline FROM airlines WHERE uid > = value",
        -9.980209469795227
      ],
      [
        "SELECT DISTINCT Airline FROM airlines GROUP BY Airline HAVING Count ( * ) > = value",
        -10.906767845153809
      ],
      [
        "SELECT Abbreviation FROM airlines GROUP BY Airline HAVING Count ( * ) > = value",
        -12.192373275756836
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 WHERE T2.Airline > = value",
        -12.644645690917969
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 GROUP BY T2.FlightNo HAVING Count ( * ) > = value",
        -13.252339363098145
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 WHERE T2.FlightNo > = value GROUP BY T1.Airline HAVING Count ( * ) > = value",
        -13.517524719238281
      ],
      [
        "SELECT Airline FROM airlines GROUP BY Count ( * ) HAVING Count ( * ) > = value",
        -13.96053695678711
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 GROUP BY T2.Airline HAVING Count ( * ) > = value",
        -14.171329498291016
      ],
      [
        "SELECT uid FROM airlines GROUP BY Airline HAVING Count ( * ) > = value",
        -14.203873634338379
      ],
      [
        "SELECT Airline FROM airlines",
        -14.274112701416016
      ],
      [
        "SELECT T2.Airline FROM airlines AS T1 JOIN flights AS T2 GROUP BY T1.Airline HAVING Count ( * ) > = value",
        -14.566396713256836
      ],
      [
        "SELECT Airline FROM airlines WHERE Abbreviation > = value GROUP BY Airline HAVING Count ( * ) > = value",
        -14.574969172477722
      ],
      [
        "SELECT Airline FROM airlines WHERE uid > = value GROUP BY Airline HAVING Count ( * ) > = value",
        -14.578145503997803
      ],
      [
        "SELECT Airline FROM airlines GROUP BY Airline , uid HAVING Count ( * ) > = value",
        -15.193833351135254
      ]
    ],
    "predicted_parse_with_values": "SELECT Airline FROM airlines GROUP BY Airline HAVING Count ( * ) > = 10",
    "predicted_parse": "SELECT Airline FROM airlines GROUP BY Airline HAVING Count ( * ) > = value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of airline name in airlines table",
      "Step 2: find the airline name in airlines table whose corresponding value in step 1 is greater than or equals 10"
    ],
    "template_feedback": "in step 1 , additionally use the information from the flights table besides the airlines table . in step 2 , make sure that the corresponding value in step 1 greater than 10 .",
    "primary_span": [
      [
        4,
        11
      ],
      [
        21,
        33
      ]
    ],
    "secondary_span": [
      [
        12,
        16
      ]
    ],
    "edits": [
      "flights",
      "number of rows greater than 10",
      "number of rows greater than or equals to 10"
    ],
    "edits_original": "< from > add flights </ from > < having > add number of rows greater than 10 </ having > < having > remove number of rows greater than or equals to 10 </ having >"
  },
  {
    "db_id": "orchestra",
    "feedback": "Supersede 'performance' with 'orchestra' and 'Type greater than or' with 'Major Record Format' CD or DVD .",
    "question": "Count the number of orchestras that have CD or DVD as their record format.",
    "gold_parse": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\"",
    "beam": [
      [
        "SELECT Count ( * ) FROM performance WHERE Type > = value",
        -0.7609827518463135
      ],
      [
        "SELECT Count ( * ) FROM performance WHERE Weekly_rank > = value",
        -0.8479034900665283
      ],
      [
        "SELECT Count ( * ) FROM orchestra WHERE Major_Record_Format > = value",
        -3.0971362590789795
      ],
      [
        "SELECT Count ( * ) FROM performance WHERE Date > = value",
        -3.5565452575683594
      ],
      [
        "SELECT Count ( * ) FROM performance WHERE Official_ratings_(millions) > = value",
        -4.008120059967041
      ],
      [
        "SELECT Count ( * ) FROM performance WHERE Type = value OR Type = value",
        -5.374691009521484
      ],
      [
        "SELECT Count ( * ) FROM performance WHERE Performance_ID > = value",
        -5.5007734298706055
      ],
      [
        "SELECT Count ( * ) FROM performance WHERE Type = value OR Weekly_rank = value",
        -6.270491123199463
      ],
      [
        "SELECT Count ( * ) FROM orchestra WHERE Orchestra > = value",
        -7.539018630981445
      ],
      [
        "SELECT Count ( * ) FROM orchestra WHERE Orchestra_ID > = value",
        -7.646173477172852
      ],
      [
        "SELECT Count ( * ) FROM performance WHERE Share > = value",
        -7.84544563293457
      ],
      [
        "SELECT Count ( * ) FROM show WHERE If_first_show > = value",
        -9.121454238891602
      ],
      [
        "SELECT Count ( * ) FROM orchestra WHERE Year_of_Founded > = value",
        -9.546517372131348
      ],
      [
        "SELECT Count ( * ) FROM orchestra WHERE Record_Company > = value",
        -9.669367790222168
      ],
      [
        "SELECT Count ( * ) FROM performance WHERE Type < = value",
        -10.233721733093262
      ],
      [
        "SELECT Count ( * ) FROM performance WHERE Type = value",
        -10.261868000030518
      ],
      [
        "SELECT Count ( * ) FROM show WHERE Result > = value",
        -10.687260627746582
      ],
      [
        "SELECT Count ( * ) FROM performance WHERE Weekly_rank < = value",
        -11.070375442504883
      ],
      [
        "SELECT Count ( * ) FROM show WHERE Show_ID > = value",
        -11.080413818359375
      ],
      [
        "SELECT Count ( * ) FROM conductor",
        -13.392765998840332
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM performance WHERE Type > = \"CD\"",
    "predicted_parse": "SELECT Count ( * ) FROM performance WHERE Type > = value",
    "predicted_parse_explanation": [
      "find the number of rows in performance table whose type greater than or equals CD"
    ],
    "template_feedback": "use orchestra table in place of performance table . consider the major record format equals CD or major record format equals DVD conditions in place of the type greater than or equals CD conditions .",
    "primary_span": [
      [
        0,
        2
      ],
      [
        9,
        22
      ]
    ],
    "secondary_span": [
      [
        3,
        8
      ],
      [
        23,
        34
      ]
    ],
    "edits": [
      "orchestra",
      "performance",
      "major record format equals \"CD\" or major record format equals \"DVD\"",
      "type greater than or equals to \"CD\""
    ],
    "edits_original": "< from > add orchestra </ from > < from > remove performance </ from > < where > add major record format equals \" CD \" or major record format equals \" DVD \" </ where > < where > remove type greater than or equals to \" CD \" </ where >"
  },
  {
    "db_id": "wta_1",
    "feedback": "Rather than loser name , Use winner name In step 1 and 2.",
    "question": "List the names of all winners who played in both 2013 and 2016.",
    "gold_parse": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016",
    "beam": [
      [
        "SELECT loser_name FROM matches WHERE year = value INTERSECT SELECT loser_name FROM matches WHERE year = value",
        -0.10549640655517578
      ],
      [
        "SELECT tourney_name FROM matches WHERE year = value INTERSECT SELECT loser_name FROM matches WHERE year = value",
        -3.19081974029541
      ],
      [
        "SELECT loser_name FROM matches WHERE year = value INTERSECT SELECT tourney_name FROM matches WHERE year = value",
        -3.237424850463867
      ],
      [
        "SELECT loser_name FROM matches WHERE year = value INTERSECT SELECT winner_name FROM matches WHERE year = value",
        -4.4919233322143555
      ],
      [
        "SELECT winner_name FROM matches WHERE year = value INTERSECT SELECT loser_name FROM matches WHERE year = value",
        -5.162620544433594
      ],
      [
        "SELECT tourney_name FROM matches WHERE year = value INTERSECT SELECT tourney_name FROM matches WHERE year = value",
        -6.323603630065918
      ],
      [
        "SELECT tourney_name FROM matches WHERE year = value INTERSECT SELECT winner_name FROM matches WHERE year = value",
        -7.577516555786133
      ],
      [
        "SELECT winner_name FROM matches WHERE year = value INTERSECT SELECT tourney_name FROM matches WHERE year = value",
        -8.293795585632324
      ],
      [
        "SELECT T1.loser_name FROM matches AS T1 WHERE T1.year = value INTERSECT SELECT T1.loser_name FROM players AS T2 JOIN matches AS T1 ON T2.player_id = T1.loser_id WHERE T2.last_name = value",
        -9.415417671203613
      ],
      [
        "SELECT winner_name FROM matches WHERE year = value INTERSECT SELECT winner_name FROM matches WHERE year = value",
        -9.548996925354004
      ],
      [
        "SELECT loser_name FROM matches WHERE year = value INTERSECT SELECT loser_name FROM matches",
        -11.074740409851074
      ],
      [
        "SELECT loser_name FROM matches WHERE year = value INTERSECT SELECT loser_name FROM matches WHERE year ! = value",
        -11.874307632446289
      ],
      [
        "SELECT T1.loser_name FROM matches AS T1 WHERE T1.year = value INTERSECT SELECT T2.first_name FROM players AS T2 JOIN matches AS T1 ON T2.player_id = T1.loser_id WHERE T1.year = value",
        -11.9896821975708
      ],
      [
        "SELECT loser_name FROM matches WHERE year = value INTERSECT SELECT loser_name FROM matches WHERE tourney_date = value",
        -12.019238471984863
      ],
      [
        "SELECT loser_name FROM matches WHERE year = value INTERSECT SELECT loser_name FROM matches WHERE year LIKE value",
        -12.074499130249023
      ],
      [
        "SELECT loser_name FROM matches INTERSECT SELECT loser_name FROM matches WHERE year = value",
        -12.471348762512207
      ],
      [
        "SELECT T1.tourney_name FROM matches AS T1 WHERE T1.year = value INTERSECT SELECT T1.loser_name FROM players AS T2 JOIN matches AS T1 ON T2.player_id = T1.loser_id WHERE T2.last_name = value",
        -12.503808975219727
      ],
      [
        "SELECT T1.loser_name FROM matches AS T1 WHERE T1.year = value INTERSECT SELECT T1.tourney_name FROM players AS T2 JOIN matches AS T1 ON T2.player_id = T1.loser_id WHERE T2.last_name = value",
        -12.958643913269043
      ],
      [
        "SELECT loser_name FROM matches WHERE year = value",
        -13.570508003234863
      ],
      [
        "SELECT loser_name FROM matches WHERE year = value INTERSECT SELECT tourney_name FROM matches",
        -13.95211124420166
      ]
    ],
    "predicted_parse_with_values": "SELECT loser_name FROM matches WHERE year = 2013 INTERSECT SELECT loser_name FROM matches WHERE year = 2016",
    "predicted_parse": "SELECT loser_name FROM matches WHERE year = value INTERSECT SELECT loser_name FROM matches WHERE year = value",
    "predicted_parse_explanation": [
      "Step 1: find the loser name in matches table whose year equals 2013",
      "Step 2: find the loser name in matches table whose year equals 2016",
      "Step 3: show the rows that are in both the results of step 1 and step 2"
    ],
    "template_feedback": "in step 1 , find winner name in place of loser name . in step 2 , find winner name in place of loser name .",
    "primary_span": [
      [
        4,
        6
      ],
      [
        17,
        19
      ]
    ],
    "secondary_span": [
      [
        7,
        12
      ],
      [
        20,
        25
      ]
    ],
    "edits": [
      "winner name",
      "loser name",
      "winner name",
      "loser name"
    ],
    "edits_original": "< select > add winner name </ select > < select > remove loser name </ select > < select > add winner name </ select > < select > remove loser name </ select >"
  },
  {
    "db_id": "world_1",
    "feedback": "i want name rather than continent.",
    "question": "What are the names of all the countries that became independent after 1950?",
    "gold_parse": "SELECT Name FROM country WHERE IndepYear  >  1950",
    "beam": [
      [
        "SELECT Continent FROM country WHERE IndepYear > value",
        -8.487701416015625e-05
      ],
      [
        "SELECT Name FROM country WHERE IndepYear > value",
        -9.858240127563477
      ],
      [
        "SELECT GovernmentForm FROM country WHERE IndepYear > value",
        -10.678235054016113
      ],
      [
        "SELECT Continent FROM country WHERE Capital > value",
        -12.72649097442627
      ],
      [
        "SELECT Continent FROM country WHERE IndepYear = value",
        -13.680558204650879
      ],
      [
        "SELECT Continent FROM country WHERE IndepYear > value AND IndepYear > value",
        -14.152952194213867
      ],
      [
        "SELECT Continent , Name FROM country WHERE IndepYear > value",
        -14.19642162322998
      ],
      [
        "SELECT DISTINCT Continent FROM country WHERE IndepYear > value",
        -14.289913177490234
      ],
      [
        "SELECT Continent , GovernmentForm FROM country WHERE IndepYear > value",
        -14.480368614196777
      ],
      [
        "SELECT LocalName FROM country WHERE IndepYear > value",
        -14.566671371459961
      ],
      [
        "SELECT Continent , LocalName FROM country WHERE IndepYear > value",
        -14.76395034790039
      ],
      [
        "SELECT Continent FROM country WHERE IndepYear > = value",
        -14.765180587768555
      ],
      [
        "SELECT Continent FROM country WHERE IndepYear < value",
        -15.338753700256348
      ],
      [
        "SELECT Continent , Continent FROM country WHERE IndepYear > value",
        -15.365159034729004
      ],
      [
        "SELECT DISTINCT Continent FROM country WHERE IndepYear > value",
        -15.7650785446167
      ],
      [
        "SELECT Continent FROM country WHERE Name = value",
        -15.8895263671875
      ],
      [
        "SELECT Continent FROM country WHERE IndepYear > ( SELECT IndepYear FROM country WHERE IndepYear = value )",
        -16.66117238998413
      ],
      [
        "SELECT Continent FROM country WHERE Name > value",
        -16.949673652648926
      ],
      [
        "SELECT Continent FROM country WHERE Max ( IndepYear ) > value",
        -16.95815372467041
      ],
      [
        "SELECT Continent FROM country",
        -18.323447227478027
      ]
    ],
    "predicted_parse_with_values": "SELECT Continent FROM country WHERE IndepYear > 1950",
    "predicted_parse": "SELECT Continent FROM country WHERE IndepYear > value",
    "predicted_parse_explanation": [
      "find the continent in country table whose indepdent year greater than 1950"
    ],
    "template_feedback": "find name in place of continent .",
    "primary_span": [
      [
        0,
        1
      ]
    ],
    "secondary_span": [
      [
        2,
        6
      ]
    ],
    "edits": [
      "name",
      "continent"
    ],
    "edits_original": "< select > add name </ select > < select > remove continent </ select >"
  },
  {
    "db_id": "employee_hire_evaluation",
    "feedback": "hiring table should be use in place of employee table .",
    "question": "Give me all the information about hiring.",
    "gold_parse": "SELECT * FROM hiring",
    "beam": [
      [
        "SELECT * FROM employee",
        -0.0017518997192382812
      ],
      [
        "SELECT * FROM hiring WHERE Start_from = value",
        -6.366934776306152
      ],
      [
        "SELECT * FROM employee WHERE City = value",
        -10.798723220825195
      ],
      [
        "SELECT DISTINCT * FROM employee",
        -13.57988452911377
      ],
      [
        "SELECT * FROM employee WHERE Name = value",
        -13.831326484680176
      ],
      [
        "SELECT * FROM hiring ORDER BY Start_from Asc",
        -14.024029016494751
      ],
      [
        "SELECT * , Start_from FROM hiring",
        -14.2718585729599
      ],
      [
        "SELECT Count ( * ) FROM employee",
        -14.912434577941895
      ],
      [
        "SELECT * FROM hiring GROUP BY * HAVING Start_from = value",
        -15.195570468902588
      ],
      [
        "SELECT Sum ( * ) FROM employee",
        -15.42468547821045
      ],
      [
        "SELECT * FROM employee EXCEPT SELECT * FROM employee",
        -15.720837593078613
      ],
      [
        "SELECT * FROM employee AS T1 UNION SELECT T2.Start_from FROM hiring AS T2",
        -15.739361047744751
      ],
      [
        "SELECT * FROM employee GROUP BY *",
        -16.326254844665527
      ],
      [
        "SELECT * FROM employee LIMIT value",
        -17.111334800720215
      ],
      [
        "SELECT Min ( * ) FROM employee",
        -17.22048282623291
      ],
      [
        "SELECT DISTINCT * FROM employee",
        -17.31570339202881
      ],
      [
        "SELECT Count ( * ) FROM employee",
        -17.761425971984863
      ],
      [
        "SELECT Avg ( * ) FROM employee",
        -18.01231098175049
      ],
      [
        "SELECT Start_from FROM hiring",
        -18.110133171081543
      ],
      [
        "SELECT Max ( * ) FROM employee",
        -18.127795219421387
      ]
    ],
    "predicted_parse_with_values": "SELECT * FROM employee",
    "predicted_parse": "SELECT * FROM employee",
    "predicted_parse_explanation": [
      "find the rows in employee table"
    ],
    "template_feedback": "use hiring table in place of employee table .",
    "primary_span": [
      [
        0,
        2
      ]
    ],
    "secondary_span": [
      [
        3,
        8
      ]
    ],
    "edits": [
      "hiring",
      "employee"
    ],
    "edits_original": "< from > add hiring </ from > < from > remove employee </ from >"
  },
  {
    "db_id": "world_1",
    "feedback": "Exchange \"T\" with \"Asia\" and country's name name with countrylanguage's language , ensure that is official equals T .",
    "question": "Return the different names of cities that are in Asia and for which Chinese is the official language.",
    "gold_parse": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  \"Asia\"",
    "beam": [
      [
        "SELECT DISTINCT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = value AND T2.Name = value",
        -0.3822212219238281
      ],
      [
        "SELECT DISTINCT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = value INTERSECT SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = value",
        -2.027048110961914
      ],
      [
        "SELECT DISTINCT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = value AND T2.LocalName = value",
        -2.117952346801758
      ],
      [
        "SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = value INTERSECT SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = value",
        -3.248831272125244
      ],
      [
        "SELECT DISTINCT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = value AND T2.Continent = value",
        -4.721166610717773
      ],
      [
        "SELECT DISTINCT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = value AND T2.Code2 = value",
        -4.837771415710449
      ],
      [
        "SELECT DISTINCT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = value INTERSECT SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Code2 = value",
        -5.910665512084961
      ],
      [
        "SELECT DISTINCT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = value AND T2.Name ! = value",
        -6.022639274597168
      ],
      [
        "SELECT DISTINCT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = value AND T2.LocalName ! = value",
        -6.987607002258301
      ],
      [
        "SELECT DISTINCT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = value INTERSECT SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.LocalName = value",
        -6.989814758300781
      ],
      [
        "SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = value INTERSECT SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Code2 = value",
        -7.1277689933776855
      ],
      [
        "SELECT DISTINCT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = value",
        -7.896095275878906
      ],
      [
        "SELECT DISTINCT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code AND T1.CountryCode = T2.Code JOIN countrylanguage AS T3 ON T2.Code = T3.CountryCode WHERE T2.Continent = value AND T3.Language = value",
        -8.443058013916016
      ],
      [
        "SELECT DISTINCT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = value AND T1.CountryCode IN ( SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = value )",
        -8.593348026275635
      ],
      [
        "SELECT DISTINCT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = value AND T2.Code2 ! = value",
        -9.492716789245605
      ],
      [
        "SELECT DISTINCT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = value ORDER BY T1.Name Asc",
        -9.537871360778809
      ],
      [
        "SELECT DISTINCT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = value AND T2.GovernmentForm = value",
        -9.780111312866211
      ],
      [
        "SELECT DISTINCT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = value AND T2.Name < value",
        -10.427637100219727
      ],
      [
        "SELECT DISTINCT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.LocalName = value AND T2.Name = value",
        -10.485838890075684
      ],
      [
        "SELECT DISTINCT Name FROM city",
        -14.423418998718262
      ]
    ],
    "predicted_parse_with_values": "SELECT DISTINCT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = \"T\" AND T2.Name = \"Chinese\"",
    "predicted_parse": "SELECT DISTINCT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = value AND T2.Name = value",
    "predicted_parse_explanation": [
      "Step 1: for each row in city table , find the corresponding rows in country table",
      "Step 2: find without repetition city 's name of the results of step 1 whose continent equals T and country 's name equals Chinese"
    ],
    "template_feedback": "in step 1 , additionally use the information from the countrylanguage table . in step 2 , consider the continent equals Asia and language equals Chinese and is official equals T conditions in place of the continent equals T and country 's name equals Chinese conditions .",
    "primary_span": [
      [
        4,
        12
      ],
      [
        17,
        31
      ]
    ],
    "secondary_span": [
      [
        32,
        46
      ]
    ],
    "edits": [
      "countrylanguage",
      "is official equals \"T\"",
      "language equals \"Chinese\"",
      "continent equals \"Asia\"",
      "continent equals \"T\"",
      "name equals \"Chinese\""
    ],
    "edits_original": "< from > add countrylanguage </ from > < where > add is official equals \" T \" </ where > < where > add language equals \" Chinese \" </ where > < where > add continent equals \" Asia \" </ where > < where > remove continent equals \" T \" </ where > < where > remove name equals \" Chinese \" </ where >"
  },
  {
    "db_id": "dog_kennels",
    "feedback": "Ensure that dog id should be detect in treatment table.",
    "question": "What is the average age of the dogs who have gone through any treatments?",
    "gold_parse": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
    "beam": [
      [
        "SELECT Avg ( age ) FROM Dogs WHERE gender = value",
        -0.12744140625
      ],
      [
        "SELECT Avg ( age ) FROM Dogs",
        -2.978224754333496
      ],
      [
        "SELECT Avg ( T1.age ) FROM Dogs AS T1 WHERE T1.dog_id = ( SELECT T2.dog_id FROM Treatments AS T2 )",
        -3.025521755218506
      ],
      [
        "SELECT Avg ( age ) FROM Dogs WHERE breed_code = value",
        -4.678166389465332
      ],
      [
        "SELECT Avg ( T1.age ) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T2.treatment_type_code = value",
        -5.243710994720459
      ],
      [
        "SELECT Avg ( T1.age ) FROM Dogs AS T1 WHERE T1.dog_id IN ( SELECT T2.dog_id FROM Treatments AS T2 )",
        -5.831369400024414
      ],
      [
        "SELECT Avg ( age ) FROM Dogs WHERE name = value",
        -7.236720085144043
      ],
      [
        "SELECT Avg ( T1.age ) FROM Dogs AS T1 WHERE T1.gender = ( SELECT T2.dog_id FROM Treatments AS T2 )",
        -7.656651496887207
      ],
      [
        "SELECT Avg ( age ) FROM Dogs WHERE weight = ( SELECT Min ( weight ) FROM Dogs )",
        -7.874341011047363
      ],
      [
        "SELECT Avg ( T2.age ) FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code WHERE T1.breed_name = value",
        -8.283258438110352
      ],
      [
        "SELECT Avg ( T1.age ) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.gender = T2.dog_id",
        -8.458293437957764
      ],
      [
        "SELECT Avg ( date_of_birth ) FROM Dogs WHERE gender = value",
        -8.517709732055664
      ],
      [
        "SELECT Avg ( age ) FROM Dogs WHERE weight = ( SELECT Min ( age ) FROM Dogs )",
        -8.743810653686523
      ],
      [
        "SELECT Avg ( T1.age ) FROM Dogs AS T1 WHERE T1.weight = ( SELECT T2.dog_id FROM Treatments AS T2 )",
        -9.656025886535645
      ],
      [
        "SELECT Avg ( age ) FROM Dogs WHERE size_code = value",
        -9.967280387878418
      ],
      [
        "SELECT Avg ( T1.age ) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.dog_id = T2.dog_id",
        -10.428727626800537
      ],
      [
        "SELECT Avg ( T2.age ) FROM Treatment_Types AS T1 JOIN Dogs AS T2 JOIN Treatments AS T3 ON T1.treatment_type_code = T3.treatment_type_code AND T3.dog_id = T2.dog_id WHERE T1.treatment_type_description = value",
        -11.24510669708252
      ],
      [
        "SELECT Avg ( T2.age ) FROM Treatment_Types AS T1 JOIN Dogs AS T2 JOIN Treatments AS T3 ON T1.treatment_type_code = T3.treatment_type_code AND T3.dog_id = T2.dog_id WHERE T1.treatment_type_code = value",
        -11.498476028442383
      ],
      [
        "SELECT Avg ( date_of_birth ) FROM Dogs",
        -11.807377815246582
      ],
      [
        "SELECT Avg ( age ) FROM Dogs WHERE dog_id = value",
        -11.90070390701294
      ]
    ],
    "predicted_parse_with_values": "SELECT Avg ( age ) FROM Dogs WHERE gender = 1",
    "predicted_parse": "SELECT Avg ( age ) FROM Dogs WHERE gender = value",
    "predicted_parse_explanation": [
      "find the average age in dogs table whose gender equals 1"
    ],
    "template_feedback": "consider the dog id is one of treatments 's dog id treatments conditions in place of the gender equals 1 conditions .",
    "primary_span": [
      [
        0,
        12
      ]
    ],
    "secondary_span": [
      [
        13,
        21
      ]
    ],
    "edits": [
      "dog id one of SUBS1",
      "gender equals 1",
      "dog id",
      "treatments"
    ],
    "edits_original": "< where > add dog id one of SUBS1 </ where > < where > remove gender equals 1 </ where > < select > add dog id </ select > < from > add treatments </ from >"
  },
  {
    "db_id": "employee_hire_evaluation",
    "feedback": "I want hiring table not employee table.",
    "question": "What is all the information about hiring?",
    "gold_parse": "SELECT * FROM hiring",
    "beam": [
      [
        "SELECT * FROM employee",
        -0.15939044952392578
      ],
      [
        "SELECT * FROM hiring WHERE Start_from = value",
        -1.920060157775879
      ],
      [
        "SELECT * FROM employee WHERE City = value",
        -7.287848472595215
      ],
      [
        "SELECT * FROM employee WHERE Name = value",
        -10.517868041992188
      ],
      [
        "SELECT * FROM hiring GROUP BY * HAVING Start_from = value",
        -12.536239624023438
      ],
      [
        "SELECT * FROM hiring ORDER BY Start_from Asc",
        -12.55816650390625
      ],
      [
        "SELECT * FROM hiring WHERE Is_full_time = value",
        -13.671113967895508
      ],
      [
        "SELECT * FROM employee EXCEPT SELECT * FROM employee",
        -13.829813003540039
      ],
      [
        "SELECT DISTINCT * FROM employee",
        -14.342674255371094
      ],
      [
        "SELECT * , Start_from FROM hiring",
        -14.34785008430481
      ],
      [
        "SELECT * FROM employee AS T1 UNION SELECT T2.Start_from FROM hiring AS T2",
        -14.451448440551758
      ],
      [
        "SELECT Count ( * ) FROM employee",
        -14.974373817443848
      ],
      [
        "SELECT * FROM employee ORDER BY * Asc",
        -15.040428161621094
      ],
      [
        "SELECT * FROM employee GROUP BY * HAVING Count ( * ) = value",
        -15.165229320526123
      ],
      [
        "SELECT * FROM evaluation WHERE Year_awarded = value",
        -15.473819732666016
      ],
      [
        "SELECT DISTINCT * FROM hiring WHERE Start_from = value",
        -15.56130599975586
      ],
      [
        "SELECT * FROM shop WHERE Manager_name = value",
        -15.64050579071045
      ],
      [
        "SELECT Sum ( * ) FROM employee",
        -15.780770301818848
      ],
      [
        "SELECT * FROM employee LIMIT value",
        -17.263381958007812
      ],
      [
        "SELECT DISTINCT * FROM employee",
        -17.36357593536377
      ]
    ],
    "predicted_parse_with_values": "SELECT * FROM employee",
    "predicted_parse": "SELECT * FROM employee",
    "predicted_parse_explanation": [
      "find the rows in employee table"
    ],
    "template_feedback": "use hiring table in place of employee table .",
    "primary_span": [
      [
        0,
        2
      ]
    ],
    "secondary_span": [
      [
        3,
        8
      ]
    ],
    "edits": [
      "hiring",
      "employee"
    ],
    "edits_original": "< from > add hiring </ from > < from > remove employee </ from >"
  },
  {
    "db_id": "pets_1",
    "feedback": "i want pet age instead of age.",
    "question": "Find the last name of the student who has a cat that is age 3.",
    "gold_parse": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'",
    "beam": [
      [
        "SELECT LName FROM Student WHERE Age = value",
        -7.62939453125e-05
      ],
      [
        "SELECT T1.LName FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.pet_age = value",
        -9.988914489746094
      ],
      [
        "SELECT LName FROM Student WHERE Age LIKE value",
        -10.537936210632324
      ],
      [
        "SELECT T1.LName FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.weight = value",
        -12.684037208557129
      ],
      [
        "SELECT LName , Age FROM Student WHERE Age = value",
        -14.299424171447754
      ],
      [
        "SELECT DISTINCT LName FROM Student WHERE Age = value",
        -14.571815490722656
      ],
      [
        "SELECT DISTINCT LName FROM Student WHERE Age = value",
        -15.809048652648926
      ],
      [
        "SELECT LName FROM Student WHERE Age < value",
        -15.902286529541016
      ],
      [
        "SELECT LName FROM Student WHERE Age = value AND Age = value",
        -16.551383018493652
      ],
      [
        "SELECT LName FROM Student WHERE Age = ( SELECT Max ( Age ) FROM Student WHERE Age = value )",
        -16.570073127746582
      ],
      [
        "SELECT LName FROM Student WHERE Age = value LIMIT value",
        -16.993858337402344
      ],
      [
        "SELECT Count ( DISTINCT LName ) FROM Student WHERE Age = value",
        -17.218530654907227
      ],
      [
        "SELECT LName FROM Student WHERE Age = value INTERSECT SELECT LName FROM Student WHERE Age = value",
        -17.276994705200195
      ],
      [
        "SELECT LName FROM Student WHERE DISTINCT Age = value",
        -17.330236434936523
      ],
      [
        "SELECT T1.LName FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T1.Age = value AND T3.pet_age = value",
        -17.451942443847656
      ],
      [
        "SELECT LName FROM Student WHERE Age ! = value",
        -17.900272369384766
      ],
      [
        "SELECT LName FROM Student WHERE Age > value",
        -18.138397216796875
      ],
      [
        "SELECT LName FROM Student WHERE StuID IN ( SELECT LName FROM Student WHERE Age = value )",
        -18.32646894454956
      ],
      [
        "SELECT LName FROM Student WHERE Age = value GROUP BY LName",
        -18.672175407409668
      ],
      [
        "SELECT LName FROM Student",
        -18.688387870788574
      ]
    ],
    "predicted_parse_with_values": "SELECT LName FROM Student WHERE Age = 3",
    "predicted_parse": "SELECT LName FROM Student WHERE Age = value",
    "predicted_parse_explanation": [
      "find the last name in student table whose age equals 3"
    ],
    "template_feedback": "additionally use the information from the has pet table and pets table besides the student table . consider the pet age equals 3 and pet type equals cat conditions in place of the age equals 3 conditions .",
    "primary_span": [
      [
        0,
        11
      ],
      [
        17,
        28
      ]
    ],
    "secondary_span": [
      [
        12,
        16
      ],
      [
        29,
        37
      ]
    ],
    "edits": [
      "has pet",
      "pets",
      "pet age equals 3",
      "pet type equals \"cat\"",
      "age equals 3"
    ],
    "edits_original": "< from > add has pet </ from > < from > add pets </ from > < where > add pet age equals 3 </ where > < where > add pet type equals \" cat \" </ where > < where > remove age equals 3 </ where >"
  },
  {
    "db_id": "world_1",
    "feedback": "searching for continent and region whose value is anguilla.",
    "question": "What is the continent name which Anguilla belongs to?",
    "gold_parse": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"",
    "beam": [
      [
        "SELECT Continent FROM country",
        -0.00045108795166015625
      ],
      [
        "SELECT LocalName FROM country",
        -8.261442184448242
      ],
      [
        "SELECT Continent , LocalName FROM country",
        -9.37417984008789
      ],
      [
        "SELECT Name FROM country",
        -9.687195777893066
      ],
      [
        "SELECT Continent FROM country WHERE LocalName = value",
        -10.834132194519043
      ],
      [
        "SELECT Continent , Name FROM country",
        -11.6384859085083
      ],
      [
        "SELECT Continent FROM country WHERE Name = value",
        -11.675602912902832
      ],
      [
        "SELECT Continent FROM country UNION SELECT LocalName FROM country",
        -13.521486282348633
      ],
      [
        "SELECT DISTINCT Continent FROM country",
        -14.07974624633789
      ],
      [
        "SELECT LocalName , LocalName FROM country",
        -14.302193641662598
      ],
      [
        "SELECT Continent FROM country UNION SELECT Name FROM country",
        -14.594568252563477
      ],
      [
        "SELECT Continent FROM country ORDER BY LocalName Desc",
        -14.701251983642578
      ],
      [
        "SELECT Continent FROM country GROUP BY Continent",
        -15.155792236328125
      ],
      [
        "SELECT Name , LocalName FROM country",
        -15.217164993286133
      ],
      [
        "SELECT Continent , Continent FROM country",
        -15.353682518005371
      ],
      [
        "SELECT Count ( Continent ) FROM country",
        -15.641929626464844
      ],
      [
        "SELECT Max ( Continent ) FROM country",
        -15.919304847717285
      ],
      [
        "SELECT Continent FROM country ORDER BY Name Desc",
        -16.017817974090576
      ],
      [
        "SELECT Sum ( Continent ) FROM country",
        -16.33436679840088
      ],
      [
        "SELECT Continent , LocalName , LocalName FROM country",
        -16.401599884033203
      ]
    ],
    "predicted_parse_with_values": "SELECT Continent FROM country",
    "predicted_parse": "SELECT Continent FROM country",
    "predicted_parse_explanation": [
      "find the continent in country table"
    ],
    "template_feedback": "additionally make sure that name equals Anguilla .",
    "primary_span": [
      [
        0,
        7
      ]
    ],
    "secondary_span": [],
    "edits": [
      "name equals \"Anguilla\""
    ],
    "edits_original": "< where > add name equals \" Anguilla \" </ where >"
  },
  {
    "db_id": "student_transcripts_tracking",
    "feedback": "In step 1 supersede departments table with degree programs table .",
    "question": "Which department offers the most number of degrees? List department name and id.",
    "gold_parse": "SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1",
    "beam": [
      [
        "SELECT department_name , department_id FROM Departments GROUP BY department_id ORDER BY Count ( * ) Desc LIMIT value",
        -0.000102996826171875
      ],
      [
        "SELECT department_name , department_id FROM Departments GROUP BY department_name ORDER BY Count ( * ) Desc LIMIT value",
        -9.627917289733887
      ],
      [
        "SELECT T1.department_name , T1.department_id FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id GROUP BY T2.department_id ORDER BY Count ( * ) Desc LIMIT value",
        -11.035213470458984
      ],
      [
        "SELECT department_name , department_id FROM Departments GROUP BY department_id ORDER BY Count ( * ) Desc",
        -11.892829895019531
      ],
      [
        "SELECT department_name , department_id FROM Departments GROUP BY department_id ORDER BY Count ( * ) Asc LIMIT value",
        -12.388484001159668
      ],
      [
        "SELECT department_name , department_id FROM Departments GROUP BY department_id ORDER BY Sum ( * ) Desc LIMIT value",
        -12.927011966705322
      ],
      [
        "SELECT department_name , department_id , department_id FROM Departments GROUP BY department_id ORDER BY Count ( * ) Desc LIMIT value",
        -13.690556049346924
      ],
      [
        "SELECT DISTINCT department_name , department_id FROM Departments GROUP BY department_id ORDER BY Count ( * ) Desc LIMIT value",
        -13.716156959533691
      ],
      [
        "SELECT department_name , department_id FROM Departments GROUP BY department_id",
        -13.970611572265625
      ],
      [
        "SELECT department_name FROM Departments GROUP BY department_id ORDER BY Count ( * ) Desc LIMIT value",
        -14.220927238464355
      ],
      [
        "SELECT T1.department_name , T2.department_id FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id GROUP BY T1.department_id ORDER BY Count ( * ) Desc LIMIT value",
        -14.603371620178223
      ],
      [
        "SELECT department_name , department_id FROM Departments GROUP BY department_id HAVING Count ( * ) > = value",
        -14.882227897644043
      ],
      [
        "SELECT Count ( department_name ) , department_id FROM Departments GROUP BY department_id ORDER BY Count ( * ) Desc LIMIT value",
        -15.071114540100098
      ],
      [
        "SELECT department_name , department_id FROM Departments GROUP BY department_id ORDER BY Avg ( * ) Desc LIMIT value",
        -15.409190654754639
      ],
      [
        "SELECT department_name , department_id FROM Departments GROUP BY department_id HAVING Count ( * ) < = value",
        -15.581661224365234
      ],
      [
        "SELECT department_name , department_id FROM Departments GROUP BY Count ( * ) ORDER BY Count ( * ) Desc LIMIT value",
        -15.699660301208496
      ],
      [
        "SELECT T2.degree_summary_name , T1.department_id FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id GROUP BY T1.department_id ORDER BY Count ( * ) Desc LIMIT value",
        -15.865446090698242
      ],
      [
        "SELECT department_name , department_id FROM Departments GROUP BY Sum ( department_id ) ORDER BY Count ( * ) Desc LIMIT value",
        -15.912518501281738
      ],
      [
        "SELECT T2.department_name , T2.department_id FROM Courses AS T1 JOIN Departments AS T2 JOIN Degree_Programs AS T3 ON T3.department_id = T2.department_id JOIN Student_Enrolment AS T4 ON T4.degree_program_id = T3.degree_program_id JOIN Student_Enrolment_Courses AS T5 ON T1.course_id = T5.course_id AND T5.student_enrolment_id = T4.student_enrolment_id GROUP BY T1.course_id ORDER BY Count ( * ) Desc LIMIT value",
        -15.941240310668945
      ],
      [
        "SELECT department_name , department_id FROM Departments ORDER BY department_name Desc LIMIT value",
        -16.16243624687195
      ]
    ],
    "predicted_parse_with_values": "SELECT department_name , department_id FROM Departments GROUP BY department_id ORDER BY Count ( * ) Desc LIMIT 1",
    "predicted_parse": "SELECT department_name , department_id FROM Departments GROUP BY department_id ORDER BY Count ( * ) Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of department id in departments table",
      "Step 2: find the department name and department id in departments table with largest value in the results of step 1"
    ],
    "template_feedback": "in step 1 , additionally use the information from the degree programs table besides the departments table .",
    "primary_span": [
      [
        4,
        12
      ]
    ],
    "secondary_span": [
      [
        13,
        17
      ]
    ],
    "edits": [
      "degree programs"
    ],
    "edits_original": "< from > add degree programs </ from >"
  },
  {
    "db_id": "singer",
    "feedback": "In step 1, confirm that birth year is before 1945 and in step 2, make sure birth year is after 1955.",
    "question": "Show the citizenship shared by singers with birth year before 1945 and after 1955.",
    "gold_parse": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955",
    "beam": [
      [
        "SELECT Citizenship FROM singer WHERE Birth_Year > value INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year < value",
        -0.025836944580078125
      ],
      [
        "SELECT Citizenship FROM singer WHERE Birth_Year > = value INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year > value",
        -3.8971118927001953
      ],
      [
        "SELECT Citizenship FROM singer WHERE Birth_Year < value INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year > value",
        -5.385075569152832
      ],
      [
        "SELECT Citizenship FROM singer WHERE Birth_Year > value INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year > value",
        -8.283540725708008
      ],
      [
        "SELECT Citizenship FROM singer WHERE Birth_Year > value INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year LIKE value",
        -8.72779369354248
      ],
      [
        "SELECT Citizenship FROM singer WHERE Birth_Year = value INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year > value",
        -9.252376556396484
      ],
      [
        "SELECT Citizenship FROM singer WHERE Birth_Year > value INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year BETWEEN value AND value",
        -10.86778450012207
      ],
      [
        "SELECT Citizenship FROM singer WHERE Birth_Year > = value INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year < value",
        -10.955184936523438
      ],
      [
        "SELECT Citizenship FROM singer WHERE Birth_Year > value INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year = value",
        -11.213665008544922
      ],
      [
        "SELECT Citizenship FROM singer WHERE Birth_Year LIKE value INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year > value",
        -11.956561088562012
      ],
      [
        "SELECT Citizenship FROM singer WHERE Birth_Year < value INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year < value",
        -12.341070175170898
      ],
      [
        "SELECT Citizenship FROM singer WHERE Birth_Year > value INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year IN ( SELECT Max ( Birth_Year ) FROM singer )",
        -12.442500591278076
      ],
      [
        "SELECT Citizenship FROM singer WHERE Birth_Year BETWEEN value AND value",
        -12.928800582885742
      ],
      [
        "SELECT Citizenship FROM singer WHERE Birth_Year LIKE value INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year < value",
        -12.961382865905762
      ],
      [
        "SELECT Citizenship FROM singer WHERE Birth_Year > value INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year IN ( SELECT Citizenship FROM singer )",
        -13.4889075756073
      ],
      [
        "SELECT Citizenship FROM singer WHERE Birth_Year BETWEEN value AND value INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year > value",
        -13.5671968460083
      ],
      [
        "SELECT Citizenship FROM singer WHERE Birth_Year > value INTERSECT SELECT Citizenship FROM singer GROUP BY Citizenship HAVING Count ( * ) < value",
        -13.579835891723633
      ],
      [
        "SELECT Citizenship FROM singer WHERE Birth_Year > = value INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year > = value",
        -13.591900825500488
      ],
      [
        "SELECT Citizenship FROM singer WHERE Birth_Year > value INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year > = value",
        -13.602994918823242
      ],
      [
        "SELECT Citizenship FROM singer WHERE Birth_Year = value INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year < value",
        -13.818354606628418
      ]
    ],
    "predicted_parse_with_values": "SELECT Citizenship FROM singer WHERE Birth_Year > 1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year < 1955",
    "predicted_parse": "SELECT Citizenship FROM singer WHERE Birth_Year > value INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year < value",
    "predicted_parse_explanation": [
      "Step 1: find the citizenship in singer table whose birth year greater than 1945",
      "Step 2: find the citizenship in singer table whose birth year less than 1955",
      "Step 3: show the rows that are in both the results of step 1 and step 2"
    ],
    "template_feedback": "in step 1 , consider the birth year less than 1945 conditions in place of the birth year greater than 1945 conditions . in step 2 , consider the birth year greater than 1955 conditions in place of the birth year less than 1955 conditions .",
    "primary_span": [
      [
        4,
        11
      ],
      [
        27,
        34
      ]
    ],
    "secondary_span": [
      [
        12,
        22
      ],
      [
        35,
        45
      ]
    ],
    "edits": [
      "birth year less than 1945",
      "birth year greater than 1945",
      "birth year greater than 1955",
      "birth year less than 1955"
    ],
    "edits_original": "< where > add birth year less than 1945 </ where > < where > remove birth year greater than 1945 </ where > < where > add birth year greater than 1955 </ where > < where > remove birth year less than 1955 </ where >"
  },
  {
    "db_id": "singer",
    "feedback": "You need to alter citizenship with year of birth.",
    "question": "Show the name of singers whose birth year is either 1948 or 1949?",
    "gold_parse": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949",
    "beam": [
      [
        "SELECT Name FROM singer WHERE Citizenship = value OR Citizenship = value",
        -0.007274627685546875
      ],
      [
        "SELECT Name FROM singer WHERE Birth_Year = value OR Citizenship = value",
        -5.3876543045043945
      ],
      [
        "SELECT Name FROM singer WHERE Birth_Year > value OR Citizenship = value",
        -6.365861892700195
      ],
      [
        "SELECT Name FROM singer WHERE Citizenship = value OR Birth_Year = value",
        -7.038114547729492
      ],
      [
        "SELECT Name FROM singer WHERE Citizenship = value OR Citizenship LIKE value",
        -10.963364601135254
      ],
      [
        "SELECT DISTINCT Name FROM singer WHERE Citizenship = value OR Citizenship = value",
        -11.289305686950684
      ],
      [
        "SELECT Name FROM singer WHERE Citizenship > value OR Citizenship = value",
        -11.545008182525635
      ],
      [
        "SELECT Name FROM singer WHERE Name > value OR Citizenship = value",
        -12.278824806213379
      ],
      [
        "SELECT Name , Birth_Year FROM singer WHERE Citizenship = value OR Citizenship = value",
        -12.855291366577148
      ],
      [
        "SELECT Name FROM singer WHERE Citizenship ! = value OR Citizenship = value",
        -13.354158401489258
      ],
      [
        "SELECT DISTINCT Name FROM singer WHERE Citizenship = value OR Citizenship = value",
        -13.386927604675293
      ],
      [
        "SELECT Name FROM singer WHERE Birth_Year = value OR Birth_Year = value",
        -13.439665794372559
      ],
      [
        "SELECT Name FROM singer WHERE Citizenship = value OR Citizenship ! = value",
        -13.473872184753418
      ],
      [
        "SELECT Name FROM singer WHERE Citizenship = value OR Citizenship = value ORDER BY Name Desc LIMIT value",
        -13.863459587097168
      ],
      [
        "SELECT Name FROM singer WHERE Citizenship = value OR Citizenship = value ORDER BY Name Desc",
        -14.120099067687988
      ],
      [
        "SELECT Name FROM singer WHERE Citizenship LIKE value OR Citizenship = value",
        -14.247965812683105
      ],
      [
        "SELECT Name FROM singer WHERE Citizenship = value OR Citizenship = value EXCEPT SELECT Name FROM singer WHERE Citizenship = value OR Citizenship = value",
        -14.480687141418457
      ],
      [
        "SELECT Name , Citizenship FROM singer WHERE Citizenship = value OR Citizenship = value",
        -14.498145580291748
      ],
      [
        "SELECT Name FROM singer WHERE Birth_Year > value OR Birth_Year = value",
        -15.030901908874512
      ],
      [
        "SELECT Name FROM singer WHERE Birth_Year > = value OR Citizenship = value",
        -15.106404304504395
      ]
    ],
    "predicted_parse_with_values": "SELECT Name FROM singer WHERE Citizenship = 1949 OR Citizenship = 1948",
    "predicted_parse": "SELECT Name FROM singer WHERE Citizenship = value OR Citizenship = value",
    "predicted_parse_explanation": [
      "find the name in singer table whose citizenship equals 1949 or citizenship equals 1948"
    ],
    "template_feedback": "consider the birth year equals 1948 or birth year equals 1949 conditions in place of the citizenship equals 1948 or citizenship equals 1949 conditions .",
    "primary_span": [
      [
        0,
        11
      ]
    ],
    "secondary_span": [
      [
        12,
        24
      ]
    ],
    "edits": [
      "birth year equals 1948 or birth year equals 1949",
      "citizenship equals 1949 or citizenship equals 1948"
    ],
    "edits_original": "< where > add birth year equals 1948 or birth year equals 1949 </ where > < where > remove citizenship equals 1949 or citizenship equals 1948 </ where >"
  },
  {
    "db_id": "network_1",
    "feedback": "You need to determine the number of rows in likes table whose student id's should correspond to high school student whose name is Kyle.",
    "question": "How many likes does Kyle have?",
    "gold_parse": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
    "beam": [
      [
        "SELECT Count ( * ) FROM Highschooler WHERE name = value",
        -0.0018930435180664062
      ],
      [
        "SELECT Count ( DISTINCT T2.liked_id ) FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id WHERE T1.name = value",
        -6.977716445922852
      ],
      [
        "SELECT Count ( * ) FROM Highschooler",
        -7.178485870361328
      ],
      [
        "SELECT Count ( * ) FROM Highschooler WHERE grade = value",
        -8.903834342956543
      ],
      [
        "SELECT Count ( * ) FROM Likes WHERE liked_id = value",
        -10.100473403930664
      ],
      [
        "SELECT Count ( DISTINCT ID ) FROM Highschooler WHERE name = value",
        -12.6922926902771
      ],
      [
        "SELECT Count ( * ) FROM Highschooler WHERE name LIKE value",
        -12.869049310684204
      ],
      [
        "SELECT Count ( DISTINCT liked_id ) FROM Likes",
        -13.600339889526367
      ],
      [
        "SELECT Count ( ID ) FROM Highschooler WHERE name = value",
        -14.006510734558105
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM Highschooler WHERE name = value",
        -14.061390399932861
      ],
      [
        "SELECT Count ( * ) FROM Likes WHERE student_id = value",
        -14.135986328125
      ],
      [
        "SELECT Count ( * ) FROM Friend WHERE student_id = value",
        -14.306370735168457
      ],
      [
        "SELECT T2.liked_id FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id WHERE T1.name = value",
        -14.525617241859436
      ],
      [
        "SELECT Count ( * ) FROM Friend WHERE friend_id = value",
        -14.85457992553711
      ],
      [
        "SELECT Count ( DISTINCT T2.liked_id ) FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id WHERE T1.grade = value",
        -14.93591022491455
      ],
      [
        "SELECT Count ( * ) FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id GROUP BY T2.liked_id HAVING T1.name = value",
        -15.16061019897461
      ],
      [
        "SELECT Count ( DISTINCT name ) FROM Highschooler WHERE name = value",
        -15.29365348815918
      ],
      [
        "SELECT Count ( * ) FROM Highschooler WHERE ID = value",
        -15.488128662109375
      ],
      [
        "SELECT Count ( * ) , T2.liked_id FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id WHERE T1.name = value",
        -15.932899117469788
      ],
      [
        "SELECT Count ( * ) FROM Highschooler EXCEPT SELECT Count ( * ) FROM Highschooler WHERE name = value",
        -16.206254959106445
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM Highschooler WHERE name = \"Kyle\"",
    "predicted_parse": "SELECT Count ( * ) FROM Highschooler WHERE name = value",
    "predicted_parse_explanation": [
      "find the number of rows in high schooler table whose name equals Kyle"
    ],
    "template_feedback": "additionally use the information from the likes table besides the high schooler table .",
    "primary_span": [
      [
        0,
        7
      ]
    ],
    "secondary_span": [
      [
        8,
        13
      ]
    ],
    "edits": [
      "likes"
    ],
    "edits_original": "< from > add likes </ from >"
  },
  {
    "db_id": "car_1",
    "feedback": "Supersede model list table with car names table in step 1.",
    "question": "What model has the most different versions?",
    "gold_parse": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1",
    "beam": [
      [
        "SELECT Model FROM model_list GROUP BY Model ORDER BY Count ( * ) Desc LIMIT value",
        -6.008148193359375e-05
      ],
      [
        "SELECT T2.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model GROUP BY T1.Model ORDER BY Count ( * ) Desc LIMIT value",
        -10.430929183959961
      ],
      [
        "SELECT DISTINCT Model FROM model_list GROUP BY Model ORDER BY Count ( * ) Desc LIMIT value",
        -11.748013496398926
      ],
      [
        "SELECT Model FROM model_list GROUP BY Model ORDER BY Count ( * ) Desc",
        -12.35866641998291
      ],
      [
        "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model GROUP BY T2.Model ORDER BY Count ( * ) Desc LIMIT value",
        -12.598970413208008
      ],
      [
        "SELECT ModelId FROM model_list GROUP BY Model ORDER BY Count ( * ) Desc LIMIT value",
        -12.61995792388916
      ],
      [
        "SELECT Model FROM model_list GROUP BY ModelId ORDER BY Count ( * ) Desc LIMIT value",
        -12.704959869384766
      ],
      [
        "SELECT Model , Count ( * ) FROM model_list GROUP BY Model ORDER BY Count ( * ) Desc LIMIT value",
        -12.823139667510986
      ],
      [
        "SELECT Model FROM model_list GROUP BY Model HAVING Count ( * ) < = value",
        -13.33033561706543
      ],
      [
        "SELECT Model FROM model_list GROUP BY Model ORDER BY Count ( Model ) Desc LIMIT value",
        -13.669565200805664
      ],
      [
        "SELECT Model FROM model_list GROUP BY Model",
        -14.033638954162598
      ],
      [
        "SELECT Count ( DISTINCT Model ) FROM model_list GROUP BY Model ORDER BY Count ( * ) Desc LIMIT value",
        -14.042875289916992
      ],
      [
        "SELECT Count ( * ) FROM model_list GROUP BY Model ORDER BY Count ( * ) Desc LIMIT value",
        -14.315619468688965
      ],
      [
        "SELECT Model FROM model_list GROUP BY Model ORDER BY Count ( * ) Asc LIMIT value",
        -14.810179710388184
      ],
      [
        "SELECT Model FROM model_list GROUP BY Model ORDER BY Sum ( * ) Desc LIMIT value",
        -15.443138003349304
      ],
      [
        "SELECT Model FROM model_list GROUP BY Model ORDER BY Avg ( * ) Desc LIMIT value",
        -15.553759336471558
      ],
      [
        "SELECT DISTINCT Model FROM model_list GROUP BY Model ORDER BY Count ( * ) Desc LIMIT value",
        -15.569207191467285
      ],
      [
        "SELECT Model , ModelId FROM model_list GROUP BY Model ORDER BY Count ( * ) Desc LIMIT value",
        -15.588623285293579
      ],
      [
        "SELECT Model FROM model_list GROUP BY Model ORDER BY Count ( DISTINCT ModelId ) Desc LIMIT value",
        -15.874598979949951
      ],
      [
        "SELECT Model FROM model_list ORDER BY Count ( * ) Desc LIMIT value",
        -16.19998264312744
      ]
    ],
    "predicted_parse_with_values": "SELECT Model FROM model_list GROUP BY Model ORDER BY Count ( * ) Desc LIMIT 1",
    "predicted_parse": "SELECT Model FROM model_list GROUP BY Model ORDER BY Count ( * ) Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of model in model list table",
      "Step 2: find the model in model list table with largest value in the results of step 1"
    ],
    "template_feedback": "in step 1 , use car names table in place of model list table .",
    "primary_span": [
      [
        4,
        7
      ]
    ],
    "secondary_span": [
      [
        8,
        14
      ]
    ],
    "edits": [
      "car names",
      "model list"
    ],
    "edits_original": "< from > add car names </ from > < from > remove model list </ from >"
  },
  {
    "db_id": "world_1",
    "feedback": "Find percentage in countrylanguage ( step 1). exchange code 2 of country with language in countrylanguage , ensure name name equals Aruba .",
    "question": "Which language is the most popular in Aruba?",
    "gold_parse": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1",
    "beam": [
      [
        "SELECT Code2 FROM country GROUP BY Code2 ORDER BY Count ( * ) Desc LIMIT value",
        -0.38524436950683594
      ],
      [
        "SELECT Code2 FROM country WHERE Continent = value GROUP BY Code2 ORDER BY Count ( * ) Desc LIMIT value",
        -1.647883415222168
      ],
      [
        "SELECT Code2 FROM country GROUP BY Name ORDER BY Count ( * ) Desc LIMIT value",
        -3.3621459007263184
      ],
      [
        "SELECT Code2 FROM country GROUP BY LocalName ORDER BY Count ( * ) Desc LIMIT value",
        -3.5715250968933105
      ],
      [
        "SELECT T1.Code2 FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T2.Language ORDER BY Count ( * ) Desc LIMIT value",
        -4.796713829040527
      ],
      [
        "SELECT Code2 FROM country WHERE Continent = ( SELECT Code2 FROM country ORDER BY LifeExpectancy Desc LIMIT value )",
        -4.863738059997559
      ],
      [
        "SELECT Code2 FROM country GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value",
        -4.898263931274414
      ],
      [
        "SELECT Name FROM country GROUP BY Code2 ORDER BY Count ( * ) Desc LIMIT value",
        -5.402504920959473
      ],
      [
        "SELECT Code2 FROM country WHERE Continent = value GROUP BY LocalName ORDER BY Count ( * ) Desc LIMIT value",
        -5.624772548675537
      ],
      [
        "SELECT Code2 FROM country WHERE Continent = ( SELECT Continent FROM country ORDER BY LifeExpectancy Desc LIMIT value )",
        -5.8142805099487305
      ],
      [
        "SELECT Code2 FROM country WHERE Continent = ( SELECT Code2 FROM country ORDER BY LifeExpectancy Desc LIMIT value ) GROUP BY Code2 ORDER BY Count ( * ) Desc LIMIT value",
        -5.901425838470459
      ],
      [
        "SELECT Code2 FROM country WHERE Continent = value GROUP BY Name ORDER BY Count ( * ) Desc LIMIT value",
        -6.282154083251953
      ],
      [
        "SELECT Code2 FROM country WHERE Continent = ( SELECT Name FROM country ORDER BY LifeExpectancy Desc LIMIT value )",
        -6.432661533355713
      ],
      [
        "SELECT Code2 FROM country WHERE Continent = ( SELECT Continent FROM country ORDER BY LifeExpectancy Desc LIMIT value ) GROUP BY Code2 ORDER BY Count ( * ) Desc LIMIT value",
        -6.436905860900879
      ],
      [
        "SELECT Code2 FROM country WHERE Continent = ( SELECT Continent FROM country GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value )",
        -6.617130756378174
      ],
      [
        "SELECT Name FROM country WHERE Continent = value GROUP BY Code2 ORDER BY Count ( * ) Desc LIMIT value",
        -6.622749328613281
      ],
      [
        "SELECT Code2 FROM country WHERE Continent = ( SELECT Code2 FROM country GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value )",
        -6.692043781280518
      ],
      [
        "SELECT Code2 FROM country GROUP BY HeadOfState ORDER BY Count ( * ) Desc LIMIT value",
        -6.837808132171631
      ],
      [
        "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Code2 ORDER BY Count ( * ) Desc LIMIT value",
        -7.1085100173950195
      ],
      [
        "SELECT Code2 FROM country ORDER BY LifeExpectancy Desc LIMIT value",
        -7.156648635864258
      ]
    ],
    "predicted_parse_with_values": "SELECT Code2 FROM country GROUP BY Code2 ORDER BY Count ( * ) Desc LIMIT 1",
    "predicted_parse": "SELECT Code2 FROM country GROUP BY Code2 ORDER BY Count ( * ) Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of code2 in country table",
      "Step 2: find the code2 in country table with largest value in the results of step 1"
    ],
    "template_feedback": "in step 1 , additionally use the information from the countrylanguage table besides the country table . additionally make sure that name equals Aruba . do not find for each value of code2 . in step 2 , find language in place of code2 . order the results by percentage in place of number of rows .",
    "primary_span": [
      [
        4,
        11
      ],
      [
        17,
        24
      ],
      [
        25,
        33
      ],
      [
        38,
        39
      ],
      [
        45,
        49
      ]
    ],
    "secondary_span": [
      [
        12,
        16
      ],
      [
        40,
        44
      ],
      [
        50,
        56
      ]
    ],
    "edits": [
      "language",
      "code2",
      "countrylanguage",
      "name equals \"Aruba\"",
      "code2",
      "percentage",
      "number of rows"
    ],
    "edits_original": "< select > add language </ select > < select > remove code2 </ select > < from > add countrylanguage </ from > < where > add name equals \" Aruba \" </ where > < groupBy > remove code2 </ groupBy > < orderBy > add percentage </ orderBy > < orderBy > remove number of rows </ orderBy >"
  },
  {
    "db_id": "museum_visit",
    "feedback": "in step 1, the value of open year has to be greater than 2010.",
    "question": "find the names of museums which have more staff than the minimum staff number of all museums opened after 2010.",
    "gold_parse": "SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)",
    "beam": [
      [
        "SELECT Name FROM museum WHERE Num_of_Staff > ( SELECT Min ( Num_of_Staff ) FROM museum WHERE Open_Year < value )",
        -0.7205133438110352
      ],
      [
        "SELECT Name FROM museum WHERE Num_of_Staff > ( SELECT Min ( Num_of_Staff ) FROM museum )",
        -0.8718461990356445
      ],
      [
        "SELECT T1.Name FROM museum AS T1 JOIN visit AS T2 ON T1.Museum_ID = T2.Museum_ID WHERE T1.Num_of_Staff > ( SELECT Min ( T1.Num_of_Staff ) FROM museum AS T1 ) GROUP BY T2.Museum_ID HAVING Count ( * ) > = value",
        -3.479982376098633
      ],
      [
        "SELECT Name FROM museum WHERE Num_of_Staff > ( SELECT Min ( Num_of_Staff ) FROM museum WHERE Num_of_Staff < ( SELECT Min ( Num_of_Staff ) FROM museum ) )",
        -4.272003173828125
      ],
      [
        "SELECT T1.Name FROM museum AS T1 JOIN visit AS T2 ON T1.Museum_ID = T2.Museum_ID WHERE T1.Num_of_Staff > ( SELECT Min ( T1.Num_of_Staff ) FROM museum AS T1 WHERE T1.Open_Year < value ) GROUP BY T2.Museum_ID HAVING Count ( * ) > value",
        -4.43251895904541
      ],
      [
        "SELECT T1.Name FROM museum AS T1 JOIN visit AS T2 ON T1.Museum_ID = T2.Museum_ID WHERE T1.Num_of_Staff > ( SELECT Min ( T1.Num_of_Staff ) FROM museum AS T1 ) GROUP BY T2.Museum_ID HAVING Count ( * ) > value",
        -4.480088233947754
      ],
      [
        "SELECT Name FROM museum WHERE Num_of_Staff > ( SELECT Min ( Num_of_Staff ) FROM museum WHERE Num_of_Staff < ( SELECT Min ( Num_of_Staff ) FROM museum WHERE Open_Year < value ) )",
        -4.805686950683594
      ],
      [
        "SELECT T1.Name FROM museum AS T1 JOIN visit AS T2 ON T1.Museum_ID = T2.Museum_ID WHERE T1.Num_of_Staff > ( SELECT Min ( T1.Num_of_Staff ) FROM museum AS T1 WHERE T1.Open_Year < value ) GROUP BY T2.Museum_ID HAVING Min ( T1.Num_of_Staff ) > ( SELECT Min ( T1.Num_of_Staff ) FROM museum AS T1 )",
        -6.059639930725098
      ],
      [
        "SELECT T1.Name FROM museum AS T1 JOIN visit AS T2 ON T1.Museum_ID = T2.Museum_ID WHERE T1.Num_of_Staff > ( SELECT Min ( T1.Num_of_Staff ) FROM museum AS T1 ) GROUP BY T2.Museum_ID HAVING Min ( T1.Num_of_Staff ) > ( SELECT Min ( T1.Num_of_Staff ) FROM museum AS T1 )",
        -6.119415283203125
      ],
      [
        "SELECT T1.Name FROM museum AS T1 JOIN visit AS T2 ON T1.Museum_ID = T2.Museum_ID WHERE T1.Num_of_Staff > ( SELECT Min ( T1.Num_of_Staff ) FROM museum AS T1 ) GROUP BY T2.Museum_ID HAVING Count ( T1.Num_of_Staff ) > ( SELECT Min ( T1.Num_of_Staff ) FROM museum AS T1 )",
        -7.163060665130615
      ],
      [
        "SELECT T1.Name FROM museum AS T1 JOIN visit AS T2 ON T1.Museum_ID = T2.Museum_ID WHERE T1.Num_of_Staff > ( SELECT Min ( T1.Num_of_Staff ) FROM museum AS T1 WHERE T1.Open_Year < value ) GROUP BY T2.Museum_ID HAVING Min ( T1.Num_of_Staff ) > ( SELECT Min ( T1.Num_of_Staff ) FROM museum AS T1 WHERE T1.Open_Year < value )",
        -7.166559219360352
      ],
      [
        "SELECT T1.Name FROM museum AS T1 JOIN visit AS T2 ON T1.Museum_ID = T2.Museum_ID WHERE T1.Num_of_Staff > ( SELECT Min ( T1.Num_of_Staff ) FROM museum AS T1 ) GROUP BY T2.Museum_ID HAVING Min ( T1.Num_of_Staff ) > ( SELECT Min ( T1.Num_of_Staff ) FROM museum AS T1 WHERE T1.Open_Year < value )",
        -7.208942413330078
      ],
      [
        "SELECT Name FROM museum WHERE Num_of_Staff < ( SELECT Min ( Num_of_Staff ) FROM museum WHERE Open_Year < value )",
        -7.331162452697754
      ],
      [
        "SELECT T1.Name FROM museum AS T1 JOIN visit AS T2 ON T1.Museum_ID = T2.Museum_ID WHERE T1.Num_of_Staff > ( SELECT Min ( T1.Num_of_Staff ) FROM museum AS T1 ) GROUP BY T2.Museum_ID ORDER BY Avg ( T1.Num_of_Staff ) Asc LIMIT value",
        -7.402492523193359
      ],
      [
        "SELECT T1.Name FROM museum AS T1 JOIN visit AS T2 ON T1.Museum_ID = T2.Museum_ID GROUP BY T2.Museum_ID HAVING Avg ( T1.Num_of_Staff ) > ( SELECT Min ( T1.Num_of_Staff ) FROM museum AS T1 )",
        -7.557650566101074
      ],
      [
        "SELECT Name FROM museum WHERE Num_of_Staff > ( SELECT Min ( Open_Year ) FROM museum )",
        -8.08387279510498
      ],
      [
        "SELECT Name FROM museum WHERE Open_Year > value",
        -8.713505744934082
      ],
      [
        "SELECT T1.Name FROM museum AS T1 JOIN visit AS T2 ON T1.Museum_ID = T2.Museum_ID WHERE T1.Open_Year > value GROUP BY T2.Museum_ID HAVING Count ( * ) > = value",
        -9.39606761932373
      ],
      [
        "SELECT Name FROM museum WHERE Num_of_Staff < ( SELECT Min ( Num_of_Staff ) FROM museum )",
        -9.519330978393555
      ],
      [
        "SELECT Name FROM museum WHERE Num_of_Staff > ( SELECT Avg ( Num_of_Staff ) FROM museum )",
        -9.539392471313477
      ]
    ],
    "predicted_parse_with_values": "SELECT Name FROM museum WHERE Num_of_Staff > ( SELECT Min ( Num_of_Staff ) FROM museum WHERE Open_Year < 2010 )",
    "predicted_parse": "SELECT Name FROM museum WHERE Num_of_Staff > ( SELECT Min ( Num_of_Staff ) FROM museum WHERE Open_Year < value )",
    "predicted_parse_explanation": [
      "Step 1: find the minimum num of staff in museum table whose open year less than 2010",
      "Step 2: find the name in museum table whose num of staff greater than the results of step 1"
    ],
    "template_feedback": "in step 1 , consider the open year greater than 2010 conditions in place of the open year less than 2010 conditions .",
    "primary_span": [
      [
        4,
        11
      ]
    ],
    "secondary_span": [
      [
        12,
        22
      ]
    ],
    "edits": [
      "open year greater than 2010",
      "open year less than 2010"
    ],
    "edits_original": "< where > add open year greater than 2010 </ where > < where > remove open year less than 2010 </ where >"
  },
  {
    "db_id": "network_1",
    "feedback": "Put likes table instead of high schooler table and name instead of grade .",
    "question": "Return the number of likes that the high schooler named Kyle has.",
    "gold_parse": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
    "beam": [
      [
        "SELECT Count ( * ) FROM Highschooler WHERE grade = value",
        -0.1062173843383789
      ],
      [
        "SELECT Count ( * ) FROM Highschooler WHERE grade = value AND name = value",
        -2.979522705078125
      ],
      [
        "SELECT Count ( DISTINCT T2.liked_id ) FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id WHERE T1.grade = value",
        -3.133011817932129
      ],
      [
        "SELECT Count ( * ) FROM Highschooler WHERE name = value",
        -5.90993595123291
      ],
      [
        "SELECT Count ( * ) FROM Highschooler WHERE grade = value AND grade = value",
        -6.4520368576049805
      ],
      [
        "SELECT Count ( * ) FROM Highschooler WHERE name = value AND grade = value",
        -7.160304069519043
      ],
      [
        "SELECT Count ( DISTINCT ID ) FROM Highschooler WHERE grade = value",
        -7.793355941772461
      ],
      [
        "SELECT Count ( * ) FROM Highschooler WHERE name = value AND name = value",
        -7.826129913330078
      ],
      [
        "SELECT Count ( DISTINCT T2.liked_id ) FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id WHERE T1.grade = value AND T1.name = value",
        -8.13718032836914
      ],
      [
        "SELECT Count ( DISTINCT T2.liked_id ) FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id WHERE T1.name = value",
        -9.205740928649902
      ],
      [
        "SELECT Count ( DISTINCT name ) FROM Highschooler WHERE grade = value",
        -9.942525863647461
      ],
      [
        "SELECT T2.liked_id FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id WHERE T1.grade = value",
        -13.062439441680908
      ],
      [
        "SELECT Count ( DISTINCT ID ) FROM Highschooler WHERE name = value",
        -13.468881607055664
      ],
      [
        "SELECT Count ( ID ) FROM Highschooler WHERE grade = value",
        -13.682262897491455
      ],
      [
        "SELECT Count ( DISTINCT T2.student_id ) FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id WHERE T1.grade = value",
        -13.821937561035156
      ],
      [
        "SELECT Count ( * ) FROM Highschooler WHERE grade > value",
        -14.305604934692383
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM Highschooler WHERE grade = value",
        -14.55713176727295
      ],
      [
        "SELECT Avg ( ID ) FROM Highschooler WHERE grade = value",
        -14.669465065002441
      ],
      [
        "SELECT Count ( * ) FROM Highschooler WHERE name > value",
        -14.800554275512695
      ],
      [
        "SELECT Avg ( DISTINCT T2.liked_id ) FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id WHERE T1.grade = value",
        -14.860222816467285
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM Highschooler WHERE grade = \"Kyle\"",
    "predicted_parse": "SELECT Count ( * ) FROM Highschooler WHERE grade = value",
    "predicted_parse_explanation": [
      "find the number of rows in high schooler table whose grade equals Kyle"
    ],
    "template_feedback": "additionally use the information from the likes table besides the high schooler table . consider the name equals Kyle conditions in place of the grade equals Kyle conditions .",
    "primary_span": [
      [
        0,
        7
      ],
      [
        14,
        19
      ]
    ],
    "secondary_span": [
      [
        8,
        13
      ],
      [
        20,
        28
      ]
    ],
    "edits": [
      "likes",
      "name equals \"Kyle\"",
      "grade equals \"Kyle\""
    ],
    "edits_original": "< from > add likes </ from > < where > add name equals \" Kyle \" </ where > < where > remove grade equals \" Kyle \" </ where >"
  },
  {
    "db_id": "flight_2",
    "feedback": "Use table of flights with table of airlines in step 1.",
    "question": "Find all airlines that have at least 10 flights.",
    "gold_parse": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10",
    "beam": [
      [
        "SELECT Airline FROM airlines GROUP BY Airline HAVING Count ( * ) > = value",
        -0.0003337860107421875
      ],
      [
        "SELECT Airline FROM airlines GROUP BY uid HAVING Count ( * ) > = value",
        -8.45422077178955
      ],
      [
        "SELECT Airline FROM airlines GROUP BY Abbreviation HAVING Count ( * ) > = value",
        -9.365450859069824
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 GROUP BY T2.FlightNo HAVING Count ( * ) > = value",
        -11.658101081848145
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 WHERE T2.FlightNo > = value",
        -12.072543859481812
      ],
      [
        "SELECT Airline FROM airlines WHERE uid > = value",
        -12.184839725494385
      ],
      [
        "SELECT Airline FROM airlines WHERE Abbreviation > = value",
        -12.76216435432434
      ],
      [
        "SELECT Airline FROM airlines WHERE Airline > = value",
        -13.934234619140625
      ],
      [
        "SELECT T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 GROUP BY T1.Airline HAVING Count ( * ) > = value",
        -14.044914245605469
      ],
      [
        "SELECT DISTINCT Airline FROM airlines GROUP BY Airline HAVING Count ( * ) > = value",
        -14.156675338745117
      ],
      [
        "SELECT Airline FROM airlines GROUP BY Count ( * ) HAVING Count ( * ) > = value",
        -14.43893814086914
      ],
      [
        "SELECT Abbreviation FROM airlines GROUP BY Airline HAVING Count ( * ) > = value",
        -14.483405113220215
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 WHERE T2.Airline > = value",
        -14.491703033447266
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 GROUP BY T2.Airline HAVING Count ( * ) > = value",
        -14.663043975830078
      ],
      [
        "SELECT Airline FROM airlines",
        -14.703360557556152
      ],
      [
        "SELECT T2.Airline FROM airlines AS T1 JOIN flights AS T2 GROUP BY T1.Airline HAVING Count ( * ) > = value",
        -15.39096450805664
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 EXCEPT SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 WHERE T2.FlightNo = value",
        -15.478085041046143
      ],
      [
        "SELECT Airline FROM airlines GROUP BY Country HAVING Count ( * ) > = value",
        -15.594340324401855
      ],
      [
        "SELECT Airline FROM airlines GROUP BY Airline , uid HAVING Count ( * ) > = value",
        -15.88108491897583
      ],
      [
        "SELECT Airline FROM airlines GROUP BY Airline ORDER BY Count ( * ) Asc",
        -15.910923957824707
      ]
    ],
    "predicted_parse_with_values": "SELECT Airline FROM airlines GROUP BY Airline HAVING Count ( * ) > = 10",
    "predicted_parse": "SELECT Airline FROM airlines GROUP BY Airline HAVING Count ( * ) > = value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of airline name in airlines table",
      "Step 2: find the airline name in airlines table whose corresponding value in step 1 is greater than or equals 10"
    ],
    "template_feedback": "in step 1 , additionally use the information from the flights table besides the airlines table . in step 2 , make sure that the corresponding value in step 1 greater than 10 .",
    "primary_span": [
      [
        4,
        11
      ],
      [
        21,
        33
      ]
    ],
    "secondary_span": [
      [
        12,
        16
      ]
    ],
    "edits": [
      "flights",
      "number of rows greater than 10",
      "number of rows greater than or equals to 10"
    ],
    "edits_original": "< from > add flights </ from > < having > add number of rows greater than 10 </ having > < having > remove number of rows greater than or equals to 10 </ having >"
  },
  {
    "db_id": "battle_death",
    "feedback": "It is needed to put ship table and disposition of ship rather than battle table and result.",
    "question": "How many ships ended up being 'Captured'?",
    "gold_parse": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'",
    "beam": [
      [
        "SELECT Count ( * ) FROM battle WHERE result = value",
        -0.19880056381225586
      ],
      [
        "SELECT Count ( * ) FROM death WHERE killed = value",
        -1.915086269378662
      ],
      [
        "SELECT Count ( * ) FROM battle WHERE latin_commander = value",
        -4.818445682525635
      ],
      [
        "SELECT Count ( * ) FROM ship WHERE disposition_of_ship = value",
        -5.010365962982178
      ],
      [
        "SELECT Count ( * ) FROM ship WHERE name = value",
        -5.045266628265381
      ],
      [
        "SELECT Count ( * ) FROM ship WHERE location = value",
        -5.485614776611328
      ],
      [
        "SELECT Count ( * ) FROM battle WHERE bulgarian_commander = value",
        -6.047897815704346
      ],
      [
        "SELECT Count ( * ) FROM death WHERE note = value",
        -6.233399391174316
      ],
      [
        "SELECT Count ( * ) FROM battle WHERE name = value",
        -6.760024070739746
      ],
      [
        "SELECT Count ( * ) FROM battle WHERE result LIKE value",
        -7.2359700202941895
      ],
      [
        "SELECT Count ( * ) FROM death WHERE injured = value",
        -7.560295581817627
      ],
      [
        "SELECT Count ( * ) FROM battle WHERE date = value",
        -7.964148998260498
      ],
      [
        "SELECT Count ( * ) FROM ship WHERE tonnage = value",
        -8.348746299743652
      ],
      [
        "SELECT Count ( * ) FROM ship WHERE ship_type = value",
        -9.022852897644043
      ],
      [
        "SELECT Count ( * ) FROM death WHERE id = value",
        -9.335346221923828
      ],
      [
        "SELECT Count ( * ) FROM battle",
        -10.021278381347656
      ],
      [
        "SELECT Count ( * ) FROM battle WHERE result < value",
        -10.777503967285156
      ],
      [
        "SELECT Count ( * ) FROM death WHERE caused_by_ship_id = value",
        -12.09282398223877
      ],
      [
        "SELECT Count ( * ) FROM death WHERE killed LIKE value",
        -12.48375415802002
      ],
      [
        "SELECT Count ( * ) FROM battle WHERE id = value",
        -12.669907569885254
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM battle WHERE result = \"Captured\"",
    "predicted_parse": "SELECT Count ( * ) FROM battle WHERE result = value",
    "predicted_parse_explanation": [
      "find the number of rows in battle table whose result equals Captured"
    ],
    "template_feedback": "use ship table in place of battle table . consider the disposition of ship equals Captured conditions in place of the result equals Captured conditions .",
    "primary_span": [
      [
        0,
        2
      ],
      [
        9,
        16
      ]
    ],
    "secondary_span": [
      [
        3,
        8
      ],
      [
        17,
        25
      ]
    ],
    "edits": [
      "ship",
      "battle",
      "disposition of ship equals \"Captured\"",
      "result equals \"Captured\""
    ],
    "edits_original": "< from > add ship </ from > < from > remove battle </ from > < where > add disposition of ship equals \" Captured \" </ where > < where > remove result equals \" Captured \" </ where >"
  },
  {
    "db_id": "flight_2",
    "feedback": "From flights table look for the rows number which is  equivalent to the name of airport of airlines table is JetBlue Airways.",
    "question": "How many flights does airline 'JetBlue Airways' have?",
    "gold_parse": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"",
    "beam": [
      [
        "SELECT Count ( * ) FROM airlines WHERE Airline = value",
        -6.67572021484375e-05
      ],
      [
        "SELECT Count ( * ) FROM airlines WHERE Airline = value AND Airline = value",
        -9.81442642211914
      ],
      [
        "SELECT Count ( * ) FROM airlines WHERE Abbreviation = value",
        -12.646474838256836
      ],
      [
        "SELECT Count ( * ) FROM airlines WHERE Airline = value AND Abbreviation = value",
        -13.022592067718506
      ],
      [
        "SELECT Avg ( * ) FROM airlines WHERE Airline = value",
        -13.801501750946045
      ],
      [
        "SELECT Count ( * ) FROM airlines WHERE Airline LIKE value",
        -14.138988494873047
      ],
      [
        "SELECT * FROM airlines WHERE Airline = value",
        -14.282228589057922
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM airlines WHERE Airline = value",
        -14.691171646118164
      ],
      [
        "SELECT Count ( * ) FROM airlines WHERE Airline < value",
        -14.734886169433594
      ],
      [
        "SELECT Count ( * ) , Abbreviation FROM airlines WHERE Airline = value",
        -15.908855378627777
      ],
      [
        "SELECT Count ( Count ( * ) ) FROM airlines WHERE Airline = value",
        -16.071123123168945
      ],
      [
        "SELECT Sum ( * ) FROM airlines WHERE Airline = value",
        -16.56767201423645
      ],
      [
        "SELECT Count ( * ) FROM airlines WHERE * IN ( SELECT * FROM airlines WHERE Airline = value )",
        -16.72678965330124
      ],
      [
        "SELECT Count ( * ) , Airline FROM airlines WHERE Airline = value",
        -16.781678915023804
      ],
      [
        "SELECT Count ( * ) FROM airlines WHERE Airline > value",
        -16.81737095117569
      ],
      [
        "SELECT Count ( * ) FROM airlines WHERE Airline = value ORDER BY * Asc",
        -16.835121393203735
      ],
      [
        "SELECT Count ( DISTINCT * ) FROM airlines WHERE Airline = value",
        -16.950654983520508
      ],
      [
        "SELECT Count ( * ) FROM airlines WHERE Min ( Airline ) = value",
        -17.051984786987305
      ],
      [
        "SELECT Count ( * ) FROM airlines WHERE Airline = value LIMIT value",
        -17.128828048706055
      ],
      [
        "SELECT Count ( * ) FROM airlines",
        -19.08628273010254
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM airlines WHERE Airline = \"JetBlue Airways\"",
    "predicted_parse": "SELECT Count ( * ) FROM airlines WHERE Airline = value",
    "predicted_parse_explanation": [
      "find the number of rows in airlines table whose airline name equals JetBlue Airways"
    ],
    "template_feedback": "additionally use the information from the flights table besides the airlines table .",
    "primary_span": [
      [
        0,
        7
      ]
    ],
    "secondary_span": [
      [
        8,
        12
      ]
    ],
    "edits": [
      "flights"
    ],
    "edits_original": "< from > add flights </ from >"
  },
  {
    "db_id": "student_transcripts_tracking",
    "feedback": "Only sections should be used in step 1.",
    "question": "What are the names and id of courses having at most 2 sections?",
    "gold_parse": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2",
    "beam": [
      [
        "SELECT course_name , course_id FROM Courses GROUP BY course_id HAVING Count ( * ) < = value",
        -0.02412700653076172
      ],
      [
        "SELECT T1.course_name , T1.course_id FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id HAVING Count ( * ) < = value",
        -3.766681671142578
      ],
      [
        "SELECT course_name , course_id FROM Courses GROUP BY course_id ORDER BY Count ( * ) Desc LIMIT value",
        -8.47860050201416
      ],
      [
        "SELECT T1.course_name , T1.course_id FROM Courses AS T1 GROUP BY T1.course_id HAVING Count ( * ) > value UNION SELECT T1.course_name , T1.course_id FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id HAVING Count ( * ) = value",
        -9.380423545837402
      ],
      [
        "SELECT course_name , course_id FROM Courses GROUP BY course_id HAVING Count ( * ) > value UNION SELECT course_name , course_id FROM Courses GROUP BY course_id HAVING Count ( * ) = value",
        -9.447033882141113
      ],
      [
        "SELECT course_name , course_id FROM Courses GROUP BY course_id HAVING Count ( * ) > value",
        -10.386966705322266
      ],
      [
        "SELECT course_name , course_id FROM Courses GROUP BY course_id HAVING Sum ( * ) < = value",
        -10.623193264007568
      ],
      [
        "SELECT course_name , course_id FROM Courses GROUP BY course_id HAVING Count ( * ) > = value",
        -10.95858097076416
      ],
      [
        "SELECT course_name , course_id FROM Courses GROUP BY course_id HAVING Count ( * ) > value OR Count ( * ) = value",
        -11.292497634887695
      ],
      [
        "SELECT T1.course_name , T1.course_id FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id HAVING Count ( * ) > = value",
        -11.643856048583984
      ],
      [
        "SELECT course_name , course_id FROM Courses GROUP BY course_id HAVING Count ( * ) > value UNION SELECT course_name , course_id FROM Courses",
        -11.796857833862305
      ],
      [
        "SELECT course_name , course_id FROM Courses GROUP BY course_id HAVING Count ( * ) < = value EXCEPT SELECT course_name , course_id FROM Courses",
        -11.984366416931152
      ],
      [
        "SELECT T1.course_name , T2.course_id FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id HAVING Count ( * ) < = value",
        -12.128340721130371
      ],
      [
        "SELECT T1.course_name , T1.course_id FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id ORDER BY Count ( * ) Desc LIMIT value",
        -12.352149963378906
      ],
      [
        "SELECT course_name , course_id FROM Courses EXCEPT SELECT course_name , course_id FROM Courses GROUP BY course_id HAVING Count ( * ) > value",
        -12.703500747680664
      ],
      [
        "SELECT course_name , course_id FROM Courses",
        -12.874043464660645
      ],
      [
        "SELECT T1.course_name , T1.course_id FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id HAVING Count ( * ) > value",
        -13.240339279174805
      ],
      [
        "SELECT course_name FROM Courses GROUP BY course_id HAVING Count ( * ) < = value",
        -13.482592582702637
      ],
      [
        "SELECT DISTINCT course_name , course_id FROM Courses GROUP BY course_id HAVING Count ( * ) < = value",
        -13.557889938354492
      ],
      [
        "SELECT course_name , course_id FROM Courses GROUP BY course_id",
        -13.575100898742676
      ]
    ],
    "predicted_parse_with_values": "SELECT course_name , course_id FROM Courses GROUP BY course_id HAVING Count ( * ) < = 2",
    "predicted_parse": "SELECT course_name , course_id FROM Courses GROUP BY course_id HAVING Count ( * ) < = value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of course id in courses table",
      "Step 2: find the course name and course id in courses table whose corresponding value in step 1 is less than or equals 2"
    ],
    "template_feedback": "in step 1 , additionally use the information from the sections table besides the courses table .",
    "primary_span": [
      [
        4,
        11
      ]
    ],
    "secondary_span": [
      [
        12,
        16
      ]
    ],
    "edits": [
      "sections"
    ],
    "edits_original": "< from > add sections </ from >"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "feedback": "Use \"smallest value of version number instead of \"smallest value of Template Type Code\".",
    "question": "What the smallest version number and its template type code?",
    "gold_parse": "SELECT min(Version_Number) ,  template_type_code FROM Templates",
    "beam": [
      [
        "SELECT * , Template_Type_Code FROM Templates ORDER BY Template_Type_Code Asc LIMIT value",
        -0.8783860206604004
      ],
      [
        "SELECT Template_Type_Code , Template_Type_Code FROM Templates ORDER BY Template_Type_Code Asc LIMIT value",
        -1.7416175603866577
      ],
      [
        "SELECT Version_Number , Template_Type_Code FROM Templates ORDER BY Template_Type_Code Asc LIMIT value",
        -1.849324345588684
      ],
      [
        "SELECT Template_Details , Template_Type_Code FROM Templates ORDER BY Template_Type_Code Asc LIMIT value",
        -2.8485324382781982
      ],
      [
        "SELECT T1.Template_Type_Description , T2.Template_Type_Code FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code ORDER BY T2.Template_Type_Code Asc LIMIT value",
        -3.1416523456573486
      ],
      [
        "SELECT Template_Type_Code , Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY Count ( * ) Asc LIMIT value",
        -3.2546870708465576
      ],
      [
        "SELECT Min ( Version_Number ) , Template_Type_Code FROM Templates",
        -3.8804168701171875
      ],
      [
        "SELECT Template_ID , Template_Type_Code FROM Templates ORDER BY Template_Type_Code Asc LIMIT value",
        -4.389861106872559
      ],
      [
        "SELECT T2.Document_Name , T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID ORDER BY T1.Template_Type_Code Asc LIMIT value",
        -4.558027267456055
      ],
      [
        "SELECT Min ( * ) , Template_Type_Code FROM Templates",
        -4.813061952590942
      ],
      [
        "SELECT * , Template_Type_Code FROM Templates ORDER BY Version_Number Asc LIMIT value",
        -4.937020778656006
      ],
      [
        "SELECT Min ( * ) , Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY Count ( * ) Asc LIMIT value",
        -5.5982677936553955
      ],
      [
        "SELECT * , Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY Count ( * ) Asc LIMIT value",
        -5.640272855758667
      ],
      [
        "SELECT Template_Type_Code , Template_Type_Code FROM Templates ORDER BY Version_Number Asc LIMIT value",
        -5.700233578681946
      ],
      [
        "SELECT Min ( Version_Number ) , Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY Count ( * ) Asc LIMIT value",
        -5.714803218841553
      ],
      [
        "SELECT Version_Number , Template_Type_Code FROM Templates ORDER BY Version_Number Asc LIMIT value",
        -5.813626408576965
      ],
      [
        "SELECT T1.Template_Type_Code , T2.Template_Type_Code FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code ORDER BY T2.Template_Type_Code Asc LIMIT value",
        -5.85857629776001
      ],
      [
        "SELECT Date_Effective_To , Template_Type_Code FROM Templates ORDER BY Template_Type_Code Asc LIMIT value",
        -5.948626518249512
      ],
      [
        "SELECT Template_Type_Code , Min ( Template_Type_Code ) FROM Templates GROUP BY Template_Type_Code ORDER BY Count ( * ) Asc LIMIT value",
        -5.983931303024292
      ],
      [
        "SELECT * , Template_Type_Code FROM Templates WHERE Template_Type_Code = value",
        -6.131484270095825
      ]
    ],
    "predicted_parse_with_values": "SELECT * , Template_Type_Code FROM Templates ORDER BY Template_Type_Code Asc LIMIT 1",
    "predicted_parse": "SELECT * , Template_Type_Code FROM Templates ORDER BY Template_Type_Code Asc LIMIT value",
    "predicted_parse_explanation": [
      "find the rows and template type code in templates table with smallest value of template type code"
    ],
    "template_feedback": "find minimum version number in place of rows . you should not find the smallest of the results . show me all the results .",
    "primary_span": [
      [
        0,
        3
      ],
      [
        9,
        24
      ]
    ],
    "secondary_span": [
      [
        4,
        8
      ]
    ],
    "edits": [
      "minimum version number",
      "rows",
      "template type code",
      "1"
    ],
    "edits_original": "< select > add minimum version number </ select > < select > remove rows </ select > < orderBy > remove template type code </ orderBy > < limit > remove 1 </ limit >"
  },
  {
    "db_id": "world_1",
    "feedback": "in step 2,look for summation of unique language of country language for which t is is official.",
    "question": "For the countries founded before 1930, what is the total number of distinct official languages?",
    "gold_parse": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"",
    "beam": [
      [
        "SELECT Code2 , Count ( DISTINCT Code ) FROM country WHERE IndepYear < value GROUP BY GovernmentForm",
        -1.2046189308166504
      ],
      [
        "SELECT Code2 , Count ( DISTINCT Code2 ) FROM country WHERE IndepYear < value GROUP BY GovernmentForm",
        -1.396545648574829
      ],
      [
        "SELECT Code2 , Count ( * ) FROM country WHERE IndepYear < value GROUP BY GovernmentForm",
        -2.200655937194824
      ],
      [
        "SELECT Count ( DISTINCT Code2 ) , Continent FROM country WHERE IndepYear < value GROUP BY GovernmentForm",
        -2.4725542068481445
      ],
      [
        "SELECT Code2 , Count ( DISTINCT Code ) FROM country WHERE IndepYear < value GROUP BY Continent",
        -3.2545628547668457
      ],
      [
        "SELECT Count ( DISTINCT Code2 ) FROM country WHERE IndepYear < value",
        -3.451411247253418
      ],
      [
        "SELECT Code2 , Count ( DISTINCT Code2 ) FROM country WHERE IndepYear < value GROUP BY Continent",
        -3.4924700260162354
      ],
      [
        "SELECT Code2 , Count ( DISTINCT Code ) FROM country WHERE IndepYear > value GROUP BY GovernmentForm",
        -4.034643650054932
      ],
      [
        "SELECT Code2 , Count ( * ) FROM country WHERE IndepYear < value GROUP BY Continent",
        -4.238430023193359
      ],
      [
        "SELECT Count ( DISTINCT Code2 ) , Count ( DISTINCT Code ) FROM country WHERE IndepYear < value GROUP BY GovernmentForm",
        -4.396028280258179
      ],
      [
        "SELECT Count ( DISTINCT Code2 ) , Continent FROM country WHERE IndepYear < value GROUP BY Continent",
        -4.449148178100586
      ],
      [
        "SELECT Count ( DISTINCT Code2 ) , Count ( DISTINCT Code2 ) FROM country WHERE IndepYear < value GROUP BY GovernmentForm",
        -4.590764045715332
      ],
      [
        "SELECT Code2 , Count ( DISTINCT Code ) FROM country WHERE IndepYear < value GROUP BY LocalName",
        -4.780263423919678
      ],
      [
        "SELECT Code2 , Count ( DISTINCT Code2 ) FROM country WHERE IndepYear < value GROUP BY Code2",
        -4.958712816238403
      ],
      [
        "SELECT Code2 , Count ( DISTINCT Code2 ) FROM country WHERE IndepYear < value GROUP BY LocalName",
        -5.00384259223938
      ],
      [
        "SELECT Count ( DISTINCT Code2 ) , Count ( * ) FROM country WHERE IndepYear < value GROUP BY GovernmentForm",
        -5.079808712005615
      ],
      [
        "SELECT Code2 , Count ( DISTINCT Code ) FROM country WHERE IndepYear < value GROUP BY Code2",
        -5.116779804229736
      ],
      [
        "SELECT Code2 , Count ( DISTINCT Code2 ) FROM country WHERE IndepYear > value GROUP BY GovernmentForm",
        -5.134147882461548
      ],
      [
        "SELECT Code2 , Count ( DISTINCT Code ) FROM country WHERE IndepYear > value GROUP BY Continent",
        -5.652468204498291
      ],
      [
        "SELECT Count ( DISTINCT Code2 ) , Continent FROM country WHERE IndepYear < value GROUP BY LocalName",
        -5.7546539306640625
      ]
    ],
    "predicted_parse_with_values": "SELECT Code2 , Count ( DISTINCT Code ) FROM country WHERE IndepYear < 1930 GROUP BY GovernmentForm",
    "predicted_parse": "SELECT Code2 , Count ( DISTINCT Code ) FROM country WHERE IndepYear < value GROUP BY GovernmentForm",
    "predicted_parse_explanation": [
      "Step 1: find rows in country table whose indepdent year less than 1930",
      "Step 2: find each value of government form the results of step 1 along with the number of different code and code2 of the corresponding rows to each value"
    ],
    "template_feedback": "in step 1 , additionally use the information from the countrylanguage table besides the country table . additionally make sure that is official equals T . in step 2 , do not find for each value of government form . find number of different language in place of number of different code and code2 .",
    "primary_span": [
      [
        4,
        11
      ],
      [
        17,
        24
      ],
      [
        29,
        38
      ],
      [
        39,
        43
      ]
    ],
    "secondary_span": [
      [
        12,
        16
      ],
      [
        44,
        53
      ]
    ],
    "edits": [
      "number of distinct language",
      "code2",
      "number of distinct code",
      "countrylanguage",
      "is official equals \"T\"",
      "government form"
    ],
    "edits_original": "< select > add number of distinct language </ select > < select > remove code2 </ select > < select > remove number of distinct code </ select > < from > add countrylanguage </ from > < where > add is official equals \" T \" </ where > < groupBy > remove government form </ groupBy >"
  },
  {
    "db_id": "dog_kennels",
    "feedback": "In step 2 , find summation of date of treatment in treatments table for each treatment type code .",
    "question": "What is the description of the treatment type that costs the least money in total?",
    "gold_parse": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1",
    "beam": [
      [
        "SELECT T1.treatment_type_description FROM Treatment_Types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T2.treatment_type_code ORDER BY Count ( * ) Asc LIMIT value",
        -0.00589752197265625
      ],
      [
        "SELECT T1.treatment_type_description FROM Treatment_Types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T2.treatment_type_code ORDER BY Sum ( T1.treatment_type_code ) Asc LIMIT value",
        -5.696994781494141
      ],
      [
        "SELECT treatment_type_description FROM Treatment_Types GROUP BY treatment_type_code ORDER BY Count ( * ) Asc LIMIT value",
        -6.287374496459961
      ],
      [
        "SELECT T2.treatment_type_description FROM Charges AS T1 JOIN Treatment_Types AS T2 JOIN Treatments AS T3 GROUP BY T3.treatment_type_code ORDER BY Sum ( T1.charge_amount ) Asc LIMIT value",
        -7.91114616394043
      ],
      [
        "SELECT T1.treatment_type_description FROM Treatment_Types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T2.treatment_type_code ORDER BY Count ( * ) Desc LIMIT value",
        -9.082615852355957
      ],
      [
        "SELECT T1.treatment_type_description FROM Treatment_Types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T2.treatment_type_code ORDER BY Sum ( T2.treatment_type_code ) Asc LIMIT value",
        -9.567086696624756
      ],
      [
        "SELECT T1.treatment_type_description FROM Treatment_Types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T2.treatment_type_code ORDER BY Sum ( T1.treatment_type_description ) Asc LIMIT value",
        -9.822868824005127
      ],
      [
        "SELECT T1.treatment_type_description FROM Treatment_Types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T2.treatment_type_code ORDER BY Sum ( * ) Asc LIMIT value",
        -11.038770198822021
      ],
      [
        "SELECT T1.treatment_type_description FROM Treatment_Types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T2.treatment_type_code ORDER BY Avg ( T1.treatment_type_code ) Asc LIMIT value",
        -11.425556182861328
      ],
      [
        "SELECT treatment_type_description FROM Treatment_Types GROUP BY treatment_type_code ORDER BY Sum ( treatment_type_code ) Asc LIMIT value",
        -11.980647087097168
      ],
      [
        "SELECT T1.treatment_type_description FROM Treatment_Types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T2.treatment_type_code ORDER BY Sum ( T2.cost_of_treatment ) Asc LIMIT value",
        -12.272873878479004
      ],
      [
        "SELECT T1.treatment_type_description FROM Treatment_Types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T2.treatment_type_code ORDER BY Count ( * ) Asc",
        -12.6942720413208
      ],
      [
        "SELECT treatment_type_description FROM Treatment_Types GROUP BY treatment_type_description ORDER BY Count ( * ) Asc LIMIT value",
        -13.307732582092285
      ],
      [
        "SELECT T1.treatment_type_description FROM Treatment_Types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T2.treatment_type_code",
        -13.366110801696777
      ],
      [
        "SELECT T2.treatment_type_description FROM Charges AS T1 JOIN Treatment_Types AS T2 JOIN Treatments AS T3 GROUP BY T3.treatment_type_code ORDER BY Count ( T1.charge_amount ) Asc LIMIT value",
        -13.540091514587402
      ],
      [
        "SELECT T1.treatment_type_description FROM Treatment_Types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T2.treatment_type_code ORDER BY Count ( T1.treatment_type_code ) Asc LIMIT value",
        -13.877395629882812
      ],
      [
        "SELECT T2.treatment_type_description FROM Charges AS T1 JOIN Treatment_Types AS T2 GROUP BY T2.treatment_type_code ORDER BY Sum ( T1.charge_amount ) Asc LIMIT value",
        -14.24681043624878
      ],
      [
        "SELECT T1.treatment_type_description FROM Treatment_Types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T2.treatment_type_code ORDER BY Count ( T2.treatment_type_code ) Asc LIMIT value",
        -14.295689582824707
      ],
      [
        "SELECT treatment_type_description FROM Treatment_Types ORDER BY treatment_type_code Asc LIMIT value",
        -15.393885612487793
      ],
      [
        "SELECT T1.treatment_type_description FROM Treatment_Types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code ORDER BY T2.treatment_type_code Asc LIMIT value",
        -16.405977725982666
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.treatment_type_description FROM Treatment_Types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T2.treatment_type_code ORDER BY Count ( * ) Asc LIMIT 1",
    "predicted_parse": "SELECT T1.treatment_type_description FROM Treatment_Types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T2.treatment_type_code ORDER BY Count ( * ) Asc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: for each row in treatment types table , find the corresponding rows in treatments table",
      "Step 2: find the number of rows of each value of treatments 's treatment type code of the results of step 1",
      "Step 3: find the treatment type description of the results of step 1 with smallest value in the results of step 2"
    ],
    "template_feedback": "in step 3 , order the results by summation of cost of treatment in place of number of rows .",
    "primary_span": [
      [
        4,
        12
      ]
    ],
    "secondary_span": [
      [
        13,
        19
      ]
    ],
    "edits": [
      "summation of cost of treatment",
      "number of rows"
    ],
    "edits_original": "< orderBy > add summation of cost of treatment </ orderBy > < orderBy > remove number of rows </ orderBy >"
  },
  {
    "db_id": "car_1",
    "feedback": "in car makers table, i want the total rows for each continent.",
    "question": "How many car makers are there in each continents? List the continent name and the count.",
    "gold_parse": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent",
    "beam": [
      [
        "SELECT Continent , Count ( * ) FROM continents GROUP BY Continent",
        -0.013735771179199219
      ],
      [
        "SELECT T1.Continent , Count ( * ) FROM continents AS T1 JOIN countries AS T2 ON T1.ContId = T2.Continent GROUP BY T2.CountryId",
        -5.310814380645752
      ],
      [
        "SELECT T2.CountryName , Count ( * ) FROM continents AS T1 JOIN countries AS T2 ON T1.ContId = T2.Continent GROUP BY T1.Continent",
        -5.3918843269348145
      ],
      [
        "SELECT T1.Continent , Count ( * ) FROM continents AS T1 JOIN countries AS T2 ON T1.ContId = T2.Continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T3.Country",
        -6.184332370758057
      ],
      [
        "SELECT T3.Country , Count ( * ) FROM continents AS T1 JOIN countries AS T2 ON T1.ContId = T2.Continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent",
        -6.939184665679932
      ],
      [
        "SELECT T2.Continent , Count ( * ) FROM continents AS T1 JOIN countries AS T2 ON T1.ContId = T2.Continent GROUP BY T1.Continent",
        -7.5915069580078125
      ],
      [
        "SELECT T1.Continent , Count ( * ) FROM continents AS T1 JOIN countries AS T2 ON T1.ContId = T2.Continent GROUP BY T2.Continent",
        -8.195395469665527
      ],
      [
        "SELECT T1.Continent , Count ( * ) FROM continents AS T1 JOIN countries AS T2 ON T1.ContId = T2.Continent GROUP BY T2.CountryName",
        -8.480989456176758
      ],
      [
        "SELECT CountryName , Count ( * ) FROM countries GROUP BY CountryId",
        -10.701318740844727
      ],
      [
        "SELECT Continent , Sum ( * ) FROM continents GROUP BY Continent",
        -10.907228350639343
      ],
      [
        "SELECT T1.CountryName , Count ( * ) FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country GROUP BY T2.Country",
        -11.565680027008057
      ],
      [
        "SELECT Count ( * ) , Continent FROM continents GROUP BY Continent",
        -11.864256858825684
      ],
      [
        "SELECT T2.Country , Count ( * ) FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country GROUP BY T1.CountryId",
        -12.237318992614746
      ],
      [
        "SELECT Continent , Count ( * ) FROM continents GROUP BY *",
        -12.718155860900879
      ],
      [
        "SELECT Continent , Count ( * ) FROM countries GROUP BY CountryId",
        -12.896509170532227
      ],
      [
        "SELECT Country , Count ( * ) FROM car_makers GROUP BY Country",
        -13.106543064117432
      ],
      [
        "SELECT Continent , Count ( * ) , Continent FROM continents GROUP BY Continent",
        -13.135620832443237
      ],
      [
        "SELECT Continent , Count ( * ) FROM continents",
        -13.23426628112793
      ],
      [
        "SELECT Continent FROM continents GROUP BY Continent",
        -13.443002700805664
      ],
      [
        "SELECT CountryName , Count ( * ) FROM countries GROUP BY Continent",
        -13.572460651397705
      ]
    ],
    "predicted_parse_with_values": "SELECT Continent , Count ( * ) FROM continents GROUP BY Continent",
    "predicted_parse": "SELECT Continent , Count ( * ) FROM continents GROUP BY Continent",
    "predicted_parse_explanation": [
      "find each value of continent in continents table along with the number of the corresponding rows to each value"
    ],
    "template_feedback": "additionally use the information from the car makers table and countries table besides the continents table .",
    "primary_span": [
      [
        0,
        11
      ]
    ],
    "secondary_span": [
      [
        12,
        16
      ]
    ],
    "edits": [
      "countries",
      "car makers"
    ],
    "edits_original": "< from > add countries </ from > < from > add car makers </ from >"
  },
  {
    "db_id": "student_transcripts_tracking",
    "feedback": "I want the first name of that student whose cell number is 09700166582 and lives permanently in Haiti. ",
    "question": "Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582.",
    "gold_parse": "SELECT T1.first_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.permanent_address_id  =  T2.address_id WHERE T2.country  =  'Haiti' UNION SELECT first_name FROM Students WHERE cell_mobile_number  =  '09700166582'",
    "beam": [
      [
        "SELECT T2.first_name FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id WHERE T1.country = value OR T2.cell_mobile_number = value UNION SELECT T2.first_name FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id WHERE T1.country = value OR T2.cell_mobile_number = value",
        -1.3722562789916992
      ],
      [
        "SELECT T1.first_name FROM Students AS T1 WHERE T1.cell_mobile_number = value OR T1.cell_mobile_number = value UNION SELECT T1.first_name FROM Addresses AS T2 JOIN Students AS T1 ON T2.address_id = T1.current_address_id WHERE T2.country = value OR T1.cell_mobile_number = value",
        -1.7015533447265625
      ],
      [
        "SELECT T2.first_name FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id WHERE T1.country = value OR T2.cell_mobile_number = value UNION SELECT T2.first_name FROM Students AS T2 WHERE T2.cell_mobile_number = value OR T2.cell_mobile_number = value",
        -1.8436002731323242
      ],
      [
        "SELECT first_name FROM Students WHERE cell_mobile_number = value OR cell_mobile_number = value UNION SELECT first_name FROM Students WHERE cell_mobile_number = value OR cell_mobile_number = value",
        -2.1509742736816406
      ],
      [
        "SELECT first_name FROM Students WHERE cell_mobile_number = value OR cell_mobile_number = value",
        -2.16372013092041
      ],
      [
        "SELECT T2.first_name FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id WHERE T1.country = value OR T2.cell_mobile_number = value",
        -2.2833824157714844
      ],
      [
        "SELECT T1.first_name FROM Students AS T1 WHERE T1.cell_mobile_number = value OR T1.cell_mobile_number = value EXCEPT SELECT T1.first_name FROM Addresses AS T2 JOIN Students AS T1 ON T2.address_id = T1.current_address_id WHERE T2.country = value OR T1.cell_mobile_number = value",
        -4.225672721862793
      ],
      [
        "SELECT T2.first_name FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id WHERE T1.country = value OR T2.cell_mobile_number = value EXCEPT SELECT T2.first_name FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id WHERE T1.country = value OR T2.cell_mobile_number = value",
        -4.390419960021973
      ],
      [
        "SELECT first_name FROM Students WHERE cell_mobile_number = value OR cell_mobile_number = value EXCEPT SELECT first_name FROM Students WHERE cell_mobile_number = value OR cell_mobile_number = value",
        -4.636853218078613
      ],
      [
        "SELECT T2.first_name FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id WHERE T1.country = value OR T2.cell_mobile_number = value EXCEPT SELECT T2.first_name FROM Students AS T2 WHERE T2.cell_mobile_number = value OR T2.cell_mobile_number = value",
        -4.818543434143066
      ],
      [
        "SELECT T1.first_name FROM Students AS T1 WHERE T1.cell_mobile_number = value UNION SELECT T1.first_name FROM Addresses AS T2 JOIN Students AS T1 ON T2.address_id = T1.current_address_id WHERE T2.country = value OR T1.cell_mobile_number = value",
        -6.314630508422852
      ],
      [
        "SELECT T2.first_name FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id WHERE T1.country = value OR T2.cell_mobile_number = value UNION SELECT T2.first_name FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id WHERE T2.cell_mobile_number = value OR T1.country = value",
        -6.419241905212402
      ],
      [
        "SELECT T2.first_name FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id WHERE T1.country = value OR T2.cell_mobile_number = value ORDER BY T2.first_name Desc LIMIT value",
        -6.523842811584473
      ],
      [
        "SELECT first_name FROM Students WHERE cell_mobile_number = value OR cell_mobile_number = value UNION SELECT first_name FROM Students WHERE cell_mobile_number = value",
        -6.5345458984375
      ],
      [
        "SELECT T2.first_name FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id WHERE T2.cell_mobile_number = value OR T1.country = value",
        -6.55194091796875
      ],
      [
        "SELECT T2.first_name FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id WHERE T1.country = value UNION SELECT T2.first_name FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id WHERE T1.country = value OR T2.cell_mobile_number = value",
        -6.651431083679199
      ],
      [
        "SELECT first_name FROM Students WHERE cell_mobile_number = value UNION SELECT first_name FROM Students WHERE cell_mobile_number = value OR cell_mobile_number = value",
        -6.694514274597168
      ],
      [
        "SELECT first_name FROM Students WHERE cell_mobile_number = value OR cell_mobile_number = value ORDER BY first_name Desc LIMIT value",
        -6.882180690765381
      ],
      [
        "SELECT T2.first_name FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id WHERE T1.country = value OR T2.cell_mobile_number = value ORDER BY * Desc LIMIT value",
        -8.623198986053467
      ],
      [
        "SELECT DISTINCT first_name FROM Students WHERE cell_mobile_number = value OR cell_mobile_number = value",
        -9.065980911254883
      ]
    ],
    "predicted_parse_with_values": "SELECT T2.first_name FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id WHERE T1.country = \"Iceland\" OR T2.cell_mobile_number = \"(096)889-8954x524\" UNION SELECT T2.first_name FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id WHERE T1.country = 09700166582 OR T2.cell_mobile_number = \"Haiti\"",
    "predicted_parse": "SELECT T2.first_name FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id WHERE T1.country = value OR T2.cell_mobile_number = value UNION SELECT T2.first_name FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id WHERE T1.country = value OR T2.cell_mobile_number = value",
    "predicted_parse_explanation": [
      "Step 1: for each row in addresses table , find the corresponding rows in students table",
      "Step 2: find the first name of the results of step 1 whose country equals Iceland or cell mobile number equals ( 096 ) 889-8954x524",
      "Step 3: for each row in addresses table , find the corresponding rows in students table",
      "Step 4: find the first name of the results of step 3 whose country equals 9700166582 or cell mobile number equals Haiti",
      "Step 5: show the rows that are in any of the results of step 2 and step 4"
    ],
    "template_feedback": "in step 2 , consider the country equals Haiti conditions in place of the cell mobile number equals ( 096 ) 889-8954x524 or country equals Iceland conditions . in step 3 , do not use the addresses table . in step 4 , consider the cell mobile number equals 09700166582 conditions in place of the country equals 9700166582 or cell mobile number equals Haiti conditions .",
    "primary_span": [
      [
        4,
        9
      ],
      [
        32,
        38
      ],
      [
        43,
        50
      ]
    ],
    "secondary_span": [
      [
        10,
        27
      ],
      [
        32,
        38
      ],
      [
        51,
        65
      ]
    ],
    "edits": [
      "country equals \"Haiti\"",
      "country equals \"Iceland\" or cell mobile number equals \"(096)889-8954x524\"",
      "addresses",
      "cell mobile number equals \"09700166582\"",
      "country equals 9700166582 or cell mobile number equals \"Haiti\""
    ],
    "edits_original": "< where > add country equals \" Haiti \" </ where > < where > remove country equals \" Iceland \" or cell mobile number equals \" ( 096 ) 889-8954x524 \" </ where > < from > remove addresses </ from > < where > add cell mobile number equals \" 09700166582 \" </ where > < where > remove country equals 9700166582 or cell mobile number equals \" Haiti \" </ where >"
  },
  {
    "db_id": "dog_kennels",
    "feedback": "you should hold the \"professional id in treatments table in step 1.",
    "question": "What are the id, role, and first name of the professionals who have performed two or more treatments?",
    "gold_parse": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
    "beam": [
      [
        "SELECT professional_id , role_code , first_name FROM Professionals GROUP BY professional_id HAVING Count ( * ) > = value",
        -0.0023221969604492188
      ],
      [
        "SELECT T3.professional_id , T3.role_code , T1.first_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id GROUP BY T3.professional_id HAVING Count ( * ) > = value",
        -6.593689918518066
      ],
      [
        "SELECT T1.owner_id , T3.role_code , T3.first_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id GROUP BY T3.professional_id HAVING Count ( * ) > = value",
        -7.222521781921387
      ],
      [
        "SELECT professional_id , first_name , first_name FROM Professionals GROUP BY professional_id HAVING Count ( * ) > = value",
        -8.897043228149414
      ],
      [
        "SELECT professional_id , role_code , first_name , first_name FROM Professionals GROUP BY professional_id HAVING Count ( * ) > = value",
        -10.60902214050293
      ],
      [
        "SELECT T3.professional_id , T1.first_name , T3.first_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id GROUP BY T3.professional_id HAVING Count ( * ) > = value",
        -11.25628662109375
      ],
      [
        "SELECT professional_id , role_code , first_name FROM Professionals GROUP BY first_name HAVING Count ( * ) > = value",
        -11.355657577514648
      ],
      [
        "SELECT professional_id , role_code FROM Professionals GROUP BY professional_id HAVING Count ( * ) > = value",
        -11.648999214172363
      ],
      [
        "SELECT role_code , first_name , first_name FROM Professionals GROUP BY professional_id HAVING Count ( * ) > = value",
        -11.850780487060547
      ],
      [
        "SELECT professional_id , first_name FROM Professionals GROUP BY professional_id HAVING Count ( * ) > = value",
        -13.172636985778809
      ],
      [
        "SELECT professional_id , professional_id , first_name FROM Professionals GROUP BY professional_id HAVING Count ( * ) > = value",
        -13.2195405960083
      ],
      [
        "SELECT T1.owner_id , T3.role_code , T1.first_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id GROUP BY T3.professional_id HAVING Count ( * ) > = value",
        -13.767937660217285
      ],
      [
        "SELECT professional_id , role_code , first_name FROM Professionals WHERE first_name = value GROUP BY professional_id HAVING Count ( * ) > = value",
        -14.236897230148315
      ],
      [
        "SELECT professional_id , role_code , first_name FROM Professionals GROUP BY professional_id HAVING Count ( * ) > = value EXCEPT SELECT professional_id , role_code , first_name FROM Professionals",
        -14.69163703918457
      ],
      [
        "SELECT T3.professional_id , T3.first_name , T1.first_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id GROUP BY T3.professional_id HAVING Count ( * ) > = value",
        -14.808398246765137
      ],
      [
        "SELECT professional_id , role_code , first_name FROM Professionals GROUP BY professional_id HAVING Sum ( * ) > = value",
        -14.859099864959717
      ],
      [
        "SELECT T3.professional_id , T3.role_code , T3.first_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id GROUP BY T1.owner_id HAVING Count ( * ) > = value",
        -15.041223526000977
      ],
      [
        "SELECT professional_id , role_code , first_name FROM Professionals",
        -15.158771514892578
      ],
      [
        "SELECT professional_id , role_code , first_name , Count ( * ) FROM Professionals GROUP BY professional_id HAVING Count ( * ) > = value",
        -15.184534549713135
      ],
      [
        "SELECT professional_id , role_code , first_name FROM Professionals GROUP BY professional_id HAVING Count ( * ) > value",
        -15.202951431274414
      ]
    ],
    "predicted_parse_with_values": "SELECT professional_id , role_code , first_name FROM Professionals GROUP BY professional_id HAVING Count ( * ) > = 2",
    "predicted_parse": "SELECT professional_id , role_code , first_name FROM Professionals GROUP BY professional_id HAVING Count ( * ) > = value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of professional id in professionals table",
      "Step 2: find the professional id , role code , first name in professionals table whose corresponding value in step 1 is greater than or equals 2"
    ],
    "template_feedback": "in step 1 , additionally use the information from the treatments table besides the professionals table .",
    "primary_span": [
      [
        4,
        11
      ]
    ],
    "secondary_span": [
      [
        12,
        16
      ]
    ],
    "edits": [
      "treatments"
    ],
    "edits_original": "< from > add treatments </ from >"
  },
  {
    "db_id": "dog_kennels",
    "feedback": "Interchange treatment type code , weight with distinct breed code , size code in step 2.",
    "question": "What are all the possible breed type and size type combinations?",
    "gold_parse": "SELECT DISTINCT breed_code ,  size_code FROM dogs",
    "beam": [
      [
        "SELECT T2.treatment_type_code , T1.weight FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id",
        -1.1061220169067383
      ],
      [
        "SELECT T1.treatment_type_code , T2.weight FROM Treatment_Types AS T1 JOIN Dogs AS T2 JOIN Treatments AS T3 ON T1.treatment_type_code = T3.treatment_type_code AND T3.dog_id = T2.dog_id",
        -1.6764941215515137
      ],
      [
        "SELECT T2.treatment_type_code , T1.gender FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id",
        -1.7381365299224854
      ],
      [
        "SELECT T1.treatment_type_code , T2.gender FROM Treatment_Types AS T1 JOIN Dogs AS T2 JOIN Treatments AS T3 ON T1.treatment_type_code = T3.treatment_type_code AND T3.dog_id = T2.dog_id",
        -2.456571578979492
      ],
      [
        "SELECT T2.treatment_type_code , T1.treatment_type_code FROM Treatment_Types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code",
        -3.2452003955841064
      ],
      [
        "SELECT T1.treatment_type_code , T2.treatment_type_code FROM Treatment_Types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code",
        -3.437206506729126
      ],
      [
        "SELECT T2.treatment_type_code , T1.size_code FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id",
        -3.6905720233917236
      ],
      [
        "SELECT treatment_type_code , treatment_type_code FROM Treatment_Types",
        -3.693279504776001
      ],
      [
        "SELECT treatment_type_code , treatment_type_code FROM Treatments",
        -3.9444379806518555
      ],
      [
        "SELECT weight , weight FROM Dogs",
        -4.459888935089111
      ],
      [
        "SELECT T1.treatment_type_code , T2.size_code FROM Treatment_Types AS T1 JOIN Dogs AS T2 JOIN Treatments AS T3 ON T1.treatment_type_code = T3.treatment_type_code AND T3.dog_id = T2.dog_id",
        -4.475806474685669
      ],
      [
        "SELECT T2.treatment_type_code , T1.weight FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id GROUP BY T2.treatment_type_code",
        -4.8467817306518555
      ],
      [
        "SELECT T2.treatment_type_code , T1.treatment_type_description FROM Treatment_Types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code",
        -4.873431205749512
      ],
      [
        "SELECT weight , gender FROM Dogs",
        -5.2074713706970215
      ],
      [
        "SELECT T3.treatment_type_code , T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id",
        -5.279167175292969
      ],
      [
        "SELECT T2.treatment_type_code , T1.gender FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id GROUP BY T2.treatment_type_code",
        -5.513826131820679
      ],
      [
        "SELECT T1.weight , T2.treatment_type_code FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id",
        -5.711946487426758
      ],
      [
        "SELECT T2.treatment_type_code , T1.breed_name FROM Breeds AS T1 JOIN Treatment_Types AS T2 JOIN Dogs AS T3 ON T1.breed_code = T3.breed_code JOIN Treatments AS T4 ON T3.dog_id = T4.dog_id AND T4.treatment_type_code = T2.treatment_type_code",
        -5.736309051513672
      ],
      [
        "SELECT treatment_type_code , treatment_type_description FROM Treatment_Types",
        -5.801647663116455
      ],
      [
        "SELECT treatment_type_code , treatment_id FROM Treatments",
        -6.134875774383545
      ]
    ],
    "predicted_parse_with_values": "SELECT T2.treatment_type_code , T1.weight FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id",
    "predicted_parse": "SELECT T2.treatment_type_code , T1.weight FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id",
    "predicted_parse_explanation": [
      "Step 1: for each row in dogs table , find the corresponding rows in treatments table",
      "Step 2: find the treatment type code and weight of the results of step 1"
    ],
    "template_feedback": "in step 1 , do not use the treatments table . in step 2 , find breed code and size code in place of treatment type code and weight . make sure no repetition in the results .",
    "primary_span": [
      [
        4,
        10
      ],
      [
        15,
        20
      ],
      [
        30,
        37
      ]
    ],
    "secondary_span": [
      [
        4,
        10
      ],
      [
        21,
        29
      ]
    ],
    "edits": [
      "distinct",
      "breed code",
      "size code",
      "treatment type code",
      "weight",
      "treatments"
    ],
    "edits_original": "< select > add distinct </ select > < select > add breed code </ select > < select > add size code </ select > < select > remove treatment type code </ select > < select > remove weight </ select > < from > remove treatments </ from >"
  },
  {
    "db_id": "tvshow",
    "feedback": "Supersede hight definition tv with pixel aspect ratio par .",
    "question": "find the pixel aspect ratio and nation of the tv channels that do not use English.",
    "gold_parse": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'",
    "beam": [
      [
        "SELECT Hight_definition_TV , Country FROM TV_Channel WHERE Language ! = value",
        -0.21093177795410156
      ],
      [
        "SELECT Max ( Hight_definition_TV ) , Country FROM TV_Channel WHERE Language ! = value",
        -2.367465019226074
      ],
      [
        "SELECT Pixel_aspect_ratio_PAR , Country FROM TV_Channel WHERE Language ! = value",
        -2.4758834838867188
      ],
      [
        "SELECT Max ( Pixel_aspect_ratio_PAR ) , Country FROM TV_Channel WHERE Language ! = value",
        -4.841094970703125
      ],
      [
        "SELECT Hight_definition_TV , Pay_per_view_PPV FROM TV_Channel WHERE Language ! = value",
        -6.310807228088379
      ],
      [
        "SELECT Min ( Hight_definition_TV ) , Country FROM TV_Channel WHERE Language ! = value",
        -6.817142486572266
      ],
      [
        "SELECT Hight_definition_TV , Hight_definition_TV FROM TV_Channel WHERE Language ! = value",
        -7.867986679077148
      ],
      [
        "SELECT Pixel_aspect_ratio_PAR , Pay_per_view_PPV FROM TV_Channel WHERE Language ! = value",
        -7.894707679748535
      ],
      [
        "SELECT Max ( Hight_definition_TV ) , Pay_per_view_PPV FROM TV_Channel WHERE Language ! = value",
        -8.70772647857666
      ],
      [
        "SELECT Min ( Pixel_aspect_ratio_PAR ) , Country FROM TV_Channel WHERE Language ! = value",
        -8.804962158203125
      ],
      [
        "SELECT T1.Hight_definition_TV , T2.Share FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.Language ! = value",
        -9.220647811889648
      ],
      [
        "SELECT Pixel_aspect_ratio_PAR , Hight_definition_TV FROM TV_Channel WHERE Language ! = value",
        -9.23906421661377
      ],
      [
        "SELECT Hight_definition_TV , Pixel_aspect_ratio_PAR FROM TV_Channel WHERE Language ! = value",
        -10.00283145904541
      ],
      [
        "SELECT T1.Hight_definition_TV , T2.18_49_Rating_Share FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.Language ! = value",
        -10.25766372680664
      ],
      [
        "SELECT Max ( Hight_definition_TV ) , Hight_definition_TV FROM TV_Channel WHERE Language ! = value",
        -10.484269142150879
      ],
      [
        "SELECT Max ( Pixel_aspect_ratio_PAR ) , Pay_per_view_PPV FROM TV_Channel WHERE Language ! = value",
        -10.709651947021484
      ],
      [
        "SELECT Max ( Pay_per_view_PPV ) , Country FROM TV_Channel WHERE Language ! = value",
        -10.899352073669434
      ],
      [
        "SELECT Pay_per_view_PPV , Country FROM TV_Channel WHERE Language ! = value",
        -10.975677490234375
      ],
      [
        "SELECT T1.Pixel_aspect_ratio_PAR , T2.Share FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.Language ! = value",
        -11.009162902832031
      ],
      [
        "SELECT T1.Hight_definition_TV , T1.Country FROM TV_Channel AS T1 WHERE T1.id NOT IN ( SELECT T2.Channel FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.Language = value )",
        -12.076159477233887
      ]
    ],
    "predicted_parse_with_values": "SELECT Hight_definition_TV , Country FROM TV_Channel WHERE Language ! = \"English\"",
    "predicted_parse": "SELECT Hight_definition_TV , Country FROM TV_Channel WHERE Language ! = value",
    "predicted_parse_explanation": [
      "find the hight definition tv and country in tv channel table whose language not equals English"
    ],
    "template_feedback": "find pixel aspect ratio par in place of hight definition tv .",
    "primary_span": [
      [
        0,
        4
      ]
    ],
    "secondary_span": [
      [
        5,
        11
      ]
    ],
    "edits": [
      "pixel aspect ratio par",
      "hight definition tv"
    ],
    "edits_original": "< select > add pixel aspect ratio par </ select > < select > remove hight definition tv </ select >"
  },
  {
    "db_id": "dog_kennels",
    "feedback": "No need to find treatment type code so find treatments 's date of treatment instead of that .",
    "question": "What are the cost and treatment type description of each treatment?",
    "gold_parse": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code",
    "beam": [
      [
        "SELECT treatment_type_description , treatment_type_code FROM Treatment_Types",
        -0.0044345855712890625
      ],
      [
        "SELECT T2.cost_of_treatment , T1.treatment_type_description FROM Treatment_Types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code",
        -5.68406867980957
      ],
      [
        "SELECT treatment_type_description , treatment_type_description FROM Treatment_Types",
        -7.0055389404296875
      ],
      [
        "SELECT T2.cost_of_treatment , T1.treatment_type_code FROM Treatment_Types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code",
        -10.014883041381836
      ],
      [
        "SELECT T2.abandoned_yn , T1.treatment_type_description FROM Treatment_Types AS T1 JOIN Dogs AS T2 JOIN Treatments AS T3 ON T1.treatment_type_code = T3.treatment_type_code AND T3.dog_id = T2.dog_id",
        -10.306991577148438
      ],
      [
        "SELECT treatment_type_description , treatment_type_code , treatment_type_code FROM Treatment_Types",
        -11.64338493347168
      ],
      [
        "SELECT * , treatment_type_description FROM Treatment_Types",
        -12.187788963317871
      ],
      [
        "SELECT T2.dog_id , T1.treatment_type_description FROM Treatment_Types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code",
        -12.199706077575684
      ],
      [
        "SELECT T2.treatment_id , T1.treatment_type_description FROM Treatment_Types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code",
        -12.598928451538086
      ],
      [
        "SELECT treatment_type_description , treatment_type_code FROM Treatment_Types WHERE treatment_type_code = value",
        -12.685312271118164
      ],
      [
        "SELECT T1.size_description , T2.treatment_type_code FROM Sizes AS T1 JOIN Treatment_Types AS T2 JOIN Dogs AS T3 ON T1.size_code = T3.size_code JOIN Treatments AS T4 ON T3.dog_id = T4.dog_id AND T4.treatment_type_code = T2.treatment_type_code",
        -12.815972328186035
      ],
      [
        "SELECT Count ( * ) , treatment_type_description FROM Treatment_Types",
        -13.310184478759766
      ],
      [
        "SELECT treatment_type_description , treatment_type_code FROM Treatment_Types ORDER BY treatment_type_description Asc",
        -14.20950698852539
      ],
      [
        "SELECT T2.abandoned_yn , T1.treatment_type_code FROM Treatment_Types AS T1 JOIN Dogs AS T2 JOIN Treatments AS T3 ON T1.treatment_type_code = T3.treatment_type_code AND T3.dog_id = T2.dog_id",
        -14.290809631347656
      ],
      [
        "SELECT treatment_type_description FROM Treatment_Types",
        -14.43671989440918
      ],
      [
        "SELECT T1.treatment_type_description , T2.treatment_type_code FROM Treatment_Types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code",
        -14.561073303222656
      ],
      [
        "SELECT DISTINCT treatment_type_description , treatment_type_code FROM Treatment_Types",
        -14.567535400390625
      ],
      [
        "SELECT treatment_type_description , treatment_type_code FROM Treatment_Types UNION SELECT treatment_type_code FROM Treatment_Types",
        -14.569208145141602
      ],
      [
        "SELECT treatment_type_code , treatment_type_code FROM Treatment_Types",
        -14.573235511779785
      ],
      [
        "SELECT treatment_type_description , treatment_type_code FROM Treatment_Types GROUP BY treatment_type_description",
        -14.716364860534668
      ]
    ],
    "predicted_parse_with_values": "SELECT treatment_type_description , treatment_type_code FROM Treatment_Types",
    "predicted_parse": "SELECT treatment_type_description , treatment_type_code FROM Treatment_Types",
    "predicted_parse_explanation": [
      "find the treatment type description and treatment type code in treatment types table"
    ],
    "template_feedback": "additionally use the information from the treatments table besides the treatment types table . find cost of treatment in place of treatment types 's treatment type code .",
    "primary_span": [
      [
        0,
        7
      ],
      [
        14,
        17
      ]
    ],
    "secondary_span": [
      [
        8,
        13
      ],
      [
        18,
        27
      ]
    ],
    "edits": [
      "cost of treatment",
      "treatment type code",
      "treatments"
    ],
    "edits_original": "< select > add cost of treatment </ select > < select > remove treatment type code </ select > < from > add treatments </ from >"
  },
  {
    "db_id": "car_1",
    "feedback": "in step 2, use horsepower instead of maker.",
    "question": "What is the average horsepower for all cards produced before 1980?",
    "gold_parse": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980",
    "beam": [
      [
        "SELECT Avg ( T1.Maker ) FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T3.Year < value",
        -0.7798967361450195
      ],
      [
        "SELECT Avg ( Edispl ) FROM cars_data WHERE Year < value",
        -1.8044068813323975
      ],
      [
        "SELECT Avg ( Horsepower ) FROM cars_data WHERE Year < value",
        -1.9762194156646729
      ],
      [
        "SELECT Avg ( T1.ModelId ) FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T3.Year < value",
        -2.015045166015625
      ],
      [
        "SELECT Avg ( DISTINCT T1.Maker ) FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T3.Year < value",
        -2.887913942337036
      ],
      [
        "SELECT Avg ( * ) FROM cars_data WHERE Year < value",
        -3.9408960342407227
      ],
      [
        "SELECT Avg ( Weight ) FROM cars_data WHERE Year < value",
        -4.22119665145874
      ],
      [
        "SELECT Avg ( Year ) FROM cars_data WHERE Year < value",
        -4.876324653625488
      ],
      [
        "SELECT Avg ( T1.Model ) FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T3.Year < value",
        -5.908873081207275
      ],
      [
        "SELECT Avg ( Accelerate ) FROM cars_data WHERE Year < value",
        -6.297555446624756
      ],
      [
        "SELECT Avg ( MPG ) FROM cars_data WHERE Year < value",
        -6.796097278594971
      ],
      [
        "SELECT Avg ( Cylinders ) FROM cars_data WHERE Year < value",
        -7.1061859130859375
      ],
      [
        "SELECT Avg ( DISTINCT T1.ModelId ) FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T3.Year < value",
        -7.255395889282227
      ],
      [
        "SELECT Avg ( T1.Maker ) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id WHERE T4.Year < value",
        -8.794540882110596
      ],
      [
        "SELECT Avg ( DISTINCT T1.Maker ) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id WHERE T4.Year < value",
        -9.198029518127441
      ],
      [
        "SELECT Avg ( T1.Maker ) FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T3.Year < value",
        -9.976212501525879
      ],
      [
        "SELECT Avg ( T1.FullName ) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id WHERE T4.Year < value",
        -10.788768768310547
      ],
      [
        "SELECT Avg ( T3.Edispl ) FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T1.Model IN ( SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T3.Year < value )",
        -11.392246961593628
      ],
      [
        "SELECT Avg ( T1.Make ) FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T2.Year < value",
        -11.583004474639893
      ],
      [
        "SELECT Avg ( T1.MakeId ) FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T2.Year < value",
        -11.660183906555176
      ]
    ],
    "predicted_parse_with_values": "SELECT Avg ( T1.Maker ) FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T3.Year < 1980",
    "predicted_parse": "SELECT Avg ( T1.Maker ) FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T3.Year < value",
    "predicted_parse_explanation": [
      "Step 1: for each row in model list table , find the corresponding rows in car names table and in cars data table",
      "Step 2: find the average maker of the results of step 1 whose year less than 1980"
    ],
    "template_feedback": "in step 1 , do not use the car names table and model list table . in step 2 , find average horsepower in place of average maker .",
    "primary_span": [
      [
        4,
        15
      ],
      [
        20,
        22
      ]
    ],
    "secondary_span": [
      [
        4,
        15
      ],
      [
        23,
        28
      ]
    ],
    "edits": [
      "average horsepower",
      "average maker",
      "model list",
      "car names"
    ],
    "edits_original": "< select > add average horsepower </ select > < select > remove average maker </ select > < from > remove model list </ from > < from > remove car names </ from >"
  },
  {
    "db_id": "world_1",
    "feedback": "You need to ascertain that the district name should be Gelderland. ",
    "question": "What is the total population of Gelderland district?",
    "gold_parse": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"",
    "beam": [
      [
        "SELECT Sum ( Population ) FROM country",
        -0.6928682327270508
      ],
      [
        "SELECT Sum ( LifeExpectancy ) FROM country",
        -0.8836870193481445
      ],
      [
        "SELECT Sum ( Population ) FROM country WHERE LocalName = value",
        -3.608597755432129
      ],
      [
        "SELECT Sum ( LifeExpectancy ) FROM country WHERE LocalName = value",
        -3.8624935150146484
      ],
      [
        "SELECT Sum ( Population ) FROM country WHERE Region = value",
        -4.52632999420166
      ],
      [
        "SELECT Sum ( LifeExpectancy ) FROM country WHERE Region = value",
        -4.776519775390625
      ],
      [
        "SELECT Sum ( Population ) FROM country WHERE Name = value",
        -5.14013671875
      ],
      [
        "SELECT Sum ( LifeExpectancy ) FROM country WHERE Name = value",
        -5.3931169509887695
      ],
      [
        "SELECT Sum ( T2.Population ) FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.District = value",
        -5.407839775085449
      ],
      [
        "SELECT Sum ( T2.LifeExpectancy ) FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.District = value",
        -5.659770965576172
      ],
      [
        "SELECT Sum ( GNPOld ) FROM country",
        -7.541884422302246
      ],
      [
        "SELECT Sum ( Population ) FROM city",
        -8.824239730834961
      ],
      [
        "SELECT Sum ( GNP ) FROM country",
        -10.897038459777832
      ],
      [
        "SELECT Sum ( GNPOld ) FROM country WHERE LocalName = value",
        -11.001251220703125
      ],
      [
        "SELECT Sum ( T2.Population ) , T2.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code GROUP BY T1.District",
        -11.656184196472168
      ],
      [
        "SELECT Sum ( T2.LifeExpectancy ) , T2.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code GROUP BY T1.District",
        -11.866968154907227
      ],
      [
        "SELECT Count ( Population ) FROM country",
        -12.073679447174072
      ],
      [
        "SELECT Avg ( Population ) FROM country",
        -12.367410659790039
      ],
      [
        "SELECT Avg ( LifeExpectancy ) FROM country",
        -12.46677017211914
      ],
      [
        "SELECT Count ( LifeExpectancy ) FROM country",
        -12.515560626983643
      ]
    ],
    "predicted_parse_with_values": "SELECT Sum ( Population ) FROM country",
    "predicted_parse": "SELECT Sum ( Population ) FROM country",
    "predicted_parse_explanation": [
      "find the summation of population in country table"
    ],
    "template_feedback": "use city table in place of country table . additionally make sure that district equals Gelderland . find summation of city 's population in place of summation of country 's population .",
    "primary_span": [
      [
        0,
        2
      ],
      [
        9,
        16
      ],
      [
        17,
        22
      ]
    ],
    "secondary_span": [
      [
        3,
        8
      ],
      [
        23,
        31
      ]
    ],
    "edits": [
      "city",
      "country",
      "district equals \"Gelderland\""
    ],
    "edits_original": "< from > add city </ from > < from > remove country </ from > < where > add district equals \" Gelderland \" </ where >"
  },
  {
    "db_id": "world_1",
    "feedback": "you need to interchange between continent and region.",
    "question": "How long is the people's average life expectancy in Central Africa?",
    "gold_parse": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"",
    "beam": [
      [
        "SELECT Avg ( LifeExpectancy ) FROM country WHERE Continent = value",
        -0.79705810546875
      ],
      [
        "SELECT Avg ( GNPOld ) FROM country WHERE Continent = value",
        -1.1929130554199219
      ],
      [
        "SELECT Avg ( LifeExpectancy ) FROM country WHERE Region = value",
        -2.2319374084472656
      ],
      [
        "SELECT Avg ( GNPOld ) FROM country WHERE Region = value",
        -2.4165115356445312
      ],
      [
        "SELECT Avg ( Population ) FROM country WHERE Continent = value",
        -3.208078384399414
      ],
      [
        "SELECT Avg ( Population ) FROM country WHERE Region = value",
        -4.999500274658203
      ],
      [
        "SELECT Avg ( GNP ) FROM country WHERE Continent = value",
        -6.413106918334961
      ],
      [
        "SELECT Avg ( GNP ) FROM country WHERE Region = value",
        -7.914480209350586
      ],
      [
        "SELECT Avg ( LifeExpectancy ) FROM country WHERE LocalName = value",
        -8.89198112487793
      ],
      [
        "SELECT Avg ( GNPOld ) FROM country WHERE LocalName = value",
        -9.193890571594238
      ],
      [
        "SELECT Avg ( Population ) FROM country WHERE LocalName = value",
        -11.348102569580078
      ],
      [
        "SELECT Avg ( LifeExpectancy ) , Avg ( GNPOld ) FROM country WHERE Continent = value",
        -12.373211860656738
      ],
      [
        "SELECT Avg ( LifeExpectancy ) FROM country WHERE Name = value",
        -12.495073318481445
      ],
      [
        "SELECT Avg ( GNPOld ) FROM country WHERE Name = value",
        -12.83356761932373
      ],
      [
        "SELECT Avg ( LifeExpectancy ) FROM country",
        -12.888766288757324
      ],
      [
        "SELECT Avg ( LifeExpectancy ) , Avg ( LifeExpectancy ) FROM country WHERE Continent = value",
        -12.940491676330566
      ],
      [
        "SELECT Avg ( GNPOld ) , Avg ( GNPOld ) FROM country WHERE Continent = value",
        -13.324070930480957
      ],
      [
        "SELECT Avg ( LifeExpectancy ) , Avg ( GNPOld ) FROM country WHERE Region = value",
        -13.349553108215332
      ],
      [
        "SELECT Avg ( GNPOld ) FROM country",
        -13.35518741607666
      ],
      [
        "SELECT Avg ( Capital ) FROM country WHERE Continent = value",
        -14.460453033447266
      ]
    ],
    "predicted_parse_with_values": "SELECT Avg ( LifeExpectancy ) FROM country WHERE Continent = \"Central Africa\"",
    "predicted_parse": "SELECT Avg ( LifeExpectancy ) FROM country WHERE Continent = value",
    "predicted_parse_explanation": [
      "find the average life expectancy in country table whose continent equals Central Africa"
    ],
    "template_feedback": "consider the region equals Central Africa conditions in place of the continent equals Central Africa conditions .",
    "primary_span": [
      [
        0,
        6
      ]
    ],
    "secondary_span": [
      [
        7,
        16
      ]
    ],
    "edits": [
      "region equals \"Central Africa\"",
      "continent equals \"Central Africa\""
    ],
    "edits_original": "< where > add region equals \" Central Africa \" </ where > < where > remove continent equals \" Central Africa \" </ where >"
  },
  {
    "db_id": "network_1",
    "feedback": "Use student id in friend table instead of grade , grade in high schooler table in step 1.",
    "question": "What are the names of high schoolers who have 3 or more friends?",
    "gold_parse": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3",
    "beam": [
      [
        "SELECT name FROM Highschooler GROUP BY grade , grade HAVING Count ( * ) > = value",
        -0.8176097869873047
      ],
      [
        "SELECT name FROM Highschooler GROUP BY grade HAVING Count ( * ) > = value",
        -1.293360710144043
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id , T1.grade HAVING Count ( * ) > = value",
        -2.22894287109375
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T1.grade , T2.student_id HAVING Count ( * ) > = value",
        -2.2497081756591797
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T1.grade , T2.friend_id HAVING Count ( * ) > = value",
        -3.8554434776306152
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) > = value",
        -4.111479759216309
      ],
      [
        "SELECT name FROM Highschooler GROUP BY name , grade HAVING Count ( * ) > = value",
        -4.579565525054932
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id GROUP BY T1.grade , T2.student_id HAVING Count ( * ) > = value",
        -4.601228713989258
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id GROUP BY T2.student_id , T1.grade HAVING Count ( * ) > = value",
        -5.7403645515441895
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id GROUP BY T1.grade , T2.liked_id HAVING Count ( * ) > = value",
        -5.761289119720459
      ],
      [
        "SELECT name FROM Highschooler GROUP BY grade , name HAVING Count ( * ) > = value",
        -6.334415435791016
      ],
      [
        "SELECT name FROM Highschooler GROUP BY grade , Count ( * ) HAVING Count ( * ) > = value",
        -6.451051712036133
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id GROUP BY T2.liked_id , T1.grade HAVING Count ( * ) > = value",
        -7.158326148986816
      ],
      [
        "SELECT name FROM Highschooler GROUP BY grade , ID HAVING Count ( * ) > = value",
        -7.655267238616943
      ],
      [
        "SELECT name FROM Highschooler GROUP BY ID , grade HAVING Count ( * ) > = value",
        -7.664860248565674
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.friend_id , T1.grade HAVING Count ( * ) > = value",
        -7.936234474182129
      ],
      [
        "SELECT T1.grade FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) > = value",
        -8.13197135925293
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id WHERE T1.grade ! = value GROUP BY T2.student_id HAVING Count ( * ) > = value",
        -8.315349578857422
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id GROUP BY T2.student_id HAVING Count ( * ) > = value",
        -8.32167387008667
      ],
      [
        "SELECT name FROM Highschooler",
        -14.705415725708008
      ]
    ],
    "predicted_parse_with_values": "SELECT name FROM Highschooler GROUP BY grade , grade HAVING Count ( * ) > = 3",
    "predicted_parse": "SELECT name FROM Highschooler GROUP BY grade , grade HAVING Count ( * ) > = value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of grade and grade in high schooler table",
      "Step 2: find the name in high schooler table whose corresponding value in step 1 is greater than or equals 3"
    ],
    "template_feedback": "in step 1 , additionally use the information from the friend table besides the high schooler table . find for value of student id in place of grade .",
    "primary_span": [
      [
        4,
        11
      ],
      [
        18,
        23
      ]
    ],
    "secondary_span": [
      [
        12,
        17
      ],
      [
        24,
        28
      ]
    ],
    "edits": [
      "friend",
      "student id",
      "grade"
    ],
    "edits_original": "< from > add friend </ from > < groupBy > add student id </ groupBy > < groupBy > remove grade </ groupBy >"
  },
  {
    "db_id": "world_1",
    "feedback": "Be certain to find only for which population is maximum .",
    "question": "What is the most populace city that speaks English?",
    "gold_parse": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1",
    "beam": [
      [
        "SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code JOIN countrylanguage AS T3 ON T2.Code = T3.CountryCode WHERE T3.Language = value",
        -0.8744020462036133
      ],
      [
        "SELECT T1.Population FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code JOIN countrylanguage AS T3 ON T2.Code = T3.CountryCode WHERE T3.Language = value",
        -1.0714101791381836
      ],
      [
        "SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code JOIN countrylanguage AS T3 ON T2.Code = T3.CountryCode WHERE T3.Language = value ORDER BY T1.Population Desc LIMIT value",
        -2.0035829544067383
      ],
      [
        "SELECT T1.Name FROM city AS T1 WHERE T1.Population = ( SELECT Max ( T1.Population ) FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code JOIN countrylanguage AS T3 ON T2.Code = T3.CountryCode WHERE T3.Language = value )",
        -2.5985002517700195
      ],
      [
        "SELECT T1.Population FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code JOIN countrylanguage AS T3 ON T2.Code = T3.CountryCode WHERE T3.Language = value ORDER BY T1.Population Desc LIMIT value",
        -3.9975175857543945
      ],
      [
        "SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Name = value",
        -5.120404243469238
      ],
      [
        "SELECT T1.Population FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Name = value",
        -6.136919975280762
      ],
      [
        "SELECT Name FROM city WHERE Name = value",
        -6.940816402435303
      ],
      [
        "SELECT Population FROM city WHERE Name = value",
        -7.414369106292725
      ],
      [
        "SELECT T1.LifeExpectancy FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value",
        -7.582489013671875
      ],
      [
        "SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Name = value ORDER BY T1.Population Desc LIMIT value",
        -7.722103118896484
      ],
      [
        "SELECT Max ( T1.Population ) FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code JOIN countrylanguage AS T3 ON T2.Code = T3.CountryCode WHERE T3.Language = value",
        -7.89908504486084
      ],
      [
        "SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code JOIN countrylanguage AS T3 ON T2.Code = T3.CountryCode WHERE T3.Language = value ORDER BY T1.Population Desc",
        -8.235926628112793
      ],
      [
        "SELECT Max ( T1.Population ) FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code JOIN countrylanguage AS T3 ON T2.Code = T3.CountryCode WHERE T3.Language = value ORDER BY T1.Population Desc LIMIT value",
        -8.885234832763672
      ],
      [
        "SELECT T1.Population FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.LocalName = value",
        -8.906316757202148
      ],
      [
        "SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.LocalName = value",
        -8.944818496704102
      ],
      [
        "SELECT T1.Population FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value",
        -8.945061683654785
      ],
      [
        "SELECT T1.Population FROM city AS T1 WHERE T1.Population = ( SELECT Max ( T1.Population ) FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code JOIN countrylanguage AS T3 ON T2.Code = T3.CountryCode WHERE T3.Language = value )",
        -9.110355377197266
      ],
      [
        "SELECT T1.Name FROM city AS T1 WHERE T1.Population = ( SELECT Max ( T1.Population ) FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code JOIN countrylanguage AS T3 ON T2.Code = T3.CountryCode WHERE T3.Language = value ) ORDER BY T1.Population Desc LIMIT value",
        -9.376123428344727
      ],
      [
        "SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Population = ( SELECT Max ( T1.Population ) FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code JOIN countrylanguage AS T3 ON T2.Code = T3.CountryCode WHERE T3.Language = value )",
        -9.510102272033691
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code JOIN countrylanguage AS T3 ON T2.Code = T3.CountryCode WHERE T3.Language = \"English\"",
    "predicted_parse": "SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code JOIN countrylanguage AS T3 ON T2.Code = T3.CountryCode WHERE T3.Language = value",
    "predicted_parse_explanation": [
      "Step 1: for each row in city table , find the corresponding rows in country table and in countrylanguage table",
      "Step 2: find the city 's name of the results of step 1 whose language equals English"
    ],
    "template_feedback": "in step 1 , do not use the country table . in step 2 , additionally find city 's population . find the result with the largest city 's population .",
    "primary_span": [
      [
        4,
        10
      ],
      [
        15,
        20
      ],
      [
        21,
        30
      ]
    ],
    "secondary_span": [
      [
        4,
        10
      ]
    ],
    "edits": [
      "population",
      "country",
      "population",
      "descending",
      "1"
    ],
    "edits_original": "< select > add population </ select > < from > remove country </ from > < orderBy > add population </ orderBy > < orderBy > add descending </ orderBy > < limit > add 1 </ limit >"
  },
  {
    "db_id": "world_1",
    "feedback": "Replace continent with life expectancy , Ensure to find for which name name equals Brazil .",
    "question": "Give me Brazil's population and life expectancies.",
    "gold_parse": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"",
    "beam": [
      [
        "SELECT Population , Continent FROM country",
        -0.6322650909423828
      ],
      [
        "SELECT Population , LifeExpectancy FROM country",
        -0.7680835723876953
      ],
      [
        "SELECT Population , GNPOld FROM country",
        -5.526811599731445
      ],
      [
        "SELECT Population , Population FROM country",
        -8.114880561828613
      ],
      [
        "SELECT Population , Capital FROM country",
        -8.590777397155762
      ],
      [
        "SELECT LifeExpectancy , Continent FROM country",
        -9.126137733459473
      ],
      [
        "SELECT Population , LifeExpectancy FROM country WHERE Continent = value",
        -9.93244457244873
      ],
      [
        "SELECT Continent , LifeExpectancy FROM country",
        -10.980881690979004
      ],
      [
        "SELECT Population , Continent , Continent FROM country",
        -11.154058456420898
      ],
      [
        "SELECT Population , Continent , GNPOld FROM country",
        -11.522690773010254
      ],
      [
        "SELECT Population , Continent FROM country WHERE Continent = value",
        -11.539617538452148
      ],
      [
        "SELECT Population , LifeExpectancy , Continent FROM country",
        -11.7272367477417
      ],
      [
        "SELECT Population , GNP FROM country",
        -11.849504470825195
      ],
      [
        "SELECT Continent , GNPOld FROM country",
        -12.273805618286133
      ],
      [
        "SELECT Continent , Continent FROM country",
        -12.27697467803955
      ],
      [
        "SELECT Sum ( Population ) , Continent FROM country",
        -13.836297035217285
      ],
      [
        "SELECT Population FROM country",
        -13.899272918701172
      ],
      [
        "SELECT LifeExpectancy , LifeExpectancy FROM country",
        -14.029460906982422
      ],
      [
        "SELECT Count ( Population ) , Continent FROM country",
        -14.654969215393066
      ],
      [
        "SELECT GNP , Continent FROM country",
        -14.754289627075195
      ]
    ],
    "predicted_parse_with_values": "SELECT Population , Continent FROM country",
    "predicted_parse": "SELECT Population , Continent FROM country",
    "predicted_parse_explanation": [
      "find the population and continent in country table"
    ],
    "template_feedback": "additionally make sure that name equals Brazil . find life expectancy in place of continent .",
    "primary_span": [
      [
        0,
        7
      ],
      [
        8,
        10
      ]
    ],
    "secondary_span": [
      [
        11,
        15
      ]
    ],
    "edits": [
      "life expectancy",
      "continent",
      "name equals \"Brazil\""
    ],
    "edits_original": "< select > add life expectancy </ select > < select > remove continent </ select > < where > add name equals \" Brazil \" </ where >"
  },
  {
    "db_id": "world_1",
    "feedback": "Need to find country's name where maximum languages are used in that country .",
    "question": "What is name of the country that speaks the largest number of languages?",
    "gold_parse": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1",
    "beam": [
      [
        "SELECT Continent FROM country GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value",
        -0.09324169158935547
      ],
      [
        "SELECT Name FROM country GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value",
        -2.423140525817871
      ],
      [
        "SELECT Continent , Count ( * ) FROM country GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value",
        -9.060589790344238
      ],
      [
        "SELECT Name , Continent FROM country GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value",
        -9.245123863220215
      ],
      [
        "SELECT Continent , Continent FROM country GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value",
        -9.427109718322754
      ],
      [
        "SELECT Continent FROM country GROUP BY LocalName ORDER BY Count ( * ) Desc LIMIT value",
        -10.336075782775879
      ],
      [
        "SELECT Continent FROM country ORDER BY Continent Desc LIMIT value",
        -11.111182689666748
      ],
      [
        "SELECT Continent FROM country GROUP BY Continent ORDER BY Count ( * ) Desc",
        -11.845569610595703
      ],
      [
        "SELECT Name FROM country ORDER BY Continent Desc LIMIT value",
        -12.387253761291504
      ],
      [
        "SELECT Name FROM country GROUP BY LocalName ORDER BY Count ( * ) Desc LIMIT value",
        -12.492589950561523
      ],
      [
        "SELECT LocalName FROM country GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value",
        -12.804742813110352
      ],
      [
        "SELECT Continent , Count ( * ) FROM country GROUP BY Continent",
        -12.851604461669922
      ],
      [
        "SELECT Continent FROM country WHERE LocalName = ( SELECT Continent FROM country GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value ) GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value",
        -12.987750053405762
      ],
      [
        "SELECT Continent FROM country ORDER BY LocalName Desc LIMIT value",
        -13.090744018554688
      ],
      [
        "SELECT Continent FROM country ORDER BY LifeExpectancy Desc LIMIT value",
        -13.340755224227905
      ],
      [
        "SELECT Continent FROM country ORDER BY SurfaceArea Desc LIMIT value",
        -13.539016008377075
      ],
      [
        "SELECT Continent FROM country WHERE LocalName = value GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value",
        -13.780108451843262
      ],
      [
        "SELECT Continent FROM country GROUP BY Continent HAVING SurfaceArea < value ORDER BY Count ( * ) Desc LIMIT value",
        -13.782374858856201
      ],
      [
        "SELECT Continent , Count ( Continent ) FROM country GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value",
        -13.875449180603027
      ],
      [
        "SELECT Name , Continent FROM country GROUP BY Continent",
        -14.041913986206055
      ]
    ],
    "predicted_parse_with_values": "SELECT Continent FROM country GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT 1",
    "predicted_parse": "SELECT Continent FROM country GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of continent in country table",
      "Step 2: find the continent in country table with largest value in the results of step 1"
    ],
    "template_feedback": "in step 1 , additionally use the information from the countrylanguage table besides the country table . find for each value of name in place of continent . in step 2 , find name in place of continent .",
    "primary_span": [
      [
        4,
        11
      ],
      [
        17,
        22
      ],
      [
        32,
        33
      ]
    ],
    "secondary_span": [
      [
        12,
        16
      ],
      [
        23,
        27
      ],
      [
        34,
        38
      ]
    ],
    "edits": [
      "name",
      "continent",
      "countrylanguage",
      "name",
      "continent"
    ],
    "edits_original": "< select > add name </ select > < select > remove continent </ select > < from > add countrylanguage </ from > < groupBy > add name </ groupBy > < groupBy > remove continent </ groupBy >"
  },
  {
    "db_id": "student_transcripts_tracking",
    "feedback": "Change permanent address id with current address id in step 1 , only find address id , line  1 , line 2 , line 3 in step2.",
    "question": "Which address holds the most number of students currently? List the address id and all lines.",
    "gold_parse": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1",
    "beam": [
      [
        "SELECT current_address_id , email_address FROM Students GROUP BY permanent_address_id ORDER BY Count ( * ) Desc LIMIT value",
        -1.291400671005249
      ],
      [
        "SELECT permanent_address_id , email_address FROM Students GROUP BY permanent_address_id ORDER BY Count ( * ) Desc LIMIT value",
        -2.322356700897217
      ],
      [
        "SELECT permanent_address_id , last_name FROM Students GROUP BY permanent_address_id ORDER BY Count ( * ) Desc LIMIT value",
        -2.4784836769104004
      ],
      [
        "SELECT T1.address_id , T2.email_address FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id GROUP BY T2.permanent_address_id ORDER BY Count ( * ) Desc LIMIT value",
        -2.5074126720428467
      ],
      [
        "SELECT T2.current_address_id , T1.line_1 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id GROUP BY T2.permanent_address_id ORDER BY Count ( * ) Desc LIMIT value",
        -2.6325409412384033
      ],
      [
        "SELECT T2.permanent_address_id , T1.line_1 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id GROUP BY T2.permanent_address_id ORDER BY Count ( * ) Desc LIMIT value",
        -2.8289668560028076
      ],
      [
        "SELECT current_address_id , last_name FROM Students GROUP BY permanent_address_id ORDER BY Count ( * ) Desc LIMIT value",
        -3.238077163696289
      ],
      [
        "SELECT current_address_id , email_address FROM Students GROUP BY current_address_id ORDER BY Count ( * ) Desc LIMIT value",
        -3.3028504848480225
      ],
      [
        "SELECT current_address_id , permanent_address_id FROM Students GROUP BY permanent_address_id ORDER BY Count ( * ) Desc LIMIT value",
        -3.460146903991699
      ],
      [
        "SELECT T1.address_id , T1.line_1 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id GROUP BY T2.permanent_address_id ORDER BY Count ( * ) Desc LIMIT value",
        -3.860542058944702
      ],
      [
        "SELECT T1.address_id , T2.permanent_address_id FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id GROUP BY T2.permanent_address_id ORDER BY Count ( * ) Desc LIMIT value",
        -4.195998668670654
      ],
      [
        "SELECT permanent_address_id , last_name FROM Students GROUP BY current_address_id ORDER BY Count ( * ) Desc LIMIT value",
        -4.2299485206604
      ],
      [
        "SELECT T2.permanent_address_id , T1.country FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id GROUP BY T2.permanent_address_id ORDER BY Count ( * ) Desc LIMIT value",
        -4.231700420379639
      ],
      [
        "SELECT permanent_address_id , email_address FROM Students GROUP BY current_address_id ORDER BY Count ( * ) Desc LIMIT value",
        -4.327019214630127
      ],
      [
        "SELECT T1.address_id , T2.email_address FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id GROUP BY T2.current_address_id ORDER BY Count ( * ) Desc LIMIT value",
        -4.515817403793335
      ],
      [
        "SELECT T2.current_address_id , T1.country FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id GROUP BY T2.permanent_address_id ORDER BY Count ( * ) Desc LIMIT value",
        -4.526885509490967
      ],
      [
        "SELECT T1.address_id , T2.last_name FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id GROUP BY T2.permanent_address_id ORDER BY Count ( * ) Desc LIMIT value",
        -4.57742977142334
      ],
      [
        "SELECT T2.current_address_id , T1.line_1 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id GROUP BY T2.current_address_id ORDER BY Count ( * ) Desc LIMIT value",
        -4.588038682937622
      ],
      [
        "SELECT T2.permanent_address_id , T1.line_1 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id GROUP BY T2.current_address_id ORDER BY Count ( * ) Desc LIMIT value",
        -4.772984266281128
      ],
      [
        "SELECT current_address_id , last_name FROM Students GROUP BY current_address_id ORDER BY Count ( * ) Desc LIMIT value",
        -4.993557929992676
      ]
    ],
    "predicted_parse_with_values": "SELECT current_address_id , email_address FROM Students GROUP BY permanent_address_id ORDER BY Count ( * ) Desc LIMIT 1",
    "predicted_parse": "SELECT current_address_id , email_address FROM Students GROUP BY permanent_address_id ORDER BY Count ( * ) Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of permanent address id in students table",
      "Step 2: find the current address id and email address in students table with largest value in the results of step 1"
    ],
    "template_feedback": "in step 1 , additionally use the information from the addresses table besides the students table . in step 2 , find line 2 and line 1 in place of email address .",
    "primary_span": [
      [
        4,
        11
      ],
      [
        21,
        26
      ]
    ],
    "secondary_span": [
      [
        12,
        16
      ],
      [
        27,
        32
      ]
    ],
    "edits": [
      "address id",
      "line 1",
      "line 2",
      "current address id",
      "email address",
      "addresses",
      "address id",
      "permanent address id"
    ],
    "edits_original": "< select > add address id </ select > < select > add line 1 </ select > < select > add line 2 </ select > < select > remove current address id </ select > < select > remove email address </ select > < from > add addresses </ from > < groupBy > add address id </ groupBy > < groupBy > remove permanent address id </ groupBy >"
  },
  {
    "db_id": "dog_kennels",
    "feedback": "Use charge type instead of first charge amount .",
    "question": "What is the charge amount of the most expensive charge type?",
    "gold_parse": "SELECT max(charge_amount) FROM Charges",
    "beam": [
      [
        "SELECT charge_amount FROM Charges ORDER BY charge_amount Desc LIMIT value",
        -0.029610633850097656
      ],
      [
        "SELECT charge_amount FROM Charges ORDER BY charge_type Desc LIMIT value",
        -3.6693124771118164
      ],
      [
        "SELECT T1.charge_amount FROM Charges AS T1 JOIN Treatments AS T2 GROUP BY T2.treatment_type_code ORDER BY Count ( * ) Desc LIMIT value",
        -6.346892356872559
      ],
      [
        "SELECT T1.charge_amount FROM Charges AS T1 JOIN Treatments AS T2 ORDER BY T2.cost_of_treatment Desc LIMIT value",
        -7.023557662963867
      ],
      [
        "SELECT charge_amount FROM Charges WHERE charge_type = value",
        -7.931927680969238
      ],
      [
        "SELECT charge_amount FROM Charges GROUP BY charge_type ORDER BY Count ( * ) Desc LIMIT value",
        -8.30456256866455
      ],
      [
        "SELECT T1.charge_amount FROM Charges AS T1 JOIN Treatments AS T2 ORDER BY T2.treatment_type_code Desc LIMIT value",
        -8.481945991516113
      ],
      [
        "SELECT T1.charge_amount FROM Charges AS T1 JOIN Treatment_Types AS T2 ORDER BY T2.treatment_type_code Desc LIMIT value",
        -9.456521987915039
      ],
      [
        "SELECT charge_amount FROM Charges ORDER BY charge_amount Asc LIMIT value",
        -9.469642639160156
      ],
      [
        "SELECT charge_amount FROM Charges ORDER BY charge_type Asc LIMIT value",
        -11.255721092224121
      ],
      [
        "SELECT T1.charge_amount FROM Charges AS T1 JOIN Treatments AS T2 WHERE T2.treatment_type_code = value",
        -11.568685054779053
      ],
      [
        "SELECT T1.charge_amount FROM Charges AS T1 JOIN Treatments AS T2 GROUP BY T2.treatment_type_code ORDER BY Sum ( T1.charge_amount ) Desc LIMIT value",
        -11.756216049194336
      ],
      [
        "SELECT charge_amount FROM Charges WHERE charge_type = value ORDER BY charge_amount Desc LIMIT value",
        -11.768306732177734
      ],
      [
        "SELECT T1.charge_amount FROM Charges AS T1 JOIN Treatment_Types AS T2 GROUP BY T2.treatment_type_code ORDER BY Count ( * ) Desc LIMIT value",
        -12.085147857666016
      ],
      [
        "SELECT charge_amount FROM Charges",
        -12.246360778808594
      ],
      [
        "SELECT charge_amount FROM Charges ORDER BY charge_amount Desc",
        -12.494607925415039
      ],
      [
        "SELECT T1.charge_amount FROM Charges AS T1 JOIN Treatment_Types AS T2 ORDER BY T2.treatment_type_description Desc LIMIT value",
        -13.195273399353027
      ],
      [
        "SELECT T1.charge_amount FROM Charges AS T1 JOIN Treatments AS T2 GROUP BY T2.treatment_type_code",
        -13.747753143310547
      ],
      [
        "SELECT charge_amount FROM Charges ORDER BY charge_id Desc LIMIT value",
        -13.897941589355469
      ],
      [
        "SELECT Max ( charge_amount ) FROM Charges",
        -14.127887725830078
      ]
    ],
    "predicted_parse_with_values": "SELECT charge_amount FROM Charges ORDER BY charge_amount Desc LIMIT 1",
    "predicted_parse": "SELECT charge_amount FROM Charges ORDER BY charge_amount Desc LIMIT value",
    "predicted_parse_explanation": [
      "find the charge amount in charges table with largest value of charge amount"
    ],
    "template_feedback": "find maximum charge amount in place of charge amount . you should not find the largest of the results . show me all the results .",
    "primary_span": [
      [
        0,
        3
      ],
      [
        10,
        25
      ]
    ],
    "secondary_span": [
      [
        4,
        9
      ]
    ],
    "edits": [
      "maximum charge amount",
      "charge amount",
      "charge amount",
      "descending",
      "1"
    ],
    "edits_original": "< select > add maximum charge amount </ select > < select > remove charge amount </ select > < orderBy > remove charge amount </ orderBy > < orderBy > remove descending </ orderBy > < limit > remove 1 </ limit >"
  },
  {
    "db_id": "world_1",
    "feedback": "In place of continent , put surface area .",
    "question": "What are the names and areas of countries with the top 5 largest area?",
    "gold_parse": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
    "beam": [
      [
        "SELECT Name , Continent FROM country ORDER BY SurfaceArea Desc LIMIT value",
        -0.07371044158935547
      ],
      [
        "SELECT LocalName , Continent FROM country ORDER BY SurfaceArea Desc LIMIT value",
        -2.6991262435913086
      ],
      [
        "SELECT Name , Region FROM country ORDER BY SurfaceArea Desc LIMIT value",
        -5.6242876052856445
      ],
      [
        "SELECT LocalName , Region FROM country ORDER BY SurfaceArea Desc LIMIT value",
        -8.766167640686035
      ],
      [
        "SELECT Name , Continent FROM country WHERE SurfaceArea = ( SELECT Max ( SurfaceArea ) FROM country ) ORDER BY SurfaceArea Desc LIMIT value",
        -11.8628568649292
      ],
      [
        "SELECT Name , Continent FROM country ORDER BY SurfaceArea Desc",
        -11.965685844421387
      ],
      [
        "SELECT Name , Continent FROM country WHERE SurfaceArea = ( SELECT Max ( SurfaceArea ) FROM country )",
        -12.558087348937988
      ],
      [
        "SELECT Name , Continent , Region FROM country ORDER BY SurfaceArea Desc LIMIT value",
        -13.104442596435547
      ],
      [
        "SELECT Name FROM country ORDER BY SurfaceArea Desc LIMIT value",
        -13.423775672912598
      ],
      [
        "SELECT Name , Continent FROM country ORDER BY SurfaceArea Asc LIMIT value",
        -13.973251342773438
      ],
      [
        "SELECT LocalName , Continent FROM country WHERE SurfaceArea = ( SELECT Max ( SurfaceArea ) FROM country ) ORDER BY SurfaceArea Desc LIMIT value",
        -14.236534118652344
      ],
      [
        "SELECT Name , Continent FROM country",
        -14.275798797607422
      ],
      [
        "SELECT Name , Continent , Continent FROM country ORDER BY SurfaceArea Desc LIMIT value",
        -14.339570045471191
      ],
      [
        "SELECT Name , Continent FROM country GROUP BY Region ORDER BY SurfaceArea Desc LIMIT value",
        -14.483452796936035
      ],
      [
        "SELECT LocalName , Continent FROM country ORDER BY SurfaceArea Desc",
        -14.596373558044434
      ],
      [
        "SELECT Region , Continent FROM country ORDER BY SurfaceArea Desc LIMIT value",
        -14.80949592590332
      ],
      [
        "SELECT Name , Continent FROM country GROUP BY Continent ORDER BY SurfaceArea Desc LIMIT value",
        -14.877535820007324
      ],
      [
        "SELECT DISTINCT Name , Continent FROM country ORDER BY SurfaceArea Desc LIMIT value",
        -15.058545112609863
      ],
      [
        "SELECT Name , Continent FROM country UNION SELECT LocalName FROM country WHERE SurfaceArea = ( SELECT Max ( SurfaceArea ) FROM country )",
        -15.343063354492188
      ],
      [
        "SELECT LocalName FROM country ORDER BY SurfaceArea Desc LIMIT value",
        -16.192781448364258
      ]
    ],
    "predicted_parse_with_values": "SELECT Name , Continent FROM country ORDER BY SurfaceArea Desc LIMIT 5",
    "predicted_parse": "SELECT Name , Continent FROM country ORDER BY SurfaceArea Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: find the name and continent in country table ordered descending by surface area",
      "Step 2: only show the first 5 rows of the results"
    ],
    "template_feedback": "in step 1 , find surface area in place of continent .",
    "primary_span": [
      [
        4,
        6
      ]
    ],
    "secondary_span": [
      [
        7,
        11
      ]
    ],
    "edits": [
      "surface area",
      "continent"
    ],
    "edits_original": "< select > add surface area </ select > < select > remove continent </ select >"
  },
  {
    "db_id": "car_1",
    "feedback": "you should use the horsepower instead of edispl.",
    "question": "What is the average horsepower of the cars before 1980?",
    "gold_parse": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980",
    "beam": [
      [
        "SELECT Avg ( Edispl ) FROM cars_data WHERE Year < value",
        -0.11784505844116211
      ],
      [
        "SELECT Avg ( Horsepower ) FROM cars_data WHERE Year < value",
        -2.403045177459717
      ],
      [
        "SELECT Avg ( Weight ) FROM cars_data WHERE Year < value",
        -4.6503143310546875
      ],
      [
        "SELECT Avg ( * ) FROM cars_data WHERE Year < value",
        -5.099018096923828
      ],
      [
        "SELECT Avg ( Year ) FROM cars_data WHERE Year < value",
        -6.035700798034668
      ],
      [
        "SELECT Avg ( MPG ) FROM cars_data WHERE Year < value",
        -6.808445453643799
      ],
      [
        "SELECT Avg ( Cylinders ) FROM cars_data WHERE Year < value",
        -6.815217018127441
      ],
      [
        "SELECT Avg ( Accelerate ) FROM cars_data WHERE Year < value",
        -7.840425491333008
      ],
      [
        "SELECT Avg ( T1.Maker ) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id WHERE T4.Year < value",
        -10.73702621459961
      ],
      [
        "SELECT Count ( * ) FROM cars_data WHERE Year < value",
        -11.33325481414795
      ],
      [
        "SELECT Avg ( T1.ModelId ) FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T3.Year < value",
        -11.65181589126587
      ],
      [
        "SELECT Avg ( Edispl ) FROM cars_data WHERE Year > value",
        -12.038950443267822
      ],
      [
        "SELECT Avg ( T1.FullName ) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id WHERE T4.Year < value",
        -12.438334465026855
      ],
      [
        "SELECT Avg ( T1.Maker ) FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T3.Year < value",
        -12.516297340393066
      ],
      [
        "SELECT Avg ( T1.Id ) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id WHERE T4.Year < value",
        -12.586332321166992
      ],
      [
        "SELECT Avg ( T1.MakeId ) FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T2.Year < value",
        -12.851137161254883
      ],
      [
        "SELECT Avg ( Id ) FROM cars_data WHERE Year < value",
        -12.962610244750977
      ],
      [
        "SELECT Avg ( Edispl ) , Avg ( Year ) FROM cars_data WHERE Year < value",
        -13.155728340148926
      ],
      [
        "SELECT Avg ( T1.Country ) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id WHERE T4.Year < value",
        -13.497184753417969
      ],
      [
        "SELECT Avg ( T1.Model ) FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T3.Year < value",
        -13.594159126281738
      ]
    ],
    "predicted_parse_with_values": "SELECT Avg ( Edispl ) FROM cars_data WHERE Year < 1980",
    "predicted_parse": "SELECT Avg ( Edispl ) FROM cars_data WHERE Year < value",
    "predicted_parse_explanation": [
      "find the average edispl in cars data table whose year less than 1980"
    ],
    "template_feedback": "find average horsepower in place of average edispl .",
    "primary_span": [
      [
        0,
        2
      ]
    ],
    "secondary_span": [
      [
        3,
        8
      ]
    ],
    "edits": [
      "average horsepower",
      "average edispl"
    ],
    "edits_original": "< select > add average horsepower </ select > < select > remove average edispl </ select >"
  },
  {
    "db_id": "flight_2",
    "feedback": "In step 1 Switch airlines table with flights table .",
    "question": "Which airlines have less than 200 flights?",
    "gold_parse": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200",
    "beam": [
      [
        "SELECT Airline FROM airlines GROUP BY Airline HAVING Count ( * ) < value",
        -0.24365901947021484
      ],
      [
        "SELECT Airline FROM airlines WHERE Abbreviation < value",
        -2.6136364936828613
      ],
      [
        "SELECT Airline FROM airlines GROUP BY Airline HAVING Count ( * ) BETWEEN value AND value",
        -2.9963769912719727
      ],
      [
        "SELECT Airline FROM airlines GROUP BY Abbreviation HAVING Count ( * ) < value",
        -3.580033302307129
      ],
      [
        "SELECT Airline FROM airlines WHERE Airline < value",
        -3.777273178100586
      ],
      [
        "SELECT Airline FROM airlines GROUP BY Abbreviation HAVING Count ( * ) BETWEEN value AND value",
        -4.128104209899902
      ],
      [
        "SELECT Airline FROM airlines WHERE uid < value",
        -4.526791095733643
      ],
      [
        "SELECT Airline FROM airlines GROUP BY Airline HAVING Count ( * ) > = value",
        -4.578986167907715
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 WHERE T2.Airline < value",
        -6.364003658294678
      ],
      [
        "SELECT Airline FROM airlines GROUP BY Abbreviation HAVING Count ( * ) > = value",
        -6.729278564453125
      ],
      [
        "SELECT Airline FROM airlines GROUP BY uid HAVING Count ( * ) < value",
        -7.224949836730957
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 WHERE T2.FlightNo < value",
        -7.622908115386963
      ],
      [
        "SELECT Airline FROM airlines GROUP BY uid HAVING Count ( * ) BETWEEN value AND value",
        -7.766242980957031
      ],
      [
        "SELECT Airline FROM airlines WHERE Abbreviation BETWEEN value AND value",
        -8.688870906829834
      ],
      [
        "SELECT Airline FROM airlines GROUP BY Airline HAVING Count ( * ) = value",
        -10.021872520446777
      ],
      [
        "SELECT Airline FROM airlines WHERE Airline BETWEEN value AND value",
        -10.178562879562378
      ],
      [
        "SELECT Abbreviation FROM airlines GROUP BY Airline HAVING Count ( * ) < value",
        -10.958222389221191
      ],
      [
        "SELECT Airline FROM airlines GROUP BY uid HAVING Count ( * ) > = value",
        -10.99583625793457
      ],
      [
        "SELECT Airline FROM airlines WHERE Country < value",
        -11.385013580322266
      ],
      [
        "SELECT Airline FROM airlines",
        -11.712915420532227
      ]
    ],
    "predicted_parse_with_values": "SELECT Airline FROM airlines GROUP BY Airline HAVING Count ( * ) < 200",
    "predicted_parse": "SELECT Airline FROM airlines GROUP BY Airline HAVING Count ( * ) < value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of airline name in airlines table",
      "Step 2: find the airline name in airlines table whose corresponding value in step 1 is less than 200"
    ],
    "template_feedback": "in step 1 , additionally use the information from the flights table besides the airlines table .",
    "primary_span": [
      [
        4,
        11
      ]
    ],
    "secondary_span": [
      [
        12,
        16
      ]
    ],
    "edits": [
      "flights"
    ],
    "edits_original": "< from > add flights </ from >"
  },
  {
    "db_id": "world_1",
    "feedback": "country's name name should be Aruba , not continent .",
    "question": "What is the total number of languages used in Aruba?",
    "gold_parse": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"",
    "beam": [
      [
        "SELECT Count ( DISTINCT T2.Language ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = value",
        -0.04935884475708008
      ],
      [
        "SELECT Count ( * ) FROM country WHERE Continent = value",
        -3.0366668701171875
      ],
      [
        "SELECT Count ( DISTINCT Code ) FROM country WHERE Continent = value",
        -9.576742172241211
      ],
      [
        "SELECT Count ( DISTINCT T2.Language ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = value",
        -10.301916599273682
      ],
      [
        "SELECT Count ( DISTINCT Name ) FROM country WHERE Continent = value",
        -11.239742279052734
      ],
      [
        "SELECT Count ( T2.Language ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = value",
        -11.327684879302979
      ],
      [
        "SELECT Count ( DISTINCT Language ) FROM countrylanguage",
        -11.598938465118408
      ],
      [
        "SELECT Sum ( T2.Language ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = value",
        -12.331597805023193
      ],
      [
        "SELECT Count ( DISTINCT Code2 ) FROM country WHERE Continent = value",
        -12.627654075622559
      ],
      [
        "SELECT Count ( DISTINCT T2.Language ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.LocalName = value",
        -13.111246585845947
      ],
      [
        "SELECT Count ( DISTINCT LocalName ) FROM country WHERE Continent = value",
        -13.133365154266357
      ],
      [
        "SELECT Count ( * ) FROM city",
        -13.31857967376709
      ],
      [
        "SELECT Count ( * ) FROM country WHERE Name = value",
        -13.4232759475708
      ],
      [
        "SELECT DISTINCT Count ( DISTINCT T2.Language ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = value",
        -13.696650505065918
      ],
      [
        "SELECT Count ( DISTINCT LifeExpectancy ) FROM country WHERE Continent = value",
        -13.848149299621582
      ],
      [
        "SELECT Count ( LocalName ) FROM country WHERE Continent = value",
        -13.889170169830322
      ],
      [
        "SELECT Count ( DISTINCT GovernmentForm ) FROM country WHERE Continent = value",
        -13.92026138305664
      ],
      [
        "SELECT Count ( Population ) FROM country WHERE Continent = value",
        -13.951550483703613
      ],
      [
        "SELECT Count ( LifeExpectancy ) FROM country WHERE Continent = value",
        -14.031419277191162
      ],
      [
        "SELECT Count ( DISTINCT T1.name ) FROM sqlite_sequence AS T1 JOIN country AS T2 WHERE T2.Continent = value",
        -14.08488941192627
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( DISTINCT T2.Language ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = \"Aruba\"",
    "predicted_parse": "SELECT Count ( DISTINCT T2.Language ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = value",
    "predicted_parse_explanation": [
      "Step 1: for each row in country table , find the corresponding rows in countrylanguage table",
      "Step 2: find the number of different language of the results of step 1 whose continent equals Aruba"
    ],
    "template_feedback": "in step 2 , consider the name equals Aruba conditions in place of the continent equals Aruba conditions . find number of language in place of number of different language .",
    "primary_span": [
      [
        4,
        9
      ],
      [
        19,
        22
      ]
    ],
    "secondary_span": [
      [
        10,
        18
      ],
      [
        23,
        30
      ]
    ],
    "edits": [
      "number of language",
      "number of distinct language",
      "name equals \"Aruba\"",
      "continent equals \"Aruba\""
    ],
    "edits_original": "< select > add number of language </ select > < select > remove number of distinct language </ select > < where > add name equals \" Aruba \" </ where > < where > remove continent equals \" Aruba \" </ where >"
  },
  {
    "db_id": "student_transcripts_tracking",
    "feedback": "In step 1 , You need to use student enrolment table.",
    "question": "What is the semester which most student registered in? Show both the name and the id.",
    "gold_parse": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1",
    "beam": [
      [
        "SELECT semester_name , semester_id FROM Semesters GROUP BY semester_id ORDER BY Count ( * ) Desc LIMIT value",
        -0.012935638427734375
      ],
      [
        "SELECT T1.semester_name , T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id GROUP BY T2.semester_id ORDER BY Count ( * ) Desc LIMIT value",
        -4.894225120544434
      ],
      [
        "SELECT T1.semester_name , T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id GROUP BY T2.student_enrolment_id ORDER BY Count ( * ) Desc LIMIT value",
        -5.834009170532227
      ],
      [
        "SELECT T1.semester_name , T2.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id GROUP BY T1.semester_id ORDER BY Count ( * ) Desc LIMIT value",
        -6.896020889282227
      ],
      [
        "SELECT semester_name , semester_id FROM Semesters INTERSECT SELECT semester_name , semester_id FROM Semesters",
        -8.102693557739258
      ],
      [
        "SELECT T1.semester_name , T2.student_enrolment_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id GROUP BY T1.semester_id ORDER BY Count ( * ) Desc LIMIT value",
        -8.222087860107422
      ],
      [
        "SELECT semester_name , semester_id FROM Semesters GROUP BY semester_id",
        -8.847058296203613
      ],
      [
        "SELECT semester_name , semester_id FROM Semesters GROUP BY semester_id ORDER BY Count ( * ) Desc LIMIT value INTERSECT SELECT semester_name , semester_id FROM Semesters GROUP BY semester_id ORDER BY Count ( * ) Desc LIMIT value",
        -9.36778736114502
      ],
      [
        "SELECT semester_name , semester_id FROM Semesters GROUP BY semester_id ORDER BY Count ( * ) Desc LIMIT value INTERSECT SELECT semester_name , semester_id FROM Semesters",
        -9.960990905761719
      ],
      [
        "SELECT T1.course_name , T2.semester_id FROM Courses AS T1 JOIN Semesters AS T2 JOIN Student_Enrolment AS T3 ON T3.semester_id = T2.semester_id JOIN Student_Enrolment_Courses AS T4 ON T1.course_id = T4.course_id AND T4.student_enrolment_id = T3.student_enrolment_id GROUP BY T2.semester_id ORDER BY Count ( * ) Desc LIMIT value",
        -10.116507530212402
      ],
      [
        "SELECT T1.semester_name , T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id GROUP BY T2.student_id ORDER BY Count ( * ) Desc LIMIT value",
        -10.21535873413086
      ],
      [
        "SELECT semester_name , semester_id FROM Semesters GROUP BY semester_id ORDER BY Count ( * ) Desc",
        -10.868091583251953
      ],
      [
        "SELECT T1.semester_name , T2.student_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id GROUP BY T1.semester_id ORDER BY Count ( * ) Desc LIMIT value",
        -11.260979652404785
      ],
      [
        "SELECT semester_name , semester_id FROM Semesters GROUP BY semester_id HAVING Count ( * ) > = value",
        -11.31392765045166
      ],
      [
        "SELECT semester_name , semester_id FROM Semesters GROUP BY semester_id ORDER BY Count ( * ) Asc LIMIT value",
        -11.663195610046387
      ],
      [
        "SELECT T2.semester_id , T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id GROUP BY T1.semester_id ORDER BY Count ( * ) Desc LIMIT value",
        -11.781477928161621
      ],
      [
        "SELECT semester_name , semester_id FROM Semesters ORDER BY semester_description Desc LIMIT value",
        -12.03009831905365
      ],
      [
        "SELECT T1.semester_name , T1.semester_id FROM Semesters AS T1 UNION SELECT T2.semester_id FROM Student_Enrolment AS T2",
        -12.06625747680664
      ],
      [
        "SELECT T1.degree_summary_name , T2.semester_id FROM Degree_Programs AS T1 JOIN Semesters AS T2 JOIN Student_Enrolment AS T3 ON T1.degree_program_id = T3.degree_program_id AND T3.semester_id = T2.semester_id GROUP BY T2.semester_id ORDER BY Count ( * ) Desc LIMIT value",
        -12.181268692016602
      ],
      [
        "SELECT semester_name , semester_id FROM Semesters",
        -12.313032150268555
      ]
    ],
    "predicted_parse_with_values": "SELECT semester_name , semester_id FROM Semesters GROUP BY semester_id ORDER BY Count ( * ) Desc LIMIT 1",
    "predicted_parse": "SELECT semester_name , semester_id FROM Semesters GROUP BY semester_id ORDER BY Count ( * ) Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of semester id in semesters table",
      "Step 2: find the semester name and semester id in semesters table with largest value in the results of step 1"
    ],
    "template_feedback": "in step 1 , additionally use the information from the student enrolment table besides the semesters table .",
    "primary_span": [
      [
        4,
        12
      ]
    ],
    "secondary_span": [
      [
        13,
        17
      ]
    ],
    "edits": [
      "student enrolment"
    ],
    "edits_original": "< from > add student enrolment </ from >"
  },
  {
    "db_id": "student_transcripts_tracking",
    "feedback": "Find those semester name whose semester id not present in student enrolment table .",
    "question": "What is the name of the semester with no students enrolled?",
    "gold_parse": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )",
    "beam": [
      [
        "SELECT T1.course_name FROM Courses AS T1 WHERE T1.course_name NOT IN ( SELECT T2.semester_name FROM Semesters AS T2 )",
        -0.40433692932128906
      ],
      [
        "SELECT T1.course_name FROM Courses AS T1 JOIN Semesters AS T2 JOIN Student_Enrolment AS T3 ON T3.semester_id = T2.semester_id JOIN Student_Enrolment_Courses AS T4 ON T1.course_id = T4.course_id AND T4.student_enrolment_id = T3.student_enrolment_id WHERE T2.semester_name ! = value",
        -2.0550031661987305
      ],
      [
        "SELECT T1.course_name FROM Courses AS T1 EXCEPT SELECT T2.semester_name FROM Semesters AS T2",
        -2.953965187072754
      ],
      [
        "SELECT course_name FROM Courses WHERE course_name ! = value",
        -3.1236228942871094
      ],
      [
        "SELECT T1.course_name FROM Courses AS T1 WHERE T1.course_name NOT IN ( SELECT T2.semester_id FROM Student_Enrolment AS T2 )",
        -3.468533515930176
      ],
      [
        "SELECT T1.course_name FROM Courses AS T1 JOIN Semesters AS T2 JOIN Student_Enrolment AS T3 ON T3.semester_id = T2.semester_id JOIN Student_Enrolment_Courses AS T4 ON T1.course_id = T4.course_id AND T4.student_enrolment_id = T3.student_enrolment_id WHERE T2.semester_id NOT IN ( SELECT T2.semester_name FROM Semesters AS T2 )",
        -3.513462781906128
      ],
      [
        "SELECT T1.course_name FROM Courses AS T1 JOIN Semesters AS T2 JOIN Student_Enrolment AS T3 ON T3.semester_id = T2.semester_id JOIN Student_Enrolment_Courses AS T4 ON T1.course_id = T4.course_id AND T4.student_enrolment_id = T3.student_enrolment_id WHERE T2.semester_description ! = value",
        -4.157085418701172
      ],
      [
        "SELECT course_name FROM Courses EXCEPT SELECT course_name FROM Courses",
        -4.916324615478516
      ],
      [
        "SELECT T1.course_name FROM Courses AS T1 WHERE * NOT IN ( SELECT T2.semester_name FROM Semesters AS T2 )",
        -4.993168354034424
      ],
      [
        "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment AS T2 JOIN Student_Enrolment_Courses AS T3 ON T1.course_id = T3.course_id AND T3.student_enrolment_id = T2.student_enrolment_id WHERE T2.student_enrolment_id NOT IN ( SELECT T4.semester_name FROM Semesters AS T4 )",
        -5.712595462799072
      ],
      [
        "SELECT T1.course_name FROM Courses AS T1 JOIN Degree_Programs AS T2 JOIN Student_Enrolment AS T3 ON T3.degree_program_id = T2.degree_program_id JOIN Student_Enrolment_Courses AS T4 ON T1.course_id = T4.course_id AND T4.student_enrolment_id = T3.student_enrolment_id WHERE T2.degree_summary_name ! = value",
        -5.944258689880371
      ],
      [
        "SELECT T1.course_name FROM Courses AS T1 JOIN Degree_Programs AS T2 JOIN Student_Enrolment AS T3 ON T3.degree_program_id = T2.degree_program_id JOIN Student_Enrolment_Courses AS T4 ON T1.course_id = T4.course_id AND T4.student_enrolment_id = T3.student_enrolment_id WHERE T2.degree_summary_name NOT IN ( SELECT T5.semester_name FROM Semesters AS T5 )",
        -6.002800941467285
      ],
      [
        "SELECT T1.course_name FROM Courses AS T1 JOIN Semesters AS T2 JOIN Student_Enrolment AS T3 ON T3.semester_id = T2.semester_id JOIN Student_Enrolment_Courses AS T4 ON T1.course_id = T4.course_id AND T4.student_enrolment_id = T3.student_enrolment_id WHERE T2.semester_name = value",
        -6.158365249633789
      ],
      [
        "SELECT T1.course_name FROM Courses AS T1 JOIN Semesters AS T2 JOIN Student_Enrolment AS T3 ON T3.semester_id = T2.semester_id JOIN Student_Enrolment_Courses AS T4 ON T1.course_id = T4.course_id AND T4.student_enrolment_id = T3.student_enrolment_id WHERE T2.semester_id NOT IN ( SELECT T3.semester_id FROM Student_Enrolment AS T3 )",
        -6.67998480796814
      ],
      [
        "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id JOIN Transcripts AS T3 JOIN Transcript_Contents AS T4 ON T2.student_course_id = T4.student_course_id AND T4.transcript_id = T3.transcript_id WHERE T3.transcript_date NOT IN ( SELECT T5.semester_name FROM Semesters AS T5 )",
        -7.2785749435424805
      ],
      [
        "SELECT T1.course_name FROM Courses AS T1 JOIN Students AS T2 JOIN Student_Enrolment AS T3 ON T3.student_id = T2.student_id JOIN Student_Enrolment_Courses AS T4 ON T1.course_id = T4.course_id AND T4.student_enrolment_id = T3.student_enrolment_id WHERE T2.student_id NOT IN ( SELECT T5.semester_name FROM Semesters AS T5 )",
        -7.655087471008301
      ],
      [
        "SELECT T1.course_name FROM Courses AS T1 JOIN Degree_Programs AS T2 JOIN Student_Enrolment AS T3 ON T3.degree_program_id = T2.degree_program_id JOIN Student_Enrolment_Courses AS T4 ON T1.course_id = T4.course_id AND T4.student_enrolment_id = T3.student_enrolment_id WHERE T2.degree_program_id NOT IN ( SELECT T5.semester_name FROM Semesters AS T5 )",
        -7.752498626708984
      ],
      [
        "SELECT course_name FROM Courses WHERE course_name NOT IN ( SELECT course_name FROM Courses )",
        -7.8989973068237305
      ],
      [
        "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id JOIN Transcripts AS T3 JOIN Transcript_Contents AS T4 ON T2.student_course_id = T4.student_course_id AND T4.transcript_id = T3.transcript_id WHERE T3.transcript_id NOT IN ( SELECT T5.semester_name FROM Semesters AS T5 )",
        -8.231797218322754
      ],
      [
        "SELECT course_name FROM Courses",
        -14.147848129272461
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.course_name FROM Courses AS T1 WHERE T1.course_name NOT IN ( SELECT T2.semester_name FROM Semesters AS T2 )",
    "predicted_parse": "SELECT T1.course_name FROM Courses AS T1 WHERE T1.course_name NOT IN ( SELECT T2.semester_name FROM Semesters AS T2 )",
    "predicted_parse_explanation": [
      "Step 1: find the semester name in semesters table",
      "Step 2: find the course name in courses table whose course name not one of the results of step 1"
    ],
    "template_feedback": "in step 1 , use student enrolment table in place of semesters table . find student enrolment 's semester id in place of semester name . in step 2 , use semesters table in place of courses table . make sure the semester id is not one of the results of step 1 the course name is not one of the results of step 1 . find semester name in place of course name .",
    "primary_span": [
      [
        4,
        7
      ],
      [
        14,
        19
      ],
      [
        30,
        32
      ],
      [
        39,
        52
      ],
      [
        66,
        68
      ]
    ],
    "secondary_span": [
      [
        8,
        13
      ],
      [
        20,
        25
      ],
      [
        33,
        38
      ],
      [
        53,
        65
      ],
      [
        69,
        74
      ]
    ],
    "edits": [
      "semester name",
      "course name",
      "semesters",
      "courses",
      "semester id not one of SUBS1",
      "course name not one of SUBS1",
      "semester id",
      "semester name",
      "student enrolment",
      "semesters"
    ],
    "edits_original": "< select > add semester name </ select > < select > remove course name </ select > < from > add semesters </ from > < from > remove courses </ from > < where > add semester id not one of SUBS1 </ where > < where > remove course name not one of SUBS1 </ where > < select > add semester id </ select > < select > remove semester name </ select > < from > add student enrolment </ from > < from > remove semesters </ from >"
  },
  {
    "db_id": "student_transcripts_tracking",
    "feedback": "In step 2 Replace first name with line 2.",
    "question": "What is the first and second line for all addresses?",
    "gold_parse": "SELECT line_1 ,  line_2 FROM addresses",
    "beam": [
      [
        "SELECT T2.first_name , T1.line_1 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id",
        -0.1954936981201172
      ],
      [
        "SELECT line_1 , line_1 FROM Addresses",
        -2.3362884521484375
      ],
      [
        "SELECT * , line_1 FROM Addresses",
        -2.9477310180664062
      ],
      [
        "SELECT line_1 , line_2 FROM Addresses",
        -4.588840484619141
      ],
      [
        "SELECT line_2 , line_1 FROM Addresses",
        -4.988656044006348
      ],
      [
        "SELECT line_3 , line_1 FROM Addresses",
        -5.58587646484375
      ],
      [
        "SELECT T2.email_address , T1.line_1 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id",
        -5.81524658203125
      ],
      [
        "SELECT line_2 , line_2 FROM Addresses",
        -6.952544212341309
      ],
      [
        "SELECT city , line_1 FROM Addresses",
        -7.12756872177124
      ],
      [
        "SELECT country , line_1 FROM Addresses",
        -7.182880401611328
      ],
      [
        "SELECT T2.date_first_registered , T1.line_1 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id",
        -7.612483501434326
      ],
      [
        "SELECT other_address_details , line_1 FROM Addresses",
        -7.65948486328125
      ],
      [
        "SELECT state_province_county , line_1 FROM Addresses",
        -7.877052307128906
      ],
      [
        "SELECT T2.middle_name , T1.line_1 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id",
        -8.754181861877441
      ],
      [
        "SELECT zip_postcode , line_1 FROM Addresses",
        -8.85364055633545
      ],
      [
        "SELECT T2.first_name , T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id",
        -8.921043395996094
      ],
      [
        "SELECT address_id , line_1 FROM Addresses",
        -9.378525733947754
      ],
      [
        "SELECT T2.cell_mobile_number , T1.line_1 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id",
        -9.812519073486328
      ],
      [
        "SELECT T2.semester_name , T1.line_1 FROM Addresses AS T1 JOIN Semesters AS T2 JOIN Students AS T3 ON T1.address_id = T3.current_address_id JOIN Student_Enrolment AS T4 ON T3.student_id = T4.student_id AND T4.semester_id = T2.semester_id",
        -10.397334098815918
      ],
      [
        "SELECT line_1 , line_3 FROM Addresses",
        -10.43539047241211
      ]
    ],
    "predicted_parse_with_values": "SELECT T2.first_name , T1.line_1 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id",
    "predicted_parse": "SELECT T2.first_name , T1.line_1 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id",
    "predicted_parse_explanation": [
      "Step 1: for each row in addresses table , find the corresponding rows in students table",
      "Step 2: find the first name and line 1 of the results of step 1"
    ],
    "template_feedback": "in step 1 , do not use the students table . in step 2 , find line 2 in place of first name .",
    "primary_span": [
      [
        4,
        10
      ],
      [
        15,
        17
      ]
    ],
    "secondary_span": [
      [
        4,
        10
      ],
      [
        18,
        23
      ]
    ],
    "edits": [
      "line 2",
      "first name",
      "students"
    ],
    "edits_original": "< select > add line 2 </ select > < select > remove first name </ select > < from > remove students </ from >"
  },
  {
    "db_id": "tvshow",
    "feedback": "In step 2, id of TV Channel and tv channel table should be supplant in place of channel, tv series table.",
    "question": "What are the ids of all tv channels that have more than 2 TV channels?",
    "gold_parse": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2",
    "beam": [
      [
        "SELECT Channel FROM TV_series GROUP BY Channel HAVING Count ( * ) > value",
        -0.30211353302001953
      ],
      [
        "SELECT T1.Content FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel GROUP BY T2.Channel HAVING Count ( * ) > value",
        -1.3723392486572266
      ],
      [
        "SELECT Channel FROM TV_series WHERE 18_49_Rating_Share > value GROUP BY Channel HAVING Count ( * ) > value",
        -6.998558044433594
      ],
      [
        "SELECT T1.id FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel GROUP BY T2.Channel HAVING Count ( * ) > value",
        -7.080007553100586
      ],
      [
        "SELECT id FROM TV_series GROUP BY Channel HAVING Count ( * ) > value",
        -7.08786153793335
      ],
      [
        "SELECT T2.Channel FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel GROUP BY T1.Content HAVING Count ( * ) > value",
        -7.334649085998535
      ],
      [
        "SELECT T1.Content FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.18_49_Rating_Share > value GROUP BY T2.Channel HAVING Count ( * ) > value",
        -7.400859832763672
      ],
      [
        "SELECT Channel FROM TV_series INTERSECT SELECT Channel FROM TV_series WHERE 18_49_Rating_Share > value",
        -7.8349528312683105
      ],
      [
        "SELECT Content FROM TV_Channel GROUP BY Content HAVING Count ( * ) > value",
        -7.878474235534668
      ],
      [
        "SELECT T1.Content FROM TV_Channel AS T1 INTERSECT SELECT T2.Channel FROM TV_series AS T2 WHERE T2.18_49_Rating_Share > value",
        -8.295548439025879
      ],
      [
        "SELECT Channel FROM TV_series WHERE Viewers_m > value GROUP BY Channel HAVING Count ( * ) > value",
        -8.51534128189087
      ],
      [
        "SELECT Channel FROM TV_series",
        -8.867767333984375
      ],
      [
        "SELECT T1.Content FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.18_49_Rating_Share > value INTERSECT SELECT T2.Channel FROM TV_series AS T2 WHERE T2.18_49_Rating_Share < value",
        -8.86977767944336
      ],
      [
        "SELECT T1.Content FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Viewers_m > value GROUP BY T2.Channel HAVING Count ( * ) > value",
        -8.896001815795898
      ],
      [
        "SELECT T1.Content FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel GROUP BY T2.Channel HAVING Count ( * ) > value INTERSECT SELECT T2.Channel FROM TV_series AS T2 GROUP BY T2.Channel HAVING Count ( * ) > value",
        -9.067168235778809
      ],
      [
        "SELECT T1.Content FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.18_49_Rating_Share > value",
        -9.161334991455078
      ],
      [
        "SELECT Content FROM TV_Channel",
        -9.378453254699707
      ],
      [
        "SELECT Viewers_m FROM TV_series GROUP BY Channel HAVING Count ( * ) > value",
        -9.385056495666504
      ],
      [
        "SELECT Channel FROM TV_series INTERSECT SELECT Channel FROM TV_series WHERE Viewers_m > value",
        -9.504042625427246
      ],
      [
        "SELECT T1.Content FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.18_49_Rating_Share > value INTERSECT SELECT T2.Channel FROM TV_series AS T2 WHERE T2.Rating < value",
        -9.570807456970215
      ]
    ],
    "predicted_parse_with_values": "SELECT Channel FROM TV_series GROUP BY Channel HAVING Count ( * ) > 2",
    "predicted_parse": "SELECT Channel FROM TV_series GROUP BY Channel HAVING Count ( * ) > value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of channel in tv series table",
      "Step 2: find the channel in tv series table whose corresponding value in step 1 is greater than 2"
    ],
    "template_feedback": "in step 1 , use tv channel table in place of tv series table . find for value of country in place of channel .",
    "primary_span": [
      [
        4,
        7
      ],
      [
        15,
        19
      ]
    ],
    "secondary_span": [
      [
        8,
        14
      ],
      [
        20,
        24
      ]
    ],
    "edits": [
      "id",
      "channel",
      "tv channel",
      "tv series",
      "country",
      "channel"
    ],
    "edits_original": "< select > add id </ select > < select > remove channel </ select > < from > add tv channel </ from > < from > remove tv series </ from > < groupBy > add country </ groupBy > < groupBy > remove channel </ groupBy >"
  },
  {
    "db_id": "flight_2",
    "feedback": "It should be city of source airport in flights table in place of city , airports table in step 1.",
    "question": "Which city has most number of departing flights?",
    "gold_parse": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
    "beam": [
      [
        "SELECT City FROM airports GROUP BY City ORDER BY Count ( * ) Desc LIMIT value",
        -0.0022687911987304688
      ],
      [
        "SELECT AirportName FROM airports GROUP BY City ORDER BY Count ( * ) Desc LIMIT value",
        -6.191403388977051
      ],
      [
        "SELECT City FROM airports GROUP BY AirportName ORDER BY Count ( * ) Desc LIMIT value",
        -9.178016662597656
      ],
      [
        "SELECT City FROM airports GROUP BY AirportCode ORDER BY Count ( * ) Desc LIMIT value",
        -9.217140197753906
      ],
      [
        "SELECT City FROM airports GROUP BY City ORDER BY Count ( * ) Asc LIMIT value",
        -12.42812728881836
      ],
      [
        "SELECT City FROM airports GROUP BY City ORDER BY Count ( * ) Desc",
        -12.474053382873535
      ],
      [
        "SELECT City , Count ( * ) FROM airports GROUP BY City ORDER BY Count ( * ) Desc LIMIT value",
        -13.417163848876953
      ],
      [
        "SELECT City FROM airports GROUP BY City",
        -13.902512550354004
      ],
      [
        "SELECT City FROM airports GROUP BY City HAVING Count ( * ) = value",
        -14.143084526062012
      ],
      [
        "SELECT Count ( * ) FROM airports GROUP BY City ORDER BY Count ( * ) Desc LIMIT value",
        -14.187505722045898
      ],
      [
        "SELECT DISTINCT City FROM airports GROUP BY City ORDER BY Count ( * ) Desc LIMIT value",
        -14.461874961853027
      ],
      [
        "SELECT City FROM airports ORDER BY Count ( * ) Desc LIMIT value",
        -14.497023582458496
      ],
      [
        "SELECT AirportName FROM airports GROUP BY AirportName ORDER BY Count ( * ) Desc LIMIT value",
        -15.240381240844727
      ],
      [
        "SELECT AirportName FROM airports GROUP BY AirportCode ORDER BY Count ( * ) Desc LIMIT value",
        -15.311287879943848
      ],
      [
        "SELECT City FROM airports GROUP BY City ORDER BY Avg ( * ) Desc LIMIT value",
        -15.434224128723145
      ],
      [
        "SELECT DISTINCT City FROM airports GROUP BY City ORDER BY Count ( * ) Desc LIMIT value",
        -15.564786911010742
      ],
      [
        "SELECT City FROM airports WHERE City = value GROUP BY City ORDER BY Count ( * ) Desc LIMIT value",
        -15.69263482093811
      ],
      [
        "SELECT City FROM airports GROUP BY City HAVING Count ( * ) IN ( SELECT City FROM airports GROUP BY City ORDER BY Count ( * ) Desc LIMIT value )",
        -15.809488773345947
      ],
      [
        "SELECT City FROM airports GROUP BY City ORDER BY Count ( DISTINCT * ) Desc LIMIT value",
        -15.845300674438477
      ],
      [
        "SELECT City , City FROM airports GROUP BY City ORDER BY Count ( * ) Desc LIMIT value",
        -15.978772163391113
      ]
    ],
    "predicted_parse_with_values": "SELECT City FROM airports GROUP BY City ORDER BY Count ( * ) Desc LIMIT 1",
    "predicted_parse": "SELECT City FROM airports GROUP BY City ORDER BY Count ( * ) Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of city in airports table",
      "Step 2: find the city in airports table with largest value in the results of step 1"
    ],
    "template_feedback": "in step 1 , additionally use the information from the flights table besides the airports table .",
    "primary_span": [
      [
        4,
        11
      ]
    ],
    "secondary_span": [
      [
        12,
        16
      ]
    ],
    "edits": [
      "flights"
    ],
    "edits_original": "< from > add flights </ from >"
  },
  {
    "db_id": "flight_2",
    "feedback": "you need to ensure that city should be of a source airportiations in flights.",
    "question": "Which city is the most frequent source airport?",
    "gold_parse": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
    "beam": [
      [
        "SELECT City FROM airports GROUP BY City ORDER BY Count ( * ) Desc LIMIT value",
        -0.021892547607421875
      ],
      [
        "SELECT AirportName FROM airports GROUP BY City ORDER BY Count ( * ) Desc LIMIT value",
        -3.838608741760254
      ],
      [
        "SELECT City FROM airports GROUP BY AirportCode ORDER BY Count ( * ) Desc LIMIT value",
        -9.226689338684082
      ],
      [
        "SELECT City FROM airports GROUP BY AirportName ORDER BY Count ( * ) Desc LIMIT value",
        -10.747693061828613
      ],
      [
        "SELECT City FROM airports GROUP BY City ORDER BY Count ( * ) Desc",
        -12.724441528320312
      ],
      [
        "SELECT AirportName , City FROM airports GROUP BY City ORDER BY Count ( * ) Desc LIMIT value",
        -12.893881797790527
      ],
      [
        "SELECT AirportName FROM airports GROUP BY AirportCode ORDER BY Count ( * ) Desc LIMIT value",
        -13.14274787902832
      ],
      [
        "SELECT City , City FROM airports GROUP BY City ORDER BY Count ( * ) Desc LIMIT value",
        -13.336819648742676
      ],
      [
        "SELECT City FROM airports GROUP BY City",
        -13.95412540435791
      ],
      [
        "SELECT DISTINCT City FROM airports GROUP BY City ORDER BY Count ( * ) Desc LIMIT value",
        -14.048391342163086
      ],
      [
        "SELECT AirportName FROM airports GROUP BY AirportName ORDER BY Count ( * ) Desc LIMIT value",
        -14.11272144317627
      ],
      [
        "SELECT City FROM airports GROUP BY City ORDER BY Count ( * ) Asc LIMIT value",
        -14.368102073669434
      ],
      [
        "SELECT Count ( AirportName ) FROM airports GROUP BY City ORDER BY Count ( * ) Desc LIMIT value",
        -15.49499797821045
      ],
      [
        "SELECT City FROM airports GROUP BY City ORDER BY Avg ( * ) Desc LIMIT value",
        -15.569049835205078
      ],
      [
        "SELECT City FROM airports GROUP BY Max ( City ) ORDER BY Count ( * ) Desc LIMIT value",
        -15.655418395996094
      ],
      [
        "SELECT City FROM airports ORDER BY AirportCode Desc LIMIT value",
        -15.947473526000977
      ],
      [
        "SELECT City FROM airports GROUP BY City HAVING Count ( * ) > value",
        -15.951386451721191
      ],
      [
        "SELECT City FROM airports GROUP BY City ORDER BY Count ( DISTINCT * ) Desc LIMIT value",
        -15.958789825439453
      ],
      [
        "SELECT City FROM airports GROUP BY City ORDER BY Sum ( * ) Desc LIMIT value",
        -16.20114517211914
      ],
      [
        "SELECT AirportName FROM airports ORDER BY AirportCode Desc LIMIT value",
        -16.24368119239807
      ]
    ],
    "predicted_parse_with_values": "SELECT City FROM airports GROUP BY City ORDER BY Count ( * ) Desc LIMIT 1",
    "predicted_parse": "SELECT City FROM airports GROUP BY City ORDER BY Count ( * ) Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of city in airports table",
      "Step 2: find the city in airports table with largest value in the results of step 1"
    ],
    "template_feedback": "in step 1 , additionally use the information from the flights table besides the airports table .",
    "primary_span": [
      [
        4,
        11
      ]
    ],
    "secondary_span": [
      [
        12,
        16
      ]
    ],
    "edits": [
      "flights"
    ],
    "edits_original": "< from > add flights </ from >"
  },
  {
    "db_id": "flight_2",
    "feedback": "Substitute airports table with flights table and airport name with city .",
    "question": "How many flights land in Aberdeen or Abilene?",
    "gold_parse": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"",
    "beam": [
      [
        "SELECT Count ( * ) FROM airports WHERE AirportName = value OR City = value",
        -0.2524290084838867
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE City = value OR City = value",
        -1.5425872802734375
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE Country = value OR City = value",
        -4.855408191680908
      ],
      [
        "SELECT Count ( * ) FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T2.DestAirport = value OR T1.City = value",
        -8.148386001586914
      ],
      [
        "SELECT Count ( * ) FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T2.DestAirport IN ( SELECT T1.AirportName FROM airports AS T1 WHERE T1.City = value ) AND T1.City = value",
        -8.939091205596924
      ],
      [
        "SELECT Count ( * ) FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T2.DestAirport IN ( SELECT T1.AirportName FROM airports AS T1 WHERE T1.City = value ) OR T1.City = value",
        -9.144224643707275
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE CountryAbbrev = value OR City = value",
        -9.294201850891113
      ],
      [
        "SELECT Count ( * ) FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T2.DestAirport IN ( SELECT T1.AirportName FROM airports AS T1 WHERE T1.City = value OR T1.City = value ) OR T1.City = value",
        -9.51556921005249
      ],
      [
        "SELECT Count ( * ) FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T2.DestAirport IN ( SELECT T1.AirportName FROM airports AS T1 WHERE T1.City = value OR T1.City = value ) AND T1.AirportName IN ( SELECT T1.AirportName FROM airports AS T1 WHERE T1.City = value )",
        -9.589532852172852
      ],
      [
        "SELECT Count ( * ) FROM flights AS T1 WHERE T1.DestAirport IN ( SELECT T2.AirportName FROM airports AS T2 WHERE T2.City = value OR T2.City = value ) AND T1.DestAirport IN ( SELECT T2.AirportName FROM airports AS T2 WHERE T2.City = value )",
        -9.64387559890747
      ],
      [
        "SELECT Count ( * ) FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T2.DestAirport IN ( SELECT T1.AirportCode FROM airports AS T1 WHERE T1.City = value ) AND T1.City = value",
        -9.794037818908691
      ],
      [
        "SELECT Count ( * ) FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T2.DestAirport IN ( SELECT T1.AirportName FROM airports AS T1 WHERE T1.City = value OR T1.City = value ) AND T1.City = value",
        -10.25823450088501
      ],
      [
        "SELECT Count ( * ) FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T2.DestAirport IN ( SELECT T1.AirportCode FROM airports AS T1 WHERE T1.City = value ) OR T1.City = value",
        -10.270814418792725
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE AirportName = value OR AirportName = value",
        -10.584067344665527
      ],
      [
        "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T1.Country = value OR T2.City = value",
        -11.282672882080078
      ],
      [
        "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T1.Abbreviation = value OR T2.City = value",
        -11.604805946350098
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE AirportName = value AND City = value",
        -11.736108779907227
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE AirportName ! = value OR City = value",
        -11.913330078125
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE City = value OR AirportName = value",
        -11.971209526062012
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE AirportCode = value OR City = value",
        -12.856975555419922
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM airports WHERE AirportName = \"Aberdeen\" OR City = \"Abilene\"",
    "predicted_parse": "SELECT Count ( * ) FROM airports WHERE AirportName = value OR City = value",
    "predicted_parse_explanation": [
      "find the number of rows in airports table whose airport name equals Aberdeen or city equals Abilene"
    ],
    "template_feedback": "additionally use the information from the flights table besides the airports table . consider the city equals Aberdeen conditions in place of the airport name equals Aberdeen conditions .",
    "primary_span": [
      [
        0,
        7
      ],
      [
        13,
        18
      ]
    ],
    "secondary_span": [
      [
        8,
        12
      ],
      [
        19,
        28
      ]
    ],
    "edits": [
      "flights",
      "city equals \"Aberdeen\" or city equals \"Abilene\"",
      "airport name equals \"Aberdeen\" or city equals \"Abilene\""
    ],
    "edits_original": "< from > add flights </ from > < where > add city equals \" Aberdeen \" or city equals \" Abilene \" </ where > < where > remove airport name equals \" Aberdeen \" or city equals \" Abilene \" </ where >"
  },
  {
    "db_id": "world_1",
    "feedback": "you need to put region in place of local name and name of city rather than region.",
    "question": "Which region is the city Kabul located in?",
    "gold_parse": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"",
    "beam": [
      [
        "SELECT LocalName FROM country WHERE Region = value",
        -0.9127082824707031
      ],
      [
        "SELECT T2.LocalName FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Name = value",
        -1.3540263175964355
      ],
      [
        "SELECT LocalName FROM country WHERE Continent = value",
        -1.9534850120544434
      ],
      [
        "SELECT T2.LocalName FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.District = value",
        -2.9434328079223633
      ],
      [
        "SELECT SurfaceArea FROM country WHERE Region = value",
        -3.4140429496765137
      ],
      [
        "SELECT LocalName FROM country WHERE SurfaceArea = value",
        -3.446719169616699
      ],
      [
        "SELECT SurfaceArea FROM country WHERE Continent = value",
        -3.8757848739624023
      ],
      [
        "SELECT T2.SurfaceArea FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.District = value",
        -4.032707691192627
      ],
      [
        "SELECT LocalName FROM country WHERE Name = value",
        -4.1330413818359375
      ],
      [
        "SELECT LocalName FROM country",
        -4.997004508972168
      ],
      [
        "SELECT T2.SurfaceArea FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Name = value",
        -5.026534795761108
      ],
      [
        "SELECT LocalName FROM country WHERE LocalName = value",
        -5.859246730804443
      ],
      [
        "SELECT SurfaceArea FROM country WHERE Name = value",
        -5.9480836391448975
      ],
      [
        "SELECT LocalName FROM country GROUP BY LocalName HAVING Count ( * ) = value",
        -6.1606550216674805
      ],
      [
        "SELECT SurfaceArea FROM country WHERE LocalName = value",
        -6.454732656478882
      ],
      [
        "SELECT SurfaceArea FROM country",
        -6.902793884277344
      ],
      [
        "SELECT T2.Region FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Name = value",
        -7.2368621826171875
      ],
      [
        "SELECT SurfaceArea FROM country GROUP BY LocalName HAVING Count ( * ) = value",
        -7.720064163208008
      ],
      [
        "SELECT Region FROM country WHERE Region = value",
        -7.745766639709473
      ],
      [
        "SELECT Region FROM country",
        -10.739459037780762
      ]
    ],
    "predicted_parse_with_values": "SELECT LocalName FROM country WHERE Region = \"Kabul\"",
    "predicted_parse": "SELECT LocalName FROM country WHERE Region = value",
    "predicted_parse_explanation": [
      "find the local name in country table whose region equals Kabul"
    ],
    "template_feedback": "additionally use the information from the city table besides the country table . consider the city 's name equals Kabul conditions in place of the region equals Kabul conditions . find region in place of local name .",
    "primary_span": [
      [
        0,
        7
      ],
      [
        13,
        20
      ],
      [
        30,
        31
      ]
    ],
    "secondary_span": [
      [
        8,
        12
      ],
      [
        21,
        29
      ],
      [
        32,
        37
      ]
    ],
    "edits": [
      "region",
      "local name",
      "city",
      "name equals \"Kabul\"",
      "region equals \"Kabul\""
    ],
    "edits_original": "< select > add region </ select > < select > remove local name </ select > < from > add city </ from > < where > add name equals \" Kabul \" </ where > < where > remove region equals \" Kabul \" </ where >"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "feedback": "Need to use paragraphs table in place of documents table.",
    "question": "How many paragraphs for the document with name 'Summer Show'?",
    "gold_parse": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'",
    "beam": [
      [
        "SELECT Count ( * ) FROM Documents WHERE Document_Name = value",
        -0.4724102020263672
      ],
      [
        "SELECT Count ( * ) FROM Documents WHERE Document_Name LIKE value",
        -0.9769191741943359
      ],
      [
        "SELECT Count ( * ) FROM Documents WHERE Document_Name = value AND Document_Name = value",
        -13.168160915374756
      ],
      [
        "SELECT Count ( * ) FROM Documents WHERE Document_Name < value",
        -13.26834487915039
      ],
      [
        "SELECT Count ( * ) FROM Documents WHERE Document_Name ! = value",
        -13.287981033325195
      ],
      [
        "SELECT Count ( * ) FROM Documents WHERE Document_Name IN ( SELECT Document_Name FROM Documents WHERE Document_Name = value )",
        -14.232151508331299
      ],
      [
        "SELECT Count ( Count ( * ) ) FROM Documents WHERE Document_Name LIKE value",
        -14.554855346679688
      ],
      [
        "SELECT Count ( Count ( * ) ) FROM Documents WHERE Document_Name = value",
        -14.771459579467773
      ],
      [
        "SELECT Sum ( * ) FROM Documents WHERE Document_Name = value",
        -14.929077863693237
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM Documents WHERE Document_Name = value",
        -15.084239959716797
      ],
      [
        "SELECT Count ( * ) , Document_Name FROM Documents WHERE Document_Name = value",
        -15.36550498008728
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM Documents WHERE Document_Name LIKE value",
        -15.49660873413086
      ],
      [
        "SELECT Sum ( T2.Paragraph_Text ) FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Name = value",
        -15.727071046829224
      ],
      [
        "SELECT T2.Paragraph_Text FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Name = value",
        -15.969193935394287
      ],
      [
        "SELECT Count ( * ) FROM Documents WHERE Document_Name BETWEEN value AND value",
        -16.09142017364502
      ],
      [
        "SELECT Count ( DISTINCT T2.Paragraph_Text ) FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Name LIKE value",
        -16.80190086364746
      ],
      [
        "SELECT Count ( * ) FROM Documents WHERE DISTINCT Document_Name = value",
        -17.08749771118164
      ],
      [
        "SELECT Count ( * ) FROM Documents WHERE DISTINCT Document_Name LIKE value",
        -17.22351837158203
      ],
      [
        "SELECT Count ( DISTINCT * ) FROM Documents WHERE Document_Name LIKE value",
        -17.25859832763672
      ],
      [
        "SELECT Count ( * ) , T2.Paragraph_Text FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Name = value",
        -17.337001085281372
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM Documents WHERE Document_Name = \"Summer Show\"",
    "predicted_parse": "SELECT Count ( * ) FROM Documents WHERE Document_Name = value",
    "predicted_parse_explanation": [
      "find the number of rows in documents table whose document name equals Summer Show"
    ],
    "template_feedback": "additionally use the information from the paragraphs table besides the documents table .",
    "primary_span": [
      [
        0,
        7
      ]
    ],
    "secondary_span": [
      [
        8,
        12
      ]
    ],
    "edits": [
      "paragraphs"
    ],
    "edits_original": "< from > add paragraphs </ from >"
  },
  {
    "db_id": "dog_kennels",
    "feedback": "Find date of treatment and first name of professionals table for each treatment id .",
    "question": "What are the date and the operating professional's first name of each treatment?",
    "gold_parse": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id",
    "beam": [
      [
        "SELECT first_name , first_name FROM Professionals",
        -0.21554994583129883
      ],
      [
        "SELECT T1.name , T2.first_name FROM Dogs AS T1 JOIN Professionals AS T2 JOIN Treatments AS T3 ON T1.dog_id = T3.dog_id AND T3.professional_id = T2.professional_id",
        -2.452324867248535
      ],
      [
        "SELECT T1.first_name , T3.first_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id",
        -2.484868049621582
      ],
      [
        "SELECT T1.date_of_birth , T2.first_name FROM Dogs AS T1 JOIN Professionals AS T2 JOIN Treatments AS T3 ON T1.dog_id = T3.dog_id AND T3.professional_id = T2.professional_id",
        -4.336935997009277
      ],
      [
        "SELECT T2.date_of_treatment , T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id",
        -5.459754943847656
      ],
      [
        "SELECT T1.date_departed , T2.first_name FROM Dogs AS T1 JOIN Professionals AS T2 JOIN Treatments AS T3 ON T1.dog_id = T3.dog_id AND T3.professional_id = T2.professional_id",
        -5.727985382080078
      ],
      [
        "SELECT T1.date_adopted , T2.first_name FROM Dogs AS T1 JOIN Professionals AS T2 JOIN Treatments AS T3 ON T1.dog_id = T3.dog_id AND T3.professional_id = T2.professional_id",
        -6.3677287101745605
      ],
      [
        "SELECT T1.date_arrived , T2.first_name FROM Dogs AS T1 JOIN Professionals AS T2 JOIN Treatments AS T3 ON T1.dog_id = T3.dog_id AND T3.professional_id = T2.professional_id",
        -6.669551372528076
      ],
      [
        "SELECT T3.first_name , T1.first_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id",
        -8.297408103942871
      ],
      [
        "SELECT home_phone , first_name FROM Professionals",
        -9.422327041625977
      ],
      [
        "SELECT first_name , last_name FROM Professionals",
        -9.678742408752441
      ],
      [
        "SELECT email_address , first_name FROM Professionals",
        -9.853083610534668
      ],
      [
        "SELECT T1.age , T2.first_name FROM Dogs AS T1 JOIN Professionals AS T2 JOIN Treatments AS T3 ON T1.dog_id = T3.dog_id AND T3.professional_id = T2.professional_id",
        -9.994892120361328
      ],
      [
        "SELECT T1.home_phone , T3.first_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id",
        -10.073515892028809
      ],
      [
        "SELECT T1.email_address , T3.first_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id",
        -10.521995544433594
      ],
      [
        "SELECT * , first_name FROM Professionals",
        -10.530974388122559
      ],
      [
        "SELECT first_name , first_name FROM Owners",
        -10.593053817749023
      ],
      [
        "SELECT T1.breed_name , T3.first_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id",
        -10.92098331451416
      ],
      [
        "SELECT T2.first_name , T1.date_of_birth FROM Dogs AS T1 JOIN Professionals AS T2 JOIN Treatments AS T3 ON T1.dog_id = T3.dog_id AND T3.professional_id = T2.professional_id",
        -11.05585765838623
      ],
      [
        "SELECT cell_number , first_name FROM Professionals",
        -11.079633712768555
      ]
    ],
    "predicted_parse_with_values": "SELECT first_name , first_name FROM Professionals",
    "predicted_parse": "SELECT first_name , first_name FROM Professionals",
    "predicted_parse_explanation": [
      "find the first name and first name in professionals table"
    ],
    "template_feedback": "additionally use the information from the treatments table besides the professionals table . additionally find date of treatment .",
    "primary_span": [
      [
        0,
        7
      ],
      [
        13,
        18
      ]
    ],
    "secondary_span": [
      [
        8,
        12
      ]
    ],
    "edits": [
      "date of treatment",
      "first name",
      "treatments"
    ],
    "edits_original": "< select > add date of treatment </ select > < select > remove first name </ select > < from > add treatments </ from >"
  },
  {
    "db_id": "car_1",
    "feedback": "Remove \"is greater than fiat\" , Ensure maker equals fiat instep 2 , Show the result of step 2 and step 3.",
    "question": "What are the ids and names of all countries that either have more than 3 car makers or produce fiats?",
    "gold_parse": "SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat'",
    "beam": [
      [
        "SELECT CountryId , CountryName FROM countries GROUP BY CountryId HAVING Count ( * ) > value UNION SELECT CountryId , CountryName FROM countries GROUP BY CountryId HAVING Count ( * ) > value",
        -0.0019998550415039062
      ],
      [
        "SELECT T1.CountryId , T1.CountryName FROM countries AS T1 GROUP BY T1.CountryId HAVING Count ( * ) > value UNION SELECT T1.CountryId , T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country GROUP BY T2.Country HAVING Count ( * ) > value",
        -7.060476303100586
      ],
      [
        "SELECT T1.CountryId , T1.CountryName FROM countries AS T1 GROUP BY T1.CountryId HAVING Count ( * ) > value UNION SELECT T1.CountryId , T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country WHERE T2.Maker = value",
        -8.59201431274414
      ],
      [
        "SELECT T1.CountryId , T1.CountryName FROM countries AS T1 GROUP BY T1.CountryId HAVING Count ( * ) > value UNION SELECT T1.CountryId , T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country JOIN model_list AS T3 ON T2.Id = T3.Maker JOIN car_names AS T4 ON T3.Model = T4.Model JOIN cars_data AS T5 ON T4.MakeId = T5.Id WHERE T5.Horsepower > value",
        -8.903172016143799
      ],
      [
        "SELECT CountryId , CountryName FROM countries GROUP BY CountryId HAVING Count ( * ) > value",
        -9.311590194702148
      ],
      [
        "SELECT CountryId , CountryName FROM countries GROUP BY CountryId HAVING Count ( * ) > value EXCEPT SELECT CountryId , CountryName FROM countries GROUP BY CountryId HAVING Count ( * ) > value",
        -9.66196060180664
      ],
      [
        "SELECT CountryId , CountryName FROM countries GROUP BY CountryId HAVING Count ( * ) > value INTERSECT SELECT CountryId , CountryName FROM countries GROUP BY CountryId HAVING Count ( * ) > value",
        -9.88682746887207
      ],
      [
        "SELECT CountryId , CountryName FROM countries GROUP BY CountryId HAVING Count ( * ) > value UNION SELECT CountryName , CountryName FROM countries GROUP BY CountryId HAVING Count ( * ) > value",
        -9.942097663879395
      ],
      [
        "SELECT T1.CountryId , T1.CountryName FROM countries AS T1 GROUP BY T1.CountryId HAVING Count ( * ) > value UNION SELECT T2.Id , T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country GROUP BY T1.CountryId HAVING Count ( * ) > value",
        -10.011270523071289
      ],
      [
        "SELECT T1.CountryId , T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country JOIN model_list AS T3 ON T2.Id = T3.Maker JOIN car_names AS T4 ON T3.Model = T4.Model JOIN cars_data AS T5 ON T4.MakeId = T5.Id WHERE T5.Horsepower > value GROUP BY T1.CountryId HAVING Count ( * ) > = value",
        -10.025068759918213
      ],
      [
        "SELECT T1.CountryId , T1.CountryName FROM countries AS T1 GROUP BY T1.CountryId HAVING Count ( * ) > value UNION SELECT T1.CountryId , T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country WHERE T2.FullName = value",
        -10.067561626434326
      ],
      [
        "SELECT CountryId , CountryName FROM countries GROUP BY CountryId HAVING Count ( * ) > value UNION SELECT * , CountryName FROM countries GROUP BY CountryId HAVING Count ( * ) > value",
        -10.53750991821289
      ],
      [
        "SELECT CountryId , CountryName FROM countries GROUP BY CountryId HAVING Count ( * ) > value UNION SELECT CountryId , CountryName FROM countries GROUP BY CountryId HAVING Count ( * ) > = value",
        -10.696624755859375
      ],
      [
        "SELECT T1.CountryId , T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country GROUP BY T2.Country HAVING Count ( * ) > value UNION SELECT T1.CountryId , T1.CountryName FROM countries AS T1 GROUP BY T1.CountryId HAVING Count ( * ) > value",
        -10.831031799316406
      ],
      [
        "SELECT T1.CountryId , T1.CountryName FROM countries AS T1 GROUP BY T1.CountryId HAVING Count ( * ) > value UNION SELECT T2.Country , T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country GROUP BY T1.CountryId HAVING Count ( * ) > value",
        -10.875754356384277
      ],
      [
        "SELECT T1.CountryId , T1.CountryName FROM countries AS T1 GROUP BY T1.CountryId HAVING Count ( * ) > value UNION SELECT T1.CountryId , T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country JOIN model_list AS T3 ON T2.Id = T3.Maker JOIN car_names AS T4 ON T3.Model = T4.Model JOIN cars_data AS T5 ON T4.MakeId = T5.Id GROUP BY T1.CountryId HAVING Sum ( T5.Horsepower ) > value",
        -10.876514911651611
      ],
      [
        "SELECT CountryId , CountryName FROM countries GROUP BY CountryId HAVING Count ( * ) > value UNION SELECT CountryId , CountryName FROM countries GROUP BY CountryId HAVING Sum ( * ) > value",
        -10.976004600524902
      ],
      [
        "SELECT T1.CountryId , T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country WHERE T2.Maker = value UNION SELECT T1.CountryId , T1.CountryName FROM countries AS T1 GROUP BY T1.CountryId HAVING Count ( * ) > value",
        -11.007091999053955
      ],
      [
        "SELECT T1.CountryId , T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country JOIN model_list AS T3 ON T2.Id = T3.Maker JOIN car_names AS T4 ON T3.Model = T4.Model JOIN cars_data AS T5 ON T4.MakeId = T5.Id WHERE T5.Horsepower > value GROUP BY T1.CountryId HAVING Count ( * ) > value",
        -11.866102695465088
      ],
      [
        "SELECT T1.CountryId , T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country WHERE T2.Maker > value GROUP BY T1.CountryId HAVING Count ( * ) > = value",
        -13.085112571716309
      ]
    ],
    "predicted_parse_with_values": "SELECT CountryId , CountryName FROM countries GROUP BY CountryId HAVING Count ( * ) > \"fiat\" UNION SELECT CountryId , CountryName FROM countries GROUP BY CountryId HAVING Count ( * ) > 3",
    "predicted_parse": "SELECT CountryId , CountryName FROM countries GROUP BY CountryId HAVING Count ( * ) > value UNION SELECT CountryId , CountryName FROM countries GROUP BY CountryId HAVING Count ( * ) > value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of country id in countries table",
      "Step 2: find the country id and country name in countries table whose corresponding value in step 1 is greater than fiat",
      "Step 3: find the number of rows of each value of country id in countries table",
      "Step 4: find the country id and country name in countries table whose corresponding value in step 3 is greater than 3",
      "Step 5: show the rows that are in any of the results of step 2 and step 4"
    ],
    "template_feedback": "in step 1 , additionally use the information from the car makers table besides the countries table . in step 2 , make sure that the corresponding value in step 1 greater than 3 . in step 3 , additionally use the information from the car makers table and model list table besides the countries table . do not find for each value of country id . in step 4 , additionally make sure that model equals fiat .",
    "primary_span": [
      [
        4,
        12
      ],
      [
        22,
        34
      ],
      [
        39,
        51
      ],
      [
        57,
        66
      ],
      [
        71,
        78
      ]
    ],
    "secondary_span": [
      [
        13,
        17
      ],
      [
        52,
        56
      ]
    ],
    "edits": [
      "car makers",
      "number of rows greater than 3",
      "number of rows greater than \"fiat\"",
      "car makers",
      "model list",
      "model equals \"fiat\"",
      "country id",
      "number of rows greater than 3"
    ],
    "edits_original": "< from > add car makers </ from > < having > add number of rows greater than 3 </ having > < having > remove number of rows greater than \" fiat \" </ having > < from > add car makers </ from > < from > add model list </ from > < where > add model equals \" fiat \" </ where > < groupBy > remove country id </ groupBy > < having > remove number of rows greater than 3 </ having >"
  },
  {
    "db_id": "flight_2",
    "feedback": "in step 2, use destination airport instead of abbreviation.",
    "question": "Give the flight numbers of flights landing at APG.",
    "gold_parse": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"",
    "beam": [
      [
        "SELECT T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Abbreviation = value",
        -0.6208958625793457
      ],
      [
        "SELECT FlightNo FROM flights WHERE Airline = value",
        -1.2337911128997803
      ],
      [
        "SELECT FlightNo FROM flights WHERE FlightNo = value",
        -2.6366710662841797
      ],
      [
        "SELECT T2.FlightNo FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.City = value",
        -3.6672520637512207
      ],
      [
        "SELECT FlightNo FROM flights",
        -3.9587106704711914
      ],
      [
        "SELECT T2.FlightNo FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.CountryAbbrev = value",
        -4.1464715003967285
      ],
      [
        "SELECT T2.FlightNo FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.Country = value",
        -4.213430881500244
      ],
      [
        "SELECT T2.FlightNo FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.AirportName = value",
        -4.893803596496582
      ],
      [
        "SELECT T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Country = value",
        -5.1560959815979
      ],
      [
        "SELECT FlightNo FROM flights WHERE DestAirport = value",
        -5.381800174713135
      ],
      [
        "SELECT FlightNo FROM flights WHERE SourceAirport = value",
        -5.733468532562256
      ],
      [
        "SELECT T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Airline = value",
        -6.0677103996276855
      ],
      [
        "SELECT T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 WHERE T1.uid = value",
        -6.923469543457031
      ],
      [
        "SELECT T2.FlightNo FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.AirportCode = value",
        -9.588700294494629
      ],
      [
        "SELECT FlightNo FROM flights WHERE Airline = FlightNo",
        -10.884543180465698
      ],
      [
        "SELECT FlightNo FROM flights ORDER BY FlightNo Asc",
        -12.658767700195312
      ],
      [
        "SELECT FlightNo FROM flights WHERE * = value",
        -13.263555526733398
      ],
      [
        "SELECT T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Abbreviation = T2.FlightNo",
        -13.318076610565186
      ],
      [
        "SELECT T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 GROUP BY T2.FlightNo HAVING T1.Abbreviation = value",
        -13.794910430908203
      ],
      [
        "SELECT Min ( FlightNo ) FROM flights",
        -15.83971118927002
      ]
    ],
    "predicted_parse_with_values": "SELECT T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Abbreviation = \"APG\"",
    "predicted_parse": "SELECT T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Abbreviation = value",
    "predicted_parse_explanation": [
      "Step 1: for each row in airlines table , find the corresponding rows in flights table",
      "Step 2: find the flight number of the results of step 1 whose abbreviation equals APG"
    ],
    "template_feedback": "in step 1 , do not use the airlines table . in step 2 , consider the destination airport equals APG conditions in place of the abbreviation equals APG conditions .",
    "primary_span": [
      [
        4,
        10
      ],
      [
        15,
        21
      ]
    ],
    "secondary_span": [
      [
        4,
        10
      ],
      [
        22,
        30
      ]
    ],
    "edits": [
      "airlines",
      "destination airport equals \"APG\"",
      "abbreviation equals \"APG\""
    ],
    "edits_original": "< from > remove airlines </ from > < where > add destination airport equals \" APG \" </ where > < where > remove abbreviation equals \" APG \" </ where >"
  },
  {
    "db_id": "flight_2",
    "feedback": "abbreviation is wrong . Take source airport in place of it .",
    "question": "Give the flight numbers of flights leaving from APG.",
    "gold_parse": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
    "beam": [
      [
        "SELECT T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Abbreviation = value",
        -0.01365804672241211
      ],
      [
        "SELECT T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Airline = value",
        -4.730280876159668
      ],
      [
        "SELECT T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Country = value",
        -6.5813117027282715
      ],
      [
        "SELECT FlightNo FROM flights WHERE FlightNo = value",
        -6.7937822341918945
      ],
      [
        "SELECT FlightNo FROM flights WHERE Airline = value",
        -7.336343765258789
      ],
      [
        "SELECT FlightNo FROM flights",
        -7.489853858947754
      ],
      [
        "SELECT T2.FlightNo FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.City = value",
        -8.244098663330078
      ],
      [
        "SELECT T2.FlightNo FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.CountryAbbrev = value",
        -8.431317329406738
      ],
      [
        "SELECT T2.FlightNo FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.Country = value",
        -8.4384126663208
      ],
      [
        "SELECT T2.FlightNo FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.AirportName = value",
        -8.962991714477539
      ],
      [
        "SELECT FlightNo FROM flights WHERE SourceAirport = value",
        -9.250748634338379
      ],
      [
        "SELECT T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 WHERE T1.uid = value",
        -9.59292221069336
      ],
      [
        "SELECT FlightNo FROM flights WHERE DestAirport = value",
        -10.387005805969238
      ],
      [
        "SELECT FlightNo FROM flights ORDER BY FlightNo Asc",
        -13.327434062957764
      ],
      [
        "SELECT DISTINCT T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Abbreviation = value",
        -13.864677429199219
      ],
      [
        "SELECT T2.FlightNo , T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Abbreviation = value",
        -14.003230661153793
      ],
      [
        "SELECT FlightNo FROM flights WHERE FlightNo LIKE value",
        -14.367602825164795
      ],
      [
        "SELECT T2.FlightNo FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.AirportCode = value",
        -14.460195541381836
      ],
      [
        "SELECT FlightNo FROM flights WHERE Airline = FlightNo",
        -14.763171672821045
      ],
      [
        "SELECT Min ( FlightNo ) FROM flights",
        -18.31155776977539
      ]
    ],
    "predicted_parse_with_values": "SELECT T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Abbreviation = \"APG\"",
    "predicted_parse": "SELECT T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Abbreviation = value",
    "predicted_parse_explanation": [
      "Step 1: for each row in airlines table , find the corresponding rows in flights table",
      "Step 2: find the flight number of the results of step 1 whose abbreviation equals APG"
    ],
    "template_feedback": "in step 1 , do not use the airlines table . in step 2 , consider the source airport equals APG conditions in place of the abbreviation equals APG conditions .",
    "primary_span": [
      [
        4,
        10
      ],
      [
        15,
        21
      ]
    ],
    "secondary_span": [
      [
        4,
        10
      ],
      [
        22,
        30
      ]
    ],
    "edits": [
      "airlines",
      "source airport equals \"APG\"",
      "abbreviation equals \"APG\""
    ],
    "edits_original": "< from > remove airlines </ from > < where > add source airport equals \" APG \" </ where > < where > remove abbreviation equals \" APG \" </ where >"
  },
  {
    "db_id": "dog_kennels",
    "feedback": "You need to use the breed code whose count is highest.",
    "question": "What is the name of the breed with the most dogs?",
    "gold_parse": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1",
    "beam": [
      [
        "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code ORDER BY T2.weight Desc LIMIT value",
        -0.1811685562133789
      ],
      [
        "SELECT breed_name FROM Breeds GROUP BY breed_name ORDER BY Count ( * ) Desc LIMIT value",
        -1.8450393676757812
      ],
      [
        "SELECT name FROM Dogs ORDER BY weight Desc LIMIT value",
        -5.625391960144043
      ],
      [
        "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code ORDER BY T2.age Desc LIMIT value",
        -5.930473327636719
      ],
      [
        "SELECT T2.name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code GROUP BY T1.breed_name ORDER BY Count ( * ) Desc LIMIT value",
        -7.361899375915527
      ],
      [
        "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code ORDER BY T2.date_of_birth Desc LIMIT value",
        -7.904549598693848
      ],
      [
        "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code WHERE T2.weight = ( SELECT Max ( T2.weight ) FROM Dogs AS T2 )",
        -8.568073272705078
      ],
      [
        "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code GROUP BY T2.breed_code ORDER BY Count ( * ) Desc LIMIT value",
        -9.538783550262451
      ],
      [
        "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code GROUP BY T2.weight ORDER BY Count ( * ) Desc LIMIT value",
        -10.364325523376465
      ],
      [
        "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code GROUP BY T2.name ORDER BY Count ( * ) Desc LIMIT value",
        -10.510350227355957
      ],
      [
        "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code WHERE T2.weight = ( SELECT Max ( T2.weight ) FROM Dogs AS T2 ) ORDER BY T2.weight Desc LIMIT value",
        -10.94377326965332
      ],
      [
        "SELECT name FROM Dogs ORDER BY age Desc LIMIT value",
        -11.31450366973877
      ],
      [
        "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code GROUP BY T1.breed_name ORDER BY Sum ( T2.weight ) Desc LIMIT value",
        -11.810062408447266
      ],
      [
        "SELECT breed_name FROM Breeds GROUP BY breed_name",
        -12.070440292358398
      ],
      [
        "SELECT T1.breed_name FROM Breeds AS T1 UNION SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code WHERE T2.weight = ( SELECT Max ( T2.weight ) FROM Dogs AS T2 )",
        -12.509563446044922
      ],
      [
        "SELECT Max ( name ) FROM Dogs",
        -12.715639114379883
      ],
      [
        "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code GROUP BY T1.breed_name HAVING T2.weight < value ORDER BY Count ( * ) Desc LIMIT value",
        -13.033599853515625
      ],
      [
        "SELECT Max ( breed_name ) FROM Breeds",
        -13.070857048034668
      ],
      [
        "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code ORDER BY T2.weight Desc",
        -13.071601867675781
      ],
      [
        "SELECT breed_name FROM Breeds",
        -14.652945518493652
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code ORDER BY T2.weight Desc LIMIT 1",
    "predicted_parse": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code ORDER BY T2.weight Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: for each row in breeds table , find the corresponding rows in dogs table",
      "Step 2: find the breed name of the results of step 1 with largest value of weight"
    ],
    "template_feedback": "in step 2 , find for each value of breed name . order the results by number of rows in place of weight .",
    "primary_span": [
      [
        4,
        11
      ],
      [
        12,
        18
      ]
    ],
    "secondary_span": [
      [
        19,
        23
      ]
    ],
    "edits": [
      "breed name",
      "number of rows",
      "weight"
    ],
    "edits_original": "< groupBy > add breed name </ groupBy > < orderBy > add number of rows </ orderBy > < orderBy > remove weight </ orderBy >"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "feedback": "order by document id",
    "question": "Show all document ids and the number of paragraphs in each document. Order by document id.",
    "gold_parse": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id",
    "beam": [
      [
        "SELECT Document_ID , Count ( * ) FROM Paragraphs GROUP BY Document_ID ORDER BY Count ( * ) Asc",
        -0.00350189208984375
      ],
      [
        "SELECT Document_ID , Count ( * ) FROM Paragraphs GROUP BY Document_ID",
        -5.745479583740234
      ],
      [
        "SELECT Document_ID , Count ( DISTINCT Paragraph_ID ) FROM Paragraphs GROUP BY Document_ID ORDER BY Count ( * ) Asc",
        -8.817754745483398
      ],
      [
        "SELECT Document_ID , Sum ( Paragraph_ID ) FROM Paragraphs GROUP BY Document_ID ORDER BY Count ( * ) Asc",
        -9.934069633483887
      ],
      [
        "SELECT Document_ID , Count ( * ) FROM Paragraphs GROUP BY Document_ID ORDER BY Count ( * ) Desc",
        -10.459850311279297
      ],
      [
        "SELECT Document_ID , Count ( * ) FROM Paragraphs ORDER BY Paragraph_ID Asc",
        -12.345690250396729
      ],
      [
        "SELECT T2.Document_ID , Count ( * ) FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID ORDER BY T1.Template_ID Asc",
        -12.378083229064941
      ],
      [
        "SELECT Document_ID FROM Paragraphs GROUP BY Document_ID ORDER BY Count ( * ) Asc",
        -12.788971900939941
      ],
      [
        "SELECT T2.Document_ID , Count ( * ) FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T2.Document_ID ORDER BY T1.Template_ID Asc",
        -12.831031322479248
      ],
      [
        "SELECT Document_ID , Count ( * ) FROM Paragraphs GROUP BY Document_ID ORDER BY Count ( * ) Asc LIMIT value",
        -12.908905982971191
      ],
      [
        "SELECT Document_ID , Count ( Paragraph_ID ) FROM Paragraphs GROUP BY Document_ID ORDER BY Count ( * ) Asc",
        -13.045195579528809
      ],
      [
        "SELECT Document_ID , Count ( * ) FROM Paragraphs GROUP BY Document_ID HAVING Count ( * ) > = value ORDER BY Count ( * ) Asc",
        -13.117050170898438
      ],
      [
        "SELECT T2.Document_ID , Count ( * ) , T1.Template_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T2.Document_ID ORDER BY Count ( * ) Asc",
        -13.178593158721924
      ],
      [
        "SELECT T2.Document_ID , Count ( * ) FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T1.Template_ID ORDER BY Count ( * ) Asc",
        -13.28305721282959
      ],
      [
        "SELECT Document_ID , Sum ( Paragraph_Text ) FROM Paragraphs GROUP BY Document_ID ORDER BY Count ( * ) Asc",
        -13.355037450790405
      ],
      [
        "SELECT Document_ID , Count ( * ) FROM Paragraphs GROUP BY Document_ID ORDER BY Sum ( Paragraph_ID ) Asc",
        -13.365321636199951
      ],
      [
        "SELECT T1.Document_ID , Count ( * ) FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T2.Document_ID ORDER BY Count ( * ) Asc",
        -13.494121551513672
      ],
      [
        "SELECT Document_ID , Count ( * ) , Document_ID FROM Paragraphs GROUP BY Document_ID ORDER BY Count ( * ) Asc",
        -13.576909065246582
      ],
      [
        "SELECT T2.Document_ID , Count ( * ) FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T2.Document_ID HAVING T1.Template_ID = value ORDER BY Count ( * ) Asc",
        -13.58466100692749
      ],
      [
        "SELECT Document_ID , Count ( * ) FROM Paragraphs",
        -14.847434997558594
      ]
    ],
    "predicted_parse_with_values": "SELECT Document_ID , Count ( * ) FROM Paragraphs GROUP BY Document_ID ORDER BY Count ( * ) Asc",
    "predicted_parse": "SELECT Document_ID , Count ( * ) FROM Paragraphs GROUP BY Document_ID ORDER BY Count ( * ) Asc",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of document id in paragraphs table",
      "Step 2: find the document id and number of rows in paragraphs table ordered ascending by the results of step 1"
    ],
    "template_feedback": "in step 2 , order the results by document id in place of number of rows .",
    "primary_span": [
      [
        4,
        9
      ]
    ],
    "secondary_span": [
      [
        10,
        16
      ]
    ],
    "edits": [
      "document id",
      "number of rows"
    ],
    "edits_original": "< orderBy > add document id </ orderBy > < orderBy > remove number of rows </ orderBy >"
  },
  {
    "db_id": "employee_hire_evaluation",
    "feedback": "You should use name of manager and products number.",
    "question": "Find the manager name and district of the shop whose number of products is the largest.",
    "gold_parse": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1",
    "beam": [
      [
        "SELECT T1.Name , T1.District FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T2.Shop_ID ORDER BY Count ( * ) Desc LIMIT value",
        -0.1085052490234375
      ],
      [
        "SELECT T1.Manager_name , T1.District FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T2.Shop_ID ORDER BY Count ( * ) Desc LIMIT value",
        -2.7725210189819336
      ],
      [
        "SELECT Name , District FROM shop GROUP BY Shop_ID ORDER BY Count ( * ) Desc LIMIT value",
        -3.281052589416504
      ],
      [
        "SELECT Manager_name , District FROM shop GROUP BY Shop_ID ORDER BY Count ( * ) Desc LIMIT value",
        -5.928241729736328
      ],
      [
        "SELECT T1.Name , T1.Manager_name FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T2.Shop_ID ORDER BY Count ( * ) Desc LIMIT value",
        -10.566709518432617
      ],
      [
        "SELECT T1.Name , T1.District , T1.Shop_ID FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T2.Shop_ID ORDER BY Count ( * ) Desc LIMIT value",
        -11.299549102783203
      ],
      [
        "SELECT T1.Name , T1.District FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T2.Shop_ID",
        -12.078213691711426
      ],
      [
        "SELECT Name , District FROM shop ORDER BY Number_products Desc LIMIT value",
        -12.35129165649414
      ],
      [
        "SELECT T1.Name , T1.District FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T2.Shop_ID ORDER BY Count ( * ) Desc",
        -12.396798133850098
      ],
      [
        "SELECT Name , Manager_name FROM shop GROUP BY Shop_ID ORDER BY Count ( * ) Desc LIMIT value",
        -12.482348442077637
      ],
      [
        "SELECT Name , District FROM shop GROUP BY Manager_name ORDER BY Count ( * ) Desc LIMIT value",
        -13.082366943359375
      ],
      [
        "SELECT T1.Manager_name , T1.Manager_name FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T2.Shop_ID ORDER BY Count ( * ) Desc LIMIT value",
        -13.958876609802246
      ],
      [
        "SELECT Name , District FROM shop GROUP BY Name ORDER BY Count ( * ) Desc LIMIT value",
        -14.247453689575195
      ],
      [
        "SELECT T1.Name FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T2.Shop_ID ORDER BY Count ( * ) Desc LIMIT value",
        -14.341680526733398
      ],
      [
        "SELECT Name , District FROM shop GROUP BY District ORDER BY Count ( * ) Desc LIMIT value",
        -14.568009376525879
      ],
      [
        "SELECT Name , District , Shop_ID FROM shop GROUP BY Shop_ID ORDER BY Count ( * ) Desc LIMIT value",
        -14.586088180541992
      ],
      [
        "SELECT T1.Manager_name , T1.District FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T2.Shop_ID",
        -14.62482738494873
      ],
      [
        "SELECT Name , District FROM shop WHERE Number_products = ( SELECT Max ( Number_products ) FROM shop )",
        -14.696989059448242
      ],
      [
        "SELECT Name , District FROM shop GROUP BY Location ORDER BY Count ( * ) Desc LIMIT value",
        -14.781065940856934
      ],
      [
        "SELECT Name , District FROM shop",
        -15.958492279052734
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.Name , T1.District FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T2.Shop_ID ORDER BY Count ( * ) Desc LIMIT 1",
    "predicted_parse": "SELECT T1.Name , T1.District FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T2.Shop_ID ORDER BY Count ( * ) Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: for each row in shop table , find the corresponding rows in hiring table",
      "Step 2: find the number of rows of each value of hiring 's shop id of the results of step 1",
      "Step 3: find the name and district of the results of step 1 with largest value in the results of step 2"
    ],
    "template_feedback": "in step 1 , do not use the hiring table . in step 2 , do not find for each value of hiring 's shop id . in step 3 , find manager name in place of name . order the results by number products in place of number of rows .",
    "primary_span": [
      [
        4,
        10
      ],
      [
        15,
        26
      ],
      [
        31,
        33
      ],
      [
        39,
        44
      ]
    ],
    "secondary_span": [
      [
        4,
        10
      ],
      [
        34,
        38
      ],
      [
        45,
        51
      ]
    ],
    "edits": [
      "manager name",
      "name",
      "hiring",
      "shop id",
      "number products",
      "number of rows"
    ],
    "edits_original": "< select > add manager name </ select > < select > remove name </ select > < from > remove hiring </ from > < groupBy > remove shop id </ groupBy > < orderBy > add number products </ orderBy > < orderBy > remove number of rows </ orderBy >"
  },
  {
    "db_id": "wta_1",
    "feedback": "Put matches table in place of players table .",
    "question": "Count the number of matches.",
    "gold_parse": "SELECT count(*) FROM matches",
    "beam": [
      [
        "SELECT Count ( * ) FROM players",
        -1.430511474609375e-05
      ],
      [
        "SELECT Sum ( * ) FROM players",
        -12.750096917152405
      ],
      [
        "SELECT Sum ( tourney_id ) FROM matches",
        -13.696229696273804
      ],
      [
        "SELECT Count ( * ) FROM matches WHERE tourney_name = value",
        -13.87127161026001
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM players",
        -14.241270065307617
      ],
      [
        "SELECT Count ( Count ( * ) ) FROM players",
        -14.434544563293457
      ],
      [
        "SELECT Sum ( tourney_name ) FROM matches",
        -14.514157056808472
      ],
      [
        "SELECT Count ( * ) FROM matches WHERE tourney_id = value",
        -14.590603113174438
      ],
      [
        "SELECT Count ( * ) , tourney_name FROM matches",
        -14.862401723861694
      ],
      [
        "SELECT Count ( * ) FROM matches ORDER BY tourney_id Asc",
        -14.955021858215332
      ],
      [
        "SELECT Avg ( * ) FROM players",
        -15.07319450378418
      ],
      [
        "SELECT Count ( * ) , tourney_id FROM matches",
        -15.326892018318176
      ],
      [
        "SELECT Count ( * ) FROM matches ORDER BY tourney_id Desc",
        -15.418828964233398
      ],
      [
        "SELECT Sum ( winner_seed ) FROM matches",
        -16.479793548583984
      ],
      [
        "SELECT Sum ( loser_rank_points ) FROM matches",
        -16.67654037475586
      ],
      [
        "SELECT Avg ( tourney_id ) FROM matches",
        -16.741807222366333
      ],
      [
        "SELECT Count ( * ) FROM players AS T1 UNION SELECT T2.tourney_name FROM matches AS T2",
        -16.783362865447998
      ],
      [
        "SELECT Sum ( winner_rank_points ) FROM matches",
        -16.963438034057617
      ],
      [
        "SELECT Count ( DISTINCT * ) FROM players",
        -17.10496234893799
      ],
      [
        "SELECT Sum ( loser_seed ) FROM matches",
        -17.143146514892578
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM players",
    "predicted_parse": "SELECT Count ( * ) FROM players",
    "predicted_parse_explanation": [
      "find the number of rows in players table"
    ],
    "template_feedback": "use matches table in place of players table .",
    "primary_span": [
      [
        0,
        2
      ]
    ],
    "secondary_span": [
      [
        3,
        8
      ]
    ],
    "edits": [
      "matches",
      "players"
    ],
    "edits_original": "< from > add matches </ from > < from > remove players </ from >"
  },
  {
    "db_id": "dog_kennels",
    "feedback": "The average charge amount should be replaced by total cost of treatment .",
    "question": "Give me the description of the treatment type whose total cost is the lowest.",
    "gold_parse": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1",
    "beam": [
      [
        "SELECT T2.treatment_type_description FROM Charges AS T1 JOIN Treatment_Types AS T2 JOIN Treatments AS T3 GROUP BY T3.treatment_type_code ORDER BY Avg ( T1.charge_amount ) Asc LIMIT value",
        -1.3917851448059082
      ],
      [
        "SELECT T2.treatment_type_description FROM Charges AS T1 JOIN Treatment_Types AS T2 GROUP BY T2.treatment_type_code ORDER BY Avg ( T1.charge_amount ) Asc LIMIT value",
        -1.5144662857055664
      ],
      [
        "SELECT T1.treatment_type_description FROM Treatment_Types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T2.treatment_type_code ORDER BY Avg ( T1.treatment_type_code ) Asc LIMIT value",
        -1.9079928398132324
      ],
      [
        "SELECT treatment_type_description FROM Treatment_Types GROUP BY treatment_type_code ORDER BY Avg ( treatment_type_code ) Asc LIMIT value",
        -2.173159599304199
      ],
      [
        "SELECT T2.treatment_type_description FROM Charges AS T1 JOIN Treatment_Types AS T2 JOIN Treatments AS T3 GROUP BY T3.treatment_type_code ORDER BY Count ( T1.charge_amount ) Asc LIMIT value",
        -2.8526034355163574
      ],
      [
        "SELECT T2.treatment_type_description FROM Charges AS T1 JOIN Treatment_Types AS T2 GROUP BY T2.treatment_type_code ORDER BY Count ( T1.charge_amount ) Asc LIMIT value",
        -3.0937676429748535
      ],
      [
        "SELECT treatment_type_description FROM Treatment_Types ORDER BY treatment_type_code Asc LIMIT value",
        -3.212919235229492
      ],
      [
        "SELECT T1.treatment_type_description FROM Treatment_Types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T2.treatment_type_code ORDER BY Count ( * ) Asc LIMIT value",
        -3.4594430923461914
      ],
      [
        "SELECT treatment_type_description FROM Treatment_Types GROUP BY treatment_type_code ORDER BY Count ( * ) Asc LIMIT value",
        -3.6008219718933105
      ],
      [
        "SELECT T1.treatment_type_description FROM Treatment_Types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T2.treatment_type_code ORDER BY Avg ( T2.cost_of_treatment ) Asc LIMIT value",
        -4.066135406494141
      ],
      [
        "SELECT T1.treatment_type_description FROM Treatment_Types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY Avg ( T2.cost_of_treatment ) Asc LIMIT value",
        -4.226848125457764
      ],
      [
        "SELECT T1.treatment_type_description FROM Treatment_Types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T2.treatment_type_code ORDER BY Count ( T1.treatment_type_code ) Asc LIMIT value",
        -5.250183820724487
      ],
      [
        "SELECT treatment_type_description FROM Treatment_Types ORDER BY treatment_type_description Asc LIMIT value",
        -9.497535228729248
      ],
      [
        "SELECT T2.treatment_type_description FROM Charges AS T1 JOIN Treatment_Types AS T2 ORDER BY T1.charge_amount Asc LIMIT value",
        -11.315485954284668
      ],
      [
        "SELECT treatment_type_description FROM Treatment_Types",
        -11.364611625671387
      ],
      [
        "SELECT T1.treatment_type_description FROM Treatment_Types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code ORDER BY T2.cost_of_treatment Asc LIMIT value",
        -11.841073036193848
      ],
      [
        "SELECT T1.treatment_type_description FROM Treatment_Types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T2.treatment_type_code",
        -12.065103530883789
      ],
      [
        "SELECT treatment_type_description FROM Treatment_Types GROUP BY treatment_type_code",
        -12.181760787963867
      ],
      [
        "SELECT T1.treatment_type_description FROM Treatment_Types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code ORDER BY T2.treatment_type_code Asc LIMIT value",
        -12.321916580200195
      ],
      [
        "SELECT treatment_type_description FROM Treatment_Types ORDER BY treatment_type_code Asc",
        -14.81367015838623
      ]
    ],
    "predicted_parse_with_values": "SELECT T2.treatment_type_description FROM Charges AS T1 JOIN Treatment_Types AS T2 JOIN Treatments AS T3 GROUP BY T3.treatment_type_code ORDER BY Avg ( T1.charge_amount ) Asc LIMIT 1",
    "predicted_parse": "SELECT T2.treatment_type_description FROM Charges AS T1 JOIN Treatment_Types AS T2 JOIN Treatments AS T3 GROUP BY T3.treatment_type_code ORDER BY Avg ( T1.charge_amount ) Asc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: for each row in charges table , find the corresponding rows in treatment types table and in treatments table",
      "Step 2: find the average charge amount of each value of treatments 's treatment type code of the results of step 1",
      "Step 3: find the treatment type description of the results of step 1 with smallest value in the results of step 2"
    ],
    "template_feedback": "in step 1 , do not use the charges table . in step 3 , order the results by summation of cost of treatment in place of average charge amount .",
    "primary_span": [
      [
        4,
        10
      ],
      [
        15,
        23
      ]
    ],
    "secondary_span": [
      [
        4,
        10
      ],
      [
        24,
        30
      ]
    ],
    "edits": [
      "charges",
      "summation of cost of treatment",
      "average charge amount"
    ],
    "edits_original": "< from > remove charges </ from > < orderBy > add summation of cost of treatment </ orderBy > < orderBy > remove average charge amount </ orderBy >"
  },
  {
    "db_id": "wta_1",
    "feedback": "You should use name of winner and loser.",
    "question": "find the names of loser and winner who played in the match with greatest number of minutes.",
    "gold_parse": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
    "beam": [
      [
        "SELECT tourney_name , loser_entry FROM matches ORDER BY minutes Desc LIMIT value",
        -0.7228031158447266
      ],
      [
        "SELECT loser_name , loser_entry FROM matches ORDER BY minutes Desc LIMIT value",
        -1.4598064422607422
      ],
      [
        "SELECT winner_name , loser_entry FROM matches ORDER BY minutes Desc LIMIT value",
        -1.5912971496582031
      ],
      [
        "SELECT T1.first_name , T2.loser_entry FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.minutes Desc LIMIT value",
        -3.092061996459961
      ],
      [
        "SELECT tourney_name , winner_entry FROM matches ORDER BY minutes Desc LIMIT value",
        -4.797789573669434
      ],
      [
        "SELECT loser_name , winner_entry FROM matches ORDER BY minutes Desc LIMIT value",
        -5.277779579162598
      ],
      [
        "SELECT tourney_name , loser_name FROM matches ORDER BY minutes Desc LIMIT value",
        -5.293931007385254
      ],
      [
        "SELECT winner_name , winner_entry FROM matches ORDER BY minutes Desc LIMIT value",
        -5.4110107421875
      ],
      [
        "SELECT tourney_name , winner_name FROM matches ORDER BY minutes Desc LIMIT value",
        -6.048591613769531
      ],
      [
        "SELECT loser_name , loser_name FROM matches ORDER BY minutes Desc LIMIT value",
        -6.41358757019043
      ],
      [
        "SELECT winner_name , loser_name FROM matches ORDER BY minutes Desc LIMIT value",
        -6.513457298278809
      ],
      [
        "SELECT T1.first_name , T2.winner_entry FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.minutes Desc LIMIT value",
        -7.147428512573242
      ],
      [
        "SELECT loser_name , winner_name FROM matches ORDER BY minutes Desc LIMIT value",
        -7.291906356811523
      ],
      [
        "SELECT winner_name , winner_name FROM matches ORDER BY minutes Desc LIMIT value",
        -7.386592864990234
      ],
      [
        "SELECT T1.first_name , T2.loser_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.minutes Desc LIMIT value",
        -7.60899543762207
      ],
      [
        "SELECT tourney_name , winner_hand FROM matches ORDER BY minutes Desc LIMIT value",
        -7.851889610290527
      ],
      [
        "SELECT tourney_name , loser_hand FROM matches ORDER BY minutes Desc LIMIT value",
        -7.995639801025391
      ],
      [
        "SELECT T1.first_name , T2.winner_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.minutes Desc LIMIT value",
        -8.33322811126709
      ],
      [
        "SELECT loser_name , winner_hand FROM matches ORDER BY minutes Desc LIMIT value",
        -8.638617515563965
      ],
      [
        "SELECT winner_name , winner_hand FROM matches ORDER BY minutes Desc LIMIT value",
        -8.756148338317871
      ]
    ],
    "predicted_parse_with_values": "SELECT tourney_name , loser_entry FROM matches ORDER BY minutes Desc LIMIT 1",
    "predicted_parse": "SELECT tourney_name , loser_entry FROM matches ORDER BY minutes Desc LIMIT value",
    "predicted_parse_explanation": [
      "find the tourney name and loser entry in matches table with largest value of minutes"
    ],
    "template_feedback": "find winner name and loser name in place of loser entry and tourney name .",
    "primary_span": [
      [
        0,
        5
      ]
    ],
    "secondary_span": [
      [
        6,
        14
      ]
    ],
    "edits": [
      "winner name",
      "loser name",
      "tourney name",
      "loser entry"
    ],
    "edits_original": "< select > add winner name </ select > < select > add loser name </ select > < select > remove tourney name </ select > < select > remove loser entry </ select >"
  },
  {
    "db_id": "network_1",
    "feedback": "Remove \"for which grade equals 9\" phrase .",
    "question": "Show all the grades of the high schoolers.",
    "gold_parse": "SELECT grade FROM Highschooler",
    "beam": [
      [
        "SELECT DISTINCT grade FROM Highschooler WHERE grade = value",
        -0.062430381774902344
      ],
      [
        "SELECT grade FROM Highschooler WHERE grade = value",
        -2.972323417663574
      ],
      [
        "SELECT DISTINCT grade FROM Highschooler",
        -4.691134452819824
      ],
      [
        "SELECT DISTINCT grade FROM Highschooler WHERE name = value",
        -9.850924491882324
      ],
      [
        "SELECT DISTINCT grade FROM Highschooler WHERE name = grade",
        -10.000656127929688
      ],
      [
        "SELECT DISTINCT grade FROM Highschooler WHERE grade ! = value",
        -11.244850158691406
      ],
      [
        "SELECT grade FROM Highschooler",
        -11.291451930999756
      ],
      [
        "SELECT DISTINCT grade FROM Highschooler ORDER BY grade Asc LIMIT value",
        -12.049426078796387
      ],
      [
        "SELECT DISTINCT grade FROM Highschooler EXCEPT SELECT grade FROM Highschooler",
        -12.357239246368408
      ],
      [
        "SELECT DISTINCT grade FROM Highschooler WHERE grade > value",
        -12.511823654174805
      ],
      [
        "SELECT grade FROM Highschooler WHERE name = value",
        -12.766712188720703
      ],
      [
        "SELECT DISTINCT grade FROM Highschooler WHERE grade = grade",
        -12.807024955749512
      ],
      [
        "SELECT grade FROM Highschooler ORDER BY grade Asc LIMIT value",
        -12.840042114257812
      ],
      [
        "SELECT grade FROM Highschooler WHERE name = grade",
        -12.93506145477295
      ],
      [
        "SELECT DISTINCT grade FROM Highschooler WHERE grade < value",
        -13.394548416137695
      ],
      [
        "SELECT DISTINCT grade FROM Highschooler ORDER BY grade Asc",
        -13.641380310058594
      ],
      [
        "SELECT DISTINCT grade FROM Highschooler ORDER BY grade Desc LIMIT value",
        -13.771417617797852
      ],
      [
        "SELECT grade FROM Highschooler WHERE grade ! = value",
        -14.262632369995117
      ],
      [
        "SELECT grade FROM Highschooler ORDER BY grade Asc",
        -14.422875881195068
      ],
      [
        "SELECT DISTINCT T1.grade FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id WHERE T2.student_id = T1.grade",
        -14.505309104919434
      ]
    ],
    "predicted_parse_with_values": "SELECT DISTINCT grade FROM Highschooler WHERE grade = 9",
    "predicted_parse": "SELECT DISTINCT grade FROM Highschooler WHERE grade = value",
    "predicted_parse_explanation": [
      "find without repetition grade in high schooler table whose grade equals 9"
    ],
    "template_feedback": "remove the grade equals 9 conditions . permit repetitions in the results .",
    "primary_span": [
      [
        0,
        6
      ],
      [
        7,
        12
      ]
    ],
    "secondary_span": [],
    "edits": [
      "distinct",
      "grade equals 9"
    ],
    "edits_original": "< select > remove distinct </ select > < where > remove grade equals 9 </ where >"
  },
  {
    "db_id": "car_1",
    "feedback": "Use corresponding countries's country name instead of country .",
    "question": "How many car makers are there in france?",
    "gold_parse": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'",
    "beam": [
      [
        "SELECT Count ( * ) FROM car_makers WHERE Country = value",
        -0.000102996826171875
      ],
      [
        "SELECT Count ( * ) FROM car_makers WHERE FullName = value",
        -9.431618690490723
      ],
      [
        "SELECT Count ( * ) FROM countries WHERE CountryName = value",
        -11.356527328491211
      ],
      [
        "SELECT Count ( * ) FROM model_list WHERE Model = value",
        -12.176767349243164
      ],
      [
        "SELECT Count ( * ) FROM continents",
        -13.61734390258789
      ],
      [
        "SELECT Count ( * ) FROM continents WHERE Continent = value",
        -13.645764350891113
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM car_makers WHERE Country = value",
        -14.139795303344727
      ],
      [
        "SELECT * FROM car_makers WHERE Country = value",
        -14.562845051288605
      ],
      [
        "SELECT Sum ( * ) FROM car_makers WHERE Country = value",
        -15.228781938552856
      ],
      [
        "SELECT Avg ( * ) FROM car_makers WHERE Country = value",
        -15.404118299484253
      ],
      [
        "SELECT Count ( * ) FROM car_makers WHERE Country > value",
        -15.810524225234985
      ],
      [
        "SELECT Count ( * ) , Country FROM car_makers WHERE Country = value",
        -15.925697565078735
      ],
      [
        "SELECT Count ( Count ( * ) ) FROM car_makers WHERE Country = value",
        -16.383058547973633
      ],
      [
        "SELECT Count ( * ) FROM car_names WHERE Model = value",
        -16.39811420440674
      ],
      [
        "SELECT Count ( * ) FROM car_makers WHERE FullName > value",
        -16.42696523666382
      ],
      [
        "SELECT Count ( DISTINCT * ) FROM car_makers WHERE Country = value",
        -16.904525756835938
      ],
      [
        "SELECT Count ( * ) FROM car_makers WHERE DISTINCT Country = value",
        -16.998779296875
      ],
      [
        "SELECT Count ( * ) FROM car_makers WHERE Country = value LIMIT value",
        -17.182390213012695
      ],
      [
        "SELECT Count ( * ) FROM model_list WHERE ModelId = value",
        -17.187140464782715
      ],
      [
        "SELECT Count ( * ) FROM car_makers WHERE Country IN ( SELECT * FROM car_makers WHERE Country = value )",
        -17.599917769432068
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM car_makers WHERE Country = \"france\"",
    "predicted_parse": "SELECT Count ( * ) FROM car_makers WHERE Country = value",
    "predicted_parse_explanation": [
      "find the number of rows in car makers table whose country equals france"
    ],
    "template_feedback": "additionally use the information from the countries table besides the car makers table . consider the country name equals france conditions in place of the country equals france conditions .",
    "primary_span": [
      [
        0,
        7
      ],
      [
        14,
        20
      ]
    ],
    "secondary_span": [
      [
        8,
        13
      ],
      [
        21,
        29
      ]
    ],
    "edits": [
      "countries",
      "country name equals \"france\"",
      "country equals \"france\""
    ],
    "edits_original": "< from > add countries </ from > < where > add country name equals \" france \" </ where > < where > remove country equals \" france \" </ where >"
  },
  {
    "db_id": "world_1",
    "feedback": "Find language of countrylanguage table whose largest value of language .",
    "question": "Give the language that is spoken in the most countries.",
    "gold_parse": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1",
    "beam": [
      [
        "SELECT Name FROM country GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value",
        -1.2663955688476562
      ],
      [
        "SELECT Name FROM country GROUP BY LocalName ORDER BY Count ( * ) Desc LIMIT value",
        -1.39210844039917
      ],
      [
        "SELECT LocalName FROM country GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value",
        -1.4731717109680176
      ],
      [
        "SELECT LocalName FROM country GROUP BY LocalName ORDER BY Count ( * ) Desc LIMIT value",
        -2.078706741333008
      ],
      [
        "SELECT Name FROM country WHERE Continent = ( SELECT Continent FROM country GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value ) GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value",
        -3.842796802520752
      ],
      [
        "SELECT Code2 FROM country GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value",
        -4.471896648406982
      ],
      [
        "SELECT Name FROM country GROUP BY Name ORDER BY Count ( * ) Desc LIMIT value",
        -4.673240661621094
      ],
      [
        "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Continent ORDER BY Count ( * ) Desc LIMIT value",
        -4.706857681274414
      ],
      [
        "SELECT Code2 FROM country GROUP BY LocalName ORDER BY Count ( * ) Desc LIMIT value",
        -4.79628849029541
      ],
      [
        "SELECT LocalName FROM country WHERE Continent = ( SELECT Continent FROM country GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value ) GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value",
        -4.823971748352051
      ],
      [
        "SELECT LocalName FROM country GROUP BY Name ORDER BY Count ( * ) Desc LIMIT value",
        -5.206355094909668
      ],
      [
        "SELECT T1.name FROM sqlite_sequence AS T1 JOIN country AS T2 GROUP BY T2.LocalName ORDER BY Count ( * ) Desc LIMIT value",
        -5.243997097015381
      ],
      [
        "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.LocalName ORDER BY Count ( * ) Desc LIMIT value",
        -5.550635814666748
      ],
      [
        "SELECT Name FROM country WHERE Continent = value GROUP BY LocalName ORDER BY Count ( * ) Desc LIMIT value",
        -5.666086673736572
      ],
      [
        "SELECT T1.name FROM sqlite_sequence AS T1 JOIN country AS T2 GROUP BY T2.Continent ORDER BY Count ( * ) Desc LIMIT value",
        -5.763525009155273
      ],
      [
        "SELECT Name FROM country WHERE Continent = value GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value",
        -6.1404218673706055
      ],
      [
        "SELECT LocalName FROM country WHERE Continent = value GROUP BY LocalName ORDER BY Count ( * ) Desc LIMIT value",
        -6.22648286819458
      ],
      [
        "SELECT LocalName FROM country WHERE Continent = value GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value",
        -6.847511291503906
      ],
      [
        "SELECT HeadOfState FROM country GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value",
        -7.034425735473633
      ],
      [
        "SELECT Name FROM country WHERE Continent = ( SELECT Max ( Continent ) FROM country ) GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value",
        -7.077424049377441
      ]
    ],
    "predicted_parse_with_values": "SELECT Name FROM country GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT 1",
    "predicted_parse": "SELECT Name FROM country GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of continent in country table",
      "Step 2: find the name in country table with largest value in the results of step 1"
    ],
    "template_feedback": "in step 1 , use countrylanguage table in place of country table . find for each value of language in place of continent . in step 2 , find language in place of name .",
    "primary_span": [
      [
        4,
        6
      ],
      [
        13,
        18
      ],
      [
        28,
        29
      ]
    ],
    "secondary_span": [
      [
        7,
        12
      ],
      [
        19,
        23
      ],
      [
        30,
        34
      ]
    ],
    "edits": [
      "language",
      "name",
      "countrylanguage",
      "country",
      "language",
      "continent"
    ],
    "edits_original": "< select > add language </ select > < select > remove name </ select > < from > add countrylanguage </ from > < from > remove country </ from > < groupBy > add language </ groupBy > < groupBy > remove continent </ groupBy >"
  },
  {
    "db_id": "dog_kennels",
    "feedback": "In step 1 Need to find Treatments's dog id which present in Dogs's dog id .",
    "question": "Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.",
    "gold_parse": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
    "beam": [
      [
        "SELECT owner_id , last_name FROM Owners GROUP BY owner_id ORDER BY Count ( * ) Desc LIMIT value",
        -0.0014667510986328125
      ],
      [
        "SELECT first_name , last_name FROM Owners GROUP BY owner_id ORDER BY Count ( * ) Desc LIMIT value",
        -7.466975688934326
      ],
      [
        "SELECT owner_id , last_name FROM Owners GROUP BY owner_id HAVING Count ( * ) > = value ORDER BY Count ( * ) Desc LIMIT value",
        -7.835806965827935
      ],
      [
        "SELECT owner_id , last_name FROM Owners GROUP BY owner_id ORDER BY Count ( * ) Asc LIMIT value",
        -9.079127311706543
      ],
      [
        "SELECT T3.professional_id , T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id GROUP BY T1.owner_id ORDER BY Count ( * ) Desc LIMIT value",
        -9.429448127746582
      ],
      [
        "SELECT T1.owner_id , T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY T2.owner_id ORDER BY Count ( * ) Desc LIMIT value",
        -9.982155799865723
      ],
      [
        "SELECT T2.owner_id , T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id ORDER BY Count ( * ) Desc LIMIT value",
        -10.15236759185791
      ],
      [
        "SELECT T1.owner_id , T3.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id GROUP BY T1.owner_id ORDER BY Count ( * ) Desc LIMIT value",
        -10.241291046142578
      ],
      [
        "SELECT owner_id , last_name FROM Owners GROUP BY owner_id HAVING Count ( * ) > = value ORDER BY last_name Desc LIMIT value",
        -10.626272916793823
      ],
      [
        "SELECT owner_id , last_name FROM Owners GROUP BY owner_id HAVING Count ( * ) > = value",
        -10.62813949584961
      ],
      [
        "SELECT owner_id , last_name FROM Owners GROUP BY owner_id ORDER BY Count ( * ) Desc",
        -10.919842720031738
      ],
      [
        "SELECT T1.owner_id , T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T3.professional_id ORDER BY Count ( * ) Desc LIMIT value",
        -11.079437255859375
      ],
      [
        "SELECT owner_id , last_name FROM Owners GROUP BY owner_id HAVING Count ( * ) > = value ORDER BY owner_id Desc LIMIT value",
        -11.17696738243103
      ],
      [
        "SELECT T1.owner_id , T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T2.weight > = value GROUP BY T1.owner_id ORDER BY Count ( * ) Desc LIMIT value",
        -11.322531461715698
      ],
      [
        "SELECT owner_id , last_name FROM Owners GROUP BY owner_id",
        -11.35069751739502
      ],
      [
        "SELECT T3.professional_id , T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY Count ( * ) Desc LIMIT value",
        -12.059325218200684
      ],
      [
        "SELECT T1.owner_id , T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id ORDER BY T2.age Desc LIMIT value",
        -12.203095436096191
      ],
      [
        "SELECT owner_id , last_name FROM Owners GROUP BY owner_id HAVING Count ( * ) < = value",
        -12.239047050476074
      ],
      [
        "SELECT T1.owner_id , T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T2.age > = value GROUP BY T1.owner_id ORDER BY Count ( * ) Desc LIMIT value",
        -12.245551824569702
      ],
      [
        "SELECT T1.owner_id , T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id ORDER BY T2.weight Desc LIMIT value",
        -13.009644508361816
      ]
    ],
    "predicted_parse_with_values": "SELECT owner_id , last_name FROM Owners GROUP BY owner_id ORDER BY Count ( * ) Desc LIMIT 1",
    "predicted_parse": "SELECT owner_id , last_name FROM Owners GROUP BY owner_id ORDER BY Count ( * ) Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of owner id in owners table",
      "Step 2: find the owner id and last name in owners table with largest value in the results of step 1"
    ],
    "template_feedback": "in step 1 , additionally use the information from the treatments table and dogs table besides the owners table .",
    "primary_span": [
      [
        4,
        14
      ]
    ],
    "secondary_span": [
      [
        15,
        19
      ]
    ],
    "edits": [
      "dogs",
      "treatments"
    ],
    "edits_original": "< from > add dogs </ from > < from > add treatments </ from >"
  },
  {
    "db_id": "world_1",
    "feedback": "Substitute code 2 with language , country with countrylanguage , continent with country's head of state , Ensure is official equals T .",
    "question": "What is the official language spoken in the country whose head of state is Beatrix?",
    "gold_parse": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"",
    "beam": [
      [
        "SELECT Code2 FROM country WHERE Continent = value",
        -0.001697540283203125
      ],
      [
        "SELECT Code2 FROM country WHERE Name = value",
        -6.84515380859375
      ],
      [
        "SELECT Name FROM country WHERE Continent = value",
        -7.67114782333374
      ],
      [
        "SELECT LocalName FROM country WHERE Continent = value",
        -9.137285232543945
      ],
      [
        "SELECT Code2 FROM country WHERE LocalName = value",
        -10.290801048278809
      ],
      [
        "SELECT Code2 FROM country WHERE Continent = value AND Name = value",
        -12.084484577178955
      ],
      [
        "SELECT Code FROM country WHERE Continent = value",
        -12.104856491088867
      ],
      [
        "SELECT T2.IsOfficial FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = value",
        -12.315638542175293
      ],
      [
        "SELECT Code2 FROM country WHERE Continent = value AND Continent = value",
        -13.083345413208008
      ],
      [
        "SELECT Continent FROM country WHERE Continent = value",
        -13.512308120727539
      ],
      [
        "SELECT Name FROM country WHERE Name = value",
        -13.7261061668396
      ],
      [
        "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = value",
        -14.105584144592285
      ],
      [
        "SELECT Code2 , Name FROM country WHERE Continent = value",
        -14.541586875915527
      ],
      [
        "SELECT DISTINCT Code2 FROM country WHERE Continent = value",
        -14.680668830871582
      ],
      [
        "SELECT Code2 FROM country WHERE Continent = value AND LocalName = value",
        -14.820355415344238
      ],
      [
        "SELECT Code2 FROM country WHERE Continent LIKE value",
        -14.877437591552734
      ],
      [
        "SELECT LocalName FROM country WHERE Name = value",
        -15.141517639160156
      ],
      [
        "SELECT Code2 FROM country WHERE Region = value",
        -15.164857864379883
      ],
      [
        "SELECT DISTINCT Code2 FROM country WHERE Continent = value",
        -15.758981704711914
      ],
      [
        "SELECT Code2 FROM country",
        -17.402297019958496
      ]
    ],
    "predicted_parse_with_values": "SELECT Code2 FROM country WHERE Continent = \"Beatrix\"",
    "predicted_parse": "SELECT Code2 FROM country WHERE Continent = value",
    "predicted_parse_explanation": [
      "find the code2 in country table whose continent equals Beatrix"
    ],
    "template_feedback": "additionally use the information from the countrylanguage table besides the country table . consider the head of state equals Beatrix and is official equals T conditions in place of the continent equals Beatrix conditions . find language in place of code2 .",
    "primary_span": [
      [
        0,
        7
      ],
      [
        13,
        25
      ],
      [
        35,
        36
      ]
    ],
    "secondary_span": [
      [
        8,
        12
      ],
      [
        26,
        34
      ],
      [
        37,
        41
      ]
    ],
    "edits": [
      "language",
      "code2",
      "countrylanguage",
      "head of state equals \"Beatrix\"",
      "is official equals \"T\"",
      "continent equals \"Beatrix\""
    ],
    "edits_original": "< select > add language </ select > < select > remove code2 </ select > < from > add countrylanguage </ from > < where > add head of state equals \" Beatrix \" </ where > < where > add is official equals \" T \" </ where > < where > remove continent equals \" Beatrix \" </ where >"
  },
  {
    "db_id": "flight_2",
    "feedback": "Exchange abbreviation in airlines table with airline in flights table .",
    "question": "What airline serves the most flights?",
    "gold_parse": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1",
    "beam": [
      [
        "SELECT Airline FROM airlines GROUP BY Abbreviation ORDER BY Count ( * ) Desc LIMIT value",
        -0.42220592498779297
      ],
      [
        "SELECT Airline FROM airlines GROUP BY Airline ORDER BY Count ( * ) Desc LIMIT value",
        -1.0670838356018066
      ],
      [
        "SELECT Airline FROM airlines ORDER BY Abbreviation Desc LIMIT value",
        -9.026456356048584
      ],
      [
        "SELECT Airline FROM airlines ORDER BY Airline Desc LIMIT value",
        -9.290304183959961
      ],
      [
        "SELECT Airline FROM airlines GROUP BY Country ORDER BY Count ( * ) Desc LIMIT value",
        -9.840587615966797
      ],
      [
        "SELECT Airline FROM airlines GROUP BY uid ORDER BY Count ( * ) Desc LIMIT value",
        -9.87535572052002
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 GROUP BY T2.Airline ORDER BY Count ( * ) Desc LIMIT value",
        -10.700810432434082
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 GROUP BY T2.FlightNo ORDER BY Count ( * ) Desc LIMIT value",
        -11.990615844726562
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 GROUP BY T2.Country ORDER BY Count ( * ) Desc LIMIT value",
        -12.134437561035156
      ],
      [
        "SELECT Airline FROM airlines GROUP BY Airline , Abbreviation ORDER BY Count ( * ) Desc LIMIT value",
        -12.183300971984863
      ],
      [
        "SELECT Airline FROM airlines GROUP BY Abbreviation ORDER BY Count ( * ) Asc LIMIT value",
        -12.271173477172852
      ],
      [
        "SELECT Airline FROM airlines GROUP BY Abbreviation ORDER BY Count ( * ) Desc",
        -12.387615203857422
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 GROUP BY T2.CountryAbbrev ORDER BY Count ( * ) Desc LIMIT value",
        -12.642313003540039
      ],
      [
        "SELECT Airline , Abbreviation FROM airlines GROUP BY Abbreviation ORDER BY Count ( * ) Desc LIMIT value",
        -12.967108249664307
      ],
      [
        "SELECT Airline FROM airlines GROUP BY Airline ORDER BY Count ( * ) Desc",
        -13.024574756622314
      ],
      [
        "SELECT Airline FROM airlines GROUP BY Airline ORDER BY Count ( * ) Asc LIMIT value",
        -13.162354946136475
      ],
      [
        "SELECT Airline FROM airlines GROUP BY * ORDER BY Count ( * ) Desc LIMIT value",
        -13.74104118347168
      ],
      [
        "SELECT Abbreviation FROM airlines GROUP BY Airline ORDER BY Count ( * ) Desc LIMIT value",
        -13.997373580932617
      ],
      [
        "SELECT Airline FROM airlines ORDER BY * Desc LIMIT value",
        -14.143752574920654
      ],
      [
        "SELECT Airline FROM airlines",
        -16.336941719055176
      ]
    ],
    "predicted_parse_with_values": "SELECT Airline FROM airlines GROUP BY Abbreviation ORDER BY Count ( * ) Desc LIMIT 1",
    "predicted_parse": "SELECT Airline FROM airlines GROUP BY Abbreviation ORDER BY Count ( * ) Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of abbreviation in airlines table",
      "Step 2: find the airline name in airlines table with largest value in the results of step 1"
    ],
    "template_feedback": "in step 1 , additionally use the information from the flights table besides the airlines table . find for each value of airlines 's airline name in place of abbreviation .",
    "primary_span": [
      [
        4,
        11
      ],
      [
        17,
        25
      ]
    ],
    "secondary_span": [
      [
        12,
        16
      ],
      [
        26,
        30
      ]
    ],
    "edits": [
      "flights",
      "airline name",
      "abbreviation"
    ],
    "edits_original": "< from > add flights </ from > < groupBy > add airline name </ groupBy > < groupBy > remove abbreviation </ groupBy >"
  },
  {
    "db_id": "network_1",
    "feedback": "Replace grade in high schooler table with student id in friend table in step 1.",
    "question": "Show the names of high schoolers who have at least 3 friends.",
    "gold_parse": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3",
    "beam": [
      [
        "SELECT name FROM Highschooler GROUP BY grade HAVING Count ( * ) > = value",
        -0.4776735305786133
      ],
      [
        "SELECT name FROM Highschooler WHERE grade = value GROUP BY grade HAVING Count ( * ) > = value",
        -2.273556709289551
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id WHERE T1.grade = value GROUP BY T2.student_id HAVING Count ( * ) > = value",
        -2.296273708343506
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id WHERE T1.grade ! = value GROUP BY T2.student_id HAVING Count ( * ) > = value",
        -2.763241767883301
      ],
      [
        "SELECT name FROM Highschooler WHERE grade = value GROUP BY name HAVING Count ( * ) > = value",
        -3.259768486022949
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) > = value",
        -3.2965259552001953
      ],
      [
        "SELECT name FROM Highschooler GROUP BY grade , grade HAVING Count ( * ) > = value",
        -4.095605850219727
      ],
      [
        "SELECT name FROM Highschooler WHERE grade ! = value GROUP BY grade HAVING Count ( * ) > = value",
        -4.461755275726318
      ],
      [
        "SELECT name FROM Highschooler WHERE grade ! = value",
        -5.842658042907715
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id , T1.grade HAVING Count ( * ) > = value",
        -6.172232151031494
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id WHERE T1.grade = value GROUP BY T2.student_id HAVING Count ( * ) > = value",
        -6.7036943435668945
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id WHERE T1.grade ! = value GROUP BY T2.student_id HAVING Count ( * ) > = value",
        -7.16584587097168
      ],
      [
        "SELECT name FROM Highschooler GROUP BY name , grade HAVING Count ( * ) > = value",
        -7.565199375152588
      ],
      [
        "SELECT name FROM Highschooler WHERE grade ! = value GROUP BY name HAVING Count ( * ) > = value",
        -7.679365158081055
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id GROUP BY T2.student_id HAVING Count ( * ) > = value",
        -8.256690979003906
      ],
      [
        "SELECT name FROM Highschooler GROUP BY name HAVING Count ( * ) > = value",
        -8.63559627532959
      ],
      [
        "SELECT T1.grade FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) > = value",
        -8.71817684173584
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T1.grade , T2.student_id HAVING Count ( * ) > = value",
        -8.729227066040039
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id WHERE T1.grade = value GROUP BY T2.liked_id HAVING Count ( * ) > = value",
        -9.446162223815918
      ],
      [
        "SELECT name FROM Highschooler",
        -13.781641006469727
      ]
    ],
    "predicted_parse_with_values": "SELECT name FROM Highschooler GROUP BY grade HAVING Count ( * ) > = 3",
    "predicted_parse": "SELECT name FROM Highschooler GROUP BY grade HAVING Count ( * ) > = value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of grade in high schooler table",
      "Step 2: find the name in high schooler table whose corresponding value in step 1 is greater than or equals 3"
    ],
    "template_feedback": "in step 1 , additionally use the information from the friend table besides the high schooler table . find for value of student id in place of grade .",
    "primary_span": [
      [
        4,
        11
      ],
      [
        18,
        23
      ]
    ],
    "secondary_span": [
      [
        12,
        17
      ],
      [
        24,
        28
      ]
    ],
    "edits": [
      "friend",
      "student id",
      "grade"
    ],
    "edits_original": "< from > add friend </ from > < groupBy > add student id </ groupBy > < groupBy > remove grade </ groupBy >"
  },
  {
    "db_id": "flight_2",
    "feedback": "flights table should be use in place of airports table .",
    "question": "Find the number of flights landing in the city of Aberdeen or Abilene.",
    "gold_parse": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"",
    "beam": [
      [
        "SELECT Count ( * ) FROM airports WHERE City = value OR City = value",
        -0.0553436279296875
      ],
      [
        "SELECT Count ( * ) FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T2.DestAirport IN ( SELECT T1.AirportCode FROM airports AS T1 WHERE T1.City = value OR T1.City = value ) AND T1.City < = value",
        -4.220955848693848
      ],
      [
        "SELECT Count ( * ) FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T2.DestAirport IN ( SELECT T1.AirportCode FROM airports AS T1 WHERE T1.City = value OR T1.City = value ) AND T1.AirportName < = value",
        -4.233872413635254
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE AirportName = value OR City = value",
        -4.67692756652832
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE City = value OR AirportName = value",
        -5.370595932006836
      ],
      [
        "SELECT Count ( * ) FROM flights AS T1 WHERE T1.DestAirport IN ( SELECT T2.AirportCode FROM airports AS T2 WHERE T2.City = value OR T2.City = value ) AND T1.DestAirport IN ( SELECT T2.AirportCode FROM airports AS T2 WHERE T2.City = value OR T2.City = value )",
        -5.424668312072754
      ],
      [
        "SELECT Count ( * ) FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T2.DestAirport IN ( SELECT T1.AirportCode FROM airports AS T1 WHERE T1.City = value OR T1.City = value ) AND T1.City = value OR T1.City = value",
        -6.974884986877441
      ],
      [
        "SELECT Count ( * ) FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T2.DestAirport IN ( SELECT T1.AirportCode FROM airports AS T1 WHERE T1.City = value OR T1.City = value ) AND T1.City = value",
        -7.172680854797363
      ],
      [
        "SELECT Count ( * ) FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T2.DestAirport = value OR T1.City = value",
        -7.769776344299316
      ],
      [
        "SELECT T2.FlightNo FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.City = value OR T1.City = value",
        -8.521893501281738
      ],
      [
        "SELECT Count ( DISTINCT T2.FlightNo ) FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.City = value OR T1.City = value",
        -9.376834869384766
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE Country = value OR City = value",
        -9.754429817199707
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE AirportName = value OR AirportName = value",
        -10.276062965393066
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE City = value OR Country = value",
        -10.713258743286133
      ],
      [
        "SELECT Count ( * ) FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T2.DestAirport IN value AND T1.City = value",
        -10.8643798828125
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE AirportName = value AND City = value",
        -11.613493919372559
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE City = value OR CountryAbbrev = value",
        -11.751363754272461
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE City ! = value OR City = value",
        -11.843978881835938
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE CountryAbbrev = value OR City = value",
        -12.203741073608398
      ],
      [
        "SELECT Count ( * ) FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T2.FlightNo > value AND T1.City = value",
        -12.204415798187256
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM airports WHERE City = \"Abilene\" OR City = \"Aberdeen\"",
    "predicted_parse": "SELECT Count ( * ) FROM airports WHERE City = value OR City = value",
    "predicted_parse_explanation": [
      "find the number of rows in airports table whose city equals Abilene or city equals Aberdeen"
    ],
    "template_feedback": "additionally use the information from the flights table besides the airports table .",
    "primary_span": [
      [
        0,
        7
      ]
    ],
    "secondary_span": [
      [
        8,
        12
      ]
    ],
    "edits": [
      "flights",
      "city equals \"Aberdeen\" or city equals \"Abilene\"",
      "city equals \"Abilene\" or city equals \"Aberdeen\""
    ],
    "edits_original": "< from > add flights </ from > < where > add city equals \" Aberdeen \" or city equals \" Abilene \" </ where > < where > remove city equals \" Abilene \" or city equals \" Aberdeen \" </ where >"
  },
  {
    "db_id": "dog_kennels",
    "feedback": "you need to determine the dog's date departed, date arrived for the dogs whose id's are present in the treatment table.",
    "question": "Find the arriving date and the departing date of the dogs that received a treatment.",
    "gold_parse": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id",
    "beam": [
      [
        "SELECT date_departed , date_of_birth FROM Dogs WHERE gender = value",
        -0.7836947441101074
      ],
      [
        "SELECT date_departed , date_of_birth FROM Dogs WHERE weight = value",
        -1.4615368843078613
      ],
      [
        "SELECT date_departed , date_adopted FROM Dogs WHERE gender = value",
        -2.360950469970703
      ],
      [
        "SELECT date_departed , date_arrived FROM Dogs WHERE gender = value",
        -2.5469894409179688
      ],
      [
        "SELECT date_departed , date_adopted FROM Dogs WHERE weight = value",
        -3.066904067993164
      ],
      [
        "SELECT date_departed , date_arrived FROM Dogs WHERE weight = value",
        -3.3858799934387207
      ],
      [
        "SELECT date_departed , date_of_birth FROM Dogs",
        -4.158562660217285
      ],
      [
        "SELECT date_departed , date_departed FROM Dogs WHERE gender = value",
        -4.653384685516357
      ],
      [
        "SELECT date_departed , date_of_birth FROM Dogs WHERE name = value",
        -5.072860240936279
      ],
      [
        "SELECT date_arrived , date_of_birth FROM Dogs WHERE gender = value",
        -5.482668876647949
      ],
      [
        "SELECT date_departed , date_departed FROM Dogs WHERE weight = value",
        -5.7654643058776855
      ],
      [
        "SELECT date_departed , date_adopted FROM Dogs",
        -5.859742164611816
      ],
      [
        "SELECT date_arrived , date_of_birth FROM Dogs WHERE weight = value",
        -6.246511459350586
      ],
      [
        "SELECT date_departed , date_arrived FROM Dogs",
        -6.368268966674805
      ],
      [
        "SELECT date_departed , date_of_birth FROM Dogs WHERE breed_code = value",
        -6.5279154777526855
      ],
      [
        "SELECT date_departed , date_adopted FROM Dogs WHERE name = value",
        -6.6515960693359375
      ],
      [
        "SELECT date_departed , date_arrived FROM Dogs WHERE name = value",
        -6.855006694793701
      ],
      [
        "SELECT date_arrived , date_adopted FROM Dogs WHERE gender = value",
        -6.912007808685303
      ],
      [
        "SELECT date_departed , date_departed FROM Dogs",
        -8.374140739440918
      ],
      [
        "SELECT date_arrived , date_of_birth FROM Dogs",
        -8.941642761230469
      ]
    ],
    "predicted_parse_with_values": "SELECT date_departed , date_of_birth FROM Dogs WHERE gender = 1",
    "predicted_parse": "SELECT date_departed , date_of_birth FROM Dogs WHERE gender = value",
    "predicted_parse_explanation": [
      "find the date departed and date of birth in dogs table whose gender equals 1"
    ],
    "template_feedback": "additionally use the information from the treatments table besides the dogs table . remove the gender equals 1 conditions . find date arrived in place of date of birth . make sure no repetition in the results .",
    "primary_span": [
      [
        0,
        7
      ],
      [
        13,
        19
      ],
      [
        20,
        22
      ],
      [
        30,
        37
      ]
    ],
    "secondary_span": [
      [
        8,
        12
      ],
      [
        23,
        29
      ]
    ],
    "edits": [
      "distinct",
      "date arrived",
      "date of birth",
      "treatments",
      "gender equals 1"
    ],
    "edits_original": "< select > add distinct </ select > < select > add date arrived </ select > < select > remove date of birth </ select > < from > add treatments </ from > < where > remove gender equals 1 </ where >"
  },
  {
    "db_id": "student_transcripts_tracking",
    "feedback": "Make sure to search the rows count from degree program table.",
    "question": "How many degrees does the engineering department have?",
    "gold_parse": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'",
    "beam": [
      [
        "SELECT Count ( * ) FROM Departments WHERE department_name = value",
        -0.000640869140625
      ],
      [
        "SELECT Count ( DISTINCT T2.degree_summary_name ) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id WHERE T1.department_name = value",
        -7.36814546585083
      ],
      [
        "SELECT Count ( department_id ) FROM Departments WHERE department_name = value",
        -12.741174697875977
      ],
      [
        "SELECT Count ( T2.degree_summary_name ) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id WHERE T1.department_name = value",
        -12.907069683074951
      ],
      [
        "SELECT Count ( * ) FROM Addresses",
        -12.97460651397705
      ],
      [
        "SELECT Sum ( T2.degree_summary_name ) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id WHERE T1.department_name = value",
        -14.46307897567749
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM Departments WHERE department_name = value",
        -14.73717212677002
      ],
      [
        "SELECT T2.degree_summary_name FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id WHERE T1.department_name = value",
        -15.178955554962158
      ],
      [
        "SELECT Count ( T2.degree_summary_description ) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id WHERE T1.department_name = value",
        -15.213229656219482
      ],
      [
        "SELECT Count ( * ) FROM Departments WHERE department_name LIKE value",
        -15.261077880859375
      ],
      [
        "SELECT Avg ( T2.degree_summary_name ) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id WHERE T1.department_name = value",
        -15.360556602478027
      ],
      [
        "SELECT Count ( T2.degree_program_id ) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id WHERE T1.department_name = value",
        -15.510354042053223
      ],
      [
        "SELECT Count ( * ) , department_name FROM Departments WHERE department_name = value",
        -16.17046618461609
      ],
      [
        "SELECT Count ( * ) , T2.degree_summary_name FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id WHERE T1.department_name = value",
        -16.86219620704651
      ],
      [
        "SELECT Count ( DISTINCT * ) FROM Departments WHERE department_name = value",
        -16.880937576293945
      ],
      [
        "SELECT Count ( * ) FROM Departments WHERE department_name > value",
        -16.90650510787964
      ],
      [
        "SELECT Count ( Count ( * ) ) FROM Departments WHERE department_name = value",
        -17.004737854003906
      ],
      [
        "SELECT Count ( * ) FROM Departments WHERE department_name = value AND department_name = value",
        -17.07100486755371
      ],
      [
        "SELECT Count ( * ) FROM Departments WHERE DISTINCT department_name = value",
        -17.212060928344727
      ],
      [
        "SELECT Count ( * ) FROM Departments WHERE department_name = value LIMIT value",
        -17.321008682250977
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM Departments WHERE department_name = \"engineer\"",
    "predicted_parse": "SELECT Count ( * ) FROM Departments WHERE department_name = value",
    "predicted_parse_explanation": [
      "find the number of rows in departments table whose department name equals engineer"
    ],
    "template_feedback": "additionally use the information from the degree programs table besides the departments table .",
    "primary_span": [
      [
        0,
        8
      ]
    ],
    "secondary_span": [
      [
        9,
        13
      ]
    ],
    "edits": [
      "degree programs"
    ],
    "edits_original": "< from > add degree programs </ from >"
  },
  {
    "db_id": "pets_1",
    "feedback": "In step 2 find for student id whose corresponding Pets's pet type equals dog and not equals cat .",
    "question": "Find the first name and age of students who have a dog but do not have a cat as a pet.",
    "gold_parse": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
    "beam": [
      [
        "SELECT T1.Fname , T1.Age FROM Student AS T1 WHERE T1.StuID NOT IN ( SELECT T2.StuID FROM Has_Pet AS T2 )",
        -0.05328655242919922
      ],
      [
        "SELECT T1.Fname , T1.Age FROM Student AS T1 WHERE T1.StuID NOT IN ( SELECT T2.StuID FROM Has_Pet AS T2 JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value )",
        -3.028811454772949
      ],
      [
        "SELECT T1.Fname , T1.Age FROM Student AS T1 WHERE T1.StuID NOT IN ( SELECT T2.StuID FROM Has_Pet AS T2 WHERE T2.PetID = value )",
        -6.333865165710449
      ],
      [
        "SELECT T1.Fname , T1.Age FROM Student AS T1 WHERE T1.StuID NOT IN ( SELECT T2.StuID FROM Has_Pet AS T2 JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.weight = value )",
        -7.367266654968262
      ],
      [
        "SELECT Fname , Age FROM Student EXCEPT SELECT Fname , Age FROM Student",
        -7.435033798217773
      ],
      [
        "SELECT T1.Fname , T1.Age FROM Student AS T1 WHERE T1.StuID NOT IN ( SELECT T2.StuID FROM Has_Pet AS T2 JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.weight = ( SELECT T2.StuID FROM Has_Pet AS T2 ) )",
        -8.869776725769043
      ],
      [
        "SELECT T1.Fname , T1.Age FROM Student AS T1 WHERE T1.StuID NOT IN ( SELECT T2.StuID FROM Has_Pet AS T2 JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.weight = T2.StuID )",
        -9.730494499206543
      ],
      [
        "SELECT T1.Fname , T1.Age FROM Student AS T1 WHERE T1.StuID NOT IN ( SELECT T2.StuID FROM Has_Pet AS T2 INTERSECT SELECT T2.StuID FROM Has_Pet AS T2 )",
        -9.941800117492676
      ],
      [
        "SELECT T1.Fname , T1.Age FROM Student AS T1 WHERE T1.StuID NOT IN ( SELECT T2.StuID FROM Has_Pet AS T2 JOIN Pets AS T3 ON T2.PetID = T3.PetID ORDER BY T3.weight Asc LIMIT value )",
        -10.294093132019043
      ],
      [
        "SELECT T1.Fname , T1.Age FROM Student AS T1 WHERE T1.StuID NOT IN ( SELECT T2.weight FROM Pets AS T2 )",
        -10.309821128845215
      ],
      [
        "SELECT T1.Fname , T1.Age FROM Student AS T1 WHERE T1.StuID NOT IN ( SELECT T2.StuID FROM Has_Pet AS T2 JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.weight = T3.weight )",
        -10.399100303649902
      ],
      [
        "SELECT T1.Fname , T1.Age FROM Student AS T1 WHERE T1.StuID NOT IN ( SELECT T2.StuID FROM Has_Pet AS T2 EXCEPT SELECT T2.StuID FROM Has_Pet AS T2 )",
        -10.437135696411133
      ],
      [
        "SELECT T1.Fname , T1.Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value EXCEPT SELECT T1.Fname , T1.Age FROM Student AS T1",
        -10.699923515319824
      ],
      [
        "SELECT T1.Fname , T1.Age FROM Student AS T1 WHERE T1.StuID NOT IN ( SELECT T2.StuID FROM Has_Pet AS T2 ) EXCEPT SELECT T1.Fname , T1.Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value",
        -11.638463020324707
      ],
      [
        "SELECT T1.Fname , T1.Age FROM Student AS T1 WHERE T1.StuID NOT IN ( SELECT T2.PetID FROM Has_Pet AS T2 )",
        -11.646870613098145
      ],
      [
        "SELECT T1.Fname , T1.Age FROM Student AS T1 WHERE T1.StuID IN ( SELECT T2.StuID FROM Has_Pet AS T2 )",
        -11.801554679870605
      ],
      [
        "SELECT T1.Fname , T1.Age FROM Student AS T1 WHERE T1.StuID NOT IN ( SELECT T2.StuID FROM Has_Pet AS T2 GROUP BY T2.StuID ORDER BY Count ( * ) Asc LIMIT value )",
        -11.913585662841797
      ],
      [
        "SELECT DISTINCT T1.Fname , T1.Age FROM Student AS T1 WHERE T1.StuID NOT IN ( SELECT T2.StuID FROM Has_Pet AS T2 )",
        -13.09711742401123
      ],
      [
        "SELECT T1.Fname FROM Student AS T1 WHERE T1.StuID NOT IN ( SELECT T2.StuID FROM Has_Pet AS T2 JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value )",
        -13.223440170288086
      ],
      [
        "SELECT Fname , Age FROM Student",
        -14.446197509765625
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.Fname , T1.Age FROM Student AS T1 WHERE T1.StuID NOT IN ( SELECT T2.StuID FROM Has_Pet AS T2 )",
    "predicted_parse": "SELECT T1.Fname , T1.Age FROM Student AS T1 WHERE T1.StuID NOT IN ( SELECT T2.StuID FROM Has_Pet AS T2 )",
    "predicted_parse_explanation": [
      "Step 1: find the has pet 's student id in has pet table",
      "Step 2: find the first name and age in student table whose student 's student id not one of the results of step 1"
    ],
    "template_feedback": "in step 1 , additionally use the information from the student table and pets table besides the has pet table . additionally make sure that pet type equals cat . in step 2 , additionally use the information from the has pet table and pets table besides the student table . additionally make sure that pet type equals dog .",
    "primary_span": [
      [
        4,
        14
      ],
      [
        21,
        29
      ],
      [
        34,
        45
      ],
      [
        51,
        59
      ]
    ],
    "secondary_span": [
      [
        15,
        20
      ],
      [
        46,
        50
      ]
    ],
    "edits": [
      "has pet",
      "pets",
      "pet type equals \"dog\"",
      "student",
      "pets",
      "pet type equals \"cat\""
    ],
    "edits_original": "< from > add has pet </ from > < from > add pets </ from > < where > add pet type equals \" dog \" </ where > < from > add student </ from > < from > add pets </ from > < where > add pet type equals \" cat \" </ where >"
  },
  {
    "db_id": "world_1",
    "feedback": "make sure corresponding name of the city is kabul and interchange local name with region.",
    "question": "What region is Kabul in?",
    "gold_parse": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"",
    "beam": [
      [
        "SELECT LocalName FROM country",
        -0.34911632537841797
      ],
      [
        "SELECT SurfaceArea FROM country",
        -1.2255659103393555
      ],
      [
        "SELECT Region FROM country",
        -6.934637069702148
      ],
      [
        "SELECT LocalName , SurfaceArea FROM country",
        -9.20621109008789
      ],
      [
        "SELECT LocalName FROM country WHERE Name = value",
        -11.566310405731201
      ],
      [
        "SELECT SurfaceArea FROM country WHERE Name = value",
        -13.030464172363281
      ],
      [
        "SELECT Max ( SurfaceArea ) FROM country",
        -13.134650230407715
      ],
      [
        "SELECT LocalName FROM country WHERE Region = value",
        -13.34104299545288
      ],
      [
        "SELECT SurfaceArea , SurfaceArea FROM country",
        -13.896849155426025
      ],
      [
        "SELECT DISTINCT LocalName FROM country",
        -13.975403785705566
      ],
      [
        "SELECT LocalName FROM country WHERE Continent = value",
        -14.613111019134521
      ],
      [
        "SELECT Name FROM country",
        -14.98038101196289
      ],
      [
        "SELECT DISTINCT SurfaceArea FROM country",
        -15.000462532043457
      ],
      [
        "SELECT LocalName FROM country UNION SELECT LocalName FROM country",
        -15.036863327026367
      ],
      [
        "SELECT LocalName FROM country WHERE SurfaceArea = value",
        -15.07916522026062
      ],
      [
        "SELECT SurfaceArea FROM country WHERE Region = value",
        -15.096925258636475
      ],
      [
        "SELECT Sum ( SurfaceArea ) FROM country",
        -15.116570472717285
      ],
      [
        "SELECT SurfaceArea FROM country WHERE LocalName = value",
        -15.27103328704834
      ],
      [
        "SELECT Count ( LocalName ) FROM country",
        -15.467806816101074
      ],
      [
        "SELECT Count ( SurfaceArea ) FROM country",
        -15.685079574584961
      ]
    ],
    "predicted_parse_with_values": "SELECT LocalName FROM country",
    "predicted_parse": "SELECT LocalName FROM country",
    "predicted_parse_explanation": [
      "find the local name in country table"
    ],
    "template_feedback": "additionally use the information from the city table besides the country table . additionally make sure that city 's name equals Kabul . find region in place of local name .",
    "primary_span": [
      [
        0,
        7
      ],
      [
        13,
        22
      ],
      [
        23,
        24
      ]
    ],
    "secondary_span": [
      [
        8,
        12
      ],
      [
        25,
        30
      ]
    ],
    "edits": [
      "region",
      "local name",
      "city",
      "name equals \"Kabul\""
    ],
    "edits_original": "< select > add region </ select > < select > remove local name </ select > < from > add city </ from > < where > add name equals \" Kabul \" </ where >"
  },
  {
    "db_id": "flight_2",
    "feedback": "from airlines country is incorrect, swap country of airports table with source airport of flight table .",
    "question": "Which airlines have departures from CVO but not from APG airports?",
    "gold_parse": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"",
    "beam": [
      [
        "SELECT T1.Airline FROM airlines AS T1 WHERE T1.Country = value EXCEPT SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value",
        -0.21746158599853516
      ],
      [
        "SELECT Airline FROM airlines WHERE Country = value EXCEPT SELECT Airline FROM airlines WHERE Country = value",
        -1.639918327331543
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value EXCEPT SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value",
        -7.592743873596191
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 WHERE T1.Country = value AND T1.Abbreviation ! = value EXCEPT SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value",
        -8.375959396362305
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 WHERE T1.Country = value EXCEPT SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.CountryAbbrev = value",
        -9.05394172668457
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value EXCEPT SELECT T1.Airline FROM airlines AS T1 WHERE T1.Country = value",
        -9.086662292480469
      ],
      [
        "SELECT Airline FROM airlines WHERE Country = value EXCEPT SELECT Airline FROM airlines WHERE Abbreviation = value",
        -9.911491394042969
      ],
      [
        "SELECT Airline FROM airlines WHERE Country = value AND Abbreviation ! = value EXCEPT SELECT Airline FROM airlines WHERE Country = value",
        -10.239858627319336
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 WHERE T1.Abbreviation = ( SELECT T2.Country FROM airports AS T2 WHERE T2.Country = value ) EXCEPT SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value",
        -10.793429136276245
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 WHERE T1.Country = T1.Airline EXCEPT SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value",
        -10.958916664123535
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 WHERE T1.Abbreviation > value EXCEPT SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value",
        -11.02490758895874
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 WHERE T1.Country = value EXCEPT SELECT T1.Abbreviation FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value",
        -11.080076217651367
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 WHERE T1.Abbreviation = ( SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value ) EXCEPT SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value",
        -11.095235347747803
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 WHERE T1.Country = value AND T1.Abbreviation = value EXCEPT SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value",
        -11.112500190734863
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 WHERE T1.Abbreviation = ( SELECT T2.Country FROM airlines AS T1 JOIN airports AS T2 WHERE T1.Country = value ) EXCEPT SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value",
        -11.331303358078003
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 WHERE T1.Abbreviation = ( SELECT T1.Airline FROM airlines AS T1 WHERE T1.Country = value ) EXCEPT SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value",
        -11.450348377227783
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 WHERE T1.Country = ( SELECT T2.Country FROM airports AS T2 WHERE T2.Country = value ) EXCEPT SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value",
        -11.460766792297363
      ],
      [
        "SELECT Airline FROM airlines WHERE Country = value EXCEPT SELECT Airline FROM airlines WHERE Abbreviation = Airline",
        -11.56347131729126
      ],
      [
        "SELECT Airline FROM airlines WHERE Country = value ORDER BY Abbreviation Desc LIMIT value",
        -12.663726806640625
      ],
      [
        "SELECT Airline FROM airlines WHERE Country = value ORDER BY Airline Desc",
        -12.97007417678833
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.Airline FROM airlines AS T1 WHERE T1.Country = \"CVO\" EXCEPT SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = \"APG\"",
    "predicted_parse": "SELECT T1.Airline FROM airlines AS T1 WHERE T1.Country = value EXCEPT SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value",
    "predicted_parse_explanation": [
      "Step 1: find the airline name in airlines table whose airlines 's country equals CVO",
      "Step 2: for each row in airlines table , find the corresponding rows in airports table",
      "Step 3: find the airline name of the results of step 2 whose airports 's country equals APG",
      "Step 4: show the rows that are in the results of step 1 but not in the results of step 3"
    ],
    "template_feedback": "in step 1 , additionally use the information from the flights table besides the airlines table . consider the source airport equals CVO conditions in place of the country equals CVO conditions . in step 2 , use flights table in place of airports table in step 3 , consider the source airport equals APG conditions in place of the airports 's country equals APG conditions .",
    "primary_span": [
      [
        4,
        11
      ],
      [
        17,
        23
      ],
      [
        37,
        39
      ],
      [
        49,
        55
      ]
    ],
    "secondary_span": [
      [
        12,
        16
      ],
      [
        24,
        32
      ],
      [
        40,
        44
      ],
      [
        56,
        66
      ]
    ],
    "edits": [
      "flights",
      "source airport equals \"CVO\"",
      "country equals \"CVO\"",
      "flights",
      "airports",
      "source airport equals \"APG\"",
      "country equals \"APG\""
    ],
    "edits_original": "< from > add flights </ from > < where > add source airport equals \" CVO \" </ where > < where > remove country equals \" CVO \" </ where > < from > add flights </ from > < from > remove airports </ from > < where > add source airport equals \" APG \" </ where > < where > remove country equals \" APG \" </ where >"
  },
  {
    "db_id": "car_1",
    "feedback": "make sure year should be 1974 and cylinders equivalent with 8.",
    "question": "What is the minimu weight of the car with 8 cylinders produced in 1974?",
    "gold_parse": "SELECT Weight FROM CARS_DATA WHERE Cylinders  =  4 AND YEAR  =  1974 ORDER BY Weight ASC LIMIT 1",
    "beam": [
      [
        "SELECT Min ( Weight ) FROM cars_data WHERE Year = value",
        -0.41231441497802734
      ],
      [
        "SELECT Weight FROM cars_data WHERE Year = value",
        -1.1037349700927734
      ],
      [
        "SELECT Max ( Weight ) FROM cars_data WHERE Year = value",
        -5.373108863830566
      ],
      [
        "SELECT Min ( Weight ) FROM cars_data WHERE Year = value AND Year = value",
        -10.92110538482666
      ],
      [
        "SELECT Weight , Horsepower FROM cars_data WHERE Year = value",
        -10.945921897888184
      ],
      [
        "SELECT Weight , Cylinders FROM cars_data WHERE Year = value",
        -11.785119533538818
      ],
      [
        "SELECT Avg ( Weight ) FROM cars_data WHERE Year = value",
        -11.931183815002441
      ],
      [
        "SELECT Min ( Weight ) , Horsepower FROM cars_data WHERE Year = value",
        -12.297146797180176
      ],
      [
        "SELECT Min ( Weight ) , Cylinders FROM cars_data WHERE Year = value",
        -12.61029863357544
      ],
      [
        "SELECT Min ( Weight ) FROM cars_data WHERE Year LIKE value",
        -12.988261222839355
      ],
      [
        "SELECT Weight FROM cars_data WHERE Year = value AND Year = value",
        -13.08621597290039
      ],
      [
        "SELECT Min ( Weight ) FROM cars_data WHERE Year < value",
        -13.151199340820312
      ],
      [
        "SELECT Sum ( Weight ) FROM cars_data WHERE Year = value",
        -13.504499435424805
      ],
      [
        "SELECT Min ( Weight ) FROM cars_data WHERE Cylinders = ( SELECT Max ( Cylinders ) FROM cars_data WHERE Year = value )",
        -14.16018009185791
      ],
      [
        "SELECT Min ( Weight ) FROM cars_data WHERE Cylinders = value",
        -14.47861385345459
      ],
      [
        "SELECT Min ( Weight ) FROM cars_data WHERE Cylinders < value",
        -14.506961822509766
      ],
      [
        "SELECT Weight FROM cars_data WHERE Year LIKE value",
        -14.687870979309082
      ],
      [
        "SELECT Min ( DISTINCT Weight ) FROM cars_data WHERE Year = value",
        -14.730875968933105
      ],
      [
        "SELECT DISTINCT Weight FROM cars_data WHERE Year = value",
        -15.33373737335205
      ],
      [
        "SELECT Count ( DISTINCT Weight ) FROM cars_data WHERE Year = value",
        -15.540810108184814
      ]
    ],
    "predicted_parse_with_values": "SELECT Min ( Weight ) FROM cars_data WHERE Year = 1",
    "predicted_parse": "SELECT Min ( Weight ) FROM cars_data WHERE Year = value",
    "predicted_parse_explanation": [
      "find the minimum weight in cars data table whose year equals 1"
    ],
    "template_feedback": "consider the cylinders equals 4 and year equals 1974 conditions in place of the year equals 1 conditions . find weight in place of minimum weight . find the result with the smallest weight .",
    "primary_span": [
      [
        0,
        9
      ],
      [
        19,
        20
      ],
      [
        27,
        34
      ]
    ],
    "secondary_span": [
      [
        10,
        18
      ],
      [
        21,
        26
      ]
    ],
    "edits": [
      "weight",
      "minimum weight",
      "cylinders equals 4",
      "year equals 1974",
      "year equals 1",
      "weight",
      "1"
    ],
    "edits_original": "< select > add weight </ select > < select > remove minimum weight </ select > < where > add cylinders equals 4 </ where > < where > add year equals 1974 </ where > < where > remove year equals 1 </ where > < orderBy > add weight </ orderBy > < limit > add 1 </ limit >"
  },
  {
    "db_id": "poker_player",
    "feedback": "In poker player table, you need to mention the people's people Id.",
    "question": "What are the names of poker players?",
    "gold_parse": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID",
    "beam": [
      [
        "SELECT Name FROM people",
        -1.52587890625e-05
      ],
      [
        "SELECT Name FROM people WHERE Name = value",
        -11.812868565320969
      ],
      [
        "SELECT Name , Name FROM people",
        -12.831639766693115
      ],
      [
        "SELECT Count ( Name ) FROM people",
        -14.415051460266113
      ],
      [
        "SELECT DISTINCT Name FROM people",
        -14.479759216308594
      ],
      [
        "SELECT Name FROM people ORDER BY Name Asc",
        -14.67047929763794
      ],
      [
        "SELECT Poker_Player_ID FROM poker_player",
        -14.76467514038086
      ],
      [
        "SELECT Name FROM people WHERE Nationality = value",
        -14.975306987762451
      ],
      [
        "SELECT Name FROM people UNION SELECT Name FROM people",
        -15.253961086273193
      ],
      [
        "SELECT Sum ( Name ) FROM people",
        -15.67480754852295
      ],
      [
        "SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Poker_Player_ID = value",
        -15.81721019744873
      ],
      [
        "SELECT Name FROM people WHERE Height = value",
        -15.871391296386719
      ],
      [
        "SELECT Name FROM people GROUP BY Name",
        -16.37413501739502
      ],
      [
        "SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Money_Rank = value",
        -16.378242015838623
      ],
      [
        "SELECT Max ( Name ) FROM people",
        -17.001261711120605
      ],
      [
        "SELECT DISTINCT Name FROM people",
        -17.056041717529297
      ],
      [
        "SELECT Name FROM people LIMIT value",
        -17.263758659362793
      ],
      [
        "SELECT Name FROM people",
        -17.817134857177734
      ],
      [
        "SELECT Min ( Name ) FROM people",
        -17.962550163269043
      ],
      [
        "SELECT Name FROM people",
        -18.734207153320312
      ]
    ],
    "predicted_parse_with_values": "SELECT Name FROM people",
    "predicted_parse": "SELECT Name FROM people",
    "predicted_parse_explanation": [
      "find the name in people table"
    ],
    "template_feedback": "additionally use the information from the poker player table besides the people table .",
    "primary_span": [
      [
        0,
        8
      ]
    ],
    "secondary_span": [
      [
        9,
        13
      ]
    ],
    "edits": [
      "poker player"
    ],
    "edits_original": "< from > add poker player </ from >"
  },
  {
    "db_id": "concert_singer",
    "feedback": "I only want average from step 1.",
    "question": "What is the name and capacity for the stadium with highest average attendance?",
    "gold_parse": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1",
    "beam": [
      [
        "SELECT Name , Capacity FROM stadium GROUP BY Stadium_ID ORDER BY Avg ( Average ) Desc LIMIT value",
        -0.2044229507446289
      ],
      [
        "SELECT T1.Name , T1.Capacity FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID GROUP BY T2.Stadium_ID ORDER BY Avg ( T1.Average ) Desc LIMIT value",
        -2.1573219299316406
      ],
      [
        "SELECT Name , Capacity FROM stadium GROUP BY Stadium_ID ORDER BY Avg ( Highest ) Desc LIMIT value",
        -2.8825340270996094
      ],
      [
        "SELECT T1.Name , T1.Capacity FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID GROUP BY T2.Stadium_ID ORDER BY Avg ( T1.Highest ) Desc LIMIT value",
        -4.861615180969238
      ],
      [
        "SELECT Name , Capacity FROM stadium GROUP BY Stadium_ID ORDER BY Avg ( Capacity ) Desc LIMIT value",
        -5.554010391235352
      ],
      [
        "SELECT T1.Name , T1.Capacity FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID GROUP BY T2.Stadium_ID ORDER BY Avg ( T1.Capacity ) Desc LIMIT value",
        -7.223711967468262
      ],
      [
        "SELECT Name , Capacity FROM stadium GROUP BY Stadium_ID ORDER BY Count ( * ) Desc LIMIT value",
        -7.408534049987793
      ],
      [
        "SELECT T1.Name , T1.Capacity FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID GROUP BY T2.Stadium_ID ORDER BY Count ( * ) Desc LIMIT value",
        -9.463865280151367
      ],
      [
        "SELECT Name , Capacity FROM stadium ORDER BY Highest Desc LIMIT value",
        -9.768317222595215
      ],
      [
        "SELECT Name , Capacity FROM stadium ORDER BY Average Desc LIMIT value",
        -9.965110778808594
      ],
      [
        "SELECT Name , Capacity FROM stadium GROUP BY Stadium_ID ORDER BY Sum ( Average ) Desc LIMIT value",
        -10.398198127746582
      ],
      [
        "SELECT Name , Capacity FROM stadium GROUP BY Capacity ORDER BY Avg ( Average ) Desc LIMIT value",
        -10.531989097595215
      ],
      [
        "SELECT Name , Capacity FROM stadium GROUP BY Stadium_ID ORDER BY Avg ( Average ) Desc",
        -11.984867095947266
      ],
      [
        "SELECT Name , Capacity FROM stadium GROUP BY Stadium_ID ORDER BY Sum ( Highest ) Desc LIMIT value",
        -12.287057876586914
      ],
      [
        "SELECT T1.Name , T1.Capacity FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID GROUP BY T2.Stadium_ID ORDER BY Sum ( T1.Average ) Desc LIMIT value",
        -12.424752235412598
      ],
      [
        "SELECT Name , Capacity FROM stadium GROUP BY Stadium_ID ORDER BY Avg ( Average ) Asc LIMIT value",
        -12.571626663208008
      ],
      [
        "SELECT Name , Capacity , Highest FROM stadium GROUP BY Stadium_ID ORDER BY Avg ( Average ) Desc LIMIT value",
        -12.863729476928711
      ],
      [
        "SELECT Name , Capacity FROM stadium GROUP BY Stadium_ID",
        -13.055825233459473
      ],
      [
        "SELECT Name FROM stadium GROUP BY Stadium_ID ORDER BY Avg ( Average ) Desc LIMIT value",
        -13.530491828918457
      ],
      [
        "SELECT Name , Capacity FROM stadium",
        -16.034021377563477
      ]
    ],
    "predicted_parse_with_values": "SELECT Name , Capacity FROM stadium GROUP BY Stadium_ID ORDER BY Avg ( Average ) Desc LIMIT 1",
    "predicted_parse": "SELECT Name , Capacity FROM stadium GROUP BY Stadium_ID ORDER BY Avg ( Average ) Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: find the average average of each value of stadium id in stadium table",
      "Step 2: find the name and capacity in stadium table with largest value in the results of step 1"
    ],
    "template_feedback": "in step 1 , do not find for each value of stadium id . in step 2 , order the results by average in place of average average .",
    "primary_span": [
      [
        4,
        13
      ],
      [
        18,
        22
      ]
    ],
    "secondary_span": [
      [
        23,
        28
      ]
    ],
    "edits": [
      "stadium id",
      "average",
      "average average"
    ],
    "edits_original": "< groupBy > remove stadium id </ groupBy > < orderBy > add average </ orderBy > < orderBy > remove average average </ orderBy >"
  },
  {
    "db_id": "battle_death",
    "feedback": "I want the injured in-place of note. ",
    "question": "What are the death and injury situations caused by the ship with tonnage 't'?",
    "gold_parse": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'",
    "beam": [
      [
        "SELECT T2.note , T2.killed FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id WHERE T1.tonnage = value",
        -0.45615434646606445
      ],
      [
        "SELECT T2.note , T2.injured FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id WHERE T1.tonnage = value",
        -1.2631468772888184
      ],
      [
        "SELECT T2.note , T1.name FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id WHERE T1.tonnage = value",
        -3.3924214839935303
      ],
      [
        "SELECT T2.note , T1.disposition_of_ship FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id WHERE T1.tonnage = value",
        -3.8862342834472656
      ],
      [
        "SELECT T2.note , T2.note FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id WHERE T1.tonnage = value",
        -4.390781879425049
      ],
      [
        "SELECT T2.note , T1.tonnage FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id WHERE T1.tonnage = value",
        -4.40533447265625
      ],
      [
        "SELECT T3.note , T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle AND T1.id = T2.lost_in_battle JOIN death AS T3 ON T2.id = T3.caused_by_ship_id WHERE T2.tonnage = value",
        -6.308903217315674
      ],
      [
        "SELECT T3.note , T1.result FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle AND T1.id = T2.lost_in_battle JOIN death AS T3 ON T2.id = T3.caused_by_ship_id WHERE T2.tonnage = value",
        -6.377178192138672
      ],
      [
        "SELECT T3.note , T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle AND T1.id = T2.lost_in_battle JOIN death AS T3 ON T2.id = T3.caused_by_ship_id WHERE T2.tonnage = value",
        -8.203685760498047
      ],
      [
        "SELECT T2.note , T2.id FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id WHERE T1.tonnage = value",
        -8.294637680053711
      ],
      [
        "SELECT T2.note , T1.lost_in_battle FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id WHERE T1.tonnage = value",
        -8.551178932189941
      ],
      [
        "SELECT T2.note , T2.killed FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id WHERE T1.tonnage LIKE value",
        -8.898046016693115
      ],
      [
        "SELECT T2.note , T2.injured FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id WHERE T1.tonnage LIKE value",
        -8.972239971160889
      ],
      [
        "SELECT T2.note , T1.ship_type FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id WHERE T1.tonnage = value",
        -9.307123184204102
      ],
      [
        "SELECT T2.note , T2.caused_by_ship_id FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id WHERE T1.tonnage = value",
        -9.698972702026367
      ],
      [
        "SELECT T2.note , T1.location FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id WHERE T1.tonnage = value",
        -9.901545524597168
      ],
      [
        "SELECT T2.note , T1.tonnage FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id WHERE T1.tonnage LIKE value",
        -11.265318870544434
      ],
      [
        "SELECT T2.note , T1.disposition_of_ship FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id WHERE T1.tonnage LIKE value",
        -11.534895896911621
      ],
      [
        "SELECT T3.note , T1.latin_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle AND T1.id = T2.lost_in_battle JOIN death AS T3 ON T2.id = T3.caused_by_ship_id WHERE T2.tonnage = value",
        -11.561405181884766
      ],
      [
        "SELECT T2.note , T1.name FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id WHERE T1.tonnage LIKE value",
        -11.790729284286499
      ]
    ],
    "predicted_parse_with_values": "SELECT T2.note , T2.killed FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id WHERE T1.tonnage = \"t\"",
    "predicted_parse": "SELECT T2.note , T2.killed FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id WHERE T1.tonnage = value",
    "predicted_parse_explanation": [
      "Step 1: for each row in ship table , find the corresponding rows in death table",
      "Step 2: find the note and killed of the results of step 1 whose tonnage equals t"
    ],
    "template_feedback": "in step 2 , find injured in place of note .",
    "primary_span": [
      [
        4,
        5
      ]
    ],
    "secondary_span": [
      [
        6,
        10
      ]
    ],
    "edits": [
      "injured",
      "note"
    ],
    "edits_original": "< select > add injured </ select > < select > remove note </ select >"
  },
  {
    "db_id": "orchestra",
    "feedback": "In step 2, you should use work year instead of founded year.",
    "question": "What is the name of the conductor who has worked the greatest number of years?",
    "gold_parse": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
    "beam": [
      [
        "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID ORDER BY T2.Year_of_Founded Desc LIMIT value",
        -1.71661376953125e-05
      ],
      [
        "SELECT Name FROM conductor ORDER BY Age Desc LIMIT value",
        -12.4425687789917
      ],
      [
        "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID ORDER BY T2.Year_of_Founded Desc",
        -12.508151054382324
      ],
      [
        "SELECT Name FROM conductor ORDER BY Year_of_Work Desc LIMIT value",
        -12.832396507263184
      ],
      [
        "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY Count ( * ) Desc LIMIT value",
        -12.874407768249512
      ],
      [
        "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Year_of_Founded = ( SELECT Max ( T2.Year_of_Founded ) FROM orchestra AS T2 ) ORDER BY T2.Year_of_Founded Desc LIMIT value",
        -13.052877426147461
      ],
      [
        "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY Sum ( T2.Year_of_Founded ) Desc LIMIT value",
        -13.191286087036133
      ],
      [
        "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID ORDER BY T2.Year_of_Founded Asc LIMIT value",
        -14.465266227722168
      ],
      [
        "SELECT T1.Name FROM conductor AS T1 UNION SELECT Max ( T2.Year_of_Founded ) FROM orchestra AS T2",
        -14.508699417114258
      ],
      [
        "SELECT Name FROM conductor",
        -14.790407180786133
      ],
      [
        "SELECT DISTINCT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID ORDER BY T2.Year_of_Founded Desc LIMIT value",
        -14.935866355895996
      ],
      [
        "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Year_of_Founded = ( SELECT Max ( T2.Year_of_Founded ) FROM orchestra AS T2 )",
        -14.953874588012695
      ],
      [
        "SELECT T1.Name FROM conductor AS T1 UNION SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Year_of_Founded = ( SELECT Max ( T2.Year_of_Founded ) FROM orchestra AS T2 )",
        -15.204934120178223
      ],
      [
        "SELECT T1.Name , T2.Record_Company FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID ORDER BY T2.Year_of_Founded Desc LIMIT value",
        -15.374616146087646
      ],
      [
        "SELECT T1.Name , T1.Age FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID ORDER BY T2.Year_of_Founded Desc LIMIT value",
        -15.459120273590088
      ],
      [
        "SELECT T1.Name , T2.Year_of_Founded FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID ORDER BY T2.Year_of_Founded Desc LIMIT value",
        -15.632134675979614
      ],
      [
        "SELECT DISTINCT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID ORDER BY T2.Year_of_Founded Desc LIMIT value",
        -16.221027374267578
      ],
      [
        "SELECT Name FROM conductor ORDER BY Count ( * ) Desc LIMIT value",
        -16.263339042663574
      ],
      [
        "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID ORDER BY DISTINCT T2.Year_of_Founded Desc LIMIT value",
        -16.28806781768799
      ],
      [
        "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded Desc LIMIT value",
        -17.425264358520508
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID ORDER BY T2.Year_of_Founded Desc LIMIT 1",
    "predicted_parse": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID ORDER BY T2.Year_of_Founded Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: for each row in conductor table , find the corresponding rows in orchestra table",
      "Step 2: find the name of the results of step 1 with largest value of year of founded"
    ],
    "template_feedback": "in step 1 , do not use the orchestra table . in step 2 , order the results by year of work in place of year of founded .",
    "primary_span": [
      [
        4,
        10
      ],
      [
        15,
        21
      ]
    ],
    "secondary_span": [
      [
        4,
        10
      ],
      [
        22,
        28
      ]
    ],
    "edits": [
      "orchestra",
      "year of work",
      "year of founded"
    ],
    "edits_original": "< from > remove orchestra </ from > < orderBy > add year of work </ orderBy > < orderBy > remove year of founded </ orderBy >"
  },
  {
    "db_id": "dog_kennels",
    "feedback": "I want date of treatment and it is okay if you don't find treatment type code.",
    "question": "What are the cost and treatment type description of each treatment?",
    "gold_parse": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code",
    "beam": [
      [
        "SELECT treatment_type_description , treatment_type_code FROM Treatment_Types",
        -0.0044345855712890625
      ],
      [
        "SELECT T2.cost_of_treatment , T1.treatment_type_description FROM Treatment_Types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code",
        -5.68406867980957
      ],
      [
        "SELECT treatment_type_description , treatment_type_description FROM Treatment_Types",
        -7.0055389404296875
      ],
      [
        "SELECT T2.cost_of_treatment , T1.treatment_type_code FROM Treatment_Types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code",
        -10.014883041381836
      ],
      [
        "SELECT T2.abandoned_yn , T1.treatment_type_description FROM Treatment_Types AS T1 JOIN Dogs AS T2 JOIN Treatments AS T3 ON T1.treatment_type_code = T3.treatment_type_code AND T3.dog_id = T2.dog_id",
        -10.306991577148438
      ],
      [
        "SELECT treatment_type_description , treatment_type_code , treatment_type_code FROM Treatment_Types",
        -11.64338493347168
      ],
      [
        "SELECT * , treatment_type_description FROM Treatment_Types",
        -12.187788963317871
      ],
      [
        "SELECT T2.dog_id , T1.treatment_type_description FROM Treatment_Types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code",
        -12.199706077575684
      ],
      [
        "SELECT T2.treatment_id , T1.treatment_type_description FROM Treatment_Types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code",
        -12.598928451538086
      ],
      [
        "SELECT treatment_type_description , treatment_type_code FROM Treatment_Types WHERE treatment_type_code = value",
        -12.685312271118164
      ],
      [
        "SELECT T1.size_description , T2.treatment_type_code FROM Sizes AS T1 JOIN Treatment_Types AS T2 JOIN Dogs AS T3 ON T1.size_code = T3.size_code JOIN Treatments AS T4 ON T3.dog_id = T4.dog_id AND T4.treatment_type_code = T2.treatment_type_code",
        -12.815972328186035
      ],
      [
        "SELECT Count ( * ) , treatment_type_description FROM Treatment_Types",
        -13.310184478759766
      ],
      [
        "SELECT treatment_type_description , treatment_type_code FROM Treatment_Types ORDER BY treatment_type_description Asc",
        -14.20950698852539
      ],
      [
        "SELECT T2.abandoned_yn , T1.treatment_type_code FROM Treatment_Types AS T1 JOIN Dogs AS T2 JOIN Treatments AS T3 ON T1.treatment_type_code = T3.treatment_type_code AND T3.dog_id = T2.dog_id",
        -14.290809631347656
      ],
      [
        "SELECT treatment_type_description FROM Treatment_Types",
        -14.43671989440918
      ],
      [
        "SELECT T1.treatment_type_description , T2.treatment_type_code FROM Treatment_Types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code",
        -14.561073303222656
      ],
      [
        "SELECT DISTINCT treatment_type_description , treatment_type_code FROM Treatment_Types",
        -14.567535400390625
      ],
      [
        "SELECT treatment_type_description , treatment_type_code FROM Treatment_Types UNION SELECT treatment_type_code FROM Treatment_Types",
        -14.569208145141602
      ],
      [
        "SELECT treatment_type_code , treatment_type_code FROM Treatment_Types",
        -14.573235511779785
      ],
      [
        "SELECT treatment_type_description , treatment_type_code FROM Treatment_Types GROUP BY treatment_type_description",
        -14.716364860534668
      ]
    ],
    "predicted_parse_with_values": "SELECT treatment_type_description , treatment_type_code FROM Treatment_Types",
    "predicted_parse": "SELECT treatment_type_description , treatment_type_code FROM Treatment_Types",
    "predicted_parse_explanation": [
      "find the treatment type description and treatment type code in treatment types table"
    ],
    "template_feedback": "additionally use the information from the treatments table besides the treatment types table . find cost of treatment in place of treatment types 's treatment type code .",
    "primary_span": [
      [
        0,
        7
      ],
      [
        14,
        17
      ]
    ],
    "secondary_span": [
      [
        8,
        13
      ],
      [
        18,
        27
      ]
    ],
    "edits": [
      "cost of treatment",
      "treatment type code",
      "treatments"
    ],
    "edits_original": "< select > add cost of treatment </ select > < select > remove treatment type code </ select > < from > add treatments </ from >"
  },
  {
    "db_id": "tvshow",
    "feedback": "Remove written by equals Michael Jelenic in step 2",
    "question": "which countries' tv channels are not playing any cartoon written by Todd Casey?",
    "gold_parse": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
    "beam": [
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value EXCEPT SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value",
        -0.5676069259643555
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value EXCEPT SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = value",
        -1.0612764358520508
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 EXCEPT SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value",
        -3.643307685852051
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = value EXCEPT SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value",
        -3.7469711303710938
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = value EXCEPT SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = value",
        -4.232841491699219
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 EXCEPT SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = value",
        -4.419533729553223
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value EXCEPT SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value AND T2.Directed_by = value",
        -4.977268218994141
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by ! = value",
        -7.54002571105957
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 WHERE T1.series_name = value EXCEPT SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value",
        -7.683320045471191
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value EXCEPT SELECT T1.Country FROM TV_Channel AS T1 WHERE T1.series_name = value",
        -8.044958114624023
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = value EXCEPT SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value AND T2.Directed_by = value",
        -8.071527481079102
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value AND T2.Directed_by = value",
        -8.080863952636719
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 WHERE T1.series_name = value EXCEPT SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = value",
        -8.29029655456543
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 WHERE T1.Language = value EXCEPT SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value",
        -8.535901069641113
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value AND T2.Directed_by ! = value",
        -9.431143283843994
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value AND T1.Content ! = value",
        -9.984705448150635
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value AND T1.series_name ! = value",
        -10.657170295715332
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by ! = value ORDER BY T1.Content Asc",
        -10.852243423461914
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by ! = value",
        -11.73004150390625
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value",
        -12.1996431350708
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = \"Michael Jelenic\" EXCEPT SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = \"Todd Casey\"",
    "predicted_parse": "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value EXCEPT SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value",
    "predicted_parse_explanation": [
      "Step 1: for each row in tv channel table , find the corresponding rows in cartoon table",
      "Step 2: find the country of the results of step 1 whose written by equals Michael Jelenic",
      "Step 3: for each row in tv channel table , find the corresponding rows in cartoon table",
      "Step 4: find the country of the results of step 3 whose written by equals Todd Casey",
      "Step 5: show the rows that are in the results of step 2 but not in the results of step 4"
    ],
    "template_feedback": "in step 1 , do not use the cartoon table . in step 2 , remove the written by equals Michael Jelenic conditions .",
    "primary_span": [
      [
        4,
        10
      ],
      [
        15,
        23
      ]
    ],
    "secondary_span": [
      [
        4,
        10
      ]
    ],
    "edits": [
      "cartoon",
      "written by equals \"Michael Jelenic\""
    ],
    "edits_original": "< from > remove cartoon </ from > < where > remove written by equals \" Michael Jelenic \" </ where >"
  },
  {
    "db_id": "real_estate_properties",
    "feedback": "Also add property type code .",
    "question": "Show the property type descriptions of properties belonging to that code.",
    "gold_parse": "SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code",
    "beam": [
      [
        "SELECT property_type_description FROM Ref_Property_Types",
        -0.00015354156494140625
      ],
      [
        "SELECT property_type_description FROM Ref_Property_Types WHERE property_type_code = value",
        -9.003016471862793
      ],
      [
        "SELECT property_feature_description FROM Other_Property_Features",
        -10.954510688781738
      ],
      [
        "SELECT property_type_description , property_type_code FROM Ref_Property_Types",
        -12.709389209747314
      ],
      [
        "SELECT property_type_description FROM Ref_Property_Types ORDER BY property_type_description Asc",
        -12.950280666351318
      ],
      [
        "SELECT property_type_description FROM Ref_Property_Types ORDER BY property_type_code Asc",
        -13.978535175323486
      ],
      [
        "SELECT DISTINCT property_type_description FROM Ref_Property_Types",
        -14.056059837341309
      ],
      [
        "SELECT T1.property_type_description FROM Ref_Property_Types AS T1 JOIN Properties AS T2 ON T1.property_type_code = T2.property_type_code WHERE T2.property_name = value",
        -14.428224086761475
      ],
      [
        "SELECT property_type_description FROM Ref_Property_Types GROUP BY property_type_description",
        -15.659165382385254
      ],
      [
        "SELECT property_type_description FROM Ref_Property_Types EXCEPT SELECT property_type_description FROM Ref_Property_Types",
        -15.702558517456055
      ],
      [
        "SELECT property_type_description FROM Ref_Property_Types UNION SELECT property_type_description FROM Ref_Property_Types",
        -16.097532272338867
      ],
      [
        "SELECT Count ( property_type_description ) FROM Ref_Property_Types",
        -16.379600524902344
      ],
      [
        "SELECT DISTINCT property_type_description FROM Ref_Property_Types",
        -16.534966468811035
      ],
      [
        "SELECT property_type_description FROM Ref_Property_Types GROUP BY property_type_description HAVING Count ( * ) = value",
        -16.56712245941162
      ],
      [
        "SELECT property_type_description FROM Ref_Property_Types",
        -16.658963203430176
      ],
      [
        "SELECT feature_description FROM Other_Available_Features",
        -17.073208808898926
      ],
      [
        "SELECT property_type_description FROM Ref_Property_Types LIMIT value",
        -17.261157035827637
      ],
      [
        "SELECT Count ( property_type_description ) FROM Ref_Property_Types",
        -17.75099468231201
      ],
      [
        "SELECT Sum ( property_type_description ) FROM Ref_Property_Types",
        -18.89492130279541
      ],
      [
        "SELECT Avg ( property_type_description ) FROM Ref_Property_Types",
        -19.30477237701416
      ]
    ],
    "predicted_parse_with_values": "SELECT property_type_description FROM Ref_Property_Types",
    "predicted_parse": "SELECT property_type_description FROM Ref_Property_Types",
    "predicted_parse_explanation": [
      "find the property type description in reference property types table"
    ],
    "template_feedback": "additionally use the information from the properties table besides the reference property types table . find for each value of properties 's property type code .",
    "primary_span": [
      [
        0,
        7
      ],
      [
        15,
        25
      ]
    ],
    "secondary_span": [
      [
        8,
        14
      ]
    ],
    "edits": [
      "properties",
      "property type code"
    ],
    "edits_original": "< from > add properties </ from > < groupBy > add property type code </ groupBy >"
  },
  {
    "db_id": "wta_1",
    "feedback": "In step 1, you should use rankings in place of matches and in the step 2, you need to determine the tour's ranking.",
    "question": "Find the first name and country code of the player who did the most number of tours.",
    "gold_parse": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1",
    "beam": [
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.loser_id ORDER BY Count ( * ) Desc LIMIT value",
        -0.09803962707519531
      ],
      [
        "SELECT first_name , country_code FROM players GROUP BY player_id ORDER BY Count ( * ) Desc LIMIT value",
        -2.4182891845703125
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.winner_id ORDER BY Count ( * ) Desc LIMIT value",
        -5.753565311431885
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.tourney_id ORDER BY Count ( * ) Desc LIMIT value",
        -7.021500587463379
      ],
      [
        "SELECT first_name , country_code FROM players GROUP BY country_code ORDER BY Count ( * ) Desc LIMIT value",
        -8.7720308303833
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T2.player_id ORDER BY Count ( * ) Desc LIMIT value",
        -10.067566871643066
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.winner_name ORDER BY Count ( * ) Desc LIMIT value",
        -10.913323402404785
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.loser_name ORDER BY Count ( * ) Desc LIMIT value",
        -11.783577919006348
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.loser_id ORDER BY Count ( * ) Desc",
        -12.20711612701416
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.loser_ioc ORDER BY Count ( * ) Desc LIMIT value",
        -12.421319961547852
      ],
      [
        "SELECT first_name , country_code FROM players ORDER BY birth_date Desc LIMIT value",
        -13.22061824798584
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.winner_entry ORDER BY Count ( * ) Desc LIMIT value",
        -13.383007049560547
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.loser_entry ORDER BY Count ( * ) Desc LIMIT value",
        -13.438858985900879
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.tourney_name ORDER BY Count ( * ) Desc LIMIT value",
        -13.704032897949219
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.loser_id",
        -13.729421615600586
      ],
      [
        "SELECT first_name , country_code FROM players GROUP BY first_name ORDER BY Count ( * ) Desc LIMIT value",
        -13.887654304504395
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.winner_ioc ORDER BY Count ( * ) Desc LIMIT value",
        -14.033651351928711
      ],
      [
        "SELECT T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.loser_id ORDER BY Count ( * ) Desc LIMIT value",
        -14.467296600341797
      ],
      [
        "SELECT first_name , country_code FROM players GROUP BY player_id ORDER BY Count ( * ) Desc",
        -14.530317306518555
      ],
      [
        "SELECT first_name , country_code FROM players",
        -18.26570224761963
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.loser_id ORDER BY Count ( * ) Desc LIMIT 1",
    "predicted_parse": "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.loser_id ORDER BY Count ( * ) Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: for each row in players table , find the corresponding rows in matches table",
      "Step 2: find the number of rows of each value of loser id of the results of step 1",
      "Step 3: find the first name and country code of the results of step 1 with largest value in the results of step 2"
    ],
    "template_feedback": "in step 1 , use rankings table in place of matches table in step 2 , do not find for each value of loser id . in step 3 , order the results by tours in place of number of rows .",
    "primary_span": [
      [
        4,
        6
      ],
      [
        16,
        25
      ],
      [
        30,
        34
      ]
    ],
    "secondary_span": [
      [
        7,
        11
      ],
      [
        35,
        41
      ]
    ],
    "edits": [
      "rankings",
      "matches",
      "loser id",
      "tours",
      "number of rows"
    ],
    "edits_original": "< from > add rankings </ from > < from > remove matches </ from > < groupBy > remove loser id </ groupBy > < orderBy > add tours </ orderBy > < orderBy > remove number of rows </ orderBy >"
  },
  {
    "db_id": "world_1",
    "feedback": "Replace name name , country table , continent with language , countrylanguage table and head of state respectively . verify is official equals T .",
    "question": "What is the official language used in the country the name of whose head of state is Beatrix.",
    "gold_parse": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"",
    "beam": [
      [
        "SELECT Name FROM country WHERE Continent = value",
        -0.11458015441894531
      ],
      [
        "SELECT Name FROM country WHERE Name = value",
        -3.107250213623047
      ],
      [
        "SELECT Code2 FROM country WHERE Continent = value",
        -3.381686210632324
      ],
      [
        "SELECT LocalName FROM country WHERE Continent = value",
        -4.245639801025391
      ],
      [
        "SELECT Name FROM country WHERE LocalName = value",
        -4.472731590270996
      ],
      [
        "SELECT Code2 FROM country WHERE Name = value",
        -6.412620544433594
      ],
      [
        "SELECT Continent FROM country WHERE Continent = value",
        -7.121368885040283
      ],
      [
        "SELECT LocalName FROM country WHERE Name = value",
        -7.226544380187988
      ],
      [
        "SELECT Code2 FROM country WHERE LocalName = value",
        -8.005491256713867
      ],
      [
        "SELECT LocalName FROM country WHERE LocalName = value",
        -8.781742095947266
      ],
      [
        "SELECT Continent FROM country WHERE Name = value",
        -10.066227436065674
      ],
      [
        "SELECT Name FROM country WHERE Name LIKE value",
        -10.556431770324707
      ],
      [
        "SELECT Name , Continent FROM country WHERE Continent = value",
        -10.89328384399414
      ],
      [
        "SELECT Continent FROM country WHERE LocalName = value",
        -11.583787441253662
      ],
      [
        "SELECT Code2 FROM country WHERE Name LIKE value",
        -11.663545608520508
      ],
      [
        "SELECT HeadOfState FROM country WHERE Continent = value",
        -11.874731063842773
      ],
      [
        "SELECT Name FROM country WHERE Continent LIKE value",
        -12.274822235107422
      ],
      [
        "SELECT T2.Name FROM sqlite_sequence AS T1 JOIN country AS T2 WHERE T1.name = value",
        -12.520919799804688
      ],
      [
        "SELECT Code2 FROM country WHERE Continent LIKE value",
        -13.152799606323242
      ],
      [
        "SELECT Name FROM country",
        -14.708425521850586
      ]
    ],
    "predicted_parse_with_values": "SELECT Name FROM country WHERE Continent = \"Beatrix\"",
    "predicted_parse": "SELECT Name FROM country WHERE Continent = value",
    "predicted_parse_explanation": [
      "find the name in country table whose continent equals Beatrix"
    ],
    "template_feedback": "additionally use the information from the countrylanguage table besides the country table . consider the head of state equals Beatrix and is official equals T conditions in place of the continent equals Beatrix conditions . find language in place of name .",
    "primary_span": [
      [
        0,
        7
      ],
      [
        13,
        25
      ],
      [
        35,
        36
      ]
    ],
    "secondary_span": [
      [
        8,
        12
      ],
      [
        26,
        34
      ],
      [
        37,
        41
      ]
    ],
    "edits": [
      "language",
      "name",
      "countrylanguage",
      "head of state equals \"Beatrix\"",
      "is official equals \"T\"",
      "continent equals \"Beatrix\""
    ],
    "edits_original": "< select > add language </ select > < select > remove name </ select > < from > add countrylanguage </ from > < where > add head of state equals \" Beatrix \" </ where > < where > add is official equals \" T \" </ where > < where > remove continent equals \" Beatrix \" </ where >"
  },
  {
    "db_id": "car_1",
    "feedback": "you need to replace accelerate with mpg.",
    "question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?",
    "gold_parse": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4",
    "beam": [
      [
        "SELECT Avg ( Accelerate ) FROM cars_data WHERE Cylinders = value",
        -0.3744215965270996
      ],
      [
        "SELECT Avg ( Horsepower ) FROM cars_data WHERE Cylinders = value",
        -1.4878735542297363
      ],
      [
        "SELECT Avg ( Horsepower ) FROM cars_data WHERE Cylinders < value",
        -2.7731375694274902
      ],
      [
        "SELECT Avg ( Accelerate ) FROM cars_data WHERE Cylinders < value",
        -4.853359222412109
      ],
      [
        "SELECT Avg ( Horsepower ) FROM cars_data WHERE Cylinders > value",
        -5.370218753814697
      ],
      [
        "SELECT Avg ( Weight ) FROM cars_data WHERE Cylinders < value",
        -5.372397422790527
      ],
      [
        "SELECT Avg ( Weight ) FROM cars_data WHERE Cylinders = value",
        -5.8354692459106445
      ],
      [
        "SELECT Avg ( Accelerate ) FROM cars_data WHERE Cylinders > value",
        -6.048009872436523
      ],
      [
        "SELECT Avg ( * ) FROM cars_data WHERE Cylinders = value",
        -8.368486881256104
      ],
      [
        "SELECT Avg ( Accelerate ) FROM cars_data WHERE Year = value",
        -8.442575454711914
      ],
      [
        "SELECT Avg ( T3.Accelerate ) FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T1.Model = value",
        -8.577630996704102
      ],
      [
        "SELECT Avg ( Cylinders ) FROM cars_data WHERE Cylinders = value",
        -8.73872995376587
      ],
      [
        "SELECT Avg ( Weight ) FROM cars_data WHERE Cylinders > value",
        -9.199637413024902
      ],
      [
        "SELECT Avg ( * ) FROM cars_data WHERE Cylinders < value",
        -9.257481098175049
      ],
      [
        "SELECT Avg ( Horsepower ) FROM cars_data WHERE Cylinders = value AND Cylinders = value",
        -9.553493022918701
      ],
      [
        "SELECT Avg ( Horsepower ) FROM cars_data WHERE Year = value",
        -9.697568416595459
      ],
      [
        "SELECT Avg ( Accelerate ) FROM cars_data WHERE Cylinders = value AND Cylinders = value",
        -10.017109394073486
      ],
      [
        "SELECT Avg ( T3.Horsepower ) FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T1.Model = value",
        -10.02323865890503
      ],
      [
        "SELECT Avg ( T3.Accelerate ) FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T1.ModelId = value",
        -10.200702667236328
      ],
      [
        "SELECT Avg ( Horsepower ) FROM cars_data WHERE Cylinders > = value",
        -10.228630542755127
      ]
    ],
    "predicted_parse_with_values": "SELECT Avg ( Accelerate ) FROM cars_data WHERE Cylinders = 4",
    "predicted_parse": "SELECT Avg ( Accelerate ) FROM cars_data WHERE Cylinders = value",
    "predicted_parse_explanation": [
      "find the average accelerate in cars data table whose cylinders equals 4"
    ],
    "template_feedback": "find average mpg in place of average accelerate .",
    "primary_span": [
      [
        0,
        2
      ]
    ],
    "secondary_span": [
      [
        3,
        8
      ]
    ],
    "edits": [
      "average mpg",
      "average accelerate"
    ],
    "edits_original": "< select > add average mpg </ select > < select > remove average accelerate </ select >"
  },
  {
    "db_id": "tvshow",
    "feedback": "In step 2, You should drop written by whose value is Michael Jelenic.",
    "question": "which countries' tv channels are not playing any cartoon written by Todd Casey?",
    "gold_parse": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
    "beam": [
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value EXCEPT SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value",
        -0.5676069259643555
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value EXCEPT SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = value",
        -1.0612764358520508
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 EXCEPT SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value",
        -3.643307685852051
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = value EXCEPT SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value",
        -3.7469711303710938
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = value EXCEPT SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = value",
        -4.232841491699219
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 EXCEPT SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = value",
        -4.419533729553223
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value EXCEPT SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value AND T2.Directed_by = value",
        -4.977268218994141
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by ! = value",
        -7.54002571105957
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 WHERE T1.series_name = value EXCEPT SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value",
        -7.683320045471191
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value EXCEPT SELECT T1.Country FROM TV_Channel AS T1 WHERE T1.series_name = value",
        -8.044958114624023
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = value EXCEPT SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value AND T2.Directed_by = value",
        -8.071527481079102
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value AND T2.Directed_by = value",
        -8.080863952636719
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 WHERE T1.series_name = value EXCEPT SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = value",
        -8.29029655456543
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 WHERE T1.Language = value EXCEPT SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value",
        -8.535901069641113
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value AND T2.Directed_by ! = value",
        -9.431143283843994
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value AND T1.Content ! = value",
        -9.984705448150635
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value AND T1.series_name ! = value",
        -10.657170295715332
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by ! = value ORDER BY T1.Content Asc",
        -10.852243423461914
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by ! = value",
        -11.73004150390625
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value",
        -12.1996431350708
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = \"Michael Jelenic\" EXCEPT SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = \"Todd Casey\"",
    "predicted_parse": "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value EXCEPT SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value",
    "predicted_parse_explanation": [
      "Step 1: for each row in tv channel table , find the corresponding rows in cartoon table",
      "Step 2: find the country of the results of step 1 whose written by equals Michael Jelenic",
      "Step 3: for each row in tv channel table , find the corresponding rows in cartoon table",
      "Step 4: find the country of the results of step 3 whose written by equals Todd Casey",
      "Step 5: show the rows that are in the results of step 2 but not in the results of step 4"
    ],
    "template_feedback": "in step 1 , do not use the cartoon table . in step 2 , remove the written by equals Michael Jelenic conditions .",
    "primary_span": [
      [
        4,
        10
      ],
      [
        15,
        23
      ]
    ],
    "secondary_span": [
      [
        4,
        10
      ]
    ],
    "edits": [
      "cartoon",
      "written by equals \"Michael Jelenic\""
    ],
    "edits_original": "< from > remove cartoon </ from > < where > remove written by equals \" Michael Jelenic \" </ where >"
  },
  {
    "db_id": "car_1",
    "feedback": "Substitute countries table in place of continents table .",
    "question": "How many countries are listed?",
    "gold_parse": "SELECT count(*) FROM COUNTRIES",
    "beam": [
      [
        "SELECT Count ( * ) FROM continents",
        -8.0108642578125e-05
      ],
      [
        "SELECT Count ( DISTINCT Country ) FROM car_makers",
        -9.70834732055664
      ],
      [
        "SELECT Sum ( * ) FROM continents",
        -12.305557012557983
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM continents",
        -13.19533920288086
      ],
      [
        "SELECT Sum ( CountryId ) FROM countries",
        -13.21297311782837
      ],
      [
        "SELECT Sum ( CountryName ) FROM countries",
        -13.270373582839966
      ],
      [
        "SELECT Sum ( Continent ) FROM countries",
        -13.957758903503418
      ],
      [
        "SELECT Count ( * ) FROM car_makers GROUP BY Country",
        -14.11003828048706
      ],
      [
        "SELECT Count ( * ) FROM countries WHERE CountryName = value",
        -14.26592555642128
      ],
      [
        "SELECT Count ( * ) , Country FROM car_makers",
        -14.320509850978851
      ],
      [
        "SELECT Count ( Count ( * ) ) FROM continents",
        -15.010566711425781
      ],
      [
        "SELECT Count ( * ) FROM countries ORDER BY CountryId Desc LIMIT value",
        -15.283901780843735
      ],
      [
        "SELECT Avg ( * ) FROM continents",
        -15.489896059036255
      ],
      [
        "SELECT Count ( * ) , Count ( * ) FROM continents",
        -15.633842468261719
      ],
      [
        "SELECT Avg ( CountryId ) FROM countries",
        -15.78449034690857
      ],
      [
        "SELECT Sum ( Country ) FROM car_makers",
        -15.85370683670044
      ],
      [
        "SELECT Avg ( CountryName ) FROM countries",
        -16.244167804718018
      ],
      [
        "SELECT Avg ( Continent ) FROM countries",
        -16.351184606552124
      ],
      [
        "SELECT Count ( * ) FROM continents LIMIT value",
        -16.841468811035156
      ],
      [
        "SELECT Sum ( Continent ) FROM continents",
        -16.893025875091553
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM continents",
    "predicted_parse": "SELECT Count ( * ) FROM continents",
    "predicted_parse_explanation": [
      "find the number of rows in continents table"
    ],
    "template_feedback": "use countries table in place of continents table .",
    "primary_span": [
      [
        0,
        2
      ]
    ],
    "secondary_span": [
      [
        3,
        8
      ]
    ],
    "edits": [
      "countries",
      "continents"
    ],
    "edits_original": "< from > add countries </ from > < from > remove continents </ from >"
  },
  {
    "db_id": "dog_kennels",
    "feedback": "I want you to confirm that the dog id from dog table is available in treatments table.",
    "question": "Find the average age of the dogs who went through treatments.",
    "gold_parse": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
    "beam": [
      [
        "SELECT Avg ( age ) FROM Dogs",
        -0.0006380081176757812
      ],
      [
        "SELECT Avg ( date_of_birth ) FROM Dogs",
        -7.897087097167969
      ],
      [
        "SELECT Avg ( T1.age ) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T2.treatment_type_code = value",
        -8.372203826904297
      ],
      [
        "SELECT Avg ( age ) FROM Dogs WHERE gender = value",
        -10.727229118347168
      ],
      [
        "SELECT Avg ( age ) , Avg ( age ) FROM Dogs",
        -13.323116302490234
      ],
      [
        "SELECT Avg ( age ) FROM Dogs ORDER BY age Asc LIMIT value",
        -13.61880111694336
      ],
      [
        "SELECT Avg ( age ) FROM Dogs WHERE name = value",
        -13.901647090911865
      ],
      [
        "SELECT Avg ( date_adopted ) FROM Dogs",
        -14.050982475280762
      ],
      [
        "SELECT Avg ( age ) FROM Dogs WHERE breed_code = value",
        -14.102643489837646
      ],
      [
        "SELECT Avg ( T1.age ) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id GROUP BY T2.dog_id",
        -14.355793952941895
      ],
      [
        "SELECT DISTINCT Avg ( age ) FROM Dogs",
        -14.400505065917969
      ],
      [
        "SELECT Count ( age ) FROM Dogs",
        -14.50312614440918
      ],
      [
        "SELECT Avg ( T1.age ) FROM Dogs AS T1 WHERE T1.dog_id = ( SELECT T2.dog_id FROM Treatments AS T2 )",
        -15.091273784637451
      ],
      [
        "SELECT Avg ( age ) FROM Dogs WHERE weight = value",
        -15.263261318206787
      ],
      [
        "SELECT Avg ( age ) , dog_id FROM Dogs",
        -15.408373832702637
      ],
      [
        "SELECT Avg ( date_departed ) FROM Dogs",
        -16.312663078308105
      ],
      [
        "SELECT Avg ( date_arrived ) FROM Dogs",
        -16.439692497253418
      ],
      [
        "SELECT Sum ( age ) FROM Dogs",
        -16.712943077087402
      ],
      [
        "SELECT Avg ( age ) FROM Dogs LIMIT value",
        -16.732077598571777
      ],
      [
        "SELECT Avg ( Count ( age ) ) FROM Dogs",
        -16.85429286956787
      ]
    ],
    "predicted_parse_with_values": "SELECT Avg ( age ) FROM Dogs",
    "predicted_parse": "SELECT Avg ( age ) FROM Dogs",
    "predicted_parse_explanation": [
      "find the average age in dogs table"
    ],
    "template_feedback": "additionally make sure that dog id is one of treatments 's dog id treatments .",
    "primary_span": [
      [
        0,
        14
      ]
    ],
    "secondary_span": [],
    "edits": [
      "dog id one of SUBS1",
      "dog id",
      "treatments"
    ],
    "edits_original": "< where > add dog id one of SUBS1 </ where > < select > add dog id </ select > < from > add treatments </ from >"
  },
  {
    "db_id": "student_transcripts_tracking",
    "feedback": "Id of course from course table should be available in course id of student enrolment course table.",
    "question": "What are the names of all courses that have some students enrolled?",
    "gold_parse": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id",
    "beam": [
      [
        "SELECT course_name FROM Courses",
        -0.023763656616210938
      ],
      [
        "SELECT DISTINCT course_name FROM Courses",
        -3.75264310836792
      ],
      [
        "SELECT T1.course_name FROM Courses AS T1 JOIN Degree_Programs AS T2 JOIN Student_Enrolment AS T3 ON T3.degree_program_id = T2.degree_program_id JOIN Student_Enrolment_Courses AS T4 ON T1.course_id = T4.course_id AND T4.student_enrolment_id = T3.student_enrolment_id WHERE T2.degree_summary_name = value",
        -11.562854826450348
      ],
      [
        "SELECT T1.course_name FROM Courses AS T1 JOIN Semesters AS T2 JOIN Student_Enrolment AS T3 ON T3.semester_id = T2.semester_id JOIN Student_Enrolment_Courses AS T4 ON T1.course_id = T4.course_id AND T4.student_enrolment_id = T3.student_enrolment_id WHERE T2.semester_name = value",
        -12.281922578811646
      ],
      [
        "SELECT course_name FROM Courses INTERSECT SELECT course_name FROM Courses",
        -12.827349662780762
      ],
      [
        "SELECT course_name FROM Courses EXCEPT SELECT course_name FROM Courses",
        -13.703542709350586
      ],
      [
        "SELECT course_name FROM Courses WHERE course_description = value",
        -14.038986921310425
      ],
      [
        "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id WHERE T2.student_enrolment_id = value",
        -14.058319807052612
      ],
      [
        "SELECT course_name FROM Courses GROUP BY course_name HAVING Count ( * ) = value",
        -14.11402416229248
      ],
      [
        "SELECT DISTINCT course_name FROM Courses",
        -14.283135414123535
      ],
      [
        "SELECT T1.course_name , T2.degree_summary_name FROM Courses AS T1 JOIN Degree_Programs AS T2 JOIN Student_Enrolment AS T3 ON T3.degree_program_id = T2.degree_program_id JOIN Student_Enrolment_Courses AS T4 ON T1.course_id = T4.course_id AND T4.student_enrolment_id = T3.student_enrolment_id",
        -14.354419887065887
      ],
      [
        "SELECT T1.course_name FROM Courses AS T1 JOIN Students AS T2 JOIN Student_Enrolment AS T3 ON T3.student_id = T2.student_id JOIN Student_Enrolment_Courses AS T4 ON T1.course_id = T4.course_id AND T4.student_enrolment_id = T3.student_enrolment_id WHERE T2.ssn = value",
        -14.871387243270874
      ],
      [
        "SELECT T1.course_name FROM Courses AS T1 JOIN Semesters AS T2 JOIN Student_Enrolment AS T3 ON T3.semester_id = T2.semester_id JOIN Student_Enrolment_Courses AS T4 ON T1.course_id = T4.course_id AND T4.student_enrolment_id = T3.student_enrolment_id WHERE T2.semester_description = value",
        -15.335835456848145
      ],
      [
        "SELECT course_name FROM Courses UNION SELECT course_name FROM Courses",
        -15.498984336853027
      ],
      [
        "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment AS T2 JOIN Student_Enrolment_Courses AS T3 ON T1.course_id = T3.course_id AND T3.student_enrolment_id = T2.student_enrolment_id WHERE T2.student_id = value",
        -15.552769184112549
      ],
      [
        "SELECT Count ( DISTINCT course_name ) FROM Courses",
        -16.837276458740234
      ],
      [
        "SELECT course_name FROM Courses LIMIT value",
        -17.191564559936523
      ],
      [
        "SELECT Count ( * ) FROM Addresses",
        -17.540230751037598
      ],
      [
        "SELECT degree_summary_name FROM Degree_Programs",
        -17.6543607711792
      ],
      [
        "SELECT Count ( course_name ) FROM Courses",
        -17.746272087097168
      ]
    ],
    "predicted_parse_with_values": "SELECT course_name FROM Courses",
    "predicted_parse": "SELECT course_name FROM Courses",
    "predicted_parse_explanation": [
      "find the course name in courses table"
    ],
    "template_feedback": "additionally use the information from the student enrolment courses table besides the courses table . make sure no repetition in the results .",
    "primary_span": [
      [
        0,
        9
      ],
      [
        15,
        22
      ]
    ],
    "secondary_span": [
      [
        10,
        14
      ]
    ],
    "edits": [
      "distinct",
      "student enrolment courses"
    ],
    "edits_original": "< select > add distinct </ select > < from > add student enrolment courses </ from >"
  },
  {
    "db_id": "world_1",
    "feedback": "i want life expectancy and make sure to search for name as brazil.",
    "question": "Give me Brazil's population and life expectancies.",
    "gold_parse": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"",
    "beam": [
      [
        "SELECT Population , Continent FROM country",
        -0.6322650909423828
      ],
      [
        "SELECT Population , LifeExpectancy FROM country",
        -0.7680835723876953
      ],
      [
        "SELECT Population , GNPOld FROM country",
        -5.526811599731445
      ],
      [
        "SELECT Population , Population FROM country",
        -8.114880561828613
      ],
      [
        "SELECT Population , Capital FROM country",
        -8.590777397155762
      ],
      [
        "SELECT LifeExpectancy , Continent FROM country",
        -9.126137733459473
      ],
      [
        "SELECT Population , LifeExpectancy FROM country WHERE Continent = value",
        -9.93244457244873
      ],
      [
        "SELECT Continent , LifeExpectancy FROM country",
        -10.980881690979004
      ],
      [
        "SELECT Population , Continent , Continent FROM country",
        -11.154058456420898
      ],
      [
        "SELECT Population , Continent , GNPOld FROM country",
        -11.522690773010254
      ],
      [
        "SELECT Population , Continent FROM country WHERE Continent = value",
        -11.539617538452148
      ],
      [
        "SELECT Population , LifeExpectancy , Continent FROM country",
        -11.7272367477417
      ],
      [
        "SELECT Population , GNP FROM country",
        -11.849504470825195
      ],
      [
        "SELECT Continent , GNPOld FROM country",
        -12.273805618286133
      ],
      [
        "SELECT Continent , Continent FROM country",
        -12.27697467803955
      ],
      [
        "SELECT Sum ( Population ) , Continent FROM country",
        -13.836297035217285
      ],
      [
        "SELECT Population FROM country",
        -13.899272918701172
      ],
      [
        "SELECT LifeExpectancy , LifeExpectancy FROM country",
        -14.029460906982422
      ],
      [
        "SELECT Count ( Population ) , Continent FROM country",
        -14.654969215393066
      ],
      [
        "SELECT GNP , Continent FROM country",
        -14.754289627075195
      ]
    ],
    "predicted_parse_with_values": "SELECT Population , Continent FROM country",
    "predicted_parse": "SELECT Population , Continent FROM country",
    "predicted_parse_explanation": [
      "find the population and continent in country table"
    ],
    "template_feedback": "additionally make sure that name equals Brazil . find life expectancy in place of continent .",
    "primary_span": [
      [
        0,
        7
      ],
      [
        8,
        10
      ]
    ],
    "secondary_span": [
      [
        11,
        15
      ]
    ],
    "edits": [
      "life expectancy",
      "continent",
      "name equals \"Brazil\""
    ],
    "edits_original": "< select > add life expectancy </ select > < select > remove continent </ select > < where > add name equals \" Brazil \" </ where >"
  },
  {
    "db_id": "wta_1",
    "feedback": "You should supersede smallest value of winner rank with largest value of winner rank points.",
    "question": "What is the first name, country code, and birth date of the player with the most winner rank points across all matches?",
    "gold_parse": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1",
    "beam": [
      [
        "SELECT T1.first_name , T1.country_code , T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.winner_rank Asc LIMIT value",
        -1.0453262329101562
      ],
      [
        "SELECT T1.first_name , T1.country_code , T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.winner_rank_points Asc LIMIT value",
        -1.428898811340332
      ],
      [
        "SELECT T1.first_name , T1.country_code , T2.loser_age FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.winner_rank Asc LIMIT value",
        -1.996042251586914
      ],
      [
        "SELECT T1.first_name , T1.country_code , T2.loser_age FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.winner_rank_points Asc LIMIT value",
        -2.3963747024536133
      ],
      [
        "SELECT T1.first_name , T1.country_code , T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.loser_rank Asc LIMIT value",
        -2.9868555068969727
      ],
      [
        "SELECT T1.first_name , T1.country_code , T2.loser_age FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.winner_rank_points Desc LIMIT value",
        -3.460378646850586
      ],
      [
        "SELECT T1.first_name , T1.country_code , T2.loser_age FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.winner_rank Desc LIMIT value",
        -3.7744007110595703
      ],
      [
        "SELECT T1.first_name , T1.country_code , T2.loser_age FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.loser_rank Asc LIMIT value",
        -3.90340518951416
      ],
      [
        "SELECT T1.first_name , T1.country_code , T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.loser_rank_points Asc LIMIT value",
        -4.012233734130859
      ],
      [
        "SELECT T1.first_name , T1.country_code , T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.winner_rank_points Desc LIMIT value",
        -4.252184867858887
      ],
      [
        "SELECT T1.first_name , T1.country_code , T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.winner_rank Desc LIMIT value",
        -4.668242454528809
      ],
      [
        "SELECT T1.first_name , T1.country_code , T2.loser_age FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.loser_rank_points Asc LIMIT value",
        -4.950719833374023
      ],
      [
        "SELECT T1.first_name , T1.country_code , T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.score Asc LIMIT value",
        -6.259014129638672
      ],
      [
        "SELECT T1.first_name , T1.country_code , T2.loser_age FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.loser_rank_points Desc LIMIT value",
        -6.549989700317383
      ],
      [
        "SELECT T1.first_name , T1.country_code , T2.loser_age FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.loser_rank Desc LIMIT value",
        -6.758214950561523
      ],
      [
        "SELECT T1.first_name , T1.country_code , T2.loser_age FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.score Asc LIMIT value",
        -7.177562713623047
      ],
      [
        "SELECT T1.first_name , T1.country_code , T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.loser_rank_points Desc LIMIT value",
        -7.343932151794434
      ],
      [
        "SELECT T1.first_name , T1.country_code , T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.loser_rank Desc LIMIT value",
        -7.715664863586426
      ],
      [
        "SELECT T1.first_name , T1.country_code , T3.ranking_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id JOIN rankings AS T3 ON T1.player_id = T3.player_id ORDER BY T2.winner_rank Asc LIMIT value",
        -8.141003608703613
      ],
      [
        "SELECT T1.first_name , T1.country_code , T2.tourney_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.winner_rank Asc LIMIT value",
        -8.369974136352539
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.first_name , T1.country_code , T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.winner_rank Asc LIMIT 1",
    "predicted_parse": "SELECT T1.first_name , T1.country_code , T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.winner_rank Asc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: for each row in players table , find the corresponding rows in matches table",
      "Step 2: find the first name , country code , birth date of the results of step 1 with smallest value of winner rank"
    ],
    "template_feedback": "in step 2 , order the results descending by winner rank points in place of ordering ascending by winner rank .",
    "primary_span": [
      [
        4,
        11
      ]
    ],
    "secondary_span": [
      [
        12,
        20
      ]
    ],
    "edits": [
      "winner rank points",
      "descending",
      "winner rank"
    ],
    "edits_original": "< orderBy > add winner rank points </ orderBy > < orderBy > add descending </ orderBy > < orderBy > remove winner rank </ orderBy >"
  },
  {
    "db_id": "car_1",
    "feedback": "replace average horsepower with average of edispl and use car names's model.",
    "question": "What is the average edispl of the cars of model volvo?",
    "gold_parse": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'",
    "beam": [
      [
        "SELECT Avg ( Horsepower ) FROM cars_data WHERE Year = value",
        -0.6233232021331787
      ],
      [
        "SELECT Avg ( Edispl ) FROM cars_data WHERE Year = value",
        -1.7491072416305542
      ],
      [
        "SELECT Avg ( Weight ) FROM cars_data WHERE Year = value",
        -1.7668756246566772
      ],
      [
        "SELECT Avg ( Cylinders ) FROM cars_data WHERE Year = value",
        -2.3785414695739746
      ],
      [
        "SELECT Avg ( * ) FROM cars_data WHERE Year = value",
        -4.087771415710449
      ],
      [
        "SELECT Avg ( MPG ) FROM cars_data WHERE Year = value",
        -5.332670211791992
      ],
      [
        "SELECT Avg ( Accelerate ) FROM cars_data WHERE Year = value",
        -6.330205917358398
      ],
      [
        "SELECT Avg ( Year ) FROM cars_data WHERE Year = value",
        -6.396514415740967
      ],
      [
        "SELECT Avg ( T1.ModelId ) FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T3.Year = value",
        -7.154226303100586
      ],
      [
        "SELECT Avg ( T1.Maker ) FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T3.Year = value",
        -9.26423454284668
      ],
      [
        "SELECT Avg ( T3.Horsepower ) FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T1.Model = value",
        -9.525283575057983
      ],
      [
        "SELECT Avg ( T1.FullName ) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id WHERE T4.Year = value",
        -9.725748062133789
      ],
      [
        "SELECT Avg ( T1.Make ) FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T2.Year = value",
        -10.007474899291992
      ],
      [
        "SELECT Avg ( T3.Cylinders ) FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T1.Model = value",
        -10.195094585418701
      ],
      [
        "SELECT Avg ( T1.Continent ) FROM continents AS T1 JOIN countries AS T2 ON T1.ContId = T2.Continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country JOIN model_list AS T4 ON T3.Id = T4.Maker JOIN car_names AS T5 ON T4.Model = T5.Model JOIN cars_data AS T6 ON T5.MakeId = T6.Id WHERE T6.Year = value",
        -10.209786415100098
      ],
      [
        "SELECT Avg ( T1.Maker ) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id WHERE T4.Year = value",
        -10.373047828674316
      ],
      [
        "SELECT Avg ( T1.MakeId ) FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T2.Year = value",
        -10.768381118774414
      ],
      [
        "SELECT Avg ( T1.Model ) FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T3.Year = value",
        -10.781336784362793
      ],
      [
        "SELECT Avg ( T1.Id ) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id WHERE T4.Year = value",
        -10.862610816955566
      ],
      [
        "SELECT Count ( * ) FROM cars_data WHERE Year = value",
        -11.07546329498291
      ]
    ],
    "predicted_parse_with_values": "SELECT Avg ( Horsepower ) FROM cars_data WHERE Year = \"volvo\"",
    "predicted_parse": "SELECT Avg ( Horsepower ) FROM cars_data WHERE Year = value",
    "predicted_parse_explanation": [
      "find the average horsepower in cars data table whose year equals volvo"
    ],
    "template_feedback": "additionally use the information from the car names table besides the cars data table . consider the model equals volvo conditions in place of the year equals volvo conditions . find average edispl in place of average horsepower .",
    "primary_span": [
      [
        0,
        8
      ],
      [
        15,
        20
      ],
      [
        30,
        32
      ]
    ],
    "secondary_span": [
      [
        9,
        14
      ],
      [
        21,
        29
      ],
      [
        33,
        38
      ]
    ],
    "edits": [
      "average edispl",
      "average horsepower",
      "car names",
      "model equals \"volvo\"",
      "year equals \"volvo\""
    ],
    "edits_original": "< select > add average edispl </ select > < select > remove average horsepower </ select > < from > add car names </ from > < where > add model equals \" volvo \" </ where > < where > remove year equals \" volvo \" </ where >"
  },
  {
    "db_id": "world_1",
    "feedback": "you should use total population instead of average population. also government form should be us territory not continent.",
    "question": "What is the average GNP and total population in all nations whose government is US territory?",
    "gold_parse": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"",
    "beam": [
      [
        "SELECT Avg ( GNP ) , Avg ( Population ) FROM country WHERE Continent = value",
        -0.7094917297363281
      ],
      [
        "SELECT Avg ( GNP ) , Avg ( LifeExpectancy ) FROM country WHERE Continent = value",
        -1.181772232055664
      ],
      [
        "SELECT Avg ( GNP ) , Avg ( GNPOld ) FROM country WHERE Continent = value",
        -1.854736328125
      ],
      [
        "SELECT Avg ( GNP ) , Avg ( Population ) FROM country",
        -4.2104644775390625
      ],
      [
        "SELECT Avg ( GNP ) , Avg ( LifeExpectancy ) FROM country",
        -4.790388107299805
      ],
      [
        "SELECT Avg ( GNP ) , Avg ( GNPOld ) FROM country",
        -5.511762619018555
      ],
      [
        "SELECT Avg ( GNP ) , Avg ( Population ) FROM country GROUP BY GovernmentForm",
        -6.220905303955078
      ],
      [
        "SELECT Avg ( GNP ) , Sum ( Population ) FROM country",
        -6.292924880981445
      ],
      [
        "SELECT Avg ( GNP ) , Avg ( Population ) , GovernmentForm FROM country GROUP BY GovernmentForm",
        -6.350518226623535
      ],
      [
        "SELECT Avg ( GNP ) , Avg ( LifeExpectancy ) FROM country GROUP BY GovernmentForm",
        -6.666109085083008
      ],
      [
        "SELECT Avg ( GNP ) , Avg ( LifeExpectancy ) , GovernmentForm FROM country GROUP BY GovernmentForm",
        -6.801929473876953
      ],
      [
        "SELECT Avg ( GNP ) , Sum ( LifeExpectancy ) FROM country",
        -6.8743743896484375
      ],
      [
        "SELECT Avg ( GNP ) , Avg ( Population ) FROM country WHERE GovernmentForm = value",
        -6.900954246520996
      ],
      [
        "SELECT Avg ( GNP ) , Avg ( Population ) FROM country GROUP BY Continent",
        -7.129888534545898
      ],
      [
        "SELECT Avg ( GNP ) , Avg ( LifeExpectancy ) FROM country WHERE GovernmentForm = value",
        -7.353750228881836
      ],
      [
        "SELECT Avg ( GNP ) , Sum ( GNPOld ) FROM country",
        -7.472251892089844
      ],
      [
        "SELECT Avg ( GNP ) , Avg ( GNPOld ) FROM country GROUP BY GovernmentForm",
        -7.532079696655273
      ],
      [
        "SELECT Avg ( GNP ) , Avg ( LifeExpectancy ) FROM country GROUP BY Continent",
        -7.587650299072266
      ],
      [
        "SELECT Avg ( GNP ) , Avg ( GNPOld ) , GovernmentForm FROM country GROUP BY GovernmentForm",
        -7.72343635559082
      ],
      [
        "SELECT Avg ( GNP ) , Avg ( GNPOld ) FROM country WHERE GovernmentForm = value",
        -7.801552772521973
      ]
    ],
    "predicted_parse_with_values": "SELECT Avg ( GNP ) , Avg ( Population ) FROM country WHERE Continent = \"US Territory\"",
    "predicted_parse": "SELECT Avg ( GNP ) , Avg ( Population ) FROM country WHERE Continent = value",
    "predicted_parse_explanation": [
      "find the average gnp and average population in country table whose continent equals US Territory"
    ],
    "template_feedback": "consider the government form equals US Territory conditions in place of the continent equals US Territory conditions . find summation of population in place of average population .",
    "primary_span": [
      [
        0,
        7
      ],
      [
        18,
        21
      ]
    ],
    "secondary_span": [
      [
        8,
        17
      ],
      [
        22,
        27
      ]
    ],
    "edits": [
      "summation of population",
      "average population",
      "government form equals \"US Territory\"",
      "continent equals \"US Territory\""
    ],
    "edits_original": "< select > add summation of population </ select > < select > remove average population </ select > < where > add government form equals \" US Territory \" </ where > < where > remove continent equals \" US Territory \" </ where >"
  },
  {
    "db_id": "flight_2",
    "feedback": "The city must be of a source airport in flights",
    "question": "Which city is the most frequent source airport?",
    "gold_parse": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
    "beam": [
      [
        "SELECT City FROM airports GROUP BY City ORDER BY Count ( * ) Desc LIMIT value",
        -0.021892547607421875
      ],
      [
        "SELECT AirportName FROM airports GROUP BY City ORDER BY Count ( * ) Desc LIMIT value",
        -3.838608741760254
      ],
      [
        "SELECT City FROM airports GROUP BY AirportCode ORDER BY Count ( * ) Desc LIMIT value",
        -9.226689338684082
      ],
      [
        "SELECT City FROM airports GROUP BY AirportName ORDER BY Count ( * ) Desc LIMIT value",
        -10.747693061828613
      ],
      [
        "SELECT City FROM airports GROUP BY City ORDER BY Count ( * ) Desc",
        -12.724441528320312
      ],
      [
        "SELECT AirportName , City FROM airports GROUP BY City ORDER BY Count ( * ) Desc LIMIT value",
        -12.893881797790527
      ],
      [
        "SELECT AirportName FROM airports GROUP BY AirportCode ORDER BY Count ( * ) Desc LIMIT value",
        -13.14274787902832
      ],
      [
        "SELECT City , City FROM airports GROUP BY City ORDER BY Count ( * ) Desc LIMIT value",
        -13.336819648742676
      ],
      [
        "SELECT City FROM airports GROUP BY City",
        -13.95412540435791
      ],
      [
        "SELECT DISTINCT City FROM airports GROUP BY City ORDER BY Count ( * ) Desc LIMIT value",
        -14.048391342163086
      ],
      [
        "SELECT AirportName FROM airports GROUP BY AirportName ORDER BY Count ( * ) Desc LIMIT value",
        -14.11272144317627
      ],
      [
        "SELECT City FROM airports GROUP BY City ORDER BY Count ( * ) Asc LIMIT value",
        -14.368102073669434
      ],
      [
        "SELECT Count ( AirportName ) FROM airports GROUP BY City ORDER BY Count ( * ) Desc LIMIT value",
        -15.49499797821045
      ],
      [
        "SELECT City FROM airports GROUP BY City ORDER BY Avg ( * ) Desc LIMIT value",
        -15.569049835205078
      ],
      [
        "SELECT City FROM airports GROUP BY Max ( City ) ORDER BY Count ( * ) Desc LIMIT value",
        -15.655418395996094
      ],
      [
        "SELECT City FROM airports ORDER BY AirportCode Desc LIMIT value",
        -15.947473526000977
      ],
      [
        "SELECT City FROM airports GROUP BY City HAVING Count ( * ) > value",
        -15.951386451721191
      ],
      [
        "SELECT City FROM airports GROUP BY City ORDER BY Count ( DISTINCT * ) Desc LIMIT value",
        -15.958789825439453
      ],
      [
        "SELECT City FROM airports GROUP BY City ORDER BY Sum ( * ) Desc LIMIT value",
        -16.20114517211914
      ],
      [
        "SELECT AirportName FROM airports ORDER BY AirportCode Desc LIMIT value",
        -16.24368119239807
      ]
    ],
    "predicted_parse_with_values": "SELECT City FROM airports GROUP BY City ORDER BY Count ( * ) Desc LIMIT 1",
    "predicted_parse": "SELECT City FROM airports GROUP BY City ORDER BY Count ( * ) Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of city in airports table",
      "Step 2: find the city in airports table with largest value in the results of step 1"
    ],
    "template_feedback": "in step 1 , additionally use the information from the flights table besides the airports table .",
    "primary_span": [
      [
        4,
        11
      ]
    ],
    "secondary_span": [
      [
        12,
        16
      ]
    ],
    "edits": [
      "flights"
    ],
    "edits_original": "< from > add flights </ from >"
  },
  {
    "db_id": "world_1",
    "feedback": "Search number of corresponding rows of countrylanguage for which country's name equals Afghanistan .",
    "question": "How many official languages are spoken in Afghanistan?",
    "gold_parse": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"",
    "beam": [
      [
        "SELECT Count ( DISTINCT Code ) FROM country WHERE Continent = value",
        -0.10666656494140625
      ],
      [
        "SELECT Count ( DISTINCT Code2 ) FROM country WHERE Continent = value",
        -2.3001108169555664
      ],
      [
        "SELECT Count ( * ) FROM country WHERE Continent = value",
        -7.02221155166626
      ],
      [
        "SELECT Count ( Code ) FROM country WHERE Continent = value",
        -10.885753631591797
      ],
      [
        "SELECT Count ( DISTINCT T2.Language ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = value",
        -11.775832176208496
      ],
      [
        "SELECT Count ( DISTINCT LocalName ) FROM country WHERE Continent = value",
        -13.351943969726562
      ],
      [
        "SELECT Count ( DISTINCT Code ) FROM country WHERE Code2 = value",
        -13.467199325561523
      ],
      [
        "SELECT Count ( Code2 ) FROM country WHERE Continent = value",
        -13.559536933898926
      ],
      [
        "SELECT Count ( DISTINCT Code ) FROM country WHERE LocalName = value",
        -13.664329528808594
      ],
      [
        "SELECT Code FROM country WHERE Continent = value",
        -13.810478210449219
      ],
      [
        "SELECT Count ( DISTINCT Code ) FROM country WHERE Name = value",
        -14.403968811035156
      ],
      [
        "SELECT DISTINCT Count ( DISTINCT Code ) FROM country WHERE Continent = value",
        -14.655040740966797
      ],
      [
        "SELECT Count ( DISTINCT Code ) FROM country",
        -14.946139335632324
      ],
      [
        "SELECT Sum ( Code ) FROM country WHERE Continent = value",
        -15.348153114318848
      ],
      [
        "SELECT Count ( DISTINCT Code ) FROM country WHERE Continent LIKE value",
        -15.398015022277832
      ],
      [
        "SELECT Count ( DISTINCT Code2 ) FROM country WHERE Code2 = value",
        -15.647419929504395
      ],
      [
        "SELECT Avg ( Code ) FROM country WHERE Continent = value",
        -15.67010498046875
      ],
      [
        "SELECT Count ( DISTINCT Code2 ) FROM country WHERE LocalName = value",
        -15.811429023742676
      ],
      [
        "SELECT Count ( DISTINCT Code ) FROM country WHERE Continent > value",
        -15.826738357543945
      ],
      [
        "SELECT Count ( DISTINCT Code2 ) FROM country",
        -16.256042957305908
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( DISTINCT Code ) FROM country WHERE Continent = \"Afghanistan\"",
    "predicted_parse": "SELECT Count ( DISTINCT Code ) FROM country WHERE Continent = value",
    "predicted_parse_explanation": [
      "find the number of different code in country table whose continent equals Afghanistan"
    ],
    "template_feedback": "additionally use the information from the countrylanguage table besides the country table . consider the is official equals T and name equals Afghanistan conditions in place of the continent equals Afghanistan conditions . find number of rows in place of number of different code .",
    "primary_span": [
      [
        0,
        7
      ],
      [
        13,
        23
      ],
      [
        33,
        36
      ]
    ],
    "secondary_span": [
      [
        8,
        12
      ],
      [
        24,
        32
      ],
      [
        37,
        44
      ]
    ],
    "edits": [
      "number of rows",
      "number of distinct code",
      "countrylanguage",
      "name equals \"Afghanistan\"",
      "is official equals \"T\"",
      "continent equals \"Afghanistan\""
    ],
    "edits_original": "< select > add number of rows </ select > < select > remove number of distinct code </ select > < from > add countrylanguage </ from > < where > add name equals \" Afghanistan \" </ where > < where > add is official equals \" T \" </ where > < where > remove continent equals \" Afghanistan \" </ where >"
  },
  {
    "db_id": "flight_2",
    "feedback": "Find number of rows of flights table whose destination airport corresponds to airports's city equals Aberdeen",
    "question": "Return the number of flights arriving in Aberdeen.",
    "gold_parse": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
    "beam": [
      [
        "SELECT Count ( * ) FROM airports WHERE City = value",
        -0.0033817291259765625
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE AirportName = value",
        -5.699742317199707
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE AirportName = value AND City = value",
        -11.250120162963867
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE City = value AND City = value",
        -11.738710403442383
      ],
      [
        "SELECT Count ( DISTINCT T2.FlightNo ) FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.City = value",
        -12.97823715209961
      ],
      [
        "SELECT T2.FlightNo FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.City = value",
        -14.716646671295166
      ],
      [
        "SELECT Avg ( T2.FlightNo ) FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.City = value",
        -14.997076988220215
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM airports WHERE City = value",
        -15.320630073547363
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE Country = value",
        -15.434558868408203
      ],
      [
        "SELECT Avg ( * ) FROM airports WHERE City = value",
        -15.826005935668945
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE City > value",
        -15.97656774520874
      ],
      [
        "SELECT Count ( * ) , City FROM airports WHERE City = value",
        -15.984928369522095
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE City LIKE value",
        -16.186933517456055
      ],
      [
        "SELECT Count ( Count ( * ) ) FROM airports WHERE City = value",
        -16.237476348876953
      ],
      [
        "SELECT Count ( * ) , AirportName FROM airports WHERE City = value",
        -16.804781556129456
      ],
      [
        "SELECT Count ( DISTINCT * ) FROM airports WHERE City = value",
        -17.014394760131836
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE City = value LIMIT value",
        -17.077577590942383
      ],
      [
        "SELECT * FROM airports WHERE City = value",
        -17.197917461395264
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE DISTINCT City = value",
        -17.22871971130371
      ],
      [
        "SELECT Count ( * ) FROM airlines",
        -18.748382568359375
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM airports WHERE City = \"Aberdeen\"",
    "predicted_parse": "SELECT Count ( * ) FROM airports WHERE City = value",
    "predicted_parse_explanation": [
      "find the number of rows in airports table whose city equals Aberdeen"
    ],
    "template_feedback": "additionally use the information from the flights table besides the airports table .",
    "primary_span": [
      [
        0,
        7
      ]
    ],
    "secondary_span": [
      [
        8,
        12
      ]
    ],
    "edits": [
      "flights"
    ],
    "edits_original": "< from > add flights </ from >"
  },
  {
    "db_id": "student_transcripts_tracking",
    "feedback": "In step 1 , Addresses' country equals Haiti , not cell mobile number . Make sure address is permanent address .",
    "question": "What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582?",
    "gold_parse": "SELECT T1.first_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.permanent_address_id  =  T2.address_id WHERE T2.country  =  'Haiti' UNION SELECT first_name FROM Students WHERE cell_mobile_number  =  '09700166582'",
    "beam": [
      [
        "SELECT first_name FROM Students WHERE cell_mobile_number LIKE value UNION SELECT first_name FROM Students WHERE cell_mobile_number = value",
        -1.1392059326171875
      ],
      [
        "SELECT first_name FROM Students WHERE cell_mobile_number = value UNION SELECT first_name FROM Students WHERE cell_mobile_number = value OR cell_mobile_number = value",
        -1.345595359802246
      ],
      [
        "SELECT first_name FROM Students WHERE cell_mobile_number = value OR cell_mobile_number = value",
        -2.2522830963134766
      ],
      [
        "SELECT first_name FROM Students WHERE cell_mobile_number = value OR cell_mobile_number = value EXCEPT SELECT first_name FROM Students WHERE cell_mobile_number = value OR cell_mobile_number = value",
        -2.4566478729248047
      ],
      [
        "SELECT first_name FROM Students WHERE cell_mobile_number = value OR cell_mobile_number = value UNION SELECT first_name FROM Students WHERE cell_mobile_number = value",
        -2.929004669189453
      ],
      [
        "SELECT first_name FROM Students WHERE cell_mobile_number = value OR cell_mobile_number = value UNION SELECT first_name FROM Students WHERE cell_mobile_number = value OR cell_mobile_number = value",
        -2.974637031555176
      ],
      [
        "SELECT first_name FROM Students WHERE first_name LIKE value UNION SELECT first_name FROM Students WHERE cell_mobile_number = value OR cell_mobile_number = value",
        -3.366006851196289
      ],
      [
        "SELECT first_name FROM Students WHERE cell_mobile_number = value UNION SELECT first_name FROM Students WHERE cell_mobile_number = value",
        -3.4591941833496094
      ],
      [
        "SELECT first_name FROM Students WHERE cell_mobile_number = value OR cell_mobile_number = value EXCEPT SELECT first_name FROM Students WHERE cell_mobile_number = value",
        -3.8926639556884766
      ],
      [
        "SELECT first_name FROM Students WHERE cell_mobile_number LIKE value UNION SELECT first_name FROM Students WHERE cell_mobile_number = value OR cell_mobile_number = value",
        -4.938666343688965
      ],
      [
        "SELECT first_name FROM Students WHERE cell_mobile_number ! = value UNION SELECT first_name FROM Students WHERE cell_mobile_number = value",
        -5.711828231811523
      ],
      [
        "SELECT first_name FROM Students WHERE cell_mobile_number = value EXCEPT SELECT first_name FROM Students WHERE cell_mobile_number = value OR cell_mobile_number = value",
        -5.7584381103515625
      ],
      [
        "SELECT first_name FROM Students WHERE first_name LIKE value UNION SELECT first_name FROM Students WHERE cell_mobile_number = value",
        -6.254773139953613
      ],
      [
        "SELECT first_name FROM Students WHERE cell_mobile_number = value OR cell_mobile_number = value ORDER BY first_name Desc LIMIT value",
        -6.265740394592285
      ],
      [
        "SELECT first_name FROM Students WHERE cell_mobile_number LIKE value UNION SELECT first_name FROM Students WHERE cell_mobile_number ! = value",
        -6.432097434997559
      ],
      [
        "SELECT first_name FROM Students WHERE cell_mobile_number = value OR cell_mobile_number = value UNION SELECT first_name FROM Students WHERE cell_mobile_number ! = value",
        -6.857879638671875
      ],
      [
        "SELECT first_name FROM Students WHERE cell_mobile_number = value UNION SELECT first_name FROM Students WHERE cell_mobile_number ! = value",
        -7.169706344604492
      ],
      [
        "SELECT first_name FROM Students WHERE cell_mobile_number = value UNION SELECT first_name FROM Students WHERE cell_mobile_number = value AND cell_mobile_number = value",
        -7.205517768859863
      ],
      [
        "SELECT first_name FROM Students UNION SELECT first_name FROM Students WHERE cell_mobile_number = value",
        -7.61163330078125
      ],
      [
        "SELECT first_name FROM Students WHERE cell_mobile_number > value UNION SELECT first_name FROM Students WHERE cell_mobile_number = value",
        -8.546379089355469
      ]
    ],
    "predicted_parse_with_values": "SELECT first_name FROM Students WHERE cell_mobile_number LIKE \"Haiti\" UNION SELECT first_name FROM Students WHERE cell_mobile_number = 09700166582",
    "predicted_parse": "SELECT first_name FROM Students WHERE cell_mobile_number LIKE value UNION SELECT first_name FROM Students WHERE cell_mobile_number = value",
    "predicted_parse_explanation": [
      "Step 1: find the first name in students table whose cell mobile number like Haiti",
      "Step 2: find the first name in students table whose cell mobile number equals 9700166582",
      "Step 3: show the rows that are in any of the results of step 1 and step 2"
    ],
    "template_feedback": "in step 1 , additionally use the information from the addresses table besides the students table . consider the country equals Haiti conditions in place of the cell mobile number like Haiti conditions . in step 2 , consider the cell mobile number equals 09700166582 conditions in place of the cell mobile number equals 9700166582 conditions .",
    "primary_span": [
      [
        4,
        11
      ],
      [
        17,
        22
      ],
      [
        38,
        45
      ]
    ],
    "secondary_span": [
      [
        12,
        16
      ],
      [
        23,
        33
      ],
      [
        46,
        56
      ]
    ],
    "edits": [
      "addresses",
      "country equals \"Haiti\"",
      "cell mobile number like \"Haiti\"",
      "cell mobile number equals \"09700166582\"",
      "cell mobile number equals 9700166582"
    ],
    "edits_original": "< from > add addresses </ from > < where > add country equals \" Haiti \" </ where > < where > remove cell mobile number like \" Haiti \" </ where > < where > add cell mobile number equals \" 09700166582 \" </ where > < where > remove cell mobile number equals 9700166582 </ where >"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "feedback": "I want the description of document.",
    "question": "What are the ids, names, and descriptions for all documents?",
    "gold_parse": "SELECT document_id ,  document_name ,  document_description FROM Documents",
    "beam": [
      [
        "SELECT T3.Document_ID , T3.Document_Name , T1.Template_Type_Description FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID",
        -0.6625852584838867
      ],
      [
        "SELECT Document_ID , Document_Name , Document_Description FROM Documents",
        -0.7285051345825195
      ],
      [
        "SELECT Document_ID , Document_Name , Document_Name , Document_Description FROM Documents",
        -7.809781074523926
      ],
      [
        "SELECT T3.Document_ID , T3.Document_Name , T1.Template_Type_Description , T3.Document_Description FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID",
        -8.081774711608887
      ],
      [
        "SELECT T3.Document_ID , T3.Document_Name , T3.Document_Name , T1.Template_Type_Description FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID",
        -8.215678215026855
      ],
      [
        "SELECT Document_ID , Document_Name , Document_Description , Document_Description FROM Documents",
        -8.52916431427002
      ],
      [
        "SELECT T3.Document_ID , T3.Document_Name , T1.Template_Type_Description , T1.Template_Type_Description FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID",
        -8.677647590637207
      ],
      [
        "SELECT T4.Document_ID , T3.Document_Name , T1.Template_Type_Description FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code AND T1.Template_Type_Code = T2.Template_Type_Code JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID AND T2.Template_ID = T3.Template_ID JOIN Paragraphs AS T4 ON T3.Document_ID = T4.Document_ID",
        -8.964164733886719
      ],
      [
        "SELECT T2.Document_ID , T1.Document_Name , T1.Document_Description FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID",
        -9.017154693603516
      ],
      [
        "SELECT T3.Document_ID , T3.Document_Name , T3.Document_Description , T1.Template_Type_Description FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID",
        -9.151884078979492
      ],
      [
        "SELECT Document_ID , Document_Name , Document_Name FROM Documents",
        -10.193021774291992
      ],
      [
        "SELECT T2.Template_ID , T3.Document_Name , T1.Template_Type_Description FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code AND T1.Template_Type_Code = T2.Template_Type_Code JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID",
        -10.773923873901367
      ],
      [
        "SELECT T1.Template_ID , T2.Document_Name , T2.Document_Description FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID",
        -10.82994270324707
      ],
      [
        "SELECT T4.Paragraph_ID , T3.Document_Name , T1.Template_Type_Description FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code AND T1.Template_Type_Code = T2.Template_Type_Code JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID AND T2.Template_ID = T3.Template_ID JOIN Paragraphs AS T4 ON T3.Document_ID = T4.Document_ID",
        -11.211275100708008
      ],
      [
        "SELECT T2.Paragraph_ID , T1.Document_Name , T1.Document_Description FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID",
        -11.265050888061523
      ],
      [
        "SELECT T3.Template_ID , T3.Document_Name , T1.Template_Type_Description FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID",
        -12.035171508789062
      ],
      [
        "SELECT Template_ID , Document_Name , Document_Description FROM Documents",
        -12.092517852783203
      ],
      [
        "SELECT Document_ID , Document_Name FROM Documents",
        -12.323904991149902
      ],
      [
        "SELECT T1.Document_ID , T1.Document_Name , T2.Paragraph_Text FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID",
        -12.610381126403809
      ],
      [
        "SELECT T3.Document_ID , T3.Document_Name , T1.Template_Type_Description FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID UNION SELECT T1.Template_Type_Description FROM Ref_Template_Types AS T1",
        -13.690602779388428
      ]
    ],
    "predicted_parse_with_values": "SELECT T3.Document_ID , T3.Document_Name , T1.Template_Type_Description FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID",
    "predicted_parse": "SELECT T3.Document_ID , T3.Document_Name , T1.Template_Type_Description FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID",
    "predicted_parse_explanation": [
      "Step 1: for each row in reference template types table , find the corresponding rows in templates table and in documents table",
      "Step 2: find the document id , document name , template type description of the results of step 1"
    ],
    "template_feedback": "in step 1 , do not use the templates table and reference template types table . in step 2 , find document description in place of template type description .",
    "primary_span": [
      [
        4,
        15
      ],
      [
        20,
        22
      ]
    ],
    "secondary_span": [
      [
        4,
        15
      ],
      [
        23,
        29
      ]
    ],
    "edits": [
      "document description",
      "template type description",
      "reference template types",
      "templates"
    ],
    "edits_original": "< select > add document description </ select > < select > remove template type description </ select > < from > remove reference template types </ from > < from > remove templates </ from >"
  },
  {
    "db_id": "flight_2",
    "feedback": "you should use source airport instead of abbreviation.",
    "question": "Give the flight numbers of flights leaving from APG.",
    "gold_parse": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
    "beam": [
      [
        "SELECT T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Abbreviation = value",
        -0.01365804672241211
      ],
      [
        "SELECT T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Airline = value",
        -4.730280876159668
      ],
      [
        "SELECT T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Country = value",
        -6.5813117027282715
      ],
      [
        "SELECT FlightNo FROM flights WHERE FlightNo = value",
        -6.7937822341918945
      ],
      [
        "SELECT FlightNo FROM flights WHERE Airline = value",
        -7.336343765258789
      ],
      [
        "SELECT FlightNo FROM flights",
        -7.489853858947754
      ],
      [
        "SELECT T2.FlightNo FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.City = value",
        -8.244098663330078
      ],
      [
        "SELECT T2.FlightNo FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.CountryAbbrev = value",
        -8.431317329406738
      ],
      [
        "SELECT T2.FlightNo FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.Country = value",
        -8.4384126663208
      ],
      [
        "SELECT T2.FlightNo FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.AirportName = value",
        -8.962991714477539
      ],
      [
        "SELECT FlightNo FROM flights WHERE SourceAirport = value",
        -9.250748634338379
      ],
      [
        "SELECT T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 WHERE T1.uid = value",
        -9.59292221069336
      ],
      [
        "SELECT FlightNo FROM flights WHERE DestAirport = value",
        -10.387005805969238
      ],
      [
        "SELECT FlightNo FROM flights ORDER BY FlightNo Asc",
        -13.327434062957764
      ],
      [
        "SELECT DISTINCT T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Abbreviation = value",
        -13.864677429199219
      ],
      [
        "SELECT T2.FlightNo , T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Abbreviation = value",
        -14.003230661153793
      ],
      [
        "SELECT FlightNo FROM flights WHERE FlightNo LIKE value",
        -14.367602825164795
      ],
      [
        "SELECT T2.FlightNo FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.AirportCode = value",
        -14.460195541381836
      ],
      [
        "SELECT FlightNo FROM flights WHERE Airline = FlightNo",
        -14.763171672821045
      ],
      [
        "SELECT Min ( FlightNo ) FROM flights",
        -18.31155776977539
      ]
    ],
    "predicted_parse_with_values": "SELECT T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Abbreviation = \"APG\"",
    "predicted_parse": "SELECT T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Abbreviation = value",
    "predicted_parse_explanation": [
      "Step 1: for each row in airlines table , find the corresponding rows in flights table",
      "Step 2: find the flight number of the results of step 1 whose abbreviation equals APG"
    ],
    "template_feedback": "in step 1 , do not use the airlines table . in step 2 , consider the source airport equals APG conditions in place of the abbreviation equals APG conditions .",
    "primary_span": [
      [
        4,
        10
      ],
      [
        15,
        21
      ]
    ],
    "secondary_span": [
      [
        4,
        10
      ],
      [
        22,
        30
      ]
    ],
    "edits": [
      "airlines",
      "source airport equals \"APG\"",
      "abbreviation equals \"APG\""
    ],
    "edits_original": "< from > remove airlines </ from > < where > add source airport equals \" APG \" </ where > < where > remove abbreviation equals \" APG \" </ where >"
  },
  {
    "db_id": "car_1",
    "feedback": "In step 2, confirm that maker is fiat and display result of step 2 and 3. Also Omit the phrase \"is greater than fiat\".",
    "question": "What are the ids and names of all countries that either have more than 3 car makers or produce fiats?",
    "gold_parse": "SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat'",
    "beam": [
      [
        "SELECT CountryId , CountryName FROM countries GROUP BY CountryId HAVING Count ( * ) > value UNION SELECT CountryId , CountryName FROM countries GROUP BY CountryId HAVING Count ( * ) > value",
        -0.0019998550415039062
      ],
      [
        "SELECT T1.CountryId , T1.CountryName FROM countries AS T1 GROUP BY T1.CountryId HAVING Count ( * ) > value UNION SELECT T1.CountryId , T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country GROUP BY T2.Country HAVING Count ( * ) > value",
        -7.060476303100586
      ],
      [
        "SELECT T1.CountryId , T1.CountryName FROM countries AS T1 GROUP BY T1.CountryId HAVING Count ( * ) > value UNION SELECT T1.CountryId , T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country WHERE T2.Maker = value",
        -8.59201431274414
      ],
      [
        "SELECT T1.CountryId , T1.CountryName FROM countries AS T1 GROUP BY T1.CountryId HAVING Count ( * ) > value UNION SELECT T1.CountryId , T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country JOIN model_list AS T3 ON T2.Id = T3.Maker JOIN car_names AS T4 ON T3.Model = T4.Model JOIN cars_data AS T5 ON T4.MakeId = T5.Id WHERE T5.Horsepower > value",
        -8.903172016143799
      ],
      [
        "SELECT CountryId , CountryName FROM countries GROUP BY CountryId HAVING Count ( * ) > value",
        -9.311590194702148
      ],
      [
        "SELECT CountryId , CountryName FROM countries GROUP BY CountryId HAVING Count ( * ) > value EXCEPT SELECT CountryId , CountryName FROM countries GROUP BY CountryId HAVING Count ( * ) > value",
        -9.66196060180664
      ],
      [
        "SELECT CountryId , CountryName FROM countries GROUP BY CountryId HAVING Count ( * ) > value INTERSECT SELECT CountryId , CountryName FROM countries GROUP BY CountryId HAVING Count ( * ) > value",
        -9.88682746887207
      ],
      [
        "SELECT CountryId , CountryName FROM countries GROUP BY CountryId HAVING Count ( * ) > value UNION SELECT CountryName , CountryName FROM countries GROUP BY CountryId HAVING Count ( * ) > value",
        -9.942097663879395
      ],
      [
        "SELECT T1.CountryId , T1.CountryName FROM countries AS T1 GROUP BY T1.CountryId HAVING Count ( * ) > value UNION SELECT T2.Id , T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country GROUP BY T1.CountryId HAVING Count ( * ) > value",
        -10.011270523071289
      ],
      [
        "SELECT T1.CountryId , T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country JOIN model_list AS T3 ON T2.Id = T3.Maker JOIN car_names AS T4 ON T3.Model = T4.Model JOIN cars_data AS T5 ON T4.MakeId = T5.Id WHERE T5.Horsepower > value GROUP BY T1.CountryId HAVING Count ( * ) > = value",
        -10.025068759918213
      ],
      [
        "SELECT T1.CountryId , T1.CountryName FROM countries AS T1 GROUP BY T1.CountryId HAVING Count ( * ) > value UNION SELECT T1.CountryId , T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country WHERE T2.FullName = value",
        -10.067561626434326
      ],
      [
        "SELECT CountryId , CountryName FROM countries GROUP BY CountryId HAVING Count ( * ) > value UNION SELECT * , CountryName FROM countries GROUP BY CountryId HAVING Count ( * ) > value",
        -10.53750991821289
      ],
      [
        "SELECT CountryId , CountryName FROM countries GROUP BY CountryId HAVING Count ( * ) > value UNION SELECT CountryId , CountryName FROM countries GROUP BY CountryId HAVING Count ( * ) > = value",
        -10.696624755859375
      ],
      [
        "SELECT T1.CountryId , T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country GROUP BY T2.Country HAVING Count ( * ) > value UNION SELECT T1.CountryId , T1.CountryName FROM countries AS T1 GROUP BY T1.CountryId HAVING Count ( * ) > value",
        -10.831031799316406
      ],
      [
        "SELECT T1.CountryId , T1.CountryName FROM countries AS T1 GROUP BY T1.CountryId HAVING Count ( * ) > value UNION SELECT T2.Country , T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country GROUP BY T1.CountryId HAVING Count ( * ) > value",
        -10.875754356384277
      ],
      [
        "SELECT T1.CountryId , T1.CountryName FROM countries AS T1 GROUP BY T1.CountryId HAVING Count ( * ) > value UNION SELECT T1.CountryId , T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country JOIN model_list AS T3 ON T2.Id = T3.Maker JOIN car_names AS T4 ON T3.Model = T4.Model JOIN cars_data AS T5 ON T4.MakeId = T5.Id GROUP BY T1.CountryId HAVING Sum ( T5.Horsepower ) > value",
        -10.876514911651611
      ],
      [
        "SELECT CountryId , CountryName FROM countries GROUP BY CountryId HAVING Count ( * ) > value UNION SELECT CountryId , CountryName FROM countries GROUP BY CountryId HAVING Sum ( * ) > value",
        -10.976004600524902
      ],
      [
        "SELECT T1.CountryId , T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country WHERE T2.Maker = value UNION SELECT T1.CountryId , T1.CountryName FROM countries AS T1 GROUP BY T1.CountryId HAVING Count ( * ) > value",
        -11.007091999053955
      ],
      [
        "SELECT T1.CountryId , T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country JOIN model_list AS T3 ON T2.Id = T3.Maker JOIN car_names AS T4 ON T3.Model = T4.Model JOIN cars_data AS T5 ON T4.MakeId = T5.Id WHERE T5.Horsepower > value GROUP BY T1.CountryId HAVING Count ( * ) > value",
        -11.866102695465088
      ],
      [
        "SELECT T1.CountryId , T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country WHERE T2.Maker > value GROUP BY T1.CountryId HAVING Count ( * ) > = value",
        -13.085112571716309
      ]
    ],
    "predicted_parse_with_values": "SELECT CountryId , CountryName FROM countries GROUP BY CountryId HAVING Count ( * ) > \"fiat\" UNION SELECT CountryId , CountryName FROM countries GROUP BY CountryId HAVING Count ( * ) > 3",
    "predicted_parse": "SELECT CountryId , CountryName FROM countries GROUP BY CountryId HAVING Count ( * ) > value UNION SELECT CountryId , CountryName FROM countries GROUP BY CountryId HAVING Count ( * ) > value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of country id in countries table",
      "Step 2: find the country id and country name in countries table whose corresponding value in step 1 is greater than fiat",
      "Step 3: find the number of rows of each value of country id in countries table",
      "Step 4: find the country id and country name in countries table whose corresponding value in step 3 is greater than 3",
      "Step 5: show the rows that are in any of the results of step 2 and step 4"
    ],
    "template_feedback": "in step 1 , additionally use the information from the car makers table besides the countries table . in step 2 , make sure that the corresponding value in step 1 greater than 3 . in step 3 , additionally use the information from the car makers table and model list table besides the countries table . do not find for each value of country id . in step 4 , additionally make sure that model equals fiat .",
    "primary_span": [
      [
        4,
        12
      ],
      [
        22,
        34
      ],
      [
        39,
        51
      ],
      [
        57,
        66
      ],
      [
        71,
        78
      ]
    ],
    "secondary_span": [
      [
        13,
        17
      ],
      [
        52,
        56
      ]
    ],
    "edits": [
      "car makers",
      "number of rows greater than 3",
      "number of rows greater than \"fiat\"",
      "car makers",
      "model list",
      "model equals \"fiat\"",
      "country id",
      "number of rows greater than 3"
    ],
    "edits_original": "< from > add car makers </ from > < having > add number of rows greater than 3 </ having > < having > remove number of rows greater than \" fiat \" </ having > < from > add car makers </ from > < from > add model list </ from > < where > add model equals \" fiat \" </ where > < groupBy > remove country id </ groupBy > < having > remove number of rows greater than 3 </ having >"
  },
  {
    "db_id": "employee_hire_evaluation",
    "feedback": "Need to take hiring table in place of employee table .",
    "question": "What is all the information about hiring?",
    "gold_parse": "SELECT * FROM hiring",
    "beam": [
      [
        "SELECT * FROM employee",
        -0.15939044952392578
      ],
      [
        "SELECT * FROM hiring WHERE Start_from = value",
        -1.920060157775879
      ],
      [
        "SELECT * FROM employee WHERE City = value",
        -7.287848472595215
      ],
      [
        "SELECT * FROM employee WHERE Name = value",
        -10.517868041992188
      ],
      [
        "SELECT * FROM hiring GROUP BY * HAVING Start_from = value",
        -12.536239624023438
      ],
      [
        "SELECT * FROM hiring ORDER BY Start_from Asc",
        -12.55816650390625
      ],
      [
        "SELECT * FROM hiring WHERE Is_full_time = value",
        -13.671113967895508
      ],
      [
        "SELECT * FROM employee EXCEPT SELECT * FROM employee",
        -13.829813003540039
      ],
      [
        "SELECT DISTINCT * FROM employee",
        -14.342674255371094
      ],
      [
        "SELECT * , Start_from FROM hiring",
        -14.34785008430481
      ],
      [
        "SELECT * FROM employee AS T1 UNION SELECT T2.Start_from FROM hiring AS T2",
        -14.451448440551758
      ],
      [
        "SELECT Count ( * ) FROM employee",
        -14.974373817443848
      ],
      [
        "SELECT * FROM employee ORDER BY * Asc",
        -15.040428161621094
      ],
      [
        "SELECT * FROM employee GROUP BY * HAVING Count ( * ) = value",
        -15.165229320526123
      ],
      [
        "SELECT * FROM evaluation WHERE Year_awarded = value",
        -15.473819732666016
      ],
      [
        "SELECT DISTINCT * FROM hiring WHERE Start_from = value",
        -15.56130599975586
      ],
      [
        "SELECT * FROM shop WHERE Manager_name = value",
        -15.64050579071045
      ],
      [
        "SELECT Sum ( * ) FROM employee",
        -15.780770301818848
      ],
      [
        "SELECT * FROM employee LIMIT value",
        -17.263381958007812
      ],
      [
        "SELECT DISTINCT * FROM employee",
        -17.36357593536377
      ]
    ],
    "predicted_parse_with_values": "SELECT * FROM employee",
    "predicted_parse": "SELECT * FROM employee",
    "predicted_parse_explanation": [
      "find the rows in employee table"
    ],
    "template_feedback": "use hiring table in place of employee table .",
    "primary_span": [
      [
        0,
        2
      ]
    ],
    "secondary_span": [
      [
        3,
        8
      ]
    ],
    "edits": [
      "hiring",
      "employee"
    ],
    "edits_original": "< from > add hiring </ from > < from > remove employee </ from >"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "feedback": "Note that there should not be any repetition in output.",
    "question": "What are the ids of documents that have 2 or more paragraphs?",
    "gold_parse": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2",
    "beam": [
      [
        "SELECT T1.Document_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T2.Document_ID HAVING Count ( * ) > = value",
        -1.4433374404907227
      ],
      [
        "SELECT Document_ID FROM Documents GROUP BY Document_ID HAVING Count ( * ) > = value",
        -1.5262174606323242
      ],
      [
        "SELECT Document_ID FROM Documents GROUP BY Template_ID HAVING Count ( * ) > = value",
        -1.7332448959350586
      ],
      [
        "SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING Count ( * ) > = value",
        -2.544865608215332
      ],
      [
        "SELECT T2.Document_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T1.Document_ID HAVING Count ( * ) > = value",
        -2.650813102722168
      ],
      [
        "SELECT T2.Document_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T1.Template_ID HAVING Count ( * ) > = value",
        -2.733952522277832
      ],
      [
        "SELECT Template_ID FROM Documents GROUP BY Document_ID HAVING Count ( * ) > = value",
        -2.909374237060547
      ],
      [
        "SELECT T1.Template_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T2.Document_ID HAVING Count ( * ) > = value",
        -2.9787492752075195
      ],
      [
        "SELECT Template_ID FROM Documents GROUP BY Template_ID HAVING Count ( * ) > = value",
        -3.0801143646240234
      ],
      [
        "SELECT Document_ID FROM Documents GROUP BY Document_ID HAVING Count ( * ) = value OR Count ( * ) = value",
        -7.027825355529785
      ],
      [
        "SELECT T1.Document_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T2.Document_ID HAVING Count ( * ) = value OR Count ( * ) = value",
        -7.540148735046387
      ],
      [
        "SELECT Document_ID FROM Documents GROUP BY Template_ID HAVING Count ( * ) = value OR Count ( * ) = value",
        -7.778288841247559
      ],
      [
        "SELECT T2.Document_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T1.Document_ID HAVING Count ( * ) = value OR Count ( * ) = value",
        -8.044914245605469
      ],
      [
        "SELECT Template_ID FROM Documents GROUP BY Document_ID HAVING Count ( * ) = value OR Count ( * ) = value",
        -8.349924087524414
      ],
      [
        "SELECT Document_ID FROM Documents GROUP BY Document_ID HAVING Count ( * ) > value",
        -8.570487022399902
      ],
      [
        "SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING Count ( * ) = value OR Count ( * ) = value",
        -8.859893798828125
      ],
      [
        "SELECT Document_ID FROM Documents GROUP BY Document_ID HAVING Count ( * ) < = value",
        -9.093255043029785
      ],
      [
        "SELECT T2.Document_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T1.Template_ID HAVING Count ( * ) = value OR Count ( * ) = value",
        -9.207435607910156
      ],
      [
        "SELECT Document_ID FROM Documents GROUP BY Document_ID HAVING Count ( * ) > value OR Count ( * ) = value",
        -9.308141708374023
      ],
      [
        "SELECT Document_ID FROM Documents",
        -15.379894256591797
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.Document_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T2.Document_ID HAVING Count ( * ) > = 2",
    "predicted_parse": "SELECT T1.Document_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T2.Document_ID HAVING Count ( * ) > = value",
    "predicted_parse_explanation": [
      "Step 1: for each row in documents table , find the corresponding rows in paragraphs table",
      "Step 2: find the number of rows of each value of paragraphs 's document id of the results of step 1",
      "Step 3: find the documents 's document id of the results of step 1 whose corresponding value in step 2 is greater than or equals 2"
    ],
    "template_feedback": "in step 1 , do not use the documents table .",
    "primary_span": [
      [
        4,
        10
      ]
    ],
    "secondary_span": [
      [
        4,
        10
      ]
    ],
    "edits": [
      "documents"
    ],
    "edits_original": "< from > remove documents </ from >"
  },
  {
    "db_id": "flight_2",
    "feedback": "Swap abbreviation with flights's destination airport .",
    "question": "Which airlines have a flight with destination airport AHD?",
    "gold_parse": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"",
    "beam": [
      [
        "SELECT Airline FROM airlines WHERE Abbreviation = value",
        -0.4531416893005371
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = value",
        -1.7066733837127686
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 WHERE T2.FlightNo = value",
        -1.7957005500793457
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value",
        -4.861727237701416
      ],
      [
        "SELECT Airline FROM airlines WHERE Airline = value",
        -5.396426200866699
      ],
      [
        "SELECT Airline FROM airlines WHERE Country = value",
        -6.177608013153076
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.CountryAbbrev = value",
        -6.450667858123779
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 WHERE T2.Airline = value",
        -7.257724761962891
      ],
      [
        "SELECT Airline FROM airlines",
        -9.166218757629395
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.City = value",
        -9.363123893737793
      ],
      [
        "SELECT Airline FROM airlines WHERE Abbreviation = Airline",
        -10.401440143585205
      ],
      [
        "SELECT Airline FROM airlines WHERE uid = value",
        -11.105671882629395
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 WHERE T2.DestAirport = value",
        -11.414264678955078
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 WHERE T2.Airline = T1.Airline",
        -12.48902177810669
      ],
      [
        "SELECT Airline FROM airlines WHERE uid = Airline",
        -12.504847049713135
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 WHERE T2.SourceAirport = value",
        -13.185853004455566
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 WHERE T2.FlightNo = T1.Airline",
        -13.595712184906006
      ],
      [
        "SELECT Airline FROM airlines WHERE Airline LIKE value",
        -13.779756546020508
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportCode = value",
        -13.866728782653809
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 EXCEPT SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = value",
        -14.464997291564941
      ]
    ],
    "predicted_parse_with_values": "SELECT Airline FROM airlines WHERE Abbreviation = \"AHD\"",
    "predicted_parse": "SELECT Airline FROM airlines WHERE Abbreviation = value",
    "predicted_parse_explanation": [
      "find the airline name in airlines table whose abbreviation equals AHD"
    ],
    "template_feedback": "additionally use the information from the flights table besides the airlines table . consider the destination airport equals AHD conditions in place of the abbreviation equals AHD conditions .",
    "primary_span": [
      [
        0,
        7
      ],
      [
        13,
        19
      ]
    ],
    "secondary_span": [
      [
        8,
        12
      ],
      [
        20,
        28
      ]
    ],
    "edits": [
      "flights",
      "destination airport equals \"AHD\"",
      "abbreviation equals \"AHD\""
    ],
    "edits_original": "< from > add flights </ from > < where > add destination airport equals \" AHD \" </ where > < where > remove abbreviation equals \" AHD \" </ where >"
  },
  {
    "db_id": "world_1",
    "feedback": "You need to search for distinct government forms.",
    "question": "How many type of governments are in Africa?",
    "gold_parse": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"",
    "beam": [
      [
        "SELECT Count ( * ) FROM country WHERE Continent = value",
        -1.430511474609375e-05
      ],
      [
        "SELECT Count ( * ) FROM country WHERE Name = value",
        -12.239256858825684
      ],
      [
        "SELECT Count ( DISTINCT GovernmentForm ) FROM country WHERE Continent = value",
        -12.834143161773682
      ],
      [
        "SELECT Count ( DISTINCT Code2 ) FROM country WHERE Continent = value",
        -13.032596111297607
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM country WHERE Continent = value",
        -13.50159740447998
      ],
      [
        "SELECT Name FROM country WHERE Continent = value",
        -14.369575798511505
      ],
      [
        "SELECT Count ( DISTINCT Code ) FROM country WHERE Continent = value",
        -14.6996169090271
      ],
      [
        "SELECT Count ( * ) FROM city",
        -15.18289566040039
      ],
      [
        "SELECT Count ( Code ) FROM country WHERE Continent = value",
        -15.195072174072266
      ],
      [
        "SELECT Sum ( * ) FROM country WHERE Continent = value",
        -15.620953798294067
      ],
      [
        "SELECT Count ( Name ) FROM country WHERE Continent = value",
        -15.721420288085938
      ],
      [
        "SELECT Count ( DISTINCT Name ) FROM country WHERE Continent = value",
        -15.855469226837158
      ],
      [
        "SELECT Count ( * ) FROM country WHERE LocalName = value",
        -15.889697074890137
      ],
      [
        "SELECT Count ( * ) FROM country WHERE Continent > value",
        -15.956009864807129
      ],
      [
        "SELECT Count ( GovernmentForm ) FROM country WHERE Continent = value",
        -16.081902980804443
      ],
      [
        "SELECT Count ( * ) , Continent FROM country WHERE Continent = value",
        -16.125962495803833
      ],
      [
        "SELECT GovernmentForm FROM country WHERE Continent = value",
        -16.306246280670166
      ],
      [
        "SELECT Avg ( * ) FROM country WHERE Continent = value",
        -16.376092672348022
      ],
      [
        "SELECT Count ( Count ( * ) ) FROM country WHERE Continent = value",
        -16.466177940368652
      ],
      [
        "SELECT Sum ( Name ) FROM country WHERE Continent = value",
        -16.47934627532959
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM country WHERE Continent = \"Africa\"",
    "predicted_parse": "SELECT Count ( * ) FROM country WHERE Continent = value",
    "predicted_parse_explanation": [
      "find the number of rows in country table whose continent equals Africa"
    ],
    "template_feedback": "find number of different government form in place of number of rows .",
    "primary_span": [
      [
        0,
        5
      ]
    ],
    "secondary_span": [
      [
        6,
        12
      ]
    ],
    "edits": [
      "number of distinct government form",
      "number of rows"
    ],
    "edits_original": "< select > add number of distinct government form </ select > < select > remove number of rows </ select >"
  },
  {
    "db_id": "network_1",
    "feedback": "Exchange friend table with likes table in step 1.",
    "question": "Give the name of the student with the most likes.",
    "gold_parse": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
    "beam": [
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id ORDER BY Count ( * ) Desc LIMIT value",
        -0.00040149688720703125
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id GROUP BY T2.student_id ORDER BY Count ( * ) Desc LIMIT value",
        -9.328924179077148
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.friend_id ORDER BY Count ( * ) Desc LIMIT value",
        -9.357808113098145
      ],
      [
        "SELECT name FROM Highschooler ORDER BY name Desc LIMIT value",
        -9.943349599838257
      ],
      [
        "SELECT name FROM Highschooler GROUP BY name ORDER BY Count ( * ) Desc LIMIT value",
        -10.022171020507812
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id ORDER BY T2.friend_id Desc LIMIT value",
        -10.180269479751587
      ],
      [
        "SELECT name FROM Highschooler ORDER BY ID Desc LIMIT value",
        -10.234604120254517
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id ORDER BY T2.student_id Desc LIMIT value",
        -11.13211178779602
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id GROUP BY T2.liked_id ORDER BY Count ( * ) Desc LIMIT value",
        -12.011957168579102
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id , T1.name ORDER BY Count ( * ) Desc LIMIT value",
        -12.234484910964966
      ],
      [
        "SELECT name FROM Highschooler GROUP BY ID ORDER BY Count ( * ) Desc LIMIT value",
        -12.364680290222168
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id ORDER BY Count ( * ) Desc",
        -12.477507591247559
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id",
        -12.54578685760498
      ],
      [
        "SELECT T1.name , T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id ORDER BY Count ( * ) Desc LIMIT value",
        -12.630686283111572
      ],
      [
        "SELECT name FROM Highschooler ORDER BY * Desc LIMIT value",
        -12.996519088745117
      ],
      [
        "SELECT name FROM Highschooler ORDER BY grade Desc LIMIT value",
        -13.131819725036621
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 WHERE T1.grade = ( SELECT T2.student_id FROM Friend AS T2 GROUP BY T2.student_id ORDER BY Count ( * ) Desc LIMIT value )",
        -13.678333580493927
      ],
      [
        "SELECT name FROM Highschooler WHERE grade = value",
        -13.777407944202423
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id , T2.friend_id ORDER BY Count ( * ) Desc LIMIT value",
        -14.071192979812622
      ],
      [
        "SELECT name FROM Highschooler",
        -14.953813552856445
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id ORDER BY Count ( * ) Desc LIMIT 1",
    "predicted_parse": "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id ORDER BY Count ( * ) Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: for each row in high schooler table , find the corresponding rows in friend table",
      "Step 2: find the number of rows of each value of student id of the results of step 1",
      "Step 3: find the name of the results of step 1 with largest value in the results of step 2"
    ],
    "template_feedback": "in step 1 , use likes table in place of friend table",
    "primary_span": [
      [
        4,
        6
      ]
    ],
    "secondary_span": [
      [
        7,
        11
      ]
    ],
    "edits": [
      "likes",
      "friend"
    ],
    "edits_original": "< from > add likes </ from > < from > remove friend </ from >"
  },
  {
    "db_id": "world_1",
    "feedback": "Replace first continent with region , Second continent and local name both with language .",
    "question": "Which regions speak Dutch or English?",
    "gold_parse": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\"",
    "beam": [
      [
        "SELECT Continent FROM country WHERE Continent = value OR LocalName = value",
        -1.2194795608520508
      ],
      [
        "SELECT Continent FROM country WHERE Continent = value OR Continent = value",
        -2.241379737854004
      ],
      [
        "SELECT Continent FROM country WHERE Continent = value OR Name = value",
        -2.3516693115234375
      ],
      [
        "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value OR T1.LocalName = value",
        -2.3887596130371094
      ],
      [
        "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value OR T1.Continent = value",
        -2.500349998474121
      ],
      [
        "SELECT Continent FROM country WHERE LocalName = value OR LocalName = value",
        -2.63584041595459
      ],
      [
        "SELECT Continent FROM country WHERE LocalName = value OR Continent = value",
        -2.838131904602051
      ],
      [
        "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = value OR T2.Language = value",
        -3.0810670852661133
      ],
      [
        "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value OR T1.Name = value",
        -3.265026092529297
      ],
      [
        "SELECT Continent FROM country WHERE LocalName = value OR Name = value",
        -3.414754867553711
      ],
      [
        "SELECT Continent FROM country WHERE Name = value OR LocalName = value",
        -3.5457305908203125
      ],
      [
        "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value OR T2.Language = value",
        -4.369232177734375
      ],
      [
        "SELECT Continent FROM country WHERE Name = value OR Continent = value",
        -4.5064496994018555
      ],
      [
        "SELECT Continent FROM country WHERE Name = value OR Name = value",
        -4.6937150955200195
      ],
      [
        "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.LocalName = value OR T2.Language = value",
        -4.889701843261719
      ],
      [
        "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = value OR T2.Language = value",
        -5.455277442932129
      ],
      [
        "SELECT Region FROM country WHERE Continent = value OR LocalName = value",
        -6.290884971618652
      ],
      [
        "SELECT Region FROM country WHERE Continent = value OR Continent = value",
        -7.31095027923584
      ],
      [
        "SELECT Region FROM country WHERE Continent = value OR Name = value",
        -7.322551727294922
      ],
      [
        "SELECT LocalName FROM country WHERE Continent = value OR LocalName = value",
        -7.3818230628967285
      ]
    ],
    "predicted_parse_with_values": "SELECT Continent FROM country WHERE Continent = \"English\" OR LocalName = \"Dutch\"",
    "predicted_parse": "SELECT Continent FROM country WHERE Continent = value OR LocalName = value",
    "predicted_parse_explanation": [
      "find the continent in country table whose continent equals English or local name equals Dutch"
    ],
    "template_feedback": "additionally use the information from the countrylanguage table besides the country table . consider the language equals English or language equals Dutch conditions in place of the continent equals English or local name equals Dutch conditions . find region in place of continent . make sure no repetition in the results .",
    "primary_span": [
      [
        0,
        7
      ],
      [
        13,
        22
      ],
      [
        37,
        38
      ],
      [
        44,
        51
      ]
    ],
    "secondary_span": [
      [
        8,
        12
      ],
      [
        23,
        36
      ],
      [
        39,
        43
      ]
    ],
    "edits": [
      "distinct",
      "region",
      "continent",
      "countrylanguage",
      "language equals \"English\" or language equals \"Dutch\"",
      "continent equals \"English\" or local name equals \"Dutch\""
    ],
    "edits_original": "< select > add distinct </ select > < select > add region </ select > < select > remove continent </ select > < from > add countrylanguage </ from > < where > add language equals \" English \" or language equals \" Dutch \" </ where > < where > remove continent equals \" English \" or local name equals \" Dutch \" </ where >"
  },
  {
    "db_id": "tvshow",
    "feedback": "You have to use right parameter which is directed by and not the written by.",
    "question": "What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?",
    "gold_parse": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\"",
    "beam": [
      [
        "SELECT Title FROM Cartoon WHERE Written_by = value OR Directed_by = value",
        -0.43244361877441406
      ],
      [
        "SELECT Title FROM Cartoon WHERE Written_by = value OR Written_by = value",
        -1.1060733795166016
      ],
      [
        "SELECT Title FROM Cartoon WHERE Directed_by = value OR Written_by = value",
        -4.9087934494018555
      ],
      [
        "SELECT Title FROM Cartoon WHERE Directed_by = value OR Directed_by = value",
        -5.093618392944336
      ],
      [
        "SELECT DISTINCT Title FROM Cartoon WHERE Written_by = value OR Directed_by = value",
        -5.486326217651367
      ],
      [
        "SELECT DISTINCT Title FROM Cartoon WHERE Written_by = value OR Written_by = value",
        -6.0793867111206055
      ],
      [
        "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T2.Channel = T1.id JOIN Cartoon AS T3 ON T1.id = T3.Channel WHERE T3.Written_by = value OR T3.Directed_by = value",
        -9.845775604248047
      ],
      [
        "SELECT DISTINCT Title FROM Cartoon WHERE Directed_by = value OR Written_by = value",
        -9.973236083984375
      ],
      [
        "SELECT DISTINCT Title FROM Cartoon WHERE Directed_by = value OR Directed_by = value",
        -10.204060554504395
      ],
      [
        "SELECT Title FROM Cartoon WHERE Written_by = value AND Directed_by = value",
        -10.382328033447266
      ],
      [
        "SELECT DISTINCT Title FROM Cartoon WHERE Written_by = value OR Directed_by = value",
        -10.589056968688965
      ],
      [
        "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value OR T1.series_name = value",
        -10.616189002990723
      ],
      [
        "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T2.Channel = T1.id JOIN Cartoon AS T3 ON T1.id = T3.Channel WHERE T3.Written_by = value OR T3.Written_by = value",
        -10.663461685180664
      ],
      [
        "SELECT DISTINCT Title FROM Cartoon WHERE Written_by = value OR Written_by = value",
        -11.517088890075684
      ],
      [
        "SELECT Title FROM Cartoon WHERE Written_by = value AND Written_by = value",
        -12.281514167785645
      ],
      [
        "SELECT T3.Title , T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T2.Channel = T1.id JOIN Cartoon AS T3 ON T1.id = T3.Channel WHERE T3.Written_by = value OR T3.Directed_by = value",
        -12.334762573242188
      ],
      [
        "SELECT T3.Title , T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T2.Channel = T1.id JOIN Cartoon AS T3 ON T1.id = T3.Channel WHERE T3.Written_by = value OR T3.Written_by = value",
        -12.736080169677734
      ],
      [
        "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value OR T1.Language = value",
        -13.184258460998535
      ],
      [
        "SELECT Title FROM Cartoon WHERE Written_by = value OR Written_by = value AND Directed_by = value",
        -13.749441146850586
      ],
      [
        "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T2.Channel = T1.id JOIN Cartoon AS T3 ON T1.id = T3.Channel WHERE T3.Directed_by = value OR T3.Written_by = value",
        -14.502991676330566
      ]
    ],
    "predicted_parse_with_values": "SELECT Title FROM Cartoon WHERE Written_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\"",
    "predicted_parse": "SELECT Title FROM Cartoon WHERE Written_by = value OR Directed_by = value",
    "predicted_parse_explanation": [
      "find the title in cartoon table whose written by equals Ben Jones or directed by equals Brandon Vietti"
    ],
    "template_feedback": "consider the directed by equals Ben Jones conditions in place of the written by equals Ben Jones conditions .",
    "primary_span": [
      [
        0,
        7
      ]
    ],
    "secondary_span": [
      [
        8,
        18
      ]
    ],
    "edits": [
      "directed by equals \"Ben Jones\" or directed by equals \"Brandon Vietti\"",
      "written by equals \"Ben Jones\" or directed by equals \"Brandon Vietti\""
    ],
    "edits_original": "< where > add directed by equals \" Ben Jones \" or directed by equals \" Brandon Vietti \" </ where > < where > remove written by equals \" Ben Jones \" or directed by equals \" Brandon Vietti \" </ where >"
  },
  {
    "db_id": "student_transcripts_tracking",
    "feedback": "In step 1 Replace semesters with degree programs , In step 2 and step 3 replace semester name with degree summary name .",
    "question": "What is the id of the semester that had both Masters and Bachelors students enrolled?",
    "gold_parse": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'",
    "beam": [
      [
        "SELECT T2.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id WHERE T1.semester_name = value INTERSECT SELECT T2.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id WHERE T1.semester_name = value",
        -0.5347251892089844
      ],
      [
        "SELECT T2.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id WHERE T1.semester_name = value INTERSECT SELECT T2.semester_id FROM Degree_Programs AS T3 JOIN Student_Enrolment AS T2 ON T3.degree_program_id = T2.degree_program_id WHERE T3.degree_summary_name = value",
        -1.1673965454101562
      ],
      [
        "SELECT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE T1.degree_summary_name = value INTERSECT SELECT T2.semester_id FROM Semesters AS T3 JOIN Student_Enrolment AS T2 ON T3.semester_id = T2.semester_id WHERE T3.semester_name = value",
        -3.1370162963867188
      ],
      [
        "SELECT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE T1.degree_summary_name = value INTERSECT SELECT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE T1.degree_summary_name = value",
        -3.7638587951660156
      ],
      [
        "SELECT T2.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id WHERE T1.semester_name = value INTERSECT SELECT T2.semester_id FROM Courses AS T3 JOIN Student_Enrolment AS T2 JOIN Student_Enrolment_Courses AS T4 ON T3.course_id = T4.course_id AND T4.student_enrolment_id = T2.student_enrolment_id WHERE T3.course_name = value",
        -4.5574445724487305
      ],
      [
        "SELECT T2.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id WHERE T1.semester_name = value INTERSECT SELECT T2.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id WHERE T1.semester_description = value",
        -5.113242149353027
      ],
      [
        "SELECT T2.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id WHERE T1.semester_description = value INTERSECT SELECT T2.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id WHERE T1.semester_name = value",
        -5.220192909240723
      ],
      [
        "SELECT T2.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id WHERE T1.semester_description = value INTERSECT SELECT T2.semester_id FROM Degree_Programs AS T3 JOIN Student_Enrolment AS T2 ON T3.degree_program_id = T2.degree_program_id WHERE T3.degree_summary_name = value",
        -5.857357978820801
      ],
      [
        "SELECT T1.semester_id FROM Semesters AS T1 WHERE T1.semester_name = value INTERSECT SELECT T2.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id WHERE T1.semester_name = value",
        -5.942670822143555
      ],
      [
        "SELECT T2.semester_id FROM Courses AS T1 JOIN Student_Enrolment AS T2 JOIN Student_Enrolment_Courses AS T3 ON T1.course_id = T3.course_id AND T3.student_enrolment_id = T2.student_enrolment_id WHERE T1.course_name = value INTERSECT SELECT T2.semester_id FROM Semesters AS T4 JOIN Student_Enrolment AS T2 ON T4.semester_id = T2.semester_id WHERE T4.semester_name = value",
        -6.367987632751465
      ],
      [
        "SELECT T2.student_enrolment_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id WHERE T1.semester_name = value INTERSECT SELECT T2.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id WHERE T1.semester_name = value",
        -6.504687309265137
      ],
      [
        "SELECT T1.semester_id FROM Semesters AS T1 WHERE T1.semester_name = value INTERSECT SELECT T3.semester_id FROM Degree_Programs AS T2 JOIN Student_Enrolment AS T3 ON T2.degree_program_id = T3.degree_program_id WHERE T2.degree_summary_name = value",
        -6.574084281921387
      ],
      [
        "SELECT T2.semester_id FROM Courses AS T1 JOIN Student_Enrolment AS T2 JOIN Student_Enrolment_Courses AS T3 ON T1.course_id = T3.course_id AND T3.student_enrolment_id = T2.student_enrolment_id WHERE T1.course_name = value INTERSECT SELECT T2.semester_id FROM Degree_Programs AS T4 JOIN Student_Enrolment AS T2 ON T4.degree_program_id = T2.degree_program_id WHERE T4.degree_summary_name = value",
        -7.017488479614258
      ],
      [
        "SELECT T2.student_enrolment_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id WHERE T1.semester_name = value INTERSECT SELECT T2.semester_id FROM Degree_Programs AS T3 JOIN Student_Enrolment AS T2 ON T3.degree_program_id = T2.degree_program_id WHERE T3.degree_summary_name = value",
        -7.137783050537109
      ],
      [
        "SELECT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE T1.degree_summary_name = value INTERSECT SELECT T2.semester_id FROM Courses AS T3 JOIN Student_Enrolment AS T2 JOIN Student_Enrolment_Courses AS T4 ON T3.course_id = T4.course_id AND T4.student_enrolment_id = T2.student_enrolment_id WHERE T3.course_name = value",
        -7.157931327819824
      ],
      [
        "SELECT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE T1.degree_summary_name = value INTERSECT SELECT T2.semester_id FROM Semesters AS T3 JOIN Student_Enrolment AS T2 ON T3.semester_id = T2.semester_id WHERE T3.semester_description = value",
        -7.718059539794922
      ],
      [
        "SELECT T2.student_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id WHERE T1.semester_name = value INTERSECT SELECT T2.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id WHERE T1.semester_name = value",
        -8.466431140899658
      ],
      [
        "SELECT T2.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id WHERE T1.semester_name = value INTERSECT SELECT T2.semester_id FROM Students AS T3 JOIN Student_Enrolment AS T2 ON T3.student_id = T2.student_id WHERE T3.middle_name = value",
        -8.561739921569824
      ],
      [
        "SELECT T2.student_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id WHERE T1.semester_name = value INTERSECT SELECT T2.semester_id FROM Degree_Programs AS T3 JOIN Student_Enrolment AS T2 ON T3.degree_program_id = T2.degree_program_id WHERE T3.degree_summary_name = value",
        -9.099241733551025
      ],
      [
        "SELECT T2.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id WHERE T1.semester_description = value INTERSECT SELECT T2.semester_id FROM Courses AS T3 JOIN Student_Enrolment AS T2 JOIN Student_Enrolment_Courses AS T4 ON T3.course_id = T4.course_id AND T4.student_enrolment_id = T2.student_enrolment_id WHERE T3.course_name = value",
        -9.24792194366455
      ]
    ],
    "predicted_parse_with_values": "SELECT T2.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id WHERE T1.semester_name = \"Master\" INTERSECT SELECT T2.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id WHERE T1.semester_name = \"Bachelor\"",
    "predicted_parse": "SELECT T2.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id WHERE T1.semester_name = value INTERSECT SELECT T2.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id WHERE T1.semester_name = value",
    "predicted_parse_explanation": [
      "Step 1: for each row in semesters table , find the corresponding rows in student enrolment table",
      "Step 2: find the student enrolment 's semester id of the results of step 1 whose semester name equals Master",
      "Step 3: for each row in semesters table , find the corresponding rows in student enrolment table",
      "Step 4: find the student enrolment 's semester id of the results of step 3 whose semester name equals Bachelor",
      "Step 5: show the rows that are in both the results of step 2 and step 4"
    ],
    "template_feedback": "in step 1 , use degree programs table in place of semesters table in step 2 , consider the degree summary name equals Master conditions in place of the semester name equals Master conditions . make sure no repetition in the results . in step 3 , use degree programs table in place of semesters table in step 4 , consider the degree summary name equals Bachelor conditions in place of the semester name equals Bachelor conditions . make sure no repetition in the results .",
    "primary_span": [
      [
        4,
        7
      ],
      [
        17,
        24
      ],
      [
        35,
        42
      ],
      [
        47,
        50
      ],
      [
        60,
        67
      ],
      [
        78,
        85
      ]
    ],
    "secondary_span": [
      [
        8,
        12
      ],
      [
        25,
        34
      ],
      [
        51,
        55
      ],
      [
        68,
        77
      ]
    ],
    "edits": [
      "distinct",
      "degree programs",
      "semesters",
      "degree summary name equals \"Master\"",
      "semester name equals \"Master\"",
      "distinct",
      "degree programs",
      "semesters",
      "degree summary name equals \"Bachelor\"",
      "semester name equals \"Bachelor\""
    ],
    "edits_original": "< select > add distinct </ select > < from > add degree programs </ from > < from > remove semesters </ from > < where > add degree summary name equals \" Master \" </ where > < where > remove semester name equals \" Master \" </ where > < select > add distinct </ select > < from > add degree programs </ from > < from > remove semesters </ from > < where > add degree summary name equals \" Bachelor \" </ where > < where > remove semester name equals \" Bachelor \" </ where >"
  },
  {
    "db_id": "world_1",
    "feedback": "Exchange region with continent and continent with language , Verify it is spoken in country .",
    "question": "What is the number of distinct continents where Chinese is spoken?",
    "gold_parse": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"",
    "beam": [
      [
        "SELECT Count ( DISTINCT Region ) FROM country WHERE Continent = value",
        -0.4988741874694824
      ],
      [
        "SELECT Count ( DISTINCT Region ) FROM country WHERE LocalName = value",
        -0.9992556571960449
      ],
      [
        "SELECT Count ( DISTINCT Continent ) FROM country WHERE LocalName = value",
        -5.0650224685668945
      ],
      [
        "SELECT Count ( DISTINCT Continent ) FROM country WHERE Continent = value",
        -5.127240180969238
      ],
      [
        "SELECT Count ( * ) FROM country WHERE Continent = value",
        -5.136706352233887
      ],
      [
        "SELECT Count ( DISTINCT Region ) FROM country WHERE Name = value",
        -5.787269115447998
      ],
      [
        "SELECT Count ( * ) FROM country WHERE LocalName = value",
        -6.456944465637207
      ],
      [
        "SELECT Count ( DISTINCT LocalName ) FROM country WHERE LocalName = value",
        -7.225099563598633
      ],
      [
        "SELECT Count ( DISTINCT LocalName ) FROM country WHERE Continent = value",
        -7.259568214416504
      ],
      [
        "SELECT Count ( DISTINCT Name ) FROM country WHERE Continent = value",
        -9.213385581970215
      ],
      [
        "SELECT Count ( Region ) FROM country WHERE Continent = value",
        -9.422420978546143
      ],
      [
        "SELECT Count ( DISTINCT Continent ) FROM country WHERE Name = value",
        -9.477641105651855
      ],
      [
        "SELECT Count ( Region ) FROM country WHERE LocalName = value",
        -9.81028699874878
      ],
      [
        "SELECT Count ( DISTINCT Name ) FROM country WHERE LocalName = value",
        -9.934422492980957
      ],
      [
        "SELECT Count ( DISTINCT T1.District ) FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = value",
        -10.901832580566406
      ],
      [
        "SELECT Count ( DISTINCT LocalName ) FROM country WHERE Name = value",
        -11.737017631530762
      ],
      [
        "SELECT Count ( DISTINCT HeadOfState ) FROM country WHERE Continent = value",
        -11.902425765991211
      ],
      [
        "SELECT Count ( DISTINCT T1.District ) FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.LocalName = value",
        -12.171579360961914
      ],
      [
        "SELECT Count ( * ) FROM country WHERE Name = value",
        -12.524450302124023
      ],
      [
        "SELECT Count ( DISTINCT GovernmentForm ) FROM country WHERE Continent = value",
        -12.589862823486328
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( DISTINCT Region ) FROM country WHERE Continent = \"Chinese\"",
    "predicted_parse": "SELECT Count ( DISTINCT Region ) FROM country WHERE Continent = value",
    "predicted_parse_explanation": [
      "find the number of different region in country table whose continent equals Chinese"
    ],
    "template_feedback": "additionally use the information from the countrylanguage table besides the country table . consider the language equals Chinese conditions in place of the continent equals Chinese conditions . find number of different continent in place of number of different region .",
    "primary_span": [
      [
        0,
        7
      ],
      [
        13,
        18
      ],
      [
        28,
        32
      ]
    ],
    "secondary_span": [
      [
        8,
        12
      ],
      [
        19,
        27
      ],
      [
        33,
        40
      ]
    ],
    "edits": [
      "number of distinct continent",
      "number of distinct region",
      "countrylanguage",
      "language equals \"Chinese\"",
      "continent equals \"Chinese\""
    ],
    "edits_original": "< select > add number of distinct continent </ select > < select > remove number of distinct region </ select > < from > add countrylanguage </ from > < where > add language equals \" Chinese \" </ where > < where > remove continent equals \" Chinese \" </ where >"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "feedback": "Change reference template types table with documents table .",
    "question": "Count the number of documents.",
    "gold_parse": "SELECT count(*) FROM Documents",
    "beam": [
      [
        "SELECT Count ( * ) FROM Ref_Template_Types",
        -1.049041748046875e-05
      ],
      [
        "SELECT Sum ( * ) FROM Ref_Template_Types",
        -12.748576641082764
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM Ref_Template_Types",
        -13.456554412841797
      ],
      [
        "SELECT Count ( * ) FROM Documents WHERE Document_Name = value",
        -14.023346543312073
      ],
      [
        "SELECT Avg ( * ) FROM Ref_Template_Types",
        -14.368319272994995
      ],
      [
        "SELECT Count ( * ) , Count ( * ) FROM Ref_Template_Types",
        -14.67767333984375
      ],
      [
        "SELECT Count ( * ) FROM Documents GROUP BY Template_ID",
        -14.71854031085968
      ],
      [
        "SELECT Count ( * ) FROM Paragraphs GROUP BY Document_ID",
        -15.559274911880493
      ],
      [
        "SELECT Count ( Count ( * ) ) FROM Ref_Template_Types",
        -15.612454414367676
      ],
      [
        "SELECT Sum ( Document_Name ) FROM Documents",
        -16.309231281280518
      ],
      [
        "SELECT Count ( * ) FROM Ref_Template_Types INTERSECT SELECT Count ( * ) FROM Ref_Template_Types",
        -16.319183349609375
      ],
      [
        "SELECT Count ( * ) FROM Documents ORDER BY Document_ID Desc LIMIT value",
        -16.687439680099487
      ],
      [
        "SELECT * FROM Ref_Template_Types",
        -16.950580582022667
      ],
      [
        "SELECT Count ( DISTINCT * ) FROM Ref_Template_Types",
        -16.964926719665527
      ],
      [
        "SELECT Count ( * ) FROM Ref_Template_Types LIMIT value",
        -17.004131317138672
      ],
      [
        "SELECT Count ( * ) FROM Documents ORDER BY Document_Name Desc",
        -17.11707901954651
      ],
      [
        "SELECT Count ( * ) FROM Documents GROUP BY Document_ID",
        -17.119575023651123
      ],
      [
        "SELECT Count ( * ) FROM Ref_Template_Types GROUP BY *",
        -17.19183921813965
      ],
      [
        "SELECT Max ( * ) FROM Ref_Template_Types",
        -17.392150044441223
      ],
      [
        "SELECT Sum ( Document_ID ) FROM Documents",
        -18.040918350219727
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM Ref_Template_Types",
    "predicted_parse": "SELECT Count ( * ) FROM Ref_Template_Types",
    "predicted_parse_explanation": [
      "find the number of rows in reference template types table"
    ],
    "template_feedback": "use documents table in place of reference template types table .",
    "primary_span": [
      [
        0,
        2
      ]
    ],
    "secondary_span": [
      [
        3,
        10
      ]
    ],
    "edits": [
      "documents",
      "reference template types"
    ],
    "edits_original": "< from > add documents </ from > < from > remove reference template types </ from >"
  },
  {
    "db_id": "student_transcripts_tracking",
    "feedback": "You need to search for the name of semester from semester table whose id of semester is not available in student enrolment table.",
    "question": "Which semesters do not have any student enrolled? List the semester name.",
    "gold_parse": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )",
    "beam": [
      [
        "SELECT T1.semester_id FROM Semesters AS T1 WHERE T1.semester_id NOT IN ( SELECT T2.semester_id FROM Student_Enrolment AS T2 )",
        -0.7898497581481934
      ],
      [
        "SELECT T1.semester_name FROM Semesters AS T1 WHERE T1.semester_id NOT IN ( SELECT T2.semester_id FROM Student_Enrolment AS T2 )",
        -0.905116081237793
      ],
      [
        "SELECT semester_id FROM Semesters EXCEPT SELECT semester_name FROM Semesters",
        -2.53955078125
      ],
      [
        "SELECT semester_name FROM Semesters EXCEPT SELECT semester_name FROM Semesters",
        -3.5352635383605957
      ],
      [
        "SELECT T1.course_name FROM Courses AS T1 JOIN Semesters AS T2 JOIN Student_Enrolment AS T3 ON T3.semester_id = T2.semester_id JOIN Student_Enrolment_Courses AS T4 ON T1.course_id = T4.course_id AND T4.student_enrolment_id = T3.student_enrolment_id WHERE T2.semester_id NOT IN ( SELECT T3.semester_id FROM Student_Enrolment AS T3 )",
        -3.8173742294311523
      ],
      [
        "SELECT T1.semester_description FROM Semesters AS T1 WHERE T1.semester_id NOT IN ( SELECT T2.semester_id FROM Student_Enrolment AS T2 )",
        -5.148621559143066
      ],
      [
        "SELECT T1.course_name FROM Courses AS T1 EXCEPT SELECT T2.semester_name FROM Semesters AS T2",
        -6.111458778381348
      ],
      [
        "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Semesters AS T2 JOIN Student_Enrolment AS T3 ON T1.degree_program_id = T3.degree_program_id AND T3.semester_id = T2.semester_id WHERE T2.semester_id NOT IN ( SELECT T3.semester_id FROM Student_Enrolment AS T3 )",
        -6.514406204223633
      ],
      [
        "SELECT semester_description FROM Semesters EXCEPT SELECT semester_name FROM Semesters",
        -7.460731506347656
      ],
      [
        "SELECT T1.semester_id FROM Semesters AS T1 EXCEPT SELECT T2.semester_id FROM Student_Enrolment AS T2",
        -7.810126304626465
      ],
      [
        "SELECT * FROM Semesters AS T1 WHERE T1.semester_id NOT IN ( SELECT T2.semester_id FROM Student_Enrolment AS T2 )",
        -8.617939949035645
      ],
      [
        "SELECT T1.semester_name FROM Semesters AS T1 EXCEPT SELECT T2.semester_id FROM Student_Enrolment AS T2",
        -8.704123973846436
      ],
      [
        "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 EXCEPT SELECT T2.semester_name FROM Semesters AS T2",
        -9.048205375671387
      ],
      [
        "SELECT T1.semester_id FROM Semesters AS T1 EXCEPT SELECT T2.course_name FROM Courses AS T2",
        -9.62868881225586
      ],
      [
        "SELECT semester_id FROM Semesters EXCEPT SELECT semester_description FROM Semesters",
        -10.0985689163208
      ],
      [
        "SELECT semester_id FROM Semesters WHERE semester_name ! = value",
        -10.498253345489502
      ],
      [
        "SELECT T1.semester_name FROM Semesters AS T1 EXCEPT SELECT T2.course_name FROM Courses AS T2",
        -10.601117610931396
      ],
      [
        "SELECT semester_name FROM Semesters EXCEPT SELECT semester_description FROM Semesters",
        -11.06970739364624
      ],
      [
        "SELECT T2.semester_id FROM Courses AS T1 JOIN Semesters AS T2 JOIN Student_Enrolment AS T3 ON T3.semester_id = T2.semester_id JOIN Student_Enrolment_Courses AS T4 ON T1.course_id = T4.course_id AND T4.student_enrolment_id = T3.student_enrolment_id WHERE T1.course_name ! = value",
        -11.434841632843018
      ],
      [
        "SELECT semester_id FROM Semesters WHERE semester_description ! = value",
        -12.098694324493408
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.semester_id FROM Semesters AS T1 WHERE T1.semester_id NOT IN ( SELECT T2.semester_id FROM Student_Enrolment AS T2 )",
    "predicted_parse": "SELECT T1.semester_id FROM Semesters AS T1 WHERE T1.semester_id NOT IN ( SELECT T2.semester_id FROM Student_Enrolment AS T2 )",
    "predicted_parse_explanation": [
      "Step 1: find the student enrolment 's semester id in student enrolment table",
      "Step 2: find the semesters 's semester id in semesters table whose semesters 's semester id not one of the results of step 1"
    ],
    "template_feedback": "in step 2 , find semester name in place of semester id .",
    "primary_span": [
      [
        4,
        6
      ]
    ],
    "secondary_span": [
      [
        7,
        12
      ]
    ],
    "edits": [
      "semester name",
      "semester id"
    ],
    "edits_original": "< select > add semester name </ select > < select > remove semester id </ select >"
  },
  {
    "db_id": "flight_2",
    "feedback": "In step 1 Change \"City in airports table\" with city of destination airport in flights table\".",
    "question": "Which city has most number of arriving flights?",
    "gold_parse": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
    "beam": [
      [
        "SELECT City FROM airports GROUP BY City ORDER BY Count ( * ) Desc LIMIT value",
        -0.0015878677368164062
      ],
      [
        "SELECT AirportName FROM airports GROUP BY City ORDER BY Count ( * ) Desc LIMIT value",
        -6.465143203735352
      ],
      [
        "SELECT City FROM airports GROUP BY AirportCode ORDER BY Count ( * ) Desc LIMIT value",
        -11.339574813842773
      ],
      [
        "SELECT City FROM airports GROUP BY AirportName ORDER BY Count ( * ) Desc LIMIT value",
        -12.04916000366211
      ],
      [
        "SELECT City FROM airports GROUP BY City ORDER BY Count ( * ) Desc",
        -12.61600112915039
      ],
      [
        "SELECT City , Count ( * ) FROM airports GROUP BY City ORDER BY Count ( * ) Desc LIMIT value",
        -12.6647367477417
      ],
      [
        "SELECT City FROM airports GROUP BY City ORDER BY Count ( * ) Asc LIMIT value",
        -13.088825225830078
      ],
      [
        "SELECT Count ( * ) FROM airports GROUP BY City ORDER BY Count ( * ) Desc LIMIT value",
        -13.900291442871094
      ],
      [
        "SELECT City FROM airports GROUP BY City",
        -14.122091293334961
      ],
      [
        "SELECT DISTINCT City FROM airports GROUP BY City ORDER BY Count ( * ) Desc LIMIT value",
        -14.495687484741211
      ],
      [
        "SELECT City FROM airports GROUP BY City HAVING Count ( * ) = value",
        -14.885717391967773
      ],
      [
        "SELECT City FROM airports ORDER BY Count ( * ) Desc LIMIT value",
        -15.007745742797852
      ],
      [
        "SELECT City FROM airports GROUP BY City ORDER BY Avg ( * ) Desc LIMIT value",
        -15.192022323608398
      ],
      [
        "SELECT City FROM airports GROUP BY City ORDER BY Count ( DISTINCT * ) Desc LIMIT value",
        -15.921028137207031
      ],
      [
        "SELECT City FROM airports WHERE City = value GROUP BY City ORDER BY Count ( * ) Desc LIMIT value",
        -15.943968296051025
      ],
      [
        "SELECT DISTINCT City FROM airports GROUP BY City ORDER BY Count ( * ) Desc LIMIT value",
        -15.99665355682373
      ],
      [
        "SELECT City FROM airports GROUP BY City HAVING Count ( * ) IN ( SELECT City FROM airports )",
        -16.32841920852661
      ],
      [
        "SELECT City FROM airports GROUP BY City ORDER BY Sum ( * ) Desc LIMIT value",
        -16.391660690307617
      ],
      [
        "SELECT City FROM airports GROUP BY DISTINCT City ORDER BY Count ( * ) Desc LIMIT value",
        -16.593653678894043
      ],
      [
        "SELECT City FROM airports GROUP BY City HAVING Count ( * ) IN ( SELECT City FROM airports GROUP BY City ORDER BY Count ( * ) Desc LIMIT value )",
        -16.620961666107178
      ]
    ],
    "predicted_parse_with_values": "SELECT City FROM airports GROUP BY City ORDER BY Count ( * ) Desc LIMIT 1",
    "predicted_parse": "SELECT City FROM airports GROUP BY City ORDER BY Count ( * ) Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of city in airports table",
      "Step 2: find the city in airports table with largest value in the results of step 1"
    ],
    "template_feedback": "in step 1 , additionally use the information from the flights table besides the airports table .",
    "primary_span": [
      [
        4,
        11
      ]
    ],
    "secondary_span": [
      [
        12,
        16
      ]
    ],
    "edits": [
      "flights"
    ],
    "edits_original": "< from > add flights </ from >"
  },
  {
    "db_id": "dog_kennels",
    "feedback": "In step 1 Use dogs table instead of owners table .",
    "question": "Return the owner id, first name and last name of the owner who has the most dogs.",
    "gold_parse": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
    "beam": [
      [
        "SELECT owner_id , first_name , last_name FROM Owners GROUP BY owner_id ORDER BY Count ( * ) Desc LIMIT value",
        -0.0016393661499023438
      ],
      [
        "SELECT T1.owner_id , T1.first_name , T3.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id GROUP BY T1.owner_id ORDER BY Count ( * ) Desc LIMIT value",
        -7.389707565307617
      ],
      [
        "SELECT first_name , last_name , last_name FROM Owners GROUP BY owner_id ORDER BY Count ( * ) Desc LIMIT value",
        -8.21666669845581
      ],
      [
        "SELECT T1.first_name , T1.last_name , T2.weight FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id ORDER BY Count ( * ) Desc LIMIT value",
        -8.493585109710693
      ],
      [
        "SELECT T2.owner_id , T1.first_name , T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id ORDER BY Count ( * ) Desc LIMIT value",
        -8.679235458374023
      ],
      [
        "SELECT first_name , last_name , owner_id FROM Owners GROUP BY owner_id ORDER BY Count ( * ) Desc LIMIT value",
        -9.05624008178711
      ],
      [
        "SELECT owner_id , first_name FROM Owners GROUP BY owner_id ORDER BY Count ( * ) Desc LIMIT value",
        -9.401881217956543
      ],
      [
        "SELECT T1.owner_id , T1.first_name , T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY T2.owner_id ORDER BY Count ( * ) Desc LIMIT value",
        -10.35848331451416
      ],
      [
        "SELECT T1.owner_id , T3.first_name , T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id GROUP BY T1.owner_id ORDER BY Count ( * ) Desc LIMIT value",
        -10.39505386352539
      ],
      [
        "SELECT T1.owner_id , T1.first_name , T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id ORDER BY Count ( T2.weight ) Desc LIMIT value",
        -10.981825828552246
      ],
      [
        "SELECT T1.first_name , T1.last_name , T3.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id GROUP BY T1.owner_id ORDER BY Count ( * ) Desc LIMIT value",
        -11.015707969665527
      ],
      [
        "SELECT T3.professional_id , T1.first_name , T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id GROUP BY T1.owner_id ORDER BY Count ( * ) Desc LIMIT value",
        -11.639389038085938
      ],
      [
        "SELECT owner_id , first_name , last_name FROM Owners GROUP BY owner_id ORDER BY Count ( * ) Desc",
        -11.855300903320312
      ],
      [
        "SELECT T1.first_name , T1.last_name , T2.age FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id ORDER BY Count ( * ) Desc LIMIT value",
        -12.058665752410889
      ],
      [
        "SELECT T1.owner_id , T1.first_name , T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id ORDER BY T2.weight Desc LIMIT value",
        -12.117130756378174
      ],
      [
        "SELECT T1.owner_id , T1.first_name , T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id ORDER BY Count ( T2.date_of_birth ) Desc LIMIT value",
        -12.268799781799316
      ],
      [
        "SELECT T1.owner_id , T1.first_name , T1.last_name , T2.weight FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id ORDER BY Count ( * ) Desc LIMIT value",
        -12.295051097869873
      ],
      [
        "SELECT T3.first_name , T1.last_name , T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id GROUP BY T1.owner_id ORDER BY Count ( * ) Desc LIMIT value",
        -12.37077283859253
      ],
      [
        "SELECT owner_id , first_name , last_name FROM Owners GROUP BY owner_id ORDER BY Count ( * ) Asc LIMIT value",
        -12.430898666381836
      ],
      [
        "SELECT T1.owner_id , T1.first_name , T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id ORDER BY T2.age Desc LIMIT value",
        -12.985096454620361
      ]
    ],
    "predicted_parse_with_values": "SELECT owner_id , first_name , last_name FROM Owners GROUP BY owner_id ORDER BY Count ( * ) Desc LIMIT 1",
    "predicted_parse": "SELECT owner_id , first_name , last_name FROM Owners GROUP BY owner_id ORDER BY Count ( * ) Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of owner id in owners table",
      "Step 2: find the owner id , first name , last name in owners table with largest value in the results of step 1"
    ],
    "template_feedback": "in step 1 , additionally use the information from the dogs table besides the owners table .",
    "primary_span": [
      [
        4,
        11
      ]
    ],
    "secondary_span": [
      [
        12,
        16
      ]
    ],
    "edits": [
      "dogs"
    ],
    "edits_original": "< from > add dogs </ from >"
  },
  {
    "db_id": "student_transcripts_tracking",
    "feedback": "Find transcript id ahead of transcript date , other details , and ensure to find for smallest value of transcript date",
    "question": "What is the earliest date of a transcript release, and what details can you tell me?",
    "gold_parse": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
    "beam": [
      [
        "SELECT transcript_date , other_details FROM Transcripts",
        -0.006558418273925781
      ],
      [
        "SELECT Max ( transcript_date ) , other_details FROM Transcripts",
        -5.54708194732666
      ],
      [
        "SELECT T3.transcript_date , T1.other_details FROM Student_Enrolment AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.student_enrolment_id = T2.student_enrolment_id JOIN Transcripts AS T3 JOIN Transcript_Contents AS T4 ON T2.student_course_id = T4.student_course_id AND T4.transcript_id = T3.transcript_id",
        -6.195849418640137
      ],
      [
        "SELECT transcript_date , other_details FROM Transcripts ORDER BY transcript_date Asc LIMIT value",
        -8.898713111877441
      ],
      [
        "SELECT Min ( transcript_date ) , other_details FROM Transcripts",
        -9.215049743652344
      ],
      [
        "SELECT other_details , other_details FROM Transcripts",
        -9.572670936584473
      ],
      [
        "SELECT transcript_date , other_details FROM Transcripts UNION SELECT other_details FROM Transcripts",
        -10.127246856689453
      ],
      [
        "SELECT Max ( other_details ) , other_details FROM Transcripts",
        -10.206330299377441
      ],
      [
        "SELECT T1.date_first_registered , T4.other_details FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id JOIN Student_Enrolment_Courses AS T3 ON T2.student_enrolment_id = T3.student_enrolment_id JOIN Transcripts AS T4 JOIN Transcript_Contents AS T5 ON T3.student_course_id = T5.student_course_id AND T5.transcript_id = T4.transcript_id",
        -10.411347389221191
      ],
      [
        "SELECT T1.other_details , T3.other_details FROM Student_Enrolment AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.student_enrolment_id = T2.student_enrolment_id JOIN Transcripts AS T3 JOIN Transcript_Contents AS T4 ON T2.student_course_id = T4.student_course_id AND T4.transcript_id = T3.transcript_id",
        -10.55280590057373
      ],
      [
        "SELECT * , other_details FROM Transcripts",
        -10.554183006286621
      ],
      [
        "SELECT transcript_date , other_details FROM Transcripts WHERE other_details = value",
        -11.054854393005371
      ],
      [
        "SELECT T1.semester_description , T4.other_details FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id JOIN Student_Enrolment_Courses AS T3 ON T2.student_enrolment_id = T3.student_enrolment_id JOIN Transcripts AS T4 JOIN Transcript_Contents AS T5 ON T3.student_course_id = T5.student_course_id AND T5.transcript_id = T4.transcript_id",
        -11.311917304992676
      ],
      [
        "SELECT T4.transcript_date , T1.other_details FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id JOIN Student_Enrolment_Courses AS T3 ON T2.student_enrolment_id = T3.student_enrolment_id JOIN Transcripts AS T4 JOIN Transcript_Contents AS T5 ON T3.student_course_id = T5.student_course_id AND T5.transcript_id = T4.transcript_id",
        -11.428738594055176
      ],
      [
        "SELECT Max ( T3.transcript_date ) , T1.other_details FROM Student_Enrolment AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.student_enrolment_id = T2.student_enrolment_id JOIN Transcripts AS T3 JOIN Transcript_Contents AS T4 ON T2.student_course_id = T4.student_course_id AND T4.transcript_id = T3.transcript_id",
        -11.49462604522705
      ],
      [
        "SELECT T1.first_name , T4.other_details FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id JOIN Student_Enrolment_Courses AS T3 ON T2.student_enrolment_id = T3.student_enrolment_id JOIN Transcripts AS T4 JOIN Transcript_Contents AS T5 ON T3.student_course_id = T5.student_course_id AND T5.transcript_id = T4.transcript_id",
        -11.593969345092773
      ],
      [
        "SELECT T1.date_left , T4.other_details FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id JOIN Student_Enrolment_Courses AS T3 ON T2.student_enrolment_id = T3.student_enrolment_id JOIN Transcripts AS T4 JOIN Transcript_Contents AS T5 ON T3.student_course_id = T5.student_course_id AND T5.transcript_id = T4.transcript_id",
        -11.765884399414062
      ],
      [
        "SELECT T1.semester_name , T4.other_details FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id JOIN Student_Enrolment_Courses AS T3 ON T2.student_enrolment_id = T3.student_enrolment_id JOIN Transcripts AS T4 JOIN Transcript_Contents AS T5 ON T3.student_course_id = T5.student_course_id AND T5.transcript_id = T4.transcript_id",
        -11.812295913696289
      ],
      [
        "SELECT T1.line_1 , T5.other_details FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id JOIN Student_Enrolment AS T3 ON T2.student_id = T3.student_id JOIN Student_Enrolment_Courses AS T4 ON T3.student_enrolment_id = T4.student_enrolment_id JOIN Transcripts AS T5 JOIN Transcript_Contents AS T6 ON T4.student_course_id = T6.student_course_id AND T6.transcript_id = T5.transcript_id",
        -12.27763557434082
      ],
      [
        "SELECT Count ( transcript_date ) , other_details FROM Transcripts",
        -12.493440628051758
      ]
    ],
    "predicted_parse_with_values": "SELECT transcript_date , other_details FROM Transcripts",
    "predicted_parse": "SELECT transcript_date , other_details FROM Transcripts",
    "predicted_parse_explanation": [
      "find the transcript date and other details in transcripts table"
    ],
    "template_feedback": "find the result with the smallest transcript date .",
    "primary_span": [
      [
        0,
        8
      ]
    ],
    "secondary_span": [],
    "edits": [
      "transcript date",
      "1"
    ],
    "edits_original": "< orderBy > add transcript date </ orderBy > < limit > add 1 </ limit >"
  },
  {
    "db_id": "wta_1",
    "feedback": "Switch ranking to total ranking points.",
    "question": "What are the first names of all players, and their total ranking points?",
    "gold_parse": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
    "beam": [
      [
        "SELECT T1.first_name , T2.ranking FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id",
        -0.6670064926147461
      ],
      [
        "SELECT T1.first_name , T2.winner_rank FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id",
        -1.4370603561401367
      ],
      [
        "SELECT T1.first_name , T2.ranking_points FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id",
        -1.960770606994629
      ],
      [
        "SELECT T1.first_name , T2.winner_rank_points FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id",
        -3.1519041061401367
      ],
      [
        "SELECT T1.first_name , T2.loser_rank FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id",
        -3.5617637634277344
      ],
      [
        "SELECT T1.first_name , T2.loser_rank_points FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id",
        -4.444921493530273
      ],
      [
        "SELECT T1.first_name , T2.winner_rank + T2.loser_rank FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id",
        -6.208954811096191
      ],
      [
        "SELECT T1.first_name , T2.winner_rank + T3.ranking FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id JOIN rankings AS T3 ON T1.player_id = T3.player_id",
        -6.4069671630859375
      ],
      [
        "SELECT T1.first_name , Sum ( T2.ranking_points ) FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id",
        -6.504149436950684
      ],
      [
        "SELECT T1.first_name , T3.ranking + T2.loser_rank FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id JOIN rankings AS T3 ON T1.player_id = T3.player_id",
        -6.626040458679199
      ],
      [
        "SELECT T1.first_name , T2.ranking + T2.ranking FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id",
        -6.873827934265137
      ],
      [
        "SELECT T1.first_name , T3.ranking_points + T2.loser_rank FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id JOIN rankings AS T3 ON T1.player_id = T3.player_id",
        -6.881308555603027
      ],
      [
        "SELECT T1.first_name , Sum ( T2.winner_rank ) FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id",
        -6.957766532897949
      ],
      [
        "SELECT T1.first_name , T2.ranking_points + T2.ranking FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id",
        -7.076059341430664
      ],
      [
        "SELECT T1.first_name , Sum ( T2.ranking ) FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id",
        -7.553363800048828
      ],
      [
        "SELECT T1.first_name , T2.winner_rank_points + T2.loser_rank FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id",
        -7.614347457885742
      ],
      [
        "SELECT T1.first_name , T2.winner_rank_points + T3.ranking FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id JOIN rankings AS T3 ON T1.player_id = T3.player_id",
        -7.776861190795898
      ],
      [
        "SELECT T1.first_name , T2.loser_rank + T2.loser_rank FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id",
        -8.026388168334961
      ],
      [
        "SELECT T1.first_name , Sum ( T2.winner_rank_points ) FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id",
        -8.112244606018066
      ],
      [
        "SELECT first_name FROM players",
        -13.517203330993652
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.first_name , T2.ranking FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id",
    "predicted_parse": "SELECT T1.first_name , T2.ranking FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id",
    "predicted_parse_explanation": [
      "Step 1: for each row in players table , find the corresponding rows in rankings table",
      "Step 2: find the first name and ranking of the results of step 1"
    ],
    "template_feedback": "in step 2 , find for each value of first name . find summation of ranking points in place of ranking .",
    "primary_span": [
      [
        4,
        11
      ],
      [
        12,
        16
      ]
    ],
    "secondary_span": [
      [
        17,
        21
      ]
    ],
    "edits": [
      "summation of ranking points",
      "ranking",
      "first name"
    ],
    "edits_original": "< select > add summation of ranking points </ select > < select > remove ranking </ select > < groupBy > add first name </ groupBy >"
  },
  {
    "db_id": "battle_death",
    "feedback": "No need to find note , find injured in place of that .",
    "question": "What are the death and injury situations caused by the ship with tonnage 't'?",
    "gold_parse": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'",
    "beam": [
      [
        "SELECT T2.note , T2.killed FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id WHERE T1.tonnage = value",
        -0.45615434646606445
      ],
      [
        "SELECT T2.note , T2.injured FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id WHERE T1.tonnage = value",
        -1.2631468772888184
      ],
      [
        "SELECT T2.note , T1.name FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id WHERE T1.tonnage = value",
        -3.3924214839935303
      ],
      [
        "SELECT T2.note , T1.disposition_of_ship FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id WHERE T1.tonnage = value",
        -3.8862342834472656
      ],
      [
        "SELECT T2.note , T2.note FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id WHERE T1.tonnage = value",
        -4.390781879425049
      ],
      [
        "SELECT T2.note , T1.tonnage FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id WHERE T1.tonnage = value",
        -4.40533447265625
      ],
      [
        "SELECT T3.note , T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle AND T1.id = T2.lost_in_battle JOIN death AS T3 ON T2.id = T3.caused_by_ship_id WHERE T2.tonnage = value",
        -6.308903217315674
      ],
      [
        "SELECT T3.note , T1.result FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle AND T1.id = T2.lost_in_battle JOIN death AS T3 ON T2.id = T3.caused_by_ship_id WHERE T2.tonnage = value",
        -6.377178192138672
      ],
      [
        "SELECT T3.note , T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle AND T1.id = T2.lost_in_battle JOIN death AS T3 ON T2.id = T3.caused_by_ship_id WHERE T2.tonnage = value",
        -8.203685760498047
      ],
      [
        "SELECT T2.note , T2.id FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id WHERE T1.tonnage = value",
        -8.294637680053711
      ],
      [
        "SELECT T2.note , T1.lost_in_battle FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id WHERE T1.tonnage = value",
        -8.551178932189941
      ],
      [
        "SELECT T2.note , T2.killed FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id WHERE T1.tonnage LIKE value",
        -8.898046016693115
      ],
      [
        "SELECT T2.note , T2.injured FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id WHERE T1.tonnage LIKE value",
        -8.972239971160889
      ],
      [
        "SELECT T2.note , T1.ship_type FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id WHERE T1.tonnage = value",
        -9.307123184204102
      ],
      [
        "SELECT T2.note , T2.caused_by_ship_id FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id WHERE T1.tonnage = value",
        -9.698972702026367
      ],
      [
        "SELECT T2.note , T1.location FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id WHERE T1.tonnage = value",
        -9.901545524597168
      ],
      [
        "SELECT T2.note , T1.tonnage FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id WHERE T1.tonnage LIKE value",
        -11.265318870544434
      ],
      [
        "SELECT T2.note , T1.disposition_of_ship FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id WHERE T1.tonnage LIKE value",
        -11.534895896911621
      ],
      [
        "SELECT T3.note , T1.latin_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle AND T1.id = T2.lost_in_battle JOIN death AS T3 ON T2.id = T3.caused_by_ship_id WHERE T2.tonnage = value",
        -11.561405181884766
      ],
      [
        "SELECT T2.note , T1.name FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id WHERE T1.tonnage LIKE value",
        -11.790729284286499
      ]
    ],
    "predicted_parse_with_values": "SELECT T2.note , T2.killed FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id WHERE T1.tonnage = \"t\"",
    "predicted_parse": "SELECT T2.note , T2.killed FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id WHERE T1.tonnage = value",
    "predicted_parse_explanation": [
      "Step 1: for each row in ship table , find the corresponding rows in death table",
      "Step 2: find the note and killed of the results of step 1 whose tonnage equals t"
    ],
    "template_feedback": "in step 2 , find injured in place of note .",
    "primary_span": [
      [
        4,
        5
      ]
    ],
    "secondary_span": [
      [
        6,
        10
      ]
    ],
    "edits": [
      "injured",
      "note"
    ],
    "edits_original": "< select > add injured </ select > < select > remove note </ select >"
  },
  {
    "db_id": "dog_kennels",
    "feedback": "Find the number of rows in treatments table .",
    "question": "Find the number of professionals who have ever treated dogs.",
    "gold_parse": "SELECT count(DISTINCT professional_id) FROM Treatments",
    "beam": [
      [
        "SELECT Count ( * ) FROM Dogs WHERE weight = value",
        -0.00537109375
      ],
      [
        "SELECT Count ( DISTINCT T2.professional_id ) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.weight = value",
        -5.502472877502441
      ],
      [
        "SELECT Count ( * ) FROM Treatments WHERE dog_id = value",
        -6.89218282699585
      ],
      [
        "SELECT Count ( * ) FROM Dogs WHERE gender = value",
        -9.619170188903809
      ],
      [
        "SELECT Count ( * ) FROM Treatments WHERE treatment_type_code = value",
        -9.6453218460083
      ],
      [
        "SELECT Count ( * ) FROM Dogs WHERE dog_id = value",
        -9.752126693725586
      ],
      [
        "SELECT Count ( * ) FROM Professionals WHERE professional_id = value",
        -10.809054374694824
      ],
      [
        "SELECT Count ( DISTINCT T1.owner_id ) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T2.weight = value",
        -12.266294479370117
      ],
      [
        "SELECT Count ( * ) FROM Treatments WHERE treatment_id = value",
        -12.419628143310547
      ],
      [
        "SELECT Count ( DISTINCT professional_id ) FROM Treatments WHERE dog_id = value",
        -12.533936500549316
      ],
      [
        "SELECT Count ( * ) FROM Professionals AS T1 WHERE T1.professional_id IN ( SELECT T3.professional_id FROM Dogs AS T2 JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id WHERE T2.weight = value )",
        -12.580114364624023
      ],
      [
        "SELECT Count ( * ) FROM Professionals WHERE state = value",
        -12.63843822479248
      ],
      [
        "SELECT Count ( * ) FROM Owners WHERE state = value",
        -12.662805557250977
      ],
      [
        "SELECT Count ( * ) FROM Owners WHERE first_name = value",
        -12.700794219970703
      ],
      [
        "SELECT Count ( * ) FROM Professionals WHERE first_name = value",
        -12.714191436767578
      ],
      [
        "SELECT Count ( * ) FROM Professionals WHERE role_code = value",
        -13.050797462463379
      ],
      [
        "SELECT Count ( DISTINCT owner_id ) FROM Dogs WHERE weight = value",
        -13.283806800842285
      ],
      [
        "SELECT Count ( T2.professional_id ) FROM Dogs AS T1 JOIN Professionals AS T2 JOIN Treatments AS T3 ON T1.dog_id = T3.dog_id AND T3.professional_id = T2.professional_id WHERE T1.weight = value",
        -13.379496097564697
      ],
      [
        "SELECT Count ( * ) FROM Breeds",
        -15.050179481506348
      ],
      [
        "SELECT Count ( DISTINCT professional_id ) FROM Treatments",
        -15.54338264465332
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM Dogs WHERE weight = 7.57",
    "predicted_parse": "SELECT Count ( * ) FROM Dogs WHERE weight = value",
    "predicted_parse_explanation": [
      "find the number of rows in dogs table whose weight equals 7.57"
    ],
    "template_feedback": "use treatments table in place of dogs table . remove the weight equals 7.57 conditions . find number of different professional id in place of number of rows .",
    "primary_span": [
      [
        0,
        2
      ],
      [
        9,
        15
      ],
      [
        16,
        21
      ]
    ],
    "secondary_span": [
      [
        3,
        8
      ],
      [
        22,
        28
      ]
    ],
    "edits": [
      "number of distinct professional id",
      "number of rows",
      "treatments",
      "dogs",
      "weight equals 7.57"
    ],
    "edits_original": "< select > add number of distinct professional id </ select > < select > remove number of rows </ select > < from > add treatments </ from > < from > remove dogs </ from > < where > remove weight equals 7.57 </ where >"
  },
  {
    "db_id": "wta_1",
    "feedback": "You need to use hand in lieu of loser Id.",
    "question": "How many players are there for each hand type?",
    "gold_parse": "SELECT count(*) ,  hand FROM players GROUP BY hand",
    "beam": [
      [
        "SELECT Count ( * ) , T1.hand FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.loser_id",
        -0.9058835506439209
      ],
      [
        "SELECT Count ( * ) , hand FROM players GROUP BY hand",
        -1.1601834297180176
      ],
      [
        "SELECT T1.hand , Count ( * ) FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.loser_id",
        -2.130337715148926
      ],
      [
        "SELECT hand , Count ( * ) FROM players GROUP BY hand",
        -3.011169910430908
      ],
      [
        "SELECT Count ( * ) , T1.hand FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.loser_seed",
        -5.031347036361694
      ],
      [
        "SELECT Count ( * ) , T1.hand FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.loser_name",
        -5.260412931442261
      ],
      [
        "SELECT Count ( * ) , loser_name FROM matches GROUP BY loser_id",
        -5.291686534881592
      ],
      [
        "SELECT Count ( * ) , loser_id FROM matches GROUP BY loser_id",
        -5.504074335098267
      ],
      [
        "SELECT Count ( * ) , T2.loser_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T1.hand",
        -5.553832292556763
      ],
      [
        "SELECT Count ( * ) , T1.hand FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.loser_hand",
        -5.65406060218811
      ],
      [
        "SELECT Count ( * ) , T2.loser_id FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T1.hand",
        -5.656754493713379
      ],
      [
        "SELECT Count ( * ) , loser_hand FROM matches GROUP BY loser_id",
        -5.9066972732543945
      ],
      [
        "SELECT Count ( * ) , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.loser_id",
        -5.977852821350098
      ],
      [
        "SELECT loser_name , Count ( * ) FROM matches GROUP BY loser_id",
        -5.978852987289429
      ],
      [
        "SELECT loser_id , Count ( * ) FROM matches GROUP BY loser_id",
        -6.00423264503479
      ],
      [
        "SELECT loser_seed , Count ( * ) FROM matches GROUP BY loser_id",
        -6.0507097244262695
      ],
      [
        "SELECT Count ( * ) , year FROM matches GROUP BY loser_id",
        -6.053540945053101
      ],
      [
        "SELECT Count ( * ) , loser_seed FROM matches GROUP BY loser_id",
        -6.071899652481079
      ],
      [
        "SELECT loser_hand , Count ( * ) FROM matches GROUP BY loser_id",
        -6.138818740844727
      ],
      [
        "SELECT Count ( * ) , T2.loser_hand FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T1.hand",
        -6.172097206115723
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) , T1.hand FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.loser_id",
    "predicted_parse": "SELECT Count ( * ) , T1.hand FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.loser_id",
    "predicted_parse_explanation": [
      "Step 1: for each row in players table , find the corresponding rows in matches table",
      "Step 2: find each value of loser id of the results of step 1 along with the number of the corresponding rows to each value"
    ],
    "template_feedback": "in step 1 , do not use the matches table . in step 2 , find for each value of hand in place of loser id .",
    "primary_span": [
      [
        4,
        10
      ],
      [
        15,
        20
      ]
    ],
    "secondary_span": [
      [
        4,
        10
      ],
      [
        21,
        26
      ]
    ],
    "edits": [
      "matches",
      "hand",
      "loser id"
    ],
    "edits_original": "< from > remove matches </ from > < groupBy > add hand </ groupBy > < groupBy > remove loser id </ groupBy >"
  },
  {
    "db_id": "world_1",
    "feedback": "you should use language , countrylanguage,country's head of state and make sure is official is t.",
    "question": "What is the official language spoken in the country whose head of state is Beatrix?",
    "gold_parse": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"",
    "beam": [
      [
        "SELECT Code2 FROM country WHERE Continent = value",
        -0.001697540283203125
      ],
      [
        "SELECT Code2 FROM country WHERE Name = value",
        -6.84515380859375
      ],
      [
        "SELECT Name FROM country WHERE Continent = value",
        -7.67114782333374
      ],
      [
        "SELECT LocalName FROM country WHERE Continent = value",
        -9.137285232543945
      ],
      [
        "SELECT Code2 FROM country WHERE LocalName = value",
        -10.290801048278809
      ],
      [
        "SELECT Code2 FROM country WHERE Continent = value AND Name = value",
        -12.084484577178955
      ],
      [
        "SELECT Code FROM country WHERE Continent = value",
        -12.104856491088867
      ],
      [
        "SELECT T2.IsOfficial FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = value",
        -12.315638542175293
      ],
      [
        "SELECT Code2 FROM country WHERE Continent = value AND Continent = value",
        -13.083345413208008
      ],
      [
        "SELECT Continent FROM country WHERE Continent = value",
        -13.512308120727539
      ],
      [
        "SELECT Name FROM country WHERE Name = value",
        -13.7261061668396
      ],
      [
        "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = value",
        -14.105584144592285
      ],
      [
        "SELECT Code2 , Name FROM country WHERE Continent = value",
        -14.541586875915527
      ],
      [
        "SELECT DISTINCT Code2 FROM country WHERE Continent = value",
        -14.680668830871582
      ],
      [
        "SELECT Code2 FROM country WHERE Continent = value AND LocalName = value",
        -14.820355415344238
      ],
      [
        "SELECT Code2 FROM country WHERE Continent LIKE value",
        -14.877437591552734
      ],
      [
        "SELECT LocalName FROM country WHERE Name = value",
        -15.141517639160156
      ],
      [
        "SELECT Code2 FROM country WHERE Region = value",
        -15.164857864379883
      ],
      [
        "SELECT DISTINCT Code2 FROM country WHERE Continent = value",
        -15.758981704711914
      ],
      [
        "SELECT Code2 FROM country",
        -17.402297019958496
      ]
    ],
    "predicted_parse_with_values": "SELECT Code2 FROM country WHERE Continent = \"Beatrix\"",
    "predicted_parse": "SELECT Code2 FROM country WHERE Continent = value",
    "predicted_parse_explanation": [
      "find the code2 in country table whose continent equals Beatrix"
    ],
    "template_feedback": "additionally use the information from the countrylanguage table besides the country table . consider the head of state equals Beatrix and is official equals T conditions in place of the continent equals Beatrix conditions . find language in place of code2 .",
    "primary_span": [
      [
        0,
        7
      ],
      [
        13,
        25
      ],
      [
        35,
        36
      ]
    ],
    "secondary_span": [
      [
        8,
        12
      ],
      [
        26,
        34
      ],
      [
        37,
        41
      ]
    ],
    "edits": [
      "language",
      "code2",
      "countrylanguage",
      "head of state equals \"Beatrix\"",
      "is official equals \"T\"",
      "continent equals \"Beatrix\""
    ],
    "edits_original": "< select > add language </ select > < select > remove code2 </ select > < from > add countrylanguage </ from > < where > add head of state equals \" Beatrix \" </ where > < where > add is official equals \" T \" </ where > < where > remove continent equals \" Beatrix \" </ where >"
  },
  {
    "db_id": "tvshow",
    "feedback": "You should delete \"written by equals Ben Jones and \".",
    "question": "List all cartoon directed by \"Ben Jones\".",
    "gold_parse": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\"",
    "beam": [
      [
        "SELECT Title FROM Cartoon WHERE Written_by = value AND Directed_by = value",
        -0.60821533203125
      ],
      [
        "SELECT Title FROM Cartoon WHERE Written_by = value",
        -1.2551259994506836
      ],
      [
        "SELECT Title FROM Cartoon WHERE Directed_by = value",
        -1.9197607040405273
      ],
      [
        "SELECT Title FROM Cartoon WHERE Written_by = value AND Written_by = value",
        -4.427989959716797
      ],
      [
        "SELECT Title FROM Cartoon WHERE Directed_by = value AND Directed_by = value",
        -4.454753875732422
      ],
      [
        "SELECT Title FROM Cartoon WHERE Directed_by = value AND Written_by = value",
        -8.10714340209961
      ],
      [
        "SELECT Title FROM Cartoon WHERE Written_by = value AND Title = value",
        -9.872096061706543
      ],
      [
        "SELECT Title FROM Cartoon WHERE Written_by LIKE value",
        -12.28783130645752
      ],
      [
        "SELECT Title FROM Cartoon WHERE Directed_by = value AND Title = value",
        -13.448769569396973
      ],
      [
        "SELECT DISTINCT Title FROM Cartoon WHERE Written_by = value AND Directed_by = value",
        -13.509026527404785
      ],
      [
        "SELECT Title FROM Cartoon WHERE Directed_by < value",
        -13.752372741699219
      ],
      [
        "SELECT Title FROM Cartoon WHERE Written_by = value AND Directed_by LIKE value",
        -13.84053897857666
      ],
      [
        "SELECT DISTINCT Title FROM Cartoon WHERE Written_by = value",
        -13.842639923095703
      ],
      [
        "SELECT Title FROM Cartoon WHERE Directed_by LIKE value",
        -13.9996337890625
      ],
      [
        "SELECT Title FROM Cartoon WHERE Written_by = value AND Directed_by ! = value",
        -14.168614387512207
      ],
      [
        "SELECT Title FROM Cartoon WHERE Written_by < value",
        -14.334248542785645
      ],
      [
        "SELECT DISTINCT Title FROM Cartoon WHERE Directed_by = value",
        -14.443817138671875
      ],
      [
        "SELECT Title FROM Cartoon WHERE Directed_by BETWEEN value AND value",
        -14.966056823730469
      ],
      [
        "SELECT DISTINCT Title FROM Cartoon WHERE Written_by = value",
        -15.841971397399902
      ],
      [
        "SELECT Title FROM Cartoon WHERE Title > value",
        -16.212594985961914
      ]
    ],
    "predicted_parse_with_values": "SELECT Title FROM Cartoon WHERE Written_by = \"Ben Jones\" AND Directed_by = \"Ben Jones\"",
    "predicted_parse": "SELECT Title FROM Cartoon WHERE Written_by = value AND Directed_by = value",
    "predicted_parse_explanation": [
      "find the title in cartoon table whose written by equals Ben Jones and directed by equals Ben Jones"
    ],
    "template_feedback": "remove the written by equals Ben Jones conditions .",
    "primary_span": [
      [
        0,
        8
      ]
    ],
    "secondary_span": [],
    "edits": [
      "written by equals \"Ben Jones\""
    ],
    "edits_original": "< where > remove written by equals \" Ben Jones \" </ where >"
  },
  {
    "db_id": "voter_1",
    "feedback": "In step 1, I want the area code mentioned in votes table.",
    "question": "What is the area code in which the most voters voted?",
    "gold_parse": "SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state  =  T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1",
    "beam": [
      [
        "SELECT area_code FROM AREA_CODE_STATE GROUP BY state ORDER BY Count ( * ) Desc LIMIT value",
        -0.01727581024169922
      ],
      [
        "SELECT T1.area_code FROM AREA_CODE_STATE AS T1 JOIN VOTES AS T2 ON T1.state = T2.state GROUP BY T2.state ORDER BY Count ( * ) Desc LIMIT value",
        -4.370733261108398
      ],
      [
        "SELECT area_code FROM AREA_CODE_STATE GROUP BY area_code ORDER BY Count ( * ) Desc LIMIT value",
        -5.411993026733398
      ],
      [
        "SELECT area_code FROM AREA_CODE_STATE GROUP BY state ORDER BY Count ( * ) Asc LIMIT value",
        -11.589489936828613
      ],
      [
        "SELECT area_code FROM AREA_CODE_STATE GROUP BY state ORDER BY Count ( * ) Desc",
        -12.53860092163086
      ],
      [
        "SELECT area_code FROM AREA_CODE_STATE ORDER BY area_code Desc LIMIT value",
        -13.588287353515625
      ],
      [
        "SELECT area_code FROM AREA_CODE_STATE GROUP BY state",
        -13.654732704162598
      ],
      [
        "SELECT DISTINCT area_code FROM AREA_CODE_STATE GROUP BY state ORDER BY Count ( * ) Desc LIMIT value",
        -13.75379467010498
      ],
      [
        "SELECT area_code , state FROM AREA_CODE_STATE GROUP BY state ORDER BY Count ( * ) Desc LIMIT value",
        -14.368560791015625
      ],
      [
        "SELECT T1.area_code FROM AREA_CODE_STATE AS T1 JOIN VOTES AS T2 ON T1.state = T2.state GROUP BY T2.vote_id ORDER BY Count ( * ) Desc LIMIT value",
        -14.632697105407715
      ],
      [
        "SELECT T1.area_code FROM AREA_CODE_STATE AS T1 JOIN CONTESTANTS AS T2 JOIN VOTES AS T3 ON T1.state = T3.state AND T3.contestant_number = T2.contestant_number GROUP BY T2.contestant_name ORDER BY Count ( * ) Desc LIMIT value",
        -14.78593635559082
      ],
      [
        "SELECT area_code FROM AREA_CODE_STATE GROUP BY state ORDER BY Sum ( * ) Desc LIMIT value",
        -14.804458141326904
      ],
      [
        "SELECT T1.area_code FROM AREA_CODE_STATE AS T1 JOIN VOTES AS T2 ON T1.state = T2.state GROUP BY T2.created ORDER BY Count ( * ) Desc LIMIT value",
        -14.9703950881958
      ],
      [
        "SELECT area_code FROM AREA_CODE_STATE GROUP BY state ORDER BY Avg ( * ) Desc LIMIT value",
        -15.15005350112915
      ],
      [
        "SELECT state FROM AREA_CODE_STATE GROUP BY state ORDER BY Count ( * ) Desc LIMIT value",
        -15.210298538208008
      ],
      [
        "SELECT area_code FROM AREA_CODE_STATE ORDER BY state Desc LIMIT value",
        -15.561559200286865
      ],
      [
        "SELECT area_code FROM AREA_CODE_STATE ORDER BY Count ( * ) Desc LIMIT value",
        -15.755062103271484
      ],
      [
        "SELECT area_code FROM AREA_CODE_STATE GROUP BY state ORDER BY Count ( DISTINCT * ) Desc LIMIT value",
        -15.844688415527344
      ],
      [
        "SELECT area_code FROM AREA_CODE_STATE GROUP BY Count ( * ) ORDER BY Count ( * ) Desc LIMIT value",
        -15.88679313659668
      ],
      [
        "SELECT area_code FROM AREA_CODE_STATE",
        -18.80911350250244
      ]
    ],
    "predicted_parse_with_values": "SELECT area_code FROM AREA_CODE_STATE GROUP BY state ORDER BY Count ( * ) Desc LIMIT 1",
    "predicted_parse": "SELECT area_code FROM AREA_CODE_STATE GROUP BY state ORDER BY Count ( * ) Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of state in area code state table",
      "Step 2: find the area code in area code state table with largest value in the results of step 1"
    ],
    "template_feedback": "in step 1 , additionally use the information from the votes table besides the area code state table . find for each value of area code in place of area code state 's state .",
    "primary_span": [
      [
        4,
        11
      ],
      [
        19,
        25
      ]
    ],
    "secondary_span": [
      [
        12,
        18
      ],
      [
        26,
        34
      ]
    ],
    "edits": [
      "votes",
      "area code",
      "state"
    ],
    "edits_original": "< from > add votes </ from > < groupBy > add area code </ groupBy > < groupBy > remove state </ groupBy >"
  },
  {
    "db_id": "student_transcripts_tracking",
    "feedback": "You need to search for explanation of course whose name of course should be math.",
    "question": "How is the math course described?",
    "gold_parse": "SELECT course_description FROM Courses WHERE course_name  =  'math'",
    "beam": [
      [
        "SELECT Count ( * ) FROM Courses WHERE course_name = value",
        -0.0001392364501953125
      ],
      [
        "SELECT * FROM Courses WHERE course_name = value",
        -9.77601444721222
      ],
      [
        "SELECT Count ( * ) FROM Addresses",
        -10.01106071472168
      ],
      [
        "SELECT course_description FROM Courses WHERE course_name = value",
        -10.70788824558258
      ],
      [
        "SELECT course_name FROM Courses WHERE course_name = value",
        -11.568433284759521
      ],
      [
        "SELECT course_id FROM Courses WHERE course_name = value",
        -13.047269344329834
      ],
      [
        "SELECT Count ( * ) , course_name FROM Courses WHERE course_name = value",
        -14.594813585281372
      ],
      [
        "SELECT Avg ( * ) FROM Courses WHERE course_name = value",
        -14.67373114824295
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM Courses WHERE course_name = value",
        -14.812749862670898
      ],
      [
        "SELECT Avg ( course_description ) FROM Courses WHERE course_name = value",
        -14.905000507831573
      ],
      [
        "SELECT Sum ( * ) FROM Courses WHERE course_name = value",
        -14.99456375837326
      ],
      [
        "SELECT Count ( * ) FROM Courses WHERE course_name LIKE value",
        -15.010542869567871
      ],
      [
        "SELECT Sum ( course_description ) FROM Courses WHERE course_name = value",
        -15.688225030899048
      ],
      [
        "SELECT Avg ( course_id ) FROM Courses WHERE course_name = value",
        -16.252380847930908
      ],
      [
        "SELECT Count ( * ) FROM Courses GROUP BY course_name HAVING course_name = value",
        -16.29571843147278
      ],
      [
        "SELECT T2.section_description FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = value",
        -16.472118377685547
      ],
      [
        "SELECT Count ( * ) FROM Addresses AS T1 EXCEPT SELECT * FROM Courses AS T2 WHERE T2.course_name = value",
        -16.763551712036133
      ],
      [
        "SELECT Count ( DISTINCT * ) FROM Courses WHERE course_name = value",
        -16.783231735229492
      ],
      [
        "SELECT Count ( * ) FROM Courses WHERE Count ( course_name ) = value",
        -16.869141578674316
      ],
      [
        "SELECT Count ( * ) FROM Courses WHERE course_name IN ( SELECT course_name FROM Courses )",
        -16.88645362854004
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM Courses WHERE course_name = \"math\"",
    "predicted_parse": "SELECT Count ( * ) FROM Courses WHERE course_name = value",
    "predicted_parse_explanation": [
      "find the number of rows in courses table whose course name equals math"
    ],
    "template_feedback": "find course description in place of number of rows .",
    "primary_span": [
      [
        0,
        2
      ]
    ],
    "secondary_span": [
      [
        3,
        9
      ]
    ],
    "edits": [
      "course description",
      "number of rows"
    ],
    "edits_original": "< select > add course description </ select > < select > remove number of rows </ select >"
  },
  {
    "db_id": "dog_kennels",
    "feedback": "Only size code should be used in step 2.",
    "question": "Find the distinct breed type and size type combinations for dogs.",
    "gold_parse": "SELECT DISTINCT breed_code ,  size_code FROM dogs",
    "beam": [
      [
        "SELECT DISTINCT T1.breed_name , T3.treatment_type_code FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id",
        -0.8886046409606934
      ],
      [
        "SELECT DISTINCT T1.treatment_type_code , T2.treatment_type_code FROM Treatment_Types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code",
        -1.5475983619689941
      ],
      [
        "SELECT DISTINCT T1.breed_name , T2.weight FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code",
        -2.2978291511535645
      ],
      [
        "SELECT DISTINCT treatment_type_code , treatment_type_code FROM Treatments",
        -2.3885278701782227
      ],
      [
        "SELECT DISTINCT T2.treatment_type_code , T1.weight FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id",
        -2.858607292175293
      ],
      [
        "SELECT DISTINCT T1.treatment_type_code , T2.weight FROM Treatment_Types AS T1 JOIN Dogs AS T2 JOIN Treatments AS T3 ON T1.treatment_type_code = T3.treatment_type_code AND T3.dog_id = T2.dog_id",
        -3.181321144104004
      ],
      [
        "SELECT DISTINCT T1.breed_name , T2.treatment_type_code FROM Breeds AS T1 JOIN Treatment_Types AS T2 JOIN Dogs AS T3 ON T1.breed_code = T3.breed_code JOIN Treatments AS T4 ON T3.dog_id = T4.dog_id AND T4.treatment_type_code = T2.treatment_type_code",
        -3.1892142295837402
      ],
      [
        "SELECT DISTINCT T2.treatment_type_code , T1.treatment_type_code FROM Treatment_Types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code",
        -4.366471290588379
      ],
      [
        "SELECT DISTINCT treatment_type_code , treatment_type_code FROM Treatment_Types",
        -4.613326787948608
      ],
      [
        "SELECT DISTINCT T1.breed_name , T2.gender FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code",
        -5.383576393127441
      ],
      [
        "SELECT DISTINCT breed_name , breed_name FROM Breeds",
        -5.945217132568359
      ],
      [
        "SELECT DISTINCT T1.breed_name , T2.treatment_type_description FROM Breeds AS T1 JOIN Treatment_Types AS T2 JOIN Dogs AS T3 ON T1.breed_code = T3.breed_code JOIN Treatments AS T4 ON T3.dog_id = T4.dog_id AND T4.treatment_type_code = T2.treatment_type_code",
        -6.108818054199219
      ],
      [
        "SELECT DISTINCT T2.treatment_type_code , T1.gender FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id",
        -6.210773944854736
      ],
      [
        "SELECT DISTINCT T1.treatment_type_code , T2.gender FROM Treatment_Types AS T1 JOIN Dogs AS T2 JOIN Treatments AS T3 ON T1.treatment_type_code = T3.treatment_type_code AND T3.dog_id = T2.dog_id",
        -6.212553024291992
      ],
      [
        "SELECT DISTINCT T2.treatment_type_code , T1.breed_name FROM Breeds AS T1 JOIN Treatment_Types AS T2 JOIN Dogs AS T3 ON T1.breed_code = T3.breed_code JOIN Treatments AS T4 ON T3.dog_id = T4.dog_id AND T4.treatment_type_code = T2.treatment_type_code",
        -6.568348407745361
      ],
      [
        "SELECT DISTINCT T2.treatment_type_code , T1.treatment_type_description FROM Treatment_Types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code",
        -6.790517330169678
      ],
      [
        "SELECT DISTINCT treatment_type_code , treatment_type_description FROM Treatment_Types",
        -7.038999557495117
      ],
      [
        "SELECT DISTINCT T3.treatment_type_code , T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id",
        -7.040228366851807
      ],
      [
        "SELECT DISTINCT T1.gender , T2.treatment_type_code FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id",
        -7.249567031860352
      ],
      [
        "SELECT DISTINCT treatment_type_code FROM Treatments",
        -13.795206069946289
      ]
    ],
    "predicted_parse_with_values": "SELECT DISTINCT T1.breed_name , T3.treatment_type_code FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id",
    "predicted_parse": "SELECT DISTINCT T1.breed_name , T3.treatment_type_code FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id",
    "predicted_parse_explanation": [
      "Step 1: for each row in breeds table , find the corresponding rows in dogs table and in treatments table",
      "Step 2: find without repetition breed name and treatment type code of the results of step 1"
    ],
    "template_feedback": "in step 1 , do not use the breeds table and treatments table . in step 2 , find dogs 's breed code and size code in place of breed name and treatment type code .",
    "primary_span": [
      [
        4,
        13
      ],
      [
        18,
        25
      ]
    ],
    "secondary_span": [
      [
        4,
        13
      ],
      [
        26,
        35
      ]
    ],
    "edits": [
      "breed code",
      "size code",
      "breed name",
      "treatment type code",
      "breeds",
      "treatments"
    ],
    "edits_original": "< select > add breed code </ select > < select > add size code </ select > < select > remove breed name </ select > < select > remove treatment type code </ select > < from > remove breeds </ from > < from > remove treatments </ from >"
  },
  {
    "db_id": "dog_kennels",
    "feedback": "Change charge amount , charges table with cost of treatment , treatments table in all step , Exchange charges table with treatments table instep 2.",
    "question": "Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.",
    "gold_parse": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )",
    "beam": [
      [
        "SELECT T2.first_name , T2.last_name FROM Charges AS T1 JOIN Professionals AS T2 WHERE T1.charge_amount < ( SELECT Avg ( T1.charge_amount ) FROM Charges AS T1 )",
        -0.5286111831665039
      ],
      [
        "SELECT T2.first_name , T3.last_name FROM Charges AS T1 JOIN Owners AS T2 JOIN Professionals AS T3 WHERE T1.charge_amount < ( SELECT Avg ( T1.charge_amount ) FROM Charges AS T1 )",
        -1.562790870666504
      ],
      [
        "SELECT T3.first_name , T2.last_name FROM Charges AS T1 JOIN Owners AS T2 JOIN Professionals AS T3 WHERE T1.charge_amount < ( SELECT Avg ( T1.charge_amount ) FROM Charges AS T1 )",
        -1.9149322509765625
      ],
      [
        "SELECT T2.first_name , T2.last_name FROM Charges AS T1 JOIN Owners AS T2 WHERE T1.charge_amount < ( SELECT Avg ( T1.charge_amount ) FROM Charges AS T1 )",
        -2.9558286666870117
      ],
      [
        "SELECT T2.first_name , T2.last_name FROM Charges AS T1 JOIN Professionals AS T2 WHERE T1.charge_amount < ( SELECT Avg ( T3.cost_of_treatment ) FROM Treatments AS T3 )",
        -7.883652687072754
      ],
      [
        "SELECT T2.first_name , T2.last_name FROM Charges AS T1 JOIN Professionals AS T2 WHERE T1.charge_amount < ( SELECT Avg ( T3.size_description ) FROM Sizes AS T3 )",
        -8.721942901611328
      ],
      [
        "SELECT T2.first_name , T3.last_name FROM Charges AS T1 JOIN Owners AS T2 JOIN Professionals AS T3 WHERE T1.charge_amount < ( SELECT Avg ( T4.cost_of_treatment ) FROM Treatments AS T4 )",
        -8.917891502380371
      ],
      [
        "SELECT T1.first_name , T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id WHERE T2.cost_of_treatment < ( SELECT Avg ( T3.charge_amount ) FROM Charges AS T3 )",
        -9.034829139709473
      ],
      [
        "SELECT T3.first_name , T2.last_name FROM Charges AS T1 JOIN Owners AS T2 JOIN Professionals AS T3 WHERE T1.charge_amount < ( SELECT Avg ( T4.cost_of_treatment ) FROM Treatments AS T4 )",
        -9.268086433410645
      ],
      [
        "SELECT T3.first_name , T3.last_name FROM Sizes AS T1 JOIN Dogs AS T2 ON T1.size_code = T2.size_code JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id WHERE T1.size_description < ( SELECT Avg ( T5.charge_amount ) FROM Charges AS T5 )",
        -9.398828983306885
      ],
      [
        "SELECT T2.first_name , T3.last_name FROM Charges AS T1 JOIN Owners AS T2 JOIN Professionals AS T3 WHERE T1.charge_amount < ( SELECT Avg ( T4.size_description ) FROM Sizes AS T4 )",
        -9.756325721740723
      ],
      [
        "SELECT T3.first_name , T3.last_name FROM Sizes AS T1 JOIN Dogs AS T2 ON T1.size_code = T2.size_code JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id WHERE T1.size_description < value",
        -9.827763557434082
      ],
      [
        "SELECT T2.first_name , T2.last_name FROM Charges AS T1 JOIN Professionals AS T2 WHERE T1.charge_amount > ( SELECT Avg ( T1.charge_amount ) FROM Charges AS T1 )",
        -9.950163841247559
      ],
      [
        "SELECT T1.first_name , T3.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id AND T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id AND T2.dog_id = T4.dog_id WHERE T4.cost_of_treatment < ( SELECT Avg ( T5.charge_amount ) FROM Charges AS T5 )",
        -10.071488380432129
      ],
      [
        "SELECT T3.first_name , T2.last_name FROM Charges AS T1 JOIN Owners AS T2 JOIN Professionals AS T3 WHERE T1.charge_amount < ( SELECT Avg ( T4.size_description ) FROM Sizes AS T4 )",
        -10.100672721862793
      ],
      [
        "SELECT T2.first_name , T2.last_name FROM Charges AS T1 JOIN Owners AS T2 WHERE T1.charge_amount < ( SELECT Avg ( T3.cost_of_treatment ) FROM Treatments AS T3 )",
        -10.30900526046753
      ],
      [
        "SELECT T3.first_name , T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id AND T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id AND T2.dog_id = T4.dog_id WHERE T4.cost_of_treatment < ( SELECT Avg ( T5.charge_amount ) FROM Charges AS T5 )",
        -10.343994140625
      ],
      [
        "SELECT T2.first_name , T4.last_name FROM Sizes AS T1 JOIN Owners AS T2 JOIN Dogs AS T3 ON T1.size_code = T3.size_code AND T3.owner_id = T2.owner_id AND T1.size_code = T3.size_code JOIN Professionals AS T4 JOIN Treatments AS T5 ON T3.dog_id = T5.dog_id AND T5.professional_id = T4.professional_id WHERE T1.size_description < ( SELECT Avg ( T6.charge_amount ) FROM Charges AS T6 )",
        -10.440582275390625
      ],
      [
        "SELECT T2.first_name , T4.last_name FROM Sizes AS T1 JOIN Owners AS T2 JOIN Dogs AS T3 ON T1.size_code = T3.size_code AND T3.owner_id = T2.owner_id AND T1.size_code = T3.size_code JOIN Professionals AS T4 JOIN Treatments AS T5 ON T3.dog_id = T5.dog_id AND T5.professional_id = T4.professional_id WHERE T1.size_description < value",
        -10.869691848754883
      ],
      [
        "SELECT T4.first_name , T2.last_name FROM Sizes AS T1 JOIN Owners AS T2 JOIN Dogs AS T3 ON T1.size_code = T3.size_code AND T3.owner_id = T2.owner_id AND T1.size_code = T3.size_code JOIN Professionals AS T4 JOIN Treatments AS T5 ON T3.dog_id = T5.dog_id AND T5.professional_id = T4.professional_id WHERE T1.size_description < value",
        -11.557783126831055
      ]
    ],
    "predicted_parse_with_values": "SELECT T2.first_name , T2.last_name FROM Charges AS T1 JOIN Professionals AS T2 WHERE T1.charge_amount < ( SELECT Avg ( T1.charge_amount ) FROM Charges AS T1 )",
    "predicted_parse": "SELECT T2.first_name , T2.last_name FROM Charges AS T1 JOIN Professionals AS T2 WHERE T1.charge_amount < ( SELECT Avg ( T1.charge_amount ) FROM Charges AS T1 )",
    "predicted_parse_explanation": [
      "Step 1: for each row in charges table , find the corresponding rows in professionals table",
      "Step 2: find the average charge amount in charges table",
      "Step 3: find the first name and last name of the results of step 1 whose charge amount less than the results of step 2"
    ],
    "template_feedback": "in step 1 , use treatments table in place of charges table in step 2 , use treatments table in place of charges table . find average cost of treatment in place of average charge amount . in step 3 , make sure the cost of treatment is less than the results of step 2 the charge amount is less than the results of step 2 . make sure no repetition in the results .",
    "primary_span": [
      [
        4,
        6
      ],
      [
        16,
        18
      ],
      [
        25,
        29
      ],
      [
        41,
        54
      ],
      [
        67,
        74
      ]
    ],
    "secondary_span": [
      [
        7,
        11
      ],
      [
        19,
        24
      ],
      [
        30,
        36
      ],
      [
        55,
        66
      ]
    ],
    "edits": [
      "distinct",
      "treatments",
      "charges",
      "cost of treatment less than SUBS1",
      "charge amount less than SUBS1",
      "average cost of treatment",
      "average charge amount",
      "treatments",
      "charges"
    ],
    "edits_original": "< select > add distinct </ select > < from > add treatments </ from > < from > remove charges </ from > < where > add cost of treatment less than SUBS1 </ where > < where > remove charge amount less than SUBS1 </ where > < select > add average cost of treatment </ select > < select > remove average charge amount </ select > < from > add treatments </ from > < from > remove charges </ from >"
  },
  {
    "db_id": "flight_2",
    "feedback": "Remove \"and country abbrev equals US\".",
    "question": "Give the city and country for the Alton airport.",
    "gold_parse": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"",
    "beam": [
      [
        "SELECT City , Country FROM airports WHERE AirportName = value AND CountryAbbrev = value",
        -0.5702285766601562
      ],
      [
        "SELECT City , Country FROM airports WHERE AirportName = value AND Country = value",
        -1.137603759765625
      ],
      [
        "SELECT City , CountryAbbrev FROM airports WHERE AirportName = value AND CountryAbbrev = value",
        -2.6935176849365234
      ],
      [
        "SELECT City , CountryAbbrev FROM airports WHERE AirportName = value AND Country = value",
        -3.2012510299682617
      ],
      [
        "SELECT AirportCode , Country FROM airports WHERE AirportName = value AND CountryAbbrev = value",
        -6.02569580078125
      ],
      [
        "SELECT AirportCode , Country FROM airports WHERE AirportName = value AND Country = value",
        -6.583822250366211
      ],
      [
        "SELECT City , Country FROM airports WHERE AirportName = value",
        -7.784943580627441
      ],
      [
        "SELECT AirportName , Country FROM airports WHERE AirportName = value AND CountryAbbrev = value",
        -8.188972473144531
      ],
      [
        "SELECT City , Country FROM airports WHERE AirportName = value AND AirportName = value",
        -8.31016731262207
      ],
      [
        "SELECT AirportCode , CountryAbbrev FROM airports WHERE AirportName = value AND CountryAbbrev = value",
        -8.558931350708008
      ],
      [
        "SELECT AirportName , Country FROM airports WHERE AirportName = value AND Country = value",
        -8.781317710876465
      ],
      [
        "SELECT City , Country FROM airports",
        -8.99542236328125
      ],
      [
        "SELECT AirportCode , CountryAbbrev FROM airports WHERE AirportName = value AND Country = value",
        -9.057499885559082
      ],
      [
        "SELECT City , CountryAbbrev FROM airports WHERE AirportName = value",
        -9.948208808898926
      ],
      [
        "SELECT AirportName , CountryAbbrev FROM airports WHERE AirportName = value AND CountryAbbrev = value",
        -9.989339828491211
      ],
      [
        "SELECT City , CountryAbbrev FROM airports",
        -10.94504165649414
      ],
      [
        "SELECT City , Country FROM airports WHERE Country = value",
        -11.212101936340332
      ],
      [
        "SELECT City , Country FROM airports WHERE CountryAbbrev = value",
        -11.630291938781738
      ],
      [
        "SELECT City FROM airports WHERE AirportName = value AND Country = value",
        -12.880851745605469
      ],
      [
        "SELECT AirportCode , Country FROM airports",
        -14.500177383422852
      ]
    ],
    "predicted_parse_with_values": "SELECT City , Country FROM airports WHERE AirportName = \"Alton\" AND CountryAbbrev = \"US \"",
    "predicted_parse": "SELECT City , Country FROM airports WHERE AirportName = value AND CountryAbbrev = value",
    "predicted_parse_explanation": [
      "find the city and country in airports table whose airport name equals Alton and country abbrev equals US"
    ],
    "template_feedback": "remove the country abbrev equals US conditions .",
    "primary_span": [
      [
        0,
        7
      ]
    ],
    "secondary_span": [],
    "edits": [
      "country abbrev equals \"US \""
    ],
    "edits_original": "< where > remove country abbrev equals \" US \" </ where >"
  },
  {
    "db_id": "world_1",
    "feedback": "Exchange continent with countrylanguage's language .",
    "question": "How many continents speak Chinese?",
    "gold_parse": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"",
    "beam": [
      [
        "SELECT Count ( * ) FROM country WHERE Continent = value",
        -0.009073257446289062
      ],
      [
        "SELECT Count ( * ) FROM country WHERE Name = value",
        -4.7345380783081055
      ],
      [
        "SELECT Count ( * ) FROM country WHERE LocalName = value",
        -8.628338813781738
      ],
      [
        "SELECT Count ( * ) FROM countrylanguage WHERE Language = value",
        -9.728142738342285
      ],
      [
        "SELECT Count ( * ) FROM country WHERE GovernmentForm = value",
        -13.00938892364502
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM country WHERE Continent = value",
        -13.979473114013672
      ],
      [
        "SELECT Count ( * ) FROM country WHERE Region = value",
        -14.00851058959961
      ],
      [
        "SELECT Count ( * ) FROM country WHERE LifeExpectancy = value",
        -14.047198295593262
      ],
      [
        "SELECT Count ( * ) FROM country WHERE Continent > value",
        -14.773203372955322
      ],
      [
        "SELECT Count ( * ) FROM country WHERE Code2 = value",
        -15.090632438659668
      ],
      [
        "SELECT Count ( * ) FROM city",
        -15.11638069152832
      ],
      [
        "SELECT Count ( * ) , Count ( * ) FROM country WHERE Continent = value",
        -15.388535499572754
      ],
      [
        "SELECT Name FROM country WHERE Continent = value",
        -15.44775703549385
      ],
      [
        "SELECT Sum ( * ) FROM country WHERE Continent = value",
        -16.10095751285553
      ],
      [
        "SELECT Count ( * ) FROM sqlite_sequence WHERE name = value",
        -16.114285469055176
      ],
      [
        "SELECT Count ( * ) FROM country WHERE Continent LIKE value",
        -16.179442405700684
      ],
      [
        "SELECT Count ( Count ( * ) ) FROM country WHERE Continent = value",
        -16.228134155273438
      ],
      [
        "SELECT Count ( * ) FROM country WHERE HeadOfState = value",
        -16.323973655700684
      ],
      [
        "SELECT Avg ( * ) FROM country WHERE Continent = value",
        -16.365123867988586
      ],
      [
        "SELECT Count ( * ) FROM country WHERE Population = value",
        -16.68849468231201
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM country WHERE Continent = \"Chinese\"",
    "predicted_parse": "SELECT Count ( * ) FROM country WHERE Continent = value",
    "predicted_parse_explanation": [
      "find the number of rows in country table whose continent equals Chinese"
    ],
    "template_feedback": "additionally use the information from the countrylanguage table besides the country table . consider the language equals Chinese conditions in place of the continent equals Chinese conditions . find number of different continent in place of number of rows .",
    "primary_span": [
      [
        0,
        7
      ],
      [
        13,
        18
      ],
      [
        28,
        32
      ]
    ],
    "secondary_span": [
      [
        8,
        12
      ],
      [
        19,
        27
      ],
      [
        33,
        39
      ]
    ],
    "edits": [
      "number of distinct continent",
      "number of rows",
      "countrylanguage",
      "language equals \"Chinese\"",
      "continent equals \"Chinese\""
    ],
    "edits_original": "< select > add number of distinct continent </ select > < select > remove number of rows </ select > < from > add countrylanguage </ from > < where > add language equals \" Chinese \" </ where > < where > remove continent equals \" Chinese \" </ where >"
  },
  {
    "db_id": "museum_visit",
    "feedback": "open year in step one should be greater than 2010",
    "question": "find the names of museums which have more staff than the minimum staff number of all museums opened after 2010.",
    "gold_parse": "SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)",
    "beam": [
      [
        "SELECT Name FROM museum WHERE Num_of_Staff > ( SELECT Min ( Num_of_Staff ) FROM museum WHERE Open_Year < value )",
        -0.7205133438110352
      ],
      [
        "SELECT Name FROM museum WHERE Num_of_Staff > ( SELECT Min ( Num_of_Staff ) FROM museum )",
        -0.8718461990356445
      ],
      [
        "SELECT T1.Name FROM museum AS T1 JOIN visit AS T2 ON T1.Museum_ID = T2.Museum_ID WHERE T1.Num_of_Staff > ( SELECT Min ( T1.Num_of_Staff ) FROM museum AS T1 ) GROUP BY T2.Museum_ID HAVING Count ( * ) > = value",
        -3.479982376098633
      ],
      [
        "SELECT Name FROM museum WHERE Num_of_Staff > ( SELECT Min ( Num_of_Staff ) FROM museum WHERE Num_of_Staff < ( SELECT Min ( Num_of_Staff ) FROM museum ) )",
        -4.272003173828125
      ],
      [
        "SELECT T1.Name FROM museum AS T1 JOIN visit AS T2 ON T1.Museum_ID = T2.Museum_ID WHERE T1.Num_of_Staff > ( SELECT Min ( T1.Num_of_Staff ) FROM museum AS T1 WHERE T1.Open_Year < value ) GROUP BY T2.Museum_ID HAVING Count ( * ) > value",
        -4.43251895904541
      ],
      [
        "SELECT T1.Name FROM museum AS T1 JOIN visit AS T2 ON T1.Museum_ID = T2.Museum_ID WHERE T1.Num_of_Staff > ( SELECT Min ( T1.Num_of_Staff ) FROM museum AS T1 ) GROUP BY T2.Museum_ID HAVING Count ( * ) > value",
        -4.480088233947754
      ],
      [
        "SELECT Name FROM museum WHERE Num_of_Staff > ( SELECT Min ( Num_of_Staff ) FROM museum WHERE Num_of_Staff < ( SELECT Min ( Num_of_Staff ) FROM museum WHERE Open_Year < value ) )",
        -4.805686950683594
      ],
      [
        "SELECT T1.Name FROM museum AS T1 JOIN visit AS T2 ON T1.Museum_ID = T2.Museum_ID WHERE T1.Num_of_Staff > ( SELECT Min ( T1.Num_of_Staff ) FROM museum AS T1 WHERE T1.Open_Year < value ) GROUP BY T2.Museum_ID HAVING Min ( T1.Num_of_Staff ) > ( SELECT Min ( T1.Num_of_Staff ) FROM museum AS T1 )",
        -6.059639930725098
      ],
      [
        "SELECT T1.Name FROM museum AS T1 JOIN visit AS T2 ON T1.Museum_ID = T2.Museum_ID WHERE T1.Num_of_Staff > ( SELECT Min ( T1.Num_of_Staff ) FROM museum AS T1 ) GROUP BY T2.Museum_ID HAVING Min ( T1.Num_of_Staff ) > ( SELECT Min ( T1.Num_of_Staff ) FROM museum AS T1 )",
        -6.119415283203125
      ],
      [
        "SELECT T1.Name FROM museum AS T1 JOIN visit AS T2 ON T1.Museum_ID = T2.Museum_ID WHERE T1.Num_of_Staff > ( SELECT Min ( T1.Num_of_Staff ) FROM museum AS T1 ) GROUP BY T2.Museum_ID HAVING Count ( T1.Num_of_Staff ) > ( SELECT Min ( T1.Num_of_Staff ) FROM museum AS T1 )",
        -7.163060665130615
      ],
      [
        "SELECT T1.Name FROM museum AS T1 JOIN visit AS T2 ON T1.Museum_ID = T2.Museum_ID WHERE T1.Num_of_Staff > ( SELECT Min ( T1.Num_of_Staff ) FROM museum AS T1 WHERE T1.Open_Year < value ) GROUP BY T2.Museum_ID HAVING Min ( T1.Num_of_Staff ) > ( SELECT Min ( T1.Num_of_Staff ) FROM museum AS T1 WHERE T1.Open_Year < value )",
        -7.166559219360352
      ],
      [
        "SELECT T1.Name FROM museum AS T1 JOIN visit AS T2 ON T1.Museum_ID = T2.Museum_ID WHERE T1.Num_of_Staff > ( SELECT Min ( T1.Num_of_Staff ) FROM museum AS T1 ) GROUP BY T2.Museum_ID HAVING Min ( T1.Num_of_Staff ) > ( SELECT Min ( T1.Num_of_Staff ) FROM museum AS T1 WHERE T1.Open_Year < value )",
        -7.208942413330078
      ],
      [
        "SELECT Name FROM museum WHERE Num_of_Staff < ( SELECT Min ( Num_of_Staff ) FROM museum WHERE Open_Year < value )",
        -7.331162452697754
      ],
      [
        "SELECT T1.Name FROM museum AS T1 JOIN visit AS T2 ON T1.Museum_ID = T2.Museum_ID WHERE T1.Num_of_Staff > ( SELECT Min ( T1.Num_of_Staff ) FROM museum AS T1 ) GROUP BY T2.Museum_ID ORDER BY Avg ( T1.Num_of_Staff ) Asc LIMIT value",
        -7.402492523193359
      ],
      [
        "SELECT T1.Name FROM museum AS T1 JOIN visit AS T2 ON T1.Museum_ID = T2.Museum_ID GROUP BY T2.Museum_ID HAVING Avg ( T1.Num_of_Staff ) > ( SELECT Min ( T1.Num_of_Staff ) FROM museum AS T1 )",
        -7.557650566101074
      ],
      [
        "SELECT Name FROM museum WHERE Num_of_Staff > ( SELECT Min ( Open_Year ) FROM museum )",
        -8.08387279510498
      ],
      [
        "SELECT Name FROM museum WHERE Open_Year > value",
        -8.713505744934082
      ],
      [
        "SELECT T1.Name FROM museum AS T1 JOIN visit AS T2 ON T1.Museum_ID = T2.Museum_ID WHERE T1.Open_Year > value GROUP BY T2.Museum_ID HAVING Count ( * ) > = value",
        -9.39606761932373
      ],
      [
        "SELECT Name FROM museum WHERE Num_of_Staff < ( SELECT Min ( Num_of_Staff ) FROM museum )",
        -9.519330978393555
      ],
      [
        "SELECT Name FROM museum WHERE Num_of_Staff > ( SELECT Avg ( Num_of_Staff ) FROM museum )",
        -9.539392471313477
      ]
    ],
    "predicted_parse_with_values": "SELECT Name FROM museum WHERE Num_of_Staff > ( SELECT Min ( Num_of_Staff ) FROM museum WHERE Open_Year < 2010 )",
    "predicted_parse": "SELECT Name FROM museum WHERE Num_of_Staff > ( SELECT Min ( Num_of_Staff ) FROM museum WHERE Open_Year < value )",
    "predicted_parse_explanation": [
      "Step 1: find the minimum num of staff in museum table whose open year less than 2010",
      "Step 2: find the name in museum table whose num of staff greater than the results of step 1"
    ],
    "template_feedback": "in step 1 , consider the open year greater than 2010 conditions in place of the open year less than 2010 conditions .",
    "primary_span": [
      [
        4,
        11
      ]
    ],
    "secondary_span": [
      [
        12,
        22
      ]
    ],
    "edits": [
      "open year greater than 2010",
      "open year less than 2010"
    ],
    "edits_original": "< where > add open year greater than 2010 </ where > < where > remove open year less than 2010 </ where >"
  },
  {
    "db_id": "flight_2",
    "feedback": "you should delete the phrase \"and country equals usa\".",
    "question": "What are flight numbers of Airline \"United Airlines\"?",
    "gold_parse": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"",
    "beam": [
      [
        "SELECT T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Airline = value AND T1.Country = value",
        -0.019800186157226562
      ],
      [
        "SELECT T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Country = value",
        -4.7509565353393555
      ],
      [
        "SELECT T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Country = value AND T1.Country = value",
        -5.179288864135742
      ],
      [
        "SELECT T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Airline = value",
        -5.430619239807129
      ],
      [
        "SELECT T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Airline = value AND T1.Airline = value",
        -7.079662322998047
      ],
      [
        "SELECT T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Airline = value AND T1.Abbreviation = value",
        -9.83553409576416
      ],
      [
        "SELECT T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Abbreviation = value AND T1.Country = value",
        -11.063919067382812
      ],
      [
        "SELECT T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Country = value AND T1.Airline = value",
        -11.507238388061523
      ],
      [
        "SELECT T3.FlightNo FROM airlines AS T1 JOIN airports AS T2 JOIN flights AS T3 WHERE T2.Country = value AND T1.Country = value",
        -13.017732620239258
      ],
      [
        "SELECT T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Airline = value AND T1.Country > = value",
        -13.973302841186523
      ],
      [
        "SELECT T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Country = value AND T1.Abbreviation = value",
        -14.005949020385742
      ],
      [
        "SELECT T2.FlightNo , T1.Airline FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Airline = value AND T1.Country = value",
        -14.918555974960327
      ],
      [
        "SELECT DISTINCT T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Airline = value AND T1.Country = value",
        -15.044288635253906
      ],
      [
        "SELECT T3.FlightNo FROM airlines AS T1 JOIN airports AS T2 JOIN flights AS T3 WHERE T2.CountryAbbrev = value AND T1.Country = value",
        -15.356281280517578
      ],
      [
        "SELECT Count ( T2.FlightNo ) FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Airline = value AND T1.Country = value",
        -15.386239051818848
      ],
      [
        "SELECT T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Airline < value",
        -15.492002487182617
      ],
      [
        "SELECT T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Country < value",
        -15.544044494628906
      ],
      [
        "SELECT T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Airline > value",
        -15.753019332885742
      ],
      [
        "SELECT T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Abbreviation = value",
        -16.571938514709473
      ],
      [
        "SELECT FlightNo FROM flights",
        -18.84488582611084
      ]
    ],
    "predicted_parse_with_values": "SELECT T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Airline = \"United Airlines\" AND T1.Country = \"USA\"",
    "predicted_parse": "SELECT T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Airline = value AND T1.Country = value",
    "predicted_parse_explanation": [
      "Step 1: for each row in airlines table , find the corresponding rows in flights table",
      "Step 2: find the flight number of the results of step 1 whose airlines 's airline name equals United Airlines and country equals USA"
    ],
    "template_feedback": "in step 2 , remove the country equals USA conditions .",
    "primary_span": [
      [
        4,
        10
      ]
    ],
    "secondary_span": [],
    "edits": [
      "country equals \"USA\""
    ],
    "edits_original": "< where > remove country equals \" USA \" </ where >"
  },
  {
    "db_id": "network_1",
    "feedback": "Substitute friend table with likes table in step 1.",
    "question": "Show the names of students who have at least 2 likes.",
    "gold_parse": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2",
    "beam": [
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) > = value",
        -0.07234764099121094
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id GROUP BY T2.student_id HAVING Count ( * ) > = value",
        -2.6697683334350586
      ],
      [
        "SELECT name FROM Highschooler WHERE grade > = value",
        -8.091980934143066
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.friend_id HAVING Count ( * ) > = value",
        -9.050061225891113
      ],
      [
        "SELECT name FROM Highschooler GROUP BY name HAVING Count ( * ) > = value",
        -9.573341369628906
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id GROUP BY T2.liked_id HAVING Count ( * ) > = value",
        -11.700835227966309
      ],
      [
        "SELECT name FROM Highschooler GROUP BY ID HAVING Count ( * ) > = value",
        -12.081206321716309
      ],
      [
        "SELECT name FROM Highschooler WHERE grade = value",
        -12.42365837097168
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id WHERE T1.grade = value GROUP BY T2.student_id HAVING Count ( * ) > = value",
        -12.756763458251953
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id WHERE T1.grade = value GROUP BY T2.student_id HAVING Count ( * ) > = value",
        -12.862383842468262
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id HAVING T1.grade > = value",
        -14.008934020996094
      ],
      [
        "SELECT DISTINCT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) > = value",
        -14.41075325012207
      ],
      [
        "SELECT name FROM Highschooler",
        -14.77988052368164
      ],
      [
        "SELECT T1.name , T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) > = value",
        -14.877046346664429
      ],
      [
        "SELECT name FROM Highschooler EXCEPT SELECT name FROM Highschooler WHERE grade = value",
        -15.549038887023926
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id HAVING Sum ( T1.grade ) > = value",
        -15.65186595916748
      ],
      [
        "SELECT T1.name , T1.grade FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) > = value",
        -16.09604024887085
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id WHERE T1.grade > = value GROUP BY T2.student_id HAVING Count ( * ) > = value",
        -16.10530948638916
      ],
      [
        "SELECT DISTINCT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) > = value",
        -16.10686492919922
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id ORDER BY Count ( * ) Asc",
        -16.447062492370605
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) > = 2",
    "predicted_parse": "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) > = value",
    "predicted_parse_explanation": [
      "Step 1: for each row in high schooler table , find the corresponding rows in friend table",
      "Step 2: find the number of rows of each value of student id of the results of step 1",
      "Step 3: find the name of the results of step 1 whose corresponding value in step 2 is greater than or equals 2"
    ],
    "template_feedback": "in step 1 , use likes table in place of friend table",
    "primary_span": [
      [
        4,
        6
      ]
    ],
    "secondary_span": [
      [
        7,
        11
      ]
    ],
    "edits": [
      "likes",
      "friend"
    ],
    "edits_original": "< from > add likes </ from > < from > remove friend </ from >"
  },
  {
    "db_id": "world_1",
    "feedback": "Find name name of country table which language equals English and French and is official equals T .",
    "question": "Give the names of countries with English and French as official languages.",
    "gold_parse": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\"",
    "beam": [
      [
        "SELECT Continent FROM country WHERE Code2 = value INTERSECT SELECT Continent FROM country WHERE Code2 = value",
        -0.13996601104736328
      ],
      [
        "SELECT Continent FROM country WHERE LocalName = value INTERSECT SELECT Continent FROM country WHERE Code2 = value",
        -2.2608394622802734
      ],
      [
        "SELECT Continent FROM country WHERE Code2 = value INTERSECT SELECT Continent FROM country WHERE LocalName = value",
        -4.052709579467773
      ],
      [
        "SELECT T1.Continent FROM country AS T1 WHERE T1.Code2 = value INTERSECT SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value",
        -5.763288497924805
      ],
      [
        "SELECT Continent FROM country WHERE LocalName = value INTERSECT SELECT Continent FROM country WHERE LocalName = value",
        -6.192272186279297
      ],
      [
        "SELECT Name FROM country WHERE Code2 = value INTERSECT SELECT Continent FROM country WHERE Code2 = value",
        -6.603294372558594
      ],
      [
        "SELECT Continent FROM country WHERE Code2 = value INTERSECT SELECT Name FROM country WHERE Code2 = value",
        -7.486716270446777
      ],
      [
        "SELECT Name FROM country WHERE LocalName = value INTERSECT SELECT Continent FROM country WHERE Code2 = value",
        -7.875702857971191
      ],
      [
        "SELECT T1.Continent FROM country AS T1 WHERE T1.LocalName = value INTERSECT SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value",
        -8.064620018005371
      ],
      [
        "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value INTERSECT SELECT T1.Continent FROM country AS T1 WHERE T1.Code2 = value",
        -8.227853775024414
      ],
      [
        "SELECT Continent FROM country WHERE Name = value INTERSECT SELECT Continent FROM country WHERE Code2 = value",
        -8.437955856323242
      ],
      [
        "SELECT Continent FROM country WHERE Code = value INTERSECT SELECT Continent FROM country WHERE Code2 = value",
        -8.768574714660645
      ],
      [
        "SELECT Continent FROM country WHERE Code2 = value INTERSECT SELECT Continent FROM country WHERE Code = value",
        -8.942476272583008
      ],
      [
        "SELECT Continent FROM country WHERE Code2 = value INTERSECT SELECT LocalName FROM country WHERE Code2 = value",
        -9.6952486038208
      ],
      [
        "SELECT Continent FROM country WHERE Code2 = value INTERSECT SELECT Continent FROM country WHERE Name = value",
        -9.744712829589844
      ],
      [
        "SELECT Continent FROM country WHERE LocalName = value INTERSECT SELECT Name FROM country WHERE Code2 = value",
        -10.045429229736328
      ],
      [
        "SELECT Continent FROM country WHERE Continent = value INTERSECT SELECT Continent FROM country WHERE Code2 = value",
        -10.195155143737793
      ],
      [
        "SELECT Continent FROM country WHERE LocalName = value AND Code2 = value",
        -11.644816398620605
      ],
      [
        "SELECT Continent FROM country WHERE Code2 = value AND Code2 = value",
        -12.137452125549316
      ],
      [
        "SELECT Continent FROM country WHERE LocalName = value AND LocalName = value",
        -13.90047836303711
      ]
    ],
    "predicted_parse_with_values": "SELECT Continent FROM country WHERE Code2 = \"T\" INTERSECT SELECT Continent FROM country WHERE Code2 = \"French\"",
    "predicted_parse": "SELECT Continent FROM country WHERE Code2 = value INTERSECT SELECT Continent FROM country WHERE Code2 = value",
    "predicted_parse_explanation": [
      "Step 1: find the continent in country table whose code2 equals T",
      "Step 2: find the continent in country table whose code2 equals French",
      "Step 3: show the rows that are in both the results of step 1 and step 2"
    ],
    "template_feedback": "in step 1 , additionally use the information from the countrylanguage table besides the country table . consider the language equals English and is official equals T conditions in place of the code2 equals T conditions . find name in place of continent . in step 2 , additionally use the information from the countrylanguage table besides the country table . consider the language equals French and is official equals T conditions in place of the code2 equals French conditions . find name in place of continent .",
    "primary_span": [
      [
        4,
        11
      ],
      [
        17,
        27
      ],
      [
        37,
        38
      ],
      [
        48,
        55
      ],
      [
        61,
        71
      ],
      [
        81,
        82
      ]
    ],
    "secondary_span": [
      [
        12,
        16
      ],
      [
        28,
        36
      ],
      [
        39,
        43
      ],
      [
        56,
        60
      ],
      [
        72,
        80
      ],
      [
        83,
        87
      ]
    ],
    "edits": [
      "name",
      "continent",
      "countrylanguage",
      "language equals \"English\"",
      "is official equals \"T\"",
      "code2 equals \"T\"",
      "name",
      "continent",
      "countrylanguage",
      "language equals \"French\"",
      "is official equals \"T\"",
      "code2 equals \"French\""
    ],
    "edits_original": "< select > add name </ select > < select > remove continent </ select > < from > add countrylanguage </ from > < where > add language equals \" English \" </ where > < where > add is official equals \" T \" </ where > < where > remove code2 equals \" T \" </ where > < select > add name </ select > < select > remove continent </ select > < from > add countrylanguage </ from > < where > add language equals \" French \" </ where > < where > add is official equals \" T \" </ where > < where > remove code2 equals \" French \" </ where >"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "feedback": "In document table you should have number of each template type code.",
    "question": "What are the different template type codes, and how many documents use each type?",
    "gold_parse": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code",
    "beam": [
      [
        "SELECT Template_Type_Code , Count ( * ) FROM Templates GROUP BY Template_Type_Code",
        -0.00063323974609375
      ],
      [
        "SELECT Count ( * ) , Template_Type_Code FROM Templates GROUP BY Template_Type_Code",
        -7.491246223449707
      ],
      [
        "SELECT T1.Template_Type_Code , Count ( * ) FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code GROUP BY T2.Template_Type_Code",
        -9.88133430480957
      ],
      [
        "SELECT Template_Type_Code , Count ( * ) FROM Templates",
        -11.96083927154541
      ],
      [
        "SELECT Template_Type_Code , Count ( * ) , Template_Type_Code FROM Templates GROUP BY Template_Type_Code",
        -12.297427654266357
      ],
      [
        "SELECT Template_Type_Code , Sum ( * ) FROM Templates GROUP BY Template_Type_Code",
        -13.318025529384613
      ],
      [
        "SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code",
        -13.47438907623291
      ],
      [
        "SELECT T1.Template_Type_Code , Count ( DISTINCT T2.Document_ID ) FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T1.Template_Type_Code",
        -14.037833213806152
      ],
      [
        "SELECT T1.Template_Type_Code , Sum ( T2.Document_ID ) FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T1.Template_Type_Code",
        -14.209470510482788
      ],
      [
        "SELECT T1.Template_Type_Code , Count ( DISTINCT T3.Document_ID ) FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID JOIN Paragraphs AS T3 ON T2.Document_ID = T3.Document_ID GROUP BY T1.Template_Type_Code",
        -14.427250862121582
      ],
      [
        "SELECT T2.Template_Type_Code , Count ( * ) FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code GROUP BY T1.Template_Type_Code",
        -14.631668090820312
      ],
      [
        "SELECT Template_Type_Code , Count ( * ) FROM Templates GROUP BY Template_Type_Code ORDER BY Count ( * ) Desc LIMIT value",
        -14.769857406616211
      ],
      [
        "SELECT T1.Template_Type_Code , Sum ( DISTINCT T3.Document_ID ) FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID JOIN Paragraphs AS T3 ON T2.Document_ID = T3.Document_ID GROUP BY T1.Template_Type_Code",
        -14.930944204330444
      ],
      [
        "SELECT Template_Type_Code , Sum ( Version_Number ) FROM Templates GROUP BY Template_Type_Code",
        -14.968274593353271
      ],
      [
        "SELECT T1.Template_Type_Code , Count ( DISTINCT T3.Paragraph_ID ) FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID JOIN Paragraphs AS T3 ON T2.Document_ID = T3.Document_ID GROUP BY T1.Template_Type_Code",
        -14.986407279968262
      ],
      [
        "SELECT Template_Type_Code , Count ( * ) FROM Templates GROUP BY Template_Type_Code HAVING Count ( * ) > = value",
        -15.18431282043457
      ],
      [
        "SELECT T1.Template_Type_Code , Sum ( DISTINCT T3.Paragraph_ID ) FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID JOIN Paragraphs AS T3 ON T2.Document_ID = T3.Document_ID GROUP BY T1.Template_Type_Code",
        -15.360796451568604
      ],
      [
        "SELECT Template_Type_Code , Avg ( * ) FROM Templates GROUP BY Template_Type_Code",
        -15.557588815689087
      ],
      [
        "SELECT Template_Type_Code , Count ( * ) FROM Templates GROUP BY Template_Type_Code HAVING Count ( * ) = value",
        -15.746269226074219
      ],
      [
        "SELECT DISTINCT Template_Type_Code , Count ( * ) FROM Templates GROUP BY Template_Type_Code",
        -15.843095779418945
      ]
    ],
    "predicted_parse_with_values": "SELECT Template_Type_Code , Count ( * ) FROM Templates GROUP BY Template_Type_Code",
    "predicted_parse": "SELECT Template_Type_Code , Count ( * ) FROM Templates GROUP BY Template_Type_Code",
    "predicted_parse_explanation": [
      "find each value of template type code in templates table along with the number of the corresponding rows to each value"
    ],
    "template_feedback": "additionally use the information from the documents table besides the templates table .",
    "primary_span": [
      [
        0,
        7
      ]
    ],
    "secondary_span": [
      [
        8,
        12
      ]
    ],
    "edits": [
      "documents"
    ],
    "edits_original": "< from > add documents </ from >"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "feedback": "CV should be the template type code.",
    "question": "Count the number of templates of the type CV.",
    "gold_parse": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"",
    "beam": [
      [
        "SELECT Count ( * ) FROM Ref_Template_Types",
        -0.057018280029296875
      ],
      [
        "SELECT Count ( DISTINCT Template_Type_Code ) FROM Templates",
        -2.9200305938720703
      ],
      [
        "SELECT Count ( DISTINCT Template_Type_Code ) FROM Ref_Template_Types",
        -6.744678497314453
      ],
      [
        "SELECT Count ( Template_Type_Code ) FROM Templates",
        -8.462985038757324
      ],
      [
        "SELECT Count ( * ) FROM Templates WHERE Template_Type_Code = value",
        -9.471526145935059
      ],
      [
        "SELECT Count ( * ) FROM Templates GROUP BY Template_Type_Code",
        -11.44133186340332
      ],
      [
        "SELECT Sum ( Template_Type_Code ) FROM Ref_Template_Types",
        -12.119002342224121
      ],
      [
        "SELECT Count ( * ) FROM Templates GROUP BY Template_Type_Code HAVING Count ( * ) = value",
        -14.012517929077148
      ],
      [
        "SELECT Count ( * ) , Template_Type_Code FROM Templates GROUP BY Template_Type_Code",
        -14.172308921813965
      ],
      [
        "SELECT Count ( * ) , Template_Type_Code FROM Templates",
        -14.33085823059082
      ],
      [
        "SELECT Count ( * ) FROM Ref_Template_Types WHERE Template_Type_Code = value",
        -14.816689491271973
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM Ref_Template_Types",
        -14.947250366210938
      ],
      [
        "SELECT Avg ( Template_Type_Code ) FROM Ref_Template_Types",
        -14.979901313781738
      ],
      [
        "SELECT Count ( * ) FROM Templates GROUP BY Template_Type_Code ORDER BY Count ( * ) Desc LIMIT value",
        -15.078666687011719
      ],
      [
        "SELECT Max ( Template_Type_Code ) FROM Ref_Template_Types",
        -15.324174404144287
      ],
      [
        "SELECT Count ( Count ( * ) ) FROM Ref_Template_Types",
        -15.745871543884277
      ],
      [
        "SELECT Count ( * ) FROM Ref_Template_Types EXCEPT SELECT Count ( * ) FROM Ref_Template_Types",
        -15.8220796585083
      ],
      [
        "SELECT Count ( * ) FROM Ref_Template_Types ORDER BY Template_Type_Code Desc LIMIT value",
        -15.89109468460083
      ],
      [
        "SELECT Sum ( Template_Type_Code ) FROM Templates",
        -16.29538631439209
      ],
      [
        "SELECT Count ( * ) FROM Templates GROUP BY Template_Type_Code HAVING Template_Type_Code = value",
        -16.592216968536377
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM Ref_Template_Types",
    "predicted_parse": "SELECT Count ( * ) FROM Ref_Template_Types",
    "predicted_parse_explanation": [
      "find the number of rows in reference template types table"
    ],
    "template_feedback": "use templates table in place of reference template types table . additionally make sure that templates 's template type code equals CV .",
    "primary_span": [
      [
        0,
        2
      ],
      [
        11,
        22
      ]
    ],
    "secondary_span": [
      [
        3,
        10
      ]
    ],
    "edits": [
      "templates",
      "reference template types",
      "template type code equals \"CV\""
    ],
    "edits_original": "< from > add templates </ from > < from > remove reference template types </ from > < where > add template type code equals \" CV \" </ where >"
  },
  {
    "db_id": "flight_2",
    "feedback": "exchange between destination airport and destination airport of flight table.",
    "question": "Which airlines have a flight with destination airport AHD?",
    "gold_parse": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"",
    "beam": [
      [
        "SELECT Airline FROM airlines WHERE Abbreviation = value",
        -0.4531416893005371
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = value",
        -1.7066733837127686
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 WHERE T2.FlightNo = value",
        -1.7957005500793457
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value",
        -4.861727237701416
      ],
      [
        "SELECT Airline FROM airlines WHERE Airline = value",
        -5.396426200866699
      ],
      [
        "SELECT Airline FROM airlines WHERE Country = value",
        -6.177608013153076
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.CountryAbbrev = value",
        -6.450667858123779
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 WHERE T2.Airline = value",
        -7.257724761962891
      ],
      [
        "SELECT Airline FROM airlines",
        -9.166218757629395
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.City = value",
        -9.363123893737793
      ],
      [
        "SELECT Airline FROM airlines WHERE Abbreviation = Airline",
        -10.401440143585205
      ],
      [
        "SELECT Airline FROM airlines WHERE uid = value",
        -11.105671882629395
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 WHERE T2.DestAirport = value",
        -11.414264678955078
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 WHERE T2.Airline = T1.Airline",
        -12.48902177810669
      ],
      [
        "SELECT Airline FROM airlines WHERE uid = Airline",
        -12.504847049713135
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 WHERE T2.SourceAirport = value",
        -13.185853004455566
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 WHERE T2.FlightNo = T1.Airline",
        -13.595712184906006
      ],
      [
        "SELECT Airline FROM airlines WHERE Airline LIKE value",
        -13.779756546020508
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportCode = value",
        -13.866728782653809
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 EXCEPT SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = value",
        -14.464997291564941
      ]
    ],
    "predicted_parse_with_values": "SELECT Airline FROM airlines WHERE Abbreviation = \"AHD\"",
    "predicted_parse": "SELECT Airline FROM airlines WHERE Abbreviation = value",
    "predicted_parse_explanation": [
      "find the airline name in airlines table whose abbreviation equals AHD"
    ],
    "template_feedback": "additionally use the information from the flights table besides the airlines table . consider the destination airport equals AHD conditions in place of the abbreviation equals AHD conditions .",
    "primary_span": [
      [
        0,
        7
      ],
      [
        13,
        19
      ]
    ],
    "secondary_span": [
      [
        8,
        12
      ],
      [
        20,
        28
      ]
    ],
    "edits": [
      "flights",
      "destination airport equals \"AHD\"",
      "abbreviation equals \"AHD\""
    ],
    "edits_original": "< from > add flights </ from > < where > add destination airport equals \" AHD \" </ where > < where > remove abbreviation equals \" AHD \" </ where >"
  },
  {
    "db_id": "car_1",
    "feedback": "along with that, i also want the highest value in horsepower.",
    "question": "What is the number of cars with a greater accelerate than the one with the most horsepower?",
    "gold_parse": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 )",
    "beam": [
      [
        "SELECT Count ( * ) FROM cars_data WHERE Accelerate > value",
        -0.4257020950317383
      ],
      [
        "SELECT Count ( * ) FROM cars_data WHERE Accelerate > value ORDER BY Accelerate Desc LIMIT value",
        -1.6964216232299805
      ],
      [
        "SELECT Count ( * ) FROM cars_data ORDER BY Accelerate Desc LIMIT value",
        -1.8396635055541992
      ],
      [
        "SELECT Count ( * ) FROM cars_data WHERE Accelerate > value GROUP BY Accelerate ORDER BY Count ( * ) Desc LIMIT value",
        -7.114784240722656
      ],
      [
        "SELECT Count ( * ) FROM cars_data GROUP BY Id ORDER BY Count ( * ) Desc LIMIT value",
        -7.145870685577393
      ],
      [
        "SELECT Count ( * ) FROM cars_data WHERE Accelerate > ( SELECT Max ( Accelerate ) FROM cars_data )",
        -7.359470367431641
      ],
      [
        "SELECT Count ( * ) FROM cars_data WHERE Accelerate > value GROUP BY Id ORDER BY Count ( * ) Desc LIMIT value",
        -7.624226331710815
      ],
      [
        "SELECT Count ( * ) FROM cars_data WHERE Accelerate > value GROUP BY Accelerate ORDER BY Accelerate Desc LIMIT value",
        -7.956796646118164
      ],
      [
        "SELECT Count ( * ) FROM model_list GROUP BY Model ORDER BY Count ( * ) Desc LIMIT value",
        -8.162497997283936
      ],
      [
        "SELECT Count ( * ) FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T3.Accelerate > value GROUP BY T1.Model ORDER BY Count ( * ) Desc LIMIT value",
        -8.458293199539185
      ],
      [
        "SELECT Count ( * ) FROM cars_data WHERE Accelerate > value GROUP BY MPG ORDER BY Count ( * ) Desc LIMIT value",
        -8.75926923751831
      ],
      [
        "SELECT Count ( * ) FROM cars_data WHERE Accelerate > value GROUP BY Horsepower ORDER BY Count ( * ) Desc LIMIT value",
        -9.771563053131104
      ],
      [
        "SELECT Count ( * ) FROM cars_data GROUP BY MPG ORDER BY Count ( * ) Desc LIMIT value",
        -9.814672470092773
      ],
      [
        "SELECT Count ( * ) FROM cars_data WHERE Accelerate = ( SELECT Max ( Accelerate ) FROM cars_data ) ORDER BY Accelerate Desc LIMIT value",
        -9.978800058364868
      ],
      [
        "SELECT Count ( * ) FROM cars_data WHERE Accelerate > value GROUP BY Year ORDER BY Count ( * ) Desc LIMIT value",
        -9.99770450592041
      ],
      [
        "SELECT Count ( * ) FROM continents GROUP BY * ORDER BY Count ( * ) Desc LIMIT value",
        -10.237091541290283
      ],
      [
        "SELECT Count ( * ) FROM cars_data GROUP BY Year ORDER BY Count ( * ) Desc LIMIT value",
        -10.563273906707764
      ],
      [
        "SELECT Count ( * ) FROM cars_data WHERE Accelerate > value ORDER BY * Desc LIMIT value",
        -10.680676460266113
      ],
      [
        "SELECT Count ( * ) FROM car_makers GROUP BY FullName ORDER BY Count ( * ) Desc LIMIT value",
        -10.833190441131592
      ],
      [
        "SELECT Count ( * ) FROM continents",
        -13.066018104553223
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM cars_data WHERE Accelerate > 1",
    "predicted_parse": "SELECT Count ( * ) FROM cars_data WHERE Accelerate > value",
    "predicted_parse_explanation": [
      "find the number of rows in cars data table whose accelerate greater than 1"
    ],
    "template_feedback": "consider the accelerate is greater than accelerate cars data with largest horsepower conditions in place of the accelerate greater than 1 conditions .",
    "primary_span": [
      [
        0,
        12
      ]
    ],
    "secondary_span": [
      [
        13,
        22
      ]
    ],
    "edits": [
      "accelerate greater than SUBS1",
      "accelerate greater than 1",
      "accelerate",
      "cars data",
      "horsepower",
      "descending",
      "1"
    ],
    "edits_original": "< where > add accelerate greater than SUBS1 </ where > < where > remove accelerate greater than 1 </ where > < select > add accelerate </ select > < from > add cars data </ from > < orderBy > add horsepower </ orderBy > < orderBy > add descending </ orderBy > < limit > add 1 </ limit >"
  },
  {
    "db_id": "employee_hire_evaluation",
    "feedback": "In step 1 , Ensure to search the product number for all shop.",
    "question": "What are the manager name and district of the shop that sells the largest number of products?",
    "gold_parse": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1",
    "beam": [
      [
        "SELECT Manager_name , District FROM shop GROUP BY Shop_ID ORDER BY Count ( * ) Desc LIMIT value",
        -0.40659332275390625
      ],
      [
        "SELECT Name , District FROM shop GROUP BY Shop_ID ORDER BY Count ( * ) Desc LIMIT value",
        -1.3310813903808594
      ],
      [
        "SELECT T1.Manager_name , T1.District FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T2.Shop_ID ORDER BY Count ( * ) Desc LIMIT value",
        -3.0162229537963867
      ],
      [
        "SELECT T1.Name , T1.District FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T2.Shop_ID ORDER BY Count ( * ) Desc LIMIT value",
        -3.9240713119506836
      ],
      [
        "SELECT Manager_name , District FROM shop ORDER BY Number_products Desc LIMIT value",
        -7.411260604858398
      ],
      [
        "SELECT Name , District FROM shop ORDER BY Number_products Desc LIMIT value",
        -7.680149078369141
      ],
      [
        "SELECT Manager_name , District FROM shop WHERE Number_products = ( SELECT Max ( Number_products ) FROM shop )",
        -11.65181827545166
      ],
      [
        "SELECT Name , District FROM shop WHERE Number_products = ( SELECT Max ( Number_products ) FROM shop )",
        -11.850986003875732
      ],
      [
        "SELECT Manager_name , District FROM shop GROUP BY Shop_ID",
        -12.041604042053223
      ],
      [
        "SELECT Manager_name , District , Shop_ID FROM shop GROUP BY Shop_ID ORDER BY Count ( * ) Desc LIMIT value",
        -12.389741897583008
      ],
      [
        "SELECT Name , District , Shop_ID FROM shop GROUP BY Shop_ID ORDER BY Count ( * ) Desc LIMIT value",
        -12.601323127746582
      ],
      [
        "SELECT Name , District FROM shop GROUP BY Shop_ID",
        -12.892532348632812
      ],
      [
        "SELECT Manager_name , District FROM shop WHERE Location = ( SELECT Shop_ID FROM shop GROUP BY Shop_ID ORDER BY Count ( * ) Desc LIMIT value )",
        -12.896288394927979
      ],
      [
        "SELECT Manager_name , District FROM shop WHERE Shop_ID IN ( SELECT Shop_ID FROM shop GROUP BY Shop_ID ORDER BY Count ( * ) Desc LIMIT value )",
        -12.956829071044922
      ],
      [
        "SELECT Name , District FROM shop WHERE Location = ( SELECT Shop_ID FROM shop GROUP BY Shop_ID ORDER BY Count ( * ) Desc LIMIT value )",
        -13.021781921386719
      ],
      [
        "SELECT T1.Manager_name , T1.District FROM shop AS T1 WHERE T1.Location = ( SELECT T2.Shop_ID FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY Count ( * ) Desc LIMIT value )",
        -13.136499881744385
      ],
      [
        "SELECT T1.Manager_name , T1.District FROM shop AS T1 WHERE T1.Shop_ID IN ( SELECT T2.Shop_ID FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY Count ( * ) Desc LIMIT value )",
        -13.204545974731445
      ],
      [
        "SELECT Name , District FROM shop WHERE Shop_ID IN ( SELECT Shop_ID FROM shop GROUP BY Shop_ID ORDER BY Count ( * ) Desc LIMIT value )",
        -13.233668327331543
      ],
      [
        "SELECT Manager_name , District FROM shop",
        -14.130985260009766
      ],
      [
        "SELECT Name , District FROM shop",
        -14.146198272705078
      ]
    ],
    "predicted_parse_with_values": "SELECT Manager_name , District FROM shop GROUP BY Shop_ID ORDER BY Count ( * ) Desc LIMIT 1",
    "predicted_parse": "SELECT Manager_name , District FROM shop GROUP BY Shop_ID ORDER BY Count ( * ) Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of shop id in shop table",
      "Step 2: find the manager name and district in shop table with largest value in the results of step 1"
    ],
    "template_feedback": "in step 1 , do not find for each value of shop id . in step 2 , order the results by number products in place of number of rows .",
    "primary_span": [
      [
        4,
        13
      ],
      [
        18,
        23
      ]
    ],
    "secondary_span": [
      [
        24,
        30
      ]
    ],
    "edits": [
      "shop id",
      "number products",
      "number of rows"
    ],
    "edits_original": "< groupBy > remove shop id </ groupBy > < orderBy > add number products </ orderBy > < orderBy > remove number of rows </ orderBy >"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "feedback": "templates table should be use in place of reference template types table .",
    "question": "Count the number of templates.",
    "gold_parse": "SELECT count(*) FROM Templates",
    "beam": [
      [
        "SELECT Count ( * ) FROM Ref_Template_Types",
        -8.58306884765625e-06
      ],
      [
        "SELECT Sum ( * ) FROM Ref_Template_Types",
        -12.85057783126831
      ],
      [
        "SELECT Count ( * ) FROM Templates WHERE Version_Number = value",
        -13.83055567741394
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM Ref_Template_Types",
        -13.968159675598145
      ],
      [
        "SELECT Sum ( Version_Number ) FROM Templates",
        -14.175119996070862
      ],
      [
        "SELECT Avg ( * ) FROM Ref_Template_Types",
        -14.496986031532288
      ],
      [
        "SELECT Count ( * ) FROM Documents GROUP BY Template_ID",
        -14.953600645065308
      ],
      [
        "SELECT Count ( * ) FROM Templates WHERE Template_Type_Code = value",
        -14.958760857582092
      ],
      [
        "SELECT Count ( Count ( * ) ) FROM Ref_Template_Types",
        -15.342851638793945
      ],
      [
        "SELECT Count ( * ) , Count ( * ) FROM Ref_Template_Types",
        -15.419516563415527
      ],
      [
        "SELECT Count ( * ) , Template_ID FROM Documents",
        -15.425583362579346
      ],
      [
        "SELECT Count ( * ) FROM Templates ORDER BY Version_Number Desc",
        -16.077983915805817
      ],
      [
        "SELECT Count ( * ) , Template_Type_Code FROM Templates",
        -16.110114574432373
      ],
      [
        "SELECT Avg ( Version_Number ) FROM Templates",
        -16.335925698280334
      ],
      [
        "SELECT Count ( * ) FROM Templates ORDER BY Version_Number Desc LIMIT value",
        -16.400756418704987
      ],
      [
        "SELECT Count ( * ) FROM Templates GROUP BY Template_Type_Code",
        -16.459954857826233
      ],
      [
        "SELECT * FROM Ref_Template_Types",
        -16.82906886935234
      ],
      [
        "SELECT Count ( DISTINCT * ) FROM Ref_Template_Types",
        -16.98592472076416
      ],
      [
        "SELECT Count ( * ) FROM Ref_Template_Types LIMIT value",
        -17.04298973083496
      ],
      [
        "SELECT Max ( * ) FROM Ref_Template_Types",
        -17.484467267990112
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM Ref_Template_Types",
    "predicted_parse": "SELECT Count ( * ) FROM Ref_Template_Types",
    "predicted_parse_explanation": [
      "find the number of rows in reference template types table"
    ],
    "template_feedback": "use templates table in place of reference template types table .",
    "primary_span": [
      [
        0,
        2
      ]
    ],
    "secondary_span": [
      [
        3,
        10
      ]
    ],
    "edits": [
      "templates",
      "reference template types"
    ],
    "edits_original": "< from > add templates </ from > < from > remove reference template types </ from >"
  },
  {
    "db_id": "flight_2",
    "feedback": "Replace airlines with flights .",
    "question": "Return the number of flights.",
    "gold_parse": "SELECT count(*) FROM FLIGHTS",
    "beam": [
      [
        "SELECT Count ( * ) FROM airlines",
        -0.00016498565673828125
      ],
      [
        "SELECT Count ( DISTINCT FlightNo ) FROM flights",
        -8.85908842086792
      ],
      [
        "SELECT Count ( FlightNo ) FROM flights",
        -11.432433128356934
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE AirportName = value",
        -13.385861039161682
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE City = value",
        -13.894355297088623
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM airlines",
        -14.203255653381348
      ],
      [
        "SELECT Sum ( FlightNo ) FROM flights",
        -14.251697063446045
      ],
      [
        "SELECT Count ( * ) , Airline FROM flights",
        -14.258268177509308
      ],
      [
        "SELECT Count ( * ) FROM flights WHERE Airline = value",
        -14.619282722473145
      ],
      [
        "SELECT Count ( * ) FROM airlines WHERE Abbreviation = value",
        -14.687664985656738
      ],
      [
        "SELECT Count ( * ) FROM flights WHERE FlightNo = value",
        -14.761101961135864
      ],
      [
        "SELECT Avg ( FlightNo ) FROM flights",
        -14.84699010848999
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE CountryAbbrev = value",
        -14.968256950378418
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE Country = value",
        -15.05715012550354
      ],
      [
        "SELECT Count ( Count ( * ) ) FROM airlines",
        -15.190144538879395
      ],
      [
        "SELECT Count ( * ) FROM flights GROUP BY FlightNo",
        -15.354859828948975
      ],
      [
        "SELECT FlightNo FROM flights",
        -15.465302467346191
      ],
      [
        "SELECT Count ( * ) FROM airlines",
        -17.042271614074707
      ],
      [
        "SELECT Count ( DISTINCT * ) FROM airlines",
        -17.092753410339355
      ],
      [
        "SELECT Count ( * ) FROM airlines LIMIT value",
        -17.13227939605713
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM airlines",
    "predicted_parse": "SELECT Count ( * ) FROM airlines",
    "predicted_parse_explanation": [
      "find the number of rows in airlines table"
    ],
    "template_feedback": "use flights table in place of airlines table .",
    "primary_span": [
      [
        0,
        2
      ]
    ],
    "secondary_span": [
      [
        3,
        8
      ]
    ],
    "edits": [
      "flights",
      "airlines"
    ],
    "edits_original": "< from > add flights </ from > < from > remove airlines </ from >"
  },
  {
    "db_id": "world_1",
    "feedback": "In step 1, use country instead of city.",
    "question": "Return the names of the 3 most populated countries.",
    "gold_parse": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3",
    "beam": [
      [
        "SELECT Name FROM city ORDER BY Population Desc LIMIT value",
        -0.32451915740966797
      ],
      [
        "SELECT T2.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code ORDER BY T1.Population Desc LIMIT value",
        -1.7333898544311523
      ],
      [
        "SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code ORDER BY T2.LifeExpectancy Desc LIMIT value",
        -2.550034523010254
      ],
      [
        "SELECT Name FROM country ORDER BY LifeExpectancy Desc LIMIT value",
        -3.966071128845215
      ],
      [
        "SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code ORDER BY T2.Population Desc LIMIT value",
        -6.05558967590332
      ],
      [
        "SELECT Name FROM country ORDER BY Population Desc LIMIT value",
        -7.431647300720215
      ],
      [
        "SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code GROUP BY T2.Continent ORDER BY Count ( * ) Desc LIMIT value",
        -9.055851936340332
      ],
      [
        "SELECT T2.LocalName FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code ORDER BY T1.Population Desc LIMIT value",
        -9.069855690002441
      ],
      [
        "SELECT Name FROM country GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value",
        -10.202670097351074
      ],
      [
        "SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code ORDER BY T2.Continent Desc LIMIT value",
        -10.509054183959961
      ],
      [
        "SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code GROUP BY T2.Name ORDER BY Count ( * ) Desc LIMIT value",
        -10.642337799072266
      ],
      [
        "SELECT T2.Continent FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code ORDER BY T1.Population Desc LIMIT value",
        -10.727731704711914
      ],
      [
        "SELECT LocalName FROM country ORDER BY LifeExpectancy Desc LIMIT value",
        -11.299138069152832
      ],
      [
        "SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = value ORDER BY T1.Population Desc LIMIT value",
        -11.471360206604004
      ],
      [
        "SELECT Name FROM country GROUP BY Name ORDER BY Count ( * ) Desc LIMIT value",
        -11.584426879882812
      ],
      [
        "SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Name = value ORDER BY T1.Population Desc LIMIT value",
        -11.923465728759766
      ],
      [
        "SELECT Name FROM country ORDER BY Continent Desc LIMIT value",
        -11.95332145690918
      ],
      [
        "SELECT Name FROM city UNION SELECT Max ( Population ) FROM city",
        -11.971185684204102
      ],
      [
        "SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = ( SELECT T2.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code ORDER BY T1.Population Desc LIMIT value ) ORDER BY T1.Population Desc LIMIT value",
        -12.059616088867188
      ],
      [
        "SELECT Name FROM city",
        -14.941194534301758
      ]
    ],
    "predicted_parse_with_values": "SELECT Name FROM city ORDER BY Population Desc LIMIT 3",
    "predicted_parse": "SELECT Name FROM city ORDER BY Population Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: find the name in city table ordered descending by population",
      "Step 2: only show the first 3 rows of the results"
    ],
    "template_feedback": "in step 1 , use country table in place of city table . find country 's name in place of city 's name . order the results by country 's population in place of city 's population .",
    "primary_span": [
      [
        4,
        6
      ],
      [
        13,
        16
      ],
      [
        24,
        30
      ]
    ],
    "secondary_span": [
      [
        7,
        12
      ],
      [
        17,
        23
      ],
      [
        31,
        37
      ]
    ],
    "edits": [
      "country",
      "city"
    ],
    "edits_original": "< from > add country </ from > < from > remove city </ from >"
  },
  {
    "db_id": "pets_1",
    "feedback": "use weight in place of pet age.",
    "question": "What type of pet is the youngest animal, and how much does it weigh?",
    "gold_parse": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1",
    "beam": [
      [
        "SELECT PetType , pet_age FROM Pets ORDER BY pet_age Asc LIMIT value",
        -0.2045574188232422
      ],
      [
        "SELECT PetType , weight FROM Pets ORDER BY pet_age Asc LIMIT value",
        -1.6883363723754883
      ],
      [
        "SELECT PetType , pet_age FROM Pets ORDER BY weight Asc LIMIT value",
        -9.845190048217773
      ],
      [
        "SELECT PetType , PetType FROM Pets ORDER BY pet_age Asc LIMIT value",
        -10.256942749023438
      ],
      [
        "SELECT T3.PetType , T1.Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID ORDER BY T3.pet_age Asc LIMIT value",
        -10.715377807617188
      ],
      [
        "SELECT PetType , pet_age FROM Pets WHERE pet_age = ( SELECT Min ( pet_age ) FROM Pets )",
        -11.27144479751587
      ],
      [
        "SELECT PetType FROM Pets ORDER BY pet_age Asc LIMIT value",
        -11.92401123046875
      ],
      [
        "SELECT PetType , pet_age FROM Pets GROUP BY PetType ORDER BY pet_age Asc LIMIT value",
        -11.968050956726074
      ],
      [
        "SELECT PetType , weight FROM Pets ORDER BY weight Asc LIMIT value",
        -12.002138137817383
      ],
      [
        "SELECT PetType , pet_age FROM Pets WHERE pet_age = ( SELECT Min ( pet_age ) FROM Pets ) ORDER BY pet_age Asc LIMIT value",
        -12.201406002044678
      ],
      [
        "SELECT PetType , weight FROM Pets WHERE pet_age = ( SELECT Min ( pet_age ) FROM Pets )",
        -13.001855850219727
      ],
      [
        "SELECT PetType , weight FROM Pets GROUP BY PetType ORDER BY pet_age Asc LIMIT value",
        -13.219535827636719
      ],
      [
        "SELECT PetType , pet_age FROM Pets ORDER BY pet_age Asc",
        -13.301826477050781
      ],
      [
        "SELECT PetType , pet_age FROM Pets ORDER BY pet_age Desc LIMIT value",
        -13.476685523986816
      ],
      [
        "SELECT PetType , weight FROM Pets WHERE pet_age = ( SELECT Min ( pet_age ) FROM Pets ) ORDER BY pet_age Asc LIMIT value",
        -13.654857635498047
      ],
      [
        "SELECT PetType , pet_age , weight FROM Pets ORDER BY pet_age Asc LIMIT value",
        -13.669183254241943
      ],
      [
        "SELECT PetType , pet_age FROM Pets",
        -14.48615550994873
      ],
      [
        "SELECT T3.PetType , T3.pet_age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T1.Sex = value ORDER BY T3.pet_age Asc LIMIT value",
        -14.559295654296875
      ],
      [
        "SELECT PetType , weight FROM Pets ORDER BY pet_age Asc",
        -14.7704496383667
      ],
      [
        "SELECT PetType , pet_age FROM Pets WHERE weight = ( SELECT Min ( pet_age ) FROM Pets ) ORDER BY pet_age Asc LIMIT value",
        -15.078693389892578
      ]
    ],
    "predicted_parse_with_values": "SELECT PetType , pet_age FROM Pets ORDER BY pet_age Asc LIMIT 1",
    "predicted_parse": "SELECT PetType , pet_age FROM Pets ORDER BY pet_age Asc LIMIT value",
    "predicted_parse_explanation": [
      "find the pet type and pet age in pets table with smallest value of pet age"
    ],
    "template_feedback": "find weight in place of pet age .",
    "primary_span": [
      [
        0,
        1
      ]
    ],
    "secondary_span": [
      [
        2,
        7
      ]
    ],
    "edits": [
      "weight",
      "pet age"
    ],
    "edits_original": "< select > add weight </ select > < select > remove pet age </ select >"
  },
  {
    "db_id": "wta_1",
    "feedback": "Make sure that player are left handed.",
    "question": "What are the full names of all left handed players, in order of birth date?",
    "gold_parse": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date",
    "beam": [
      [
        "SELECT first_name , last_name FROM players ORDER BY birth_date Asc",
        -6.4849853515625e-05
      ],
      [
        "SELECT T1.first_name , T1.last_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.loser_age Asc",
        -10.659509658813477
      ],
      [
        "SELECT hand , last_name FROM players ORDER BY birth_date Asc",
        -11.599944114685059
      ],
      [
        "SELECT DISTINCT first_name , last_name FROM players ORDER BY birth_date Asc",
        -12.228026390075684
      ],
      [
        "SELECT first_name , last_name FROM players WHERE hand = value ORDER BY birth_date Asc",
        -12.629989624023438
      ],
      [
        "SELECT first_name , last_name FROM players ORDER BY first_name Asc",
        -12.640830993652344
      ],
      [
        "SELECT first_name , last_name , hand FROM players ORDER BY birth_date Asc",
        -12.649824619293213
      ],
      [
        "SELECT first_name , last_name FROM players ORDER BY birth_date Asc LIMIT value",
        -12.909735679626465
      ],
      [
        "SELECT first_name FROM players ORDER BY birth_date Asc",
        -13.436274528503418
      ],
      [
        "SELECT first_name , last_name FROM players UNION SELECT first_name FROM players",
        -13.526970863342285
      ],
      [
        "SELECT first_name , last_name FROM players ORDER BY birth_date Desc",
        -13.571749687194824
      ],
      [
        "SELECT first_name , last_name FROM players UNION SELECT birth_date FROM players",
        -13.751123428344727
      ],
      [
        "SELECT first_name , last_name , birth_date FROM players ORDER BY birth_date Asc",
        -14.047441959381104
      ],
      [
        "SELECT first_name , last_name FROM players GROUP BY first_name ORDER BY birth_date Asc",
        -14.161409378051758
      ],
      [
        "SELECT first_name , last_name FROM players",
        -14.320578575134277
      ],
      [
        "SELECT first_name , last_name FROM players WHERE hand = value",
        -14.35102367401123
      ],
      [
        "SELECT first_name , last_name FROM players UNION SELECT hand FROM players",
        -14.85433053970337
      ],
      [
        "SELECT T1.first_name , T1.last_name FROM players AS T1 UNION SELECT T2.loser_age FROM matches AS T2",
        -14.890966415405273
      ],
      [
        "SELECT birth_date , first_name FROM players ORDER BY birth_date Asc",
        -15.560308456420898
      ],
      [
        "SELECT first_name , last_name FROM players GROUP BY birth_date ORDER BY birth_date Asc",
        -15.603163719177246
      ]
    ],
    "predicted_parse_with_values": "SELECT first_name , last_name FROM players ORDER BY birth_date Asc",
    "predicted_parse": "SELECT first_name , last_name FROM players ORDER BY birth_date Asc",
    "predicted_parse_explanation": [
      "find the first name and last name in players table ordered ascending by birth date"
    ],
    "template_feedback": "additionally make sure that hand equals L .",
    "primary_span": [
      [
        0,
        6
      ]
    ],
    "secondary_span": [],
    "edits": [
      "hand equals \"L\""
    ],
    "edits_original": "< where > add hand equals \" L \" </ where >"
  },
  {
    "db_id": "car_1",
    "feedback": "In step 1 also correspond continents table , In step 2 make sure country belongs in continent europe .",
    "question": "Which countries in europe have at least 3 car manufacturers?",
    "gold_parse": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3",
    "beam": [
      [
        "SELECT T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country GROUP BY T2.Country HAVING Count ( * ) > = value",
        -0.0783843994140625
      ],
      [
        "SELECT Country FROM car_makers GROUP BY Country HAVING Count ( * ) > = value",
        -2.61350154876709
      ],
      [
        "SELECT T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country WHERE T2.Country = value GROUP BY T2.Country HAVING Count ( * ) > = value",
        -6.202325820922852
      ],
      [
        "SELECT T1.Continent FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country GROUP BY T2.Country HAVING Count ( * ) > = value",
        -9.711562156677246
      ],
      [
        "SELECT T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country GROUP BY T2.Country HAVING Count ( * ) > = value UNION SELECT T2.Country FROM car_makers AS T2 GROUP BY T2.Country HAVING Count ( * ) > = value",
        -12.028555870056152
      ],
      [
        "SELECT Country FROM car_makers WHERE Country = value GROUP BY Country HAVING Count ( * ) > = value",
        -12.154799699783325
      ],
      [
        "SELECT Country FROM car_makers WHERE FullName = value GROUP BY Country HAVING Count ( * ) > = value",
        -12.435397386550903
      ],
      [
        "SELECT T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country WHERE T2.Country = value",
        -14.062153339385986
      ],
      [
        "SELECT T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country GROUP BY T2.Country HAVING Count ( * ) > = value EXCEPT SELECT T2.Country FROM car_makers AS T2",
        -14.097752571105957
      ],
      [
        "SELECT T1.Country FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker WHERE T2.Model = value GROUP BY T1.Country HAVING Count ( * ) > = value",
        -14.108533143997192
      ],
      [
        "SELECT Country FROM car_makers WHERE Maker = value GROUP BY Country HAVING Count ( * ) > = value",
        -14.121694803237915
      ],
      [
        "SELECT T1.Country FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker WHERE T2.ModelId = value GROUP BY T1.Country HAVING Count ( * ) > = value",
        -14.228947877883911
      ],
      [
        "SELECT DISTINCT T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country GROUP BY T2.Country HAVING Count ( * ) > = value",
        -14.379446029663086
      ],
      [
        "SELECT T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country AND T1.CountryId = T2.Country JOIN model_list AS T3 ON T2.Id = T3.Maker WHERE T3.Model = value GROUP BY T2.Country HAVING Count ( * ) > = value",
        -14.698403358459473
      ],
      [
        "SELECT T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country WHERE T2.FullName = value GROUP BY T2.Country HAVING Count ( * ) > = value",
        -14.859634399414062
      ],
      [
        "SELECT T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country GROUP BY T2.Country HAVING Count ( * ) > value",
        -14.930883407592773
      ],
      [
        "SELECT T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country GROUP BY T2.Country , T2.Country HAVING Count ( * ) > = value",
        -15.077064037322998
      ],
      [
        "SELECT T2.Country , T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country GROUP BY T2.Country HAVING Count ( * ) > = value",
        -15.166639029979706
      ],
      [
        "SELECT T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country GROUP BY T2.Country HAVING Count ( * ) > = value EXCEPT SELECT T1.CountryName FROM countries AS T1",
        -15.238415718078613
      ],
      [
        "SELECT CountryName FROM countries",
        -15.551207542419434
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country GROUP BY T2.Country HAVING Count ( * ) > = 3",
    "predicted_parse": "SELECT T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country GROUP BY T2.Country HAVING Count ( * ) > = value",
    "predicted_parse_explanation": [
      "Step 1: for each row in countries table , find the corresponding rows in car makers table",
      "Step 2: find the number of rows of each value of country of the results of step 1",
      "Step 3: find the country name of the results of step 1 whose corresponding value in step 2 is greater than or equals 3"
    ],
    "template_feedback": "in step 1 , additionally use the information from the continents table . in step 2 , find for value of country name in place of country . in step 3 , additionally make sure that continents 's continent equals europe .",
    "primary_span": [
      [
        4,
        12
      ],
      [
        17,
        22
      ],
      [
        32,
        41
      ]
    ],
    "secondary_span": [
      [
        23,
        27
      ]
    ],
    "edits": [
      "continents",
      "continent equals \"europe\"",
      "country name",
      "country"
    ],
    "edits_original": "< from > add continents </ from > < where > add continent equals \" europe \" </ where > < groupBy > add country name </ groupBy > < groupBy > remove country </ groupBy >"
  },
  {
    "db_id": "car_1",
    "feedback": "There should be mpg instead of accelerate .",
    "question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?",
    "gold_parse": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4",
    "beam": [
      [
        "SELECT Avg ( Accelerate ) FROM cars_data WHERE Cylinders = value",
        -0.3744215965270996
      ],
      [
        "SELECT Avg ( Horsepower ) FROM cars_data WHERE Cylinders = value",
        -1.4878735542297363
      ],
      [
        "SELECT Avg ( Horsepower ) FROM cars_data WHERE Cylinders < value",
        -2.7731375694274902
      ],
      [
        "SELECT Avg ( Accelerate ) FROM cars_data WHERE Cylinders < value",
        -4.853359222412109
      ],
      [
        "SELECT Avg ( Horsepower ) FROM cars_data WHERE Cylinders > value",
        -5.370218753814697
      ],
      [
        "SELECT Avg ( Weight ) FROM cars_data WHERE Cylinders < value",
        -5.372397422790527
      ],
      [
        "SELECT Avg ( Weight ) FROM cars_data WHERE Cylinders = value",
        -5.8354692459106445
      ],
      [
        "SELECT Avg ( Accelerate ) FROM cars_data WHERE Cylinders > value",
        -6.048009872436523
      ],
      [
        "SELECT Avg ( * ) FROM cars_data WHERE Cylinders = value",
        -8.368486881256104
      ],
      [
        "SELECT Avg ( Accelerate ) FROM cars_data WHERE Year = value",
        -8.442575454711914
      ],
      [
        "SELECT Avg ( T3.Accelerate ) FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T1.Model = value",
        -8.577630996704102
      ],
      [
        "SELECT Avg ( Cylinders ) FROM cars_data WHERE Cylinders = value",
        -8.73872995376587
      ],
      [
        "SELECT Avg ( Weight ) FROM cars_data WHERE Cylinders > value",
        -9.199637413024902
      ],
      [
        "SELECT Avg ( * ) FROM cars_data WHERE Cylinders < value",
        -9.257481098175049
      ],
      [
        "SELECT Avg ( Horsepower ) FROM cars_data WHERE Cylinders = value AND Cylinders = value",
        -9.553493022918701
      ],
      [
        "SELECT Avg ( Horsepower ) FROM cars_data WHERE Year = value",
        -9.697568416595459
      ],
      [
        "SELECT Avg ( Accelerate ) FROM cars_data WHERE Cylinders = value AND Cylinders = value",
        -10.017109394073486
      ],
      [
        "SELECT Avg ( T3.Horsepower ) FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T1.Model = value",
        -10.02323865890503
      ],
      [
        "SELECT Avg ( T3.Accelerate ) FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T1.ModelId = value",
        -10.200702667236328
      ],
      [
        "SELECT Avg ( Horsepower ) FROM cars_data WHERE Cylinders > = value",
        -10.228630542755127
      ]
    ],
    "predicted_parse_with_values": "SELECT Avg ( Accelerate ) FROM cars_data WHERE Cylinders = 4",
    "predicted_parse": "SELECT Avg ( Accelerate ) FROM cars_data WHERE Cylinders = value",
    "predicted_parse_explanation": [
      "find the average accelerate in cars data table whose cylinders equals 4"
    ],
    "template_feedback": "find average mpg in place of average accelerate .",
    "primary_span": [
      [
        0,
        2
      ]
    ],
    "secondary_span": [
      [
        3,
        8
      ]
    ],
    "edits": [
      "average mpg",
      "average accelerate"
    ],
    "edits_original": "< select > add average mpg </ select > < select > remove average accelerate </ select >"
  },
  {
    "db_id": "car_1",
    "feedback": "You need to find model id of fiat. Besides this in step 4, make sure to use phrase \"step 3\" in place of \"step 4\".",
    "question": "What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?",
    "gold_parse": "SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat'",
    "beam": [
      [
        "SELECT CountryId , CountryName FROM countries GROUP BY CountryId HAVING Count ( * ) > value UNION SELECT CountryId , CountryName FROM countries GROUP BY CountryId HAVING Count ( * ) > value",
        -0.6399478912353516
      ],
      [
        "SELECT T1.CountryId , T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country JOIN model_list AS T3 ON T2.Id = T3.Maker WHERE T3.Model = value UNION SELECT T1.CountryId , T1.CountryName FROM countries AS T1 GROUP BY T1.CountryId HAVING Count ( * ) > value",
        -1.236307144165039
      ],
      [
        "SELECT T1.CountryId , T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country JOIN model_list AS T3 ON T2.Id = T3.Maker WHERE T3.Model = value UNION SELECT T1.CountryId , T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country JOIN model_list AS T3 ON T2.Id = T3.Maker WHERE T3.Model = value OR T3.Model = value",
        -2.912970542907715
      ],
      [
        "SELECT T1.CountryId , T1.CountryName FROM countries AS T1 GROUP BY T1.CountryId HAVING Count ( * ) > value UNION SELECT T1.CountryId , T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country GROUP BY T2.Country HAVING Count ( * ) > value",
        -3.5951318740844727
      ],
      [
        "SELECT T1.CountryId , T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country JOIN model_list AS T3 ON T2.Id = T3.Maker WHERE T3.Model = value UNION SELECT T1.CountryId , T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country JOIN model_list AS T3 ON T2.Id = T3.Maker WHERE T3.Model = value",
        -3.7301454544067383
      ],
      [
        "SELECT T1.CountryId , T1.CountryName FROM countries AS T1 GROUP BY T1.CountryId HAVING Count ( * ) > value UNION SELECT T1.CountryId , T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country JOIN model_list AS T3 ON T2.Id = T3.Maker WHERE T3.Model = value",
        -3.899092674255371
      ],
      [
        "SELECT T1.CountryId , T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country JOIN model_list AS T3 ON T2.Id = T3.Maker WHERE T3.Model = value UNION SELECT T1.CountryId , T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country JOIN model_list AS T3 ON T2.Id = T3.Maker JOIN car_names AS T4 ON T3.Model = T4.Model JOIN cars_data AS T5 ON T4.MakeId = T5.Id WHERE T5.Horsepower > value",
        -4.60511589050293
      ],
      [
        "SELECT T1.CountryId , T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country JOIN model_list AS T3 ON T2.Id = T3.Maker WHERE T3.Model = value UNION SELECT T1.CountryId , T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country WHERE T2.Maker > value",
        -5.082291603088379
      ],
      [
        "SELECT T1.CountryId , T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country JOIN model_list AS T3 ON T2.Id = T3.Maker WHERE T3.Model = value UNION SELECT T1.CountryId , T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country JOIN model_list AS T3 ON T2.Id = T3.Maker WHERE T3.Model > value",
        -5.558816432952881
      ],
      [
        "SELECT T1.CountryId , T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country JOIN model_list AS T3 ON T2.Id = T3.Maker WHERE T3.Model = value UNION SELECT T1.CountryId , T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country GROUP BY T2.Country HAVING Count ( * ) > value",
        -5.618429183959961
      ],
      [
        "SELECT T1.CountryId , T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country JOIN model_list AS T3 ON T2.Id = T3.Maker WHERE T3.Model = value GROUP BY T1.CountryId HAVING Count ( * ) > = value",
        -5.655523300170898
      ],
      [
        "SELECT T1.CountryId , T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country JOIN model_list AS T3 ON T2.Id = T3.Maker WHERE T3.Model = value GROUP BY T1.CountryId HAVING Count ( * ) > value",
        -5.803731918334961
      ],
      [
        "SELECT T1.CountryId , T1.CountryName FROM countries AS T1 GROUP BY T1.CountryId HAVING Count ( * ) > value UNION SELECT T1.CountryId , T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country JOIN model_list AS T3 ON T2.Id = T3.Maker WHERE T3.Model = value OR T3.Model = value",
        -5.812960624694824
      ],
      [
        "SELECT T1.CountryId , T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country WHERE T2.Maker = value UNION SELECT T1.CountryId , T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country JOIN model_list AS T3 ON T2.Id = T3.Maker WHERE T3.Model = value",
        -6.045923709869385
      ],
      [
        "SELECT T1.CountryId , T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country WHERE T2.Maker = value UNION SELECT T1.CountryId , T1.CountryName FROM countries AS T1 GROUP BY T1.CountryId HAVING Count ( * ) > value",
        -6.265443325042725
      ],
      [
        "SELECT T1.CountryId , T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country WHERE T2.Maker = value UNION SELECT T1.CountryId , T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country JOIN model_list AS T3 ON T2.Id = T3.Maker WHERE T3.Model = value OR T3.Model = value",
        -6.531493663787842
      ],
      [
        "SELECT T1.CountryId , T1.CountryName FROM countries AS T1 GROUP BY T1.CountryId HAVING Count ( * ) > value UNION SELECT T2.Id , T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country GROUP BY T1.CountryId HAVING Count ( * ) > value",
        -6.605847358703613
      ],
      [
        "SELECT T1.CountryId , T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country JOIN model_list AS T3 ON T2.Id = T3.Maker WHERE T3.Model = value UNION SELECT T1.CountryId , T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country AND T1.CountryId = T2.Country JOIN model_list AS T3 ON T2.Id = T3.Maker WHERE T3.Model = value OR T2.Maker = value",
        -6.755837440490723
      ],
      [
        "SELECT T1.CountryId , T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country JOIN model_list AS T3 ON T2.Id = T3.Maker WHERE T3.Model = value OR T3.Model = value GROUP BY T1.CountryId HAVING Count ( * ) > = value",
        -7.299812316894531
      ],
      [
        "SELECT T1.CountryId , T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country JOIN model_list AS T3 ON T2.Id = T3.Maker JOIN car_names AS T4 ON T3.Model = T4.Model JOIN cars_data AS T5 ON T4.MakeId = T5.Id WHERE T5.Horsepower > value GROUP BY T1.CountryId HAVING Count ( * ) > = value",
        -8.595995903015137
      ]
    ],
    "predicted_parse_with_values": "SELECT CountryId , CountryName FROM countries GROUP BY CountryId HAVING Count ( * ) > \"fiat\" UNION SELECT CountryId , CountryName FROM countries GROUP BY CountryId HAVING Count ( * ) > 3",
    "predicted_parse": "SELECT CountryId , CountryName FROM countries GROUP BY CountryId HAVING Count ( * ) > value UNION SELECT CountryId , CountryName FROM countries GROUP BY CountryId HAVING Count ( * ) > value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of country id in countries table",
      "Step 2: find the country id and country name in countries table whose corresponding value in step 1 is greater than fiat",
      "Step 3: find the number of rows of each value of country id in countries table",
      "Step 4: find the country id and country name in countries table whose corresponding value in step 3 is greater than 3",
      "Step 5: show the rows that are in any of the results of step 2 and step 4"
    ],
    "template_feedback": "in step 1 , additionally use the information from the car makers table besides the countries table . in step 2 , make sure that the corresponding value in step 1 greater than 3 . in step 3 , additionally use the information from the car makers table and model list table besides the countries table . do not find for each value of country id . in step 4 , additionally make sure that model equals fiat .",
    "primary_span": [
      [
        4,
        12
      ],
      [
        22,
        34
      ],
      [
        39,
        51
      ],
      [
        57,
        66
      ],
      [
        71,
        78
      ]
    ],
    "secondary_span": [
      [
        13,
        17
      ],
      [
        52,
        56
      ]
    ],
    "edits": [
      "car makers",
      "number of rows greater than 3",
      "number of rows greater than \"fiat\"",
      "car makers",
      "model list",
      "model equals \"fiat\"",
      "country id",
      "number of rows greater than 3"
    ],
    "edits_original": "< from > add car makers </ from > < having > add number of rows greater than 3 </ having > < having > remove number of rows greater than \" fiat \" </ having > < from > add car makers </ from > < from > add model list </ from > < where > add model equals \" fiat \" </ where > < groupBy > remove country id </ groupBy > < having > remove number of rows greater than 3 </ having >"
  },
  {
    "db_id": "flight_2",
    "feedback": "Remove \"and country equals United States\" phrase .",
    "question": "Which city and country is the Alton airport at?",
    "gold_parse": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"",
    "beam": [
      [
        "SELECT City , Country FROM airports WHERE AirportName = value AND Country = value",
        -0.8434314727783203
      ],
      [
        "SELECT City , Country FROM airports WHERE AirportName = value AND CountryAbbrev = value",
        -0.8582038879394531
      ],
      [
        "SELECT City , CountryAbbrev FROM airports WHERE AirportName = value AND Country = value",
        -2.649993896484375
      ],
      [
        "SELECT City , CountryAbbrev FROM airports WHERE AirportName = value AND CountryAbbrev = value",
        -2.6596508026123047
      ],
      [
        "SELECT City , AirportName FROM airports WHERE AirportName = value AND Country = value",
        -6.8410444259643555
      ],
      [
        "SELECT City , Country FROM airports",
        -6.957042694091797
      ],
      [
        "SELECT AirportName , Country FROM airports WHERE AirportName = value AND CountryAbbrev = value",
        -7.084686279296875
      ],
      [
        "SELECT AirportName , Country FROM airports WHERE AirportName = value AND Country = value",
        -7.087873458862305
      ],
      [
        "SELECT City , AirportName FROM airports WHERE AirportName = value AND CountryAbbrev = value",
        -7.451170921325684
      ],
      [
        "SELECT City , CountryAbbrev FROM airports",
        -8.585702896118164
      ],
      [
        "SELECT AirportName , CountryAbbrev FROM airports WHERE AirportName = value AND CountryAbbrev = value",
        -8.754422187805176
      ],
      [
        "SELECT AirportName , CountryAbbrev FROM airports WHERE AirportName = value AND Country = value",
        -8.759934425354004
      ],
      [
        "SELECT City , Country FROM airports WHERE Country = value",
        -8.85794448852539
      ],
      [
        "SELECT City , Country FROM airports WHERE CountryAbbrev = value",
        -9.97956371307373
      ],
      [
        "SELECT City , Country FROM airports WHERE City = value AND Country = value",
        -10.230461120605469
      ],
      [
        "SELECT City , CountryAbbrev FROM airports WHERE Country = value",
        -10.446248054504395
      ],
      [
        "SELECT City , CountryAbbrev FROM airports WHERE CountryAbbrev = value",
        -11.691415786743164
      ],
      [
        "SELECT City FROM airports WHERE AirportName = value AND Country = value",
        -12.432645797729492
      ],
      [
        "SELECT AirportName , Country FROM airports",
        -12.80504035949707
      ],
      [
        "SELECT City , AirportName FROM airports",
        -13.32243537902832
      ]
    ],
    "predicted_parse_with_values": "SELECT City , Country FROM airports WHERE AirportName = \"Alton\" AND Country = \"United States \"",
    "predicted_parse": "SELECT City , Country FROM airports WHERE AirportName = value AND Country = value",
    "predicted_parse_explanation": [
      "find the city and country in airports table whose airport name equals Alton and country equals United States"
    ],
    "template_feedback": "remove the country equals United States conditions .",
    "primary_span": [
      [
        0,
        7
      ]
    ],
    "secondary_span": [],
    "edits": [
      "country equals \"United States \""
    ],
    "edits_original": "< where > remove country equals \" United States \" </ where >"
  },
  {
    "db_id": "world_1",
    "feedback": "Use name name instead of continent .",
    "question": "What are the names of all the countries that became independent after 1950?",
    "gold_parse": "SELECT Name FROM country WHERE IndepYear  >  1950",
    "beam": [
      [
        "SELECT Continent FROM country WHERE IndepYear > value",
        -8.487701416015625e-05
      ],
      [
        "SELECT Name FROM country WHERE IndepYear > value",
        -9.858240127563477
      ],
      [
        "SELECT GovernmentForm FROM country WHERE IndepYear > value",
        -10.678235054016113
      ],
      [
        "SELECT Continent FROM country WHERE Capital > value",
        -12.72649097442627
      ],
      [
        "SELECT Continent FROM country WHERE IndepYear = value",
        -13.680558204650879
      ],
      [
        "SELECT Continent FROM country WHERE IndepYear > value AND IndepYear > value",
        -14.152952194213867
      ],
      [
        "SELECT Continent , Name FROM country WHERE IndepYear > value",
        -14.19642162322998
      ],
      [
        "SELECT DISTINCT Continent FROM country WHERE IndepYear > value",
        -14.289913177490234
      ],
      [
        "SELECT Continent , GovernmentForm FROM country WHERE IndepYear > value",
        -14.480368614196777
      ],
      [
        "SELECT LocalName FROM country WHERE IndepYear > value",
        -14.566671371459961
      ],
      [
        "SELECT Continent , LocalName FROM country WHERE IndepYear > value",
        -14.76395034790039
      ],
      [
        "SELECT Continent FROM country WHERE IndepYear > = value",
        -14.765180587768555
      ],
      [
        "SELECT Continent FROM country WHERE IndepYear < value",
        -15.338753700256348
      ],
      [
        "SELECT Continent , Continent FROM country WHERE IndepYear > value",
        -15.365159034729004
      ],
      [
        "SELECT DISTINCT Continent FROM country WHERE IndepYear > value",
        -15.7650785446167
      ],
      [
        "SELECT Continent FROM country WHERE Name = value",
        -15.8895263671875
      ],
      [
        "SELECT Continent FROM country WHERE IndepYear > ( SELECT IndepYear FROM country WHERE IndepYear = value )",
        -16.66117238998413
      ],
      [
        "SELECT Continent FROM country WHERE Name > value",
        -16.949673652648926
      ],
      [
        "SELECT Continent FROM country WHERE Max ( IndepYear ) > value",
        -16.95815372467041
      ],
      [
        "SELECT Continent FROM country",
        -18.323447227478027
      ]
    ],
    "predicted_parse_with_values": "SELECT Continent FROM country WHERE IndepYear > 1950",
    "predicted_parse": "SELECT Continent FROM country WHERE IndepYear > value",
    "predicted_parse_explanation": [
      "find the continent in country table whose indepdent year greater than 1950"
    ],
    "template_feedback": "find name in place of continent .",
    "primary_span": [
      [
        0,
        1
      ]
    ],
    "secondary_span": [
      [
        2,
        6
      ]
    ],
    "edits": [
      "name",
      "continent"
    ],
    "edits_original": "< select > add name </ select > < select > remove continent </ select >"
  },
  {
    "db_id": "network_1",
    "feedback": "Ensure Highschooler's id present in friend table in step 1 , Highschooler's id present in likes table instep 2.",
    "question": "Show the ids of high schoolers who have friends and are also liked by someone else.",
    "gold_parse": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes",
    "beam": [
      [
        "SELECT T1.ID FROM Highschooler AS T1 INTERSECT SELECT T2.liked_id FROM Likes AS T2",
        -0.2161407470703125
      ],
      [
        "SELECT T1.student_id FROM Friend AS T1 INTERSECT SELECT T2.liked_id FROM Likes AS T2",
        -1.8562145233154297
      ],
      [
        "SELECT T1.ID FROM Highschooler AS T1 INTERSECT SELECT T2.student_id FROM Likes AS T2",
        -3.4888811111450195
      ],
      [
        "SELECT T1.student_id FROM Friend AS T1 INTERSECT SELECT T2.student_id FROM Likes AS T2",
        -5.231398582458496
      ],
      [
        "SELECT T1.friend_id FROM Friend AS T1 INTERSECT SELECT T2.liked_id FROM Likes AS T2",
        -6.971261024475098
      ],
      [
        "SELECT T1.ID FROM Highschooler AS T1 INTERSECT SELECT T2.liked_id FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id WHERE T1.name = value",
        -8.35305643081665
      ],
      [
        "SELECT T1.ID FROM Highschooler AS T1 INTERSECT SELECT T2.liked_id FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id WHERE T1.grade = value",
        -8.607614517211914
      ],
      [
        "SELECT student_id FROM Likes INTERSECT SELECT liked_id FROM Likes",
        -8.779071807861328
      ],
      [
        "SELECT T1.ID FROM Highschooler AS T1 INTERSECT SELECT T2.friend_id FROM Friend AS T2",
        -9.227311134338379
      ],
      [
        "SELECT T1.ID FROM Highschooler AS T1 INTERSECT SELECT T2.student_id FROM Friend AS T2",
        -9.327276229858398
      ],
      [
        "SELECT T1.ID FROM Highschooler AS T1 INTERSECT SELECT T2.student_id FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id WHERE T1.grade = value",
        -9.337182521820068
      ],
      [
        "SELECT T1.ID FROM Highschooler AS T1 INTERSECT SELECT T2.student_id FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id WHERE T1.name = value",
        -9.411373615264893
      ],
      [
        "SELECT T1.student_id FROM Friend AS T1 INTERSECT SELECT T3.liked_id FROM Highschooler AS T2 JOIN Likes AS T3 ON T2.ID = T3.liked_id WHERE T2.name = value",
        -9.620809078216553
      ],
      [
        "SELECT liked_id FROM Likes INTERSECT SELECT liked_id FROM Likes",
        -9.748372077941895
      ],
      [
        "SELECT T1.student_id FROM Friend AS T1 INTERSECT SELECT T3.liked_id FROM Highschooler AS T2 JOIN Likes AS T3 ON T2.ID = T3.liked_id WHERE T2.grade = value",
        -10.245133876800537
      ],
      [
        "SELECT T1.friend_id FROM Friend AS T1 INTERSECT SELECT T2.student_id FROM Likes AS T2",
        -10.425986289978027
      ],
      [
        "SELECT student_id FROM Friend INTERSECT SELECT friend_id FROM Friend",
        -10.550015449523926
      ],
      [
        "SELECT student_id FROM Friend INTERSECT SELECT student_id FROM Friend",
        -10.863407135009766
      ],
      [
        "SELECT ID FROM Highschooler",
        -13.855878829956055
      ],
      [
        "SELECT student_id FROM Friend",
        -14.87884521484375
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.ID FROM Highschooler AS T1 INTERSECT SELECT T2.liked_id FROM Likes AS T2",
    "predicted_parse": "SELECT T1.ID FROM Highschooler AS T1 INTERSECT SELECT T2.liked_id FROM Likes AS T2",
    "predicted_parse_explanation": [
      "Step 1: find the id in high schooler table",
      "Step 2: find the liked id in likes table",
      "Step 3: show the rows that are in both the results of step 1 and step 2"
    ],
    "template_feedback": "in step 1 , use friend table in place of high schooler table .",
    "primary_span": [
      [
        4,
        6
      ]
    ],
    "secondary_span": [
      [
        7,
        13
      ]
    ],
    "edits": [
      "student id",
      "id",
      "friend",
      "high schooler"
    ],
    "edits_original": "< select > add student id </ select > < select > remove id </ select > < from > add friend </ from > < from > remove high schooler </ from >"
  },
  {
    "db_id": "car_1",
    "feedback": "find average horsepower is wrong , find average edispl instead of that and year with car names's model .",
    "question": "What is the average edispl of the cars of model volvo?",
    "gold_parse": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'",
    "beam": [
      [
        "SELECT Avg ( Horsepower ) FROM cars_data WHERE Year = value",
        -0.6233232021331787
      ],
      [
        "SELECT Avg ( Edispl ) FROM cars_data WHERE Year = value",
        -1.7491072416305542
      ],
      [
        "SELECT Avg ( Weight ) FROM cars_data WHERE Year = value",
        -1.7668756246566772
      ],
      [
        "SELECT Avg ( Cylinders ) FROM cars_data WHERE Year = value",
        -2.3785414695739746
      ],
      [
        "SELECT Avg ( * ) FROM cars_data WHERE Year = value",
        -4.087771415710449
      ],
      [
        "SELECT Avg ( MPG ) FROM cars_data WHERE Year = value",
        -5.332670211791992
      ],
      [
        "SELECT Avg ( Accelerate ) FROM cars_data WHERE Year = value",
        -6.330205917358398
      ],
      [
        "SELECT Avg ( Year ) FROM cars_data WHERE Year = value",
        -6.396514415740967
      ],
      [
        "SELECT Avg ( T1.ModelId ) FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T3.Year = value",
        -7.154226303100586
      ],
      [
        "SELECT Avg ( T1.Maker ) FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T3.Year = value",
        -9.26423454284668
      ],
      [
        "SELECT Avg ( T3.Horsepower ) FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T1.Model = value",
        -9.525283575057983
      ],
      [
        "SELECT Avg ( T1.FullName ) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id WHERE T4.Year = value",
        -9.725748062133789
      ],
      [
        "SELECT Avg ( T1.Make ) FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T2.Year = value",
        -10.007474899291992
      ],
      [
        "SELECT Avg ( T3.Cylinders ) FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T1.Model = value",
        -10.195094585418701
      ],
      [
        "SELECT Avg ( T1.Continent ) FROM continents AS T1 JOIN countries AS T2 ON T1.ContId = T2.Continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country JOIN model_list AS T4 ON T3.Id = T4.Maker JOIN car_names AS T5 ON T4.Model = T5.Model JOIN cars_data AS T6 ON T5.MakeId = T6.Id WHERE T6.Year = value",
        -10.209786415100098
      ],
      [
        "SELECT Avg ( T1.Maker ) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id WHERE T4.Year = value",
        -10.373047828674316
      ],
      [
        "SELECT Avg ( T1.MakeId ) FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T2.Year = value",
        -10.768381118774414
      ],
      [
        "SELECT Avg ( T1.Model ) FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T3.Year = value",
        -10.781336784362793
      ],
      [
        "SELECT Avg ( T1.Id ) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id WHERE T4.Year = value",
        -10.862610816955566
      ],
      [
        "SELECT Count ( * ) FROM cars_data WHERE Year = value",
        -11.07546329498291
      ]
    ],
    "predicted_parse_with_values": "SELECT Avg ( Horsepower ) FROM cars_data WHERE Year = \"volvo\"",
    "predicted_parse": "SELECT Avg ( Horsepower ) FROM cars_data WHERE Year = value",
    "predicted_parse_explanation": [
      "find the average horsepower in cars data table whose year equals volvo"
    ],
    "template_feedback": "additionally use the information from the car names table besides the cars data table . consider the model equals volvo conditions in place of the year equals volvo conditions . find average edispl in place of average horsepower .",
    "primary_span": [
      [
        0,
        8
      ],
      [
        15,
        20
      ],
      [
        30,
        32
      ]
    ],
    "secondary_span": [
      [
        9,
        14
      ],
      [
        21,
        29
      ],
      [
        33,
        38
      ]
    ],
    "edits": [
      "average edispl",
      "average horsepower",
      "car names",
      "model equals \"volvo\"",
      "year equals \"volvo\""
    ],
    "edits_original": "< select > add average edispl </ select > < select > remove average horsepower </ select > < from > add car names </ from > < where > add model equals \" volvo \" </ where > < where > remove year equals \" volvo \" </ where >"
  },
  {
    "db_id": "wta_1",
    "feedback": "I want smallest value of birth date.",
    "question": "What is the first name and country code of the oldest player?",
    "gold_parse": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1",
    "beam": [
      [
        "SELECT first_name , country_code FROM players ORDER BY birth_date Desc LIMIT value",
        -0.6215019226074219
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.loser_age Desc LIMIT value",
        -0.8806467056274414
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.winner_age Desc LIMIT value",
        -3.103529930114746
      ],
      [
        "SELECT first_name , country_code FROM players ORDER BY birth_date Asc LIMIT value",
        -6.298191070556641
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.loser_age Asc LIMIT value",
        -6.493950843811035
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.winner_age Asc LIMIT value",
        -9.485590934753418
      ],
      [
        "SELECT first_name , country_code FROM players",
        -11.811792373657227
      ],
      [
        "SELECT first_name , country_code FROM players ORDER BY birth_date Desc",
        -12.85400676727295
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.loser_age Desc",
        -12.995643615722656
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_age = ( SELECT Max ( T2.loser_age ) FROM matches AS T2 )",
        -13.958992004394531
      ],
      [
        "SELECT T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.loser_age Desc LIMIT value",
        -13.960854530334473
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 UNION SELECT Max ( T2.loser_age ) FROM matches AS T2",
        -13.995824813842773
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_age = ( SELECT Max ( T2.loser_age ) FROM matches AS T2 ) ORDER BY T1.birth_date Asc LIMIT value",
        -14.140932083129883
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.loser_age - T1.birth_date Desc LIMIT value",
        -14.180830955505371
      ],
      [
        "SELECT first_name FROM players ORDER BY birth_date Desc LIMIT value",
        -14.262276649475098
      ],
      [
        "SELECT first_name , country_code FROM players GROUP BY country_code ORDER BY birth_date Desc LIMIT value",
        -14.521791934967041
      ],
      [
        "SELECT first_name , country_code , country_code FROM players ORDER BY birth_date Desc LIMIT value",
        -14.554508209228516
      ],
      [
        "SELECT T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.winner_age Desc LIMIT value",
        -16.456679344177246
      ],
      [
        "SELECT T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.loser_age Asc LIMIT value",
        -17.26303768157959
      ],
      [
        "SELECT first_name FROM players ORDER BY birth_date Asc LIMIT value",
        -17.369975090026855
      ]
    ],
    "predicted_parse_with_values": "SELECT first_name , country_code FROM players ORDER BY birth_date Desc LIMIT 1",
    "predicted_parse": "SELECT first_name , country_code FROM players ORDER BY birth_date Desc LIMIT value",
    "predicted_parse_explanation": [
      "find the first name and country code in players table with largest value of birth date"
    ],
    "template_feedback": "use the smallest in place of largest .",
    "primary_span": [
      [
        0,
        2
      ]
    ],
    "secondary_span": [
      [
        3,
        7
      ]
    ],
    "edits": [
      "descending"
    ],
    "edits_original": "< orderBy > remove descending </ orderBy >"
  },
  {
    "db_id": "world_1",
    "feedback": "you need to mention that continent as asia.",
    "question": "What is the total population and maximum GNP in Asia?",
    "gold_parse": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"",
    "beam": [
      [
        "SELECT Sum ( Population ) , Max ( GNP ) FROM country",
        -0.935704231262207
      ],
      [
        "SELECT Sum ( Population ) , Sum ( GNP ) FROM country",
        -1.4820795059204102
      ],
      [
        "SELECT Sum ( LifeExpectancy ) , Max ( GNP ) FROM country",
        -1.565180778503418
      ],
      [
        "SELECT Sum ( GNP ) , Max ( GNP ) FROM country",
        -1.991927146911621
      ],
      [
        "SELECT Sum ( Population ) , Max ( GNPOld ) FROM country",
        -4.945727348327637
      ],
      [
        "SELECT Sum ( Population ) , Sum ( GNPOld ) FROM country",
        -5.095440864562988
      ],
      [
        "SELECT Sum ( GNPOld ) , Max ( GNP ) FROM country",
        -5.219660758972168
      ],
      [
        "SELECT Sum ( LifeExpectancy ) , Max ( GNPOld ) FROM country",
        -5.456978797912598
      ],
      [
        "SELECT Sum ( Population ) , Sum ( GNP ) FROM country WHERE Continent = value",
        -5.475719451904297
      ],
      [
        "SELECT Sum ( GNP ) , Max ( GNPOld ) FROM country",
        -5.535397529602051
      ],
      [
        "SELECT Sum ( LifeExpectancy ) , Sum ( GNP ) FROM country WHERE Continent = value",
        -6.895441055297852
      ],
      [
        "SELECT Sum ( LifeExpectancy ) , Sum ( GNP ) FROM country",
        -6.909156799316406
      ],
      [
        "SELECT Sum ( LifeExpectancy ) , Max ( GNP ) FROM country WHERE Continent = value",
        -7.96811580657959
      ],
      [
        "SELECT Sum ( Population ) , Avg ( GNP ) FROM country",
        -8.294814109802246
      ],
      [
        "SELECT Sum ( GNP ) , Max ( GNP ) FROM country WHERE Continent = value",
        -8.642239570617676
      ],
      [
        "SELECT Sum ( GNPOld ) , Max ( GNPOld ) FROM country",
        -8.722771644592285
      ],
      [
        "SELECT Sum ( Population ) , Max ( GNP ) FROM country GROUP BY Continent",
        -9.421749114990234
      ],
      [
        "SELECT Sum ( Population ) , Sum ( GNPOld ) FROM country WHERE Continent = value",
        -9.423046112060547
      ],
      [
        "SELECT Sum ( Population ) , Sum ( GNP ) FROM country ORDER BY GNP Desc LIMIT value",
        -10.0352201461792
      ],
      [
        "SELECT Sum ( Population ) , Max ( GNP ) , Max ( GNP ) FROM country",
        -10.214422225952148
      ]
    ],
    "predicted_parse_with_values": "SELECT Sum ( Population ) , Max ( GNP ) FROM country",
    "predicted_parse": "SELECT Sum ( Population ) , Max ( GNP ) FROM country",
    "predicted_parse_explanation": [
      "find the summation of population and maximum gnp in country table"
    ],
    "template_feedback": "additionally make sure that continent equals Asia .",
    "primary_span": [
      [
        0,
        7
      ]
    ],
    "secondary_span": [],
    "edits": [
      "continent equals \"Asia\""
    ],
    "edits_original": "< where > add continent equals \" Asia \" </ where >"
  },
  {
    "db_id": "flight_2",
    "feedback": "eliminate country abbrev which is equivalent to us.",
    "question": "Give the city and country for the Alton airport.",
    "gold_parse": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"",
    "beam": [
      [
        "SELECT City , Country FROM airports WHERE AirportName = value AND CountryAbbrev = value",
        -0.5702285766601562
      ],
      [
        "SELECT City , Country FROM airports WHERE AirportName = value AND Country = value",
        -1.137603759765625
      ],
      [
        "SELECT City , CountryAbbrev FROM airports WHERE AirportName = value AND CountryAbbrev = value",
        -2.6935176849365234
      ],
      [
        "SELECT City , CountryAbbrev FROM airports WHERE AirportName = value AND Country = value",
        -3.2012510299682617
      ],
      [
        "SELECT AirportCode , Country FROM airports WHERE AirportName = value AND CountryAbbrev = value",
        -6.02569580078125
      ],
      [
        "SELECT AirportCode , Country FROM airports WHERE AirportName = value AND Country = value",
        -6.583822250366211
      ],
      [
        "SELECT City , Country FROM airports WHERE AirportName = value",
        -7.784943580627441
      ],
      [
        "SELECT AirportName , Country FROM airports WHERE AirportName = value AND CountryAbbrev = value",
        -8.188972473144531
      ],
      [
        "SELECT City , Country FROM airports WHERE AirportName = value AND AirportName = value",
        -8.31016731262207
      ],
      [
        "SELECT AirportCode , CountryAbbrev FROM airports WHERE AirportName = value AND CountryAbbrev = value",
        -8.558931350708008
      ],
      [
        "SELECT AirportName , Country FROM airports WHERE AirportName = value AND Country = value",
        -8.781317710876465
      ],
      [
        "SELECT City , Country FROM airports",
        -8.99542236328125
      ],
      [
        "SELECT AirportCode , CountryAbbrev FROM airports WHERE AirportName = value AND Country = value",
        -9.057499885559082
      ],
      [
        "SELECT City , CountryAbbrev FROM airports WHERE AirportName = value",
        -9.948208808898926
      ],
      [
        "SELECT AirportName , CountryAbbrev FROM airports WHERE AirportName = value AND CountryAbbrev = value",
        -9.989339828491211
      ],
      [
        "SELECT City , CountryAbbrev FROM airports",
        -10.94504165649414
      ],
      [
        "SELECT City , Country FROM airports WHERE Country = value",
        -11.212101936340332
      ],
      [
        "SELECT City , Country FROM airports WHERE CountryAbbrev = value",
        -11.630291938781738
      ],
      [
        "SELECT City FROM airports WHERE AirportName = value AND Country = value",
        -12.880851745605469
      ],
      [
        "SELECT AirportCode , Country FROM airports",
        -14.500177383422852
      ]
    ],
    "predicted_parse_with_values": "SELECT City , Country FROM airports WHERE AirportName = \"Alton\" AND CountryAbbrev = \"US \"",
    "predicted_parse": "SELECT City , Country FROM airports WHERE AirportName = value AND CountryAbbrev = value",
    "predicted_parse_explanation": [
      "find the city and country in airports table whose airport name equals Alton and country abbrev equals US"
    ],
    "template_feedback": "remove the country abbrev equals US conditions .",
    "primary_span": [
      [
        0,
        7
      ]
    ],
    "secondary_span": [],
    "edits": [
      "country abbrev equals \"US \""
    ],
    "edits_original": "< where > remove country abbrev equals \" US \" </ where >"
  },
  {
    "db_id": "orchestra",
    "feedback": "In step 1, you need to search record of a company.",
    "question": "Show the record companies shared by orchestras founded before 2003 and after 2003.",
    "gold_parse": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003",
    "beam": [
      [
        "SELECT * FROM orchestra WHERE Year_of_Founded > value INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded < value",
        -1.0322933197021484
      ],
      [
        "SELECT Record_Company FROM orchestra WHERE Year_of_Founded > value INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded < value",
        -1.4380779266357422
      ],
      [
        "SELECT * FROM orchestra WHERE Year_of_Founded > value INTERSECT SELECT * FROM orchestra WHERE Year_of_Founded < value",
        -1.4636926651000977
      ],
      [
        "SELECT Record_Company FROM orchestra WHERE Year_of_Founded > value INTERSECT SELECT * FROM orchestra WHERE Year_of_Founded < value",
        -1.861976146697998
      ],
      [
        "SELECT * FROM orchestra WHERE Year_of_Founded < value INTERSECT SELECT * FROM orchestra WHERE Year_of_Founded > value",
        -4.995344638824463
      ],
      [
        "SELECT * FROM orchestra WHERE Year_of_Founded < value INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded > value",
        -5.489144325256348
      ],
      [
        "SELECT T2.Official_ratings_(millions) FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID WHERE T1.Year_of_Founded > value INTERSECT SELECT T1.Record_Company FROM orchestra AS T1 WHERE T1.Year_of_Founded < value",
        -6.279476642608643
      ],
      [
        "SELECT T2.Official_ratings_(millions) FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID WHERE T1.Year_of_Founded > value INTERSECT SELECT * FROM orchestra AS T1 WHERE T1.Year_of_Founded < value",
        -6.707221031188965
      ],
      [
        "SELECT Orchestra FROM orchestra WHERE Year_of_Founded > value INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded < value",
        -6.865518093109131
      ],
      [
        "SELECT * FROM orchestra AS T1 WHERE T1.Year_of_Founded > value INTERSECT SELECT T2.Official_ratings_(millions) FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID WHERE T1.Year_of_Founded < value",
        -7.153170108795166
      ],
      [
        "SELECT Record_Company FROM orchestra WHERE Year_of_Founded < value INTERSECT SELECT * FROM orchestra WHERE Year_of_Founded > value",
        -7.232268333435059
      ],
      [
        "SELECT Orchestra FROM orchestra WHERE Year_of_Founded > value INTERSECT SELECT * FROM orchestra WHERE Year_of_Founded < value",
        -7.304649353027344
      ],
      [
        "SELECT T1.Record_Company FROM orchestra AS T1 WHERE T1.Year_of_Founded > value INTERSECT SELECT T2.Official_ratings_(millions) FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID WHERE T1.Year_of_Founded < value",
        -7.539588451385498
      ],
      [
        "SELECT Record_Company FROM orchestra WHERE Year_of_Founded < value INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded > value",
        -7.712893009185791
      ],
      [
        "SELECT * FROM orchestra WHERE Year_of_Founded > value INTERSECT SELECT Orchestra FROM orchestra WHERE Year_of_Founded < value",
        -8.149005889892578
      ],
      [
        "SELECT Record_Company FROM orchestra WHERE Year_of_Founded > value INTERSECT SELECT Orchestra FROM orchestra WHERE Year_of_Founded < value",
        -8.551187992095947
      ],
      [
        "SELECT * FROM orchestra WHERE Year_of_Founded > value INTERSECT SELECT * FROM orchestra WHERE Year_of_Founded > value",
        -8.967403411865234
      ],
      [
        "SELECT Record_Company FROM orchestra WHERE Year_of_Founded > value INTERSECT SELECT * FROM orchestra WHERE Year_of_Founded > value",
        -9.004819393157959
      ],
      [
        "SELECT T2.Share FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID WHERE T1.Year_of_Founded > value INTERSECT SELECT T1.Record_Company FROM orchestra AS T1 WHERE T1.Year_of_Founded < value",
        -9.876123428344727
      ],
      [
        "SELECT * FROM orchestra AS T1 WHERE T1.Year_of_Founded > value INTERSECT SELECT T2.Nationality FROM conductor AS T2 JOIN orchestra AS T1 ON T2.Conductor_ID = T1.Conductor_ID WHERE T1.Year_of_Founded < value",
        -10.259661197662354
      ]
    ],
    "predicted_parse_with_values": "SELECT * FROM orchestra WHERE Year_of_Founded > 2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003",
    "predicted_parse": "SELECT * FROM orchestra WHERE Year_of_Founded > value INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded < value",
    "predicted_parse_explanation": [
      "Step 1: find the rows in orchestra table whose year of founded greater than 2003",
      "Step 2: find the record company in orchestra table whose year of founded less than 2003",
      "Step 3: show the rows that are in both the results of step 1 and step 2"
    ],
    "template_feedback": "in step 1 , consider the year of founded less than 2003 conditions in place of the year of founded greater than 2003 conditions . find record company in place of rows . in step 2 , consider the year of founded greater than 2003 conditions in place of the year of founded less than 2003 conditions .",
    "primary_span": [
      [
        4,
        12
      ],
      [
        25,
        27
      ],
      [
        37,
        45
      ]
    ],
    "secondary_span": [
      [
        13,
        24
      ],
      [
        28,
        32
      ],
      [
        46,
        57
      ]
    ],
    "edits": [
      "record company",
      "rows",
      "year of founded less than 2003",
      "year of founded greater than 2003",
      "year of founded greater than 2003",
      "year of founded less than 2003"
    ],
    "edits_original": "< select > add record company </ select > < select > remove rows </ select > < where > add year of founded less than 2003 </ where > < where > remove year of founded greater than 2003 </ where > < where > add year of founded greater than 2003 </ where > < where > remove year of founded less than 2003 </ where >"
  },
  {
    "db_id": "world_1",
    "feedback": "you need to search for the total of population and highest gnp from county table having asia as a continent.",
    "question": "How many people live in Asia, and what is the largest GNP among them?",
    "gold_parse": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"",
    "beam": [
      [
        "SELECT Max ( Population ) , Min ( GNP ) FROM country",
        -1.2498226165771484
      ],
      [
        "SELECT Max ( Population ) , Count ( * ) FROM country",
        -1.5134477615356445
      ],
      [
        "SELECT Max ( Population ) , Max ( GNP ) FROM country",
        -2.2222509384155273
      ],
      [
        "SELECT Max ( Population ) , Sum ( GNP ) FROM country",
        -2.2806501388549805
      ],
      [
        "SELECT Max ( Population ) , Count ( GNP ) FROM country",
        -2.8410892486572266
      ],
      [
        "SELECT Max ( GNP ) , Min ( GNP ) FROM country",
        -3.1476144790649414
      ],
      [
        "SELECT Max ( Population ) , Continent FROM country",
        -3.2006444931030273
      ],
      [
        "SELECT Max ( GNP ) , Count ( * ) FROM country",
        -3.539872169494629
      ],
      [
        "SELECT Max ( Population ) , Count ( Population ) FROM country",
        -3.894458770751953
      ],
      [
        "SELECT Max ( GNP ) FROM country",
        -4.533999443054199
      ],
      [
        "SELECT Max ( GNP ) , Max ( GNP ) FROM country",
        -4.559901237487793
      ],
      [
        "SELECT Max ( Population ) FROM country",
        -4.607883453369141
      ],
      [
        "SELECT Max ( Population ) , Avg ( GNP ) FROM country",
        -4.685317039489746
      ],
      [
        "SELECT Max ( GNP ) , Sum ( GNP ) FROM country",
        -4.889762878417969
      ],
      [
        "SELECT Max ( Population ) FROM country WHERE Continent = value",
        -4.972161293029785
      ],
      [
        "SELECT Max ( Population ) , Continent FROM country WHERE Continent = value",
        -5.46809196472168
      ],
      [
        "SELECT Max ( Population ) , Min ( GNP ) , Continent FROM country",
        -5.572851181030273
      ],
      [
        "SELECT Max ( GNP ) , Continent FROM country",
        -5.781604766845703
      ],
      [
        "SELECT Max ( GNP ) , Count ( GNP ) FROM country",
        -6.135390758514404
      ],
      [
        "SELECT Max ( Population ) , GNP FROM country WHERE Continent = value",
        -6.172536849975586
      ]
    ],
    "predicted_parse_with_values": "SELECT Max ( Population ) , Min ( GNP ) FROM country",
    "predicted_parse": "SELECT Max ( Population ) , Min ( GNP ) FROM country",
    "predicted_parse_explanation": [
      "find the maximum population and minimum gnp in country table"
    ],
    "template_feedback": "additionally make sure that continent equals Asia . find summation of population in place of maximum population . find maximum gnp in place of minimum gnp .",
    "primary_span": [
      [
        0,
        7
      ],
      [
        8,
        11
      ],
      [
        18,
        20
      ]
    ],
    "secondary_span": [
      [
        12,
        17
      ],
      [
        21,
        26
      ]
    ],
    "edits": [
      "summation of population",
      "maximum gnp",
      "maximum population",
      "minimum gnp",
      "continent equals \"Asia\""
    ],
    "edits_original": "< select > add summation of population </ select > < select > add maximum gnp </ select > < select > remove maximum population </ select > < select > remove minimum gnp </ select > < where > add continent equals \" Asia \" </ where >"
  },
  {
    "db_id": "world_1",
    "feedback": "Also find for region equals Anguilla along with continent .",
    "question": "What is the continent name which Anguilla belongs to?",
    "gold_parse": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"",
    "beam": [
      [
        "SELECT Continent FROM country",
        -0.00045108795166015625
      ],
      [
        "SELECT LocalName FROM country",
        -8.261442184448242
      ],
      [
        "SELECT Continent , LocalName FROM country",
        -9.37417984008789
      ],
      [
        "SELECT Name FROM country",
        -9.687195777893066
      ],
      [
        "SELECT Continent FROM country WHERE LocalName = value",
        -10.834132194519043
      ],
      [
        "SELECT Continent , Name FROM country",
        -11.6384859085083
      ],
      [
        "SELECT Continent FROM country WHERE Name = value",
        -11.675602912902832
      ],
      [
        "SELECT Continent FROM country UNION SELECT LocalName FROM country",
        -13.521486282348633
      ],
      [
        "SELECT DISTINCT Continent FROM country",
        -14.07974624633789
      ],
      [
        "SELECT LocalName , LocalName FROM country",
        -14.302193641662598
      ],
      [
        "SELECT Continent FROM country UNION SELECT Name FROM country",
        -14.594568252563477
      ],
      [
        "SELECT Continent FROM country ORDER BY LocalName Desc",
        -14.701251983642578
      ],
      [
        "SELECT Continent FROM country GROUP BY Continent",
        -15.155792236328125
      ],
      [
        "SELECT Name , LocalName FROM country",
        -15.217164993286133
      ],
      [
        "SELECT Continent , Continent FROM country",
        -15.353682518005371
      ],
      [
        "SELECT Count ( Continent ) FROM country",
        -15.641929626464844
      ],
      [
        "SELECT Max ( Continent ) FROM country",
        -15.919304847717285
      ],
      [
        "SELECT Continent FROM country ORDER BY Name Desc",
        -16.017817974090576
      ],
      [
        "SELECT Sum ( Continent ) FROM country",
        -16.33436679840088
      ],
      [
        "SELECT Continent , LocalName , LocalName FROM country",
        -16.401599884033203
      ]
    ],
    "predicted_parse_with_values": "SELECT Continent FROM country",
    "predicted_parse": "SELECT Continent FROM country",
    "predicted_parse_explanation": [
      "find the continent in country table"
    ],
    "template_feedback": "additionally make sure that name equals Anguilla .",
    "primary_span": [
      [
        0,
        7
      ]
    ],
    "secondary_span": [],
    "edits": [
      "name equals \"Anguilla\""
    ],
    "edits_original": "< where > add name equals \" Anguilla \" </ where >"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "feedback": "Find the number of the corresponding rows to each value of documents table .",
    "question": "Show all template type codes and the number of documents using each type.",
    "gold_parse": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code",
    "beam": [
      [
        "SELECT Template_Type_Code , Count ( * ) FROM Templates GROUP BY Template_Type_Code",
        -3.24249267578125e-05
      ],
      [
        "SELECT T1.Template_Type_Code , Count ( * ) FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code GROUP BY T2.Template_Type_Code",
        -11.239479064941406
      ],
      [
        "SELECT Template_Type_Code , Count ( * ) , Template_Type_Code FROM Templates GROUP BY Template_Type_Code",
        -12.746220648288727
      ],
      [
        "SELECT Template_Type_Code , Count ( * ) FROM Templates",
        -12.819021224975586
      ],
      [
        "SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code",
        -13.086481094360352
      ],
      [
        "SELECT T1.Template_Type_Code , Sum ( T2.Document_ID ) FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T1.Template_Type_Code",
        -13.384925127029419
      ],
      [
        "SELECT Template_Type_Code , Count ( * ) FROM Templates GROUP BY Template_Type_Code HAVING Count ( * ) = value",
        -13.988677978515625
      ],
      [
        "SELECT Template_Type_Code , Count ( * ) FROM Templates GROUP BY Template_Type_Code ORDER BY Count ( * ) Desc LIMIT value",
        -14.160989761352539
      ],
      [
        "SELECT T1.Template_Type_Code , Count ( * ) , T2.Template_ID FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T1.Template_Type_Code",
        -14.309709310531616
      ],
      [
        "SELECT T2.Template_Type_Code , Count ( * ) FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code GROUP BY T1.Template_Type_Code",
        -14.567962646484375
      ],
      [
        "SELECT DISTINCT Template_Type_Code , Count ( * ) FROM Templates GROUP BY Template_Type_Code",
        -15.560356140136719
      ],
      [
        "SELECT T1.Template_Type_Code , Sum ( T2.Template_ID ) FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T1.Template_Type_Code",
        -15.72175407409668
      ],
      [
        "SELECT T1.Template_Type_Code , Sum ( T2.Document_Name ) FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T1.Template_Type_Code",
        -15.789124011993408
      ],
      [
        "SELECT Template_Type_Code , Sum ( * ) FROM Templates GROUP BY Template_Type_Code",
        -15.9865562915802
      ],
      [
        "SELECT Template_Type_Code , Sum ( Version_Number ) FROM Templates GROUP BY Template_Type_Code",
        -16.1553316116333
      ],
      [
        "SELECT DISTINCT Template_Type_Code , Count ( * ) FROM Templates GROUP BY Template_Type_Code",
        -16.181238174438477
      ],
      [
        "SELECT T1.Template_Type_Code , Sum ( T3.Document_ID ) FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID JOIN Paragraphs AS T3 ON T2.Document_ID = T3.Document_ID GROUP BY T1.Template_Type_Code",
        -16.18376636505127
      ],
      [
        "SELECT Max ( Template_Type_Code ) , Count ( * ) FROM Templates GROUP BY Template_Type_Code",
        -16.238028526306152
      ],
      [
        "SELECT Template_Type_Code , Count ( * ) FROM Templates GROUP BY Template_Type_Code LIMIT value",
        -16.34013557434082
      ],
      [
        "SELECT Template_Type_Code , Count ( * ) , Version_Number FROM Templates GROUP BY Template_Type_Code",
        -16.36510181427002
      ]
    ],
    "predicted_parse_with_values": "SELECT Template_Type_Code , Count ( * ) FROM Templates GROUP BY Template_Type_Code",
    "predicted_parse": "SELECT Template_Type_Code , Count ( * ) FROM Templates GROUP BY Template_Type_Code",
    "predicted_parse_explanation": [
      "find each value of template type code in templates table along with the number of the corresponding rows to each value"
    ],
    "template_feedback": "additionally use the information from the documents table besides the templates table .",
    "primary_span": [
      [
        0,
        7
      ]
    ],
    "secondary_span": [
      [
        8,
        12
      ]
    ],
    "edits": [
      "documents"
    ],
    "edits_original": "< from > add documents </ from >"
  },
  {
    "db_id": "poker_player",
    "feedback": "people id of people should be available in poker player table. ",
    "question": "Return the names of all the poker players.",
    "gold_parse": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID",
    "beam": [
      [
        "SELECT Name FROM people",
        -1.9073486328125e-05
      ],
      [
        "SELECT Name FROM people WHERE Name = value",
        -11.519211053848267
      ],
      [
        "SELECT Name , Name FROM people",
        -13.371147155761719
      ],
      [
        "SELECT Poker_Player_ID FROM poker_player",
        -13.706920623779297
      ],
      [
        "SELECT DISTINCT Name FROM people",
        -14.075798988342285
      ],
      [
        "SELECT Count ( Name ) FROM people",
        -14.080995559692383
      ],
      [
        "SELECT Name FROM people ORDER BY Name Desc",
        -14.13049840927124
      ],
      [
        "SELECT Name FROM people UNION SELECT Name FROM people",
        -14.775649547576904
      ],
      [
        "SELECT Sum ( Name ) FROM people",
        -15.034510612487793
      ],
      [
        "SELECT Name FROM people ORDER BY Name Asc",
        -15.24468183517456
      ],
      [
        "SELECT Name FROM people WHERE Nationality = value",
        -15.460922718048096
      ],
      [
        "SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Money_Rank = value",
        -16.26057243347168
      ],
      [
        "SELECT Name FROM people GROUP BY Name",
        -16.261445999145508
      ],
      [
        "SELECT Min ( Name ) FROM people",
        -16.735901832580566
      ],
      [
        "SELECT Max ( Name ) FROM people",
        -16.82395362854004
      ],
      [
        "SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Poker_Player_ID = T2.Name",
        -16.82921552658081
      ],
      [
        "SELECT DISTINCT Name FROM people",
        -16.970779418945312
      ],
      [
        "SELECT Name FROM people LIMIT value",
        -17.22742748260498
      ],
      [
        "SELECT Name FROM people",
        -17.302392959594727
      ],
      [
        "SELECT * FROM poker_player",
        -17.551966667175293
      ]
    ],
    "predicted_parse_with_values": "SELECT Name FROM people",
    "predicted_parse": "SELECT Name FROM people",
    "predicted_parse_explanation": [
      "find the name in people table"
    ],
    "template_feedback": "additionally use the information from the poker player table besides the people table .",
    "primary_span": [
      [
        0,
        8
      ]
    ],
    "secondary_span": [
      [
        9,
        13
      ]
    ],
    "edits": [
      "poker player"
    ],
    "edits_original": "< from > add poker player </ from >"
  },
  {
    "db_id": "world_1",
    "feedback": "Find the summation of different countrylanguage's language which is official equals T in step 2.",
    "question": "For the countries founded before 1930, what is the total number of distinct official languages?",
    "gold_parse": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"",
    "beam": [
      [
        "SELECT Code2 , Count ( DISTINCT Code ) FROM country WHERE IndepYear < value GROUP BY GovernmentForm",
        -1.2046189308166504
      ],
      [
        "SELECT Code2 , Count ( DISTINCT Code2 ) FROM country WHERE IndepYear < value GROUP BY GovernmentForm",
        -1.396545648574829
      ],
      [
        "SELECT Code2 , Count ( * ) FROM country WHERE IndepYear < value GROUP BY GovernmentForm",
        -2.200655937194824
      ],
      [
        "SELECT Count ( DISTINCT Code2 ) , Continent FROM country WHERE IndepYear < value GROUP BY GovernmentForm",
        -2.4725542068481445
      ],
      [
        "SELECT Code2 , Count ( DISTINCT Code ) FROM country WHERE IndepYear < value GROUP BY Continent",
        -3.2545628547668457
      ],
      [
        "SELECT Count ( DISTINCT Code2 ) FROM country WHERE IndepYear < value",
        -3.451411247253418
      ],
      [
        "SELECT Code2 , Count ( DISTINCT Code2 ) FROM country WHERE IndepYear < value GROUP BY Continent",
        -3.4924700260162354
      ],
      [
        "SELECT Code2 , Count ( DISTINCT Code ) FROM country WHERE IndepYear > value GROUP BY GovernmentForm",
        -4.034643650054932
      ],
      [
        "SELECT Code2 , Count ( * ) FROM country WHERE IndepYear < value GROUP BY Continent",
        -4.238430023193359
      ],
      [
        "SELECT Count ( DISTINCT Code2 ) , Count ( DISTINCT Code ) FROM country WHERE IndepYear < value GROUP BY GovernmentForm",
        -4.396028280258179
      ],
      [
        "SELECT Count ( DISTINCT Code2 ) , Continent FROM country WHERE IndepYear < value GROUP BY Continent",
        -4.449148178100586
      ],
      [
        "SELECT Count ( DISTINCT Code2 ) , Count ( DISTINCT Code2 ) FROM country WHERE IndepYear < value GROUP BY GovernmentForm",
        -4.590764045715332
      ],
      [
        "SELECT Code2 , Count ( DISTINCT Code ) FROM country WHERE IndepYear < value GROUP BY LocalName",
        -4.780263423919678
      ],
      [
        "SELECT Code2 , Count ( DISTINCT Code2 ) FROM country WHERE IndepYear < value GROUP BY Code2",
        -4.958712816238403
      ],
      [
        "SELECT Code2 , Count ( DISTINCT Code2 ) FROM country WHERE IndepYear < value GROUP BY LocalName",
        -5.00384259223938
      ],
      [
        "SELECT Count ( DISTINCT Code2 ) , Count ( * ) FROM country WHERE IndepYear < value GROUP BY GovernmentForm",
        -5.079808712005615
      ],
      [
        "SELECT Code2 , Count ( DISTINCT Code ) FROM country WHERE IndepYear < value GROUP BY Code2",
        -5.116779804229736
      ],
      [
        "SELECT Code2 , Count ( DISTINCT Code2 ) FROM country WHERE IndepYear > value GROUP BY GovernmentForm",
        -5.134147882461548
      ],
      [
        "SELECT Code2 , Count ( DISTINCT Code ) FROM country WHERE IndepYear > value GROUP BY Continent",
        -5.652468204498291
      ],
      [
        "SELECT Count ( DISTINCT Code2 ) , Continent FROM country WHERE IndepYear < value GROUP BY LocalName",
        -5.7546539306640625
      ]
    ],
    "predicted_parse_with_values": "SELECT Code2 , Count ( DISTINCT Code ) FROM country WHERE IndepYear < 1930 GROUP BY GovernmentForm",
    "predicted_parse": "SELECT Code2 , Count ( DISTINCT Code ) FROM country WHERE IndepYear < value GROUP BY GovernmentForm",
    "predicted_parse_explanation": [
      "Step 1: find rows in country table whose indepdent year less than 1930",
      "Step 2: find each value of government form the results of step 1 along with the number of different code and code2 of the corresponding rows to each value"
    ],
    "template_feedback": "in step 1 , additionally use the information from the countrylanguage table besides the country table . additionally make sure that is official equals T . in step 2 , do not find for each value of government form . find number of different language in place of number of different code and code2 .",
    "primary_span": [
      [
        4,
        11
      ],
      [
        17,
        24
      ],
      [
        29,
        38
      ],
      [
        39,
        43
      ]
    ],
    "secondary_span": [
      [
        12,
        16
      ],
      [
        44,
        53
      ]
    ],
    "edits": [
      "number of distinct language",
      "code2",
      "number of distinct code",
      "countrylanguage",
      "is official equals \"T\"",
      "government form"
    ],
    "edits_original": "< select > add number of distinct language </ select > < select > remove code2 </ select > < select > remove number of distinct code </ select > < from > add countrylanguage </ from > < where > add is official equals \" T \" </ where > < groupBy > remove government form </ groupBy >"
  },
  {
    "db_id": "flight_2",
    "feedback": "Need to put destination airport in place of abbreviation in step 2.",
    "question": "Give the flight numbers of flights landing at APG.",
    "gold_parse": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"",
    "beam": [
      [
        "SELECT T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Abbreviation = value",
        -0.6208958625793457
      ],
      [
        "SELECT FlightNo FROM flights WHERE Airline = value",
        -1.2337911128997803
      ],
      [
        "SELECT FlightNo FROM flights WHERE FlightNo = value",
        -2.6366710662841797
      ],
      [
        "SELECT T2.FlightNo FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.City = value",
        -3.6672520637512207
      ],
      [
        "SELECT FlightNo FROM flights",
        -3.9587106704711914
      ],
      [
        "SELECT T2.FlightNo FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.CountryAbbrev = value",
        -4.1464715003967285
      ],
      [
        "SELECT T2.FlightNo FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.Country = value",
        -4.213430881500244
      ],
      [
        "SELECT T2.FlightNo FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.AirportName = value",
        -4.893803596496582
      ],
      [
        "SELECT T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Country = value",
        -5.1560959815979
      ],
      [
        "SELECT FlightNo FROM flights WHERE DestAirport = value",
        -5.381800174713135
      ],
      [
        "SELECT FlightNo FROM flights WHERE SourceAirport = value",
        -5.733468532562256
      ],
      [
        "SELECT T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Airline = value",
        -6.0677103996276855
      ],
      [
        "SELECT T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 WHERE T1.uid = value",
        -6.923469543457031
      ],
      [
        "SELECT T2.FlightNo FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.AirportCode = value",
        -9.588700294494629
      ],
      [
        "SELECT FlightNo FROM flights WHERE Airline = FlightNo",
        -10.884543180465698
      ],
      [
        "SELECT FlightNo FROM flights ORDER BY FlightNo Asc",
        -12.658767700195312
      ],
      [
        "SELECT FlightNo FROM flights WHERE * = value",
        -13.263555526733398
      ],
      [
        "SELECT T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Abbreviation = T2.FlightNo",
        -13.318076610565186
      ],
      [
        "SELECT T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 GROUP BY T2.FlightNo HAVING T1.Abbreviation = value",
        -13.794910430908203
      ],
      [
        "SELECT Min ( FlightNo ) FROM flights",
        -15.83971118927002
      ]
    ],
    "predicted_parse_with_values": "SELECT T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Abbreviation = \"APG\"",
    "predicted_parse": "SELECT T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Abbreviation = value",
    "predicted_parse_explanation": [
      "Step 1: for each row in airlines table , find the corresponding rows in flights table",
      "Step 2: find the flight number of the results of step 1 whose abbreviation equals APG"
    ],
    "template_feedback": "in step 1 , do not use the airlines table . in step 2 , consider the destination airport equals APG conditions in place of the abbreviation equals APG conditions .",
    "primary_span": [
      [
        4,
        10
      ],
      [
        15,
        21
      ]
    ],
    "secondary_span": [
      [
        4,
        10
      ],
      [
        22,
        30
      ]
    ],
    "edits": [
      "airlines",
      "destination airport equals \"APG\"",
      "abbreviation equals \"APG\""
    ],
    "edits_original": "< from > remove airlines </ from > < where > add destination airport equals \" APG \" </ where > < where > remove abbreviation equals \" APG \" </ where >"
  },
  {
    "db_id": "wta_1",
    "feedback": "Verify winners are left-handed and use matches table instead of players table.",
    "question": "Find the number of left handed winners who participated in the WTA Championships.",
    "gold_parse": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'",
    "beam": [
      [
        "SELECT Count ( * ) FROM players",
        -0.04226207733154297
      ],
      [
        "SELECT Count ( * ) , loser_ioc FROM matches GROUP BY loser_ioc",
        -3.996518611907959
      ],
      [
        "SELECT Count ( * ) , loser_ioc FROM matches GROUP BY loser_name",
        -5.297950744628906
      ],
      [
        "SELECT Count ( * ) , loser_ioc FROM matches GROUP BY winner_name",
        -5.40846061706543
      ],
      [
        "SELECT Count ( * ) , loser_ioc FROM matches GROUP BY winner_ioc",
        -6.286993503570557
      ],
      [
        "SELECT Count ( * ) , loser_ioc FROM matches GROUP BY loser_entry",
        -6.536427974700928
      ],
      [
        "SELECT Count ( * ) , loser_entry FROM matches GROUP BY loser_ioc",
        -6.70588493347168
      ],
      [
        "SELECT Count ( * ) , loser_name FROM matches GROUP BY loser_ioc",
        -6.81365442276001
      ],
      [
        "SELECT Count ( * ) , loser_ioc FROM matches GROUP BY winner_entry",
        -6.90749979019165
      ],
      [
        "SELECT Count ( * ) , winner_ioc FROM matches GROUP BY loser_ioc",
        -7.271072149276733
      ],
      [
        "SELECT Count ( * ) , winner_entry FROM matches GROUP BY loser_ioc",
        -7.3586931228637695
      ],
      [
        "SELECT Count ( * ) FROM matches WHERE loser_ioc = value",
        -7.499848365783691
      ],
      [
        "SELECT Count ( * ) , loser_ioc FROM matches",
        -10.45331621170044
      ],
      [
        "SELECT Count ( * ) FROM matches GROUP BY loser_ioc",
        -11.402209281921387
      ],
      [
        "SELECT Count ( DISTINCT loser_ioc ) FROM matches",
        -14.118858337402344
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM players",
        -15.022936820983887
      ],
      [
        "SELECT Sum ( loser_entry ) FROM matches",
        -15.147728323936462
      ],
      [
        "SELECT Sum ( loser_ioc ) FROM matches",
        -15.192268967628479
      ],
      [
        "SELECT Count ( DISTINCT winner_ioc ) FROM matches",
        -15.270215034484863
      ],
      [
        "SELECT Sum ( * ) FROM players",
        -15.337583303451538
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM players",
    "predicted_parse": "SELECT Count ( * ) FROM players",
    "predicted_parse_explanation": [
      "find the number of rows in players table"
    ],
    "template_feedback": "use matches table in place of players table . additionally make sure that winner hand equals L and tourney name equals WTA Championships . find number of different winner name in place of number of rows .",
    "primary_span": [
      [
        0,
        2
      ],
      [
        9,
        23
      ],
      [
        24,
        29
      ]
    ],
    "secondary_span": [
      [
        3,
        8
      ],
      [
        30,
        36
      ]
    ],
    "edits": [
      "number of distinct winner name",
      "number of rows",
      "matches",
      "players",
      "tourney name equals \"WTA Championships\"",
      "winner hand equals \"L\""
    ],
    "edits_original": "< select > add number of distinct winner name </ select > < select > remove number of rows </ select > < from > add matches </ from > < from > remove players </ from > < where > add tourney name equals \" WTA Championships \" </ where > < where > add winner hand equals \" L \" </ where >"
  },
  {
    "db_id": "poker_player",
    "feedback": "Remove \"with smallest value of Best Finish\".",
    "question": "List the final tables made and the best finishes of poker players.",
    "gold_parse": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player",
    "beam": [
      [
        "SELECT Final_Table_Made , Best_Finish FROM poker_player ORDER BY Best_Finish Asc LIMIT value",
        -0.012475013732910156
      ],
      [
        "SELECT Final_Table_Made , Best_Finish FROM poker_player ORDER BY Final_Table_Made Asc LIMIT value",
        -4.620633602142334
      ],
      [
        "SELECT Final_Table_Made , Best_Finish FROM poker_player ORDER BY Best_Finish Desc LIMIT value",
        -6.55390739440918
      ],
      [
        "SELECT Final_Table_Made , Best_Finish FROM poker_player",
        -6.970312118530273
      ],
      [
        "SELECT Final_Table_Made , Best_Finish FROM poker_player UNION SELECT Best_Finish FROM poker_player",
        -9.315177321434021
      ],
      [
        "SELECT Final_Table_Made , Best_Finish FROM poker_player ORDER BY Poker_Player_ID Asc LIMIT value",
        -10.790696144104004
      ],
      [
        "SELECT Final_Table_Made , Best_Finish FROM poker_player ORDER BY Best_Finish Asc",
        -10.944923400878906
      ],
      [
        "SELECT Final_Table_Made , Best_Finish FROM poker_player ORDER BY Final_Table_Made Asc",
        -11.752825736999512
      ],
      [
        "SELECT T1.Final_Table_Made , T1.Best_Finish FROM poker_player AS T1 UNION SELECT T2.Name FROM people AS T2",
        -11.758708715438843
      ],
      [
        "SELECT Final_Table_Made , Best_Finish FROM poker_player UNION SELECT Final_Table_Made FROM poker_player",
        -11.988697052001953
      ],
      [
        "SELECT T1.Final_Table_Made , T1.Best_Finish FROM poker_player AS T1 UNION SELECT T2.Height FROM people AS T2",
        -11.999734163284302
      ],
      [
        "SELECT Final_Table_Made , Best_Finish FROM poker_player WHERE Best_Finish = value",
        -12.003646969795227
      ],
      [
        "SELECT Final_Table_Made , Best_Finish , Best_Finish FROM poker_player ORDER BY Best_Finish Asc LIMIT value",
        -12.914961338043213
      ],
      [
        "SELECT Final_Table_Made , Best_Finish FROM poker_player ORDER BY Final_Table_Made Desc LIMIT value",
        -13.13825511932373
      ],
      [
        "SELECT Final_Table_Made , Best_Finish FROM poker_player GROUP BY People_ID ORDER BY Count ( * ) Asc LIMIT value",
        -13.488744497299194
      ],
      [
        "SELECT Final_Table_Made FROM poker_player ORDER BY Best_Finish Asc LIMIT value",
        -13.676830291748047
      ],
      [
        "SELECT Final_Table_Made , Best_Finish FROM poker_player WHERE Final_Table_Made = value",
        -13.819393396377563
      ],
      [
        "SELECT T1.Final_Table_Made , T1.Best_Finish FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Nationality = value",
        -14.049726963043213
      ],
      [
        "SELECT Final_Table_Made , Best_Finish FROM poker_player ORDER BY Earnings Asc LIMIT value",
        -14.067239761352539
      ],
      [
        "SELECT Final_Table_Made , Best_Finish FROM poker_player GROUP BY People_ID",
        -14.41428792476654
      ]
    ],
    "predicted_parse_with_values": "SELECT Final_Table_Made , Best_Finish FROM poker_player ORDER BY Best_Finish Asc LIMIT 1",
    "predicted_parse": "SELECT Final_Table_Made , Best_Finish FROM poker_player ORDER BY Best_Finish Asc LIMIT value",
    "predicted_parse_explanation": [
      "find the final table made and best finish in poker player table with smallest value of best finish"
    ],
    "template_feedback": "you should not find the smallest of the results . show me all the results .",
    "primary_span": [
      [
        0,
        15
      ]
    ],
    "secondary_span": [],
    "edits": [
      "best finish",
      "1"
    ],
    "edits_original": "< orderBy > remove best finish </ orderBy > < limit > remove 1 </ limit >"
  },
  {
    "db_id": "wta_1",
    "feedback": "From 1 and 2, I want rankings and ranking points respectively.",
    "question": "Find the total ranking points for each player and their first name.",
    "gold_parse": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
    "beam": [
      [
        "SELECT Sum ( T2.winner_rank ) , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T1.first_name",
        -1.5311212539672852
      ],
      [
        "SELECT Sum ( T2.ranking_points ) , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name",
        -1.9020605087280273
      ],
      [
        "SELECT Sum ( T2.loser_rank_points ) , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T1.first_name",
        -2.577115058898926
      ],
      [
        "SELECT Sum ( T2.winner_rank_points ) , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T1.first_name",
        -3.051255226135254
      ],
      [
        "SELECT Sum ( T2.winner_rank ) , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.winner_name",
        -3.1921119689941406
      ],
      [
        "SELECT Sum ( T2.winner_rank ) , T2.winner_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T1.first_name",
        -3.2637710571289062
      ],
      [
        "SELECT Sum ( T2.winner_rank ) , T2.loser_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T1.first_name",
        -3.297001838684082
      ],
      [
        "SELECT Sum ( T2.winner_rank ) , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.loser_name",
        -3.324911117553711
      ],
      [
        "SELECT Sum ( T3.ranking_points ) , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id JOIN rankings AS T3 ON T1.player_id = T3.player_id GROUP BY T2.winner_name",
        -3.586228370666504
      ],
      [
        "SELECT Sum ( T3.ranking_points ) , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id JOIN rankings AS T3 ON T1.player_id = T3.player_id GROUP BY T2.loser_name",
        -3.7112627029418945
      ],
      [
        "SELECT Sum ( T3.ranking_points ) , T2.winner_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id JOIN rankings AS T3 ON T1.player_id = T3.player_id GROUP BY T1.first_name",
        -3.938467025756836
      ],
      [
        "SELECT Sum ( T3.ranking_points ) , T2.loser_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id JOIN rankings AS T3 ON T1.player_id = T3.player_id GROUP BY T1.first_name",
        -3.9651308059692383
      ],
      [
        "SELECT Sum ( winner_rank ) , loser_name FROM matches GROUP BY winner_name",
        -4.1946210861206055
      ],
      [
        "SELECT Sum ( T2.winner_rank_points ) , T2.winner_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T1.first_name",
        -4.272909164428711
      ],
      [
        "SELECT Sum ( T2.loser_rank_points ) , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.winner_name",
        -4.2755889892578125
      ],
      [
        "SELECT Sum ( winner_rank ) , loser_name FROM matches GROUP BY loser_name",
        -4.290323257446289
      ],
      [
        "SELECT Sum ( T2.winner_rank_points ) , T2.loser_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T1.first_name",
        -4.3160200119018555
      ],
      [
        "SELECT Sum ( winner_rank ) , winner_name FROM matches GROUP BY winner_name",
        -4.319250106811523
      ],
      [
        "SELECT Sum ( T2.ranking ) , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name",
        -4.326290130615234
      ],
      [
        "SELECT Sum ( T2.loser_rank_points ) , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.loser_name",
        -4.416163444519043
      ]
    ],
    "predicted_parse_with_values": "SELECT Sum ( T2.winner_rank ) , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T1.first_name",
    "predicted_parse": "SELECT Sum ( T2.winner_rank ) , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T1.first_name",
    "predicted_parse_explanation": [
      "Step 1: for each row in players table , find the corresponding rows in matches table",
      "Step 2: find each value of first name of the results of step 1 along with the summation of winner rank of the corresponding rows to each value"
    ],
    "template_feedback": "in step 1 , use rankings table in place of matches table in step 2 , find summation of ranking points in place of summation of winner rank .",
    "primary_span": [
      [
        4,
        6
      ],
      [
        16,
        20
      ]
    ],
    "secondary_span": [
      [
        7,
        11
      ],
      [
        21,
        28
      ]
    ],
    "edits": [
      "summation of ranking points",
      "summation of winner rank",
      "rankings",
      "matches"
    ],
    "edits_original": "< select > add summation of ranking points </ select > < select > remove summation of winner rank </ select > < from > add rankings </ from > < from > remove matches </ from >"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "feedback": "You need to make sure that template should used as a document.",
    "question": "What are the distinct template type descriptions for the templates ever used by any document?",
    "gold_parse": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID",
    "beam": [
      [
        "SELECT DISTINCT Template_Type_Description FROM Ref_Template_Types",
        -0.00036525726318359375
      ],
      [
        "SELECT DISTINCT Template_Type_Description FROM Ref_Template_Types INTERSECT SELECT DISTINCT Template_Type_Description FROM Ref_Template_Types",
        -8.74991226196289
      ],
      [
        "SELECT DISTINCT T1.Template_Type_Description FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID WHERE T3.Document_Name = value",
        -8.895495891571045
      ],
      [
        "SELECT Template_Type_Description FROM Ref_Template_Types",
        -11.264639854431152
      ],
      [
        "SELECT Template_Type_Description FROM Ref_Template_Types",
        -11.795894622802734
      ],
      [
        "SELECT DISTINCT DISTINCT Template_Type_Description FROM Ref_Template_Types",
        -11.952308654785156
      ],
      [
        "SELECT DISTINCT Template_Type_Code FROM Templates",
        -12.503264427185059
      ],
      [
        "SELECT DISTINCT T1.Template_Type_Description FROM Ref_Template_Types AS T1 INTERSECT SELECT DISTINCT T2.Document_Description FROM Documents AS T2",
        -12.735085487365723
      ],
      [
        "SELECT DISTINCT T1.Template_Type_Description FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID WHERE T3.Document_Description = value",
        -12.745207071304321
      ],
      [
        "SELECT DISTINCT Template_Type_Description FROM Ref_Template_Types ORDER BY Template_Type_Description Asc",
        -13.168532371520996
      ],
      [
        "SELECT DISTINCT Template_Type_Description FROM Ref_Template_Types EXCEPT SELECT DISTINCT Template_Type_Description FROM Ref_Template_Types",
        -13.227937698364258
      ],
      [
        "SELECT DISTINCT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = Template_Type_Description",
        -13.258112907409668
      ],
      [
        "SELECT DISTINCT T1.Template_Type_Description FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID WHERE T3.Document_Name = T1.Template_Type_Description",
        -13.608211040496826
      ],
      [
        "SELECT DISTINCT T1.Template_Type_Description FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T2.Version_Number = value",
        -14.038062572479248
      ],
      [
        "SELECT DISTINCT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Description = value",
        -14.177614688873291
      ],
      [
        "SELECT DISTINCT T1.Template_Type_Description FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code GROUP BY T2.Template_Type_Code",
        -14.432313919067383
      ],
      [
        "SELECT DISTINCT Template_Type_Description FROM Ref_Template_Types LIMIT value",
        -16.89728832244873
      ],
      [
        "SELECT DISTINCT Count ( DISTINCT Template_Type_Description ) FROM Ref_Template_Types",
        -16.99497890472412
      ],
      [
        "SELECT DISTINCT Count ( Template_Type_Description ) FROM Ref_Template_Types",
        -17.329126358032227
      ],
      [
        "SELECT DISTINCT Template_Type_Code FROM Ref_Template_Types",
        -17.861717224121094
      ]
    ],
    "predicted_parse_with_values": "SELECT DISTINCT Template_Type_Description FROM Ref_Template_Types",
    "predicted_parse": "SELECT DISTINCT Template_Type_Description FROM Ref_Template_Types",
    "predicted_parse_explanation": [
      "find without repetition template type description in reference template types table"
    ],
    "template_feedback": "additionally use the information from the templates table and documents table besides the reference template types table .",
    "primary_span": [
      [
        0,
        10
      ]
    ],
    "secondary_span": [
      [
        11,
        17
      ]
    ],
    "edits": [
      "templates",
      "documents"
    ],
    "edits_original": "< from > add templates </ from > < from > add documents </ from >"
  },
  {
    "db_id": "car_1",
    "feedback": "Give me the total number of model list whose car maker is  American Motor Company.",
    "question": "What is the number of car models created by the car maker American Motor Company?",
    "gold_parse": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'",
    "beam": [
      [
        "SELECT Count ( * ) FROM car_makers WHERE Maker = value",
        -0.36098766326904297
      ],
      [
        "SELECT Count ( * ) FROM model_list WHERE Model = value",
        -1.5968189239501953
      ],
      [
        "SELECT Count ( * ) FROM car_makers WHERE FullName = value",
        -2.3539652824401855
      ],
      [
        "SELECT Count ( * ) FROM model_list WHERE Maker = value",
        -5.2738261222839355
      ],
      [
        "SELECT Count ( * ) FROM car_makers WHERE Country = value",
        -8.937047958374023
      ],
      [
        "SELECT Count ( * ) FROM car_names WHERE Model = value",
        -9.047014236450195
      ],
      [
        "SELECT Count ( * ) FROM countries WHERE CountryName = value",
        -9.410125732421875
      ],
      [
        "SELECT Count ( DISTINCT T2.Model ) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker WHERE T1.Maker = value",
        -11.637365341186523
      ],
      [
        "SELECT T2.Model FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker WHERE T1.Maker = value",
        -12.418935775756836
      ],
      [
        "SELECT Count ( * ) FROM cars_data WHERE Year = value",
        -13.297175407409668
      ],
      [
        "SELECT Count ( DISTINCT T2.Model ) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker WHERE T1.FullName = value",
        -13.59352445602417
      ],
      [
        "SELECT Count ( * ) FROM model_list WHERE Model LIKE value",
        -13.602699279785156
      ],
      [
        "SELECT Count ( * ) FROM cars_data WHERE Horsepower = value",
        -13.612292289733887
      ],
      [
        "SELECT Count ( * ) FROM car_names WHERE Make = value",
        -13.976397514343262
      ],
      [
        "SELECT T2.Model FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker WHERE T1.FullName = value",
        -14.150606155395508
      ],
      [
        "SELECT Count ( DISTINCT Model ) FROM model_list WHERE Model = value",
        -14.474307537078857
      ],
      [
        "SELECT Count ( * ) , T2.Model FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker WHERE T1.Maker = value",
        -14.497253656387329
      ],
      [
        "SELECT Count ( * ) FROM countries WHERE CountryId = value",
        -14.862794876098633
      ],
      [
        "SELECT Sum ( * ) FROM car_makers WHERE Maker = value",
        -14.919909119606018
      ],
      [
        "SELECT Count ( * ) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker WHERE T1.Maker = value AND T2.Maker = value",
        -15.658842325210571
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM car_makers WHERE Maker = \"American Motor Company\"",
    "predicted_parse": "SELECT Count ( * ) FROM car_makers WHERE Maker = value",
    "predicted_parse_explanation": [
      "find the number of rows in car makers table whose maker equals American Motor Company"
    ],
    "template_feedback": "additionally use the information from the model list table besides the car makers table . consider the full name equals American Motor Company conditions in place of the car makers 's maker equals American Motor Company conditions .",
    "primary_span": [
      [
        0,
        8
      ],
      [
        15,
        23
      ]
    ],
    "secondary_span": [
      [
        9,
        14
      ],
      [
        24,
        37
      ]
    ],
    "edits": [
      "model list",
      "full name equals \"American Motor Company\"",
      "maker equals \"American Motor Company\""
    ],
    "edits_original": "< from > add model list </ from > < where > add full name equals \" American Motor Company \" </ where > < where > remove maker equals \" American Motor Company \" </ where >"
  },
  {
    "db_id": "dog_kennels",
    "feedback": "In step 1 ensure owner has spend money for the treatments for his or her dog .",
    "question": "Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.",
    "gold_parse": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
    "beam": [
      [
        "SELECT owner_id , last_name FROM Owners GROUP BY owner_id ORDER BY Count ( * ) Desc LIMIT value",
        -0.002635955810546875
      ],
      [
        "SELECT owner_id , last_name FROM Owners GROUP BY owner_id ORDER BY Sum ( * ) Desc LIMIT value",
        -6.236084461212158
      ],
      [
        "SELECT T2.owner_id , T2.last_name FROM Charges AS T1 JOIN Owners AS T2 GROUP BY T2.owner_id ORDER BY Sum ( T1.charge_amount ) Desc LIMIT value",
        -7.831473350524902
      ],
      [
        "SELECT first_name , last_name FROM Owners GROUP BY owner_id ORDER BY Count ( * ) Desc LIMIT value",
        -8.701148986816406
      ],
      [
        "SELECT owner_id , last_name FROM Owners GROUP BY owner_id ORDER BY Count ( * ) Asc LIMIT value",
        -10.1455078125
      ],
      [
        "SELECT owner_id , last_name FROM Owners GROUP BY first_name ORDER BY Count ( * ) Desc LIMIT value",
        -10.720514297485352
      ],
      [
        "SELECT owner_id , last_name FROM Owners GROUP BY owner_id ORDER BY Sum ( last_name ) Desc LIMIT value",
        -11.91795825958252
      ],
      [
        "SELECT owner_id , last_name FROM Owners GROUP BY owner_id ORDER BY Count ( * ) Desc",
        -11.9209566116333
      ],
      [
        "SELECT T2.owner_id , T2.last_name FROM Charges AS T1 JOIN Owners AS T2 ORDER BY T1.charge_amount Desc LIMIT value",
        -11.93275237083435
      ],
      [
        "SELECT owner_id , last_name FROM Owners GROUP BY owner_id HAVING Count ( * ) < value ORDER BY Count ( * ) Desc LIMIT value",
        -12.413507461547852
      ],
      [
        "SELECT owner_id , last_name FROM Owners GROUP BY owner_id",
        -12.774439811706543
      ],
      [
        "SELECT owner_id , last_name FROM Owners GROUP BY owner_id HAVING Count ( * ) > = value ORDER BY Count ( * ) Desc LIMIT value",
        -12.93900978565216
      ],
      [
        "SELECT owner_id , last_name FROM Owners GROUP BY owner_id ORDER BY Avg ( * ) Desc LIMIT value",
        -13.066670417785645
      ],
      [
        "SELECT owner_id , last_name , last_name FROM Owners GROUP BY owner_id ORDER BY Count ( * ) Desc LIMIT value",
        -13.484919667243958
      ],
      [
        "SELECT DISTINCT owner_id , last_name FROM Owners GROUP BY owner_id ORDER BY Count ( * ) Desc LIMIT value",
        -13.566100120544434
      ],
      [
        "SELECT T3.professional_id , T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id GROUP BY T1.owner_id ORDER BY Count ( * ) Desc LIMIT value",
        -13.595155715942383
      ],
      [
        "SELECT owner_id FROM Owners GROUP BY owner_id ORDER BY Count ( * ) Desc LIMIT value",
        -13.88426685333252
      ],
      [
        "SELECT T2.owner_id , T2.last_name FROM Charges AS T1 JOIN Owners AS T2 GROUP BY T2.owner_id ORDER BY T1.charge_amount Desc LIMIT value",
        -13.93154764175415
      ],
      [
        "SELECT T1.owner_id , T3.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id GROUP BY T1.owner_id ORDER BY Count ( * ) Desc LIMIT value",
        -14.394598007202148
      ],
      [
        "SELECT owner_id , last_name FROM Owners ORDER BY * Desc LIMIT value",
        -15.129610300064087
      ]
    ],
    "predicted_parse_with_values": "SELECT owner_id , last_name FROM Owners GROUP BY owner_id ORDER BY Count ( * ) Desc LIMIT 1",
    "predicted_parse": "SELECT owner_id , last_name FROM Owners GROUP BY owner_id ORDER BY Count ( * ) Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of owner id in owners table",
      "Step 2: find the owner id and last name in owners table with largest value in the results of step 1"
    ],
    "template_feedback": "in step 1 , additionally use the information from the treatments table and dogs table besides the owners table .",
    "primary_span": [
      [
        4,
        14
      ]
    ],
    "secondary_span": [
      [
        15,
        19
      ]
    ],
    "edits": [
      "dogs",
      "treatments"
    ],
    "edits_original": "< from > add dogs </ from > < from > add treatments </ from >"
  },
  {
    "db_id": "world_1",
    "feedback": "you should check the continent is equivalent to asia.",
    "question": "Give the name of the country in Asia with the lowest life expectancy.",
    "gold_parse": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1",
    "beam": [
      [
        "SELECT Name FROM country ORDER BY LifeExpectancy Asc LIMIT value",
        -0.2004556655883789
      ],
      [
        "SELECT Name FROM country ORDER BY Population Asc LIMIT value",
        -2.429335594177246
      ],
      [
        "SELECT LocalName FROM country ORDER BY LifeExpectancy Asc LIMIT value",
        -2.5507936477661133
      ],
      [
        "SELECT LocalName FROM country ORDER BY Population Asc LIMIT value",
        -4.749067306518555
      ],
      [
        "SELECT Continent FROM country ORDER BY LifeExpectancy Asc LIMIT value",
        -5.398838996887207
      ],
      [
        "SELECT Name FROM country ORDER BY GNP Asc LIMIT value",
        -6.405946731567383
      ],
      [
        "SELECT Continent FROM country ORDER BY Population Asc LIMIT value",
        -7.646540641784668
      ],
      [
        "SELECT LocalName FROM country ORDER BY GNP Asc LIMIT value",
        -8.754417419433594
      ],
      [
        "SELECT Name , Continent FROM country ORDER BY LifeExpectancy Asc LIMIT value",
        -10.88553237915039
      ],
      [
        "SELECT Name FROM country ORDER BY GNPOld Asc LIMIT value",
        -11.484134674072266
      ],
      [
        "SELECT Continent FROM country ORDER BY GNP Asc LIMIT value",
        -11.685044288635254
      ],
      [
        "SELECT Name FROM country ORDER BY LifeExpectancy Asc",
        -12.821892738342285
      ],
      [
        "SELECT Name , Continent FROM country ORDER BY Population Asc LIMIT value",
        -13.08089828491211
      ],
      [
        "SELECT Name FROM country WHERE LifeExpectancy = ( SELECT Min ( LifeExpectancy ) FROM country )",
        -13.50635051727295
      ],
      [
        "SELECT Name FROM country WHERE LifeExpectancy = ( SELECT Min ( LifeExpectancy ) FROM country ) ORDER BY LifeExpectancy Asc LIMIT value",
        -13.653160095214844
      ],
      [
        "SELECT Name FROM country WHERE Population = ( SELECT Min ( LifeExpectancy ) FROM country ) ORDER BY LifeExpectancy Asc LIMIT value",
        -13.692178726196289
      ],
      [
        "SELECT LocalName FROM country ORDER BY GNPOld Asc LIMIT value",
        -13.863727569580078
      ],
      [
        "SELECT Name FROM country WHERE Population = ( SELECT Min ( LifeExpectancy ) FROM country )",
        -13.905994415283203
      ],
      [
        "SELECT Name FROM country",
        -15.101839065551758
      ],
      [
        "SELECT LocalName FROM country",
        -16.984399795532227
      ]
    ],
    "predicted_parse_with_values": "SELECT Name FROM country ORDER BY LifeExpectancy Asc LIMIT 1",
    "predicted_parse": "SELECT Name FROM country ORDER BY LifeExpectancy Asc LIMIT value",
    "predicted_parse_explanation": [
      "find the name in country table with smallest value of life expectancy"
    ],
    "template_feedback": "additionally make sure that continent equals Asia .",
    "primary_span": [
      [
        0,
        7
      ]
    ],
    "secondary_span": [],
    "edits": [
      "continent equals \"Asia\""
    ],
    "edits_original": "< where > add continent equals \" Asia \" </ where >"
  },
  {
    "db_id": "network_1",
    "feedback": "Find number of rows of student id in friend table for corresponding Highschooler's name equals Kyle .",
    "question": "Count the number of friends Kyle has.",
    "gold_parse": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
    "beam": [
      [
        "SELECT Count ( * ) FROM Highschooler",
        -0.4513397216796875
      ],
      [
        "SELECT Count ( * ) FROM Friend WHERE student_id = value",
        -1.9600245952606201
      ],
      [
        "SELECT Count ( * ) FROM Highschooler WHERE name = value",
        -1.9728960990905762
      ],
      [
        "SELECT Count ( * ) FROM Friend WHERE friend_id = value",
        -3.2903568744659424
      ],
      [
        "SELECT Count ( * ) FROM Likes WHERE liked_id = value",
        -3.434490203857422
      ],
      [
        "SELECT Count ( * ) FROM Highschooler WHERE grade = value",
        -4.500275135040283
      ],
      [
        "SELECT Count ( * ) FROM Likes WHERE student_id = value",
        -6.193698883056641
      ],
      [
        "SELECT Count ( DISTINCT friend_id ) FROM Friend",
        -8.001491069793701
      ],
      [
        "SELECT Count ( DISTINCT liked_id ) FROM Likes",
        -8.662900924682617
      ],
      [
        "SELECT Count ( DISTINCT T2.friend_id ) FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id WHERE T1.name = value",
        -10.332438945770264
      ],
      [
        "SELECT Count ( * ) FROM Highschooler WHERE ID = value",
        -10.380459785461426
      ],
      [
        "SELECT Count ( DISTINCT student_id ) FROM Likes",
        -10.5850248336792
      ],
      [
        "SELECT Count ( DISTINCT student_id ) FROM Friend",
        -10.64282512664795
      ],
      [
        "SELECT Count ( DISTINCT T2.liked_id ) FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id WHERE T1.name = value",
        -11.002968072891235
      ],
      [
        "SELECT Count ( DISTINCT friend_id ) FROM Friend WHERE student_id = value",
        -12.09766674041748
      ],
      [
        "SELECT Count ( DISTINCT T3.liked_id ) FROM Highschooler AS T1 JOIN Friend AS T2 ON T2.student_id = T1.ID JOIN Likes AS T3 ON T1.ID = T3.liked_id WHERE T2.student_id = value",
        -12.37129294872284
      ],
      [
        "SELECT Count ( * ) FROM Highschooler EXCEPT SELECT * FROM Highschooler WHERE name = value",
        -13.69478853046894
      ],
      [
        "SELECT Sum ( * ) FROM Highschooler",
        -14.418223023414612
      ],
      [
        "SELECT Count ( DISTINCT name ) FROM Highschooler",
        -14.628194808959961
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM Highschooler",
        -15.229860305786133
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM Highschooler",
    "predicted_parse": "SELECT Count ( * ) FROM Highschooler",
    "predicted_parse_explanation": [
      "find the number of rows in high schooler table"
    ],
    "template_feedback": "additionally use the information from the friend table besides the high schooler table . additionally make sure that name equals Kyle .",
    "primary_span": [
      [
        0,
        7
      ],
      [
        14,
        21
      ]
    ],
    "secondary_span": [
      [
        8,
        13
      ]
    ],
    "edits": [
      "friend",
      "name equals \"Kyle\""
    ],
    "edits_original": "< from > add friend </ from > < where > add name equals \" Kyle \" </ where >"
  },
  {
    "db_id": "wta_1",
    "feedback": "Be sure that players left handed .",
    "question": "What are the full names of all left handed players, in order of birth date?",
    "gold_parse": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date",
    "beam": [
      [
        "SELECT first_name , last_name FROM players ORDER BY birth_date Asc",
        -6.4849853515625e-05
      ],
      [
        "SELECT T1.first_name , T1.last_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.loser_age Asc",
        -10.659509658813477
      ],
      [
        "SELECT hand , last_name FROM players ORDER BY birth_date Asc",
        -11.599944114685059
      ],
      [
        "SELECT DISTINCT first_name , last_name FROM players ORDER BY birth_date Asc",
        -12.228026390075684
      ],
      [
        "SELECT first_name , last_name FROM players WHERE hand = value ORDER BY birth_date Asc",
        -12.629989624023438
      ],
      [
        "SELECT first_name , last_name FROM players ORDER BY first_name Asc",
        -12.640830993652344
      ],
      [
        "SELECT first_name , last_name , hand FROM players ORDER BY birth_date Asc",
        -12.649824619293213
      ],
      [
        "SELECT first_name , last_name FROM players ORDER BY birth_date Asc LIMIT value",
        -12.909735679626465
      ],
      [
        "SELECT first_name FROM players ORDER BY birth_date Asc",
        -13.436274528503418
      ],
      [
        "SELECT first_name , last_name FROM players UNION SELECT first_name FROM players",
        -13.526970863342285
      ],
      [
        "SELECT first_name , last_name FROM players ORDER BY birth_date Desc",
        -13.571749687194824
      ],
      [
        "SELECT first_name , last_name FROM players UNION SELECT birth_date FROM players",
        -13.751123428344727
      ],
      [
        "SELECT first_name , last_name , birth_date FROM players ORDER BY birth_date Asc",
        -14.047441959381104
      ],
      [
        "SELECT first_name , last_name FROM players GROUP BY first_name ORDER BY birth_date Asc",
        -14.161409378051758
      ],
      [
        "SELECT first_name , last_name FROM players",
        -14.320578575134277
      ],
      [
        "SELECT first_name , last_name FROM players WHERE hand = value",
        -14.35102367401123
      ],
      [
        "SELECT first_name , last_name FROM players UNION SELECT hand FROM players",
        -14.85433053970337
      ],
      [
        "SELECT T1.first_name , T1.last_name FROM players AS T1 UNION SELECT T2.loser_age FROM matches AS T2",
        -14.890966415405273
      ],
      [
        "SELECT birth_date , first_name FROM players ORDER BY birth_date Asc",
        -15.560308456420898
      ],
      [
        "SELECT first_name , last_name FROM players GROUP BY birth_date ORDER BY birth_date Asc",
        -15.603163719177246
      ]
    ],
    "predicted_parse_with_values": "SELECT first_name , last_name FROM players ORDER BY birth_date Asc",
    "predicted_parse": "SELECT first_name , last_name FROM players ORDER BY birth_date Asc",
    "predicted_parse_explanation": [
      "find the first name and last name in players table ordered ascending by birth date"
    ],
    "template_feedback": "additionally make sure that hand equals L .",
    "primary_span": [
      [
        0,
        6
      ]
    ],
    "secondary_span": [],
    "edits": [
      "hand equals \"L\""
    ],
    "edits_original": "< where > add hand equals \" L \" </ where >"
  },
  {
    "db_id": "dog_kennels",
    "feedback": "Replace smallest value with largest value of date.",
    "question": "How much does the most recent treatment cost?",
    "gold_parse": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
    "beam": [
      [
        "SELECT * FROM Treatments ORDER BY date_of_treatment Asc LIMIT value",
        -1.6403772830963135
      ],
      [
        "SELECT * FROM Dogs ORDER BY age Asc LIMIT value",
        -1.7759249210357666
      ],
      [
        "SELECT T1.treatment_type_code FROM Treatment_Types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code ORDER BY T2.date_of_treatment Asc LIMIT value",
        -1.8714646100997925
      ],
      [
        "SELECT T1.treatment_type_code FROM Treatment_Types AS T1 JOIN Dogs AS T2 JOIN Treatments AS T3 ON T1.treatment_type_code = T3.treatment_type_code AND T3.dog_id = T2.dog_id ORDER BY T2.age Asc LIMIT value",
        -1.9759634733200073
      ],
      [
        "SELECT T1.treatment_type_description FROM Treatment_Types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code ORDER BY T2.date_of_treatment Asc LIMIT value",
        -2.39492130279541
      ],
      [
        "SELECT T1.treatment_type_description FROM Treatment_Types AS T1 JOIN Dogs AS T2 JOIN Treatments AS T3 ON T1.treatment_type_code = T3.treatment_type_code AND T3.dog_id = T2.dog_id ORDER BY T2.age Asc LIMIT value",
        -2.5470266342163086
      ],
      [
        "SELECT date_of_treatment FROM Treatments ORDER BY date_of_treatment Asc LIMIT value",
        -3.581828474998474
      ],
      [
        "SELECT T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id ORDER BY T1.age Asc LIMIT value",
        -3.7633591890335083
      ],
      [
        "SELECT * FROM Dogs ORDER BY date_of_birth Asc LIMIT value",
        -4.571131706237793
      ],
      [
        "SELECT T1.date_of_birth FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id ORDER BY T2.date_of_treatment Asc LIMIT value",
        -4.744118332862854
      ],
      [
        "SELECT T1.age FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id ORDER BY T2.date_of_treatment Asc LIMIT value",
        -4.754308462142944
      ],
      [
        "SELECT T1.treatment_type_code FROM Treatment_Types AS T1 JOIN Dogs AS T2 JOIN Treatments AS T3 ON T1.treatment_type_code = T3.treatment_type_code AND T3.dog_id = T2.dog_id ORDER BY T2.date_of_birth Asc LIMIT value",
        -4.790289282798767
      ],
      [
        "SELECT date_of_birth FROM Dogs ORDER BY age Asc LIMIT value",
        -4.943148612976074
      ],
      [
        "SELECT age FROM Dogs ORDER BY age Asc LIMIT value",
        -4.950425386428833
      ],
      [
        "SELECT T1.date_adopted FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id ORDER BY T2.date_of_treatment Asc LIMIT value",
        -4.961878299713135
      ],
      [
        "SELECT date_adopted FROM Dogs ORDER BY age Asc LIMIT value",
        -5.141512155532837
      ],
      [
        "SELECT treatment_type_code FROM Treatments ORDER BY date_of_treatment Asc LIMIT value",
        -5.158385515213013
      ],
      [
        "SELECT T2.treatment_type_code FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id ORDER BY T1.age Asc LIMIT value",
        -5.296520709991455
      ],
      [
        "SELECT Max ( age ) FROM Dogs",
        -6.211440026760101
      ],
      [
        "SELECT Max ( date_of_treatment ) FROM Treatments",
        -7.038721323013306
      ]
    ],
    "predicted_parse_with_values": "SELECT * FROM Treatments ORDER BY date_of_treatment Asc LIMIT 1",
    "predicted_parse": "SELECT * FROM Treatments ORDER BY date_of_treatment Asc LIMIT value",
    "predicted_parse_explanation": [
      "find the rows in treatments table with smallest value of date of treatment"
    ],
    "template_feedback": "find cost of treatment in place of rows . use the largest in place of smallest .",
    "primary_span": [
      [
        0,
        3
      ],
      [
        9,
        11
      ]
    ],
    "secondary_span": [
      [
        4,
        8
      ],
      [
        12,
        16
      ]
    ],
    "edits": [
      "cost of treatment",
      "rows",
      "descending"
    ],
    "edits_original": "< select > add cost of treatment </ select > < select > remove rows </ select > < orderBy > add descending </ orderBy >"
  },
  {
    "db_id": "tvshow",
    "feedback": "Display production code , channel of cartoon table for which original air date is lowest .",
    "question": "Find the production code and channel of the most recently aired cartoon.",
    "gold_parse": "SELECT production_code ,  channel FROM cartoon ORDER BY original_air_date LIMIT 1",
    "beam": [
      [
        "SELECT Production_code , Channel FROM Cartoon GROUP BY Channel ORDER BY Count ( * ) Desc LIMIT value",
        -0.3112983703613281
      ],
      [
        "SELECT T3.Production_code , T3.Channel FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T2.Channel = T1.id JOIN Cartoon AS T3 ON T1.id = T3.Channel GROUP BY T2.Channel ORDER BY Count ( * ) Desc LIMIT value",
        -1.6370563507080078
      ],
      [
        "SELECT T2.Production_code , T2.Channel FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel GROUP BY T1.Content ORDER BY Count ( * ) Desc LIMIT value",
        -3.2017030715942383
      ],
      [
        "SELECT T3.Production_code , T3.Channel FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T2.Channel = T1.id JOIN Cartoon AS T3 ON T1.id = T3.Channel GROUP BY T2.Episode ORDER BY Count ( * ) Desc LIMIT value",
        -4.160159587860107
      ],
      [
        "SELECT T2.Production_code , T2.Channel FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel GROUP BY T1.id ORDER BY Count ( * ) Desc LIMIT value",
        -4.948246479034424
      ],
      [
        "SELECT T2.Production_code , T2.Channel FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel GROUP BY T1.series_name ORDER BY Count ( * ) Desc LIMIT value",
        -5.177906513214111
      ],
      [
        "SELECT T3.Production_code , T2.Channel FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T2.Channel = T1.id JOIN Cartoon AS T3 ON T1.id = T3.Channel GROUP BY T3.Channel ORDER BY Count ( * ) Desc LIMIT value",
        -6.662543296813965
      ],
      [
        "SELECT T2.Production_code , T2.Channel FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel GROUP BY T1.Language ORDER BY Count ( * ) Desc LIMIT value",
        -6.939703941345215
      ],
      [
        "SELECT T2.Production_code , T2.Channel FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel GROUP BY T1.Country ORDER BY Count ( * ) Desc LIMIT value",
        -7.385705471038818
      ],
      [
        "SELECT T3.Production_code , T2.Channel FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T2.Channel = T1.id JOIN Cartoon AS T3 ON T1.id = T3.Channel GROUP BY T2.Channel ORDER BY Count ( * ) Desc LIMIT value",
        -8.044073104858398
      ],
      [
        "SELECT T3.Production_code , T3.Channel FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T2.Channel = T1.id JOIN Cartoon AS T3 ON T1.id = T3.Channel GROUP BY T2.Rating ORDER BY Count ( * ) Desc LIMIT value",
        -8.454026222229004
      ],
      [
        "SELECT T2.Production_code , T2.Channel FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel GROUP BY T1.Package_Option ORDER BY Count ( * ) Desc LIMIT value",
        -8.63425350189209
      ],
      [
        "SELECT T2.Production_code , T2.Channel FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel GROUP BY T1.Hight_definition_TV ORDER BY Count ( * ) Desc LIMIT value",
        -9.600149154663086
      ],
      [
        "SELECT T3.Production_code , T2.Channel FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel JOIN Cartoon AS T3 ON T1.id = T3.Channel GROUP BY T1.Content ORDER BY Count ( * ) Desc LIMIT value",
        -9.631020545959473
      ],
      [
        "SELECT Production_code , Channel FROM Cartoon GROUP BY Title ORDER BY Count ( * ) Desc LIMIT value",
        -9.828700065612793
      ],
      [
        "SELECT T3.Production_code , T2.Channel FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T2.Channel = T1.id JOIN Cartoon AS T3 ON T1.id = T3.Channel GROUP BY T2.Episode ORDER BY Count ( * ) Desc LIMIT value",
        -10.560590744018555
      ],
      [
        "SELECT T1.Content , T2.Channel FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel GROUP BY T2.Channel ORDER BY Count ( * ) Desc LIMIT value",
        -11.050413131713867
      ],
      [
        "SELECT T2.Production_code , T2.Channel FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel GROUP BY T1.Pixel_aspect_ratio_PAR ORDER BY Count ( * ) Desc LIMIT value",
        -11.179311752319336
      ],
      [
        "SELECT T3.Production_code , T2.Channel FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel JOIN Cartoon AS T3 ON T1.id = T3.Channel GROUP BY T1.id ORDER BY Count ( * ) Desc LIMIT value",
        -11.300326824188232
      ],
      [
        "SELECT T2.Production_code , T1.Content FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel GROUP BY T2.Channel ORDER BY Count ( * ) Desc LIMIT value",
        -11.368624687194824
      ]
    ],
    "predicted_parse_with_values": "SELECT Production_code , Channel FROM Cartoon GROUP BY Channel ORDER BY Count ( * ) Desc LIMIT 1",
    "predicted_parse": "SELECT Production_code , Channel FROM Cartoon GROUP BY Channel ORDER BY Count ( * ) Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of channel in cartoon table",
      "Step 2: find the production code and channel in cartoon table with largest value in the results of step 1"
    ],
    "template_feedback": "in step 1 , do not find for each value of channel . in step 2 , order the results ascending by original air date in place of ordering descending by number of rows .",
    "primary_span": [
      [
        4,
        12
      ],
      [
        17,
        24
      ]
    ],
    "secondary_span": [
      [
        25,
        34
      ]
    ],
    "edits": [
      "channel",
      "original air date",
      "number of rows",
      "descending"
    ],
    "edits_original": "< groupBy > remove channel </ groupBy > < orderBy > add original air date </ orderBy > < orderBy > remove number of rows </ orderBy > < orderBy > remove descending </ orderBy >"
  },
  {
    "db_id": "world_1",
    "feedback": "Supersede continent with name name , local name with countrylanguage's language , population with life expectancy , ensure countrylanguage's is official equals T in step 1",
    "question": "What is average life expectancy in the countries where English is not the official language?",
    "gold_parse": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")",
    "beam": [
      [
        "SELECT Avg ( Population ) FROM country WHERE Continent NOT IN ( SELECT Continent FROM country WHERE LocalName = value )",
        -1.6513862609863281
      ],
      [
        "SELECT Avg ( LifeExpectancy ) FROM country WHERE Continent NOT IN ( SELECT Continent FROM country WHERE LocalName = value )",
        -1.8078179359436035
      ],
      [
        "SELECT Avg ( LifeExpectancy ) FROM country WHERE LocalName ! = value",
        -1.9125480651855469
      ],
      [
        "SELECT Avg ( Population ) FROM country WHERE LocalName ! = value",
        -2.1170244216918945
      ],
      [
        "SELECT Avg ( GNPOld ) FROM country WHERE Continent NOT IN ( SELECT Continent FROM country WHERE LocalName = value )",
        -2.7021965980529785
      ],
      [
        "SELECT Avg ( GNPOld ) FROM country WHERE LocalName ! = value",
        -3.0286245346069336
      ],
      [
        "SELECT Avg ( LifeExpectancy ) FROM country WHERE Name ! = value",
        -3.514617919921875
      ],
      [
        "SELECT Avg ( Population ) FROM country WHERE Name ! = value",
        -3.5885400772094727
      ],
      [
        "SELECT Avg ( Population ) FROM country WHERE Continent NOT IN ( SELECT Code2 FROM country WHERE LocalName = value )",
        -3.675398349761963
      ],
      [
        "SELECT Avg ( LifeExpectancy ) FROM country WHERE Continent NOT IN ( SELECT Code2 FROM country WHERE LocalName = value )",
        -3.79581618309021
      ],
      [
        "SELECT Avg ( Population ) FROM country WHERE Continent ! = ( SELECT Continent FROM country WHERE LocalName = value )",
        -3.978105068206787
      ],
      [
        "SELECT Avg ( LifeExpectancy ) FROM country WHERE Continent ! = ( SELECT Continent FROM country WHERE LocalName = value )",
        -3.9987354278564453
      ],
      [
        "SELECT Avg ( GNPOld ) FROM country WHERE Name ! = value",
        -4.5730743408203125
      ],
      [
        "SELECT Avg ( Population ) FROM country WHERE Continent ! = value",
        -7.148479461669922
      ],
      [
        "SELECT Avg ( LifeExpectancy ) FROM country WHERE Code2 ! = value",
        -7.371204376220703
      ],
      [
        "SELECT Avg ( Population ) FROM country WHERE Code2 ! = value",
        -7.559771537780762
      ],
      [
        "SELECT Avg ( LifeExpectancy ) FROM country WHERE Continent ! = value",
        -7.72325325012207
      ],
      [
        "SELECT Avg ( T1.LifeExpectancy ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language ! = value",
        -7.921153545379639
      ],
      [
        "SELECT Avg ( T1.Population ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language ! = value",
        -8.15053129196167
      ],
      [
        "SELECT Avg ( GNPOld ) FROM country WHERE Code2 ! = value",
        -8.477979183197021
      ]
    ],
    "predicted_parse_with_values": "SELECT Avg ( Population ) FROM country WHERE Continent NOT IN ( SELECT Continent FROM country WHERE LocalName = \"English\" )",
    "predicted_parse": "SELECT Avg ( Population ) FROM country WHERE Continent NOT IN ( SELECT Continent FROM country WHERE LocalName = value )",
    "predicted_parse_explanation": [
      "Step 1: find the continent in country table whose local name equals English",
      "Step 2: find the average population in country table whose continent not one of the results of step 1"
    ],
    "template_feedback": "in step 1 , additionally use the information from the countrylanguage table besides the country table . consider the language equals English and is official equals T conditions in place of the local name equals English conditions . find name in place of continent . in step 2 , make sure the name is not one of the results of step 1 the continent is not one of the results of step 1 . find average life expectancy in place of average population .",
    "primary_span": [
      [
        4,
        11
      ],
      [
        17,
        27
      ],
      [
        38,
        39
      ],
      [
        49,
        61
      ],
      [
        74,
        77
      ]
    ],
    "secondary_span": [
      [
        12,
        16
      ],
      [
        28,
        37
      ],
      [
        40,
        44
      ],
      [
        62,
        73
      ],
      [
        78,
        83
      ]
    ],
    "edits": [
      "average life expectancy",
      "average population",
      "name not one of SUBS1",
      "continent not one of SUBS1",
      "name",
      "continent",
      "countrylanguage",
      "language equals \"English\"",
      "is official equals \"T\"",
      "local name equals \"English\""
    ],
    "edits_original": "< select > add average life expectancy </ select > < select > remove average population </ select > < where > add name not one of SUBS1 </ where > < where > remove continent not one of SUBS1 </ where > < select > add name </ select > < select > remove continent </ select > < from > add countrylanguage </ from > < where > add language equals \" English \" </ where > < where > add is official equals \" T \" </ where > < where > remove local name equals \" English \" </ where >"
  },
  {
    "db_id": "student_transcripts_tracking",
    "feedback": "Need to use other student details in place of date left .",
    "question": "List all the student details in reversed lexicographical order.",
    "gold_parse": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC",
    "beam": [
      [
        "SELECT * FROM Students ORDER BY date_left Desc",
        -1.4966999292373657
      ],
      [
        "SELECT * FROM Students ORDER BY first_name Desc",
        -1.5683714151382446
      ],
      [
        "SELECT * FROM Students ORDER BY ssn Desc",
        -1.9569605588912964
      ],
      [
        "SELECT * FROM Student_Enrolment ORDER BY other_details Desc",
        -1.9836393594741821
      ],
      [
        "SELECT * FROM Students ORDER BY date_first_registered Desc",
        -2.245650291442871
      ],
      [
        "SELECT * FROM Students ORDER BY other_student_details Desc",
        -3.815732002258301
      ],
      [
        "SELECT * FROM Students ORDER BY email_address Desc",
        -3.944885730743408
      ],
      [
        "SELECT * FROM Students ORDER BY last_name Desc",
        -4.023731231689453
      ],
      [
        "SELECT * FROM Student_Enrolment ORDER BY student_id Desc",
        -4.369917869567871
      ],
      [
        "SELECT * FROM Student_Enrolment ORDER BY other_details Asc",
        -4.649261832237244
      ],
      [
        "SELECT * FROM Transcripts ORDER BY transcript_date Desc",
        -4.661488056182861
      ],
      [
        "SELECT * FROM Students ORDER BY middle_name Desc",
        -4.7104644775390625
      ],
      [
        "SELECT * FROM Students ORDER BY first_name Asc",
        -4.957037806510925
      ],
      [
        "SELECT * FROM Semesters ORDER BY other_details Desc",
        -5.0919060707092285
      ],
      [
        "SELECT * FROM Student_Enrolment ORDER BY student_enrolment_id Desc",
        -5.203488349914551
      ],
      [
        "SELECT * FROM Students ORDER BY date_left Asc",
        -5.344687819480896
      ],
      [
        "SELECT * FROM Students ORDER BY student_id Desc",
        -5.394789695739746
      ],
      [
        "SELECT * FROM Semesters ORDER BY semester_name Desc",
        -5.556459426879883
      ],
      [
        "SELECT * FROM Addresses ORDER BY * Desc",
        -5.5914692878723145
      ],
      [
        "SELECT * FROM Semesters ORDER BY semester_description Desc",
        -5.612504482269287
      ]
    ],
    "predicted_parse_with_values": "SELECT * FROM Students ORDER BY date_left Desc",
    "predicted_parse": "SELECT * FROM Students ORDER BY date_left Desc",
    "predicted_parse_explanation": [
      "find the rows in students table ordered descending by date left"
    ],
    "template_feedback": "find other student details in place of rows . order the results by other student details in place of date left .",
    "primary_span": [
      [
        0,
        3
      ],
      [
        9,
        15
      ]
    ],
    "secondary_span": [
      [
        4,
        8
      ],
      [
        16,
        21
      ]
    ],
    "edits": [
      "other student details",
      "rows",
      "other student details",
      "date left"
    ],
    "edits_original": "< select > add other student details </ select > < select > remove rows </ select > < orderBy > add other student details </ orderBy > < orderBy > remove date left </ orderBy >"
  },
  {
    "db_id": "tvshow",
    "feedback": "Skip \" and directed by as Ben Jones \".",
    "question": "which countries' tv channels are playing some cartoon written by Todd Casey?",
    "gold_parse": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
    "beam": [
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value AND T2.Directed_by = value",
        -0.03849601745605469
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value AND T1.Language = value",
        -4.075222969055176
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel JOIN Cartoon AS T3 ON T1.id = T3.Channel WHERE T3.Written_by = value AND T2.Episode = value",
        -4.502114295959473
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value AND T1.series_name = value",
        -5.775187015533447
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value AND T1.Content = value",
        -5.807987213134766
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value AND T2.Written_by = value",
        -5.9062323570251465
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = value AND T2.Directed_by = value",
        -7.434439659118652
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value AND T2.Title = value",
        -9.10315990447998
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel JOIN Cartoon AS T3 ON T1.id = T3.Channel WHERE T3.Written_by = value AND T2.Rating = value",
        -10.161921501159668
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value",
        -10.896730422973633
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value AND T1.Pay_per_view_PPV = value",
        -10.960190773010254
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = value AND T1.Language = value",
        -11.157313346862793
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel JOIN Cartoon AS T3 ON T1.id = T3.Channel WHERE T3.Directed_by = value AND T2.Episode = value",
        -11.561657905578613
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel JOIN Cartoon AS T3 ON T1.id = T3.Channel WHERE T2.Episode = value AND T3.Directed_by = value",
        -11.624917030334473
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = value AND T2.Directed_by = value",
        -11.65920352935791
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value AND T1.Hight_definition_TV = value",
        -11.824271202087402
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.Language = value AND T2.Directed_by = value",
        -11.890969276428223
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = value AND T1.Content = value",
        -12.76926326751709
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = value",
        -13.685709953308105
      ],
      [
        "SELECT Country FROM TV_Channel",
        -17.306663513183594
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = \"Todd Casey\" AND T2.Directed_by = \"Ben Jones\"",
    "predicted_parse": "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value AND T2.Directed_by = value",
    "predicted_parse_explanation": [
      "Step 1: for each row in tv channel table , find the corresponding rows in cartoon table",
      "Step 2: find the country of the results of step 1 whose written by equals Todd Casey and directed by equals Ben Jones"
    ],
    "template_feedback": "in step 2 , remove the directed by equals Ben Jones conditions .",
    "primary_span": [
      [
        4,
        12
      ]
    ],
    "secondary_span": [],
    "edits": [
      "directed by equals \"Ben Jones\""
    ],
    "edits_original": "< where > remove directed by equals \" Ben Jones \" </ where >"
  },
  {
    "db_id": "wta_1",
    "feedback": "In step 2 and step 3 you need to have tourney name and make sure player id and winner id are equivalent.",
    "question": "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?",
    "gold_parse": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'",
    "beam": [
      [
        "SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = value INTERSECT SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = value",
        -0.7398357391357422
      ],
      [
        "SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = value INTERSECT SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.winner_ioc = value",
        -1.4040651321411133
      ],
      [
        "SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.winner_ioc = value INTERSECT SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = value",
        -1.733285903930664
      ],
      [
        "SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.winner_ioc = value INTERSECT SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.winner_ioc = value",
        -2.393037796020508
      ],
      [
        "SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = value INTERSECT SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.winner_entry = value",
        -5.543576240539551
      ],
      [
        "SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.winner_entry = value INTERSECT SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = value",
        -6.038583755493164
      ],
      [
        "SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.winner_ioc = value INTERSECT SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.winner_entry = value",
        -6.538250923156738
      ],
      [
        "SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.winner_entry = value INTERSECT SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.winner_ioc = value",
        -6.687217712402344
      ],
      [
        "SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.winner_entry = value INTERSECT SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.winner_entry = value",
        -10.844412803649902
      ],
      [
        "SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = value INTERSECT SELECT T1.country_code , T2.loser_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = value",
        -11.31354808807373
      ],
      [
        "SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = value INTERSECT SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN rankings AS T3 ON T1.player_id = T3.player_id WHERE T3.tours = value",
        -11.367794036865234
      ],
      [
        "SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = value INTERSECT SELECT T1.country_code , T2.loser_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.winner_ioc = value",
        -12.122929573059082
      ],
      [
        "SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.winner_ioc = value INTERSECT SELECT T1.country_code , T2.loser_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = value",
        -12.301114082336426
      ],
      [
        "SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.winner_name = value INTERSECT SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = value",
        -12.333696365356445
      ],
      [
        "SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.winner_ioc = value INTERSECT SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN rankings AS T3 ON T1.player_id = T3.player_id WHERE T3.tours = value",
        -12.358535766601562
      ],
      [
        "SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = value INTERSECT SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.tourney_level = value",
        -12.409820556640625
      ],
      [
        "SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = value INTERSECT SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.winner_name = value",
        -12.520490646362305
      ],
      [
        "SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = value INTERSECT SELECT T1.country_code , T1.first_name FROM players AS T1",
        -12.602743148803711
      ],
      [
        "SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = value",
        -13.879695892333984
      ],
      [
        "SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.winner_ioc = value",
        -14.852166175842285
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = \"WTA Championships\" INTERSECT SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = \"Australian Open\"",
    "predicted_parse": "SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = value INTERSECT SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = value",
    "predicted_parse_explanation": [
      "Step 1: for each row in players table , find the corresponding rows in matches table",
      "Step 2: find the country code and first name of the results of step 1 whose loser ioc equals WTA Championships",
      "Step 3: for each row in players table , find the corresponding rows in matches table",
      "Step 4: find the country code and first name of the results of step 3 whose loser ioc equals Australian Open",
      "Step 5: show the rows that are in both the results of step 2 and step 4"
    ],
    "template_feedback": "in step 2 , consider the tourney name equals WTA Championships conditions in place of the loser ioc equals WTA Championships conditions . in step 4 , consider the tourney name equals Australian Open conditions in place of the loser ioc equals Australian Open conditions .",
    "primary_span": [
      [
        4,
        11
      ],
      [
        27,
        34
      ]
    ],
    "secondary_span": [
      [
        12,
        22
      ],
      [
        35,
        45
      ]
    ],
    "edits": [
      "tourney name equals \"WTA Championships\"",
      "loser ioc equals \"WTA Championships\"",
      "tourney name equals \"Australian Open\"",
      "loser ioc equals \"Australian Open\""
    ],
    "edits_original": "< where > add tourney name equals \" WTA Championships \" </ where > < where > remove loser ioc equals \" WTA Championships \" </ where > < where > add tourney name equals \" Australian Open \" </ where > < where > remove loser ioc equals \" Australian Open \" </ where >"
  },
  {
    "db_id": "concert_singer",
    "feedback": "In step 1 just take average , no need to find average average .",
    "question": "What is the name and capacity for the stadium with highest average attendance?",
    "gold_parse": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1",
    "beam": [
      [
        "SELECT Name , Capacity FROM stadium GROUP BY Stadium_ID ORDER BY Avg ( Average ) Desc LIMIT value",
        -0.2044229507446289
      ],
      [
        "SELECT T1.Name , T1.Capacity FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID GROUP BY T2.Stadium_ID ORDER BY Avg ( T1.Average ) Desc LIMIT value",
        -2.1573219299316406
      ],
      [
        "SELECT Name , Capacity FROM stadium GROUP BY Stadium_ID ORDER BY Avg ( Highest ) Desc LIMIT value",
        -2.8825340270996094
      ],
      [
        "SELECT T1.Name , T1.Capacity FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID GROUP BY T2.Stadium_ID ORDER BY Avg ( T1.Highest ) Desc LIMIT value",
        -4.861615180969238
      ],
      [
        "SELECT Name , Capacity FROM stadium GROUP BY Stadium_ID ORDER BY Avg ( Capacity ) Desc LIMIT value",
        -5.554010391235352
      ],
      [
        "SELECT T1.Name , T1.Capacity FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID GROUP BY T2.Stadium_ID ORDER BY Avg ( T1.Capacity ) Desc LIMIT value",
        -7.223711967468262
      ],
      [
        "SELECT Name , Capacity FROM stadium GROUP BY Stadium_ID ORDER BY Count ( * ) Desc LIMIT value",
        -7.408534049987793
      ],
      [
        "SELECT T1.Name , T1.Capacity FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID GROUP BY T2.Stadium_ID ORDER BY Count ( * ) Desc LIMIT value",
        -9.463865280151367
      ],
      [
        "SELECT Name , Capacity FROM stadium ORDER BY Highest Desc LIMIT value",
        -9.768317222595215
      ],
      [
        "SELECT Name , Capacity FROM stadium ORDER BY Average Desc LIMIT value",
        -9.965110778808594
      ],
      [
        "SELECT Name , Capacity FROM stadium GROUP BY Stadium_ID ORDER BY Sum ( Average ) Desc LIMIT value",
        -10.398198127746582
      ],
      [
        "SELECT Name , Capacity FROM stadium GROUP BY Capacity ORDER BY Avg ( Average ) Desc LIMIT value",
        -10.531989097595215
      ],
      [
        "SELECT Name , Capacity FROM stadium GROUP BY Stadium_ID ORDER BY Avg ( Average ) Desc",
        -11.984867095947266
      ],
      [
        "SELECT Name , Capacity FROM stadium GROUP BY Stadium_ID ORDER BY Sum ( Highest ) Desc LIMIT value",
        -12.287057876586914
      ],
      [
        "SELECT T1.Name , T1.Capacity FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID GROUP BY T2.Stadium_ID ORDER BY Sum ( T1.Average ) Desc LIMIT value",
        -12.424752235412598
      ],
      [
        "SELECT Name , Capacity FROM stadium GROUP BY Stadium_ID ORDER BY Avg ( Average ) Asc LIMIT value",
        -12.571626663208008
      ],
      [
        "SELECT Name , Capacity , Highest FROM stadium GROUP BY Stadium_ID ORDER BY Avg ( Average ) Desc LIMIT value",
        -12.863729476928711
      ],
      [
        "SELECT Name , Capacity FROM stadium GROUP BY Stadium_ID",
        -13.055825233459473
      ],
      [
        "SELECT Name FROM stadium GROUP BY Stadium_ID ORDER BY Avg ( Average ) Desc LIMIT value",
        -13.530491828918457
      ],
      [
        "SELECT Name , Capacity FROM stadium",
        -16.034021377563477
      ]
    ],
    "predicted_parse_with_values": "SELECT Name , Capacity FROM stadium GROUP BY Stadium_ID ORDER BY Avg ( Average ) Desc LIMIT 1",
    "predicted_parse": "SELECT Name , Capacity FROM stadium GROUP BY Stadium_ID ORDER BY Avg ( Average ) Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: find the average average of each value of stadium id in stadium table",
      "Step 2: find the name and capacity in stadium table with largest value in the results of step 1"
    ],
    "template_feedback": "in step 1 , do not find for each value of stadium id . in step 2 , order the results by average in place of average average .",
    "primary_span": [
      [
        4,
        13
      ],
      [
        18,
        22
      ]
    ],
    "secondary_span": [
      [
        23,
        28
      ]
    ],
    "edits": [
      "stadium id",
      "average",
      "average average"
    ],
    "edits_original": "< groupBy > remove stadium id </ groupBy > < orderBy > add average </ orderBy > < orderBy > remove average average </ orderBy >"
  },
  {
    "db_id": "dog_kennels",
    "feedback": "We need to use treatments table instead of professionals table in step 2.",
    "question": "Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments.",
    "gold_parse": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2",
    "beam": [
      [
        "SELECT professional_id , last_name , cell_number FROM Professionals WHERE state = value UNION SELECT professional_id , last_name , cell_number FROM Professionals GROUP BY professional_id HAVING Count ( * ) > value",
        -3.2466955184936523
      ],
      [
        "SELECT T3.professional_id , T1.last_name , T3.cell_number FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id WHERE T3.state = value UNION SELECT T3.professional_id , T3.last_name , T3.cell_number FROM Professionals AS T3 GROUP BY T3.professional_id HAVING Count ( * ) > value",
        -3.500727653503418
      ],
      [
        "SELECT T1.professional_id , T1.last_name , T1.cell_number FROM Professionals AS T1 WHERE T1.state = value UNION SELECT T1.professional_id , T2.last_name , T1.cell_number FROM Owners AS T2 JOIN Dogs AS T3 ON T2.owner_id = T3.owner_id JOIN Professionals AS T1 JOIN Treatments AS T4 ON T3.dog_id = T4.dog_id AND T4.professional_id = T1.professional_id GROUP BY T1.professional_id HAVING Count ( * ) > value",
        -3.6357460021972656
      ],
      [
        "SELECT professional_id , last_name , cell_number FROM Professionals WHERE state = value UNION SELECT professional_id , last_name , cell_number FROM Professionals GROUP BY professional_id HAVING Count ( * ) > = value",
        -3.749295234680176
      ],
      [
        "SELECT professional_id , last_name , home_phone FROM Professionals WHERE state = value UNION SELECT professional_id , last_name , cell_number FROM Professionals GROUP BY professional_id HAVING Count ( * ) > value",
        -3.769460678100586
      ],
      [
        "SELECT professional_id , last_name , cell_number FROM Professionals WHERE state = value UNION SELECT professional_id , last_name , home_phone FROM Professionals GROUP BY professional_id HAVING Count ( * ) > value",
        -3.8846607208251953
      ],
      [
        "SELECT T3.professional_id , T1.last_name , T3.cell_number FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id WHERE T3.state = value UNION SELECT T3.professional_id , T1.last_name , T3.cell_number FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id GROUP BY T3.professional_id HAVING Count ( * ) > value",
        -3.8907766342163086
      ],
      [
        "SELECT T3.professional_id , T1.last_name , T3.cell_number FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id WHERE T3.state = value UNION SELECT T3.professional_id , T3.last_name , T3.cell_number FROM Professionals AS T3 GROUP BY T3.professional_id HAVING Count ( * ) > = value",
        -4.006285667419434
      ],
      [
        "SELECT T3.professional_id , T1.last_name , T3.home_phone FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id WHERE T3.state = value UNION SELECT T3.professional_id , T3.last_name , T3.cell_number FROM Professionals AS T3 GROUP BY T3.professional_id HAVING Count ( * ) > value",
        -4.080019950866699
      ],
      [
        "SELECT T1.professional_id , T1.last_name , T1.cell_number FROM Professionals AS T1 WHERE T1.state = value UNION SELECT T1.professional_id , T2.last_name , T1.cell_number FROM Owners AS T2 JOIN Dogs AS T3 ON T2.owner_id = T3.owner_id JOIN Professionals AS T1 JOIN Treatments AS T4 ON T3.dog_id = T4.dog_id AND T4.professional_id = T1.professional_id GROUP BY T1.professional_id HAVING Count ( * ) > = value",
        -4.099737167358398
      ],
      [
        "SELECT professional_id , last_name , cell_number FROM Professionals WHERE state = value GROUP BY professional_id HAVING Count ( * ) > = value",
        -4.139167785644531
      ],
      [
        "SELECT T3.professional_id , T1.last_name , T3.cell_number FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id WHERE T3.state = value UNION SELECT T3.professional_id , T3.last_name , T3.home_phone FROM Professionals AS T3 GROUP BY T3.professional_id HAVING Count ( * ) > value",
        -4.140011787414551
      ],
      [
        "SELECT T1.professional_id , T1.last_name , T1.home_phone FROM Professionals AS T1 WHERE T1.state = value UNION SELECT T1.professional_id , T2.last_name , T1.cell_number FROM Owners AS T2 JOIN Dogs AS T3 ON T2.owner_id = T3.owner_id JOIN Professionals AS T1 JOIN Treatments AS T4 ON T3.dog_id = T4.dog_id AND T4.professional_id = T1.professional_id GROUP BY T1.professional_id HAVING Count ( * ) > value",
        -4.160675048828125
      ],
      [
        "SELECT T1.professional_id , T1.last_name , T1.cell_number FROM Professionals AS T1 WHERE T1.state = value UNION SELECT T1.professional_id , T2.last_name , T1.home_phone FROM Owners AS T2 JOIN Dogs AS T3 ON T2.owner_id = T3.owner_id JOIN Professionals AS T1 JOIN Treatments AS T4 ON T3.dog_id = T4.dog_id AND T4.professional_id = T1.professional_id GROUP BY T1.professional_id HAVING Count ( * ) > value",
        -4.244733810424805
      ],
      [
        "SELECT professional_id , last_name , home_phone FROM Professionals WHERE state = value UNION SELECT professional_id , last_name , cell_number FROM Professionals GROUP BY professional_id HAVING Count ( * ) > = value",
        -4.274408340454102
      ],
      [
        "SELECT T3.professional_id , T1.last_name , T3.cell_number FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id WHERE T3.state = value UNION SELECT T3.professional_id , T1.last_name , T3.cell_number FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id GROUP BY T3.professional_id HAVING Count ( * ) > = value",
        -4.356989860534668
      ],
      [
        "SELECT professional_id , last_name , cell_number FROM Professionals WHERE state = value UNION SELECT professional_id , last_name , home_phone FROM Professionals GROUP BY professional_id HAVING Count ( * ) > = value",
        -4.38648796081543
      ],
      [
        "SELECT professional_id , last_name , home_phone FROM Professionals WHERE state = value UNION SELECT professional_id , last_name , home_phone FROM Professionals GROUP BY professional_id HAVING Count ( * ) > value",
        -4.413946151733398
      ],
      [
        "SELECT T3.professional_id , T1.last_name , T3.cell_number FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id WHERE T3.state = value GROUP BY T3.professional_id HAVING Count ( * ) > = value",
        -4.414763450622559
      ],
      [
        "SELECT T3.professional_id , T1.last_name , T3.home_phone FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id WHERE T3.state = value UNION SELECT T3.professional_id , T1.last_name , T3.cell_number FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id GROUP BY T3.professional_id HAVING Count ( * ) > value",
        -4.47176456451416
      ]
    ],
    "predicted_parse_with_values": "SELECT professional_id , last_name , cell_number FROM Professionals WHERE state = \"Indiana\" UNION SELECT professional_id , last_name , cell_number FROM Professionals GROUP BY professional_id HAVING Count ( * ) > 2",
    "predicted_parse": "SELECT professional_id , last_name , cell_number FROM Professionals WHERE state = value UNION SELECT professional_id , last_name , cell_number FROM Professionals GROUP BY professional_id HAVING Count ( * ) > value",
    "predicted_parse_explanation": [
      "Step 1: find the professional id , last name , cell number in professionals table whose state equals Indiana",
      "Step 2: find the number of rows of each value of professional id in professionals table",
      "Step 3: find the professional id , last name , cell number in professionals table whose corresponding value in step 2 is greater than 2",
      "Step 4: show the rows that are in any of the results of step 1 and step 3"
    ],
    "template_feedback": "in step 2 , additionally use the information from the treatments table besides the professionals table .",
    "primary_span": [
      [
        4,
        11
      ]
    ],
    "secondary_span": [
      [
        12,
        16
      ]
    ],
    "edits": [
      "treatments"
    ],
    "edits_original": "< from > add treatments </ from >"
  },
  {
    "db_id": "concert_singer",
    "feedback": "Supplant stadium table with singer table .",
    "question": "What is the total number of singers?",
    "gold_parse": "SELECT count(*) FROM singer",
    "beam": [
      [
        "SELECT Count ( * ) FROM stadium",
        -3.910064697265625e-05
      ],
      [
        "SELECT Sum ( * ) FROM stadium",
        -10.650087714195251
      ],
      [
        "SELECT Count ( * ) , Is_male FROM singer",
        -13.802892923355103
      ],
      [
        "SELECT Count ( * ) , Count ( * ) FROM stadium",
        -13.821847915649414
      ],
      [
        "SELECT Avg ( * ) FROM stadium",
        -14.170768976211548
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM stadium",
        -14.172357559204102
      ],
      [
        "SELECT Count ( * ) FROM singer WHERE Is_male = value",
        -14.231342852115631
      ],
      [
        "SELECT Count ( * ) FROM singer GROUP BY Is_male",
        -14.438531458377838
      ],
      [
        "SELECT Count ( Count ( * ) ) FROM stadium",
        -15.147602081298828
      ],
      [
        "SELECT Count ( * ) , Name FROM singer",
        -15.251264214515686
      ],
      [
        "SELECT Sum ( Is_male ) FROM singer",
        -15.488133907318115
      ],
      [
        "SELECT Count ( * ) FROM stadium GROUP BY *",
        -15.675745010375977
      ],
      [
        "SELECT Count ( * ) , Country FROM singer",
        -15.718810081481934
      ],
      [
        "SELECT Count ( * ) FROM singer GROUP BY Country",
        -15.75999903678894
      ],
      [
        "SELECT Sum ( Age ) FROM singer",
        -16.31625747680664
      ],
      [
        "SELECT Sum ( Name ) FROM singer",
        -16.379499435424805
      ],
      [
        "SELECT Count ( * ) FROM singer ORDER BY Age Desc",
        -16.599579334259033
      ],
      [
        "SELECT Max ( * ) FROM stadium",
        -16.65291142463684
      ],
      [
        "SELECT Count ( Avg ( * ) ) FROM stadium",
        -16.814387321472168
      ],
      [
        "SELECT Count ( * ) FROM stadium LIMIT value",
        -17.040297508239746
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM stadium",
    "predicted_parse": "SELECT Count ( * ) FROM stadium",
    "predicted_parse_explanation": [
      "find the number of rows in stadium table"
    ],
    "template_feedback": "use singer table in place of stadium table .",
    "primary_span": [
      [
        0,
        2
      ]
    ],
    "secondary_span": [
      [
        3,
        8
      ]
    ],
    "edits": [
      "singer",
      "stadium"
    ],
    "edits_original": "< from > add singer </ from > < from > remove stadium </ from >"
  },
  {
    "db_id": "wta_1",
    "feedback": "Replace matches with rankings in step 1 , replace winner rank with ranking points in step 2.",
    "question": "Find the total ranking points for each player and their first name.",
    "gold_parse": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
    "beam": [
      [
        "SELECT Sum ( T2.winner_rank ) , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T1.first_name",
        -1.5311212539672852
      ],
      [
        "SELECT Sum ( T2.ranking_points ) , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name",
        -1.9020605087280273
      ],
      [
        "SELECT Sum ( T2.loser_rank_points ) , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T1.first_name",
        -2.577115058898926
      ],
      [
        "SELECT Sum ( T2.winner_rank_points ) , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T1.first_name",
        -3.051255226135254
      ],
      [
        "SELECT Sum ( T2.winner_rank ) , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.winner_name",
        -3.1921119689941406
      ],
      [
        "SELECT Sum ( T2.winner_rank ) , T2.winner_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T1.first_name",
        -3.2637710571289062
      ],
      [
        "SELECT Sum ( T2.winner_rank ) , T2.loser_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T1.first_name",
        -3.297001838684082
      ],
      [
        "SELECT Sum ( T2.winner_rank ) , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.loser_name",
        -3.324911117553711
      ],
      [
        "SELECT Sum ( T3.ranking_points ) , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id JOIN rankings AS T3 ON T1.player_id = T3.player_id GROUP BY T2.winner_name",
        -3.586228370666504
      ],
      [
        "SELECT Sum ( T3.ranking_points ) , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id JOIN rankings AS T3 ON T1.player_id = T3.player_id GROUP BY T2.loser_name",
        -3.7112627029418945
      ],
      [
        "SELECT Sum ( T3.ranking_points ) , T2.winner_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id JOIN rankings AS T3 ON T1.player_id = T3.player_id GROUP BY T1.first_name",
        -3.938467025756836
      ],
      [
        "SELECT Sum ( T3.ranking_points ) , T2.loser_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id JOIN rankings AS T3 ON T1.player_id = T3.player_id GROUP BY T1.first_name",
        -3.9651308059692383
      ],
      [
        "SELECT Sum ( winner_rank ) , loser_name FROM matches GROUP BY winner_name",
        -4.1946210861206055
      ],
      [
        "SELECT Sum ( T2.winner_rank_points ) , T2.winner_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T1.first_name",
        -4.272909164428711
      ],
      [
        "SELECT Sum ( T2.loser_rank_points ) , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.winner_name",
        -4.2755889892578125
      ],
      [
        "SELECT Sum ( winner_rank ) , loser_name FROM matches GROUP BY loser_name",
        -4.290323257446289
      ],
      [
        "SELECT Sum ( T2.winner_rank_points ) , T2.loser_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T1.first_name",
        -4.3160200119018555
      ],
      [
        "SELECT Sum ( winner_rank ) , winner_name FROM matches GROUP BY winner_name",
        -4.319250106811523
      ],
      [
        "SELECT Sum ( T2.ranking ) , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name",
        -4.326290130615234
      ],
      [
        "SELECT Sum ( T2.loser_rank_points ) , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.loser_name",
        -4.416163444519043
      ]
    ],
    "predicted_parse_with_values": "SELECT Sum ( T2.winner_rank ) , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T1.first_name",
    "predicted_parse": "SELECT Sum ( T2.winner_rank ) , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T1.first_name",
    "predicted_parse_explanation": [
      "Step 1: for each row in players table , find the corresponding rows in matches table",
      "Step 2: find each value of first name of the results of step 1 along with the summation of winner rank of the corresponding rows to each value"
    ],
    "template_feedback": "in step 1 , use rankings table in place of matches table in step 2 , find summation of ranking points in place of summation of winner rank .",
    "primary_span": [
      [
        4,
        6
      ],
      [
        16,
        20
      ]
    ],
    "secondary_span": [
      [
        7,
        11
      ],
      [
        21,
        28
      ]
    ],
    "edits": [
      "summation of ranking points",
      "summation of winner rank",
      "rankings",
      "matches"
    ],
    "edits_original": "< select > add summation of ranking points </ select > < select > remove summation of winner rank </ select > < from > add rankings </ from > < from > remove matches </ from >"
  },
  {
    "db_id": "world_1",
    "feedback": "In step 1 Use government form not equals Republic\" instead of \"Continent equals Republic\".",
    "question": "Return the codes of countries that do not speak English and do not have Republics for governments.",
    "gold_parse": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
    "beam": [
      [
        "SELECT T1.Code FROM country AS T1 WHERE T1.Continent = value EXCEPT SELECT T1.Code FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value",
        -0.03331756591796875
      ],
      [
        "SELECT Code FROM country WHERE Continent = value EXCEPT SELECT Code FROM country WHERE LocalName = value",
        -4.635471343994141
      ],
      [
        "SELECT Code FROM country WHERE Continent = value EXCEPT SELECT Code FROM country WHERE GovernmentForm = value",
        -5.24827241897583
      ],
      [
        "SELECT Code FROM country WHERE Continent = value EXCEPT SELECT Code FROM country WHERE Continent = value",
        -5.302222728729248
      ],
      [
        "SELECT T1.Code FROM country AS T1 WHERE T1.GovernmentForm = value EXCEPT SELECT T1.Code FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value",
        -5.452850341796875
      ],
      [
        "SELECT T1.Code FROM country AS T1 WHERE T1.Continent = value EXCEPT SELECT T2.CountryCode FROM countrylanguage AS T2 WHERE T2.Language = value",
        -5.913618087768555
      ],
      [
        "SELECT Code FROM country WHERE Continent = value EXCEPT SELECT Code FROM country WHERE Name = value",
        -6.744379043579102
      ],
      [
        "SELECT T1.Code FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value EXCEPT SELECT T1.Code FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value",
        -6.954869270324707
      ],
      [
        "SELECT T1.Code FROM country AS T1 WHERE T1.Continent = value EXCEPT SELECT T2.CountryCode FROM city AS T2 JOIN country AS T1 ON T2.CountryCode = T1.Code JOIN countrylanguage AS T3 ON T1.Code = T3.CountryCode WHERE T3.Language = value",
        -7.0808515548706055
      ],
      [
        "SELECT T1.Code FROM country AS T1 WHERE T1.Continent = value EXCEPT SELECT T1.Code FROM sqlite_sequence AS T2 JOIN country AS T1 WHERE T2.name = value",
        -7.6565752029418945
      ],
      [
        "SELECT T1.Code FROM country AS T1 WHERE T1.Continent = value EXCEPT SELECT T1.GovernmentForm FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value",
        -8.046679019927979
      ],
      [
        "SELECT T1.Code FROM country AS T1 EXCEPT SELECT T1.Code FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value",
        -8.13156509399414
      ],
      [
        "SELECT T1.Code FROM country AS T1 WHERE T1.Name = value EXCEPT SELECT T1.Code FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value",
        -8.203116416931152
      ],
      [
        "SELECT T1.Code FROM country AS T1 WHERE T1.LocalName = value EXCEPT SELECT T1.Code FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value",
        -8.677698135375977
      ],
      [
        "SELECT Code FROM country WHERE Continent = value EXCEPT SELECT Code FROM country WHERE Capital = value",
        -9.008275985717773
      ],
      [
        "SELECT T1.Code FROM country AS T1 WHERE T1.Code2 = value EXCEPT SELECT T1.Code FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value",
        -9.681838989257812
      ],
      [
        "SELECT T1.Code FROM country AS T1 WHERE T1.Continent = value EXCEPT SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value",
        -9.699368476867676
      ],
      [
        "SELECT Code FROM country WHERE Continent = value EXCEPT SELECT Code FROM country WHERE Population = value",
        -9.87409496307373
      ],
      [
        "SELECT Code FROM country WHERE Continent ! = value ORDER BY Code Desc",
        -9.932547569274902
      ],
      [
        "SELECT Code FROM country WHERE Continent = value EXCEPT SELECT Code FROM country",
        -10.869420528411865
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.Code FROM country AS T1 WHERE T1.Continent = \"Republic\" EXCEPT SELECT T1.Code FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\"",
    "predicted_parse": "SELECT T1.Code FROM country AS T1 WHERE T1.Continent = value EXCEPT SELECT T1.Code FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value",
    "predicted_parse_explanation": [
      "Step 1: find the code in country table whose continent equals Republic",
      "Step 2: for each row in country table , find the corresponding rows in countrylanguage table",
      "Step 3: find the code of the results of step 2 whose language equals English",
      "Step 4: show the rows that are in the results of step 1 but not in the results of step 3"
    ],
    "template_feedback": "in step 1 , consider the government form not equals Republic conditions in place of the continent equals Republic conditions . in step 2 , do not use the country table .",
    "primary_span": [
      [
        4,
        11
      ],
      [
        25,
        31
      ]
    ],
    "secondary_span": [
      [
        12,
        20
      ],
      [
        25,
        31
      ]
    ],
    "edits": [
      "government form not equals to \"Republic\"",
      "continent equals \"Republic\"",
      "countrycode",
      "code",
      "country"
    ],
    "edits_original": "< where > add government form not equals to \" Republic \" </ where > < where > remove continent equals \" Republic \" </ where > < select > add countrycode </ select > < select > remove code </ select > < from > remove country </ from >"
  },
  {
    "db_id": "car_1",
    "feedback": "Use mpg in place of accelerate , Ensure cylinders equals 8 or year less than 1980.",
    "question": "What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980?",
    "gold_parse": "SELECT mpg FROM CARS_DATA WHERE Cylinders  =  8 OR YEAR  <  1980 ORDER BY mpg DESC LIMIT 1",
    "beam": [
      [
        "SELECT Max ( Accelerate ) FROM cars_data WHERE Cylinders = value OR Year < value",
        -0.1578993797302246
      ],
      [
        "SELECT Max ( T3.Accelerate ) FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T1.Model = value OR T3.Year < value",
        -2.613572120666504
      ],
      [
        "SELECT Max ( Accelerate ) FROM cars_data WHERE Year = value OR Year < value",
        -2.734609603881836
      ],
      [
        "SELECT Max ( T4.Accelerate ) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id WHERE T1.Maker = value OR T4.Year < value",
        -5.53525447845459
      ],
      [
        "SELECT Max ( Accelerate ) FROM cars_data WHERE Edispl = value OR Year < value",
        -6.788417339324951
      ],
      [
        "SELECT Max ( Accelerate ) FROM cars_data WHERE Year = value OR Year = value",
        -6.860780715942383
      ],
      [
        "SELECT Max ( T4.Accelerate ) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id WHERE T1.FullName = value OR T4.Year < value",
        -8.553059577941895
      ],
      [
        "SELECT Max ( Accelerate ) FROM cars_data WHERE Accelerate = value OR Year < value",
        -8.563533782958984
      ],
      [
        "SELECT Max ( Accelerate ) FROM cars_data WHERE Cylinders LIKE value OR Year < value",
        -8.57313060760498
      ],
      [
        "SELECT Max ( T2.Accelerate ) FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T1.Model = value OR T2.Year < value",
        -8.765324592590332
      ],
      [
        "SELECT Max ( Accelerate ) FROM cars_data WHERE Cylinders = value OR Year > value",
        -9.022545337677002
      ],
      [
        "SELECT Max ( Accelerate ) FROM cars_data WHERE Horsepower = value OR Year < value",
        -9.103504180908203
      ],
      [
        "SELECT Max ( Accelerate ) FROM cars_data WHERE Year = value OR Year > value",
        -9.262205123901367
      ],
      [
        "SELECT Max ( Accelerate ) FROM cars_data WHERE Cylinders = value OR Year > = value",
        -9.348108768463135
      ],
      [
        "SELECT Max ( Cylinders ) FROM cars_data WHERE Cylinders = value OR Year < value",
        -9.686095714569092
      ],
      [
        "SELECT Max ( Accelerate ) FROM cars_data WHERE Cylinders = value OR Year = value",
        -9.696268558502197
      ],
      [
        "SELECT Max ( T3.Accelerate ) FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T1.ModelId = value OR T3.Year < value",
        -9.739611625671387
      ],
      [
        "SELECT Max ( Accelerate ) FROM cars_data WHERE MPG = value OR Year < value",
        -9.826900482177734
      ],
      [
        "SELECT Max ( Accelerate ) FROM cars_data WHERE Year = value OR Year > = value",
        -10.183146476745605
      ],
      [
        "SELECT Max ( Accelerate ) FROM cars_data WHERE Year > = value",
        -11.029187202453613
      ]
    ],
    "predicted_parse_with_values": "SELECT Max ( Accelerate ) FROM cars_data WHERE Cylinders = 1 OR Year < 8",
    "predicted_parse": "SELECT Max ( Accelerate ) FROM cars_data WHERE Cylinders = value OR Year < value",
    "predicted_parse_explanation": [
      "find the maximum accelerate in cars data table whose cylinders equals 1 or year less than 8"
    ],
    "template_feedback": "consider the cylinders equals 8 or year less than 1980 conditions in place of the cylinders equals 1 or year less than 8 conditions . find mpg in place of maximum accelerate . find the result with the largest mpg .",
    "primary_span": [
      [
        0,
        10
      ],
      [
        25,
        26
      ],
      [
        33,
        40
      ]
    ],
    "secondary_span": [
      [
        11,
        24
      ],
      [
        27,
        32
      ]
    ],
    "edits": [
      "mpg",
      "maximum accelerate",
      "cylinders equals 8 or year less than 1980",
      "cylinders equals 1 or year less than 8",
      "mpg",
      "descending",
      "1"
    ],
    "edits_original": "< select > add mpg </ select > < select > remove maximum accelerate </ select > < where > add cylinders equals 8 or year less than 1980 </ where > < where > remove cylinders equals 1 or year less than 8 </ where > < orderBy > add mpg </ orderBy > < orderBy > add descending </ orderBy > < limit > add 1 </ limit >"
  },
  {
    "db_id": "student_transcripts_tracking",
    "feedback": "Ensure to find in descending order not in ascending order .",
    "question": "List the section_name in reversed lexicographical order.",
    "gold_parse": "SELECT section_name FROM Sections ORDER BY section_name DESC",
    "beam": [
      [
        "SELECT section_name FROM Sections ORDER BY section_name Asc",
        -0.008470535278320312
      ],
      [
        "SELECT section_name FROM Sections ORDER BY section_name Desc",
        -4.813849449157715
      ],
      [
        "SELECT T2.section_name FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id = T2.course_id ORDER BY T1.course_name Asc",
        -9.418034553527832
      ],
      [
        "SELECT T1.course_name FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id = T2.course_id ORDER BY T2.section_name Asc",
        -11.626513481140137
      ],
      [
        "SELECT section_name FROM Sections WHERE section_name = value ORDER BY section_name Asc",
        -11.987510442733765
      ],
      [
        "SELECT T2.section_name FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = value ORDER BY T2.section_name Asc",
        -12.95945405960083
      ],
      [
        "SELECT section_name FROM Sections UNION SELECT section_name FROM Sections",
        -13.031060218811035
      ],
      [
        "SELECT section_description FROM Sections ORDER BY section_name Asc",
        -13.170793533325195
      ],
      [
        "SELECT T2.section_name FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id = T2.course_id ORDER BY T1.course_name Desc",
        -13.715085983276367
      ],
      [
        "SELECT section_name FROM Sections ORDER BY section_name Asc LIMIT value",
        -13.767220497131348
      ],
      [
        "SELECT DISTINCT section_name FROM Sections ORDER BY section_name Asc",
        -13.861095428466797
      ],
      [
        "SELECT section_name FROM Sections",
        -14.485313415527344
      ],
      [
        "SELECT section_name FROM Sections WHERE section_name = value",
        -14.606838464736938
      ],
      [
        "SELECT section_name FROM Sections GROUP BY section_name ORDER BY Count ( * ) Desc",
        -14.621700286865234
      ],
      [
        "SELECT section_name , section_description FROM Sections ORDER BY section_name Asc",
        -14.700105428695679
      ],
      [
        "SELECT section_name FROM Sections GROUP BY section_name ORDER BY section_name Asc",
        -14.74987506866455
      ],
      [
        "SELECT T2.section_name , T1.course_name FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id = T2.course_id ORDER BY T2.section_name Asc",
        -14.796884655952454
      ],
      [
        "SELECT * FROM Sections ORDER BY section_name Asc",
        -15.314123153686523
      ],
      [
        "SELECT section_name , section_name FROM Sections ORDER BY section_name Asc",
        -15.457999467849731
      ],
      [
        "SELECT section_name FROM Sections ORDER BY section_description Asc",
        -15.525114059448242
      ]
    ],
    "predicted_parse_with_values": "SELECT section_name FROM Sections ORDER BY section_name Asc",
    "predicted_parse": "SELECT section_name FROM Sections ORDER BY section_name Asc",
    "predicted_parse_explanation": [
      "find the section name in sections table ordered ascending by section name"
    ],
    "template_feedback": "order the results descending .",
    "primary_span": [
      [
        0,
        4
      ]
    ],
    "secondary_span": [],
    "edits": [
      "descending"
    ],
    "edits_original": "< orderBy > add descending </ orderBy >"
  },
  {
    "db_id": "concert_singer",
    "feedback": "Swap ascending with descending .",
    "question": "Show name, country, age for all singers ordered by age from the oldest to the youngest.",
    "gold_parse": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC",
    "beam": [
      [
        "SELECT Name , Country , Age FROM singer ORDER BY Age Asc",
        -0.12618732452392578
      ],
      [
        "SELECT Name , Country , Song_release_year FROM singer ORDER BY Age Asc",
        -2.7889280319213867
      ],
      [
        "SELECT Name , Country , Country FROM singer ORDER BY Age Asc",
        -2.9944381713867188
      ],
      [
        "SELECT Song_Name , Country , Age FROM singer ORDER BY Age Asc",
        -5.470048904418945
      ],
      [
        "SELECT Name , Country , Age FROM singer ORDER BY Age Asc LIMIT value",
        -6.8030805587768555
      ],
      [
        "SELECT Name , Country , Age FROM singer ORDER BY Age Desc",
        -7.68806266784668
      ],
      [
        "SELECT Song_Name , Country , Song_release_year FROM singer ORDER BY Age Asc",
        -8.115498542785645
      ],
      [
        "SELECT Song_Name , Country , Country FROM singer ORDER BY Age Asc",
        -8.395529747009277
      ],
      [
        "SELECT Name , Country , Is_male FROM singer ORDER BY Age Asc",
        -8.613181114196777
      ],
      [
        "SELECT Name , Country , Age FROM singer ORDER BY Song_release_year Asc",
        -9.079100608825684
      ],
      [
        "SELECT Name , Country , Song_release_year FROM singer ORDER BY Age Asc LIMIT value",
        -9.096161365509033
      ],
      [
        "SELECT Name , Country , Country FROM singer ORDER BY Age Asc LIMIT value",
        -9.45497751235962
      ],
      [
        "SELECT Name , Country FROM singer ORDER BY Age Asc",
        -9.48494815826416
      ],
      [
        "SELECT Name , Country , Song_release_year FROM singer ORDER BY Age Desc",
        -10.12651538848877
      ],
      [
        "SELECT Name , Country , Age FROM singer ORDER BY Age - Song_release_year Asc",
        -11.015678405761719
      ],
      [
        "SELECT Name , Country , Country FROM singer ORDER BY Age Desc",
        -11.375146865844727
      ],
      [
        "SELECT Song_Name , Country , Age FROM singer ORDER BY Age Asc LIMIT value",
        -12.148491859436035
      ],
      [
        "SELECT Name , Country , Min ( Age ) FROM singer ORDER BY Age Asc",
        -12.386768341064453
      ],
      [
        "SELECT Name , Country , Max ( Age ) FROM singer ORDER BY Age Asc",
        -12.524867057800293
      ],
      [
        "SELECT Name FROM singer ORDER BY Age Asc",
        -16.800212860107422
      ]
    ],
    "predicted_parse_with_values": "SELECT Name , Country , Age FROM singer ORDER BY Age Asc",
    "predicted_parse": "SELECT Name , Country , Age FROM singer ORDER BY Age Asc",
    "predicted_parse_explanation": [
      "find the name , country , age in singer table ordered ascending by age"
    ],
    "template_feedback": "order the results descending .",
    "primary_span": [
      [
        0,
        4
      ]
    ],
    "secondary_span": [],
    "edits": [
      "descending"
    ],
    "edits_original": "< orderBy > add descending </ orderBy >"
  },
  {
    "db_id": "employee_hire_evaluation",
    "feedback": "In step 1 replace employee table with evaluation table .",
    "question": "Which employee received the most awards in evaluations? Give me the employee name.",
    "gold_parse": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1",
    "beam": [
      [
        "SELECT Name FROM employee GROUP BY Employee_ID ORDER BY Count ( * ) Desc LIMIT value",
        -5.7220458984375e-05
      ],
      [
        "SELECT T1.Name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID GROUP BY T2.Employee_ID ORDER BY Count ( * ) Desc LIMIT value",
        -10.592216491699219
      ],
      [
        "SELECT T1.Name FROM employee AS T1 JOIN hiring AS T2 ON T1.Employee_ID = T2.Employee_ID GROUP BY T2.Employee_ID ORDER BY Count ( * ) Desc LIMIT value",
        -11.322772979736328
      ],
      [
        "SELECT Name FROM employee GROUP BY Employee_ID ORDER BY Count ( * ) Desc",
        -11.822491645812988
      ],
      [
        "SELECT Name FROM employee GROUP BY Name ORDER BY Count ( * ) Desc LIMIT value",
        -12.444877624511719
      ],
      [
        "SELECT Name , Employee_ID FROM employee GROUP BY Employee_ID ORDER BY Count ( * ) Desc LIMIT value",
        -13.340720176696777
      ],
      [
        "SELECT Name FROM employee GROUP BY Employee_ID",
        -13.634364128112793
      ],
      [
        "SELECT Name FROM employee GROUP BY Employee_ID , Employee_ID ORDER BY Count ( * ) Desc LIMIT value",
        -13.705044269561768
      ],
      [
        "SELECT DISTINCT Name FROM employee GROUP BY Employee_ID ORDER BY Count ( * ) Desc LIMIT value",
        -13.710531234741211
      ],
      [
        "SELECT T1.Name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID ORDER BY T2.Year_awarded Desc LIMIT value",
        -14.31322979927063
      ],
      [
        "SELECT Name FROM employee GROUP BY Employee_ID ORDER BY Count ( * ) Asc LIMIT value",
        -14.996927261352539
      ],
      [
        "SELECT DISTINCT Name FROM employee GROUP BY Employee_ID ORDER BY Count ( * ) Desc LIMIT value",
        -15.082039833068848
      ],
      [
        "SELECT Name FROM employee GROUP BY Employee_ID ORDER BY Sum ( * ) Desc LIMIT value",
        -15.196030139923096
      ],
      [
        "SELECT Name FROM employee ORDER BY Employee_ID Desc LIMIT value",
        -15.298917770385742
      ],
      [
        "SELECT Name FROM employee GROUP BY Employee_ID ORDER BY Avg ( * ) Desc LIMIT value",
        -15.491402626037598
      ],
      [
        "SELECT T1.Name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID ORDER BY T2.Bonus Desc LIMIT value",
        -15.505080938339233
      ],
      [
        "SELECT T1.Name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID GROUP BY T1.Employee_ID , T2.Year_awarded ORDER BY Count ( * ) Desc LIMIT value",
        -15.639416217803955
      ],
      [
        "SELECT Name , Name FROM employee GROUP BY Employee_ID ORDER BY Count ( * ) Desc LIMIT value",
        -16.023494720458984
      ],
      [
        "SELECT Name FROM employee GROUP BY Max ( Employee_ID ) ORDER BY Count ( * ) Desc LIMIT value",
        -16.039469718933105
      ],
      [
        "SELECT Name FROM employee ORDER BY Age Desc LIMIT value",
        -16.208481788635254
      ]
    ],
    "predicted_parse_with_values": "SELECT Name FROM employee GROUP BY Employee_ID ORDER BY Count ( * ) Desc LIMIT 1",
    "predicted_parse": "SELECT Name FROM employee GROUP BY Employee_ID ORDER BY Count ( * ) Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of employee id in employee table",
      "Step 2: find the name in employee table with largest value in the results of step 1"
    ],
    "template_feedback": "in step 1 , additionally use the information from the evaluation table besides the employee table .",
    "primary_span": [
      [
        4,
        11
      ]
    ],
    "secondary_span": [
      [
        12,
        16
      ]
    ],
    "edits": [
      "evaluation"
    ],
    "edits_original": "< from > add evaluation </ from >"
  },
  {
    "db_id": "network_1",
    "feedback": "Find the number of rows in Friends table for each student .",
    "question": "How many friends does each student have?",
    "gold_parse": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id",
    "beam": [
      [
        "SELECT Count ( * ) FROM Highschooler",
        -0.0005960464477539062
      ],
      [
        "SELECT Count ( * ) FROM Friend GROUP BY student_id",
        -7.658048629760742
      ],
      [
        "SELECT Count ( * ) , T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id",
        -10.026371598243713
      ],
      [
        "SELECT Count ( * ) , T1.grade FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id",
        -10.77300238609314
      ],
      [
        "SELECT Count ( * ) FROM Highschooler WHERE name = value",
        -11.358142852783203
      ],
      [
        "SELECT Count ( DISTINCT student_id ) FROM Friend",
        -11.631346702575684
      ],
      [
        "SELECT Count ( * ) FROM Highschooler WHERE grade = value",
        -12.021960973739624
      ],
      [
        "SELECT Count ( * ) , student_id FROM Friend GROUP BY student_id",
        -12.218967914581299
      ],
      [
        "SELECT Sum ( * ) FROM Highschooler",
        -12.393277049064636
      ],
      [
        "SELECT Count ( DISTINCT friend_id ) FROM Friend",
        -12.809066772460938
      ],
      [
        "SELECT Count ( * ) FROM Highschooler GROUP BY ID",
        -12.919381141662598
      ],
      [
        "SELECT Sum ( friend_id ) FROM Friend",
        -13.659996390342712
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM Highschooler",
        -13.868727684020996
      ],
      [
        "SELECT Count ( * ) , friend_id FROM Friend GROUP BY student_id",
        -14.135263919830322
      ],
      [
        "SELECT Sum ( student_id ) FROM Friend",
        -14.172901630401611
      ],
      [
        "SELECT Avg ( * ) FROM Highschooler",
        -14.47723251581192
      ],
      [
        "SELECT Count ( DISTINCT name ) FROM Highschooler",
        -15.351543426513672
      ],
      [
        "SELECT Sum ( name ) FROM Highschooler",
        -15.719675064086914
      ],
      [
        "SELECT student_id FROM Friend",
        -15.931698024272919
      ],
      [
        "SELECT Count ( Count ( * ) ) FROM Highschooler",
        -16.306099891662598
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM Highschooler",
    "predicted_parse": "SELECT Count ( * ) FROM Highschooler",
    "predicted_parse_explanation": [
      "find the number of rows in high schooler table"
    ],
    "template_feedback": "use friend table in place of high schooler table . find for each value of student id . additionally find student id .",
    "primary_span": [
      [
        0,
        2
      ],
      [
        10,
        17
      ],
      [
        18,
        22
      ]
    ],
    "secondary_span": [
      [
        3,
        9
      ]
    ],
    "edits": [
      "student id",
      "friend",
      "high schooler",
      "student id"
    ],
    "edits_original": "< select > add student id </ select > < from > add friend </ from > < from > remove high schooler </ from > < groupBy > add student id </ groupBy >"
  },
  {
    "db_id": "dog_kennels",
    "feedback": "Determine the whole date of treatment for  each treatment type code in treatment table in step 2.",
    "question": "What is the description of the treatment type that costs the least money in total?",
    "gold_parse": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1",
    "beam": [
      [
        "SELECT T1.treatment_type_description FROM Treatment_Types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T2.treatment_type_code ORDER BY Count ( * ) Asc LIMIT value",
        -0.00589752197265625
      ],
      [
        "SELECT T1.treatment_type_description FROM Treatment_Types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T2.treatment_type_code ORDER BY Sum ( T1.treatment_type_code ) Asc LIMIT value",
        -5.696994781494141
      ],
      [
        "SELECT treatment_type_description FROM Treatment_Types GROUP BY treatment_type_code ORDER BY Count ( * ) Asc LIMIT value",
        -6.287374496459961
      ],
      [
        "SELECT T2.treatment_type_description FROM Charges AS T1 JOIN Treatment_Types AS T2 JOIN Treatments AS T3 GROUP BY T3.treatment_type_code ORDER BY Sum ( T1.charge_amount ) Asc LIMIT value",
        -7.91114616394043
      ],
      [
        "SELECT T1.treatment_type_description FROM Treatment_Types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T2.treatment_type_code ORDER BY Count ( * ) Desc LIMIT value",
        -9.082615852355957
      ],
      [
        "SELECT T1.treatment_type_description FROM Treatment_Types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T2.treatment_type_code ORDER BY Sum ( T2.treatment_type_code ) Asc LIMIT value",
        -9.567086696624756
      ],
      [
        "SELECT T1.treatment_type_description FROM Treatment_Types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T2.treatment_type_code ORDER BY Sum ( T1.treatment_type_description ) Asc LIMIT value",
        -9.822868824005127
      ],
      [
        "SELECT T1.treatment_type_description FROM Treatment_Types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T2.treatment_type_code ORDER BY Sum ( * ) Asc LIMIT value",
        -11.038770198822021
      ],
      [
        "SELECT T1.treatment_type_description FROM Treatment_Types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T2.treatment_type_code ORDER BY Avg ( T1.treatment_type_code ) Asc LIMIT value",
        -11.425556182861328
      ],
      [
        "SELECT treatment_type_description FROM Treatment_Types GROUP BY treatment_type_code ORDER BY Sum ( treatment_type_code ) Asc LIMIT value",
        -11.980647087097168
      ],
      [
        "SELECT T1.treatment_type_description FROM Treatment_Types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T2.treatment_type_code ORDER BY Sum ( T2.cost_of_treatment ) Asc LIMIT value",
        -12.272873878479004
      ],
      [
        "SELECT T1.treatment_type_description FROM Treatment_Types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T2.treatment_type_code ORDER BY Count ( * ) Asc",
        -12.6942720413208
      ],
      [
        "SELECT treatment_type_description FROM Treatment_Types GROUP BY treatment_type_description ORDER BY Count ( * ) Asc LIMIT value",
        -13.307732582092285
      ],
      [
        "SELECT T1.treatment_type_description FROM Treatment_Types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T2.treatment_type_code",
        -13.366110801696777
      ],
      [
        "SELECT T2.treatment_type_description FROM Charges AS T1 JOIN Treatment_Types AS T2 JOIN Treatments AS T3 GROUP BY T3.treatment_type_code ORDER BY Count ( T1.charge_amount ) Asc LIMIT value",
        -13.540091514587402
      ],
      [
        "SELECT T1.treatment_type_description FROM Treatment_Types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T2.treatment_type_code ORDER BY Count ( T1.treatment_type_code ) Asc LIMIT value",
        -13.877395629882812
      ],
      [
        "SELECT T2.treatment_type_description FROM Charges AS T1 JOIN Treatment_Types AS T2 GROUP BY T2.treatment_type_code ORDER BY Sum ( T1.charge_amount ) Asc LIMIT value",
        -14.24681043624878
      ],
      [
        "SELECT T1.treatment_type_description FROM Treatment_Types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T2.treatment_type_code ORDER BY Count ( T2.treatment_type_code ) Asc LIMIT value",
        -14.295689582824707
      ],
      [
        "SELECT treatment_type_description FROM Treatment_Types ORDER BY treatment_type_code Asc LIMIT value",
        -15.393885612487793
      ],
      [
        "SELECT T1.treatment_type_description FROM Treatment_Types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code ORDER BY T2.treatment_type_code Asc LIMIT value",
        -16.405977725982666
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.treatment_type_description FROM Treatment_Types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T2.treatment_type_code ORDER BY Count ( * ) Asc LIMIT 1",
    "predicted_parse": "SELECT T1.treatment_type_description FROM Treatment_Types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T2.treatment_type_code ORDER BY Count ( * ) Asc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: for each row in treatment types table , find the corresponding rows in treatments table",
      "Step 2: find the number of rows of each value of treatments 's treatment type code of the results of step 1",
      "Step 3: find the treatment type description of the results of step 1 with smallest value in the results of step 2"
    ],
    "template_feedback": "in step 3 , order the results by summation of cost of treatment in place of number of rows .",
    "primary_span": [
      [
        4,
        12
      ]
    ],
    "secondary_span": [
      [
        13,
        19
      ]
    ],
    "edits": [
      "summation of cost of treatment",
      "number of rows"
    ],
    "edits_original": "< orderBy > add summation of cost of treatment </ orderBy > < orderBy > remove number of rows </ orderBy >"
  },
  {
    "db_id": "car_1",
    "feedback": "i want horsepower not cylinders.",
    "question": "What is the number of the cars with horsepower more than 150?",
    "gold_parse": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150",
    "beam": [
      [
        "SELECT Count ( * ) FROM cars_data WHERE Cylinders > value",
        -0.8710713386535645
      ],
      [
        "SELECT Count ( * ) FROM cars_data WHERE Accelerate > value",
        -0.9399442672729492
      ],
      [
        "SELECT Count ( * ) FROM cars_data WHERE Horsepower > value",
        -2.0390021800994873
      ],
      [
        "SELECT Count ( * ) FROM cars_data WHERE Weight > value",
        -2.8247950077056885
      ],
      [
        "SELECT Count ( * ) FROM model_list WHERE ModelId > value",
        -6.965680122375488
      ],
      [
        "SELECT Count ( * ) FROM cars_data WHERE Edispl > value",
        -8.230222702026367
      ],
      [
        "SELECT Count ( * ) FROM cars_data WHERE MPG > value",
        -8.86207389831543
      ],
      [
        "SELECT Count ( * ) FROM cars_data WHERE Year > value",
        -12.617506980895996
      ],
      [
        "SELECT Count ( * ) FROM car_makers WHERE Maker > value",
        -13.287016868591309
      ],
      [
        "SELECT Count ( * ) FROM car_makers WHERE FullName > value",
        -13.582839965820312
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM cars_data WHERE Cylinders > value",
        -13.89440631866455
      ],
      [
        "SELECT Count ( * ) FROM cars_data WHERE Cylinders > = value",
        -14.029218196868896
      ],
      [
        "SELECT Count ( * ) FROM model_list WHERE Model > value",
        -14.039163589477539
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM cars_data WHERE Accelerate > value",
        -14.100997924804688
      ],
      [
        "SELECT Count ( * ) FROM cars_data WHERE Id > value",
        -14.185260772705078
      ],
      [
        "SELECT Count ( * ) FROM continents",
        -14.385581016540527
      ],
      [
        "SELECT Count ( * ) FROM cars_data WHERE Cylinders = value",
        -14.398609638214111
      ],
      [
        "SELECT Count ( * ) FROM cars_data WHERE MPG = value",
        -14.741548299789429
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM cars_data WHERE Horsepower > value",
        -15.12894320487976
      ],
      [
        "SELECT Count ( * ) , MPG FROM cars_data WHERE Accelerate > value",
        -15.683537721633911
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM cars_data WHERE Cylinders > 150",
    "predicted_parse": "SELECT Count ( * ) FROM cars_data WHERE Cylinders > value",
    "predicted_parse_explanation": [
      "find the number of rows in cars data table whose cylinders greater than 150"
    ],
    "template_feedback": "consider the horsepower greater than 150 conditions in place of the cylinders greater than 150 conditions .",
    "primary_span": [
      [
        0,
        6
      ]
    ],
    "secondary_span": [
      [
        7,
        16
      ]
    ],
    "edits": [
      "horsepower greater than 150",
      "cylinders greater than 150"
    ],
    "edits_original": "< where > add horsepower greater than 150 </ where > < where > remove cylinders greater than 150 </ where >"
  },
  {
    "db_id": "world_1",
    "feedback": "use continent and language instead of region and continent respectively and also ensure it is spoken in country.",
    "question": "What is the number of distinct continents where Chinese is spoken?",
    "gold_parse": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"",
    "beam": [
      [
        "SELECT Count ( DISTINCT Region ) FROM country WHERE Continent = value",
        -0.4988741874694824
      ],
      [
        "SELECT Count ( DISTINCT Region ) FROM country WHERE LocalName = value",
        -0.9992556571960449
      ],
      [
        "SELECT Count ( DISTINCT Continent ) FROM country WHERE LocalName = value",
        -5.0650224685668945
      ],
      [
        "SELECT Count ( DISTINCT Continent ) FROM country WHERE Continent = value",
        -5.127240180969238
      ],
      [
        "SELECT Count ( * ) FROM country WHERE Continent = value",
        -5.136706352233887
      ],
      [
        "SELECT Count ( DISTINCT Region ) FROM country WHERE Name = value",
        -5.787269115447998
      ],
      [
        "SELECT Count ( * ) FROM country WHERE LocalName = value",
        -6.456944465637207
      ],
      [
        "SELECT Count ( DISTINCT LocalName ) FROM country WHERE LocalName = value",
        -7.225099563598633
      ],
      [
        "SELECT Count ( DISTINCT LocalName ) FROM country WHERE Continent = value",
        -7.259568214416504
      ],
      [
        "SELECT Count ( DISTINCT Name ) FROM country WHERE Continent = value",
        -9.213385581970215
      ],
      [
        "SELECT Count ( Region ) FROM country WHERE Continent = value",
        -9.422420978546143
      ],
      [
        "SELECT Count ( DISTINCT Continent ) FROM country WHERE Name = value",
        -9.477641105651855
      ],
      [
        "SELECT Count ( Region ) FROM country WHERE LocalName = value",
        -9.81028699874878
      ],
      [
        "SELECT Count ( DISTINCT Name ) FROM country WHERE LocalName = value",
        -9.934422492980957
      ],
      [
        "SELECT Count ( DISTINCT T1.District ) FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = value",
        -10.901832580566406
      ],
      [
        "SELECT Count ( DISTINCT LocalName ) FROM country WHERE Name = value",
        -11.737017631530762
      ],
      [
        "SELECT Count ( DISTINCT HeadOfState ) FROM country WHERE Continent = value",
        -11.902425765991211
      ],
      [
        "SELECT Count ( DISTINCT T1.District ) FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.LocalName = value",
        -12.171579360961914
      ],
      [
        "SELECT Count ( * ) FROM country WHERE Name = value",
        -12.524450302124023
      ],
      [
        "SELECT Count ( DISTINCT GovernmentForm ) FROM country WHERE Continent = value",
        -12.589862823486328
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( DISTINCT Region ) FROM country WHERE Continent = \"Chinese\"",
    "predicted_parse": "SELECT Count ( DISTINCT Region ) FROM country WHERE Continent = value",
    "predicted_parse_explanation": [
      "find the number of different region in country table whose continent equals Chinese"
    ],
    "template_feedback": "additionally use the information from the countrylanguage table besides the country table . consider the language equals Chinese conditions in place of the continent equals Chinese conditions . find number of different continent in place of number of different region .",
    "primary_span": [
      [
        0,
        7
      ],
      [
        13,
        18
      ],
      [
        28,
        32
      ]
    ],
    "secondary_span": [
      [
        8,
        12
      ],
      [
        19,
        27
      ],
      [
        33,
        40
      ]
    ],
    "edits": [
      "number of distinct continent",
      "number of distinct region",
      "countrylanguage",
      "language equals \"Chinese\"",
      "continent equals \"Chinese\""
    ],
    "edits_original": "< select > add number of distinct continent </ select > < select > remove number of distinct region </ select > < from > add countrylanguage </ from > < where > add language equals \" Chinese \" </ where > < where > remove continent equals \" Chinese \" </ where >"
  },
  {
    "db_id": "employee_hire_evaluation",
    "feedback": "I want table of evaluation in step 1.",
    "question": "Which employee received the most awards in evaluations? Give me the employee name.",
    "gold_parse": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1",
    "beam": [
      [
        "SELECT Name FROM employee GROUP BY Employee_ID ORDER BY Count ( * ) Desc LIMIT value",
        -5.7220458984375e-05
      ],
      [
        "SELECT T1.Name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID GROUP BY T2.Employee_ID ORDER BY Count ( * ) Desc LIMIT value",
        -10.592216491699219
      ],
      [
        "SELECT T1.Name FROM employee AS T1 JOIN hiring AS T2 ON T1.Employee_ID = T2.Employee_ID GROUP BY T2.Employee_ID ORDER BY Count ( * ) Desc LIMIT value",
        -11.322772979736328
      ],
      [
        "SELECT Name FROM employee GROUP BY Employee_ID ORDER BY Count ( * ) Desc",
        -11.822491645812988
      ],
      [
        "SELECT Name FROM employee GROUP BY Name ORDER BY Count ( * ) Desc LIMIT value",
        -12.444877624511719
      ],
      [
        "SELECT Name , Employee_ID FROM employee GROUP BY Employee_ID ORDER BY Count ( * ) Desc LIMIT value",
        -13.340720176696777
      ],
      [
        "SELECT Name FROM employee GROUP BY Employee_ID",
        -13.634364128112793
      ],
      [
        "SELECT Name FROM employee GROUP BY Employee_ID , Employee_ID ORDER BY Count ( * ) Desc LIMIT value",
        -13.705044269561768
      ],
      [
        "SELECT DISTINCT Name FROM employee GROUP BY Employee_ID ORDER BY Count ( * ) Desc LIMIT value",
        -13.710531234741211
      ],
      [
        "SELECT T1.Name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID ORDER BY T2.Year_awarded Desc LIMIT value",
        -14.31322979927063
      ],
      [
        "SELECT Name FROM employee GROUP BY Employee_ID ORDER BY Count ( * ) Asc LIMIT value",
        -14.996927261352539
      ],
      [
        "SELECT DISTINCT Name FROM employee GROUP BY Employee_ID ORDER BY Count ( * ) Desc LIMIT value",
        -15.082039833068848
      ],
      [
        "SELECT Name FROM employee GROUP BY Employee_ID ORDER BY Sum ( * ) Desc LIMIT value",
        -15.196030139923096
      ],
      [
        "SELECT Name FROM employee ORDER BY Employee_ID Desc LIMIT value",
        -15.298917770385742
      ],
      [
        "SELECT Name FROM employee GROUP BY Employee_ID ORDER BY Avg ( * ) Desc LIMIT value",
        -15.491402626037598
      ],
      [
        "SELECT T1.Name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID ORDER BY T2.Bonus Desc LIMIT value",
        -15.505080938339233
      ],
      [
        "SELECT T1.Name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID GROUP BY T1.Employee_ID , T2.Year_awarded ORDER BY Count ( * ) Desc LIMIT value",
        -15.639416217803955
      ],
      [
        "SELECT Name , Name FROM employee GROUP BY Employee_ID ORDER BY Count ( * ) Desc LIMIT value",
        -16.023494720458984
      ],
      [
        "SELECT Name FROM employee GROUP BY Max ( Employee_ID ) ORDER BY Count ( * ) Desc LIMIT value",
        -16.039469718933105
      ],
      [
        "SELECT Name FROM employee ORDER BY Age Desc LIMIT value",
        -16.208481788635254
      ]
    ],
    "predicted_parse_with_values": "SELECT Name FROM employee GROUP BY Employee_ID ORDER BY Count ( * ) Desc LIMIT 1",
    "predicted_parse": "SELECT Name FROM employee GROUP BY Employee_ID ORDER BY Count ( * ) Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of employee id in employee table",
      "Step 2: find the name in employee table with largest value in the results of step 1"
    ],
    "template_feedback": "in step 1 , additionally use the information from the evaluation table besides the employee table .",
    "primary_span": [
      [
        4,
        11
      ]
    ],
    "secondary_span": [
      [
        12,
        16
      ]
    ],
    "edits": [
      "evaluation"
    ],
    "edits_original": "< from > add evaluation </ from >"
  },
  {
    "db_id": "wta_1",
    "feedback": "Use smallest in place of largest.",
    "question": "Find the first name and country code of the oldest player.",
    "gold_parse": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1",
    "beam": [
      [
        "SELECT first_name , country_code FROM players ORDER BY birth_date Desc LIMIT value",
        -0.7108993530273438
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.loser_age Desc LIMIT value",
        -0.8689947128295898
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.winner_age Desc LIMIT value",
        -2.522566795349121
      ],
      [
        "SELECT first_name , country_code FROM players ORDER BY birth_date Asc LIMIT value",
        -5.3586015701293945
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.loser_age Asc LIMIT value",
        -5.50071907043457
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.winner_age Asc LIMIT value",
        -7.96025276184082
      ],
      [
        "SELECT first_name , country_code FROM players",
        -11.803720474243164
      ],
      [
        "SELECT first_name , country_code FROM players ORDER BY birth_date Desc",
        -12.943992614746094
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.loser_age Desc",
        -12.976214408874512
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_age = ( SELECT Max ( T2.loser_age ) FROM matches AS T2 )",
        -14.014203071594238
      ],
      [
        "SELECT T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.loser_age Desc LIMIT value",
        -14.152294158935547
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 UNION SELECT Max ( T2.loser_age ) FROM matches AS T2",
        -14.156137466430664
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.loser_age - T1.birth_date Desc LIMIT value",
        -14.248029708862305
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_age = ( SELECT Max ( T2.loser_age ) FROM matches AS T2 ) ORDER BY T1.birth_date Asc LIMIT value",
        -14.278621673583984
      ],
      [
        "SELECT first_name FROM players ORDER BY birth_date Desc LIMIT value",
        -14.541486740112305
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T1.country_code ORDER BY T2.loser_age Desc LIMIT value",
        -14.56695556640625
      ],
      [
        "SELECT first_name , country_code , country_code FROM players ORDER BY birth_date Desc LIMIT value",
        -14.98045825958252
      ],
      [
        "SELECT T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.winner_age Desc LIMIT value",
        -16.010173797607422
      ],
      [
        "SELECT T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.loser_age Asc LIMIT value",
        -16.65322971343994
      ],
      [
        "SELECT first_name FROM players ORDER BY birth_date Asc LIMIT value",
        -16.81528377532959
      ]
    ],
    "predicted_parse_with_values": "SELECT first_name , country_code FROM players ORDER BY birth_date Desc LIMIT 1",
    "predicted_parse": "SELECT first_name , country_code FROM players ORDER BY birth_date Desc LIMIT value",
    "predicted_parse_explanation": [
      "find the first name and country code in players table with largest value of birth date"
    ],
    "template_feedback": "use the smallest in place of largest .",
    "primary_span": [
      [
        0,
        2
      ]
    ],
    "secondary_span": [
      [
        3,
        7
      ]
    ],
    "edits": [
      "descending"
    ],
    "edits_original": "< orderBy > remove descending </ orderBy >"
  },
  {
    "db_id": "car_1",
    "feedback": "use model list table in place of car makers table and delete those last full name for which value is american motor company.",
    "question": "How many car models were produced by the maker with full name American Motor Company?",
    "gold_parse": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'",
    "beam": [
      [
        "SELECT Count ( * ) FROM car_makers WHERE FullName = value AND FullName = value",
        -0.2882065773010254
      ],
      [
        "SELECT Count ( * ) FROM car_makers WHERE FullName = value",
        -1.6395721435546875
      ],
      [
        "SELECT Count ( * ) FROM car_makers WHERE FullName = value AND Maker = value",
        -3.210909128189087
      ],
      [
        "SELECT Count ( * ) FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country WHERE T2.FullName = value AND T1.CountryName = value",
        -4.862582206726074
      ],
      [
        "SELECT Count ( * ) FROM car_makers WHERE FullName LIKE value",
        -4.943017959594727
      ],
      [
        "SELECT Count ( * ) FROM car_makers WHERE FullName = value AND FullName LIKE value",
        -8.514800071716309
      ],
      [
        "SELECT Count ( * ) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id WHERE T1.FullName = value AND T4.Edispl = value",
        -8.916842460632324
      ],
      [
        "SELECT Count ( * ) FROM car_makers WHERE FullName = value AND FullName ! = value",
        -9.458483219146729
      ],
      [
        "SELECT Count ( * ) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id WHERE T1.FullName = value AND T4.Year = value",
        -9.458736419677734
      ],
      [
        "SELECT Count ( * ) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model WHERE T1.FullName = value AND T3.Make = value",
        -9.735053062438965
      ],
      [
        "SELECT Count ( * ) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker WHERE T1.FullName = value AND T2.Maker = value",
        -10.366382598876953
      ],
      [
        "SELECT Count ( * ) FROM car_makers WHERE FullName BETWEEN value AND value",
        -12.485549926757812
      ],
      [
        "SELECT Count ( * ) FROM car_makers WHERE FullName < value",
        -12.615862846374512
      ],
      [
        "SELECT Count ( DISTINCT T2.Model ) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker WHERE T1.FullName = value",
        -14.239603996276855
      ],
      [
        "SELECT Count ( DISTINCT T3.Model ) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model WHERE T1.FullName = value",
        -14.292011260986328
      ],
      [
        "SELECT Sum ( * ) FROM car_makers WHERE FullName = value",
        -14.552534222602844
      ],
      [
        "SELECT FullName FROM car_makers WHERE FullName = value",
        -14.558837056159973
      ],
      [
        "SELECT Count ( * ) FROM car_makers WHERE Maker = value",
        -14.949579238891602
      ],
      [
        "SELECT Count ( DISTINCT Maker ) FROM car_makers WHERE FullName = value",
        -15.25344467163086
      ],
      [
        "SELECT Count ( * ) FROM car_makers WHERE FullName ! = value",
        -15.376116752624512
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM car_makers WHERE FullName = \"American Motor Company\" AND FullName = \"American Motor Company\"",
    "predicted_parse": "SELECT Count ( * ) FROM car_makers WHERE FullName = value AND FullName = value",
    "predicted_parse_explanation": [
      "find the number of rows in car makers table whose full name equals American Motor Company and full name equals American Motor Company"
    ],
    "template_feedback": "additionally use the information from the model list table besides the car makers table .",
    "primary_span": [
      [
        0,
        8
      ]
    ],
    "secondary_span": [
      [
        9,
        14
      ]
    ],
    "edits": [
      "model list",
      "full name equals \"American Motor Company\""
    ],
    "edits_original": "< from > add model list </ from > < where > remove full name equals \" American Motor Company \" </ where >"
  },
  {
    "db_id": "world_1",
    "feedback": "you need to find similar rows of countrylanguage having Afghanistan as the name of country.",
    "question": "How many official languages are spoken in Afghanistan?",
    "gold_parse": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"",
    "beam": [
      [
        "SELECT Count ( DISTINCT Code ) FROM country WHERE Continent = value",
        -0.10666656494140625
      ],
      [
        "SELECT Count ( DISTINCT Code2 ) FROM country WHERE Continent = value",
        -2.3001108169555664
      ],
      [
        "SELECT Count ( * ) FROM country WHERE Continent = value",
        -7.02221155166626
      ],
      [
        "SELECT Count ( Code ) FROM country WHERE Continent = value",
        -10.885753631591797
      ],
      [
        "SELECT Count ( DISTINCT T2.Language ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = value",
        -11.775832176208496
      ],
      [
        "SELECT Count ( DISTINCT LocalName ) FROM country WHERE Continent = value",
        -13.351943969726562
      ],
      [
        "SELECT Count ( DISTINCT Code ) FROM country WHERE Code2 = value",
        -13.467199325561523
      ],
      [
        "SELECT Count ( Code2 ) FROM country WHERE Continent = value",
        -13.559536933898926
      ],
      [
        "SELECT Count ( DISTINCT Code ) FROM country WHERE LocalName = value",
        -13.664329528808594
      ],
      [
        "SELECT Code FROM country WHERE Continent = value",
        -13.810478210449219
      ],
      [
        "SELECT Count ( DISTINCT Code ) FROM country WHERE Name = value",
        -14.403968811035156
      ],
      [
        "SELECT DISTINCT Count ( DISTINCT Code ) FROM country WHERE Continent = value",
        -14.655040740966797
      ],
      [
        "SELECT Count ( DISTINCT Code ) FROM country",
        -14.946139335632324
      ],
      [
        "SELECT Sum ( Code ) FROM country WHERE Continent = value",
        -15.348153114318848
      ],
      [
        "SELECT Count ( DISTINCT Code ) FROM country WHERE Continent LIKE value",
        -15.398015022277832
      ],
      [
        "SELECT Count ( DISTINCT Code2 ) FROM country WHERE Code2 = value",
        -15.647419929504395
      ],
      [
        "SELECT Avg ( Code ) FROM country WHERE Continent = value",
        -15.67010498046875
      ],
      [
        "SELECT Count ( DISTINCT Code2 ) FROM country WHERE LocalName = value",
        -15.811429023742676
      ],
      [
        "SELECT Count ( DISTINCT Code ) FROM country WHERE Continent > value",
        -15.826738357543945
      ],
      [
        "SELECT Count ( DISTINCT Code2 ) FROM country",
        -16.256042957305908
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( DISTINCT Code ) FROM country WHERE Continent = \"Afghanistan\"",
    "predicted_parse": "SELECT Count ( DISTINCT Code ) FROM country WHERE Continent = value",
    "predicted_parse_explanation": [
      "find the number of different code in country table whose continent equals Afghanistan"
    ],
    "template_feedback": "additionally use the information from the countrylanguage table besides the country table . consider the is official equals T and name equals Afghanistan conditions in place of the continent equals Afghanistan conditions . find number of rows in place of number of different code .",
    "primary_span": [
      [
        0,
        7
      ],
      [
        13,
        23
      ],
      [
        33,
        36
      ]
    ],
    "secondary_span": [
      [
        8,
        12
      ],
      [
        24,
        32
      ],
      [
        37,
        44
      ]
    ],
    "edits": [
      "number of rows",
      "number of distinct code",
      "countrylanguage",
      "name equals \"Afghanistan\"",
      "is official equals \"T\"",
      "continent equals \"Afghanistan\""
    ],
    "edits_original": "< select > add number of rows </ select > < select > remove number of distinct code </ select > < from > add countrylanguage </ from > < where > add name equals \" Afghanistan \" </ where > < where > add is official equals \" T \" </ where > < where > remove continent equals \" Afghanistan \" </ where >"
  },
  {
    "db_id": "world_1",
    "feedback": "you need to search the language of countrylanguage which are frequently used by population in that country.",
    "question": "What is the language spoken by the largest percentage of people in each country?",
    "gold_parse": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode",
    "beam": [
      [
        "SELECT Name , Continent FROM country GROUP BY Continent ORDER BY Max ( Population ) Desc LIMIT value",
        -0.8105354309082031
      ],
      [
        "SELECT Name FROM country GROUP BY Continent ORDER BY Max ( Population ) Desc LIMIT value",
        -1.783163070678711
      ],
      [
        "SELECT Name , Continent FROM country GROUP BY Continent",
        -1.9867639541625977
      ],
      [
        "SELECT Continent , Max ( Population ) FROM country GROUP BY Continent ORDER BY Max ( Population ) Desc LIMIT value",
        -2.116959571838379
      ],
      [
        "SELECT Name , Max ( Population ) FROM country GROUP BY Continent",
        -3.395009994506836
      ],
      [
        "SELECT Name , Continent FROM country GROUP BY Continent ORDER BY Sum ( Population ) Desc LIMIT value",
        -3.742854118347168
      ],
      [
        "SELECT Continent , Max ( Population ) FROM country GROUP BY Continent",
        -3.876911163330078
      ],
      [
        "SELECT Continent FROM country GROUP BY Continent ORDER BY Max ( Population ) Desc LIMIT value",
        -4.071725845336914
      ],
      [
        "SELECT Name FROM country GROUP BY Continent ORDER BY Sum ( Population ) Desc LIMIT value",
        -4.46604061126709
      ],
      [
        "SELECT Continent , Max ( GNP ) FROM country GROUP BY Continent ORDER BY Max ( Population ) Desc LIMIT value",
        -5.297504425048828
      ],
      [
        "SELECT Continent , Max ( Population ) FROM country GROUP BY Continent ORDER BY Sum ( Population ) Desc LIMIT value",
        -5.751765251159668
      ],
      [
        "SELECT Name , Max ( Population ) FROM country GROUP BY Continent ORDER BY Max ( Population ) Desc LIMIT value",
        -5.9140119552612305
      ],
      [
        "SELECT Name , Max ( GNP ) FROM country GROUP BY Continent",
        -6.326148986816406
      ],
      [
        "SELECT Name , Continent FROM country GROUP BY Continent ORDER BY Population Desc LIMIT value",
        -6.528931617736816
      ],
      [
        "SELECT Name , Continent FROM country GROUP BY Continent ORDER BY Max ( GNP ) Desc LIMIT value",
        -6.708066940307617
      ],
      [
        "SELECT Continent FROM country GROUP BY Continent ORDER BY Sum ( Population ) Desc LIMIT value",
        -6.838070869445801
      ],
      [
        "SELECT Name FROM country GROUP BY Continent ORDER BY Population Desc LIMIT value",
        -7.06370735168457
      ],
      [
        "SELECT Continent , Max ( GNP ) FROM country GROUP BY Continent",
        -7.450722694396973
      ],
      [
        "SELECT Name FROM country GROUP BY Continent ORDER BY Max ( GNP ) Desc LIMIT value",
        -7.672853469848633
      ],
      [
        "SELECT Continent , Max ( Population ) FROM country GROUP BY Continent ORDER BY Max ( GNP ) Desc LIMIT value",
        -8.063544273376465
      ]
    ],
    "predicted_parse_with_values": "SELECT Name , Continent FROM country GROUP BY Continent ORDER BY Max ( Population ) Desc LIMIT 1",
    "predicted_parse": "SELECT Name , Continent FROM country GROUP BY Continent ORDER BY Max ( Population ) Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: find the maximum population of each value of continent in country table",
      "Step 2: find the name and continent in country table with largest value in the results of step 1"
    ],
    "template_feedback": "in step 1 , use countrylanguage table in place of country table . find for each value of countrycode in place of continent . in step 2 , find maximum percentage , language , and countrycode in place of continent and name . you should not find the largest of the results . show me all the results .",
    "primary_span": [
      [
        4,
        6
      ],
      [
        13,
        18
      ],
      [
        28,
        35
      ],
      [
        43,
        58
      ]
    ],
    "secondary_span": [
      [
        7,
        12
      ],
      [
        19,
        23
      ],
      [
        36,
        42
      ]
    ],
    "edits": [
      "language",
      "countrycode",
      "maximum percentage",
      "name",
      "continent",
      "countrylanguage",
      "country",
      "countrycode",
      "continent",
      "maximum population",
      "descending",
      "1"
    ],
    "edits_original": "< select > add language </ select > < select > add countrycode </ select > < select > add maximum percentage </ select > < select > remove name </ select > < select > remove continent </ select > < from > add countrylanguage </ from > < from > remove country </ from > < groupBy > add countrycode </ groupBy > < groupBy > remove continent </ groupBy > < orderBy > remove maximum population </ orderBy > < orderBy > remove descending </ orderBy > < limit > remove 1 </ limit >"
  },
  {
    "db_id": "wta_1",
    "feedback": "You should use winner age in place of one of the loser age.",
    "question": "Find the average age of losers and winners of all matches.",
    "gold_parse": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches",
    "beam": [
      [
        "SELECT Avg ( loser_age ) , Avg ( loser_age ) FROM matches",
        -0.3672351837158203
      ],
      [
        "SELECT Avg ( loser_age ) , Avg ( winner_age ) FROM matches",
        -1.2363462448120117
      ],
      [
        "SELECT Avg ( winner_age ) , Avg ( loser_age ) FROM matches",
        -4.761435508728027
      ],
      [
        "SELECT Avg ( winner_age ) , Avg ( winner_age ) FROM matches",
        -5.797761917114258
      ],
      [
        "SELECT Avg ( loser_age ) , Min ( loser_age ) FROM matches",
        -6.471619606018066
      ],
      [
        "SELECT Avg ( loser_age ) , Min ( winner_age ) FROM matches",
        -7.140527725219727
      ],
      [
        "SELECT Avg ( loser_age ) , Max ( loser_age ) FROM matches",
        -7.260108947753906
      ],
      [
        "SELECT Avg ( loser_age ) , Avg ( loser_entry ) FROM matches",
        -7.379436492919922
      ],
      [
        "SELECT Avg ( loser_age ) , Max ( winner_age ) FROM matches",
        -8.282241821289062
      ],
      [
        "SELECT Avg ( loser_age ) , Count ( winner_age ) FROM matches",
        -8.358356475830078
      ],
      [
        "SELECT Avg ( loser_age ) , Count ( loser_age ) FROM matches",
        -8.601640701293945
      ],
      [
        "SELECT Avg ( loser_age ) , Sum ( loser_age ) FROM matches",
        -8.601946830749512
      ],
      [
        "SELECT Avg ( loser_age ) , loser_entry FROM matches",
        -8.651355743408203
      ],
      [
        "SELECT Avg ( loser_age ) , Count ( * ) FROM matches",
        -9.363755702972412
      ],
      [
        "SELECT Avg ( loser_age ) , Sum ( winner_age ) FROM matches",
        -9.435810089111328
      ],
      [
        "SELECT Avg ( loser_age ) , Avg ( winner_rank ) FROM matches",
        -9.46120834350586
      ],
      [
        "SELECT Avg ( loser_age ) , Avg ( loser_rank ) FROM matches",
        -9.731307029724121
      ],
      [
        "SELECT Avg ( loser_age ) , Avg ( draw_size ) FROM matches",
        -10.014047622680664
      ],
      [
        "SELECT Avg ( loser_age ) , Avg ( loser_rank_points ) FROM matches",
        -10.236123085021973
      ],
      [
        "SELECT Avg ( loser_age ) FROM matches",
        -12.472309112548828
      ]
    ],
    "predicted_parse_with_values": "SELECT Avg ( loser_age ) , Avg ( loser_age ) FROM matches",
    "predicted_parse": "SELECT Avg ( loser_age ) , Avg ( loser_age ) FROM matches",
    "predicted_parse_explanation": [
      "find the average loser age and average loser age in matches table"
    ],
    "template_feedback": "additionally find average winner age .",
    "primary_span": [
      [
        0,
        5
      ]
    ],
    "secondary_span": [],
    "edits": [
      "average winner age",
      "average loser age"
    ],
    "edits_original": "< select > add average winner age </ select > < select > remove average loser age </ select >"
  },
  {
    "db_id": "student_transcripts_tracking",
    "feedback": "Ensure course is enrolled by number of students in different transcripts .",
    "question": "How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.",
    "gold_parse": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1",
    "beam": [
      [
        "SELECT Count ( * ) , course_id FROM Student_Enrolment_Courses GROUP BY course_id",
        -0.26531982421875
      ],
      [
        "SELECT Count ( * ) , course_id FROM Student_Enrolment_Courses GROUP BY course_id ORDER BY Count ( * ) Desc LIMIT value",
        -1.5934791564941406
      ],
      [
        "SELECT Count ( * ) , T1.student_enrolment_id FROM Student_Enrolment AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.student_enrolment_id = T2.student_enrolment_id GROUP BY T2.course_id",
        -4.560481548309326
      ],
      [
        "SELECT Count ( * ) , T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id",
        -4.7628912925720215
      ],
      [
        "SELECT Count ( * ) , T1.student_enrolment_id FROM Student_Enrolment AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.student_enrolment_id = T2.student_enrolment_id GROUP BY T2.course_id ORDER BY Count ( * ) Desc LIMIT value",
        -6.1638946533203125
      ],
      [
        "SELECT Count ( * ) , T2.course_id FROM Student_Enrolment AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.student_enrolment_id = T2.student_enrolment_id GROUP BY T1.student_enrolment_id",
        -6.282309532165527
      ],
      [
        "SELECT Count ( * ) , T2.course_id FROM Student_Enrolment AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.student_enrolment_id = T2.student_enrolment_id GROUP BY T1.student_enrolment_id ORDER BY Count ( * ) Desc LIMIT value",
        -6.87242317199707
      ],
      [
        "SELECT Count ( * ) , T1.student_id FROM Student_Enrolment AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.student_enrolment_id = T2.student_enrolment_id GROUP BY T2.course_id",
        -6.918234825134277
      ],
      [
        "SELECT Count ( * ) , T1.semester_name FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id JOIN Student_Enrolment_Courses AS T3 ON T2.student_enrolment_id = T3.student_enrolment_id GROUP BY T3.course_id",
        -7.1967597007751465
      ],
      [
        "SELECT Count ( DISTINCT T2.course_id ) , T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id ORDER BY Count ( * ) Desc LIMIT value",
        -7.4686360359191895
      ],
      [
        "SELECT Count ( * ) FROM Student_Enrolment_Courses GROUP BY course_id ORDER BY Count ( * ) Desc LIMIT value",
        -7.793087005615234
      ],
      [
        "SELECT Count ( * ) , student_enrolment_id FROM Student_Enrolment_Courses GROUP BY course_id",
        -7.900683879852295
      ],
      [
        "SELECT Count ( DISTINCT course_id ) FROM Student_Enrolment_Courses GROUP BY course_id ORDER BY Count ( * ) Desc LIMIT value",
        -8.131108283996582
      ],
      [
        "SELECT Count ( DISTINCT T2.course_id ) , T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id",
        -8.17481279373169
      ],
      [
        "SELECT Count ( DISTINCT course_id ) FROM Student_Enrolment_Courses",
        -8.42824649810791
      ],
      [
        "SELECT Count ( * ) , T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id ORDER BY Count ( * ) Desc LIMIT value",
        -8.53667402267456
      ],
      [
        "SELECT Count ( * ) , T1.degree_program_id FROM Student_Enrolment AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.student_enrolment_id = T2.student_enrolment_id GROUP BY T2.course_id",
        -8.631298065185547
      ],
      [
        "SELECT Count ( DISTINCT T2.course_id ) , T1.student_enrolment_id FROM Student_Enrolment AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.student_enrolment_id = T2.student_enrolment_id GROUP BY T2.course_id ORDER BY Count ( * ) Desc LIMIT value",
        -8.864251136779785
      ],
      [
        "SELECT Count ( * ) , T1.student_id FROM Student_Enrolment AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.student_enrolment_id = T2.student_enrolment_id GROUP BY T2.course_id ORDER BY Count ( * ) Desc LIMIT value",
        -8.988639831542969
      ],
      [
        "SELECT Count ( * ) FROM Addresses",
        -11.69852352142334
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) , course_id FROM Student_Enrolment_Courses GROUP BY course_id",
    "predicted_parse": "SELECT Count ( * ) , course_id FROM Student_Enrolment_Courses GROUP BY course_id",
    "predicted_parse_explanation": [
      "find each value of course id in student enrolment courses table along with the number of the corresponding rows to each value"
    ],
    "template_feedback": "use transcript contents table in place of student enrolment courses table . find for each value of transcript contents 's student course id in place of course id . find transcript contents 's student course id in place of course id . find the result with the largest number of rows .",
    "primary_span": [
      [
        0,
        3
      ],
      [
        12,
        22
      ],
      [
        29,
        35
      ],
      [
        42,
        51
      ]
    ],
    "secondary_span": [
      [
        4,
        11
      ],
      [
        23,
        28
      ],
      [
        36,
        41
      ]
    ],
    "edits": [
      "student course id",
      "course id",
      "transcript contents",
      "student enrolment courses",
      "student course id",
      "course id",
      "number of rows",
      "descending",
      "1"
    ],
    "edits_original": "< select > add student course id </ select > < select > remove course id </ select > < from > add transcript contents </ from > < from > remove student enrolment courses </ from > < groupBy > add student course id </ groupBy > < groupBy > remove course id </ groupBy > < orderBy > add number of rows </ orderBy > < orderBy > add descending </ orderBy > < limit > add 1 </ limit >"
  },
  {
    "db_id": "singer",
    "feedback": "You need to utilize year of birth.",
    "question": "What are the names of the singers whose birth years are either 1948 or 1949?",
    "gold_parse": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949",
    "beam": [
      [
        "SELECT Name FROM singer WHERE Citizenship = value OR Citizenship = value",
        -0.0022945404052734375
      ],
      [
        "SELECT Name FROM singer WHERE Birth_Year > value OR Citizenship = value",
        -6.1781415939331055
      ],
      [
        "SELECT Name FROM singer WHERE Citizenship > value OR Citizenship = value",
        -9.528624534606934
      ],
      [
        "SELECT Name FROM singer WHERE Name > value OR Citizenship = value",
        -9.97786283493042
      ],
      [
        "SELECT Name FROM singer WHERE Birth_Year = value OR Citizenship = value",
        -10.594903945922852
      ],
      [
        "SELECT Name FROM singer WHERE Citizenship = value OR Birth_Year = value",
        -11.163867950439453
      ],
      [
        "SELECT Name FROM singer WHERE Citizenship = value OR Citizenship LIKE value",
        -11.1693754196167
      ],
      [
        "SELECT DISTINCT Name FROM singer WHERE Citizenship = value OR Citizenship = value",
        -11.75859260559082
      ],
      [
        "SELECT Name FROM singer WHERE Citizenship = value OR Citizenship = value ORDER BY Name Desc LIMIT value",
        -12.44154977798462
      ],
      [
        "SELECT Name FROM singer WHERE Citizenship = value OR Citizenship = value ORDER BY Name Desc",
        -12.661040782928467
      ],
      [
        "SELECT Name FROM singer WHERE Citizenship ! = value OR Citizenship = value",
        -12.918523788452148
      ],
      [
        "SELECT Name FROM singer WHERE Citizenship = value OR Citizenship ! = value",
        -13.276869773864746
      ],
      [
        "SELECT Name FROM singer WHERE Citizenship = value OR Citizenship = value ORDER BY Birth_Year Desc LIMIT value",
        -13.381608009338379
      ],
      [
        "SELECT DISTINCT Name FROM singer WHERE Citizenship = value OR Citizenship = value",
        -13.522466659545898
      ],
      [
        "SELECT Name FROM singer WHERE Citizenship = value OR Citizenship = value EXCEPT SELECT Name FROM singer WHERE Citizenship = value OR Citizenship = value",
        -13.873034477233887
      ],
      [
        "SELECT Name , Citizenship FROM singer WHERE Citizenship = value OR Citizenship = value",
        -14.18078327178955
      ],
      [
        "SELECT Name FROM singer WHERE Birth_Year > value OR Citizenship LIKE value",
        -14.202352523803711
      ],
      [
        "SELECT Name FROM singer WHERE Citizenship LIKE value OR Citizenship = value",
        -14.397987365722656
      ],
      [
        "SELECT Name FROM singer WHERE Citizenship > value OR Citizenship LIKE value",
        -14.968477249145508
      ],
      [
        "SELECT Name FROM singer WHERE Citizenship = value OR Citizenship > value",
        -15.007981300354004
      ]
    ],
    "predicted_parse_with_values": "SELECT Name FROM singer WHERE Citizenship = 1949 OR Citizenship = 1948",
    "predicted_parse": "SELECT Name FROM singer WHERE Citizenship = value OR Citizenship = value",
    "predicted_parse_explanation": [
      "find the name in singer table whose citizenship equals 1949 or citizenship equals 1948"
    ],
    "template_feedback": "consider the birth year equals 1948 or birth year equals 1949 conditions in place of the citizenship equals 1948 or citizenship equals 1949 conditions .",
    "primary_span": [
      [
        0,
        11
      ]
    ],
    "secondary_span": [
      [
        12,
        24
      ]
    ],
    "edits": [
      "birth year equals 1948 or birth year equals 1949",
      "citizenship equals 1949 or citizenship equals 1948"
    ],
    "edits_original": "< where > add birth year equals 1948 or birth year equals 1949 </ where > < where > remove citizenship equals 1949 or citizenship equals 1948 </ where >"
  },
  {
    "db_id": "student_transcripts_tracking",
    "feedback": "Make sure id of course from courses' table available in student enrollment courses table.",
    "question": "What are all the course names of the courses which ever have students enrolled in?",
    "gold_parse": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id",
    "beam": [
      [
        "SELECT course_name FROM Courses",
        -0.0001678466796875
      ],
      [
        "SELECT course_name FROM Courses GROUP BY course_name HAVING Count ( * ) = value",
        -9.481915473937988
      ],
      [
        "SELECT T1.course_name FROM Courses AS T1 JOIN Degree_Programs AS T2 JOIN Student_Enrolment AS T3 ON T3.degree_program_id = T2.degree_program_id JOIN Student_Enrolment_Courses AS T4 ON T1.course_id = T4.course_id AND T4.student_enrolment_id = T3.student_enrolment_id WHERE T2.degree_summary_name = value",
        -10.347404956817627
      ],
      [
        "SELECT T1.course_name FROM Courses AS T1 INTERSECT SELECT T2.degree_summary_name FROM Degree_Programs AS T2",
        -10.803571701049805
      ],
      [
        "SELECT DISTINCT course_name FROM Courses",
        -11.798978805541992
      ],
      [
        "SELECT course_name FROM Courses EXCEPT SELECT course_name FROM Courses",
        -11.993027687072754
      ],
      [
        "SELECT T1.course_name FROM Courses AS T1 UNION SELECT T2.degree_summary_name FROM Degree_Programs AS T2",
        -12.087889671325684
      ],
      [
        "SELECT degree_summary_name FROM Degree_Programs",
        -13.406664848327637
      ],
      [
        "SELECT T1.course_name , T2.degree_summary_name FROM Courses AS T1 JOIN Degree_Programs AS T2 JOIN Student_Enrolment AS T3 ON T3.degree_program_id = T2.degree_program_id JOIN Student_Enrolment_Courses AS T4 ON T1.course_id = T4.course_id AND T4.student_enrolment_id = T3.student_enrolment_id",
        -13.913840293884277
      ],
      [
        "SELECT T1.course_name FROM Courses AS T1 EXCEPT SELECT T2.degree_summary_name FROM Degree_Programs AS T2",
        -14.139852523803711
      ],
      [
        "SELECT course_name FROM Courses GROUP BY course_name",
        -14.998344421386719
      ],
      [
        "SELECT DISTINCT course_name FROM Courses",
        -15.326258659362793
      ],
      [
        "SELECT course_name FROM Courses ORDER BY course_name Asc LIMIT value",
        -15.363322734832764
      ],
      [
        "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id HAVING Count ( * ) = value",
        -15.569501876831055
      ],
      [
        "SELECT Count ( course_name ) FROM Courses",
        -16.842945098876953
      ],
      [
        "SELECT course_name FROM Courses LIMIT value",
        -17.151599884033203
      ],
      [
        "SELECT Sum ( course_name ) FROM Courses",
        -18.645706176757812
      ],
      [
        "SELECT Min ( course_name ) FROM Courses",
        -18.83502197265625
      ],
      [
        "SELECT Count ( course_name ) FROM Courses",
        -19.147972106933594
      ],
      [
        "SELECT Count ( DISTINCT course_name ) FROM Courses",
        -19.284911632537842
      ]
    ],
    "predicted_parse_with_values": "SELECT course_name FROM Courses",
    "predicted_parse": "SELECT course_name FROM Courses",
    "predicted_parse_explanation": [
      "find the course name in courses table"
    ],
    "template_feedback": "additionally use the information from the student enrolment courses table besides the courses table . make sure no repetition in the results .",
    "primary_span": [
      [
        0,
        9
      ],
      [
        15,
        22
      ]
    ],
    "secondary_span": [
      [
        10,
        14
      ]
    ],
    "edits": [
      "distinct",
      "student enrolment courses"
    ],
    "edits_original": "< select > add distinct </ select > < from > add student enrolment courses </ from >"
  },
  {
    "db_id": "student_transcripts_tracking",
    "feedback": "Need to find result from courses table not from addresses table .",
    "question": "How many courses are there?",
    "gold_parse": "SELECT count(*) FROM Courses",
    "beam": [
      [
        "SELECT Count ( * ) FROM Addresses",
        -2.288818359375e-05
      ],
      [
        "SELECT Sum ( course_name ) FROM Courses",
        -12.055608868598938
      ],
      [
        "SELECT Count ( * ) FROM Courses WHERE course_name = value",
        -12.71890115737915
      ],
      [
        "SELECT Sum ( * ) FROM Addresses",
        -12.991655230522156
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM Addresses",
        -13.082897186279297
      ],
      [
        "SELECT Count ( Count ( * ) ) FROM Addresses",
        -13.517195701599121
      ],
      [
        "SELECT Count ( * ) , course_name FROM Courses",
        -13.812331199645996
      ],
      [
        "SELECT Sum ( course_id ) FROM Courses",
        -14.083028316497803
      ],
      [
        "SELECT Sum ( DISTINCT course_name ) FROM Courses",
        -14.277621865272522
      ],
      [
        "SELECT Count ( * ) FROM Courses ORDER BY course_name Desc",
        -14.353008151054382
      ],
      [
        "SELECT Count ( * ) FROM Courses ORDER BY course_id Desc",
        -15.243051409721375
      ],
      [
        "SELECT Avg ( course_name ) FROM Courses",
        -15.360999584197998
      ],
      [
        "SELECT Count ( * ) FROM Courses GROUP BY course_name",
        -15.668410420417786
      ],
      [
        "SELECT Sum ( course_description ) FROM Courses",
        -15.733709812164307
      ],
      [
        "SELECT Count ( DISTINCT course_name ) FROM Courses",
        -15.741450309753418
      ],
      [
        "SELECT Count ( * ) FROM Courses GROUP BY course_id",
        -15.759600400924683
      ],
      [
        "SELECT Avg ( * ) FROM Addresses",
        -15.790834903717041
      ],
      [
        "SELECT Count ( * ) FROM Addresses AS T1 UNION SELECT T2.course_name FROM Courses AS T2",
        -15.876869440078735
      ],
      [
        "SELECT Avg ( course_id ) FROM Courses",
        -16.59359121322632
      ],
      [
        "SELECT Count ( * ) , Count ( * ) FROM Addresses",
        -16.740601539611816
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM Addresses",
    "predicted_parse": "SELECT Count ( * ) FROM Addresses",
    "predicted_parse_explanation": [
      "find the number of rows in addresses table"
    ],
    "template_feedback": "use courses table in place of addresses table .",
    "primary_span": [
      [
        0,
        2
      ]
    ],
    "secondary_span": [
      [
        3,
        8
      ]
    ],
    "edits": [
      "courses",
      "addresses"
    ],
    "edits_original": "< from > add courses </ from > < from > remove addresses </ from >"
  },
  {
    "db_id": "poker_player",
    "feedback": "earnings is wrong . Take money rank in place of it .",
    "question": "Return the money rank of the poker player with the greatest height.",
    "gold_parse": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
    "beam": [
      [
        "SELECT T1.Earnings FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Height Desc LIMIT value",
        -0.24726486206054688
      ],
      [
        "SELECT T1.Money_Rank FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Height Desc LIMIT value",
        -1.5186042785644531
      ],
      [
        "SELECT T1.Earnings FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height = ( SELECT Max ( T2.Height ) FROM people AS T2 )",
        -11.37618637084961
      ],
      [
        "SELECT Money_Rank FROM poker_player ORDER BY Earnings Desc LIMIT value",
        -11.577454566955566
      ],
      [
        "SELECT T1.Earnings FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Height Desc",
        -12.26116943359375
      ],
      [
        "SELECT T1.Money_Rank FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height = ( SELECT Max ( T2.Height ) FROM people AS T2 )",
        -12.869980812072754
      ],
      [
        "SELECT Earnings FROM poker_player ORDER BY Earnings Desc LIMIT value",
        -12.974874496459961
      ],
      [
        "SELECT T1.Earnings FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Height Asc LIMIT value",
        -13.09126091003418
      ],
      [
        "SELECT T1.Money_Rank FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height = ( SELECT Max ( T2.Height ) FROM people AS T2 ) ORDER BY T2.Height Asc LIMIT value",
        -13.317530632019043
      ],
      [
        "SELECT T1.Money_Rank FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Height Desc",
        -13.525178909301758
      ],
      [
        "SELECT Earnings FROM poker_player",
        -13.605329513549805
      ],
      [
        "SELECT T1.Earnings FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height = ( SELECT Max ( T2.Height ) FROM people AS T2 ) ORDER BY T2.Height Asc LIMIT value",
        -13.726750373840332
      ],
      [
        "SELECT Max ( T1.Earnings ) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Height Desc LIMIT value",
        -14.248908996582031
      ],
      [
        "SELECT T1.Earnings , T1.Money_Rank FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Height Desc LIMIT value",
        -14.425285339355469
      ],
      [
        "SELECT T1.Money_Rank FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID GROUP BY T1.Money_Rank ORDER BY T2.Height Desc LIMIT value",
        -14.584079265594482
      ],
      [
        "SELECT T1.Earnings FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID GROUP BY T1.Money_Rank ORDER BY T2.Height Desc LIMIT value",
        -14.715793132781982
      ],
      [
        "SELECT Money_Rank FROM poker_player",
        -14.718562126159668
      ],
      [
        "SELECT T1.Money_Rank FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Height Asc LIMIT value",
        -14.756532669067383
      ],
      [
        "SELECT Max ( Earnings ) FROM poker_player",
        -14.80259895324707
      ],
      [
        "SELECT T1.Money_Rank FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height = ( SELECT Max ( T2.Height ) FROM people AS T2 ) ORDER BY T2.Height Desc LIMIT value",
        -15.104768753051758
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.Earnings FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Height Desc LIMIT 1",
    "predicted_parse": "SELECT T1.Earnings FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Height Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: for each row in poker player table , find the corresponding rows in people table",
      "Step 2: find the earnings of the results of step 1 with largest value of height"
    ],
    "template_feedback": "in step 2 , find money rank in place of earnings .",
    "primary_span": [
      [
        4,
        6
      ]
    ],
    "secondary_span": [
      [
        7,
        11
      ]
    ],
    "edits": [
      "money rank",
      "earnings"
    ],
    "edits_original": "< select > add money rank </ select > < select > remove earnings </ select >"
  },
  {
    "db_id": "car_1",
    "feedback": "Change accelerate with mpg and model list's model with cars data's cylinders .",
    "question": "What is the average miles per gallon of all the cards with 4 cylinders?",
    "gold_parse": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4",
    "beam": [
      [
        "SELECT Avg ( T3.Accelerate ) FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T1.Model = value",
        -0.07308244705200195
      ],
      [
        "SELECT Avg ( * ) FROM model_list WHERE Model = value",
        -3.390000820159912
      ],
      [
        "SELECT Avg ( T3.Horsepower ) FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T1.Model = value",
        -3.4789042472839355
      ],
      [
        "SELECT Avg ( T3.Accelerate ) , T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T1.Model = value GROUP BY T1.Model",
        -5.91578483581543
      ],
      [
        "SELECT Avg ( T3.Weight ) FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T1.Model = value",
        -7.098397254943848
      ],
      [
        "SELECT Avg ( T3.MPG ) FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T1.Model = value",
        -7.909965515136719
      ],
      [
        "SELECT Avg ( T3.Cylinders ) FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T1.Model = value",
        -8.074873924255371
      ],
      [
        "SELECT Avg ( ModelId ) FROM model_list WHERE Model = value",
        -8.293240547180176
      ],
      [
        "SELECT Avg ( T3.Edispl ) FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T1.Model = value",
        -8.305440902709961
      ],
      [
        "SELECT Avg ( Accelerate ) FROM cars_data",
        -8.318365812301636
      ],
      [
        "SELECT Avg ( T3.Horsepower ) , T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T1.Model = value GROUP BY T1.Model",
        -8.471511363983154
      ],
      [
        "SELECT Avg ( * ) , Model FROM model_list WHERE Model = value GROUP BY Model",
        -8.798499464988708
      ],
      [
        "SELECT Avg ( T3.Accelerate ) , T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id GROUP BY T1.Model",
        -8.829916954040527
      ],
      [
        "SELECT Avg ( T3.Accelerate ) , T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id GROUP BY T1.Model HAVING Count ( * ) > value",
        -9.853057622909546
      ],
      [
        "SELECT Avg ( T3.Accelerate ) , T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id GROUP BY T1.Model HAVING Count ( * ) > = value",
        -10.089538335800171
      ],
      [
        "SELECT Avg ( Model ) FROM model_list WHERE Model = value",
        -10.106964111328125
      ],
      [
        "SELECT Avg ( * ) , Model FROM model_list GROUP BY Model",
        -10.415104389190674
      ],
      [
        "SELECT Avg ( T3.Year ) FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T1.Model = value",
        -10.632688522338867
      ],
      [
        "SELECT Avg ( * ) , T3.Accelerate FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T1.Model = value GROUP BY T1.Model",
        -10.819355726242065
      ],
      [
        "SELECT Avg ( T3.Accelerate ) , T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id GROUP BY T1.Model HAVING Count ( * ) < value",
        -10.846779584884644
      ]
    ],
    "predicted_parse_with_values": "SELECT Avg ( T3.Accelerate ) FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T1.Model = 4",
    "predicted_parse": "SELECT Avg ( T3.Accelerate ) FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T1.Model = value",
    "predicted_parse_explanation": [
      "Step 1: for each row in model list table , find the corresponding rows in car names table and in cars data table",
      "Step 2: find the average accelerate of the results of step 1 whose model list 's model equals 4"
    ],
    "template_feedback": "in step 1 , do not use the car names table and model list table . in step 2 , consider the cylinders equals 4 conditions in place of the model list 's model equals 4 conditions . find average mpg in place of average accelerate .",
    "primary_span": [
      [
        4,
        15
      ],
      [
        20,
        25
      ],
      [
        38,
        40
      ]
    ],
    "secondary_span": [
      [
        4,
        15
      ],
      [
        26,
        37
      ],
      [
        41,
        46
      ]
    ],
    "edits": [
      "average mpg",
      "average accelerate",
      "model list",
      "car names",
      "cylinders equals 4",
      "model equals 4"
    ],
    "edits_original": "< select > add average mpg </ select > < select > remove average accelerate </ select > < from > remove model list </ from > < from > remove car names </ from > < where > add cylinders equals 4 </ where > < where > remove model equals 4 </ where >"
  },
  {
    "db_id": "pets_1",
    "feedback": "Need to change pet age with weight .",
    "question": "What type of pet is the youngest animal, and how much does it weigh?",
    "gold_parse": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1",
    "beam": [
      [
        "SELECT PetType , pet_age FROM Pets ORDER BY pet_age Asc LIMIT value",
        -0.2045574188232422
      ],
      [
        "SELECT PetType , weight FROM Pets ORDER BY pet_age Asc LIMIT value",
        -1.6883363723754883
      ],
      [
        "SELECT PetType , pet_age FROM Pets ORDER BY weight Asc LIMIT value",
        -9.845190048217773
      ],
      [
        "SELECT PetType , PetType FROM Pets ORDER BY pet_age Asc LIMIT value",
        -10.256942749023438
      ],
      [
        "SELECT T3.PetType , T1.Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID ORDER BY T3.pet_age Asc LIMIT value",
        -10.715377807617188
      ],
      [
        "SELECT PetType , pet_age FROM Pets WHERE pet_age = ( SELECT Min ( pet_age ) FROM Pets )",
        -11.27144479751587
      ],
      [
        "SELECT PetType FROM Pets ORDER BY pet_age Asc LIMIT value",
        -11.92401123046875
      ],
      [
        "SELECT PetType , pet_age FROM Pets GROUP BY PetType ORDER BY pet_age Asc LIMIT value",
        -11.968050956726074
      ],
      [
        "SELECT PetType , weight FROM Pets ORDER BY weight Asc LIMIT value",
        -12.002138137817383
      ],
      [
        "SELECT PetType , pet_age FROM Pets WHERE pet_age = ( SELECT Min ( pet_age ) FROM Pets ) ORDER BY pet_age Asc LIMIT value",
        -12.201406002044678
      ],
      [
        "SELECT PetType , weight FROM Pets WHERE pet_age = ( SELECT Min ( pet_age ) FROM Pets )",
        -13.001855850219727
      ],
      [
        "SELECT PetType , weight FROM Pets GROUP BY PetType ORDER BY pet_age Asc LIMIT value",
        -13.219535827636719
      ],
      [
        "SELECT PetType , pet_age FROM Pets ORDER BY pet_age Asc",
        -13.301826477050781
      ],
      [
        "SELECT PetType , pet_age FROM Pets ORDER BY pet_age Desc LIMIT value",
        -13.476685523986816
      ],
      [
        "SELECT PetType , weight FROM Pets WHERE pet_age = ( SELECT Min ( pet_age ) FROM Pets ) ORDER BY pet_age Asc LIMIT value",
        -13.654857635498047
      ],
      [
        "SELECT PetType , pet_age , weight FROM Pets ORDER BY pet_age Asc LIMIT value",
        -13.669183254241943
      ],
      [
        "SELECT PetType , pet_age FROM Pets",
        -14.48615550994873
      ],
      [
        "SELECT T3.PetType , T3.pet_age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T1.Sex = value ORDER BY T3.pet_age Asc LIMIT value",
        -14.559295654296875
      ],
      [
        "SELECT PetType , weight FROM Pets ORDER BY pet_age Asc",
        -14.7704496383667
      ],
      [
        "SELECT PetType , pet_age FROM Pets WHERE weight = ( SELECT Min ( pet_age ) FROM Pets ) ORDER BY pet_age Asc LIMIT value",
        -15.078693389892578
      ]
    ],
    "predicted_parse_with_values": "SELECT PetType , pet_age FROM Pets ORDER BY pet_age Asc LIMIT 1",
    "predicted_parse": "SELECT PetType , pet_age FROM Pets ORDER BY pet_age Asc LIMIT value",
    "predicted_parse_explanation": [
      "find the pet type and pet age in pets table with smallest value of pet age"
    ],
    "template_feedback": "find weight in place of pet age .",
    "primary_span": [
      [
        0,
        1
      ]
    ],
    "secondary_span": [
      [
        2,
        7
      ]
    ],
    "edits": [
      "weight",
      "pet age"
    ],
    "edits_original": "< select > add weight </ select > < select > remove pet age </ select >"
  },
  {
    "db_id": "flight_2",
    "feedback": "Remove country equals United airlines .",
    "question": "Which flight numbers correspond to United Airlines flights?",
    "gold_parse": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"",
    "beam": [
      [
        "SELECT T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Country = value AND T1.Airline = value",
        -0.11825942993164062
      ],
      [
        "SELECT T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Country = value",
        -2.4254512786865234
      ],
      [
        "SELECT T3.FlightNo FROM airlines AS T1 JOIN airports AS T2 JOIN flights AS T3 WHERE T2.Country = value AND T1.Airline = value",
        -4.581600189208984
      ],
      [
        "SELECT T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Country = value AND T1.Abbreviation = value",
        -5.379323959350586
      ],
      [
        "SELECT T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Airline = value",
        -5.42095947265625
      ],
      [
        "SELECT T3.FlightNo FROM airlines AS T1 JOIN airports AS T2 JOIN flights AS T3 WHERE T2.CountryAbbrev = value AND T1.Airline = value",
        -6.103459358215332
      ],
      [
        "SELECT T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Country = value AND T1.Country = value",
        -7.310428619384766
      ],
      [
        "SELECT T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Airline = value AND T1.Airline = value",
        -7.352529525756836
      ],
      [
        "SELECT T3.FlightNo FROM airlines AS T1 JOIN airports AS T2 JOIN flights AS T3 WHERE T2.Country = value AND T1.Abbreviation = value",
        -9.642616271972656
      ],
      [
        "SELECT T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Abbreviation = value AND T1.Airline = value",
        -9.771570205688477
      ],
      [
        "SELECT T2.FlightNo FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.Country = value",
        -9.821261405944824
      ],
      [
        "SELECT T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Abbreviation = value",
        -10.249824523925781
      ],
      [
        "SELECT T3.FlightNo FROM airlines AS T1 JOIN airports AS T2 JOIN flights AS T3 WHERE T2.CountryAbbrev = value AND T1.Abbreviation = value",
        -11.172135353088379
      ],
      [
        "SELECT T2.FlightNo FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.CountryAbbrev = value",
        -11.1967134475708
      ],
      [
        "SELECT T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Airline = value AND T1.Abbreviation = value",
        -11.426645278930664
      ],
      [
        "SELECT T3.FlightNo FROM airlines AS T1 JOIN airports AS T2 JOIN flights AS T3 WHERE T2.Country = value AND T1.Country = value",
        -11.50802993774414
      ],
      [
        "SELECT T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Airline > value",
        -12.41209602355957
      ],
      [
        "SELECT FlightNo FROM flights WHERE FlightNo > value",
        -15.252575397491455
      ],
      [
        "SELECT T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Airline < value",
        -15.344727516174316
      ],
      [
        "SELECT FlightNo FROM flights",
        -17.102109909057617
      ]
    ],
    "predicted_parse_with_values": "SELECT T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Country = \"United Airlines\" AND T1.Airline = \"United Airlines\"",
    "predicted_parse": "SELECT T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Country = value AND T1.Airline = value",
    "predicted_parse_explanation": [
      "Step 1: for each row in airlines table , find the corresponding rows in flights table",
      "Step 2: find the flight number of the results of step 1 whose country equals United Airlines and airlines 's airline name equals United Airlines"
    ],
    "template_feedback": "in step 2 , remove the country equals United Airlines conditions .",
    "primary_span": [
      [
        4,
        11
      ]
    ],
    "secondary_span": [],
    "edits": [
      "country equals \"United Airlines\""
    ],
    "edits_original": "< where > remove country equals \" United Airlines \" </ where >"
  },
  {
    "db_id": "world_1",
    "feedback": "In step 1 Exchange region with continent , In step 2 Exchange continent with name name .",
    "question": "Which countries have greater area than that of any country in Europe?",
    "gold_parse": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")",
    "beam": [
      [
        "SELECT Continent FROM country WHERE SurfaceArea > ( SELECT SurfaceArea FROM country WHERE Region = value )",
        -0.44281959533691406
      ],
      [
        "SELECT Continent FROM country WHERE SurfaceArea > ( SELECT SurfaceArea FROM country WHERE Continent = value )",
        -1.5094480514526367
      ],
      [
        "SELECT Continent FROM country WHERE SurfaceArea > ( SELECT Max ( SurfaceArea ) FROM country WHERE Region = value )",
        -2.9135570526123047
      ],
      [
        "SELECT Continent FROM country WHERE SurfaceArea > ( SELECT Max ( SurfaceArea ) FROM country WHERE Continent = value )",
        -3.324190139770508
      ],
      [
        "SELECT Name FROM country WHERE SurfaceArea > ( SELECT SurfaceArea FROM country WHERE Region = value )",
        -4.6170806884765625
      ],
      [
        "SELECT SurfaceArea FROM country WHERE SurfaceArea > ( SELECT SurfaceArea FROM country WHERE Region = value )",
        -4.753657817840576
      ],
      [
        "SELECT GovernmentForm FROM country WHERE SurfaceArea > ( SELECT SurfaceArea FROM country WHERE Region = value )",
        -5.196717739105225
      ],
      [
        "SELECT Name FROM country WHERE SurfaceArea > ( SELECT SurfaceArea FROM country WHERE Continent = value )",
        -5.544249534606934
      ],
      [
        "SELECT SurfaceArea FROM country WHERE SurfaceArea > ( SELECT SurfaceArea FROM country WHERE Continent = value )",
        -5.7074294090271
      ],
      [
        "SELECT Continent FROM country WHERE SurfaceArea > ( SELECT SurfaceArea FROM country WHERE LocalName = value )",
        -5.777731418609619
      ],
      [
        "SELECT GovernmentForm FROM country WHERE SurfaceArea > ( SELECT SurfaceArea FROM country WHERE Continent = value )",
        -6.120540142059326
      ],
      [
        "SELECT Continent FROM country WHERE SurfaceArea > ( SELECT SurfaceArea FROM country WHERE Name = value )",
        -6.891302108764648
      ],
      [
        "SELECT Continent FROM country WHERE SurfaceArea > ( SELECT Population FROM country WHERE Region = value )",
        -7.185947895050049
      ],
      [
        "SELECT SurfaceArea FROM country WHERE SurfaceArea > ( SELECT Max ( SurfaceArea ) FROM country WHERE Region = value )",
        -7.186228275299072
      ],
      [
        "SELECT Name FROM country WHERE SurfaceArea > ( SELECT Max ( SurfaceArea ) FROM country WHERE Region = value )",
        -7.2711381912231445
      ],
      [
        "SELECT Continent FROM country WHERE SurfaceArea > value",
        -8.737543106079102
      ],
      [
        "SELECT Continent FROM country WHERE SurfaceArea > Population",
        -8.876540184020996
      ],
      [
        "SELECT Continent FROM country WHERE SurfaceArea > LocalName",
        -10.172953128814697
      ],
      [
        "SELECT Name FROM country WHERE SurfaceArea > value",
        -12.999120712280273
      ],
      [
        "SELECT SurfaceArea FROM country WHERE SurfaceArea > value",
        -13.153883457183838
      ]
    ],
    "predicted_parse_with_values": "SELECT Continent FROM country WHERE SurfaceArea > ( SELECT SurfaceArea FROM country WHERE Region = \"Europe\" )",
    "predicted_parse": "SELECT Continent FROM country WHERE SurfaceArea > ( SELECT SurfaceArea FROM country WHERE Region = value )",
    "predicted_parse_explanation": [
      "Step 1: find the surface area in country table whose region equals Europe",
      "Step 2: find the continent in country table whose surface area greater than the results of step 1"
    ],
    "template_feedback": "in step 1 , consider the continent equals Europe conditions in place of the region equals Europe conditions . find minimum surface area in place of surface area . in step 2 , find name in place of continent .",
    "primary_span": [
      [
        4,
        9
      ],
      [
        19,
        22
      ],
      [
        33,
        34
      ]
    ],
    "secondary_span": [
      [
        10,
        18
      ],
      [
        23,
        28
      ],
      [
        35,
        39
      ]
    ],
    "edits": [
      "name",
      "continent",
      "minimum surface area",
      "surface area",
      "continent equals \"Europe\"",
      "region equals \"Europe\""
    ],
    "edits_original": "< select > add name </ select > < select > remove continent </ select > < select > add minimum surface area </ select > < select > remove surface area </ select > < where > add continent equals \" Europe \" </ where > < where > remove region equals \" Europe \" </ where >"
  },
  {
    "db_id": "flight_2",
    "feedback": "in step 1 and 3, you should use source airport of flights in place or country of airlines and country of airports. ",
    "question": "Which airlines have departing flights from both APG and CVO airports?",
    "gold_parse": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\"",
    "beam": [
      [
        "SELECT T1.Airline FROM airlines AS T1 WHERE T1.Country = value INTERSECT SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value",
        -0.17249774932861328
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value INTERSECT SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value",
        -2.0254440307617188
      ],
      [
        "SELECT Airline FROM airlines WHERE Country = value INTERSECT SELECT Airline FROM airlines WHERE Country = value",
        -3.779306411743164
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value INTERSECT SELECT T1.Airline FROM airlines AS T1 WHERE T1.Country = value",
        -5.643898010253906
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 WHERE T1.Country = value INTERSECT SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.CountryAbbrev = value",
        -9.77209758758545
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value INTERSECT SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.CountryAbbrev = value",
        -11.600220680236816
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.CountryAbbrev = value INTERSECT SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value",
        -11.824843406677246
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value AND T1.Country = value",
        -12.346043109893799
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 WHERE T1.Abbreviation = value INTERSECT SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value",
        -12.38132381439209
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 WHERE T1.uid = value INTERSECT SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value",
        -12.391176223754883
      ],
      [
        "SELECT Airline FROM airlines WHERE Country = value AND Country = value",
        -12.666198253631592
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 WHERE T1.Country = value INTERSECT SELECT T1.Abbreviation FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value",
        -12.745254516601562
      ],
      [
        "SELECT Airline FROM airlines WHERE Country = value INTERSECT SELECT Airline FROM airlines",
        -13.21889877319336
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 WHERE T1.Country = value INTERSECT SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 GROUP BY T1.uid HAVING T2.Country = value",
        -13.244203090667725
      ],
      [
        "SELECT Airline FROM airlines WHERE Country = value INTERSECT SELECT Abbreviation FROM airlines WHERE Country = value",
        -13.652939796447754
      ],
      [
        "SELECT Airline FROM airlines WHERE Country = value INTERSECT SELECT Airline FROM airlines WHERE Abbreviation = value",
        -13.656370162963867
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 INTERSECT SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value",
        -13.746594905853271
      ],
      [
        "SELECT T1.Airline , T1.Country FROM airlines AS T1 WHERE T1.Country = value INTERSECT SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value",
        -13.806585788726807
      ],
      [
        "SELECT Airline FROM airlines WHERE Country = value INTERSECT SELECT Airline FROM airlines GROUP BY uid HAVING Country = value",
        -14.196623802185059
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 WHERE T1.Country = value INTERSECT SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value AND T2.Country = value",
        -14.360902786254883
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.Airline FROM airlines AS T1 WHERE T1.Country = \"APG\" INTERSECT SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = \"CVO\"",
    "predicted_parse": "SELECT T1.Airline FROM airlines AS T1 WHERE T1.Country = value INTERSECT SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value",
    "predicted_parse_explanation": [
      "Step 1: find the airline name in airlines table whose airlines 's country equals APG",
      "Step 2: for each row in airlines table , find the corresponding rows in airports table",
      "Step 3: find the airline name of the results of step 2 whose airports 's country equals CVO",
      "Step 4: show the rows that are in both the results of step 1 and step 3"
    ],
    "template_feedback": "in step 1 , additionally use the information from the flights table besides the airlines table . consider the source airport equals APG conditions in place of the country equals APG conditions . in step 2 , use flights table in place of airports table in step 3 , consider the source airport equals CVO conditions in place of the airports 's country equals CVO conditions .",
    "primary_span": [
      [
        4,
        11
      ],
      [
        17,
        23
      ],
      [
        37,
        39
      ],
      [
        49,
        55
      ]
    ],
    "secondary_span": [
      [
        12,
        16
      ],
      [
        24,
        32
      ],
      [
        40,
        44
      ],
      [
        56,
        66
      ]
    ],
    "edits": [
      "flights",
      "source airport equals \"APG\"",
      "country equals \"APG\"",
      "flights",
      "airports",
      "source airport equals \"CVO\"",
      "country equals \"CVO\""
    ],
    "edits_original": "< from > add flights </ from > < where > add source airport equals \" APG \" </ where > < where > remove country equals \" APG \" </ where > < from > add flights </ from > < from > remove airports </ from > < where > add source airport equals \" CVO \" </ where > < where > remove country equals \" CVO \" </ where >"
  },
  {
    "db_id": "network_1",
    "feedback": "You need to find names of high schooler whose friend is Kyle and ID must exist in table of friend.",
    "question": "Show the names of all of the high schooler Kyle's friends.",
    "gold_parse": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"",
    "beam": [
      [
        "SELECT name FROM Highschooler WHERE grade = value",
        -4.673004150390625e-05
      ],
      [
        "SELECT DISTINCT name FROM Highschooler WHERE grade = value",
        -10.442777633666992
      ],
      [
        "SELECT name FROM Highschooler WHERE grade = value AND grade = value",
        -11.193541526794434
      ],
      [
        "SELECT name , grade FROM Highschooler WHERE grade = value",
        -12.968392372131348
      ],
      [
        "SELECT name FROM Highschooler WHERE grade = value INTERSECT SELECT name FROM Highschooler WHERE grade = value",
        -13.883606910705566
      ],
      [
        "SELECT DISTINCT name FROM Highschooler WHERE grade = value",
        -14.713391304016113
      ],
      [
        "SELECT name FROM Highschooler WHERE grade = value AND name = value",
        -14.874131202697754
      ],
      [
        "SELECT name , name FROM Highschooler WHERE grade = value",
        -15.022117614746094
      ],
      [
        "SELECT name FROM Highschooler WHERE grade = value ORDER BY name Asc",
        -15.364603519439697
      ],
      [
        "SELECT name FROM Highschooler WHERE grade > value",
        -16.13149642944336
      ],
      [
        "SELECT name FROM Highschooler",
        -16.830238342285156
      ],
      [
        "SELECT name FROM Highschooler WHERE grade > = value",
        -17.057122230529785
      ],
      [
        "SELECT name FROM Highschooler WHERE grade LIKE value",
        -17.162474632263184
      ],
      [
        "SELECT name FROM Highschooler WHERE grade = value LIMIT value",
        -17.279568672180176
      ],
      [
        "SELECT name FROM Highschooler WHERE DISTINCT grade = value",
        -17.31094455718994
      ],
      [
        "SELECT Count ( DISTINCT name ) FROM Highschooler WHERE grade = value",
        -17.513264656066895
      ],
      [
        "SELECT name FROM Highschooler WHERE grade ! = value",
        -18.072789192199707
      ],
      [
        "SELECT name FROM Highschooler WHERE Count ( grade ) = value",
        -18.215922355651855
      ],
      [
        "SELECT name FROM Highschooler WHERE grade < value",
        -18.28226947784424
      ],
      [
        "SELECT name FROM Highschooler WHERE grade = value GROUP BY name",
        -18.456950187683105
      ]
    ],
    "predicted_parse_with_values": "SELECT name FROM Highschooler WHERE grade = \"Kyle\"",
    "predicted_parse": "SELECT name FROM Highschooler WHERE grade = value",
    "predicted_parse_explanation": [
      "find the name in high schooler table whose grade equals Kyle"
    ],
    "template_feedback": "additionally use the information from the friend table besides the high schooler table . consider the name equals Kyle conditions in place of the grade equals Kyle conditions .",
    "primary_span": [
      [
        0,
        7
      ],
      [
        14,
        19
      ]
    ],
    "secondary_span": [
      [
        8,
        13
      ],
      [
        20,
        28
      ]
    ],
    "edits": [
      "friend",
      "high schooler",
      "name equals \"Kyle\"",
      "grade equals \"Kyle\""
    ],
    "edits_original": "< from > add friend </ from > < from > add high schooler </ from > < where > add name equals \" Kyle \" </ where > < where > remove grade equals \" Kyle \" </ where >"
  },
  {
    "db_id": "tvshow",
    "feedback": "Only need to find air date .",
    "question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?",
    "gold_parse": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\"",
    "beam": [
      [
        "SELECT Air_Date , Episode FROM TV_series WHERE Episode = value",
        -0.5062379837036133
      ],
      [
        "SELECT Air_Date FROM TV_series WHERE Episode = value",
        -1.0115318298339844
      ],
      [
        "SELECT T2.Air_Date FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = value",
        -4.053689002990723
      ],
      [
        "SELECT T2.Air_Date , T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = value",
        -4.375831604003906
      ],
      [
        "SELECT T2.Air_Date , T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = value",
        -5.757546424865723
      ],
      [
        "SELECT T2.Air_Date , T3.Title FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T2.Channel = T1.id JOIN Cartoon AS T3 ON T1.id = T3.Channel WHERE T2.Episode = value",
        -9.622225761413574
      ],
      [
        "SELECT T2.Air_Date , T1.Hight_definition_TV FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = value",
        -9.907431602478027
      ],
      [
        "SELECT Air_Date FROM TV_series WHERE Episode LIKE value",
        -10.184026718139648
      ],
      [
        "SELECT T2.Air_Date , T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = value",
        -10.195109367370605
      ],
      [
        "SELECT Air_Date , Episode FROM TV_series WHERE Episode LIKE value",
        -10.501137733459473
      ],
      [
        "SELECT T2.Air_Date , T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.Content = value",
        -10.652905464172363
      ],
      [
        "SELECT Air_Date , Episode , Episode FROM TV_series WHERE Episode = value",
        -10.689713954925537
      ],
      [
        "SELECT T2.Air_Date , T3.Original_air_date FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T2.Channel = T1.id JOIN Cartoon AS T3 ON T1.id = T3.Channel WHERE T2.Episode = value",
        -10.828055381774902
      ],
      [
        "SELECT T2.Air_Date , T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.Language = value",
        -11.373056411743164
      ],
      [
        "SELECT T2.Air_Date , T1.Content FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = value",
        -11.843749046325684
      ],
      [
        "SELECT T1.series_name , T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = value",
        -11.867066383361816
      ],
      [
        "SELECT Air_Date , Air_Date FROM TV_series WHERE Episode = value",
        -12.028453826904297
      ],
      [
        "SELECT T2.Air_Date FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.Content = value",
        -12.332356452941895
      ],
      [
        "SELECT T2.Air_Date FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.Language = value",
        -13.493461608886719
      ],
      [
        "SELECT T2.Air_Date FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name LIKE value",
        -13.542171478271484
      ]
    ],
    "predicted_parse_with_values": "SELECT Air_Date , Episode FROM TV_series WHERE Episode = \"A Love of a Lifetime\"",
    "predicted_parse": "SELECT Air_Date , Episode FROM TV_series WHERE Episode = value",
    "predicted_parse_explanation": [
      "find the air date and episode in tv series table whose episode equals A Love of a Lifetime"
    ],
    "template_feedback": "do not return episode .",
    "primary_span": [
      [
        0,
        4
      ]
    ],
    "secondary_span": [],
    "edits": [
      "episode"
    ],
    "edits_original": "< select > remove episode </ select >"
  },
  {
    "db_id": "network_1",
    "feedback": "In steep 1 and 2 , You need to make sure that similar id of student are available in friend as well as in likes table.",
    "question": "Show name of all students who have some friends and also are liked by someone else.",
    "gold_parse": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id",
    "beam": [
      [
        "SELECT name FROM Highschooler INTERSECT SELECT name FROM Highschooler",
        -0.02205657958984375
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 INTERSECT SELECT T2.liked_id FROM Likes AS T2",
        -4.266522407531738
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 INTERSECT SELECT T2.student_id FROM Likes AS T2",
        -4.891319751739502
      ],
      [
        "SELECT name FROM Highschooler WHERE grade = value INTERSECT SELECT name FROM Highschooler",
        -9.221575856208801
      ],
      [
        "SELECT name FROM Highschooler",
        -10.223089218139648
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 UNION SELECT T2.liked_id FROM Likes AS T2",
        -10.51161813735962
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 INTERSECT SELECT T2.student_id FROM Friend AS T2",
        -11.323427200317383
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 UNION SELECT T2.student_id FROM Likes AS T2",
        -11.350876331329346
      ],
      [
        "SELECT name FROM Highschooler INTERSECT SELECT grade FROM Highschooler",
        -11.603745460510254
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 INTERSECT SELECT T2.friend_id FROM Friend AS T2",
        -11.621041297912598
      ],
      [
        "SELECT name FROM Highschooler INTERSECT SELECT name FROM Highschooler WHERE grade = value",
        -11.974272698163986
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) = value INTERSECT SELECT T1.name FROM Highschooler AS T1",
        -12.100841522216797
      ],
      [
        "SELECT name FROM Highschooler EXCEPT SELECT name FROM Highschooler",
        -12.142061233520508
      ],
      [
        "SELECT name FROM Highschooler UNION SELECT name FROM Highschooler",
        -12.215973377227783
      ],
      [
        "SELECT name FROM Highschooler ORDER BY name Asc",
        -12.220757484436035
      ],
      [
        "SELECT name FROM Highschooler WHERE grade = name INTERSECT SELECT name FROM Highschooler",
        -12.327716946601868
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id ORDER BY Count ( * ) Asc INTERSECT SELECT T1.name FROM Highschooler AS T1",
        -12.637759685516357
      ],
      [
        "SELECT name FROM Highschooler INTERSECT SELECT * FROM Highschooler",
        -12.973889350891113
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) > = value",
        -13.720643043518066
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 INTERSECT SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id WHERE T2.liked_id = value",
        -14.01836609840393
      ]
    ],
    "predicted_parse_with_values": "SELECT name FROM Highschooler INTERSECT SELECT name FROM Highschooler",
    "predicted_parse": "SELECT name FROM Highschooler INTERSECT SELECT name FROM Highschooler",
    "predicted_parse_explanation": [
      "Step 1: find the name in high schooler table",
      "Step 2: find the name in high schooler table",
      "Step 3: show the rows that are in both the results of step 1 and step 2"
    ],
    "template_feedback": "in step 1 , additionally use the information from the friend table besides the high schooler table . in step 2 , additionally use the information from the likes table besides the high schooler table .",
    "primary_span": [
      [
        4,
        11
      ],
      [
        22,
        29
      ]
    ],
    "secondary_span": [
      [
        12,
        17
      ],
      [
        30,
        35
      ]
    ],
    "edits": [
      "friend",
      "likes"
    ],
    "edits_original": "< from > add friend </ from > < from > add likes </ from >"
  },
  {
    "db_id": "employee_hire_evaluation",
    "feedback": "Need to use name and look for rows which are equivalent in hiring table.",
    "question": "Find the number of employees hired in each shop; show the shop name as well.",
    "gold_parse": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name",
    "beam": [
      [
        "SELECT Count ( * ) , T1.Name FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T2.Shop_ID",
        -0.16100406646728516
      ],
      [
        "SELECT Count ( * ) , T1.Manager_name FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T2.Shop_ID",
        -2.536149024963379
      ],
      [
        "SELECT Count ( * ) , Shop_ID FROM hiring GROUP BY Shop_ID",
        -2.9474380016326904
      ],
      [
        "SELECT Count ( * ) , T1.Shop_ID FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T2.Shop_ID",
        -5.044516086578369
      ],
      [
        "SELECT Count ( * ) , Name FROM shop GROUP BY Shop_ID",
        -5.137084007263184
      ],
      [
        "SELECT Count ( * ) , T1.Name FROM employee AS T1 JOIN hiring AS T2 ON T1.Employee_ID = T2.Employee_ID GROUP BY T2.Shop_ID",
        -6.309679985046387
      ],
      [
        "SELECT T1.Name , Count ( * ) FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T2.Shop_ID",
        -7.079829216003418
      ],
      [
        "SELECT Count ( * ) , Manager_name FROM shop GROUP BY Shop_ID",
        -7.311574935913086
      ],
      [
        "SELECT Count ( * ) , T2.Shop_ID FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T1.Shop_ID",
        -7.439719915390015
      ],
      [
        "SELECT Count ( * ) , T1.Number_products FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T2.Shop_ID",
        -7.864228248596191
      ],
      [
        "SELECT Count ( * ) , T1.Location FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T2.Shop_ID",
        -8.971524238586426
      ],
      [
        "SELECT Count ( * ) , Shop_ID FROM shop GROUP BY Shop_ID",
        -9.548750400543213
      ],
      [
        "SELECT Count ( * ) , T1.District FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T2.Shop_ID",
        -9.946950912475586
      ],
      [
        "SELECT T1.Manager_name , Count ( * ) FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T2.Shop_ID",
        -9.98176383972168
      ],
      [
        "SELECT Count ( * ) , * FROM hiring GROUP BY Shop_ID",
        -10.475563049316406
      ],
      [
        "SELECT Count ( * ) FROM hiring GROUP BY Shop_ID",
        -10.78079891204834
      ],
      [
        "SELECT Count ( * ) , Is_full_time FROM hiring GROUP BY Shop_ID",
        -11.213228225708008
      ],
      [
        "SELECT Count ( * ) , T1.Name FROM employee AS T1 JOIN shop AS T2 JOIN hiring AS T3 ON T1.Employee_ID = T3.Employee_ID AND T3.Shop_ID = T2.Shop_ID GROUP BY T2.Shop_ID",
        -11.236806869506836
      ],
      [
        "SELECT Count ( * ) , T1.Name , Count ( * ) FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T2.Shop_ID",
        -11.897219181060791
      ],
      [
        "SELECT Count ( * ) FROM employee",
        -12.940725326538086
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) , T1.Name FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T2.Shop_ID",
    "predicted_parse": "SELECT Count ( * ) , T1.Name FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T2.Shop_ID",
    "predicted_parse_explanation": [
      "Step 1: for each row in shop table , find the corresponding rows in hiring table",
      "Step 2: find each value of hiring 's shop id of the results of step 1 along with the number of the corresponding rows to each value"
    ],
    "template_feedback": "in step 2 , find for each value of name in place of hiring 's shop id .",
    "primary_span": [
      [
        4,
        9
      ]
    ],
    "secondary_span": [
      [
        10,
        17
      ]
    ],
    "edits": [
      "name",
      "shop id"
    ],
    "edits_original": "< groupBy > add name </ groupBy > < groupBy > remove shop id </ groupBy >"
  },
  {
    "db_id": "course_teach",
    "feedback": "Exchange course table with teacher table .",
    "question": "What is the total count of teachers?",
    "gold_parse": "SELECT count(*) FROM teacher",
    "beam": [
      [
        "SELECT Count ( * ) FROM course",
        -6.389617919921875e-05
      ],
      [
        "SELECT Sum ( * ) FROM course",
        -9.932831525802612
      ],
      [
        "SELECT Count ( * ) FROM teacher GROUP BY Name",
        -13.462078511714935
      ],
      [
        "SELECT Count ( * ) , Name FROM teacher",
        -13.718948245048523
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM course",
        -13.863846778869629
      ],
      [
        "SELECT Avg ( * ) FROM course",
        -13.966369718313217
      ],
      [
        "SELECT Count ( * ) FROM teacher GROUP BY Hometown",
        -14.244701623916626
      ],
      [
        "SELECT Count ( * ) FROM course GROUP BY *",
        -14.264763355255127
      ],
      [
        "SELECT Count ( * ) FROM teacher WHERE Hometown = value",
        -14.717382490634918
      ],
      [
        "SELECT Count ( * ) FROM teacher WHERE Name = value",
        -15.000487625598907
      ],
      [
        "SELECT Count ( Count ( * ) ) FROM course",
        -15.17809009552002
      ],
      [
        "SELECT Count ( * ) , Hometown FROM teacher",
        -15.276010632514954
      ],
      [
        "SELECT Count ( * ) FROM course ORDER BY * Desc LIMIT value",
        -15.92009973526001
      ],
      [
        "SELECT Count ( * ) FROM teacher GROUP BY Name HAVING Count ( * ) = value",
        -15.956212818622589
      ],
      [
        "SELECT Max ( * ) FROM course",
        -16.302445769309998
      ],
      [
        "SELECT Count ( Avg ( * ) ) FROM course",
        -16.535744667053223
      ],
      [
        "SELECT Count ( * ) FROM course",
        -16.774361610412598
      ],
      [
        "SELECT Count ( Sum ( * ) ) FROM course",
        -17.035359382629395
      ],
      [
        "SELECT Count ( * ) FROM course LIMIT value",
        -17.053454399108887
      ],
      [
        "SELECT Count ( DISTINCT * ) FROM course",
        -17.34835147857666
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM course",
    "predicted_parse": "SELECT Count ( * ) FROM course",
    "predicted_parse_explanation": [
      "find the number of rows in course table"
    ],
    "template_feedback": "use teacher table in place of course table .",
    "primary_span": [
      [
        0,
        2
      ]
    ],
    "secondary_span": [
      [
        3,
        8
      ]
    ],
    "edits": [
      "teacher",
      "course"
    ],
    "edits_original": "< from > add teacher </ from > < from > remove course </ from >"
  },
  {
    "db_id": "tvshow",
    "feedback": "You need to show the production code and channel of cartoon whose original air date is the lowest.",
    "question": "Find the production code and channel of the most recently aired cartoon.",
    "gold_parse": "SELECT production_code ,  channel FROM cartoon ORDER BY original_air_date LIMIT 1",
    "beam": [
      [
        "SELECT Production_code , Channel FROM Cartoon GROUP BY Channel ORDER BY Count ( * ) Desc LIMIT value",
        -0.3112983703613281
      ],
      [
        "SELECT T3.Production_code , T3.Channel FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T2.Channel = T1.id JOIN Cartoon AS T3 ON T1.id = T3.Channel GROUP BY T2.Channel ORDER BY Count ( * ) Desc LIMIT value",
        -1.6370563507080078
      ],
      [
        "SELECT T2.Production_code , T2.Channel FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel GROUP BY T1.Content ORDER BY Count ( * ) Desc LIMIT value",
        -3.2017030715942383
      ],
      [
        "SELECT T3.Production_code , T3.Channel FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T2.Channel = T1.id JOIN Cartoon AS T3 ON T1.id = T3.Channel GROUP BY T2.Episode ORDER BY Count ( * ) Desc LIMIT value",
        -4.160159587860107
      ],
      [
        "SELECT T2.Production_code , T2.Channel FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel GROUP BY T1.id ORDER BY Count ( * ) Desc LIMIT value",
        -4.948246479034424
      ],
      [
        "SELECT T2.Production_code , T2.Channel FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel GROUP BY T1.series_name ORDER BY Count ( * ) Desc LIMIT value",
        -5.177906513214111
      ],
      [
        "SELECT T3.Production_code , T2.Channel FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T2.Channel = T1.id JOIN Cartoon AS T3 ON T1.id = T3.Channel GROUP BY T3.Channel ORDER BY Count ( * ) Desc LIMIT value",
        -6.662543296813965
      ],
      [
        "SELECT T2.Production_code , T2.Channel FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel GROUP BY T1.Language ORDER BY Count ( * ) Desc LIMIT value",
        -6.939703941345215
      ],
      [
        "SELECT T2.Production_code , T2.Channel FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel GROUP BY T1.Country ORDER BY Count ( * ) Desc LIMIT value",
        -7.385705471038818
      ],
      [
        "SELECT T3.Production_code , T2.Channel FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T2.Channel = T1.id JOIN Cartoon AS T3 ON T1.id = T3.Channel GROUP BY T2.Channel ORDER BY Count ( * ) Desc LIMIT value",
        -8.044073104858398
      ],
      [
        "SELECT T3.Production_code , T3.Channel FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T2.Channel = T1.id JOIN Cartoon AS T3 ON T1.id = T3.Channel GROUP BY T2.Rating ORDER BY Count ( * ) Desc LIMIT value",
        -8.454026222229004
      ],
      [
        "SELECT T2.Production_code , T2.Channel FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel GROUP BY T1.Package_Option ORDER BY Count ( * ) Desc LIMIT value",
        -8.63425350189209
      ],
      [
        "SELECT T2.Production_code , T2.Channel FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel GROUP BY T1.Hight_definition_TV ORDER BY Count ( * ) Desc LIMIT value",
        -9.600149154663086
      ],
      [
        "SELECT T3.Production_code , T2.Channel FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel JOIN Cartoon AS T3 ON T1.id = T3.Channel GROUP BY T1.Content ORDER BY Count ( * ) Desc LIMIT value",
        -9.631020545959473
      ],
      [
        "SELECT Production_code , Channel FROM Cartoon GROUP BY Title ORDER BY Count ( * ) Desc LIMIT value",
        -9.828700065612793
      ],
      [
        "SELECT T3.Production_code , T2.Channel FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T2.Channel = T1.id JOIN Cartoon AS T3 ON T1.id = T3.Channel GROUP BY T2.Episode ORDER BY Count ( * ) Desc LIMIT value",
        -10.560590744018555
      ],
      [
        "SELECT T1.Content , T2.Channel FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel GROUP BY T2.Channel ORDER BY Count ( * ) Desc LIMIT value",
        -11.050413131713867
      ],
      [
        "SELECT T2.Production_code , T2.Channel FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel GROUP BY T1.Pixel_aspect_ratio_PAR ORDER BY Count ( * ) Desc LIMIT value",
        -11.179311752319336
      ],
      [
        "SELECT T3.Production_code , T2.Channel FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel JOIN Cartoon AS T3 ON T1.id = T3.Channel GROUP BY T1.id ORDER BY Count ( * ) Desc LIMIT value",
        -11.300326824188232
      ],
      [
        "SELECT T2.Production_code , T1.Content FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel GROUP BY T2.Channel ORDER BY Count ( * ) Desc LIMIT value",
        -11.368624687194824
      ]
    ],
    "predicted_parse_with_values": "SELECT Production_code , Channel FROM Cartoon GROUP BY Channel ORDER BY Count ( * ) Desc LIMIT 1",
    "predicted_parse": "SELECT Production_code , Channel FROM Cartoon GROUP BY Channel ORDER BY Count ( * ) Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of channel in cartoon table",
      "Step 2: find the production code and channel in cartoon table with largest value in the results of step 1"
    ],
    "template_feedback": "in step 1 , do not find for each value of channel . in step 2 , order the results ascending by original air date in place of ordering descending by number of rows .",
    "primary_span": [
      [
        4,
        12
      ],
      [
        17,
        24
      ]
    ],
    "secondary_span": [
      [
        25,
        34
      ]
    ],
    "edits": [
      "channel",
      "original air date",
      "number of rows",
      "descending"
    ],
    "edits_original": "< groupBy > remove channel </ groupBy > < orderBy > add original air date </ orderBy > < orderBy > remove number of rows </ orderBy > < orderBy > remove descending </ orderBy >"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "feedback": "We have to use version number instead of template details.",
    "question": "What is the version number and template type code for the template with version number later than 5?",
    "gold_parse": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5",
    "beam": [
      [
        "SELECT Template_Details , Template_Type_Code FROM Templates WHERE Version_Number > value",
        -0.7328243255615234
      ],
      [
        "SELECT Template_ID , Template_Type_Code FROM Templates WHERE Version_Number > value",
        -1.985093593597412
      ],
      [
        "SELECT * , Template_Type_Code FROM Templates WHERE Version_Number > value",
        -2.2887189388275146
      ],
      [
        "SELECT Template_Details , Template_Type_Code FROM Templates WHERE Date_Effective_To > value",
        -2.8902673721313477
      ],
      [
        "SELECT Template_Details , Template_Type_Code FROM Templates WHERE Version_Number < value",
        -2.9569177627563477
      ],
      [
        "SELECT Version_Number , Template_Type_Code FROM Templates WHERE Version_Number > value",
        -3.6024951934814453
      ],
      [
        "SELECT Template_ID , Template_Type_Code FROM Templates WHERE Date_Effective_To > value",
        -4.1439528465271
      ],
      [
        "SELECT Template_ID , Template_Type_Code FROM Templates WHERE Version_Number < value",
        -4.263329982757568
      ],
      [
        "SELECT T2.Document_Name , T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T1.Version_Number > value",
        -4.321505069732666
      ],
      [
        "SELECT * , Template_Type_Code FROM Templates WHERE Date_Effective_To > value",
        -4.453839063644409
      ],
      [
        "SELECT Template_Details , Template_Type_Code FROM Templates WHERE Date_Effective_To < value",
        -4.627850532531738
      ],
      [
        "SELECT T1.Template_Type_Description , T2.Template_Type_Code FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T2.Version_Number > value",
        -4.70829439163208
      ],
      [
        "SELECT * , Template_Type_Code FROM Templates WHERE Version_Number < value",
        -4.814226865768433
      ],
      [
        "SELECT T2.Document_Name , T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T1.Version_Number < value",
        -5.384113788604736
      ],
      [
        "SELECT Template_Type_Code , Template_Type_Code FROM Templates WHERE Version_Number > value",
        -5.413559913635254
      ],
      [
        "SELECT Template_Type_Code , Count ( * ) FROM Templates WHERE Version_Number > value",
        -5.418662071228027
      ],
      [
        "SELECT T2.Document_ID , T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T1.Version_Number > value",
        -5.539514064788818
      ],
      [
        "SELECT T1.Template_Details , T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T2.Template_ID HAVING Count ( * ) > value",
        -5.638607978820801
      ],
      [
        "SELECT Version_Number , Template_Type_Code FROM Templates WHERE Version_Number < value",
        -5.751047134399414
      ],
      [
        "SELECT Version_Number , Template_Type_Code FROM Templates WHERE Date_Effective_To > value",
        -5.777163505554199
      ]
    ],
    "predicted_parse_with_values": "SELECT Template_Details , Template_Type_Code FROM Templates WHERE Version_Number > 5",
    "predicted_parse": "SELECT Template_Details , Template_Type_Code FROM Templates WHERE Version_Number > value",
    "predicted_parse_explanation": [
      "find the template details and template type code in templates table whose version number greater than 5"
    ],
    "template_feedback": "find version number in place of template details .",
    "primary_span": [
      [
        0,
        2
      ]
    ],
    "secondary_span": [
      [
        3,
        8
      ]
    ],
    "edits": [
      "version number",
      "template details"
    ],
    "edits_original": "< select > add version number </ select > < select > remove template details </ select >"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "feedback": "Use documents table instead of templates table .",
    "question": "Count the number of documents that use the PPT template type.",
    "gold_parse": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'",
    "beam": [
      [
        "SELECT Count ( * ) FROM Templates WHERE Template_Type_Code = value",
        -0.010244369506835938
      ],
      [
        "SELECT Count ( * ) FROM Ref_Template_Types WHERE Template_Type_Code = value",
        -4.588545799255371
      ],
      [
        "SELECT Count ( * ) FROM Ref_Template_Types",
        -11.00758171081543
      ],
      [
        "SELECT Count ( * ) FROM Ref_Template_Types WHERE Template_Type_Description = value",
        -12.423961639404297
      ],
      [
        "SELECT Count ( DISTINCT T2.Document_Name ) FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T1.Template_Type_Code = value",
        -14.842829704284668
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM Templates WHERE Template_Type_Code = value",
        -14.891322135925293
      ],
      [
        "SELECT Sum ( * ) FROM Templates WHERE Template_Type_Code = value",
        -15.085153102874756
      ],
      [
        "SELECT Avg ( * ) FROM Templates WHERE Template_Type_Code = value",
        -15.4109126329422
      ],
      [
        "SELECT Count ( * ) , Template_Type_Code FROM Templates WHERE Template_Type_Code = value",
        -15.762456893920898
      ],
      [
        "SELECT Count ( * ) FROM Templates WHERE Template_Type_Code LIKE value",
        -15.795428276062012
      ],
      [
        "SELECT Count ( * ) FROM Templates WHERE Template_Type_Code = value GROUP BY Template_Type_Code",
        -15.891857147216797
      ],
      [
        "SELECT Count ( Count ( * ) ) FROM Templates WHERE Template_Type_Code = value",
        -16.20854949951172
      ],
      [
        "SELECT Count ( * ) FROM Ref_Template_Types WHERE Template_Type_Code > value",
        -16.22718620300293
      ],
      [
        "SELECT Count ( * ) , T2.Template_Type_Code FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T1.Template_Type_Code = value",
        -16.554080963134766
      ],
      [
        "SELECT Sum ( T1.Template_Type_Code ) FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T2.Template_Type_Code = value",
        -16.59552013874054
      ],
      [
        "SELECT Count ( DISTINCT * ) FROM Templates WHERE Template_Type_Code = value",
        -16.92458724975586
      ],
      [
        "SELECT Sum ( * ) FROM Ref_Template_Types WHERE Template_Type_Code = value",
        -17.040204524993896
      ],
      [
        "SELECT Count ( * ) FROM Templates GROUP BY Template_Type_Code",
        -17.128477096557617
      ],
      [
        "SELECT Count ( * ) FROM Templates WHERE DISTINCT Template_Type_Code = value",
        -17.144006729125977
      ],
      [
        "SELECT Count ( * ) FROM Templates GROUP BY Template_Type_Code HAVING Count ( * ) = value",
        -17.33211326599121
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM Templates WHERE Template_Type_Code = \"PPT\"",
    "predicted_parse": "SELECT Count ( * ) FROM Templates WHERE Template_Type_Code = value",
    "predicted_parse_explanation": [
      "find the number of rows in templates table whose template type code equals PPT"
    ],
    "template_feedback": "additionally use the information from the documents table besides the templates table .",
    "primary_span": [
      [
        0,
        7
      ]
    ],
    "secondary_span": [
      [
        8,
        12
      ]
    ],
    "edits": [
      "documents"
    ],
    "edits_original": "< from > add documents </ from >"
  },
  {
    "db_id": "flight_2",
    "feedback": "in the flight's table, you should use country's short form for those city.",
    "question": "Which city has most number of departing flights?",
    "gold_parse": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
    "beam": [
      [
        "SELECT City FROM airports GROUP BY City ORDER BY Count ( * ) Desc LIMIT value",
        -0.0022687911987304688
      ],
      [
        "SELECT AirportName FROM airports GROUP BY City ORDER BY Count ( * ) Desc LIMIT value",
        -6.191403388977051
      ],
      [
        "SELECT City FROM airports GROUP BY AirportName ORDER BY Count ( * ) Desc LIMIT value",
        -9.178016662597656
      ],
      [
        "SELECT City FROM airports GROUP BY AirportCode ORDER BY Count ( * ) Desc LIMIT value",
        -9.217140197753906
      ],
      [
        "SELECT City FROM airports GROUP BY City ORDER BY Count ( * ) Asc LIMIT value",
        -12.42812728881836
      ],
      [
        "SELECT City FROM airports GROUP BY City ORDER BY Count ( * ) Desc",
        -12.474053382873535
      ],
      [
        "SELECT City , Count ( * ) FROM airports GROUP BY City ORDER BY Count ( * ) Desc LIMIT value",
        -13.417163848876953
      ],
      [
        "SELECT City FROM airports GROUP BY City",
        -13.902512550354004
      ],
      [
        "SELECT City FROM airports GROUP BY City HAVING Count ( * ) = value",
        -14.143084526062012
      ],
      [
        "SELECT Count ( * ) FROM airports GROUP BY City ORDER BY Count ( * ) Desc LIMIT value",
        -14.187505722045898
      ],
      [
        "SELECT DISTINCT City FROM airports GROUP BY City ORDER BY Count ( * ) Desc LIMIT value",
        -14.461874961853027
      ],
      [
        "SELECT City FROM airports ORDER BY Count ( * ) Desc LIMIT value",
        -14.497023582458496
      ],
      [
        "SELECT AirportName FROM airports GROUP BY AirportName ORDER BY Count ( * ) Desc LIMIT value",
        -15.240381240844727
      ],
      [
        "SELECT AirportName FROM airports GROUP BY AirportCode ORDER BY Count ( * ) Desc LIMIT value",
        -15.311287879943848
      ],
      [
        "SELECT City FROM airports GROUP BY City ORDER BY Avg ( * ) Desc LIMIT value",
        -15.434224128723145
      ],
      [
        "SELECT DISTINCT City FROM airports GROUP BY City ORDER BY Count ( * ) Desc LIMIT value",
        -15.564786911010742
      ],
      [
        "SELECT City FROM airports WHERE City = value GROUP BY City ORDER BY Count ( * ) Desc LIMIT value",
        -15.69263482093811
      ],
      [
        "SELECT City FROM airports GROUP BY City HAVING Count ( * ) IN ( SELECT City FROM airports GROUP BY City ORDER BY Count ( * ) Desc LIMIT value )",
        -15.809488773345947
      ],
      [
        "SELECT City FROM airports GROUP BY City ORDER BY Count ( DISTINCT * ) Desc LIMIT value",
        -15.845300674438477
      ],
      [
        "SELECT City , City FROM airports GROUP BY City ORDER BY Count ( * ) Desc LIMIT value",
        -15.978772163391113
      ]
    ],
    "predicted_parse_with_values": "SELECT City FROM airports GROUP BY City ORDER BY Count ( * ) Desc LIMIT 1",
    "predicted_parse": "SELECT City FROM airports GROUP BY City ORDER BY Count ( * ) Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of city in airports table",
      "Step 2: find the city in airports table with largest value in the results of step 1"
    ],
    "template_feedback": "in step 1 , additionally use the information from the flights table besides the airports table .",
    "primary_span": [
      [
        4,
        11
      ]
    ],
    "secondary_span": [
      [
        12,
        16
      ]
    ],
    "edits": [
      "flights"
    ],
    "edits_original": "< from > add flights </ from >"
  },
  {
    "db_id": "dog_kennels",
    "feedback": "Take \"state contains North\" instead of first name contains North\".",
    "question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.",
    "gold_parse": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'",
    "beam": [
      [
        "SELECT first_name , last_name , email_address FROM Owners WHERE first_name LIKE value",
        -0.15131664276123047
      ],
      [
        "SELECT first_name , last_name , email_address FROM Owners WHERE state LIKE value",
        -2.004854679107666
      ],
      [
        "SELECT T1.first_name , T1.last_name , T1.email_address FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T2.name LIKE value",
        -5.268652439117432
      ],
      [
        "SELECT T1.first_name , T1.last_name , T1.email_address FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id WHERE T3.first_name LIKE value",
        -7.65025520324707
      ],
      [
        "SELECT T1.first_name , T1.last_name , T3.email_address FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id WHERE T1.first_name LIKE value",
        -11.043672561645508
      ],
      [
        "SELECT first_name , last_name , Sum ( email_address ) FROM Owners WHERE first_name LIKE value",
        -11.41359806060791
      ],
      [
        "SELECT first_name , last_name , email_address FROM Owners WHERE email_address LIKE value",
        -11.673532485961914
      ],
      [
        "SELECT T1.first_name , T1.last_name , T1.email_address FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id WHERE T3.state LIKE value",
        -11.738853454589844
      ],
      [
        "SELECT first_name , last_name , Count ( * ) FROM Owners WHERE first_name LIKE value",
        -12.110115051269531
      ],
      [
        "SELECT first_name , last_name , email_address FROM Owners WHERE street LIKE value",
        -12.250104904174805
      ],
      [
        "SELECT first_name , last_name , Min ( email_address ) FROM Owners WHERE first_name LIKE value",
        -12.329121589660645
      ],
      [
        "SELECT first_name , last_name , Max ( email_address ) FROM Owners WHERE first_name LIKE value",
        -12.354243278503418
      ],
      [
        "SELECT first_name , last_name FROM Owners WHERE first_name LIKE value",
        -12.707634925842285
      ],
      [
        "SELECT first_name , last_name , email_address , email_address FROM Owners WHERE first_name LIKE value",
        -12.814414024353027
      ],
      [
        "SELECT first_name , last_name , Count ( email_address ) FROM Owners WHERE first_name LIKE value",
        -12.95417594909668
      ],
      [
        "SELECT first_name , last_name , email_address FROM Owners WHERE state = value",
        -13.089962005615234
      ],
      [
        "SELECT first_name , last_name , email_address FROM Owners WHERE last_name LIKE value",
        -13.112060546875
      ],
      [
        "SELECT T1.first_name , T1.last_name , T3.email_address FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id WHERE T1.state LIKE value",
        -13.123307704925537
      ],
      [
        "SELECT first_name , last_name , email_address FROM Owners WHERE city LIKE value",
        -13.153829574584961
      ],
      [
        "SELECT first_name , last_name , email_address FROM Owners WHERE state IN ( SELECT first_name FROM Owners WHERE first_name LIKE value )",
        -13.276021003723145
      ]
    ],
    "predicted_parse_with_values": "SELECT first_name , last_name , email_address FROM Owners WHERE first_name LIKE \"North\"",
    "predicted_parse": "SELECT first_name , last_name , email_address FROM Owners WHERE first_name LIKE value",
    "predicted_parse_explanation": [
      "find the first name , last name , email address in owners table whose first name like North"
    ],
    "template_feedback": "consider the state like % North % conditions in place of the first name like North conditions .",
    "primary_span": [
      [
        0,
        7
      ]
    ],
    "secondary_span": [
      [
        8,
        17
      ]
    ],
    "edits": [
      "state like \"%North%\"",
      "first name like \"North\""
    ],
    "edits_original": "< where > add state like \" % North % \" </ where > < where > remove first name like \" North \" </ where >"
  },
  {
    "db_id": "wta_1",
    "feedback": "Replace players table with matches table .",
    "question": "Find the total number of matches.",
    "gold_parse": "SELECT count(*) FROM matches",
    "beam": [
      [
        "SELECT Count ( * ) FROM players",
        -3.147125244140625e-05
      ],
      [
        "SELECT Sum ( * ) FROM players",
        -11.427745580673218
      ],
      [
        "SELECT Sum ( tourney_id ) FROM matches",
        -13.029143929481506
      ],
      [
        "SELECT Count ( * ) , Count ( * ) FROM players",
        -13.69523811340332
      ],
      [
        "SELECT Sum ( tourney_name ) FROM matches",
        -13.739094734191895
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM players",
        -14.142114639282227
      ],
      [
        "SELECT Count ( * ) , tourney_name FROM matches",
        -14.51404595375061
      ],
      [
        "SELECT Count ( Count ( * ) ) FROM players",
        -14.551506996154785
      ],
      [
        "SELECT Sum ( draw_size ) FROM matches",
        -14.847006797790527
      ],
      [
        "SELECT Sum ( match_num ) FROM matches",
        -14.9871826171875
      ],
      [
        "SELECT Count ( * ) FROM matches WHERE tourney_name = value",
        -15.072705745697021
      ],
      [
        "SELECT Count ( * ) , loser_name FROM matches",
        -15.137970447540283
      ],
      [
        "SELECT Avg ( * ) FROM players",
        -15.247907042503357
      ],
      [
        "SELECT Count ( * ) FROM matches ORDER BY tourney_id Desc",
        -15.32108211517334
      ],
      [
        "SELECT Count ( * ) FROM matches ORDER BY tourney_id Asc",
        -15.43895673751831
      ],
      [
        "SELECT Count ( * ) FROM matches GROUP BY tourney_name",
        -15.521505236625671
      ],
      [
        "SELECT Sum ( winner_seed ) FROM matches",
        -15.770104885101318
      ],
      [
        "SELECT Count ( Avg ( * ) ) FROM players",
        -15.794992446899414
      ],
      [
        "SELECT Sum ( loser_rank_points ) FROM matches",
        -15.854962348937988
      ],
      [
        "SELECT Sum ( loser_seed ) FROM matches",
        -15.87571096420288
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM players",
    "predicted_parse": "SELECT Count ( * ) FROM players",
    "predicted_parse_explanation": [
      "find the number of rows in players table"
    ],
    "template_feedback": "use matches table in place of players table .",
    "primary_span": [
      [
        0,
        2
      ]
    ],
    "secondary_span": [
      [
        3,
        8
      ]
    ],
    "edits": [
      "matches",
      "players"
    ],
    "edits_original": "< from > add matches </ from > < from > remove players </ from >"
  },
  {
    "db_id": "wta_1",
    "feedback": "It should be 2013 or 2016.",
    "question": "List the number of all matches who played in years of 2013 or 2016.",
    "gold_parse": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016",
    "beam": [
      [
        "SELECT Count ( * ) FROM matches WHERE year > = value",
        -0.6626806259155273
      ],
      [
        "SELECT Count ( * ) FROM matches WHERE year = value OR year = value",
        -0.7386388778686523
      ],
      [
        "SELECT Count ( * ) FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.year = value OR T1.last_name = value",
        -5.818159103393555
      ],
      [
        "SELECT Count ( * ) FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.year = value OR T1.birth_date = value",
        -6.264085292816162
      ],
      [
        "SELECT Count ( * ) FROM matches WHERE year LIKE value OR year = value",
        -7.314202308654785
      ],
      [
        "SELECT Count ( * ) FROM matches WHERE tourney_date = value OR year = value",
        -7.884380340576172
      ],
      [
        "SELECT Count ( * ) FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T1.birth_date = value OR T2.year = value",
        -8.243971824645996
      ],
      [
        "SELECT Count ( * ) FROM matches WHERE year = value OR tourney_date = value",
        -8.56968355178833
      ],
      [
        "SELECT Count ( * ) FROM matches WHERE year > = value OR year = value",
        -9.227121353149414
      ],
      [
        "SELECT Count ( * ) FROM matches WHERE year < = value",
        -9.33535385131836
      ],
      [
        "SELECT Count ( * ) FROM matches WHERE year > value OR year = value",
        -10.388520240783691
      ],
      [
        "SELECT Count ( * ) FROM matches WHERE year BETWEEN value AND value",
        -10.492470741271973
      ],
      [
        "SELECT Count ( * ) FROM matches WHERE year = value OR year LIKE value",
        -10.901714324951172
      ],
      [
        "SELECT Count ( * ) FROM matches WHERE year > value",
        -11.208930015563965
      ],
      [
        "SELECT Count ( * ) FROM matches WHERE year > = value AND year < = value",
        -11.321942329406738
      ],
      [
        "SELECT Count ( * ) FROM matches WHERE tourney_date > = value",
        -11.5324125289917
      ],
      [
        "SELECT Count ( * ) FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T1.last_name = value OR T2.year = value",
        -11.917165756225586
      ],
      [
        "SELECT Count ( * ) FROM matches WHERE year = value OR winner_age = value",
        -12.006551742553711
      ],
      [
        "SELECT Count ( * ) FROM matches WHERE year LIKE value",
        -12.10776424407959
      ],
      [
        "SELECT Count ( * ) FROM matches WHERE winner_age > = value",
        -12.702016830444336
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM matches WHERE year > = 2013",
    "predicted_parse": "SELECT Count ( * ) FROM matches WHERE year > = value",
    "predicted_parse_explanation": [
      "find the number of rows in matches table whose year greater than or equals 2013"
    ],
    "template_feedback": "consider the year equals 2016 or year equals 2013 conditions in place of the year greater than or equals 2013 conditions .",
    "primary_span": [
      [
        0,
        9
      ]
    ],
    "secondary_span": [
      [
        10,
        21
      ]
    ],
    "edits": [
      "year equals 2013 or year equals 2016",
      "year greater than or equals to 2013"
    ],
    "edits_original": "< where > add year equals 2013 or year equals 2016 </ where > < where > remove year greater than or equals to 2013 </ where >"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "feedback": "Need to change documents table with paragraphs table in step 1.",
    "question": "What is the document id and name with greatest number of paragraphs?",
    "gold_parse": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1",
    "beam": [
      [
        "SELECT Document_ID , Document_Name FROM Documents GROUP BY Document_ID ORDER BY Count ( * ) Desc LIMIT value",
        -0.008292198181152344
      ],
      [
        "SELECT T2.Document_ID , T1.Document_Name FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T1.Document_ID ORDER BY Count ( * ) Desc LIMIT value",
        -5.21592903137207
      ],
      [
        "SELECT T1.Document_ID , T1.Document_Name FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T2.Document_ID ORDER BY Count ( * ) Desc LIMIT value",
        -6.024919509887695
      ],
      [
        "SELECT T1.Document_ID , T1.Document_Name FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID ORDER BY T2.Paragraph_Text Desc LIMIT value",
        -9.027552485466003
      ],
      [
        "SELECT T1.Document_ID , T1.Document_Name FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T1.Document_ID , T1.Document_Name , T2.Paragraph_Text ORDER BY Count ( * ) Desc LIMIT value",
        -9.595755815505981
      ],
      [
        "SELECT Template_ID , Document_Name FROM Documents GROUP BY Document_ID ORDER BY Count ( * ) Desc LIMIT value",
        -10.262101173400879
      ],
      [
        "SELECT Document_ID , Document_Name FROM Documents GROUP BY Document_ID HAVING Count ( * ) < value ORDER BY Count ( * ) Desc LIMIT value",
        -10.288417458534234
      ],
      [
        "SELECT Document_ID , Document_Name FROM Documents ORDER BY * Desc LIMIT value",
        -10.418463945388794
      ],
      [
        "SELECT T1.Document_ID , T1.Document_Name FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T1.Document_ID , T1.Document_Name , T2.Paragraph_ID ORDER BY Count ( * ) Desc LIMIT value",
        -10.798699736595154
      ],
      [
        "SELECT Document_ID , Document_Name FROM Documents GROUP BY Document_ID",
        -11.04404354095459
      ],
      [
        "SELECT T2.Document_ID , T1.Document_Name FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T2.Document_ID ORDER BY Count ( * ) Desc LIMIT value",
        -11.26276683807373
      ],
      [
        "SELECT T2.Paragraph_ID , T1.Document_Name FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T1.Document_ID ORDER BY Count ( * ) Desc LIMIT value",
        -11.268988609313965
      ],
      [
        "SELECT Document_ID , Document_Name FROM Documents GROUP BY Document_ID ORDER BY Sum ( * ) Desc LIMIT value",
        -11.92581033706665
      ],
      [
        "SELECT T1.Document_ID , T1.Document_Name FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID ORDER BY T2.Paragraph_ID Desc LIMIT value",
        -12.19052791595459
      ],
      [
        "SELECT Document_ID , Document_Name FROM Documents GROUP BY Template_ID ORDER BY Count ( * ) Desc LIMIT value",
        -12.19310188293457
      ],
      [
        "SELECT T2.Document_ID , T2.Document_Name FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID ORDER BY T1.Version_Number Desc LIMIT value",
        -12.341084718704224
      ],
      [
        "SELECT T2.Document_ID , T2.Document_Name FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID ORDER BY T1.Date_Effective_To Desc LIMIT value",
        -12.358904123306274
      ],
      [
        "SELECT Document_ID , Document_Name FROM Documents GROUP BY Document_ID ORDER BY Count ( * ) Desc",
        -12.679118156433105
      ],
      [
        "SELECT Document_ID , Document_Name FROM Documents GROUP BY Document_ID , Document_Name ORDER BY Count ( * ) Desc LIMIT value",
        -12.770428657531738
      ],
      [
        "SELECT Document_ID , Document_Name FROM Documents GROUP BY Document_ID ORDER BY Count ( * ) Asc LIMIT value",
        -13.37021255493164
      ]
    ],
    "predicted_parse_with_values": "SELECT Document_ID , Document_Name FROM Documents GROUP BY Document_ID ORDER BY Count ( * ) Desc LIMIT 1",
    "predicted_parse": "SELECT Document_ID , Document_Name FROM Documents GROUP BY Document_ID ORDER BY Count ( * ) Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of document id in documents table",
      "Step 2: find the document id and document name in documents table with largest value in the results of step 1"
    ],
    "template_feedback": "in step 1 , additionally use the information from the paragraphs table besides the documents table .",
    "primary_span": [
      [
        4,
        11
      ]
    ],
    "secondary_span": [
      [
        12,
        16
      ]
    ],
    "edits": [
      "paragraphs"
    ],
    "edits_original": "< from > add paragraphs </ from >"
  },
  {
    "db_id": "world_1",
    "feedback": "you need to use city, is official and language in place of district, local name and local name respectively. also, verify that asia is used as the local name.",
    "question": "Whic`h unique cities are in  Asian countries where Chinese is the official language?",
    "gold_parse": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  \"Asia\"",
    "beam": [
      [
        "SELECT T1.District FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = value AND T2.LocalName = value",
        -0.07714271545410156
      ],
      [
        "SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = value AND T2.LocalName = value",
        -3.1207923889160156
      ],
      [
        "SELECT T1.Population FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = value AND T2.LocalName = value",
        -4.078193664550781
      ],
      [
        "SELECT T1.District FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Code2 = value AND T2.LocalName = value",
        -4.8660173416137695
      ],
      [
        "SELECT T1.District FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.CountryCode = value AND T2.LocalName = value",
        -6.014071464538574
      ],
      [
        "SELECT T1.District FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = value AND T2.Continent = value",
        -7.696308135986328
      ],
      [
        "SELECT T1.District FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Code2 = value AND T2.Continent = value",
        -7.807914733886719
      ],
      [
        "SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Code2 = value AND T2.LocalName = value",
        -7.9178619384765625
      ],
      [
        "SELECT T1.District FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = value AND T2.Name = value",
        -7.961770057678223
      ],
      [
        "SELECT T1.District FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = value AND T2.GovernmentForm = value",
        -8.125750541687012
      ],
      [
        "SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.CountryCode = value AND T2.LocalName = value",
        -8.232885360717773
      ],
      [
        "SELECT T1.Population FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Code2 = value AND T2.LocalName = value",
        -8.735395431518555
      ],
      [
        "SELECT T1.Population FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.CountryCode = value AND T2.LocalName = value",
        -9.182510375976562
      ],
      [
        "SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Code2 = value AND T2.Continent = value",
        -9.613912582397461
      ],
      [
        "SELECT T1.District FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Code2 = value AND T2.Name = value",
        -9.635609149932861
      ],
      [
        "SELECT T1.District FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = value AND T1.Population = value",
        -9.670089721679688
      ],
      [
        "SELECT T1.District FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.CountryCode = value AND T2.Continent = value",
        -9.860190868377686
      ],
      [
        "SELECT T1.District FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.GovernmentForm = value AND T2.LocalName = value",
        -9.919466972351074
      ],
      [
        "SELECT T1.Population FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Code2 = value AND T2.Continent = value",
        -10.257316589355469
      ],
      [
        "SELECT T1.District FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = value",
        -11.315285682678223
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.District FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = \"T\" AND T2.LocalName = \"Chinese\"",
    "predicted_parse": "SELECT T1.District FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = value AND T2.LocalName = value",
    "predicted_parse_explanation": [
      "Step 1: for each row in city table , find the corresponding rows in country table",
      "Step 2: find the district of the results of step 1 whose continent equals T and local name equals Chinese"
    ],
    "template_feedback": "in step 1 , additionally use the information from the countrylanguage table . in step 2 , consider the continent equals Asia and language equals Chinese and is official equals T conditions in place of the continent equals T and local name equals Chinese conditions . find city 's name in place of district . make sure no repetition in the results .",
    "primary_span": [
      [
        4,
        12
      ],
      [
        17,
        31
      ],
      [
        46,
        49
      ],
      [
        55,
        62
      ]
    ],
    "secondary_span": [
      [
        32,
        45
      ],
      [
        50,
        54
      ]
    ],
    "edits": [
      "distinct",
      "name",
      "district",
      "countrylanguage",
      "is official equals \"T\"",
      "language equals \"Chinese\"",
      "continent equals \"Asia\"",
      "continent equals \"T\"",
      "local name equals \"Chinese\""
    ],
    "edits_original": "< select > add distinct </ select > < select > add name </ select > < select > remove district </ select > < from > add countrylanguage </ from > < where > add is official equals \" T \" </ where > < where > add language equals \" Chinese \" </ where > < where > add continent equals \" Asia \" </ where > < where > remove continent equals \" T \" </ where > < where > remove local name equals \" Chinese \" </ where >"
  },
  {
    "db_id": "dog_kennels",
    "feedback": "You should find the number of rows in treatment table.",
    "question": "Count the number of dogs that went through a treatment.",
    "gold_parse": "SELECT count(DISTINCT dog_id) FROM Treatments",
    "beam": [
      [
        "SELECT Count ( * ) FROM Breeds",
        -0.004528522491455078
      ],
      [
        "SELECT Count ( DISTINCT dog_id ) FROM Treatments",
        -5.614304065704346
      ],
      [
        "SELECT Count ( DISTINCT weight ) FROM Dogs",
        -7.509397983551025
      ],
      [
        "SELECT Count ( DISTINCT treatment_id ) FROM Treatments",
        -9.490562438964844
      ],
      [
        "SELECT Count ( * ) FROM Treatments WHERE treatment_type_code = value",
        -9.546261072158813
      ],
      [
        "SELECT Count ( treatment_type_code ) FROM Treatment_Types",
        -9.769951820373535
      ],
      [
        "SELECT Count ( DISTINCT treatment_type_code ) FROM Treatment_Types",
        -10.317852020263672
      ],
      [
        "SELECT Count ( DISTINCT treatment_type_description ) FROM Treatment_Types",
        -11.499871730804443
      ],
      [
        "SELECT Count ( DISTINCT treatment_type_code ) FROM Treatments",
        -11.789771556854248
      ],
      [
        "SELECT Sum ( weight ) FROM Dogs",
        -12.647541761398315
      ],
      [
        "SELECT Count ( DISTINCT gender ) FROM Dogs",
        -13.275900840759277
      ],
      [
        "SELECT Count ( DISTINCT age ) FROM Dogs",
        -13.501856327056885
      ],
      [
        "SELECT Count ( DISTINCT state ) FROM Owners",
        -13.573589324951172
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM Breeds",
        -13.57770586013794
      ],
      [
        "SELECT Count ( DISTINCT abandoned_yn ) FROM Dogs",
        -14.041873931884766
      ],
      [
        "SELECT Count ( DISTINCT state ) FROM Professionals",
        -14.116039276123047
      ],
      [
        "SELECT Count ( size_description ) FROM Sizes",
        -14.13459587097168
      ],
      [
        "SELECT Count ( treatment_type_description ) FROM Treatment_Types",
        -14.270955085754395
      ],
      [
        "SELECT Count ( DISTINCT date_of_birth ) FROM Dogs",
        -14.374521255493164
      ],
      [
        "SELECT Count ( city ) FROM Owners",
        -14.380401611328125
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM Breeds",
    "predicted_parse": "SELECT Count ( * ) FROM Breeds",
    "predicted_parse_explanation": [
      "find the number of rows in breeds table"
    ],
    "template_feedback": "use treatments table in place of breeds table . find number of different dog id in place of number of rows .",
    "primary_span": [
      [
        0,
        2
      ],
      [
        9,
        14
      ]
    ],
    "secondary_span": [
      [
        3,
        8
      ],
      [
        15,
        21
      ]
    ],
    "edits": [
      "number of distinct dog id",
      "number of rows",
      "treatments",
      "breeds"
    ],
    "edits_original": "< select > add number of distinct dog id </ select > < select > remove number of rows </ select > < from > add treatments </ from > < from > remove breeds </ from >"
  },
  {
    "db_id": "student_transcripts_tracking",
    "feedback": "Find course description whose course name equals math .",
    "question": "How is the math course described?",
    "gold_parse": "SELECT course_description FROM Courses WHERE course_name  =  'math'",
    "beam": [
      [
        "SELECT Count ( * ) FROM Courses WHERE course_name = value",
        -0.0001392364501953125
      ],
      [
        "SELECT * FROM Courses WHERE course_name = value",
        -9.77601444721222
      ],
      [
        "SELECT Count ( * ) FROM Addresses",
        -10.01106071472168
      ],
      [
        "SELECT course_description FROM Courses WHERE course_name = value",
        -10.70788824558258
      ],
      [
        "SELECT course_name FROM Courses WHERE course_name = value",
        -11.568433284759521
      ],
      [
        "SELECT course_id FROM Courses WHERE course_name = value",
        -13.047269344329834
      ],
      [
        "SELECT Count ( * ) , course_name FROM Courses WHERE course_name = value",
        -14.594813585281372
      ],
      [
        "SELECT Avg ( * ) FROM Courses WHERE course_name = value",
        -14.67373114824295
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM Courses WHERE course_name = value",
        -14.812749862670898
      ],
      [
        "SELECT Avg ( course_description ) FROM Courses WHERE course_name = value",
        -14.905000507831573
      ],
      [
        "SELECT Sum ( * ) FROM Courses WHERE course_name = value",
        -14.99456375837326
      ],
      [
        "SELECT Count ( * ) FROM Courses WHERE course_name LIKE value",
        -15.010542869567871
      ],
      [
        "SELECT Sum ( course_description ) FROM Courses WHERE course_name = value",
        -15.688225030899048
      ],
      [
        "SELECT Avg ( course_id ) FROM Courses WHERE course_name = value",
        -16.252380847930908
      ],
      [
        "SELECT Count ( * ) FROM Courses GROUP BY course_name HAVING course_name = value",
        -16.29571843147278
      ],
      [
        "SELECT T2.section_description FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = value",
        -16.472118377685547
      ],
      [
        "SELECT Count ( * ) FROM Addresses AS T1 EXCEPT SELECT * FROM Courses AS T2 WHERE T2.course_name = value",
        -16.763551712036133
      ],
      [
        "SELECT Count ( DISTINCT * ) FROM Courses WHERE course_name = value",
        -16.783231735229492
      ],
      [
        "SELECT Count ( * ) FROM Courses WHERE Count ( course_name ) = value",
        -16.869141578674316
      ],
      [
        "SELECT Count ( * ) FROM Courses WHERE course_name IN ( SELECT course_name FROM Courses )",
        -16.88645362854004
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM Courses WHERE course_name = \"math\"",
    "predicted_parse": "SELECT Count ( * ) FROM Courses WHERE course_name = value",
    "predicted_parse_explanation": [
      "find the number of rows in courses table whose course name equals math"
    ],
    "template_feedback": "find course description in place of number of rows .",
    "primary_span": [
      [
        0,
        2
      ]
    ],
    "secondary_span": [
      [
        3,
        9
      ]
    ],
    "edits": [
      "course description",
      "number of rows"
    ],
    "edits_original": "< select > add course description </ select > < select > remove number of rows </ select >"
  },
  {
    "db_id": "network_1",
    "feedback": "You need to use likes table and grade.",
    "question": "Return the number of likes that the high schooler named Kyle has.",
    "gold_parse": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
    "beam": [
      [
        "SELECT Count ( * ) FROM Highschooler WHERE grade = value",
        -0.1062173843383789
      ],
      [
        "SELECT Count ( * ) FROM Highschooler WHERE grade = value AND name = value",
        -2.979522705078125
      ],
      [
        "SELECT Count ( DISTINCT T2.liked_id ) FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id WHERE T1.grade = value",
        -3.133011817932129
      ],
      [
        "SELECT Count ( * ) FROM Highschooler WHERE name = value",
        -5.90993595123291
      ],
      [
        "SELECT Count ( * ) FROM Highschooler WHERE grade = value AND grade = value",
        -6.4520368576049805
      ],
      [
        "SELECT Count ( * ) FROM Highschooler WHERE name = value AND grade = value",
        -7.160304069519043
      ],
      [
        "SELECT Count ( DISTINCT ID ) FROM Highschooler WHERE grade = value",
        -7.793355941772461
      ],
      [
        "SELECT Count ( * ) FROM Highschooler WHERE name = value AND name = value",
        -7.826129913330078
      ],
      [
        "SELECT Count ( DISTINCT T2.liked_id ) FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id WHERE T1.grade = value AND T1.name = value",
        -8.13718032836914
      ],
      [
        "SELECT Count ( DISTINCT T2.liked_id ) FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id WHERE T1.name = value",
        -9.205740928649902
      ],
      [
        "SELECT Count ( DISTINCT name ) FROM Highschooler WHERE grade = value",
        -9.942525863647461
      ],
      [
        "SELECT T2.liked_id FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id WHERE T1.grade = value",
        -13.062439441680908
      ],
      [
        "SELECT Count ( DISTINCT ID ) FROM Highschooler WHERE name = value",
        -13.468881607055664
      ],
      [
        "SELECT Count ( ID ) FROM Highschooler WHERE grade = value",
        -13.682262897491455
      ],
      [
        "SELECT Count ( DISTINCT T2.student_id ) FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id WHERE T1.grade = value",
        -13.821937561035156
      ],
      [
        "SELECT Count ( * ) FROM Highschooler WHERE grade > value",
        -14.305604934692383
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM Highschooler WHERE grade = value",
        -14.55713176727295
      ],
      [
        "SELECT Avg ( ID ) FROM Highschooler WHERE grade = value",
        -14.669465065002441
      ],
      [
        "SELECT Count ( * ) FROM Highschooler WHERE name > value",
        -14.800554275512695
      ],
      [
        "SELECT Avg ( DISTINCT T2.liked_id ) FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id WHERE T1.grade = value",
        -14.860222816467285
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM Highschooler WHERE grade = \"Kyle\"",
    "predicted_parse": "SELECT Count ( * ) FROM Highschooler WHERE grade = value",
    "predicted_parse_explanation": [
      "find the number of rows in high schooler table whose grade equals Kyle"
    ],
    "template_feedback": "additionally use the information from the likes table besides the high schooler table . consider the name equals Kyle conditions in place of the grade equals Kyle conditions .",
    "primary_span": [
      [
        0,
        7
      ],
      [
        14,
        19
      ]
    ],
    "secondary_span": [
      [
        8,
        13
      ],
      [
        20,
        28
      ]
    ],
    "edits": [
      "likes",
      "name equals \"Kyle\"",
      "grade equals \"Kyle\""
    ],
    "edits_original": "< from > add likes </ from > < where > add name equals \" Kyle \" </ where > < where > remove grade equals \" Kyle \" </ where >"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "feedback": "From Documents table name of the document should have Summer show which is equivalent to Document ID's and look its figure of paragraphs table.",
    "question": "Count the number of paragraphs in the document named 'Summer Show'.",
    "gold_parse": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'",
    "beam": [
      [
        "SELECT Count ( * ) FROM Documents WHERE Document_Name LIKE value",
        -0.43932533264160156
      ],
      [
        "SELECT Count ( * ) FROM Documents WHERE Document_Name = value",
        -1.0342235565185547
      ],
      [
        "SELECT Count ( * ) FROM Documents WHERE Document_Name ! = value",
        -12.89619255065918
      ],
      [
        "SELECT Count ( * ) FROM Documents WHERE Document_Name < value",
        -13.020445823669434
      ],
      [
        "SELECT Count ( * ) FROM Documents WHERE Document_Name = value AND Document_Name = value",
        -13.850069761276245
      ],
      [
        "SELECT Count ( * ) FROM Documents WHERE Document_Name IN ( SELECT Document_Name FROM Documents WHERE Document_Name = value )",
        -13.993725776672363
      ],
      [
        "SELECT Sum ( * ) FROM Documents WHERE Document_Name = value",
        -14.542012453079224
      ],
      [
        "SELECT Count ( Count ( * ) ) FROM Documents WHERE Document_Name LIKE value",
        -15.05651569366455
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM Documents WHERE Document_Name LIKE value",
        -15.340299606323242
      ],
      [
        "SELECT Sum ( * ) FROM Documents WHERE Document_Name LIKE value",
        -15.483008623123169
      ],
      [
        "SELECT Count ( Count ( * ) ) FROM Documents WHERE Document_Name = value",
        -16.031746864318848
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM Documents WHERE Document_Name = value",
        -16.081954956054688
      ],
      [
        "SELECT Count ( * ) FROM Documents WHERE DISTINCT Document_Name LIKE value",
        -16.28242301940918
      ],
      [
        "SELECT Count ( * ) , Document_Name FROM Documents WHERE Document_Name = value",
        -16.4118754863739
      ],
      [
        "SELECT Count ( * ) FROM Documents WHERE Document_Name BETWEEN value AND value",
        -16.610132217407227
      ],
      [
        "SELECT Document_Name FROM Documents WHERE Document_Name = value",
        -16.703893899917603
      ],
      [
        "SELECT Avg ( * ) FROM Documents WHERE Document_Name = value",
        -16.725061535835266
      ],
      [
        "SELECT Count ( * ) FROM Ref_Template_Types",
        -16.808094024658203
      ],
      [
        "SELECT Count ( DISTINCT * ) FROM Documents WHERE Document_Name LIKE value",
        -17.0731201171875
      ],
      [
        "SELECT Count ( DISTINCT Document_Name ) FROM Documents WHERE Document_Name LIKE value",
        -17.366430282592773
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM Documents WHERE Document_Name LIKE \"Summer Show\"",
    "predicted_parse": "SELECT Count ( * ) FROM Documents WHERE Document_Name LIKE value",
    "predicted_parse_explanation": [
      "find the number of rows in documents table whose document name like Summer Show"
    ],
    "template_feedback": "additionally use the information from the paragraphs table besides the documents table . consider the document name equals Summer Show conditions in place of the document name like Summer Show conditions .",
    "primary_span": [
      [
        0,
        7
      ],
      [
        13,
        20
      ]
    ],
    "secondary_span": [
      [
        8,
        12
      ],
      [
        21,
        31
      ]
    ],
    "edits": [
      "paragraphs",
      "document name equals \"Summer Show\"",
      "document name like \"Summer Show\""
    ],
    "edits_original": "< from > add paragraphs </ from > < where > add document name equals \" Summer Show \" </ where > < where > remove document name like \" Summer Show \" </ where >"
  },
  {
    "db_id": "flight_2",
    "feedback": "Use airports table instead of airlines table .",
    "question": "How many airports do we have?",
    "gold_parse": "SELECT count(*) FROM AIRPORTS",
    "beam": [
      [
        "SELECT Count ( * ) FROM airlines",
        -1.621246337890625e-05
      ],
      [
        "SELECT Sum ( * ) FROM airlines",
        -12.109508275985718
      ],
      [
        "SELECT Sum ( AirportName ) FROM airports",
        -13.313669681549072
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE City = value",
        -13.51682448387146
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM airlines",
        -14.010265350341797
      ],
      [
        "SELECT Sum ( AirportCode ) FROM airports",
        -14.097557544708252
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE AirportName = value",
        -14.236374616622925
      ],
      [
        "SELECT Avg ( * ) FROM airlines",
        -14.309602737426758
      ],
      [
        "SELECT Count ( * ) FROM airports GROUP BY AirportCode",
        -14.33113181591034
      ],
      [
        "SELECT Count ( * ) , City FROM airports",
        -14.735226154327393
      ],
      [
        "SELECT Count ( * ) , AirportName FROM airports",
        -14.795577585697174
      ],
      [
        "SELECT Count ( Count ( * ) ) FROM airlines",
        -15.200848579406738
      ],
      [
        "SELECT Sum ( City ) FROM airports",
        -15.349148273468018
      ],
      [
        "SELECT Sum ( Country ) FROM airports",
        -15.650652885437012
      ],
      [
        "SELECT Sum ( CountryAbbrev ) FROM airports",
        -16.03415822982788
      ],
      [
        "SELECT Count ( * ) FROM airports ORDER BY AirportCode Desc",
        -16.09007215499878
      ],
      [
        "SELECT Avg ( AirportName ) FROM airports",
        -16.244428873062134
      ],
      [
        "SELECT Avg ( AirportCode ) FROM airports",
        -16.389117002487183
      ],
      [
        "SELECT Count ( DISTINCT AirportName ) FROM airports",
        -16.438651084899902
      ],
      [
        "SELECT Count ( AirportName ) FROM airports",
        -16.8323917388916
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM airlines",
    "predicted_parse": "SELECT Count ( * ) FROM airlines",
    "predicted_parse_explanation": [
      "find the number of rows in airlines table"
    ],
    "template_feedback": "use airports table in place of airlines table .",
    "primary_span": [
      [
        0,
        2
      ]
    ],
    "secondary_span": [
      [
        3,
        8
      ]
    ],
    "edits": [
      "airports",
      "airlines"
    ],
    "edits_original": "< from > add airports </ from > < from > remove airlines </ from >"
  },
  {
    "db_id": "student_transcripts_tracking",
    "feedback": "Additionally, search for name of department in step 3.",
    "question": "For each department id, what is the name of the department with the most number of degrees?",
    "gold_parse": "SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1",
    "beam": [
      [
        "SELECT T1.department_name , Count ( * ) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id GROUP BY T2.department_id ORDER BY Count ( * ) Desc LIMIT value",
        -0.004352569580078125
      ],
      [
        "SELECT department_name , Count ( * ) FROM Departments GROUP BY department_id ORDER BY Count ( * ) Desc LIMIT value",
        -6.6127777099609375
      ],
      [
        "SELECT department_name , Count ( * ) FROM Departments GROUP BY department_name ORDER BY Count ( * ) Desc LIMIT value",
        -6.636928558349609
      ],
      [
        "SELECT T1.department_name FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id GROUP BY T2.department_id ORDER BY Count ( * ) Desc LIMIT value",
        -6.639984130859375
      ],
      [
        "SELECT T1.department_name , Sum ( * ) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id GROUP BY T2.department_id ORDER BY Count ( * ) Desc LIMIT value",
        -9.36981749534607
      ],
      [
        "SELECT T1.department_name , Sum ( T1.department_name ) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id GROUP BY T2.department_id ORDER BY Count ( * ) Desc LIMIT value",
        -9.384765863418579
      ],
      [
        "SELECT T1.department_name , Sum ( T2.degree_summary_name ) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id GROUP BY T2.department_id ORDER BY Count ( * ) Desc LIMIT value",
        -9.943616390228271
      ],
      [
        "SELECT T1.department_name , Sum ( T2.department_id ) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id GROUP BY T2.department_id ORDER BY Count ( * ) Desc LIMIT value",
        -10.38194227218628
      ],
      [
        "SELECT T2.department_name , Sum ( T1.course_name ) FROM Courses AS T1 JOIN Departments AS T2 JOIN Degree_Programs AS T3 ON T3.department_id = T2.department_id JOIN Student_Enrolment AS T4 ON T4.degree_program_id = T3.degree_program_id AND T4.degree_program_id = T3.degree_program_id JOIN Student_Enrolment_Courses AS T5 ON T1.course_id = T5.course_id AND T5.student_enrolment_id = T4.student_enrolment_id AND T1.course_id = T5.course_id AND T5.student_enrolment_id = T4.student_enrolment_id GROUP BY T3.department_id ORDER BY Count ( * ) Desc LIMIT value",
        -11.33970594406128
      ],
      [
        "SELECT T1.department_name , T1.department_name FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id GROUP BY T2.department_id ORDER BY Count ( * ) Desc LIMIT value",
        -11.342847347259521
      ],
      [
        "SELECT T1.department_name , Sum ( T2.degree_program_id ) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id GROUP BY T2.department_id ORDER BY Count ( * ) Desc LIMIT value",
        -11.64527940750122
      ],
      [
        "SELECT department_id , Count ( * ) FROM Degree_Programs GROUP BY department_id ORDER BY Count ( * ) Desc LIMIT value",
        -11.748429298400879
      ],
      [
        "SELECT T1.department_name , T2.department_id FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id GROUP BY T2.department_id ORDER BY Count ( * ) Desc LIMIT value",
        -11.784934282302856
      ],
      [
        "SELECT T1.department_name , Sum ( T2.degree_summary_description ) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id GROUP BY T2.department_id ORDER BY Count ( * ) Desc LIMIT value",
        -11.814693450927734
      ],
      [
        "SELECT T1.department_name , Sum ( T1.department_id ) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id GROUP BY T2.department_id ORDER BY Count ( * ) Desc LIMIT value",
        -11.865347862243652
      ],
      [
        "SELECT T2.department_name , Sum ( T1.course_id ) FROM Courses AS T1 JOIN Departments AS T2 JOIN Degree_Programs AS T3 ON T3.department_id = T2.department_id JOIN Student_Enrolment AS T4 ON T4.degree_program_id = T3.degree_program_id AND T4.degree_program_id = T3.degree_program_id JOIN Student_Enrolment_Courses AS T5 ON T1.course_id = T5.course_id AND T5.student_enrolment_id = T4.student_enrolment_id AND T1.course_id = T5.course_id AND T5.student_enrolment_id = T4.student_enrolment_id GROUP BY T3.department_id ORDER BY Count ( * ) Desc LIMIT value",
        -12.090397834777832
      ],
      [
        "SELECT T1.department_name , Sum ( T1.department_description ) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id GROUP BY T2.department_id ORDER BY Count ( * ) Desc LIMIT value",
        -12.10297966003418
      ],
      [
        "SELECT T1.department_name , Count ( * ) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id GROUP BY T2.department_id",
        -12.114287376403809
      ],
      [
        "SELECT T1.department_name , Count ( * ) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id GROUP BY T2.department_id ORDER BY Count ( * ) Desc",
        -12.285185813903809
      ],
      [
        "SELECT T1.department_name , Count ( * ) , T1.department_name FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id GROUP BY T2.department_id ORDER BY Count ( * ) Desc LIMIT value",
        -12.496051788330078
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.department_name , Count ( * ) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id GROUP BY T2.department_id ORDER BY Count ( * ) Desc LIMIT 1",
    "predicted_parse": "SELECT T1.department_name , Count ( * ) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id GROUP BY T2.department_id ORDER BY Count ( * ) Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: for each row in departments table , find the corresponding rows in degree programs table",
      "Step 2: find the number of rows of each value of degree programs 's department id of the results of step 1",
      "Step 3: find the department name and number of rows of the results of step 1 with largest value in the results of step 2"
    ],
    "template_feedback": "in step 3 , find degree programs 's department id in place of number of rows .",
    "primary_span": [
      [
        4,
        9
      ]
    ],
    "secondary_span": [
      [
        10,
        16
      ]
    ],
    "edits": [
      "department id",
      "number of rows"
    ],
    "edits_original": "< select > add department id </ select > < select > remove number of rows </ select >"
  },
  {
    "db_id": "orchestra",
    "feedback": "You need to find orchestra.",
    "question": "Show the names of conductors and the orchestras they have conducted.",
    "gold_parse": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID",
    "beam": [
      [
        "SELECT T1.Name , T2.Year_of_Founded FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID",
        -0.5159808397293091
      ],
      [
        "SELECT T1.Name , T2.Major_Record_Format FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID",
        -1.1486806869506836
      ],
      [
        "SELECT T1.Name , T2.Record_Company FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID",
        -2.744856595993042
      ],
      [
        "SELECT Name , Year_of_Work FROM conductor",
        -4.857600688934326
      ],
      [
        "SELECT Name , Nationality FROM conductor",
        -5.040213584899902
      ],
      [
        "SELECT T1.Name , T3.Official_ratings_(millions) FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID JOIN performance AS T3 ON T2.Orchestra_ID = T3.Orchestra_ID",
        -5.839963912963867
      ],
      [
        "SELECT Name , Age FROM conductor",
        -6.6678056716918945
      ],
      [
        "SELECT Name , Name FROM conductor",
        -7.545910835266113
      ],
      [
        "SELECT T1.Name , T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID",
        -7.570583343505859
      ],
      [
        "SELECT T1.Name , T3.Type FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID JOIN performance AS T3 ON T2.Orchestra_ID = T3.Orchestra_ID",
        -7.675423622131348
      ],
      [
        "SELECT T1.Name , T3.Date FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID JOIN performance AS T3 ON T2.Orchestra_ID = T3.Orchestra_ID",
        -7.769405364990234
      ],
      [
        "SELECT T1.Name , T3.Share FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID JOIN performance AS T3 ON T2.Orchestra_ID = T3.Orchestra_ID",
        -7.994623184204102
      ],
      [
        "SELECT T1.Name , T2.Conductor_ID FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID",
        -8.163382530212402
      ],
      [
        "SELECT T1.Name , T2.Orchestra_ID FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID",
        -8.831671714782715
      ],
      [
        "SELECT T1.Name , T3.Weekly_rank FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID JOIN performance AS T3 ON T2.Orchestra_ID = T3.Orchestra_ID",
        -8.918207168579102
      ],
      [
        "SELECT Name , Conductor_ID FROM conductor",
        -9.013028144836426
      ],
      [
        "SELECT T1.Name , T4.Attendance FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID JOIN performance AS T3 ON T2.Orchestra_ID = T3.Orchestra_ID JOIN show AS T4 ON T3.Performance_ID = T4.Performance_ID",
        -9.019964218139648
      ],
      [
        "SELECT T1.Name , T4.Result FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID JOIN performance AS T3 ON T2.Orchestra_ID = T3.Orchestra_ID JOIN show AS T4 ON T3.Performance_ID = T4.Performance_ID",
        -9.432504653930664
      ],
      [
        "SELECT T1.Name , T4.If_first_show FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID JOIN performance AS T3 ON T2.Orchestra_ID = T3.Orchestra_ID JOIN show AS T4 ON T3.Performance_ID = T4.Performance_ID",
        -9.675854682922363
      ],
      [
        "SELECT Name FROM conductor",
        -13.93915843963623
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.Name , T2.Year_of_Founded FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID",
    "predicted_parse": "SELECT T1.Name , T2.Year_of_Founded FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID",
    "predicted_parse_explanation": [
      "Step 1: for each row in conductor table , find the corresponding rows in orchestra table",
      "Step 2: find the name and year of founded of the results of step 1"
    ],
    "template_feedback": "in step 2 , find orchestra in place of year of founded .",
    "primary_span": [
      [
        4,
        5
      ]
    ],
    "secondary_span": [
      [
        6,
        12
      ]
    ],
    "edits": [
      "orchestra",
      "year of founded"
    ],
    "edits_original": "< select > add orchestra </ select > < select > remove year of founded </ select >"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "feedback": "Use document description in place of template type description .",
    "question": "What are the ids, names, and descriptions for all documents?",
    "gold_parse": "SELECT document_id ,  document_name ,  document_description FROM Documents",
    "beam": [
      [
        "SELECT T3.Document_ID , T3.Document_Name , T1.Template_Type_Description FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID",
        -0.6625852584838867
      ],
      [
        "SELECT Document_ID , Document_Name , Document_Description FROM Documents",
        -0.7285051345825195
      ],
      [
        "SELECT Document_ID , Document_Name , Document_Name , Document_Description FROM Documents",
        -7.809781074523926
      ],
      [
        "SELECT T3.Document_ID , T3.Document_Name , T1.Template_Type_Description , T3.Document_Description FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID",
        -8.081774711608887
      ],
      [
        "SELECT T3.Document_ID , T3.Document_Name , T3.Document_Name , T1.Template_Type_Description FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID",
        -8.215678215026855
      ],
      [
        "SELECT Document_ID , Document_Name , Document_Description , Document_Description FROM Documents",
        -8.52916431427002
      ],
      [
        "SELECT T3.Document_ID , T3.Document_Name , T1.Template_Type_Description , T1.Template_Type_Description FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID",
        -8.677647590637207
      ],
      [
        "SELECT T4.Document_ID , T3.Document_Name , T1.Template_Type_Description FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code AND T1.Template_Type_Code = T2.Template_Type_Code JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID AND T2.Template_ID = T3.Template_ID JOIN Paragraphs AS T4 ON T3.Document_ID = T4.Document_ID",
        -8.964164733886719
      ],
      [
        "SELECT T2.Document_ID , T1.Document_Name , T1.Document_Description FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID",
        -9.017154693603516
      ],
      [
        "SELECT T3.Document_ID , T3.Document_Name , T3.Document_Description , T1.Template_Type_Description FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID",
        -9.151884078979492
      ],
      [
        "SELECT Document_ID , Document_Name , Document_Name FROM Documents",
        -10.193021774291992
      ],
      [
        "SELECT T2.Template_ID , T3.Document_Name , T1.Template_Type_Description FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code AND T1.Template_Type_Code = T2.Template_Type_Code JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID",
        -10.773923873901367
      ],
      [
        "SELECT T1.Template_ID , T2.Document_Name , T2.Document_Description FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID",
        -10.82994270324707
      ],
      [
        "SELECT T4.Paragraph_ID , T3.Document_Name , T1.Template_Type_Description FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code AND T1.Template_Type_Code = T2.Template_Type_Code JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID AND T2.Template_ID = T3.Template_ID JOIN Paragraphs AS T4 ON T3.Document_ID = T4.Document_ID",
        -11.211275100708008
      ],
      [
        "SELECT T2.Paragraph_ID , T1.Document_Name , T1.Document_Description FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID",
        -11.265050888061523
      ],
      [
        "SELECT T3.Template_ID , T3.Document_Name , T1.Template_Type_Description FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID",
        -12.035171508789062
      ],
      [
        "SELECT Template_ID , Document_Name , Document_Description FROM Documents",
        -12.092517852783203
      ],
      [
        "SELECT Document_ID , Document_Name FROM Documents",
        -12.323904991149902
      ],
      [
        "SELECT T1.Document_ID , T1.Document_Name , T2.Paragraph_Text FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID",
        -12.610381126403809
      ],
      [
        "SELECT T3.Document_ID , T3.Document_Name , T1.Template_Type_Description FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID UNION SELECT T1.Template_Type_Description FROM Ref_Template_Types AS T1",
        -13.690602779388428
      ]
    ],
    "predicted_parse_with_values": "SELECT T3.Document_ID , T3.Document_Name , T1.Template_Type_Description FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID",
    "predicted_parse": "SELECT T3.Document_ID , T3.Document_Name , T1.Template_Type_Description FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID",
    "predicted_parse_explanation": [
      "Step 1: for each row in reference template types table , find the corresponding rows in templates table and in documents table",
      "Step 2: find the document id , document name , template type description of the results of step 1"
    ],
    "template_feedback": "in step 1 , do not use the templates table and reference template types table . in step 2 , find document description in place of template type description .",
    "primary_span": [
      [
        4,
        15
      ],
      [
        20,
        22
      ]
    ],
    "secondary_span": [
      [
        4,
        15
      ],
      [
        23,
        29
      ]
    ],
    "edits": [
      "document description",
      "template type description",
      "reference template types",
      "templates"
    ],
    "edits_original": "< select > add document description </ select > < select > remove template type description </ select > < from > remove reference template types </ from > < from > remove templates </ from >"
  },
  {
    "db_id": "world_1",
    "feedback": "Make sure that district equals Gelderland .",
    "question": "What is the total population of Gelderland district?",
    "gold_parse": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"",
    "beam": [
      [
        "SELECT Sum ( Population ) FROM country",
        -0.6928682327270508
      ],
      [
        "SELECT Sum ( LifeExpectancy ) FROM country",
        -0.8836870193481445
      ],
      [
        "SELECT Sum ( Population ) FROM country WHERE LocalName = value",
        -3.608597755432129
      ],
      [
        "SELECT Sum ( LifeExpectancy ) FROM country WHERE LocalName = value",
        -3.8624935150146484
      ],
      [
        "SELECT Sum ( Population ) FROM country WHERE Region = value",
        -4.52632999420166
      ],
      [
        "SELECT Sum ( LifeExpectancy ) FROM country WHERE Region = value",
        -4.776519775390625
      ],
      [
        "SELECT Sum ( Population ) FROM country WHERE Name = value",
        -5.14013671875
      ],
      [
        "SELECT Sum ( LifeExpectancy ) FROM country WHERE Name = value",
        -5.3931169509887695
      ],
      [
        "SELECT Sum ( T2.Population ) FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.District = value",
        -5.407839775085449
      ],
      [
        "SELECT Sum ( T2.LifeExpectancy ) FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.District = value",
        -5.659770965576172
      ],
      [
        "SELECT Sum ( GNPOld ) FROM country",
        -7.541884422302246
      ],
      [
        "SELECT Sum ( Population ) FROM city",
        -8.824239730834961
      ],
      [
        "SELECT Sum ( GNP ) FROM country",
        -10.897038459777832
      ],
      [
        "SELECT Sum ( GNPOld ) FROM country WHERE LocalName = value",
        -11.001251220703125
      ],
      [
        "SELECT Sum ( T2.Population ) , T2.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code GROUP BY T1.District",
        -11.656184196472168
      ],
      [
        "SELECT Sum ( T2.LifeExpectancy ) , T2.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code GROUP BY T1.District",
        -11.866968154907227
      ],
      [
        "SELECT Count ( Population ) FROM country",
        -12.073679447174072
      ],
      [
        "SELECT Avg ( Population ) FROM country",
        -12.367410659790039
      ],
      [
        "SELECT Avg ( LifeExpectancy ) FROM country",
        -12.46677017211914
      ],
      [
        "SELECT Count ( LifeExpectancy ) FROM country",
        -12.515560626983643
      ]
    ],
    "predicted_parse_with_values": "SELECT Sum ( Population ) FROM country",
    "predicted_parse": "SELECT Sum ( Population ) FROM country",
    "predicted_parse_explanation": [
      "find the summation of population in country table"
    ],
    "template_feedback": "use city table in place of country table . additionally make sure that district equals Gelderland . find summation of city 's population in place of summation of country 's population .",
    "primary_span": [
      [
        0,
        2
      ],
      [
        9,
        16
      ],
      [
        17,
        22
      ]
    ],
    "secondary_span": [
      [
        3,
        8
      ],
      [
        23,
        31
      ]
    ],
    "edits": [
      "city",
      "country",
      "district equals \"Gelderland\""
    ],
    "edits_original": "< from > add city </ from > < from > remove country </ from > < where > add district equals \" Gelderland \" </ where >"
  },
  {
    "db_id": "car_1",
    "feedback": "I want model, car names table and mpg.",
    "question": "What is the car wmodel with the highest mpg?",
    "gold_parse": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1",
    "beam": [
      [
        "SELECT Edispl FROM cars_data ORDER BY Weight Desc LIMIT value",
        -0.18555188179016113
      ],
      [
        "SELECT T1.FullName FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id ORDER BY T4.Weight Desc LIMIT value",
        -2.333620071411133
      ],
      [
        "SELECT Edispl FROM cars_data ORDER BY Horsepower Desc LIMIT value",
        -3.3668386936187744
      ],
      [
        "SELECT * FROM cars_data ORDER BY Weight Desc LIMIT value",
        -4.595041275024414
      ],
      [
        "SELECT Weight FROM cars_data ORDER BY Weight Desc LIMIT value",
        -4.697033882141113
      ],
      [
        "SELECT T1.FullName FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id ORDER BY T4.Horsepower Desc LIMIT value",
        -5.539295196533203
      ],
      [
        "SELECT Edispl FROM cars_data ORDER BY Accelerate Desc LIMIT value",
        -5.671544790267944
      ],
      [
        "SELECT Edispl FROM cars_data ORDER BY Cylinders Desc LIMIT value",
        -6.028947591781616
      ],
      [
        "SELECT Edispl FROM cars_data ORDER BY Edispl Desc LIMIT value",
        -6.479242563247681
      ],
      [
        "SELECT T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id ORDER BY T4.Weight Desc LIMIT value",
        -6.627413272857666
      ],
      [
        "SELECT T1.ModelId FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id ORDER BY T3.Weight Desc LIMIT value",
        -6.910162448883057
      ],
      [
        "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id ORDER BY T3.Weight Desc LIMIT value",
        -7.245140552520752
      ],
      [
        "SELECT Weight FROM cars_data ORDER BY Horsepower Desc LIMIT value",
        -7.621344804763794
      ],
      [
        "SELECT MPG FROM cars_data ORDER BY Weight Desc LIMIT value",
        -7.643734455108643
      ],
      [
        "SELECT * FROM cars_data ORDER BY Horsepower Desc LIMIT value",
        -7.661827564239502
      ],
      [
        "SELECT Edispl FROM cars_data ORDER BY MPG Desc LIMIT value",
        -7.910846471786499
      ],
      [
        "SELECT T1.FullName FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id ORDER BY T4.Accelerate Desc LIMIT value",
        -7.9262871742248535
      ],
      [
        "SELECT T1.FullName FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id ORDER BY T4.Cylinders Desc LIMIT value",
        -8.22290849685669
      ],
      [
        "SELECT Horsepower FROM cars_data ORDER BY Weight Desc LIMIT value",
        -8.28031587600708
      ],
      [
        "SELECT T1.Make FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id ORDER BY T2.Weight Desc LIMIT value",
        -8.385914325714111
      ]
    ],
    "predicted_parse_with_values": "SELECT Edispl FROM cars_data ORDER BY Weight Desc LIMIT 1",
    "predicted_parse": "SELECT Edispl FROM cars_data ORDER BY Weight Desc LIMIT value",
    "predicted_parse_explanation": [
      "find the edispl in cars data table with largest value of weight"
    ],
    "template_feedback": "additionally use the information from the car names table besides the cars data table . find model in place of edispl . order the results by mpg in place of weight .",
    "primary_span": [
      [
        0,
        8
      ],
      [
        15,
        16
      ],
      [
        22,
        26
      ]
    ],
    "secondary_span": [
      [
        9,
        14
      ],
      [
        17,
        21
      ],
      [
        27,
        31
      ]
    ],
    "edits": [
      "model",
      "edispl",
      "car names",
      "mpg",
      "weight"
    ],
    "edits_original": "< select > add model </ select > < select > remove edispl </ select > < from > add car names </ from > < orderBy > add mpg </ orderBy > < orderBy > remove weight </ orderBy >"
  },
  {
    "db_id": "world_1",
    "feedback": "Be certain that those contries have Republic in their government form .",
    "question": "What is the average life expectancy in African countries that are republics?",
    "gold_parse": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"",
    "beam": [
      [
        "SELECT Avg ( LifeExpectancy ) FROM country WHERE Continent = value",
        -0.9150505065917969
      ],
      [
        "SELECT Avg ( GNPOld ) FROM country WHERE Continent = value",
        -1.015817642211914
      ],
      [
        "SELECT Avg ( Population ) FROM country WHERE Continent = value",
        -1.4444599151611328
      ],
      [
        "SELECT Avg ( GNP ) FROM country WHERE Continent = value",
        -6.533487319946289
      ],
      [
        "SELECT Avg ( GNPOld ) FROM country WHERE GovernmentForm = value",
        -10.782464027404785
      ],
      [
        "SELECT Avg ( LifeExpectancy ) FROM country WHERE GovernmentForm = value",
        -11.074831008911133
      ],
      [
        "SELECT Avg ( Population ) FROM country WHERE GovernmentForm = value",
        -11.615483283996582
      ],
      [
        "SELECT Avg ( LifeExpectancy ) , Avg ( GNPOld ) FROM country WHERE Continent = value",
        -12.064489364624023
      ],
      [
        "SELECT Avg ( GNPOld ) FROM country WHERE Region = value",
        -12.649625778198242
      ],
      [
        "SELECT Avg ( GNPOld ) , Avg ( GNPOld ) FROM country WHERE Continent = value",
        -12.653228759765625
      ],
      [
        "SELECT Avg ( Population ) , Avg ( GNPOld ) FROM country WHERE Continent = value",
        -12.831985473632812
      ],
      [
        "SELECT Avg ( LifeExpectancy ) FROM country WHERE Region = value",
        -12.878868103027344
      ],
      [
        "SELECT Avg ( Population ) FROM country WHERE Region = value",
        -13.427423477172852
      ],
      [
        "SELECT Avg ( GNPOld ) FROM country",
        -13.87571907043457
      ],
      [
        "SELECT Avg ( LifeExpectancy ) FROM country",
        -14.007863998413086
      ],
      [
        "SELECT Avg ( T1.Population ) FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = value",
        -14.086506843566895
      ],
      [
        "SELECT Avg ( LifeExpectancy ) , Avg ( LifeExpectancy ) FROM country WHERE Continent = value",
        -14.149075508117676
      ],
      [
        "SELECT Avg ( LifeExpectancy ) , Avg ( Population ) FROM country WHERE Continent = value",
        -14.550220489501953
      ],
      [
        "SELECT Avg ( Population ) FROM country",
        -14.657403945922852
      ],
      [
        "SELECT Avg ( GNPOld ) , Avg ( LifeExpectancy ) FROM country WHERE Continent = value",
        -14.874655723571777
      ]
    ],
    "predicted_parse_with_values": "SELECT Avg ( LifeExpectancy ) FROM country WHERE Continent = \"Africa\"",
    "predicted_parse": "SELECT Avg ( LifeExpectancy ) FROM country WHERE Continent = value",
    "predicted_parse_explanation": [
      "find the average life expectancy in country table whose continent equals Africa"
    ],
    "template_feedback": "additionally make sure that government form equals Republic .",
    "primary_span": [
      [
        0,
        8
      ]
    ],
    "secondary_span": [],
    "edits": [
      "government form equals \"Republic\""
    ],
    "edits_original": "< where > add government form equals \" Republic \" </ where >"
  },
  {
    "db_id": "dog_kennels",
    "feedback": "You need to use table of treatments.",
    "question": "How many dogs went through any treatments?",
    "gold_parse": "SELECT count(DISTINCT dog_id) FROM Treatments",
    "beam": [
      [
        "SELECT Count ( * ) FROM Breeds",
        -0.5414700508117676
      ],
      [
        "SELECT Count ( DISTINCT dog_id ) FROM Treatments",
        -0.8722524642944336
      ],
      [
        "SELECT Count ( * ) FROM Treatments WHERE treatment_type_code = value",
        -10.163511753082275
      ],
      [
        "SELECT Count ( dog_id ) FROM Treatments",
        -11.011947631835938
      ],
      [
        "SELECT Count ( DISTINCT treatment_type_code ) FROM Treatments",
        -11.804057121276855
      ],
      [
        "SELECT Sum ( date_adopted ) FROM Dogs",
        -12.087299704551697
      ],
      [
        "SELECT Sum ( date_arrived ) FROM Dogs",
        -12.274675488471985
      ],
      [
        "SELECT Sum ( dog_id ) FROM Treatments",
        -12.737468481063843
      ],
      [
        "SELECT Sum ( * ) FROM Breeds",
        -12.833148956298828
      ],
      [
        "SELECT Sum ( weight ) FROM Dogs",
        -13.22375774383545
      ],
      [
        "SELECT Sum ( DISTINCT dog_id ) FROM Treatments",
        -13.303364515304565
      ],
      [
        "SELECT Count ( DISTINCT dog_id ) FROM Treatments WHERE treatment_type_code = value",
        -13.610508441925049
      ],
      [
        "SELECT Count ( date_adopted ) FROM Dogs",
        -14.093955516815186
      ],
      [
        "SELECT Count ( DISTINCT treatment_type_description ) FROM Treatment_Types",
        -14.234445571899414
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM Breeds",
        -14.361622333526611
      ],
      [
        "SELECT Count ( DISTINCT weight ) FROM Dogs",
        -14.42734146118164
      ],
      [
        "SELECT Count ( date_arrived ) FROM Dogs",
        -14.62847089767456
      ],
      [
        "SELECT Count ( DISTINCT treatment_type_code ) FROM Treatment_Types",
        -14.790623664855957
      ],
      [
        "SELECT Count ( * ) FROM Treatments ORDER BY dog_id Asc",
        -14.956301122903824
      ],
      [
        "SELECT Count ( * ) , dog_id FROM Treatments",
        -14.968766927719116
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM Breeds",
    "predicted_parse": "SELECT Count ( * ) FROM Breeds",
    "predicted_parse_explanation": [
      "find the number of rows in breeds table"
    ],
    "template_feedback": "use treatments table in place of breeds table . find number of different dog id in place of number of rows .",
    "primary_span": [
      [
        0,
        2
      ],
      [
        9,
        14
      ]
    ],
    "secondary_span": [
      [
        3,
        8
      ],
      [
        15,
        21
      ]
    ],
    "edits": [
      "number of distinct dog id",
      "number of rows",
      "treatments",
      "breeds"
    ],
    "edits_original": "< select > add number of distinct dog id </ select > < select > remove number of rows </ select > < from > add treatments </ from > < from > remove breeds </ from >"
  },
  {
    "db_id": "network_1",
    "feedback": "You need to replace name in place of grade and also search correlated row in likes table to id of Highschooler's.",
    "question": "What are the names of high schoolers who have likes, and how many likes does each have?",
    "gold_parse": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
    "beam": [
      [
        "SELECT Count ( * ) , grade FROM Highschooler GROUP BY grade",
        -0.8020381927490234
      ],
      [
        "SELECT name , Count ( * ) FROM Highschooler GROUP BY grade",
        -1.477783203125
      ],
      [
        "SELECT name , grade FROM Highschooler GROUP BY grade",
        -1.69573974609375
      ],
      [
        "SELECT Count ( DISTINCT name ) , grade FROM Highschooler GROUP BY grade",
        -2.0090560913085938
      ],
      [
        "SELECT Count ( * ) , T1.grade FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id",
        -6.700167179107666
      ],
      [
        "SELECT T1.name , T1.grade FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id",
        -6.887655735015869
      ],
      [
        "SELECT Count ( * ) , T1.grade FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id GROUP BY T2.liked_id",
        -7.726169586181641
      ],
      [
        "SELECT T1.name , T1.grade FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id GROUP BY T2.liked_id",
        -7.760010242462158
      ],
      [
        "SELECT Count ( * ) , T1.grade FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id GROUP BY T2.student_id",
        -7.779569625854492
      ],
      [
        "SELECT grade , Count ( * ) FROM Highschooler GROUP BY grade",
        -7.788818836212158
      ],
      [
        "SELECT Count ( DISTINCT T1.name ) , T1.grade FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id",
        -7.9696455001831055
      ],
      [
        "SELECT T1.name , T1.grade FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id GROUP BY T2.student_id",
        -7.988757133483887
      ],
      [
        "SELECT name , grade , Count ( * ) FROM Highschooler GROUP BY grade",
        -8.406134605407715
      ],
      [
        "SELECT name , Count ( DISTINCT grade ) FROM Highschooler GROUP BY grade",
        -8.844220161437988
      ],
      [
        "SELECT Count ( DISTINCT T1.name ) , T1.grade FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id GROUP BY T2.liked_id",
        -9.010663509368896
      ],
      [
        "SELECT Count ( DISTINCT T1.name ) , T1.grade FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id GROUP BY T2.student_id",
        -9.060196876525879
      ],
      [
        "SELECT name , grade FROM Highschooler",
        -12.540884971618652
      ],
      [
        "SELECT Count ( * ) , grade FROM Highschooler",
        -12.576220512390137
      ],
      [
        "SELECT Count ( DISTINCT name ) , grade FROM Highschooler",
        -14.001798629760742
      ],
      [
        "SELECT name FROM Highschooler GROUP BY grade",
        -14.015847206115723
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) , grade FROM Highschooler GROUP BY grade",
    "predicted_parse": "SELECT Count ( * ) , grade FROM Highschooler GROUP BY grade",
    "predicted_parse_explanation": [
      "find each value of grade in high schooler table along with the number of the corresponding rows to each value"
    ],
    "template_feedback": "additionally use the information from the likes table besides the high schooler table . find for each value of student id in place of grade . find name in place of grade .",
    "primary_span": [
      [
        0,
        7
      ],
      [
        14,
        20
      ],
      [
        26,
        27
      ]
    ],
    "secondary_span": [
      [
        8,
        13
      ],
      [
        21,
        25
      ],
      [
        28,
        32
      ]
    ],
    "edits": [
      "name",
      "grade",
      "likes",
      "student id",
      "grade"
    ],
    "edits_original": "< select > add name </ select > < select > remove grade </ select > < from > add likes </ from > < groupBy > add student id </ groupBy > < groupBy > remove grade </ groupBy >"
  },
  {
    "db_id": "network_1",
    "feedback": "Need to put name on behalf of grade.",
    "question": "Show the ID of the high schooler named Kyle.",
    "gold_parse": "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\"",
    "beam": [
      [
        "SELECT ID FROM Highschooler WHERE grade = value",
        -0.42580509185791016
      ],
      [
        "SELECT ID FROM Highschooler WHERE name = value",
        -1.7877216339111328
      ],
      [
        "SELECT ID FROM Highschooler WHERE grade = value AND name = value",
        -2.1800785064697266
      ],
      [
        "SELECT T2.liked_id FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id WHERE T1.grade = value AND T1.name = value",
        -3.4980621337890625
      ],
      [
        "SELECT T2.liked_id FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id WHERE T1.grade = value",
        -3.6781625747680664
      ],
      [
        "SELECT ID FROM Highschooler WHERE name = value AND name = value",
        -5.621843338012695
      ],
      [
        "SELECT T2.liked_id FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id WHERE T1.name = value",
        -5.845587730407715
      ],
      [
        "SELECT ID FROM Highschooler WHERE grade = value AND grade = value",
        -6.087043762207031
      ],
      [
        "SELECT T2.liked_id FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id WHERE T1.grade = value AND T1.grade = value",
        -7.362665176391602
      ],
      [
        "SELECT ID FROM Highschooler WHERE name = value AND grade = value",
        -7.470881462097168
      ],
      [
        "SELECT T2.liked_id FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id WHERE T1.name = value AND T1.name = value",
        -7.762200355529785
      ],
      [
        "SELECT T2.student_id FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id WHERE T1.grade = value",
        -8.727033615112305
      ],
      [
        "SELECT T2.student_id FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id WHERE T1.name = value",
        -8.903251647949219
      ],
      [
        "SELECT T2.liked_id FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id WHERE T1.name = value AND T1.grade = value",
        -9.638277053833008
      ],
      [
        "SELECT T2.student_id FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id WHERE T1.grade = value AND T1.name = value",
        -10.113725662231445
      ],
      [
        "SELECT ID FROM Highschooler WHERE grade < value",
        -12.886335372924805
      ],
      [
        "SELECT ID FROM Highschooler WHERE grade > value",
        -13.401906967163086
      ],
      [
        "SELECT ID FROM Highschooler WHERE grade > = value",
        -13.427701950073242
      ],
      [
        "SELECT T2.liked_id FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id WHERE T1.grade > = value",
        -14.417043685913086
      ],
      [
        "SELECT DISTINCT ID FROM Highschooler WHERE grade = value",
        -14.450942993164062
      ]
    ],
    "predicted_parse_with_values": "SELECT ID FROM Highschooler WHERE grade = \"Kyle\"",
    "predicted_parse": "SELECT ID FROM Highschooler WHERE grade = value",
    "predicted_parse_explanation": [
      "find the id in high schooler table whose grade equals Kyle"
    ],
    "template_feedback": "consider the name equals Kyle conditions in place of the grade equals Kyle conditions .",
    "primary_span": [
      [
        0,
        5
      ]
    ],
    "secondary_span": [
      [
        6,
        14
      ]
    ],
    "edits": [
      "name equals \"Kyle\"",
      "grade equals \"Kyle\""
    ],
    "edits_original": "< where > add name equals \" Kyle \" </ where > < where > remove grade equals \" Kyle \" </ where >"
  },
  {
    "db_id": "world_1",
    "feedback": "In step 2 and 3 , replace continent with name name .",
    "question": "What are the names of nations speak both English and French?",
    "gold_parse": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\"",
    "beam": [
      [
        "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value INTERSECT SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value",
        -0.016651153564453125
      ],
      [
        "SELECT T1.Continent FROM country AS T1 WHERE T1.LocalName = value INTERSECT SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value",
        -4.577672958374023
      ],
      [
        "SELECT T1.Continent FROM country AS T1 WHERE T1.Name = value INTERSECT SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value",
        -5.827263832092285
      ],
      [
        "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value INTERSECT SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value",
        -6.651250839233398
      ],
      [
        "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value",
        -7.018172264099121
      ],
      [
        "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value INTERSECT SELECT T1.LocalName FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value",
        -7.87801456451416
      ],
      [
        "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value INTERSECT SELECT T1.Continent FROM country AS T1 WHERE T1.LocalName = value",
        -8.360501289367676
      ],
      [
        "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value INTERSECT SELECT T1.Continent FROM country AS T1 WHERE T1.Name = value",
        -8.857224464416504
      ],
      [
        "SELECT T1.Continent FROM country AS T1 WHERE T1.Continent = value INTERSECT SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value",
        -9.15617561340332
      ],
      [
        "SELECT T1.LocalName FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value INTERSECT SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value",
        -9.196281433105469
      ],
      [
        "SELECT T1.Name FROM country AS T1 WHERE T1.LocalName = value INTERSECT SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value",
        -10.242851257324219
      ],
      [
        "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value INTERSECT SELECT T1.Continent FROM sqlite_sequence AS T3 JOIN country AS T1 WHERE T3.name = value",
        -10.324667930603027
      ],
      [
        "SELECT T2.Continent FROM sqlite_sequence AS T1 JOIN country AS T2 WHERE T1.name = value INTERSECT SELECT T2.Continent FROM country AS T2 JOIN countrylanguage AS T3 ON T2.Code = T3.CountryCode WHERE T3.Language = value",
        -10.91317367553711
      ],
      [
        "SELECT T1.Continent FROM country AS T1 WHERE T1.LocalName = value INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value",
        -11.856921195983887
      ],
      [
        "SELECT T1.Name FROM country AS T1 WHERE T1.Name = value INTERSECT SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value",
        -12.303497314453125
      ],
      [
        "SELECT T1.Continent FROM country AS T1 WHERE T1.LocalName = value INTERSECT SELECT T1.LocalName FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value",
        -12.688627243041992
      ],
      [
        "SELECT T1.Continent FROM country AS T1 WHERE T1.Name = value INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value",
        -13.057838439941406
      ],
      [
        "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value INTERSECT SELECT T1.GovernmentForm FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value",
        -13.077319145202637
      ],
      [
        "SELECT Continent FROM country WHERE LocalName = value INTERSECT SELECT Continent FROM country WHERE LocalName = value",
        -13.080828666687012
      ],
      [
        "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value",
        -13.167791366577148
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" INTERSECT SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"French\"",
    "predicted_parse": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value INTERSECT SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value",
    "predicted_parse_explanation": [
      "Step 1: for each row in country table , find the corresponding rows in countrylanguage table",
      "Step 2: find the continent of the results of step 1 whose language equals English",
      "Step 3: for each row in country table , find the corresponding rows in countrylanguage table",
      "Step 4: find the continent of the results of step 3 whose language equals French",
      "Step 5: show the rows that are in both the results of step 2 and step 4"
    ],
    "template_feedback": "in step 2 , find name in place of continent . in step 4 , find name in place of continent .",
    "primary_span": [
      [
        4,
        5
      ],
      [
        15,
        16
      ]
    ],
    "secondary_span": [
      [
        6,
        10
      ],
      [
        17,
        21
      ]
    ],
    "edits": [
      "name",
      "continent",
      "name",
      "continent"
    ],
    "edits_original": "< select > add name </ select > < select > remove continent </ select > < select > add name </ select > < select > remove continent </ select >"
  },
  {
    "db_id": "world_1",
    "feedback": "Use government form as code 2 is false.",
    "question": "How many different forms of governments are there in Africa?",
    "gold_parse": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"",
    "beam": [
      [
        "SELECT Count ( DISTINCT Code2 ) FROM country WHERE Continent = value",
        -0.0049610137939453125
      ],
      [
        "SELECT Count ( * ) FROM country WHERE Continent = value",
        -5.532753944396973
      ],
      [
        "SELECT Count ( DISTINCT GovernmentForm ) FROM country WHERE Continent = value",
        -7.337047100067139
      ],
      [
        "SELECT Count ( DISTINCT Code ) FROM country WHERE Continent = value",
        -8.431793689727783
      ],
      [
        "SELECT Count ( Code2 ) FROM country WHERE Continent = value",
        -9.84140682220459
      ],
      [
        "SELECT Count ( DISTINCT T2.Language ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = value",
        -10.859445571899414
      ],
      [
        "SELECT Count ( DISTINCT Name ) FROM country WHERE Continent = value",
        -11.091041564941406
      ],
      [
        "SELECT Count ( DISTINCT Code2 ) FROM country",
        -11.411142826080322
      ],
      [
        "SELECT Count ( DISTINCT Region ) FROM country WHERE Continent = value",
        -12.253408432006836
      ],
      [
        "SELECT Count ( DISTINCT T1.District ) FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = value",
        -13.019284725189209
      ],
      [
        "SELECT Count ( LocalName ) FROM country WHERE Continent = value",
        -13.18937873840332
      ],
      [
        "SELECT DISTINCT Count ( DISTINCT Code2 ) FROM country WHERE Continent = value",
        -13.222070217132568
      ],
      [
        "SELECT Count ( Population ) FROM country WHERE Continent = value",
        -13.319347858428955
      ],
      [
        "SELECT Count ( DISTINCT Code2 ) FROM country WHERE Name = value",
        -13.36680793762207
      ],
      [
        "SELECT Count ( DISTINCT Continent ) FROM country WHERE Continent = value",
        -13.497576236724854
      ],
      [
        "SELECT Count ( Code ) FROM country WHERE Continent = value",
        -13.732531547546387
      ],
      [
        "SELECT Count ( GovernmentForm ) FROM country WHERE Continent = value",
        -13.809211254119873
      ],
      [
        "SELECT Count ( DISTINCT LocalName ) FROM country WHERE Continent = value",
        -13.837111949920654
      ],
      [
        "SELECT Count ( * ) FROM city",
        -14.247831344604492
      ],
      [
        "SELECT Count ( DISTINCT HeadOfState ) FROM country WHERE Continent = value",
        -14.274596691131592
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( DISTINCT Code2 ) FROM country WHERE Continent = \"Africa\"",
    "predicted_parse": "SELECT Count ( DISTINCT Code2 ) FROM country WHERE Continent = value",
    "predicted_parse_explanation": [
      "find the number of different code2 in country table whose continent equals Africa"
    ],
    "template_feedback": "find number of different government form in place of number of different code2 .",
    "primary_span": [
      [
        0,
        5
      ]
    ],
    "secondary_span": [
      [
        6,
        13
      ]
    ],
    "edits": [
      "number of distinct government form",
      "number of distinct code2"
    ],
    "edits_original": "< select > add number of distinct government form </ select > < select > remove number of distinct code2 </ select >"
  },
  {
    "db_id": "poker_player",
    "feedback": "Ensure people's people id is present in poker player table .",
    "question": "Return the names of all the poker players.",
    "gold_parse": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID",
    "beam": [
      [
        "SELECT Name FROM people",
        -1.9073486328125e-05
      ],
      [
        "SELECT Name FROM people WHERE Name = value",
        -11.519211053848267
      ],
      [
        "SELECT Name , Name FROM people",
        -13.371147155761719
      ],
      [
        "SELECT Poker_Player_ID FROM poker_player",
        -13.706920623779297
      ],
      [
        "SELECT DISTINCT Name FROM people",
        -14.075798988342285
      ],
      [
        "SELECT Count ( Name ) FROM people",
        -14.080995559692383
      ],
      [
        "SELECT Name FROM people ORDER BY Name Desc",
        -14.13049840927124
      ],
      [
        "SELECT Name FROM people UNION SELECT Name FROM people",
        -14.775649547576904
      ],
      [
        "SELECT Sum ( Name ) FROM people",
        -15.034510612487793
      ],
      [
        "SELECT Name FROM people ORDER BY Name Asc",
        -15.24468183517456
      ],
      [
        "SELECT Name FROM people WHERE Nationality = value",
        -15.460922718048096
      ],
      [
        "SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Money_Rank = value",
        -16.26057243347168
      ],
      [
        "SELECT Name FROM people GROUP BY Name",
        -16.261445999145508
      ],
      [
        "SELECT Min ( Name ) FROM people",
        -16.735901832580566
      ],
      [
        "SELECT Max ( Name ) FROM people",
        -16.82395362854004
      ],
      [
        "SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Poker_Player_ID = T2.Name",
        -16.82921552658081
      ],
      [
        "SELECT DISTINCT Name FROM people",
        -16.970779418945312
      ],
      [
        "SELECT Name FROM people LIMIT value",
        -17.22742748260498
      ],
      [
        "SELECT Name FROM people",
        -17.302392959594727
      ],
      [
        "SELECT * FROM poker_player",
        -17.551966667175293
      ]
    ],
    "predicted_parse_with_values": "SELECT Name FROM people",
    "predicted_parse": "SELECT Name FROM people",
    "predicted_parse_explanation": [
      "find the name in people table"
    ],
    "template_feedback": "additionally use the information from the poker player table besides the people table .",
    "primary_span": [
      [
        0,
        8
      ]
    ],
    "secondary_span": [
      [
        9,
        13
      ]
    ],
    "edits": [
      "poker player"
    ],
    "edits_original": "< from > add poker player </ from >"
  },
  {
    "db_id": "dog_kennels",
    "feedback": "first name is wrong . Use state in place of it .",
    "question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.",
    "gold_parse": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'",
    "beam": [
      [
        "SELECT first_name , last_name , email_address FROM Owners WHERE first_name LIKE value",
        -0.3232889175415039
      ],
      [
        "SELECT first_name , last_name , email_address FROM Owners WHERE state LIKE value",
        -1.2951374053955078
      ],
      [
        "SELECT T1.first_name , T1.last_name , T1.email_address FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id WHERE T3.first_name LIKE value",
        -6.769861698150635
      ],
      [
        "SELECT T1.first_name , T1.last_name , T1.email_address FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T2.name LIKE value",
        -7.011463165283203
      ],
      [
        "SELECT first_name , last_name , email_address FROM Owners WHERE last_name LIKE value",
        -9.057523727416992
      ],
      [
        "SELECT T1.first_name , T1.last_name , T3.email_address FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id WHERE T1.first_name LIKE value",
        -9.646177291870117
      ],
      [
        "SELECT T1.first_name , T1.last_name , T3.email_address FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id WHERE T1.state LIKE value",
        -10.547931671142578
      ],
      [
        "SELECT T1.first_name , T1.last_name , T1.email_address FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id WHERE T3.state LIKE value",
        -10.819725036621094
      ],
      [
        "SELECT first_name , last_name , email_address FROM Owners WHERE street LIKE value",
        -11.033024787902832
      ],
      [
        "SELECT T1.first_name , T3.last_name , T1.email_address FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id WHERE T1.first_name LIKE value",
        -11.469470024108887
      ],
      [
        "SELECT T1.first_name , T3.last_name , T1.email_address FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id WHERE T1.state LIKE value",
        -12.396248817443848
      ],
      [
        "SELECT first_name , last_name , email_address FROM Owners WHERE zip_code LIKE value",
        -12.617679595947266
      ],
      [
        "SELECT first_name , last_name FROM Owners WHERE first_name LIKE value",
        -12.755758285522461
      ],
      [
        "SELECT first_name , last_name , Sum ( email_address ) FROM Owners WHERE first_name LIKE value",
        -13.16707992553711
      ],
      [
        "SELECT first_name , last_name , email_address , email_address FROM Owners WHERE first_name LIKE value",
        -13.3251371383667
      ],
      [
        "SELECT first_name , last_name , email_address FROM Owners WHERE state = value",
        -13.48579216003418
      ],
      [
        "SELECT first_name , last_name , email_address FROM Owners WHERE city LIKE value",
        -13.683944702148438
      ],
      [
        "SELECT first_name , last_name , email_address FROM Owners WHERE state ! = value",
        -13.763303756713867
      ],
      [
        "SELECT first_name , last_name , email_address FROM Owners WHERE state IN ( SELECT first_name FROM Owners WHERE first_name LIKE value )",
        -13.792787790298462
      ],
      [
        "SELECT first_name , last_name FROM Owners WHERE state LIKE value",
        -15.578185081481934
      ]
    ],
    "predicted_parse_with_values": "SELECT first_name , last_name , email_address FROM Owners WHERE first_name LIKE \"North\"",
    "predicted_parse": "SELECT first_name , last_name , email_address FROM Owners WHERE first_name LIKE value",
    "predicted_parse_explanation": [
      "find the first name , last name , email address in owners table whose first name like North"
    ],
    "template_feedback": "consider the state like % North % conditions in place of the first name like North conditions .",
    "primary_span": [
      [
        0,
        7
      ]
    ],
    "secondary_span": [
      [
        8,
        17
      ]
    ],
    "edits": [
      "state like \"%North%\"",
      "first name like \"North\""
    ],
    "edits_original": "< where > add state like \" % North % \" </ where > < where > remove first name like \" North \" </ where >"
  },
  {
    "db_id": "world_1",
    "feedback": "Determine the largest value of language in countrylanguage table.",
    "question": "Give the language that is spoken in the most countries.",
    "gold_parse": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1",
    "beam": [
      [
        "SELECT Name FROM country GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value",
        -1.2663955688476562
      ],
      [
        "SELECT Name FROM country GROUP BY LocalName ORDER BY Count ( * ) Desc LIMIT value",
        -1.39210844039917
      ],
      [
        "SELECT LocalName FROM country GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value",
        -1.4731717109680176
      ],
      [
        "SELECT LocalName FROM country GROUP BY LocalName ORDER BY Count ( * ) Desc LIMIT value",
        -2.078706741333008
      ],
      [
        "SELECT Name FROM country WHERE Continent = ( SELECT Continent FROM country GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value ) GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value",
        -3.842796802520752
      ],
      [
        "SELECT Code2 FROM country GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value",
        -4.471896648406982
      ],
      [
        "SELECT Name FROM country GROUP BY Name ORDER BY Count ( * ) Desc LIMIT value",
        -4.673240661621094
      ],
      [
        "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Continent ORDER BY Count ( * ) Desc LIMIT value",
        -4.706857681274414
      ],
      [
        "SELECT Code2 FROM country GROUP BY LocalName ORDER BY Count ( * ) Desc LIMIT value",
        -4.79628849029541
      ],
      [
        "SELECT LocalName FROM country WHERE Continent = ( SELECT Continent FROM country GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value ) GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value",
        -4.823971748352051
      ],
      [
        "SELECT LocalName FROM country GROUP BY Name ORDER BY Count ( * ) Desc LIMIT value",
        -5.206355094909668
      ],
      [
        "SELECT T1.name FROM sqlite_sequence AS T1 JOIN country AS T2 GROUP BY T2.LocalName ORDER BY Count ( * ) Desc LIMIT value",
        -5.243997097015381
      ],
      [
        "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.LocalName ORDER BY Count ( * ) Desc LIMIT value",
        -5.550635814666748
      ],
      [
        "SELECT Name FROM country WHERE Continent = value GROUP BY LocalName ORDER BY Count ( * ) Desc LIMIT value",
        -5.666086673736572
      ],
      [
        "SELECT T1.name FROM sqlite_sequence AS T1 JOIN country AS T2 GROUP BY T2.Continent ORDER BY Count ( * ) Desc LIMIT value",
        -5.763525009155273
      ],
      [
        "SELECT Name FROM country WHERE Continent = value GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value",
        -6.1404218673706055
      ],
      [
        "SELECT LocalName FROM country WHERE Continent = value GROUP BY LocalName ORDER BY Count ( * ) Desc LIMIT value",
        -6.22648286819458
      ],
      [
        "SELECT LocalName FROM country WHERE Continent = value GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value",
        -6.847511291503906
      ],
      [
        "SELECT HeadOfState FROM country GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value",
        -7.034425735473633
      ],
      [
        "SELECT Name FROM country WHERE Continent = ( SELECT Max ( Continent ) FROM country ) GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value",
        -7.077424049377441
      ]
    ],
    "predicted_parse_with_values": "SELECT Name FROM country GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT 1",
    "predicted_parse": "SELECT Name FROM country GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of continent in country table",
      "Step 2: find the name in country table with largest value in the results of step 1"
    ],
    "template_feedback": "in step 1 , use countrylanguage table in place of country table . find for each value of language in place of continent . in step 2 , find language in place of name .",
    "primary_span": [
      [
        4,
        6
      ],
      [
        13,
        18
      ],
      [
        28,
        29
      ]
    ],
    "secondary_span": [
      [
        7,
        12
      ],
      [
        19,
        23
      ],
      [
        30,
        34
      ]
    ],
    "edits": [
      "language",
      "name",
      "countrylanguage",
      "country",
      "language",
      "continent"
    ],
    "edits_original": "< select > add language </ select > < select > remove name </ select > < from > add countrylanguage </ from > < from > remove country </ from > < groupBy > add language </ groupBy > < groupBy > remove continent </ groupBy >"
  },
  {
    "db_id": "world_1",
    "feedback": "Change gnp old with life expectancy and ensure that government form equals Republic .",
    "question": "Give the average life expectancy for countries in Africa which are republics?",
    "gold_parse": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"",
    "beam": [
      [
        "SELECT Avg ( GNPOld ) FROM country WHERE Continent = value",
        -1.2809600830078125
      ],
      [
        "SELECT Avg ( LifeExpectancy ) FROM country WHERE Continent = value",
        -1.4579811096191406
      ],
      [
        "SELECT Avg ( GNPOld ) FROM country WHERE Region = value",
        -1.757319450378418
      ],
      [
        "SELECT Avg ( LifeExpectancy ) FROM country WHERE Region = value",
        -2.117508888244629
      ],
      [
        "SELECT Avg ( Population ) FROM country WHERE Continent = value",
        -2.1548280715942383
      ],
      [
        "SELECT Avg ( Population ) FROM country WHERE Region = value",
        -2.7998046875
      ],
      [
        "SELECT Avg ( GNPOld ) FROM country WHERE Name = value",
        -5.027615547180176
      ],
      [
        "SELECT Avg ( LifeExpectancy ) FROM country WHERE Name = value",
        -5.237897872924805
      ],
      [
        "SELECT Avg ( Population ) FROM country WHERE Name = value",
        -5.914853096008301
      ],
      [
        "SELECT Avg ( GNPOld ) FROM country WHERE LocalName = value",
        -6.465349197387695
      ],
      [
        "SELECT Avg ( GNP ) FROM country WHERE Continent = value",
        -6.6262311935424805
      ],
      [
        "SELECT Avg ( LifeExpectancy ) FROM country WHERE LocalName = value",
        -6.854654312133789
      ],
      [
        "SELECT Avg ( GNP ) FROM country WHERE Region = value",
        -7.250068664550781
      ],
      [
        "SELECT Avg ( Population ) FROM country WHERE LocalName = value",
        -7.525608062744141
      ],
      [
        "SELECT Avg ( GNPOld ) FROM country WHERE GovernmentForm = value",
        -9.859943389892578
      ],
      [
        "SELECT Avg ( LifeExpectancy ) FROM country WHERE GovernmentForm = value",
        -10.058977127075195
      ],
      [
        "SELECT Avg ( GNP ) FROM country WHERE Name = value",
        -10.421530723571777
      ],
      [
        "SELECT Avg ( GNPOld ) FROM country",
        -13.270462036132812
      ],
      [
        "SELECT Avg ( LifeExpectancy ) FROM country",
        -13.543645858764648
      ],
      [
        "SELECT Avg ( Population ) FROM country",
        -14.215372085571289
      ]
    ],
    "predicted_parse_with_values": "SELECT Avg ( GNPOld ) FROM country WHERE Continent = \"Africa\"",
    "predicted_parse": "SELECT Avg ( GNPOld ) FROM country WHERE Continent = value",
    "predicted_parse_explanation": [
      "find the average gnp old in country table whose continent equals Africa"
    ],
    "template_feedback": "additionally make sure that government form equals Republic . find average life expectancy in place of average gnp old .",
    "primary_span": [
      [
        0,
        8
      ],
      [
        9,
        12
      ]
    ],
    "secondary_span": [
      [
        13,
        19
      ]
    ],
    "edits": [
      "average life expectancy",
      "average gnp old",
      "government form equals \"Republic\""
    ],
    "edits_original": "< select > add average life expectancy </ select > < select > remove average gnp old </ select > < where > add government form equals \" Republic \" </ where >"
  },
  {
    "db_id": "car_1",
    "feedback": "Need to find car names's model for largest count of make .",
    "question": "Which model has the most version(make) of cars?",
    "gold_parse": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1",
    "beam": [
      [
        "SELECT T3.Edispl FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id GROUP BY T1.Model ORDER BY Count ( * ) Desc LIMIT value",
        -0.1601119041442871
      ],
      [
        "SELECT T2.Edispl FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id GROUP BY T1.Model ORDER BY Count ( * ) Desc LIMIT value",
        -2.204254627227783
      ],
      [
        "SELECT T2.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model GROUP BY T1.Model ORDER BY Count ( * ) Desc LIMIT value",
        -3.8704710006713867
      ],
      [
        "SELECT Model FROM model_list GROUP BY Model ORDER BY Count ( * ) Desc LIMIT value",
        -4.818709850311279
      ],
      [
        "SELECT Edispl FROM cars_data GROUP BY Edispl ORDER BY Count ( * ) Desc LIMIT value",
        -5.684630870819092
      ],
      [
        "SELECT Model FROM car_names GROUP BY Model ORDER BY Count ( * ) Desc LIMIT value",
        -5.686760902404785
      ],
      [
        "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model GROUP BY T2.Model ORDER BY Count ( * ) Desc LIMIT value",
        -6.705759048461914
      ],
      [
        "SELECT T3.Edispl FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id GROUP BY T1.ModelId ORDER BY Count ( * ) Desc LIMIT value",
        -8.164129734039307
      ],
      [
        "SELECT ModelId FROM model_list GROUP BY Model ORDER BY Count ( * ) Desc LIMIT value",
        -8.933389663696289
      ],
      [
        "SELECT T1.Model FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id GROUP BY T2.Edispl ORDER BY Count ( * ) Desc LIMIT value",
        -9.186717510223389
      ],
      [
        "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id GROUP BY T3.Edispl ORDER BY Count ( * ) Desc LIMIT value",
        -10.09619951248169
      ],
      [
        "SELECT T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T2.Model ORDER BY Count ( * ) Desc LIMIT value",
        -10.57595157623291
      ],
      [
        "SELECT * FROM model_list GROUP BY Model ORDER BY Count ( * ) Desc LIMIT value",
        -10.699846267700195
      ],
      [
        "SELECT T1.ModelId FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model GROUP BY T2.Model ORDER BY Count ( * ) Desc LIMIT value",
        -11.062722206115723
      ],
      [
        "SELECT T2.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model GROUP BY T1.ModelId ORDER BY Count ( * ) Desc LIMIT value",
        -11.390743255615234
      ],
      [
        "SELECT Model FROM model_list GROUP BY ModelId ORDER BY Count ( * ) Desc LIMIT value",
        -12.235170841217041
      ],
      [
        "SELECT * FROM car_names GROUP BY Model ORDER BY Count ( * ) Desc LIMIT value",
        -12.322160720825195
      ],
      [
        "SELECT T3.Edispl FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id GROUP BY T1.Model ORDER BY Count ( * ) Desc",
        -12.444844722747803
      ],
      [
        "SELECT T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model GROUP BY T3.Model ORDER BY Count ( * ) Desc LIMIT value",
        -12.458940029144287
      ],
      [
        "SELECT T1.FullName FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T2.Model ORDER BY Count ( * ) Desc LIMIT value",
        -12.632226943969727
      ]
    ],
    "predicted_parse_with_values": "SELECT T3.Edispl FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id GROUP BY T1.Model ORDER BY Count ( * ) Desc LIMIT 1",
    "predicted_parse": "SELECT T3.Edispl FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id GROUP BY T1.Model ORDER BY Count ( * ) Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: for each row in model list table , find the corresponding rows in car names table and in cars data table",
      "Step 2: find the number of rows of each value of model list 's model of the results of step 1",
      "Step 3: find the edispl of the results of step 1 with largest value in the results of step 2"
    ],
    "template_feedback": "in step 1 , do not use the cars data table and model list table . in step 3 , find car names 's model in place of edispl .",
    "primary_span": [
      [
        4,
        15
      ],
      [
        20,
        24
      ]
    ],
    "secondary_span": [
      [
        4,
        15
      ],
      [
        25,
        29
      ]
    ],
    "edits": [
      "model",
      "edispl",
      "model list",
      "cars data"
    ],
    "edits_original": "< select > add model </ select > < select > remove edispl </ select > < from > remove model list </ from > < from > remove cars data </ from >"
  },
  {
    "db_id": "world_1",
    "feedback": "Replace city with country in step 1.",
    "question": "Return the names of the 3 most populated countries.",
    "gold_parse": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3",
    "beam": [
      [
        "SELECT Name FROM city ORDER BY Population Desc LIMIT value",
        -0.32451915740966797
      ],
      [
        "SELECT T2.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code ORDER BY T1.Population Desc LIMIT value",
        -1.7333898544311523
      ],
      [
        "SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code ORDER BY T2.LifeExpectancy Desc LIMIT value",
        -2.550034523010254
      ],
      [
        "SELECT Name FROM country ORDER BY LifeExpectancy Desc LIMIT value",
        -3.966071128845215
      ],
      [
        "SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code ORDER BY T2.Population Desc LIMIT value",
        -6.05558967590332
      ],
      [
        "SELECT Name FROM country ORDER BY Population Desc LIMIT value",
        -7.431647300720215
      ],
      [
        "SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code GROUP BY T2.Continent ORDER BY Count ( * ) Desc LIMIT value",
        -9.055851936340332
      ],
      [
        "SELECT T2.LocalName FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code ORDER BY T1.Population Desc LIMIT value",
        -9.069855690002441
      ],
      [
        "SELECT Name FROM country GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value",
        -10.202670097351074
      ],
      [
        "SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code ORDER BY T2.Continent Desc LIMIT value",
        -10.509054183959961
      ],
      [
        "SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code GROUP BY T2.Name ORDER BY Count ( * ) Desc LIMIT value",
        -10.642337799072266
      ],
      [
        "SELECT T2.Continent FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code ORDER BY T1.Population Desc LIMIT value",
        -10.727731704711914
      ],
      [
        "SELECT LocalName FROM country ORDER BY LifeExpectancy Desc LIMIT value",
        -11.299138069152832
      ],
      [
        "SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = value ORDER BY T1.Population Desc LIMIT value",
        -11.471360206604004
      ],
      [
        "SELECT Name FROM country GROUP BY Name ORDER BY Count ( * ) Desc LIMIT value",
        -11.584426879882812
      ],
      [
        "SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Name = value ORDER BY T1.Population Desc LIMIT value",
        -11.923465728759766
      ],
      [
        "SELECT Name FROM country ORDER BY Continent Desc LIMIT value",
        -11.95332145690918
      ],
      [
        "SELECT Name FROM city UNION SELECT Max ( Population ) FROM city",
        -11.971185684204102
      ],
      [
        "SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = ( SELECT T2.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code ORDER BY T1.Population Desc LIMIT value ) ORDER BY T1.Population Desc LIMIT value",
        -12.059616088867188
      ],
      [
        "SELECT Name FROM city",
        -14.941194534301758
      ]
    ],
    "predicted_parse_with_values": "SELECT Name FROM city ORDER BY Population Desc LIMIT 3",
    "predicted_parse": "SELECT Name FROM city ORDER BY Population Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: find the name in city table ordered descending by population",
      "Step 2: only show the first 3 rows of the results"
    ],
    "template_feedback": "in step 1 , use country table in place of city table . find country 's name in place of city 's name . order the results by country 's population in place of city 's population .",
    "primary_span": [
      [
        4,
        6
      ],
      [
        13,
        16
      ],
      [
        24,
        30
      ]
    ],
    "secondary_span": [
      [
        7,
        12
      ],
      [
        17,
        23
      ],
      [
        31,
        37
      ]
    ],
    "edits": [
      "country",
      "city"
    ],
    "edits_original": "< from > add country </ from > < from > remove city </ from >"
  },
  {
    "db_id": "dog_kennels",
    "feedback": "Search each charge type in charges table along with the corresponding summation of charge amount .",
    "question": "How much does each charge type costs? List both charge type and amount.",
    "gold_parse": "SELECT charge_type ,  charge_amount FROM Charges",
    "beam": [
      [
        "SELECT T2.treatment_type_code , Sum ( T1.charge_amount ) FROM Charges AS T1 JOIN Treatments AS T2 GROUP BY T2.treatment_type_code",
        -0.3598012924194336
      ],
      [
        "SELECT T2.treatment_type_code , Sum ( T1.charge_amount ) FROM Charges AS T1 JOIN Treatment_Types AS T2 JOIN Treatments AS T3 GROUP BY T3.treatment_type_code",
        -1.8023967742919922
      ],
      [
        "SELECT treatment_type_code , Count ( * ) FROM Treatments GROUP BY treatment_type_code",
        -2.548304557800293
      ],
      [
        "SELECT T1.charge_type , Sum ( T1.charge_amount ) FROM Charges AS T1 JOIN Treatments AS T2 GROUP BY T2.treatment_type_code",
        -4.0831403732299805
      ],
      [
        "SELECT T1.treatment_type_code , Count ( * ) FROM Treatment_Types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T2.treatment_type_code",
        -4.668741226196289
      ],
      [
        "SELECT T3.treatment_type_code , Sum ( T1.charge_amount ) FROM Charges AS T1 JOIN Treatment_Types AS T2 JOIN Treatments AS T3 GROUP BY T2.treatment_type_code",
        -4.8529462814331055
      ],
      [
        "SELECT T2.treatment_type_code , T1.charge_amount FROM Charges AS T1 JOIN Treatments AS T2 GROUP BY T2.treatment_type_code",
        -5.174177169799805
      ],
      [
        "SELECT T2.treatment_type_code , T1.charge_amount FROM Charges AS T1 JOIN Treatment_Types AS T2 JOIN Treatments AS T3 GROUP BY T3.treatment_type_code",
        -5.584333419799805
      ],
      [
        "SELECT T2.treatment_type_code , Sum ( T1.charge_amount ) FROM Charges AS T1 JOIN Treatments AS T2",
        -5.990322113037109
      ],
      [
        "SELECT T2.treatment_type_code , T1.charge_amount FROM Charges AS T1 JOIN Treatment_Types AS T2",
        -6.037878036499023
      ],
      [
        "SELECT T2.treatment_type_code , Sum ( T1.charge_amount ) FROM Charges AS T1 JOIN Treatment_Types AS T2 GROUP BY T2.treatment_type_code",
        -6.289856910705566
      ],
      [
        "SELECT T2.treatment_type_code , T1.charge_amount FROM Charges AS T1 JOIN Treatments AS T2",
        -6.391223907470703
      ],
      [
        "SELECT T1.charge_type , Count ( * ) FROM Charges AS T1 JOIN Treatments AS T2 GROUP BY T2.treatment_type_code",
        -6.411988258361816
      ],
      [
        "SELECT treatment_type_code , Count ( * ) FROM Treatments",
        -6.4738969802856445
      ],
      [
        "SELECT T2.treatment_type_code , Count ( * ) FROM Treatment_Types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T1.treatment_type_code",
        -6.949721336364746
      ],
      [
        "SELECT T2.treatment_type_code , Sum ( T1.charge_amount ) FROM Charges AS T1 JOIN Treatment_Types AS T2",
        -7.379023551940918
      ],
      [
        "SELECT T2.treatment_type_code , Sum ( T1.charge_amount ) FROM Charges AS T1 JOIN Treatments AS T2 GROUP BY T1.charge_type",
        -7.441323280334473
      ],
      [
        "SELECT treatment_type_code , Count ( * ) FROM Treatment_Types",
        -7.531354904174805
      ],
      [
        "SELECT T1.charge_type , T1.charge_amount FROM Charges AS T1 JOIN Treatments AS T2 GROUP BY T2.treatment_type_code",
        -8.018835067749023
      ],
      [
        "SELECT charge_type , Sum ( charge_amount ) FROM Charges",
        -10.098995208740234
      ]
    ],
    "predicted_parse_with_values": "SELECT T2.treatment_type_code , Sum ( T1.charge_amount ) FROM Charges AS T1 JOIN Treatments AS T2 GROUP BY T2.treatment_type_code",
    "predicted_parse": "SELECT T2.treatment_type_code , Sum ( T1.charge_amount ) FROM Charges AS T1 JOIN Treatments AS T2 GROUP BY T2.treatment_type_code",
    "predicted_parse_explanation": [
      "Step 1: for each row in charges table , find the corresponding rows in treatments table",
      "Step 2: find each value of treatment type code of the results of step 1 along with the summation of charge amount of the corresponding rows to each value"
    ],
    "template_feedback": "in step 1 , do not use the treatments table . in step 2 , do not find for each value of treatment type code . find charge type in place of treatment type code . find charge amount in place of summation of charge amount .",
    "primary_span": [
      [
        4,
        10
      ],
      [
        15,
        25
      ],
      [
        26,
        28
      ],
      [
        36,
        38
      ]
    ],
    "secondary_span": [
      [
        4,
        10
      ],
      [
        29,
        35
      ],
      [
        39,
        46
      ]
    ],
    "edits": [
      "charge type",
      "charge amount",
      "treatment type code",
      "summation of charge amount",
      "treatments",
      "treatment type code"
    ],
    "edits_original": "< select > add charge type </ select > < select > add charge amount </ select > < select > remove treatment type code </ select > < select > remove summation of charge amount </ select > < from > remove treatments </ from > < groupBy > remove treatment type code </ groupBy >"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "feedback": "Do not use the reference template type's table but use paragraph's table instead.",
    "question": "Count the number of paragraphs.",
    "gold_parse": "SELECT count(*) FROM Paragraphs",
    "beam": [
      [
        "SELECT Count ( * ) FROM Ref_Template_Types",
        -2.002716064453125e-05
      ],
      [
        "SELECT Sum ( * ) FROM Ref_Template_Types",
        -12.125199556350708
      ],
      [
        "SELECT Sum ( Date_Effective_To ) FROM Templates",
        -13.44503939151764
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM Ref_Template_Types",
        -13.536986351013184
      ],
      [
        "SELECT Count ( * ) FROM Paragraphs WHERE Paragraph_Text = value",
        -14.625509977340698
      ],
      [
        "SELECT Count ( * ) , Paragraph_ID FROM Paragraphs",
        -14.758225679397583
      ],
      [
        "SELECT Count ( * ) FROM Ref_Template_Types GROUP BY *",
        -14.960749804973602
      ],
      [
        "SELECT Count ( * ) FROM Paragraphs WHERE Paragraph_ID = value",
        -15.163999080657959
      ],
      [
        "SELECT Count ( Count ( * ) ) FROM Ref_Template_Types",
        -15.525344848632812
      ],
      [
        "SELECT Avg ( * ) FROM Ref_Template_Types",
        -15.526888489723206
      ],
      [
        "SELECT Count ( * ) , Paragraph_Text FROM Paragraphs",
        -15.672361373901367
      ],
      [
        "SELECT Sum ( Version_Number ) FROM Templates",
        -15.816689014434814
      ],
      [
        "SELECT Count ( * ) FROM Templates GROUP BY Template_Type_Code",
        -15.937915086746216
      ],
      [
        "SELECT Count ( * ) , Template_Type_Code FROM Templates",
        -16.02678155899048
      ],
      [
        "SELECT Count ( * ) FROM Templates ORDER BY Date_Effective_To Desc LIMIT value",
        -16.20273447036743
      ],
      [
        "SELECT Sum ( Paragraph_ID ) FROM Paragraphs",
        -16.30445384979248
      ],
      [
        "SELECT Count ( DISTINCT * ) FROM Ref_Template_Types",
        -16.910548210144043
      ],
      [
        "SELECT Max ( * ) FROM Ref_Template_Types",
        -17.103445291519165
      ],
      [
        "SELECT Count ( * ) FROM Ref_Template_Types LIMIT value",
        -17.139738082885742
      ],
      [
        "SELECT Avg ( Date_Effective_To ) FROM Templates",
        -17.260753393173218
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM Ref_Template_Types",
    "predicted_parse": "SELECT Count ( * ) FROM Ref_Template_Types",
    "predicted_parse_explanation": [
      "find the number of rows in reference template types table"
    ],
    "template_feedback": "use paragraphs table in place of reference template types table .",
    "primary_span": [
      [
        0,
        2
      ]
    ],
    "secondary_span": [
      [
        3,
        10
      ]
    ],
    "edits": [
      "paragraphs",
      "reference template types"
    ],
    "edits_original": "< from > add paragraphs </ from > < from > remove reference template types </ from >"
  },
  {
    "db_id": "wta_1",
    "feedback": "In steps 1 and 2, you should replace loser's name with winner's name.",
    "question": "List the names of all winners who played in both 2013 and 2016.",
    "gold_parse": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016",
    "beam": [
      [
        "SELECT loser_name FROM matches WHERE year = value INTERSECT SELECT loser_name FROM matches WHERE year = value",
        -0.10549640655517578
      ],
      [
        "SELECT tourney_name FROM matches WHERE year = value INTERSECT SELECT loser_name FROM matches WHERE year = value",
        -3.19081974029541
      ],
      [
        "SELECT loser_name FROM matches WHERE year = value INTERSECT SELECT tourney_name FROM matches WHERE year = value",
        -3.237424850463867
      ],
      [
        "SELECT loser_name FROM matches WHERE year = value INTERSECT SELECT winner_name FROM matches WHERE year = value",
        -4.4919233322143555
      ],
      [
        "SELECT winner_name FROM matches WHERE year = value INTERSECT SELECT loser_name FROM matches WHERE year = value",
        -5.162620544433594
      ],
      [
        "SELECT tourney_name FROM matches WHERE year = value INTERSECT SELECT tourney_name FROM matches WHERE year = value",
        -6.323603630065918
      ],
      [
        "SELECT tourney_name FROM matches WHERE year = value INTERSECT SELECT winner_name FROM matches WHERE year = value",
        -7.577516555786133
      ],
      [
        "SELECT winner_name FROM matches WHERE year = value INTERSECT SELECT tourney_name FROM matches WHERE year = value",
        -8.293795585632324
      ],
      [
        "SELECT T1.loser_name FROM matches AS T1 WHERE T1.year = value INTERSECT SELECT T1.loser_name FROM players AS T2 JOIN matches AS T1 ON T2.player_id = T1.loser_id WHERE T2.last_name = value",
        -9.415417671203613
      ],
      [
        "SELECT winner_name FROM matches WHERE year = value INTERSECT SELECT winner_name FROM matches WHERE year = value",
        -9.548996925354004
      ],
      [
        "SELECT loser_name FROM matches WHERE year = value INTERSECT SELECT loser_name FROM matches",
        -11.074740409851074
      ],
      [
        "SELECT loser_name FROM matches WHERE year = value INTERSECT SELECT loser_name FROM matches WHERE year ! = value",
        -11.874307632446289
      ],
      [
        "SELECT T1.loser_name FROM matches AS T1 WHERE T1.year = value INTERSECT SELECT T2.first_name FROM players AS T2 JOIN matches AS T1 ON T2.player_id = T1.loser_id WHERE T1.year = value",
        -11.9896821975708
      ],
      [
        "SELECT loser_name FROM matches WHERE year = value INTERSECT SELECT loser_name FROM matches WHERE tourney_date = value",
        -12.019238471984863
      ],
      [
        "SELECT loser_name FROM matches WHERE year = value INTERSECT SELECT loser_name FROM matches WHERE year LIKE value",
        -12.074499130249023
      ],
      [
        "SELECT loser_name FROM matches INTERSECT SELECT loser_name FROM matches WHERE year = value",
        -12.471348762512207
      ],
      [
        "SELECT T1.tourney_name FROM matches AS T1 WHERE T1.year = value INTERSECT SELECT T1.loser_name FROM players AS T2 JOIN matches AS T1 ON T2.player_id = T1.loser_id WHERE T2.last_name = value",
        -12.503808975219727
      ],
      [
        "SELECT T1.loser_name FROM matches AS T1 WHERE T1.year = value INTERSECT SELECT T1.tourney_name FROM players AS T2 JOIN matches AS T1 ON T2.player_id = T1.loser_id WHERE T2.last_name = value",
        -12.958643913269043
      ],
      [
        "SELECT loser_name FROM matches WHERE year = value",
        -13.570508003234863
      ],
      [
        "SELECT loser_name FROM matches WHERE year = value INTERSECT SELECT tourney_name FROM matches",
        -13.95211124420166
      ]
    ],
    "predicted_parse_with_values": "SELECT loser_name FROM matches WHERE year = 2013 INTERSECT SELECT loser_name FROM matches WHERE year = 2016",
    "predicted_parse": "SELECT loser_name FROM matches WHERE year = value INTERSECT SELECT loser_name FROM matches WHERE year = value",
    "predicted_parse_explanation": [
      "Step 1: find the loser name in matches table whose year equals 2013",
      "Step 2: find the loser name in matches table whose year equals 2016",
      "Step 3: show the rows that are in both the results of step 1 and step 2"
    ],
    "template_feedback": "in step 1 , find winner name in place of loser name . in step 2 , find winner name in place of loser name .",
    "primary_span": [
      [
        4,
        6
      ],
      [
        17,
        19
      ]
    ],
    "secondary_span": [
      [
        7,
        12
      ],
      [
        20,
        25
      ]
    ],
    "edits": [
      "winner name",
      "loser name",
      "winner name",
      "loser name"
    ],
    "edits_original": "< select > add winner name </ select > < select > remove loser name </ select > < select > add winner name </ select > < select > remove loser name </ select >"
  },
  {
    "db_id": "voter_1",
    "feedback": "In step 1, you should use the contestant's number from the votes table in place of contestant's name.",
    "question": "What are the contestant numbers and names of the contestants who had at least two votes?",
    "gold_parse": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number HAVING count(*)  >=  2",
    "beam": [
      [
        "SELECT contestant_number , contestant_name FROM CONTESTANTS GROUP BY contestant_name HAVING Count ( * ) > = value",
        -0.0189361572265625
      ],
      [
        "SELECT T1.contestant_number , T1.contestant_name FROM CONTESTANTS AS T1 JOIN VOTES AS T2 ON T1.contestant_number = T2.contestant_number GROUP BY T2.contestant_number HAVING Count ( * ) > = value",
        -4.565995693206787
      ],
      [
        "SELECT T2.phone_number , T1.contestant_name FROM CONTESTANTS AS T1 JOIN VOTES AS T2 ON T1.contestant_number = T2.contestant_number GROUP BY T1.contestant_name HAVING Count ( * ) > = value",
        -5.585597991943359
      ],
      [
        "SELECT contestant_name , contestant_name FROM CONTESTANTS GROUP BY contestant_name HAVING Count ( * ) > = value",
        -5.707267761230469
      ],
      [
        "SELECT T2.contestant_number , T1.contestant_name FROM CONTESTANTS AS T1 JOIN VOTES AS T2 ON T1.contestant_number = T2.contestant_number GROUP BY T1.contestant_name HAVING Count ( * ) > = value",
        -6.866130828857422
      ],
      [
        "SELECT T1.contestant_name , T1.contestant_name FROM CONTESTANTS AS T1 JOIN VOTES AS T2 ON T1.contestant_number = T2.contestant_number GROUP BY T2.contestant_number HAVING Count ( * ) > = value",
        -9.408166408538818
      ],
      [
        "SELECT T2.phone_number , T1.contestant_name FROM CONTESTANTS AS T1 JOIN VOTES AS T2 ON T1.contestant_number = T2.contestant_number GROUP BY T2.contestant_number HAVING Count ( * ) > = value",
        -10.123332500457764
      ],
      [
        "SELECT contestant_name , Count ( * ) FROM CONTESTANTS GROUP BY contestant_name HAVING Count ( * ) > = value",
        -10.285957336425781
      ],
      [
        "SELECT contestant_number , contestant_name FROM CONTESTANTS GROUP BY contestant_number HAVING Count ( * ) > = value",
        -10.69607925415039
      ],
      [
        "SELECT T2.contestant_number , T1.contestant_name FROM CONTESTANTS AS T1 JOIN VOTES AS T2 ON T1.contestant_number = T2.contestant_number GROUP BY T2.contestant_number HAVING Count ( * ) > = value",
        -11.461557388305664
      ],
      [
        "SELECT T1.contestant_name , Count ( * ) FROM CONTESTANTS AS T1 JOIN VOTES AS T2 ON T1.contestant_number = T2.contestant_number GROUP BY T2.contestant_number HAVING Count ( * ) > = value",
        -12.460861206054688
      ],
      [
        "SELECT contestant_number , contestant_name FROM CONTESTANTS GROUP BY Count ( * ) HAVING Count ( * ) > = value",
        -12.883132934570312
      ],
      [
        "SELECT T1.contestant_number , T1.contestant_name FROM CONTESTANTS AS T1 JOIN VOTES AS T2 ON T1.contestant_number = T2.contestant_number GROUP BY T2.vote_id HAVING Count ( * ) > = value",
        -13.264418601989746
      ],
      [
        "SELECT contestant_number , contestant_name FROM CONTESTANTS GROUP BY contestant_name , contestant_name HAVING Count ( * ) > = value",
        -13.316195487976074
      ],
      [
        "SELECT T1.contestant_number , T1.contestant_name FROM CONTESTANTS AS T1 JOIN VOTES AS T2 ON T1.contestant_number = T2.contestant_number GROUP BY T2.phone_number HAVING Count ( * ) > = value",
        -13.879080772399902
      ],
      [
        "SELECT contestant_number , contestant_number FROM CONTESTANTS GROUP BY contestant_name HAVING Count ( * ) > = value",
        -13.99239730834961
      ],
      [
        "SELECT contestant_number , contestant_name , Count ( * ) FROM CONTESTANTS GROUP BY contestant_name HAVING Count ( * ) > = value",
        -14.02448844909668
      ],
      [
        "SELECT T1.contestant_number , T1.contestant_name FROM CONTESTANTS AS T1 JOIN VOTES AS T2 ON T1.contestant_number = T2.contestant_number WHERE T2.phone_number = value GROUP BY T1.contestant_name HAVING Count ( * ) > = value",
        -14.243735551834106
      ],
      [
        "SELECT T1.contestant_number , T1.contestant_name , Count ( * ) FROM CONTESTANTS AS T1 JOIN VOTES AS T2 ON T1.contestant_number = T2.contestant_number GROUP BY T2.contestant_number HAVING Count ( * ) > = value",
        -14.411938667297363
      ],
      [
        "SELECT T1.contestant_number , T1.contestant_name FROM CONTESTANTS AS T1 JOIN VOTES AS T2 ON T1.contestant_number = T2.contestant_number WHERE T2.vote_id = value GROUP BY T1.contestant_name HAVING Count ( * ) > = value",
        -14.776107430458069
      ]
    ],
    "predicted_parse_with_values": "SELECT contestant_number , contestant_name FROM CONTESTANTS GROUP BY contestant_name HAVING Count ( * ) > = 2",
    "predicted_parse": "SELECT contestant_number , contestant_name FROM CONTESTANTS GROUP BY contestant_name HAVING Count ( * ) > = value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of contestant name in contestants table",
      "Step 2: find the contestant number and contestant name in contestants table whose corresponding value in step 1 is greater than or equals 2"
    ],
    "template_feedback": "in step 1 , additionally use the information from the votes table besides the contestants table . find for value of contestants 's contestant number in place of contestant name .",
    "primary_span": [
      [
        4,
        11
      ],
      [
        17,
        24
      ]
    ],
    "secondary_span": [
      [
        12,
        16
      ],
      [
        25,
        30
      ]
    ],
    "edits": [
      "votes",
      "contestant number",
      "contestant name"
    ],
    "edits_original": "< from > add votes </ from > < groupBy > add contestant number </ groupBy > < groupBy > remove contestant name </ groupBy >"
  },
  {
    "db_id": "pets_1",
    "feedback": "Find number of rows in has pet table whose pet type equals dog and sex equals F .",
    "question": "Find the number of dog pets that are raised by female students (with sex F).",
    "gold_parse": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'",
    "beam": [
      [
        "SELECT Count ( * ) FROM Pets WHERE PetType = value AND PetType = value",
        -0.1914386749267578
      ],
      [
        "SELECT Count ( * ) FROM Pets WHERE PetType = value",
        -2.142622947692871
      ],
      [
        "SELECT Count ( * ) FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value AND T1.Sex = value",
        -3.133089065551758
      ],
      [
        "SELECT Count ( * ) FROM Pets WHERE PetType = value AND pet_age = value",
        -4.536290645599365
      ],
      [
        "SELECT Count ( * ) FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T1.Sex = value AND T3.PetType = value",
        -6.225438117980957
      ],
      [
        "SELECT Count ( * ) FROM Student WHERE Sex = value",
        -7.871589660644531
      ],
      [
        "SELECT Count ( * ) FROM Pets WHERE PetType = value AND weight = value",
        -10.26002025604248
      ],
      [
        "SELECT Count ( * ) FROM Student WHERE Sex = value AND Sex = value",
        -11.386850833892822
      ],
      [
        "SELECT Count ( * ) FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value AND T1.Age = value",
        -11.796062469482422
      ],
      [
        "SELECT Count ( * ) FROM Pets WHERE PetType = value AND pet_age < value",
        -12.334815979003906
      ],
      [
        "SELECT Count ( * ) FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T1.Sex = value AND T3.pet_age = value",
        -12.378482818603516
      ],
      [
        "SELECT Count ( * ) FROM Pets AS T1 WHERE T1.PetType = value AND T1.pet_age IN ( SELECT T2.PetID FROM Has_Pet AS T2 JOIN Pets AS T1 ON T2.PetID = T1.PetID WHERE T1.PetType = value )",
        -12.916645526885986
      ],
      [
        "SELECT Count ( * ) FROM Pets WHERE PetType < value",
        -13.048628807067871
      ],
      [
        "SELECT Count ( * ) FROM Student WHERE Sex < value",
        -13.458510875701904
      ],
      [
        "SELECT Count ( * ) FROM Pets AS T1 WHERE T1.PetType = value AND T1.PetID IN ( SELECT T2.PetID FROM Has_Pet AS T2 JOIN Pets AS T1 ON T2.PetID = T1.PetID WHERE T1.PetType = value )",
        -13.465851783752441
      ],
      [
        "SELECT Count ( * ) FROM Pets WHERE PetType LIKE value",
        -15.020134925842285
      ],
      [
        "SELECT Avg ( * ) FROM Pets WHERE PetType = value",
        -15.498119354248047
      ],
      [
        "SELECT Sum ( * ) FROM Pets WHERE PetType = value",
        -16.004857063293457
      ],
      [
        "SELECT Count ( * ) FROM Pets WHERE pet_age < value",
        -16.129960536956787
      ],
      [
        "SELECT Count ( Count ( * ) ) FROM Pets WHERE PetType = value",
        -16.266775131225586
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM Pets WHERE PetType = \"dog\" AND PetType = \"F\"",
    "predicted_parse": "SELECT Count ( * ) FROM Pets WHERE PetType = value AND PetType = value",
    "predicted_parse_explanation": [
      "find the number of rows in pets table whose pet type equals dog and pet type equals F"
    ],
    "template_feedback": "additionally use the information from the has pet table and student table besides the pets table . consider the sex equals F conditions in place of the pet type equals F conditions .",
    "primary_span": [
      [
        0,
        11
      ],
      [
        17,
        22
      ]
    ],
    "secondary_span": [
      [
        12,
        16
      ],
      [
        23,
        32
      ]
    ],
    "edits": [
      "student",
      "has pet",
      "sex equals \"F\"",
      "pet type equals \"F\""
    ],
    "edits_original": "< from > add student </ from > < from > add has pet </ from > < where > add sex equals \" F \" </ where > < where > remove pet type equals \" F \" </ where >"
  },
  {
    "db_id": "world_1",
    "feedback": "you have to use name, language and english in place of continent, code 2 and t respectively.t should be the is official in both steps.",
    "question": "What are the names of nations where both English and French are official languages?",
    "gold_parse": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\"",
    "beam": [
      [
        "SELECT Continent FROM country WHERE Code2 = value INTERSECT SELECT Continent FROM country WHERE Code2 = value",
        -0.4593515396118164
      ],
      [
        "SELECT Continent FROM country WHERE LocalName = value INTERSECT SELECT Continent FROM country WHERE Code2 = value",
        -1.2485876083374023
      ],
      [
        "SELECT Continent FROM country WHERE Code2 = value INTERSECT SELECT Continent FROM country WHERE LocalName = value",
        -3.54990291595459
      ],
      [
        "SELECT T1.Continent FROM country AS T1 WHERE T1.Code2 = value INTERSECT SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value",
        -3.7966623306274414
      ],
      [
        "SELECT Continent FROM country WHERE LocalName = value INTERSECT SELECT Continent FROM country WHERE LocalName = value",
        -4.334406852722168
      ],
      [
        "SELECT T1.Continent FROM country AS T1 WHERE T1.LocalName = value INTERSECT SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value",
        -4.6127190589904785
      ],
      [
        "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value INTERSECT SELECT T1.Continent FROM country AS T1 WHERE T1.Code2 = value",
        -6.203829288482666
      ],
      [
        "SELECT Continent FROM country WHERE Name = value INTERSECT SELECT Continent FROM country WHERE Code2 = value",
        -6.8541579246521
      ],
      [
        "SELECT Continent FROM country WHERE Continent = value INTERSECT SELECT Continent FROM country WHERE Code2 = value",
        -7.1983466148376465
      ],
      [
        "SELECT Continent FROM country WHERE Code = value INTERSECT SELECT Continent FROM country WHERE Code2 = value",
        -7.530431270599365
      ],
      [
        "SELECT Name FROM country WHERE LocalName = value INTERSECT SELECT Continent FROM country WHERE Code2 = value",
        -7.815924644470215
      ],
      [
        "SELECT Name FROM country WHERE Code2 = value INTERSECT SELECT Continent FROM country WHERE Code2 = value",
        -8.065845489501953
      ],
      [
        "SELECT Continent FROM country WHERE Code2 = value INTERSECT SELECT Continent FROM country WHERE Code = value",
        -8.165665626525879
      ],
      [
        "SELECT Continent FROM country WHERE LifeExpectancy = value INTERSECT SELECT Continent FROM country WHERE Code2 = value",
        -8.323953628540039
      ],
      [
        "SELECT Continent FROM country WHERE Code2 = value INTERSECT SELECT Continent FROM country WHERE Name = value",
        -8.478109359741211
      ],
      [
        "SELECT Continent FROM country WHERE GovernmentForm = value INTERSECT SELECT Continent FROM country WHERE Code2 = value",
        -8.82470703125
      ],
      [
        "SELECT Continent FROM country WHERE LocalName = value INTERSECT SELECT Continent FROM country WHERE Code = value",
        -8.970039367675781
      ],
      [
        "SELECT Continent FROM country WHERE Code2 = value INTERSECT SELECT Name FROM country WHERE Code2 = value",
        -9.137907981872559
      ],
      [
        "SELECT Continent FROM country WHERE Code2 = value INTERSECT SELECT Continent FROM country WHERE LifeExpectancy = value",
        -9.14780044555664
      ],
      [
        "SELECT Continent FROM country WHERE Code2 = value",
        -12.699349403381348
      ]
    ],
    "predicted_parse_with_values": "SELECT Continent FROM country WHERE Code2 = \"T\" INTERSECT SELECT Continent FROM country WHERE Code2 = \"French\"",
    "predicted_parse": "SELECT Continent FROM country WHERE Code2 = value INTERSECT SELECT Continent FROM country WHERE Code2 = value",
    "predicted_parse_explanation": [
      "Step 1: find the continent in country table whose code2 equals T",
      "Step 2: find the continent in country table whose code2 equals French",
      "Step 3: show the rows that are in both the results of step 1 and step 2"
    ],
    "template_feedback": "in step 1 , additionally use the information from the countrylanguage table besides the country table . consider the language equals English and is official equals T conditions in place of the code2 equals T conditions . find name in place of continent . in step 2 , additionally use the information from the countrylanguage table besides the country table . consider the language equals French and is official equals T conditions in place of the code2 equals French conditions . find name in place of continent .",
    "primary_span": [
      [
        4,
        11
      ],
      [
        17,
        27
      ],
      [
        37,
        38
      ],
      [
        48,
        55
      ],
      [
        61,
        71
      ],
      [
        81,
        82
      ]
    ],
    "secondary_span": [
      [
        12,
        16
      ],
      [
        28,
        36
      ],
      [
        39,
        43
      ],
      [
        56,
        60
      ],
      [
        72,
        80
      ],
      [
        83,
        87
      ]
    ],
    "edits": [
      "name",
      "continent",
      "countrylanguage",
      "language equals \"English\"",
      "is official equals \"T\"",
      "code2 equals \"T\"",
      "name",
      "continent",
      "countrylanguage",
      "language equals \"French\"",
      "is official equals \"T\"",
      "code2 equals \"French\""
    ],
    "edits_original": "< select > add name </ select > < select > remove continent </ select > < from > add countrylanguage </ from > < where > add language equals \" English \" </ where > < where > add is official equals \" T \" </ where > < where > remove code2 equals \" T \" </ where > < select > add name </ select > < select > remove continent </ select > < from > add countrylanguage </ from > < where > add language equals \" French \" </ where > < where > add is official equals \" T \" </ where > < where > remove code2 equals \" French \" </ where >"
  },
  {
    "db_id": "flight_2",
    "feedback": "Use source airport instead of destination airport in step 1 , Exchange destination airport , flights table with airport code , airports table in step 2.",
    "question": "What is the airport code of the airport with the most flights?",
    "gold_parse": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1",
    "beam": [
      [
        "SELECT DestAirport FROM flights GROUP BY DestAirport ORDER BY Count ( * ) Desc LIMIT value",
        -0.21755456924438477
      ],
      [
        "SELECT T1.AirportCode FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport GROUP BY T2.DestAirport ORDER BY Count ( * ) Desc LIMIT value",
        -2.7088661193847656
      ],
      [
        "SELECT DestAirport FROM flights GROUP BY SourceAirport ORDER BY Count ( * ) Desc LIMIT value",
        -2.969320774078369
      ],
      [
        "SELECT T2.DestAirport FROM airlines AS T1 JOIN flights AS T2 ORDER BY T1.Airline Desc LIMIT value",
        -3.876867413520813
      ],
      [
        "SELECT T2.DestAirport FROM airlines AS T1 JOIN flights AS T2 GROUP BY T1.Abbreviation ORDER BY Count ( * ) Desc LIMIT value",
        -4.018656253814697
      ],
      [
        "SELECT T2.AirportCode FROM airlines AS T1 JOIN airports AS T2 ORDER BY T1.Airline Desc LIMIT value",
        -4.104920864105225
      ],
      [
        "SELECT DestAirport FROM flights ORDER BY FlightNo Desc LIMIT value",
        -5.5257837772369385
      ],
      [
        "SELECT T1.AirportCode FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport GROUP BY T2.SourceAirport ORDER BY Count ( * ) Desc LIMIT value",
        -5.746451377868652
      ],
      [
        "SELECT T1.AirportCode FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport ORDER BY T2.FlightNo Desc LIMIT value",
        -5.793474435806274
      ],
      [
        "SELECT DestAirport FROM flights ORDER BY * Desc LIMIT value",
        -5.8315324783325195
      ],
      [
        "SELECT AirportCode FROM airports ORDER BY * Desc LIMIT value",
        -6.035478830337524
      ],
      [
        "SELECT T2.DestAirport FROM airlines AS T1 JOIN flights AS T2 ORDER BY T1.Abbreviation Desc LIMIT value",
        -6.766021251678467
      ],
      [
        "SELECT T2.AirportCode FROM airlines AS T1 JOIN airports AS T2 ORDER BY T1.Abbreviation Desc LIMIT value",
        -6.982743263244629
      ],
      [
        "SELECT T2.AirportCode FROM airlines AS T1 JOIN airports AS T2 GROUP BY T1.Abbreviation ORDER BY Count ( * ) Desc LIMIT value",
        -6.99423360824585
      ],
      [
        "SELECT T2.DestAirport FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport ORDER BY T1.AirportName Desc LIMIT value",
        -7.0810089111328125
      ],
      [
        "SELECT AirportCode FROM airports ORDER BY AirportName Desc LIMIT value",
        -7.383502960205078
      ],
      [
        "SELECT T2.DestAirport FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport GROUP BY T1.Country ORDER BY Count ( * ) Desc LIMIT value",
        -7.713311195373535
      ],
      [
        "SELECT Max ( AirportCode ) FROM airports",
        -11.999366044998169
      ],
      [
        "SELECT Max ( DestAirport ) FROM flights",
        -13.456491708755493
      ],
      [
        "SELECT Max ( AirportName ) FROM airports",
        -13.58683466911316
      ]
    ],
    "predicted_parse_with_values": "SELECT DestAirport FROM flights GROUP BY DestAirport ORDER BY Count ( * ) Desc LIMIT 1",
    "predicted_parse": "SELECT DestAirport FROM flights GROUP BY DestAirport ORDER BY Count ( * ) Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of destination airport in flights table",
      "Step 2: find the destination airport in flights table with largest value in the results of step 1"
    ],
    "template_feedback": "in step 1 , additionally use the information from the airports table besides the flights table .",
    "primary_span": [
      [
        4,
        11
      ]
    ],
    "secondary_span": [
      [
        12,
        16
      ]
    ],
    "edits": [
      "airport code",
      "destination airport",
      "airports",
      "airport code",
      "destination airport"
    ],
    "edits_original": "< select > add airport code </ select > < select > remove destination airport </ select > < from > add airports </ from > < groupBy > add airport code </ groupBy > < groupBy > remove destination airport </ groupBy >"
  },
  {
    "db_id": "wta_1",
    "feedback": "Find winner name whose tourney name equals Australian Open with largest value of winner rank points .",
    "question": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.",
    "gold_parse": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
    "beam": [
      [
        "SELECT winner_name , loser_rank FROM matches ORDER BY winner_rank_points Desc LIMIT value",
        -0.49358463287353516
      ],
      [
        "SELECT winner_name , loser_rank FROM matches ORDER BY winner_rank Desc LIMIT value",
        -1.652181625366211
      ],
      [
        "SELECT tourney_name , loser_rank FROM matches ORDER BY winner_rank_points Desc LIMIT value",
        -2.99082088470459
      ],
      [
        "SELECT winner_name , loser_rank FROM matches ORDER BY winner_rank_points Asc LIMIT value",
        -3.6693220138549805
      ],
      [
        "SELECT T2.winner_name , T2.loser_rank FROM players AS T1 JOIN matches AS T2 ON T2.loser_id = T1.player_id JOIN rankings AS T3 ON T1.player_id = T3.player_id ORDER BY T3.ranking_points Desc LIMIT value",
        -3.7108678817749023
      ],
      [
        "SELECT tourney_name , loser_rank FROM matches ORDER BY winner_rank Desc LIMIT value",
        -4.153221130371094
      ],
      [
        "SELECT winner_name , loser_rank FROM matches ORDER BY winner_rank Asc LIMIT value",
        -4.234376907348633
      ],
      [
        "SELECT winner_name , loser_rank FROM matches WHERE loser_ioc = value ORDER BY winner_rank_points Asc LIMIT value",
        -4.334235191345215
      ],
      [
        "SELECT winner_name , loser_rank FROM matches WHERE loser_ioc = value ORDER BY winner_rank Asc LIMIT value",
        -4.53275203704834
      ],
      [
        "SELECT winner_name , winner_rank FROM matches ORDER BY winner_rank_points Desc LIMIT value",
        -5.01605224609375
      ],
      [
        "SELECT winner_name , loser_rank FROM matches ORDER BY loser_rank_points Desc LIMIT value",
        -5.434361457824707
      ],
      [
        "SELECT T2.winner_name , T2.loser_rank FROM players AS T1 JOIN matches AS T2 ON T2.loser_id = T1.player_id JOIN rankings AS T3 ON T1.player_id = T3.player_id ORDER BY T3.ranking_points Asc LIMIT value",
        -6.018044471740723
      ],
      [
        "SELECT winner_name , loser_rank_points FROM matches ORDER BY winner_rank_points Desc LIMIT value",
        -6.073757171630859
      ],
      [
        "SELECT loser_name , loser_rank FROM matches ORDER BY winner_rank_points Desc LIMIT value",
        -6.1229963302612305
      ],
      [
        "SELECT tourney_name , loser_rank FROM matches ORDER BY winner_rank_points Asc LIMIT value",
        -6.189373016357422
      ],
      [
        "SELECT winner_name FROM matches ORDER BY winner_rank_points Desc LIMIT value",
        -7.234726905822754
      ],
      [
        "SELECT winner_name FROM matches ORDER BY winner_rank_points Asc LIMIT value",
        -7.822827339172363
      ],
      [
        "SELECT tourney_name FROM matches ORDER BY winner_rank_points Desc LIMIT value",
        -8.21163272857666
      ],
      [
        "SELECT winner_name FROM matches ORDER BY winner_rank Asc LIMIT value",
        -8.382928848266602
      ],
      [
        "SELECT winner_name FROM matches ORDER BY winner_rank Desc LIMIT value",
        -8.415979385375977
      ]
    ],
    "predicted_parse_with_values": "SELECT winner_name , loser_rank FROM matches ORDER BY winner_rank_points Desc LIMIT 1",
    "predicted_parse": "SELECT winner_name , loser_rank FROM matches ORDER BY winner_rank_points Desc LIMIT value",
    "predicted_parse_explanation": [
      "find the winner name and loser rank in matches table with largest value of winner rank points"
    ],
    "template_feedback": "additionally make sure that tourney name equals Australian Open . do not return loser rank .",
    "primary_span": [
      [
        0,
        9
      ],
      [
        10,
        15
      ]
    ],
    "secondary_span": [],
    "edits": [
      "loser rank",
      "tourney name equals \"Australian Open\""
    ],
    "edits_original": "< select > remove loser rank </ select > < where > add tourney name equals \" Australian Open \" </ where >"
  },
  {
    "db_id": "world_1",
    "feedback": "find continent where people speaks largest number of languages .",
    "question": "Which continent speaks the most languages?",
    "gold_parse": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1",
    "beam": [
      [
        "SELECT Continent FROM country GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value",
        -0.010229110717773438
      ],
      [
        "SELECT Continent FROM country GROUP BY LocalName ORDER BY Count ( * ) Desc LIMIT value",
        -4.657102584838867
      ],
      [
        "SELECT LocalName FROM country GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value",
        -8.02554988861084
      ],
      [
        "SELECT Continent , Count ( * ) FROM country GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value",
        -8.395837783813477
      ],
      [
        "SELECT Continent , Continent FROM country GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value",
        -9.920454025268555
      ],
      [
        "SELECT Name FROM country GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value",
        -10.212600708007812
      ],
      [
        "SELECT Continent , Count ( * ) FROM country GROUP BY LocalName ORDER BY Count ( * ) Desc LIMIT value",
        -11.158763885498047
      ],
      [
        "SELECT Continent FROM country GROUP BY Continent ORDER BY Count ( * ) Desc",
        -11.974347114562988
      ],
      [
        "SELECT Continent FROM country GROUP BY Region ORDER BY Count ( * ) Desc LIMIT value",
        -12.456242561340332
      ],
      [
        "SELECT LocalName FROM country GROUP BY LocalName ORDER BY Count ( * ) Desc LIMIT value",
        -12.615068435668945
      ],
      [
        "SELECT LocalName , Continent FROM country GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value",
        -13.159576416015625
      ],
      [
        "SELECT Continent , Count ( * ) FROM country GROUP BY Continent",
        -13.197139739990234
      ],
      [
        "SELECT DISTINCT Continent FROM country GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value",
        -13.387922286987305
      ],
      [
        "SELECT Region FROM country GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value",
        -13.6077880859375
      ],
      [
        "SELECT Continent FROM country GROUP BY Continent ORDER BY Count ( LocalName ) Desc LIMIT value",
        -13.798603057861328
      ],
      [
        "SELECT Continent , LocalName FROM country GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value",
        -13.959980964660645
      ],
      [
        "SELECT Continent FROM country GROUP BY Name ORDER BY Count ( * ) Desc LIMIT value",
        -14.092795372009277
      ],
      [
        "SELECT Continent , Continent FROM country GROUP BY LocalName ORDER BY Count ( * ) Desc LIMIT value",
        -14.323760986328125
      ],
      [
        "SELECT Continent FROM country ORDER BY LocalName Desc LIMIT value",
        -15.056974172592163
      ],
      [
        "SELECT Continent FROM country GROUP BY Continent",
        -15.226131439208984
      ]
    ],
    "predicted_parse_with_values": "SELECT Continent FROM country GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT 1",
    "predicted_parse": "SELECT Continent FROM country GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of continent in country table",
      "Step 2: find the continent in country table with largest value in the results of step 1"
    ],
    "template_feedback": "in step 1 , additionally use the information from the countrylanguage table besides the country table .",
    "primary_span": [
      [
        4,
        11
      ]
    ],
    "secondary_span": [
      [
        12,
        16
      ]
    ],
    "edits": [
      "countrylanguage"
    ],
    "edits_original": "< from > add countrylanguage </ from >"
  },
  {
    "db_id": "world_1",
    "feedback": "In step 1 exchange region with continent , In step 2 exchange continent with name name .",
    "question": "What are the countries that have greater surface area than any country in Europe?",
    "gold_parse": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")",
    "beam": [
      [
        "SELECT Continent FROM country WHERE SurfaceArea > ( SELECT Max ( SurfaceArea ) FROM country WHERE Region = value )",
        -0.41095924377441406
      ],
      [
        "SELECT Continent FROM country WHERE SurfaceArea > ( SELECT SurfaceArea FROM country WHERE Region = value )",
        -1.9903059005737305
      ],
      [
        "SELECT Continent FROM country WHERE SurfaceArea > ( SELECT Max ( SurfaceArea ) FROM country WHERE Continent = value )",
        -2.146559715270996
      ],
      [
        "SELECT GovernmentForm FROM country WHERE SurfaceArea > ( SELECT Max ( SurfaceArea ) FROM country WHERE Region = value )",
        -3.108792304992676
      ],
      [
        "SELECT Continent FROM country WHERE SurfaceArea > ( SELECT SurfaceArea FROM country WHERE Continent = value )",
        -4.253074645996094
      ],
      [
        "SELECT GovernmentForm FROM country WHERE SurfaceArea > ( SELECT SurfaceArea FROM country WHERE Region = value )",
        -4.548041343688965
      ],
      [
        "SELECT GovernmentForm FROM country WHERE SurfaceArea > ( SELECT Max ( SurfaceArea ) FROM country WHERE Continent = value )",
        -4.841872215270996
      ],
      [
        "SELECT Continent FROM country WHERE SurfaceArea > value",
        -6.248291969299316
      ],
      [
        "SELECT GovernmentForm FROM country WHERE SurfaceArea > ( SELECT SurfaceArea FROM country WHERE Continent = value )",
        -6.801033973693848
      ],
      [
        "SELECT Continent FROM country WHERE SurfaceArea > ( SELECT Max ( SurfaceArea ) FROM country WHERE Name = value )",
        -7.3814263343811035
      ],
      [
        "SELECT Continent FROM country WHERE SurfaceArea > ( SELECT Max ( SurfaceArea ) FROM country WHERE LocalName = value )",
        -7.402712821960449
      ],
      [
        "SELECT Continent FROM country WHERE SurfaceArea > ( SELECT Sum ( SurfaceArea ) FROM country WHERE Region = value )",
        -8.249146461486816
      ],
      [
        "SELECT Continent FROM country WHERE SurfaceArea > ( SELECT Max ( SurfaceArea ) FROM country WHERE SurfaceArea < value )",
        -8.6295747756958
      ],
      [
        "SELECT GovernmentForm FROM country WHERE SurfaceArea > value",
        -8.963991165161133
      ],
      [
        "SELECT Continent FROM country WHERE SurfaceArea > Region",
        -10.105143070220947
      ],
      [
        "SELECT Continent FROM country WHERE SurfaceArea > Continent",
        -10.469000339508057
      ],
      [
        "SELECT Continent FROM country WHERE SurfaceArea > LocalName",
        -11.551881790161133
      ],
      [
        "SELECT Continent FROM country WHERE SurfaceArea > Population",
        -11.599742889404297
      ],
      [
        "SELECT Continent FROM country WHERE SurfaceArea > SurfaceArea",
        -12.14023494720459
      ],
      [
        "SELECT Name FROM country WHERE SurfaceArea > value",
        -15.228706359863281
      ]
    ],
    "predicted_parse_with_values": "SELECT Continent FROM country WHERE SurfaceArea > ( SELECT Max ( SurfaceArea ) FROM country WHERE Region = \"Europe\" )",
    "predicted_parse": "SELECT Continent FROM country WHERE SurfaceArea > ( SELECT Max ( SurfaceArea ) FROM country WHERE Region = value )",
    "predicted_parse_explanation": [
      "Step 1: find the maximum surface area in country table whose region equals Europe",
      "Step 2: find the continent in country table whose surface area greater than the results of step 1"
    ],
    "template_feedback": "in step 1 , consider the continent equals Europe conditions in place of the region equals Europe conditions . find minimum surface area in place of maximum surface area . in step 2 , find name in place of continent .",
    "primary_span": [
      [
        4,
        9
      ],
      [
        19,
        22
      ],
      [
        34,
        35
      ]
    ],
    "secondary_span": [
      [
        10,
        18
      ],
      [
        23,
        29
      ],
      [
        36,
        40
      ]
    ],
    "edits": [
      "name",
      "continent",
      "minimum surface area",
      "maximum surface area",
      "continent equals \"Europe\"",
      "region equals \"Europe\""
    ],
    "edits_original": "< select > add name </ select > < select > remove continent </ select > < select > add minimum surface area </ select > < select > remove maximum surface area </ select > < where > add continent equals \" Europe \" </ where > < where > remove region equals \" Europe \" </ where >"
  },
  {
    "db_id": "student_transcripts_tracking",
    "feedback": "Ensure that semester are identical and also look for the output of student id.",
    "question": "What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?",
    "gold_parse": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2",
    "beam": [
      [
        "SELECT T1.first_name , T1.middle_name , T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) = value",
        -0.7020082473754883
      ],
      [
        "SELECT T1.first_name , T1.middle_name , T1.last_name , T2.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) = value",
        -2.0382890701293945
      ],
      [
        "SELECT T1.first_name , T1.middle_name , T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) BETWEEN value AND value",
        -2.8582582473754883
      ],
      [
        "SELECT T1.first_name , T1.middle_name , T2.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) = value",
        -2.96268367767334
      ],
      [
        "SELECT T1.first_name , T1.middle_name , T1.last_name , T2.student_enrolment_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) = value",
        -3.005725383758545
      ],
      [
        "SELECT T2.first_name , T2.middle_name , T2.last_name , T1.semester_description FROM Semesters AS T1 JOIN Students AS T2 JOIN Student_Enrolment AS T3 ON T1.semester_id = T3.semester_id AND T3.student_id = T2.student_id AND T1.semester_id = T3.semester_id GROUP BY T3.student_id HAVING Count ( * ) = value",
        -3.267404079437256
      ],
      [
        "SELECT T1.first_name , T1.middle_name , T1.last_name , T2.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) BETWEEN value AND value",
        -3.2906551361083984
      ],
      [
        "SELECT T1.first_name , T1.middle_name , T2.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) BETWEEN value AND value",
        -3.2908668518066406
      ],
      [
        "SELECT T1.first_name , T1.middle_name , T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) LIKE value",
        -3.420577049255371
      ],
      [
        "SELECT T1.first_name , T1.middle_name , T2.student_id , T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) = value",
        -4.802010536193848
      ],
      [
        "SELECT T1.first_name , T1.middle_name , T1.last_name , T2.student_enrolment_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) BETWEEN value AND value",
        -4.987494945526123
      ],
      [
        "SELECT T1.first_name , T1.middle_name , T1.last_name , T3.student_enrolment_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id AND T1.student_id = T2.student_id JOIN Student_Enrolment_Courses AS T3 ON T2.student_enrolment_id = T3.student_enrolment_id GROUP BY T2.student_id HAVING Count ( * ) = value",
        -5.009528636932373
      ],
      [
        "SELECT T2.first_name , T2.middle_name , T2.last_name , T1.semester_description FROM Semesters AS T1 JOIN Students AS T2 JOIN Student_Enrolment AS T3 ON T1.semester_id = T3.semester_id AND T3.student_id = T2.student_id AND T1.semester_id = T3.semester_id GROUP BY T3.student_id HAVING Count ( * ) BETWEEN value AND value",
        -5.035746097564697
      ],
      [
        "SELECT T1.first_name , T1.middle_name , T1.last_name , T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) = value",
        -5.1946187019348145
      ],
      [
        "SELECT T1.first_name , T1.middle_name , T1.last_name , T2.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) LIKE value",
        -5.251102447509766
      ],
      [
        "SELECT T1.first_name , T1.middle_name , T2.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) LIKE value",
        -5.511895179748535
      ],
      [
        "SELECT T2.first_name , T2.middle_name , T2.last_name , T1.semester_description FROM Semesters AS T1 JOIN Students AS T2 JOIN Student_Enrolment AS T3 ON T1.semester_id = T3.semester_id AND T3.student_id = T2.student_id AND T1.semester_id = T3.semester_id GROUP BY T3.student_id HAVING Count ( * ) LIKE value",
        -6.2796406745910645
      ],
      [
        "SELECT T1.first_name , T1.middle_name , T1.last_name , T2.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) > = value",
        -6.367633819580078
      ],
      [
        "SELECT T1.first_name , T1.middle_name , T2.student_enrolment_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) = value",
        -6.396028518676758
      ],
      [
        "SELECT T1.first_name , T1.middle_name , T1.last_name , T2.student_enrolment_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) LIKE value",
        -6.43490743637085
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.first_name , T1.middle_name , T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) = 2",
    "predicted_parse": "SELECT T1.first_name , T1.middle_name , T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) = value",
    "predicted_parse_explanation": [
      "Step 1: for each row in students table , find the corresponding rows in student enrolment table",
      "Step 2: find the number of rows of each value of student enrolment 's student id of the results of step 1",
      "Step 3: find the first name , middle name , last name of the results of step 1 whose corresponding value in step 2 is equals 2"
    ],
    "template_feedback": "in step 3 , additionally find students 's student id .",
    "primary_span": [
      [
        4,
        10
      ]
    ],
    "secondary_span": [],
    "edits": [
      "student id"
    ],
    "edits_original": "< select > add student id </ select >"
  },
  {
    "db_id": "flight_2",
    "feedback": "Exchange destination airport with airport code in step 1 and step 2",
    "question": "Give the code of the airport with the least flights.",
    "gold_parse": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1",
    "beam": [
      [
        "SELECT DestAirport FROM flights GROUP BY DestAirport ORDER BY Count ( * ) Asc LIMIT value",
        -0.6535634994506836
      ],
      [
        "SELECT T1.AirportCode FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport GROUP BY T2.DestAirport ORDER BY Count ( * ) Asc LIMIT value",
        -1.0474047660827637
      ],
      [
        "SELECT T2.AirportCode FROM airlines AS T1 JOIN airports AS T2 ORDER BY T1.Abbreviation Asc LIMIT value",
        -3.512384057044983
      ],
      [
        "SELECT T2.AirportCode FROM airlines AS T1 JOIN airports AS T2 ORDER BY T1.Airline Asc LIMIT value",
        -3.8272829055786133
      ],
      [
        "SELECT DestAirport FROM flights GROUP BY SourceAirport ORDER BY Count ( * ) Asc LIMIT value",
        -4.298356056213379
      ],
      [
        "SELECT T1.AirportCode FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport GROUP BY T2.SourceAirport ORDER BY Count ( * ) Asc LIMIT value",
        -4.373623847961426
      ],
      [
        "SELECT T2.DestAirport FROM airlines AS T1 JOIN flights AS T2 GROUP BY T1.Abbreviation ORDER BY Count ( * ) Asc LIMIT value",
        -4.390644550323486
      ],
      [
        "SELECT T2.AirportCode FROM airlines AS T1 JOIN airports AS T2 GROUP BY T1.Abbreviation ORDER BY Count ( * ) Asc LIMIT value",
        -4.414063930511475
      ],
      [
        "SELECT T1.AirportCode FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport ORDER BY T2.FlightNo Asc LIMIT value",
        -5.053790330886841
      ],
      [
        "SELECT T2.DestAirport FROM airlines AS T1 JOIN flights AS T2 ORDER BY T1.Abbreviation Asc LIMIT value",
        -5.232641696929932
      ],
      [
        "SELECT T2.DestAirport FROM airlines AS T1 JOIN flights AS T2 ORDER BY T1.Airline Asc LIMIT value",
        -5.56207275390625
      ],
      [
        "SELECT AirportCode FROM airports ORDER BY AirportName Asc LIMIT value",
        -6.2507548332214355
      ],
      [
        "SELECT DestAirport FROM flights ORDER BY FlightNo Asc LIMIT value",
        -6.53332257270813
      ],
      [
        "SELECT AirportCode FROM airports ORDER BY * Asc LIMIT value",
        -7.049674034118652
      ],
      [
        "SELECT T1.AirportCode FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport ORDER BY T2.Airline Asc LIMIT value",
        -7.05538272857666
      ],
      [
        "SELECT AirportCode FROM airports ORDER BY CountryAbbrev Asc LIMIT value",
        -7.113681793212891
      ],
      [
        "SELECT SourceAirport FROM flights GROUP BY DestAirport ORDER BY Count ( * ) Asc LIMIT value",
        -7.286880970001221
      ],
      [
        "SELECT AirportCode FROM airports ORDER BY Country Asc LIMIT value",
        -7.633755683898926
      ],
      [
        "SELECT AirportCode FROM airports",
        -10.35681438446045
      ],
      [
        "SELECT DestAirport FROM flights",
        -11.287140369415283
      ]
    ],
    "predicted_parse_with_values": "SELECT DestAirport FROM flights GROUP BY DestAirport ORDER BY Count ( * ) Asc LIMIT 1",
    "predicted_parse": "SELECT DestAirport FROM flights GROUP BY DestAirport ORDER BY Count ( * ) Asc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of destination airport in flights table",
      "Step 2: find the destination airport in flights table with smallest value in the results of step 1"
    ],
    "template_feedback": "in step 1 , additionally use the information from the airports table besides the flights table .",
    "primary_span": [
      [
        4,
        11
      ]
    ],
    "secondary_span": [
      [
        12,
        16
      ]
    ],
    "edits": [
      "airport code",
      "destination airport",
      "airports",
      "airport code",
      "destination airport"
    ],
    "edits_original": "< select > add airport code </ select > < select > remove destination airport </ select > < from > add airports </ from > < groupBy > add airport code </ groupBy > < groupBy > remove destination airport </ groupBy >"
  },
  {
    "db_id": "student_transcripts_tracking",
    "feedback": "In step 1, I want total rows of very value of id of course in student enrolment course table.",
    "question": "What's the name of the course with most number of enrollments?",
    "gold_parse": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1",
    "beam": [
      [
        "SELECT course_name FROM Courses GROUP BY course_name ORDER BY Count ( * ) Desc LIMIT value",
        -0.3606300354003906
      ],
      [
        "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id ORDER BY Count ( * ) Desc LIMIT value",
        -1.1957950592041016
      ],
      [
        "SELECT course_name FROM Courses GROUP BY course_id ORDER BY Count ( * ) Desc LIMIT value",
        -8.172222137451172
      ],
      [
        "SELECT course_name FROM Courses GROUP BY course_name ORDER BY Count ( * ) Desc",
        -12.697487831115723
      ],
      [
        "SELECT T1.course_name , T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id ORDER BY Count ( * ) Desc LIMIT value",
        -13.125951290130615
      ],
      [
        "SELECT course_name FROM Courses GROUP BY course_name",
        -13.453290939331055
      ],
      [
        "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id ORDER BY Count ( * ) Desc",
        -13.45582103729248
      ],
      [
        "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment AS T2 JOIN Student_Enrolment_Courses AS T3 ON T1.course_id = T3.course_id AND T3.student_enrolment_id = T2.student_enrolment_id GROUP BY T2.degree_program_id ORDER BY Count ( * ) Desc LIMIT value",
        -13.488181114196777
      ],
      [
        "SELECT course_name , course_name FROM Courses GROUP BY course_name ORDER BY Count ( * ) Desc LIMIT value",
        -14.111225605010986
      ],
      [
        "SELECT DISTINCT course_name FROM Courses GROUP BY course_name ORDER BY Count ( * ) Desc LIMIT value",
        -14.427773475646973
      ],
      [
        "SELECT T1.course_name , Count ( * ) FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id ORDER BY Count ( * ) Desc LIMIT value",
        -14.492207527160645
      ],
      [
        "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id ORDER BY T2.student_enrolment_id Desc LIMIT value",
        -14.851301312446594
      ],
      [
        "SELECT course_name FROM Courses GROUP BY course_name ORDER BY Sum ( * ) Desc LIMIT value",
        -14.889123916625977
      ],
      [
        "SELECT course_name FROM Courses ORDER BY course_name Desc LIMIT value",
        -14.966983914375305
      ],
      [
        "SELECT course_name FROM Courses GROUP BY course_name ORDER BY Count ( * ) Asc LIMIT value",
        -15.043627738952637
      ],
      [
        "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id ORDER BY Count ( * ) Desc LIMIT value",
        -15.230201721191406
      ],
      [
        "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id ORDER BY Sum ( * ) Desc LIMIT value",
        -15.372286319732666
      ],
      [
        "SELECT course_name FROM Courses GROUP BY course_name HAVING Count ( * ) < = value",
        -15.613383293151855
      ],
      [
        "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id",
        -16.12606716156006
      ],
      [
        "SELECT course_name FROM Courses",
        -18.713807106018066
      ]
    ],
    "predicted_parse_with_values": "SELECT course_name FROM Courses GROUP BY course_name ORDER BY Count ( * ) Desc LIMIT 1",
    "predicted_parse": "SELECT course_name FROM Courses GROUP BY course_name ORDER BY Count ( * ) Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of course name in courses table",
      "Step 2: find the course name in courses table with largest value in the results of step 1"
    ],
    "template_feedback": "in step 1 , additionally use the information from the student enrolment courses table besides the courses table .",
    "primary_span": [
      [
        4,
        13
      ]
    ],
    "secondary_span": [
      [
        14,
        18
      ]
    ],
    "edits": [
      "student enrolment courses"
    ],
    "edits_original": "< from > add student enrolment courses </ from >"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "feedback": "Make sure to arrange ID of document.",
    "question": "Show all document ids and the number of paragraphs in each document. Order by document id.",
    "gold_parse": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id",
    "beam": [
      [
        "SELECT Document_ID , Count ( * ) FROM Paragraphs GROUP BY Document_ID ORDER BY Count ( * ) Asc",
        -0.00350189208984375
      ],
      [
        "SELECT Document_ID , Count ( * ) FROM Paragraphs GROUP BY Document_ID",
        -5.745479583740234
      ],
      [
        "SELECT Document_ID , Count ( DISTINCT Paragraph_ID ) FROM Paragraphs GROUP BY Document_ID ORDER BY Count ( * ) Asc",
        -8.817754745483398
      ],
      [
        "SELECT Document_ID , Sum ( Paragraph_ID ) FROM Paragraphs GROUP BY Document_ID ORDER BY Count ( * ) Asc",
        -9.934069633483887
      ],
      [
        "SELECT Document_ID , Count ( * ) FROM Paragraphs GROUP BY Document_ID ORDER BY Count ( * ) Desc",
        -10.459850311279297
      ],
      [
        "SELECT Document_ID , Count ( * ) FROM Paragraphs ORDER BY Paragraph_ID Asc",
        -12.345690250396729
      ],
      [
        "SELECT T2.Document_ID , Count ( * ) FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID ORDER BY T1.Template_ID Asc",
        -12.378083229064941
      ],
      [
        "SELECT Document_ID FROM Paragraphs GROUP BY Document_ID ORDER BY Count ( * ) Asc",
        -12.788971900939941
      ],
      [
        "SELECT T2.Document_ID , Count ( * ) FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T2.Document_ID ORDER BY T1.Template_ID Asc",
        -12.831031322479248
      ],
      [
        "SELECT Document_ID , Count ( * ) FROM Paragraphs GROUP BY Document_ID ORDER BY Count ( * ) Asc LIMIT value",
        -12.908905982971191
      ],
      [
        "SELECT Document_ID , Count ( Paragraph_ID ) FROM Paragraphs GROUP BY Document_ID ORDER BY Count ( * ) Asc",
        -13.045195579528809
      ],
      [
        "SELECT Document_ID , Count ( * ) FROM Paragraphs GROUP BY Document_ID HAVING Count ( * ) > = value ORDER BY Count ( * ) Asc",
        -13.117050170898438
      ],
      [
        "SELECT T2.Document_ID , Count ( * ) , T1.Template_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T2.Document_ID ORDER BY Count ( * ) Asc",
        -13.178593158721924
      ],
      [
        "SELECT T2.Document_ID , Count ( * ) FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T1.Template_ID ORDER BY Count ( * ) Asc",
        -13.28305721282959
      ],
      [
        "SELECT Document_ID , Sum ( Paragraph_Text ) FROM Paragraphs GROUP BY Document_ID ORDER BY Count ( * ) Asc",
        -13.355037450790405
      ],
      [
        "SELECT Document_ID , Count ( * ) FROM Paragraphs GROUP BY Document_ID ORDER BY Sum ( Paragraph_ID ) Asc",
        -13.365321636199951
      ],
      [
        "SELECT T1.Document_ID , Count ( * ) FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T2.Document_ID ORDER BY Count ( * ) Asc",
        -13.494121551513672
      ],
      [
        "SELECT Document_ID , Count ( * ) , Document_ID FROM Paragraphs GROUP BY Document_ID ORDER BY Count ( * ) Asc",
        -13.576909065246582
      ],
      [
        "SELECT T2.Document_ID , Count ( * ) FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T2.Document_ID HAVING T1.Template_ID = value ORDER BY Count ( * ) Asc",
        -13.58466100692749
      ],
      [
        "SELECT Document_ID , Count ( * ) FROM Paragraphs",
        -14.847434997558594
      ]
    ],
    "predicted_parse_with_values": "SELECT Document_ID , Count ( * ) FROM Paragraphs GROUP BY Document_ID ORDER BY Count ( * ) Asc",
    "predicted_parse": "SELECT Document_ID , Count ( * ) FROM Paragraphs GROUP BY Document_ID ORDER BY Count ( * ) Asc",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of document id in paragraphs table",
      "Step 2: find the document id and number of rows in paragraphs table ordered ascending by the results of step 1"
    ],
    "template_feedback": "in step 2 , order the results by document id in place of number of rows .",
    "primary_span": [
      [
        4,
        9
      ]
    ],
    "secondary_span": [
      [
        10,
        16
      ]
    ],
    "edits": [
      "document id",
      "number of rows"
    ],
    "edits_original": "< orderBy > add document id </ orderBy > < orderBy > remove number of rows </ orderBy >"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "feedback": "You can use Id of template as ID of document is not correct.",
    "question": "Return the names and template ids for documents that contain the letter w in their description.",
    "gold_parse": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"",
    "beam": [
      [
        "SELECT Document_Name , Document_ID FROM Documents WHERE Document_Description LIKE value",
        -0.3732795715332031
      ],
      [
        "SELECT Document_Name , Template_ID FROM Documents WHERE Document_Description LIKE value",
        -1.1667108535766602
      ],
      [
        "SELECT Document_Name , Document_ID FROM Documents WHERE Document_Name LIKE value",
        -9.324257850646973
      ],
      [
        "SELECT Document_Name , Template_ID FROM Documents WHERE Document_Name LIKE value",
        -10.325224876403809
      ],
      [
        "SELECT Document_ID , Template_ID FROM Documents WHERE Document_Description LIKE value",
        -12.024746894836426
      ],
      [
        "SELECT Document_Name FROM Documents WHERE Document_Description LIKE value",
        -13.348553657531738
      ],
      [
        "SELECT T1.Document_Name , T2.Paragraph_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Description LIKE value",
        -13.861572265625
      ],
      [
        "SELECT Document_Name , Template_ID FROM Documents WHERE Document_Description BETWEEN value AND value",
        -14.00024700164795
      ],
      [
        "SELECT Document_Name , Document_ID FROM Documents WHERE Document_Description BETWEEN value AND value",
        -14.049498558044434
      ],
      [
        "SELECT Count ( Document_Name ) , Document_ID FROM Documents WHERE Document_Description LIKE value",
        -14.386608123779297
      ],
      [
        "SELECT Document_Name , Document_ID FROM Documents WHERE Document_Description = value",
        -14.50912857055664
      ],
      [
        "SELECT Document_ID , Document_ID FROM Documents WHERE Document_Description LIKE value",
        -14.531194686889648
      ],
      [
        "SELECT T1.Document_Name , T1.Document_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Paragraph_Text LIKE value",
        -14.540288925170898
      ],
      [
        "SELECT Document_Name , Template_ID , Template_ID FROM Documents WHERE Document_Description LIKE value",
        -14.758487701416016
      ],
      [
        "SELECT Document_Name , Document_ID , Template_ID FROM Documents WHERE Document_Description LIKE value",
        -14.932262420654297
      ],
      [
        "SELECT Count ( Document_Name ) , Template_ID FROM Documents WHERE Document_Description LIKE value",
        -15.000626564025879
      ],
      [
        "SELECT T1.Document_Name , T1.Template_ID FROM Documents AS T1 WHERE T1.Document_Description IN ( SELECT T2.Document_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Description LIKE value )",
        -15.25517988204956
      ],
      [
        "SELECT DISTINCT Document_Name , Document_ID FROM Documents WHERE Document_Description LIKE value",
        -15.36268138885498
      ],
      [
        "SELECT T1.Document_Name , T2.Document_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Description LIKE value",
        -15.373403549194336
      ],
      [
        "SELECT DISTINCT Document_Name , Document_ID FROM Documents WHERE Document_Description LIKE value",
        -15.42106819152832
      ]
    ],
    "predicted_parse_with_values": "SELECT Document_Name , Document_ID FROM Documents WHERE Document_Description LIKE \"w\"",
    "predicted_parse": "SELECT Document_Name , Document_ID FROM Documents WHERE Document_Description LIKE value",
    "predicted_parse_explanation": [
      "find the document name and document id in documents table whose document description like w"
    ],
    "template_feedback": "consider the document description like % w % conditions in place of the document description like w conditions . find template id in place of document id .",
    "primary_span": [
      [
        0,
        8
      ],
      [
        19,
        21
      ]
    ],
    "secondary_span": [
      [
        9,
        18
      ],
      [
        22,
        27
      ]
    ],
    "edits": [
      "template id",
      "document id",
      "document description like \"%w%\"",
      "document description like \"w\""
    ],
    "edits_original": "< select > add template id </ select > < select > remove document id </ select > < where > add document description like \" % w % \" </ where > < where > remove document description like \" w \" </ where >"
  },
  {
    "db_id": "pets_1",
    "feedback": "Use pet age of Pet table instead of Age.",
    "question": "What is the last name of the student who has a cat that is 3 years old?",
    "gold_parse": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'",
    "beam": [
      [
        "SELECT LName FROM Student WHERE Age = value",
        -0.0002307891845703125
      ],
      [
        "SELECT T1.LName FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.pet_age = value",
        -8.798068046569824
      ],
      [
        "SELECT LName FROM Student WHERE Age LIKE value",
        -9.73736572265625
      ],
      [
        "SELECT T1.LName FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.weight = value",
        -11.130135536193848
      ],
      [
        "SELECT LName FROM Student WHERE Age = value INTERSECT SELECT LName FROM Student WHERE Age = value",
        -12.110249519348145
      ],
      [
        "SELECT LName FROM Student WHERE Age = value AND Age = value",
        -14.486282348632812
      ],
      [
        "SELECT LName , Age FROM Student WHERE Age = value",
        -14.965849876403809
      ],
      [
        "SELECT DISTINCT LName FROM Student WHERE Age = value",
        -15.014348030090332
      ],
      [
        "SELECT LName FROM Student WHERE Age = value ORDER BY Age Asc LIMIT value",
        -15.611122608184814
      ],
      [
        "SELECT T1.LName FROM Student AS T1 WHERE T1.Age = value INTERSECT SELECT T1.LName FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.pet_age = value",
        -15.675049781799316
      ],
      [
        "SELECT DISTINCT LName FROM Student WHERE Age = value",
        -15.965458869934082
      ],
      [
        "SELECT LName FROM Student WHERE Age < value",
        -16.006004333496094
      ],
      [
        "SELECT LName FROM Student WHERE Age = value GROUP BY LName HAVING Count ( * ) = value",
        -16.103900909423828
      ],
      [
        "SELECT LName FROM Student WHERE Age ! = value",
        -16.305044174194336
      ],
      [
        "SELECT T1.LName FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T1.Age = value AND T3.pet_age = value",
        -16.937758445739746
      ],
      [
        "SELECT LName FROM Student WHERE Age = value GROUP BY LName HAVING Age = value",
        -17.001124382019043
      ],
      [
        "SELECT LName FROM Student WHERE Age = value LIMIT value",
        -17.04087257385254
      ],
      [
        "SELECT LName FROM Student WHERE DISTINCT Age = value",
        -17.353132247924805
      ],
      [
        "SELECT LName FROM Student WHERE Age = value GROUP BY LName",
        -17.48902416229248
      ],
      [
        "SELECT LName FROM Student",
        -18.24718475341797
      ]
    ],
    "predicted_parse_with_values": "SELECT LName FROM Student WHERE Age = 3",
    "predicted_parse": "SELECT LName FROM Student WHERE Age = value",
    "predicted_parse_explanation": [
      "find the last name in student table whose age equals 3"
    ],
    "template_feedback": "additionally use the information from the has pet table and pets table besides the student table . consider the pet age equals 3 and pet type equals cat conditions in place of the age equals 3 conditions .",
    "primary_span": [
      [
        0,
        11
      ],
      [
        17,
        28
      ]
    ],
    "secondary_span": [
      [
        12,
        16
      ],
      [
        29,
        37
      ]
    ],
    "edits": [
      "has pet",
      "pets",
      "pet age equals 3",
      "pet type equals \"cat\"",
      "age equals 3"
    ],
    "edits_original": "< from > add has pet </ from > < from > add pets </ from > < where > add pet age equals 3 </ where > < where > add pet type equals \" cat \" </ where > < where > remove age equals 3 </ where >"
  },
  {
    "db_id": "dog_kennels",
    "feedback": "Require dogs table in place of owners table in 1st step.",
    "question": "Which owner owns the most dogs? List the owner id, first name and last name.",
    "gold_parse": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
    "beam": [
      [
        "SELECT owner_id , first_name , last_name FROM Owners GROUP BY owner_id ORDER BY Count ( * ) Desc LIMIT value",
        -0.0017337799072265625
      ],
      [
        "SELECT T1.owner_id , T1.first_name , T3.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id GROUP BY T1.owner_id ORDER BY Count ( * ) Desc LIMIT value",
        -6.450583457946777
      ],
      [
        "SELECT T1.owner_id , T3.first_name , T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id GROUP BY T1.owner_id ORDER BY Count ( * ) Desc LIMIT value",
        -9.51673698425293
      ],
      [
        "SELECT owner_id , first_name FROM Owners GROUP BY owner_id ORDER BY Count ( * ) Desc LIMIT value",
        -11.000537872314453
      ],
      [
        "SELECT owner_id , first_name , last_name , last_name FROM Owners GROUP BY owner_id ORDER BY Count ( * ) Desc LIMIT value",
        -11.138261795043945
      ],
      [
        "SELECT owner_id , first_name , last_name FROM Owners GROUP BY owner_id ORDER BY Count ( * ) Desc",
        -11.614562034606934
      ],
      [
        "SELECT first_name , last_name , last_name FROM Owners GROUP BY owner_id ORDER BY Count ( * ) Desc LIMIT value",
        -11.716387748718262
      ],
      [
        "SELECT owner_id , first_name , last_name FROM Owners GROUP BY first_name ORDER BY Count ( * ) Desc LIMIT value",
        -12.123281478881836
      ],
      [
        "SELECT owner_id , first_name , last_name FROM Owners GROUP BY owner_id ORDER BY Count ( * ) Asc LIMIT value",
        -12.598552703857422
      ],
      [
        "SELECT T3.professional_id , T1.first_name , T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id GROUP BY T1.owner_id ORDER BY Count ( * ) Desc LIMIT value",
        -12.69149398803711
      ],
      [
        "SELECT T1.owner_id , T1.first_name , T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY T2.owner_id ORDER BY Count ( * ) Desc LIMIT value",
        -13.452199935913086
      ],
      [
        "SELECT T2.owner_id , T1.first_name , T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id ORDER BY Count ( * ) Desc LIMIT value",
        -13.632648468017578
      ],
      [
        "SELECT T1.owner_id , T1.first_name , T1.last_name , T3.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id GROUP BY T1.owner_id ORDER BY Count ( * ) Desc LIMIT value",
        -13.657047748565674
      ],
      [
        "SELECT owner_id , first_name , last_name FROM Owners GROUP BY owner_id",
        -14.100560188293457
      ],
      [
        "SELECT owner_id , first_name , last_name FROM Owners ORDER BY last_name Desc LIMIT value",
        -14.125628590583801
      ],
      [
        "SELECT T1.owner_id , T1.first_name , T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id GROUP BY T3.first_name ORDER BY Count ( * ) Desc LIMIT value",
        -14.210437774658203
      ],
      [
        "SELECT T1.owner_id , T1.first_name , T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id ORDER BY T2.age Desc LIMIT value",
        -14.278058528900146
      ],
      [
        "SELECT T1.first_name , T1.last_name , T3.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id GROUP BY T1.owner_id ORDER BY Count ( * ) Desc LIMIT value",
        -14.43450665473938
      ],
      [
        "SELECT owner_id , first_name FROM Owners GROUP BY first_name ORDER BY Count ( * ) Desc LIMIT value",
        -14.505691528320312
      ],
      [
        "SELECT owner_id , first_name , last_name , owner_id FROM Owners GROUP BY owner_id ORDER BY Count ( * ) Desc LIMIT value",
        -14.591739177703857
      ]
    ],
    "predicted_parse_with_values": "SELECT owner_id , first_name , last_name FROM Owners GROUP BY owner_id ORDER BY Count ( * ) Desc LIMIT 1",
    "predicted_parse": "SELECT owner_id , first_name , last_name FROM Owners GROUP BY owner_id ORDER BY Count ( * ) Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of owner id in owners table",
      "Step 2: find the owner id , first name , last name in owners table with largest value in the results of step 1"
    ],
    "template_feedback": "in step 1 , additionally use the information from the dogs table besides the owners table .",
    "primary_span": [
      [
        4,
        11
      ]
    ],
    "secondary_span": [
      [
        12,
        16
      ]
    ],
    "edits": [
      "dogs"
    ],
    "edits_original": "< from > add dogs </ from >"
  },
  {
    "db_id": "student_transcripts_tracking",
    "feedback": "In step 1, you should only use the section's table.",
    "question": "What are the names and ids of every course with less than 2 sections?",
    "gold_parse": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2",
    "beam": [
      [
        "SELECT course_name , course_id FROM Courses GROUP BY course_id HAVING Count ( * ) < value",
        -0.000957489013671875
      ],
      [
        "SELECT course_name , course_id FROM Courses GROUP BY course_id HAVING Count ( * ) BETWEEN value AND value",
        -7.511571884155273
      ],
      [
        "SELECT T1.course_name , T1.course_id FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id HAVING Count ( * ) < value",
        -8.328014373779297
      ],
      [
        "SELECT course_name , course_id FROM Courses GROUP BY course_id HAVING Sum ( course_description ) < value",
        -10.227709770202637
      ],
      [
        "SELECT course_name , course_id FROM Courses GROUP BY course_id HAVING Count ( * ) > = value",
        -12.157052040100098
      ],
      [
        "SELECT course_name , course_id FROM Courses GROUP BY course_id HAVING Count ( * ) > value",
        -12.311075210571289
      ],
      [
        "SELECT course_name , course_id FROM Courses GROUP BY course_id HAVING Count ( * ) LIKE value",
        -12.45418930053711
      ],
      [
        "SELECT course_name , course_id FROM Courses GROUP BY course_id HAVING Count ( * ) < value UNION SELECT course_name , course_id FROM Courses GROUP BY course_id HAVING Count ( * ) < value",
        -12.4934720993042
      ],
      [
        "SELECT course_name , course_id FROM Courses GROUP BY course_id HAVING Count ( course_description ) < value",
        -12.70663833618164
      ],
      [
        "SELECT course_name FROM Courses GROUP BY course_id HAVING Count ( * ) < value",
        -13.41817569732666
      ],
      [
        "SELECT T2.section_name , T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id HAVING Count ( * ) < value",
        -13.680769920349121
      ],
      [
        "SELECT course_name , course_id , course_id FROM Courses GROUP BY course_id HAVING Count ( * ) < value",
        -13.768489360809326
      ],
      [
        "SELECT T1.course_name , T2.course_id FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id HAVING Count ( * ) < value",
        -13.790093421936035
      ],
      [
        "SELECT course_name , course_id FROM Courses GROUP BY course_id HAVING Min ( course_description ) < value",
        -13.998152017593384
      ],
      [
        "SELECT course_name , course_id FROM Courses GROUP BY course_id HAVING course_description < value",
        -14.142870903015137
      ],
      [
        "SELECT course_name , course_id FROM Courses WHERE course_description = value GROUP BY course_id HAVING Count ( * ) < value",
        -14.360413074493408
      ],
      [
        "SELECT course_name , course_name FROM Courses GROUP BY course_id HAVING Count ( * ) < value",
        -14.457232475280762
      ],
      [
        "SELECT course_name , course_id FROM Courses GROUP BY course_id HAVING Avg ( course_description ) < value",
        -14.566494464874268
      ],
      [
        "SELECT course_name , course_id FROM Courses GROUP BY course_id HAVING Count ( * ) IN ( SELECT course_id FROM Courses )",
        -15.17064905166626
      ],
      [
        "SELECT course_name , course_id FROM Courses",
        -15.79244613647461
      ]
    ],
    "predicted_parse_with_values": "SELECT course_name , course_id FROM Courses GROUP BY course_id HAVING Count ( * ) < 2",
    "predicted_parse": "SELECT course_name , course_id FROM Courses GROUP BY course_id HAVING Count ( * ) < value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of course id in courses table",
      "Step 2: find the course name and course id in courses table whose corresponding value in step 1 is less than 2"
    ],
    "template_feedback": "in step 1 , additionally use the information from the sections table besides the courses table . in step 2 , make sure that the corresponding value in step 1 less than or equals 2 .",
    "primary_span": [
      [
        4,
        11
      ],
      [
        21,
        35
      ]
    ],
    "secondary_span": [
      [
        12,
        16
      ]
    ],
    "edits": [
      "sections",
      "number of rows less than or equals to 2",
      "number of rows less than 2"
    ],
    "edits_original": "< from > add sections </ from > < having > add number of rows less than or equals to 2 </ having > < having > remove number of rows less than 2 </ having >"
  },
  {
    "db_id": "world_1",
    "feedback": "should be or not and",
    "question": "What is the total surface area of the continents Asia and Europe?",
    "gold_parse": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\"",
    "beam": [
      [
        "SELECT Sum ( SurfaceArea ) FROM country WHERE Continent = value AND Continent = value",
        -0.11243247985839844
      ],
      [
        "SELECT Sum ( SurfaceArea ) FROM country WHERE Continent = value",
        -3.0951108932495117
      ],
      [
        "SELECT Sum ( SurfaceArea ) FROM country WHERE Continent BETWEEN value AND value",
        -3.249818801879883
      ],
      [
        "SELECT Sum ( SurfaceArea ) FROM country WHERE Region = value AND Continent = value",
        -4.050604820251465
      ],
      [
        "SELECT Sum ( SurfaceArea ) FROM country WHERE Name = value AND Continent = value",
        -6.124317169189453
      ],
      [
        "SELECT Sum ( SurfaceArea ) FROM country WHERE Continent = value OR Continent = value",
        -7.09016752243042
      ],
      [
        "SELECT Sum ( SurfaceArea ) FROM country WHERE LocalName = value AND Continent = value",
        -7.287145614624023
      ],
      [
        "SELECT Sum ( SurfaceArea ) FROM country WHERE Continent = value AND Name = value",
        -8.791454315185547
      ],
      [
        "SELECT Sum ( SurfaceArea ) FROM country",
        -8.887990951538086
      ],
      [
        "SELECT Sum ( SurfaceArea ) FROM country WHERE Continent = value AND LocalName = value",
        -9.095598220825195
      ],
      [
        "SELECT Sum ( SurfaceArea ) FROM country WHERE Continent > = value",
        -9.816320419311523
      ],
      [
        "SELECT Sum ( SurfaceArea ) FROM country WHERE Continent > = value AND Continent < = value",
        -9.884936332702637
      ],
      [
        "SELECT Sum ( SurfaceArea ) FROM country WHERE SurfaceArea > value AND Continent = value",
        -9.89799976348877
      ],
      [
        "SELECT Sum ( SurfaceArea ) FROM country WHERE Continent > value",
        -9.937154769897461
      ],
      [
        "SELECT Sum ( SurfaceArea ) FROM country WHERE Continent = value AND Continent > = value",
        -10.802549362182617
      ],
      [
        "SELECT Sum ( SurfaceArea ) FROM country WHERE Continent > = value AND Continent = value",
        -11.08249568939209
      ],
      [
        "SELECT Sum ( SurfaceArea ) FROM country WHERE Continent = value AND Continent > value",
        -11.125489234924316
      ],
      [
        "SELECT Sum ( SurfaceArea ) FROM country WHERE Region = value",
        -11.520438194274902
      ],
      [
        "SELECT Sum ( SurfaceArea ) FROM country WHERE Continent ! = value",
        -11.651915550231934
      ],
      [
        "SELECT Sum ( SurfaceArea ) FROM country WHERE Region IN ( SELECT Region FROM country WHERE Continent = value ) AND Continent IN ( SELECT Continent FROM country WHERE Continent = value )",
        -12.675509929656982
      ]
    ],
    "predicted_parse_with_values": "SELECT Sum ( SurfaceArea ) FROM country WHERE Continent = \"Europe\" AND Continent = \"Asia\"",
    "predicted_parse": "SELECT Sum ( SurfaceArea ) FROM country WHERE Continent = value AND Continent = value",
    "predicted_parse_explanation": [
      "find the summation of surface area in country table whose continent equals Europe and continent equals Asia"
    ],
    "template_feedback": "you shoud consider either of the conditions rather than both of them .",
    "primary_span": [
      [
        0,
        12
      ]
    ],
    "secondary_span": [],
    "edits": [
      "continent equals \"Asia\" or continent equals \"Europe\"",
      "continent equals \"Europe\"",
      "continent equals \"Asia\""
    ],
    "edits_original": "< where > add continent equals \" Asia \" or continent equals \" Europe \" </ where > < where > remove continent equals \" Europe \" </ where > < where > remove continent equals \" Asia \" </ where >"
  },
  {
    "db_id": "tvshow",
    "feedback": "Remove written by equals Ben Jones and\" phrase .",
    "question": "What are the names of all cartoons directed by Ben Jones?",
    "gold_parse": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\"",
    "beam": [
      [
        "SELECT Title FROM Cartoon WHERE Written_by = value AND Directed_by = value",
        -0.006335258483886719
      ],
      [
        "SELECT Title FROM Cartoon WHERE Written_by = value AND Written_by = value",
        -5.298269271850586
      ],
      [
        "SELECT Title FROM Cartoon WHERE Written_by = value",
        -7.336806297302246
      ],
      [
        "SELECT Title FROM Cartoon WHERE Directed_by = value AND Directed_by = value",
        -7.388324737548828
      ],
      [
        "SELECT DISTINCT Title FROM Cartoon WHERE Written_by = value AND Directed_by = value",
        -11.022716522216797
      ],
      [
        "SELECT Title FROM Cartoon WHERE Directed_by = value",
        -11.254796981811523
      ],
      [
        "SELECT Title FROM Cartoon WHERE Directed_by = value AND Written_by = value",
        -12.628169059753418
      ],
      [
        "SELECT DISTINCT Title FROM Cartoon WHERE Written_by = value AND Directed_by = value",
        -13.098491668701172
      ],
      [
        "SELECT Title FROM Cartoon WHERE Written_by = value AND Directed_by LIKE value",
        -13.429752349853516
      ],
      [
        "SELECT Title , Directed_by FROM Cartoon WHERE Written_by = value AND Directed_by = value",
        -13.53997802734375
      ],
      [
        "SELECT Title , Written_by FROM Cartoon WHERE Written_by = value AND Directed_by = value",
        -13.569302558898926
      ],
      [
        "SELECT Title FROM Cartoon WHERE Written_by LIKE value AND Directed_by = value",
        -14.392863273620605
      ],
      [
        "SELECT Title FROM Cartoon WHERE Written_by = value AND Directed_by = value AND Directed_by = value",
        -15.003725051879883
      ],
      [
        "SELECT Title FROM Cartoon WHERE Written_by = value AND Written_by = value AND Directed_by = value",
        -15.19073486328125
      ],
      [
        "SELECT T3.Title , T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T2.Channel = T1.id JOIN Cartoon AS T3 ON T1.id = T3.Channel WHERE T3.Written_by = value AND T3.Directed_by = value",
        -15.293314695358276
      ],
      [
        "SELECT Title FROM Cartoon WHERE Written_by = value AND Count ( Directed_by ) = value",
        -15.629467010498047
      ],
      [
        "SELECT DISTINCT Title FROM Cartoon WHERE Written_by = value",
        -16.227463722229004
      ],
      [
        "SELECT Title FROM Cartoon WHERE Written_by < value",
        -16.61022186279297
      ],
      [
        "SELECT Title FROM Cartoon WHERE Directed_by < value",
        -16.7135591506958
      ],
      [
        "SELECT Title FROM Cartoon",
        -18.787466049194336
      ]
    ],
    "predicted_parse_with_values": "SELECT Title FROM Cartoon WHERE Written_by = \"Ben Jones\" AND Directed_by = \"Ben Jones\"",
    "predicted_parse": "SELECT Title FROM Cartoon WHERE Written_by = value AND Directed_by = value",
    "predicted_parse_explanation": [
      "find the title in cartoon table whose written by equals Ben Jones and directed by equals Ben Jones"
    ],
    "template_feedback": "remove the written by equals Ben Jones conditions .",
    "primary_span": [
      [
        0,
        8
      ]
    ],
    "secondary_span": [],
    "edits": [
      "written by equals \"Ben Jones\""
    ],
    "edits_original": "< where > remove written by equals \" Ben Jones \" </ where >"
  },
  {
    "db_id": "voter_1",
    "feedback": "Ensure to find largest value of created .",
    "question": "What is last date created of votes from the state 'CA'?",
    "gold_parse": "SELECT max(created) FROM votes WHERE state  =  'CA'",
    "beam": [
      [
        "SELECT created FROM VOTES WHERE state = value",
        -7.43865966796875e-05
      ],
      [
        "SELECT T2.created FROM AREA_CODE_STATE AS T1 JOIN VOTES AS T2 ON T1.state = T2.state WHERE T1.state = value",
        -9.530007362365723
      ],
      [
        "SELECT created , state FROM VOTES WHERE state = value",
        -13.587764263153076
      ],
      [
        "SELECT created FROM VOTES WHERE state = value ORDER BY created Asc",
        -14.195594310760498
      ],
      [
        "SELECT created , created FROM VOTES WHERE state = value",
        -14.535648107528687
      ],
      [
        "SELECT DISTINCT created FROM VOTES WHERE state = value",
        -15.163143157958984
      ],
      [
        "SELECT created FROM VOTES WHERE state LIKE value",
        -15.633920669555664
      ],
      [
        "SELECT created FROM VOTES WHERE state = value AND state = value",
        -15.944907188415527
      ],
      [
        "SELECT Count ( created ) FROM VOTES WHERE state = value",
        -16.749420166015625
      ],
      [
        "SELECT DISTINCT created FROM VOTES WHERE state = value",
        -16.999753952026367
      ],
      [
        "SELECT created FROM VOTES WHERE DISTINCT state = value",
        -17.218324661254883
      ],
      [
        "SELECT created FROM VOTES WHERE state = value LIMIT value",
        -17.31874656677246
      ],
      [
        "SELECT state FROM VOTES WHERE state = value",
        -17.456953048706055
      ],
      [
        "SELECT created FROM VOTES WHERE Count ( state ) = value",
        -17.547744750976562
      ],
      [
        "SELECT created / state FROM VOTES WHERE state = value",
        -17.587976217269897
      ],
      [
        "SELECT created FROM VOTES WHERE state = value GROUP BY state",
        -17.68523406982422
      ],
      [
        "SELECT T1.created FROM VOTES AS T1 WHERE T1.state IN ( SELECT T2.state FROM AREA_CODE_STATE AS T2 JOIN VOTES AS T1 ON T2.state = T1.state WHERE T1.state = value )",
        -17.69271683692932
      ],
      [
        "SELECT created FROM VOTES WHERE state = value",
        -17.768308639526367
      ],
      [
        "SELECT T1.state FROM AREA_CODE_STATE AS T1 JOIN VOTES AS T2 ON T1.state = T2.state WHERE T2.state = value",
        -17.8048095703125
      ],
      [
        "SELECT T1.created FROM VOTES AS T1 WHERE T1.state = ( SELECT T2.state FROM AREA_CODE_STATE AS T2 JOIN VOTES AS T1 ON T2.state = T1.state WHERE T1.state = value )",
        -18.338199377059937
      ]
    ],
    "predicted_parse_with_values": "SELECT created FROM VOTES WHERE state = \"CA\"",
    "predicted_parse": "SELECT created FROM VOTES WHERE state = value",
    "predicted_parse_explanation": [
      "find the created in votes table whose state equals CA"
    ],
    "template_feedback": "find maximum created in place of created .",
    "primary_span": [
      [
        0,
        2
      ]
    ],
    "secondary_span": [
      [
        3,
        7
      ]
    ],
    "edits": [
      "maximum created",
      "created"
    ],
    "edits_original": "< select > add maximum created </ select > < select > remove created </ select >"
  },
  {
    "db_id": "flight_2",
    "feedback": "You need to utilize table of flights.",
    "question": "How many flights do we have?",
    "gold_parse": "SELECT count(*) FROM FLIGHTS",
    "beam": [
      [
        "SELECT Count ( * ) FROM airlines",
        -1.430511474609375e-05
      ],
      [
        "SELECT Count ( * ) FROM flights WHERE FlightNo = value",
        -12.709384083747864
      ],
      [
        "SELECT Sum ( FlightNo ) FROM flights",
        -12.89653092622757
      ],
      [
        "SELECT Count ( * ) , Airline FROM flights",
        -13.474443912506104
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM airlines",
        -13.90993881225586
      ],
      [
        "SELECT Sum ( * ) FROM airlines",
        -13.921891212463379
      ],
      [
        "SELECT Count ( * ) FROM flights WHERE Airline = value",
        -14.104486465454102
      ],
      [
        "SELECT Avg ( FlightNo ) FROM flights",
        -14.518450856208801
      ],
      [
        "SELECT Count ( DISTINCT FlightNo ) FROM flights",
        -14.702191829681396
      ],
      [
        "SELECT Count ( Count ( * ) ) FROM airlines",
        -14.791121482849121
      ],
      [
        "SELECT Count ( * ) FROM flights ORDER BY FlightNo Desc",
        -14.968759775161743
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE AirportName = value",
        -14.998234510421753
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE City = value",
        -15.093864440917969
      ],
      [
        "SELECT Avg ( * ) FROM airlines",
        -15.141705989837646
      ],
      [
        "SELECT Count ( * ) FROM flights GROUP BY FlightNo",
        -15.512564182281494
      ],
      [
        "SELECT Count ( * ) FROM airlines WHERE Abbreviation = value",
        -15.62513017654419
      ],
      [
        "SELECT FlightNo FROM flights",
        -15.968229413032532
      ],
      [
        "SELECT Count ( * ) FROM airlines LIMIT value",
        -17.15421962738037
      ],
      [
        "SELECT Count ( DISTINCT * ) FROM airlines",
        -17.160624504089355
      ],
      [
        "SELECT Count ( * ) FROM airlines",
        -17.369389533996582
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM airlines",
    "predicted_parse": "SELECT Count ( * ) FROM airlines",
    "predicted_parse_explanation": [
      "find the number of rows in airlines table"
    ],
    "template_feedback": "use flights table in place of airlines table .",
    "primary_span": [
      [
        0,
        2
      ]
    ],
    "secondary_span": [
      [
        3,
        8
      ]
    ],
    "edits": [
      "flights",
      "airlines"
    ],
    "edits_original": "< from > add flights </ from > < from > remove airlines </ from >"
  },
  {
    "db_id": "student_transcripts_tracking",
    "feedback": "Verify that students are enrolled in course having distinct transcripts.",
    "question": "How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.",
    "gold_parse": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1",
    "beam": [
      [
        "SELECT Count ( * ) , course_id FROM Student_Enrolment_Courses GROUP BY course_id",
        -0.26531982421875
      ],
      [
        "SELECT Count ( * ) , course_id FROM Student_Enrolment_Courses GROUP BY course_id ORDER BY Count ( * ) Desc LIMIT value",
        -1.5934791564941406
      ],
      [
        "SELECT Count ( * ) , T1.student_enrolment_id FROM Student_Enrolment AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.student_enrolment_id = T2.student_enrolment_id GROUP BY T2.course_id",
        -4.560481548309326
      ],
      [
        "SELECT Count ( * ) , T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id",
        -4.7628912925720215
      ],
      [
        "SELECT Count ( * ) , T1.student_enrolment_id FROM Student_Enrolment AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.student_enrolment_id = T2.student_enrolment_id GROUP BY T2.course_id ORDER BY Count ( * ) Desc LIMIT value",
        -6.1638946533203125
      ],
      [
        "SELECT Count ( * ) , T2.course_id FROM Student_Enrolment AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.student_enrolment_id = T2.student_enrolment_id GROUP BY T1.student_enrolment_id",
        -6.282309532165527
      ],
      [
        "SELECT Count ( * ) , T2.course_id FROM Student_Enrolment AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.student_enrolment_id = T2.student_enrolment_id GROUP BY T1.student_enrolment_id ORDER BY Count ( * ) Desc LIMIT value",
        -6.87242317199707
      ],
      [
        "SELECT Count ( * ) , T1.student_id FROM Student_Enrolment AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.student_enrolment_id = T2.student_enrolment_id GROUP BY T2.course_id",
        -6.918234825134277
      ],
      [
        "SELECT Count ( * ) , T1.semester_name FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id JOIN Student_Enrolment_Courses AS T3 ON T2.student_enrolment_id = T3.student_enrolment_id GROUP BY T3.course_id",
        -7.1967597007751465
      ],
      [
        "SELECT Count ( DISTINCT T2.course_id ) , T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id ORDER BY Count ( * ) Desc LIMIT value",
        -7.4686360359191895
      ],
      [
        "SELECT Count ( * ) FROM Student_Enrolment_Courses GROUP BY course_id ORDER BY Count ( * ) Desc LIMIT value",
        -7.793087005615234
      ],
      [
        "SELECT Count ( * ) , student_enrolment_id FROM Student_Enrolment_Courses GROUP BY course_id",
        -7.900683879852295
      ],
      [
        "SELECT Count ( DISTINCT course_id ) FROM Student_Enrolment_Courses GROUP BY course_id ORDER BY Count ( * ) Desc LIMIT value",
        -8.131108283996582
      ],
      [
        "SELECT Count ( DISTINCT T2.course_id ) , T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id",
        -8.17481279373169
      ],
      [
        "SELECT Count ( DISTINCT course_id ) FROM Student_Enrolment_Courses",
        -8.42824649810791
      ],
      [
        "SELECT Count ( * ) , T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id ORDER BY Count ( * ) Desc LIMIT value",
        -8.53667402267456
      ],
      [
        "SELECT Count ( * ) , T1.degree_program_id FROM Student_Enrolment AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.student_enrolment_id = T2.student_enrolment_id GROUP BY T2.course_id",
        -8.631298065185547
      ],
      [
        "SELECT Count ( DISTINCT T2.course_id ) , T1.student_enrolment_id FROM Student_Enrolment AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.student_enrolment_id = T2.student_enrolment_id GROUP BY T2.course_id ORDER BY Count ( * ) Desc LIMIT value",
        -8.864251136779785
      ],
      [
        "SELECT Count ( * ) , T1.student_id FROM Student_Enrolment AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.student_enrolment_id = T2.student_enrolment_id GROUP BY T2.course_id ORDER BY Count ( * ) Desc LIMIT value",
        -8.988639831542969
      ],
      [
        "SELECT Count ( * ) FROM Addresses",
        -11.69852352142334
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) , course_id FROM Student_Enrolment_Courses GROUP BY course_id",
    "predicted_parse": "SELECT Count ( * ) , course_id FROM Student_Enrolment_Courses GROUP BY course_id",
    "predicted_parse_explanation": [
      "find each value of course id in student enrolment courses table along with the number of the corresponding rows to each value"
    ],
    "template_feedback": "use transcript contents table in place of student enrolment courses table . find for each value of transcript contents 's student course id in place of course id . find transcript contents 's student course id in place of course id . find the result with the largest number of rows .",
    "primary_span": [
      [
        0,
        3
      ],
      [
        12,
        22
      ],
      [
        29,
        35
      ],
      [
        42,
        51
      ]
    ],
    "secondary_span": [
      [
        4,
        11
      ],
      [
        23,
        28
      ],
      [
        36,
        41
      ]
    ],
    "edits": [
      "student course id",
      "course id",
      "transcript contents",
      "student enrolment courses",
      "student course id",
      "course id",
      "number of rows",
      "descending",
      "1"
    ],
    "edits_original": "< select > add student course id </ select > < select > remove course id </ select > < from > add transcript contents </ from > < from > remove student enrolment courses </ from > < groupBy > add student course id </ groupBy > < groupBy > remove course id </ groupBy > < orderBy > add number of rows </ orderBy > < orderBy > add descending </ orderBy > < limit > add 1 </ limit >"
  },
  {
    "db_id": "world_1",
    "feedback": "swap between region and continent as well as between continent and name.",
    "question": "Which countries have greater area than that of any country in Europe?",
    "gold_parse": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")",
    "beam": [
      [
        "SELECT Continent FROM country WHERE SurfaceArea > ( SELECT SurfaceArea FROM country WHERE Region = value )",
        -0.44281959533691406
      ],
      [
        "SELECT Continent FROM country WHERE SurfaceArea > ( SELECT SurfaceArea FROM country WHERE Continent = value )",
        -1.5094480514526367
      ],
      [
        "SELECT Continent FROM country WHERE SurfaceArea > ( SELECT Max ( SurfaceArea ) FROM country WHERE Region = value )",
        -2.9135570526123047
      ],
      [
        "SELECT Continent FROM country WHERE SurfaceArea > ( SELECT Max ( SurfaceArea ) FROM country WHERE Continent = value )",
        -3.324190139770508
      ],
      [
        "SELECT Name FROM country WHERE SurfaceArea > ( SELECT SurfaceArea FROM country WHERE Region = value )",
        -4.6170806884765625
      ],
      [
        "SELECT SurfaceArea FROM country WHERE SurfaceArea > ( SELECT SurfaceArea FROM country WHERE Region = value )",
        -4.753657817840576
      ],
      [
        "SELECT GovernmentForm FROM country WHERE SurfaceArea > ( SELECT SurfaceArea FROM country WHERE Region = value )",
        -5.196717739105225
      ],
      [
        "SELECT Name FROM country WHERE SurfaceArea > ( SELECT SurfaceArea FROM country WHERE Continent = value )",
        -5.544249534606934
      ],
      [
        "SELECT SurfaceArea FROM country WHERE SurfaceArea > ( SELECT SurfaceArea FROM country WHERE Continent = value )",
        -5.7074294090271
      ],
      [
        "SELECT Continent FROM country WHERE SurfaceArea > ( SELECT SurfaceArea FROM country WHERE LocalName = value )",
        -5.777731418609619
      ],
      [
        "SELECT GovernmentForm FROM country WHERE SurfaceArea > ( SELECT SurfaceArea FROM country WHERE Continent = value )",
        -6.120540142059326
      ],
      [
        "SELECT Continent FROM country WHERE SurfaceArea > ( SELECT SurfaceArea FROM country WHERE Name = value )",
        -6.891302108764648
      ],
      [
        "SELECT Continent FROM country WHERE SurfaceArea > ( SELECT Population FROM country WHERE Region = value )",
        -7.185947895050049
      ],
      [
        "SELECT SurfaceArea FROM country WHERE SurfaceArea > ( SELECT Max ( SurfaceArea ) FROM country WHERE Region = value )",
        -7.186228275299072
      ],
      [
        "SELECT Name FROM country WHERE SurfaceArea > ( SELECT Max ( SurfaceArea ) FROM country WHERE Region = value )",
        -7.2711381912231445
      ],
      [
        "SELECT Continent FROM country WHERE SurfaceArea > value",
        -8.737543106079102
      ],
      [
        "SELECT Continent FROM country WHERE SurfaceArea > Population",
        -8.876540184020996
      ],
      [
        "SELECT Continent FROM country WHERE SurfaceArea > LocalName",
        -10.172953128814697
      ],
      [
        "SELECT Name FROM country WHERE SurfaceArea > value",
        -12.999120712280273
      ],
      [
        "SELECT SurfaceArea FROM country WHERE SurfaceArea > value",
        -13.153883457183838
      ]
    ],
    "predicted_parse_with_values": "SELECT Continent FROM country WHERE SurfaceArea > ( SELECT SurfaceArea FROM country WHERE Region = \"Europe\" )",
    "predicted_parse": "SELECT Continent FROM country WHERE SurfaceArea > ( SELECT SurfaceArea FROM country WHERE Region = value )",
    "predicted_parse_explanation": [
      "Step 1: find the surface area in country table whose region equals Europe",
      "Step 2: find the continent in country table whose surface area greater than the results of step 1"
    ],
    "template_feedback": "in step 1 , consider the continent equals Europe conditions in place of the region equals Europe conditions . find minimum surface area in place of surface area . in step 2 , find name in place of continent .",
    "primary_span": [
      [
        4,
        9
      ],
      [
        19,
        22
      ],
      [
        33,
        34
      ]
    ],
    "secondary_span": [
      [
        10,
        18
      ],
      [
        23,
        28
      ],
      [
        35,
        39
      ]
    ],
    "edits": [
      "name",
      "continent",
      "minimum surface area",
      "surface area",
      "continent equals \"Europe\"",
      "region equals \"Europe\""
    ],
    "edits_original": "< select > add name </ select > < select > remove continent </ select > < select > add minimum surface area </ select > < select > remove surface area </ select > < where > add continent equals \" Europe \" </ where > < where > remove region equals \" Europe \" </ where >"
  },
  {
    "db_id": "dog_kennels",
    "feedback": "In step 1 , owners table should be replaced by dogs table .",
    "question": "Which owner owns the most dogs? List the owner id, first name and last name.",
    "gold_parse": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
    "beam": [
      [
        "SELECT owner_id , first_name , last_name FROM Owners GROUP BY owner_id ORDER BY Count ( * ) Desc LIMIT value",
        -0.0017337799072265625
      ],
      [
        "SELECT T1.owner_id , T1.first_name , T3.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id GROUP BY T1.owner_id ORDER BY Count ( * ) Desc LIMIT value",
        -6.450583457946777
      ],
      [
        "SELECT T1.owner_id , T3.first_name , T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id GROUP BY T1.owner_id ORDER BY Count ( * ) Desc LIMIT value",
        -9.51673698425293
      ],
      [
        "SELECT owner_id , first_name FROM Owners GROUP BY owner_id ORDER BY Count ( * ) Desc LIMIT value",
        -11.000537872314453
      ],
      [
        "SELECT owner_id , first_name , last_name , last_name FROM Owners GROUP BY owner_id ORDER BY Count ( * ) Desc LIMIT value",
        -11.138261795043945
      ],
      [
        "SELECT owner_id , first_name , last_name FROM Owners GROUP BY owner_id ORDER BY Count ( * ) Desc",
        -11.614562034606934
      ],
      [
        "SELECT first_name , last_name , last_name FROM Owners GROUP BY owner_id ORDER BY Count ( * ) Desc LIMIT value",
        -11.716387748718262
      ],
      [
        "SELECT owner_id , first_name , last_name FROM Owners GROUP BY first_name ORDER BY Count ( * ) Desc LIMIT value",
        -12.123281478881836
      ],
      [
        "SELECT owner_id , first_name , last_name FROM Owners GROUP BY owner_id ORDER BY Count ( * ) Asc LIMIT value",
        -12.598552703857422
      ],
      [
        "SELECT T3.professional_id , T1.first_name , T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id GROUP BY T1.owner_id ORDER BY Count ( * ) Desc LIMIT value",
        -12.69149398803711
      ],
      [
        "SELECT T1.owner_id , T1.first_name , T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY T2.owner_id ORDER BY Count ( * ) Desc LIMIT value",
        -13.452199935913086
      ],
      [
        "SELECT T2.owner_id , T1.first_name , T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id ORDER BY Count ( * ) Desc LIMIT value",
        -13.632648468017578
      ],
      [
        "SELECT T1.owner_id , T1.first_name , T1.last_name , T3.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id GROUP BY T1.owner_id ORDER BY Count ( * ) Desc LIMIT value",
        -13.657047748565674
      ],
      [
        "SELECT owner_id , first_name , last_name FROM Owners GROUP BY owner_id",
        -14.100560188293457
      ],
      [
        "SELECT owner_id , first_name , last_name FROM Owners ORDER BY last_name Desc LIMIT value",
        -14.125628590583801
      ],
      [
        "SELECT T1.owner_id , T1.first_name , T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id GROUP BY T3.first_name ORDER BY Count ( * ) Desc LIMIT value",
        -14.210437774658203
      ],
      [
        "SELECT T1.owner_id , T1.first_name , T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id ORDER BY T2.age Desc LIMIT value",
        -14.278058528900146
      ],
      [
        "SELECT T1.first_name , T1.last_name , T3.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id GROUP BY T1.owner_id ORDER BY Count ( * ) Desc LIMIT value",
        -14.43450665473938
      ],
      [
        "SELECT owner_id , first_name FROM Owners GROUP BY first_name ORDER BY Count ( * ) Desc LIMIT value",
        -14.505691528320312
      ],
      [
        "SELECT owner_id , first_name , last_name , owner_id FROM Owners GROUP BY owner_id ORDER BY Count ( * ) Desc LIMIT value",
        -14.591739177703857
      ]
    ],
    "predicted_parse_with_values": "SELECT owner_id , first_name , last_name FROM Owners GROUP BY owner_id ORDER BY Count ( * ) Desc LIMIT 1",
    "predicted_parse": "SELECT owner_id , first_name , last_name FROM Owners GROUP BY owner_id ORDER BY Count ( * ) Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of owner id in owners table",
      "Step 2: find the owner id , first name , last name in owners table with largest value in the results of step 1"
    ],
    "template_feedback": "in step 1 , additionally use the information from the dogs table besides the owners table .",
    "primary_span": [
      [
        4,
        11
      ]
    ],
    "secondary_span": [
      [
        12,
        16
      ]
    ],
    "edits": [
      "dogs"
    ],
    "edits_original": "< from > add dogs </ from >"
  },
  {
    "db_id": "car_1",
    "feedback": "Add car makers table , replace make id , cont id and model list's model with id , maker and car names' model respectively .",
    "question": "Which are the car makers which produce at least 2 models and more than 3 car makes? List the id and the maker.",
    "gold_parse": "SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3",
    "beam": [
      [
        "SELECT T2.MakeId , T1.ModelId FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model WHERE T1.Model > = value INTERSECT SELECT T2.MakeId , T1.ModelId FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model WHERE T1.Model > value",
        -2.2449969053268433
      ],
      [
        "SELECT T2.MakeId , T1.ModelId FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model WHERE T1.Model > = value INTERSECT SELECT T2.MakeId , T3.Maker FROM car_makers AS T3 JOIN model_list AS T1 ON T3.Id = T1.Maker AND T3.Id = T1.Maker JOIN car_names AS T2 ON T1.Model = T2.Model WHERE T1.Model > value",
        -2.87361478805542
      ],
      [
        "SELECT T3.MakeId , T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker AND T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model WHERE T2.Model > = value INTERSECT SELECT T3.MakeId , T2.ModelId FROM model_list AS T2 JOIN car_names AS T3 ON T2.Model = T3.Model WHERE T2.Model > value",
        -2.9186034202575684
      ],
      [
        "SELECT T3.MakeId , T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker AND T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model WHERE T2.Model > = value INTERSECT SELECT T3.MakeId , T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker AND T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model WHERE T2.Model > value",
        -3.531345009803772
      ],
      [
        "SELECT T2.MakeId , T1.ModelId FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model WHERE T1.Model > = value INTERSECT SELECT T2.MakeId , T3.FullName FROM car_makers AS T3 JOIN model_list AS T1 ON T3.Id = T1.Maker AND T3.Id = T1.Maker JOIN car_names AS T2 ON T1.Model = T2.Model WHERE T1.Model > value",
        -3.6431342363357544
      ],
      [
        "SELECT T2.MakeId , T1.ModelId FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model WHERE T1.Model > = value INTERSECT SELECT T1.ModelId , T3.Maker FROM car_makers AS T3 JOIN model_list AS T1 ON T3.Id = T1.Maker WHERE T1.Model > value",
        -3.9363200664520264
      ],
      [
        "SELECT T3.MakeId , T1.FullName FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker AND T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model WHERE T2.Model > = value INTERSECT SELECT T3.MakeId , T2.ModelId FROM model_list AS T2 JOIN car_names AS T3 ON T2.Model = T3.Model WHERE T2.Model > value",
        -3.992463707923889
      ],
      [
        "SELECT T2.MakeId , T1.ModelId FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model WHERE T1.Model > = value INTERSECT SELECT T1.ModelId , T3.FullName FROM car_makers AS T3 JOIN model_list AS T1 ON T3.Id = T1.Maker WHERE T1.Model > value",
        -4.253141164779663
      ],
      [
        "SELECT T2.MakeId , T1.ModelId FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model WHERE T1.Model > = value INTERSECT SELECT T1.ModelId , T1.ModelId FROM model_list AS T1 WHERE T1.Model > value",
        -4.262736201286316
      ],
      [
        "SELECT T3.MakeId , T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker AND T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model WHERE T2.Model > = value INTERSECT SELECT T3.MakeId , T1.FullName FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker AND T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model WHERE T2.Model > value",
        -4.262916207313538
      ],
      [
        "SELECT T2.MakeId , T1.ModelId FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model WHERE T2.Model > = value INTERSECT SELECT T2.MakeId , T1.ModelId FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model WHERE T1.Model > value",
        -4.405007004737854
      ],
      [
        "SELECT T2.MakeId , T1.ModelId FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model WHERE T1.Model = value GROUP BY T1.ModelId HAVING Count ( * ) > = value",
        -4.536995530128479
      ],
      [
        "SELECT T3.MakeId , T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker AND T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model WHERE T2.Model > = value INTERSECT SELECT T2.ModelId , T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker WHERE T2.Model > value",
        -4.587418913841248
      ],
      [
        "SELECT T3.MakeId , T1.Id FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker AND T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model WHERE T2.Model > = value INTERSECT SELECT T3.MakeId , T2.ModelId FROM model_list AS T2 JOIN car_names AS T3 ON T2.Model = T3.Model WHERE T2.Model > value",
        -4.63054883480072
      ],
      [
        "SELECT T3.MakeId , T1.FullName FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker AND T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model WHERE T2.Model > = value INTERSECT SELECT T3.MakeId , T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker AND T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model WHERE T2.Model > value",
        -4.68499493598938
      ],
      [
        "SELECT T2.MakeId , T1.ModelId FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model WHERE T1.Model > = value GROUP BY T1.ModelId HAVING Count ( * ) > = value",
        -4.736906170845032
      ],
      [
        "SELECT T3.MakeId , T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker AND T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model WHERE T2.Model > = value INTERSECT SELECT T2.ModelId , T1.FullName FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker WHERE T2.Model > value",
        -4.86300003528595
      ],
      [
        "SELECT T3.MakeId , T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker AND T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model WHERE T2.Model > = value INTERSECT SELECT T2.ModelId , T2.ModelId FROM model_list AS T2 WHERE T2.Model > value",
        -4.936103463172913
      ],
      [
        "SELECT T2.MakeId , T2.MakeId FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model WHERE T1.Model > = value INTERSECT SELECT T2.MakeId , T1.ModelId FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model WHERE T1.Model > value",
        -4.970877170562744
      ],
      [
        "SELECT T2.MakeId , T1.ModelId FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model WHERE T1.Model > = value INTERSECT SELECT T3.Id , T1.ModelId FROM car_makers AS T3 JOIN model_list AS T1 ON T3.Id = T1.Maker WHERE T1.Model > value",
        -5.036259055137634
      ]
    ],
    "predicted_parse_with_values": "SELECT T2.MakeId , T1.ModelId FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model WHERE T1.Model > = 2 INTERSECT SELECT T2.MakeId , T1.ModelId FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model WHERE T1.Model > 3",
    "predicted_parse": "SELECT T2.MakeId , T1.ModelId FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model WHERE T1.Model > = value INTERSECT SELECT T2.MakeId , T1.ModelId FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model WHERE T1.Model > value",
    "predicted_parse_explanation": [
      "Step 1: for each row in model list table , find the corresponding rows in car names table",
      "Step 2: find the make id and model id of the results of step 1 whose model list 's model greater than or equals 2",
      "Step 3: for each row in model list table , find the corresponding rows in car names table",
      "Step 4: find the make id and model id of the results of step 3 whose model list 's model greater than 3",
      "Step 5: show the rows that are in both the results of step 2 and step 4"
    ],
    "template_feedback": "in step 1 , use car makers table in place of car names table in step 2 , remove the model list 's model greater than or equals 2 conditions . find for each value of id whose number of rows greater than or equals 2 . find id and car makers 's maker in place of make id and model id . in step 3 , additionally use the information from the car makers table . in step 4 , remove the model list 's model greater than 3 conditions . find for each value of id whose number of rows greater than 3 . find id and car makers 's maker in place of make id and model id .",
    "primary_span": [
      [
        4,
        7
      ],
      [
        18,
        30
      ],
      [
        31,
        46
      ],
      [
        47,
        53
      ],
      [
        67,
        76
      ],
      [
        81,
        91
      ],
      [
        92,
        105
      ],
      [
        106,
        112
      ]
    ],
    "secondary_span": [
      [
        8,
        13
      ],
      [
        54,
        62
      ],
      [
        113,
        121
      ]
    ],
    "edits": [
      "id",
      "maker",
      "make id",
      "model id",
      "car makers",
      "car names",
      "model greater than or equals to 2",
      "id",
      "number of rows greater than or equals to 2",
      "id",
      "maker",
      "make id",
      "model id",
      "car makers",
      "model greater than 3",
      "id",
      "number of rows greater than 3"
    ],
    "edits_original": "< select > add id </ select > < select > add maker </ select > < select > remove make id </ select > < select > remove model id </ select > < from > add car makers </ from > < from > remove car names </ from > < where > remove model greater than or equals to 2 </ where > < groupBy > add id </ groupBy > < having > add number of rows greater than or equals to 2 </ having > < select > add id </ select > < select > add maker </ select > < select > remove make id </ select > < select > remove model id </ select > < from > add car makers </ from > < where > remove model greater than 3 </ where > < groupBy > add id </ groupBy > < having > add number of rows greater than 3 </ having >"
  },
  {
    "db_id": "singer",
    "feedback": "also show singer's name",
    "question": "Show the names of singers and the total sales of their songs.",
    "gold_parse": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name",
    "beam": [
      [
        "SELECT T1.Name , Sum ( T2.Sales ) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T2.Singer_ID",
        -0.015256881713867188
      ],
      [
        "SELECT T1.Name , Sum ( T2.Sales ) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name",
        -4.212883949279785
      ],
      [
        "SELECT T1.Name , Sum ( T2.Sales ) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID",
        -8.414993286132812
      ],
      [
        "SELECT T1.Name , Sum ( T2.Sales ) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T2.Singer_ID HAVING Sum ( T2.Sales ) > = value",
        -10.36507797241211
      ],
      [
        "SELECT T1.Name , Sum ( T1.Net_Worth_Millions ) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T2.Singer_ID",
        -10.56865406036377
      ],
      [
        "SELECT T1.Name , Sum ( T2.Sales ) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T2.Singer_ID ORDER BY Sum ( T2.Sales ) Asc LIMIT value",
        -10.908422470092773
      ],
      [
        "SELECT Sum ( T1.Name ) , Sum ( T2.Sales ) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T2.Singer_ID",
        -12.039815902709961
      ],
      [
        "SELECT T1.Name , Sum ( T2.Sales ) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Singer_ID",
        -12.157923698425293
      ],
      [
        "SELECT T1.Name , Sum ( T2.Sales ) , Sum ( T2.Sales ) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T2.Singer_ID",
        -12.374077796936035
      ],
      [
        "SELECT T1.Name , Avg ( T2.Sales ) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T2.Singer_ID",
        -12.735060691833496
      ],
      [
        "SELECT T1.Name , Count ( * ) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T2.Singer_ID",
        -12.757074356079102
      ],
      [
        "SELECT T1.Name , Sum ( T2.Sales ) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T2.Singer_ID HAVING Sum ( DISTINCT T2.Title ) > = value",
        -13.143095016479492
      ],
      [
        "SELECT T1.Name , Sum ( T2.Sales ) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Title = value GROUP BY T1.Name",
        -13.642508506774902
      ],
      [
        "SELECT T1.Name , Sum ( T2.Sales ) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T2.Singer_ID HAVING Sum ( T2.Title ) = value",
        -13.926532745361328
      ],
      [
        "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T2.Singer_ID",
        -14.118297576904297
      ],
      [
        "SELECT Name , Sum ( Net_Worth_Millions ) FROM singer GROUP BY Name",
        -14.346914291381836
      ],
      [
        "SELECT Count ( * ) , Sum ( Sales ) FROM song GROUP BY Singer_ID",
        -14.378339767456055
      ],
      [
        "SELECT Name , Count ( * ) FROM singer GROUP BY Name",
        -14.918728828430176
      ],
      [
        "SELECT T1.Name , Sum ( T2.Title ) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T2.Singer_ID",
        -15.178956985473633
      ],
      [
        "SELECT Name FROM singer GROUP BY Name",
        -15.185317993164062
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.Name , Sum ( T2.Sales ) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T2.Singer_ID",
    "predicted_parse": "SELECT T1.Name , Sum ( T2.Sales ) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T2.Singer_ID",
    "predicted_parse_explanation": [
      "Step 1: for each row in singer table , find the corresponding rows in song table",
      "Step 2: find each value of song 's singer id of the results of step 1 along with the name and summation of sales of the corresponding rows to each value"
    ],
    "template_feedback": "in step 2 , find for each value of name in place of song 's singer id .",
    "primary_span": [
      [
        4,
        9
      ]
    ],
    "secondary_span": [
      [
        10,
        17
      ]
    ],
    "edits": [
      "name",
      "singer id"
    ],
    "edits_original": "< groupBy > add name </ groupBy > < groupBy > remove singer id </ groupBy >"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "feedback": "Substitute reference template types table with templates table.",
    "question": "Count the number of templates.",
    "gold_parse": "SELECT count(*) FROM Templates",
    "beam": [
      [
        "SELECT Count ( * ) FROM Ref_Template_Types",
        -8.58306884765625e-06
      ],
      [
        "SELECT Sum ( * ) FROM Ref_Template_Types",
        -12.85057783126831
      ],
      [
        "SELECT Count ( * ) FROM Templates WHERE Version_Number = value",
        -13.83055567741394
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM Ref_Template_Types",
        -13.968159675598145
      ],
      [
        "SELECT Sum ( Version_Number ) FROM Templates",
        -14.175119996070862
      ],
      [
        "SELECT Avg ( * ) FROM Ref_Template_Types",
        -14.496986031532288
      ],
      [
        "SELECT Count ( * ) FROM Documents GROUP BY Template_ID",
        -14.953600645065308
      ],
      [
        "SELECT Count ( * ) FROM Templates WHERE Template_Type_Code = value",
        -14.958760857582092
      ],
      [
        "SELECT Count ( Count ( * ) ) FROM Ref_Template_Types",
        -15.342851638793945
      ],
      [
        "SELECT Count ( * ) , Count ( * ) FROM Ref_Template_Types",
        -15.419516563415527
      ],
      [
        "SELECT Count ( * ) , Template_ID FROM Documents",
        -15.425583362579346
      ],
      [
        "SELECT Count ( * ) FROM Templates ORDER BY Version_Number Desc",
        -16.077983915805817
      ],
      [
        "SELECT Count ( * ) , Template_Type_Code FROM Templates",
        -16.110114574432373
      ],
      [
        "SELECT Avg ( Version_Number ) FROM Templates",
        -16.335925698280334
      ],
      [
        "SELECT Count ( * ) FROM Templates ORDER BY Version_Number Desc LIMIT value",
        -16.400756418704987
      ],
      [
        "SELECT Count ( * ) FROM Templates GROUP BY Template_Type_Code",
        -16.459954857826233
      ],
      [
        "SELECT * FROM Ref_Template_Types",
        -16.82906886935234
      ],
      [
        "SELECT Count ( DISTINCT * ) FROM Ref_Template_Types",
        -16.98592472076416
      ],
      [
        "SELECT Count ( * ) FROM Ref_Template_Types LIMIT value",
        -17.04298973083496
      ],
      [
        "SELECT Max ( * ) FROM Ref_Template_Types",
        -17.484467267990112
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM Ref_Template_Types",
    "predicted_parse": "SELECT Count ( * ) FROM Ref_Template_Types",
    "predicted_parse_explanation": [
      "find the number of rows in reference template types table"
    ],
    "template_feedback": "use templates table in place of reference template types table .",
    "primary_span": [
      [
        0,
        2
      ]
    ],
    "secondary_span": [
      [
        3,
        10
      ]
    ],
    "edits": [
      "templates",
      "reference template types"
    ],
    "edits_original": "< from > add templates </ from > < from > remove reference template types </ from >"
  },
  {
    "db_id": "course_teach",
    "feedback": "I want the name of teacher.",
    "question": "What are the names of the teachers and how many courses do they teach?",
    "gold_parse": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name",
    "beam": [
      [
        "SELECT T1.Name , Count ( * ) FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Teacher_ID",
        -0.15889358520507812
      ],
      [
        "SELECT Name , Count ( * ) FROM teacher GROUP BY Name",
        -1.919149398803711
      ],
      [
        "SELECT Name , Count ( * ) FROM teacher GROUP BY Teacher_ID",
        -9.024820327758789
      ],
      [
        "SELECT Count ( * ) , T1.Name FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Teacher_ID",
        -10.923899173736572
      ],
      [
        "SELECT Count ( * ) , Name FROM teacher GROUP BY Name",
        -11.298011302947998
      ],
      [
        "SELECT T1.Name , Count ( * ) FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Teacher_ID ORDER BY Count ( * ) Desc LIMIT value",
        -12.370040893554688
      ],
      [
        "SELECT T2.Name , Count ( * ) , T1.Course FROM course AS T1 JOIN teacher AS T2 JOIN course_arrange AS T3 ON T1.Course_ID = T3.Course_ID AND T3.Teacher_ID = T2.Teacher_ID AND T1.Course_ID = T3.Course_ID GROUP BY T3.Teacher_ID",
        -12.388189315795898
      ],
      [
        "SELECT Name , Count ( * ) FROM teacher",
        -12.542096138000488
      ],
      [
        "SELECT T1.Name , Count ( T2.Course_ID ) FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Teacher_ID",
        -12.788335800170898
      ],
      [
        "SELECT T2.Name , Count ( DISTINCT T1.Course ) FROM course AS T1 JOIN teacher AS T2 JOIN course_arrange AS T3 ON T1.Course_ID = T3.Course_ID AND T3.Teacher_ID = T2.Teacher_ID AND T1.Course_ID = T3.Course_ID GROUP BY T3.Teacher_ID",
        -13.124804496765137
      ],
      [
        "SELECT T2.Name , T1.Course FROM course AS T1 JOIN teacher AS T2 JOIN course_arrange AS T3 ON T1.Course_ID = T3.Course_ID AND T3.Teacher_ID = T2.Teacher_ID AND T1.Course_ID = T3.Course_ID GROUP BY T3.Teacher_ID",
        -13.222623586654663
      ],
      [
        "SELECT Name FROM teacher GROUP BY Name",
        -13.693881034851074
      ],
      [
        "SELECT T2.Name , Sum ( T1.Course ) FROM course AS T1 JOIN teacher AS T2 JOIN course_arrange AS T3 ON T1.Course_ID = T3.Course_ID AND T3.Teacher_ID = T2.Teacher_ID AND T1.Course_ID = T3.Course_ID GROUP BY T3.Teacher_ID",
        -13.890689969062805
      ],
      [
        "SELECT T1.Name FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Teacher_ID",
        -13.963711738586426
      ],
      [
        "SELECT T2.Name , Count ( * ) FROM course AS T1 JOIN teacher AS T2 JOIN course_arrange AS T3 ON T1.Course_ID = T3.Course_ID AND T3.Teacher_ID = T2.Teacher_ID GROUP BY T1.Course",
        -14.146953582763672
      ],
      [
        "SELECT T1.Name , Count ( * ) FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Course_ID",
        -14.150678634643555
      ],
      [
        "SELECT T1.Name , Count ( * ) FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Teacher_ID HAVING Count ( * ) = value",
        -14.50876522064209
      ],
      [
        "SELECT T1.Name , Count ( T2.Course_ID ) FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T1.Name",
        -14.977189064025879
      ],
      [
        "SELECT T2.Name , Count ( DISTINCT T1.Course ) FROM course AS T1 JOIN teacher AS T2 JOIN course_arrange AS T3 ON T1.Course_ID = T3.Course_ID AND T3.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name",
        -15.05100154876709
      ],
      [
        "SELECT Name , Count ( * ) FROM teacher GROUP BY Age",
        -15.08409595489502
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.Name , Count ( * ) FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Teacher_ID",
    "predicted_parse": "SELECT T1.Name , Count ( * ) FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Teacher_ID",
    "predicted_parse_explanation": [
      "Step 1: for each row in teacher table , find the corresponding rows in course arrange table",
      "Step 2: find each value of course arrange 's teacher id of the results of step 1 along with the number of the corresponding rows to each value"
    ],
    "template_feedback": "in step 2 , find for each value of name in place of course arrange 's teacher id .",
    "primary_span": [
      [
        4,
        9
      ]
    ],
    "secondary_span": [
      [
        10,
        18
      ]
    ],
    "edits": [
      "name",
      "teacher id"
    ],
    "edits_original": "< groupBy > add name </ groupBy > < groupBy > remove teacher id </ groupBy >"
  },
  {
    "db_id": "battle_death",
    "feedback": "Interchange battle table for ship table.",
    "question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?",
    "gold_parse": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'",
    "beam": [
      [
        "SELECT DISTINCT id , name FROM ship WHERE ship_type = value",
        -0.010739326477050781
      ],
      [
        "SELECT DISTINCT T1.id , T2.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.ship_type = value",
        -4.577746391296387
      ],
      [
        "SELECT DISTINCT lost_in_battle , name FROM ship WHERE ship_type = value",
        -8.822211265563965
      ],
      [
        "SELECT id , name FROM ship WHERE ship_type = value",
        -9.21602725982666
      ],
      [
        "SELECT DISTINCT T2.id , T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.ship_type = value",
        -9.54362964630127
      ],
      [
        "SELECT DISTINCT name , name FROM ship WHERE ship_type = value",
        -9.792755126953125
      ],
      [
        "SELECT DISTINCT T2.name , T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.ship_type = value",
        -11.272618293762207
      ],
      [
        "SELECT DISTINCT T2.id , T1.name FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id WHERE T1.ship_type = value",
        -12.132264137268066
      ],
      [
        "SELECT DISTINCT T2.caused_by_ship_id , T1.name FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id WHERE T1.ship_type = value",
        -12.946819305419922
      ],
      [
        "SELECT DISTINCT T2.killed , T1.name FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id WHERE T1.ship_type = value",
        -13.001185417175293
      ],
      [
        "SELECT DISTINCT T1.id , T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.ship_type = value",
        -13.719202995300293
      ],
      [
        "SELECT DISTINCT T2.id , T2.name , T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.ship_type = value",
        -13.860469818115234
      ],
      [
        "SELECT T1.id , T2.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.ship_type = value",
        -13.892715454101562
      ],
      [
        "SELECT DISTINCT id , name FROM ship WHERE ship_type LIKE value",
        -14.003409385681152
      ],
      [
        "SELECT DISTINCT id FROM ship WHERE ship_type = value",
        -14.10595703125
      ],
      [
        "SELECT DISTINCT disposition_of_ship , name FROM ship WHERE ship_type = value",
        -14.173583030700684
      ],
      [
        "SELECT DISTINCT Count ( id ) , name FROM ship WHERE ship_type = value",
        -14.42666244506836
      ],
      [
        "SELECT DISTINCT tonnage , name FROM ship WHERE ship_type = value",
        -15.036552429199219
      ],
      [
        "SELECT DISTINCT id , name , name FROM ship WHERE ship_type = value",
        -15.291926860809326
      ],
      [
        "SELECT DISTINCT name FROM ship WHERE ship_type = value",
        -15.628847122192383
      ]
    ],
    "predicted_parse_with_values": "SELECT DISTINCT id , name FROM ship WHERE ship_type = \"Brig\"",
    "predicted_parse": "SELECT DISTINCT id , name FROM ship WHERE ship_type = value",
    "predicted_parse_explanation": [
      "find without repetition id and name in ship table whose ship type equals Brig"
    ],
    "template_feedback": "additionally use the information from the battle table besides the ship table . find battle 's name and battle 's id in place of ship 's id and ship 's name .",
    "primary_span": [
      [
        0,
        7
      ],
      [
        13,
        20
      ]
    ],
    "secondary_span": [
      [
        8,
        12
      ],
      [
        21,
        31
      ]
    ],
    "edits": [
      "battle"
    ],
    "edits_original": "< from > add battle </ from >"
  },
  {
    "db_id": "car_1",
    "feedback": "in car makers table use all the number of rows which is corresponds to continent.",
    "question": "What is the name of each continent and how many car makers are there in each one?",
    "gold_parse": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent",
    "beam": [
      [
        "SELECT Continent , Count ( * ) FROM continents GROUP BY Continent",
        -4.38690185546875e-05
      ],
      [
        "SELECT Continent , Sum ( * ) FROM continents GROUP BY Continent",
        -10.617781460285187
      ],
      [
        "SELECT Count ( * ) , Continent FROM continents GROUP BY Continent",
        -12.383185386657715
      ],
      [
        "SELECT Continent , Count ( * ) , Continent FROM continents GROUP BY Continent",
        -12.46388902515173
      ],
      [
        "SELECT T1.Continent , Count ( * ) FROM continents AS T1 JOIN countries AS T2 ON T1.ContId = T2.Continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T3.Country",
        -12.691201210021973
      ],
      [
        "SELECT Continent , Count ( * ) FROM continents",
        -13.453065872192383
      ],
      [
        "SELECT Continent FROM continents GROUP BY Continent",
        -13.453556060791016
      ],
      [
        "SELECT T3.Country , Count ( * ) FROM continents AS T1 JOIN countries AS T2 ON T1.ContId = T2.Continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent",
        -14.522832870483398
      ],
      [
        "SELECT Continent , Count ( * ) FROM continents GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value",
        -14.632140159606934
      ],
      [
        "SELECT T2.CountryName , Count ( * ) FROM continents AS T1 JOIN countries AS T2 ON T1.ContId = T2.Continent GROUP BY T1.Continent",
        -14.809307098388672
      ],
      [
        "SELECT Continent , Continent FROM continents GROUP BY Continent",
        -14.900368452072144
      ],
      [
        "SELECT T1.Continent , Count ( * ) FROM continents AS T1 JOIN countries AS T2 ON T1.ContId = T2.Continent GROUP BY T2.Continent",
        -15.18916130065918
      ],
      [
        "SELECT Continent , Sum ( Continent ) FROM continents GROUP BY Continent",
        -15.325387001037598
      ],
      [
        "SELECT T1.Continent , Count ( * ) , Sum ( T4.ModelId ) FROM continents AS T1 JOIN countries AS T2 ON T1.ContId = T2.Continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country JOIN model_list AS T4 ON T3.Id = T4.Maker GROUP BY T1.Continent",
        -15.732830047607422
      ],
      [
        "SELECT Continent , Count ( * ) FROM continents GROUP BY Continent HAVING Count ( * ) > value",
        -15.806014060974121
      ],
      [
        "SELECT Continent , Count ( * ) FROM continents GROUP BY *",
        -15.877459526062012
      ],
      [
        "SELECT T1.Continent , Sum ( T4.ModelId ) FROM continents AS T1 JOIN countries AS T2 ON T1.ContId = T2.Continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country JOIN model_list AS T4 ON T3.Id = T4.Maker GROUP BY T1.Continent",
        -15.960354328155518
      ],
      [
        "SELECT Continent , Count ( * ) FROM continents WHERE Continent = value GROUP BY Continent",
        -16.066564917564392
      ],
      [
        "SELECT Continent , Avg ( * ) FROM continents GROUP BY Continent",
        -16.265695080161095
      ],
      [
        "SELECT Continent , Count ( * ) , Sum ( * ) FROM continents GROUP BY Continent",
        -16.35868263244629
      ]
    ],
    "predicted_parse_with_values": "SELECT Continent , Count ( * ) FROM continents GROUP BY Continent",
    "predicted_parse": "SELECT Continent , Count ( * ) FROM continents GROUP BY Continent",
    "predicted_parse_explanation": [
      "find each value of continent in continents table along with the number of the corresponding rows to each value"
    ],
    "template_feedback": "additionally use the information from the car makers table and countries table besides the continents table .",
    "primary_span": [
      [
        0,
        11
      ]
    ],
    "secondary_span": [
      [
        12,
        16
      ]
    ],
    "edits": [
      "countries",
      "car makers"
    ],
    "edits_original": "< from > add countries </ from > < from > add car makers </ from >"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "feedback": "Find number of paragraphs table whose Document ID's corresponding Documents's document name contains Summer Show .",
    "question": "Count the number of paragraphs in the document named 'Summer Show'.",
    "gold_parse": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'",
    "beam": [
      [
        "SELECT Count ( * ) FROM Documents WHERE Document_Name LIKE value",
        -0.43932533264160156
      ],
      [
        "SELECT Count ( * ) FROM Documents WHERE Document_Name = value",
        -1.0342235565185547
      ],
      [
        "SELECT Count ( * ) FROM Documents WHERE Document_Name ! = value",
        -12.89619255065918
      ],
      [
        "SELECT Count ( * ) FROM Documents WHERE Document_Name < value",
        -13.020445823669434
      ],
      [
        "SELECT Count ( * ) FROM Documents WHERE Document_Name = value AND Document_Name = value",
        -13.850069761276245
      ],
      [
        "SELECT Count ( * ) FROM Documents WHERE Document_Name IN ( SELECT Document_Name FROM Documents WHERE Document_Name = value )",
        -13.993725776672363
      ],
      [
        "SELECT Sum ( * ) FROM Documents WHERE Document_Name = value",
        -14.542012453079224
      ],
      [
        "SELECT Count ( Count ( * ) ) FROM Documents WHERE Document_Name LIKE value",
        -15.05651569366455
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM Documents WHERE Document_Name LIKE value",
        -15.340299606323242
      ],
      [
        "SELECT Sum ( * ) FROM Documents WHERE Document_Name LIKE value",
        -15.483008623123169
      ],
      [
        "SELECT Count ( Count ( * ) ) FROM Documents WHERE Document_Name = value",
        -16.031746864318848
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM Documents WHERE Document_Name = value",
        -16.081954956054688
      ],
      [
        "SELECT Count ( * ) FROM Documents WHERE DISTINCT Document_Name LIKE value",
        -16.28242301940918
      ],
      [
        "SELECT Count ( * ) , Document_Name FROM Documents WHERE Document_Name = value",
        -16.4118754863739
      ],
      [
        "SELECT Count ( * ) FROM Documents WHERE Document_Name BETWEEN value AND value",
        -16.610132217407227
      ],
      [
        "SELECT Document_Name FROM Documents WHERE Document_Name = value",
        -16.703893899917603
      ],
      [
        "SELECT Avg ( * ) FROM Documents WHERE Document_Name = value",
        -16.725061535835266
      ],
      [
        "SELECT Count ( * ) FROM Ref_Template_Types",
        -16.808094024658203
      ],
      [
        "SELECT Count ( DISTINCT * ) FROM Documents WHERE Document_Name LIKE value",
        -17.0731201171875
      ],
      [
        "SELECT Count ( DISTINCT Document_Name ) FROM Documents WHERE Document_Name LIKE value",
        -17.366430282592773
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM Documents WHERE Document_Name LIKE \"Summer Show\"",
    "predicted_parse": "SELECT Count ( * ) FROM Documents WHERE Document_Name LIKE value",
    "predicted_parse_explanation": [
      "find the number of rows in documents table whose document name like Summer Show"
    ],
    "template_feedback": "additionally use the information from the paragraphs table besides the documents table . consider the document name equals Summer Show conditions in place of the document name like Summer Show conditions .",
    "primary_span": [
      [
        0,
        7
      ],
      [
        13,
        20
      ]
    ],
    "secondary_span": [
      [
        8,
        12
      ],
      [
        21,
        31
      ]
    ],
    "edits": [
      "paragraphs",
      "document name equals \"Summer Show\"",
      "document name like \"Summer Show\""
    ],
    "edits_original": "< from > add paragraphs </ from > < where > add document name equals \" Summer Show \" </ where > < where > remove document name like \" Summer Show \" </ where >"
  },
  {
    "db_id": "world_1",
    "feedback": "In step 1 correspond with countrylanguage too . In step 2 Switch country's name with countrylanguage's language .",
    "question": "Find the city with the largest population that uses English.",
    "gold_parse": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1",
    "beam": [
      [
        "SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Name = value ORDER BY T1.Population Desc LIMIT value",
        -0.2910609245300293
      ],
      [
        "SELECT Name FROM city WHERE Population = ( SELECT Max ( Population ) FROM city ) ORDER BY Population Asc LIMIT value",
        -1.956575870513916
      ],
      [
        "SELECT Name FROM city WHERE Population = ( SELECT Max ( Population ) FROM city ) ORDER BY Population Desc LIMIT value",
        -2.7377848625183105
      ],
      [
        "SELECT Name FROM city WHERE Name = value ORDER BY Population Desc LIMIT value",
        -3.8648760318756104
      ],
      [
        "SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code JOIN countrylanguage AS T3 ON T2.Code = T3.CountryCode WHERE T3.Language = value ORDER BY T1.Population Desc LIMIT value",
        -5.104604721069336
      ],
      [
        "SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.LocalName = value ORDER BY T1.Population Desc LIMIT value",
        -5.109265327453613
      ],
      [
        "SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.LifeExpectancy = ( SELECT Max ( T1.Population ) FROM city AS T1 ) ORDER BY T1.Population Asc LIMIT value",
        -5.81334114074707
      ],
      [
        "SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Population = ( SELECT Max ( T1.Population ) FROM city AS T1 ) ORDER BY T1.Population Asc LIMIT value",
        -5.896968841552734
      ],
      [
        "SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.LifeExpectancy = ( SELECT Max ( T1.Population ) FROM city AS T1 ) ORDER BY T1.Population Desc LIMIT value",
        -6.583608627319336
      ],
      [
        "SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Population = ( SELECT Max ( T1.Population ) FROM city AS T1 ) ORDER BY T1.Population Desc LIMIT value",
        -6.662217140197754
      ],
      [
        "SELECT T1.Name FROM city AS T1 WHERE T1.Population = ( SELECT Max ( T1.Population ) FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Name = value ) ORDER BY T1.Population Desc LIMIT value",
        -6.7014031410217285
      ],
      [
        "SELECT T1.Name FROM city AS T1 WHERE T1.Population = ( SELECT Max ( T2.LifeExpectancy ) FROM country AS T2 ) ORDER BY T1.Population Asc LIMIT value",
        -7.70846700668335
      ],
      [
        "SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.HeadOfState = value ORDER BY T1.Population Desc LIMIT value",
        -7.82826566696167
      ],
      [
        "SELECT Name FROM city WHERE District = value ORDER BY Population Desc LIMIT value",
        -8.391739845275879
      ],
      [
        "SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Region = value ORDER BY T1.Population Desc LIMIT value",
        -8.848075866699219
      ],
      [
        "SELECT Name FROM city ORDER BY Population Desc LIMIT value",
        -9.338578224182129
      ],
      [
        "SELECT T1.District FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Name = value ORDER BY T1.Population Desc LIMIT value",
        -9.418006420135498
      ],
      [
        "SELECT T1.Name FROM city AS T1 JOIN sqlite_sequence AS T2 WHERE T2.name = value ORDER BY T1.Population Desc LIMIT value",
        -9.487969398498535
      ],
      [
        "SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = value ORDER BY T1.Population Desc LIMIT value",
        -10.066986083984375
      ],
      [
        "SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Name = value ORDER BY T2.LifeExpectancy Desc LIMIT value",
        -10.204835414886475
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Name = \"English\" ORDER BY T1.Population Desc LIMIT 1",
    "predicted_parse": "SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Name = value ORDER BY T1.Population Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: for each row in city table , find the corresponding rows in country table",
      "Step 2: find the city 's name of the results of step 1 whose country 's name equals English with largest value of city 's population"
    ],
    "template_feedback": "in step 1 , use countrylanguage table in place of country table in step 2 , consider the language equals English conditions in place of the country 's name equals English conditions . additionally find city 's population .",
    "primary_span": [
      [
        4,
        6
      ],
      [
        16,
        21
      ],
      [
        33,
        38
      ]
    ],
    "secondary_span": [
      [
        7,
        11
      ],
      [
        22,
        32
      ]
    ],
    "edits": [
      "population",
      "countrylanguage",
      "country",
      "language equals \"English\"",
      "name equals \"English\""
    ],
    "edits_original": "< select > add population </ select > < from > add countrylanguage </ from > < from > remove country </ from > < where > add language equals \" English \" </ where > < where > remove name equals \" English \" </ where >"
  },
  {
    "db_id": "network_1",
    "feedback": "I want the id of student from friend table in step 2.",
    "question": "Show ids of all students who do not have any friends.",
    "gold_parse": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend",
    "beam": [
      [
        "SELECT T1.ID FROM Highschooler AS T1 EXCEPT SELECT T2.liked_id FROM Likes AS T2",
        -0.8133735656738281
      ],
      [
        "SELECT T1.ID FROM Highschooler AS T1 EXCEPT SELECT T2.student_id FROM Friend AS T2",
        -1.2216911315917969
      ],
      [
        "SELECT T1.ID FROM Highschooler AS T1 EXCEPT SELECT T2.student_id FROM Likes AS T2",
        -1.407257080078125
      ],
      [
        "SELECT T1.ID FROM Highschooler AS T1 EXCEPT SELECT T2.friend_id FROM Friend AS T2",
        -4.115746974945068
      ],
      [
        "SELECT T1.ID FROM Highschooler AS T1 WHERE T1.ID NOT IN ( SELECT T2.student_id FROM Likes AS T2 )",
        -7.607892990112305
      ],
      [
        "SELECT T1.ID FROM Highschooler AS T1 WHERE T1.ID NOT IN ( SELECT T2.liked_id FROM Likes AS T2 )",
        -8.447370529174805
      ],
      [
        "SELECT T1.ID FROM Highschooler AS T1 WHERE T1.ID NOT IN ( SELECT T2.student_id FROM Friend AS T2 )",
        -10.605873107910156
      ],
      [
        "SELECT T1.ID FROM Highschooler AS T1 EXCEPT SELECT T2.student_id FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id WHERE T1.name = value",
        -11.614686965942383
      ],
      [
        "SELECT ID FROM Highschooler EXCEPT SELECT ID FROM Highschooler",
        -11.971223831176758
      ],
      [
        "SELECT T1.ID FROM Highschooler AS T1 EXCEPT SELECT T2.liked_id FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id WHERE T1.name = value",
        -12.420203924179077
      ],
      [
        "SELECT T1.ID FROM Highschooler AS T1 EXCEPT SELECT T2.student_id FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id WHERE T1.name = value",
        -12.63855528831482
      ],
      [
        "SELECT ID FROM Highschooler EXCEPT SELECT name FROM Highschooler",
        -12.937360763549805
      ],
      [
        "SELECT ID FROM Highschooler EXCEPT SELECT * FROM Highschooler",
        -13.300012588500977
      ],
      [
        "SELECT T1.student_id FROM Friend AS T1 EXCEPT SELECT T2.liked_id FROM Likes AS T2",
        -13.719358444213867
      ],
      [
        "SELECT T1.ID FROM Highschooler AS T1 WHERE T1.ID NOT IN ( SELECT T2.friend_id FROM Friend AS T2 )",
        -13.891743659973145
      ],
      [
        "SELECT T1.ID FROM Highschooler AS T1 INTERSECT SELECT T2.liked_id FROM Likes AS T2",
        -14.105169296264648
      ],
      [
        "SELECT student_id FROM Friend EXCEPT SELECT student_id FROM Friend",
        -14.12505054473877
      ],
      [
        "SELECT T1.ID FROM Highschooler AS T1 UNION SELECT T2.liked_id FROM Likes AS T2",
        -14.204895973205566
      ],
      [
        "SELECT T1.student_id FROM Friend AS T1 EXCEPT SELECT T2.student_id FROM Likes AS T2",
        -14.214174270629883
      ],
      [
        "SELECT ID FROM Highschooler",
        -14.772017478942871
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.ID FROM Highschooler AS T1 EXCEPT SELECT T2.liked_id FROM Likes AS T2",
    "predicted_parse": "SELECT T1.ID FROM Highschooler AS T1 EXCEPT SELECT T2.liked_id FROM Likes AS T2",
    "predicted_parse_explanation": [
      "Step 1: find the id in high schooler table",
      "Step 2: find the liked id in likes table",
      "Step 3: show the rows that are in the results of step 1 but not in the results of step 2"
    ],
    "template_feedback": "in step 2 , use friend table in place of likes table .",
    "primary_span": [
      [
        4,
        6
      ]
    ],
    "secondary_span": [
      [
        7,
        12
      ]
    ],
    "edits": [
      "student id",
      "liked id",
      "friend",
      "likes"
    ],
    "edits_original": "< select > add student id </ select > < select > remove liked id </ select > < from > add friend </ from > < from > remove likes </ from >"
  },
  {
    "db_id": "world_1",
    "feedback": "Exchange local name with region and region with city's name name .",
    "question": "Which region is the city Kabul located in?",
    "gold_parse": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"",
    "beam": [
      [
        "SELECT LocalName FROM country WHERE Region = value",
        -0.9127082824707031
      ],
      [
        "SELECT T2.LocalName FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Name = value",
        -1.3540263175964355
      ],
      [
        "SELECT LocalName FROM country WHERE Continent = value",
        -1.9534850120544434
      ],
      [
        "SELECT T2.LocalName FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.District = value",
        -2.9434328079223633
      ],
      [
        "SELECT SurfaceArea FROM country WHERE Region = value",
        -3.4140429496765137
      ],
      [
        "SELECT LocalName FROM country WHERE SurfaceArea = value",
        -3.446719169616699
      ],
      [
        "SELECT SurfaceArea FROM country WHERE Continent = value",
        -3.8757848739624023
      ],
      [
        "SELECT T2.SurfaceArea FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.District = value",
        -4.032707691192627
      ],
      [
        "SELECT LocalName FROM country WHERE Name = value",
        -4.1330413818359375
      ],
      [
        "SELECT LocalName FROM country",
        -4.997004508972168
      ],
      [
        "SELECT T2.SurfaceArea FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Name = value",
        -5.026534795761108
      ],
      [
        "SELECT LocalName FROM country WHERE LocalName = value",
        -5.859246730804443
      ],
      [
        "SELECT SurfaceArea FROM country WHERE Name = value",
        -5.9480836391448975
      ],
      [
        "SELECT LocalName FROM country GROUP BY LocalName HAVING Count ( * ) = value",
        -6.1606550216674805
      ],
      [
        "SELECT SurfaceArea FROM country WHERE LocalName = value",
        -6.454732656478882
      ],
      [
        "SELECT SurfaceArea FROM country",
        -6.902793884277344
      ],
      [
        "SELECT T2.Region FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Name = value",
        -7.2368621826171875
      ],
      [
        "SELECT SurfaceArea FROM country GROUP BY LocalName HAVING Count ( * ) = value",
        -7.720064163208008
      ],
      [
        "SELECT Region FROM country WHERE Region = value",
        -7.745766639709473
      ],
      [
        "SELECT Region FROM country",
        -10.739459037780762
      ]
    ],
    "predicted_parse_with_values": "SELECT LocalName FROM country WHERE Region = \"Kabul\"",
    "predicted_parse": "SELECT LocalName FROM country WHERE Region = value",
    "predicted_parse_explanation": [
      "find the local name in country table whose region equals Kabul"
    ],
    "template_feedback": "additionally use the information from the city table besides the country table . consider the city 's name equals Kabul conditions in place of the region equals Kabul conditions . find region in place of local name .",
    "primary_span": [
      [
        0,
        7
      ],
      [
        13,
        20
      ],
      [
        30,
        31
      ]
    ],
    "secondary_span": [
      [
        8,
        12
      ],
      [
        21,
        29
      ],
      [
        32,
        37
      ]
    ],
    "edits": [
      "region",
      "local name",
      "city",
      "name equals \"Kabul\"",
      "region equals \"Kabul\""
    ],
    "edits_original": "< select > add region </ select > < select > remove local name </ select > < from > add city </ from > < where > add name equals \" Kabul \" </ where > < where > remove region equals \" Kabul \" </ where >"
  },
  {
    "db_id": "voter_1",
    "feedback": "Replace area code state table with votes table in step 1.",
    "question": "What is the area code in which the most voters voted?",
    "gold_parse": "SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state  =  T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1",
    "beam": [
      [
        "SELECT area_code FROM AREA_CODE_STATE GROUP BY state ORDER BY Count ( * ) Desc LIMIT value",
        -0.01727581024169922
      ],
      [
        "SELECT T1.area_code FROM AREA_CODE_STATE AS T1 JOIN VOTES AS T2 ON T1.state = T2.state GROUP BY T2.state ORDER BY Count ( * ) Desc LIMIT value",
        -4.370733261108398
      ],
      [
        "SELECT area_code FROM AREA_CODE_STATE GROUP BY area_code ORDER BY Count ( * ) Desc LIMIT value",
        -5.411993026733398
      ],
      [
        "SELECT area_code FROM AREA_CODE_STATE GROUP BY state ORDER BY Count ( * ) Asc LIMIT value",
        -11.589489936828613
      ],
      [
        "SELECT area_code FROM AREA_CODE_STATE GROUP BY state ORDER BY Count ( * ) Desc",
        -12.53860092163086
      ],
      [
        "SELECT area_code FROM AREA_CODE_STATE ORDER BY area_code Desc LIMIT value",
        -13.588287353515625
      ],
      [
        "SELECT area_code FROM AREA_CODE_STATE GROUP BY state",
        -13.654732704162598
      ],
      [
        "SELECT DISTINCT area_code FROM AREA_CODE_STATE GROUP BY state ORDER BY Count ( * ) Desc LIMIT value",
        -13.75379467010498
      ],
      [
        "SELECT area_code , state FROM AREA_CODE_STATE GROUP BY state ORDER BY Count ( * ) Desc LIMIT value",
        -14.368560791015625
      ],
      [
        "SELECT T1.area_code FROM AREA_CODE_STATE AS T1 JOIN VOTES AS T2 ON T1.state = T2.state GROUP BY T2.vote_id ORDER BY Count ( * ) Desc LIMIT value",
        -14.632697105407715
      ],
      [
        "SELECT T1.area_code FROM AREA_CODE_STATE AS T1 JOIN CONTESTANTS AS T2 JOIN VOTES AS T3 ON T1.state = T3.state AND T3.contestant_number = T2.contestant_number GROUP BY T2.contestant_name ORDER BY Count ( * ) Desc LIMIT value",
        -14.78593635559082
      ],
      [
        "SELECT area_code FROM AREA_CODE_STATE GROUP BY state ORDER BY Sum ( * ) Desc LIMIT value",
        -14.804458141326904
      ],
      [
        "SELECT T1.area_code FROM AREA_CODE_STATE AS T1 JOIN VOTES AS T2 ON T1.state = T2.state GROUP BY T2.created ORDER BY Count ( * ) Desc LIMIT value",
        -14.9703950881958
      ],
      [
        "SELECT area_code FROM AREA_CODE_STATE GROUP BY state ORDER BY Avg ( * ) Desc LIMIT value",
        -15.15005350112915
      ],
      [
        "SELECT state FROM AREA_CODE_STATE GROUP BY state ORDER BY Count ( * ) Desc LIMIT value",
        -15.210298538208008
      ],
      [
        "SELECT area_code FROM AREA_CODE_STATE ORDER BY state Desc LIMIT value",
        -15.561559200286865
      ],
      [
        "SELECT area_code FROM AREA_CODE_STATE ORDER BY Count ( * ) Desc LIMIT value",
        -15.755062103271484
      ],
      [
        "SELECT area_code FROM AREA_CODE_STATE GROUP BY state ORDER BY Count ( DISTINCT * ) Desc LIMIT value",
        -15.844688415527344
      ],
      [
        "SELECT area_code FROM AREA_CODE_STATE GROUP BY Count ( * ) ORDER BY Count ( * ) Desc LIMIT value",
        -15.88679313659668
      ],
      [
        "SELECT area_code FROM AREA_CODE_STATE",
        -18.80911350250244
      ]
    ],
    "predicted_parse_with_values": "SELECT area_code FROM AREA_CODE_STATE GROUP BY state ORDER BY Count ( * ) Desc LIMIT 1",
    "predicted_parse": "SELECT area_code FROM AREA_CODE_STATE GROUP BY state ORDER BY Count ( * ) Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of state in area code state table",
      "Step 2: find the area code in area code state table with largest value in the results of step 1"
    ],
    "template_feedback": "in step 1 , additionally use the information from the votes table besides the area code state table . find for each value of area code in place of area code state 's state .",
    "primary_span": [
      [
        4,
        11
      ],
      [
        19,
        25
      ]
    ],
    "secondary_span": [
      [
        12,
        18
      ],
      [
        26,
        34
      ]
    ],
    "edits": [
      "votes",
      "area code",
      "state"
    ],
    "edits_original": "< from > add votes </ from > < groupBy > add area code </ groupBy > < groupBy > remove state </ groupBy >"
  },
  {
    "db_id": "world_1",
    "feedback": "population should be greater than population of countries of continent equals Africa instead of 103000.",
    "question": "Which Asian countries have a population that is larger than any country in Africa?",
    "gold_parse": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT max(population) FROM country WHERE Continent  =  \"Africa\")",
    "beam": [
      [
        "SELECT Name FROM country WHERE Continent = value AND Population > value",
        -0.19785118103027344
      ],
      [
        "SELECT GovernmentForm FROM country WHERE Continent = value AND Population > value",
        -2.7059688568115234
      ],
      [
        "SELECT Code2 FROM country WHERE Continent = value AND Population > value",
        -2.8800458908081055
      ],
      [
        "SELECT Continent FROM country WHERE Population > ( SELECT Max ( Population ) FROM country WHERE Continent = value )",
        -4.347561359405518
      ],
      [
        "SELECT Name FROM country WHERE Population > ( SELECT Max ( Population ) FROM country WHERE Continent = value )",
        -5.118539810180664
      ],
      [
        "SELECT T1.name FROM sqlite_sequence AS T1 JOIN country AS T2 WHERE T2.Continent = value AND T2.Population > value",
        -5.393017768859863
      ],
      [
        "SELECT Continent FROM country WHERE Population > ( SELECT Population FROM country WHERE Continent = value )",
        -5.406887531280518
      ],
      [
        "SELECT Name FROM country WHERE Continent = value AND Population > ( SELECT Max ( Population ) FROM country WHERE Continent = value )",
        -5.549849510192871
      ],
      [
        "SELECT Continent FROM country WHERE Population > value AND Continent = value",
        -5.646304607391357
      ],
      [
        "SELECT Name FROM country WHERE Continent = value AND SurfaceArea > value",
        -5.920941352844238
      ],
      [
        "SELECT GovernmentForm FROM country WHERE Population > ( SELECT Max ( Population ) FROM country WHERE Continent = value )",
        -5.934309005737305
      ],
      [
        "SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = value AND T2.Population > value",
        -6.049828052520752
      ],
      [
        "SELECT Name FROM country WHERE Population > ( SELECT Population FROM country WHERE Continent = value )",
        -6.076001167297363
      ],
      [
        "SELECT LocalName FROM country WHERE Continent = value AND Population > value",
        -6.428740978240967
      ],
      [
        "SELECT Name FROM country WHERE Continent = value AND Population > ( SELECT Population FROM country WHERE Continent = value )",
        -6.793160438537598
      ],
      [
        "SELECT GovernmentForm FROM country WHERE Population > ( SELECT Population FROM country WHERE Continent = value )",
        -6.9750871658325195
      ],
      [
        "SELECT Code FROM country WHERE Continent = value AND Population > value",
        -7.274576187133789
      ],
      [
        "SELECT Code2 FROM country WHERE Population > ( SELECT Max ( Population ) FROM country WHERE Continent = value )",
        -7.412487030029297
      ],
      [
        "SELECT Name FROM country WHERE Continent = value AND GNP > value",
        -7.599493980407715
      ],
      [
        "SELECT LifeExpectancy FROM country WHERE Continent = value AND Population > value",
        -7.778144836425781
      ]
    ],
    "predicted_parse_with_values": "SELECT Name FROM country WHERE Continent = \"Asia\" AND Population > 103000",
    "predicted_parse": "SELECT Name FROM country WHERE Continent = value AND Population > value",
    "predicted_parse_explanation": [
      "find the name in country table whose continent equals Asia and population greater than 103000"
    ],
    "template_feedback": "consider the population is greater than maximum population country whose continent equals Africa conditions in place of the population greater than 103000 conditions .",
    "primary_span": [
      [
        0,
        13
      ]
    ],
    "secondary_span": [
      [
        14,
        23
      ]
    ],
    "edits": [
      "population greater than SUBS1",
      "population greater than 103000",
      "maximum population",
      "country",
      "continent equals \"Africa\""
    ],
    "edits_original": "< where > add population greater than SUBS1 </ where > < where > remove population greater than 103000 </ where > < select > add maximum population </ select > < from > add country </ from > < where > add continent equals \" Africa \" </ where >"
  },
  {
    "db_id": "student_transcripts_tracking",
    "feedback": "Use line 2 in place of first name in step 2. ",
    "question": "What is the first and second line for all addresses?",
    "gold_parse": "SELECT line_1 ,  line_2 FROM addresses",
    "beam": [
      [
        "SELECT T2.first_name , T1.line_1 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id",
        -0.1954936981201172
      ],
      [
        "SELECT line_1 , line_1 FROM Addresses",
        -2.3362884521484375
      ],
      [
        "SELECT * , line_1 FROM Addresses",
        -2.9477310180664062
      ],
      [
        "SELECT line_1 , line_2 FROM Addresses",
        -4.588840484619141
      ],
      [
        "SELECT line_2 , line_1 FROM Addresses",
        -4.988656044006348
      ],
      [
        "SELECT line_3 , line_1 FROM Addresses",
        -5.58587646484375
      ],
      [
        "SELECT T2.email_address , T1.line_1 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id",
        -5.81524658203125
      ],
      [
        "SELECT line_2 , line_2 FROM Addresses",
        -6.952544212341309
      ],
      [
        "SELECT city , line_1 FROM Addresses",
        -7.12756872177124
      ],
      [
        "SELECT country , line_1 FROM Addresses",
        -7.182880401611328
      ],
      [
        "SELECT T2.date_first_registered , T1.line_1 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id",
        -7.612483501434326
      ],
      [
        "SELECT other_address_details , line_1 FROM Addresses",
        -7.65948486328125
      ],
      [
        "SELECT state_province_county , line_1 FROM Addresses",
        -7.877052307128906
      ],
      [
        "SELECT T2.middle_name , T1.line_1 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id",
        -8.754181861877441
      ],
      [
        "SELECT zip_postcode , line_1 FROM Addresses",
        -8.85364055633545
      ],
      [
        "SELECT T2.first_name , T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id",
        -8.921043395996094
      ],
      [
        "SELECT address_id , line_1 FROM Addresses",
        -9.378525733947754
      ],
      [
        "SELECT T2.cell_mobile_number , T1.line_1 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id",
        -9.812519073486328
      ],
      [
        "SELECT T2.semester_name , T1.line_1 FROM Addresses AS T1 JOIN Semesters AS T2 JOIN Students AS T3 ON T1.address_id = T3.current_address_id JOIN Student_Enrolment AS T4 ON T3.student_id = T4.student_id AND T4.semester_id = T2.semester_id",
        -10.397334098815918
      ],
      [
        "SELECT line_1 , line_3 FROM Addresses",
        -10.43539047241211
      ]
    ],
    "predicted_parse_with_values": "SELECT T2.first_name , T1.line_1 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id",
    "predicted_parse": "SELECT T2.first_name , T1.line_1 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id",
    "predicted_parse_explanation": [
      "Step 1: for each row in addresses table , find the corresponding rows in students table",
      "Step 2: find the first name and line 1 of the results of step 1"
    ],
    "template_feedback": "in step 1 , do not use the students table . in step 2 , find line 2 in place of first name .",
    "primary_span": [
      [
        4,
        10
      ],
      [
        15,
        17
      ]
    ],
    "secondary_span": [
      [
        4,
        10
      ],
      [
        18,
        23
      ]
    ],
    "edits": [
      "line 2",
      "first name",
      "students"
    ],
    "edits_original": "< select > add line 2 </ select > < select > remove first name </ select > < from > remove students </ from >"
  },
  {
    "db_id": "student_transcripts_tracking",
    "feedback": "Put transcripts table in place of addresses table .",
    "question": "How many transcripts are released?",
    "gold_parse": "SELECT count(*) FROM Transcripts",
    "beam": [
      [
        "SELECT Count ( * ) FROM Addresses",
        -2.765655517578125e-05
      ],
      [
        "SELECT Sum ( * ) FROM Addresses",
        -11.135778188705444
      ],
      [
        "SELECT Count ( * ) FROM Courses WHERE course_name = value",
        -13.019154012203217
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM Addresses",
        -13.564901351928711
      ],
      [
        "SELECT Avg ( * ) FROM Addresses",
        -14.225157499313354
      ],
      [
        "SELECT Count ( Count ( * ) ) FROM Addresses",
        -14.343140602111816
      ],
      [
        "SELECT Sum ( student_course_id ) FROM Transcript_Contents",
        -14.934276103973389
      ],
      [
        "SELECT Count ( * ) FROM Transcripts WHERE transcript_date = value",
        -15.018036603927612
      ],
      [
        "SELECT Count ( * ) FROM Transcripts ORDER BY transcript_date Asc",
        -15.028991937637329
      ],
      [
        "SELECT Count ( * ) FROM Semesters WHERE semester_name = value",
        -15.089314460754395
      ],
      [
        "SELECT Sum ( transcript_date ) FROM Transcripts",
        -15.365528583526611
      ],
      [
        "SELECT Count ( * ) FROM Addresses WHERE city = value",
        -15.67005181312561
      ],
      [
        "SELECT Sum ( transcript_id ) FROM Transcript_Contents",
        -15.727712154388428
      ],
      [
        "SELECT Count ( * ) FROM Semesters WHERE semester_description = value",
        -15.834532499313354
      ],
      [
        "SELECT Count ( * ) FROM Students WHERE first_name = value",
        -15.971717596054077
      ],
      [
        "SELECT Sum ( section_description ) FROM Sections",
        -16.75182580947876
      ],
      [
        "SELECT Max ( * ) FROM Addresses",
        -17.00051784515381
      ],
      [
        "SELECT Sum ( course_description ) FROM Courses",
        -17.06807565689087
      ],
      [
        "SELECT Count ( DISTINCT * ) FROM Addresses",
        -17.090834617614746
      ],
      [
        "SELECT Count ( * ) FROM Addresses LIMIT value",
        -17.169968605041504
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM Addresses",
    "predicted_parse": "SELECT Count ( * ) FROM Addresses",
    "predicted_parse_explanation": [
      "find the number of rows in addresses table"
    ],
    "template_feedback": "use transcripts table in place of addresses table .",
    "primary_span": [
      [
        0,
        2
      ]
    ],
    "secondary_span": [
      [
        3,
        8
      ]
    ],
    "edits": [
      "transcripts",
      "addresses"
    ],
    "edits_original": "< from > add transcripts </ from > < from > remove addresses </ from >"
  },
  {
    "db_id": "network_1",
    "feedback": "No need to find grade in step 2.",
    "question": "Show the names of high school students and their corresponding number of friends.",
    "gold_parse": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
    "beam": [
      [
        "SELECT T1.name , T1.grade , Count ( * ) FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id",
        -0.6819887161254883
      ],
      [
        "SELECT T1.name , T1.grade FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id",
        -1.4952983856201172
      ],
      [
        "SELECT T1.name , T1.grade , Count ( * ) FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id GROUP BY T2.student_id",
        -2.2147135734558105
      ],
      [
        "SELECT name , grade FROM Highschooler GROUP BY name",
        -3.1215763092041016
      ],
      [
        "SELECT T1.name , T1.grade FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id GROUP BY T2.student_id",
        -3.218562126159668
      ],
      [
        "SELECT T1.name , T1.grade , Count ( * ) FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id GROUP BY T2.liked_id",
        -3.5201690196990967
      ],
      [
        "SELECT T1.name , T1.grade FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id GROUP BY T2.liked_id",
        -4.063495397567749
      ],
      [
        "SELECT name , grade , Count ( * ) FROM Highschooler GROUP BY name",
        -4.487281799316406
      ],
      [
        "SELECT T1.name , T1.grade , Count ( * ) FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.friend_id",
        -4.699726104736328
      ],
      [
        "SELECT T1.name , T1.grade FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.friend_id",
        -5.660309791564941
      ],
      [
        "SELECT name , grade FROM Highschooler GROUP BY grade",
        -5.708004951477051
      ],
      [
        "SELECT name , grade FROM Highschooler GROUP BY ID",
        -6.987400054931641
      ],
      [
        "SELECT T1.grade , Count ( * ) FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id",
        -8.550743579864502
      ],
      [
        "SELECT grade , Count ( * ) FROM Highschooler GROUP BY name",
        -8.715344905853271
      ],
      [
        "SELECT T1.name , Count ( * ) FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id",
        -9.338793754577637
      ],
      [
        "SELECT name , Count ( * ) FROM Highschooler GROUP BY name",
        -9.763890743255615
      ],
      [
        "SELECT name , Count ( * ) FROM Highschooler GROUP BY grade",
        -10.00453519821167
      ],
      [
        "SELECT T1.grade , Count ( * ) FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id GROUP BY T2.student_id",
        -10.03730297088623
      ],
      [
        "SELECT name , grade FROM Highschooler",
        -10.432611465454102
      ],
      [
        "SELECT name FROM Highschooler GROUP BY grade",
        -15.484752655029297
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.name , T1.grade , Count ( * ) FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id",
    "predicted_parse": "SELECT T1.name , T1.grade , Count ( * ) FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id",
    "predicted_parse_explanation": [
      "Step 1: for each row in high schooler table , find the corresponding rows in friend table",
      "Step 2: find each value of student id of the results of step 1 along with the number of the corresponding rows to each value"
    ],
    "template_feedback": "in step 2 , do not return grade .",
    "primary_span": [
      [
        4,
        8
      ]
    ],
    "secondary_span": [],
    "edits": [
      "grade"
    ],
    "edits_original": "< select > remove grade </ select >"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "feedback": "Replace document id , template id and documents table with paragraph id , paragraph text and paragraphs table .",
    "question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.",
    "gold_parse": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'",
    "beam": [
      [
        "SELECT Document_ID , Template_ID FROM Documents WHERE Document_Name = value",
        -0.4465208053588867
      ],
      [
        "SELECT Template_ID , Template_ID FROM Documents WHERE Document_Name = value",
        -1.5555095672607422
      ],
      [
        "SELECT Document_ID , Document_ID FROM Documents WHERE Document_Name = value",
        -2.4243454933166504
      ],
      [
        "SELECT Template_ID , Document_ID FROM Documents WHERE Document_Name = value",
        -3.0268750190734863
      ],
      [
        "SELECT Template_ID , Document_Name FROM Documents WHERE Document_Name = value",
        -5.110461473464966
      ],
      [
        "SELECT Document_ID , Document_Name FROM Documents WHERE Document_Name = value",
        -6.247785568237305
      ],
      [
        "SELECT T1.Document_ID , T2.Paragraph_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Name = value",
        -6.738480567932129
      ],
      [
        "SELECT T2.Document_ID , T1.Date_Effective_To FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Document_Name = value",
        -7.320241928100586
      ],
      [
        "SELECT T1.Template_ID , T2.Paragraph_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Name = value",
        -7.379220485687256
      ],
      [
        "SELECT T2.Paragraph_ID , T1.Template_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Name = value",
        -7.472116947174072
      ],
      [
        "SELECT T2.Template_ID , T1.Date_Effective_To FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Document_Name = value",
        -7.740672588348389
      ],
      [
        "SELECT T1.Template_ID , T2.Document_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Name = value",
        -8.807594776153564
      ],
      [
        "SELECT T1.Document_ID , T2.Document_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Name = value",
        -8.820770263671875
      ],
      [
        "SELECT T2.Paragraph_ID , T1.Document_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Name = value",
        -9.034661769866943
      ],
      [
        "SELECT Template_ID , Document_Description FROM Documents WHERE Document_Name = value",
        -9.935344696044922
      ],
      [
        "SELECT T1.Template_ID , T2.Paragraph_Text FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Name = value",
        -10.153943061828613
      ],
      [
        "SELECT T1.Document_ID , T2.Paragraph_Text FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Name = value",
        -10.403403282165527
      ],
      [
        "SELECT Document_ID , Document_Description FROM Documents WHERE Document_Name = value",
        -10.683219909667969
      ],
      [
        "SELECT T2.Document_ID , T1.Template_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Name = value",
        -11.501360893249512
      ],
      [
        "SELECT Document_ID , Template_ID FROM Documents WHERE Document_Name LIKE value",
        -11.65365219116211
      ]
    ],
    "predicted_parse_with_values": "SELECT Document_ID , Template_ID FROM Documents WHERE Document_Name = \"Welcome to NY\"",
    "predicted_parse": "SELECT Document_ID , Template_ID FROM Documents WHERE Document_Name = value",
    "predicted_parse_explanation": [
      "find the document id and template id in documents table whose document name equals Welcome to NY"
    ],
    "template_feedback": "additionally use the information from the paragraphs table besides the documents table . find paragraph text and paragraph id in place of documents 's document id and template id .",
    "primary_span": [
      [
        0,
        7
      ],
      [
        13,
        18
      ]
    ],
    "secondary_span": [
      [
        8,
        12
      ],
      [
        19,
        29
      ]
    ],
    "edits": [
      "paragraph id",
      "paragraph text",
      "document id",
      "template id",
      "paragraphs"
    ],
    "edits_original": "< select > add paragraph id </ select > < select > add paragraph text </ select > < select > remove document id </ select > < select > remove template id </ select > < from > add paragraphs </ from >"
  },
  {
    "db_id": "dog_kennels",
    "feedback": "You should use the phrase \"state contains North\".",
    "question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.",
    "gold_parse": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'",
    "beam": [
      [
        "SELECT first_name , last_name , email_address FROM Owners WHERE first_name LIKE value",
        -0.15131664276123047
      ],
      [
        "SELECT first_name , last_name , email_address FROM Owners WHERE state LIKE value",
        -2.004854679107666
      ],
      [
        "SELECT T1.first_name , T1.last_name , T1.email_address FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T2.name LIKE value",
        -5.268652439117432
      ],
      [
        "SELECT T1.first_name , T1.last_name , T1.email_address FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id WHERE T3.first_name LIKE value",
        -7.65025520324707
      ],
      [
        "SELECT T1.first_name , T1.last_name , T3.email_address FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id WHERE T1.first_name LIKE value",
        -11.043672561645508
      ],
      [
        "SELECT first_name , last_name , Sum ( email_address ) FROM Owners WHERE first_name LIKE value",
        -11.41359806060791
      ],
      [
        "SELECT first_name , last_name , email_address FROM Owners WHERE email_address LIKE value",
        -11.673532485961914
      ],
      [
        "SELECT T1.first_name , T1.last_name , T1.email_address FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id WHERE T3.state LIKE value",
        -11.738853454589844
      ],
      [
        "SELECT first_name , last_name , Count ( * ) FROM Owners WHERE first_name LIKE value",
        -12.110115051269531
      ],
      [
        "SELECT first_name , last_name , email_address FROM Owners WHERE street LIKE value",
        -12.250104904174805
      ],
      [
        "SELECT first_name , last_name , Min ( email_address ) FROM Owners WHERE first_name LIKE value",
        -12.329121589660645
      ],
      [
        "SELECT first_name , last_name , Max ( email_address ) FROM Owners WHERE first_name LIKE value",
        -12.354243278503418
      ],
      [
        "SELECT first_name , last_name FROM Owners WHERE first_name LIKE value",
        -12.707634925842285
      ],
      [
        "SELECT first_name , last_name , email_address , email_address FROM Owners WHERE first_name LIKE value",
        -12.814414024353027
      ],
      [
        "SELECT first_name , last_name , Count ( email_address ) FROM Owners WHERE first_name LIKE value",
        -12.95417594909668
      ],
      [
        "SELECT first_name , last_name , email_address FROM Owners WHERE state = value",
        -13.089962005615234
      ],
      [
        "SELECT first_name , last_name , email_address FROM Owners WHERE last_name LIKE value",
        -13.112060546875
      ],
      [
        "SELECT T1.first_name , T1.last_name , T3.email_address FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id WHERE T1.state LIKE value",
        -13.123307704925537
      ],
      [
        "SELECT first_name , last_name , email_address FROM Owners WHERE city LIKE value",
        -13.153829574584961
      ],
      [
        "SELECT first_name , last_name , email_address FROM Owners WHERE state IN ( SELECT first_name FROM Owners WHERE first_name LIKE value )",
        -13.276021003723145
      ]
    ],
    "predicted_parse_with_values": "SELECT first_name , last_name , email_address FROM Owners WHERE first_name LIKE \"North\"",
    "predicted_parse": "SELECT first_name , last_name , email_address FROM Owners WHERE first_name LIKE value",
    "predicted_parse_explanation": [
      "find the first name , last name , email address in owners table whose first name like North"
    ],
    "template_feedback": "consider the state like % North % conditions in place of the first name like North conditions .",
    "primary_span": [
      [
        0,
        7
      ]
    ],
    "secondary_span": [
      [
        8,
        17
      ]
    ],
    "edits": [
      "state like \"%North%\"",
      "first name like \"North\""
    ],
    "edits_original": "< where > add state like \" % North % \" </ where > < where > remove first name like \" North \" </ where >"
  },
  {
    "db_id": "student_transcripts_tracking",
    "feedback": "You have to arrange in descending order.",
    "question": "List the section_name in reversed lexicographical order.",
    "gold_parse": "SELECT section_name FROM Sections ORDER BY section_name DESC",
    "beam": [
      [
        "SELECT section_name FROM Sections ORDER BY section_name Asc",
        -0.008470535278320312
      ],
      [
        "SELECT section_name FROM Sections ORDER BY section_name Desc",
        -4.813849449157715
      ],
      [
        "SELECT T2.section_name FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id = T2.course_id ORDER BY T1.course_name Asc",
        -9.418034553527832
      ],
      [
        "SELECT T1.course_name FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id = T2.course_id ORDER BY T2.section_name Asc",
        -11.626513481140137
      ],
      [
        "SELECT section_name FROM Sections WHERE section_name = value ORDER BY section_name Asc",
        -11.987510442733765
      ],
      [
        "SELECT T2.section_name FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = value ORDER BY T2.section_name Asc",
        -12.95945405960083
      ],
      [
        "SELECT section_name FROM Sections UNION SELECT section_name FROM Sections",
        -13.031060218811035
      ],
      [
        "SELECT section_description FROM Sections ORDER BY section_name Asc",
        -13.170793533325195
      ],
      [
        "SELECT T2.section_name FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id = T2.course_id ORDER BY T1.course_name Desc",
        -13.715085983276367
      ],
      [
        "SELECT section_name FROM Sections ORDER BY section_name Asc LIMIT value",
        -13.767220497131348
      ],
      [
        "SELECT DISTINCT section_name FROM Sections ORDER BY section_name Asc",
        -13.861095428466797
      ],
      [
        "SELECT section_name FROM Sections",
        -14.485313415527344
      ],
      [
        "SELECT section_name FROM Sections WHERE section_name = value",
        -14.606838464736938
      ],
      [
        "SELECT section_name FROM Sections GROUP BY section_name ORDER BY Count ( * ) Desc",
        -14.621700286865234
      ],
      [
        "SELECT section_name , section_description FROM Sections ORDER BY section_name Asc",
        -14.700105428695679
      ],
      [
        "SELECT section_name FROM Sections GROUP BY section_name ORDER BY section_name Asc",
        -14.74987506866455
      ],
      [
        "SELECT T2.section_name , T1.course_name FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id = T2.course_id ORDER BY T2.section_name Asc",
        -14.796884655952454
      ],
      [
        "SELECT * FROM Sections ORDER BY section_name Asc",
        -15.314123153686523
      ],
      [
        "SELECT section_name , section_name FROM Sections ORDER BY section_name Asc",
        -15.457999467849731
      ],
      [
        "SELECT section_name FROM Sections ORDER BY section_description Asc",
        -15.525114059448242
      ]
    ],
    "predicted_parse_with_values": "SELECT section_name FROM Sections ORDER BY section_name Asc",
    "predicted_parse": "SELECT section_name FROM Sections ORDER BY section_name Asc",
    "predicted_parse_explanation": [
      "find the section name in sections table ordered ascending by section name"
    ],
    "template_feedback": "order the results descending .",
    "primary_span": [
      [
        0,
        4
      ]
    ],
    "secondary_span": [],
    "edits": [
      "descending"
    ],
    "edits_original": "< orderBy > add descending </ orderBy >"
  },
  {
    "db_id": "network_1",
    "feedback": "From step 1, I want student id of friend table.",
    "question": "Show the names of high schoolers who have at least 3 friends.",
    "gold_parse": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3",
    "beam": [
      [
        "SELECT name FROM Highschooler GROUP BY grade HAVING Count ( * ) > = value",
        -0.4776735305786133
      ],
      [
        "SELECT name FROM Highschooler WHERE grade = value GROUP BY grade HAVING Count ( * ) > = value",
        -2.273556709289551
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id WHERE T1.grade = value GROUP BY T2.student_id HAVING Count ( * ) > = value",
        -2.296273708343506
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id WHERE T1.grade ! = value GROUP BY T2.student_id HAVING Count ( * ) > = value",
        -2.763241767883301
      ],
      [
        "SELECT name FROM Highschooler WHERE grade = value GROUP BY name HAVING Count ( * ) > = value",
        -3.259768486022949
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) > = value",
        -3.2965259552001953
      ],
      [
        "SELECT name FROM Highschooler GROUP BY grade , grade HAVING Count ( * ) > = value",
        -4.095605850219727
      ],
      [
        "SELECT name FROM Highschooler WHERE grade ! = value GROUP BY grade HAVING Count ( * ) > = value",
        -4.461755275726318
      ],
      [
        "SELECT name FROM Highschooler WHERE grade ! = value",
        -5.842658042907715
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id , T1.grade HAVING Count ( * ) > = value",
        -6.172232151031494
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id WHERE T1.grade = value GROUP BY T2.student_id HAVING Count ( * ) > = value",
        -6.7036943435668945
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id WHERE T1.grade ! = value GROUP BY T2.student_id HAVING Count ( * ) > = value",
        -7.16584587097168
      ],
      [
        "SELECT name FROM Highschooler GROUP BY name , grade HAVING Count ( * ) > = value",
        -7.565199375152588
      ],
      [
        "SELECT name FROM Highschooler WHERE grade ! = value GROUP BY name HAVING Count ( * ) > = value",
        -7.679365158081055
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id GROUP BY T2.student_id HAVING Count ( * ) > = value",
        -8.256690979003906
      ],
      [
        "SELECT name FROM Highschooler GROUP BY name HAVING Count ( * ) > = value",
        -8.63559627532959
      ],
      [
        "SELECT T1.grade FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) > = value",
        -8.71817684173584
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T1.grade , T2.student_id HAVING Count ( * ) > = value",
        -8.729227066040039
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id WHERE T1.grade = value GROUP BY T2.liked_id HAVING Count ( * ) > = value",
        -9.446162223815918
      ],
      [
        "SELECT name FROM Highschooler",
        -13.781641006469727
      ]
    ],
    "predicted_parse_with_values": "SELECT name FROM Highschooler GROUP BY grade HAVING Count ( * ) > = 3",
    "predicted_parse": "SELECT name FROM Highschooler GROUP BY grade HAVING Count ( * ) > = value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of grade in high schooler table",
      "Step 2: find the name in high schooler table whose corresponding value in step 1 is greater than or equals 3"
    ],
    "template_feedback": "in step 1 , additionally use the information from the friend table besides the high schooler table . find for value of student id in place of grade .",
    "primary_span": [
      [
        4,
        11
      ],
      [
        18,
        23
      ]
    ],
    "secondary_span": [
      [
        12,
        17
      ],
      [
        24,
        28
      ]
    ],
    "edits": [
      "friend",
      "student id",
      "grade"
    ],
    "edits_original": "< from > add friend </ from > < groupBy > add student id </ groupBy > < groupBy > remove grade </ groupBy >"
  },
  {
    "db_id": "student_transcripts_tracking",
    "feedback": "Ensure Courses' course id is present in student enrolment courses table .",
    "question": "What are all the course names of the courses which ever have students enrolled in?",
    "gold_parse": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id",
    "beam": [
      [
        "SELECT course_name FROM Courses",
        -0.0001678466796875
      ],
      [
        "SELECT course_name FROM Courses GROUP BY course_name HAVING Count ( * ) = value",
        -9.481915473937988
      ],
      [
        "SELECT T1.course_name FROM Courses AS T1 JOIN Degree_Programs AS T2 JOIN Student_Enrolment AS T3 ON T3.degree_program_id = T2.degree_program_id JOIN Student_Enrolment_Courses AS T4 ON T1.course_id = T4.course_id AND T4.student_enrolment_id = T3.student_enrolment_id WHERE T2.degree_summary_name = value",
        -10.347404956817627
      ],
      [
        "SELECT T1.course_name FROM Courses AS T1 INTERSECT SELECT T2.degree_summary_name FROM Degree_Programs AS T2",
        -10.803571701049805
      ],
      [
        "SELECT DISTINCT course_name FROM Courses",
        -11.798978805541992
      ],
      [
        "SELECT course_name FROM Courses EXCEPT SELECT course_name FROM Courses",
        -11.993027687072754
      ],
      [
        "SELECT T1.course_name FROM Courses AS T1 UNION SELECT T2.degree_summary_name FROM Degree_Programs AS T2",
        -12.087889671325684
      ],
      [
        "SELECT degree_summary_name FROM Degree_Programs",
        -13.406664848327637
      ],
      [
        "SELECT T1.course_name , T2.degree_summary_name FROM Courses AS T1 JOIN Degree_Programs AS T2 JOIN Student_Enrolment AS T3 ON T3.degree_program_id = T2.degree_program_id JOIN Student_Enrolment_Courses AS T4 ON T1.course_id = T4.course_id AND T4.student_enrolment_id = T3.student_enrolment_id",
        -13.913840293884277
      ],
      [
        "SELECT T1.course_name FROM Courses AS T1 EXCEPT SELECT T2.degree_summary_name FROM Degree_Programs AS T2",
        -14.139852523803711
      ],
      [
        "SELECT course_name FROM Courses GROUP BY course_name",
        -14.998344421386719
      ],
      [
        "SELECT DISTINCT course_name FROM Courses",
        -15.326258659362793
      ],
      [
        "SELECT course_name FROM Courses ORDER BY course_name Asc LIMIT value",
        -15.363322734832764
      ],
      [
        "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id HAVING Count ( * ) = value",
        -15.569501876831055
      ],
      [
        "SELECT Count ( course_name ) FROM Courses",
        -16.842945098876953
      ],
      [
        "SELECT course_name FROM Courses LIMIT value",
        -17.151599884033203
      ],
      [
        "SELECT Sum ( course_name ) FROM Courses",
        -18.645706176757812
      ],
      [
        "SELECT Min ( course_name ) FROM Courses",
        -18.83502197265625
      ],
      [
        "SELECT Count ( course_name ) FROM Courses",
        -19.147972106933594
      ],
      [
        "SELECT Count ( DISTINCT course_name ) FROM Courses",
        -19.284911632537842
      ]
    ],
    "predicted_parse_with_values": "SELECT course_name FROM Courses",
    "predicted_parse": "SELECT course_name FROM Courses",
    "predicted_parse_explanation": [
      "find the course name in courses table"
    ],
    "template_feedback": "additionally use the information from the student enrolment courses table besides the courses table . make sure no repetition in the results .",
    "primary_span": [
      [
        0,
        9
      ],
      [
        15,
        22
      ]
    ],
    "secondary_span": [
      [
        10,
        14
      ]
    ],
    "edits": [
      "distinct",
      "student enrolment courses"
    ],
    "edits_original": "< select > add distinct </ select > < from > add student enrolment courses </ from >"
  },
  {
    "db_id": "wta_1",
    "feedback": "Look for the rank of greatest loser.",
    "question": "Find the highest rank of losers in all matches.",
    "gold_parse": "SELECT min(loser_rank) FROM matches",
    "beam": [
      [
        "SELECT loser_rank FROM matches",
        -0.4778575897216797
      ],
      [
        "SELECT Min ( winner_rank ) FROM matches",
        -1.4051294326782227
      ],
      [
        "SELECT Min ( loser_rank ) FROM matches",
        -2.283492088317871
      ],
      [
        "SELECT winner_rank FROM matches",
        -4.296749114990234
      ],
      [
        "SELECT Min ( winner_rank_points ) FROM matches",
        -4.991633415222168
      ],
      [
        "SELECT Min ( loser_rank_points ) FROM matches",
        -5.367402076721191
      ],
      [
        "SELECT Max ( winner_rank ) FROM matches",
        -5.851161956787109
      ],
      [
        "SELECT Max ( loser_rank ) FROM matches",
        -7.032398223876953
      ],
      [
        "SELECT score FROM matches",
        -7.103903770446777
      ],
      [
        "SELECT Min ( ranking_points ) FROM rankings",
        -7.609587669372559
      ],
      [
        "SELECT Min ( score ) FROM matches",
        -7.874703407287598
      ],
      [
        "SELECT loser_rank FROM matches ORDER BY loser_rank_points Desc LIMIT value",
        -8.026036262512207
      ],
      [
        "SELECT loser_rank FROM matches ORDER BY loser_rank_points Asc LIMIT value",
        -9.12080192565918
      ],
      [
        "SELECT Max ( winner_rank_points ) FROM matches",
        -9.124406814575195
      ],
      [
        "SELECT loser_rank FROM matches ORDER BY winner_rank_points Desc LIMIT value",
        -9.203003883361816
      ],
      [
        "SELECT Max ( loser_rank_points ) FROM matches",
        -9.649169921875
      ],
      [
        "SELECT winner_rank_points FROM matches",
        -9.751330375671387
      ],
      [
        "SELECT loser_rank_points FROM matches",
        -10.117012977600098
      ],
      [
        "SELECT Min ( ranking ) FROM rankings",
        -11.610823631286621
      ],
      [
        "SELECT Max ( ranking_points ) FROM rankings",
        -12.126309394836426
      ]
    ],
    "predicted_parse_with_values": "SELECT loser_rank FROM matches",
    "predicted_parse": "SELECT loser_rank FROM matches",
    "predicted_parse_explanation": [
      "find the loser rank in matches table"
    ],
    "template_feedback": "find minimum loser rank in place of loser rank .",
    "primary_span": [
      [
        0,
        3
      ]
    ],
    "secondary_span": [
      [
        4,
        9
      ]
    ],
    "edits": [
      "minimum loser rank",
      "loser rank"
    ],
    "edits_original": "< select > add minimum loser rank </ select > < select > remove loser rank </ select >"
  },
  {
    "db_id": "world_1",
    "feedback": "Take name name in place of continent in step 2 and 3.",
    "question": "Give the names of nations that speak both English and French.",
    "gold_parse": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\"",
    "beam": [
      [
        "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value INTERSECT SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value",
        -0.0048465728759765625
      ],
      [
        "SELECT T1.Continent FROM country AS T1 WHERE T1.LocalName = value INTERSECT SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value",
        -6.013842582702637
      ],
      [
        "SELECT T1.Continent FROM country AS T1 WHERE T1.Name = value INTERSECT SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value",
        -6.626216411590576
      ],
      [
        "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value INTERSECT SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value",
        -7.595579147338867
      ],
      [
        "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value",
        -7.826897621154785
      ],
      [
        "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value INTERSECT SELECT T1.LocalName FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value",
        -9.768635749816895
      ],
      [
        "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value INTERSECT SELECT T1.Continent FROM country AS T1 WHERE T1.LocalName = value",
        -10.890157699584961
      ],
      [
        "SELECT T1.Continent FROM country AS T1 WHERE T1.Continent = value INTERSECT SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value",
        -11.011445999145508
      ],
      [
        "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value INTERSECT SELECT T1.Continent FROM country AS T1 WHERE T1.Name = value",
        -11.151046752929688
      ],
      [
        "SELECT T2.Continent FROM sqlite_sequence AS T1 JOIN country AS T2 WHERE T1.name = value INTERSECT SELECT T2.Continent FROM country AS T2 JOIN countrylanguage AS T3 ON T2.Code = T3.CountryCode WHERE T3.Language = value",
        -11.176987648010254
      ],
      [
        "SELECT T1.LocalName FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value INTERSECT SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value",
        -11.226262092590332
      ],
      [
        "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value INTERSECT SELECT T1.Continent FROM sqlite_sequence AS T3 JOIN country AS T1 WHERE T3.name = value",
        -11.944217681884766
      ],
      [
        "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value INTERSECT SELECT T1.GovernmentForm FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value",
        -12.026772499084473
      ],
      [
        "SELECT T1.Name FROM country AS T1 WHERE T1.LocalName = value INTERSECT SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value",
        -13.027971267700195
      ],
      [
        "SELECT T1.Continent FROM country AS T1 WHERE T1.GovernmentForm = value INTERSECT SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value",
        -13.128043174743652
      ],
      [
        "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value",
        -13.488189697265625
      ],
      [
        "SELECT T1.Continent FROM country AS T1 WHERE T1.LocalName = value INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value",
        -14.092168807983398
      ],
      [
        "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value INTERSECT SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language LIKE value",
        -14.290521621704102
      ],
      [
        "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value INTERSECT SELECT T1.Continent FROM country AS T1",
        -14.545845985412598
      ],
      [
        "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value INTERSECT SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Continent HAVING T2.Language = value",
        -14.606847763061523
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" INTERSECT SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"French\"",
    "predicted_parse": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value INTERSECT SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value",
    "predicted_parse_explanation": [
      "Step 1: for each row in country table , find the corresponding rows in countrylanguage table",
      "Step 2: find the continent of the results of step 1 whose language equals English",
      "Step 3: for each row in country table , find the corresponding rows in countrylanguage table",
      "Step 4: find the continent of the results of step 3 whose language equals French",
      "Step 5: show the rows that are in both the results of step 2 and step 4"
    ],
    "template_feedback": "in step 2 , find name in place of continent . in step 4 , find name in place of continent .",
    "primary_span": [
      [
        4,
        5
      ],
      [
        15,
        16
      ]
    ],
    "secondary_span": [
      [
        6,
        10
      ],
      [
        17,
        21
      ]
    ],
    "edits": [
      "name",
      "continent",
      "name",
      "continent"
    ],
    "edits_original": "< select > add name </ select > < select > remove continent </ select > < select > add name </ select > < select > remove continent </ select >"
  },
  {
    "db_id": "world_1",
    "feedback": "Find countrylanguage's language which are used most number of times for continent equals Asia .",
    "question": "What is the language that is used by the largest number of Asian nations?",
    "gold_parse": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1",
    "beam": [
      [
        "SELECT Name FROM country WHERE Continent = value ORDER BY Population Desc LIMIT value",
        -0.3811049461364746
      ],
      [
        "SELECT Name FROM country WHERE Continent = value ORDER BY LifeExpectancy Desc LIMIT value",
        -2.0537848472595215
      ],
      [
        "SELECT T2.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = value ORDER BY T1.Population Desc LIMIT value",
        -2.2381606101989746
      ],
      [
        "SELECT Name FROM country WHERE Continent = value ORDER BY * Desc LIMIT value",
        -2.9883270263671875
      ],
      [
        "SELECT Name FROM country WHERE Continent = value ORDER BY Continent Desc LIMIT value",
        -4.592125415802002
      ],
      [
        "SELECT LocalName FROM country WHERE Continent = value ORDER BY Population Desc LIMIT value",
        -4.973635673522949
      ],
      [
        "SELECT Name FROM country WHERE Continent = value ORDER BY SurfaceArea Desc LIMIT value",
        -6.1505327224731445
      ],
      [
        "SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = value ORDER BY T2.Population Desc LIMIT value",
        -6.222093105316162
      ],
      [
        "SELECT Name FROM country WHERE Continent = value ORDER BY GNPOld Desc LIMIT value",
        -6.516472339630127
      ],
      [
        "SELECT LocalName FROM country WHERE Continent = value ORDER BY LifeExpectancy Desc LIMIT value",
        -6.647587776184082
      ],
      [
        "SELECT T2.LocalName FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = value ORDER BY T1.Population Desc LIMIT value",
        -6.824862957000732
      ],
      [
        "SELECT T1.name FROM sqlite_sequence AS T1 JOIN country AS T2 WHERE T2.Continent = value ORDER BY T2.Population Desc LIMIT value",
        -7.131572246551514
      ],
      [
        "SELECT Name FROM country WHERE Continent = value ORDER BY LocalName Desc LIMIT value",
        -7.215455532073975
      ],
      [
        "SELECT Name FROM country WHERE Continent = value ORDER BY Capital Desc LIMIT value",
        -7.487022399902344
      ],
      [
        "SELECT Code2 FROM country WHERE Continent = value ORDER BY Population Desc LIMIT value",
        -7.493592262268066
      ],
      [
        "SELECT Name FROM country WHERE Continent = value",
        -8.353987693786621
      ],
      [
        "SELECT Name FROM country ORDER BY Population Desc LIMIT value",
        -9.16965389251709
      ],
      [
        "SELECT Name FROM country ORDER BY LifeExpectancy Desc LIMIT value",
        -10.490880012512207
      ],
      [
        "SELECT Name FROM country ORDER BY Continent Desc LIMIT value",
        -10.74806022644043
      ],
      [
        "SELECT T2.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code ORDER BY T1.Population Desc LIMIT value",
        -12.198727130889893
      ]
    ],
    "predicted_parse_with_values": "SELECT Name FROM country WHERE Continent = \"Asia\" ORDER BY Population Desc LIMIT 1",
    "predicted_parse": "SELECT Name FROM country WHERE Continent = value ORDER BY Population Desc LIMIT value",
    "predicted_parse_explanation": [
      "find the name in country table whose continent equals Asia with largest value of population"
    ],
    "template_feedback": "additionally use the information from the countrylanguage table besides the country table . find for each value of language . find language in place of name . order the results by number of rows in place of population .",
    "primary_span": [
      [
        0,
        7
      ],
      [
        13,
        19
      ],
      [
        20,
        21
      ],
      [
        27,
        33
      ]
    ],
    "secondary_span": [
      [
        8,
        12
      ],
      [
        22,
        26
      ],
      [
        34,
        38
      ]
    ],
    "edits": [
      "language",
      "name",
      "countrylanguage",
      "language",
      "number of rows",
      "population"
    ],
    "edits_original": "< select > add language </ select > < select > remove name </ select > < from > add countrylanguage </ from > < groupBy > add language </ groupBy > < orderBy > add number of rows </ orderBy > < orderBy > remove population </ orderBy >"
  },
  {
    "db_id": "dog_kennels",
    "feedback": "Find date departed , date arrived of dogs table which Dogs's dog id present in Treatments's dog id .",
    "question": "Find the arriving date and the departing date of the dogs that received a treatment.",
    "gold_parse": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id",
    "beam": [
      [
        "SELECT date_departed , date_of_birth FROM Dogs WHERE gender = value",
        -0.7836947441101074
      ],
      [
        "SELECT date_departed , date_of_birth FROM Dogs WHERE weight = value",
        -1.4615368843078613
      ],
      [
        "SELECT date_departed , date_adopted FROM Dogs WHERE gender = value",
        -2.360950469970703
      ],
      [
        "SELECT date_departed , date_arrived FROM Dogs WHERE gender = value",
        -2.5469894409179688
      ],
      [
        "SELECT date_departed , date_adopted FROM Dogs WHERE weight = value",
        -3.066904067993164
      ],
      [
        "SELECT date_departed , date_arrived FROM Dogs WHERE weight = value",
        -3.3858799934387207
      ],
      [
        "SELECT date_departed , date_of_birth FROM Dogs",
        -4.158562660217285
      ],
      [
        "SELECT date_departed , date_departed FROM Dogs WHERE gender = value",
        -4.653384685516357
      ],
      [
        "SELECT date_departed , date_of_birth FROM Dogs WHERE name = value",
        -5.072860240936279
      ],
      [
        "SELECT date_arrived , date_of_birth FROM Dogs WHERE gender = value",
        -5.482668876647949
      ],
      [
        "SELECT date_departed , date_departed FROM Dogs WHERE weight = value",
        -5.7654643058776855
      ],
      [
        "SELECT date_departed , date_adopted FROM Dogs",
        -5.859742164611816
      ],
      [
        "SELECT date_arrived , date_of_birth FROM Dogs WHERE weight = value",
        -6.246511459350586
      ],
      [
        "SELECT date_departed , date_arrived FROM Dogs",
        -6.368268966674805
      ],
      [
        "SELECT date_departed , date_of_birth FROM Dogs WHERE breed_code = value",
        -6.5279154777526855
      ],
      [
        "SELECT date_departed , date_adopted FROM Dogs WHERE name = value",
        -6.6515960693359375
      ],
      [
        "SELECT date_departed , date_arrived FROM Dogs WHERE name = value",
        -6.855006694793701
      ],
      [
        "SELECT date_arrived , date_adopted FROM Dogs WHERE gender = value",
        -6.912007808685303
      ],
      [
        "SELECT date_departed , date_departed FROM Dogs",
        -8.374140739440918
      ],
      [
        "SELECT date_arrived , date_of_birth FROM Dogs",
        -8.941642761230469
      ]
    ],
    "predicted_parse_with_values": "SELECT date_departed , date_of_birth FROM Dogs WHERE gender = 1",
    "predicted_parse": "SELECT date_departed , date_of_birth FROM Dogs WHERE gender = value",
    "predicted_parse_explanation": [
      "find the date departed and date of birth in dogs table whose gender equals 1"
    ],
    "template_feedback": "additionally use the information from the treatments table besides the dogs table . remove the gender equals 1 conditions . find date arrived in place of date of birth . make sure no repetition in the results .",
    "primary_span": [
      [
        0,
        7
      ],
      [
        13,
        19
      ],
      [
        20,
        22
      ],
      [
        30,
        37
      ]
    ],
    "secondary_span": [
      [
        8,
        12
      ],
      [
        23,
        29
      ]
    ],
    "edits": [
      "distinct",
      "date arrived",
      "date of birth",
      "treatments",
      "gender equals 1"
    ],
    "edits_original": "< select > add distinct </ select > < select > add date arrived </ select > < select > remove date of birth </ select > < from > add treatments </ from > < where > remove gender equals 1 </ where >"
  },
  {
    "db_id": "dog_kennels",
    "feedback": "Supersede date adopted with date of treatment in step 2.",
    "question": "List the date of each treatment, together with the first name of the professional who operated it.",
    "gold_parse": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id",
    "beam": [
      [
        "SELECT T1.date_adopted , T2.first_name FROM Dogs AS T1 JOIN Professionals AS T2 JOIN Treatments AS T3 ON T1.dog_id = T3.dog_id AND T3.professional_id = T2.professional_id",
        -0.3169670104980469
      ],
      [
        "SELECT T1.date_of_birth , T2.first_name FROM Dogs AS T1 JOIN Professionals AS T2 JOIN Treatments AS T3 ON T1.dog_id = T3.dog_id AND T3.professional_id = T2.professional_id",
        -1.7130632400512695
      ],
      [
        "SELECT T1.name , T2.first_name FROM Dogs AS T1 JOIN Professionals AS T2 JOIN Treatments AS T3 ON T1.dog_id = T3.dog_id AND T3.professional_id = T2.professional_id",
        -3.6538143157958984
      ],
      [
        "SELECT first_name , first_name FROM Professionals",
        -3.7680296897888184
      ],
      [
        "SELECT T1.date_departed , T2.first_name FROM Dogs AS T1 JOIN Professionals AS T2 JOIN Treatments AS T3 ON T1.dog_id = T3.dog_id AND T3.professional_id = T2.professional_id",
        -3.9778804779052734
      ],
      [
        "SELECT T2.date_of_treatment , T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id",
        -4.747243404388428
      ],
      [
        "SELECT T1.date_arrived , T2.first_name FROM Dogs AS T1 JOIN Professionals AS T2 JOIN Treatments AS T3 ON T1.dog_id = T3.dog_id AND T3.professional_id = T2.professional_id",
        -4.830506801605225
      ],
      [
        "SELECT T1.first_name , T3.first_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id",
        -5.376775741577148
      ],
      [
        "SELECT T2.date_adopted , T1.first_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id",
        -6.529693603515625
      ],
      [
        "SELECT T2.date_of_birth , T1.first_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id",
        -7.707141399383545
      ],
      [
        "SELECT T3.first_name , T1.first_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id",
        -9.605577945709229
      ],
      [
        "SELECT T2.date_departed , T1.first_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id",
        -9.95694351196289
      ],
      [
        "SELECT T2.name , T1.first_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id",
        -10.334365367889404
      ],
      [
        "SELECT date_adopted , name FROM Dogs",
        -10.603153228759766
      ],
      [
        "SELECT T1.treatment_type_description , T2.first_name FROM Treatment_Types AS T1 JOIN Professionals AS T2 JOIN Treatments AS T3 ON T1.treatment_type_code = T3.treatment_type_code AND T3.professional_id = T2.professional_id",
        -10.603715896606445
      ],
      [
        "SELECT date_adopted , date_of_birth FROM Dogs",
        -10.643270492553711
      ],
      [
        "SELECT T3.date_of_treatment , T1.first_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id",
        -10.809152603149414
      ],
      [
        "SELECT T2.date_arrived , T1.first_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id",
        -10.926778793334961
      ],
      [
        "SELECT first_name , first_name FROM Owners",
        -11.237151622772217
      ],
      [
        "SELECT date_of_birth , date_of_birth FROM Dogs",
        -11.350351333618164
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.date_adopted , T2.first_name FROM Dogs AS T1 JOIN Professionals AS T2 JOIN Treatments AS T3 ON T1.dog_id = T3.dog_id AND T3.professional_id = T2.professional_id",
    "predicted_parse": "SELECT T1.date_adopted , T2.first_name FROM Dogs AS T1 JOIN Professionals AS T2 JOIN Treatments AS T3 ON T1.dog_id = T3.dog_id AND T3.professional_id = T2.professional_id",
    "predicted_parse_explanation": [
      "Step 1: for each row in dogs table , find the corresponding rows in professionals table and in treatments table",
      "Step 2: find the date adopted and first name of the results of step 1"
    ],
    "template_feedback": "in step 1 , do not use the dogs table . in step 2 , find date of treatment in place of date adopted .",
    "primary_span": [
      [
        4,
        10
      ],
      [
        15,
        18
      ]
    ],
    "secondary_span": [
      [
        4,
        10
      ],
      [
        19,
        24
      ]
    ],
    "edits": [
      "date of treatment",
      "date adopted",
      "dogs"
    ],
    "edits_original": "< select > add date of treatment </ select > < select > remove date adopted </ select > < from > remove dogs </ from >"
  },
  {
    "db_id": "wta_1",
    "feedback": "In step 2, you have to use sum of winner rank points.",
    "question": "What is the name of the winner who has won the most matches, and how many rank points does this player have?",
    "gold_parse": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1",
    "beam": [
      [
        "SELECT winner_name , loser_rank FROM matches GROUP BY winner_name ORDER BY Count ( * ) Desc LIMIT value",
        -0.6784086227416992
      ],
      [
        "SELECT tourney_name , loser_rank FROM matches GROUP BY winner_name ORDER BY Count ( * ) Desc LIMIT value",
        -1.200052261352539
      ],
      [
        "SELECT winner_name , winner_rank FROM matches GROUP BY winner_name ORDER BY Count ( * ) Desc LIMIT value",
        -2.9619855880737305
      ],
      [
        "SELECT tourney_name , winner_rank FROM matches GROUP BY winner_name ORDER BY Count ( * ) Desc LIMIT value",
        -3.0311031341552734
      ],
      [
        "SELECT loser_name , loser_rank FROM matches GROUP BY winner_name ORDER BY Count ( * ) Desc LIMIT value",
        -3.4714832305908203
      ],
      [
        "SELECT T2.tourney_name , T3.ranking FROM players AS T1 JOIN matches AS T2 ON T2.loser_id = T1.player_id JOIN rankings AS T3 ON T1.player_id = T3.player_id GROUP BY T2.winner_name ORDER BY Count ( * ) Desc LIMIT value",
        -4.018644332885742
      ],
      [
        "SELECT T2.winner_name , T3.ranking FROM players AS T1 JOIN matches AS T2 ON T2.loser_id = T1.player_id JOIN rankings AS T3 ON T1.player_id = T3.player_id GROUP BY T2.winner_name ORDER BY Count ( * ) Desc LIMIT value",
        -4.064288139343262
      ],
      [
        "SELECT winner_name , loser_rank FROM matches GROUP BY tourney_id ORDER BY Count ( * ) Desc LIMIT value",
        -5.195529937744141
      ],
      [
        "SELECT loser_name , winner_rank FROM matches GROUP BY winner_name ORDER BY Count ( * ) Desc LIMIT value",
        -5.308921813964844
      ],
      [
        "SELECT tourney_name , loser_rank FROM matches GROUP BY tourney_id ORDER BY Count ( * ) Desc LIMIT value",
        -5.665252685546875
      ],
      [
        "SELECT T2.loser_name , T3.ranking FROM players AS T1 JOIN matches AS T2 ON T2.loser_id = T1.player_id JOIN rankings AS T3 ON T1.player_id = T3.player_id GROUP BY T2.winner_name ORDER BY Count ( * ) Desc LIMIT value",
        -6.283416748046875
      ],
      [
        "SELECT winner_name , loser_rank FROM matches GROUP BY winner_id ORDER BY Count ( * ) Desc LIMIT value",
        -6.588784217834473
      ],
      [
        "SELECT T2.winner_name , T2.loser_rank FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T1.first_name ORDER BY Count ( * ) Desc LIMIT value",
        -6.72955322265625
      ],
      [
        "SELECT tourney_name , loser_rank FROM matches GROUP BY winner_id ORDER BY Count ( * ) Desc LIMIT value",
        -7.04534912109375
      ],
      [
        "SELECT T2.tourney_name , T2.loser_rank FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T1.first_name ORDER BY Count ( * ) Desc LIMIT value",
        -7.2237396240234375
      ],
      [
        "SELECT T2.winner_name , T2.loser_rank FROM players AS T1 JOIN matches AS T2 ON T2.loser_id = T1.player_id JOIN rankings AS T3 ON T1.player_id = T3.player_id GROUP BY T3.player_id ORDER BY Count ( * ) Desc LIMIT value",
        -7.259176254272461
      ],
      [
        "SELECT winner_name , winner_rank FROM matches GROUP BY tourney_id ORDER BY Count ( * ) Desc LIMIT value",
        -7.427984237670898
      ],
      [
        "SELECT tourney_name , winner_rank FROM matches GROUP BY tourney_id ORDER BY Count ( * ) Desc LIMIT value",
        -7.4713544845581055
      ],
      [
        "SELECT T2.tourney_name , T2.loser_rank FROM players AS T1 JOIN matches AS T2 ON T2.loser_id = T1.player_id JOIN rankings AS T3 ON T1.player_id = T3.player_id GROUP BY T3.player_id ORDER BY Count ( * ) Desc LIMIT value",
        -7.708218574523926
      ],
      [
        "SELECT loser_name , loser_rank FROM matches GROUP BY tourney_id ORDER BY Count ( * ) Desc LIMIT value",
        -7.935791969299316
      ]
    ],
    "predicted_parse_with_values": "SELECT winner_name , loser_rank FROM matches GROUP BY winner_name ORDER BY Count ( * ) Desc LIMIT 1",
    "predicted_parse": "SELECT winner_name , loser_rank FROM matches GROUP BY winner_name ORDER BY Count ( * ) Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of winner name in matches table",
      "Step 2: find the winner name and loser rank in matches table with largest value in the results of step 1"
    ],
    "template_feedback": "in step 2 , find winner rank points in place of loser rank .",
    "primary_span": [
      [
        4,
        7
      ]
    ],
    "secondary_span": [
      [
        8,
        13
      ]
    ],
    "edits": [
      "winner rank points",
      "loser rank"
    ],
    "edits_original": "< select > add winner rank points </ select > < select > remove loser rank </ select >"
  },
  {
    "db_id": "flight_2",
    "feedback": "exchange airports table with flights and ensure that destination airport code corresponds to city equals Aberdeen .",
    "question": "How many flights arriving in Aberdeen city?",
    "gold_parse": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
    "beam": [
      [
        "SELECT Count ( * ) FROM airports WHERE City = value",
        -0.17866039276123047
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE AirportName = value",
        -1.8158988952636719
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE AirportName = value AND City = value",
        -7.010649681091309
      ],
      [
        "SELECT Count ( * ) FROM flights AS T1 WHERE T1.DestAirport IN ( SELECT T2.AirportCode FROM airports AS T2 WHERE T2.City = value )",
        -12.49488878250122
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE Country = value",
        -13.38514232635498
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE City = value AND City = value",
        -13.6946382522583
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM airports WHERE City = value",
        -14.268184661865234
      ],
      [
        "SELECT Avg ( * ) FROM airports WHERE City = value",
        -14.850717067718506
      ],
      [
        "SELECT Count ( * ) FROM flights WHERE DestAirport = value",
        -15.101811408996582
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE City > value",
        -15.332030773162842
      ],
      [
        "SELECT * FROM airports WHERE City = value",
        -15.50903034210205
      ],
      [
        "SELECT Sum ( * ) FROM airports WHERE City = value",
        -15.685982704162598
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE AirportName LIKE value",
        -15.831204414367676
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE City LIKE value",
        -15.937514305114746
      ],
      [
        "SELECT Count ( * ) , * FROM airports WHERE City = value",
        -15.989006638526917
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE CountryAbbrev = value",
        -16.00426959991455
      ],
      [
        "SELECT Count ( * ) , AirportName FROM airports WHERE City = value",
        -16.010653614997864
      ],
      [
        "SELECT Count ( Count ( * ) ) FROM airports WHERE City = value",
        -16.02690601348877
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM airports WHERE AirportName = value",
        -16.124481201171875
      ],
      [
        "SELECT Count ( * ) FROM airlines",
        -18.58514404296875
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM airports WHERE City = \"Aberdeen\"",
    "predicted_parse": "SELECT Count ( * ) FROM airports WHERE City = value",
    "predicted_parse_explanation": [
      "find the number of rows in airports table whose city equals Aberdeen"
    ],
    "template_feedback": "additionally use the information from the flights table besides the airports table .",
    "primary_span": [
      [
        0,
        7
      ]
    ],
    "secondary_span": [
      [
        8,
        12
      ]
    ],
    "edits": [
      "flights"
    ],
    "edits_original": "< from > add flights </ from >"
  },
  {
    "db_id": "wta_1",
    "feedback": "In step 1 Substitute matches with rankings , In step 2 substitute winner rank with ranking .",
    "question": "Find the average ranking for each player and their first name.",
    "gold_parse": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
    "beam": [
      [
        "SELECT Avg ( T2.winner_rank ) , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T1.first_name",
        -0.20597362518310547
      ],
      [
        "SELECT Avg ( T2.winner_rank_points ) , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T1.first_name",
        -2.68294620513916
      ],
      [
        "SELECT Avg ( T2.loser_rank_points ) , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T1.first_name",
        -3.609980583190918
      ],
      [
        "SELECT Avg ( T2.loser_rank ) , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T1.first_name",
        -3.6889772415161133
      ],
      [
        "SELECT Avg ( T2.winner_rank ) , T2.winner_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T1.first_name",
        -4.338933944702148
      ],
      [
        "SELECT Avg ( T2.score ) , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T1.first_name",
        -4.340102195739746
      ],
      [
        "SELECT Avg ( T2.winner_rank ) , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.winner_name",
        -4.437554359436035
      ],
      [
        "SELECT Avg ( T2.winner_rank ) , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.loser_name",
        -5.01036262512207
      ],
      [
        "SELECT Avg ( T2.winner_rank ) , T2.loser_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T1.first_name",
        -5.120253562927246
      ],
      [
        "SELECT Avg ( T2.ranking_points ) , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name",
        -5.790083885192871
      ],
      [
        "SELECT Avg ( T2.winner_rank ) , T2.tourney_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T1.first_name",
        -6.415109634399414
      ],
      [
        "SELECT Avg ( T2.winner_rank_points ) , T2.winner_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T1.first_name",
        -6.519464492797852
      ],
      [
        "SELECT Avg ( T2.ranking ) , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name",
        -6.612643241882324
      ],
      [
        "SELECT Avg ( T2.winner_rank_points ) , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.winner_name",
        -6.889073371887207
      ],
      [
        "SELECT Avg ( T2.winner_rank_points ) , T2.loser_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T1.first_name",
        -7.3004150390625
      ],
      [
        "SELECT Avg ( T2.winner_rank ) , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.tourney_name",
        -7.342477798461914
      ],
      [
        "SELECT Avg ( T2.winner_rank_points ) , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.loser_name",
        -7.475555896759033
      ],
      [
        "SELECT Avg ( T2.loser_rank ) , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.winner_name",
        -7.756518363952637
      ],
      [
        "SELECT Avg ( T2.loser_rank_points ) , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.winner_name",
        -7.900909423828125
      ],
      [
        "SELECT T1.first_name , Avg ( T2.winner_rank_points ) FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T1.first_name",
        -7.926630020141602
      ]
    ],
    "predicted_parse_with_values": "SELECT Avg ( T2.winner_rank ) , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T1.first_name",
    "predicted_parse": "SELECT Avg ( T2.winner_rank ) , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T1.first_name",
    "predicted_parse_explanation": [
      "Step 1: for each row in players table , find the corresponding rows in matches table",
      "Step 2: find each value of first name of the results of step 1 along with the average winner rank of the corresponding rows to each value"
    ],
    "template_feedback": "in step 1 , use rankings table in place of matches table in step 2 , find average ranking in place of average winner rank .",
    "primary_span": [
      [
        4,
        6
      ],
      [
        16,
        18
      ]
    ],
    "secondary_span": [
      [
        7,
        11
      ],
      [
        19,
        25
      ]
    ],
    "edits": [
      "average ranking",
      "average winner rank",
      "rankings",
      "matches"
    ],
    "edits_original": "< select > add average ranking </ select > < select > remove average winner rank </ select > < from > add rankings </ from > < from > remove matches </ from >"
  },
  {
    "db_id": "world_1",
    "feedback": "use name instead of continent in step 2 and 3.",
    "question": "What are the names of nations speak both English and French?",
    "gold_parse": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\"",
    "beam": [
      [
        "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value INTERSECT SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value",
        -0.016651153564453125
      ],
      [
        "SELECT T1.Continent FROM country AS T1 WHERE T1.LocalName = value INTERSECT SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value",
        -4.577672958374023
      ],
      [
        "SELECT T1.Continent FROM country AS T1 WHERE T1.Name = value INTERSECT SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value",
        -5.827263832092285
      ],
      [
        "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value INTERSECT SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value",
        -6.651250839233398
      ],
      [
        "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value",
        -7.018172264099121
      ],
      [
        "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value INTERSECT SELECT T1.LocalName FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value",
        -7.87801456451416
      ],
      [
        "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value INTERSECT SELECT T1.Continent FROM country AS T1 WHERE T1.LocalName = value",
        -8.360501289367676
      ],
      [
        "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value INTERSECT SELECT T1.Continent FROM country AS T1 WHERE T1.Name = value",
        -8.857224464416504
      ],
      [
        "SELECT T1.Continent FROM country AS T1 WHERE T1.Continent = value INTERSECT SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value",
        -9.15617561340332
      ],
      [
        "SELECT T1.LocalName FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value INTERSECT SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value",
        -9.196281433105469
      ],
      [
        "SELECT T1.Name FROM country AS T1 WHERE T1.LocalName = value INTERSECT SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value",
        -10.242851257324219
      ],
      [
        "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value INTERSECT SELECT T1.Continent FROM sqlite_sequence AS T3 JOIN country AS T1 WHERE T3.name = value",
        -10.324667930603027
      ],
      [
        "SELECT T2.Continent FROM sqlite_sequence AS T1 JOIN country AS T2 WHERE T1.name = value INTERSECT SELECT T2.Continent FROM country AS T2 JOIN countrylanguage AS T3 ON T2.Code = T3.CountryCode WHERE T3.Language = value",
        -10.91317367553711
      ],
      [
        "SELECT T1.Continent FROM country AS T1 WHERE T1.LocalName = value INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value",
        -11.856921195983887
      ],
      [
        "SELECT T1.Name FROM country AS T1 WHERE T1.Name = value INTERSECT SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value",
        -12.303497314453125
      ],
      [
        "SELECT T1.Continent FROM country AS T1 WHERE T1.LocalName = value INTERSECT SELECT T1.LocalName FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value",
        -12.688627243041992
      ],
      [
        "SELECT T1.Continent FROM country AS T1 WHERE T1.Name = value INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value",
        -13.057838439941406
      ],
      [
        "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value INTERSECT SELECT T1.GovernmentForm FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value",
        -13.077319145202637
      ],
      [
        "SELECT Continent FROM country WHERE LocalName = value INTERSECT SELECT Continent FROM country WHERE LocalName = value",
        -13.080828666687012
      ],
      [
        "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value",
        -13.167791366577148
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" INTERSECT SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"French\"",
    "predicted_parse": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value INTERSECT SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value",
    "predicted_parse_explanation": [
      "Step 1: for each row in country table , find the corresponding rows in countrylanguage table",
      "Step 2: find the continent of the results of step 1 whose language equals English",
      "Step 3: for each row in country table , find the corresponding rows in countrylanguage table",
      "Step 4: find the continent of the results of step 3 whose language equals French",
      "Step 5: show the rows that are in both the results of step 2 and step 4"
    ],
    "template_feedback": "in step 2 , find name in place of continent . in step 4 , find name in place of continent .",
    "primary_span": [
      [
        4,
        5
      ],
      [
        15,
        16
      ]
    ],
    "secondary_span": [
      [
        6,
        10
      ],
      [
        17,
        21
      ]
    ],
    "edits": [
      "name",
      "continent",
      "name",
      "continent"
    ],
    "edits_original": "< select > add name </ select > < select > remove continent </ select > < select > add name </ select > < select > remove continent </ select >"
  },
  {
    "db_id": "flight_2",
    "feedback": "You need to utilize table of flights rather than table of airports.",
    "question": "Find the number of flights landing in the city of Aberdeen or Abilene.",
    "gold_parse": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"",
    "beam": [
      [
        "SELECT Count ( * ) FROM airports WHERE City = value OR City = value",
        -0.0553436279296875
      ],
      [
        "SELECT Count ( * ) FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T2.DestAirport IN ( SELECT T1.AirportCode FROM airports AS T1 WHERE T1.City = value OR T1.City = value ) AND T1.City < = value",
        -4.220955848693848
      ],
      [
        "SELECT Count ( * ) FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T2.DestAirport IN ( SELECT T1.AirportCode FROM airports AS T1 WHERE T1.City = value OR T1.City = value ) AND T1.AirportName < = value",
        -4.233872413635254
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE AirportName = value OR City = value",
        -4.67692756652832
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE City = value OR AirportName = value",
        -5.370595932006836
      ],
      [
        "SELECT Count ( * ) FROM flights AS T1 WHERE T1.DestAirport IN ( SELECT T2.AirportCode FROM airports AS T2 WHERE T2.City = value OR T2.City = value ) AND T1.DestAirport IN ( SELECT T2.AirportCode FROM airports AS T2 WHERE T2.City = value OR T2.City = value )",
        -5.424668312072754
      ],
      [
        "SELECT Count ( * ) FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T2.DestAirport IN ( SELECT T1.AirportCode FROM airports AS T1 WHERE T1.City = value OR T1.City = value ) AND T1.City = value OR T1.City = value",
        -6.974884986877441
      ],
      [
        "SELECT Count ( * ) FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T2.DestAirport IN ( SELECT T1.AirportCode FROM airports AS T1 WHERE T1.City = value OR T1.City = value ) AND T1.City = value",
        -7.172680854797363
      ],
      [
        "SELECT Count ( * ) FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T2.DestAirport = value OR T1.City = value",
        -7.769776344299316
      ],
      [
        "SELECT T2.FlightNo FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.City = value OR T1.City = value",
        -8.521893501281738
      ],
      [
        "SELECT Count ( DISTINCT T2.FlightNo ) FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.City = value OR T1.City = value",
        -9.376834869384766
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE Country = value OR City = value",
        -9.754429817199707
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE AirportName = value OR AirportName = value",
        -10.276062965393066
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE City = value OR Country = value",
        -10.713258743286133
      ],
      [
        "SELECT Count ( * ) FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T2.DestAirport IN value AND T1.City = value",
        -10.8643798828125
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE AirportName = value AND City = value",
        -11.613493919372559
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE City = value OR CountryAbbrev = value",
        -11.751363754272461
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE City ! = value OR City = value",
        -11.843978881835938
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE CountryAbbrev = value OR City = value",
        -12.203741073608398
      ],
      [
        "SELECT Count ( * ) FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T2.FlightNo > value AND T1.City = value",
        -12.204415798187256
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM airports WHERE City = \"Abilene\" OR City = \"Aberdeen\"",
    "predicted_parse": "SELECT Count ( * ) FROM airports WHERE City = value OR City = value",
    "predicted_parse_explanation": [
      "find the number of rows in airports table whose city equals Abilene or city equals Aberdeen"
    ],
    "template_feedback": "additionally use the information from the flights table besides the airports table .",
    "primary_span": [
      [
        0,
        7
      ]
    ],
    "secondary_span": [
      [
        8,
        12
      ]
    ],
    "edits": [
      "flights",
      "city equals \"Aberdeen\" or city equals \"Abilene\"",
      "city equals \"Abilene\" or city equals \"Aberdeen\""
    ],
    "edits_original": "< from > add flights </ from > < where > add city equals \" Aberdeen \" or city equals \" Abilene \" </ where > < where > remove city equals \" Abilene \" or city equals \" Aberdeen \" </ where >"
  },
  {
    "db_id": "car_1",
    "feedback": "i want the number of rows of model list along with full name for each model corresponding to each id of car makers.",
    "question": "What is the number of car models that are produced by each maker and what is the id and full name of each maker?",
    "gold_parse": "SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id",
    "beam": [
      [
        "SELECT T2.ModelId , T1.FullName , Count ( * ) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id",
        -1.1215195655822754
      ],
      [
        "SELECT Id , FullName , Count ( * ) FROM car_makers GROUP BY Id",
        -1.2936666011810303
      ],
      [
        "SELECT Count ( * ) , FullName , Count ( * ) FROM car_makers GROUP BY Id",
        -2.351243019104004
      ],
      [
        "SELECT T2.ModelId , T1.FullName , Count ( * ) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T2.Maker",
        -2.8459699153900146
      ],
      [
        "SELECT T2.ModelId , T1.FullName , Count ( * ) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T2.ModelId",
        -2.858597755432129
      ],
      [
        "SELECT T1.Id , T1.FullName , Count ( * ) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T2.Maker",
        -3.004483222961426
      ],
      [
        "SELECT T1.Id , T1.FullName , Count ( * ) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T2.ModelId",
        -3.0240890979766846
      ],
      [
        "SELECT T3.MakeId , T1.FullName , Count ( * ) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model GROUP BY T1.Id",
        -4.254643678665161
      ],
      [
        "SELECT Count ( * ) , T1.FullName , Count ( * ) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T2.ModelId",
        -4.273103713989258
      ],
      [
        "SELECT Count ( * ) , T1.FullName , Count ( * ) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T2.Maker",
        -4.427269697189331
      ],
      [
        "SELECT T2.ModelId , T1.FullName , Count ( * ) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker AND T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id GROUP BY T4.Id",
        -4.651842355728149
      ],
      [
        "SELECT T1.Id , T1.FullName , Count ( * ) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id GROUP BY T4.Id",
        -4.82069993019104
      ],
      [
        "SELECT T2.Maker , T1.FullName , Count ( * ) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id",
        -5.392707347869873
      ],
      [
        "SELECT Count ( * ) , T1.FullName , Count ( * ) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id GROUP BY T4.Id",
        -5.760804176330566
      ],
      [
        "SELECT T2.Model , T1.FullName , Count ( * ) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id",
        -5.790304899215698
      ],
      [
        "SELECT T3.MakeId , T1.FullName , Count ( * ) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker AND T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model GROUP BY T2.Maker",
        -5.969273567199707
      ],
      [
        "SELECT T3.MakeId , T1.FullName , Count ( * ) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker AND T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model GROUP BY T2.ModelId",
        -5.986924648284912
      ],
      [
        "SELECT T2.ModelId , T1.FullName , Count ( * ) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker AND T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model GROUP BY T3.MakeId",
        -6.32534122467041
      ],
      [
        "SELECT T1.Id , T1.FullName , Count ( * ) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model GROUP BY T3.MakeId",
        -6.492628574371338
      ],
      [
        "SELECT Maker , FullName , Count ( * ) FROM car_makers GROUP BY Id",
        -6.963478088378906
      ]
    ],
    "predicted_parse_with_values": "SELECT T2.ModelId , T1.FullName , Count ( * ) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id",
    "predicted_parse": "SELECT T2.ModelId , T1.FullName , Count ( * ) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id",
    "predicted_parse_explanation": [
      "Step 1: for each row in car makers table , find the corresponding rows in model list table",
      "Step 2: find each value of id of the results of step 1 along with the number of the corresponding rows to each value"
    ],
    "template_feedback": "in step 2 , find id in place of model id .",
    "primary_span": [
      [
        4,
        5
      ]
    ],
    "secondary_span": [
      [
        6,
        11
      ]
    ],
    "edits": [
      "id",
      "model id"
    ],
    "edits_original": "< select > add id </ select > < select > remove model id </ select >"
  },
  {
    "db_id": "world_1",
    "feedback": "You need to use language of country language.",
    "question": "Which language is the most popular on the Asian continent?",
    "gold_parse": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1",
    "beam": [
      [
        "SELECT Code2 FROM country WHERE Continent = value GROUP BY Code2 ORDER BY Count ( * ) Desc LIMIT value",
        -0.08476543426513672
      ],
      [
        "SELECT Code2 FROM country WHERE Continent = ( SELECT Continent FROM country WHERE Continent = value ) GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value",
        -4.161125659942627
      ],
      [
        "SELECT Code2 FROM country WHERE Continent = ( SELECT Max ( LifeExpectancy ) FROM country WHERE Continent = value ) GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value",
        -4.288015365600586
      ],
      [
        "SELECT Code2 FROM country WHERE Continent = ( SELECT Continent FROM country WHERE Continent = value ) GROUP BY Code2 ORDER BY Count ( * ) Desc LIMIT value",
        -4.7409844398498535
      ],
      [
        "SELECT Code2 FROM country WHERE Continent = ( SELECT Code2 FROM country WHERE Continent = value ) GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value",
        -4.794269561767578
      ],
      [
        "SELECT Code2 FROM country WHERE Continent = value GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value",
        -4.848105430603027
      ],
      [
        "SELECT Code2 FROM country WHERE Continent = ( SELECT Max ( LifeExpectancy ) FROM country WHERE Continent = value ) GROUP BY Code2 ORDER BY Count ( * ) Desc LIMIT value",
        -4.95267391204834
      ],
      [
        "SELECT Code2 FROM country WHERE Continent = ( SELECT Code2 FROM country WHERE Continent = value ) GROUP BY Code2 ORDER BY Count ( * ) Desc LIMIT value",
        -5.316681861877441
      ],
      [
        "SELECT Code2 FROM country WHERE Continent = ( SELECT Continent FROM country ORDER BY LifeExpectancy Desc LIMIT value ) GROUP BY Code2 ORDER BY Count ( * ) Desc LIMIT value",
        -5.433422565460205
      ],
      [
        "SELECT Name FROM country WHERE Continent = value GROUP BY Code2 ORDER BY Count ( * ) Desc LIMIT value",
        -6.406974792480469
      ],
      [
        "SELECT Code2 FROM country WHERE Continent = ( SELECT Continent FROM country GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value ) GROUP BY Code2 ORDER BY Count ( * ) Desc LIMIT value",
        -6.626218795776367
      ],
      [
        "SELECT Code2 FROM country WHERE Continent = ( SELECT Continent FROM country ORDER BY LifeExpectancy Desc LIMIT value ) GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value",
        -6.628714084625244
      ],
      [
        "SELECT Code2 FROM country WHERE Continent = value GROUP BY LocalName ORDER BY Count ( * ) Desc LIMIT value",
        -7.173283576965332
      ],
      [
        "SELECT Code2 FROM country WHERE Continent = ( SELECT Code2 FROM country ORDER BY LifeExpectancy Desc LIMIT value ) GROUP BY Code2 ORDER BY Count ( * ) Desc LIMIT value",
        -7.190981388092041
      ],
      [
        "SELECT Code2 FROM country WHERE Continent = value GROUP BY Name ORDER BY Count ( * ) Desc LIMIT value",
        -7.4073615074157715
      ],
      [
        "SELECT Code2 FROM country WHERE Continent = value GROUP BY HeadOfState ORDER BY Count ( * ) Desc LIMIT value",
        -7.885641098022461
      ],
      [
        "SELECT Code2 FROM country WHERE Continent = ( SELECT Continent FROM country GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value ) GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value",
        -7.937844276428223
      ],
      [
        "SELECT T1.Code2 FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = value GROUP BY T2.Language ORDER BY Count ( * ) Desc LIMIT value",
        -8.577374458312988
      ],
      [
        "SELECT Code2 FROM country WHERE Continent = value GROUP BY Code ORDER BY Count ( * ) Desc LIMIT value",
        -8.724821090698242
      ],
      [
        "SELECT HeadOfState FROM country WHERE Continent = value GROUP BY Code2 ORDER BY Count ( * ) Desc LIMIT value",
        -9.130037307739258
      ]
    ],
    "predicted_parse_with_values": "SELECT Code2 FROM country WHERE Continent = \"Asia\" GROUP BY Code2 ORDER BY Count ( * ) Desc LIMIT 1",
    "predicted_parse": "SELECT Code2 FROM country WHERE Continent = value GROUP BY Code2 ORDER BY Count ( * ) Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: find rows in country table whose continent equals Asia",
      "Step 2: find the number of rows of each value of code2 the results of step 1",
      "Step 3: find the code2 the results of step 1 with largest value in the results of step 2"
    ],
    "template_feedback": "in step 1 , additionally use the information from the countrylanguage table besides the country table . in step 2 , find for each value of language in place of code2 . in step 3 , find language in place of code2 .",
    "primary_span": [
      [
        4,
        11
      ],
      [
        21,
        26
      ],
      [
        36,
        37
      ]
    ],
    "secondary_span": [
      [
        12,
        16
      ],
      [
        27,
        31
      ],
      [
        38,
        42
      ]
    ],
    "edits": [
      "language",
      "code2",
      "countrylanguage",
      "language",
      "code2"
    ],
    "edits_original": "< select > add language </ select > < select > remove code2 </ select > < from > add countrylanguage </ from > < groupBy > add language </ groupBy > < groupBy > remove code2 </ groupBy >"
  },
  {
    "db_id": "world_1",
    "feedback": "Find the number of rows in country table whose continent equals Asia .",
    "question": "Count the number of countries in Asia.",
    "gold_parse": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"",
    "beam": [
      [
        "SELECT Count ( * ) FROM city",
        -0.5596399307250977
      ],
      [
        "SELECT Count ( * ) FROM country WHERE Continent = value",
        -0.9564323425292969
      ],
      [
        "SELECT Count ( * ) FROM country WHERE Region = value",
        -3.1666183471679688
      ],
      [
        "SELECT Count ( * ) FROM country WHERE Name = value",
        -6.246946811676025
      ],
      [
        "SELECT Count ( * ) FROM country WHERE LocalName = value",
        -9.485992431640625
      ],
      [
        "SELECT Count ( * ) FROM country GROUP BY Continent",
        -10.102350234985352
      ],
      [
        "SELECT Count ( * ) FROM country GROUP BY Continent HAVING Continent = value",
        -10.141876220703125
      ],
      [
        "SELECT Count ( DISTINCT Continent ) FROM country",
        -10.60698938369751
      ],
      [
        "SELECT Count ( DISTINCT Continent ) FROM country WHERE Continent = value",
        -11.578133583068848
      ],
      [
        "SELECT Count ( * ) FROM city AS T1 EXCEPT SELECT T2.Continent FROM country AS T2 WHERE T2.Continent = value",
        -11.802305698394775
      ],
      [
        "SELECT Count ( * ) FROM country GROUP BY Continent HAVING Region = value",
        -12.341504096984863
      ],
      [
        "SELECT Count ( Continent ) FROM country",
        -12.546515941619873
      ],
      [
        "SELECT Count ( * ) , Continent FROM country GROUP BY Continent",
        -12.767866134643555
      ],
      [
        "SELECT Count ( * ) FROM country GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value",
        -12.982242107391357
      ],
      [
        "SELECT Count ( * ) FROM country WHERE Continent > value",
        -13.298029899597168
      ],
      [
        "SELECT Count ( * ) FROM country ORDER BY Continent Desc",
        -13.34988784790039
      ],
      [
        "SELECT Count ( * ) FROM city WHERE Name = value",
        -13.43183708190918
      ],
      [
        "SELECT Count ( DISTINCT GovernmentForm ) FROM country",
        -13.76564884185791
      ],
      [
        "SELECT Sum ( Continent ) FROM country",
        -14.014945983886719
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM city",
        -14.447339057922363
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM city",
    "predicted_parse": "SELECT Count ( * ) FROM city",
    "predicted_parse_explanation": [
      "find the number of rows in city table"
    ],
    "template_feedback": "use country table in place of city table . additionally make sure that continent equals Asia .",
    "primary_span": [
      [
        0,
        2
      ],
      [
        9,
        16
      ]
    ],
    "secondary_span": [
      [
        3,
        8
      ]
    ],
    "edits": [
      "country",
      "city",
      "continent equals \"Asia\""
    ],
    "edits_original": "< from > add country </ from > < from > remove city </ from > < where > add continent equals \" Asia \" </ where >"
  },
  {
    "db_id": "car_1",
    "feedback": "Replace horsepower with edispl .",
    "question": "What is the average edispl for all volvos?",
    "gold_parse": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'",
    "beam": [
      [
        "SELECT Avg ( Horsepower ) FROM cars_data",
        -0.6352509260177612
      ],
      [
        "SELECT Avg ( Weight ) FROM cars_data",
        -1.74154531955719
      ],
      [
        "SELECT Avg ( * ) FROM continents",
        -1.9671739339828491
      ],
      [
        "SELECT Avg ( Horsepower ) FROM cars_data WHERE Year = value",
        -2.9825266897678375
      ],
      [
        "SELECT Avg ( MPG ) FROM cars_data",
        -3.8252310752868652
      ],
      [
        "SELECT Avg ( Accelerate ) FROM cars_data",
        -4.082024097442627
      ],
      [
        "SELECT Avg ( Weight ) FROM cars_data WHERE Year = value",
        -4.113366603851318
      ],
      [
        "SELECT Avg ( Edispl ) FROM cars_data",
        -4.268380165100098
      ],
      [
        "SELECT Avg ( * ) FROM cars_data WHERE Year = value",
        -4.472769498825073
      ],
      [
        "SELECT Avg ( Year ) FROM cars_data",
        -4.476548671722412
      ],
      [
        "SELECT Avg ( Cylinders ) FROM cars_data",
        -5.710626602172852
      ],
      [
        "SELECT Avg ( MPG ) FROM cars_data WHERE Year = value",
        -6.1801629066467285
      ],
      [
        "SELECT Avg ( Accelerate ) FROM cars_data WHERE Year = value",
        -6.844734191894531
      ],
      [
        "SELECT Avg ( Edispl ) FROM cars_data WHERE Year = value",
        -6.9789719581604
      ],
      [
        "SELECT Avg ( Model ) FROM model_list",
        -7.107335090637207
      ],
      [
        "SELECT Avg ( Maker ) FROM car_makers",
        -7.257134914398193
      ],
      [
        "SELECT Avg ( FullName ) FROM car_makers",
        -7.301145553588867
      ],
      [
        "SELECT Avg ( Make ) FROM car_names",
        -7.516322135925293
      ],
      [
        "SELECT Avg ( ModelId ) FROM model_list",
        -7.634483337402344
      ],
      [
        "SELECT Avg ( Maker ) FROM model_list",
        -7.850776672363281
      ]
    ],
    "predicted_parse_with_values": "SELECT Avg ( Horsepower ) FROM cars_data",
    "predicted_parse": "SELECT Avg ( Horsepower ) FROM cars_data",
    "predicted_parse_explanation": [
      "find the average horsepower in cars data table"
    ],
    "template_feedback": "additionally use the information from the car names table besides the cars data table . additionally make sure that model equals volvo . find average edispl in place of average horsepower .",
    "primary_span": [
      [
        0,
        8
      ],
      [
        15,
        22
      ],
      [
        23,
        25
      ]
    ],
    "secondary_span": [
      [
        9,
        14
      ],
      [
        26,
        31
      ]
    ],
    "edits": [
      "average edispl",
      "average horsepower",
      "car names",
      "model equals \"volvo\""
    ],
    "edits_original": "< select > add average edispl </ select > < select > remove average horsepower </ select > < from > add car names </ from > < where > add model equals \" volvo \" </ where >"
  },
  {
    "db_id": "wta_1",
    "feedback": "Find tours of ranking table for each value of ranking date .",
    "question": "Find the total number of tours for each ranking date.",
    "gold_parse": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date",
    "beam": [
      [
        "SELECT Count ( * ) , winner_rank FROM matches GROUP BY winner_rank",
        -0.10420417785644531
      ],
      [
        "SELECT winner_rank , Count ( * ) FROM matches GROUP BY winner_rank",
        -2.5486698150634766
      ],
      [
        "SELECT Count ( * ) , T3.ranking FROM players AS T1 JOIN matches AS T2 ON T2.loser_id = T1.player_id JOIN rankings AS T3 ON T1.player_id = T3.player_id GROUP BY T2.winner_rank",
        -4.145606994628906
      ],
      [
        "SELECT Count ( * ) , loser_rank FROM matches GROUP BY winner_rank",
        -6.418293476104736
      ],
      [
        "SELECT Count ( * ) , T2.winner_rank FROM players AS T1 JOIN matches AS T2 ON T2.loser_id = T1.player_id JOIN rankings AS T3 ON T1.player_id = T3.player_id GROUP BY T3.ranking",
        -7.025334358215332
      ],
      [
        "SELECT Count ( * ) , loser_entry FROM matches GROUP BY winner_rank",
        -7.451204299926758
      ],
      [
        "SELECT Count ( * ) , year FROM matches GROUP BY winner_rank",
        -8.112760543823242
      ],
      [
        "SELECT Count ( * ) , score FROM matches GROUP BY winner_rank",
        -8.114324569702148
      ],
      [
        "SELECT T3.ranking , Count ( * ) FROM players AS T1 JOIN matches AS T2 ON T2.loser_id = T1.player_id JOIN rankings AS T3 ON T1.player_id = T3.player_id GROUP BY T2.winner_rank",
        -8.18307113647461
      ],
      [
        "SELECT Count ( * ) , T3.ranking_date FROM players AS T1 JOIN matches AS T2 ON T2.loser_id = T1.player_id JOIN rankings AS T3 ON T1.player_id = T3.player_id GROUP BY T2.winner_rank",
        -8.376112937927246
      ],
      [
        "SELECT Count ( * ) , loser_name FROM matches GROUP BY winner_rank",
        -9.119759559631348
      ],
      [
        "SELECT loser_entry , Count ( * ) FROM matches GROUP BY winner_rank",
        -9.837199211120605
      ],
      [
        "SELECT Count ( * ) , T2.winner_rank FROM players AS T1 JOIN matches AS T2 ON T2.loser_id = T1.player_id JOIN rankings AS T3 ON T1.player_id = T3.player_id GROUP BY T3.ranking_date",
        -10.210455894470215
      ],
      [
        "SELECT loser_rank , Count ( * ) FROM matches GROUP BY winner_rank",
        -10.238448143005371
      ],
      [
        "SELECT T2.winner_rank , Count ( * ) FROM players AS T1 JOIN matches AS T2 ON T2.loser_id = T1.player_id JOIN rankings AS T3 ON T1.player_id = T3.player_id GROUP BY T3.ranking",
        -10.274763107299805
      ],
      [
        "SELECT T3.ranking_date , Count ( * ) FROM players AS T1 JOIN matches AS T2 ON T2.loser_id = T1.player_id JOIN rankings AS T3 ON T1.player_id = T3.player_id GROUP BY T2.winner_rank",
        -10.344712257385254
      ],
      [
        "SELECT year , Count ( * ) FROM matches GROUP BY winner_rank",
        -10.423346519470215
      ],
      [
        "SELECT Count ( * ) , tourney_date FROM matches GROUP BY winner_rank",
        -10.738274574279785
      ],
      [
        "SELECT Sum ( * ) , winner_rank FROM matches GROUP BY winner_rank",
        -10.764201641082764
      ],
      [
        "SELECT Count ( * ) FROM players",
        -13.012507438659668
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) , winner_rank FROM matches GROUP BY winner_rank",
    "predicted_parse": "SELECT Count ( * ) , winner_rank FROM matches GROUP BY winner_rank",
    "predicted_parse_explanation": [
      "find each value of winner rank in matches table along with the number of the corresponding rows to each value"
    ],
    "template_feedback": "use rankings table in place of matches table . find for each value of ranking date in place of winner rank . find summation of tours and ranking date in place of winner rank and number of rows .",
    "primary_span": [
      [
        0,
        2
      ],
      [
        9,
        15
      ],
      [
        22,
        28
      ]
    ],
    "secondary_span": [
      [
        3,
        8
      ],
      [
        16,
        21
      ],
      [
        29,
        38
      ]
    ],
    "edits": [
      "summation of tours",
      "ranking date",
      "number of rows",
      "winner rank",
      "rankings",
      "matches",
      "ranking date",
      "winner rank"
    ],
    "edits_original": "< select > add summation of tours </ select > < select > add ranking date </ select > < select > remove number of rows </ select > < select > remove winner rank </ select > < from > add rankings </ from > < from > remove matches </ from > < groupBy > add ranking date </ groupBy > < groupBy > remove winner rank </ groupBy >"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "feedback": "Find different template type code of reference template types table which used for documents .",
    "question": "Count the number of different templates used for documents.",
    "gold_parse": "SELECT count(DISTINCT template_id) FROM Documents",
    "beam": [
      [
        "SELECT Count ( * ) FROM Ref_Template_Types",
        -0.5934293270111084
      ],
      [
        "SELECT Count ( DISTINCT Template_ID ) FROM Documents",
        -0.8120801448822021
      ],
      [
        "SELECT Count ( DISTINCT Template_Type_Code ) FROM Templates",
        -6.128413200378418
      ],
      [
        "SELECT Count ( DISTINCT Document_Name ) FROM Documents",
        -6.5929646492004395
      ],
      [
        "SELECT Count ( DISTINCT Version_Number ) FROM Templates",
        -10.31248950958252
      ],
      [
        "SELECT Count ( DISTINCT Template_Type_Code ) FROM Ref_Template_Types",
        -12.027135848999023
      ],
      [
        "SELECT Count ( Template_ID ) FROM Documents",
        -12.08401370048523
      ],
      [
        "SELECT Count ( DISTINCT Paragraph_Text ) FROM Paragraphs",
        -12.29985523223877
      ],
      [
        "SELECT Count ( DISTINCT Template_Type_Description ) FROM Ref_Template_Types",
        -12.328836441040039
      ],
      [
        "SELECT Count ( DISTINCT Date_Effective_From ) FROM Templates",
        -12.436367988586426
      ],
      [
        "SELECT Count ( DISTINCT Document_Description ) FROM Documents",
        -12.480140209197998
      ],
      [
        "SELECT Count ( DISTINCT Document_ID ) FROM Paragraphs",
        -12.542125701904297
      ],
      [
        "SELECT Count ( DISTINCT Paragraph_ID ) FROM Paragraphs",
        -12.607579231262207
      ],
      [
        "SELECT Sum ( Version_Number ) FROM Templates",
        -12.64931583404541
      ],
      [
        "SELECT Count ( DISTINCT Template_Details ) FROM Templates",
        -12.969463348388672
      ],
      [
        "SELECT Count ( DISTINCT Other_Details ) FROM Paragraphs",
        -13.15521764755249
      ],
      [
        "SELECT Count ( DISTINCT Date_Effective_To ) FROM Templates",
        -13.305808544158936
      ],
      [
        "SELECT Count ( DISTINCT Template_ID ) FROM Templates",
        -13.314910888671875
      ],
      [
        "SELECT Sum ( DISTINCT Template_ID ) FROM Documents",
        -13.474074602127075
      ],
      [
        "SELECT Count ( * ) FROM Documents WHERE Document_Name = value",
        -14.09886384010315
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM Ref_Template_Types",
    "predicted_parse": "SELECT Count ( * ) FROM Ref_Template_Types",
    "predicted_parse_explanation": [
      "find the number of rows in reference template types table"
    ],
    "template_feedback": "use documents table in place of reference template types table . find number of different template id in place of number of rows .",
    "primary_span": [
      [
        0,
        2
      ],
      [
        11,
        16
      ]
    ],
    "secondary_span": [
      [
        3,
        10
      ],
      [
        17,
        23
      ]
    ],
    "edits": [
      "number of distinct template id",
      "number of rows",
      "documents",
      "reference template types"
    ],
    "edits_original": "< select > add number of distinct template id </ select > < select > remove number of rows </ select > < from > add documents </ from > < from > remove reference template types </ from >"
  },
  {
    "db_id": "tvshow",
    "feedback": "I want original air date.",
    "question": "list all cartoon titles and their directors ordered by their air date",
    "gold_parse": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date",
    "beam": [
      [
        "SELECT Title , Directed_by FROM Cartoon ORDER BY Title Asc",
        -0.018947601318359375
      ],
      [
        "SELECT Title , Directed_by FROM Cartoon ORDER BY Original_air_date Asc",
        -4.179656505584717
      ],
      [
        "SELECT Title , Directed_by FROM Cartoon ORDER BY Written_by Asc",
        -5.903928756713867
      ],
      [
        "SELECT Title , Directed_by FROM Cartoon ORDER BY Directed_by Asc",
        -7.9222331047058105
      ],
      [
        "SELECT T3.Title , T3.Directed_by FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T2.Channel = T1.id JOIN Cartoon AS T3 ON T1.id = T3.Channel ORDER BY T2.Air_Date Asc",
        -8.438429832458496
      ],
      [
        "SELECT Title , Directed_by FROM Cartoon ORDER BY Production_code Asc",
        -9.02009391784668
      ],
      [
        "SELECT Title , Directed_by FROM Cartoon WHERE Directed_by = value ORDER BY Title Asc",
        -11.453306198120117
      ],
      [
        "SELECT Title , Written_by FROM Cartoon ORDER BY Title Asc",
        -12.165372848510742
      ],
      [
        "SELECT Title , Directed_by FROM Cartoon WHERE Written_by = value ORDER BY Title Asc",
        -12.697013854980469
      ],
      [
        "SELECT Title , Directed_by FROM Cartoon ORDER BY Title Asc LIMIT value",
        -13.032233238220215
      ],
      [
        "SELECT Title , Directed_by , Written_by FROM Cartoon ORDER BY Title Asc",
        -13.246912956237793
      ],
      [
        "SELECT Title , Directed_by FROM Cartoon ORDER BY id Asc",
        -13.356005668640137
      ],
      [
        "SELECT DISTINCT Title , Directed_by FROM Cartoon ORDER BY Title Asc",
        -13.434865951538086
      ],
      [
        "SELECT Title , Directed_by FROM Cartoon WHERE Directed_by = value",
        -13.600725173950195
      ],
      [
        "SELECT Title , Directed_by FROM Cartoon UNION SELECT Title FROM Cartoon",
        -13.732723236083984
      ],
      [
        "SELECT Title , Directed_by , Directed_by FROM Cartoon ORDER BY Title Asc",
        -14.17477035522461
      ],
      [
        "SELECT Title FROM Cartoon ORDER BY Title , Directed_by Asc",
        -14.423242568969727
      ],
      [
        "SELECT Title , Directed_by FROM Cartoon",
        -15.068660736083984
      ],
      [
        "SELECT Title FROM Cartoon ORDER BY Title Asc",
        -15.298444747924805
      ],
      [
        "SELECT Title FROM Cartoon ORDER BY Original_air_date Asc",
        -17.936415672302246
      ]
    ],
    "predicted_parse_with_values": "SELECT Title , Directed_by FROM Cartoon ORDER BY Title Asc",
    "predicted_parse": "SELECT Title , Directed_by FROM Cartoon ORDER BY Title Asc",
    "predicted_parse_explanation": [
      "find the title and directed by in cartoon table ordered ascending by title"
    ],
    "template_feedback": "order the results by original air date in place of title .",
    "primary_span": [
      [
        0,
        6
      ]
    ],
    "secondary_span": [
      [
        7,
        11
      ]
    ],
    "edits": [
      "original air date",
      "title"
    ],
    "edits_original": "< orderBy > add original air date </ orderBy > < orderBy > remove title </ orderBy >"
  },
  {
    "db_id": "network_1",
    "feedback": "In step 1, you should provide the id of student from likes table.",
    "question": "What is the name of the high schooler who has the greatest number of likes?",
    "gold_parse": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
    "beam": [
      [
        "SELECT name FROM Highschooler GROUP BY grade ORDER BY Count ( * ) Desc LIMIT value",
        -0.4118328094482422
      ],
      [
        "SELECT name FROM Highschooler GROUP BY grade , grade ORDER BY Count ( * ) Desc LIMIT value",
        -1.9277582168579102
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id GROUP BY T1.grade , T2.liked_id ORDER BY Count ( * ) Desc LIMIT value",
        -2.417297601699829
      ],
      [
        "SELECT name FROM Highschooler GROUP BY grade , name ORDER BY Count ( * ) Desc LIMIT value",
        -2.7597705125808716
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id GROUP BY T2.student_id ORDER BY Count ( * ) Desc LIMIT value",
        -4.594456672668457
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id GROUP BY T1.grade , T2.student_id ORDER BY Count ( * ) Desc LIMIT value",
        -4.78585147857666
      ],
      [
        "SELECT name FROM Highschooler GROUP BY name , grade ORDER BY Count ( * ) Desc LIMIT value",
        -5.01863956451416
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id GROUP BY T2.liked_id ORDER BY Count ( * ) Desc LIMIT value",
        -5.2389421463012695
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id GROUP BY T2.liked_id , T1.grade ORDER BY Count ( * ) Desc LIMIT value",
        -5.752694606781006
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T1.grade , T2.friend_id ORDER BY Count ( * ) Desc LIMIT value",
        -6.576590061187744
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id ORDER BY Count ( * ) Desc LIMIT value",
        -6.673894882202148
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id GROUP BY T2.student_id , T1.grade ORDER BY Count ( * ) Desc LIMIT value",
        -7.016308307647705
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T1.grade , T2.student_id ORDER BY Count ( * ) Desc LIMIT value",
        -7.245301246643066
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id , T1.grade ORDER BY Count ( * ) Desc LIMIT value",
        -8.20541763305664
      ],
      [
        "SELECT grade FROM Highschooler GROUP BY grade ORDER BY Count ( * ) Desc LIMIT value",
        -8.2614164352417
      ],
      [
        "SELECT name FROM Highschooler ORDER BY grade Desc LIMIT value",
        -8.3339204788208
      ],
      [
        "SELECT name FROM Highschooler GROUP BY name ORDER BY Count ( * ) Desc LIMIT value",
        -8.597273826599121
      ],
      [
        "SELECT name FROM Highschooler GROUP BY grade , * ORDER BY Count ( * ) Desc LIMIT value",
        -8.711374759674072
      ],
      [
        "SELECT name FROM Highschooler GROUP BY grade , ID ORDER BY Count ( * ) Desc LIMIT value",
        -8.90576696395874
      ],
      [
        "SELECT name FROM Highschooler GROUP BY grade , Count ( * ) ORDER BY Count ( * ) Desc LIMIT value",
        -9.332447052001953
      ]
    ],
    "predicted_parse_with_values": "SELECT name FROM Highschooler GROUP BY grade ORDER BY Count ( * ) Desc LIMIT 1",
    "predicted_parse": "SELECT name FROM Highschooler GROUP BY grade ORDER BY Count ( * ) Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of grade in high schooler table",
      "Step 2: find the name in high schooler table with largest value in the results of step 1"
    ],
    "template_feedback": "in step 1 , additionally use the information from the likes table besides the high schooler table . find for each value of student id in place of grade .",
    "primary_span": [
      [
        4,
        11
      ],
      [
        18,
        24
      ]
    ],
    "secondary_span": [
      [
        12,
        17
      ],
      [
        25,
        29
      ]
    ],
    "edits": [
      "likes",
      "student id",
      "grade"
    ],
    "edits_original": "< from > add likes </ from > < groupBy > add student id </ groupBy > < groupBy > remove grade </ groupBy >"
  },
  {
    "db_id": "tvshow",
    "feedback": "You need to drop And directed by equals Ben Jones.",
    "question": "which countries' tv channels are playing some cartoon written by Todd Casey?",
    "gold_parse": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
    "beam": [
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value AND T2.Directed_by = value",
        -0.03849601745605469
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value AND T1.Language = value",
        -4.075222969055176
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel JOIN Cartoon AS T3 ON T1.id = T3.Channel WHERE T3.Written_by = value AND T2.Episode = value",
        -4.502114295959473
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value AND T1.series_name = value",
        -5.775187015533447
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value AND T1.Content = value",
        -5.807987213134766
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value AND T2.Written_by = value",
        -5.9062323570251465
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = value AND T2.Directed_by = value",
        -7.434439659118652
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value AND T2.Title = value",
        -9.10315990447998
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel JOIN Cartoon AS T3 ON T1.id = T3.Channel WHERE T3.Written_by = value AND T2.Rating = value",
        -10.161921501159668
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value",
        -10.896730422973633
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value AND T1.Pay_per_view_PPV = value",
        -10.960190773010254
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = value AND T1.Language = value",
        -11.157313346862793
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel JOIN Cartoon AS T3 ON T1.id = T3.Channel WHERE T3.Directed_by = value AND T2.Episode = value",
        -11.561657905578613
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel JOIN Cartoon AS T3 ON T1.id = T3.Channel WHERE T2.Episode = value AND T3.Directed_by = value",
        -11.624917030334473
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = value AND T2.Directed_by = value",
        -11.65920352935791
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value AND T1.Hight_definition_TV = value",
        -11.824271202087402
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.Language = value AND T2.Directed_by = value",
        -11.890969276428223
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = value AND T1.Content = value",
        -12.76926326751709
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = value",
        -13.685709953308105
      ],
      [
        "SELECT Country FROM TV_Channel",
        -17.306663513183594
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = \"Todd Casey\" AND T2.Directed_by = \"Ben Jones\"",
    "predicted_parse": "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value AND T2.Directed_by = value",
    "predicted_parse_explanation": [
      "Step 1: for each row in tv channel table , find the corresponding rows in cartoon table",
      "Step 2: find the country of the results of step 1 whose written by equals Todd Casey and directed by equals Ben Jones"
    ],
    "template_feedback": "in step 2 , remove the directed by equals Ben Jones conditions .",
    "primary_span": [
      [
        4,
        12
      ]
    ],
    "secondary_span": [],
    "edits": [
      "directed by equals \"Ben Jones\""
    ],
    "edits_original": "< where > remove directed by equals \" Ben Jones \" </ where >"
  },
  {
    "db_id": "world_1",
    "feedback": "Use government form in place of continent .",
    "question": "How many countries have a republic as their form of government?",
    "gold_parse": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"",
    "beam": [
      [
        "SELECT Count ( * ) FROM country WHERE Continent = value",
        -0.6890525817871094
      ],
      [
        "SELECT Count ( * ) FROM city",
        -0.804412841796875
      ],
      [
        "SELECT Count ( * ) FROM country WHERE GovernmentForm = value",
        -3.47648286819458
      ],
      [
        "SELECT Count ( * ) FROM country WHERE Name = value",
        -4.75193452835083
      ],
      [
        "SELECT Count ( * ) , GovernmentForm FROM country GROUP BY GovernmentForm",
        -4.971092224121094
      ],
      [
        "SELECT Count ( DISTINCT Continent ) FROM country",
        -6.757437705993652
      ],
      [
        "SELECT Count ( * ) FROM country GROUP BY GovernmentForm",
        -7.010200500488281
      ],
      [
        "SELECT Count ( DISTINCT Continent ) FROM country WHERE Continent = value",
        -7.051966667175293
      ],
      [
        "SELECT Count ( * ) FROM sqlite_sequence WHERE name = value",
        -8.004370212554932
      ],
      [
        "SELECT Count ( * ) FROM country WHERE Region = value",
        -8.155503749847412
      ],
      [
        "SELECT Count ( * ) , Continent FROM country GROUP BY GovernmentForm",
        -9.191787242889404
      ],
      [
        "SELECT Count ( * ) FROM country WHERE LocalName = value",
        -9.200063705444336
      ],
      [
        "SELECT Count ( DISTINCT Continent ) FROM country WHERE Name = value",
        -9.309520244598389
      ],
      [
        "SELECT Count ( DISTINCT GovernmentForm ) FROM country",
        -9.385208129882812
      ],
      [
        "SELECT Count ( * ) FROM country WHERE Capital = value",
        -10.827370643615723
      ],
      [
        "SELECT Count ( DISTINCT Continent ) FROM country WHERE GovernmentForm = value",
        -11.084008693695068
      ],
      [
        "SELECT Count ( * ) FROM country GROUP BY GovernmentForm ORDER BY Count ( * ) Desc LIMIT value",
        -11.148402214050293
      ],
      [
        "SELECT Count ( * ) FROM country GROUP BY GovernmentForm HAVING Name = value",
        -11.91194462776184
      ],
      [
        "SELECT Count ( * ) FROM city AS T1 UNION SELECT Max ( T2.LifeExpectancy ) FROM country AS T2",
        -13.092363953590393
      ],
      [
        "SELECT Sum ( Continent ) FROM country",
        -13.74469804763794
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM country WHERE Continent = \"Republic\"",
    "predicted_parse": "SELECT Count ( * ) FROM country WHERE Continent = value",
    "predicted_parse_explanation": [
      "find the number of rows in country table whose continent equals Republic"
    ],
    "template_feedback": "consider the government form equals Republic conditions in place of the continent equals Republic conditions .",
    "primary_span": [
      [
        0,
        6
      ]
    ],
    "secondary_span": [
      [
        7,
        15
      ]
    ],
    "edits": [
      "government form equals \"Republic\"",
      "continent equals \"Republic\""
    ],
    "edits_original": "< where > add government form equals \" Republic \" </ where > < where > remove continent equals \" Republic \" </ where >"
  },
  {
    "db_id": "voter_1",
    "feedback": "Make sure we determine the largest value of created.",
    "question": "What is last date created of votes from the state 'CA'?",
    "gold_parse": "SELECT max(created) FROM votes WHERE state  =  'CA'",
    "beam": [
      [
        "SELECT created FROM VOTES WHERE state = value",
        -7.43865966796875e-05
      ],
      [
        "SELECT T2.created FROM AREA_CODE_STATE AS T1 JOIN VOTES AS T2 ON T1.state = T2.state WHERE T1.state = value",
        -9.530007362365723
      ],
      [
        "SELECT created , state FROM VOTES WHERE state = value",
        -13.587764263153076
      ],
      [
        "SELECT created FROM VOTES WHERE state = value ORDER BY created Asc",
        -14.195594310760498
      ],
      [
        "SELECT created , created FROM VOTES WHERE state = value",
        -14.535648107528687
      ],
      [
        "SELECT DISTINCT created FROM VOTES WHERE state = value",
        -15.163143157958984
      ],
      [
        "SELECT created FROM VOTES WHERE state LIKE value",
        -15.633920669555664
      ],
      [
        "SELECT created FROM VOTES WHERE state = value AND state = value",
        -15.944907188415527
      ],
      [
        "SELECT Count ( created ) FROM VOTES WHERE state = value",
        -16.749420166015625
      ],
      [
        "SELECT DISTINCT created FROM VOTES WHERE state = value",
        -16.999753952026367
      ],
      [
        "SELECT created FROM VOTES WHERE DISTINCT state = value",
        -17.218324661254883
      ],
      [
        "SELECT created FROM VOTES WHERE state = value LIMIT value",
        -17.31874656677246
      ],
      [
        "SELECT state FROM VOTES WHERE state = value",
        -17.456953048706055
      ],
      [
        "SELECT created FROM VOTES WHERE Count ( state ) = value",
        -17.547744750976562
      ],
      [
        "SELECT created / state FROM VOTES WHERE state = value",
        -17.587976217269897
      ],
      [
        "SELECT created FROM VOTES WHERE state = value GROUP BY state",
        -17.68523406982422
      ],
      [
        "SELECT T1.created FROM VOTES AS T1 WHERE T1.state IN ( SELECT T2.state FROM AREA_CODE_STATE AS T2 JOIN VOTES AS T1 ON T2.state = T1.state WHERE T1.state = value )",
        -17.69271683692932
      ],
      [
        "SELECT created FROM VOTES WHERE state = value",
        -17.768308639526367
      ],
      [
        "SELECT T1.state FROM AREA_CODE_STATE AS T1 JOIN VOTES AS T2 ON T1.state = T2.state WHERE T2.state = value",
        -17.8048095703125
      ],
      [
        "SELECT T1.created FROM VOTES AS T1 WHERE T1.state = ( SELECT T2.state FROM AREA_CODE_STATE AS T2 JOIN VOTES AS T1 ON T2.state = T1.state WHERE T1.state = value )",
        -18.338199377059937
      ]
    ],
    "predicted_parse_with_values": "SELECT created FROM VOTES WHERE state = \"CA\"",
    "predicted_parse": "SELECT created FROM VOTES WHERE state = value",
    "predicted_parse_explanation": [
      "find the created in votes table whose state equals CA"
    ],
    "template_feedback": "find maximum created in place of created .",
    "primary_span": [
      [
        0,
        2
      ]
    ],
    "secondary_span": [
      [
        3,
        7
      ]
    ],
    "edits": [
      "maximum created",
      "created"
    ],
    "edits_original": "< select > add maximum created </ select > < select > remove created </ select >"
  },
  {
    "db_id": "world_1",
    "feedback": "Find the number of rows of country table whose government form equals republics .",
    "question": "How many countries have governments that are republics?",
    "gold_parse": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"",
    "beam": [
      [
        "SELECT Count ( DISTINCT Continent ) FROM country",
        -0.6453776359558105
      ],
      [
        "SELECT Count ( DISTINCT GovernmentForm ) FROM country",
        -1.3356995582580566
      ],
      [
        "SELECT Count ( * ) FROM city",
        -1.6496105194091797
      ],
      [
        "SELECT Count ( DISTINCT Continent ) FROM country WHERE Continent = value",
        -5.20192289352417
      ],
      [
        "SELECT Count ( DISTINCT Continent ) FROM country WHERE Name = value",
        -5.453179359436035
      ],
      [
        "SELECT Count ( * ) FROM country WHERE Continent = value",
        -5.772067070007324
      ],
      [
        "SELECT Count ( DISTINCT Continent ) FROM country WHERE Region = value",
        -5.91511869430542
      ],
      [
        "SELECT Count ( DISTINCT GovernmentForm ) FROM country WHERE Continent = value",
        -6.079199314117432
      ],
      [
        "SELECT Count ( DISTINCT GovernmentForm ) FROM country WHERE Name = value",
        -7.287751197814941
      ],
      [
        "SELECT Count ( DISTINCT GovernmentForm ) FROM country WHERE Region = value",
        -7.756436347961426
      ],
      [
        "SELECT Count ( * ) FROM country WHERE Region = value",
        -7.773626327514648
      ],
      [
        "SELECT Count ( * ) FROM country WHERE Name = value",
        -7.905650615692139
      ],
      [
        "SELECT Count ( Continent ) FROM country",
        -8.691569805145264
      ],
      [
        "SELECT Count ( DISTINCT Continent ) FROM country WHERE LocalName = value",
        -8.780976295471191
      ],
      [
        "SELECT Count ( * ) FROM country WHERE Continent LIKE value",
        -9.778667449951172
      ],
      [
        "SELECT Count ( DISTINCT Continent ) FROM country WHERE Continent ! = value",
        -10.406389236450195
      ],
      [
        "SELECT Count ( DISTINCT GovernmentForm ) FROM country WHERE LocalName = value",
        -11.014866828918457
      ],
      [
        "SELECT Count ( * ) FROM country WHERE LocalName = value",
        -11.089666366577148
      ],
      [
        "SELECT Count ( * ) FROM country GROUP BY GovernmentForm",
        -11.121526718139648
      ],
      [
        "SELECT Count ( GovernmentForm ) FROM country",
        -11.773062229156494
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( DISTINCT Continent ) FROM country",
    "predicted_parse": "SELECT Count ( DISTINCT Continent ) FROM country",
    "predicted_parse_explanation": [
      "find the number of different continent in country table"
    ],
    "template_feedback": "additionally make sure that government form equals Republic . find number of rows in place of number of different continent .",
    "primary_span": [
      [
        0,
        8
      ],
      [
        9,
        12
      ]
    ],
    "secondary_span": [
      [
        13,
        20
      ]
    ],
    "edits": [
      "number of rows",
      "number of distinct continent",
      "government form equals \"Republic\""
    ],
    "edits_original": "< select > add number of rows </ select > < select > remove number of distinct continent </ select > < where > add government form equals \" Republic \" </ where >"
  },
  {
    "db_id": "car_1",
    "feedback": "Change make id with id in both step , ensure count of car is greater than 3 in step3.",
    "question": "What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?",
    "gold_parse": "SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3",
    "beam": [
      [
        "SELECT T3.MakeId , T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker AND T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model WHERE T2.Model > = value INTERSECT SELECT T3.MakeId , T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker AND T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model WHERE T2.Model > value",
        -4.50833785533905
      ],
      [
        "SELECT T2.MakeId , T1.ModelId FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model WHERE T1.Model > = value INTERSECT SELECT T2.MakeId , T3.Maker FROM car_makers AS T3 JOIN model_list AS T1 ON T3.Id = T1.Maker AND T3.Id = T1.Maker JOIN car_names AS T2 ON T1.Model = T2.Model WHERE T1.Model > value",
        -4.649211883544922
      ],
      [
        "SELECT T3.MakeId , T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker AND T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model GROUP BY T2.ModelId HAVING Count ( * ) > value INTERSECT SELECT T2.ModelId , T3.Model FROM model_list AS T2 JOIN car_names AS T3 ON T2.Model = T3.Model GROUP BY T3.Model HAVING Count ( * ) > = value",
        -4.696717143058777
      ],
      [
        "SELECT T3.MakeId , T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker AND T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model GROUP BY T2.ModelId HAVING Count ( * ) > value INTERSECT SELECT T2.ModelId , T3.Model FROM model_list AS T2 JOIN car_names AS T3 ON T2.Model = T3.Model GROUP BY T2.Model HAVING Count ( * ) > = value",
        -4.855917811393738
      ],
      [
        "SELECT T3.MakeId , T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker AND T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model GROUP BY T2.ModelId HAVING Count ( * ) > value INTERSECT SELECT T2.ModelId , T3.Model FROM model_list AS T2 JOIN car_names AS T3 ON T2.Model = T3.Model GROUP BY T3.Model HAVING Count ( * ) > value",
        -4.917014002799988
      ],
      [
        "SELECT T3.MakeId , T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker AND T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model WHERE T2.Model > = value INTERSECT SELECT T3.MakeId , T2.ModelId FROM model_list AS T2 JOIN car_names AS T3 ON T2.Model = T3.Model WHERE T2.Model > value",
        -4.969268202781677
      ],
      [
        "SELECT T2.MakeId , T2.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model GROUP BY T1.ModelId HAVING Count ( * ) > value INTERSECT SELECT T1.ModelId , T2.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model GROUP BY T2.Model HAVING Count ( * ) > = value",
        -5.030534505844116
      ],
      [
        "SELECT T2.MakeId , T1.ModelId FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model WHERE T1.Model > = value INTERSECT SELECT T2.MakeId , T1.ModelId FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model WHERE T1.Model > value",
        -5.1540443897247314
      ],
      [
        "SELECT T3.MakeId , T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker AND T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model GROUP BY T2.ModelId HAVING Count ( * ) > value INTERSECT SELECT T2.ModelId , T3.Model FROM model_list AS T2 JOIN car_names AS T3 ON T2.Model = T3.Model GROUP BY T2.ModelId HAVING Count ( * ) > = value",
        -5.1575058698654175
      ],
      [
        "SELECT T2.MakeId , T2.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model GROUP BY T1.ModelId HAVING Count ( * ) > value INTERSECT SELECT T1.ModelId , T2.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model GROUP BY T1.Model HAVING Count ( * ) > = value",
        -5.189410448074341
      ],
      [
        "SELECT T2.MakeId , T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model GROUP BY T1.ModelId HAVING Count ( * ) > value INTERSECT SELECT T1.ModelId , T2.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model GROUP BY T2.Model HAVING Count ( * ) > = value",
        -5.204325914382935
      ],
      [
        "SELECT T2.MakeId , T2.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model GROUP BY T1.ModelId HAVING Count ( * ) > value INTERSECT SELECT T1.ModelId , T2.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model GROUP BY T2.Model HAVING Count ( * ) > value",
        -5.249803304672241
      ],
      [
        "SELECT T2.MakeId , T1.ModelId FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model GROUP BY T1.ModelId HAVING Count ( * ) > value INTERSECT SELECT T1.ModelId , T2.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model GROUP BY T2.Model HAVING Count ( * ) > = value",
        -5.319616317749023
      ],
      [
        "SELECT T2.MakeId , T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model GROUP BY T1.ModelId HAVING Count ( * ) > value INTERSECT SELECT T1.ModelId , T2.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model GROUP BY T1.Model HAVING Count ( * ) > = value",
        -5.363421678543091
      ],
      [
        "SELECT T2.MakeId , T1.Maker FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model GROUP BY T1.ModelId HAVING Count ( * ) > value INTERSECT SELECT T1.ModelId , T2.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model GROUP BY T2.Model HAVING Count ( * ) > = value",
        -5.417930603027344
      ],
      [
        "SELECT T2.MakeId , T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model GROUP BY T1.ModelId HAVING Count ( * ) > value INTERSECT SELECT T1.ModelId , T2.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model GROUP BY T2.Model HAVING Count ( * ) > value",
        -5.423978090286255
      ],
      [
        "SELECT T2.MakeId , T1.ModelId FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model GROUP BY T1.ModelId HAVING Count ( * ) > value INTERSECT SELECT T1.ModelId , T2.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model GROUP BY T1.Model HAVING Count ( * ) > = value",
        -5.4781739711761475
      ],
      [
        "SELECT T2.MakeId , T2.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model GROUP BY T1.ModelId HAVING Count ( * ) > value INTERSECT SELECT T1.ModelId , T2.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model GROUP BY T1.ModelId HAVING Count ( * ) > = value",
        -5.491381406784058
      ],
      [
        "SELECT T3.MakeId , T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker AND T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model GROUP BY T2.ModelId HAVING Count ( * ) > value INTERSECT SELECT T2.ModelId , T3.Model FROM model_list AS T2 JOIN car_names AS T3 ON T2.Model = T3.Model GROUP BY T2.Model HAVING Count ( * ) > value",
        -5.5289353132247925
      ],
      [
        "SELECT T3.MakeId , T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker AND T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model GROUP BY T2.ModelId HAVING Count ( * ) > value INTERSECT SELECT T2.ModelId , T2.Model FROM model_list AS T2 JOIN car_names AS T3 ON T2.Model = T3.Model GROUP BY T3.Model HAVING Count ( * ) > = value",
        -5.534815669059753
      ]
    ],
    "predicted_parse_with_values": "SELECT T3.MakeId , T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker AND T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model WHERE T2.Model > = 2 INTERSECT SELECT T3.MakeId , T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker AND T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model WHERE T2.Model > 3",
    "predicted_parse": "SELECT T3.MakeId , T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker AND T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model WHERE T2.Model > = value INTERSECT SELECT T3.MakeId , T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker AND T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model WHERE T2.Model > value",
    "predicted_parse_explanation": [
      "Step 1: for each row in car makers table , find the corresponding rows in model list table and in car names table",
      "Step 2: find the make id and car makers 's maker of the results of step 1 whose model list 's model greater than or equals 2",
      "Step 3: for each row in car makers table , find the corresponding rows in model list table and in car names table",
      "Step 4: find the make id and car makers 's maker of the results of step 3 whose model list 's model greater than 3",
      "Step 5: show the rows that are in both the results of step 2 and step 4"
    ],
    "template_feedback": "in step 1 , do not use the car names table . in step 2 , remove the model list 's model greater than or equals 2 conditions . find for each value of id whose number of rows greater than or equals 2 . find id in place of make id . in step 4 , remove the model list 's model greater than 3 conditions . find for each value of id whose number of rows greater than 3 . find id in place of make id .",
    "primary_span": [
      [
        4,
        11
      ],
      [
        16,
        28
      ],
      [
        29,
        44
      ],
      [
        45,
        46
      ],
      [
        57,
        67
      ],
      [
        68,
        81
      ],
      [
        82,
        83
      ]
    ],
    "secondary_span": [
      [
        4,
        11
      ],
      [
        47,
        52
      ],
      [
        84,
        89
      ]
    ],
    "edits": [
      "id",
      "make id",
      "car names",
      "model greater than or equals to 2",
      "id",
      "number of rows greater than or equals to 2",
      "id",
      "make id",
      "model greater than 3",
      "id",
      "number of rows greater than 3"
    ],
    "edits_original": "< select > add id </ select > < select > remove make id </ select > < from > remove car names </ from > < where > remove model greater than or equals to 2 </ where > < groupBy > add id </ groupBy > < having > add number of rows greater than or equals to 2 </ having > < select > add id </ select > < select > remove make id </ select > < where > remove model greater than 3 </ where > < groupBy > add id </ groupBy > < having > add number of rows greater than 3 </ having >"
  },
  {
    "db_id": "network_1",
    "feedback": "There should be student id , friend table , not grade , high schooler table in step 1.",
    "question": "What is the name of the high schooler who has the greatest number of friends?",
    "gold_parse": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
    "beam": [
      [
        "SELECT name FROM Highschooler GROUP BY grade ORDER BY Count ( * ) Desc LIMIT value",
        -1.1436901092529297
      ],
      [
        "SELECT name FROM Highschooler GROUP BY grade , grade ORDER BY Count ( * ) Desc LIMIT value",
        -1.758752465248108
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id ORDER BY Count ( * ) Desc LIMIT value",
        -2.111774444580078
      ],
      [
        "SELECT name FROM Highschooler GROUP BY grade , name ORDER BY Count ( * ) Desc LIMIT value",
        -2.478680372238159
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id GROUP BY T1.grade , T2.liked_id ORDER BY Count ( * ) Desc LIMIT value",
        -2.7463693618774414
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T1.grade , T2.friend_id ORDER BY Count ( * ) Desc LIMIT value",
        -2.943875551223755
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id GROUP BY T1.grade , T2.student_id ORDER BY Count ( * ) Desc LIMIT value",
        -3.203610897064209
      ],
      [
        "SELECT name FROM Highschooler GROUP BY name , grade ORDER BY Count ( * ) Desc LIMIT value",
        -3.251126766204834
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T1.grade , T2.student_id ORDER BY Count ( * ) Desc LIMIT value",
        -3.4241175651550293
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id GROUP BY T2.student_id ORDER BY Count ( * ) Desc LIMIT value",
        -3.454984664916992
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id GROUP BY T2.liked_id ORDER BY Count ( * ) Desc LIMIT value",
        -4.110175132751465
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id , T1.grade ORDER BY Count ( * ) Desc LIMIT value",
        -4.3791704177856445
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id GROUP BY T2.liked_id , T1.grade ORDER BY Count ( * ) Desc LIMIT value",
        -5.679518699645996
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id GROUP BY T2.student_id , T1.grade ORDER BY Count ( * ) Desc LIMIT value",
        -5.806609153747559
      ],
      [
        "SELECT name FROM Highschooler GROUP BY grade , Count ( * ) ORDER BY Count ( * ) Desc LIMIT value",
        -5.920927047729492
      ],
      [
        "SELECT name FROM Highschooler GROUP BY grade , ID ORDER BY Count ( * ) Desc LIMIT value",
        -6.025552749633789
      ],
      [
        "SELECT name FROM Highschooler GROUP BY grade , * ORDER BY Count ( * ) Desc LIMIT value",
        -6.571228981018066
      ],
      [
        "SELECT name FROM Highschooler GROUP BY ID , grade ORDER BY Count ( * ) Desc LIMIT value",
        -7.672840118408203
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.friend_id ORDER BY Count ( * ) Desc LIMIT value",
        -7.7088494300842285
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.friend_id , T1.grade ORDER BY Count ( * ) Desc LIMIT value",
        -8.136776447296143
      ]
    ],
    "predicted_parse_with_values": "SELECT name FROM Highschooler GROUP BY grade ORDER BY Count ( * ) Desc LIMIT 1",
    "predicted_parse": "SELECT name FROM Highschooler GROUP BY grade ORDER BY Count ( * ) Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of grade in high schooler table",
      "Step 2: find the name in high schooler table with largest value in the results of step 1"
    ],
    "template_feedback": "in step 1 , additionally use the information from the friend table besides the high schooler table . find for each value of student id in place of grade .",
    "primary_span": [
      [
        4,
        11
      ],
      [
        18,
        24
      ]
    ],
    "secondary_span": [
      [
        12,
        17
      ],
      [
        25,
        29
      ]
    ],
    "edits": [
      "friend",
      "student id",
      "grade"
    ],
    "edits_original": "< from > add friend </ from > < groupBy > add student id </ groupBy > < groupBy > remove grade </ groupBy >"
  },
  {
    "db_id": "car_1",
    "feedback": "It should find maximum accelerate instead of maximum cylinders .",
    "question": "What is the maximum accelerate for different number of cylinders?",
    "gold_parse": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders",
    "beam": [
      [
        "SELECT Max ( Cylinders ) , Accelerate FROM cars_data GROUP BY Cylinders",
        -0.44464266300201416
      ],
      [
        "SELECT Max ( Cylinders ) , Accelerate FROM cars_data GROUP BY Accelerate",
        -2.8566237688064575
      ],
      [
        "SELECT Max ( Cylinders ) , Accelerate FROM cars_data GROUP BY Horsepower",
        -3.367989420890808
      ],
      [
        "SELECT Max ( Cylinders ) , Year FROM cars_data GROUP BY Cylinders",
        -3.4895933866500854
      ],
      [
        "SELECT Max ( T6.Cylinders ) , T1.Continent FROM continents AS T1 JOIN countries AS T2 ON T1.ContId = T2.Continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country JOIN model_list AS T4 ON T3.Id = T4.Maker JOIN car_names AS T5 ON T4.Model = T5.Model JOIN cars_data AS T6 ON T5.MakeId = T6.Id GROUP BY T6.Cylinders",
        -4.028846621513367
      ],
      [
        "SELECT Max ( Cylinders ) , MPG FROM cars_data GROUP BY Cylinders",
        -4.075272560119629
      ],
      [
        "SELECT Max ( Cylinders ) , Cylinders FROM cars_data GROUP BY Cylinders",
        -4.186443209648132
      ],
      [
        "SELECT Max ( Cylinders ) , Horsepower FROM cars_data GROUP BY Cylinders",
        -4.233616232872009
      ],
      [
        "SELECT Max ( Cylinders ) , Accelerate FROM cars_data GROUP BY Id",
        -4.275793194770813
      ],
      [
        "SELECT Max ( Cylinders ) , Accelerate FROM cars_data GROUP BY Year",
        -4.342381119728088
      ],
      [
        "SELECT Max ( Cylinders ) , Accelerate FROM cars_data GROUP BY MPG",
        -4.422330975532532
      ],
      [
        "SELECT Max ( T3.Cylinders ) , T3.Accelerate FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id GROUP BY T1.Model",
        -4.713934540748596
      ],
      [
        "SELECT Max ( Cylinders ) , Weight FROM cars_data GROUP BY Cylinders",
        -5.0100544691085815
      ],
      [
        "SELECT Max ( T4.Cylinders ) , T4.Accelerate FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id GROUP BY T1.Country",
        -5.269593358039856
      ],
      [
        "SELECT Max ( T6.Cylinders ) , T6.Accelerate FROM continents AS T1 JOIN countries AS T2 ON T1.ContId = T2.Continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country JOIN model_list AS T4 ON T3.Id = T4.Maker JOIN car_names AS T5 ON T4.Model = T5.Model JOIN cars_data AS T6 ON T5.MakeId = T6.Id GROUP BY T1.Continent",
        -5.353216290473938
      ],
      [
        "SELECT Max ( Cylinders ) , Id FROM cars_data GROUP BY Cylinders",
        -5.361525177955627
      ],
      [
        "SELECT Max ( Cylinders ) , Year FROM cars_data GROUP BY Accelerate",
        -5.364898920059204
      ],
      [
        "SELECT Max ( T4.Cylinders ) , T1.FullName FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id GROUP BY T4.Cylinders",
        -5.399341464042664
      ],
      [
        "SELECT Max ( T2.Cylinders ) , T2.Accelerate FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id GROUP BY T1.Model",
        -5.673452973365784
      ],
      [
        "SELECT Max ( Cylinders ) FROM cars_data",
        -7.202639579772949
      ]
    ],
    "predicted_parse_with_values": "SELECT Max ( Cylinders ) , Accelerate FROM cars_data GROUP BY Cylinders",
    "predicted_parse": "SELECT Max ( Cylinders ) , Accelerate FROM cars_data GROUP BY Cylinders",
    "predicted_parse_explanation": [
      "find each value of cylinders in cars data table along with the accelerate and maximum cylinders of the corresponding rows to each value"
    ],
    "template_feedback": "find maximum accelerate in place of accelerate . find cylinders in place of maximum cylinders .",
    "primary_span": [
      [
        0,
        2
      ],
      [
        8,
        9
      ]
    ],
    "secondary_span": [
      [
        3,
        7
      ],
      [
        10,
        15
      ]
    ],
    "edits": [
      "maximum accelerate",
      "cylinders",
      "maximum cylinders",
      "accelerate"
    ],
    "edits_original": "< select > add maximum accelerate </ select > < select > add cylinders </ select > < select > remove maximum cylinders </ select > < select > remove accelerate </ select >"
  },
  {
    "db_id": "tvshow",
    "feedback": "High definition tv should be replace by Pixel aspect ratio par.",
    "question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?",
    "gold_parse": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'",
    "beam": [
      [
        "SELECT Hight_definition_TV , Country FROM TV_Channel WHERE Language ! = value",
        -0.07662391662597656
      ],
      [
        "SELECT Max ( Hight_definition_TV ) , Country FROM TV_Channel WHERE Language ! = value",
        -2.6450767517089844
      ],
      [
        "SELECT Pixel_aspect_ratio_PAR , Country FROM TV_Channel WHERE Language ! = value",
        -6.155447006225586
      ],
      [
        "SELECT Max ( Pixel_aspect_ratio_PAR ) , Country FROM TV_Channel WHERE Language ! = value",
        -7.580102920532227
      ],
      [
        "SELECT Min ( Hight_definition_TV ) , Country FROM TV_Channel WHERE Language ! = value",
        -10.040350914001465
      ],
      [
        "SELECT Max ( Pay_per_view_PPV ) , Country FROM TV_Channel WHERE Language ! = value",
        -11.440179824829102
      ],
      [
        "SELECT T1.Hight_definition_TV , T1.Country FROM TV_Channel AS T1 WHERE T1.id NOT IN ( SELECT T2.Channel FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.Language = value )",
        -11.58256483078003
      ],
      [
        "SELECT T1.Hight_definition_TV , T1.Country FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Channel NOT IN ( SELECT T2.Channel FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.Language = value )",
        -11.909771919250488
      ],
      [
        "SELECT Pay_per_view_PPV , Country FROM TV_Channel WHERE Language ! = value",
        -11.99451732635498
      ],
      [
        "SELECT Count ( Hight_definition_TV ) , Country FROM TV_Channel WHERE Language ! = value",
        -12.076698303222656
      ],
      [
        "SELECT Hight_definition_TV , Country FROM TV_Channel WHERE Content ! = value",
        -12.637704849243164
      ],
      [
        "SELECT Hight_definition_TV , Country FROM TV_Channel WHERE Language < = value",
        -12.797383308410645
      ],
      [
        "SELECT Sum ( Hight_definition_TV ) , Country FROM TV_Channel WHERE Language ! = value",
        -12.83745002746582
      ],
      [
        "SELECT T1.Hight_definition_TV , T1.Country FROM TV_Channel AS T1 WHERE T1.Content NOT IN ( SELECT T2.Channel FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.Language = value )",
        -13.109682559967041
      ],
      [
        "SELECT Hight_definition_TV , Country FROM TV_Channel WHERE Language = value",
        -13.2283353805542
      ],
      [
        "SELECT Hight_definition_TV , Country , Country FROM TV_Channel WHERE Language ! = value",
        -13.311336517333984
      ],
      [
        "SELECT T2.18_49_Rating_Share , T1.Country FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.Language ! = value",
        -13.434309959411621
      ],
      [
        "SELECT Hight_definition_TV , Country , Content FROM TV_Channel WHERE Language ! = value",
        -13.480605125427246
      ],
      [
        "SELECT Avg ( Hight_definition_TV ) , Country FROM TV_Channel WHERE Language ! = value",
        -13.601302146911621
      ],
      [
        "SELECT Max ( Hight_definition_TV ) FROM TV_Channel WHERE Language ! = value",
        -13.824427604675293
      ]
    ],
    "predicted_parse_with_values": "SELECT Hight_definition_TV , Country FROM TV_Channel WHERE Language ! = \"English\"",
    "predicted_parse": "SELECT Hight_definition_TV , Country FROM TV_Channel WHERE Language ! = value",
    "predicted_parse_explanation": [
      "find the hight definition tv and country in tv channel table whose language not equals English"
    ],
    "template_feedback": "find pixel aspect ratio par in place of hight definition tv .",
    "primary_span": [
      [
        0,
        4
      ]
    ],
    "secondary_span": [
      [
        5,
        11
      ]
    ],
    "edits": [
      "pixel aspect ratio par",
      "hight definition tv"
    ],
    "edits_original": "< select > add pixel aspect ratio par </ select > < select > remove hight definition tv </ select >"
  },
  {
    "db_id": "world_1",
    "feedback": "Change continent with surface area and Also Add continent equals North America .",
    "question": "Give the total population and average surface area corresponding to countries in Noth America that have a surface area greater than 3000.",
    "gold_parse": "SELECT sum(Population) ,  avg(SurfaceArea) FROM country WHERE Continent  =  \"North America\" AND SurfaceArea  >  3000",
    "beam": [
      [
        "SELECT Sum ( Population ) , Avg ( Continent ) FROM country WHERE SurfaceArea > value",
        -1.1432247161865234
      ],
      [
        "SELECT Sum ( LifeExpectancy ) , Avg ( Continent ) FROM country WHERE SurfaceArea > value",
        -1.6425275802612305
      ],
      [
        "SELECT Sum ( LifeExpectancy ) , Sum ( Continent ) FROM country WHERE SurfaceArea > value",
        -2.2852516174316406
      ],
      [
        "SELECT Sum ( Population ) , Avg ( LifeExpectancy ) FROM country WHERE Region = value AND SurfaceArea > value",
        -2.734808921813965
      ],
      [
        "SELECT Sum ( Population ) , Sum ( Continent ) FROM country WHERE SurfaceArea > value",
        -2.922093391418457
      ],
      [
        "SELECT Sum ( Population ) , Avg ( Population ) FROM country WHERE Region = value AND SurfaceArea > value",
        -3.1629505157470703
      ],
      [
        "SELECT Sum ( LifeExpectancy ) , Continent FROM country WHERE SurfaceArea > value",
        -3.2626514434814453
      ],
      [
        "SELECT Sum ( LifeExpectancy ) , Avg ( LifeExpectancy ) FROM country WHERE Region = value AND SurfaceArea > value",
        -3.367918014526367
      ],
      [
        "SELECT Sum ( Population ) , Continent FROM country WHERE SurfaceArea > value",
        -3.4857263565063477
      ],
      [
        "SELECT Sum ( LifeExpectancy ) , Avg ( Population ) FROM country WHERE Region = value AND SurfaceArea > value",
        -3.7876243591308594
      ],
      [
        "SELECT Sum ( LifeExpectancy ) , Sum ( LifeExpectancy ) FROM country WHERE Region = value AND SurfaceArea > value",
        -4.362936019897461
      ],
      [
        "SELECT Sum ( LifeExpectancy ) , Sum ( Population ) FROM country WHERE Region = value AND SurfaceArea > value",
        -4.736677169799805
      ],
      [
        "SELECT Sum ( Population ) , Sum ( LifeExpectancy ) FROM country WHERE Region = value AND SurfaceArea > value",
        -4.794245719909668
      ],
      [
        "SELECT Sum ( Population ) , Avg ( LifeExpectancy ) FROM country WHERE SurfaceArea > value",
        -4.994254112243652
      ],
      [
        "SELECT Sum ( Population ) , Sum ( Population ) FROM country WHERE Region = value AND SurfaceArea > value",
        -5.1809587478637695
      ],
      [
        "SELECT Sum ( Population ) , Avg ( Population ) FROM country WHERE SurfaceArea > value",
        -5.340583801269531
      ],
      [
        "SELECT Sum ( LifeExpectancy ) , Avg ( LifeExpectancy ) FROM country WHERE SurfaceArea > value",
        -5.461203575134277
      ],
      [
        "SELECT Sum ( Population ) , Avg ( LifeExpectancy ) FROM country WHERE Name = value AND SurfaceArea > value",
        -5.47403621673584
      ],
      [
        "SELECT Sum ( LifeExpectancy ) , Avg ( Population ) FROM country WHERE SurfaceArea > value",
        -5.625357627868652
      ],
      [
        "SELECT Sum ( Population ) , Avg ( Continent ) FROM country WHERE SurfaceArea > value AND Region = value",
        -5.793304443359375
      ]
    ],
    "predicted_parse_with_values": "SELECT Sum ( Population ) , Avg ( Continent ) FROM country WHERE SurfaceArea > 3000",
    "predicted_parse": "SELECT Sum ( Population ) , Avg ( Continent ) FROM country WHERE SurfaceArea > value",
    "predicted_parse_explanation": [
      "find the summation of population and average continent in country table whose surface area greater than 3000"
    ],
    "template_feedback": "additionally make sure that continent equals North America . find average surface area in place of average continent .",
    "primary_span": [
      [
        0,
        8
      ],
      [
        9,
        12
      ]
    ],
    "secondary_span": [
      [
        13,
        18
      ]
    ],
    "edits": [
      "average surface area",
      "average continent",
      "continent equals \"North America\""
    ],
    "edits_original": "< select > add average surface area </ select > < select > remove average continent </ select > < where > add continent equals \" North America \" </ where >"
  },
  {
    "db_id": "car_1",
    "feedback": "In step 2 Replace country name of countries table with country of car makers table .",
    "question": "What are the names of the countries with no car makers?",
    "gold_parse": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country",
    "beam": [
      [
        "SELECT CountryName FROM countries EXCEPT SELECT CountryName FROM countries",
        -0.02883148193359375
      ],
      [
        "SELECT T1.CountryName FROM countries AS T1 WHERE T1.CountryId NOT IN ( SELECT T2.Country FROM car_makers AS T2 )",
        -3.6799755096435547
      ],
      [
        "SELECT T1.CountryName FROM countries AS T1 EXCEPT SELECT T2.Country FROM car_makers AS T2",
        -5.807099342346191
      ],
      [
        "SELECT T1.CountryName FROM countries AS T1 EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country WHERE T2.Maker = value",
        -9.592470169067383
      ],
      [
        "SELECT T1.CountryName FROM countries AS T1 EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country WHERE T2.FullName = value",
        -10.237130641937256
      ],
      [
        "SELECT T1.CountryName FROM countries AS T1 EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country JOIN model_list AS T3 ON T2.Id = T3.Maker WHERE T3.Model = value",
        -10.277656078338623
      ],
      [
        "SELECT T1.CountryName FROM countries AS T1 UNION SELECT T2.Country FROM car_makers AS T2",
        -11.914612770080566
      ],
      [
        "SELECT T1.CountryName FROM countries AS T1 WHERE T1.CountryId = ( SELECT T2.Country FROM car_makers AS T2 ) EXCEPT SELECT T1.CountryName FROM countries AS T1",
        -12.153267860412598
      ],
      [
        "SELECT T1.CountryName FROM countries AS T1 EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country JOIN model_list AS T3 ON T2.Id = T3.Maker JOIN car_names AS T4 ON T3.Model = T4.Model WHERE T4.Model = value",
        -12.540672063827515
      ],
      [
        "SELECT T1.CountryName FROM countries AS T1 EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country JOIN model_list AS T3 ON T2.Id = T3.Maker WHERE T3.ModelId = value",
        -12.928706645965576
      ],
      [
        "SELECT Continent FROM countries EXCEPT SELECT CountryName FROM countries",
        -12.971336364746094
      ],
      [
        "SELECT DISTINCT CountryName FROM countries EXCEPT SELECT CountryName FROM countries",
        -13.0205078125
      ],
      [
        "SELECT CountryName FROM countries EXCEPT SELECT CountryName FROM countries ORDER BY CountryId Asc LIMIT value",
        -13.108843922615051
      ],
      [
        "SELECT CountryName FROM countries GROUP BY CountryId HAVING Count ( * ) < = value",
        -13.534857749938965
      ],
      [
        "SELECT T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country WHERE T2.FullName ! = value",
        -13.559805631637573
      ],
      [
        "SELECT CountryName FROM countries WHERE CountryId ! = value",
        -13.747509956359863
      ],
      [
        "SELECT T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country WHERE T2.Maker ! = value",
        -13.811063051223755
      ],
      [
        "SELECT CountryName FROM countries EXCEPT SELECT DISTINCT CountryName FROM countries",
        -13.906086921691895
      ],
      [
        "SELECT CountryName FROM countries LIMIT value EXCEPT SELECT CountryName FROM countries",
        -14.158217430114746
      ],
      [
        "SELECT CountryName FROM countries",
        -14.81346321105957
      ]
    ],
    "predicted_parse_with_values": "SELECT CountryName FROM countries EXCEPT SELECT CountryName FROM countries",
    "predicted_parse": "SELECT CountryName FROM countries EXCEPT SELECT CountryName FROM countries",
    "predicted_parse_explanation": [
      "Step 1: find the country name in countries table",
      "Step 2: find the country name in countries table",
      "Step 3: show the rows that are in the results of step 1 but not in the results of step 2"
    ],
    "template_feedback": "in step 2 , additionally use the information from the car makers table besides the countries table .",
    "primary_span": [
      [
        4,
        12
      ]
    ],
    "secondary_span": [
      [
        13,
        17
      ]
    ],
    "edits": [
      "car makers"
    ],
    "edits_original": "< from > add car makers </ from >"
  },
  {
    "db_id": "world_1",
    "feedback": "i want the name in-place of local name.",
    "question": "Which continent is Anguilla in?",
    "gold_parse": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"",
    "beam": [
      [
        "SELECT Continent FROM country WHERE LocalName = value",
        -0.056252479553222656
      ],
      [
        "SELECT Continent FROM country WHERE Name = value",
        -2.9063615798950195
      ],
      [
        "SELECT Continent FROM country",
        -11.148886680603027
      ],
      [
        "SELECT Continent FROM country WHERE LocalName LIKE value",
        -12.752240180969238
      ],
      [
        "SELECT Continent , LocalName FROM country WHERE LocalName = value",
        -12.857470512390137
      ],
      [
        "SELECT Continent FROM country WHERE Name LIKE value",
        -13.20645809173584
      ],
      [
        "SELECT DISTINCT Continent FROM country WHERE LocalName = value",
        -14.688799858093262
      ],
      [
        "SELECT Continent FROM country WHERE Name = Continent",
        -14.71208381652832
      ],
      [
        "SELECT Continent FROM country WHERE Region = value",
        -15.087580680847168
      ],
      [
        "SELECT Continent , Name FROM country WHERE LocalName = value",
        -15.709020137786865
      ],
      [
        "SELECT Continent FROM country GROUP BY Continent HAVING Count ( * ) = value",
        -15.937651634216309
      ],
      [
        "SELECT Name FROM country WHERE LocalName = value",
        -15.959452629089355
      ],
      [
        "SELECT Continent , LocalName FROM country WHERE Name = value",
        -16.02473545074463
      ],
      [
        "SELECT Continent FROM country WHERE Continent IN ( SELECT Continent FROM country WHERE LocalName = value )",
        -16.454362392425537
      ],
      [
        "SELECT Count ( Continent ) FROM country WHERE LocalName = value",
        -16.53171730041504
      ],
      [
        "SELECT Continent FROM country WHERE Continent = value",
        -16.55413246154785
      ],
      [
        "SELECT Continent FROM country WHERE LocalName < value",
        -16.701828002929688
      ],
      [
        "SELECT Continent FROM country WHERE LocalName > value",
        -16.73611068725586
      ],
      [
        "SELECT Continent FROM country WHERE SurfaceArea = value",
        -16.794937133789062
      ],
      [
        "SELECT DISTINCT Continent FROM country WHERE LocalName = value",
        -16.80219554901123
      ]
    ],
    "predicted_parse_with_values": "SELECT Continent FROM country WHERE LocalName = \"Anguilla\"",
    "predicted_parse": "SELECT Continent FROM country WHERE LocalName = value",
    "predicted_parse_explanation": [
      "find the continent in country table whose local name equals Anguilla"
    ],
    "template_feedback": "consider the name equals Anguilla conditions in place of the local name equals Anguilla conditions .",
    "primary_span": [
      [
        0,
        5
      ]
    ],
    "secondary_span": [
      [
        6,
        15
      ]
    ],
    "edits": [
      "name equals \"Anguilla\"",
      "local name equals \"Anguilla\""
    ],
    "edits_original": "< where > add name equals \" Anguilla \" </ where > < where > remove local name equals \" Anguilla \" </ where >"
  },
  {
    "db_id": "wta_1",
    "feedback": "You have to use the age of winner.",
    "question": "What are the average ages of losers and winners across matches?",
    "gold_parse": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches",
    "beam": [
      [
        "SELECT Avg ( loser_age ) , Avg ( loser_age ) FROM matches",
        -0.5658998489379883
      ],
      [
        "SELECT Avg ( loser_age ) , Avg ( winner_age ) FROM matches",
        -0.9338359832763672
      ],
      [
        "SELECT Avg ( winner_age ) , Avg ( loser_age ) FROM matches",
        -3.8521547317504883
      ],
      [
        "SELECT Avg ( winner_age ) , Avg ( winner_age ) FROM matches",
        -4.431907653808594
      ],
      [
        "SELECT Avg ( loser_age ) , Avg ( loser_entry ) FROM matches",
        -5.69521427154541
      ],
      [
        "SELECT Avg ( loser_age ) , Count ( * ) FROM matches",
        -7.504897117614746
      ],
      [
        "SELECT Avg ( loser_age ) , Avg ( winner_rank ) FROM matches",
        -7.638041019439697
      ],
      [
        "SELECT Avg ( loser_age ) , Avg ( loser_rank ) FROM matches",
        -8.061271667480469
      ],
      [
        "SELECT Avg ( loser_age ) , loser_entry FROM matches",
        -8.107596397399902
      ],
      [
        "SELECT Avg ( loser_age ) , Count ( winner_age ) FROM matches",
        -8.654053211212158
      ],
      [
        "SELECT Avg ( loser_age ) , Min ( loser_age ) FROM matches",
        -9.159065246582031
      ],
      [
        "SELECT Avg ( loser_age ) , Min ( winner_age ) FROM matches",
        -9.305296897888184
      ],
      [
        "SELECT Avg ( loser_age ) , Count ( loser_age ) FROM matches",
        -9.584367752075195
      ],
      [
        "SELECT Avg ( loser_age ) , Avg ( draw_size ) FROM matches",
        -9.600398063659668
      ],
      [
        "SELECT Avg ( loser_age ) , Max ( loser_age ) FROM matches",
        -9.74824333190918
      ],
      [
        "SELECT Avg ( loser_age ) , Sum ( loser_age ) FROM matches",
        -9.759367942810059
      ],
      [
        "SELECT Avg ( winner_age ) , Avg ( loser_entry ) FROM matches",
        -9.794979572296143
      ],
      [
        "SELECT Avg ( loser_age ) , Sum ( winner_age ) FROM matches",
        -10.057157516479492
      ],
      [
        "SELECT Avg ( loser_age ) , Max ( winner_age ) FROM matches",
        -10.288636207580566
      ],
      [
        "SELECT Avg ( loser_age ) FROM matches",
        -12.327484130859375
      ]
    ],
    "predicted_parse_with_values": "SELECT Avg ( loser_age ) , Avg ( loser_age ) FROM matches",
    "predicted_parse": "SELECT Avg ( loser_age ) , Avg ( loser_age ) FROM matches",
    "predicted_parse_explanation": [
      "find the average loser age and average loser age in matches table"
    ],
    "template_feedback": "additionally find average winner age .",
    "primary_span": [
      [
        0,
        5
      ]
    ],
    "secondary_span": [],
    "edits": [
      "average winner age",
      "average loser age"
    ],
    "edits_original": "< select > add average winner age </ select > < select > remove average loser age </ select >"
  },
  {
    "db_id": "dog_kennels",
    "feedback": "i want the total of charge amount and total cost of treatment from treatments table.",
    "question": "Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.",
    "gold_parse": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1",
    "beam": [
      [
        "SELECT T2.owner_id , T2.zip_code FROM Charges AS T1 JOIN Owners AS T2 GROUP BY T2.owner_id ORDER BY Sum ( T1.charge_amount ) Desc LIMIT value",
        -0.002071380615234375
      ],
      [
        "SELECT T2.owner_id , T2.zip_code FROM Charges AS T1 JOIN Owners AS T2 GROUP BY T2.first_name ORDER BY Sum ( T1.charge_amount ) Desc LIMIT value",
        -7.018154621124268
      ],
      [
        "SELECT T2.owner_id , T2.zip_code FROM Charges AS T1 JOIN Owners AS T2 GROUP BY T2.zip_code ORDER BY Sum ( T1.charge_amount ) Desc LIMIT value",
        -7.656525135040283
      ],
      [
        "SELECT T2.owner_id , Sum ( T2.zip_code ) FROM Charges AS T1 JOIN Owners AS T2 GROUP BY T2.owner_id ORDER BY Sum ( T1.charge_amount ) Desc LIMIT value",
        -8.040052890777588
      ],
      [
        "SELECT T2.owner_id , T2.zip_code FROM Charges AS T1 JOIN Owners AS T2 JOIN Dogs AS T3 GROUP BY T3.owner_id ORDER BY Sum ( T1.charge_amount ) Desc LIMIT value",
        -9.034842491149902
      ],
      [
        "SELECT T2.owner_id , T2.zip_code FROM Charges AS T1 JOIN Owners AS T2 GROUP BY T2.state ORDER BY Sum ( T1.charge_amount ) Desc LIMIT value",
        -10.045135498046875
      ],
      [
        "SELECT T2.owner_id , T2.zip_code FROM Charges AS T1 JOIN Owners AS T2 JOIN Professionals AS T3 GROUP BY T3.first_name ORDER BY Sum ( T1.charge_amount ) Desc LIMIT value",
        -10.194873809814453
      ],
      [
        "SELECT T2.owner_id , T2.zip_code FROM Charges AS T1 JOIN Owners AS T2 GROUP BY T2.last_name ORDER BY Sum ( T1.charge_amount ) Desc LIMIT value",
        -10.336492538452148
      ],
      [
        "SELECT T2.owner_id , T2.zip_code FROM Charges AS T1 JOIN Owners AS T2 JOIN Dogs AS T3 GROUP BY T3.name ORDER BY Sum ( T1.charge_amount ) Desc LIMIT value",
        -10.879497528076172
      ],
      [
        "SELECT T2.owner_id , T2.zip_code FROM Charges AS T1 JOIN Owners AS T2 GROUP BY T1.charge_id ORDER BY Sum ( T1.charge_amount ) Desc LIMIT value",
        -11.18924331665039
      ],
      [
        "SELECT owner_id , zip_code FROM Owners GROUP BY owner_id ORDER BY Count ( * ) Desc LIMIT value",
        -11.220059394836426
      ],
      [
        "SELECT T2.owner_id , T2.zip_code FROM Charges AS T1 JOIN Owners AS T2 GROUP BY T1.charge_type ORDER BY Sum ( T1.charge_amount ) Desc LIMIT value",
        -11.301244735717773
      ],
      [
        "SELECT T2.owner_id , T2.zip_code FROM Charges AS T1 JOIN Owners AS T2 JOIN Dogs AS T3 GROUP BY T3.dog_id ORDER BY Sum ( T1.charge_amount ) Desc LIMIT value",
        -11.43316650390625
      ],
      [
        "SELECT T2.owner_id , T2.zip_code FROM Charges AS T1 JOIN Owners AS T2 JOIN Professionals AS T3 GROUP BY T3.state ORDER BY Sum ( T1.charge_amount ) Desc LIMIT value",
        -12.026834487915039
      ],
      [
        "SELECT T2.owner_id , T2.zip_code FROM Charges AS T1 JOIN Owners AS T2 JOIN Dogs AS T3 GROUP BY T3.size_code ORDER BY Sum ( T1.charge_amount ) Desc LIMIT value",
        -12.151188850402832
      ],
      [
        "SELECT T2.owner_id , T2.zip_code FROM Charges AS T1 JOIN Owners AS T2 GROUP BY T2.owner_id ORDER BY Sum ( T1.charge_amount ) Desc",
        -12.258063316345215
      ],
      [
        "SELECT T2.owner_id , T2.zip_code FROM Charges AS T1 JOIN Owners AS T2 GROUP BY T2.email_address ORDER BY Sum ( T1.charge_amount ) Desc LIMIT value",
        -12.606843948364258
      ],
      [
        "SELECT T2.owner_id , T2.zip_code FROM Charges AS T1 JOIN Owners AS T2 GROUP BY T2.city ORDER BY Sum ( T1.charge_amount ) Desc LIMIT value",
        -12.618978500366211
      ],
      [
        "SELECT T2.owner_id , T2.zip_code FROM Charges AS T1 JOIN Owners AS T2 GROUP BY * ORDER BY Sum ( T1.charge_amount ) Desc LIMIT value",
        -12.632437705993652
      ],
      [
        "SELECT T3.owner_id , T3.zip_code FROM Charges AS T1 JOIN Treatment_Types AS T2 JOIN Owners AS T3 GROUP BY T2.treatment_type_description ORDER BY Sum ( T1.charge_amount ) Desc LIMIT value",
        -12.689714431762695
      ]
    ],
    "predicted_parse_with_values": "SELECT T2.owner_id , T2.zip_code FROM Charges AS T1 JOIN Owners AS T2 GROUP BY T2.owner_id ORDER BY Sum ( T1.charge_amount ) Desc LIMIT 1",
    "predicted_parse": "SELECT T2.owner_id , T2.zip_code FROM Charges AS T1 JOIN Owners AS T2 GROUP BY T2.owner_id ORDER BY Sum ( T1.charge_amount ) Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: for each row in charges table , find the corresponding rows in owners table",
      "Step 2: find the summation of charge amount of each value of owner id of the results of step 1",
      "Step 3: find the owner id and zip code of the results of step 1 with largest value in the results of step 2"
    ],
    "template_feedback": "in step 1 , use treatments table and dogs table in place of charges table in step 3 , order the results by summation of cost of treatment in place of summation of charge amount .",
    "primary_span": [
      [
        4,
        9
      ],
      [
        19,
        27
      ]
    ],
    "secondary_span": [
      [
        10,
        14
      ],
      [
        28,
        35
      ]
    ],
    "edits": [
      "dogs",
      "treatments",
      "charges",
      "summation of cost of treatment",
      "summation of charge amount"
    ],
    "edits_original": "< from > add dogs </ from > < from > add treatments </ from > < from > remove charges </ from > < orderBy > add summation of cost of treatment </ orderBy > < orderBy > remove summation of charge amount </ orderBy >"
  },
  {
    "db_id": "student_transcripts_tracking",
    "feedback": "sections table must be used in place of courses table in step 1.",
    "question": "What are the names and ids of every course with less than 2 sections?",
    "gold_parse": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2",
    "beam": [
      [
        "SELECT course_name , course_id FROM Courses GROUP BY course_id HAVING Count ( * ) < value",
        -0.000957489013671875
      ],
      [
        "SELECT course_name , course_id FROM Courses GROUP BY course_id HAVING Count ( * ) BETWEEN value AND value",
        -7.511571884155273
      ],
      [
        "SELECT T1.course_name , T1.course_id FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id HAVING Count ( * ) < value",
        -8.328014373779297
      ],
      [
        "SELECT course_name , course_id FROM Courses GROUP BY course_id HAVING Sum ( course_description ) < value",
        -10.227709770202637
      ],
      [
        "SELECT course_name , course_id FROM Courses GROUP BY course_id HAVING Count ( * ) > = value",
        -12.157052040100098
      ],
      [
        "SELECT course_name , course_id FROM Courses GROUP BY course_id HAVING Count ( * ) > value",
        -12.311075210571289
      ],
      [
        "SELECT course_name , course_id FROM Courses GROUP BY course_id HAVING Count ( * ) LIKE value",
        -12.45418930053711
      ],
      [
        "SELECT course_name , course_id FROM Courses GROUP BY course_id HAVING Count ( * ) < value UNION SELECT course_name , course_id FROM Courses GROUP BY course_id HAVING Count ( * ) < value",
        -12.4934720993042
      ],
      [
        "SELECT course_name , course_id FROM Courses GROUP BY course_id HAVING Count ( course_description ) < value",
        -12.70663833618164
      ],
      [
        "SELECT course_name FROM Courses GROUP BY course_id HAVING Count ( * ) < value",
        -13.41817569732666
      ],
      [
        "SELECT T2.section_name , T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id HAVING Count ( * ) < value",
        -13.680769920349121
      ],
      [
        "SELECT course_name , course_id , course_id FROM Courses GROUP BY course_id HAVING Count ( * ) < value",
        -13.768489360809326
      ],
      [
        "SELECT T1.course_name , T2.course_id FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id HAVING Count ( * ) < value",
        -13.790093421936035
      ],
      [
        "SELECT course_name , course_id FROM Courses GROUP BY course_id HAVING Min ( course_description ) < value",
        -13.998152017593384
      ],
      [
        "SELECT course_name , course_id FROM Courses GROUP BY course_id HAVING course_description < value",
        -14.142870903015137
      ],
      [
        "SELECT course_name , course_id FROM Courses WHERE course_description = value GROUP BY course_id HAVING Count ( * ) < value",
        -14.360413074493408
      ],
      [
        "SELECT course_name , course_name FROM Courses GROUP BY course_id HAVING Count ( * ) < value",
        -14.457232475280762
      ],
      [
        "SELECT course_name , course_id FROM Courses GROUP BY course_id HAVING Avg ( course_description ) < value",
        -14.566494464874268
      ],
      [
        "SELECT course_name , course_id FROM Courses GROUP BY course_id HAVING Count ( * ) IN ( SELECT course_id FROM Courses )",
        -15.17064905166626
      ],
      [
        "SELECT course_name , course_id FROM Courses",
        -15.79244613647461
      ]
    ],
    "predicted_parse_with_values": "SELECT course_name , course_id FROM Courses GROUP BY course_id HAVING Count ( * ) < 2",
    "predicted_parse": "SELECT course_name , course_id FROM Courses GROUP BY course_id HAVING Count ( * ) < value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of course id in courses table",
      "Step 2: find the course name and course id in courses table whose corresponding value in step 1 is less than 2"
    ],
    "template_feedback": "in step 1 , additionally use the information from the sections table besides the courses table . in step 2 , make sure that the corresponding value in step 1 less than or equals 2 .",
    "primary_span": [
      [
        4,
        11
      ],
      [
        21,
        35
      ]
    ],
    "secondary_span": [
      [
        12,
        16
      ]
    ],
    "edits": [
      "sections",
      "number of rows less than or equals to 2",
      "number of rows less than 2"
    ],
    "edits_original": "< from > add sections </ from > < having > add number of rows less than or equals to 2 </ having > < having > remove number of rows less than 2 </ having >"
  },
  {
    "db_id": "car_1",
    "feedback": "Ensure year equals 1974 and cylinders equals 8.",
    "question": "What is the smallest weight of the car produced with 8 cylinders on 1974?",
    "gold_parse": "SELECT Weight FROM CARS_DATA WHERE Cylinders  =  4 AND YEAR  =  1974 ORDER BY Weight ASC LIMIT 1",
    "beam": [
      [
        "SELECT Min ( Weight ) FROM cars_data WHERE Year = value",
        -0.022150039672851562
      ],
      [
        "SELECT Min ( Weight ) FROM cars_data WHERE Cylinders < value",
        -4.269918441772461
      ],
      [
        "SELECT Weight FROM cars_data WHERE Year = value",
        -5.872053146362305
      ],
      [
        "SELECT Min ( Weight ) FROM cars_data WHERE Year < value",
        -6.450606346130371
      ],
      [
        "SELECT Weight FROM cars_data WHERE Year = value ORDER BY Cylinders Asc LIMIT value",
        -7.328998565673828
      ],
      [
        "SELECT Min ( Weight ) FROM cars_data WHERE Year = value AND Year = value",
        -7.534052848815918
      ],
      [
        "SELECT Weight FROM cars_data WHERE Year = value ORDER BY Cylinders Asc",
        -7.763263702392578
      ],
      [
        "SELECT Min ( Weight ) FROM cars_data WHERE Cylinders < ( SELECT Min ( Cylinders ) FROM cars_data WHERE Year = value )",
        -7.982621192932129
      ],
      [
        "SELECT Weight FROM cars_data WHERE Cylinders < value",
        -8.112634658813477
      ],
      [
        "SELECT Min ( Weight ) FROM cars_data WHERE Cylinders = ( SELECT Min ( Cylinders ) FROM cars_data WHERE Year = value )",
        -8.16540813446045
      ],
      [
        "SELECT Avg ( Weight ) FROM cars_data WHERE Year = value",
        -8.463534355163574
      ],
      [
        "SELECT Min ( Weight ) FROM cars_data WHERE Cylinders = value",
        -8.75720500946045
      ],
      [
        "SELECT Min ( Weight ) FROM cars_data WHERE Year = value ORDER BY Cylinders Asc LIMIT value",
        -9.228682041168213
      ],
      [
        "SELECT Min ( Weight ) FROM cars_data WHERE Cylinders = ( SELECT Min ( Cylinders ) FROM cars_data )",
        -9.254405975341797
      ],
      [
        "SELECT Weight FROM cars_data WHERE Year < value",
        -9.406883239746094
      ],
      [
        "SELECT Min ( Weight ) FROM cars_data WHERE Year = value ORDER BY Cylinders Asc",
        -9.708112239837646
      ],
      [
        "SELECT Min ( Weight ) FROM cars_data WHERE Year = value AND Cylinders = value",
        -11.001052856445312
      ],
      [
        "SELECT Min ( Weight ) FROM cars_data WHERE Year LIKE value",
        -11.42602252960205
      ],
      [
        "SELECT Min ( T3.Weight ) FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T1.Model = value",
        -11.507684707641602
      ],
      [
        "SELECT Max ( Weight ) FROM cars_data WHERE Year = value",
        -11.841279983520508
      ]
    ],
    "predicted_parse_with_values": "SELECT Min ( Weight ) FROM cars_data WHERE Year = 1",
    "predicted_parse": "SELECT Min ( Weight ) FROM cars_data WHERE Year = value",
    "predicted_parse_explanation": [
      "find the minimum weight in cars data table whose year equals 1"
    ],
    "template_feedback": "consider the cylinders equals 4 and year equals 1974 conditions in place of the year equals 1 conditions . find weight in place of minimum weight . find the result with the smallest weight .",
    "primary_span": [
      [
        0,
        9
      ],
      [
        19,
        20
      ],
      [
        27,
        34
      ]
    ],
    "secondary_span": [
      [
        10,
        18
      ],
      [
        21,
        26
      ]
    ],
    "edits": [
      "weight",
      "minimum weight",
      "cylinders equals 4",
      "year equals 1974",
      "year equals 1",
      "weight",
      "1"
    ],
    "edits_original": "< select > add weight </ select > < select > remove minimum weight </ select > < where > add cylinders equals 4 </ where > < where > add year equals 1974 </ where > < where > remove year equals 1 </ where > < orderBy > add weight </ orderBy > < limit > add 1 </ limit >"
  },
  {
    "db_id": "flight_2",
    "feedback": "You need to find rows count of flights for United airlines having Aberdeen as a destination airline.",
    "question": "How many United Airlines flights go to City 'Aberdeen'?",
    "gold_parse": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"",
    "beam": [
      [
        "SELECT Count ( * ) FROM airports WHERE Country = value AND City = value",
        -0.29172325134277344
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE City = value AND City = value",
        -2.0444717407226562
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE AirportName = value AND City = value",
        -3.044674873352051
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE City = value",
        -3.164240837097168
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE Country = value AND AirportName = value",
        -3.756077766418457
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE City = value AND AirportName = value",
        -5.84067440032959
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE CountryAbbrev = value AND City = value",
        -6.251038551330566
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE AirportName = value AND AirportName = value",
        -6.549266815185547
      ],
      [
        "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value AND T1.Airline = value",
        -6.909350395202637
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE AirportName = value",
        -6.922629356384277
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE Country = value",
        -7.233105659484863
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE Country = value AND Country = value",
        -8.086799144744873
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE Country = value AND CountryAbbrev = value",
        -8.208579540252686
      ],
      [
        "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.City = value AND T1.Airline = value",
        -8.68086862564087
      ],
      [
        "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value AND T1.Abbreviation = value",
        -8.699493408203125
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE CountryAbbrev = value",
        -12.590426445007324
      ],
      [
        "SELECT Count ( * ) FROM airlines WHERE Country = value",
        -15.311724662780762
      ],
      [
        "SELECT Count ( * ) FROM airlines WHERE Airline = value",
        -15.401689529418945
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE AirportName > value",
        -15.786353588104248
      ],
      [
        "SELECT Country FROM airports WHERE City = value",
        -16.005955696105957
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM airports WHERE Country = \"Aberdeen\" AND City = \"United Airlines\"",
    "predicted_parse": "SELECT Count ( * ) FROM airports WHERE Country = value AND City = value",
    "predicted_parse_explanation": [
      "find the number of rows in airports table whose country equals Aberdeen and city equals United Airlines"
    ],
    "template_feedback": "additionally use the information from the flights table and airlines table besides the airports table . consider the airlines 's airline name equals United Airlines and city equals Aberdeen conditions in place of the city equals United Airlines and airports 's country equals Aberdeen conditions .",
    "primary_span": [
      [
        0,
        10
      ],
      [
        16,
        29
      ]
    ],
    "secondary_span": [
      [
        11,
        15
      ],
      [
        30,
        45
      ]
    ],
    "edits": [
      "flights",
      "airlines",
      "city equals \"Aberdeen\"",
      "airline name equals \"United Airlines\"",
      "country equals \"Aberdeen\"",
      "city equals \"United Airlines\""
    ],
    "edits_original": "< from > add flights </ from > < from > add airlines </ from > < where > add city equals \" Aberdeen \" </ where > < where > add airline name equals \" United Airlines \" </ where > < where > remove country equals \" Aberdeen \" </ where > < where > remove city equals \" United Airlines \" </ where >"
  },
  {
    "db_id": "student_transcripts_tracking",
    "feedback": "Replace first \"transcript id\" with Transcripts's transcript date in step 2.",
    "question": "Show the date of the transcript which shows the least number of results, also list the id.",
    "gold_parse": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1",
    "beam": [
      [
        "SELECT transcript_id , transcript_id FROM Transcript_Contents GROUP BY transcript_id ORDER BY Count ( * ) Asc LIMIT value",
        -0.7131619453430176
      ],
      [
        "SELECT T1.transcript_date , T2.transcript_id FROM Transcripts AS T1 JOIN Transcript_Contents AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T2.transcript_id ORDER BY Count ( * ) Asc LIMIT value",
        -0.7593364715576172
      ],
      [
        "SELECT transcript_id , student_course_id FROM Transcript_Contents GROUP BY transcript_id ORDER BY Count ( * ) Asc LIMIT value",
        -4.070119380950928
      ],
      [
        "SELECT T2.transcript_id , T1.transcript_id FROM Transcripts AS T1 JOIN Transcript_Contents AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T2.transcript_id ORDER BY Count ( * ) Asc LIMIT value",
        -4.559064626693726
      ],
      [
        "SELECT T2.transcript_id , T1.transcript_date FROM Transcripts AS T1 JOIN Transcript_Contents AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T2.transcript_id ORDER BY Count ( * ) Asc LIMIT value",
        -4.806272029876709
      ],
      [
        "SELECT T1.transcript_id , T2.transcript_id FROM Transcripts AS T1 JOIN Transcript_Contents AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T2.transcript_id ORDER BY Count ( * ) Asc LIMIT value",
        -5.415859222412109
      ],
      [
        "SELECT T2.transcript_id , T1.other_details FROM Transcripts AS T1 JOIN Transcript_Contents AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T2.transcript_id ORDER BY Count ( * ) Asc LIMIT value",
        -6.969003677368164
      ],
      [
        "SELECT T1.transcript_date , T1.transcript_id FROM Transcripts AS T1 JOIN Transcript_Contents AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T2.transcript_id ORDER BY Count ( * ) Asc LIMIT value",
        -8.747340202331543
      ],
      [
        "SELECT transcript_id , Count ( * ) FROM Transcript_Contents GROUP BY transcript_id ORDER BY Count ( * ) Asc LIMIT value",
        -9.502397537231445
      ],
      [
        "SELECT transcript_id , transcript_id FROM Transcript_Contents GROUP BY transcript_id ORDER BY Count ( * ) Desc LIMIT value",
        -9.840636730194092
      ],
      [
        "SELECT T1.transcript_date , T2.transcript_id FROM Transcripts AS T1 JOIN Transcript_Contents AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T2.transcript_id ORDER BY Count ( * ) Desc LIMIT value",
        -10.000777244567871
      ],
      [
        "SELECT T1.transcript_id , T1.transcript_id FROM Transcripts AS T1 JOIN Transcript_Contents AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T2.transcript_id ORDER BY Count ( * ) Asc LIMIT value",
        -10.015482902526855
      ],
      [
        "SELECT T1.transcript_id , T1.transcript_date FROM Transcripts AS T1 JOIN Transcript_Contents AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T2.transcript_id ORDER BY Count ( * ) Asc LIMIT value",
        -10.054151058197021
      ],
      [
        "SELECT T3.transcript_id , T1.student_enrolment_id FROM Student_Enrolment AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.student_enrolment_id = T2.student_enrolment_id JOIN Transcript_Contents AS T3 ON T2.student_course_id = T3.student_course_id GROUP BY T3.transcript_id ORDER BY Count ( * ) Asc LIMIT value",
        -10.05655574798584
      ],
      [
        "SELECT T1.transcript_date , T1.transcript_date FROM Transcripts AS T1 JOIN Transcript_Contents AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T2.transcript_id ORDER BY Count ( * ) Asc LIMIT value",
        -10.33155632019043
      ],
      [
        "SELECT * , transcript_id FROM Transcript_Contents GROUP BY transcript_id ORDER BY Count ( * ) Asc LIMIT value",
        -10.593738555908203
      ],
      [
        "SELECT student_course_id , transcript_id FROM Transcript_Contents GROUP BY transcript_id ORDER BY Count ( * ) Asc LIMIT value",
        -10.67963695526123
      ],
      [
        "SELECT T1.transcript_id , T2.student_course_id FROM Transcripts AS T1 JOIN Transcript_Contents AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T2.transcript_id ORDER BY Count ( * ) Asc LIMIT value",
        -10.718351364135742
      ],
      [
        "SELECT T3.transcript_id , T1.other_details FROM Student_Enrolment AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.student_enrolment_id = T2.student_enrolment_id JOIN Transcript_Contents AS T3 ON T2.student_course_id = T3.student_course_id GROUP BY T3.transcript_id ORDER BY Count ( * ) Asc LIMIT value",
        -10.73871898651123
      ],
      [
        "SELECT T3.transcript_id , T1.semester_id FROM Student_Enrolment AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.student_enrolment_id = T2.student_enrolment_id JOIN Transcript_Contents AS T3 ON T2.student_course_id = T3.student_course_id GROUP BY T3.transcript_id ORDER BY Count ( * ) Asc LIMIT value",
        -10.864998817443848
      ]
    ],
    "predicted_parse_with_values": "SELECT transcript_id , transcript_id FROM Transcript_Contents GROUP BY transcript_id ORDER BY Count ( * ) Asc LIMIT 1",
    "predicted_parse": "SELECT transcript_id , transcript_id FROM Transcript_Contents GROUP BY transcript_id ORDER BY Count ( * ) Asc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of transcript id in transcript contents table",
      "Step 2: find the transcript id and transcript id in transcript contents table with smallest value in the results of step 1"
    ],
    "template_feedback": "in step 1 , additionally use the information from the transcripts table besides the transcript contents table . in step 2 , additionally find transcript date .",
    "primary_span": [
      [
        4,
        11
      ],
      [
        22,
        26
      ]
    ],
    "secondary_span": [
      [
        12,
        17
      ]
    ],
    "edits": [
      "transcript date",
      "transcript id",
      "transcripts"
    ],
    "edits_original": "< select > add transcript date </ select > < select > remove transcript id </ select > < from > add transcripts </ from >"
  },
  {
    "db_id": "orchestra",
    "feedback": "I want the orchestra's record company in step 2.",
    "question": "How many orchestras does each record company manage?",
    "gold_parse": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company",
    "beam": [
      [
        "SELECT Count ( * ) , T1.Record_Company FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID GROUP BY T2.Orchestra_ID",
        -0.35882568359375
      ],
      [
        "SELECT T1.Record_Company , Count ( * ) FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID GROUP BY T2.Orchestra_ID",
        -1.4832878112792969
      ],
      [
        "SELECT Count ( * ) , Record_Company FROM orchestra GROUP BY Record_Company",
        -2.9765467643737793
      ],
      [
        "SELECT Count ( * ) , Orchestra_ID FROM performance GROUP BY Orchestra_ID",
        -5.17094612121582
      ],
      [
        "SELECT Record_Company , Count ( * ) FROM orchestra GROUP BY Record_Company",
        -5.234286308288574
      ],
      [
        "SELECT Count ( * ) , T1.Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID GROUP BY T2.Orchestra_ID",
        -5.520740509033203
      ],
      [
        "SELECT Count ( * ) , T1.Major_Record_Format FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID GROUP BY T2.Orchestra_ID",
        -6.393089771270752
      ],
      [
        "SELECT Count ( * ) , Official_ratings_(millions) FROM performance GROUP BY Orchestra_ID",
        -6.635733127593994
      ],
      [
        "SELECT Count ( * ) , T1.Record_Company FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID GROUP BY T2.Official_ratings_(millions)",
        -6.932259559631348
      ],
      [
        "SELECT Count ( * ) , T1.Orchestra FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID GROUP BY T2.Orchestra_ID",
        -7.2639288902282715
      ],
      [
        "SELECT Count ( * ) , Record_Company FROM orchestra GROUP BY Year_of_Founded",
        -7.428691864013672
      ],
      [
        "SELECT Count ( * ) , T2.Orchestra_ID FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID GROUP BY T1.Record_Company",
        -7.680688381195068
      ],
      [
        "SELECT Count ( * ) FROM performance GROUP BY Orchestra_ID",
        -7.895005702972412
      ],
      [
        "SELECT Count ( * ) , Record_Company FROM orchestra GROUP BY Orchestra_ID",
        -8.21535587310791
      ],
      [
        "SELECT Count ( * ) , Weekly_rank FROM performance GROUP BY Orchestra_ID",
        -8.334271430969238
      ],
      [
        "SELECT Count ( * ) , Year_of_Founded FROM orchestra GROUP BY Record_Company",
        -8.381848335266113
      ],
      [
        "SELECT Count ( * ) , Type FROM performance GROUP BY Orchestra_ID",
        -8.434622764587402
      ],
      [
        "SELECT Count ( * ) , Date FROM performance GROUP BY Orchestra_ID",
        -8.559507846832275
      ],
      [
        "SELECT Count ( * ) , T1.Nationality FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID JOIN performance AS T3 ON T2.Orchestra_ID = T3.Orchestra_ID GROUP BY T3.Orchestra_ID",
        -8.922189235687256
      ],
      [
        "SELECT Count ( * ) FROM conductor",
        -10.929967880249023
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) , T1.Record_Company FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID GROUP BY T2.Orchestra_ID",
    "predicted_parse": "SELECT Count ( * ) , T1.Record_Company FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID GROUP BY T2.Orchestra_ID",
    "predicted_parse_explanation": [
      "Step 1: for each row in orchestra table , find the corresponding rows in performance table",
      "Step 2: find each value of performance 's orchestra id of the results of step 1 along with the number of the corresponding rows to each value"
    ],
    "template_feedback": "in step 1 , do not use the performance table . in step 2 , find for each value of record company in place of performance 's orchestra id .",
    "primary_span": [
      [
        4,
        10
      ],
      [
        15,
        21
      ]
    ],
    "secondary_span": [
      [
        4,
        10
      ],
      [
        22,
        29
      ]
    ],
    "edits": [
      "performance",
      "record company",
      "orchestra id"
    ],
    "edits_original": "< from > remove performance </ from > < groupBy > add record company </ groupBy > < groupBy > remove orchestra id </ groupBy >"
  },
  {
    "db_id": "world_1",
    "feedback": "Change continent with code In step 1 and 3.",
    "question": "Return the country codes for countries that do not speak English.",
    "gold_parse": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
    "beam": [
      [
        "SELECT T1.Continent FROM country AS T1 EXCEPT SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value",
        -0.4648399353027344
      ],
      [
        "SELECT T1.Continent FROM country AS T1 EXCEPT SELECT T2.CountryCode FROM countrylanguage AS T2 WHERE T2.Language = value",
        -1.9986600875854492
      ],
      [
        "SELECT T1.Continent FROM country AS T1 EXCEPT SELECT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value",
        -2.5328969955444336
      ],
      [
        "SELECT T1.Code FROM country AS T1 EXCEPT SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value",
        -2.7812585830688477
      ],
      [
        "SELECT T1.Region FROM country AS T1 EXCEPT SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value",
        -2.9527015686035156
      ],
      [
        "SELECT T1.Code FROM country AS T1 EXCEPT SELECT T2.CountryCode FROM countrylanguage AS T2 WHERE T2.Language = value",
        -4.416681289672852
      ],
      [
        "SELECT T1.Code FROM country AS T1 EXCEPT SELECT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value",
        -4.836966514587402
      ],
      [
        "SELECT T1.Region FROM country AS T1 EXCEPT SELECT T2.CountryCode FROM countrylanguage AS T2 WHERE T2.Language = value",
        -4.86427116394043
      ],
      [
        "SELECT T1.Region FROM country AS T1 EXCEPT SELECT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value",
        -4.978972434997559
      ],
      [
        "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language ! = value",
        -5.741292953491211
      ],
      [
        "SELECT Continent FROM country WHERE Name ! = value",
        -6.24057674407959
      ],
      [
        "SELECT T1.Continent FROM country AS T1 EXCEPT SELECT T1.GovernmentForm FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value",
        -6.898160934448242
      ],
      [
        "SELECT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language ! = value",
        -8.182719230651855
      ],
      [
        "SELECT Region FROM country WHERE Name ! = value",
        -8.209731101989746
      ],
      [
        "SELECT Continent FROM country WHERE Code ! = value",
        -8.390735626220703
      ],
      [
        "SELECT T1.Code FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language ! = value",
        -9.691262245178223
      ],
      [
        "SELECT Region FROM country WHERE Code ! = value",
        -9.79686450958252
      ],
      [
        "SELECT Continent FROM country WHERE LocalName ! = value",
        -9.928552627563477
      ],
      [
        "SELECT Continent FROM country WHERE Continent ! = value",
        -10.58071231842041
      ],
      [
        "SELECT Code FROM country WHERE Name ! = value",
        -10.866497993469238
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.Continent FROM country AS T1 EXCEPT SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\"",
    "predicted_parse": "SELECT T1.Continent FROM country AS T1 EXCEPT SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value",
    "predicted_parse_explanation": [
      "Step 1: find the continent in country table",
      "Step 2: for each row in country table , find the corresponding rows in countrylanguage table",
      "Step 3: find the continent of the results of step 2 whose language equals English",
      "Step 4: show the rows that are in the results of step 1 but not in the results of step 3"
    ],
    "template_feedback": "in step 1 , use countrylanguage table in place of country table . find countrycode in place of continent . in step 2 , do not use the country table . in step 3 , find countrycode in place of continent .",
    "primary_span": [
      [
        4,
        6
      ],
      [
        13,
        14
      ],
      [
        24,
        30
      ],
      [
        35,
        36
      ]
    ],
    "secondary_span": [
      [
        7,
        12
      ],
      [
        15,
        19
      ],
      [
        24,
        30
      ],
      [
        37,
        41
      ]
    ],
    "edits": [
      "countrycode",
      "continent",
      "countrylanguage",
      "country",
      "countrycode",
      "continent",
      "country"
    ],
    "edits_original": "< select > add countrycode </ select > < select > remove continent </ select > < from > add countrylanguage </ from > < from > remove country </ from > < select > add countrycode </ select > < select > remove continent </ select > < from > remove country </ from >"
  },
  {
    "db_id": "real_estate_properties",
    "feedback": "have to find for whose corresponding feature name equals to AirCon .",
    "question": "What is the feature type name of feature AirCon?",
    "gold_parse": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\"",
    "beam": [
      [
        "SELECT feature_type_name FROM Ref_Feature_Types",
        -0.004658699035644531
      ],
      [
        "SELECT feature_name FROM Other_Available_Features",
        -5.605734825134277
      ],
      [
        "SELECT feature_type_code FROM Other_Available_Features",
        -6.96048641204834
      ],
      [
        "SELECT feature_type_code FROM Ref_Feature_Types",
        -11.935141563415527
      ],
      [
        "SELECT T1.feature_type_name , T2.feature_name FROM Ref_Feature_Types AS T1 JOIN Other_Available_Features AS T2 ON T1.feature_type_code = T2.feature_type_code",
        -11.98075008392334
      ],
      [
        "SELECT T1.feature_type_name FROM Ref_Feature_Types AS T1 JOIN Other_Available_Features AS T2 ON T1.feature_type_code = T2.feature_type_code WHERE T2.feature_name = value",
        -12.046830177307129
      ],
      [
        "SELECT DISTINCT feature_type_name FROM Ref_Feature_Types",
        -13.637561798095703
      ],
      [
        "SELECT T1.feature_type_name FROM Ref_Feature_Types AS T1 UNION SELECT T2.feature_name FROM Other_Available_Features AS T2",
        -15.239858627319336
      ],
      [
        "SELECT feature_name , feature_name FROM Other_Available_Features",
        -15.432734489440918
      ],
      [
        "SELECT T1.feature_type_name FROM Ref_Feature_Types AS T1 INTERSECT SELECT T2.feature_name FROM Other_Available_Features AS T2",
        -15.674054145812988
      ],
      [
        "SELECT T1.feature_type_name FROM Ref_Feature_Types AS T1 JOIN Other_Available_Features AS T2 ON T1.feature_type_code = T2.feature_type_code ORDER BY T2.feature_name Asc",
        -15.853546142578125
      ],
      [
        "SELECT T1.feature_type_name FROM Ref_Feature_Types AS T1 JOIN Other_Available_Features AS T2 ON T1.feature_type_code = T2.feature_type_code GROUP BY T2.feature_type_code HAVING Count ( * ) = value",
        -15.87298583984375
      ],
      [
        "SELECT Max ( feature_type_name ) FROM Ref_Feature_Types",
        -16.008856773376465
      ],
      [
        "SELECT feature_type_name , feature_type_code FROM Ref_Feature_Types",
        -16.16722011566162
      ],
      [
        "SELECT T1.feature_type_name FROM Ref_Feature_Types AS T1 JOIN Other_Available_Features AS T2 ON T1.feature_type_code = T2.feature_type_code GROUP BY T2.feature_type_code",
        -16.290424346923828
      ],
      [
        "SELECT feature_type_name FROM Ref_Feature_Types ORDER BY feature_type_name Asc",
        -16.389397621154785
      ],
      [
        "SELECT Count ( feature_type_name ) FROM Ref_Feature_Types",
        -16.460251808166504
      ],
      [
        "SELECT DISTINCT feature_type_name FROM Ref_Feature_Types",
        -16.512808799743652
      ],
      [
        "SELECT T1.feature_type_name , T2.feature_type_code FROM Ref_Feature_Types AS T1 JOIN Other_Available_Features AS T2 ON T1.feature_type_code = T2.feature_type_code",
        -16.61048173904419
      ],
      [
        "SELECT feature_type_name FROM Ref_Feature_Types LIMIT value",
        -17.273415565490723
      ]
    ],
    "predicted_parse_with_values": "SELECT feature_type_name FROM Ref_Feature_Types",
    "predicted_parse": "SELECT feature_type_name FROM Ref_Feature_Types",
    "predicted_parse_explanation": [
      "find the feature type name in reference feature types table"
    ],
    "template_feedback": "additionally use the information from the other available features table besides the reference feature types table . additionally make sure that feature name equals AirCon .",
    "primary_span": [
      [
        0,
        9
      ],
      [
        17,
        25
      ]
    ],
    "secondary_span": [
      [
        10,
        16
      ]
    ],
    "edits": [
      "other available features",
      "feature name equals \"AirCon\""
    ],
    "edits_original": "< from > add other available features </ from > < where > add feature name equals \" AirCon \" </ where >"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "feedback": "You need to utilize table of documents.",
    "question": "Count the number of documents that use the PPT template type.",
    "gold_parse": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'",
    "beam": [
      [
        "SELECT Count ( * ) FROM Templates WHERE Template_Type_Code = value",
        -0.010244369506835938
      ],
      [
        "SELECT Count ( * ) FROM Ref_Template_Types WHERE Template_Type_Code = value",
        -4.588545799255371
      ],
      [
        "SELECT Count ( * ) FROM Ref_Template_Types",
        -11.00758171081543
      ],
      [
        "SELECT Count ( * ) FROM Ref_Template_Types WHERE Template_Type_Description = value",
        -12.423961639404297
      ],
      [
        "SELECT Count ( DISTINCT T2.Document_Name ) FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T1.Template_Type_Code = value",
        -14.842829704284668
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM Templates WHERE Template_Type_Code = value",
        -14.891322135925293
      ],
      [
        "SELECT Sum ( * ) FROM Templates WHERE Template_Type_Code = value",
        -15.085153102874756
      ],
      [
        "SELECT Avg ( * ) FROM Templates WHERE Template_Type_Code = value",
        -15.4109126329422
      ],
      [
        "SELECT Count ( * ) , Template_Type_Code FROM Templates WHERE Template_Type_Code = value",
        -15.762456893920898
      ],
      [
        "SELECT Count ( * ) FROM Templates WHERE Template_Type_Code LIKE value",
        -15.795428276062012
      ],
      [
        "SELECT Count ( * ) FROM Templates WHERE Template_Type_Code = value GROUP BY Template_Type_Code",
        -15.891857147216797
      ],
      [
        "SELECT Count ( Count ( * ) ) FROM Templates WHERE Template_Type_Code = value",
        -16.20854949951172
      ],
      [
        "SELECT Count ( * ) FROM Ref_Template_Types WHERE Template_Type_Code > value",
        -16.22718620300293
      ],
      [
        "SELECT Count ( * ) , T2.Template_Type_Code FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T1.Template_Type_Code = value",
        -16.554080963134766
      ],
      [
        "SELECT Sum ( T1.Template_Type_Code ) FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T2.Template_Type_Code = value",
        -16.59552013874054
      ],
      [
        "SELECT Count ( DISTINCT * ) FROM Templates WHERE Template_Type_Code = value",
        -16.92458724975586
      ],
      [
        "SELECT Sum ( * ) FROM Ref_Template_Types WHERE Template_Type_Code = value",
        -17.040204524993896
      ],
      [
        "SELECT Count ( * ) FROM Templates GROUP BY Template_Type_Code",
        -17.128477096557617
      ],
      [
        "SELECT Count ( * ) FROM Templates WHERE DISTINCT Template_Type_Code = value",
        -17.144006729125977
      ],
      [
        "SELECT Count ( * ) FROM Templates GROUP BY Template_Type_Code HAVING Count ( * ) = value",
        -17.33211326599121
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM Templates WHERE Template_Type_Code = \"PPT\"",
    "predicted_parse": "SELECT Count ( * ) FROM Templates WHERE Template_Type_Code = value",
    "predicted_parse_explanation": [
      "find the number of rows in templates table whose template type code equals PPT"
    ],
    "template_feedback": "additionally use the information from the documents table besides the templates table .",
    "primary_span": [
      [
        0,
        7
      ]
    ],
    "secondary_span": [
      [
        8,
        12
      ]
    ],
    "edits": [
      "documents"
    ],
    "edits_original": "< from > add documents </ from >"
  },
  {
    "db_id": "car_1",
    "feedback": "It should be largest value of mpg not accelerate .",
    "question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.",
    "gold_parse": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1",
    "beam": [
      [
        "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id ORDER BY T3.Accelerate Desc LIMIT value",
        -0.19952774047851562
      ],
      [
        "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id GROUP BY T1.Model ORDER BY Sum ( T3.Accelerate ) Desc LIMIT value",
        -1.7722082138061523
      ],
      [
        "SELECT Model FROM model_list GROUP BY Model ORDER BY Count ( * ) Desc LIMIT value",
        -5.0454511642456055
      ],
      [
        "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id GROUP BY T1.ModelId ORDER BY Sum ( T3.Accelerate ) Desc LIMIT value",
        -6.76581335067749
      ],
      [
        "SELECT T1.Model FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id ORDER BY T2.Accelerate Desc LIMIT value",
        -7.246732711791992
      ],
      [
        "SELECT T2.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model AND T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id GROUP BY T1.Model ORDER BY Sum ( T3.Accelerate ) Desc LIMIT value",
        -7.441787242889404
      ],
      [
        "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T3.Accelerate = ( SELECT Max ( T3.Accelerate ) FROM cars_data AS T3 )",
        -7.572031497955322
      ],
      [
        "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model AND T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id GROUP BY T2.Model ORDER BY Sum ( T3.Accelerate ) Desc LIMIT value",
        -7.937093734741211
      ],
      [
        "SELECT T1.ModelId FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id ORDER BY T3.Accelerate Desc LIMIT value",
        -8.643351554870605
      ],
      [
        "SELECT T1.Model , T1.ModelId FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id ORDER BY T3.Accelerate Desc LIMIT value",
        -8.915610313415527
      ],
      [
        "SELECT Edispl FROM cars_data ORDER BY Accelerate Desc LIMIT value",
        -9.227777481079102
      ],
      [
        "SELECT T1.ModelId FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id GROUP BY T1.Model ORDER BY Sum ( T3.Accelerate ) Desc LIMIT value",
        -9.386157512664795
      ],
      [
        "SELECT T1.Model , T1.ModelId FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id GROUP BY T1.Model ORDER BY Sum ( T3.Accelerate ) Desc LIMIT value",
        -9.716459035873413
      ],
      [
        "SELECT T3.Edispl FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id GROUP BY T1.Model ORDER BY Sum ( T3.Accelerate ) Desc LIMIT value",
        -9.831071853637695
      ],
      [
        "SELECT Model FROM model_list GROUP BY ModelId ORDER BY Count ( * ) Desc LIMIT value",
        -10.003035068511963
      ],
      [
        "SELECT Max ( Accelerate ) FROM cars_data",
        -10.05556583404541
      ],
      [
        "SELECT T1.Model , T3.Accelerate FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id ORDER BY T3.Accelerate Desc LIMIT value",
        -10.189726829528809
      ],
      [
        "SELECT Model , Count ( * ) FROM model_list GROUP BY Model",
        -10.546210289001465
      ],
      [
        "SELECT T1.Model FROM model_list AS T1 UNION SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T3.Accelerate = ( SELECT Max ( T3.Accelerate ) FROM cars_data AS T3 )",
        -10.761260986328125
      ],
      [
        "SELECT Max ( ModelId ) FROM model_list",
        -11.908624172210693
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id ORDER BY T3.Accelerate Desc LIMIT 1",
    "predicted_parse": "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id ORDER BY T3.Accelerate Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: for each row in model list table , find the corresponding rows in car names table and in cars data table",
      "Step 2: find the model list 's model of the results of step 1 with largest value of accelerate"
    ],
    "template_feedback": "in step 1 , do not use the model list table . in step 2 , order the results by mpg in place of accelerate .",
    "primary_span": [
      [
        4,
        11
      ],
      [
        16,
        20
      ]
    ],
    "secondary_span": [
      [
        4,
        11
      ],
      [
        21,
        25
      ]
    ],
    "edits": [
      "model list",
      "mpg",
      "accelerate"
    ],
    "edits_original": "< from > remove model list </ from > < orderBy > add mpg </ orderBy > < orderBy > remove accelerate </ orderBy >"
  },
  {
    "db_id": "wta_1",
    "feedback": "Make sure to find loser rank which repeats most number of times .",
    "question": "What is the best rank of losers across all matches?",
    "gold_parse": "SELECT min(loser_rank) FROM matches",
    "beam": [
      [
        "SELECT loser_rank FROM matches",
        -0.8407077789306641
      ],
      [
        "SELECT loser_rank FROM matches ORDER BY loser_rank_points Asc LIMIT value",
        -1.8466863632202148
      ],
      [
        "SELECT Min ( winner_rank ) FROM matches",
        -1.9182109832763672
      ],
      [
        "SELECT loser_rank FROM matches ORDER BY winner_rank_points Asc LIMIT value",
        -2.019693374633789
      ],
      [
        "SELECT loser_rank FROM matches ORDER BY winner_rank Asc LIMIT value",
        -3.1236534118652344
      ],
      [
        "SELECT winner_rank FROM matches",
        -3.6114273071289062
      ],
      [
        "SELECT Min ( loser_rank ) FROM matches",
        -4.256950378417969
      ],
      [
        "SELECT Min ( winner_rank_points ) FROM matches",
        -4.398412704467773
      ],
      [
        "SELECT Min ( loser_rank_points ) FROM matches",
        -4.982822418212891
      ],
      [
        "SELECT T2.loser_rank FROM players AS T1 JOIN matches AS T2 ON T2.loser_id = T1.player_id JOIN rankings AS T3 ON T1.player_id = T3.player_id ORDER BY T3.ranking_points Asc LIMIT value",
        -5.179088592529297
      ],
      [
        "SELECT winner_rank FROM matches ORDER BY loser_rank_points Asc LIMIT value",
        -5.261373519897461
      ],
      [
        "SELECT loser_rank FROM matches ORDER BY loser_rank Asc LIMIT value",
        -5.377179145812988
      ],
      [
        "SELECT winner_rank FROM matches ORDER BY winner_rank_points Asc LIMIT value",
        -5.493350982666016
      ],
      [
        "SELECT Max ( winner_rank ) FROM matches",
        -6.995035171508789
      ],
      [
        "SELECT score FROM matches",
        -8.426390647888184
      ],
      [
        "SELECT Min ( ranking_points ) FROM rankings",
        -8.673299789428711
      ],
      [
        "SELECT Max ( winner_rank_points ) FROM matches",
        -8.96491813659668
      ],
      [
        "SELECT Max ( loser_rank ) FROM matches",
        -9.660511016845703
      ],
      [
        "SELECT Max ( loser_rank_points ) FROM matches",
        -9.75063705444336
      ],
      [
        "SELECT Min ( score ) FROM matches",
        -10.06738567352295
      ]
    ],
    "predicted_parse_with_values": "SELECT loser_rank FROM matches",
    "predicted_parse": "SELECT loser_rank FROM matches",
    "predicted_parse_explanation": [
      "find the loser rank in matches table"
    ],
    "template_feedback": "find minimum loser rank in place of loser rank .",
    "primary_span": [
      [
        0,
        3
      ]
    ],
    "secondary_span": [
      [
        4,
        9
      ]
    ],
    "edits": [
      "minimum loser rank",
      "loser rank"
    ],
    "edits_original": "< select > add minimum loser rank </ select > < select > remove loser rank </ select >"
  },
  {
    "db_id": "concert_singer",
    "feedback": "supersede stadium table with singer table.",
    "question": "How many singers do we have?",
    "gold_parse": "SELECT count(*) FROM singer",
    "beam": [
      [
        "SELECT Count ( * ) FROM stadium",
        -1.621246337890625e-05
      ],
      [
        "SELECT Sum ( * ) FROM stadium",
        -12.160548686981201
      ],
      [
        "SELECT Count ( * ) FROM singer WHERE Is_male = value",
        -13.193983554840088
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM stadium",
        -13.438127517700195
      ],
      [
        "SELECT Count ( * ) FROM singer WHERE Country = value",
        -14.029149770736694
      ],
      [
        "SELECT Count ( * ) , Is_male FROM singer",
        -14.291995167732239
      ],
      [
        "SELECT Sum ( Singer_ID ) FROM singer",
        -14.39391541481018
      ],
      [
        "SELECT Avg ( * ) FROM stadium",
        -14.609522581100464
      ],
      [
        "SELECT Count ( * ) FROM singer WHERE Name = value",
        -14.729350090026855
      ],
      [
        "SELECT Sum ( Is_male ) FROM singer",
        -14.733193159103394
      ],
      [
        "SELECT Count ( Count ( * ) ) FROM stadium",
        -14.8417329788208
      ],
      [
        "SELECT Count ( * ) FROM singer WHERE Song_Name = value",
        -15.073912620544434
      ],
      [
        "SELECT Count ( * ) , Name FROM singer",
        -15.245482683181763
      ],
      [
        "SELECT Count ( * ) FROM singer ORDER BY Singer_ID Desc",
        -15.556865215301514
      ],
      [
        "SELECT Sum ( Name ) FROM singer",
        -15.660293817520142
      ],
      [
        "SELECT Sum ( Age ) FROM singer",
        -15.810284852981567
      ],
      [
        "SELECT Sum ( Country ) FROM singer",
        -16.269853591918945
      ],
      [
        "SELECT Avg ( Singer_ID ) FROM singer",
        -16.381810426712036
      ],
      [
        "SELECT Sum ( Song_Name ) FROM singer",
        -16.730152130126953
      ],
      [
        "SELECT Count ( * ) FROM stadium LIMIT value",
        -17.08603000640869
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM stadium",
    "predicted_parse": "SELECT Count ( * ) FROM stadium",
    "predicted_parse_explanation": [
      "find the number of rows in stadium table"
    ],
    "template_feedback": "use singer table in place of stadium table .",
    "primary_span": [
      [
        0,
        2
      ]
    ],
    "secondary_span": [
      [
        3,
        8
      ]
    ],
    "edits": [
      "singer",
      "stadium"
    ],
    "edits_original": "< from > add singer </ from > < from > remove stadium </ from >"
  },
  {
    "db_id": "course_teach",
    "feedback": "You need to use teacher table.",
    "question": "How many teachers are there?",
    "gold_parse": "SELECT count(*) FROM teacher",
    "beam": [
      [
        "SELECT Count ( * ) FROM course",
        -1.049041748046875e-05
      ],
      [
        "SELECT Sum ( * ) FROM course",
        -12.65207839012146
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM course",
        -13.560286521911621
      ],
      [
        "SELECT Count ( * ) FROM teacher WHERE Hometown = value",
        -13.630189895629883
      ],
      [
        "SELECT Sum ( Teacher_ID ) FROM teacher",
        -14.105971574783325
      ],
      [
        "SELECT Avg ( * ) FROM course",
        -14.73497462272644
      ],
      [
        "SELECT Count ( * ) , Name FROM teacher",
        -14.795637249946594
      ],
      [
        "SELECT Count ( Count ( * ) ) FROM course",
        -14.964415550231934
      ],
      [
        "SELECT Count ( * ) FROM teacher WHERE Name = value",
        -15.040467262268066
      ],
      [
        "SELECT Count ( * ) FROM teacher GROUP BY Teacher_ID",
        -15.059301376342773
      ],
      [
        "SELECT Count ( * ) FROM teacher GROUP BY Name",
        -15.07386565208435
      ],
      [
        "SELECT Count ( * ) FROM course_arrange GROUP BY Teacher_ID",
        -15.180646777153015
      ],
      [
        "SELECT Avg ( Teacher_ID ) FROM teacher",
        -15.616098165512085
      ],
      [
        "SELECT Count ( * ) FROM teacher ORDER BY Teacher_ID Desc LIMIT value",
        -15.99117374420166
      ],
      [
        "SELECT Sum ( Hometown ) FROM teacher",
        -16.4084255695343
      ],
      [
        "SELECT Count ( * ) FROM course LIMIT value",
        -17.03117084503174
      ],
      [
        "SELECT Count ( DISTINCT * ) FROM course",
        -17.25309658050537
      ],
      [
        "SELECT Sum ( Name ) FROM teacher",
        -17.35026741027832
      ],
      [
        "SELECT Max ( * ) FROM course",
        -17.457791805267334
      ],
      [
        "SELECT Teacher_ID FROM teacher",
        -17.72667956352234
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM course",
    "predicted_parse": "SELECT Count ( * ) FROM course",
    "predicted_parse_explanation": [
      "find the number of rows in course table"
    ],
    "template_feedback": "use teacher table in place of course table .",
    "primary_span": [
      [
        0,
        2
      ]
    ],
    "secondary_span": [
      [
        3,
        8
      ]
    ],
    "edits": [
      "teacher",
      "course"
    ],
    "edits_original": "< from > add teacher </ from > < from > remove course </ from >"
  },
  {
    "db_id": "flight_2",
    "feedback": "attach flights table. confirm that the city is aberdeen and airline is united citys as well as airport code is destination airport.",
    "question": "Count the number of United Airlines flights that arrive in Aberdeen.",
    "gold_parse": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"",
    "beam": [
      [
        "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value AND T1.Country = value",
        -0.7723493576049805
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE Country = value AND City = value",
        -0.9527854919433594
      ],
      [
        "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value AND T1.Airline = value",
        -3.0285863876342773
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE Country = value AND CountryAbbrev = value",
        -3.0846447944641113
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE Country = value AND AirportName = value",
        -4.10045862197876
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE Country = value",
        -4.227020263671875
      ],
      [
        "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.CountryAbbrev = value AND T1.Country = value",
        -4.993474960327148
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE CountryAbbrev = value AND City = value",
        -5.165630340576172
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE Country = value AND Country = value",
        -6.119178771972656
      ],
      [
        "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value AND T1.Abbreviation = value",
        -6.326322555541992
      ],
      [
        "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.City = value AND T1.Country = value",
        -6.349601745605469
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE City = value AND City = value",
        -6.678824424743652
      ],
      [
        "SELECT Count ( * ) FROM airlines WHERE Country = value",
        -6.6898193359375
      ],
      [
        "SELECT Count ( * ) FROM airlines WHERE Country = value AND Country = value",
        -6.845240592956543
      ],
      [
        "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.CountryAbbrev = value AND T1.Airline = value",
        -7.176546573638916
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE City = value",
        -7.389409065246582
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE CountryAbbrev = value",
        -7.966462135314941
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE AirportName = value",
        -10.473337173461914
      ],
      [
        "SELECT Count ( * ) FROM airlines WHERE Airline > value",
        -13.534270286560059
      ],
      [
        "SELECT Count ( * ) FROM airlines WHERE Airline = value",
        -15.315629959106445
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = \"Aberdeen\" AND T1.Country = \"United Airlines\"",
    "predicted_parse": "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value AND T1.Country = value",
    "predicted_parse_explanation": [
      "Step 1: for each row in airlines table , find the corresponding rows in airports table",
      "Step 2: find the number of rows of the results of step 1 whose airports 's country equals Aberdeen and airlines 's country equals United Airlines"
    ],
    "template_feedback": "in step 1 , additionally use the information from the flights table . in step 2 , consider the airlines 's airline name equals United Airlines and city equals Aberdeen conditions in place of the airlines 's country equals United Airlines and airports 's country equals Aberdeen conditions .",
    "primary_span": [
      [
        4,
        12
      ],
      [
        17,
        30
      ]
    ],
    "secondary_span": [
      [
        31,
        48
      ]
    ],
    "edits": [
      "flights",
      "city equals \"Aberdeen\"",
      "airline name equals \"United Airlines\"",
      "country equals \"Aberdeen\"",
      "country equals \"United Airlines\""
    ],
    "edits_original": "< from > add flights </ from > < where > add city equals \" Aberdeen \" </ where > < where > add airline name equals \" United Airlines \" </ where > < where > remove country equals \" Aberdeen \" </ where > < where > remove country equals \" United Airlines \" </ where >"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "feedback": "Supersede documents table with paragraphs table .",
    "question": "How many paragraphs for the document with name 'Summer Show'?",
    "gold_parse": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'",
    "beam": [
      [
        "SELECT Count ( * ) FROM Documents WHERE Document_Name = value",
        -0.4724102020263672
      ],
      [
        "SELECT Count ( * ) FROM Documents WHERE Document_Name LIKE value",
        -0.9769191741943359
      ],
      [
        "SELECT Count ( * ) FROM Documents WHERE Document_Name = value AND Document_Name = value",
        -13.168160915374756
      ],
      [
        "SELECT Count ( * ) FROM Documents WHERE Document_Name < value",
        -13.26834487915039
      ],
      [
        "SELECT Count ( * ) FROM Documents WHERE Document_Name ! = value",
        -13.287981033325195
      ],
      [
        "SELECT Count ( * ) FROM Documents WHERE Document_Name IN ( SELECT Document_Name FROM Documents WHERE Document_Name = value )",
        -14.232151508331299
      ],
      [
        "SELECT Count ( Count ( * ) ) FROM Documents WHERE Document_Name LIKE value",
        -14.554855346679688
      ],
      [
        "SELECT Count ( Count ( * ) ) FROM Documents WHERE Document_Name = value",
        -14.771459579467773
      ],
      [
        "SELECT Sum ( * ) FROM Documents WHERE Document_Name = value",
        -14.929077863693237
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM Documents WHERE Document_Name = value",
        -15.084239959716797
      ],
      [
        "SELECT Count ( * ) , Document_Name FROM Documents WHERE Document_Name = value",
        -15.36550498008728
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM Documents WHERE Document_Name LIKE value",
        -15.49660873413086
      ],
      [
        "SELECT Sum ( T2.Paragraph_Text ) FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Name = value",
        -15.727071046829224
      ],
      [
        "SELECT T2.Paragraph_Text FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Name = value",
        -15.969193935394287
      ],
      [
        "SELECT Count ( * ) FROM Documents WHERE Document_Name BETWEEN value AND value",
        -16.09142017364502
      ],
      [
        "SELECT Count ( DISTINCT T2.Paragraph_Text ) FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Name LIKE value",
        -16.80190086364746
      ],
      [
        "SELECT Count ( * ) FROM Documents WHERE DISTINCT Document_Name = value",
        -17.08749771118164
      ],
      [
        "SELECT Count ( * ) FROM Documents WHERE DISTINCT Document_Name LIKE value",
        -17.22351837158203
      ],
      [
        "SELECT Count ( DISTINCT * ) FROM Documents WHERE Document_Name LIKE value",
        -17.25859832763672
      ],
      [
        "SELECT Count ( * ) , T2.Paragraph_Text FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Name = value",
        -17.337001085281372
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM Documents WHERE Document_Name = \"Summer Show\"",
    "predicted_parse": "SELECT Count ( * ) FROM Documents WHERE Document_Name = value",
    "predicted_parse_explanation": [
      "find the number of rows in documents table whose document name equals Summer Show"
    ],
    "template_feedback": "additionally use the information from the paragraphs table besides the documents table .",
    "primary_span": [
      [
        0,
        7
      ]
    ],
    "secondary_span": [
      [
        8,
        12
      ]
    ],
    "edits": [
      "paragraphs"
    ],
    "edits_original": "< from > add paragraphs </ from >"
  },
  {
    "db_id": "world_1",
    "feedback": "Interchange population with surface area .",
    "question": "Return the names and surface areas of the 5 largest countries.",
    "gold_parse": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
    "beam": [
      [
        "SELECT Name , SurfaceArea FROM country ORDER BY Population Desc LIMIT value",
        -0.020372390747070312
      ],
      [
        "SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea Desc LIMIT value",
        -3.966952323913574
      ],
      [
        "SELECT LocalName , SurfaceArea FROM country ORDER BY Population Desc LIMIT value",
        -6.984927177429199
      ],
      [
        "SELECT Name , SurfaceArea FROM country ORDER BY Continent Desc LIMIT value",
        -8.285398483276367
      ],
      [
        "SELECT LocalName , SurfaceArea FROM country ORDER BY SurfaceArea Desc LIMIT value",
        -10.869149208068848
      ],
      [
        "SELECT T2.Name , T2.SurfaceArea FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code ORDER BY T1.Population Desc LIMIT value",
        -11.716355323791504
      ],
      [
        "SELECT Max ( SurfaceArea ) , Region FROM country ORDER BY Population Desc LIMIT value",
        -12.194047927856445
      ],
      [
        "SELECT Name , SurfaceArea FROM country ORDER BY LifeExpectancy Desc LIMIT value",
        -12.735575675964355
      ],
      [
        "SELECT Name , SurfaceArea FROM country ORDER BY Population Asc LIMIT value",
        -12.762913703918457
      ],
      [
        "SELECT Name , SurfaceArea FROM country ORDER BY Population Desc",
        -12.94981861114502
      ],
      [
        "SELECT Name FROM country ORDER BY Population Desc LIMIT value",
        -13.086108207702637
      ],
      [
        "SELECT Name , SurfaceArea FROM country GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value",
        -13.40789794921875
      ],
      [
        "SELECT Max ( SurfaceArea ) , SurfaceArea FROM country ORDER BY Population Desc LIMIT value",
        -13.59703540802002
      ],
      [
        "SELECT Name , SurfaceArea FROM country",
        -13.65913200378418
      ],
      [
        "SELECT Name , SurfaceArea , Continent FROM country ORDER BY Population Desc LIMIT value",
        -13.668437957763672
      ],
      [
        "SELECT Name , SurfaceArea FROM country ORDER BY GNP Desc LIMIT value",
        -13.84554672241211
      ],
      [
        "SELECT Region , SurfaceArea FROM country ORDER BY Population Desc LIMIT value",
        -14.043718338012695
      ],
      [
        "SELECT Name , SurfaceArea FROM country GROUP BY Region ORDER BY Count ( * ) Desc LIMIT value",
        -14.05007266998291
      ],
      [
        "SELECT Name , SurfaceArea FROM country WHERE Continent = ( SELECT Continent FROM country ORDER BY Population Desc LIMIT value ) ORDER BY Population Desc LIMIT value",
        -14.857567310333252
      ],
      [
        "SELECT Name FROM country ORDER BY SurfaceArea Desc LIMIT value",
        -15.268109321594238
      ]
    ],
    "predicted_parse_with_values": "SELECT Name , SurfaceArea FROM country ORDER BY Population Desc LIMIT 5",
    "predicted_parse": "SELECT Name , SurfaceArea FROM country ORDER BY Population Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: find the name and surface area in country table ordered descending by population",
      "Step 2: only show the first 5 rows of the results"
    ],
    "template_feedback": "in step 1 , order the results by surface area in place of population .",
    "primary_span": [
      [
        4,
        9
      ]
    ],
    "secondary_span": [
      [
        10,
        14
      ]
    ],
    "edits": [
      "surface area",
      "population"
    ],
    "edits_original": "< orderBy > add surface area </ orderBy > < orderBy > remove population </ orderBy >"
  },
  {
    "db_id": "tvshow",
    "feedback": "Remove \"and directed by equals Ben Jones\".",
    "question": "which countries' tv channels are playing some cartoon written by Todd Casey?",
    "gold_parse": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
    "beam": [
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value AND T2.Directed_by = value",
        -0.03849601745605469
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value AND T1.Language = value",
        -4.075222969055176
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel JOIN Cartoon AS T3 ON T1.id = T3.Channel WHERE T3.Written_by = value AND T2.Episode = value",
        -4.502114295959473
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value AND T1.series_name = value",
        -5.775187015533447
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value AND T1.Content = value",
        -5.807987213134766
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value AND T2.Written_by = value",
        -5.9062323570251465
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = value AND T2.Directed_by = value",
        -7.434439659118652
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value AND T2.Title = value",
        -9.10315990447998
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel JOIN Cartoon AS T3 ON T1.id = T3.Channel WHERE T3.Written_by = value AND T2.Rating = value",
        -10.161921501159668
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value",
        -10.896730422973633
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value AND T1.Pay_per_view_PPV = value",
        -10.960190773010254
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = value AND T1.Language = value",
        -11.157313346862793
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel JOIN Cartoon AS T3 ON T1.id = T3.Channel WHERE T3.Directed_by = value AND T2.Episode = value",
        -11.561657905578613
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel JOIN Cartoon AS T3 ON T1.id = T3.Channel WHERE T2.Episode = value AND T3.Directed_by = value",
        -11.624917030334473
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = value AND T2.Directed_by = value",
        -11.65920352935791
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value AND T1.Hight_definition_TV = value",
        -11.824271202087402
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.Language = value AND T2.Directed_by = value",
        -11.890969276428223
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = value AND T1.Content = value",
        -12.76926326751709
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = value",
        -13.685709953308105
      ],
      [
        "SELECT Country FROM TV_Channel",
        -17.306663513183594
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = \"Todd Casey\" AND T2.Directed_by = \"Ben Jones\"",
    "predicted_parse": "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value AND T2.Directed_by = value",
    "predicted_parse_explanation": [
      "Step 1: for each row in tv channel table , find the corresponding rows in cartoon table",
      "Step 2: find the country of the results of step 1 whose written by equals Todd Casey and directed by equals Ben Jones"
    ],
    "template_feedback": "in step 2 , remove the directed by equals Ben Jones conditions .",
    "primary_span": [
      [
        4,
        12
      ]
    ],
    "secondary_span": [],
    "edits": [
      "directed by equals \"Ben Jones\""
    ],
    "edits_original": "< where > remove directed by equals \" Ben Jones \" </ where >"
  },
  {
    "db_id": "car_1",
    "feedback": "Need to find model with highest value of horsepower whose cylinders equals 4.",
    "question": "For all of the 4 cylinder cars, which model has the most horsepower?",
    "gold_parse": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1",
    "beam": [
      [
        "SELECT Model FROM model_list GROUP BY Model ORDER BY Count ( * ) Desc LIMIT value",
        -0.01586437225341797
      ],
      [
        "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id ORDER BY T3.Cylinders Desc LIMIT value",
        -4.692070007324219
      ],
      [
        "SELECT T2.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model GROUP BY T1.Model ORDER BY Count ( * ) Desc LIMIT value",
        -6.096997261047363
      ],
      [
        "SELECT Model FROM model_list GROUP BY Model HAVING Count ( * ) > = value ORDER BY Count ( * ) Desc",
        -6.595229625701904
      ],
      [
        "SELECT Model FROM model_list GROUP BY Model HAVING Count ( * ) > value ORDER BY Count ( * ) Desc",
        -6.995177268981934
      ],
      [
        "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T3.Cylinders = value GROUP BY T1.Model ORDER BY Count ( * ) Desc LIMIT value",
        -7.196555137634277
      ],
      [
        "SELECT T3.Edispl FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id GROUP BY T1.Model ORDER BY Count ( * ) Desc LIMIT value",
        -8.086236953735352
      ],
      [
        "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id GROUP BY T1.Model HAVING T3.Cylinders < value ORDER BY Count ( * ) Desc LIMIT value",
        -8.84827470779419
      ],
      [
        "SELECT T3.Cylinders FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id GROUP BY T1.Model ORDER BY Count ( * ) Desc LIMIT value",
        -8.880187034606934
      ],
      [
        "SELECT * FROM model_list GROUP BY Model ORDER BY Count ( * ) Desc LIMIT value",
        -9.215547561645508
      ],
      [
        "SELECT Model FROM model_list GROUP BY Model HAVING Count ( * ) > = value ORDER BY Count ( * ) Desc LIMIT value",
        -9.45309591293335
      ],
      [
        "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model GROUP BY T2.Model ORDER BY Count ( * ) Desc LIMIT value",
        -10.156132698059082
      ],
      [
        "SELECT T3.Horsepower FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id GROUP BY T1.Model ORDER BY Count ( * ) Desc LIMIT value",
        -10.211444854736328
      ],
      [
        "SELECT T3.MPG FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id GROUP BY T1.Model ORDER BY Count ( * ) Desc LIMIT value",
        -10.275177001953125
      ],
      [
        "SELECT T1.FullName FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T2.Model ORDER BY Count ( * ) Desc LIMIT value",
        -10.367952346801758
      ],
      [
        "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id ORDER BY T3.Horsepower Desc LIMIT value",
        -10.745423316955566
      ],
      [
        "SELECT ModelId FROM model_list GROUP BY Model ORDER BY Count ( * ) Desc LIMIT value",
        -10.84117317199707
      ],
      [
        "SELECT T1.Model , T3.Cylinders FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id GROUP BY T1.Model",
        -10.884206771850586
      ],
      [
        "SELECT T1.Model FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id ORDER BY T2.Cylinders Desc LIMIT value",
        -11.552971839904785
      ],
      [
        "SELECT Model FROM model_list GROUP BY Model",
        -11.693744659423828
      ]
    ],
    "predicted_parse_with_values": "SELECT Model FROM model_list GROUP BY Model ORDER BY Count ( * ) Desc LIMIT 1",
    "predicted_parse": "SELECT Model FROM model_list GROUP BY Model ORDER BY Count ( * ) Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of model in model list table",
      "Step 2: find the model in model list table with largest value in the results of step 1"
    ],
    "template_feedback": "in step 1 , use cars data table and car names table in place of model list table . additionally make sure that cylinders equals 4 . do not find for each value of model list 's model . in step 2 , order the results by horsepower in place of number of rows .",
    "primary_span": [
      [
        4,
        11
      ],
      [
        19,
        26
      ],
      [
        27,
        38
      ],
      [
        43,
        47
      ]
    ],
    "secondary_span": [
      [
        12,
        18
      ],
      [
        48,
        54
      ]
    ],
    "edits": [
      "car names",
      "cars data",
      "model list",
      "cylinders equals 4",
      "model",
      "horsepower",
      "number of rows"
    ],
    "edits_original": "< from > add car names </ from > < from > add cars data </ from > < from > remove model list </ from > < where > add cylinders equals 4 </ where > < groupBy > remove model </ groupBy > < orderBy > add horsepower </ orderBy > < orderBy > remove number of rows </ orderBy >"
  },
  {
    "db_id": "world_1",
    "feedback": "Supersede continent with countrycode and country table with countrylanguage table in step 1.",
    "question": "Give the name of the nation that uses the greatest amount of languages.",
    "gold_parse": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1",
    "beam": [
      [
        "SELECT Name FROM country GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value",
        -0.054843902587890625
      ],
      [
        "SELECT Name FROM country GROUP BY Name ORDER BY Count ( * ) Desc LIMIT value",
        -2.9754858016967773
      ],
      [
        "SELECT Name FROM country GROUP BY LocalName ORDER BY Count ( * ) Desc LIMIT value",
        -6.368221282958984
      ],
      [
        "SELECT LocalName FROM country GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value",
        -8.445676803588867
      ],
      [
        "SELECT Name FROM country ORDER BY GNP Desc LIMIT value",
        -8.722387790679932
      ],
      [
        "SELECT Name FROM country GROUP BY Code2 ORDER BY Count ( * ) Desc LIMIT value",
        -9.846747398376465
      ],
      [
        "SELECT Name FROM country ORDER BY LifeExpectancy Desc LIMIT value",
        -9.936843395233154
      ],
      [
        "SELECT Continent FROM country GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value",
        -10.3036527633667
      ],
      [
        "SELECT Name FROM country GROUP BY Continent ORDER BY Sum ( GNP ) Desc LIMIT value",
        -10.72654676437378
      ],
      [
        "SELECT Name FROM country GROUP BY Continent ORDER BY Count ( LifeExpectancy ) Desc LIMIT value",
        -11.371349334716797
      ],
      [
        "SELECT LocalName FROM country GROUP BY Name ORDER BY Count ( * ) Desc LIMIT value",
        -11.409499168395996
      ],
      [
        "SELECT Name FROM country GROUP BY Continent ORDER BY Count ( GNP ) Desc LIMIT value",
        -11.685062408447266
      ],
      [
        "SELECT Name FROM country GROUP BY Continent ORDER BY Sum ( LifeExpectancy ) Desc LIMIT value",
        -11.73026704788208
      ],
      [
        "SELECT Name FROM country ORDER BY LocalName Desc LIMIT value",
        -11.947557210922241
      ],
      [
        "SELECT Name FROM country ORDER BY GNPOld Desc LIMIT value",
        -12.149693727493286
      ],
      [
        "SELECT Name FROM country ORDER BY Continent Desc LIMIT value",
        -12.79990816116333
      ],
      [
        "SELECT Name FROM country GROUP BY Continent",
        -12.959575653076172
      ],
      [
        "SELECT Name FROM country GROUP BY Name",
        -14.364081382751465
      ],
      [
        "SELECT Name FROM country ORDER BY Capital Desc LIMIT value",
        -14.398684024810791
      ],
      [
        "SELECT Name FROM country",
        -15.50485897064209
      ]
    ],
    "predicted_parse_with_values": "SELECT Name FROM country GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT 1",
    "predicted_parse": "SELECT Name FROM country GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of continent in country table",
      "Step 2: find the name in country table with largest value in the results of step 1"
    ],
    "template_feedback": "in step 1 , additionally use the information from the countrylanguage table besides the country table . find for each value of name in place of continent .",
    "primary_span": [
      [
        4,
        11
      ],
      [
        17,
        22
      ]
    ],
    "secondary_span": [
      [
        12,
        16
      ],
      [
        23,
        27
      ]
    ],
    "edits": [
      "countrylanguage",
      "name",
      "continent"
    ],
    "edits_original": "< from > add countrylanguage </ from > < groupBy > add name </ groupBy > < groupBy > remove continent </ groupBy >"
  },
  {
    "db_id": "orchestra",
    "feedback": "Need to find year of work in place of year of founded .",
    "question": "List the name of the conductor with the most years of work.",
    "gold_parse": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
    "beam": [
      [
        "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID ORDER BY T2.Year_of_Founded Desc LIMIT value",
        -2.288818359375e-05
      ],
      [
        "SELECT Name FROM conductor ORDER BY Year_of_Work Desc LIMIT value",
        -11.948838233947754
      ],
      [
        "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID ORDER BY T2.Year_of_Founded Desc",
        -12.401759147644043
      ],
      [
        "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY Sum ( T2.Year_of_Founded ) Desc LIMIT value",
        -12.979588508605957
      ],
      [
        "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID ORDER BY T2.Year_of_Founded Asc LIMIT value",
        -13.492796897888184
      ],
      [
        "SELECT Name FROM conductor",
        -13.731234550476074
      ],
      [
        "SELECT T1.Name , T2.Year_of_Founded FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID ORDER BY T2.Year_of_Founded Desc LIMIT value",
        -13.856369018554688
      ],
      [
        "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Year_of_Founded = ( SELECT Max ( T2.Year_of_Founded ) FROM orchestra AS T2 ) ORDER BY T2.Year_of_Founded Desc LIMIT value",
        -13.905345439910889
      ],
      [
        "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Year_of_Founded = ( SELECT Max ( T2.Year_of_Founded ) FROM orchestra AS T2 )",
        -14.237841129302979
      ],
      [
        "SELECT T1.Name FROM conductor AS T1 UNION SELECT Max ( T2.Year_of_Founded ) FROM orchestra AS T2",
        -14.408408164978027
      ],
      [
        "SELECT DISTINCT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID ORDER BY T2.Year_of_Founded Desc LIMIT value",
        -14.59344482421875
      ],
      [
        "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY Count ( * ) Desc LIMIT value",
        -14.771294593811035
      ],
      [
        "SELECT Name FROM conductor ORDER BY Count ( * ) Desc LIMIT value",
        -15.733631134033203
      ],
      [
        "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID ORDER BY DISTINCT T2.Year_of_Founded Desc LIMIT value",
        -16.094101905822754
      ],
      [
        "SELECT DISTINCT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID ORDER BY T2.Year_of_Founded Desc LIMIT value",
        -16.184728622436523
      ],
      [
        "SELECT T1.Name , T1.Year_of_Work FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID ORDER BY T2.Year_of_Founded Desc LIMIT value",
        -16.719313144683838
      ],
      [
        "SELECT T1.Name , T2.Record_Company FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID ORDER BY T2.Year_of_Founded Desc LIMIT value",
        -17.48626136779785
      ],
      [
        "SELECT T1.Name , T2.Conductor_ID FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID ORDER BY T2.Year_of_Founded Desc LIMIT value",
        -17.548285961151123
      ],
      [
        "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded Desc LIMIT value",
        -17.59903907775879
      ],
      [
        "SELECT Max ( Name ) FROM conductor",
        -18.388681411743164
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID ORDER BY T2.Year_of_Founded Desc LIMIT 1",
    "predicted_parse": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID ORDER BY T2.Year_of_Founded Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: for each row in conductor table , find the corresponding rows in orchestra table",
      "Step 2: find the name of the results of step 1 with largest value of year of founded"
    ],
    "template_feedback": "in step 1 , do not use the orchestra table . in step 2 , order the results by year of work in place of year of founded .",
    "primary_span": [
      [
        4,
        10
      ],
      [
        15,
        21
      ]
    ],
    "secondary_span": [
      [
        4,
        10
      ],
      [
        22,
        28
      ]
    ],
    "edits": [
      "orchestra",
      "year of work",
      "year of founded"
    ],
    "edits_original": "< from > remove orchestra </ from > < orderBy > add year of work </ orderBy > < orderBy > remove year of founded </ orderBy >"
  },
  {
    "db_id": "car_1",
    "feedback": "edispl is wrong . Take horsepower in place of it .",
    "question": "What is the average horsepower of the cars before 1980?",
    "gold_parse": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980",
    "beam": [
      [
        "SELECT Avg ( Edispl ) FROM cars_data WHERE Year < value",
        -0.11784505844116211
      ],
      [
        "SELECT Avg ( Horsepower ) FROM cars_data WHERE Year < value",
        -2.403045177459717
      ],
      [
        "SELECT Avg ( Weight ) FROM cars_data WHERE Year < value",
        -4.6503143310546875
      ],
      [
        "SELECT Avg ( * ) FROM cars_data WHERE Year < value",
        -5.099018096923828
      ],
      [
        "SELECT Avg ( Year ) FROM cars_data WHERE Year < value",
        -6.035700798034668
      ],
      [
        "SELECT Avg ( MPG ) FROM cars_data WHERE Year < value",
        -6.808445453643799
      ],
      [
        "SELECT Avg ( Cylinders ) FROM cars_data WHERE Year < value",
        -6.815217018127441
      ],
      [
        "SELECT Avg ( Accelerate ) FROM cars_data WHERE Year < value",
        -7.840425491333008
      ],
      [
        "SELECT Avg ( T1.Maker ) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id WHERE T4.Year < value",
        -10.73702621459961
      ],
      [
        "SELECT Count ( * ) FROM cars_data WHERE Year < value",
        -11.33325481414795
      ],
      [
        "SELECT Avg ( T1.ModelId ) FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T3.Year < value",
        -11.65181589126587
      ],
      [
        "SELECT Avg ( Edispl ) FROM cars_data WHERE Year > value",
        -12.038950443267822
      ],
      [
        "SELECT Avg ( T1.FullName ) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id WHERE T4.Year < value",
        -12.438334465026855
      ],
      [
        "SELECT Avg ( T1.Maker ) FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T3.Year < value",
        -12.516297340393066
      ],
      [
        "SELECT Avg ( T1.Id ) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id WHERE T4.Year < value",
        -12.586332321166992
      ],
      [
        "SELECT Avg ( T1.MakeId ) FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T2.Year < value",
        -12.851137161254883
      ],
      [
        "SELECT Avg ( Id ) FROM cars_data WHERE Year < value",
        -12.962610244750977
      ],
      [
        "SELECT Avg ( Edispl ) , Avg ( Year ) FROM cars_data WHERE Year < value",
        -13.155728340148926
      ],
      [
        "SELECT Avg ( T1.Country ) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id WHERE T4.Year < value",
        -13.497184753417969
      ],
      [
        "SELECT Avg ( T1.Model ) FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T3.Year < value",
        -13.594159126281738
      ]
    ],
    "predicted_parse_with_values": "SELECT Avg ( Edispl ) FROM cars_data WHERE Year < 1980",
    "predicted_parse": "SELECT Avg ( Edispl ) FROM cars_data WHERE Year < value",
    "predicted_parse_explanation": [
      "find the average edispl in cars data table whose year less than 1980"
    ],
    "template_feedback": "find average horsepower in place of average edispl .",
    "primary_span": [
      [
        0,
        2
      ]
    ],
    "secondary_span": [
      [
        3,
        8
      ]
    ],
    "edits": [
      "average horsepower",
      "average edispl"
    ],
    "edits_original": "< select > add average horsepower </ select > < select > remove average edispl </ select >"
  },
  {
    "db_id": "tvshow",
    "feedback": "Here only need to find country whose written by should not be equals to Todd Casey",
    "question": "What are the countries that are not playing cartoons written by Todd Casey?",
    "gold_parse": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
    "beam": [
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value EXCEPT SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value AND T2.Directed_by = value",
        -0.8998918533325195
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value EXCEPT SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value",
        -1.1818952560424805
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value EXCEPT SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = value",
        -2.092599868774414
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value EXCEPT SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value AND T2.Written_by = value",
        -2.929729461669922
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = value EXCEPT SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value AND T2.Directed_by = value",
        -3.27889347076416
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = value EXCEPT SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value",
        -3.496706008911133
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value EXCEPT SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = value AND T2.Directed_by = value",
        -4.064809799194336
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = value EXCEPT SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = value",
        -4.439749717712402
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 EXCEPT SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value AND T2.Directed_by = value",
        -7.862865447998047
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 EXCEPT SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value",
        -8.98000431060791
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 EXCEPT SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value AND T2.Written_by = value",
        -9.22720718383789
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value AND T2.Directed_by = value",
        -9.778803825378418
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value EXCEPT SELECT T1.Country FROM TV_Channel AS T1 WHERE T1.Language = value",
        -10.240026473999023
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 EXCEPT SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = value",
        -10.357132911682129
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value AND T2.Written_by = value",
        -11.192744255065918
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 EXCEPT SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = value AND T2.Directed_by = value",
        -11.199337005615234
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value EXCEPT SELECT T1.Country FROM TV_Channel AS T1 WHERE T1.series_name = value",
        -11.46147632598877
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value EXCEPT SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by ! = value",
        -11.624960899353027
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by ! = value ORDER BY T1.Country Asc",
        -12.703563928604126
      ],
      [
        "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value ORDER BY T1.Country Asc",
        -13.833820819854736
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = \"Michael Jelenic\" EXCEPT SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = \"Todd Casey\" AND T2.Directed_by = \"Ben Jones\"",
    "predicted_parse": "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value EXCEPT SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value AND T2.Directed_by = value",
    "predicted_parse_explanation": [
      "Step 1: for each row in tv channel table , find the corresponding rows in cartoon table",
      "Step 2: find the country of the results of step 1 whose written by equals Michael Jelenic",
      "Step 3: for each row in tv channel table , find the corresponding rows in cartoon table",
      "Step 4: find the country of the results of step 3 whose written by equals Todd Casey and directed by equals Ben Jones",
      "Step 5: show the rows that are in the results of step 2 but not in the results of step 4"
    ],
    "template_feedback": "in step 1 , do not use the cartoon table . in step 2 , remove the written by equals Michael Jelenic conditions . in step 4 , remove the directed by equals Ben Jones conditions .",
    "primary_span": [
      [
        4,
        10
      ],
      [
        15,
        23
      ],
      [
        28,
        36
      ]
    ],
    "secondary_span": [
      [
        4,
        10
      ]
    ],
    "edits": [
      "cartoon",
      "written by equals \"Michael Jelenic\"",
      "directed by equals \"Ben Jones\""
    ],
    "edits_original": "< from > remove cartoon </ from > < where > remove written by equals \" Michael Jelenic \" </ where > < where > remove directed by equals \" Ben Jones \" </ where >"
  },
  {
    "db_id": "course_teach",
    "feedback": "find corresponding rows to each value of teacher id in course arrange .",
    "question": "Show names of teachers and the number of courses they teach.",
    "gold_parse": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name",
    "beam": [
      [
        "SELECT Name , Count ( * ) FROM teacher GROUP BY Name",
        -0.40821170806884766
      ],
      [
        "SELECT T1.Name , Count ( * ) FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Teacher_ID",
        -1.0938520431518555
      ],
      [
        "SELECT Name , Count ( * ) FROM teacher GROUP BY Teacher_ID",
        -8.437112808227539
      ],
      [
        "SELECT Name , Count ( * ) FROM teacher",
        -13.080450057983398
      ],
      [
        "SELECT Name FROM teacher GROUP BY Name",
        -13.277494430541992
      ],
      [
        "SELECT T2.Name , Count ( * ) , T1.Course FROM course AS T1 JOIN teacher AS T2 JOIN course_arrange AS T3 ON T1.Course_ID = T3.Course_ID AND T3.Teacher_ID = T2.Teacher_ID AND T1.Course_ID = T3.Course_ID GROUP BY T3.Teacher_ID",
        -13.423598766326904
      ],
      [
        "SELECT T1.Name , Count ( * ) , T2.Teacher_ID FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Teacher_ID",
        -13.805222988128662
      ],
      [
        "SELECT Name , Count ( DISTINCT Name ) FROM teacher GROUP BY Name",
        -13.93667984008789
      ],
      [
        "SELECT T1.Name , Count ( * ) FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Teacher_ID ORDER BY Count ( * ) Desc LIMIT value",
        -14.07689380645752
      ],
      [
        "SELECT T1.Name , Count ( * ) FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Course_ID",
        -14.164956092834473
      ],
      [
        "SELECT T2.Name , Sum ( T1.Course ) FROM course AS T1 JOIN teacher AS T2 JOIN course_arrange AS T3 ON T1.Course_ID = T3.Course_ID AND T3.Teacher_ID = T2.Teacher_ID AND T1.Course_ID = T3.Course_ID GROUP BY T3.Teacher_ID",
        -14.218917310237885
      ],
      [
        "SELECT Name , Sum ( Name ) FROM teacher GROUP BY Name",
        -14.48600459098816
      ],
      [
        "SELECT Count ( * ) , Name FROM teacher GROUP BY Name",
        -14.561090469360352
      ],
      [
        "SELECT T1.Name , Count ( * ) , T1.Teacher_ID FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Teacher_ID",
        -14.659324645996094
      ],
      [
        "SELECT Name , Count ( * ) FROM teacher GROUP BY Hometown",
        -14.676849365234375
      ],
      [
        "SELECT T1.Name , Count ( T2.Course_ID ) FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T1.Name",
        -14.744099617004395
      ],
      [
        "SELECT T2.Name , Count ( * ) FROM course AS T1 JOIN teacher AS T2 JOIN course_arrange AS T3 ON T1.Course_ID = T3.Course_ID AND T3.Teacher_ID = T2.Teacher_ID GROUP BY T1.Staring_Date",
        -14.975812911987305
      ],
      [
        "SELECT T2.Name , Sum ( T1.Course ) FROM course AS T1 JOIN teacher AS T2 JOIN course_arrange AS T3 ON T1.Course_ID = T3.Course_ID AND T3.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name",
        -14.997961938381195
      ],
      [
        "SELECT T1.Name , Sum ( T2.Course_ID ) FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Teacher_ID",
        -15.063315391540527
      ],
      [
        "SELECT T1.Name FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Teacher_ID",
        -16.35510778427124
      ]
    ],
    "predicted_parse_with_values": "SELECT Name , Count ( * ) FROM teacher GROUP BY Name",
    "predicted_parse": "SELECT Name , Count ( * ) FROM teacher GROUP BY Name",
    "predicted_parse_explanation": [
      "find each value of name in teacher table along with the number of the corresponding rows to each value"
    ],
    "template_feedback": "additionally use the information from the course arrange table besides the teacher table .",
    "primary_span": [
      [
        0,
        8
      ]
    ],
    "secondary_span": [
      [
        9,
        13
      ]
    ],
    "edits": [
      "course arrange"
    ],
    "edits_original": "< from > add course arrange </ from >"
  },
  {
    "db_id": "network_1",
    "feedback": "You have to assure the presence of student id in friend and likes table in step 1 and 2 respectively.",
    "question": "What are the names of high schoolers who both have friends and are liked?",
    "gold_parse": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id",
    "beam": [
      [
        "SELECT name FROM Highschooler WHERE grade = value INTERSECT SELECT name FROM Highschooler WHERE grade = value",
        -0.0030727386474609375
      ],
      [
        "SELECT name FROM Highschooler WHERE grade = value INTERSECT SELECT name FROM Highschooler WHERE name = name",
        -6.826787948608398
      ],
      [
        "SELECT name FROM Highschooler WHERE grade = value INTERSECT SELECT name FROM Highschooler WHERE name = value",
        -7.415349006652832
      ],
      [
        "SELECT name FROM Highschooler WHERE grade = value INTERSECT SELECT name FROM Highschooler",
        -7.87800407409668
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 WHERE T1.grade = value INTERSECT SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id WHERE T2.friend_id = T1.name",
        -7.920429229736328
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 WHERE T1.grade = value INTERSECT SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id WHERE T2.liked_id = T1.name",
        -8.563467025756836
      ],
      [
        "SELECT name FROM Highschooler INTERSECT SELECT name FROM Highschooler WHERE grade = value",
        -8.602606296539307
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 WHERE T1.grade = value INTERSECT SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id WHERE T2.liked_id = value",
        -9.12610912322998
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 WHERE T1.grade = value INTERSECT SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id WHERE T2.friend_id = value",
        -9.914225578308105
      ],
      [
        "SELECT name FROM Highschooler WHERE grade = value INTERSECT SELECT name FROM Highschooler WHERE grade = name",
        -11.459002494812012
      ],
      [
        "SELECT grade FROM Highschooler WHERE grade = value INTERSECT SELECT name FROM Highschooler WHERE grade = value",
        -11.675817966461182
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 WHERE T1.grade = value INTERSECT SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id WHERE T2.student_id = T1.name",
        -11.729668617248535
      ],
      [
        "SELECT name FROM Highschooler WHERE grade = value INTERSECT SELECT name FROM Highschooler WHERE grade < value",
        -11.738763809204102
      ],
      [
        "SELECT name FROM Highschooler WHERE grade = name INTERSECT SELECT name FROM Highschooler WHERE grade = value",
        -11.806349754333496
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 WHERE T1.grade = value INTERSECT SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id WHERE T2.student_id = T1.name",
        -12.173186302185059
      ],
      [
        "SELECT name FROM Highschooler WHERE grade ! = value",
        -12.494775772094727
      ],
      [
        "SELECT name FROM Highschooler INTERSECT SELECT name FROM Highschooler",
        -12.78290843963623
      ],
      [
        "SELECT name FROM Highschooler WHERE grade = value",
        -13.801797866821289
      ],
      [
        "SELECT name , grade FROM Highschooler",
        -16.01224136352539
      ],
      [
        "SELECT name FROM Highschooler",
        -16.36396598815918
      ]
    ],
    "predicted_parse_with_values": "SELECT name FROM Highschooler WHERE grade = 9 INTERSECT SELECT name FROM Highschooler WHERE grade = 9",
    "predicted_parse": "SELECT name FROM Highschooler WHERE grade = value INTERSECT SELECT name FROM Highschooler WHERE grade = value",
    "predicted_parse_explanation": [
      "Step 1: find the name in high schooler table whose grade equals 9",
      "Step 2: find the name in high schooler table whose grade equals 9",
      "Step 3: show the rows that are in both the results of step 1 and step 2"
    ],
    "template_feedback": "in step 1 , additionally use the information from the friend table besides the high schooler table . remove the grade equals 9 conditions . in step 2 , additionally use the information from the likes table besides the high schooler table . remove the grade equals 9 conditions .",
    "primary_span": [
      [
        4,
        11
      ],
      [
        18,
        24
      ],
      [
        29,
        36
      ],
      [
        43,
        49
      ]
    ],
    "secondary_span": [
      [
        12,
        17
      ],
      [
        37,
        42
      ]
    ],
    "edits": [
      "friend",
      "grade equals 9",
      "likes",
      "grade equals 9"
    ],
    "edits_original": "< from > add friend </ from > < where > remove grade equals 9 </ where > < from > add likes </ from > < where > remove grade equals 9 </ where >"
  },
  {
    "db_id": "course_teach",
    "feedback": "You need to use teacher table.",
    "question": "What is the total count of teachers?",
    "gold_parse": "SELECT count(*) FROM teacher",
    "beam": [
      [
        "SELECT Count ( * ) FROM course",
        -6.389617919921875e-05
      ],
      [
        "SELECT Sum ( * ) FROM course",
        -9.932831525802612
      ],
      [
        "SELECT Count ( * ) FROM teacher GROUP BY Name",
        -13.462078511714935
      ],
      [
        "SELECT Count ( * ) , Name FROM teacher",
        -13.718948245048523
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM course",
        -13.863846778869629
      ],
      [
        "SELECT Avg ( * ) FROM course",
        -13.966369718313217
      ],
      [
        "SELECT Count ( * ) FROM teacher GROUP BY Hometown",
        -14.244701623916626
      ],
      [
        "SELECT Count ( * ) FROM course GROUP BY *",
        -14.264763355255127
      ],
      [
        "SELECT Count ( * ) FROM teacher WHERE Hometown = value",
        -14.717382490634918
      ],
      [
        "SELECT Count ( * ) FROM teacher WHERE Name = value",
        -15.000487625598907
      ],
      [
        "SELECT Count ( Count ( * ) ) FROM course",
        -15.17809009552002
      ],
      [
        "SELECT Count ( * ) , Hometown FROM teacher",
        -15.276010632514954
      ],
      [
        "SELECT Count ( * ) FROM course ORDER BY * Desc LIMIT value",
        -15.92009973526001
      ],
      [
        "SELECT Count ( * ) FROM teacher GROUP BY Name HAVING Count ( * ) = value",
        -15.956212818622589
      ],
      [
        "SELECT Max ( * ) FROM course",
        -16.302445769309998
      ],
      [
        "SELECT Count ( Avg ( * ) ) FROM course",
        -16.535744667053223
      ],
      [
        "SELECT Count ( * ) FROM course",
        -16.774361610412598
      ],
      [
        "SELECT Count ( Sum ( * ) ) FROM course",
        -17.035359382629395
      ],
      [
        "SELECT Count ( * ) FROM course LIMIT value",
        -17.053454399108887
      ],
      [
        "SELECT Count ( DISTINCT * ) FROM course",
        -17.34835147857666
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM course",
    "predicted_parse": "SELECT Count ( * ) FROM course",
    "predicted_parse_explanation": [
      "find the number of rows in course table"
    ],
    "template_feedback": "use teacher table in place of course table .",
    "primary_span": [
      [
        0,
        2
      ]
    ],
    "secondary_span": [
      [
        3,
        8
      ]
    ],
    "edits": [
      "teacher",
      "course"
    ],
    "edits_original": "< from > add teacher </ from > < from > remove course </ from >"
  },
  {
    "db_id": "wta_1",
    "feedback": "In both step 2 and in step 3 exchange loser ioc with tourney name .",
    "question": "What are the first names and country codes for players who won both the WTA Championships and the Australian Open?",
    "gold_parse": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'",
    "beam": [
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = value INTERSECT SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = value",
        -0.002376556396484375
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = value INTERSECT SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.winner_ioc = value",
        -6.56312370300293
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.winner_ioc = value INTERSECT SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = value",
        -7.287466049194336
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = value INTERSECT SELECT T1.first_name , T1.country_code , T2.loser_ioc FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = value",
        -8.91457748413086
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = value INTERSECT SELECT T1.first_name , T2.loser_ioc FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = value",
        -9.722078323364258
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = value INTERSECT SELECT T1.first_name , T1.country_code FROM players AS T1",
        -10.322246551513672
      ],
      [
        "SELECT T1.first_name , T1.country_code , T2.loser_ioc FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = value INTERSECT SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = value",
        -12.204296112060547
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = value INTERSECT SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc LIKE value",
        -12.558759689331055
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = value",
        -12.597161293029785
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = value INTERSECT SELECT T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = value",
        -12.836706161499023
      ],
      [
        "SELECT T1.first_name , T2.loser_ioc FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = value INTERSECT SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = value",
        -12.934774398803711
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = value INTERSECT SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = value INTERSECT SELECT T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = value",
        -12.985990524291992
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = value INTERSECT SELECT T2.winner_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = value",
        -13.030328750610352
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = value INTERSECT SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.winner_entry = value",
        -13.090500831604004
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = value INTERSECT SELECT T2.tourney_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = value",
        -13.150403022766113
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.winner_entry = value INTERSECT SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = value",
        -13.159998893737793
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = value INTERSECT SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.loser_ioc HAVING T2.loser_ioc = value",
        -13.56493091583252
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = value INTERSECT SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc ! = value",
        -13.603693962097168
      ],
      [
        "SELECT T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = value INTERSECT SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = value",
        -13.633190155029297
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 INTERSECT SELECT T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = value",
        -14.320843696594238
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = \"WTA Championships\" INTERSECT SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = \"Australian Open\"",
    "predicted_parse": "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = value INTERSECT SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = value",
    "predicted_parse_explanation": [
      "Step 1: for each row in players table , find the corresponding rows in matches table",
      "Step 2: find the first name and country code of the results of step 1 whose loser ioc equals WTA Championships",
      "Step 3: for each row in players table , find the corresponding rows in matches table",
      "Step 4: find the first name and country code of the results of step 3 whose loser ioc equals Australian Open",
      "Step 5: show the rows that are in both the results of step 2 and step 4"
    ],
    "template_feedback": "in step 2 , consider the tourney name equals WTA Championships conditions in place of the loser ioc equals WTA Championships conditions . in step 4 , consider the tourney name equals Australian Open conditions in place of the loser ioc equals Australian Open conditions .",
    "primary_span": [
      [
        4,
        11
      ],
      [
        27,
        34
      ]
    ],
    "secondary_span": [
      [
        12,
        22
      ],
      [
        35,
        45
      ]
    ],
    "edits": [
      "tourney name equals \"WTA Championships\"",
      "loser ioc equals \"WTA Championships\"",
      "tourney name equals \"Australian Open\"",
      "loser ioc equals \"Australian Open\""
    ],
    "edits_original": "< where > add tourney name equals \" WTA Championships \" </ where > < where > remove loser ioc equals \" WTA Championships \" </ where > < where > add tourney name equals \" Australian Open \" </ where > < where > remove loser ioc equals \" Australian Open \" </ where >"
  },
  {
    "db_id": "employee_hire_evaluation",
    "feedback": "Make sure to find number products for each shop in step 1.",
    "question": "What are the manager name and district of the shop that sells the largest number of products?",
    "gold_parse": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1",
    "beam": [
      [
        "SELECT Manager_name , District FROM shop GROUP BY Shop_ID ORDER BY Count ( * ) Desc LIMIT value",
        -0.40659332275390625
      ],
      [
        "SELECT Name , District FROM shop GROUP BY Shop_ID ORDER BY Count ( * ) Desc LIMIT value",
        -1.3310813903808594
      ],
      [
        "SELECT T1.Manager_name , T1.District FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T2.Shop_ID ORDER BY Count ( * ) Desc LIMIT value",
        -3.0162229537963867
      ],
      [
        "SELECT T1.Name , T1.District FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T2.Shop_ID ORDER BY Count ( * ) Desc LIMIT value",
        -3.9240713119506836
      ],
      [
        "SELECT Manager_name , District FROM shop ORDER BY Number_products Desc LIMIT value",
        -7.411260604858398
      ],
      [
        "SELECT Name , District FROM shop ORDER BY Number_products Desc LIMIT value",
        -7.680149078369141
      ],
      [
        "SELECT Manager_name , District FROM shop WHERE Number_products = ( SELECT Max ( Number_products ) FROM shop )",
        -11.65181827545166
      ],
      [
        "SELECT Name , District FROM shop WHERE Number_products = ( SELECT Max ( Number_products ) FROM shop )",
        -11.850986003875732
      ],
      [
        "SELECT Manager_name , District FROM shop GROUP BY Shop_ID",
        -12.041604042053223
      ],
      [
        "SELECT Manager_name , District , Shop_ID FROM shop GROUP BY Shop_ID ORDER BY Count ( * ) Desc LIMIT value",
        -12.389741897583008
      ],
      [
        "SELECT Name , District , Shop_ID FROM shop GROUP BY Shop_ID ORDER BY Count ( * ) Desc LIMIT value",
        -12.601323127746582
      ],
      [
        "SELECT Name , District FROM shop GROUP BY Shop_ID",
        -12.892532348632812
      ],
      [
        "SELECT Manager_name , District FROM shop WHERE Location = ( SELECT Shop_ID FROM shop GROUP BY Shop_ID ORDER BY Count ( * ) Desc LIMIT value )",
        -12.896288394927979
      ],
      [
        "SELECT Manager_name , District FROM shop WHERE Shop_ID IN ( SELECT Shop_ID FROM shop GROUP BY Shop_ID ORDER BY Count ( * ) Desc LIMIT value )",
        -12.956829071044922
      ],
      [
        "SELECT Name , District FROM shop WHERE Location = ( SELECT Shop_ID FROM shop GROUP BY Shop_ID ORDER BY Count ( * ) Desc LIMIT value )",
        -13.021781921386719
      ],
      [
        "SELECT T1.Manager_name , T1.District FROM shop AS T1 WHERE T1.Location = ( SELECT T2.Shop_ID FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY Count ( * ) Desc LIMIT value )",
        -13.136499881744385
      ],
      [
        "SELECT T1.Manager_name , T1.District FROM shop AS T1 WHERE T1.Shop_ID IN ( SELECT T2.Shop_ID FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY Count ( * ) Desc LIMIT value )",
        -13.204545974731445
      ],
      [
        "SELECT Name , District FROM shop WHERE Shop_ID IN ( SELECT Shop_ID FROM shop GROUP BY Shop_ID ORDER BY Count ( * ) Desc LIMIT value )",
        -13.233668327331543
      ],
      [
        "SELECT Manager_name , District FROM shop",
        -14.130985260009766
      ],
      [
        "SELECT Name , District FROM shop",
        -14.146198272705078
      ]
    ],
    "predicted_parse_with_values": "SELECT Manager_name , District FROM shop GROUP BY Shop_ID ORDER BY Count ( * ) Desc LIMIT 1",
    "predicted_parse": "SELECT Manager_name , District FROM shop GROUP BY Shop_ID ORDER BY Count ( * ) Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of shop id in shop table",
      "Step 2: find the manager name and district in shop table with largest value in the results of step 1"
    ],
    "template_feedback": "in step 1 , do not find for each value of shop id . in step 2 , order the results by number products in place of number of rows .",
    "primary_span": [
      [
        4,
        13
      ],
      [
        18,
        23
      ]
    ],
    "secondary_span": [
      [
        24,
        30
      ]
    ],
    "edits": [
      "shop id",
      "number products",
      "number of rows"
    ],
    "edits_original": "< groupBy > remove shop id </ groupBy > < orderBy > add number products </ orderBy > < orderBy > remove number of rows </ orderBy >"
  },
  {
    "db_id": "world_1",
    "feedback": "Display number of rows of countrylanguage table whose country equals Afghanistan , mention is official equals T .",
    "question": "How many official languages does Afghanistan have?",
    "gold_parse": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"",
    "beam": [
      [
        "SELECT Count ( DISTINCT Code2 ) FROM country",
        -0.0010395050048828125
      ],
      [
        "SELECT Count ( DISTINCT Code ) FROM country",
        -7.5882720947265625
      ],
      [
        "SELECT Count ( DISTINCT Code2 ) FROM country WHERE Continent = value",
        -7.911436080932617
      ],
      [
        "SELECT Count ( * ) FROM city",
        -9.153563499450684
      ],
      [
        "SELECT Count ( Code2 ) FROM country",
        -10.654711723327637
      ],
      [
        "SELECT Count ( DISTINCT Language ) FROM countrylanguage",
        -11.67861270904541
      ],
      [
        "SELECT Count ( DISTINCT LocalName ) FROM country",
        -12.069808006286621
      ],
      [
        "SELECT Count ( DISTINCT Code2 ) FROM country WHERE Name = value",
        -12.436380386352539
      ],
      [
        "SELECT Count ( DISTINCT GovernmentForm ) FROM country",
        -12.610930442810059
      ],
      [
        "SELECT Count ( DISTINCT Code2 ) FROM country WHERE GovernmentForm = value",
        -12.895336627960205
      ],
      [
        "SELECT Count ( DISTINCT Code2 ) FROM country GROUP BY Code2",
        -12.943352699279785
      ],
      [
        "SELECT Count ( DISTINCT Code2 ) FROM country WHERE LocalName = value",
        -13.508328914642334
      ],
      [
        "SELECT Sum ( Code2 ) FROM country",
        -13.521543502807617
      ],
      [
        "SELECT DISTINCT Count ( DISTINCT Code2 ) FROM country",
        -13.601913452148438
      ],
      [
        "SELECT Count ( DISTINCT Code2 ) FROM country WHERE Code2 = value",
        -13.738870620727539
      ],
      [
        "SELECT Avg ( Code2 ) FROM country",
        -14.454059600830078
      ],
      [
        "SELECT Count ( DISTINCT HeadOfState ) FROM country",
        -14.978092193603516
      ],
      [
        "SELECT Count ( DISTINCT Code2 ) , Count ( DISTINCT Code2 ) FROM country",
        -14.985576152801514
      ],
      [
        "SELECT Count ( DISTINCT Name ) FROM country",
        -15.085602760314941
      ],
      [
        "SELECT Count ( DISTINCT Continent ) FROM country",
        -15.649054527282715
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( DISTINCT Code2 ) FROM country",
    "predicted_parse": "SELECT Count ( DISTINCT Code2 ) FROM country",
    "predicted_parse_explanation": [
      "find the number of different code2 in country table"
    ],
    "template_feedback": "additionally use the information from the countrylanguage table besides the country table . additionally make sure that is official equals T and name equals Afghanistan . find number of rows in place of number of different code2 .",
    "primary_span": [
      [
        0,
        7
      ],
      [
        13,
        25
      ],
      [
        26,
        29
      ]
    ],
    "secondary_span": [
      [
        8,
        12
      ],
      [
        30,
        37
      ]
    ],
    "edits": [
      "number of rows",
      "number of distinct code2",
      "countrylanguage",
      "name equals \"Afghanistan\"",
      "is official equals \"T\""
    ],
    "edits_original": "< select > add number of rows </ select > < select > remove number of distinct code2 </ select > < from > add countrylanguage </ from > < where > add name equals \" Afghanistan \" </ where > < where > add is official equals \" T \" </ where >"
  },
  {
    "db_id": "world_1",
    "feedback": "use language of countrylanguage in place of continent.",
    "question": "How many continents speak Chinese?",
    "gold_parse": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"",
    "beam": [
      [
        "SELECT Count ( * ) FROM country WHERE Continent = value",
        -0.009073257446289062
      ],
      [
        "SELECT Count ( * ) FROM country WHERE Name = value",
        -4.7345380783081055
      ],
      [
        "SELECT Count ( * ) FROM country WHERE LocalName = value",
        -8.628338813781738
      ],
      [
        "SELECT Count ( * ) FROM countrylanguage WHERE Language = value",
        -9.728142738342285
      ],
      [
        "SELECT Count ( * ) FROM country WHERE GovernmentForm = value",
        -13.00938892364502
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM country WHERE Continent = value",
        -13.979473114013672
      ],
      [
        "SELECT Count ( * ) FROM country WHERE Region = value",
        -14.00851058959961
      ],
      [
        "SELECT Count ( * ) FROM country WHERE LifeExpectancy = value",
        -14.047198295593262
      ],
      [
        "SELECT Count ( * ) FROM country WHERE Continent > value",
        -14.773203372955322
      ],
      [
        "SELECT Count ( * ) FROM country WHERE Code2 = value",
        -15.090632438659668
      ],
      [
        "SELECT Count ( * ) FROM city",
        -15.11638069152832
      ],
      [
        "SELECT Count ( * ) , Count ( * ) FROM country WHERE Continent = value",
        -15.388535499572754
      ],
      [
        "SELECT Name FROM country WHERE Continent = value",
        -15.44775703549385
      ],
      [
        "SELECT Sum ( * ) FROM country WHERE Continent = value",
        -16.10095751285553
      ],
      [
        "SELECT Count ( * ) FROM sqlite_sequence WHERE name = value",
        -16.114285469055176
      ],
      [
        "SELECT Count ( * ) FROM country WHERE Continent LIKE value",
        -16.179442405700684
      ],
      [
        "SELECT Count ( Count ( * ) ) FROM country WHERE Continent = value",
        -16.228134155273438
      ],
      [
        "SELECT Count ( * ) FROM country WHERE HeadOfState = value",
        -16.323973655700684
      ],
      [
        "SELECT Avg ( * ) FROM country WHERE Continent = value",
        -16.365123867988586
      ],
      [
        "SELECT Count ( * ) FROM country WHERE Population = value",
        -16.68849468231201
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM country WHERE Continent = \"Chinese\"",
    "predicted_parse": "SELECT Count ( * ) FROM country WHERE Continent = value",
    "predicted_parse_explanation": [
      "find the number of rows in country table whose continent equals Chinese"
    ],
    "template_feedback": "additionally use the information from the countrylanguage table besides the country table . consider the language equals Chinese conditions in place of the continent equals Chinese conditions . find number of different continent in place of number of rows .",
    "primary_span": [
      [
        0,
        7
      ],
      [
        13,
        18
      ],
      [
        28,
        32
      ]
    ],
    "secondary_span": [
      [
        8,
        12
      ],
      [
        19,
        27
      ],
      [
        33,
        39
      ]
    ],
    "edits": [
      "number of distinct continent",
      "number of rows",
      "countrylanguage",
      "language equals \"Chinese\"",
      "continent equals \"Chinese\""
    ],
    "edits_original": "< select > add number of distinct continent </ select > < select > remove number of rows </ select > < from > add countrylanguage </ from > < where > add language equals \" Chinese \" </ where > < where > remove continent equals \" Chinese \" </ where >"
  },
  {
    "db_id": "car_1",
    "feedback": "You need to find car makers table , Search for weight above 3500 and cylinders equivalent with General motors.",
    "question": "What are the different models created by either the car maker General Motors or weighed more than 3500?",
    "gold_parse": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500",
    "beam": [
      [
        "SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T3.Horsepower > value OR T3.Horsepower = value",
        -1.5782485008239746
      ],
      [
        "SELECT DISTINCT T2.Model FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker AND T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id WHERE T4.Horsepower > value OR T1.Maker = value",
        -1.61970853805542
      ],
      [
        "SELECT DISTINCT T2.Model FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker AND T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id WHERE T4.Weight > value OR T1.Maker = value",
        -1.7073192596435547
      ],
      [
        "SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T3.Weight > value OR T3.Horsepower = value",
        -2.007770299911499
      ],
      [
        "SELECT DISTINCT T2.Model FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker AND T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id WHERE T1.Maker = value OR T4.Weight > value",
        -2.686725616455078
      ],
      [
        "SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T3.Horsepower = value OR T3.Weight > value",
        -2.8989923000335693
      ],
      [
        "SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T3.Horsepower > value OR T3.Weight = value",
        -3.400503635406494
      ],
      [
        "SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T3.Horsepower > value OR T3.Weight > value",
        -3.8632707595825195
      ],
      [
        "SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T3.Weight > value OR T3.Weight = value",
        -4.12263298034668
      ],
      [
        "SELECT DISTINCT T2.Model FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker AND T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id WHERE T1.Maker = value OR T4.Horsepower > value",
        -4.4070940017700195
      ],
      [
        "SELECT DISTINCT T2.Model FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker AND T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id WHERE T4.Horsepower > value OR T1.FullName = value",
        -4.422980308532715
      ],
      [
        "SELECT DISTINCT T2.Model FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker AND T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id WHERE T4.Weight > value OR T1.FullName = value",
        -4.741692066192627
      ],
      [
        "SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T3.Horsepower = value OR T3.Horsepower > value",
        -5.4460694789886475
      ],
      [
        "SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T3.Horsepower > value OR T3.Accelerate = value",
        -5.708220958709717
      ],
      [
        "SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T3.Weight > value OR T3.Weight > value",
        -5.733858108520508
      ],
      [
        "SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T1.Maker = value OR T3.Weight > value",
        -5.781772136688232
      ],
      [
        "SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T3.Horsepower > value OR T3.Weight < value",
        -5.784061431884766
      ],
      [
        "SELECT DISTINCT T3.Model FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country AND T1.CountryId = T2.Country JOIN model_list AS T3 ON T2.Id = T3.Maker AND T2.Id = T3.Maker JOIN car_names AS T4 ON T3.Model = T4.Model JOIN cars_data AS T5 ON T4.MakeId = T5.Id WHERE T5.Horsepower > value OR T1.CountryName = value",
        -5.90320348739624
      ],
      [
        "SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T3.Horsepower > value OR T3.Horsepower > value",
        -5.917823791503906
      ],
      [
        "SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T3.Horsepower > value OR T3.Cylinders = value",
        -5.973959445953369
      ]
    ],
    "predicted_parse_with_values": "SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T3.Horsepower > 3500 OR T3.Horsepower = \"General Motors\"",
    "predicted_parse": "SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T3.Horsepower > value OR T3.Horsepower = value",
    "predicted_parse_explanation": [
      "Step 1: for each row in model list table , find the corresponding rows in car names table and in cars data table",
      "Step 2: find without repetition model list 's model of the results of step 1 whose horsepower greater than 3500 or horsepower equals General Motors"
    ],
    "template_feedback": "in step 1 , additionally use the information from the car makers table . in step 2 , consider the weight greater than 3500 or full name equals General Motors conditions in place of the horsepower greater than 3500 or horsepower equals General Motors conditions .",
    "primary_span": [
      [
        4,
        13
      ],
      [
        18,
        30
      ]
    ],
    "secondary_span": [
      [
        31,
        45
      ]
    ],
    "edits": [
      "car makers",
      "full name equals \"General Motors\" or weight greater than 3500",
      "horsepower greater than 3500 or horsepower equals \"General Motors\""
    ],
    "edits_original": "< from > add car makers </ from > < where > add full name equals \" General Motors \" or weight greater than 3500 </ where > < where > remove horsepower greater than 3500 or horsepower equals \" General Motors \" </ where >"
  },
  {
    "db_id": "dog_kennels",
    "feedback": "In step 2 Supersede treatment type code with size code .",
    "question": "Find the distinct breed type and size type combinations for dogs.",
    "gold_parse": "SELECT DISTINCT breed_code ,  size_code FROM dogs",
    "beam": [
      [
        "SELECT DISTINCT T1.breed_name , T3.treatment_type_code FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id",
        -0.8886046409606934
      ],
      [
        "SELECT DISTINCT T1.treatment_type_code , T2.treatment_type_code FROM Treatment_Types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code",
        -1.5475983619689941
      ],
      [
        "SELECT DISTINCT T1.breed_name , T2.weight FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code",
        -2.2978291511535645
      ],
      [
        "SELECT DISTINCT treatment_type_code , treatment_type_code FROM Treatments",
        -2.3885278701782227
      ],
      [
        "SELECT DISTINCT T2.treatment_type_code , T1.weight FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id",
        -2.858607292175293
      ],
      [
        "SELECT DISTINCT T1.treatment_type_code , T2.weight FROM Treatment_Types AS T1 JOIN Dogs AS T2 JOIN Treatments AS T3 ON T1.treatment_type_code = T3.treatment_type_code AND T3.dog_id = T2.dog_id",
        -3.181321144104004
      ],
      [
        "SELECT DISTINCT T1.breed_name , T2.treatment_type_code FROM Breeds AS T1 JOIN Treatment_Types AS T2 JOIN Dogs AS T3 ON T1.breed_code = T3.breed_code JOIN Treatments AS T4 ON T3.dog_id = T4.dog_id AND T4.treatment_type_code = T2.treatment_type_code",
        -3.1892142295837402
      ],
      [
        "SELECT DISTINCT T2.treatment_type_code , T1.treatment_type_code FROM Treatment_Types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code",
        -4.366471290588379
      ],
      [
        "SELECT DISTINCT treatment_type_code , treatment_type_code FROM Treatment_Types",
        -4.613326787948608
      ],
      [
        "SELECT DISTINCT T1.breed_name , T2.gender FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code",
        -5.383576393127441
      ],
      [
        "SELECT DISTINCT breed_name , breed_name FROM Breeds",
        -5.945217132568359
      ],
      [
        "SELECT DISTINCT T1.breed_name , T2.treatment_type_description FROM Breeds AS T1 JOIN Treatment_Types AS T2 JOIN Dogs AS T3 ON T1.breed_code = T3.breed_code JOIN Treatments AS T4 ON T3.dog_id = T4.dog_id AND T4.treatment_type_code = T2.treatment_type_code",
        -6.108818054199219
      ],
      [
        "SELECT DISTINCT T2.treatment_type_code , T1.gender FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id",
        -6.210773944854736
      ],
      [
        "SELECT DISTINCT T1.treatment_type_code , T2.gender FROM Treatment_Types AS T1 JOIN Dogs AS T2 JOIN Treatments AS T3 ON T1.treatment_type_code = T3.treatment_type_code AND T3.dog_id = T2.dog_id",
        -6.212553024291992
      ],
      [
        "SELECT DISTINCT T2.treatment_type_code , T1.breed_name FROM Breeds AS T1 JOIN Treatment_Types AS T2 JOIN Dogs AS T3 ON T1.breed_code = T3.breed_code JOIN Treatments AS T4 ON T3.dog_id = T4.dog_id AND T4.treatment_type_code = T2.treatment_type_code",
        -6.568348407745361
      ],
      [
        "SELECT DISTINCT T2.treatment_type_code , T1.treatment_type_description FROM Treatment_Types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code",
        -6.790517330169678
      ],
      [
        "SELECT DISTINCT treatment_type_code , treatment_type_description FROM Treatment_Types",
        -7.038999557495117
      ],
      [
        "SELECT DISTINCT T3.treatment_type_code , T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id",
        -7.040228366851807
      ],
      [
        "SELECT DISTINCT T1.gender , T2.treatment_type_code FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id",
        -7.249567031860352
      ],
      [
        "SELECT DISTINCT treatment_type_code FROM Treatments",
        -13.795206069946289
      ]
    ],
    "predicted_parse_with_values": "SELECT DISTINCT T1.breed_name , T3.treatment_type_code FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id",
    "predicted_parse": "SELECT DISTINCT T1.breed_name , T3.treatment_type_code FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id",
    "predicted_parse_explanation": [
      "Step 1: for each row in breeds table , find the corresponding rows in dogs table and in treatments table",
      "Step 2: find without repetition breed name and treatment type code of the results of step 1"
    ],
    "template_feedback": "in step 1 , do not use the breeds table and treatments table . in step 2 , find dogs 's breed code and size code in place of breed name and treatment type code .",
    "primary_span": [
      [
        4,
        13
      ],
      [
        18,
        25
      ]
    ],
    "secondary_span": [
      [
        4,
        13
      ],
      [
        26,
        35
      ]
    ],
    "edits": [
      "breed code",
      "size code",
      "breed name",
      "treatment type code",
      "breeds",
      "treatments"
    ],
    "edits_original": "< select > add breed code </ select > < select > add size code </ select > < select > remove breed name </ select > < select > remove treatment type code </ select > < from > remove breeds </ from > < from > remove treatments </ from >"
  },
  {
    "db_id": "world_1",
    "feedback": "Find number of rows of language in countrylanguage table .",
    "question": "Which language is spoken by the largest number of countries?",
    "gold_parse": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1",
    "beam": [
      [
        "SELECT Code2 FROM country ORDER BY Continent Desc LIMIT value",
        -1.4857826232910156
      ],
      [
        "SELECT Code2 FROM country ORDER BY Population Desc LIMIT value",
        -1.4938173294067383
      ],
      [
        "SELECT T1.name FROM sqlite_sequence AS T1 JOIN country AS T2 ORDER BY T2.Continent Desc LIMIT value",
        -1.6552462577819824
      ],
      [
        "SELECT T1.name FROM sqlite_sequence AS T1 JOIN country AS T2 ORDER BY T2.Population Desc LIMIT value",
        -1.6650795936584473
      ],
      [
        "SELECT Name FROM country ORDER BY Population Desc LIMIT value",
        -2.6112122535705566
      ],
      [
        "SELECT Name FROM country ORDER BY Continent Desc LIMIT value",
        -2.63441801071167
      ],
      [
        "SELECT Code2 FROM country ORDER BY LifeExpectancy Desc LIMIT value",
        -4.936150074005127
      ],
      [
        "SELECT T1.name FROM sqlite_sequence AS T1 JOIN country AS T2 ORDER BY T2.LifeExpectancy Desc LIMIT value",
        -5.205498695373535
      ],
      [
        "SELECT Code2 FROM country GROUP BY Code2 ORDER BY Count ( * ) Desc LIMIT value",
        -5.872289657592773
      ],
      [
        "SELECT Name FROM country ORDER BY LifeExpectancy Desc LIMIT value",
        -6.149609565734863
      ],
      [
        "SELECT T1.name FROM sqlite_sequence AS T1 JOIN country AS T2 GROUP BY T2.Code2 ORDER BY Count ( * ) Desc LIMIT value",
        -6.842113971710205
      ],
      [
        "SELECT LocalName FROM country ORDER BY Continent Desc LIMIT value",
        -6.876601219177246
      ],
      [
        "SELECT LocalName FROM country ORDER BY Population Desc LIMIT value",
        -6.909379005432129
      ],
      [
        "SELECT Name FROM country GROUP BY Code2 ORDER BY Count ( * ) Desc LIMIT value",
        -7.550963401794434
      ],
      [
        "SELECT T2.Code2 FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code ORDER BY T1.Population Desc LIMIT value",
        -7.8650102615356445
      ],
      [
        "SELECT T2.name FROM city AS T1 JOIN sqlite_sequence AS T2 ORDER BY T1.Population Desc LIMIT value",
        -8.132236957550049
      ],
      [
        "SELECT Code2 FROM country GROUP BY LocalName ORDER BY Count ( * ) Desc LIMIT value",
        -8.82736349105835
      ],
      [
        "SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code ORDER BY T2.Continent Desc LIMIT value",
        -8.957776069641113
      ],
      [
        "SELECT Code2 FROM country GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value",
        -9.021971225738525
      ],
      [
        "SELECT T2.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code ORDER BY T1.Population Desc LIMIT value",
        -9.074330806732178
      ]
    ],
    "predicted_parse_with_values": "SELECT Code2 FROM country ORDER BY Continent Desc LIMIT 1",
    "predicted_parse": "SELECT Code2 FROM country ORDER BY Continent Desc LIMIT value",
    "predicted_parse_explanation": [
      "find the code2 in country table with largest value of continent"
    ],
    "template_feedback": "use countrylanguage table in place of country table . find for each value of language . find language in place of code2 . order the results by number of rows in place of continent .",
    "primary_span": [
      [
        0,
        2
      ],
      [
        9,
        15
      ],
      [
        16,
        17
      ],
      [
        23,
        29
      ]
    ],
    "secondary_span": [
      [
        3,
        8
      ],
      [
        18,
        22
      ],
      [
        30,
        34
      ]
    ],
    "edits": [
      "language",
      "code2",
      "countrylanguage",
      "country",
      "language",
      "number of rows",
      "continent"
    ],
    "edits_original": "< select > add language </ select > < select > remove code2 </ select > < from > add countrylanguage </ from > < from > remove country </ from > < groupBy > add language </ groupBy > < orderBy > add number of rows </ orderBy > < orderBy > remove continent </ orderBy >"
  },
  {
    "db_id": "student_transcripts_tracking",
    "feedback": "Semester id which does not exist in the student enrolment table look for such name of semester.",
    "question": "What is the name of the semester with no students enrolled?",
    "gold_parse": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )",
    "beam": [
      [
        "SELECT T1.course_name FROM Courses AS T1 WHERE T1.course_name NOT IN ( SELECT T2.semester_name FROM Semesters AS T2 )",
        -0.40433692932128906
      ],
      [
        "SELECT T1.course_name FROM Courses AS T1 JOIN Semesters AS T2 JOIN Student_Enrolment AS T3 ON T3.semester_id = T2.semester_id JOIN Student_Enrolment_Courses AS T4 ON T1.course_id = T4.course_id AND T4.student_enrolment_id = T3.student_enrolment_id WHERE T2.semester_name ! = value",
        -2.0550031661987305
      ],
      [
        "SELECT T1.course_name FROM Courses AS T1 EXCEPT SELECT T2.semester_name FROM Semesters AS T2",
        -2.953965187072754
      ],
      [
        "SELECT course_name FROM Courses WHERE course_name ! = value",
        -3.1236228942871094
      ],
      [
        "SELECT T1.course_name FROM Courses AS T1 WHERE T1.course_name NOT IN ( SELECT T2.semester_id FROM Student_Enrolment AS T2 )",
        -3.468533515930176
      ],
      [
        "SELECT T1.course_name FROM Courses AS T1 JOIN Semesters AS T2 JOIN Student_Enrolment AS T3 ON T3.semester_id = T2.semester_id JOIN Student_Enrolment_Courses AS T4 ON T1.course_id = T4.course_id AND T4.student_enrolment_id = T3.student_enrolment_id WHERE T2.semester_id NOT IN ( SELECT T2.semester_name FROM Semesters AS T2 )",
        -3.513462781906128
      ],
      [
        "SELECT T1.course_name FROM Courses AS T1 JOIN Semesters AS T2 JOIN Student_Enrolment AS T3 ON T3.semester_id = T2.semester_id JOIN Student_Enrolment_Courses AS T4 ON T1.course_id = T4.course_id AND T4.student_enrolment_id = T3.student_enrolment_id WHERE T2.semester_description ! = value",
        -4.157085418701172
      ],
      [
        "SELECT course_name FROM Courses EXCEPT SELECT course_name FROM Courses",
        -4.916324615478516
      ],
      [
        "SELECT T1.course_name FROM Courses AS T1 WHERE * NOT IN ( SELECT T2.semester_name FROM Semesters AS T2 )",
        -4.993168354034424
      ],
      [
        "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment AS T2 JOIN Student_Enrolment_Courses AS T3 ON T1.course_id = T3.course_id AND T3.student_enrolment_id = T2.student_enrolment_id WHERE T2.student_enrolment_id NOT IN ( SELECT T4.semester_name FROM Semesters AS T4 )",
        -5.712595462799072
      ],
      [
        "SELECT T1.course_name FROM Courses AS T1 JOIN Degree_Programs AS T2 JOIN Student_Enrolment AS T3 ON T3.degree_program_id = T2.degree_program_id JOIN Student_Enrolment_Courses AS T4 ON T1.course_id = T4.course_id AND T4.student_enrolment_id = T3.student_enrolment_id WHERE T2.degree_summary_name ! = value",
        -5.944258689880371
      ],
      [
        "SELECT T1.course_name FROM Courses AS T1 JOIN Degree_Programs AS T2 JOIN Student_Enrolment AS T3 ON T3.degree_program_id = T2.degree_program_id JOIN Student_Enrolment_Courses AS T4 ON T1.course_id = T4.course_id AND T4.student_enrolment_id = T3.student_enrolment_id WHERE T2.degree_summary_name NOT IN ( SELECT T5.semester_name FROM Semesters AS T5 )",
        -6.002800941467285
      ],
      [
        "SELECT T1.course_name FROM Courses AS T1 JOIN Semesters AS T2 JOIN Student_Enrolment AS T3 ON T3.semester_id = T2.semester_id JOIN Student_Enrolment_Courses AS T4 ON T1.course_id = T4.course_id AND T4.student_enrolment_id = T3.student_enrolment_id WHERE T2.semester_name = value",
        -6.158365249633789
      ],
      [
        "SELECT T1.course_name FROM Courses AS T1 JOIN Semesters AS T2 JOIN Student_Enrolment AS T3 ON T3.semester_id = T2.semester_id JOIN Student_Enrolment_Courses AS T4 ON T1.course_id = T4.course_id AND T4.student_enrolment_id = T3.student_enrolment_id WHERE T2.semester_id NOT IN ( SELECT T3.semester_id FROM Student_Enrolment AS T3 )",
        -6.67998480796814
      ],
      [
        "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id JOIN Transcripts AS T3 JOIN Transcript_Contents AS T4 ON T2.student_course_id = T4.student_course_id AND T4.transcript_id = T3.transcript_id WHERE T3.transcript_date NOT IN ( SELECT T5.semester_name FROM Semesters AS T5 )",
        -7.2785749435424805
      ],
      [
        "SELECT T1.course_name FROM Courses AS T1 JOIN Students AS T2 JOIN Student_Enrolment AS T3 ON T3.student_id = T2.student_id JOIN Student_Enrolment_Courses AS T4 ON T1.course_id = T4.course_id AND T4.student_enrolment_id = T3.student_enrolment_id WHERE T2.student_id NOT IN ( SELECT T5.semester_name FROM Semesters AS T5 )",
        -7.655087471008301
      ],
      [
        "SELECT T1.course_name FROM Courses AS T1 JOIN Degree_Programs AS T2 JOIN Student_Enrolment AS T3 ON T3.degree_program_id = T2.degree_program_id JOIN Student_Enrolment_Courses AS T4 ON T1.course_id = T4.course_id AND T4.student_enrolment_id = T3.student_enrolment_id WHERE T2.degree_program_id NOT IN ( SELECT T5.semester_name FROM Semesters AS T5 )",
        -7.752498626708984
      ],
      [
        "SELECT course_name FROM Courses WHERE course_name NOT IN ( SELECT course_name FROM Courses )",
        -7.8989973068237305
      ],
      [
        "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id JOIN Transcripts AS T3 JOIN Transcript_Contents AS T4 ON T2.student_course_id = T4.student_course_id AND T4.transcript_id = T3.transcript_id WHERE T3.transcript_id NOT IN ( SELECT T5.semester_name FROM Semesters AS T5 )",
        -8.231797218322754
      ],
      [
        "SELECT course_name FROM Courses",
        -14.147848129272461
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.course_name FROM Courses AS T1 WHERE T1.course_name NOT IN ( SELECT T2.semester_name FROM Semesters AS T2 )",
    "predicted_parse": "SELECT T1.course_name FROM Courses AS T1 WHERE T1.course_name NOT IN ( SELECT T2.semester_name FROM Semesters AS T2 )",
    "predicted_parse_explanation": [
      "Step 1: find the semester name in semesters table",
      "Step 2: find the course name in courses table whose course name not one of the results of step 1"
    ],
    "template_feedback": "in step 1 , use student enrolment table in place of semesters table . find student enrolment 's semester id in place of semester name . in step 2 , use semesters table in place of courses table . make sure the semester id is not one of the results of step 1 the course name is not one of the results of step 1 . find semester name in place of course name .",
    "primary_span": [
      [
        4,
        7
      ],
      [
        14,
        19
      ],
      [
        30,
        32
      ],
      [
        39,
        52
      ],
      [
        66,
        68
      ]
    ],
    "secondary_span": [
      [
        8,
        13
      ],
      [
        20,
        25
      ],
      [
        33,
        38
      ],
      [
        53,
        65
      ],
      [
        69,
        74
      ]
    ],
    "edits": [
      "semester name",
      "course name",
      "semesters",
      "courses",
      "semester id not one of SUBS1",
      "course name not one of SUBS1",
      "semester id",
      "semester name",
      "student enrolment",
      "semesters"
    ],
    "edits_original": "< select > add semester name </ select > < select > remove course name </ select > < from > add semesters </ from > < from > remove courses </ from > < where > add semester id not one of SUBS1 </ where > < where > remove course name not one of SUBS1 </ where > < select > add semester id </ select > < select > remove semester name </ select > < from > add student enrolment </ from > < from > remove semesters </ from >"
  },
  {
    "db_id": "network_1",
    "feedback": "In step 1, you should use student id of friend table instead of grade of high schooler table.",
    "question": "Return the name of the high school student with the most friends.",
    "gold_parse": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
    "beam": [
      [
        "SELECT name FROM Highschooler GROUP BY grade ORDER BY Count ( * ) Desc LIMIT value",
        -0.5104522705078125
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id ORDER BY Count ( * ) Desc LIMIT value",
        -0.9291601181030273
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T1.grade , T2.student_id ORDER BY Count ( * ) Desc LIMIT value",
        -6.506302118301392
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T1.grade , T2.friend_id ORDER BY Count ( * ) Desc LIMIT value",
        -6.711929440498352
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id , T1.grade ORDER BY Count ( * ) Desc LIMIT value",
        -7.617325305938721
      ],
      [
        "SELECT T1.grade FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id ORDER BY Count ( * ) Desc LIMIT value",
        -7.776296615600586
      ],
      [
        "SELECT name FROM Highschooler GROUP BY grade , grade ORDER BY Count ( * ) Desc LIMIT value",
        -7.790676116943359
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id GROUP BY T2.student_id ORDER BY Count ( * ) Desc LIMIT value",
        -8.382781982421875
      ],
      [
        "SELECT name FROM Highschooler GROUP BY grade , * ORDER BY Count ( * ) Desc LIMIT value",
        -8.464348793029785
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id GROUP BY T1.grade , T2.student_id ORDER BY Count ( * ) Desc LIMIT value",
        -9.649201393127441
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id GROUP BY T1.grade , T2.liked_id ORDER BY Count ( * ) Desc LIMIT value",
        -9.702199935913086
      ],
      [
        "SELECT name FROM Highschooler GROUP BY name , grade ORDER BY Count ( * ) Desc LIMIT value",
        -9.922357082366943
      ],
      [
        "SELECT name FROM Highschooler GROUP BY grade , name ORDER BY Count ( * ) Desc LIMIT value",
        -10.068714618682861
      ],
      [
        "SELECT T1.name , T1.grade FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id ORDER BY Count ( * ) Desc LIMIT value",
        -10.092696189880371
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id GROUP BY T2.liked_id ORDER BY Count ( * ) Desc LIMIT value",
        -10.170171737670898
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.friend_id ORDER BY Count ( * ) Desc LIMIT value",
        -10.495589256286621
      ],
      [
        "SELECT name FROM Highschooler GROUP BY grade , ID ORDER BY Count ( * ) Desc LIMIT value",
        -10.858063220977783
      ],
      [
        "SELECT name FROM Highschooler ORDER BY grade Desc LIMIT value",
        -11.170442581176758
      ],
      [
        "SELECT name FROM Highschooler GROUP BY grade LIMIT value",
        -13.519498825073242
      ],
      [
        "SELECT name FROM Highschooler",
        -17.827900886535645
      ]
    ],
    "predicted_parse_with_values": "SELECT name FROM Highschooler GROUP BY grade ORDER BY Count ( * ) Desc LIMIT 1",
    "predicted_parse": "SELECT name FROM Highschooler GROUP BY grade ORDER BY Count ( * ) Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of grade in high schooler table",
      "Step 2: find the name in high schooler table with largest value in the results of step 1"
    ],
    "template_feedback": "in step 1 , additionally use the information from the friend table besides the high schooler table . find for each value of student id in place of grade .",
    "primary_span": [
      [
        4,
        11
      ],
      [
        18,
        24
      ]
    ],
    "secondary_span": [
      [
        12,
        17
      ],
      [
        25,
        29
      ]
    ],
    "edits": [
      "friend",
      "student id",
      "grade"
    ],
    "edits_original": "< from > add friend </ from > < groupBy > add student id </ groupBy > < groupBy > remove grade </ groupBy >"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "feedback": "Make sure to arrange Id of documents.",
    "question": "Return the different document ids along with the number of paragraphs corresponding to each, ordered by id.",
    "gold_parse": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id",
    "beam": [
      [
        "SELECT Document_ID , Count ( * ) FROM Paragraphs GROUP BY Document_ID ORDER BY Count ( * ) Asc",
        -0.0008401870727539062
      ],
      [
        "SELECT Document_ID , Count ( * ) FROM Paragraphs GROUP BY Document_ID ORDER BY Count ( * ) Desc",
        -8.168935775756836
      ],
      [
        "SELECT Document_ID , Count ( * ) FROM Paragraphs GROUP BY Document_ID ORDER BY Sum ( Paragraph_ID ) Asc",
        -9.196168661117554
      ],
      [
        "SELECT Document_ID , Sum ( Paragraph_ID ) FROM Paragraphs GROUP BY Document_ID ORDER BY Count ( * ) Asc",
        -9.345266819000244
      ],
      [
        "SELECT T2.Document_ID , Count ( * ) FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T2.Document_ID ORDER BY Sum ( T1.Template_ID ) Asc",
        -9.353832483291626
      ],
      [
        "SELECT Document_ID , Count ( * ) FROM Paragraphs GROUP BY Document_ID",
        -9.619437217712402
      ],
      [
        "SELECT Document_ID , Sum ( * ) FROM Paragraphs GROUP BY Document_ID ORDER BY Count ( * ) Asc",
        -10.959320545196533
      ],
      [
        "SELECT Document_ID , Count ( * ) FROM Paragraphs GROUP BY Document_ID ORDER BY Sum ( * ) Asc",
        -11.173646926879883
      ],
      [
        "SELECT T2.Document_ID , Count ( * ) FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T2.Document_ID ORDER BY T1.Template_ID Asc",
        -11.381858825683594
      ],
      [
        "SELECT T1.Document_ID , Count ( * ) FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T2.Document_ID ORDER BY Count ( * ) Asc",
        -11.578330993652344
      ],
      [
        "SELECT T2.Document_ID , Sum ( T1.Template_ID ) FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T2.Document_ID ORDER BY Count ( * ) Asc",
        -11.614113330841064
      ],
      [
        "SELECT Document_ID , Count ( * ) FROM Paragraphs GROUP BY Document_ID ORDER BY Document_ID Asc",
        -11.681256294250488
      ],
      [
        "SELECT T2.Document_ID , Count ( * ) FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T2.Document_ID ORDER BY Sum ( T1.Document_ID ) Asc",
        -11.962863683700562
      ],
      [
        "SELECT Document_ID , Count ( * ) FROM Paragraphs GROUP BY Document_ID ORDER BY Sum ( Paragraph_Text ) Asc",
        -12.00970256328582
      ],
      [
        "SELECT Document_ID , Count ( * ) , Document_ID FROM Paragraphs GROUP BY Document_ID ORDER BY Count ( * ) Asc",
        -12.741480827331543
      ],
      [
        "SELECT Document_ID FROM Paragraphs GROUP BY Document_ID ORDER BY Count ( * ) Asc",
        -12.929536819458008
      ],
      [
        "SELECT T1.Template_ID , Count ( * ) FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T2.Document_ID ORDER BY Count ( * ) Asc",
        -12.962247848510742
      ],
      [
        "SELECT Document_ID , Count ( * ) FROM Paragraphs GROUP BY Document_ID ORDER BY Count ( * ) Asc LIMIT value",
        -13.51868724822998
      ],
      [
        "SELECT Document_ID , Count ( * ) FROM Paragraphs GROUP BY Document_ID HAVING Count ( * ) > = value ORDER BY Count ( * ) Asc",
        -13.528483390808105
      ],
      [
        "SELECT T2.Document_ID , Count ( * ) FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID ORDER BY T1.Template_ID Asc",
        -13.854952812194824
      ]
    ],
    "predicted_parse_with_values": "SELECT Document_ID , Count ( * ) FROM Paragraphs GROUP BY Document_ID ORDER BY Count ( * ) Asc",
    "predicted_parse": "SELECT Document_ID , Count ( * ) FROM Paragraphs GROUP BY Document_ID ORDER BY Count ( * ) Asc",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of document id in paragraphs table",
      "Step 2: find the document id and number of rows in paragraphs table ordered ascending by the results of step 1"
    ],
    "template_feedback": "in step 2 , order the results by document id in place of number of rows .",
    "primary_span": [
      [
        4,
        9
      ]
    ],
    "secondary_span": [
      [
        10,
        16
      ]
    ],
    "edits": [
      "document id",
      "number of rows"
    ],
    "edits_original": "< orderBy > add document id </ orderBy > < orderBy > remove number of rows </ orderBy >"
  },
  {
    "db_id": "course_teach",
    "feedback": "You need to look for correlated rows in course arrange to all value of teacher id.",
    "question": "Show names of teachers and the number of courses they teach.",
    "gold_parse": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name",
    "beam": [
      [
        "SELECT Name , Count ( * ) FROM teacher GROUP BY Name",
        -0.40821170806884766
      ],
      [
        "SELECT T1.Name , Count ( * ) FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Teacher_ID",
        -1.0938520431518555
      ],
      [
        "SELECT Name , Count ( * ) FROM teacher GROUP BY Teacher_ID",
        -8.437112808227539
      ],
      [
        "SELECT Name , Count ( * ) FROM teacher",
        -13.080450057983398
      ],
      [
        "SELECT Name FROM teacher GROUP BY Name",
        -13.277494430541992
      ],
      [
        "SELECT T2.Name , Count ( * ) , T1.Course FROM course AS T1 JOIN teacher AS T2 JOIN course_arrange AS T3 ON T1.Course_ID = T3.Course_ID AND T3.Teacher_ID = T2.Teacher_ID AND T1.Course_ID = T3.Course_ID GROUP BY T3.Teacher_ID",
        -13.423598766326904
      ],
      [
        "SELECT T1.Name , Count ( * ) , T2.Teacher_ID FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Teacher_ID",
        -13.805222988128662
      ],
      [
        "SELECT Name , Count ( DISTINCT Name ) FROM teacher GROUP BY Name",
        -13.93667984008789
      ],
      [
        "SELECT T1.Name , Count ( * ) FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Teacher_ID ORDER BY Count ( * ) Desc LIMIT value",
        -14.07689380645752
      ],
      [
        "SELECT T1.Name , Count ( * ) FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Course_ID",
        -14.164956092834473
      ],
      [
        "SELECT T2.Name , Sum ( T1.Course ) FROM course AS T1 JOIN teacher AS T2 JOIN course_arrange AS T3 ON T1.Course_ID = T3.Course_ID AND T3.Teacher_ID = T2.Teacher_ID AND T1.Course_ID = T3.Course_ID GROUP BY T3.Teacher_ID",
        -14.218917310237885
      ],
      [
        "SELECT Name , Sum ( Name ) FROM teacher GROUP BY Name",
        -14.48600459098816
      ],
      [
        "SELECT Count ( * ) , Name FROM teacher GROUP BY Name",
        -14.561090469360352
      ],
      [
        "SELECT T1.Name , Count ( * ) , T1.Teacher_ID FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Teacher_ID",
        -14.659324645996094
      ],
      [
        "SELECT Name , Count ( * ) FROM teacher GROUP BY Hometown",
        -14.676849365234375
      ],
      [
        "SELECT T1.Name , Count ( T2.Course_ID ) FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T1.Name",
        -14.744099617004395
      ],
      [
        "SELECT T2.Name , Count ( * ) FROM course AS T1 JOIN teacher AS T2 JOIN course_arrange AS T3 ON T1.Course_ID = T3.Course_ID AND T3.Teacher_ID = T2.Teacher_ID GROUP BY T1.Staring_Date",
        -14.975812911987305
      ],
      [
        "SELECT T2.Name , Sum ( T1.Course ) FROM course AS T1 JOIN teacher AS T2 JOIN course_arrange AS T3 ON T1.Course_ID = T3.Course_ID AND T3.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name",
        -14.997961938381195
      ],
      [
        "SELECT T1.Name , Sum ( T2.Course_ID ) FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Teacher_ID",
        -15.063315391540527
      ],
      [
        "SELECT T1.Name FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Teacher_ID",
        -16.35510778427124
      ]
    ],
    "predicted_parse_with_values": "SELECT Name , Count ( * ) FROM teacher GROUP BY Name",
    "predicted_parse": "SELECT Name , Count ( * ) FROM teacher GROUP BY Name",
    "predicted_parse_explanation": [
      "find each value of name in teacher table along with the number of the corresponding rows to each value"
    ],
    "template_feedback": "additionally use the information from the course arrange table besides the teacher table .",
    "primary_span": [
      [
        0,
        8
      ]
    ],
    "secondary_span": [
      [
        9,
        13
      ]
    ],
    "edits": [
      "course arrange"
    ],
    "edits_original": "< from > add course arrange </ from >"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "feedback": "You have to replace \"smallest value of Template Type Code\" with \"smallest value of version number instead of\".",
    "question": "What the smallest version number and its template type code?",
    "gold_parse": "SELECT min(Version_Number) ,  template_type_code FROM Templates",
    "beam": [
      [
        "SELECT * , Template_Type_Code FROM Templates ORDER BY Template_Type_Code Asc LIMIT value",
        -0.8783860206604004
      ],
      [
        "SELECT Template_Type_Code , Template_Type_Code FROM Templates ORDER BY Template_Type_Code Asc LIMIT value",
        -1.7416175603866577
      ],
      [
        "SELECT Version_Number , Template_Type_Code FROM Templates ORDER BY Template_Type_Code Asc LIMIT value",
        -1.849324345588684
      ],
      [
        "SELECT Template_Details , Template_Type_Code FROM Templates ORDER BY Template_Type_Code Asc LIMIT value",
        -2.8485324382781982
      ],
      [
        "SELECT T1.Template_Type_Description , T2.Template_Type_Code FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code ORDER BY T2.Template_Type_Code Asc LIMIT value",
        -3.1416523456573486
      ],
      [
        "SELECT Template_Type_Code , Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY Count ( * ) Asc LIMIT value",
        -3.2546870708465576
      ],
      [
        "SELECT Min ( Version_Number ) , Template_Type_Code FROM Templates",
        -3.8804168701171875
      ],
      [
        "SELECT Template_ID , Template_Type_Code FROM Templates ORDER BY Template_Type_Code Asc LIMIT value",
        -4.389861106872559
      ],
      [
        "SELECT T2.Document_Name , T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID ORDER BY T1.Template_Type_Code Asc LIMIT value",
        -4.558027267456055
      ],
      [
        "SELECT Min ( * ) , Template_Type_Code FROM Templates",
        -4.813061952590942
      ],
      [
        "SELECT * , Template_Type_Code FROM Templates ORDER BY Version_Number Asc LIMIT value",
        -4.937020778656006
      ],
      [
        "SELECT Min ( * ) , Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY Count ( * ) Asc LIMIT value",
        -5.5982677936553955
      ],
      [
        "SELECT * , Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY Count ( * ) Asc LIMIT value",
        -5.640272855758667
      ],
      [
        "SELECT Template_Type_Code , Template_Type_Code FROM Templates ORDER BY Version_Number Asc LIMIT value",
        -5.700233578681946
      ],
      [
        "SELECT Min ( Version_Number ) , Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY Count ( * ) Asc LIMIT value",
        -5.714803218841553
      ],
      [
        "SELECT Version_Number , Template_Type_Code FROM Templates ORDER BY Version_Number Asc LIMIT value",
        -5.813626408576965
      ],
      [
        "SELECT T1.Template_Type_Code , T2.Template_Type_Code FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code ORDER BY T2.Template_Type_Code Asc LIMIT value",
        -5.85857629776001
      ],
      [
        "SELECT Date_Effective_To , Template_Type_Code FROM Templates ORDER BY Template_Type_Code Asc LIMIT value",
        -5.948626518249512
      ],
      [
        "SELECT Template_Type_Code , Min ( Template_Type_Code ) FROM Templates GROUP BY Template_Type_Code ORDER BY Count ( * ) Asc LIMIT value",
        -5.983931303024292
      ],
      [
        "SELECT * , Template_Type_Code FROM Templates WHERE Template_Type_Code = value",
        -6.131484270095825
      ]
    ],
    "predicted_parse_with_values": "SELECT * , Template_Type_Code FROM Templates ORDER BY Template_Type_Code Asc LIMIT 1",
    "predicted_parse": "SELECT * , Template_Type_Code FROM Templates ORDER BY Template_Type_Code Asc LIMIT value",
    "predicted_parse_explanation": [
      "find the rows and template type code in templates table with smallest value of template type code"
    ],
    "template_feedback": "find minimum version number in place of rows . you should not find the smallest of the results . show me all the results .",
    "primary_span": [
      [
        0,
        3
      ],
      [
        9,
        24
      ]
    ],
    "secondary_span": [
      [
        4,
        8
      ]
    ],
    "edits": [
      "minimum version number",
      "rows",
      "template type code",
      "1"
    ],
    "edits_original": "< select > add minimum version number </ select > < select > remove rows </ select > < orderBy > remove template type code </ orderBy > < limit > remove 1 </ limit >"
  },
  {
    "db_id": "student_transcripts_tracking",
    "feedback": "You need to replace address with transcripts.",
    "question": "How many transcripts are listed?",
    "gold_parse": "SELECT count(*) FROM Transcripts",
    "beam": [
      [
        "SELECT Count ( * ) FROM Addresses",
        -2.765655517578125e-05
      ],
      [
        "SELECT Sum ( * ) FROM Addresses",
        -11.060861349105835
      ],
      [
        "SELECT Count ( * ) FROM Courses WHERE course_name = value",
        -12.968192040920258
      ],
      [
        "SELECT Count ( Count ( * ) ) FROM Addresses",
        -13.352812767028809
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM Addresses",
        -13.734801292419434
      ],
      [
        "SELECT Avg ( * ) FROM Addresses",
        -13.952095746994019
      ],
      [
        "SELECT Count ( * ) FROM Semesters WHERE semester_name = value",
        -15.292291641235352
      ],
      [
        "SELECT Sum ( student_course_id ) FROM Transcript_Contents",
        -15.29506540298462
      ],
      [
        "SELECT Sum ( transcript_id ) FROM Transcript_Contents",
        -15.42789077758789
      ],
      [
        "SELECT Count ( * ) FROM Addresses WHERE city = value",
        -15.898446798324585
      ],
      [
        "SELECT Count ( * ) FROM Semesters WHERE semester_description = value",
        -15.914389610290527
      ],
      [
        "SELECT Sum ( course_name ) FROM Courses",
        -16.071372509002686
      ],
      [
        "SELECT Sum ( course_description ) FROM Courses",
        -16.30050802230835
      ],
      [
        "SELECT Count ( * ) FROM Transcripts ORDER BY transcript_date Asc",
        -16.328251361846924
      ],
      [
        "SELECT Sum ( transcript_date ) FROM Transcripts",
        -16.626830577850342
      ],
      [
        "SELECT Count ( Avg ( * ) ) FROM Addresses",
        -16.807108879089355
      ],
      [
        "SELECT Count ( * ) FROM Transcripts ORDER BY transcript_date Desc",
        -16.89185905456543
      ],
      [
        "SELECT Sum ( other_details ) FROM Transcripts",
        -16.90420389175415
      ],
      [
        "SELECT Max ( * ) FROM Addresses",
        -17.072776317596436
      ],
      [
        "SELECT Count ( * ) FROM Addresses LIMIT value",
        -17.12685775756836
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM Addresses",
    "predicted_parse": "SELECT Count ( * ) FROM Addresses",
    "predicted_parse_explanation": [
      "find the number of rows in addresses table"
    ],
    "template_feedback": "use transcripts table in place of addresses table .",
    "primary_span": [
      [
        0,
        2
      ]
    ],
    "secondary_span": [
      [
        3,
        8
      ]
    ],
    "edits": [
      "transcripts",
      "addresses"
    ],
    "edits_original": "< from > add transcripts </ from > < from > remove addresses </ from >"
  },
  {
    "db_id": "dog_kennels",
    "feedback": "Highest age is required, not the lowest.",
    "question": "What is the age of the oldest dog?",
    "gold_parse": "SELECT max(age) FROM Dogs",
    "beam": [
      [
        "SELECT age FROM Dogs ORDER BY age Asc LIMIT value",
        -0.309722900390625
      ],
      [
        "SELECT age FROM Dogs ORDER BY age Desc LIMIT value",
        -1.7991876602172852
      ],
      [
        "SELECT age FROM Dogs ORDER BY date_of_birth Asc LIMIT value",
        -2.517862319946289
      ],
      [
        "SELECT age FROM Dogs ORDER BY date_of_birth Desc LIMIT value",
        -4.068504333496094
      ],
      [
        "SELECT Max ( age ) FROM Dogs",
        -6.724016189575195
      ],
      [
        "SELECT date_of_birth FROM Dogs ORDER BY age Asc LIMIT value",
        -6.732045650482178
      ],
      [
        "SELECT Max ( age ) FROM Dogs ORDER BY age Asc LIMIT value",
        -8.232443809509277
      ],
      [
        "SELECT date_of_birth FROM Dogs ORDER BY age Desc LIMIT value",
        -8.827707767486572
      ],
      [
        "SELECT date_of_birth FROM Dogs ORDER BY date_of_birth Asc LIMIT value",
        -8.889362812042236
      ],
      [
        "SELECT Max ( age ) FROM Dogs ORDER BY age Desc LIMIT value",
        -10.15824031829834
      ],
      [
        "SELECT Max ( age ) FROM Dogs ORDER BY date_of_birth Asc LIMIT value",
        -10.39286994934082
      ],
      [
        "SELECT date_of_birth FROM Dogs ORDER BY date_of_birth Desc LIMIT value",
        -11.090117931365967
      ],
      [
        "SELECT age FROM Dogs ORDER BY age Asc",
        -11.18030834197998
      ],
      [
        "SELECT Max ( date_of_birth ) FROM Dogs",
        -11.742510795593262
      ],
      [
        "SELECT age FROM Dogs WHERE date_of_birth = ( SELECT Max ( date_of_birth ) FROM Dogs )",
        -12.443770408630371
      ],
      [
        "SELECT Max ( age ) FROM Dogs ORDER BY date_of_birth Desc LIMIT value",
        -12.444052696228027
      ],
      [
        "SELECT age FROM Dogs WHERE age = ( SELECT Max ( date_of_birth ) FROM Dogs )",
        -12.507567882537842
      ],
      [
        "SELECT Max ( age ) FROM Dogs UNION SELECT Max ( age ) FROM Dogs",
        -12.707295417785645
      ],
      [
        "SELECT age , date_of_birth FROM Dogs ORDER BY age Asc LIMIT value",
        -12.905697345733643
      ],
      [
        "SELECT age FROM Dogs ORDER BY age Desc",
        -12.951055526733398
      ]
    ],
    "predicted_parse_with_values": "SELECT age FROM Dogs ORDER BY age Asc LIMIT 1",
    "predicted_parse": "SELECT age FROM Dogs ORDER BY age Asc LIMIT value",
    "predicted_parse_explanation": [
      "find the age in dogs table with smallest value of age"
    ],
    "template_feedback": "find maximum age in place of age . you should not find the smallest of the results . show me all the results .",
    "primary_span": [
      [
        0,
        2
      ],
      [
        8,
        23
      ]
    ],
    "secondary_span": [
      [
        3,
        7
      ]
    ],
    "edits": [
      "maximum age",
      "age",
      "age",
      "1"
    ],
    "edits_original": "< select > add maximum age </ select > < select > remove age </ select > < orderBy > remove age </ orderBy > < limit > remove 1 </ limit >"
  },
  {
    "db_id": "orchestra",
    "feedback": "In step 2 , Supplant performance's orchestra id with orchestra's record company .",
    "question": "How many orchestras does each record company manage?",
    "gold_parse": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company",
    "beam": [
      [
        "SELECT Count ( * ) , T1.Record_Company FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID GROUP BY T2.Orchestra_ID",
        -0.35882568359375
      ],
      [
        "SELECT T1.Record_Company , Count ( * ) FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID GROUP BY T2.Orchestra_ID",
        -1.4832878112792969
      ],
      [
        "SELECT Count ( * ) , Record_Company FROM orchestra GROUP BY Record_Company",
        -2.9765467643737793
      ],
      [
        "SELECT Count ( * ) , Orchestra_ID FROM performance GROUP BY Orchestra_ID",
        -5.17094612121582
      ],
      [
        "SELECT Record_Company , Count ( * ) FROM orchestra GROUP BY Record_Company",
        -5.234286308288574
      ],
      [
        "SELECT Count ( * ) , T1.Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID GROUP BY T2.Orchestra_ID",
        -5.520740509033203
      ],
      [
        "SELECT Count ( * ) , T1.Major_Record_Format FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID GROUP BY T2.Orchestra_ID",
        -6.393089771270752
      ],
      [
        "SELECT Count ( * ) , Official_ratings_(millions) FROM performance GROUP BY Orchestra_ID",
        -6.635733127593994
      ],
      [
        "SELECT Count ( * ) , T1.Record_Company FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID GROUP BY T2.Official_ratings_(millions)",
        -6.932259559631348
      ],
      [
        "SELECT Count ( * ) , T1.Orchestra FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID GROUP BY T2.Orchestra_ID",
        -7.2639288902282715
      ],
      [
        "SELECT Count ( * ) , Record_Company FROM orchestra GROUP BY Year_of_Founded",
        -7.428691864013672
      ],
      [
        "SELECT Count ( * ) , T2.Orchestra_ID FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID GROUP BY T1.Record_Company",
        -7.680688381195068
      ],
      [
        "SELECT Count ( * ) FROM performance GROUP BY Orchestra_ID",
        -7.895005702972412
      ],
      [
        "SELECT Count ( * ) , Record_Company FROM orchestra GROUP BY Orchestra_ID",
        -8.21535587310791
      ],
      [
        "SELECT Count ( * ) , Weekly_rank FROM performance GROUP BY Orchestra_ID",
        -8.334271430969238
      ],
      [
        "SELECT Count ( * ) , Year_of_Founded FROM orchestra GROUP BY Record_Company",
        -8.381848335266113
      ],
      [
        "SELECT Count ( * ) , Type FROM performance GROUP BY Orchestra_ID",
        -8.434622764587402
      ],
      [
        "SELECT Count ( * ) , Date FROM performance GROUP BY Orchestra_ID",
        -8.559507846832275
      ],
      [
        "SELECT Count ( * ) , T1.Nationality FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID JOIN performance AS T3 ON T2.Orchestra_ID = T3.Orchestra_ID GROUP BY T3.Orchestra_ID",
        -8.922189235687256
      ],
      [
        "SELECT Count ( * ) FROM conductor",
        -10.929967880249023
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) , T1.Record_Company FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID GROUP BY T2.Orchestra_ID",
    "predicted_parse": "SELECT Count ( * ) , T1.Record_Company FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID GROUP BY T2.Orchestra_ID",
    "predicted_parse_explanation": [
      "Step 1: for each row in orchestra table , find the corresponding rows in performance table",
      "Step 2: find each value of performance 's orchestra id of the results of step 1 along with the number of the corresponding rows to each value"
    ],
    "template_feedback": "in step 1 , do not use the performance table . in step 2 , find for each value of record company in place of performance 's orchestra id .",
    "primary_span": [
      [
        4,
        10
      ],
      [
        15,
        21
      ]
    ],
    "secondary_span": [
      [
        4,
        10
      ],
      [
        22,
        29
      ]
    ],
    "edits": [
      "performance",
      "record company",
      "orchestra id"
    ],
    "edits_original": "< from > remove performance </ from > < groupBy > add record company </ groupBy > < groupBy > remove orchestra id </ groupBy >"
  },
  {
    "db_id": "student_transcripts_tracking",
    "feedback": "You need look for student having lowest date for first registration.",
    "question": "Who is the first student to register? List the first name, middle name and last name.",
    "gold_parse": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",
    "beam": [
      [
        "SELECT first_name , middle_name , last_name FROM Students",
        -0.006958961486816406
      ],
      [
        "SELECT first_name , middle_name , last_name FROM Students WHERE email_address = value",
        -5.499676704406738
      ],
      [
        "SELECT first_name , middle_name , last_name FROM Students WHERE first_name = value",
        -6.186334609985352
      ],
      [
        "SELECT T2.first_name , T2.middle_name , T2.last_name FROM Semesters AS T1 JOIN Students AS T2 JOIN Student_Enrolment AS T3 ON T1.semester_id = T3.semester_id AND T3.student_id = T2.student_id WHERE T1.semester_name = value",
        -7.410149097442627
      ],
      [
        "SELECT first_name , middle_name , last_name FROM Students WHERE date_first_registered = value",
        -9.684691429138184
      ],
      [
        "SELECT first_name , middle_name , last_name FROM Students WHERE ssn = value",
        -10.39758586883545
      ],
      [
        "SELECT first_name , middle_name , last_name FROM Students WHERE middle_name = value",
        -10.726464748382568
      ],
      [
        "SELECT first_name , middle_name , last_name , last_name FROM Students",
        -10.782191276550293
      ],
      [
        "SELECT first_name , middle_name , last_name FROM Students ORDER BY first_name Asc",
        -11.625787734985352
      ],
      [
        "SELECT first_name , middle_name , last_name FROM Students UNION SELECT first_name FROM Students",
        -12.305510997772217
      ],
      [
        "SELECT first_name , middle_name FROM Students",
        -12.319034576416016
      ],
      [
        "SELECT first_name , middle_name , last_name FROM Students EXCEPT SELECT first_name , middle_name , last_name FROM Students",
        -12.388766288757324
      ],
      [
        "SELECT DISTINCT first_name , middle_name , last_name FROM Students",
        -14.311047554016113
      ],
      [
        "SELECT Count ( first_name ) , middle_name , last_name FROM Students",
        -14.951268196105957
      ],
      [
        "SELECT first_name , middle_name , date_left FROM Students",
        -16.085888862609863
      ],
      [
        "SELECT DISTINCT first_name , middle_name , last_name FROM Students",
        -16.47903347015381
      ],
      [
        "SELECT first_name , DISTINCT middle_name , last_name FROM Students",
        -16.76958179473877
      ],
      [
        "SELECT first_name , middle_name , DISTINCT last_name FROM Students",
        -16.94205379486084
      ],
      [
        "SELECT first_name , middle_name FROM Students WHERE last_name = value",
        -16.965022087097168
      ],
      [
        "SELECT first_name , middle_name , last_name FROM Students LIMIT value",
        -17.128071784973145
      ]
    ],
    "predicted_parse_with_values": "SELECT first_name , middle_name , last_name FROM Students",
    "predicted_parse": "SELECT first_name , middle_name , last_name FROM Students",
    "predicted_parse_explanation": [
      "find the first name , middle name , last name in students table"
    ],
    "template_feedback": "find the result with the smallest date first registered .",
    "primary_span": [
      [
        0,
        9
      ]
    ],
    "secondary_span": [],
    "edits": [
      "date first registered",
      "1"
    ],
    "edits_original": "< orderBy > add date first registered </ orderBy > < limit > add 1 </ limit >"
  },
  {
    "db_id": "world_1",
    "feedback": "In step 1 find minimum population and swap Africa with Asia , in step 2 government form with name name .",
    "question": "What are the African countries that have a  population less than any country in Asia?",
    "gold_parse": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT max(population) FROM country WHERE Continent  =  \"Asia\")",
    "beam": [
      [
        "SELECT GovernmentForm FROM country WHERE Population < ( SELECT Population FROM country WHERE Continent = value )",
        -0.5147018432617188
      ],
      [
        "SELECT GovernmentForm FROM country WHERE Population < ( SELECT Population FROM country WHERE Population < value )",
        -2.1450576782226562
      ],
      [
        "SELECT GovernmentForm FROM country WHERE Population < ( SELECT Max ( Population ) FROM country WHERE Continent = value )",
        -2.1701526641845703
      ],
      [
        "SELECT GovernmentForm FROM country WHERE Population < ( SELECT Population FROM country WHERE Region = value )",
        -2.750459671020508
      ],
      [
        "SELECT Continent FROM country WHERE Population < ( SELECT Population FROM country WHERE Continent = value )",
        -4.008378028869629
      ],
      [
        "SELECT GovernmentForm FROM country WHERE Population < ( SELECT Population FROM country WHERE Continent LIKE value )",
        -4.095451354980469
      ],
      [
        "SELECT GovernmentForm FROM country WHERE Population < ( SELECT Max ( Population ) FROM country WHERE Region = value )",
        -4.425296783447266
      ],
      [
        "SELECT GovernmentForm FROM country WHERE Population < ( SELECT LifeExpectancy FROM country WHERE Continent = value )",
        -4.448651313781738
      ],
      [
        "SELECT GovernmentForm FROM country WHERE Population < ( SELECT GNP FROM country WHERE Continent = value )",
        -5.0199408531188965
      ],
      [
        "SELECT Continent FROM country WHERE Population < ( SELECT Max ( Population ) FROM country WHERE Continent = value )",
        -5.189737319946289
      ],
      [
        "SELECT Continent FROM country WHERE Population < ( SELECT Population FROM country WHERE Population < value )",
        -5.6651611328125
      ],
      [
        "SELECT GovernmentForm FROM country WHERE Population < ( SELECT LifeExpectancy FROM country WHERE Population < value )",
        -5.851465225219727
      ],
      [
        "SELECT Continent FROM country WHERE Population < ( SELECT Population FROM country WHERE Region = value )",
        -6.1159257888793945
      ],
      [
        "SELECT GovernmentForm FROM country WHERE Population < ( SELECT Continent FROM country WHERE Population < value )",
        -6.286334037780762
      ],
      [
        "SELECT GovernmentForm FROM country WHERE Population < value",
        -9.096635818481445
      ],
      [
        "SELECT GovernmentForm FROM country WHERE Continent < value",
        -9.275774002075195
      ],
      [
        "SELECT GovernmentForm FROM country WHERE Population < Population",
        -10.233352661132812
      ],
      [
        "SELECT GovernmentForm FROM country WHERE Continent LIKE value",
        -11.046271324157715
      ],
      [
        "SELECT Continent FROM country WHERE Population < value",
        -12.356189727783203
      ],
      [
        "SELECT GovernmentForm FROM country",
        -15.43904972076416
      ]
    ],
    "predicted_parse_with_values": "SELECT GovernmentForm FROM country WHERE Population < ( SELECT Population FROM country WHERE Continent = \"Africa\" )",
    "predicted_parse": "SELECT GovernmentForm FROM country WHERE Population < ( SELECT Population FROM country WHERE Continent = value )",
    "predicted_parse_explanation": [
      "Step 1: find the population in country table whose continent equals Africa",
      "Step 2: find the government form in country table whose population less than the results of step 1"
    ],
    "template_feedback": "in step 1 , consider the continent equals Asia conditions in place of the continent equals Africa conditions . find maximum population in place of population . in step 2 , additionally make sure that continent equals Africa . find name in place of government form .",
    "primary_span": [
      [
        4,
        9
      ],
      [
        19,
        21
      ],
      [
        31,
        38
      ],
      [
        39,
        40
      ]
    ],
    "secondary_span": [
      [
        10,
        18
      ],
      [
        22,
        26
      ],
      [
        41,
        46
      ]
    ],
    "edits": [
      "name",
      "government form",
      "continent equals \"Africa\"",
      "maximum population",
      "population",
      "continent equals \"Asia\"",
      "continent equals \"Africa\""
    ],
    "edits_original": "< select > add name </ select > < select > remove government form </ select > < where > add continent equals \" Africa \" </ where > < select > add maximum population </ select > < select > remove population </ select > < where > add continent equals \" Asia \" </ where > < where > remove continent equals \" Africa \" </ where >"
  },
  {
    "db_id": "student_transcripts_tracking",
    "feedback": "Make sure first registered date is small.",
    "question": "What is the first, middle, and last name of the first student to register?",
    "gold_parse": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",
    "beam": [
      [
        "SELECT first_name , middle_name , last_name FROM Students",
        -0.0001049041748046875
      ],
      [
        "SELECT first_name , middle_name , last_name , last_name FROM Students",
        -10.831342697143555
      ],
      [
        "SELECT first_name , middle_name , last_name FROM Students WHERE email_address = value",
        -11.053600311279297
      ],
      [
        "SELECT first_name , middle_name , last_name , date_first_registered FROM Students",
        -11.842347621917725
      ],
      [
        "SELECT first_name - middle_name , last_name , last_name FROM Students",
        -12.245418548583984
      ],
      [
        "SELECT first_name , middle_name FROM Students",
        -12.418813705444336
      ],
      [
        "SELECT first_name , middle_name , last_name FROM Students ORDER BY first_name Asc",
        -12.421825408935547
      ],
      [
        "SELECT first_name , middle_name , last_name FROM Students UNION SELECT first_name FROM Students",
        -12.474988460540771
      ],
      [
        "SELECT first_name , middle_name , last_name FROM Students UNION SELECT middle_name FROM Students",
        -12.848484754562378
      ],
      [
        "SELECT first_name , middle_name , last_name FROM Students WHERE first_name = value",
        -13.098732948303223
      ],
      [
        "SELECT first_name , middle_name , last_name FROM Students ORDER BY date_first_registered Asc LIMIT value",
        -13.201355457305908
      ],
      [
        "SELECT first_name - middle_name , last_name , date_first_registered FROM Students",
        -13.280034065246582
      ],
      [
        "SELECT first_name , middle_name , last_name , date_left FROM Students",
        -13.297747611999512
      ],
      [
        "SELECT DISTINCT first_name , middle_name , last_name FROM Students",
        -14.981014251708984
      ],
      [
        "SELECT first_name , middle_name , date_left FROM Students",
        -15.700607299804688
      ],
      [
        "SELECT Count ( first_name ) , middle_name , last_name FROM Students",
        -16.5173397064209
      ],
      [
        "SELECT first_name , middle_name , DISTINCT last_name FROM Students",
        -16.71977996826172
      ],
      [
        "SELECT first_name , DISTINCT middle_name , last_name FROM Students",
        -16.83107566833496
      ],
      [
        "SELECT DISTINCT first_name , middle_name , last_name FROM Students",
        -16.87091827392578
      ],
      [
        "SELECT first_name , middle_name , last_name FROM Students LIMIT value",
        -17.08920669555664
      ]
    ],
    "predicted_parse_with_values": "SELECT first_name , middle_name , last_name FROM Students",
    "predicted_parse": "SELECT first_name , middle_name , last_name FROM Students",
    "predicted_parse_explanation": [
      "find the first name , middle name , last name in students table"
    ],
    "template_feedback": "find the result with the smallest date first registered .",
    "primary_span": [
      [
        0,
        9
      ]
    ],
    "secondary_span": [],
    "edits": [
      "date first registered",
      "1"
    ],
    "edits_original": "< orderBy > add date first registered </ orderBy > < limit > add 1 </ limit >"
  },
  {
    "db_id": "world_1",
    "feedback": "i want the language mentioned in countrylanguage table. make certain that t is the corresponding is official.",
    "question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?",
    "gold_parse": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"",
    "beam": [
      [
        "SELECT Count ( DISTINCT Code2 ) FROM country WHERE IndepYear < value",
        -0.43007850646972656
      ],
      [
        "SELECT Count ( DISTINCT Code ) FROM country WHERE IndepYear < value",
        -1.0694665908813477
      ],
      [
        "SELECT Count ( DISTINCT Code ) FROM country WHERE IndepYear > value",
        -5.251236915588379
      ],
      [
        "SELECT Count ( DISTINCT T2.Language ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.IndepYear < value",
        -7.968029975891113
      ],
      [
        "SELECT Count ( DISTINCT Code2 ) FROM country WHERE IndepYear > value",
        -8.017075538635254
      ],
      [
        "SELECT Sum ( Code ) FROM country WHERE IndepYear < value",
        -8.374293804168701
      ],
      [
        "SELECT Count ( * ) FROM country WHERE IndepYear < value",
        -9.622889518737793
      ],
      [
        "SELECT Count ( DISTINCT LocalName ) FROM country WHERE IndepYear < value",
        -10.262285232543945
      ],
      [
        "SELECT Sum ( DISTINCT Code ) FROM country WHERE IndepYear < value",
        -10.414924144744873
      ],
      [
        "SELECT Count ( DISTINCT Code ) FROM country WHERE Continent = value",
        -11.611348152160645
      ],
      [
        "SELECT Count ( Code2 ) FROM country WHERE IndepYear < value",
        -11.870867729187012
      ],
      [
        "SELECT Count ( Code ) FROM country WHERE IndepYear < value",
        -12.090348243713379
      ],
      [
        "SELECT Sum ( Code2 ) FROM country WHERE IndepYear < value",
        -12.12869119644165
      ],
      [
        "SELECT Sum ( DISTINCT Code2 ) FROM country WHERE IndepYear < value",
        -12.55226993560791
      ],
      [
        "SELECT Count ( DISTINCT Name ) FROM country WHERE IndepYear < value",
        -12.585979461669922
      ],
      [
        "SELECT Avg ( Code ) FROM country WHERE IndepYear < value",
        -12.966822624206543
      ],
      [
        "SELECT Count ( DISTINCT Code ) FROM country WHERE IndepYear > value AND Continent = value",
        -13.200809478759766
      ],
      [
        "SELECT Count ( DISTINCT HeadOfState ) FROM country WHERE IndepYear < value",
        -13.204390525817871
      ],
      [
        "SELECT Count ( DISTINCT Population ) FROM country WHERE IndepYear < value",
        -13.44438362121582
      ],
      [
        "SELECT Count ( DISTINCT Code2 ) FROM country WHERE IndepYear > value AND Continent = value",
        -14.190815448760986
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( DISTINCT Code2 ) FROM country WHERE IndepYear < 1930",
    "predicted_parse": "SELECT Count ( DISTINCT Code2 ) FROM country WHERE IndepYear < value",
    "predicted_parse_explanation": [
      "find the number of different code2 in country table whose indepdent year less than 1930"
    ],
    "template_feedback": "additionally use the information from the countrylanguage table besides the country table . additionally make sure that is official equals T . find number of different language in place of number of different code2 .",
    "primary_span": [
      [
        0,
        7
      ],
      [
        13,
        20
      ],
      [
        21,
        25
      ]
    ],
    "secondary_span": [
      [
        8,
        12
      ],
      [
        26,
        33
      ]
    ],
    "edits": [
      "number of distinct language",
      "number of distinct code2",
      "countrylanguage",
      "is official equals \"T\""
    ],
    "edits_original": "< select > add number of distinct language </ select > < select > remove number of distinct code2 </ select > < from > add countrylanguage </ from > < where > add is official equals \" T \" </ where >"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "feedback": "You need to calculate number of rows of paragraphs table.",
    "question": "How many paragraphs in total?",
    "gold_parse": "SELECT count(*) FROM Paragraphs",
    "beam": [
      [
        "SELECT Count ( * ) FROM Ref_Template_Types",
        -4.76837158203125e-05
      ],
      [
        "SELECT Sum ( * ) FROM Ref_Template_Types",
        -11.401402950286865
      ],
      [
        "SELECT Sum ( Paragraph_Text ) FROM Paragraphs",
        -12.469772577285767
      ],
      [
        "SELECT Count ( * ) , Paragraph_Text FROM Paragraphs",
        -12.61348181962967
      ],
      [
        "SELECT Sum ( DISTINCT Paragraph_Text ) FROM Paragraphs",
        -12.949084043502808
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM Ref_Template_Types",
        -12.977224349975586
      ],
      [
        "SELECT Count ( * ) FROM Paragraphs GROUP BY Paragraph_Text",
        -13.117297887802124
      ],
      [
        "SELECT Count ( * ) FROM Ref_Template_Types GROUP BY *",
        -13.233893752098083
      ],
      [
        "SELECT Count ( * ) FROM Ref_Template_Types UNION SELECT Count ( * ) FROM Ref_Template_Types",
        -14.289313316345215
      ],
      [
        "SELECT Count ( * ) FROM Paragraphs WHERE Paragraph_Text = value",
        -14.51349687576294
      ],
      [
        "SELECT Count ( * ) , Paragraph_Text FROM Paragraphs GROUP BY Paragraph_Text",
        -14.6299187541008
      ],
      [
        "SELECT Avg ( * ) FROM Ref_Template_Types",
        -14.92964681982994
      ],
      [
        "SELECT Count ( * ) , Count ( * ) FROM Ref_Template_Types",
        -14.961214065551758
      ],
      [
        "SELECT Sum ( Paragraph_ID ) FROM Paragraphs",
        -15.119332313537598
      ],
      [
        "SELECT Count ( * ) FROM Paragraphs ORDER BY Paragraph_Text Desc",
        -15.179735481739044
      ],
      [
        "SELECT Count ( * ) FROM Ref_Template_Types INTERSECT SELECT Count ( * ) FROM Ref_Template_Types",
        -15.214632034301758
      ],
      [
        "SELECT Count ( Count ( * ) ) FROM Ref_Template_Types",
        -16.308401107788086
      ],
      [
        "SELECT Avg ( Paragraph_Text ) FROM Paragraphs",
        -16.545403599739075
      ],
      [
        "SELECT Count ( DISTINCT * ) FROM Ref_Template_Types",
        -16.859786987304688
      ],
      [
        "SELECT Avg ( DISTINCT Paragraph_Text ) FROM Paragraphs",
        -16.922922253608704
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM Ref_Template_Types",
    "predicted_parse": "SELECT Count ( * ) FROM Ref_Template_Types",
    "predicted_parse_explanation": [
      "find the number of rows in reference template types table"
    ],
    "template_feedback": "use paragraphs table in place of reference template types table .",
    "primary_span": [
      [
        0,
        2
      ]
    ],
    "secondary_span": [
      [
        3,
        10
      ]
    ],
    "edits": [
      "paragraphs",
      "reference template types"
    ],
    "edits_original": "< from > add paragraphs </ from > < from > remove reference template types </ from >"
  },
  {
    "db_id": "student_transcripts_tracking",
    "feedback": "Find for student whose date first registered value is smallest .",
    "question": "Who is the first student to register? List the first name, middle name and last name.",
    "gold_parse": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",
    "beam": [
      [
        "SELECT first_name , middle_name , last_name FROM Students",
        -0.006958961486816406
      ],
      [
        "SELECT first_name , middle_name , last_name FROM Students WHERE email_address = value",
        -5.499676704406738
      ],
      [
        "SELECT first_name , middle_name , last_name FROM Students WHERE first_name = value",
        -6.186334609985352
      ],
      [
        "SELECT T2.first_name , T2.middle_name , T2.last_name FROM Semesters AS T1 JOIN Students AS T2 JOIN Student_Enrolment AS T3 ON T1.semester_id = T3.semester_id AND T3.student_id = T2.student_id WHERE T1.semester_name = value",
        -7.410149097442627
      ],
      [
        "SELECT first_name , middle_name , last_name FROM Students WHERE date_first_registered = value",
        -9.684691429138184
      ],
      [
        "SELECT first_name , middle_name , last_name FROM Students WHERE ssn = value",
        -10.39758586883545
      ],
      [
        "SELECT first_name , middle_name , last_name FROM Students WHERE middle_name = value",
        -10.726464748382568
      ],
      [
        "SELECT first_name , middle_name , last_name , last_name FROM Students",
        -10.782191276550293
      ],
      [
        "SELECT first_name , middle_name , last_name FROM Students ORDER BY first_name Asc",
        -11.625787734985352
      ],
      [
        "SELECT first_name , middle_name , last_name FROM Students UNION SELECT first_name FROM Students",
        -12.305510997772217
      ],
      [
        "SELECT first_name , middle_name FROM Students",
        -12.319034576416016
      ],
      [
        "SELECT first_name , middle_name , last_name FROM Students EXCEPT SELECT first_name , middle_name , last_name FROM Students",
        -12.388766288757324
      ],
      [
        "SELECT DISTINCT first_name , middle_name , last_name FROM Students",
        -14.311047554016113
      ],
      [
        "SELECT Count ( first_name ) , middle_name , last_name FROM Students",
        -14.951268196105957
      ],
      [
        "SELECT first_name , middle_name , date_left FROM Students",
        -16.085888862609863
      ],
      [
        "SELECT DISTINCT first_name , middle_name , last_name FROM Students",
        -16.47903347015381
      ],
      [
        "SELECT first_name , DISTINCT middle_name , last_name FROM Students",
        -16.76958179473877
      ],
      [
        "SELECT first_name , middle_name , DISTINCT last_name FROM Students",
        -16.94205379486084
      ],
      [
        "SELECT first_name , middle_name FROM Students WHERE last_name = value",
        -16.965022087097168
      ],
      [
        "SELECT first_name , middle_name , last_name FROM Students LIMIT value",
        -17.128071784973145
      ]
    ],
    "predicted_parse_with_values": "SELECT first_name , middle_name , last_name FROM Students",
    "predicted_parse": "SELECT first_name , middle_name , last_name FROM Students",
    "predicted_parse_explanation": [
      "find the first name , middle name , last name in students table"
    ],
    "template_feedback": "find the result with the smallest date first registered .",
    "primary_span": [
      [
        0,
        9
      ]
    ],
    "secondary_span": [],
    "edits": [
      "date first registered",
      "1"
    ],
    "edits_original": "< orderBy > add date first registered </ orderBy > < limit > add 1 </ limit >"
  },
  {
    "db_id": "pets_1",
    "feedback": "Find first name , last name of student table whose pet type equals cat and pet type equals dog .",
    "question": "Find the name of students who have both cat and dog pets.",
    "gold_parse": "SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'",
    "beam": [
      [
        "SELECT T1.Fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value INTERSECT SELECT T2.StuID FROM Has_Pet AS T2 JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value",
        -0.3993091583251953
      ],
      [
        "SELECT T1.LName FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value INTERSECT SELECT T2.StuID FROM Has_Pet AS T2 JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value",
        -1.2141308784484863
      ],
      [
        "SELECT T1.StuID FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value INTERSECT SELECT T2.StuID FROM Has_Pet AS T2 JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value",
        -4.2735676765441895
      ],
      [
        "SELECT T1.StuID FROM Has_Pet AS T1 JOIN Pets AS T2 ON T1.PetID = T2.PetID WHERE T2.PetType = value INTERSECT SELECT T1.StuID FROM Has_Pet AS T1 JOIN Pets AS T2 ON T1.PetID = T2.PetID WHERE T2.PetType = value",
        -4.89089298248291
      ],
      [
        "SELECT T1.Fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value INTERSECT SELECT T1.Fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value",
        -5.928634166717529
      ],
      [
        "SELECT T1.Fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value INTERSECT SELECT T1.LName FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value",
        -6.301950454711914
      ],
      [
        "SELECT T1.LName FROM Student AS T1 WHERE T1.StuID IN ( SELECT T2.StuID FROM Has_Pet AS T2 JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value INTERSECT SELECT T2.StuID FROM Has_Pet AS T2 JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value ) INTERSECT SELECT T2.StuID FROM Has_Pet AS T2 JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value",
        -6.340331554412842
      ],
      [
        "SELECT T1.LName FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value INTERSECT SELECT T1.Fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value",
        -6.688953876495361
      ],
      [
        "SELECT T1.Sex FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value INTERSECT SELECT T2.StuID FROM Has_Pet AS T2 JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value",
        -6.965089797973633
      ],
      [
        "SELECT T1.LName FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value INTERSECT SELECT T1.LName FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value",
        -7.071848392486572
      ],
      [
        "SELECT T1.Sex FROM Student AS T1 WHERE T1.StuID IN ( SELECT T2.StuID FROM Has_Pet AS T2 JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value INTERSECT SELECT T2.StuID FROM Has_Pet AS T2 JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value ) INTERSECT SELECT T2.StuID FROM Has_Pet AS T2 JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value",
        -7.545339584350586
      ],
      [
        "SELECT * FROM Pets AS T1 WHERE T1.PetType = value INTERSECT SELECT T2.StuID FROM Has_Pet AS T2 JOIN Pets AS T1 ON T2.PetID = T1.PetID WHERE T1.PetType = value",
        -8.967486381530762
      ],
      [
        "SELECT T1.Fname FROM Student AS T1 WHERE T1.StuID IN ( SELECT T2.StuID FROM Has_Pet AS T2 JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value INTERSECT SELECT T2.StuID FROM Has_Pet AS T2 JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value ) INTERSECT SELECT T2.StuID FROM Has_Pet AS T2 JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value",
        -9.048669815063477
      ],
      [
        "SELECT T1.Fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value INTERSECT SELECT * FROM Pets AS T3 WHERE T3.PetType = value",
        -9.327521324157715
      ],
      [
        "SELECT T1.city_code FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value INTERSECT SELECT T2.StuID FROM Has_Pet AS T2 JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value",
        -9.568110466003418
      ],
      [
        "SELECT T1.Advisor FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value INTERSECT SELECT T2.StuID FROM Has_Pet AS T2 JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value",
        -9.611968994140625
      ],
      [
        "SELECT T1.StuID FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value INTERSECT SELECT T1.Fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value",
        -9.806338787078857
      ],
      [
        "SELECT T1.Major FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value INTERSECT SELECT T2.StuID FROM Has_Pet AS T2 JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value",
        -10.005914688110352
      ],
      [
        "SELECT T1.LName FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value INTERSECT SELECT * FROM Pets AS T3 WHERE T3.PetType = value",
        -10.100160121917725
      ],
      [
        "SELECT T1.StuID FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value INTERSECT SELECT T1.LName FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value",
        -10.171087741851807
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.Fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = \"cat\" INTERSECT SELECT T2.StuID FROM Has_Pet AS T2 JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = \"dog\"",
    "predicted_parse": "SELECT T1.Fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value INTERSECT SELECT T2.StuID FROM Has_Pet AS T2 JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value",
    "predicted_parse_explanation": [
      "Step 1: for each row in student table , find the corresponding rows in has pet table and in pets table",
      "Step 2: find the first name of the results of step 1 whose pet type equals cat",
      "Step 3: for each row in has pet table , find the corresponding rows in pets table",
      "Step 4: find the has pet 's student id of the results of step 3 whose pet type equals dog",
      "Step 5: show the rows that are in both the results of step 2 and step 4"
    ],
    "template_feedback": "in step 3 , additionally use the information from the student table . in step 4 , find first name in place of has pet 's student id .",
    "primary_span": [
      [
        4,
        12
      ],
      [
        17,
        19
      ]
    ],
    "secondary_span": [
      [
        20,
        28
      ]
    ],
    "edits": [
      "first name",
      "student id",
      "student"
    ],
    "edits_original": "< select > add first name </ select > < select > remove student id </ select > < from > add student </ from >"
  },
  {
    "db_id": "world_1",
    "feedback": "You need to search name of a country where highest amount of languages are used.",
    "question": "What is name of the country that speaks the largest number of languages?",
    "gold_parse": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1",
    "beam": [
      [
        "SELECT Continent FROM country GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value",
        -0.09324169158935547
      ],
      [
        "SELECT Name FROM country GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value",
        -2.423140525817871
      ],
      [
        "SELECT Continent , Count ( * ) FROM country GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value",
        -9.060589790344238
      ],
      [
        "SELECT Name , Continent FROM country GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value",
        -9.245123863220215
      ],
      [
        "SELECT Continent , Continent FROM country GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value",
        -9.427109718322754
      ],
      [
        "SELECT Continent FROM country GROUP BY LocalName ORDER BY Count ( * ) Desc LIMIT value",
        -10.336075782775879
      ],
      [
        "SELECT Continent FROM country ORDER BY Continent Desc LIMIT value",
        -11.111182689666748
      ],
      [
        "SELECT Continent FROM country GROUP BY Continent ORDER BY Count ( * ) Desc",
        -11.845569610595703
      ],
      [
        "SELECT Name FROM country ORDER BY Continent Desc LIMIT value",
        -12.387253761291504
      ],
      [
        "SELECT Name FROM country GROUP BY LocalName ORDER BY Count ( * ) Desc LIMIT value",
        -12.492589950561523
      ],
      [
        "SELECT LocalName FROM country GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value",
        -12.804742813110352
      ],
      [
        "SELECT Continent , Count ( * ) FROM country GROUP BY Continent",
        -12.851604461669922
      ],
      [
        "SELECT Continent FROM country WHERE LocalName = ( SELECT Continent FROM country GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value ) GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value",
        -12.987750053405762
      ],
      [
        "SELECT Continent FROM country ORDER BY LocalName Desc LIMIT value",
        -13.090744018554688
      ],
      [
        "SELECT Continent FROM country ORDER BY LifeExpectancy Desc LIMIT value",
        -13.340755224227905
      ],
      [
        "SELECT Continent FROM country ORDER BY SurfaceArea Desc LIMIT value",
        -13.539016008377075
      ],
      [
        "SELECT Continent FROM country WHERE LocalName = value GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value",
        -13.780108451843262
      ],
      [
        "SELECT Continent FROM country GROUP BY Continent HAVING SurfaceArea < value ORDER BY Count ( * ) Desc LIMIT value",
        -13.782374858856201
      ],
      [
        "SELECT Continent , Count ( Continent ) FROM country GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value",
        -13.875449180603027
      ],
      [
        "SELECT Name , Continent FROM country GROUP BY Continent",
        -14.041913986206055
      ]
    ],
    "predicted_parse_with_values": "SELECT Continent FROM country GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT 1",
    "predicted_parse": "SELECT Continent FROM country GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of continent in country table",
      "Step 2: find the continent in country table with largest value in the results of step 1"
    ],
    "template_feedback": "in step 1 , additionally use the information from the countrylanguage table besides the country table . find for each value of name in place of continent . in step 2 , find name in place of continent .",
    "primary_span": [
      [
        4,
        11
      ],
      [
        17,
        22
      ],
      [
        32,
        33
      ]
    ],
    "secondary_span": [
      [
        12,
        16
      ],
      [
        23,
        27
      ],
      [
        34,
        38
      ]
    ],
    "edits": [
      "name",
      "continent",
      "countrylanguage",
      "name",
      "continent"
    ],
    "edits_original": "< select > add name </ select > < select > remove continent </ select > < from > add countrylanguage </ from > < groupBy > add name </ groupBy > < groupBy > remove continent </ groupBy >"
  },
  {
    "db_id": "pets_1",
    "feedback": "Need to ensure \"Pet's pet age\" in place of \"Age\".",
    "question": "What is the last name of the student who has a cat that is 3 years old?",
    "gold_parse": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'",
    "beam": [
      [
        "SELECT LName FROM Student WHERE Age = value",
        -0.0002307891845703125
      ],
      [
        "SELECT T1.LName FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.pet_age = value",
        -8.798068046569824
      ],
      [
        "SELECT LName FROM Student WHERE Age LIKE value",
        -9.73736572265625
      ],
      [
        "SELECT T1.LName FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.weight = value",
        -11.130135536193848
      ],
      [
        "SELECT LName FROM Student WHERE Age = value INTERSECT SELECT LName FROM Student WHERE Age = value",
        -12.110249519348145
      ],
      [
        "SELECT LName FROM Student WHERE Age = value AND Age = value",
        -14.486282348632812
      ],
      [
        "SELECT LName , Age FROM Student WHERE Age = value",
        -14.965849876403809
      ],
      [
        "SELECT DISTINCT LName FROM Student WHERE Age = value",
        -15.014348030090332
      ],
      [
        "SELECT LName FROM Student WHERE Age = value ORDER BY Age Asc LIMIT value",
        -15.611122608184814
      ],
      [
        "SELECT T1.LName FROM Student AS T1 WHERE T1.Age = value INTERSECT SELECT T1.LName FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.pet_age = value",
        -15.675049781799316
      ],
      [
        "SELECT DISTINCT LName FROM Student WHERE Age = value",
        -15.965458869934082
      ],
      [
        "SELECT LName FROM Student WHERE Age < value",
        -16.006004333496094
      ],
      [
        "SELECT LName FROM Student WHERE Age = value GROUP BY LName HAVING Count ( * ) = value",
        -16.103900909423828
      ],
      [
        "SELECT LName FROM Student WHERE Age ! = value",
        -16.305044174194336
      ],
      [
        "SELECT T1.LName FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T1.Age = value AND T3.pet_age = value",
        -16.937758445739746
      ],
      [
        "SELECT LName FROM Student WHERE Age = value GROUP BY LName HAVING Age = value",
        -17.001124382019043
      ],
      [
        "SELECT LName FROM Student WHERE Age = value LIMIT value",
        -17.04087257385254
      ],
      [
        "SELECT LName FROM Student WHERE DISTINCT Age = value",
        -17.353132247924805
      ],
      [
        "SELECT LName FROM Student WHERE Age = value GROUP BY LName",
        -17.48902416229248
      ],
      [
        "SELECT LName FROM Student",
        -18.24718475341797
      ]
    ],
    "predicted_parse_with_values": "SELECT LName FROM Student WHERE Age = 3",
    "predicted_parse": "SELECT LName FROM Student WHERE Age = value",
    "predicted_parse_explanation": [
      "find the last name in student table whose age equals 3"
    ],
    "template_feedback": "additionally use the information from the has pet table and pets table besides the student table . consider the pet age equals 3 and pet type equals cat conditions in place of the age equals 3 conditions .",
    "primary_span": [
      [
        0,
        11
      ],
      [
        17,
        28
      ]
    ],
    "secondary_span": [
      [
        12,
        16
      ],
      [
        29,
        37
      ]
    ],
    "edits": [
      "has pet",
      "pets",
      "pet age equals 3",
      "pet type equals \"cat\"",
      "age equals 3"
    ],
    "edits_original": "< from > add has pet </ from > < from > add pets </ from > < where > add pet age equals 3 </ where > < where > add pet type equals \" cat \" </ where > < where > remove age equals 3 </ where >"
  },
  {
    "db_id": "singer",
    "feedback": "Ensure to swap \"greater than\" and \"less than\" with each other .",
    "question": "What are the citizenships that are shared by singers with a birth year before 1945 and after 1955?",
    "gold_parse": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955",
    "beam": [
      [
        "SELECT Citizenship FROM singer WHERE Birth_Year > value INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year < value",
        -0.0059757232666015625
      ],
      [
        "SELECT Citizenship FROM singer WHERE Birth_Year < value INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year > value",
        -5.3982391357421875
      ],
      [
        "SELECT Citizenship FROM singer WHERE Birth_Year > = value INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year > value",
        -7.012112617492676
      ],
      [
        "SELECT Citizenship FROM singer WHERE Birth_Year > value INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year LIKE value",
        -8.390939712524414
      ],
      [
        "SELECT Citizenship FROM singer WHERE Birth_Year > value INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year > value",
        -9.088196754455566
      ],
      [
        "SELECT Citizenship FROM singer WHERE Birth_Year = value INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year > value",
        -9.31079387664795
      ],
      [
        "SELECT Citizenship FROM singer WHERE Birth_Year > value INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year = value",
        -10.831818103790283
      ],
      [
        "SELECT Citizenship FROM singer WHERE Birth_Year LIKE value INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year < value",
        -11.032980918884277
      ],
      [
        "SELECT Citizenship FROM singer WHERE Birth_Year < value INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year < value",
        -11.168696403503418
      ],
      [
        "SELECT Citizenship FROM singer WHERE Birth_Year > value INTERSECT SELECT Citizenship FROM singer GROUP BY Citizenship HAVING Count ( * ) < value",
        -11.6980562210083
      ],
      [
        "SELECT Citizenship FROM singer WHERE Birth_Year = value INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year < value",
        -12.004563331604004
      ],
      [
        "SELECT Citizenship FROM singer WHERE Birth_Year BETWEEN value AND value",
        -12.427444458007812
      ],
      [
        "SELECT Citizenship FROM singer WHERE Birth_Year > = value INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year < value",
        -12.60582447052002
      ],
      [
        "SELECT Citizenship FROM singer WHERE Birth_Year > value INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year BETWEEN value AND value",
        -12.891651153564453
      ],
      [
        "SELECT Citizenship FROM singer WHERE Birth_Year LIKE value INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year > value",
        -12.951842308044434
      ],
      [
        "SELECT Citizenship FROM singer WHERE Birth_Year > value EXCEPT SELECT Citizenship FROM singer WHERE Birth_Year < value",
        -13.842806816101074
      ],
      [
        "SELECT Citizenship FROM singer INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year > value",
        -13.92821216583252
      ],
      [
        "SELECT Citizenship FROM singer WHERE Birth_Year > value INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year IN ( SELECT Citizenship FROM singer WHERE Birth_Year < value )",
        -13.950495719909668
      ],
      [
        "SELECT Citizenship FROM singer WHERE Birth_Year > value INTERSECT SELECT Citizenship , Birth_Year FROM singer WHERE Birth_Year < value",
        -14.029163360595703
      ],
      [
        "SELECT Citizenship FROM singer WHERE Birth_Year > value INTERSECT SELECT Citizenship FROM singer GROUP BY Citizenship HAVING Birth_Year < value",
        -14.686095237731934
      ]
    ],
    "predicted_parse_with_values": "SELECT Citizenship FROM singer WHERE Birth_Year > 1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year < 1955",
    "predicted_parse": "SELECT Citizenship FROM singer WHERE Birth_Year > value INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year < value",
    "predicted_parse_explanation": [
      "Step 1: find the citizenship in singer table whose birth year greater than 1945",
      "Step 2: find the citizenship in singer table whose birth year less than 1955",
      "Step 3: show the rows that are in both the results of step 1 and step 2"
    ],
    "template_feedback": "in step 1 , consider the birth year less than 1945 conditions in place of the birth year greater than 1945 conditions . in step 2 , consider the birth year greater than 1955 conditions in place of the birth year less than 1955 conditions .",
    "primary_span": [
      [
        4,
        11
      ],
      [
        27,
        34
      ]
    ],
    "secondary_span": [
      [
        12,
        22
      ],
      [
        35,
        45
      ]
    ],
    "edits": [
      "birth year less than 1945",
      "birth year greater than 1945",
      "birth year greater than 1955",
      "birth year less than 1955"
    ],
    "edits_original": "< where > add birth year less than 1945 </ where > < where > remove birth year greater than 1945 </ where > < where > add birth year greater than 1955 </ where > < where > remove birth year less than 1955 </ where >"
  },
  {
    "db_id": "dog_kennels",
    "feedback": "in step 1 use cost of treatment of treatments and in step 3 use treatments's cost of treatment of treatment.",
    "question": "What are the first name and last name of the professionals who have done treatment with cost below average?",
    "gold_parse": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )",
    "beam": [
      [
        "SELECT T2.first_name , T2.last_name FROM Charges AS T1 JOIN Professionals AS T2 WHERE T1.charge_amount < ( SELECT Avg ( T1.charge_amount ) FROM Charges AS T1 )",
        -1.381089210510254
      ],
      [
        "SELECT T2.first_name , T3.last_name FROM Charges AS T1 JOIN Owners AS T2 JOIN Professionals AS T3 WHERE T1.charge_amount < ( SELECT Avg ( T1.charge_amount ) FROM Charges AS T1 )",
        -1.7280550003051758
      ],
      [
        "SELECT T3.first_name , T2.last_name FROM Charges AS T1 JOIN Owners AS T2 JOIN Professionals AS T3 WHERE T1.charge_amount < ( SELECT Avg ( T1.charge_amount ) FROM Charges AS T1 )",
        -1.8406667709350586
      ],
      [
        "SELECT T2.first_name , T2.last_name FROM Charges AS T1 JOIN Owners AS T2 WHERE T1.charge_amount < ( SELECT Avg ( T1.charge_amount ) FROM Charges AS T1 )",
        -2.1787824630737305
      ],
      [
        "SELECT T2.first_name , T2.last_name FROM Charges AS T1 JOIN Professionals AS T2 WHERE T1.charge_amount > ( SELECT Avg ( T1.charge_amount ) FROM Charges AS T1 )",
        -2.224371910095215
      ],
      [
        "SELECT T3.first_name , T2.last_name FROM Charges AS T1 JOIN Owners AS T2 JOIN Professionals AS T3 WHERE T1.charge_amount > ( SELECT Avg ( T1.charge_amount ) FROM Charges AS T1 )",
        -2.5908679962158203
      ],
      [
        "SELECT T2.first_name , T3.last_name FROM Charges AS T1 JOIN Owners AS T2 JOIN Professionals AS T3 WHERE T1.charge_amount > ( SELECT Avg ( T1.charge_amount ) FROM Charges AS T1 )",
        -2.686032295227051
      ],
      [
        "SELECT T2.first_name , T2.last_name FROM Charges AS T1 JOIN Owners AS T2 WHERE T1.charge_amount > ( SELECT Avg ( T1.charge_amount ) FROM Charges AS T1 )",
        -3.041166305541992
      ],
      [
        "SELECT T2.first_name , T2.last_name FROM Charges AS T1 JOIN Professionals AS T2 WHERE T1.charge_amount < ( SELECT Avg ( T3.cost_of_treatment ) FROM Treatments AS T3 )",
        -11.195589065551758
      ],
      [
        "SELECT T2.first_name , T3.last_name FROM Charges AS T1 JOIN Owners AS T2 JOIN Professionals AS T3 WHERE T1.charge_amount < ( SELECT Avg ( T4.cost_of_treatment ) FROM Treatments AS T4 )",
        -11.543061256408691
      ],
      [
        "SELECT T3.first_name , T2.last_name FROM Charges AS T1 JOIN Owners AS T2 JOIN Professionals AS T3 WHERE T1.charge_amount < ( SELECT Avg ( T4.cost_of_treatment ) FROM Treatments AS T4 )",
        -11.656083106994629
      ],
      [
        "SELECT T2.first_name , T2.last_name FROM Charges AS T1 JOIN Owners AS T2 WHERE T1.charge_amount < ( SELECT Avg ( T3.cost_of_treatment ) FROM Treatments AS T3 )",
        -11.994612693786621
      ],
      [
        "SELECT T2.first_name , T2.last_name FROM Charges AS T1 JOIN Professionals AS T2 WHERE T1.charge_amount > ( SELECT Avg ( T3.cost_of_treatment ) FROM Treatments AS T3 )",
        -12.143293380737305
      ],
      [
        "SELECT first_name , last_name FROM Professionals WHERE first_name LIKE value",
        -12.151261329650879
      ],
      [
        "SELECT T3.first_name , T2.last_name FROM Charges AS T1 JOIN Owners AS T2 JOIN Professionals AS T3 WHERE T1.charge_amount > ( SELECT Avg ( T4.cost_of_treatment ) FROM Treatments AS T4 )",
        -12.507469177246094
      ],
      [
        "SELECT T2.first_name , T2.last_name FROM Charges AS T1 JOIN Professionals AS T2 WHERE T1.charge_amount = ( SELECT Avg ( T1.charge_amount ) FROM Charges AS T1 )",
        -12.531431198120117
      ],
      [
        "SELECT T1.first_name , T3.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id WHERE T3.first_name LIKE value",
        -12.55562686920166
      ],
      [
        "SELECT T2.first_name , T3.last_name FROM Charges AS T1 JOIN Owners AS T2 JOIN Professionals AS T3 WHERE T1.charge_amount > ( SELECT Avg ( T4.cost_of_treatment ) FROM Treatments AS T4 )",
        -12.603571891784668
      ],
      [
        "SELECT T3.first_name , T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id WHERE T3.first_name LIKE value",
        -12.652848243713379
      ],
      [
        "SELECT T3.first_name , T3.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id WHERE T1.first_name LIKE value",
        -12.94779920578003
      ]
    ],
    "predicted_parse_with_values": "SELECT T2.first_name , T2.last_name FROM Charges AS T1 JOIN Professionals AS T2 WHERE T1.charge_amount < ( SELECT Avg ( T1.charge_amount ) FROM Charges AS T1 )",
    "predicted_parse": "SELECT T2.first_name , T2.last_name FROM Charges AS T1 JOIN Professionals AS T2 WHERE T1.charge_amount < ( SELECT Avg ( T1.charge_amount ) FROM Charges AS T1 )",
    "predicted_parse_explanation": [
      "Step 1: for each row in charges table , find the corresponding rows in professionals table",
      "Step 2: find the average charge amount in charges table",
      "Step 3: find the first name and last name of the results of step 1 whose charge amount less than the results of step 2"
    ],
    "template_feedback": "in step 1 , use treatments table in place of charges table in step 2 , use treatments table in place of charges table . find average cost of treatment in place of average charge amount . in step 3 , make sure the cost of treatment is less than the results of step 2 the charge amount is less than the results of step 2 . make sure no repetition in the results .",
    "primary_span": [
      [
        4,
        6
      ],
      [
        16,
        18
      ],
      [
        25,
        29
      ],
      [
        41,
        54
      ],
      [
        67,
        74
      ]
    ],
    "secondary_span": [
      [
        7,
        11
      ],
      [
        19,
        24
      ],
      [
        30,
        36
      ],
      [
        55,
        66
      ]
    ],
    "edits": [
      "distinct",
      "treatments",
      "charges",
      "cost of treatment less than SUBS1",
      "charge amount less than SUBS1",
      "average cost of treatment",
      "average charge amount",
      "treatments",
      "charges"
    ],
    "edits_original": "< select > add distinct </ select > < from > add treatments </ from > < from > remove charges </ from > < where > add cost of treatment less than SUBS1 </ where > < where > remove charge amount less than SUBS1 </ where > < select > add average cost of treatment </ select > < select > remove average charge amount </ select > < from > add treatments </ from > < from > remove charges </ from >"
  },
  {
    "db_id": "wta_1",
    "feedback": "Need to replace last name, lowest winner name value with name of loser and minutes highest value.",
    "question": "What are the names of the winner and loser who played in the longest match?",
    "gold_parse": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
    "beam": [
      [
        "SELECT T2.winner_name , T1.last_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.winner_name Asc LIMIT value",
        -1.3305931091308594
      ],
      [
        "SELECT T2.winner_name , T1.last_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.loser_name Asc LIMIT value",
        -1.6097793579101562
      ],
      [
        "SELECT T2.winner_name , T1.last_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.tourney_name Asc LIMIT value",
        -2.240462303161621
      ],
      [
        "SELECT T2.tourney_name , T1.last_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.winner_name Asc LIMIT value",
        -2.7564239501953125
      ],
      [
        "SELECT T2.tourney_name , T1.last_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.loser_name Asc LIMIT value",
        -3.035569667816162
      ],
      [
        "SELECT T1.first_name , T1.last_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.winner_name Asc LIMIT value",
        -3.3486881256103516
      ],
      [
        "SELECT winner_name , loser_entry FROM matches ORDER BY winner_name Asc LIMIT value",
        -3.42191219329834
      ],
      [
        "SELECT winner_name , loser_entry FROM matches ORDER BY loser_name Asc LIMIT value",
        -3.506344795227051
      ],
      [
        "SELECT T2.winner_name , T1.last_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.loser_entry Asc LIMIT value",
        -3.627265453338623
      ],
      [
        "SELECT T1.first_name , T1.last_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.loser_name Asc LIMIT value",
        -3.6278295516967773
      ],
      [
        "SELECT T2.tourney_name , T1.last_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.tourney_name Asc LIMIT value",
        -3.6649560928344727
      ],
      [
        "SELECT winner_name , loser_entry FROM matches ORDER BY tourney_name Asc LIMIT value",
        -4.204052925109863
      ],
      [
        "SELECT T1.first_name , T1.last_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.tourney_name Asc LIMIT value",
        -4.257098197937012
      ],
      [
        "SELECT T2.loser_name , T1.last_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.winner_name Asc LIMIT value",
        -4.266407012939453
      ],
      [
        "SELECT T2.loser_name , T1.last_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.loser_name Asc LIMIT value",
        -4.549396991729736
      ],
      [
        "SELECT winner_name , loser_entry FROM matches ORDER BY loser_entry Asc LIMIT value",
        -4.932462692260742
      ],
      [
        "SELECT tourney_name , loser_entry FROM matches ORDER BY winner_name Asc LIMIT value",
        -5.019871711730957
      ],
      [
        "SELECT T2.tourney_name , T1.last_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.loser_entry Asc LIMIT value",
        -5.0549492835998535
      ],
      [
        "SELECT tourney_name , loser_entry FROM matches ORDER BY loser_name Asc LIMIT value",
        -5.109322547912598
      ],
      [
        "SELECT T2.loser_name , T1.last_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.tourney_name Asc LIMIT value",
        -5.179184436798096
      ]
    ],
    "predicted_parse_with_values": "SELECT T2.winner_name , T1.last_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.winner_name Asc LIMIT 1",
    "predicted_parse": "SELECT T2.winner_name , T1.last_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.winner_name Asc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: for each row in players table , find the corresponding rows in matches table",
      "Step 2: find the winner name and last name of the results of step 1 with smallest value of winner name"
    ],
    "template_feedback": "in step 1 , do not use the players table . in step 2 , find loser name in place of last name . order the results descending by minutes in place of ordering ascending by winner name .",
    "primary_span": [
      [
        4,
        10
      ],
      [
        15,
        17
      ],
      [
        24,
        29
      ]
    ],
    "secondary_span": [
      [
        4,
        10
      ],
      [
        18,
        23
      ],
      [
        30,
        38
      ]
    ],
    "edits": [
      "loser name",
      "last name",
      "players",
      "minutes",
      "descending",
      "winner name"
    ],
    "edits_original": "< select > add loser name </ select > < select > remove last name </ select > < from > remove players </ from > < orderBy > add minutes </ orderBy > < orderBy > add descending </ orderBy > < orderBy > remove winner name </ orderBy >"
  },
  {
    "db_id": "student_transcripts_tracking",
    "feedback": "in step 1 , use student enrolment instead",
    "question": "For each semester, what is the name and id of the one with the most students registered?",
    "gold_parse": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1",
    "beam": [
      [
        "SELECT semester_name , semester_id FROM Semesters GROUP BY semester_id ORDER BY Count ( * ) Desc LIMIT value",
        -0.012875556945800781
      ],
      [
        "SELECT T1.semester_name , T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id GROUP BY T2.semester_id ORDER BY Count ( * ) Desc LIMIT value",
        -4.98525333404541
      ],
      [
        "SELECT T2.first_name , T1.semester_id FROM Semesters AS T1 JOIN Students AS T2 JOIN Student_Enrolment AS T3 ON T1.semester_id = T3.semester_id AND T3.student_id = T2.student_id GROUP BY T1.semester_id ORDER BY Count ( * ) Desc LIMIT value",
        -6.320942401885986
      ],
      [
        "SELECT T1.semester_name , T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id GROUP BY T2.student_id ORDER BY Count ( * ) Desc LIMIT value",
        -6.85996150970459
      ],
      [
        "SELECT T1.semester_name , T2.student_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id GROUP BY T1.semester_id ORDER BY Count ( * ) Desc LIMIT value",
        -7.145244598388672
      ],
      [
        "SELECT T1.semester_name , T2.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id GROUP BY T1.semester_id ORDER BY Count ( * ) Desc LIMIT value",
        -7.2573041915893555
      ],
      [
        "SELECT T1.course_name , T2.semester_id FROM Courses AS T1 JOIN Semesters AS T2 JOIN Student_Enrolment AS T3 ON T3.semester_id = T2.semester_id JOIN Student_Enrolment_Courses AS T4 ON T1.course_id = T4.course_id AND T4.student_enrolment_id = T3.student_enrolment_id GROUP BY T2.semester_id ORDER BY Count ( * ) Desc LIMIT value",
        -8.202169418334961
      ],
      [
        "SELECT T1.semester_name , T2.permanent_address_id FROM Semesters AS T1 JOIN Students AS T2 JOIN Student_Enrolment AS T3 ON T1.semester_id = T3.semester_id AND T3.student_id = T2.student_id GROUP BY T1.semester_id ORDER BY Count ( * ) Desc LIMIT value",
        -8.293708801269531
      ],
      [
        "SELECT semester_name , semester_name FROM Semesters GROUP BY semester_id ORDER BY Count ( * ) Desc LIMIT value",
        -8.506854057312012
      ],
      [
        "SELECT semester_name , Count ( * ) FROM Semesters GROUP BY semester_id ORDER BY Count ( * ) Desc LIMIT value",
        -8.897326469421387
      ],
      [
        "SELECT semester_name , semester_id FROM Semesters GROUP BY semester_id ORDER BY Count ( * ) Asc LIMIT value",
        -9.183880805969238
      ],
      [
        "SELECT T1.semester_name , T2.ssn FROM Semesters AS T1 JOIN Students AS T2 JOIN Student_Enrolment AS T3 ON T1.semester_id = T3.semester_id AND T3.student_id = T2.student_id GROUP BY T1.semester_id ORDER BY Count ( * ) Desc LIMIT value",
        -9.532546043395996
      ],
      [
        "SELECT T1.degree_summary_name , T2.semester_id FROM Degree_Programs AS T1 JOIN Semesters AS T2 JOIN Student_Enrolment AS T3 ON T1.degree_program_id = T3.degree_program_id AND T3.semester_id = T2.semester_id GROUP BY T2.semester_id ORDER BY Count ( * ) Desc LIMIT value",
        -9.566681861877441
      ],
      [
        "SELECT T1.semester_name , T2.student_id FROM Semesters AS T1 JOIN Students AS T2 JOIN Student_Enrolment AS T3 ON T1.semester_id = T3.semester_id AND T3.student_id = T2.student_id GROUP BY T1.semester_id ORDER BY Count ( * ) Desc LIMIT value",
        -9.703018188476562
      ],
      [
        "SELECT T1.semester_name , T1.semester_id FROM Semesters AS T1 JOIN Students AS T2 JOIN Student_Enrolment AS T3 ON T1.semester_id = T3.semester_id AND T3.student_id = T2.student_id GROUP BY T2.student_id ORDER BY Count ( * ) Desc LIMIT value",
        -9.72339916229248
      ],
      [
        "SELECT semester_id , semester_id FROM Semesters GROUP BY semester_id ORDER BY Count ( * ) Desc LIMIT value",
        -9.840767860412598
      ],
      [
        "SELECT T1.semester_name , T2.student_enrolment_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id GROUP BY T1.semester_id ORDER BY Count ( * ) Desc LIMIT value",
        -10.26574993133545
      ],
      [
        "SELECT T2.semester_id , T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id GROUP BY T1.semester_id ORDER BY Count ( * ) Desc LIMIT value",
        -10.389389038085938
      ],
      [
        "SELECT semester_name , semester_id FROM Semesters GROUP BY semester_name ORDER BY Count ( * ) Desc LIMIT value",
        -10.436488151550293
      ],
      [
        "SELECT semester_name , semester_description FROM Semesters GROUP BY semester_id ORDER BY Count ( * ) Desc LIMIT value",
        -10.528960227966309
      ]
    ],
    "predicted_parse_with_values": "SELECT semester_name , semester_id FROM Semesters GROUP BY semester_id ORDER BY Count ( * ) Desc LIMIT 1",
    "predicted_parse": "SELECT semester_name , semester_id FROM Semesters GROUP BY semester_id ORDER BY Count ( * ) Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of semester id in semesters table",
      "Step 2: find the semester name and semester id in semesters table with largest value in the results of step 1"
    ],
    "template_feedback": "in step 1 , additionally use the information from the student enrolment table besides the semesters table .",
    "primary_span": [
      [
        4,
        12
      ]
    ],
    "secondary_span": [
      [
        13,
        17
      ]
    ],
    "edits": [
      "student enrolment"
    ],
    "edits_original": "< from > add student enrolment </ from >"
  },
  {
    "db_id": "student_transcripts_tracking",
    "feedback": "in step 2 make sure it is the same semester . also output student id",
    "question": "What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?",
    "gold_parse": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2",
    "beam": [
      [
        "SELECT T1.first_name , T1.middle_name , T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) = value",
        -0.7020082473754883
      ],
      [
        "SELECT T1.first_name , T1.middle_name , T1.last_name , T2.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) = value",
        -2.0382890701293945
      ],
      [
        "SELECT T1.first_name , T1.middle_name , T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) BETWEEN value AND value",
        -2.8582582473754883
      ],
      [
        "SELECT T1.first_name , T1.middle_name , T2.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) = value",
        -2.96268367767334
      ],
      [
        "SELECT T1.first_name , T1.middle_name , T1.last_name , T2.student_enrolment_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) = value",
        -3.005725383758545
      ],
      [
        "SELECT T2.first_name , T2.middle_name , T2.last_name , T1.semester_description FROM Semesters AS T1 JOIN Students AS T2 JOIN Student_Enrolment AS T3 ON T1.semester_id = T3.semester_id AND T3.student_id = T2.student_id AND T1.semester_id = T3.semester_id GROUP BY T3.student_id HAVING Count ( * ) = value",
        -3.267404079437256
      ],
      [
        "SELECT T1.first_name , T1.middle_name , T1.last_name , T2.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) BETWEEN value AND value",
        -3.2906551361083984
      ],
      [
        "SELECT T1.first_name , T1.middle_name , T2.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) BETWEEN value AND value",
        -3.2908668518066406
      ],
      [
        "SELECT T1.first_name , T1.middle_name , T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) LIKE value",
        -3.420577049255371
      ],
      [
        "SELECT T1.first_name , T1.middle_name , T2.student_id , T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) = value",
        -4.802010536193848
      ],
      [
        "SELECT T1.first_name , T1.middle_name , T1.last_name , T2.student_enrolment_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) BETWEEN value AND value",
        -4.987494945526123
      ],
      [
        "SELECT T1.first_name , T1.middle_name , T1.last_name , T3.student_enrolment_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id AND T1.student_id = T2.student_id JOIN Student_Enrolment_Courses AS T3 ON T2.student_enrolment_id = T3.student_enrolment_id GROUP BY T2.student_id HAVING Count ( * ) = value",
        -5.009528636932373
      ],
      [
        "SELECT T2.first_name , T2.middle_name , T2.last_name , T1.semester_description FROM Semesters AS T1 JOIN Students AS T2 JOIN Student_Enrolment AS T3 ON T1.semester_id = T3.semester_id AND T3.student_id = T2.student_id AND T1.semester_id = T3.semester_id GROUP BY T3.student_id HAVING Count ( * ) BETWEEN value AND value",
        -5.035746097564697
      ],
      [
        "SELECT T1.first_name , T1.middle_name , T1.last_name , T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) = value",
        -5.1946187019348145
      ],
      [
        "SELECT T1.first_name , T1.middle_name , T1.last_name , T2.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) LIKE value",
        -5.251102447509766
      ],
      [
        "SELECT T1.first_name , T1.middle_name , T2.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) LIKE value",
        -5.511895179748535
      ],
      [
        "SELECT T2.first_name , T2.middle_name , T2.last_name , T1.semester_description FROM Semesters AS T1 JOIN Students AS T2 JOIN Student_Enrolment AS T3 ON T1.semester_id = T3.semester_id AND T3.student_id = T2.student_id AND T1.semester_id = T3.semester_id GROUP BY T3.student_id HAVING Count ( * ) LIKE value",
        -6.2796406745910645
      ],
      [
        "SELECT T1.first_name , T1.middle_name , T1.last_name , T2.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) > = value",
        -6.367633819580078
      ],
      [
        "SELECT T1.first_name , T1.middle_name , T2.student_enrolment_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) = value",
        -6.396028518676758
      ],
      [
        "SELECT T1.first_name , T1.middle_name , T1.last_name , T2.student_enrolment_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) LIKE value",
        -6.43490743637085
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.first_name , T1.middle_name , T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) = 2",
    "predicted_parse": "SELECT T1.first_name , T1.middle_name , T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) = value",
    "predicted_parse_explanation": [
      "Step 1: for each row in students table , find the corresponding rows in student enrolment table",
      "Step 2: find the number of rows of each value of student enrolment 's student id of the results of step 1",
      "Step 3: find the first name , middle name , last name of the results of step 1 whose corresponding value in step 2 is equals 2"
    ],
    "template_feedback": "in step 3 , additionally find students 's student id .",
    "primary_span": [
      [
        4,
        10
      ]
    ],
    "secondary_span": [],
    "edits": [
      "student id"
    ],
    "edits_original": "< select > add student id </ select >"
  },
  {
    "db_id": "student_transcripts_tracking",
    "feedback": "Exchange departments table with degree programs table .",
    "question": "How many degrees does the engineering department offer?",
    "gold_parse": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'",
    "beam": [
      [
        "SELECT Count ( * ) FROM Departments WHERE department_name = value",
        -8.678436279296875e-05
      ],
      [
        "SELECT Count ( DISTINCT T2.degree_summary_name ) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id WHERE T1.department_name = value",
        -9.541388511657715
      ],
      [
        "SELECT Count ( * ) FROM Addresses",
        -11.523555755615234
      ],
      [
        "SELECT Count ( T2.degree_summary_name ) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id WHERE T1.department_name = value",
        -13.527400016784668
      ],
      [
        "SELECT Count ( * ) , T2.degree_summary_name FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id WHERE T1.department_name = value",
        -13.88144564628601
      ],
      [
        "SELECT Sum ( T2.degree_summary_name ) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id WHERE T1.department_name = value",
        -14.217606663703918
      ],
      [
        "SELECT Sum ( * ) FROM Departments WHERE department_name = value",
        -14.66688358783722
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM Departments WHERE department_name = value",
        -14.69599723815918
      ],
      [
        "SELECT T2.degree_summary_name FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id WHERE T1.department_name = value",
        -15.11033010482788
      ],
      [
        "SELECT Avg ( * ) FROM Departments WHERE department_name = value",
        -15.376945853233337
      ],
      [
        "SELECT Count ( * ) , department_name FROM Departments WHERE department_name = value",
        -15.391025185585022
      ],
      [
        "SELECT Avg ( T2.degree_summary_name ) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id WHERE T1.department_name = value",
        -15.83367770910263
      ],
      [
        "SELECT Count ( * ) FROM Departments WHERE department_name LIKE value",
        -15.975118637084961
      ],
      [
        "SELECT Count ( * ) , department_name FROM Departments WHERE department_name = value GROUP BY department_id",
        -16.229418873786926
      ],
      [
        "SELECT Count ( * ) , T2.degree_summary_name FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id WHERE T1.department_name = value GROUP BY T1.department_id",
        -16.22991943359375
      ],
      [
        "SELECT Count ( T2.degree_summary_description ) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id WHERE T1.department_name = value",
        -16.48857021331787
      ],
      [
        "SELECT Count ( DISTINCT * ) FROM Departments WHERE department_name = value",
        -16.559094429016113
      ],
      [
        "SELECT Count ( * ) FROM Departments WHERE department_name > value",
        -16.625244140625
      ],
      [
        "SELECT Count ( department_id ) FROM Departments WHERE department_name = value",
        -16.665485382080078
      ],
      [
        "SELECT Count ( * ) FROM Departments WHERE department_name = value AND department_name = value",
        -16.817152976989746
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM Departments WHERE department_name = \"engineer\"",
    "predicted_parse": "SELECT Count ( * ) FROM Departments WHERE department_name = value",
    "predicted_parse_explanation": [
      "find the number of rows in departments table whose department name equals engineer"
    ],
    "template_feedback": "additionally use the information from the degree programs table besides the departments table .",
    "primary_span": [
      [
        0,
        8
      ]
    ],
    "secondary_span": [
      [
        9,
        13
      ]
    ],
    "edits": [
      "degree programs"
    ],
    "edits_original": "< from > add degree programs </ from >"
  },
  {
    "db_id": "car_1",
    "feedback": "in step 2 , i want the name of country , country id , country id table.",
    "question": "What are the countries having at least one car maker? List name and id.",
    "gold_parse": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1",
    "beam": [
      [
        "SELECT Country , Id FROM car_makers GROUP BY Country HAVING Count ( * ) > = value",
        -0.13806915283203125
      ],
      [
        "SELECT T1.Country , T2.ModelId FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T1.Country HAVING Count ( * ) > = value",
        -2.282167673110962
      ],
      [
        "SELECT T2.Country , T1.CountryId FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country GROUP BY T2.Country HAVING Count ( * ) > = value",
        -4.829171180725098
      ],
      [
        "SELECT T3.Country , T1.ContId FROM continents AS T1 JOIN countries AS T2 ON T1.ContId = T2.Continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T3.Country HAVING Count ( * ) > = value",
        -4.88185453414917
      ],
      [
        "SELECT Country , FullName FROM car_makers GROUP BY Country HAVING Count ( * ) > = value",
        -5.943767547607422
      ],
      [
        "SELECT T2.Country , T1.Continent FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country GROUP BY T2.Country HAVING Count ( * ) > = value",
        -5.992673873901367
      ],
      [
        "SELECT T2.Country , T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country GROUP BY T2.Country HAVING Count ( * ) > = value",
        -6.449741363525391
      ],
      [
        "SELECT Country , Country FROM car_makers GROUP BY Country HAVING Count ( * ) > = value",
        -6.520856857299805
      ],
      [
        "SELECT T1.Country , T3.MakeId FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model GROUP BY T1.Country HAVING Count ( * ) > = value",
        -6.8707733154296875
      ],
      [
        "SELECT Country , Maker FROM car_makers GROUP BY Country HAVING Count ( * ) > = value",
        -7.030848503112793
      ],
      [
        "SELECT T1.Country , T4.Id FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id GROUP BY T1.Country HAVING Count ( * ) > = value",
        -8.320832252502441
      ],
      [
        "SELECT FullName , Country FROM car_makers GROUP BY Country HAVING Count ( * ) > = value",
        -8.359337329864502
      ],
      [
        "SELECT T1.Continent , T2.Country FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country GROUP BY T2.Country HAVING Count ( * ) > = value",
        -8.494423866271973
      ],
      [
        "SELECT T1.CountryName , T2.Country FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country GROUP BY T2.Country HAVING Count ( * ) > = value",
        -8.704666137695312
      ],
      [
        "SELECT T3.Country , T1.Continent FROM continents AS T1 JOIN countries AS T2 ON T1.ContId = T2.Continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T3.Country HAVING Count ( * ) > = value",
        -9.416748046875
      ],
      [
        "SELECT T1.Country , T4.Year FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id GROUP BY T1.Country HAVING Count ( * ) > = value",
        -9.830582618713379
      ],
      [
        "SELECT T1.Country , T2.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T1.Country HAVING Count ( * ) > = value",
        -9.842480659484863
      ],
      [
        "SELECT FullName , Id FROM car_makers GROUP BY Country HAVING Count ( * ) > = value",
        -10.280409812927246
      ],
      [
        "SELECT T1.Country , T4.Accelerate FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id GROUP BY T1.Country HAVING Count ( * ) > = value",
        -10.544313430786133
      ],
      [
        "SELECT T1.Country , T4.Cylinders FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id GROUP BY T1.Country HAVING Count ( * ) > = value",
        -10.5569486618042
      ]
    ],
    "predicted_parse_with_values": "SELECT Country , Id FROM car_makers GROUP BY Country HAVING Count ( * ) > = 1",
    "predicted_parse": "SELECT Country , Id FROM car_makers GROUP BY Country HAVING Count ( * ) > = value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of country in car makers table",
      "Step 2: find the country and id in car makers table whose corresponding value in step 1 is greater than or equals 1"
    ],
    "template_feedback": "in step 1 , additionally use the information from the countries table besides the car makers table . in step 2 , find country name in place of id .",
    "primary_span": [
      [
        4,
        11
      ],
      [
        22,
        24
      ]
    ],
    "secondary_span": [
      [
        12,
        17
      ],
      [
        25,
        29
      ]
    ],
    "edits": [
      "country name",
      "country id",
      "country",
      "id",
      "countries",
      "country id",
      "country"
    ],
    "edits_original": "< select > add country name </ select > < select > add country id </ select > < select > remove country </ select > < select > remove id </ select > < from > add countries </ from > < groupBy > add country id </ groupBy > < groupBy > remove country </ groupBy >"
  },
  {
    "db_id": "flight_2",
    "feedback": "I want the rows count from airport table.",
    "question": "Return the number of  airports.",
    "gold_parse": "SELECT count(*) FROM AIRPORTS",
    "beam": [
      [
        "SELECT Count ( * ) FROM airlines",
        -1.430511474609375e-05
      ],
      [
        "SELECT Sum ( * ) FROM airlines",
        -12.204346671700478
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE City = value",
        -12.862825870513916
      ],
      [
        "SELECT Avg ( * ) FROM airlines",
        -14.173387974500656
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM airlines",
        -14.314971923828125
      ],
      [
        "SELECT Count ( * ) , City FROM airports",
        -14.698684394359589
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE AirportName = value",
        -14.83518671989441
      ],
      [
        "SELECT Count ( * ) FROM airports GROUP BY AirportName",
        -14.931569814682007
      ],
      [
        "SELECT Count ( * ) FROM airports GROUP BY City",
        -15.54971694946289
      ],
      [
        "SELECT Count ( * ) , AirportName FROM airports",
        -15.609166502952576
      ],
      [
        "SELECT Count ( Count ( * ) ) FROM airlines",
        -15.751338005065918
      ],
      [
        "SELECT Count ( * ) FROM airports ORDER BY AirportName Desc",
        -15.905632972717285
      ],
      [
        "SELECT Count ( * ) FROM flights GROUP BY DestAirport",
        -16.50611448287964
      ],
      [
        "SELECT Count ( * ) FROM airlines LIMIT value",
        -17.03682804107666
      ],
      [
        "SELECT Max ( * ) FROM airlines",
        -17.20850169658661
      ],
      [
        "SELECT Sum ( AirportName ) FROM airports",
        -17.22396183013916
      ],
      [
        "SELECT Count ( DISTINCT * ) FROM airlines",
        -17.256068229675293
      ],
      [
        "SELECT Count ( Country ) FROM airports",
        -17.60797929763794
      ],
      [
        "SELECT Count ( * ) FROM airlines",
        -17.614794731140137
      ],
      [
        "SELECT * FROM airlines",
        -17.941015005111694
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM airlines",
    "predicted_parse": "SELECT Count ( * ) FROM airlines",
    "predicted_parse_explanation": [
      "find the number of rows in airlines table"
    ],
    "template_feedback": "use airports table in place of airlines table .",
    "primary_span": [
      [
        0,
        2
      ]
    ],
    "secondary_span": [
      [
        3,
        8
      ]
    ],
    "edits": [
      "airports",
      "airlines"
    ],
    "edits_original": "< from > add airports </ from > < from > remove airlines </ from >"
  },
  {
    "db_id": "flight_2",
    "feedback": "Add flights table . Ensure city equals Aberdeen , airline equals United airlines , Make sure airport code equals destination airport .",
    "question": "Count the number of United Airlines flights that arrive in Aberdeen.",
    "gold_parse": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"",
    "beam": [
      [
        "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value AND T1.Country = value",
        -0.7723493576049805
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE Country = value AND City = value",
        -0.9527854919433594
      ],
      [
        "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value AND T1.Airline = value",
        -3.0285863876342773
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE Country = value AND CountryAbbrev = value",
        -3.0846447944641113
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE Country = value AND AirportName = value",
        -4.10045862197876
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE Country = value",
        -4.227020263671875
      ],
      [
        "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.CountryAbbrev = value AND T1.Country = value",
        -4.993474960327148
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE CountryAbbrev = value AND City = value",
        -5.165630340576172
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE Country = value AND Country = value",
        -6.119178771972656
      ],
      [
        "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value AND T1.Abbreviation = value",
        -6.326322555541992
      ],
      [
        "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.City = value AND T1.Country = value",
        -6.349601745605469
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE City = value AND City = value",
        -6.678824424743652
      ],
      [
        "SELECT Count ( * ) FROM airlines WHERE Country = value",
        -6.6898193359375
      ],
      [
        "SELECT Count ( * ) FROM airlines WHERE Country = value AND Country = value",
        -6.845240592956543
      ],
      [
        "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.CountryAbbrev = value AND T1.Airline = value",
        -7.176546573638916
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE City = value",
        -7.389409065246582
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE CountryAbbrev = value",
        -7.966462135314941
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE AirportName = value",
        -10.473337173461914
      ],
      [
        "SELECT Count ( * ) FROM airlines WHERE Airline > value",
        -13.534270286560059
      ],
      [
        "SELECT Count ( * ) FROM airlines WHERE Airline = value",
        -15.315629959106445
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = \"Aberdeen\" AND T1.Country = \"United Airlines\"",
    "predicted_parse": "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value AND T1.Country = value",
    "predicted_parse_explanation": [
      "Step 1: for each row in airlines table , find the corresponding rows in airports table",
      "Step 2: find the number of rows of the results of step 1 whose airports 's country equals Aberdeen and airlines 's country equals United Airlines"
    ],
    "template_feedback": "in step 1 , additionally use the information from the flights table . in step 2 , consider the airlines 's airline name equals United Airlines and city equals Aberdeen conditions in place of the airlines 's country equals United Airlines and airports 's country equals Aberdeen conditions .",
    "primary_span": [
      [
        4,
        12
      ],
      [
        17,
        30
      ]
    ],
    "secondary_span": [
      [
        31,
        48
      ]
    ],
    "edits": [
      "flights",
      "city equals \"Aberdeen\"",
      "airline name equals \"United Airlines\"",
      "country equals \"Aberdeen\"",
      "country equals \"United Airlines\""
    ],
    "edits_original": "< from > add flights </ from > < where > add city equals \" Aberdeen \" </ where > < where > add airline name equals \" United Airlines \" </ where > < where > remove country equals \" Aberdeen \" </ where > < where > remove country equals \" United Airlines \" </ where >"
  },
  {
    "db_id": "wta_1",
    "feedback": "Need to replace loser id with hand .",
    "question": "How many players are there for each hand type?",
    "gold_parse": "SELECT count(*) ,  hand FROM players GROUP BY hand",
    "beam": [
      [
        "SELECT Count ( * ) , T1.hand FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.loser_id",
        -0.9058835506439209
      ],
      [
        "SELECT Count ( * ) , hand FROM players GROUP BY hand",
        -1.1601834297180176
      ],
      [
        "SELECT T1.hand , Count ( * ) FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.loser_id",
        -2.130337715148926
      ],
      [
        "SELECT hand , Count ( * ) FROM players GROUP BY hand",
        -3.011169910430908
      ],
      [
        "SELECT Count ( * ) , T1.hand FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.loser_seed",
        -5.031347036361694
      ],
      [
        "SELECT Count ( * ) , T1.hand FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.loser_name",
        -5.260412931442261
      ],
      [
        "SELECT Count ( * ) , loser_name FROM matches GROUP BY loser_id",
        -5.291686534881592
      ],
      [
        "SELECT Count ( * ) , loser_id FROM matches GROUP BY loser_id",
        -5.504074335098267
      ],
      [
        "SELECT Count ( * ) , T2.loser_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T1.hand",
        -5.553832292556763
      ],
      [
        "SELECT Count ( * ) , T1.hand FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.loser_hand",
        -5.65406060218811
      ],
      [
        "SELECT Count ( * ) , T2.loser_id FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T1.hand",
        -5.656754493713379
      ],
      [
        "SELECT Count ( * ) , loser_hand FROM matches GROUP BY loser_id",
        -5.9066972732543945
      ],
      [
        "SELECT Count ( * ) , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.loser_id",
        -5.977852821350098
      ],
      [
        "SELECT loser_name , Count ( * ) FROM matches GROUP BY loser_id",
        -5.978852987289429
      ],
      [
        "SELECT loser_id , Count ( * ) FROM matches GROUP BY loser_id",
        -6.00423264503479
      ],
      [
        "SELECT loser_seed , Count ( * ) FROM matches GROUP BY loser_id",
        -6.0507097244262695
      ],
      [
        "SELECT Count ( * ) , year FROM matches GROUP BY loser_id",
        -6.053540945053101
      ],
      [
        "SELECT Count ( * ) , loser_seed FROM matches GROUP BY loser_id",
        -6.071899652481079
      ],
      [
        "SELECT loser_hand , Count ( * ) FROM matches GROUP BY loser_id",
        -6.138818740844727
      ],
      [
        "SELECT Count ( * ) , T2.loser_hand FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T1.hand",
        -6.172097206115723
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) , T1.hand FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.loser_id",
    "predicted_parse": "SELECT Count ( * ) , T1.hand FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.loser_id",
    "predicted_parse_explanation": [
      "Step 1: for each row in players table , find the corresponding rows in matches table",
      "Step 2: find each value of loser id of the results of step 1 along with the number of the corresponding rows to each value"
    ],
    "template_feedback": "in step 1 , do not use the matches table . in step 2 , find for each value of hand in place of loser id .",
    "primary_span": [
      [
        4,
        10
      ],
      [
        15,
        20
      ]
    ],
    "secondary_span": [
      [
        4,
        10
      ],
      [
        21,
        26
      ]
    ],
    "edits": [
      "matches",
      "hand",
      "loser id"
    ],
    "edits_original": "< from > remove matches </ from > < groupBy > add hand </ groupBy > < groupBy > remove loser id </ groupBy >"
  },
  {
    "db_id": "network_1",
    "feedback": "In step 1 change friend table with likes table .",
    "question": "What are the names of students who have 2 or more likes?",
    "gold_parse": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2",
    "beam": [
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) > = value",
        -0.009253501892089844
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id GROUP BY T2.student_id HAVING Count ( * ) > = value",
        -4.70081901550293
      ],
      [
        "SELECT name FROM Highschooler GROUP BY ID HAVING Count ( * ) > = value",
        -9.798749923706055
      ],
      [
        "SELECT name FROM Highschooler WHERE grade > = value",
        -10.541345596313477
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id GROUP BY T2.liked_id HAVING Count ( * ) > = value",
        -11.51244068145752
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.friend_id HAVING Count ( * ) > = value",
        -12.454695701599121
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) < = value",
        -12.528570175170898
      ],
      [
        "SELECT DISTINCT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) > = value",
        -13.7694673538208
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) = value OR Count ( * ) = value",
        -13.810919761657715
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 WHERE T1.ID NOT IN ( SELECT T2.student_id FROM Likes AS T2 )",
        -14.770208358764648
      ],
      [
        "SELECT name FROM Highschooler WHERE grade = value OR grade = value",
        -14.979933261871338
      ],
      [
        "SELECT name FROM Highschooler EXCEPT SELECT name FROM Highschooler WHERE grade > = value",
        -15.061663627624512
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id WHERE T1.grade > = value GROUP BY T2.student_id HAVING Count ( * ) > = value",
        -15.094269752502441
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) > value",
        -15.11439323425293
      ],
      [
        "SELECT name FROM Highschooler",
        -15.265399932861328
      ],
      [
        "SELECT name FROM Highschooler EXCEPT SELECT name FROM Highschooler WHERE grade > value",
        -15.297656059265137
      ],
      [
        "SELECT DISTINCT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) > = value",
        -15.423970222473145
      ],
      [
        "SELECT T1.name , T1.grade FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) > = value",
        -15.754620552062988
      ],
      [
        "SELECT name FROM Highschooler WHERE Count ( * ) > = value",
        -15.933019638061523
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id GROUP BY T2.student_id HAVING Count ( * ) < = value",
        -16.130879402160645
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) > = 2",
    "predicted_parse": "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) > = value",
    "predicted_parse_explanation": [
      "Step 1: for each row in high schooler table , find the corresponding rows in friend table",
      "Step 2: find the number of rows of each value of student id of the results of step 1",
      "Step 3: find the name of the results of step 1 whose corresponding value in step 2 is greater than or equals 2"
    ],
    "template_feedback": "in step 1 , use likes table in place of friend table",
    "primary_span": [
      [
        4,
        6
      ]
    ],
    "secondary_span": [
      [
        7,
        11
      ]
    ],
    "edits": [
      "likes",
      "friend"
    ],
    "edits_original": "< from > add likes </ from > < from > remove friend </ from >"
  },
  {
    "db_id": "dog_kennels",
    "feedback": "in step 2, i want date of treatment.",
    "question": "List the date of each treatment, together with the first name of the professional who operated it.",
    "gold_parse": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id",
    "beam": [
      [
        "SELECT T1.date_adopted , T2.first_name FROM Dogs AS T1 JOIN Professionals AS T2 JOIN Treatments AS T3 ON T1.dog_id = T3.dog_id AND T3.professional_id = T2.professional_id",
        -0.3169670104980469
      ],
      [
        "SELECT T1.date_of_birth , T2.first_name FROM Dogs AS T1 JOIN Professionals AS T2 JOIN Treatments AS T3 ON T1.dog_id = T3.dog_id AND T3.professional_id = T2.professional_id",
        -1.7130632400512695
      ],
      [
        "SELECT T1.name , T2.first_name FROM Dogs AS T1 JOIN Professionals AS T2 JOIN Treatments AS T3 ON T1.dog_id = T3.dog_id AND T3.professional_id = T2.professional_id",
        -3.6538143157958984
      ],
      [
        "SELECT first_name , first_name FROM Professionals",
        -3.7680296897888184
      ],
      [
        "SELECT T1.date_departed , T2.first_name FROM Dogs AS T1 JOIN Professionals AS T2 JOIN Treatments AS T3 ON T1.dog_id = T3.dog_id AND T3.professional_id = T2.professional_id",
        -3.9778804779052734
      ],
      [
        "SELECT T2.date_of_treatment , T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id",
        -4.747243404388428
      ],
      [
        "SELECT T1.date_arrived , T2.first_name FROM Dogs AS T1 JOIN Professionals AS T2 JOIN Treatments AS T3 ON T1.dog_id = T3.dog_id AND T3.professional_id = T2.professional_id",
        -4.830506801605225
      ],
      [
        "SELECT T1.first_name , T3.first_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id",
        -5.376775741577148
      ],
      [
        "SELECT T2.date_adopted , T1.first_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id",
        -6.529693603515625
      ],
      [
        "SELECT T2.date_of_birth , T1.first_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id",
        -7.707141399383545
      ],
      [
        "SELECT T3.first_name , T1.first_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id",
        -9.605577945709229
      ],
      [
        "SELECT T2.date_departed , T1.first_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id",
        -9.95694351196289
      ],
      [
        "SELECT T2.name , T1.first_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id",
        -10.334365367889404
      ],
      [
        "SELECT date_adopted , name FROM Dogs",
        -10.603153228759766
      ],
      [
        "SELECT T1.treatment_type_description , T2.first_name FROM Treatment_Types AS T1 JOIN Professionals AS T2 JOIN Treatments AS T3 ON T1.treatment_type_code = T3.treatment_type_code AND T3.professional_id = T2.professional_id",
        -10.603715896606445
      ],
      [
        "SELECT date_adopted , date_of_birth FROM Dogs",
        -10.643270492553711
      ],
      [
        "SELECT T3.date_of_treatment , T1.first_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id",
        -10.809152603149414
      ],
      [
        "SELECT T2.date_arrived , T1.first_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id",
        -10.926778793334961
      ],
      [
        "SELECT first_name , first_name FROM Owners",
        -11.237151622772217
      ],
      [
        "SELECT date_of_birth , date_of_birth FROM Dogs",
        -11.350351333618164
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.date_adopted , T2.first_name FROM Dogs AS T1 JOIN Professionals AS T2 JOIN Treatments AS T3 ON T1.dog_id = T3.dog_id AND T3.professional_id = T2.professional_id",
    "predicted_parse": "SELECT T1.date_adopted , T2.first_name FROM Dogs AS T1 JOIN Professionals AS T2 JOIN Treatments AS T3 ON T1.dog_id = T3.dog_id AND T3.professional_id = T2.professional_id",
    "predicted_parse_explanation": [
      "Step 1: for each row in dogs table , find the corresponding rows in professionals table and in treatments table",
      "Step 2: find the date adopted and first name of the results of step 1"
    ],
    "template_feedback": "in step 1 , do not use the dogs table . in step 2 , find date of treatment in place of date adopted .",
    "primary_span": [
      [
        4,
        10
      ],
      [
        15,
        18
      ]
    ],
    "secondary_span": [
      [
        4,
        10
      ],
      [
        19,
        24
      ]
    ],
    "edits": [
      "date of treatment",
      "date adopted",
      "dogs"
    ],
    "edits_original": "< select > add date of treatment </ select > < select > remove date adopted </ select > < from > remove dogs </ from >"
  },
  {
    "db_id": "tvshow",
    "feedback": "You should use directed by instead of written by.",
    "question": "List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".",
    "gold_parse": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\"",
    "beam": [
      [
        "SELECT Title FROM Cartoon WHERE Written_by = value OR Directed_by = value",
        -0.4424467086791992
      ],
      [
        "SELECT Title FROM Cartoon WHERE Written_by = value OR Written_by = value",
        -1.443293571472168
      ],
      [
        "SELECT Title FROM Cartoon WHERE Directed_by = value OR Directed_by = value",
        -2.556417465209961
      ],
      [
        "SELECT Title FROM Cartoon WHERE Directed_by = value OR Written_by = value",
        -3.2920026779174805
      ],
      [
        "SELECT DISTINCT Title FROM Cartoon WHERE Written_by = value OR Directed_by = value",
        -5.455271244049072
      ],
      [
        "SELECT DISTINCT Title FROM Cartoon WHERE Written_by = value OR Written_by = value",
        -6.48656702041626
      ],
      [
        "SELECT DISTINCT Title FROM Cartoon WHERE Directed_by = value OR Directed_by = value",
        -7.512065410614014
      ],
      [
        "SELECT DISTINCT Title FROM Cartoon WHERE Directed_by = value OR Written_by = value",
        -8.246796131134033
      ],
      [
        "SELECT Title FROM Cartoon WHERE Written_by = value AND Directed_by = value",
        -12.68366527557373
      ],
      [
        "SELECT Title FROM Cartoon WHERE Written_by = value OR Written_by = value AND Directed_by = value",
        -12.972626686096191
      ],
      [
        "SELECT Title , Written_by FROM Cartoon WHERE Written_by = value OR Directed_by = value",
        -12.987588882446289
      ],
      [
        "SELECT Title , Title FROM Cartoon WHERE Written_by = value OR Directed_by = value",
        -13.460125923156738
      ],
      [
        "SELECT DISTINCT Title FROM Cartoon WHERE Written_by = value OR Directed_by = value",
        -13.499557495117188
      ],
      [
        "SELECT Title FROM Cartoon WHERE Written_by = value OR Directed_by = value AND Directed_by = value",
        -13.852213859558105
      ],
      [
        "SELECT Title , Directed_by FROM Cartoon WHERE Written_by = value OR Directed_by = value",
        -13.910160541534424
      ],
      [
        "SELECT Title , Written_by FROM Cartoon WHERE Written_by = value OR Written_by = value",
        -14.16490650177002
      ],
      [
        "SELECT Title FROM Cartoon WHERE Written_by = value AND Written_by = value",
        -14.19779109954834
      ],
      [
        "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value OR T1.series_name = value",
        -14.435920715332031
      ],
      [
        "SELECT DISTINCT Title FROM Cartoon WHERE Written_by = value OR Written_by = value",
        -14.526443481445312
      ],
      [
        "SELECT Title FROM Cartoon WHERE Written_by ! = value OR Directed_by = value",
        -14.536225318908691
      ]
    ],
    "predicted_parse_with_values": "SELECT Title FROM Cartoon WHERE Written_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\"",
    "predicted_parse": "SELECT Title FROM Cartoon WHERE Written_by = value OR Directed_by = value",
    "predicted_parse_explanation": [
      "find the title in cartoon table whose written by equals Ben Jones or directed by equals Brandon Vietti"
    ],
    "template_feedback": "consider the directed by equals Ben Jones conditions in place of the written by equals Ben Jones conditions .",
    "primary_span": [
      [
        0,
        7
      ]
    ],
    "secondary_span": [
      [
        8,
        18
      ]
    ],
    "edits": [
      "directed by equals \"Ben Jones\" or directed by equals \"Brandon Vietti\"",
      "written by equals \"Ben Jones\" or directed by equals \"Brandon Vietti\""
    ],
    "edits_original": "< where > add directed by equals \" Ben Jones \" or directed by equals \" Brandon Vietti \" </ where > < where > remove written by equals \" Ben Jones \" or directed by equals \" Brandon Vietti \" </ where >"
  },
  {
    "db_id": "car_1",
    "feedback": "Need to ensure Country's corresponding country name equals france instead of \"Country equals france\".",
    "question": "What is the number of makers of care in France?",
    "gold_parse": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'",
    "beam": [
      [
        "SELECT Count ( * ) FROM car_makers WHERE Country = value",
        -0.07511568069458008
      ],
      [
        "SELECT Count ( * ) FROM countries WHERE CountryName = value",
        -3.033611297607422
      ],
      [
        "SELECT Count ( * ) FROM car_makers WHERE FullName = value",
        -3.7497262954711914
      ],
      [
        "SELECT Count ( * ) FROM continents WHERE Continent = value",
        -7.6018195152282715
      ],
      [
        "SELECT Count ( * ) FROM model_list WHERE Model = value",
        -9.635200500488281
      ],
      [
        "SELECT Count ( * ) FROM cars_data WHERE Year = value",
        -9.856244087219238
      ],
      [
        "SELECT Count ( * ) FROM car_makers WHERE Maker = value",
        -10.453193664550781
      ],
      [
        "SELECT Count ( * ) FROM countries WHERE CountryId = value",
        -11.478484153747559
      ],
      [
        "SELECT Count ( * ) FROM model_list WHERE ModelId = value",
        -11.520278930664062
      ],
      [
        "SELECT Count ( * ) FROM car_names WHERE Make = value",
        -11.60771369934082
      ],
      [
        "SELECT Count ( * ) FROM car_names WHERE Model = value",
        -12.08273696899414
      ],
      [
        "SELECT Count ( * ) FROM countries WHERE Continent = value",
        -12.812896728515625
      ],
      [
        "SELECT Count ( * ) FROM cars_data WHERE Accelerate = value",
        -12.838600158691406
      ],
      [
        "SELECT Count ( * ) FROM cars_data WHERE Edispl = value",
        -12.90597915649414
      ],
      [
        "SELECT Count ( * ) FROM continents",
        -13.187370300292969
      ],
      [
        "SELECT Count ( * ) FROM cars_data WHERE Cylinders = value",
        -13.287813186645508
      ],
      [
        "SELECT Count ( * ) FROM cars_data WHERE Horsepower = value",
        -13.792587280273438
      ],
      [
        "SELECT Count ( * ) FROM cars_data WHERE MPG = value",
        -14.04079818725586
      ],
      [
        "SELECT Count ( * ) FROM model_list WHERE Maker = value",
        -14.359607696533203
      ],
      [
        "SELECT Count ( * ) FROM car_makers WHERE Id = value",
        -14.557271957397461
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM car_makers WHERE Country = \"france\"",
    "predicted_parse": "SELECT Count ( * ) FROM car_makers WHERE Country = value",
    "predicted_parse_explanation": [
      "find the number of rows in car makers table whose country equals france"
    ],
    "template_feedback": "additionally use the information from the countries table besides the car makers table . consider the country name equals france conditions in place of the country equals france conditions .",
    "primary_span": [
      [
        0,
        7
      ],
      [
        14,
        20
      ]
    ],
    "secondary_span": [
      [
        8,
        13
      ],
      [
        21,
        29
      ]
    ],
    "edits": [
      "countries",
      "country name equals \"france\"",
      "country equals \"france\""
    ],
    "edits_original": "< from > add countries </ from > < where > add country name equals \" france \" </ where > < where > remove country equals \" france \" </ where >"
  },
  {
    "db_id": "network_1",
    "feedback": "In step 1 , I want the likes table.",
    "question": "Show the names of students who have at least 2 likes.",
    "gold_parse": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2",
    "beam": [
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) > = value",
        -0.07234764099121094
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id GROUP BY T2.student_id HAVING Count ( * ) > = value",
        -2.6697683334350586
      ],
      [
        "SELECT name FROM Highschooler WHERE grade > = value",
        -8.091980934143066
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.friend_id HAVING Count ( * ) > = value",
        -9.050061225891113
      ],
      [
        "SELECT name FROM Highschooler GROUP BY name HAVING Count ( * ) > = value",
        -9.573341369628906
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id GROUP BY T2.liked_id HAVING Count ( * ) > = value",
        -11.700835227966309
      ],
      [
        "SELECT name FROM Highschooler GROUP BY ID HAVING Count ( * ) > = value",
        -12.081206321716309
      ],
      [
        "SELECT name FROM Highschooler WHERE grade = value",
        -12.42365837097168
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id WHERE T1.grade = value GROUP BY T2.student_id HAVING Count ( * ) > = value",
        -12.756763458251953
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id WHERE T1.grade = value GROUP BY T2.student_id HAVING Count ( * ) > = value",
        -12.862383842468262
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id HAVING T1.grade > = value",
        -14.008934020996094
      ],
      [
        "SELECT DISTINCT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) > = value",
        -14.41075325012207
      ],
      [
        "SELECT name FROM Highschooler",
        -14.77988052368164
      ],
      [
        "SELECT T1.name , T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) > = value",
        -14.877046346664429
      ],
      [
        "SELECT name FROM Highschooler EXCEPT SELECT name FROM Highschooler WHERE grade = value",
        -15.549038887023926
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id HAVING Sum ( T1.grade ) > = value",
        -15.65186595916748
      ],
      [
        "SELECT T1.name , T1.grade FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) > = value",
        -16.09604024887085
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id WHERE T1.grade > = value GROUP BY T2.student_id HAVING Count ( * ) > = value",
        -16.10530948638916
      ],
      [
        "SELECT DISTINCT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) > = value",
        -16.10686492919922
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id ORDER BY Count ( * ) Asc",
        -16.447062492370605
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) > = 2",
    "predicted_parse": "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) > = value",
    "predicted_parse_explanation": [
      "Step 1: for each row in high schooler table , find the corresponding rows in friend table",
      "Step 2: find the number of rows of each value of student id of the results of step 1",
      "Step 3: find the name of the results of step 1 whose corresponding value in step 2 is greater than or equals 2"
    ],
    "template_feedback": "in step 1 , use likes table in place of friend table",
    "primary_span": [
      [
        4,
        6
      ]
    ],
    "secondary_span": [
      [
        7,
        11
      ]
    ],
    "edits": [
      "likes",
      "friend"
    ],
    "edits_original": "< from > add likes </ from > < from > remove friend </ from >"
  },
  {
    "db_id": "dog_kennels",
    "feedback": "you need to swap between charges and treatments table in step 2 and in each and every step use cost of treatment, treatments tabl.",
    "question": "Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.",
    "gold_parse": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )",
    "beam": [
      [
        "SELECT T2.first_name , T2.last_name FROM Charges AS T1 JOIN Professionals AS T2 WHERE T1.charge_amount < ( SELECT Avg ( T1.charge_amount ) FROM Charges AS T1 )",
        -0.5286111831665039
      ],
      [
        "SELECT T2.first_name , T3.last_name FROM Charges AS T1 JOIN Owners AS T2 JOIN Professionals AS T3 WHERE T1.charge_amount < ( SELECT Avg ( T1.charge_amount ) FROM Charges AS T1 )",
        -1.562790870666504
      ],
      [
        "SELECT T3.first_name , T2.last_name FROM Charges AS T1 JOIN Owners AS T2 JOIN Professionals AS T3 WHERE T1.charge_amount < ( SELECT Avg ( T1.charge_amount ) FROM Charges AS T1 )",
        -1.9149322509765625
      ],
      [
        "SELECT T2.first_name , T2.last_name FROM Charges AS T1 JOIN Owners AS T2 WHERE T1.charge_amount < ( SELECT Avg ( T1.charge_amount ) FROM Charges AS T1 )",
        -2.9558286666870117
      ],
      [
        "SELECT T2.first_name , T2.last_name FROM Charges AS T1 JOIN Professionals AS T2 WHERE T1.charge_amount < ( SELECT Avg ( T3.cost_of_treatment ) FROM Treatments AS T3 )",
        -7.883652687072754
      ],
      [
        "SELECT T2.first_name , T2.last_name FROM Charges AS T1 JOIN Professionals AS T2 WHERE T1.charge_amount < ( SELECT Avg ( T3.size_description ) FROM Sizes AS T3 )",
        -8.721942901611328
      ],
      [
        "SELECT T2.first_name , T3.last_name FROM Charges AS T1 JOIN Owners AS T2 JOIN Professionals AS T3 WHERE T1.charge_amount < ( SELECT Avg ( T4.cost_of_treatment ) FROM Treatments AS T4 )",
        -8.917891502380371
      ],
      [
        "SELECT T1.first_name , T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id WHERE T2.cost_of_treatment < ( SELECT Avg ( T3.charge_amount ) FROM Charges AS T3 )",
        -9.034829139709473
      ],
      [
        "SELECT T3.first_name , T2.last_name FROM Charges AS T1 JOIN Owners AS T2 JOIN Professionals AS T3 WHERE T1.charge_amount < ( SELECT Avg ( T4.cost_of_treatment ) FROM Treatments AS T4 )",
        -9.268086433410645
      ],
      [
        "SELECT T3.first_name , T3.last_name FROM Sizes AS T1 JOIN Dogs AS T2 ON T1.size_code = T2.size_code JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id WHERE T1.size_description < ( SELECT Avg ( T5.charge_amount ) FROM Charges AS T5 )",
        -9.398828983306885
      ],
      [
        "SELECT T2.first_name , T3.last_name FROM Charges AS T1 JOIN Owners AS T2 JOIN Professionals AS T3 WHERE T1.charge_amount < ( SELECT Avg ( T4.size_description ) FROM Sizes AS T4 )",
        -9.756325721740723
      ],
      [
        "SELECT T3.first_name , T3.last_name FROM Sizes AS T1 JOIN Dogs AS T2 ON T1.size_code = T2.size_code JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id WHERE T1.size_description < value",
        -9.827763557434082
      ],
      [
        "SELECT T2.first_name , T2.last_name FROM Charges AS T1 JOIN Professionals AS T2 WHERE T1.charge_amount > ( SELECT Avg ( T1.charge_amount ) FROM Charges AS T1 )",
        -9.950163841247559
      ],
      [
        "SELECT T1.first_name , T3.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id AND T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id AND T2.dog_id = T4.dog_id WHERE T4.cost_of_treatment < ( SELECT Avg ( T5.charge_amount ) FROM Charges AS T5 )",
        -10.071488380432129
      ],
      [
        "SELECT T3.first_name , T2.last_name FROM Charges AS T1 JOIN Owners AS T2 JOIN Professionals AS T3 WHERE T1.charge_amount < ( SELECT Avg ( T4.size_description ) FROM Sizes AS T4 )",
        -10.100672721862793
      ],
      [
        "SELECT T2.first_name , T2.last_name FROM Charges AS T1 JOIN Owners AS T2 WHERE T1.charge_amount < ( SELECT Avg ( T3.cost_of_treatment ) FROM Treatments AS T3 )",
        -10.30900526046753
      ],
      [
        "SELECT T3.first_name , T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id AND T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id AND T2.dog_id = T4.dog_id WHERE T4.cost_of_treatment < ( SELECT Avg ( T5.charge_amount ) FROM Charges AS T5 )",
        -10.343994140625
      ],
      [
        "SELECT T2.first_name , T4.last_name FROM Sizes AS T1 JOIN Owners AS T2 JOIN Dogs AS T3 ON T1.size_code = T3.size_code AND T3.owner_id = T2.owner_id AND T1.size_code = T3.size_code JOIN Professionals AS T4 JOIN Treatments AS T5 ON T3.dog_id = T5.dog_id AND T5.professional_id = T4.professional_id WHERE T1.size_description < ( SELECT Avg ( T6.charge_amount ) FROM Charges AS T6 )",
        -10.440582275390625
      ],
      [
        "SELECT T2.first_name , T4.last_name FROM Sizes AS T1 JOIN Owners AS T2 JOIN Dogs AS T3 ON T1.size_code = T3.size_code AND T3.owner_id = T2.owner_id AND T1.size_code = T3.size_code JOIN Professionals AS T4 JOIN Treatments AS T5 ON T3.dog_id = T5.dog_id AND T5.professional_id = T4.professional_id WHERE T1.size_description < value",
        -10.869691848754883
      ],
      [
        "SELECT T4.first_name , T2.last_name FROM Sizes AS T1 JOIN Owners AS T2 JOIN Dogs AS T3 ON T1.size_code = T3.size_code AND T3.owner_id = T2.owner_id AND T1.size_code = T3.size_code JOIN Professionals AS T4 JOIN Treatments AS T5 ON T3.dog_id = T5.dog_id AND T5.professional_id = T4.professional_id WHERE T1.size_description < value",
        -11.557783126831055
      ]
    ],
    "predicted_parse_with_values": "SELECT T2.first_name , T2.last_name FROM Charges AS T1 JOIN Professionals AS T2 WHERE T1.charge_amount < ( SELECT Avg ( T1.charge_amount ) FROM Charges AS T1 )",
    "predicted_parse": "SELECT T2.first_name , T2.last_name FROM Charges AS T1 JOIN Professionals AS T2 WHERE T1.charge_amount < ( SELECT Avg ( T1.charge_amount ) FROM Charges AS T1 )",
    "predicted_parse_explanation": [
      "Step 1: for each row in charges table , find the corresponding rows in professionals table",
      "Step 2: find the average charge amount in charges table",
      "Step 3: find the first name and last name of the results of step 1 whose charge amount less than the results of step 2"
    ],
    "template_feedback": "in step 1 , use treatments table in place of charges table in step 2 , use treatments table in place of charges table . find average cost of treatment in place of average charge amount . in step 3 , make sure the cost of treatment is less than the results of step 2 the charge amount is less than the results of step 2 . make sure no repetition in the results .",
    "primary_span": [
      [
        4,
        6
      ],
      [
        16,
        18
      ],
      [
        25,
        29
      ],
      [
        41,
        54
      ],
      [
        67,
        74
      ]
    ],
    "secondary_span": [
      [
        7,
        11
      ],
      [
        19,
        24
      ],
      [
        30,
        36
      ],
      [
        55,
        66
      ]
    ],
    "edits": [
      "distinct",
      "treatments",
      "charges",
      "cost of treatment less than SUBS1",
      "charge amount less than SUBS1",
      "average cost of treatment",
      "average charge amount",
      "treatments",
      "charges"
    ],
    "edits_original": "< select > add distinct </ select > < from > add treatments </ from > < from > remove charges </ from > < where > add cost of treatment less than SUBS1 </ where > < where > remove charge amount less than SUBS1 </ where > < select > add average cost of treatment </ select > < select > remove average charge amount </ select > < from > add treatments </ from > < from > remove charges </ from >"
  },
  {
    "db_id": "flight_2",
    "feedback": "use flights and for ashley and aberdeen search for source airportiation.",
    "question": "How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?",
    "gold_parse": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"",
    "beam": [
      [
        "SELECT Count ( * ) FROM airports WHERE AirportName = value AND City = value",
        -0.3264617919921875
      ],
      [
        "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = value AND T1.Airline = value",
        -2.243910789489746
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE AirportName = value AND AirportName = value",
        -2.4686951637268066
      ],
      [
        "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = value AND T1.Abbreviation = value",
        -3.035048484802246
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE City = value AND City = value",
        -4.124394416809082
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE AirportName = value AND Country = value",
        -4.272245407104492
      ],
      [
        "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.City = value AND T1.Airline = value",
        -6.029965400695801
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE AirportName = value AND CountryAbbrev = value",
        -6.045300006866455
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE City = value AND AirportName = value",
        -6.26706600189209
      ],
      [
        "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.City = value AND T1.Abbreviation = value",
        -6.804776191711426
      ],
      [
        "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = value AND T1.Country = value",
        -7.290718078613281
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE City = value AND Country = value",
        -8.058382987976074
      ],
      [
        "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = value AND T2.AirportName = value AND T1.Abbreviation = value",
        -8.80363941192627
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE AirportName = value AND AirportName = value AND City = value",
        -8.841804504394531
      ],
      [
        "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = value AND T2.City = value AND T1.Abbreviation = value",
        -9.830723762512207
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE City = value AND CountryAbbrev = value",
        -9.83164358139038
      ],
      [
        "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = value AND T2.AirportName = value AND T1.Airline = value",
        -9.839378356933594
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE AirportName = value",
        -12.710847854614258
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE City = value",
        -14.495443344116211
      ],
      [
        "SELECT Count ( * ) FROM airlines",
        -17.68913745880127
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM airports WHERE AirportName = \"Ashley\" AND City = \"Aberdeen\"",
    "predicted_parse": "SELECT Count ( * ) FROM airports WHERE AirportName = value AND City = value",
    "predicted_parse_explanation": [
      "find the number of rows in airports table whose airport name equals Ashley and city equals Aberdeen"
    ],
    "template_feedback": "additionally use the information from the flights table besides the airports table . consider the city equals Ashley conditions in place of the airport name equals Ashley conditions .",
    "primary_span": [
      [
        0,
        7
      ],
      [
        13,
        18
      ]
    ],
    "secondary_span": [
      [
        8,
        12
      ],
      [
        19,
        28
      ]
    ],
    "edits": [
      "flights",
      "airports",
      "city equals \"Ashley\"",
      "airport name equals \"Ashley\""
    ],
    "edits_original": "< from > add flights </ from > < from > add airports </ from > < where > add city equals \" Ashley \" </ where > < where > remove airport name equals \" Ashley \" </ where >"
  },
  {
    "db_id": "flight_2",
    "feedback": "in step 1, you should use source airport instead of destination airport and also from step 2, i want airport code and airports table.",
    "question": "What is the airport code of the airport with the most flights?",
    "gold_parse": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1",
    "beam": [
      [
        "SELECT DestAirport FROM flights GROUP BY DestAirport ORDER BY Count ( * ) Desc LIMIT value",
        -0.21755456924438477
      ],
      [
        "SELECT T1.AirportCode FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport GROUP BY T2.DestAirport ORDER BY Count ( * ) Desc LIMIT value",
        -2.7088661193847656
      ],
      [
        "SELECT DestAirport FROM flights GROUP BY SourceAirport ORDER BY Count ( * ) Desc LIMIT value",
        -2.969320774078369
      ],
      [
        "SELECT T2.DestAirport FROM airlines AS T1 JOIN flights AS T2 ORDER BY T1.Airline Desc LIMIT value",
        -3.876867413520813
      ],
      [
        "SELECT T2.DestAirport FROM airlines AS T1 JOIN flights AS T2 GROUP BY T1.Abbreviation ORDER BY Count ( * ) Desc LIMIT value",
        -4.018656253814697
      ],
      [
        "SELECT T2.AirportCode FROM airlines AS T1 JOIN airports AS T2 ORDER BY T1.Airline Desc LIMIT value",
        -4.104920864105225
      ],
      [
        "SELECT DestAirport FROM flights ORDER BY FlightNo Desc LIMIT value",
        -5.5257837772369385
      ],
      [
        "SELECT T1.AirportCode FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport GROUP BY T2.SourceAirport ORDER BY Count ( * ) Desc LIMIT value",
        -5.746451377868652
      ],
      [
        "SELECT T1.AirportCode FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport ORDER BY T2.FlightNo Desc LIMIT value",
        -5.793474435806274
      ],
      [
        "SELECT DestAirport FROM flights ORDER BY * Desc LIMIT value",
        -5.8315324783325195
      ],
      [
        "SELECT AirportCode FROM airports ORDER BY * Desc LIMIT value",
        -6.035478830337524
      ],
      [
        "SELECT T2.DestAirport FROM airlines AS T1 JOIN flights AS T2 ORDER BY T1.Abbreviation Desc LIMIT value",
        -6.766021251678467
      ],
      [
        "SELECT T2.AirportCode FROM airlines AS T1 JOIN airports AS T2 ORDER BY T1.Abbreviation Desc LIMIT value",
        -6.982743263244629
      ],
      [
        "SELECT T2.AirportCode FROM airlines AS T1 JOIN airports AS T2 GROUP BY T1.Abbreviation ORDER BY Count ( * ) Desc LIMIT value",
        -6.99423360824585
      ],
      [
        "SELECT T2.DestAirport FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport ORDER BY T1.AirportName Desc LIMIT value",
        -7.0810089111328125
      ],
      [
        "SELECT AirportCode FROM airports ORDER BY AirportName Desc LIMIT value",
        -7.383502960205078
      ],
      [
        "SELECT T2.DestAirport FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport GROUP BY T1.Country ORDER BY Count ( * ) Desc LIMIT value",
        -7.713311195373535
      ],
      [
        "SELECT Max ( AirportCode ) FROM airports",
        -11.999366044998169
      ],
      [
        "SELECT Max ( DestAirport ) FROM flights",
        -13.456491708755493
      ],
      [
        "SELECT Max ( AirportName ) FROM airports",
        -13.58683466911316
      ]
    ],
    "predicted_parse_with_values": "SELECT DestAirport FROM flights GROUP BY DestAirport ORDER BY Count ( * ) Desc LIMIT 1",
    "predicted_parse": "SELECT DestAirport FROM flights GROUP BY DestAirport ORDER BY Count ( * ) Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of destination airport in flights table",
      "Step 2: find the destination airport in flights table with largest value in the results of step 1"
    ],
    "template_feedback": "in step 1 , additionally use the information from the airports table besides the flights table .",
    "primary_span": [
      [
        4,
        11
      ]
    ],
    "secondary_span": [
      [
        12,
        16
      ]
    ],
    "edits": [
      "airport code",
      "destination airport",
      "airports",
      "airport code",
      "destination airport"
    ],
    "edits_original": "< select > add airport code </ select > < select > remove destination airport </ select > < from > add airports </ from > < groupBy > add airport code </ groupBy > < groupBy > remove destination airport </ groupBy >"
  },
  {
    "db_id": "concert_singer",
    "feedback": "Make sure to find number of similar rows for all  singer in concert's singer id.",
    "question": "What are the names of the singers and number of concerts for each person?",
    "gold_parse": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id",
    "beam": [
      [
        "SELECT Name , Count ( * ) FROM singer GROUP BY Name",
        -0.13074731826782227
      ],
      [
        "SELECT T1.Name , Count ( * ) FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T2.Singer_ID",
        -2.1764774322509766
      ],
      [
        "SELECT Name , Count ( * ) FROM singer GROUP BY Song_Name",
        -5.391200065612793
      ],
      [
        "SELECT T1.Name , Count ( * ) FROM singer AS T1 JOIN concert AS T2 JOIN singer_in_concert AS T3 ON T1.Singer_ID = T3.Singer_ID AND T3.concert_ID = T2.concert_ID GROUP BY T2.concert_Name",
        -5.757654190063477
      ],
      [
        "SELECT T1.Name , Count ( * ) FROM singer AS T1 JOIN concert AS T2 JOIN singer_in_concert AS T3 ON T1.Singer_ID = T3.Singer_ID AND T3.concert_ID = T2.concert_ID GROUP BY T2.Stadium_ID",
        -7.033933162689209
      ],
      [
        "SELECT Name , Count ( * ) FROM singer GROUP BY Singer_ID",
        -8.156862258911133
      ],
      [
        "SELECT Name , Count ( * ) FROM singer GROUP BY *",
        -9.316569328308105
      ],
      [
        "SELECT Song_Name , Count ( * ) FROM singer GROUP BY Name",
        -9.747067928314209
      ],
      [
        "SELECT T1.Name , Count ( * ) FROM singer AS T1 JOIN concert AS T2 JOIN singer_in_concert AS T3 ON T1.Singer_ID = T3.Singer_ID AND T3.concert_ID = T2.concert_ID GROUP BY T2.Year",
        -10.908379554748535
      ],
      [
        "SELECT Name , Count ( * ) FROM singer GROUP BY Country",
        -11.249245643615723
      ],
      [
        "SELECT T1.Name , Count ( * ) FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T2.concert_ID",
        -11.419291496276855
      ],
      [
        "SELECT T1.Song_Name , Count ( * ) FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T2.Singer_ID",
        -11.768497467041016
      ],
      [
        "SELECT Name , Sum ( * ) FROM singer GROUP BY Name",
        -12.489390969276428
      ],
      [
        "SELECT T1.Name , Count ( * ) FROM singer AS T1 JOIN concert AS T2 JOIN singer_in_concert AS T3 ON T1.Singer_ID = T3.Singer_ID AND T3.concert_ID = T2.concert_ID GROUP BY T2.concert_ID",
        -12.534808158874512
      ],
      [
        "SELECT T1.Name , Sum ( T2.concert_Name ) FROM singer AS T1 JOIN concert AS T2 JOIN singer_in_concert AS T3 ON T1.Singer_ID = T3.Singer_ID AND T3.concert_ID = T2.concert_ID GROUP BY T1.Name",
        -12.705938935279846
      ],
      [
        "SELECT Name , Count ( * ) FROM singer GROUP BY Is_male",
        -12.723822593688965
      ],
      [
        "SELECT Name , Count ( * ) FROM singer",
        -12.886332511901855
      ],
      [
        "SELECT T2.Name , Count ( * ) FROM stadium AS T1 JOIN singer AS T2 JOIN concert AS T3 ON T1.Stadium_ID = T3.Stadium_ID JOIN singer_in_concert AS T4 ON T3.concert_ID = T4.concert_ID AND T4.Singer_ID = T2.Singer_ID GROUP BY T1.Stadium_ID",
        -12.998092651367188
      ],
      [
        "SELECT T1.Name , Count ( * ) , T2.concert_Name FROM singer AS T1 JOIN concert AS T2 JOIN singer_in_concert AS T3 ON T1.Singer_ID = T3.Singer_ID AND T3.concert_ID = T2.concert_ID AND T1.Singer_ID = T3.Singer_ID GROUP BY T3.Singer_ID",
        -13.154497385025024
      ],
      [
        "SELECT Name FROM singer GROUP BY Name",
        -13.313172340393066
      ]
    ],
    "predicted_parse_with_values": "SELECT Name , Count ( * ) FROM singer GROUP BY Name",
    "predicted_parse": "SELECT Name , Count ( * ) FROM singer GROUP BY Name",
    "predicted_parse_explanation": [
      "find each value of name in singer table along with the number of the corresponding rows to each value"
    ],
    "template_feedback": "additionally use the information from the singer in concert table besides the singer table . find for each value of singer 's singer id in place of name .",
    "primary_span": [
      [
        0,
        9
      ],
      [
        15,
        23
      ]
    ],
    "secondary_span": [
      [
        10,
        14
      ],
      [
        24,
        28
      ]
    ],
    "edits": [
      "singer in concert",
      "singer id",
      "name"
    ],
    "edits_original": "< from > add singer in concert </ from > < groupBy > add singer id </ groupBy > < groupBy > remove name </ groupBy >"
  },
  {
    "db_id": "flight_2",
    "feedback": "airports is to changed with flights and find source airport for Ashley and destination airport for Aberdeen .",
    "question": "How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?",
    "gold_parse": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"",
    "beam": [
      [
        "SELECT Count ( * ) FROM airports WHERE AirportName = value AND City = value",
        -0.3264617919921875
      ],
      [
        "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = value AND T1.Airline = value",
        -2.243910789489746
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE AirportName = value AND AirportName = value",
        -2.4686951637268066
      ],
      [
        "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = value AND T1.Abbreviation = value",
        -3.035048484802246
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE City = value AND City = value",
        -4.124394416809082
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE AirportName = value AND Country = value",
        -4.272245407104492
      ],
      [
        "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.City = value AND T1.Airline = value",
        -6.029965400695801
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE AirportName = value AND CountryAbbrev = value",
        -6.045300006866455
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE City = value AND AirportName = value",
        -6.26706600189209
      ],
      [
        "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.City = value AND T1.Abbreviation = value",
        -6.804776191711426
      ],
      [
        "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = value AND T1.Country = value",
        -7.290718078613281
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE City = value AND Country = value",
        -8.058382987976074
      ],
      [
        "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = value AND T2.AirportName = value AND T1.Abbreviation = value",
        -8.80363941192627
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE AirportName = value AND AirportName = value AND City = value",
        -8.841804504394531
      ],
      [
        "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = value AND T2.City = value AND T1.Abbreviation = value",
        -9.830723762512207
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE City = value AND CountryAbbrev = value",
        -9.83164358139038
      ],
      [
        "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = value AND T2.AirportName = value AND T1.Airline = value",
        -9.839378356933594
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE AirportName = value",
        -12.710847854614258
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE City = value",
        -14.495443344116211
      ],
      [
        "SELECT Count ( * ) FROM airlines",
        -17.68913745880127
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM airports WHERE AirportName = \"Ashley\" AND City = \"Aberdeen\"",
    "predicted_parse": "SELECT Count ( * ) FROM airports WHERE AirportName = value AND City = value",
    "predicted_parse_explanation": [
      "find the number of rows in airports table whose airport name equals Ashley and city equals Aberdeen"
    ],
    "template_feedback": "additionally use the information from the flights table besides the airports table . consider the city equals Ashley conditions in place of the airport name equals Ashley conditions .",
    "primary_span": [
      [
        0,
        7
      ],
      [
        13,
        18
      ]
    ],
    "secondary_span": [
      [
        8,
        12
      ],
      [
        19,
        28
      ]
    ],
    "edits": [
      "flights",
      "airports",
      "city equals \"Ashley\"",
      "airport name equals \"Ashley\""
    ],
    "edits_original": "< from > add flights </ from > < from > add airports </ from > < where > add city equals \" Ashley \" </ where > < where > remove airport name equals \" Ashley \" </ where >"
  },
  {
    "db_id": "car_1",
    "feedback": "Additionally, equivalent model of model list table.",
    "question": "What are all the makers and models?",
    "gold_parse": "SELECT Maker ,  Model FROM MODEL_LIST",
    "beam": [
      [
        "SELECT Maker FROM car_makers",
        -0.31635332107543945
      ],
      [
        "SELECT Model FROM model_list",
        -1.4556641578674316
      ],
      [
        "SELECT * FROM continents",
        -3.953040838241577
      ],
      [
        "SELECT Make FROM car_names",
        -4.911764144897461
      ],
      [
        "SELECT T1.Maker , T2.Model FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker",
        -5.198111295700073
      ],
      [
        "SELECT FullName FROM car_makers",
        -5.803190231323242
      ],
      [
        "SELECT Model , Model FROM model_list",
        -7.028489589691162
      ],
      [
        "SELECT Maker FROM model_list",
        -7.835210800170898
      ],
      [
        "SELECT Continent FROM continents",
        -7.964555740356445
      ],
      [
        "SELECT MPG FROM cars_data",
        -8.51301097869873
      ],
      [
        "SELECT ModelId FROM model_list",
        -8.671175003051758
      ],
      [
        "SELECT * , Model FROM model_list",
        -8.83679485321045
      ],
      [
        "SELECT Country FROM car_makers",
        -8.924602508544922
      ],
      [
        "SELECT Horsepower FROM cars_data",
        -9.079545974731445
      ],
      [
        "SELECT T2.Make , T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model",
        -9.101251125335693
      ],
      [
        "SELECT T1.FullName , T2.Model FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker",
        -9.525157928466797
      ],
      [
        "SELECT CountryName FROM countries",
        -9.656302452087402
      ],
      [
        "SELECT Weight FROM cars_data",
        -9.965469360351562
      ],
      [
        "SELECT Year FROM cars_data",
        -10.40966796875
      ],
      [
        "SELECT Edispl FROM cars_data",
        -10.731751441955566
      ]
    ],
    "predicted_parse_with_values": "SELECT Maker FROM car_makers",
    "predicted_parse": "SELECT Maker FROM car_makers",
    "predicted_parse_explanation": [
      "find the maker in car makers table"
    ],
    "template_feedback": "use model list table in place of car makers table . find model list 's maker and model in place of car makers 's maker .",
    "primary_span": [
      [
        0,
        3
      ],
      [
        11,
        17
      ]
    ],
    "secondary_span": [
      [
        4,
        10
      ],
      [
        18,
        25
      ]
    ],
    "edits": [
      "model",
      "model list",
      "car makers"
    ],
    "edits_original": "< select > add model </ select > < from > add model list </ from > < from > remove car makers </ from >"
  },
  {
    "db_id": "student_transcripts_tracking",
    "feedback": "I want id of student.",
    "question": "Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id.",
    "gold_parse": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2",
    "beam": [
      [
        "SELECT T1.first_name , T1.middle_name , T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) = value",
        -0.7226591110229492
      ],
      [
        "SELECT T1.first_name , T1.middle_name , T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) BETWEEN value AND value",
        -2.035140037536621
      ],
      [
        "SELECT T1.first_name , T1.middle_name , T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) > = value",
        -2.339385986328125
      ],
      [
        "SELECT T1.first_name , T1.middle_name , T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T2.student_enrolment_id HAVING Count ( * ) > = value",
        -3.5294933319091797
      ],
      [
        "SELECT T1.first_name , T1.middle_name , T2.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) BETWEEN value AND value",
        -3.649139404296875
      ],
      [
        "SELECT T1.first_name , T1.middle_name , T2.student_enrolment_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) BETWEEN value AND value",
        -3.979598045349121
      ],
      [
        "SELECT T1.first_name , T1.middle_name , T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) LIKE value",
        -3.9974560737609863
      ],
      [
        "SELECT T1.first_name , T1.middle_name , T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T2.student_enrolment_id HAVING Count ( * ) = value",
        -4.012093544006348
      ],
      [
        "SELECT T1.first_name , T1.middle_name , T2.student_enrolment_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) = value",
        -4.219856262207031
      ],
      [
        "SELECT T1.first_name , T1.middle_name , T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) IN ( SELECT T2.student_id FROM Student_Enrolment AS T2 )",
        -4.404507160186768
      ],
      [
        "SELECT T1.first_name , T1.middle_name , T2.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) = value",
        -4.564968109130859
      ],
      [
        "SELECT T1.first_name , T1.middle_name , T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) = value INTERSECT SELECT T1.first_name , T1.middle_name , T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) = value",
        -4.8672990798950195
      ],
      [
        "SELECT T1.first_name , T1.middle_name , T2.student_enrolment_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) > = value",
        -4.8923540115356445
      ],
      [
        "SELECT T1.first_name , T1.middle_name , T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T2.student_enrolment_id HAVING Count ( * ) BETWEEN value AND value",
        -5.3793134689331055
      ],
      [
        "SELECT T1.first_name , T1.middle_name , T2.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) > = value",
        -5.404165267944336
      ],
      [
        "SELECT T1.first_name , T1.middle_name , T2.student_enrolment_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T2.student_enrolment_id HAVING Count ( * ) > = value",
        -6.025620460510254
      ],
      [
        "SELECT T1.first_name , T1.middle_name , T2.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T2.student_enrolment_id HAVING Count ( * ) > = value",
        -6.208412170410156
      ],
      [
        "SELECT T1.first_name , T1.middle_name , T1.last_name FROM Students AS T1 UNION SELECT T1.first_name , T2.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id",
        -6.250458717346191
      ],
      [
        "SELECT T1.first_name , T1.middle_name , T2.student_enrolment_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T2.student_enrolment_id HAVING Count ( * ) = value",
        -6.253242492675781
      ],
      [
        "SELECT first_name , middle_name , last_name FROM Students INTERSECT SELECT first_name , middle_name , last_name FROM Students",
        -6.374659538269043
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.first_name , T1.middle_name , T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) = 2",
    "predicted_parse": "SELECT T1.first_name , T1.middle_name , T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) = value",
    "predicted_parse_explanation": [
      "Step 1: for each row in students table , find the corresponding rows in student enrolment table",
      "Step 2: find the number of rows of each value of student enrolment 's student id of the results of step 1",
      "Step 3: find the first name , middle name , last name of the results of step 1 whose corresponding value in step 2 is equals 2"
    ],
    "template_feedback": "in step 3 , additionally find students 's student id .",
    "primary_span": [
      [
        4,
        10
      ]
    ],
    "secondary_span": [],
    "edits": [
      "student id"
    ],
    "edits_original": "< select > add student id </ select >"
  },
  {
    "db_id": "employee_hire_evaluation",
    "feedback": "In step 2 also find name .",
    "question": "For each shop, return the number of employees working there and the name of the shop.",
    "gold_parse": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name",
    "beam": [
      [
        "SELECT Count ( * ) , T1.Name FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T2.Shop_ID",
        -0.15260791778564453
      ],
      [
        "SELECT Count ( * ) , T1.Name , Count ( * ) FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T2.Shop_ID",
        -2.0698022842407227
      ],
      [
        "SELECT Count ( * ) , T1.Name FROM employee AS T1 JOIN hiring AS T2 ON T1.Employee_ID = T2.Employee_ID GROUP BY T2.Shop_ID",
        -4.468438148498535
      ],
      [
        "SELECT Count ( * ) , T1.Manager_name FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T2.Shop_ID",
        -5.9491472244262695
      ],
      [
        "SELECT Count ( * ) , T1.Name , Count ( * ) FROM employee AS T1 JOIN hiring AS T2 ON T1.Employee_ID = T2.Employee_ID GROUP BY T2.Shop_ID",
        -7.019576072692871
      ],
      [
        "SELECT Count ( * ) , T1.Manager_name , Count ( * ) FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T2.Shop_ID",
        -8.841383934020996
      ],
      [
        "SELECT Count ( * ) , Shop_ID FROM hiring GROUP BY Shop_ID",
        -9.22669792175293
      ],
      [
        "SELECT Count ( * ) , Name FROM shop GROUP BY Shop_ID",
        -10.786643028259277
      ],
      [
        "SELECT T1.Name , Count ( * ) FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T2.Shop_ID",
        -11.01997184753418
      ],
      [
        "SELECT Count ( * ) , T1.Number_products FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T2.Shop_ID",
        -11.74429988861084
      ],
      [
        "SELECT Count ( * ) , Count ( * ) , T1.Name FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T2.Shop_ID",
        -11.813047409057617
      ],
      [
        "SELECT Count ( * ) , Sum ( T1.Name ) , Count ( * ) FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T2.Shop_ID",
        -12.07517147064209
      ],
      [
        "SELECT Avg ( * ) , T1.Name FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T2.Shop_ID",
        -12.320457458496094
      ],
      [
        "SELECT Count ( * ) , Shop_ID , Count ( * ) FROM hiring GROUP BY Shop_ID",
        -12.498404502868652
      ],
      [
        "SELECT T1.Name , Count ( * ) , T1.Name FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T2.Shop_ID",
        -12.95507526397705
      ],
      [
        "SELECT Count ( * ) , T1.Name , Sum ( T2.Employee_ID ) FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T2.Shop_ID",
        -13.084877014160156
      ],
      [
        "SELECT Count ( * ) , T1.Shop_ID FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T2.Shop_ID",
        -13.146612167358398
      ],
      [
        "SELECT Count ( * ) , Name FROM shop",
        -13.168039321899414
      ],
      [
        "SELECT Count ( * ) , T1.Name , Count ( * ) , T2.Shop_ID FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T2.Shop_ID",
        -13.545130729675293
      ],
      [
        "SELECT Count ( * ) FROM hiring GROUP BY Shop_ID",
        -13.574548721313477
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) , T1.Name FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T2.Shop_ID",
    "predicted_parse": "SELECT Count ( * ) , T1.Name FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T2.Shop_ID",
    "predicted_parse_explanation": [
      "Step 1: for each row in shop table , find the corresponding rows in hiring table",
      "Step 2: find each value of hiring 's shop id of the results of step 1 along with the number of the corresponding rows to each value"
    ],
    "template_feedback": "in step 2 , find for each value of name in place of hiring 's shop id .",
    "primary_span": [
      [
        4,
        9
      ]
    ],
    "secondary_span": [
      [
        10,
        17
      ]
    ],
    "edits": [
      "name",
      "shop id"
    ],
    "edits_original": "< groupBy > add name </ groupBy > < groupBy > remove shop id </ groupBy >"
  },
  {
    "db_id": "world_1",
    "feedback": "Swap continent with name name .",
    "question": "Give the names of the nations that were founded after 1950.",
    "gold_parse": "SELECT Name FROM country WHERE IndepYear  >  1950",
    "beam": [
      [
        "SELECT Continent FROM country WHERE IndepYear > value",
        -0.00018405914306640625
      ],
      [
        "SELECT GovernmentForm FROM country WHERE IndepYear > value",
        -8.680695533752441
      ],
      [
        "SELECT Name FROM country WHERE IndepYear > value",
        -11.585982322692871
      ],
      [
        "SELECT Continent , Continent FROM country WHERE IndepYear > value",
        -13.670428276062012
      ],
      [
        "SELECT Continent FROM country WHERE IndepYear = value",
        -13.93028736114502
      ],
      [
        "SELECT LocalName FROM country WHERE IndepYear > value",
        -14.202801704406738
      ],
      [
        "SELECT DISTINCT Continent FROM country WHERE IndepYear > value",
        -14.438455581665039
      ],
      [
        "SELECT Continent FROM country WHERE IndepYear > = value",
        -15.211130142211914
      ],
      [
        "SELECT Continent FROM country WHERE IndepYear > value AND Name = value",
        -15.47005558013916
      ],
      [
        "SELECT Continent FROM country WHERE IndepYear > ( SELECT IndepYear FROM country WHERE Name = value )",
        -15.483594417572021
      ],
      [
        "SELECT Continent FROM country WHERE IndepYear > value AND IndepYear > value",
        -16.052489280700684
      ],
      [
        "SELECT Continent FROM country WHERE IndepYear < value",
        -16.058844566345215
      ],
      [
        "SELECT Continent FROM country WHERE Name = value",
        -16.089801788330078
      ],
      [
        "SELECT Continent , Name FROM country WHERE IndepYear > value",
        -16.23395347595215
      ],
      [
        "SELECT DISTINCT Continent FROM country WHERE IndepYear > value",
        -16.494145393371582
      ],
      [
        "SELECT Continent FROM country WHERE DISTINCT IndepYear > value",
        -17.156441688537598
      ],
      [
        "SELECT Continent FROM country WHERE IndepYear > value LIMIT value",
        -17.17353343963623
      ],
      [
        "SELECT Count ( Continent ) FROM country WHERE IndepYear > value",
        -17.72407341003418
      ],
      [
        "SELECT Continent FROM country WHERE Max ( IndepYear ) > value",
        -17.753954887390137
      ],
      [
        "SELECT Continent FROM country",
        -17.841567039489746
      ]
    ],
    "predicted_parse_with_values": "SELECT Continent FROM country WHERE IndepYear > 1950",
    "predicted_parse": "SELECT Continent FROM country WHERE IndepYear > value",
    "predicted_parse_explanation": [
      "find the continent in country table whose indepdent year greater than 1950"
    ],
    "template_feedback": "find name in place of continent .",
    "primary_span": [
      [
        0,
        1
      ]
    ],
    "secondary_span": [
      [
        2,
        6
      ]
    ],
    "edits": [
      "name",
      "continent"
    ],
    "edits_original": "< select > add name </ select > < select > remove continent </ select >"
  },
  {
    "db_id": "orchestra",
    "feedback": "In step 1 , you need to find Id of orchestra from table of performance.",
    "question": "What are years of founding for orchestras that have had more than a single performance?",
    "gold_parse": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1",
    "beam": [
      [
        "SELECT Year_of_Founded FROM orchestra GROUP BY Year_of_Founded HAVING Count ( * ) > value",
        -0.34111595153808594
      ],
      [
        "SELECT T1.Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID GROUP BY T2.Official_ratings_(millions) HAVING Count ( * ) > value",
        -1.706322193145752
      ],
      [
        "SELECT T2.Year_of_Founded FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T1.Nationality HAVING Count ( * ) > value",
        -3.140362024307251
      ],
      [
        "SELECT Year_of_Founded FROM orchestra GROUP BY Record_Company HAVING Count ( * ) > value",
        -3.8241724967956543
      ],
      [
        "SELECT T1.Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING Count ( * ) > value",
        -4.369881629943848
      ],
      [
        "SELECT T1.Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID GROUP BY T2.Date HAVING Count ( * ) > value",
        -4.9064531326293945
      ],
      [
        "SELECT T1.Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID JOIN show AS T3 ON T2.Performance_ID = T3.Performance_ID GROUP BY T3.Result HAVING Count ( * ) > value",
        -4.968257427215576
      ],
      [
        "SELECT T1.Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID JOIN show AS T3 ON T2.Performance_ID = T3.Performance_ID WHERE T3.Attendance > value",
        -5.218719959259033
      ],
      [
        "SELECT Year_of_Founded FROM orchestra GROUP BY Conductor_ID HAVING Count ( * ) > value",
        -5.47503662109375
      ],
      [
        "SELECT Year_of_Founded FROM orchestra GROUP BY Major_Record_Format HAVING Count ( * ) > value",
        -6.878458023071289
      ],
      [
        "SELECT T1.Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID GROUP BY T2.Performance_ID HAVING Count ( * ) > value",
        -7.007451057434082
      ],
      [
        "SELECT T1.Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID JOIN show AS T3 ON T2.Performance_ID = T3.Performance_ID GROUP BY T3.Performance_ID HAVING Count ( * ) > value",
        -7.0752058029174805
      ],
      [
        "SELECT T1.Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID GROUP BY T2.Type HAVING Count ( * ) > value",
        -7.509363174438477
      ],
      [
        "SELECT T1.Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID JOIN show AS T3 ON T2.Performance_ID = T3.Performance_ID GROUP BY T3.Attendance HAVING Count ( * ) > value",
        -7.735261917114258
      ],
      [
        "SELECT T1.Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID GROUP BY T2.Share HAVING Count ( * ) > value",
        -7.8990373611450195
      ],
      [
        "SELECT T1.Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID GROUP BY T2.Weekly_rank HAVING Count ( * ) > value",
        -7.925105571746826
      ],
      [
        "SELECT Year_of_Founded FROM orchestra GROUP BY Orchestra HAVING Count ( * ) > value",
        -8.057650566101074
      ],
      [
        "SELECT T2.Year_of_Founded FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T1.Year_of_Work HAVING Count ( * ) > value",
        -8.809466361999512
      ],
      [
        "SELECT Year_of_Founded FROM orchestra",
        -10.902145385742188
      ],
      [
        "SELECT DISTINCT Year_of_Founded FROM orchestra",
        -15.407172203063965
      ]
    ],
    "predicted_parse_with_values": "SELECT Year_of_Founded FROM orchestra GROUP BY Year_of_Founded HAVING Count ( * ) > 1",
    "predicted_parse": "SELECT Year_of_Founded FROM orchestra GROUP BY Year_of_Founded HAVING Count ( * ) > value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of year of founded in orchestra table",
      "Step 2: find the year of founded in orchestra table whose corresponding value in step 1 is greater than 1"
    ],
    "template_feedback": "in step 1 , additionally use the information from the performance table besides the orchestra table . find for value of performance 's orchestra id in place of year of founded .",
    "primary_span": [
      [
        4,
        11
      ],
      [
        17,
        24
      ]
    ],
    "secondary_span": [
      [
        12,
        16
      ],
      [
        25,
        31
      ]
    ],
    "edits": [
      "performance",
      "orchestra id",
      "year of founded"
    ],
    "edits_original": "< from > add performance </ from > < groupBy > add orchestra id </ groupBy > < groupBy > remove year of founded </ groupBy >"
  },
  {
    "db_id": "real_estate_properties",
    "feedback": "You need to use feature types in place of feature.",
    "question": "How many available features are there in total?",
    "gold_parse": "SELECT count(*) FROM Other_Available_Features",
    "beam": [
      [
        "SELECT Count ( * ) FROM Ref_Feature_Types",
        -4.1961669921875e-05
      ],
      [
        "SELECT Sum ( * ) FROM Ref_Feature_Types",
        -10.467498004436493
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM Ref_Feature_Types",
        -13.353958129882812
      ],
      [
        "SELECT Count ( * ) , feature_name FROM Other_Available_Features",
        -14.455321550369263
      ],
      [
        "SELECT Count ( * ) FROM Ref_Feature_Types GROUP BY *",
        -14.51349025964737
      ],
      [
        "SELECT Avg ( * ) FROM Ref_Feature_Types",
        -14.711453676223755
      ],
      [
        "SELECT Count ( * ) FROM Other_Available_Features WHERE feature_name = value",
        -14.74610048532486
      ],
      [
        "SELECT Count ( Count ( * ) ) FROM Ref_Feature_Types",
        -14.8526029586792
      ],
      [
        "SELECT Count ( * ) , shp_feature_1 FROM Properties",
        -14.99008560180664
      ],
      [
        "SELECT Count ( * ) , feature_type_name FROM Ref_Feature_Types",
        -15.095819473266602
      ],
      [
        "SELECT Sum ( shp_feature_1 ) FROM Properties",
        -15.8223237991333
      ],
      [
        "SELECT Sum ( shp_feature_2 ) FROM Properties",
        -16.03023910522461
      ],
      [
        "SELECT Count ( Avg ( * ) ) FROM Ref_Feature_Types",
        -16.249998092651367
      ],
      [
        "SELECT Max ( * ) FROM Ref_Feature_Types",
        -16.27239203453064
      ],
      [
        "SELECT Sum ( shp_feature_3 ) FROM Properties",
        -16.273423671722412
      ],
      [
        "SELECT Sum ( room_count ) FROM Properties",
        -16.451940536499023
      ],
      [
        "SELECT Sum ( feature_description ) FROM Other_Available_Features",
        -16.484993934631348
      ],
      [
        "SELECT Count ( * ) FROM Properties ORDER BY shp_feature_2 Desc",
        -16.49053716659546
      ],
      [
        "SELECT Sum ( oth_feature_2 ) FROM Properties",
        -16.52048110961914
      ],
      [
        "SELECT Sum ( oth_feature_1 ) FROM Properties",
        -16.55971908569336
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM Ref_Feature_Types",
    "predicted_parse": "SELECT Count ( * ) FROM Ref_Feature_Types",
    "predicted_parse_explanation": [
      "find the number of rows in reference feature types table"
    ],
    "template_feedback": "use other available features table in place of reference feature types table .",
    "primary_span": [
      [
        0,
        4
      ]
    ],
    "secondary_span": [
      [
        5,
        12
      ]
    ],
    "edits": [
      "other available features",
      "reference feature types"
    ],
    "edits_original": "< from > add other available features </ from > < from > remove reference feature types </ from >"
  },
  {
    "db_id": "tvshow",
    "feedback": "Change content with id In step 1 and content , written by with Cartoon's id , directed by In step 3.",
    "question": "find the id of tv channels that do not play any cartoon directed by Ben Jones.",
    "gold_parse": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'",
    "beam": [
      [
        "SELECT T1.Content FROM TV_Channel AS T1 EXCEPT SELECT T1.Content FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value",
        -0.6904993057250977
      ],
      [
        "SELECT T1.Content FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value EXCEPT SELECT T1.Content FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value",
        -0.9712400436401367
      ],
      [
        "SELECT T1.Content FROM TV_Channel AS T1 EXCEPT SELECT T1.Content FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = value",
        -3.2343673706054688
      ],
      [
        "SELECT T1.Content FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value EXCEPT SELECT T1.Content FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = value",
        -3.440153121948242
      ],
      [
        "SELECT T1.Content FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value EXCEPT SELECT T3.Channel FROM TV_Channel AS T1 JOIN TV_series AS T3 ON T3.Channel = T1.id JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value",
        -3.8782291412353516
      ],
      [
        "SELECT T1.Content FROM TV_Channel AS T1 EXCEPT SELECT T2.Channel FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T2.Channel = T1.id JOIN Cartoon AS T3 ON T1.id = T3.Channel WHERE T3.Written_by = value",
        -4.269513130187988
      ],
      [
        "SELECT T1.Content FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = value EXCEPT SELECT T1.Content FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value",
        -5.39076042175293
      ],
      [
        "SELECT T1.Content FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value EXCEPT SELECT T3.Channel FROM TV_Channel AS T1 JOIN TV_series AS T3 ON T3.Channel = T1.id JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = value",
        -5.946662902832031
      ],
      [
        "SELECT T1.Content FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by ! = value",
        -5.984813690185547
      ],
      [
        "SELECT T1.Content FROM TV_Channel AS T1 EXCEPT SELECT T2.Channel FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T2.Channel = T1.id JOIN Cartoon AS T3 ON T1.id = T3.Channel WHERE T3.Directed_by = value",
        -6.5157623291015625
      ],
      [
        "SELECT T1.Content FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value AND T2.Directed_by = value",
        -7.830265045166016
      ],
      [
        "SELECT T1.Content FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = value EXCEPT SELECT T1.Content FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = value",
        -7.856314659118652
      ],
      [
        "SELECT T1.Content FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value AND T2.Written_by = value",
        -8.816630840301514
      ],
      [
        "SELECT T1.Content FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value",
        -9.19374942779541
      ],
      [
        "SELECT T1.Content FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value ORDER BY T1.Content Asc",
        -9.341815948486328
      ],
      [
        "SELECT T1.Content FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by ! = value",
        -9.967601776123047
      ],
      [
        "SELECT T1.Content FROM TV_Channel AS T1 EXCEPT SELECT T1.Content FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = value",
        -10.324687004089355
      ],
      [
        "SELECT Content FROM TV_Channel EXCEPT SELECT Content FROM TV_Channel WHERE Language = value",
        -10.538430213928223
      ],
      [
        "SELECT T1.Content FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by ! = value ORDER BY T1.Content Asc",
        -10.61376667022705
      ],
      [
        "SELECT T1.Content FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel JOIN Cartoon AS T3 ON T1.id = T3.Channel WHERE T3.Written_by = value AND T2.Rating = value",
        -10.92482614517212
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.Content FROM TV_Channel AS T1 EXCEPT SELECT T1.Content FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = \"Ben Jones\"",
    "predicted_parse": "SELECT T1.Content FROM TV_Channel AS T1 EXCEPT SELECT T1.Content FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value",
    "predicted_parse_explanation": [
      "Step 1: find the content in tv channel table",
      "Step 2: for each row in tv channel table , find the corresponding rows in cartoon table",
      "Step 3: find the content of the results of step 2 whose written by equals Ben Jones",
      "Step 4: show the rows that are in the results of step 1 but not in the results of step 3"
    ],
    "template_feedback": "in step 1 , find id in place of content . in step 2 , do not use the tv channel table . in step 3 , consider the directed by equals Ben Jones conditions in place of the written by equals Ben Jones conditions . find channel in place of content .",
    "primary_span": [
      [
        4,
        5
      ],
      [
        15,
        22
      ],
      [
        27,
        34
      ],
      [
        46,
        47
      ]
    ],
    "secondary_span": [
      [
        6,
        10
      ],
      [
        15,
        22
      ],
      [
        35,
        45
      ],
      [
        48,
        52
      ]
    ],
    "edits": [
      "id",
      "content",
      "channel",
      "content",
      "tv channel",
      "directed by equals \"Ben Jones\"",
      "written by equals \"Ben Jones\""
    ],
    "edits_original": "< select > add id </ select > < select > remove content </ select > < select > add channel </ select > < select > remove content </ select > < from > remove tv channel </ from > < where > add directed by equals \" Ben Jones \" </ where > < where > remove written by equals \" Ben Jones \" </ where >"
  },
  {
    "db_id": "student_transcripts_tracking",
    "feedback": "In step 1, you should use the degree program and in step 2 and 3 you should use the degree's summary name.",
    "question": "What is the id of the semester that had both Masters and Bachelors students enrolled?",
    "gold_parse": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'",
    "beam": [
      [
        "SELECT T2.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id WHERE T1.semester_name = value INTERSECT SELECT T2.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id WHERE T1.semester_name = value",
        -0.5347251892089844
      ],
      [
        "SELECT T2.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id WHERE T1.semester_name = value INTERSECT SELECT T2.semester_id FROM Degree_Programs AS T3 JOIN Student_Enrolment AS T2 ON T3.degree_program_id = T2.degree_program_id WHERE T3.degree_summary_name = value",
        -1.1673965454101562
      ],
      [
        "SELECT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE T1.degree_summary_name = value INTERSECT SELECT T2.semester_id FROM Semesters AS T3 JOIN Student_Enrolment AS T2 ON T3.semester_id = T2.semester_id WHERE T3.semester_name = value",
        -3.1370162963867188
      ],
      [
        "SELECT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE T1.degree_summary_name = value INTERSECT SELECT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE T1.degree_summary_name = value",
        -3.7638587951660156
      ],
      [
        "SELECT T2.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id WHERE T1.semester_name = value INTERSECT SELECT T2.semester_id FROM Courses AS T3 JOIN Student_Enrolment AS T2 JOIN Student_Enrolment_Courses AS T4 ON T3.course_id = T4.course_id AND T4.student_enrolment_id = T2.student_enrolment_id WHERE T3.course_name = value",
        -4.5574445724487305
      ],
      [
        "SELECT T2.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id WHERE T1.semester_name = value INTERSECT SELECT T2.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id WHERE T1.semester_description = value",
        -5.113242149353027
      ],
      [
        "SELECT T2.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id WHERE T1.semester_description = value INTERSECT SELECT T2.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id WHERE T1.semester_name = value",
        -5.220192909240723
      ],
      [
        "SELECT T2.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id WHERE T1.semester_description = value INTERSECT SELECT T2.semester_id FROM Degree_Programs AS T3 JOIN Student_Enrolment AS T2 ON T3.degree_program_id = T2.degree_program_id WHERE T3.degree_summary_name = value",
        -5.857357978820801
      ],
      [
        "SELECT T1.semester_id FROM Semesters AS T1 WHERE T1.semester_name = value INTERSECT SELECT T2.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id WHERE T1.semester_name = value",
        -5.942670822143555
      ],
      [
        "SELECT T2.semester_id FROM Courses AS T1 JOIN Student_Enrolment AS T2 JOIN Student_Enrolment_Courses AS T3 ON T1.course_id = T3.course_id AND T3.student_enrolment_id = T2.student_enrolment_id WHERE T1.course_name = value INTERSECT SELECT T2.semester_id FROM Semesters AS T4 JOIN Student_Enrolment AS T2 ON T4.semester_id = T2.semester_id WHERE T4.semester_name = value",
        -6.367987632751465
      ],
      [
        "SELECT T2.student_enrolment_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id WHERE T1.semester_name = value INTERSECT SELECT T2.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id WHERE T1.semester_name = value",
        -6.504687309265137
      ],
      [
        "SELECT T1.semester_id FROM Semesters AS T1 WHERE T1.semester_name = value INTERSECT SELECT T3.semester_id FROM Degree_Programs AS T2 JOIN Student_Enrolment AS T3 ON T2.degree_program_id = T3.degree_program_id WHERE T2.degree_summary_name = value",
        -6.574084281921387
      ],
      [
        "SELECT T2.semester_id FROM Courses AS T1 JOIN Student_Enrolment AS T2 JOIN Student_Enrolment_Courses AS T3 ON T1.course_id = T3.course_id AND T3.student_enrolment_id = T2.student_enrolment_id WHERE T1.course_name = value INTERSECT SELECT T2.semester_id FROM Degree_Programs AS T4 JOIN Student_Enrolment AS T2 ON T4.degree_program_id = T2.degree_program_id WHERE T4.degree_summary_name = value",
        -7.017488479614258
      ],
      [
        "SELECT T2.student_enrolment_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id WHERE T1.semester_name = value INTERSECT SELECT T2.semester_id FROM Degree_Programs AS T3 JOIN Student_Enrolment AS T2 ON T3.degree_program_id = T2.degree_program_id WHERE T3.degree_summary_name = value",
        -7.137783050537109
      ],
      [
        "SELECT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE T1.degree_summary_name = value INTERSECT SELECT T2.semester_id FROM Courses AS T3 JOIN Student_Enrolment AS T2 JOIN Student_Enrolment_Courses AS T4 ON T3.course_id = T4.course_id AND T4.student_enrolment_id = T2.student_enrolment_id WHERE T3.course_name = value",
        -7.157931327819824
      ],
      [
        "SELECT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE T1.degree_summary_name = value INTERSECT SELECT T2.semester_id FROM Semesters AS T3 JOIN Student_Enrolment AS T2 ON T3.semester_id = T2.semester_id WHERE T3.semester_description = value",
        -7.718059539794922
      ],
      [
        "SELECT T2.student_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id WHERE T1.semester_name = value INTERSECT SELECT T2.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id WHERE T1.semester_name = value",
        -8.466431140899658
      ],
      [
        "SELECT T2.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id WHERE T1.semester_name = value INTERSECT SELECT T2.semester_id FROM Students AS T3 JOIN Student_Enrolment AS T2 ON T3.student_id = T2.student_id WHERE T3.middle_name = value",
        -8.561739921569824
      ],
      [
        "SELECT T2.student_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id WHERE T1.semester_name = value INTERSECT SELECT T2.semester_id FROM Degree_Programs AS T3 JOIN Student_Enrolment AS T2 ON T3.degree_program_id = T2.degree_program_id WHERE T3.degree_summary_name = value",
        -9.099241733551025
      ],
      [
        "SELECT T2.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id WHERE T1.semester_description = value INTERSECT SELECT T2.semester_id FROM Courses AS T3 JOIN Student_Enrolment AS T2 JOIN Student_Enrolment_Courses AS T4 ON T3.course_id = T4.course_id AND T4.student_enrolment_id = T2.student_enrolment_id WHERE T3.course_name = value",
        -9.24792194366455
      ]
    ],
    "predicted_parse_with_values": "SELECT T2.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id WHERE T1.semester_name = \"Master\" INTERSECT SELECT T2.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id WHERE T1.semester_name = \"Bachelor\"",
    "predicted_parse": "SELECT T2.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id WHERE T1.semester_name = value INTERSECT SELECT T2.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id WHERE T1.semester_name = value",
    "predicted_parse_explanation": [
      "Step 1: for each row in semesters table , find the corresponding rows in student enrolment table",
      "Step 2: find the student enrolment 's semester id of the results of step 1 whose semester name equals Master",
      "Step 3: for each row in semesters table , find the corresponding rows in student enrolment table",
      "Step 4: find the student enrolment 's semester id of the results of step 3 whose semester name equals Bachelor",
      "Step 5: show the rows that are in both the results of step 2 and step 4"
    ],
    "template_feedback": "in step 1 , use degree programs table in place of semesters table in step 2 , consider the degree summary name equals Master conditions in place of the semester name equals Master conditions . make sure no repetition in the results . in step 3 , use degree programs table in place of semesters table in step 4 , consider the degree summary name equals Bachelor conditions in place of the semester name equals Bachelor conditions . make sure no repetition in the results .",
    "primary_span": [
      [
        4,
        7
      ],
      [
        17,
        24
      ],
      [
        35,
        42
      ],
      [
        47,
        50
      ],
      [
        60,
        67
      ],
      [
        78,
        85
      ]
    ],
    "secondary_span": [
      [
        8,
        12
      ],
      [
        25,
        34
      ],
      [
        51,
        55
      ],
      [
        68,
        77
      ]
    ],
    "edits": [
      "distinct",
      "degree programs",
      "semesters",
      "degree summary name equals \"Master\"",
      "semester name equals \"Master\"",
      "distinct",
      "degree programs",
      "semesters",
      "degree summary name equals \"Bachelor\"",
      "semester name equals \"Bachelor\""
    ],
    "edits_original": "< select > add distinct </ select > < from > add degree programs </ from > < from > remove semesters </ from > < where > add degree summary name equals \" Master \" </ where > < where > remove semester name equals \" Master \" </ where > < select > add distinct </ select > < from > add degree programs </ from > < from > remove semesters </ from > < where > add degree summary name equals \" Bachelor \" </ where > < where > remove semester name equals \" Bachelor \" </ where >"
  },
  {
    "db_id": "concert_singer",
    "feedback": "Ensure to find number of the corresponding rows to each value of singer in concert's singer id .",
    "question": "What are the names of the singers and number of concerts for each person?",
    "gold_parse": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id",
    "beam": [
      [
        "SELECT Name , Count ( * ) FROM singer GROUP BY Name",
        -0.13074731826782227
      ],
      [
        "SELECT T1.Name , Count ( * ) FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T2.Singer_ID",
        -2.1764774322509766
      ],
      [
        "SELECT Name , Count ( * ) FROM singer GROUP BY Song_Name",
        -5.391200065612793
      ],
      [
        "SELECT T1.Name , Count ( * ) FROM singer AS T1 JOIN concert AS T2 JOIN singer_in_concert AS T3 ON T1.Singer_ID = T3.Singer_ID AND T3.concert_ID = T2.concert_ID GROUP BY T2.concert_Name",
        -5.757654190063477
      ],
      [
        "SELECT T1.Name , Count ( * ) FROM singer AS T1 JOIN concert AS T2 JOIN singer_in_concert AS T3 ON T1.Singer_ID = T3.Singer_ID AND T3.concert_ID = T2.concert_ID GROUP BY T2.Stadium_ID",
        -7.033933162689209
      ],
      [
        "SELECT Name , Count ( * ) FROM singer GROUP BY Singer_ID",
        -8.156862258911133
      ],
      [
        "SELECT Name , Count ( * ) FROM singer GROUP BY *",
        -9.316569328308105
      ],
      [
        "SELECT Song_Name , Count ( * ) FROM singer GROUP BY Name",
        -9.747067928314209
      ],
      [
        "SELECT T1.Name , Count ( * ) FROM singer AS T1 JOIN concert AS T2 JOIN singer_in_concert AS T3 ON T1.Singer_ID = T3.Singer_ID AND T3.concert_ID = T2.concert_ID GROUP BY T2.Year",
        -10.908379554748535
      ],
      [
        "SELECT Name , Count ( * ) FROM singer GROUP BY Country",
        -11.249245643615723
      ],
      [
        "SELECT T1.Name , Count ( * ) FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T2.concert_ID",
        -11.419291496276855
      ],
      [
        "SELECT T1.Song_Name , Count ( * ) FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T2.Singer_ID",
        -11.768497467041016
      ],
      [
        "SELECT Name , Sum ( * ) FROM singer GROUP BY Name",
        -12.489390969276428
      ],
      [
        "SELECT T1.Name , Count ( * ) FROM singer AS T1 JOIN concert AS T2 JOIN singer_in_concert AS T3 ON T1.Singer_ID = T3.Singer_ID AND T3.concert_ID = T2.concert_ID GROUP BY T2.concert_ID",
        -12.534808158874512
      ],
      [
        "SELECT T1.Name , Sum ( T2.concert_Name ) FROM singer AS T1 JOIN concert AS T2 JOIN singer_in_concert AS T3 ON T1.Singer_ID = T3.Singer_ID AND T3.concert_ID = T2.concert_ID GROUP BY T1.Name",
        -12.705938935279846
      ],
      [
        "SELECT Name , Count ( * ) FROM singer GROUP BY Is_male",
        -12.723822593688965
      ],
      [
        "SELECT Name , Count ( * ) FROM singer",
        -12.886332511901855
      ],
      [
        "SELECT T2.Name , Count ( * ) FROM stadium AS T1 JOIN singer AS T2 JOIN concert AS T3 ON T1.Stadium_ID = T3.Stadium_ID JOIN singer_in_concert AS T4 ON T3.concert_ID = T4.concert_ID AND T4.Singer_ID = T2.Singer_ID GROUP BY T1.Stadium_ID",
        -12.998092651367188
      ],
      [
        "SELECT T1.Name , Count ( * ) , T2.concert_Name FROM singer AS T1 JOIN concert AS T2 JOIN singer_in_concert AS T3 ON T1.Singer_ID = T3.Singer_ID AND T3.concert_ID = T2.concert_ID AND T1.Singer_ID = T3.Singer_ID GROUP BY T3.Singer_ID",
        -13.154497385025024
      ],
      [
        "SELECT Name FROM singer GROUP BY Name",
        -13.313172340393066
      ]
    ],
    "predicted_parse_with_values": "SELECT Name , Count ( * ) FROM singer GROUP BY Name",
    "predicted_parse": "SELECT Name , Count ( * ) FROM singer GROUP BY Name",
    "predicted_parse_explanation": [
      "find each value of name in singer table along with the number of the corresponding rows to each value"
    ],
    "template_feedback": "additionally use the information from the singer in concert table besides the singer table . find for each value of singer 's singer id in place of name .",
    "primary_span": [
      [
        0,
        9
      ],
      [
        15,
        23
      ]
    ],
    "secondary_span": [
      [
        10,
        14
      ],
      [
        24,
        28
      ]
    ],
    "edits": [
      "singer in concert",
      "singer id",
      "name"
    ],
    "edits_original": "< from > add singer in concert </ from > < groupBy > add singer id </ groupBy > < groupBy > remove name </ groupBy >"
  },
  {
    "db_id": "world_1",
    "feedback": "give me the total of population having language other than english.",
    "question": "How many people live in countries that do not speak English?",
    "gold_parse": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")",
    "beam": [
      [
        "SELECT T1.Population FROM country AS T1 WHERE T1.Continent NOT IN ( SELECT T2.CountryCode FROM countrylanguage AS T2 WHERE T2.Language = value )",
        -0.6485443115234375
      ],
      [
        "SELECT Count ( DISTINCT T1.Population ) FROM country AS T1 WHERE T1.Continent NOT IN ( SELECT T2.CountryCode FROM countrylanguage AS T2 WHERE T2.Language = value )",
        -1.3289923667907715
      ],
      [
        "SELECT Sum ( T1.Population ) FROM country AS T1 WHERE T1.Continent NOT IN ( SELECT T2.CountryCode FROM countrylanguage AS T2 WHERE T2.Language = value )",
        -2.2929258346557617
      ],
      [
        "SELECT Count ( T1.Population ) FROM country AS T1 WHERE T1.Continent NOT IN ( SELECT T2.CountryCode FROM countrylanguage AS T2 WHERE T2.Language = value )",
        -2.6744332313537598
      ],
      [
        "SELECT T1.Population FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language ! = value",
        -4.235491752624512
      ],
      [
        "SELECT Count ( * ) FROM country AS T1 WHERE T1.Continent NOT IN ( SELECT T2.CountryCode FROM countrylanguage AS T2 WHERE T2.Language = value )",
        -5.053483963012695
      ],
      [
        "SELECT T1.Population FROM country AS T1 WHERE T1.Continent NOT IN ( SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value )",
        -5.63154411315918
      ],
      [
        "SELECT Sum ( T1.Population ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language ! = value",
        -5.661734580993652
      ],
      [
        "SELECT Max ( T1.Population ) FROM country AS T1 WHERE T1.Continent NOT IN ( SELECT T2.CountryCode FROM countrylanguage AS T2 WHERE T2.Language = value )",
        -6.0105509757995605
      ],
      [
        "SELECT Population FROM country WHERE Continent ! = value",
        -6.128052711486816
      ],
      [
        "SELECT Count ( DISTINCT T1.Population ) FROM country AS T1 WHERE T1.Continent NOT IN ( SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value )",
        -6.258474826812744
      ],
      [
        "SELECT Sum ( Population ) FROM country WHERE Continent ! = value",
        -7.720218658447266
      ],
      [
        "SELECT Max ( T1.Population ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language ! = value",
        -7.927473545074463
      ],
      [
        "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language ! = value",
        -7.96333122253418
      ],
      [
        "SELECT Count ( DISTINCT T1.Population ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language ! = value",
        -7.977274417877197
      ],
      [
        "SELECT Count ( T1.Population ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language ! = value",
        -8.230464458465576
      ],
      [
        "SELECT Population FROM country WHERE Name ! = value",
        -8.250205993652344
      ],
      [
        "SELECT Count ( DISTINCT Population ) FROM country WHERE Continent ! = value",
        -8.89933156967163
      ],
      [
        "SELECT Count ( Population ) FROM country WHERE Continent ! = value",
        -9.086328029632568
      ],
      [
        "SELECT Max ( Population ) FROM country WHERE Continent ! = value",
        -9.839186191558838
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.Population FROM country AS T1 WHERE T1.Continent NOT IN ( SELECT T2.CountryCode FROM countrylanguage AS T2 WHERE T2.Language = \"English\" )",
    "predicted_parse": "SELECT T1.Population FROM country AS T1 WHERE T1.Continent NOT IN ( SELECT T2.CountryCode FROM countrylanguage AS T2 WHERE T2.Language = value )",
    "predicted_parse_explanation": [
      "Step 1: find the countrycode in countrylanguage table whose language equals English",
      "Step 2: find the population in country table whose continent not one of the results of step 1"
    ],
    "template_feedback": "in step 1 , additionally use the information from the country table besides the countrylanguage table . find name in place of countrycode . in step 2 , make sure the name is not one of the results of step 1 the continent is not one of the results of step 1 . find summation of population in place of population .",
    "primary_span": [
      [
        4,
        11
      ],
      [
        17,
        18
      ],
      [
        28,
        40
      ],
      [
        53,
        56
      ]
    ],
    "secondary_span": [
      [
        12,
        16
      ],
      [
        19,
        23
      ],
      [
        41,
        52
      ],
      [
        57,
        61
      ]
    ],
    "edits": [
      "summation of population",
      "population",
      "name not one of SUBS1",
      "continent not one of SUBS1",
      "name",
      "countrycode",
      "country"
    ],
    "edits_original": "< select > add summation of population </ select > < select > remove population </ select > < where > add name not one of SUBS1 </ where > < where > remove continent not one of SUBS1 </ where > < select > add name </ select > < select > remove countrycode </ select > < from > add country </ from >"
  },
  {
    "db_id": "pets_1",
    "feedback": "Replace age with pet age .",
    "question": "Find the last name of the student who has a cat that is age 3.",
    "gold_parse": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'",
    "beam": [
      [
        "SELECT LName FROM Student WHERE Age = value",
        -7.62939453125e-05
      ],
      [
        "SELECT T1.LName FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.pet_age = value",
        -9.988914489746094
      ],
      [
        "SELECT LName FROM Student WHERE Age LIKE value",
        -10.537936210632324
      ],
      [
        "SELECT T1.LName FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.weight = value",
        -12.684037208557129
      ],
      [
        "SELECT LName , Age FROM Student WHERE Age = value",
        -14.299424171447754
      ],
      [
        "SELECT DISTINCT LName FROM Student WHERE Age = value",
        -14.571815490722656
      ],
      [
        "SELECT DISTINCT LName FROM Student WHERE Age = value",
        -15.809048652648926
      ],
      [
        "SELECT LName FROM Student WHERE Age < value",
        -15.902286529541016
      ],
      [
        "SELECT LName FROM Student WHERE Age = value AND Age = value",
        -16.551383018493652
      ],
      [
        "SELECT LName FROM Student WHERE Age = ( SELECT Max ( Age ) FROM Student WHERE Age = value )",
        -16.570073127746582
      ],
      [
        "SELECT LName FROM Student WHERE Age = value LIMIT value",
        -16.993858337402344
      ],
      [
        "SELECT Count ( DISTINCT LName ) FROM Student WHERE Age = value",
        -17.218530654907227
      ],
      [
        "SELECT LName FROM Student WHERE Age = value INTERSECT SELECT LName FROM Student WHERE Age = value",
        -17.276994705200195
      ],
      [
        "SELECT LName FROM Student WHERE DISTINCT Age = value",
        -17.330236434936523
      ],
      [
        "SELECT T1.LName FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T1.Age = value AND T3.pet_age = value",
        -17.451942443847656
      ],
      [
        "SELECT LName FROM Student WHERE Age ! = value",
        -17.900272369384766
      ],
      [
        "SELECT LName FROM Student WHERE Age > value",
        -18.138397216796875
      ],
      [
        "SELECT LName FROM Student WHERE StuID IN ( SELECT LName FROM Student WHERE Age = value )",
        -18.32646894454956
      ],
      [
        "SELECT LName FROM Student WHERE Age = value GROUP BY LName",
        -18.672175407409668
      ],
      [
        "SELECT LName FROM Student",
        -18.688387870788574
      ]
    ],
    "predicted_parse_with_values": "SELECT LName FROM Student WHERE Age = 3",
    "predicted_parse": "SELECT LName FROM Student WHERE Age = value",
    "predicted_parse_explanation": [
      "find the last name in student table whose age equals 3"
    ],
    "template_feedback": "additionally use the information from the has pet table and pets table besides the student table . consider the pet age equals 3 and pet type equals cat conditions in place of the age equals 3 conditions .",
    "primary_span": [
      [
        0,
        11
      ],
      [
        17,
        28
      ]
    ],
    "secondary_span": [
      [
        12,
        16
      ],
      [
        29,
        37
      ]
    ],
    "edits": [
      "has pet",
      "pets",
      "pet age equals 3",
      "pet type equals \"cat\"",
      "age equals 3"
    ],
    "edits_original": "< from > add has pet </ from > < from > add pets </ from > < where > add pet age equals 3 </ where > < where > add pet type equals \" cat \" </ where > < where > remove age equals 3 </ where >"
  },
  {
    "db_id": "network_1",
    "feedback": "You should delete the phrase \"for which grade equals 9 \".",
    "question": "Show all the grades of the high schoolers.",
    "gold_parse": "SELECT grade FROM Highschooler",
    "beam": [
      [
        "SELECT DISTINCT grade FROM Highschooler WHERE grade = value",
        -0.062430381774902344
      ],
      [
        "SELECT grade FROM Highschooler WHERE grade = value",
        -2.972323417663574
      ],
      [
        "SELECT DISTINCT grade FROM Highschooler",
        -4.691134452819824
      ],
      [
        "SELECT DISTINCT grade FROM Highschooler WHERE name = value",
        -9.850924491882324
      ],
      [
        "SELECT DISTINCT grade FROM Highschooler WHERE name = grade",
        -10.000656127929688
      ],
      [
        "SELECT DISTINCT grade FROM Highschooler WHERE grade ! = value",
        -11.244850158691406
      ],
      [
        "SELECT grade FROM Highschooler",
        -11.291451930999756
      ],
      [
        "SELECT DISTINCT grade FROM Highschooler ORDER BY grade Asc LIMIT value",
        -12.049426078796387
      ],
      [
        "SELECT DISTINCT grade FROM Highschooler EXCEPT SELECT grade FROM Highschooler",
        -12.357239246368408
      ],
      [
        "SELECT DISTINCT grade FROM Highschooler WHERE grade > value",
        -12.511823654174805
      ],
      [
        "SELECT grade FROM Highschooler WHERE name = value",
        -12.766712188720703
      ],
      [
        "SELECT DISTINCT grade FROM Highschooler WHERE grade = grade",
        -12.807024955749512
      ],
      [
        "SELECT grade FROM Highschooler ORDER BY grade Asc LIMIT value",
        -12.840042114257812
      ],
      [
        "SELECT grade FROM Highschooler WHERE name = grade",
        -12.93506145477295
      ],
      [
        "SELECT DISTINCT grade FROM Highschooler WHERE grade < value",
        -13.394548416137695
      ],
      [
        "SELECT DISTINCT grade FROM Highschooler ORDER BY grade Asc",
        -13.641380310058594
      ],
      [
        "SELECT DISTINCT grade FROM Highschooler ORDER BY grade Desc LIMIT value",
        -13.771417617797852
      ],
      [
        "SELECT grade FROM Highschooler WHERE grade ! = value",
        -14.262632369995117
      ],
      [
        "SELECT grade FROM Highschooler ORDER BY grade Asc",
        -14.422875881195068
      ],
      [
        "SELECT DISTINCT T1.grade FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id WHERE T2.student_id = T1.grade",
        -14.505309104919434
      ]
    ],
    "predicted_parse_with_values": "SELECT DISTINCT grade FROM Highschooler WHERE grade = 9",
    "predicted_parse": "SELECT DISTINCT grade FROM Highschooler WHERE grade = value",
    "predicted_parse_explanation": [
      "find without repetition grade in high schooler table whose grade equals 9"
    ],
    "template_feedback": "remove the grade equals 9 conditions . permit repetitions in the results .",
    "primary_span": [
      [
        0,
        6
      ],
      [
        7,
        12
      ]
    ],
    "secondary_span": [],
    "edits": [
      "distinct",
      "grade equals 9"
    ],
    "edits_original": "< select > remove distinct </ select > < where > remove grade equals 9 </ where >"
  },
  {
    "db_id": "car_1",
    "feedback": "model id is wrong in step 3 , find car makers's id in place of that .",
    "question": "What are the names and ids of all makers with more than 3 models?",
    "gold_parse": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3",
    "beam": [
      [
        "SELECT T1.FullName , T2.ModelId FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T2.ModelId HAVING Count ( * ) > value",
        -0.6651675701141357
      ],
      [
        "SELECT T1.FullName , T2.ModelId FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker AND T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id GROUP BY T4.Id HAVING Count ( * ) > value",
        -1.424591064453125
      ],
      [
        "SELECT T1.FullName , T1.Id FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T2.ModelId HAVING Count ( * ) > value",
        -2.2272047996520996
      ],
      [
        "SELECT T1.FullName , T1.Id FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id GROUP BY T4.Id HAVING Count ( * ) > value",
        -2.661998987197876
      ],
      [
        "SELECT T1.FullName , T2.ModelId FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id HAVING Count ( * ) > value",
        -3.9193367958068848
      ],
      [
        "SELECT FullName , Id FROM car_makers GROUP BY Id HAVING Count ( * ) > value",
        -3.931089401245117
      ],
      [
        "SELECT T1.FullName , T2.ModelId FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T2.Maker HAVING Count ( * ) > value",
        -4.802694797515869
      ],
      [
        "SELECT T1.FullName , T4.Id FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker AND T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id GROUP BY T2.ModelId HAVING Count ( * ) > value",
        -5.3282389640808105
      ],
      [
        "SELECT T1.FullName , T4.Id FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id GROUP BY T4.Id HAVING Count ( * ) > value",
        -5.7000651359558105
      ],
      [
        "SELECT T1.FullName , T1.Id FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T2.Maker HAVING Count ( * ) > value",
        -6.396179676055908
      ],
      [
        "SELECT T1.FullName , T2.ModelId FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker AND T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model GROUP BY T3.MakeId HAVING Count ( * ) > value",
        -6.502648830413818
      ],
      [
        "SELECT T1.FullName , T4.Id FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id GROUP BY T1.Id HAVING Count ( * ) > value",
        -6.782683849334717
      ],
      [
        "SELECT T1.FullName , T3.MakeId FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker AND T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model GROUP BY T2.ModelId HAVING Count ( * ) > value",
        -7.105492115020752
      ],
      [
        "SELECT T1.FullName , T3.MakeId FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker AND T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model AND T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id GROUP BY T4.Id HAVING Count ( * ) > value",
        -7.356806516647339
      ],
      [
        "SELECT T1.FullName , T1.Id FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model GROUP BY T3.MakeId HAVING Count ( * ) > value",
        -7.457020282745361
      ],
      [
        "SELECT T1.FullName , T2.ModelId FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker AND T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id GROUP BY T4.Horsepower HAVING Count ( * ) > value",
        -7.756198406219482
      ],
      [
        "SELECT T3.FullName , T1.ContId FROM continents AS T1 JOIN countries AS T2 ON T1.ContId = T2.Continent AND T1.ContId = T2.Continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country AND T2.CountryId = T3.Country JOIN model_list AS T4 ON T3.Id = T4.Maker GROUP BY T4.ModelId HAVING Count ( * ) > value",
        -7.855544328689575
      ],
      [
        "SELECT T1.FullName , T1.FullName FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id GROUP BY T4.Id HAVING Count ( * ) > value",
        -8.043952465057373
      ],
      [
        "SELECT T1.FullName , T1.FullName FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T2.ModelId HAVING Count ( * ) > value",
        -8.076128959655762
      ],
      [
        "SELECT T1.FullName , T2.ModelId FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker AND T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id GROUP BY T4.Weight HAVING Count ( * ) > value",
        -8.11602258682251
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.FullName , T2.ModelId FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T2.ModelId HAVING Count ( * ) > 3",
    "predicted_parse": "SELECT T1.FullName , T2.ModelId FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T2.ModelId HAVING Count ( * ) > value",
    "predicted_parse_explanation": [
      "Step 1: for each row in car makers table , find the corresponding rows in model list table",
      "Step 2: find the number of rows of each value of model id of the results of step 1",
      "Step 3: find the full name and model id of the results of step 1 whose corresponding value in step 2 is greater than 3"
    ],
    "template_feedback": "in step 2 , find for value of id in place of model id . in step 3 , find id in place of model id .",
    "primary_span": [
      [
        4,
        8
      ],
      [
        19,
        20
      ]
    ],
    "secondary_span": [
      [
        9,
        14
      ],
      [
        21,
        26
      ]
    ],
    "edits": [
      "id",
      "model id",
      "id",
      "model id"
    ],
    "edits_original": "< select > add id </ select > < select > remove model id </ select > < groupBy > add id </ groupBy > < groupBy > remove model id </ groupBy >"
  },
  {
    "db_id": "dog_kennels",
    "feedback": "I want similar dogs size code.",
    "question": "List each owner's first name, last name, and the size of his for her dog.",
    "gold_parse": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
    "beam": [
      [
        "SELECT first_name , last_name , owner_id FROM Owners",
        -0.37257981300354004
      ],
      [
        "SELECT T2.first_name , T2.last_name , T1.size_description FROM Sizes AS T1 JOIN Owners AS T2 JOIN Dogs AS T3 ON T1.size_code = T3.size_code AND T3.owner_id = T2.owner_id",
        -2.2268924713134766
      ],
      [
        "SELECT T1.first_name , T1.last_name , T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id",
        -2.6698830127716064
      ],
      [
        "SELECT T1.first_name , T1.last_name , T2.weight FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id",
        -2.9741320610046387
      ],
      [
        "SELECT T1.first_name , T1.last_name , T2.date_arrived FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id",
        -3.4558558464050293
      ],
      [
        "SELECT first_name , last_name , last_name FROM Owners",
        -4.713837623596191
      ],
      [
        "SELECT first_name , last_name , email_address FROM Owners",
        -5.023961067199707
      ],
      [
        "SELECT T1.first_name , T1.last_name , T2.age FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id",
        -5.024929046630859
      ],
      [
        "SELECT T1.first_name , T1.last_name , T2.owner_id FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id",
        -5.038558006286621
      ],
      [
        "SELECT T1.first_name , T1.last_name , T2.date_departed FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id",
        -5.104834079742432
      ],
      [
        "SELECT first_name , last_name , home_phone FROM Owners",
        -6.12045431137085
      ],
      [
        "SELECT T2.first_name , T2.last_name , T1.charge_amount FROM Charges AS T1 JOIN Owners AS T2",
        -6.169778823852539
      ],
      [
        "SELECT T1.first_name , T1.last_name , T2.date_of_birth FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id",
        -6.651175498962402
      ],
      [
        "SELECT first_name , last_name , city FROM Owners",
        -6.651595592498779
      ],
      [
        "SELECT first_name , last_name , cell_number FROM Owners",
        -6.709595680236816
      ],
      [
        "SELECT T1.first_name , T1.last_name , T3.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id",
        -6.7572479248046875
      ],
      [
        "SELECT T2.first_name , T2.last_name , T1.treatment_type_description FROM Treatment_Types AS T1 JOIN Owners AS T2 JOIN Dogs AS T3 ON T3.owner_id = T2.owner_id JOIN Treatments AS T4 ON T1.treatment_type_code = T4.treatment_type_code AND T4.dog_id = T3.dog_id",
        -6.831467628479004
      ],
      [
        "SELECT first_name , last_name , state FROM Owners",
        -6.926563262939453
      ],
      [
        "SELECT first_name , last_name , street FROM Owners",
        -7.287389755249023
      ],
      [
        "SELECT first_name , last_name FROM Owners",
        -12.770344734191895
      ]
    ],
    "predicted_parse_with_values": "SELECT first_name , last_name , owner_id FROM Owners",
    "predicted_parse": "SELECT first_name , last_name , owner_id FROM Owners",
    "predicted_parse_explanation": [
      "find the first name , last name , owner id in owners table"
    ],
    "template_feedback": "additionally use the information from the dogs table besides the owners table . find size code in place of owners 's owner id .",
    "primary_span": [
      [
        0,
        7
      ],
      [
        13,
        15
      ]
    ],
    "secondary_span": [
      [
        8,
        12
      ],
      [
        16,
        23
      ]
    ],
    "edits": [
      "size code",
      "owner id",
      "dogs"
    ],
    "edits_original": "< select > add size code </ select > < select > remove owner id </ select > < from > add dogs </ from >"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "feedback": "You need to utilize documents table.",
    "question": "Count the number of documents.",
    "gold_parse": "SELECT count(*) FROM Documents",
    "beam": [
      [
        "SELECT Count ( * ) FROM Ref_Template_Types",
        -1.049041748046875e-05
      ],
      [
        "SELECT Sum ( * ) FROM Ref_Template_Types",
        -12.748576641082764
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM Ref_Template_Types",
        -13.456554412841797
      ],
      [
        "SELECT Count ( * ) FROM Documents WHERE Document_Name = value",
        -14.023346543312073
      ],
      [
        "SELECT Avg ( * ) FROM Ref_Template_Types",
        -14.368319272994995
      ],
      [
        "SELECT Count ( * ) , Count ( * ) FROM Ref_Template_Types",
        -14.67767333984375
      ],
      [
        "SELECT Count ( * ) FROM Documents GROUP BY Template_ID",
        -14.71854031085968
      ],
      [
        "SELECT Count ( * ) FROM Paragraphs GROUP BY Document_ID",
        -15.559274911880493
      ],
      [
        "SELECT Count ( Count ( * ) ) FROM Ref_Template_Types",
        -15.612454414367676
      ],
      [
        "SELECT Sum ( Document_Name ) FROM Documents",
        -16.309231281280518
      ],
      [
        "SELECT Count ( * ) FROM Ref_Template_Types INTERSECT SELECT Count ( * ) FROM Ref_Template_Types",
        -16.319183349609375
      ],
      [
        "SELECT Count ( * ) FROM Documents ORDER BY Document_ID Desc LIMIT value",
        -16.687439680099487
      ],
      [
        "SELECT * FROM Ref_Template_Types",
        -16.950580582022667
      ],
      [
        "SELECT Count ( DISTINCT * ) FROM Ref_Template_Types",
        -16.964926719665527
      ],
      [
        "SELECT Count ( * ) FROM Ref_Template_Types LIMIT value",
        -17.004131317138672
      ],
      [
        "SELECT Count ( * ) FROM Documents ORDER BY Document_Name Desc",
        -17.11707901954651
      ],
      [
        "SELECT Count ( * ) FROM Documents GROUP BY Document_ID",
        -17.119575023651123
      ],
      [
        "SELECT Count ( * ) FROM Ref_Template_Types GROUP BY *",
        -17.19183921813965
      ],
      [
        "SELECT Max ( * ) FROM Ref_Template_Types",
        -17.392150044441223
      ],
      [
        "SELECT Sum ( Document_ID ) FROM Documents",
        -18.040918350219727
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM Ref_Template_Types",
    "predicted_parse": "SELECT Count ( * ) FROM Ref_Template_Types",
    "predicted_parse_explanation": [
      "find the number of rows in reference template types table"
    ],
    "template_feedback": "use documents table in place of reference template types table .",
    "primary_span": [
      [
        0,
        2
      ]
    ],
    "secondary_span": [
      [
        3,
        10
      ]
    ],
    "edits": [
      "documents",
      "reference template types"
    ],
    "edits_original": "< from > add documents </ from > < from > remove reference template types </ from >"
  },
  {
    "db_id": "concert_singer",
    "feedback": "Don't search for the mean of all mean.",
    "question": "What is the name and capacity for the stadium with the highest average attendance?",
    "gold_parse": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1",
    "beam": [
      [
        "SELECT Name , Capacity FROM stadium GROUP BY Stadium_ID ORDER BY Avg ( Average ) Desc LIMIT value",
        -0.25406837463378906
      ],
      [
        "SELECT Name , Capacity FROM stadium GROUP BY Stadium_ID ORDER BY Avg ( Highest ) Desc LIMIT value",
        -2.082606315612793
      ],
      [
        "SELECT T1.Name , T1.Capacity FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID GROUP BY T2.Stadium_ID ORDER BY Avg ( T1.Average ) Desc LIMIT value",
        -2.5176267623901367
      ],
      [
        "SELECT T1.Name , T1.Capacity FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID GROUP BY T2.Stadium_ID ORDER BY Avg ( T1.Highest ) Desc LIMIT value",
        -4.394803047180176
      ],
      [
        "SELECT Name , Capacity FROM stadium GROUP BY Stadium_ID ORDER BY Avg ( Capacity ) Desc LIMIT value",
        -5.242814064025879
      ],
      [
        "SELECT T1.Name , T1.Capacity FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID GROUP BY T2.Stadium_ID ORDER BY Avg ( T1.Capacity ) Desc LIMIT value",
        -7.249996185302734
      ],
      [
        "SELECT Name , Capacity FROM stadium GROUP BY Stadium_ID ORDER BY Count ( * ) Desc LIMIT value",
        -8.001829147338867
      ],
      [
        "SELECT Name , Capacity FROM stadium ORDER BY Highest Desc LIMIT value",
        -8.841390609741211
      ],
      [
        "SELECT Name , Capacity FROM stadium GROUP BY Capacity ORDER BY Avg ( Average ) Desc LIMIT value",
        -9.557113647460938
      ],
      [
        "SELECT Name , Capacity FROM stadium ORDER BY Average Desc LIMIT value",
        -9.820562362670898
      ],
      [
        "SELECT T1.Name , T1.Capacity FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID GROUP BY T2.Stadium_ID ORDER BY Count ( * ) Desc LIMIT value",
        -10.110366821289062
      ],
      [
        "SELECT Name , Capacity FROM stadium GROUP BY Stadium_ID ORDER BY Sum ( Average ) Desc LIMIT value",
        -10.377236366271973
      ],
      [
        "SELECT Name , Capacity FROM stadium GROUP BY Capacity ORDER BY Avg ( Highest ) Desc LIMIT value",
        -11.173582077026367
      ],
      [
        "SELECT Name , Capacity FROM stadium GROUP BY Stadium_ID ORDER BY Sum ( Highest ) Desc LIMIT value",
        -11.386913299560547
      ],
      [
        "SELECT Name , Capacity FROM stadium GROUP BY Stadium_ID ORDER BY Avg ( Average ) Desc",
        -12.173528671264648
      ],
      [
        "SELECT Name , Capacity FROM stadium GROUP BY Name ORDER BY Avg ( Average ) Desc LIMIT value",
        -12.204304695129395
      ],
      [
        "SELECT Name , Capacity FROM stadium GROUP BY Stadium_ID",
        -13.053998947143555
      ],
      [
        "SELECT Name FROM stadium GROUP BY Stadium_ID ORDER BY Avg ( Average ) Desc LIMIT value",
        -13.694612503051758
      ],
      [
        "SELECT Name FROM stadium GROUP BY Capacity ORDER BY Avg ( Average ) Desc LIMIT value",
        -15.05265998840332
      ],
      [
        "SELECT Name , Capacity FROM stadium",
        -15.701833724975586
      ]
    ],
    "predicted_parse_with_values": "SELECT Name , Capacity FROM stadium GROUP BY Stadium_ID ORDER BY Avg ( Average ) Desc LIMIT 1",
    "predicted_parse": "SELECT Name , Capacity FROM stadium GROUP BY Stadium_ID ORDER BY Avg ( Average ) Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: find the average average of each value of stadium id in stadium table",
      "Step 2: find the name and capacity in stadium table with largest value in the results of step 1"
    ],
    "template_feedback": "in step 1 , do not find for each value of stadium id . in step 2 , order the results by average in place of average average .",
    "primary_span": [
      [
        4,
        13
      ],
      [
        18,
        22
      ]
    ],
    "secondary_span": [
      [
        23,
        28
      ]
    ],
    "edits": [
      "stadium id",
      "average",
      "average average"
    ],
    "edits_original": "< groupBy > remove stadium id </ groupBy > < orderBy > add average </ orderBy > < orderBy > remove average average </ orderBy >"
  },
  {
    "db_id": "flight_2",
    "feedback": "You should use flights rather than airlines.",
    "question": "Return the number of flights.",
    "gold_parse": "SELECT count(*) FROM FLIGHTS",
    "beam": [
      [
        "SELECT Count ( * ) FROM airlines",
        -0.00016498565673828125
      ],
      [
        "SELECT Count ( DISTINCT FlightNo ) FROM flights",
        -8.85908842086792
      ],
      [
        "SELECT Count ( FlightNo ) FROM flights",
        -11.432433128356934
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE AirportName = value",
        -13.385861039161682
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE City = value",
        -13.894355297088623
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM airlines",
        -14.203255653381348
      ],
      [
        "SELECT Sum ( FlightNo ) FROM flights",
        -14.251697063446045
      ],
      [
        "SELECT Count ( * ) , Airline FROM flights",
        -14.258268177509308
      ],
      [
        "SELECT Count ( * ) FROM flights WHERE Airline = value",
        -14.619282722473145
      ],
      [
        "SELECT Count ( * ) FROM airlines WHERE Abbreviation = value",
        -14.687664985656738
      ],
      [
        "SELECT Count ( * ) FROM flights WHERE FlightNo = value",
        -14.761101961135864
      ],
      [
        "SELECT Avg ( FlightNo ) FROM flights",
        -14.84699010848999
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE CountryAbbrev = value",
        -14.968256950378418
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE Country = value",
        -15.05715012550354
      ],
      [
        "SELECT Count ( Count ( * ) ) FROM airlines",
        -15.190144538879395
      ],
      [
        "SELECT Count ( * ) FROM flights GROUP BY FlightNo",
        -15.354859828948975
      ],
      [
        "SELECT FlightNo FROM flights",
        -15.465302467346191
      ],
      [
        "SELECT Count ( * ) FROM airlines",
        -17.042271614074707
      ],
      [
        "SELECT Count ( DISTINCT * ) FROM airlines",
        -17.092753410339355
      ],
      [
        "SELECT Count ( * ) FROM airlines LIMIT value",
        -17.13227939605713
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM airlines",
    "predicted_parse": "SELECT Count ( * ) FROM airlines",
    "predicted_parse_explanation": [
      "find the number of rows in airlines table"
    ],
    "template_feedback": "use flights table in place of airlines table .",
    "primary_span": [
      [
        0,
        2
      ]
    ],
    "secondary_span": [
      [
        3,
        8
      ]
    ],
    "edits": [
      "flights",
      "airlines"
    ],
    "edits_original": "< from > add flights </ from > < from > remove airlines </ from >"
  },
  {
    "db_id": "tvshow",
    "feedback": "In step 2 Substitute channel with country , In step 3 Substitute content with id .",
    "question": "find id of the tv channels that from the countries where have more than two tv channels.",
    "gold_parse": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2",
    "beam": [
      [
        "SELECT T1.Content FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel GROUP BY T2.Channel HAVING Count ( * ) > value",
        -0.4927520751953125
      ],
      [
        "SELECT T1.Content FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.18_49_Rating_Share > value GROUP BY T2.Channel HAVING Count ( * ) > value",
        -1.2446155548095703
      ],
      [
        "SELECT T1.Content FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Viewers_m > value GROUP BY T2.Channel HAVING Count ( * ) > value",
        -3.7519421577453613
      ],
      [
        "SELECT T1.Content FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.Pay_per_view_PPV > value GROUP BY T2.Channel HAVING Count ( * ) > value",
        -4.4014668464660645
      ],
      [
        "SELECT Channel FROM TV_series GROUP BY Channel HAVING Count ( * ) > value",
        -4.606393814086914
      ],
      [
        "SELECT T1.Content FROM TV_Channel AS T1 WHERE T1.Country = value INTERSECT SELECT T2.Channel FROM TV_series AS T2 GROUP BY T2.Channel HAVING Count ( * ) > value",
        -4.6699981689453125
      ],
      [
        "SELECT T1.Content FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel GROUP BY T2.Channel HAVING Count ( * ) > value INTERSECT SELECT T2.Channel FROM TV_series AS T2 GROUP BY T2.Channel HAVING Count ( * ) > value",
        -4.823844909667969
      ],
      [
        "SELECT T1.Content FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.18_49_Rating_Share > value GROUP BY T1.Country HAVING Count ( * ) > value",
        -5.255464553833008
      ],
      [
        "SELECT T1.Content FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Share > value GROUP BY T2.Channel HAVING Count ( * ) > value",
        -5.8211669921875
      ],
      [
        "SELECT T1.Content FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.Pixel_aspect_ratio_PAR > value GROUP BY T2.Channel HAVING Count ( * ) > value",
        -5.86566686630249
      ],
      [
        "SELECT T1.Content FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.Country > value GROUP BY T2.Channel HAVING Count ( * ) > value",
        -5.933041572570801
      ],
      [
        "SELECT T1.Content FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.18_49_Rating_Share > value INTERSECT SELECT T1.Content FROM TV_Channel AS T1 WHERE T1.Country = value",
        -6.179133892059326
      ],
      [
        "SELECT T1.Content FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.Hight_definition_TV > value GROUP BY T2.Channel HAVING Count ( * ) > value",
        -6.198235034942627
      ],
      [
        "SELECT T1.Content FROM TV_Channel AS T1 INTERSECT SELECT T2.Channel FROM TV_series AS T2 WHERE T2.18_49_Rating_Share > value",
        -6.375001907348633
      ],
      [
        "SELECT T1.Content FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.18_49_Rating_Share > value INTERSECT SELECT T2.Channel FROM TV_series AS T2 WHERE T2.18_49_Rating_Share < value",
        -6.446043491363525
      ],
      [
        "SELECT Content FROM TV_Channel WHERE Pay_per_view_PPV > value GROUP BY Country HAVING Count ( * ) > value",
        -6.448791980743408
      ],
      [
        "SELECT T1.Content FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Rating > value GROUP BY T2.Channel HAVING Count ( * ) > value",
        -6.800962448120117
      ],
      [
        "SELECT Content FROM TV_Channel GROUP BY Content HAVING Count ( * ) > value",
        -7.018930435180664
      ],
      [
        "SELECT T1.Content FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.Content > value GROUP BY T2.Channel HAVING Count ( * ) > value",
        -7.111516952514648
      ],
      [
        "SELECT Content FROM TV_Channel",
        -9.64638900756836
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.Content FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel GROUP BY T2.Channel HAVING Count ( * ) > 2",
    "predicted_parse": "SELECT T1.Content FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel GROUP BY T2.Channel HAVING Count ( * ) > value",
    "predicted_parse_explanation": [
      "Step 1: for each row in tv channel table , find the corresponding rows in tv series table",
      "Step 2: find the number of rows of each value of channel of the results of step 1",
      "Step 3: find the content of the results of step 1 whose corresponding value in step 2 is greater than 2"
    ],
    "template_feedback": "in step 1 , do not use the tv series table . in step 2 , find for value of country in place of channel . in step 3 , find tv channel 's id in place of content .",
    "primary_span": [
      [
        4,
        11
      ],
      [
        16,
        20
      ],
      [
        30,
        34
      ]
    ],
    "secondary_span": [
      [
        4,
        11
      ],
      [
        21,
        25
      ],
      [
        35,
        39
      ]
    ],
    "edits": [
      "id",
      "content",
      "tv series",
      "country",
      "channel"
    ],
    "edits_original": "< select > add id </ select > < select > remove content </ select > < from > remove tv series </ from > < groupBy > add country </ groupBy > < groupBy > remove channel </ groupBy >"
  },
  {
    "db_id": "car_1",
    "feedback": "In step 1 replace car names table car makers , Step 2 find whose weight beyond 3500 and cylinders equals General Motors .",
    "question": "What are the different models created by either the car maker General Motors or weighed more than 3500?",
    "gold_parse": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500",
    "beam": [
      [
        "SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T3.Horsepower > value OR T3.Horsepower = value",
        -1.5782485008239746
      ],
      [
        "SELECT DISTINCT T2.Model FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker AND T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id WHERE T4.Horsepower > value OR T1.Maker = value",
        -1.61970853805542
      ],
      [
        "SELECT DISTINCT T2.Model FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker AND T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id WHERE T4.Weight > value OR T1.Maker = value",
        -1.7073192596435547
      ],
      [
        "SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T3.Weight > value OR T3.Horsepower = value",
        -2.007770299911499
      ],
      [
        "SELECT DISTINCT T2.Model FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker AND T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id WHERE T1.Maker = value OR T4.Weight > value",
        -2.686725616455078
      ],
      [
        "SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T3.Horsepower = value OR T3.Weight > value",
        -2.8989923000335693
      ],
      [
        "SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T3.Horsepower > value OR T3.Weight = value",
        -3.400503635406494
      ],
      [
        "SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T3.Horsepower > value OR T3.Weight > value",
        -3.8632707595825195
      ],
      [
        "SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T3.Weight > value OR T3.Weight = value",
        -4.12263298034668
      ],
      [
        "SELECT DISTINCT T2.Model FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker AND T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id WHERE T1.Maker = value OR T4.Horsepower > value",
        -4.4070940017700195
      ],
      [
        "SELECT DISTINCT T2.Model FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker AND T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id WHERE T4.Horsepower > value OR T1.FullName = value",
        -4.422980308532715
      ],
      [
        "SELECT DISTINCT T2.Model FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker AND T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id WHERE T4.Weight > value OR T1.FullName = value",
        -4.741692066192627
      ],
      [
        "SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T3.Horsepower = value OR T3.Horsepower > value",
        -5.4460694789886475
      ],
      [
        "SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T3.Horsepower > value OR T3.Accelerate = value",
        -5.708220958709717
      ],
      [
        "SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T3.Weight > value OR T3.Weight > value",
        -5.733858108520508
      ],
      [
        "SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T1.Maker = value OR T3.Weight > value",
        -5.781772136688232
      ],
      [
        "SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T3.Horsepower > value OR T3.Weight < value",
        -5.784061431884766
      ],
      [
        "SELECT DISTINCT T3.Model FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country AND T1.CountryId = T2.Country JOIN model_list AS T3 ON T2.Id = T3.Maker AND T2.Id = T3.Maker JOIN car_names AS T4 ON T3.Model = T4.Model JOIN cars_data AS T5 ON T4.MakeId = T5.Id WHERE T5.Horsepower > value OR T1.CountryName = value",
        -5.90320348739624
      ],
      [
        "SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T3.Horsepower > value OR T3.Horsepower > value",
        -5.917823791503906
      ],
      [
        "SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T3.Horsepower > value OR T3.Cylinders = value",
        -5.973959445953369
      ]
    ],
    "predicted_parse_with_values": "SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T3.Horsepower > 3500 OR T3.Horsepower = \"General Motors\"",
    "predicted_parse": "SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T3.Horsepower > value OR T3.Horsepower = value",
    "predicted_parse_explanation": [
      "Step 1: for each row in model list table , find the corresponding rows in car names table and in cars data table",
      "Step 2: find without repetition model list 's model of the results of step 1 whose horsepower greater than 3500 or horsepower equals General Motors"
    ],
    "template_feedback": "in step 1 , additionally use the information from the car makers table . in step 2 , consider the weight greater than 3500 or full name equals General Motors conditions in place of the horsepower greater than 3500 or horsepower equals General Motors conditions .",
    "primary_span": [
      [
        4,
        13
      ],
      [
        18,
        30
      ]
    ],
    "secondary_span": [
      [
        31,
        45
      ]
    ],
    "edits": [
      "car makers",
      "full name equals \"General Motors\" or weight greater than 3500",
      "horsepower greater than 3500 or horsepower equals \"General Motors\""
    ],
    "edits_original": "< from > add car makers </ from > < where > add full name equals \" General Motors \" or weight greater than 3500 </ where > < where > remove horsepower greater than 3500 or horsepower equals \" General Motors \" </ where >"
  },
  {
    "db_id": "world_1",
    "feedback": "You have to search in countrylanguage table for total number of rows of language.",
    "question": "Which language is spoken by the largest number of countries?",
    "gold_parse": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1",
    "beam": [
      [
        "SELECT Code2 FROM country ORDER BY Continent Desc LIMIT value",
        -1.4857826232910156
      ],
      [
        "SELECT Code2 FROM country ORDER BY Population Desc LIMIT value",
        -1.4938173294067383
      ],
      [
        "SELECT T1.name FROM sqlite_sequence AS T1 JOIN country AS T2 ORDER BY T2.Continent Desc LIMIT value",
        -1.6552462577819824
      ],
      [
        "SELECT T1.name FROM sqlite_sequence AS T1 JOIN country AS T2 ORDER BY T2.Population Desc LIMIT value",
        -1.6650795936584473
      ],
      [
        "SELECT Name FROM country ORDER BY Population Desc LIMIT value",
        -2.6112122535705566
      ],
      [
        "SELECT Name FROM country ORDER BY Continent Desc LIMIT value",
        -2.63441801071167
      ],
      [
        "SELECT Code2 FROM country ORDER BY LifeExpectancy Desc LIMIT value",
        -4.936150074005127
      ],
      [
        "SELECT T1.name FROM sqlite_sequence AS T1 JOIN country AS T2 ORDER BY T2.LifeExpectancy Desc LIMIT value",
        -5.205498695373535
      ],
      [
        "SELECT Code2 FROM country GROUP BY Code2 ORDER BY Count ( * ) Desc LIMIT value",
        -5.872289657592773
      ],
      [
        "SELECT Name FROM country ORDER BY LifeExpectancy Desc LIMIT value",
        -6.149609565734863
      ],
      [
        "SELECT T1.name FROM sqlite_sequence AS T1 JOIN country AS T2 GROUP BY T2.Code2 ORDER BY Count ( * ) Desc LIMIT value",
        -6.842113971710205
      ],
      [
        "SELECT LocalName FROM country ORDER BY Continent Desc LIMIT value",
        -6.876601219177246
      ],
      [
        "SELECT LocalName FROM country ORDER BY Population Desc LIMIT value",
        -6.909379005432129
      ],
      [
        "SELECT Name FROM country GROUP BY Code2 ORDER BY Count ( * ) Desc LIMIT value",
        -7.550963401794434
      ],
      [
        "SELECT T2.Code2 FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code ORDER BY T1.Population Desc LIMIT value",
        -7.8650102615356445
      ],
      [
        "SELECT T2.name FROM city AS T1 JOIN sqlite_sequence AS T2 ORDER BY T1.Population Desc LIMIT value",
        -8.132236957550049
      ],
      [
        "SELECT Code2 FROM country GROUP BY LocalName ORDER BY Count ( * ) Desc LIMIT value",
        -8.82736349105835
      ],
      [
        "SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code ORDER BY T2.Continent Desc LIMIT value",
        -8.957776069641113
      ],
      [
        "SELECT Code2 FROM country GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value",
        -9.021971225738525
      ],
      [
        "SELECT T2.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code ORDER BY T1.Population Desc LIMIT value",
        -9.074330806732178
      ]
    ],
    "predicted_parse_with_values": "SELECT Code2 FROM country ORDER BY Continent Desc LIMIT 1",
    "predicted_parse": "SELECT Code2 FROM country ORDER BY Continent Desc LIMIT value",
    "predicted_parse_explanation": [
      "find the code2 in country table with largest value of continent"
    ],
    "template_feedback": "use countrylanguage table in place of country table . find for each value of language . find language in place of code2 . order the results by number of rows in place of continent .",
    "primary_span": [
      [
        0,
        2
      ],
      [
        9,
        15
      ],
      [
        16,
        17
      ],
      [
        23,
        29
      ]
    ],
    "secondary_span": [
      [
        3,
        8
      ],
      [
        18,
        22
      ],
      [
        30,
        34
      ]
    ],
    "edits": [
      "language",
      "code2",
      "countrylanguage",
      "country",
      "language",
      "number of rows",
      "continent"
    ],
    "edits_original": "< select > add language </ select > < select > remove code2 </ select > < from > add countrylanguage </ from > < from > remove country </ from > < groupBy > add language </ groupBy > < orderBy > add number of rows </ orderBy > < orderBy > remove continent </ orderBy >"
  },
  {
    "db_id": "tvshow",
    "feedback": "episode and title can be replaced by air date and episode respectively .",
    "question": "When did the episode \"A Love of a Lifetime\" air?",
    "gold_parse": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\"",
    "beam": [
      [
        "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T2.Channel = T1.id JOIN Cartoon AS T3 ON T1.id = T3.Channel WHERE T3.Title = value",
        -0.00016498565673828125
      ],
      [
        "SELECT Episode FROM TV_series WHERE Episode = value",
        -8.825066566467285
      ],
      [
        "SELECT Title FROM Cartoon WHERE Title = value",
        -11.394567489624023
      ],
      [
        "SELECT Count ( DISTINCT T2.Episode ) FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T2.Channel = T1.id JOIN Cartoon AS T3 ON T1.id = T3.Channel WHERE T3.Title = value",
        -12.802982330322266
      ],
      [
        "SELECT DISTINCT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T2.Channel = T1.id JOIN Cartoon AS T3 ON T1.id = T3.Channel WHERE T3.Title = value",
        -13.016545295715332
      ],
      [
        "SELECT Count ( * ) FROM TV_series WHERE Episode = value",
        -13.742403984069824
      ],
      [
        "SELECT T2.Episode , T3.Title FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T2.Channel = T1.id JOIN Cartoon AS T3 ON T1.id = T3.Channel WHERE T3.Title = value",
        -13.886568069458008
      ],
      [
        "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T2.Channel = T1.id JOIN Cartoon AS T3 ON T1.id = T3.Channel WHERE T3.Written_by = value",
        -14.07445240020752
      ],
      [
        "SELECT Count ( * ) FROM Cartoon WHERE Title = value",
        -14.32662582397461
      ],
      [
        "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T2.Channel = T1.id JOIN Cartoon AS T3 ON T1.id = T3.Channel WHERE T3.Title LIKE value",
        -14.394548416137695
      ],
      [
        "SELECT Episode FROM TV_series",
        -14.902192115783691
      ],
      [
        "SELECT Directed_by FROM Cartoon WHERE Title = value",
        -15.881436347961426
      ],
      [
        "SELECT Written_by FROM Cartoon WHERE Title = value",
        -15.959112167358398
      ],
      [
        "SELECT T1.Episode FROM TV_series AS T1 EXCEPT SELECT T1.Episode FROM TV_Channel AS T2 JOIN TV_series AS T1 ON T1.Channel = T2.id JOIN Cartoon AS T3 ON T2.id = T3.Channel WHERE T3.Title = value",
        -16.36426544189453
      ],
      [
        "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T2.Channel = T1.id JOIN Cartoon AS T3 ON T1.id = T3.Channel WHERE T3.Title = value AND T3.Title = value",
        -16.5351505279541
      ],
      [
        "SELECT Episode FROM TV_series WHERE Episode LIKE value",
        -16.546765327453613
      ],
      [
        "SELECT DISTINCT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T2.Channel = T1.id JOIN Cartoon AS T3 ON T1.id = T3.Channel WHERE T3.Title = value",
        -16.697847366333008
      ],
      [
        "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = value",
        -16.7524356842041
      ],
      [
        "SELECT * FROM Cartoon WHERE Title = value",
        -16.900076866149902
      ],
      [
        "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T2.Channel = T1.id JOIN Cartoon AS T3 ON T1.id = T3.Channel WHERE T3.Title > value",
        -16.938281059265137
      ]
    ],
    "predicted_parse_with_values": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T2.Channel = T1.id JOIN Cartoon AS T3 ON T1.id = T3.Channel WHERE T3.Title = \"A Love of a Lifetime\"",
    "predicted_parse": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T2.Channel = T1.id JOIN Cartoon AS T3 ON T1.id = T3.Channel WHERE T3.Title = value",
    "predicted_parse_explanation": [
      "Step 1: for each row in tv channel table , find the corresponding rows in tv series table and in cartoon table",
      "Step 2: find the episode of the results of step 1 whose title equals A Love of a Lifetime"
    ],
    "template_feedback": "in step 1 , do not use the cartoon table and tv channel table . in step 2 , consider the episode equals A Love of a Lifetime conditions in place of the title equals A Love of a Lifetime conditions . find air date in place of episode .",
    "primary_span": [
      [
        4,
        14
      ],
      [
        19,
        28
      ],
      [
        42,
        44
      ]
    ],
    "secondary_span": [
      [
        4,
        14
      ],
      [
        29,
        41
      ],
      [
        45,
        49
      ]
    ],
    "edits": [
      "air date",
      "episode",
      "tv channel",
      "cartoon",
      "episode equals \"A Love of a Lifetime\"",
      "title equals \"A Love of a Lifetime\""
    ],
    "edits_original": "< select > add air date </ select > < select > remove episode </ select > < from > remove tv channel </ from > < from > remove cartoon </ from > < where > add episode equals \" A Love of a Lifetime \" </ where > < where > remove title equals \" A Love of a Lifetime \" </ where >"
  },
  {
    "db_id": "network_1",
    "feedback": "Exchange grade in high schooler table with student id in friend table in step 1.",
    "question": "Return the name of the high school student with the most friends.",
    "gold_parse": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
    "beam": [
      [
        "SELECT name FROM Highschooler GROUP BY grade ORDER BY Count ( * ) Desc LIMIT value",
        -0.5104522705078125
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id ORDER BY Count ( * ) Desc LIMIT value",
        -0.9291601181030273
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T1.grade , T2.student_id ORDER BY Count ( * ) Desc LIMIT value",
        -6.506302118301392
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T1.grade , T2.friend_id ORDER BY Count ( * ) Desc LIMIT value",
        -6.711929440498352
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id , T1.grade ORDER BY Count ( * ) Desc LIMIT value",
        -7.617325305938721
      ],
      [
        "SELECT T1.grade FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id ORDER BY Count ( * ) Desc LIMIT value",
        -7.776296615600586
      ],
      [
        "SELECT name FROM Highschooler GROUP BY grade , grade ORDER BY Count ( * ) Desc LIMIT value",
        -7.790676116943359
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id GROUP BY T2.student_id ORDER BY Count ( * ) Desc LIMIT value",
        -8.382781982421875
      ],
      [
        "SELECT name FROM Highschooler GROUP BY grade , * ORDER BY Count ( * ) Desc LIMIT value",
        -8.464348793029785
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id GROUP BY T1.grade , T2.student_id ORDER BY Count ( * ) Desc LIMIT value",
        -9.649201393127441
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id GROUP BY T1.grade , T2.liked_id ORDER BY Count ( * ) Desc LIMIT value",
        -9.702199935913086
      ],
      [
        "SELECT name FROM Highschooler GROUP BY name , grade ORDER BY Count ( * ) Desc LIMIT value",
        -9.922357082366943
      ],
      [
        "SELECT name FROM Highschooler GROUP BY grade , name ORDER BY Count ( * ) Desc LIMIT value",
        -10.068714618682861
      ],
      [
        "SELECT T1.name , T1.grade FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id ORDER BY Count ( * ) Desc LIMIT value",
        -10.092696189880371
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id GROUP BY T2.liked_id ORDER BY Count ( * ) Desc LIMIT value",
        -10.170171737670898
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.friend_id ORDER BY Count ( * ) Desc LIMIT value",
        -10.495589256286621
      ],
      [
        "SELECT name FROM Highschooler GROUP BY grade , ID ORDER BY Count ( * ) Desc LIMIT value",
        -10.858063220977783
      ],
      [
        "SELECT name FROM Highschooler ORDER BY grade Desc LIMIT value",
        -11.170442581176758
      ],
      [
        "SELECT name FROM Highschooler GROUP BY grade LIMIT value",
        -13.519498825073242
      ],
      [
        "SELECT name FROM Highschooler",
        -17.827900886535645
      ]
    ],
    "predicted_parse_with_values": "SELECT name FROM Highschooler GROUP BY grade ORDER BY Count ( * ) Desc LIMIT 1",
    "predicted_parse": "SELECT name FROM Highschooler GROUP BY grade ORDER BY Count ( * ) Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of grade in high schooler table",
      "Step 2: find the name in high schooler table with largest value in the results of step 1"
    ],
    "template_feedback": "in step 1 , additionally use the information from the friend table besides the high schooler table . find for each value of student id in place of grade .",
    "primary_span": [
      [
        4,
        11
      ],
      [
        18,
        24
      ]
    ],
    "secondary_span": [
      [
        12,
        17
      ],
      [
        25,
        29
      ]
    ],
    "edits": [
      "friend",
      "student id",
      "grade"
    ],
    "edits_original": "< from > add friend </ from > < groupBy > add student id </ groupBy > < groupBy > remove grade </ groupBy >"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "feedback": "You need to just search for the version number in step 2.",
    "question": "Return the version numbers and template type codes of templates with a version number greater than 5.",
    "gold_parse": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5",
    "beam": [
      [
        "SELECT T1.Version_Number , T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T2.Template_ID HAVING Count ( * ) > value",
        -0.2832794189453125
      ],
      [
        "SELECT Version_Number , Template_Type_Code FROM Templates WHERE Version_Number > value",
        -1.9471592903137207
      ],
      [
        "SELECT T1.Template_Details , T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T2.Template_ID HAVING Count ( * ) > value",
        -3.0759050846099854
      ],
      [
        "SELECT T2.Document_Name , T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T2.Template_ID HAVING Count ( * ) > value",
        -3.9890310764312744
      ],
      [
        "SELECT * , T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T2.Template_ID HAVING Count ( * ) > value",
        -4.920594215393066
      ],
      [
        "SELECT T1.Template_ID , T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T2.Template_ID HAVING Count ( * ) > value",
        -5.024171352386475
      ],
      [
        "SELECT T1.Template_Type_Code , T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T2.Template_ID HAVING Count ( * ) > value",
        -5.159045219421387
      ],
      [
        "SELECT Template_Details , Template_Type_Code FROM Templates WHERE Version_Number > value",
        -5.176711082458496
      ],
      [
        "SELECT T1.Template_Type_Description , T2.Template_Type_Code FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code AND T1.Template_Type_Code = T2.Template_Type_Code JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID GROUP BY T3.Template_ID HAVING Count ( * ) > value",
        -5.794191360473633
      ],
      [
        "SELECT Version_Number , Template_Type_Code FROM Templates WHERE Date_Effective_To > value",
        -6.244771480560303
      ],
      [
        "SELECT Version_Number , Template_Type_Code FROM Templates GROUP BY Template_ID HAVING Count ( * ) > value",
        -6.526228904724121
      ],
      [
        "SELECT T1.Date_Effective_From , T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T2.Template_ID HAVING Count ( * ) > value",
        -6.714597225189209
      ],
      [
        "SELECT T2.Template_ID , T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T2.Template_ID HAVING Count ( * ) > value",
        -6.838565349578857
      ],
      [
        "SELECT T2.Document_Name , T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T1.Version_Number > value",
        -6.918155670166016
      ],
      [
        "SELECT Template_ID , Template_Type_Code FROM Templates WHERE Version_Number > value",
        -7.120926380157471
      ],
      [
        "SELECT * , Template_Type_Code FROM Templates WHERE Version_Number > value",
        -7.302884578704834
      ],
      [
        "SELECT T3.Paragraph_Text , T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID AND T1.Template_ID = T2.Template_ID JOIN Paragraphs AS T3 ON T2.Document_ID = T3.Document_ID GROUP BY T2.Template_ID HAVING Count ( * ) > value",
        -7.542675971984863
      ],
      [
        "SELECT Version_Number , Template_Type_Code FROM Templates GROUP BY Template_Type_Code HAVING Count ( * ) > value",
        -8.218057632446289
      ],
      [
        "SELECT T1.Version_Number , T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Document_Name > value",
        -8.232123851776123
      ],
      [
        "SELECT T1.Template_Type_Description , T2.Template_Type_Code FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T2.Version_Number > value",
        -8.356780052185059
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.Version_Number , T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T2.Template_ID HAVING Count ( * ) > 5",
    "predicted_parse": "SELECT T1.Version_Number , T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T2.Template_ID HAVING Count ( * ) > value",
    "predicted_parse_explanation": [
      "Step 1: for each row in templates table , find the corresponding rows in documents table",
      "Step 2: find the number of rows of each value of documents 's template id of the results of step 1",
      "Step 3: find the version number and template type code of the results of step 1 whose corresponding value in step 2 is greater than 5"
    ],
    "template_feedback": "in step 1 , do not use the documents table . in step 2 , do not find for each value of documents 's template id . in step 3 , additionally make sure that version number greater than 5 .",
    "primary_span": [
      [
        4,
        10
      ],
      [
        15,
        26
      ],
      [
        31,
        40
      ]
    ],
    "secondary_span": [
      [
        4,
        10
      ]
    ],
    "edits": [
      "documents",
      "version number greater than 5",
      "template id",
      "number of rows greater than 5"
    ],
    "edits_original": "< from > remove documents </ from > < where > add version number greater than 5 </ where > < groupBy > remove template id </ groupBy > < having > remove number of rows greater than 5 </ having >"
  },
  {
    "db_id": "world_1",
    "feedback": "You have search for the rows count of country table whose government form equivalent to republics.",
    "question": "How many countries have governments that are republics?",
    "gold_parse": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"",
    "beam": [
      [
        "SELECT Count ( DISTINCT Continent ) FROM country",
        -0.6453776359558105
      ],
      [
        "SELECT Count ( DISTINCT GovernmentForm ) FROM country",
        -1.3356995582580566
      ],
      [
        "SELECT Count ( * ) FROM city",
        -1.6496105194091797
      ],
      [
        "SELECT Count ( DISTINCT Continent ) FROM country WHERE Continent = value",
        -5.20192289352417
      ],
      [
        "SELECT Count ( DISTINCT Continent ) FROM country WHERE Name = value",
        -5.453179359436035
      ],
      [
        "SELECT Count ( * ) FROM country WHERE Continent = value",
        -5.772067070007324
      ],
      [
        "SELECT Count ( DISTINCT Continent ) FROM country WHERE Region = value",
        -5.91511869430542
      ],
      [
        "SELECT Count ( DISTINCT GovernmentForm ) FROM country WHERE Continent = value",
        -6.079199314117432
      ],
      [
        "SELECT Count ( DISTINCT GovernmentForm ) FROM country WHERE Name = value",
        -7.287751197814941
      ],
      [
        "SELECT Count ( DISTINCT GovernmentForm ) FROM country WHERE Region = value",
        -7.756436347961426
      ],
      [
        "SELECT Count ( * ) FROM country WHERE Region = value",
        -7.773626327514648
      ],
      [
        "SELECT Count ( * ) FROM country WHERE Name = value",
        -7.905650615692139
      ],
      [
        "SELECT Count ( Continent ) FROM country",
        -8.691569805145264
      ],
      [
        "SELECT Count ( DISTINCT Continent ) FROM country WHERE LocalName = value",
        -8.780976295471191
      ],
      [
        "SELECT Count ( * ) FROM country WHERE Continent LIKE value",
        -9.778667449951172
      ],
      [
        "SELECT Count ( DISTINCT Continent ) FROM country WHERE Continent ! = value",
        -10.406389236450195
      ],
      [
        "SELECT Count ( DISTINCT GovernmentForm ) FROM country WHERE LocalName = value",
        -11.014866828918457
      ],
      [
        "SELECT Count ( * ) FROM country WHERE LocalName = value",
        -11.089666366577148
      ],
      [
        "SELECT Count ( * ) FROM country GROUP BY GovernmentForm",
        -11.121526718139648
      ],
      [
        "SELECT Count ( GovernmentForm ) FROM country",
        -11.773062229156494
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( DISTINCT Continent ) FROM country",
    "predicted_parse": "SELECT Count ( DISTINCT Continent ) FROM country",
    "predicted_parse_explanation": [
      "find the number of different continent in country table"
    ],
    "template_feedback": "additionally make sure that government form equals Republic . find number of rows in place of number of different continent .",
    "primary_span": [
      [
        0,
        8
      ],
      [
        9,
        12
      ]
    ],
    "secondary_span": [
      [
        13,
        20
      ]
    ],
    "edits": [
      "number of rows",
      "number of distinct continent",
      "government form equals \"Republic\""
    ],
    "edits_original": "< select > add number of rows </ select > < select > remove number of distinct continent </ select > < where > add government form equals \" Republic \" </ where >"
  },
  {
    "db_id": "tvshow",
    "feedback": "Use original air date in place of second title .",
    "question": "list all cartoon titles and their directors ordered by their air date",
    "gold_parse": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date",
    "beam": [
      [
        "SELECT Title , Directed_by FROM Cartoon ORDER BY Title Asc",
        -0.018947601318359375
      ],
      [
        "SELECT Title , Directed_by FROM Cartoon ORDER BY Original_air_date Asc",
        -4.179656505584717
      ],
      [
        "SELECT Title , Directed_by FROM Cartoon ORDER BY Written_by Asc",
        -5.903928756713867
      ],
      [
        "SELECT Title , Directed_by FROM Cartoon ORDER BY Directed_by Asc",
        -7.9222331047058105
      ],
      [
        "SELECT T3.Title , T3.Directed_by FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T2.Channel = T1.id JOIN Cartoon AS T3 ON T1.id = T3.Channel ORDER BY T2.Air_Date Asc",
        -8.438429832458496
      ],
      [
        "SELECT Title , Directed_by FROM Cartoon ORDER BY Production_code Asc",
        -9.02009391784668
      ],
      [
        "SELECT Title , Directed_by FROM Cartoon WHERE Directed_by = value ORDER BY Title Asc",
        -11.453306198120117
      ],
      [
        "SELECT Title , Written_by FROM Cartoon ORDER BY Title Asc",
        -12.165372848510742
      ],
      [
        "SELECT Title , Directed_by FROM Cartoon WHERE Written_by = value ORDER BY Title Asc",
        -12.697013854980469
      ],
      [
        "SELECT Title , Directed_by FROM Cartoon ORDER BY Title Asc LIMIT value",
        -13.032233238220215
      ],
      [
        "SELECT Title , Directed_by , Written_by FROM Cartoon ORDER BY Title Asc",
        -13.246912956237793
      ],
      [
        "SELECT Title , Directed_by FROM Cartoon ORDER BY id Asc",
        -13.356005668640137
      ],
      [
        "SELECT DISTINCT Title , Directed_by FROM Cartoon ORDER BY Title Asc",
        -13.434865951538086
      ],
      [
        "SELECT Title , Directed_by FROM Cartoon WHERE Directed_by = value",
        -13.600725173950195
      ],
      [
        "SELECT Title , Directed_by FROM Cartoon UNION SELECT Title FROM Cartoon",
        -13.732723236083984
      ],
      [
        "SELECT Title , Directed_by , Directed_by FROM Cartoon ORDER BY Title Asc",
        -14.17477035522461
      ],
      [
        "SELECT Title FROM Cartoon ORDER BY Title , Directed_by Asc",
        -14.423242568969727
      ],
      [
        "SELECT Title , Directed_by FROM Cartoon",
        -15.068660736083984
      ],
      [
        "SELECT Title FROM Cartoon ORDER BY Title Asc",
        -15.298444747924805
      ],
      [
        "SELECT Title FROM Cartoon ORDER BY Original_air_date Asc",
        -17.936415672302246
      ]
    ],
    "predicted_parse_with_values": "SELECT Title , Directed_by FROM Cartoon ORDER BY Title Asc",
    "predicted_parse": "SELECT Title , Directed_by FROM Cartoon ORDER BY Title Asc",
    "predicted_parse_explanation": [
      "find the title and directed by in cartoon table ordered ascending by title"
    ],
    "template_feedback": "order the results by original air date in place of title .",
    "primary_span": [
      [
        0,
        6
      ]
    ],
    "secondary_span": [
      [
        7,
        11
      ]
    ],
    "edits": [
      "original air date",
      "title"
    ],
    "edits_original": "< orderBy > add original air date </ orderBy > < orderBy > remove title </ orderBy >"
  },
  {
    "db_id": "wta_1",
    "feedback": "I want date of birth and rank of winner points.",
    "question": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches.",
    "gold_parse": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1",
    "beam": [
      [
        "SELECT T1.first_name , T1.country_code , T2.loser_age FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.winner_rank Desc LIMIT value",
        -0.4173698425292969
      ],
      [
        "SELECT T1.first_name , T1.country_code , T2.loser_age FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.winner_rank_points Desc LIMIT value",
        -2.2147693634033203
      ],
      [
        "SELECT T1.first_name , T1.country_code , T2.loser_age FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.loser_rank Desc LIMIT value",
        -2.2215747833251953
      ],
      [
        "SELECT T1.first_name , T1.country_code , T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.winner_rank Desc LIMIT value",
        -3.0029258728027344
      ],
      [
        "SELECT T1.first_name , T1.country_code , T2.loser_age FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.loser_rank_points Desc LIMIT value",
        -3.2509117126464844
      ],
      [
        "SELECT T1.first_name , T1.country_code , T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.winner_rank_points Desc LIMIT value",
        -4.7126007080078125
      ],
      [
        "SELECT T1.first_name , T1.country_code , T2.loser_age FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.winner_rank Asc LIMIT value",
        -4.84969425201416
      ],
      [
        "SELECT T1.first_name , T1.country_code , T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.loser_rank Desc LIMIT value",
        -4.913707733154297
      ],
      [
        "SELECT T1.first_name , T1.country_code , T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.loser_rank_points Desc LIMIT value",
        -5.768960952758789
      ],
      [
        "SELECT T1.first_name , T1.country_code , T2.loser_age FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.loser_rank Asc LIMIT value",
        -5.773687362670898
      ],
      [
        "SELECT T1.first_name , T1.country_code , T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.winner_rank Asc LIMIT value",
        -6.885527610778809
      ],
      [
        "SELECT T1.first_name , T1.country_code , T2.loser_age FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.winner_rank_points Asc LIMIT value",
        -7.016449928283691
      ],
      [
        "SELECT T1.first_name , T1.country_code , T2.loser_age FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.loser_rank_points Asc LIMIT value",
        -7.6110639572143555
      ],
      [
        "SELECT T1.first_name , T1.country_code , T3.ranking_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id JOIN rankings AS T3 ON T1.player_id = T3.player_id ORDER BY T2.winner_rank Desc LIMIT value",
        -7.813730239868164
      ],
      [
        "SELECT T1.first_name , T1.country_code , T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.loser_rank Asc LIMIT value",
        -7.838218688964844
      ],
      [
        "SELECT T1.first_name , T1.country_code , T2.loser_rank FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.winner_rank Desc LIMIT value",
        -8.461206436157227
      ],
      [
        "SELECT T1.first_name , T1.country_code , T2.winner_age FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.winner_rank Desc LIMIT value",
        -8.883857727050781
      ],
      [
        "SELECT T1.first_name , T1.country_code , T2.loser_age FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id JOIN rankings AS T3 ON T1.player_id = T3.player_id ORDER BY T3.ranking_points Desc LIMIT value",
        -8.915379524230957
      ],
      [
        "SELECT T1.first_name , T1.country_code , T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.winner_rank_points Asc LIMIT value",
        -9.030854225158691
      ],
      [
        "SELECT T1.first_name , T1.country_code , T2.loser_age FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id",
        -11.199237823486328
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.first_name , T1.country_code , T2.loser_age FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.winner_rank Desc LIMIT 1",
    "predicted_parse": "SELECT T1.first_name , T1.country_code , T2.loser_age FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.winner_rank Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: for each row in players table , find the corresponding rows in matches table",
      "Step 2: find the first name , country code , loser age of the results of step 1 with largest value of winner rank"
    ],
    "template_feedback": "in step 2 , find birth date in place of loser age . order the results by winner rank points in place of winner rank .",
    "primary_span": [
      [
        4,
        6
      ],
      [
        13,
        19
      ]
    ],
    "secondary_span": [
      [
        7,
        12
      ],
      [
        20,
        25
      ]
    ],
    "edits": [
      "birth date",
      "loser age",
      "winner rank points",
      "winner rank"
    ],
    "edits_original": "< select > add birth date </ select > < select > remove loser age </ select > < orderBy > add winner rank points </ orderBy > < orderBy > remove winner rank </ orderBy >"
  },
  {
    "db_id": "tvshow",
    "feedback": "Make sure to find distinct series name and distinct content in tv channel table .",
    "question": "How many different series and contents are listed in the TV Channel table?",
    "gold_parse": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel",
    "beam": [
      [
        "SELECT Count ( DISTINCT Episode ) , Count ( * ) FROM TV_series",
        -0.1597118377685547
      ],
      [
        "SELECT Count ( * ) , Content FROM TV_Channel",
        -2.2304654121398926
      ],
      [
        "SELECT Count ( * ) , Episode FROM TV_series",
        -4.113059997558594
      ],
      [
        "SELECT Count ( DISTINCT Episode ) , Count ( DISTINCT Episode ) FROM TV_series",
        -4.487850189208984
      ],
      [
        "SELECT Count ( DISTINCT Title ) , Count ( * ) FROM Cartoon",
        -5.793923377990723
      ],
      [
        "SELECT Count ( DISTINCT T2.Episode ) , Count ( DISTINCT T3.Title ) FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T2.Channel = T1.id JOIN Cartoon AS T3 ON T1.id = T3.Channel",
        -6.424065589904785
      ],
      [
        "SELECT Count ( DISTINCT T2.Episode ) , T1.Content FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel",
        -6.525454521179199
      ],
      [
        "SELECT Count ( DISTINCT T2.Episode ) , Count ( DISTINCT T1.Content ) FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel",
        -6.676870822906494
      ],
      [
        "SELECT Count ( * ) , series_name FROM TV_Channel",
        -6.692636013031006
      ],
      [
        "SELECT Count ( * ) , Hight_definition_TV FROM TV_Channel",
        -7.45366907119751
      ],
      [
        "SELECT Count ( * ) , Channel FROM TV_series",
        -7.792405605316162
      ],
      [
        "SELECT Count ( DISTINCT series_name ) , Count ( * ) FROM TV_Channel",
        -7.852166652679443
      ],
      [
        "SELECT Count ( DISTINCT T2.Episode ) , Count ( DISTINCT T1.Hight_definition_TV ) FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel",
        -7.945709705352783
      ],
      [
        "SELECT Count ( DISTINCT T2.Episode ) , Count ( * ) FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.Content = value",
        -8.233288764953613
      ],
      [
        "SELECT Count ( DISTINCT T3.Title ) , Count ( DISTINCT T2.Episode ) FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T2.Channel = T1.id JOIN Cartoon AS T3 ON T1.id = T3.Channel",
        -8.313433170318604
      ],
      [
        "SELECT Count ( DISTINCT Hight_definition_TV ) , Count ( * ) FROM TV_Channel",
        -8.463117122650146
      ],
      [
        "SELECT Count ( DISTINCT T2.Episode ) , Count ( DISTINCT T1.series_name ) FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel",
        -8.59162712097168
      ],
      [
        "SELECT Count ( Episode ) , Count ( * ) FROM TV_series",
        -8.939244270324707
      ],
      [
        "SELECT Count ( DISTINCT T2.Episode ) , Count ( DISTINCT T3.Original_air_date ) FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T2.Channel = T1.id JOIN Cartoon AS T3 ON T1.id = T3.Channel",
        -9.325224876403809
      ],
      [
        "SELECT Count ( DISTINCT Episode ) FROM TV_series",
        -10.099447250366211
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( DISTINCT Episode ) , Count ( * ) FROM TV_series",
    "predicted_parse": "SELECT Count ( DISTINCT Episode ) , Count ( * ) FROM TV_series",
    "predicted_parse_explanation": [
      "find the number of different episode and number of rows in tv series table"
    ],
    "template_feedback": "use tv channel table in place of tv series table . find number of different series name and number of different content in place of number of different episode and number of rows .",
    "primary_span": [
      [
        0,
        3
      ],
      [
        11,
        21
      ]
    ],
    "secondary_span": [
      [
        4,
        10
      ],
      [
        22,
        33
      ]
    ],
    "edits": [
      "number of distinct series name",
      "number of distinct content",
      "number of distinct episode",
      "number of rows",
      "tv channel",
      "tv series"
    ],
    "edits_original": "< select > add number of distinct series name </ select > < select > add number of distinct content </ select > < select > remove number of distinct episode </ select > < select > remove number of rows </ select > < from > add tv channel </ from > < from > remove tv series </ from >"
  },
  {
    "db_id": "car_1",
    "feedback": "Change car makers table with model list table and remove last full name equals American Motor Company .",
    "question": "How many car models were produced by the maker with full name American Motor Company?",
    "gold_parse": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'",
    "beam": [
      [
        "SELECT Count ( * ) FROM car_makers WHERE FullName = value AND FullName = value",
        -0.2882065773010254
      ],
      [
        "SELECT Count ( * ) FROM car_makers WHERE FullName = value",
        -1.6395721435546875
      ],
      [
        "SELECT Count ( * ) FROM car_makers WHERE FullName = value AND Maker = value",
        -3.210909128189087
      ],
      [
        "SELECT Count ( * ) FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country WHERE T2.FullName = value AND T1.CountryName = value",
        -4.862582206726074
      ],
      [
        "SELECT Count ( * ) FROM car_makers WHERE FullName LIKE value",
        -4.943017959594727
      ],
      [
        "SELECT Count ( * ) FROM car_makers WHERE FullName = value AND FullName LIKE value",
        -8.514800071716309
      ],
      [
        "SELECT Count ( * ) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id WHERE T1.FullName = value AND T4.Edispl = value",
        -8.916842460632324
      ],
      [
        "SELECT Count ( * ) FROM car_makers WHERE FullName = value AND FullName ! = value",
        -9.458483219146729
      ],
      [
        "SELECT Count ( * ) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id WHERE T1.FullName = value AND T4.Year = value",
        -9.458736419677734
      ],
      [
        "SELECT Count ( * ) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model WHERE T1.FullName = value AND T3.Make = value",
        -9.735053062438965
      ],
      [
        "SELECT Count ( * ) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker WHERE T1.FullName = value AND T2.Maker = value",
        -10.366382598876953
      ],
      [
        "SELECT Count ( * ) FROM car_makers WHERE FullName BETWEEN value AND value",
        -12.485549926757812
      ],
      [
        "SELECT Count ( * ) FROM car_makers WHERE FullName < value",
        -12.615862846374512
      ],
      [
        "SELECT Count ( DISTINCT T2.Model ) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker WHERE T1.FullName = value",
        -14.239603996276855
      ],
      [
        "SELECT Count ( DISTINCT T3.Model ) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model WHERE T1.FullName = value",
        -14.292011260986328
      ],
      [
        "SELECT Sum ( * ) FROM car_makers WHERE FullName = value",
        -14.552534222602844
      ],
      [
        "SELECT FullName FROM car_makers WHERE FullName = value",
        -14.558837056159973
      ],
      [
        "SELECT Count ( * ) FROM car_makers WHERE Maker = value",
        -14.949579238891602
      ],
      [
        "SELECT Count ( DISTINCT Maker ) FROM car_makers WHERE FullName = value",
        -15.25344467163086
      ],
      [
        "SELECT Count ( * ) FROM car_makers WHERE FullName ! = value",
        -15.376116752624512
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM car_makers WHERE FullName = \"American Motor Company\" AND FullName = \"American Motor Company\"",
    "predicted_parse": "SELECT Count ( * ) FROM car_makers WHERE FullName = value AND FullName = value",
    "predicted_parse_explanation": [
      "find the number of rows in car makers table whose full name equals American Motor Company and full name equals American Motor Company"
    ],
    "template_feedback": "additionally use the information from the model list table besides the car makers table .",
    "primary_span": [
      [
        0,
        8
      ]
    ],
    "secondary_span": [
      [
        9,
        14
      ]
    ],
    "edits": [
      "model list",
      "full name equals \"American Motor Company\""
    ],
    "edits_original": "< from > add model list </ from > < where > remove full name equals \" American Motor Company \" </ where >"
  },
  {
    "db_id": "student_transcripts_tracking",
    "feedback": "Find semester name of semesters table whose semester id isn't present in student enrolment table .",
    "question": "Which semesters do not have any student enrolled? List the semester name.",
    "gold_parse": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )",
    "beam": [
      [
        "SELECT T1.semester_id FROM Semesters AS T1 WHERE T1.semester_id NOT IN ( SELECT T2.semester_id FROM Student_Enrolment AS T2 )",
        -0.7898497581481934
      ],
      [
        "SELECT T1.semester_name FROM Semesters AS T1 WHERE T1.semester_id NOT IN ( SELECT T2.semester_id FROM Student_Enrolment AS T2 )",
        -0.905116081237793
      ],
      [
        "SELECT semester_id FROM Semesters EXCEPT SELECT semester_name FROM Semesters",
        -2.53955078125
      ],
      [
        "SELECT semester_name FROM Semesters EXCEPT SELECT semester_name FROM Semesters",
        -3.5352635383605957
      ],
      [
        "SELECT T1.course_name FROM Courses AS T1 JOIN Semesters AS T2 JOIN Student_Enrolment AS T3 ON T3.semester_id = T2.semester_id JOIN Student_Enrolment_Courses AS T4 ON T1.course_id = T4.course_id AND T4.student_enrolment_id = T3.student_enrolment_id WHERE T2.semester_id NOT IN ( SELECT T3.semester_id FROM Student_Enrolment AS T3 )",
        -3.8173742294311523
      ],
      [
        "SELECT T1.semester_description FROM Semesters AS T1 WHERE T1.semester_id NOT IN ( SELECT T2.semester_id FROM Student_Enrolment AS T2 )",
        -5.148621559143066
      ],
      [
        "SELECT T1.course_name FROM Courses AS T1 EXCEPT SELECT T2.semester_name FROM Semesters AS T2",
        -6.111458778381348
      ],
      [
        "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Semesters AS T2 JOIN Student_Enrolment AS T3 ON T1.degree_program_id = T3.degree_program_id AND T3.semester_id = T2.semester_id WHERE T2.semester_id NOT IN ( SELECT T3.semester_id FROM Student_Enrolment AS T3 )",
        -6.514406204223633
      ],
      [
        "SELECT semester_description FROM Semesters EXCEPT SELECT semester_name FROM Semesters",
        -7.460731506347656
      ],
      [
        "SELECT T1.semester_id FROM Semesters AS T1 EXCEPT SELECT T2.semester_id FROM Student_Enrolment AS T2",
        -7.810126304626465
      ],
      [
        "SELECT * FROM Semesters AS T1 WHERE T1.semester_id NOT IN ( SELECT T2.semester_id FROM Student_Enrolment AS T2 )",
        -8.617939949035645
      ],
      [
        "SELECT T1.semester_name FROM Semesters AS T1 EXCEPT SELECT T2.semester_id FROM Student_Enrolment AS T2",
        -8.704123973846436
      ],
      [
        "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 EXCEPT SELECT T2.semester_name FROM Semesters AS T2",
        -9.048205375671387
      ],
      [
        "SELECT T1.semester_id FROM Semesters AS T1 EXCEPT SELECT T2.course_name FROM Courses AS T2",
        -9.62868881225586
      ],
      [
        "SELECT semester_id FROM Semesters EXCEPT SELECT semester_description FROM Semesters",
        -10.0985689163208
      ],
      [
        "SELECT semester_id FROM Semesters WHERE semester_name ! = value",
        -10.498253345489502
      ],
      [
        "SELECT T1.semester_name FROM Semesters AS T1 EXCEPT SELECT T2.course_name FROM Courses AS T2",
        -10.601117610931396
      ],
      [
        "SELECT semester_name FROM Semesters EXCEPT SELECT semester_description FROM Semesters",
        -11.06970739364624
      ],
      [
        "SELECT T2.semester_id FROM Courses AS T1 JOIN Semesters AS T2 JOIN Student_Enrolment AS T3 ON T3.semester_id = T2.semester_id JOIN Student_Enrolment_Courses AS T4 ON T1.course_id = T4.course_id AND T4.student_enrolment_id = T3.student_enrolment_id WHERE T1.course_name ! = value",
        -11.434841632843018
      ],
      [
        "SELECT semester_id FROM Semesters WHERE semester_description ! = value",
        -12.098694324493408
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.semester_id FROM Semesters AS T1 WHERE T1.semester_id NOT IN ( SELECT T2.semester_id FROM Student_Enrolment AS T2 )",
    "predicted_parse": "SELECT T1.semester_id FROM Semesters AS T1 WHERE T1.semester_id NOT IN ( SELECT T2.semester_id FROM Student_Enrolment AS T2 )",
    "predicted_parse_explanation": [
      "Step 1: find the student enrolment 's semester id in student enrolment table",
      "Step 2: find the semesters 's semester id in semesters table whose semesters 's semester id not one of the results of step 1"
    ],
    "template_feedback": "in step 2 , find semester name in place of semester id .",
    "primary_span": [
      [
        4,
        6
      ]
    ],
    "secondary_span": [
      [
        7,
        12
      ]
    ],
    "edits": [
      "semester name",
      "semester id"
    ],
    "edits_original": "< select > add semester name </ select > < select > remove semester id </ select >"
  },
  {
    "db_id": "flight_2",
    "feedback": "Add flights table in step 1 , change airports's country with airlines's airline and airline with source airport .",
    "question": "Return the number of United Airlines flights leaving from AHD Airport.",
    "gold_parse": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"",
    "beam": [
      [
        "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value AND T1.Airline = value",
        -0.028461456298828125
      ],
      [
        "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.CountryAbbrev = value AND T1.Airline = value",
        -3.629201889038086
      ],
      [
        "SELECT Count ( * ) FROM airlines WHERE Country = value AND Airline = value",
        -7.334554672241211
      ],
      [
        "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value AND T1.Abbreviation = value",
        -7.46098518371582
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE Country = value AND AirportName = value",
        -8.950358390808105
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE Country = value AND CountryAbbrev = value",
        -9.091397285461426
      ],
      [
        "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.CountryAbbrev = value AND T1.Abbreviation = value",
        -11.026152610778809
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE Country = value",
        -11.13693618774414
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE CountryAbbrev = value AND CountryAbbrev = value",
        -12.453356742858887
      ],
      [
        "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value AND T1.Country = value",
        -12.47210693359375
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE CountryAbbrev = value AND AirportName = value",
        -12.487269401550293
      ],
      [
        "SELECT Avg ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value AND T1.Airline = value",
        -13.04772138595581
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE Country = value AND Country = value",
        -13.379992485046387
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value AND T1.Airline = value",
        -13.715643882751465
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE CountryAbbrev = value",
        -14.061349868774414
      ],
      [
        "SELECT Count ( * ) , T2.CountryAbbrev FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value AND T1.Airline = value",
        -14.087696075439453
      ],
      [
        "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value AND T1.Airline = value AND T1.Airline = value",
        -14.441174507141113
      ],
      [
        "SELECT Count ( * ) , T2.Country FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value AND T1.Airline = value",
        -14.752983570098877
      ],
      [
        "SELECT Count ( * ) FROM airlines WHERE Country = value AND Abbreviation = value",
        -14.789023399353027
      ],
      [
        "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value AND Count ( T1.Airline ) = value",
        -15.021954536437988
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = \"United Airlines\" AND T1.Airline = \"AHD\"",
    "predicted_parse": "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value AND T1.Airline = value",
    "predicted_parse_explanation": [
      "Step 1: for each row in airlines table , find the corresponding rows in airports table",
      "Step 2: find the number of rows of the results of step 1 whose airports 's country equals United Airlines and airline name equals AHD"
    ],
    "template_feedback": "in step 1 , use flights table in place of airports table in step 2 , consider the airlines 's airline name equals United Airlines and source airport equals AHD conditions in place of the airports 's country equals United Airlines and airlines 's airline name equals AHD conditions .",
    "primary_span": [
      [
        4,
        6
      ],
      [
        16,
        30
      ]
    ],
    "secondary_span": [
      [
        7,
        11
      ],
      [
        31,
        49
      ]
    ],
    "edits": [
      "flights",
      "airports",
      "airline name equals \"United Airlines\"",
      "source airport equals \"AHD\"",
      "country equals \"United Airlines\"",
      "airline name equals \"AHD\""
    ],
    "edits_original": "< from > add flights </ from > < from > remove airports </ from > < where > add airline name equals \" United Airlines \" </ where > < where > add source airport equals \" AHD \" </ where > < where > remove country equals \" United Airlines \" </ where > < where > remove airline name equals \" AHD \" </ where >"
  },
  {
    "db_id": "wta_1",
    "feedback": "Need to find largest loser rank .",
    "question": "Find the highest rank of losers in all matches.",
    "gold_parse": "SELECT min(loser_rank) FROM matches",
    "beam": [
      [
        "SELECT loser_rank FROM matches",
        -0.4778575897216797
      ],
      [
        "SELECT Min ( winner_rank ) FROM matches",
        -1.4051294326782227
      ],
      [
        "SELECT Min ( loser_rank ) FROM matches",
        -2.283492088317871
      ],
      [
        "SELECT winner_rank FROM matches",
        -4.296749114990234
      ],
      [
        "SELECT Min ( winner_rank_points ) FROM matches",
        -4.991633415222168
      ],
      [
        "SELECT Min ( loser_rank_points ) FROM matches",
        -5.367402076721191
      ],
      [
        "SELECT Max ( winner_rank ) FROM matches",
        -5.851161956787109
      ],
      [
        "SELECT Max ( loser_rank ) FROM matches",
        -7.032398223876953
      ],
      [
        "SELECT score FROM matches",
        -7.103903770446777
      ],
      [
        "SELECT Min ( ranking_points ) FROM rankings",
        -7.609587669372559
      ],
      [
        "SELECT Min ( score ) FROM matches",
        -7.874703407287598
      ],
      [
        "SELECT loser_rank FROM matches ORDER BY loser_rank_points Desc LIMIT value",
        -8.026036262512207
      ],
      [
        "SELECT loser_rank FROM matches ORDER BY loser_rank_points Asc LIMIT value",
        -9.12080192565918
      ],
      [
        "SELECT Max ( winner_rank_points ) FROM matches",
        -9.124406814575195
      ],
      [
        "SELECT loser_rank FROM matches ORDER BY winner_rank_points Desc LIMIT value",
        -9.203003883361816
      ],
      [
        "SELECT Max ( loser_rank_points ) FROM matches",
        -9.649169921875
      ],
      [
        "SELECT winner_rank_points FROM matches",
        -9.751330375671387
      ],
      [
        "SELECT loser_rank_points FROM matches",
        -10.117012977600098
      ],
      [
        "SELECT Min ( ranking ) FROM rankings",
        -11.610823631286621
      ],
      [
        "SELECT Max ( ranking_points ) FROM rankings",
        -12.126309394836426
      ]
    ],
    "predicted_parse_with_values": "SELECT loser_rank FROM matches",
    "predicted_parse": "SELECT loser_rank FROM matches",
    "predicted_parse_explanation": [
      "find the loser rank in matches table"
    ],
    "template_feedback": "find minimum loser rank in place of loser rank .",
    "primary_span": [
      [
        0,
        3
      ]
    ],
    "secondary_span": [
      [
        4,
        9
      ]
    ],
    "edits": [
      "minimum loser rank",
      "loser rank"
    ],
    "edits_original": "< select > add minimum loser rank </ select > < select > remove loser rank </ select >"
  },
  {
    "db_id": "world_1",
    "feedback": "Need to find continent with largest number of distinct languages spoken in it .",
    "question": "Which continent has the most diverse languages?",
    "gold_parse": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1",
    "beam": [
      [
        "SELECT Continent FROM country GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value",
        -0.00014495849609375
      ],
      [
        "SELECT Continent FROM country GROUP BY Region ORDER BY Count ( * ) Desc LIMIT value",
        -10.3721342086792
      ],
      [
        "SELECT Continent FROM country GROUP BY Continent ORDER BY Sum ( Population ) Desc LIMIT value",
        -10.51146125793457
      ],
      [
        "SELECT Continent FROM country GROUP BY LocalName ORDER BY Count ( * ) Desc LIMIT value",
        -10.874995231628418
      ],
      [
        "SELECT Continent FROM country GROUP BY Continent ORDER BY Count ( Population ) Desc LIMIT value",
        -11.255653381347656
      ],
      [
        "SELECT Continent FROM country ORDER BY Population Desc LIMIT value",
        -11.45891284942627
      ],
      [
        "SELECT Continent , Count ( * ) FROM country GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value",
        -11.513825416564941
      ],
      [
        "SELECT T2.Continent FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code GROUP BY T2.Continent ORDER BY Count ( T1.Population ) Desc LIMIT value",
        -11.715453147888184
      ],
      [
        "SELECT Continent , Continent FROM country GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value",
        -11.913078308105469
      ],
      [
        "SELECT Continent FROM country GROUP BY Continent ORDER BY Count ( * ) Desc",
        -12.167367935180664
      ],
      [
        "SELECT Continent , Count ( * ) FROM country GROUP BY Continent",
        -12.669985294342041
      ],
      [
        "SELECT Continent FROM country GROUP BY Continent ORDER BY Count ( DISTINCT LocalName ) Desc LIMIT value",
        -13.670797348022461
      ],
      [
        "SELECT Continent FROM country GROUP BY Continent ORDER BY Count ( LifeExpectancy ) Desc LIMIT value",
        -14.093358993530273
      ],
      [
        "SELECT Continent , Population FROM country GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value",
        -14.18588638305664
      ],
      [
        "SELECT DISTINCT Continent FROM country GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value",
        -14.22431468963623
      ],
      [
        "SELECT Continent FROM country GROUP BY Continent",
        -14.301864624023438
      ],
      [
        "SELECT Continent FROM country WHERE Population = ( SELECT Max ( Population ) FROM country ) GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value",
        -14.322280883789062
      ],
      [
        "SELECT Continent FROM country GROUP BY Continent ORDER BY Count ( * ) Asc LIMIT value",
        -14.529264450073242
      ],
      [
        "SELECT Continent FROM country GROUP BY Continent ORDER BY Count ( LocalName ) Desc LIMIT value",
        -14.557194232940674
      ],
      [
        "SELECT Continent FROM country",
        -17.68507480621338
      ]
    ],
    "predicted_parse_with_values": "SELECT Continent FROM country GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT 1",
    "predicted_parse": "SELECT Continent FROM country GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of continent in country table",
      "Step 2: find the continent in country table with largest value in the results of step 1"
    ],
    "template_feedback": "in step 1 , additionally use the information from the countrylanguage table besides the country table .",
    "primary_span": [
      [
        4,
        11
      ]
    ],
    "secondary_span": [
      [
        12,
        16
      ]
    ],
    "edits": [
      "countrylanguage"
    ],
    "edits_original": "< from > add countrylanguage </ from >"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "feedback": "Need to use id of document in step 1 and 2 and paragraphs table in place of documents table in step 1.",
    "question": "List all document ids with at least two paragraphs.",
    "gold_parse": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2",
    "beam": [
      [
        "SELECT Template_ID FROM Documents GROUP BY Template_ID HAVING Count ( * ) > = value",
        -0.645950436592095
      ],
      [
        "SELECT T1.Template_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T2.Document_ID HAVING Count ( * ) > = value",
        -1.0177632570266653
      ],
      [
        "SELECT T2.Document_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T1.Template_ID HAVING Count ( * ) > = value",
        -3.0931912660598684
      ],
      [
        "SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING Count ( * ) > = value",
        -3.3534966707229543
      ],
      [
        "SELECT Template_ID FROM Documents GROUP BY Document_ID HAVING Count ( * ) > = value",
        -3.7357655763626028
      ],
      [
        "SELECT Document_ID FROM Documents GROUP BY Template_ID HAVING Count ( * ) > = value",
        -5.212732434272759
      ],
      [
        "SELECT T1.Document_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T2.Document_ID HAVING Count ( * ) > = value",
        -6.005626797676079
      ],
      [
        "SELECT T2.Document_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T1.Document_ID HAVING Count ( * ) > = value",
        -6.152787327766411
      ],
      [
        "SELECT Document_ID FROM Documents GROUP BY Document_ID HAVING Count ( * ) > = value",
        -8.727045178413384
      ],
      [
        "SELECT Template_ID FROM Documents GROUP BY Template_ID HAVING Count ( * ) BETWEEN value AND value",
        -12.071867942810059
      ],
      [
        "SELECT T1.Template_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T2.Document_ID HAVING Count ( * ) BETWEEN value AND value",
        -12.57023811340332
      ],
      [
        "SELECT Template_ID FROM Documents GROUP BY Template_ID HAVING Count ( * ) > = value OR Count ( * ) > = value",
        -13.201189279556246
      ],
      [
        "SELECT Template_ID FROM Documents WHERE Document_ID > = value GROUP BY Template_ID HAVING Count ( * ) > = value",
        -13.572022199630737
      ],
      [
        "SELECT Template_ID FROM Documents",
        -13.717341423034668
      ],
      [
        "SELECT T1.Template_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T2.Document_ID HAVING Count ( * ) > = value OR Count ( * ) > = value",
        -13.839102864265435
      ],
      [
        "SELECT T2.Paragraph_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T1.Template_ID HAVING Count ( * ) > = value",
        -13.988953709602349
      ],
      [
        "SELECT Document_Name FROM Documents GROUP BY Template_ID HAVING Count ( * ) > = value",
        -14.10583317279815
      ],
      [
        "SELECT Template_ID FROM Documents WHERE Document_ID > = value",
        -14.26307201385498
      ],
      [
        "SELECT Template_ID FROM Documents GROUP BY Template_ID HAVING Sum ( * ) > = value",
        -14.291767716407769
      ],
      [
        "SELECT Document_ID FROM Paragraphs",
        -16.638667106628418
      ]
    ],
    "predicted_parse_with_values": "SELECT Template_ID FROM Documents GROUP BY Template_ID HAVING Count ( * ) > = 2",
    "predicted_parse": "SELECT Template_ID FROM Documents GROUP BY Template_ID HAVING Count ( * ) > = value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of template id in documents table",
      "Step 2: find the template id in documents table whose corresponding value in step 1 is greater than or equals 2"
    ],
    "template_feedback": "in step 1 , use paragraphs table in place of documents table . find for value of paragraphs 's document id in place of template id . in step 2 , find paragraphs 's document id in place of template id .",
    "primary_span": [
      [
        4,
        6
      ],
      [
        13,
        20
      ],
      [
        31,
        35
      ]
    ],
    "secondary_span": [
      [
        7,
        12
      ],
      [
        21,
        26
      ],
      [
        36,
        41
      ]
    ],
    "edits": [
      "document id",
      "template id",
      "paragraphs",
      "documents",
      "document id",
      "template id"
    ],
    "edits_original": "< select > add document id </ select > < select > remove template id </ select > < from > add paragraphs </ from > < from > remove documents </ from > < groupBy > add document id </ groupBy > < groupBy > remove template id </ groupBy >"
  },
  {
    "db_id": "car_1",
    "feedback": "Use model , car names table , mpg instead of edispl , cars data table , weight respectively .",
    "question": "What is the car wmodel with the highest mpg?",
    "gold_parse": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1",
    "beam": [
      [
        "SELECT Edispl FROM cars_data ORDER BY Weight Desc LIMIT value",
        -0.18555188179016113
      ],
      [
        "SELECT T1.FullName FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id ORDER BY T4.Weight Desc LIMIT value",
        -2.333620071411133
      ],
      [
        "SELECT Edispl FROM cars_data ORDER BY Horsepower Desc LIMIT value",
        -3.3668386936187744
      ],
      [
        "SELECT * FROM cars_data ORDER BY Weight Desc LIMIT value",
        -4.595041275024414
      ],
      [
        "SELECT Weight FROM cars_data ORDER BY Weight Desc LIMIT value",
        -4.697033882141113
      ],
      [
        "SELECT T1.FullName FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id ORDER BY T4.Horsepower Desc LIMIT value",
        -5.539295196533203
      ],
      [
        "SELECT Edispl FROM cars_data ORDER BY Accelerate Desc LIMIT value",
        -5.671544790267944
      ],
      [
        "SELECT Edispl FROM cars_data ORDER BY Cylinders Desc LIMIT value",
        -6.028947591781616
      ],
      [
        "SELECT Edispl FROM cars_data ORDER BY Edispl Desc LIMIT value",
        -6.479242563247681
      ],
      [
        "SELECT T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id ORDER BY T4.Weight Desc LIMIT value",
        -6.627413272857666
      ],
      [
        "SELECT T1.ModelId FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id ORDER BY T3.Weight Desc LIMIT value",
        -6.910162448883057
      ],
      [
        "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id ORDER BY T3.Weight Desc LIMIT value",
        -7.245140552520752
      ],
      [
        "SELECT Weight FROM cars_data ORDER BY Horsepower Desc LIMIT value",
        -7.621344804763794
      ],
      [
        "SELECT MPG FROM cars_data ORDER BY Weight Desc LIMIT value",
        -7.643734455108643
      ],
      [
        "SELECT * FROM cars_data ORDER BY Horsepower Desc LIMIT value",
        -7.661827564239502
      ],
      [
        "SELECT Edispl FROM cars_data ORDER BY MPG Desc LIMIT value",
        -7.910846471786499
      ],
      [
        "SELECT T1.FullName FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id ORDER BY T4.Accelerate Desc LIMIT value",
        -7.9262871742248535
      ],
      [
        "SELECT T1.FullName FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id ORDER BY T4.Cylinders Desc LIMIT value",
        -8.22290849685669
      ],
      [
        "SELECT Horsepower FROM cars_data ORDER BY Weight Desc LIMIT value",
        -8.28031587600708
      ],
      [
        "SELECT T1.Make FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id ORDER BY T2.Weight Desc LIMIT value",
        -8.385914325714111
      ]
    ],
    "predicted_parse_with_values": "SELECT Edispl FROM cars_data ORDER BY Weight Desc LIMIT 1",
    "predicted_parse": "SELECT Edispl FROM cars_data ORDER BY Weight Desc LIMIT value",
    "predicted_parse_explanation": [
      "find the edispl in cars data table with largest value of weight"
    ],
    "template_feedback": "additionally use the information from the car names table besides the cars data table . find model in place of edispl . order the results by mpg in place of weight .",
    "primary_span": [
      [
        0,
        8
      ],
      [
        15,
        16
      ],
      [
        22,
        26
      ]
    ],
    "secondary_span": [
      [
        9,
        14
      ],
      [
        17,
        21
      ],
      [
        27,
        31
      ]
    ],
    "edits": [
      "model",
      "edispl",
      "car names",
      "mpg",
      "weight"
    ],
    "edits_original": "< select > add model </ select > < select > remove edispl </ select > < from > add car names </ from > < orderBy > add mpg </ orderBy > < orderBy > remove weight </ orderBy >"
  },
  {
    "db_id": "flight_2",
    "feedback": "In step 1 , there should be flights table , not airlines table .",
    "question": "Which airlines have at least 10 flights?",
    "gold_parse": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10",
    "beam": [
      [
        "SELECT Airline FROM airlines GROUP BY Airline HAVING Count ( * ) > = value",
        -0.0021257400512695312
      ],
      [
        "SELECT Airline FROM airlines GROUP BY uid HAVING Count ( * ) > = value",
        -6.670986652374268
      ],
      [
        "SELECT Airline FROM airlines GROUP BY Abbreviation HAVING Count ( * ) > = value",
        -7.566471099853516
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 WHERE T2.FlightNo > = value",
        -9.048075199127197
      ],
      [
        "SELECT Airline FROM airlines WHERE Abbreviation > = value",
        -9.657052993774414
      ],
      [
        "SELECT Airline FROM airlines WHERE Airline > = value",
        -9.680182456970215
      ],
      [
        "SELECT Airline FROM airlines WHERE uid > = value",
        -9.980209469795227
      ],
      [
        "SELECT DISTINCT Airline FROM airlines GROUP BY Airline HAVING Count ( * ) > = value",
        -10.906767845153809
      ],
      [
        "SELECT Abbreviation FROM airlines GROUP BY Airline HAVING Count ( * ) > = value",
        -12.192373275756836
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 WHERE T2.Airline > = value",
        -12.644645690917969
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 GROUP BY T2.FlightNo HAVING Count ( * ) > = value",
        -13.252339363098145
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 WHERE T2.FlightNo > = value GROUP BY T1.Airline HAVING Count ( * ) > = value",
        -13.517524719238281
      ],
      [
        "SELECT Airline FROM airlines GROUP BY Count ( * ) HAVING Count ( * ) > = value",
        -13.96053695678711
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 GROUP BY T2.Airline HAVING Count ( * ) > = value",
        -14.171329498291016
      ],
      [
        "SELECT uid FROM airlines GROUP BY Airline HAVING Count ( * ) > = value",
        -14.203873634338379
      ],
      [
        "SELECT Airline FROM airlines",
        -14.274112701416016
      ],
      [
        "SELECT T2.Airline FROM airlines AS T1 JOIN flights AS T2 GROUP BY T1.Airline HAVING Count ( * ) > = value",
        -14.566396713256836
      ],
      [
        "SELECT Airline FROM airlines WHERE Abbreviation > = value GROUP BY Airline HAVING Count ( * ) > = value",
        -14.574969172477722
      ],
      [
        "SELECT Airline FROM airlines WHERE uid > = value GROUP BY Airline HAVING Count ( * ) > = value",
        -14.578145503997803
      ],
      [
        "SELECT Airline FROM airlines GROUP BY Airline , uid HAVING Count ( * ) > = value",
        -15.193833351135254
      ]
    ],
    "predicted_parse_with_values": "SELECT Airline FROM airlines GROUP BY Airline HAVING Count ( * ) > = 10",
    "predicted_parse": "SELECT Airline FROM airlines GROUP BY Airline HAVING Count ( * ) > = value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of airline name in airlines table",
      "Step 2: find the airline name in airlines table whose corresponding value in step 1 is greater than or equals 10"
    ],
    "template_feedback": "in step 1 , additionally use the information from the flights table besides the airlines table . in step 2 , make sure that the corresponding value in step 1 greater than 10 .",
    "primary_span": [
      [
        4,
        11
      ],
      [
        21,
        33
      ]
    ],
    "secondary_span": [
      [
        12,
        16
      ]
    ],
    "edits": [
      "flights",
      "number of rows greater than 10",
      "number of rows greater than or equals to 10"
    ],
    "edits_original": "< from > add flights </ from > < having > add number of rows greater than 10 </ having > < having > remove number of rows greater than or equals to 10 </ having >"
  },
  {
    "db_id": "wta_1",
    "feedback": "I want \" hand as L \".",
    "question": "List the first and last name of all players who are left / L hand in the order of birth date.",
    "gold_parse": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date",
    "beam": [
      [
        "SELECT first_name , last_name FROM players WHERE first_name LIKE value ORDER BY birth_date Asc",
        -0.17728328704833984
      ],
      [
        "SELECT first_name , last_name FROM players WHERE hand = value ORDER BY birth_date Asc",
        -1.857330322265625
      ],
      [
        "SELECT first_name , last_name FROM players WHERE hand LIKE value ORDER BY birth_date Asc",
        -5.529695987701416
      ],
      [
        "SELECT first_name , last_name FROM players WHERE birth_date LIKE value ORDER BY birth_date Asc",
        -7.080506324768066
      ],
      [
        "SELECT first_name , last_name FROM players WHERE first_name = value ORDER BY birth_date Asc",
        -7.193922996520996
      ],
      [
        "SELECT first_name , last_name FROM players WHERE hand ! = value ORDER BY birth_date Asc",
        -8.559157371520996
      ],
      [
        "SELECT first_name , last_name FROM players WHERE birth_date < value ORDER BY birth_date Asc",
        -9.345573425292969
      ],
      [
        "SELECT first_name , last_name FROM players WHERE first_name ! = value ORDER BY birth_date Asc",
        -9.677483081817627
      ],
      [
        "SELECT T1.first_name , T1.last_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.year = value ORDER BY T1.birth_date Asc",
        -10.268651008605957
      ],
      [
        "SELECT first_name , last_name FROM players WHERE birth_date IN ( SELECT birth_date FROM players WHERE hand = value ) ORDER BY birth_date Asc",
        -10.32891035079956
      ],
      [
        "SELECT first_name , last_name FROM players WHERE first_name LIKE value ORDER BY birth_date Asc LIMIT value",
        -10.380885124206543
      ],
      [
        "SELECT first_name , last_name FROM players WHERE birth_date = value ORDER BY birth_date Asc",
        -10.443001747131348
      ],
      [
        "SELECT first_name , last_name FROM players WHERE hand IN ( SELECT birth_date FROM players WHERE hand = value ) ORDER BY birth_date Asc",
        -10.73690128326416
      ],
      [
        "SELECT T1.first_name , T1.last_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_age = value ORDER BY T1.birth_date Asc",
        -10.82180118560791
      ],
      [
        "SELECT first_name , last_name FROM players ORDER BY birth_date Asc",
        -10.87684440612793
      ],
      [
        "SELECT T1.first_name , T1.last_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = value ORDER BY T1.birth_date Asc",
        -10.887648582458496
      ],
      [
        "SELECT T1.first_name , T1.last_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T1.first_name LIKE value ORDER BY T2.loser_age Asc",
        -11.409120559692383
      ],
      [
        "SELECT T1.first_name , T1.last_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_age LIKE value ORDER BY T1.birth_date Asc",
        -11.441039085388184
      ],
      [
        "SELECT T1.first_name , T1.last_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.winner_name = value ORDER BY T1.birth_date Asc",
        -11.454415321350098
      ],
      [
        "SELECT T1.first_name , T1.last_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.winner_age = value ORDER BY T1.birth_date Asc",
        -11.51184368133545
      ]
    ],
    "predicted_parse_with_values": "SELECT first_name , last_name FROM players WHERE first_name LIKE \"L\" ORDER BY birth_date Asc",
    "predicted_parse": "SELECT first_name , last_name FROM players WHERE first_name LIKE value ORDER BY birth_date Asc",
    "predicted_parse_explanation": [
      "find the first name and last name in players table whose first name like L ordered ascending by birth date"
    ],
    "template_feedback": "consider the hand equals L conditions in place of the first name like L conditions .",
    "primary_span": [
      [
        0,
        5
      ]
    ],
    "secondary_span": [
      [
        6,
        15
      ]
    ],
    "edits": [
      "hand equals \"L\"",
      "first name like \"L\""
    ],
    "edits_original": "< where > add hand equals \" L \" </ where > < where > remove first name like \" L \" </ where >"
  },
  {
    "db_id": "world_1",
    "feedback": "Mention total population rather than average population . government form equals US Territory , not continent .",
    "question": "What is the average GNP and total population in all nations whose government is US territory?",
    "gold_parse": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"",
    "beam": [
      [
        "SELECT Avg ( GNP ) , Avg ( Population ) FROM country WHERE Continent = value",
        -0.7094917297363281
      ],
      [
        "SELECT Avg ( GNP ) , Avg ( LifeExpectancy ) FROM country WHERE Continent = value",
        -1.181772232055664
      ],
      [
        "SELECT Avg ( GNP ) , Avg ( GNPOld ) FROM country WHERE Continent = value",
        -1.854736328125
      ],
      [
        "SELECT Avg ( GNP ) , Avg ( Population ) FROM country",
        -4.2104644775390625
      ],
      [
        "SELECT Avg ( GNP ) , Avg ( LifeExpectancy ) FROM country",
        -4.790388107299805
      ],
      [
        "SELECT Avg ( GNP ) , Avg ( GNPOld ) FROM country",
        -5.511762619018555
      ],
      [
        "SELECT Avg ( GNP ) , Avg ( Population ) FROM country GROUP BY GovernmentForm",
        -6.220905303955078
      ],
      [
        "SELECT Avg ( GNP ) , Sum ( Population ) FROM country",
        -6.292924880981445
      ],
      [
        "SELECT Avg ( GNP ) , Avg ( Population ) , GovernmentForm FROM country GROUP BY GovernmentForm",
        -6.350518226623535
      ],
      [
        "SELECT Avg ( GNP ) , Avg ( LifeExpectancy ) FROM country GROUP BY GovernmentForm",
        -6.666109085083008
      ],
      [
        "SELECT Avg ( GNP ) , Avg ( LifeExpectancy ) , GovernmentForm FROM country GROUP BY GovernmentForm",
        -6.801929473876953
      ],
      [
        "SELECT Avg ( GNP ) , Sum ( LifeExpectancy ) FROM country",
        -6.8743743896484375
      ],
      [
        "SELECT Avg ( GNP ) , Avg ( Population ) FROM country WHERE GovernmentForm = value",
        -6.900954246520996
      ],
      [
        "SELECT Avg ( GNP ) , Avg ( Population ) FROM country GROUP BY Continent",
        -7.129888534545898
      ],
      [
        "SELECT Avg ( GNP ) , Avg ( LifeExpectancy ) FROM country WHERE GovernmentForm = value",
        -7.353750228881836
      ],
      [
        "SELECT Avg ( GNP ) , Sum ( GNPOld ) FROM country",
        -7.472251892089844
      ],
      [
        "SELECT Avg ( GNP ) , Avg ( GNPOld ) FROM country GROUP BY GovernmentForm",
        -7.532079696655273
      ],
      [
        "SELECT Avg ( GNP ) , Avg ( LifeExpectancy ) FROM country GROUP BY Continent",
        -7.587650299072266
      ],
      [
        "SELECT Avg ( GNP ) , Avg ( GNPOld ) , GovernmentForm FROM country GROUP BY GovernmentForm",
        -7.72343635559082
      ],
      [
        "SELECT Avg ( GNP ) , Avg ( GNPOld ) FROM country WHERE GovernmentForm = value",
        -7.801552772521973
      ]
    ],
    "predicted_parse_with_values": "SELECT Avg ( GNP ) , Avg ( Population ) FROM country WHERE Continent = \"US Territory\"",
    "predicted_parse": "SELECT Avg ( GNP ) , Avg ( Population ) FROM country WHERE Continent = value",
    "predicted_parse_explanation": [
      "find the average gnp and average population in country table whose continent equals US Territory"
    ],
    "template_feedback": "consider the government form equals US Territory conditions in place of the continent equals US Territory conditions . find summation of population in place of average population .",
    "primary_span": [
      [
        0,
        7
      ],
      [
        18,
        21
      ]
    ],
    "secondary_span": [
      [
        8,
        17
      ],
      [
        22,
        27
      ]
    ],
    "edits": [
      "summation of population",
      "average population",
      "government form equals \"US Territory\"",
      "continent equals \"US Territory\""
    ],
    "edits_original": "< select > add summation of population </ select > < select > remove average population </ select > < where > add government form equals \" US Territory \" </ where > < where > remove continent equals \" US Territory \" </ where >"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "feedback": "In step 1, be certain to use the paragraph's table in place of document's table.",
    "question": "What is the document id and name with greatest number of paragraphs?",
    "gold_parse": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1",
    "beam": [
      [
        "SELECT Document_ID , Document_Name FROM Documents GROUP BY Document_ID ORDER BY Count ( * ) Desc LIMIT value",
        -0.008292198181152344
      ],
      [
        "SELECT T2.Document_ID , T1.Document_Name FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T1.Document_ID ORDER BY Count ( * ) Desc LIMIT value",
        -5.21592903137207
      ],
      [
        "SELECT T1.Document_ID , T1.Document_Name FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T2.Document_ID ORDER BY Count ( * ) Desc LIMIT value",
        -6.024919509887695
      ],
      [
        "SELECT T1.Document_ID , T1.Document_Name FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID ORDER BY T2.Paragraph_Text Desc LIMIT value",
        -9.027552485466003
      ],
      [
        "SELECT T1.Document_ID , T1.Document_Name FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T1.Document_ID , T1.Document_Name , T2.Paragraph_Text ORDER BY Count ( * ) Desc LIMIT value",
        -9.595755815505981
      ],
      [
        "SELECT Template_ID , Document_Name FROM Documents GROUP BY Document_ID ORDER BY Count ( * ) Desc LIMIT value",
        -10.262101173400879
      ],
      [
        "SELECT Document_ID , Document_Name FROM Documents GROUP BY Document_ID HAVING Count ( * ) < value ORDER BY Count ( * ) Desc LIMIT value",
        -10.288417458534234
      ],
      [
        "SELECT Document_ID , Document_Name FROM Documents ORDER BY * Desc LIMIT value",
        -10.418463945388794
      ],
      [
        "SELECT T1.Document_ID , T1.Document_Name FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T1.Document_ID , T1.Document_Name , T2.Paragraph_ID ORDER BY Count ( * ) Desc LIMIT value",
        -10.798699736595154
      ],
      [
        "SELECT Document_ID , Document_Name FROM Documents GROUP BY Document_ID",
        -11.04404354095459
      ],
      [
        "SELECT T2.Document_ID , T1.Document_Name FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T2.Document_ID ORDER BY Count ( * ) Desc LIMIT value",
        -11.26276683807373
      ],
      [
        "SELECT T2.Paragraph_ID , T1.Document_Name FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T1.Document_ID ORDER BY Count ( * ) Desc LIMIT value",
        -11.268988609313965
      ],
      [
        "SELECT Document_ID , Document_Name FROM Documents GROUP BY Document_ID ORDER BY Sum ( * ) Desc LIMIT value",
        -11.92581033706665
      ],
      [
        "SELECT T1.Document_ID , T1.Document_Name FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID ORDER BY T2.Paragraph_ID Desc LIMIT value",
        -12.19052791595459
      ],
      [
        "SELECT Document_ID , Document_Name FROM Documents GROUP BY Template_ID ORDER BY Count ( * ) Desc LIMIT value",
        -12.19310188293457
      ],
      [
        "SELECT T2.Document_ID , T2.Document_Name FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID ORDER BY T1.Version_Number Desc LIMIT value",
        -12.341084718704224
      ],
      [
        "SELECT T2.Document_ID , T2.Document_Name FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID ORDER BY T1.Date_Effective_To Desc LIMIT value",
        -12.358904123306274
      ],
      [
        "SELECT Document_ID , Document_Name FROM Documents GROUP BY Document_ID ORDER BY Count ( * ) Desc",
        -12.679118156433105
      ],
      [
        "SELECT Document_ID , Document_Name FROM Documents GROUP BY Document_ID , Document_Name ORDER BY Count ( * ) Desc LIMIT value",
        -12.770428657531738
      ],
      [
        "SELECT Document_ID , Document_Name FROM Documents GROUP BY Document_ID ORDER BY Count ( * ) Asc LIMIT value",
        -13.37021255493164
      ]
    ],
    "predicted_parse_with_values": "SELECT Document_ID , Document_Name FROM Documents GROUP BY Document_ID ORDER BY Count ( * ) Desc LIMIT 1",
    "predicted_parse": "SELECT Document_ID , Document_Name FROM Documents GROUP BY Document_ID ORDER BY Count ( * ) Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of document id in documents table",
      "Step 2: find the document id and document name in documents table with largest value in the results of step 1"
    ],
    "template_feedback": "in step 1 , additionally use the information from the paragraphs table besides the documents table .",
    "primary_span": [
      [
        4,
        11
      ]
    ],
    "secondary_span": [
      [
        12,
        16
      ]
    ],
    "edits": [
      "paragraphs"
    ],
    "edits_original": "< from > add paragraphs </ from >"
  },
  {
    "db_id": "pets_1",
    "feedback": "weight should be substituted in place of pet age.",
    "question": "Find the number of pets whose weight is heavier than 10.",
    "gold_parse": "SELECT count(*) FROM pets WHERE weight  >  10",
    "beam": [
      [
        "SELECT Count ( * ) FROM Pets WHERE pet_age > value",
        -1.1193914413452148
      ],
      [
        "SELECT Count ( * ) FROM Pets WHERE weight > value AND pet_age > value",
        -1.352564811706543
      ],
      [
        "SELECT Count ( * ) FROM Pets WHERE weight > value",
        -1.5329713821411133
      ],
      [
        "SELECT Count ( * ) FROM Pets WHERE pet_age > value AND pet_age > value",
        -1.9301872253417969
      ],
      [
        "SELECT Count ( * ) FROM Pets WHERE weight > value AND weight > value",
        -3.4731340408325195
      ],
      [
        "SELECT Count ( * ) FROM Pets WHERE pet_age > value AND weight > value",
        -4.0312957763671875
      ],
      [
        "SELECT Count ( * ) FROM Pets WHERE weight > value AND pet_age < value",
        -6.02757453918457
      ],
      [
        "SELECT Count ( * ) FROM Pets WHERE pet_age > value AND pet_age < value",
        -6.44587516784668
      ],
      [
        "SELECT Count ( * ) FROM Pets WHERE weight > value AND weight < value",
        -8.605314254760742
      ],
      [
        "SELECT Count ( * ) FROM Pets WHERE pet_age < value",
        -8.640707969665527
      ],
      [
        "SELECT Count ( * ) FROM Pets WHERE pet_age > value AND weight < value",
        -9.01217269897461
      ],
      [
        "SELECT Count ( * ) FROM Pets WHERE weight > value AND pet_age = value",
        -9.25692081451416
      ],
      [
        "SELECT Count ( * ) FROM Pets WHERE weight > value AND pet_age > = value",
        -9.467572212219238
      ],
      [
        "SELECT Count ( * ) FROM Pets WHERE pet_age > value AND pet_age = value",
        -9.756669998168945
      ],
      [
        "SELECT Count ( * ) FROM Pets WHERE weight < value",
        -9.90180492401123
      ],
      [
        "SELECT Count ( * ) FROM Pets WHERE PetType = value",
        -11.757197856903076
      ],
      [
        "SELECT Count ( * ) FROM Pets WHERE pet_age > = value",
        -12.871660232543945
      ],
      [
        "SELECT Count ( * ) FROM Pets WHERE weight > = value",
        -13.330209732055664
      ],
      [
        "SELECT Count ( * ) FROM Pets WHERE pet_age = value",
        -14.244585990905762
      ],
      [
        "SELECT Count ( * ) FROM Pets WHERE PetID > value",
        -14.403833389282227
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM Pets WHERE pet_age > 10",
    "predicted_parse": "SELECT Count ( * ) FROM Pets WHERE pet_age > value",
    "predicted_parse_explanation": [
      "find the number of rows in pets table whose pet age greater than 10"
    ],
    "template_feedback": "consider the weight greater than 10 conditions in place of the pet age greater than 10 conditions .",
    "primary_span": [
      [
        0,
        6
      ]
    ],
    "secondary_span": [
      [
        7,
        17
      ]
    ],
    "edits": [
      "weight greater than 10",
      "pet age greater than 10"
    ],
    "edits_original": "< where > add weight greater than 10 </ where > < where > remove pet age greater than 10 </ where >"
  },
  {
    "db_id": "world_1",
    "feedback": "find the number of different government forms not the number of rows",
    "question": "How many type of governments are in Africa?",
    "gold_parse": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"",
    "beam": [
      [
        "SELECT Count ( * ) FROM country WHERE Continent = value",
        -1.430511474609375e-05
      ],
      [
        "SELECT Count ( * ) FROM country WHERE Name = value",
        -12.239256858825684
      ],
      [
        "SELECT Count ( DISTINCT GovernmentForm ) FROM country WHERE Continent = value",
        -12.834143161773682
      ],
      [
        "SELECT Count ( DISTINCT Code2 ) FROM country WHERE Continent = value",
        -13.032596111297607
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM country WHERE Continent = value",
        -13.50159740447998
      ],
      [
        "SELECT Name FROM country WHERE Continent = value",
        -14.369575798511505
      ],
      [
        "SELECT Count ( DISTINCT Code ) FROM country WHERE Continent = value",
        -14.6996169090271
      ],
      [
        "SELECT Count ( * ) FROM city",
        -15.18289566040039
      ],
      [
        "SELECT Count ( Code ) FROM country WHERE Continent = value",
        -15.195072174072266
      ],
      [
        "SELECT Sum ( * ) FROM country WHERE Continent = value",
        -15.620953798294067
      ],
      [
        "SELECT Count ( Name ) FROM country WHERE Continent = value",
        -15.721420288085938
      ],
      [
        "SELECT Count ( DISTINCT Name ) FROM country WHERE Continent = value",
        -15.855469226837158
      ],
      [
        "SELECT Count ( * ) FROM country WHERE LocalName = value",
        -15.889697074890137
      ],
      [
        "SELECT Count ( * ) FROM country WHERE Continent > value",
        -15.956009864807129
      ],
      [
        "SELECT Count ( GovernmentForm ) FROM country WHERE Continent = value",
        -16.081902980804443
      ],
      [
        "SELECT Count ( * ) , Continent FROM country WHERE Continent = value",
        -16.125962495803833
      ],
      [
        "SELECT GovernmentForm FROM country WHERE Continent = value",
        -16.306246280670166
      ],
      [
        "SELECT Avg ( * ) FROM country WHERE Continent = value",
        -16.376092672348022
      ],
      [
        "SELECT Count ( Count ( * ) ) FROM country WHERE Continent = value",
        -16.466177940368652
      ],
      [
        "SELECT Sum ( Name ) FROM country WHERE Continent = value",
        -16.47934627532959
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM country WHERE Continent = \"Africa\"",
    "predicted_parse": "SELECT Count ( * ) FROM country WHERE Continent = value",
    "predicted_parse_explanation": [
      "find the number of rows in country table whose continent equals Africa"
    ],
    "template_feedback": "find number of different government form in place of number of rows .",
    "primary_span": [
      [
        0,
        5
      ]
    ],
    "secondary_span": [
      [
        6,
        12
      ]
    ],
    "edits": [
      "number of distinct government form",
      "number of rows"
    ],
    "edits_original": "< select > add number of distinct government form </ select > < select > remove number of rows </ select >"
  },
  {
    "db_id": "flight_2",
    "feedback": "Search number of rows of flights for United airlines whose destination airline equals Aberdeen .",
    "question": "How many United Airlines flights go to City 'Aberdeen'?",
    "gold_parse": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"",
    "beam": [
      [
        "SELECT Count ( * ) FROM airports WHERE Country = value AND City = value",
        -0.29172325134277344
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE City = value AND City = value",
        -2.0444717407226562
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE AirportName = value AND City = value",
        -3.044674873352051
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE City = value",
        -3.164240837097168
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE Country = value AND AirportName = value",
        -3.756077766418457
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE City = value AND AirportName = value",
        -5.84067440032959
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE CountryAbbrev = value AND City = value",
        -6.251038551330566
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE AirportName = value AND AirportName = value",
        -6.549266815185547
      ],
      [
        "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value AND T1.Airline = value",
        -6.909350395202637
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE AirportName = value",
        -6.922629356384277
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE Country = value",
        -7.233105659484863
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE Country = value AND Country = value",
        -8.086799144744873
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE Country = value AND CountryAbbrev = value",
        -8.208579540252686
      ],
      [
        "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.City = value AND T1.Airline = value",
        -8.68086862564087
      ],
      [
        "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value AND T1.Abbreviation = value",
        -8.699493408203125
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE CountryAbbrev = value",
        -12.590426445007324
      ],
      [
        "SELECT Count ( * ) FROM airlines WHERE Country = value",
        -15.311724662780762
      ],
      [
        "SELECT Count ( * ) FROM airlines WHERE Airline = value",
        -15.401689529418945
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE AirportName > value",
        -15.786353588104248
      ],
      [
        "SELECT Country FROM airports WHERE City = value",
        -16.005955696105957
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM airports WHERE Country = \"Aberdeen\" AND City = \"United Airlines\"",
    "predicted_parse": "SELECT Count ( * ) FROM airports WHERE Country = value AND City = value",
    "predicted_parse_explanation": [
      "find the number of rows in airports table whose country equals Aberdeen and city equals United Airlines"
    ],
    "template_feedback": "additionally use the information from the flights table and airlines table besides the airports table . consider the airlines 's airline name equals United Airlines and city equals Aberdeen conditions in place of the city equals United Airlines and airports 's country equals Aberdeen conditions .",
    "primary_span": [
      [
        0,
        10
      ],
      [
        16,
        29
      ]
    ],
    "secondary_span": [
      [
        11,
        15
      ],
      [
        30,
        45
      ]
    ],
    "edits": [
      "flights",
      "airlines",
      "city equals \"Aberdeen\"",
      "airline name equals \"United Airlines\"",
      "country equals \"Aberdeen\"",
      "city equals \"United Airlines\""
    ],
    "edits_original": "< from > add flights </ from > < from > add airlines </ from > < where > add city equals \" Aberdeen \" </ where > < where > add airline name equals \" United Airlines \" </ where > < where > remove country equals \" Aberdeen \" </ where > < where > remove city equals \" United Airlines \" </ where >"
  },
  {
    "db_id": "world_1",
    "feedback": "The country's name name should be Aruba , continent is wrong .",
    "question": "How many languages are spoken in Aruba?",
    "gold_parse": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"",
    "beam": [
      [
        "SELECT Count ( DISTINCT T2.Language ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = value",
        -0.01292562484741211
      ],
      [
        "SELECT Count ( * ) FROM country WHERE Continent = value",
        -5.07408332824707
      ],
      [
        "SELECT Count ( DISTINCT Code2 ) FROM country WHERE Continent = value",
        -5.7182416915893555
      ],
      [
        "SELECT Count ( DISTINCT Code ) FROM country WHERE Continent = value",
        -5.838809013366699
      ],
      [
        "SELECT Count ( DISTINCT T2.Language ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = value",
        -8.024799823760986
      ],
      [
        "SELECT Count ( T2.Language ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = value",
        -10.848948955535889
      ],
      [
        "SELECT Count ( DISTINCT T2.Language ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.LocalName = value",
        -11.190111637115479
      ],
      [
        "SELECT Count ( DISTINCT LocalName ) FROM country WHERE Continent = value",
        -11.565905094146729
      ],
      [
        "SELECT Count ( DISTINCT HeadOfState ) FROM country WHERE Continent = value",
        -12.791707992553711
      ],
      [
        "SELECT Count ( DISTINCT Name ) FROM country WHERE Continent = value",
        -12.904708862304688
      ],
      [
        "SELECT Count ( * ) FROM country WHERE Name = value",
        -12.950751304626465
      ],
      [
        "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = value",
        -13.421528816223145
      ],
      [
        "SELECT Count ( DISTINCT Code ) FROM country WHERE Name = value",
        -13.592507362365723
      ],
      [
        "SELECT Count ( DISTINCT GovernmentForm ) FROM country WHERE Continent = value",
        -13.626266956329346
      ],
      [
        "SELECT Count ( DISTINCT Code2 ) FROM country WHERE Name = value",
        -13.655920028686523
      ],
      [
        "SELECT DISTINCT Count ( DISTINCT T2.Language ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = value",
        -13.814939975738525
      ],
      [
        "SELECT Count ( LocalName ) FROM country WHERE Continent = value",
        -14.349544525146484
      ],
      [
        "SELECT Count ( DISTINCT Language ) FROM countrylanguage",
        -14.364863395690918
      ],
      [
        "SELECT Count ( Code ) FROM country WHERE Continent = value",
        -14.73144245147705
      ],
      [
        "SELECT Sum ( T2.Language ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = value",
        -15.157157182693481
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( DISTINCT T2.Language ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = \"Aruba\"",
    "predicted_parse": "SELECT Count ( DISTINCT T2.Language ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = value",
    "predicted_parse_explanation": [
      "Step 1: for each row in country table , find the corresponding rows in countrylanguage table",
      "Step 2: find the number of different language of the results of step 1 whose continent equals Aruba"
    ],
    "template_feedback": "in step 2 , consider the name equals Aruba conditions in place of the continent equals Aruba conditions . find number of language in place of number of different language .",
    "primary_span": [
      [
        4,
        9
      ],
      [
        19,
        22
      ]
    ],
    "secondary_span": [
      [
        10,
        18
      ],
      [
        23,
        30
      ]
    ],
    "edits": [
      "number of language",
      "number of distinct language",
      "name equals \"Aruba\"",
      "continent equals \"Aruba\""
    ],
    "edits_original": "< select > add number of language </ select > < select > remove number of distinct language </ select > < where > add name equals \" Aruba \" </ where > < where > remove continent equals \" Aruba \" </ where >"
  },
  {
    "db_id": "world_1",
    "feedback": "In step 1, you should replace \"Continent equals Republic\" with \"government form not equals Republic\".",
    "question": "Return the codes of countries that do not speak English and do not have Republics for governments.",
    "gold_parse": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
    "beam": [
      [
        "SELECT T1.Code FROM country AS T1 WHERE T1.Continent = value EXCEPT SELECT T1.Code FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value",
        -0.03331756591796875
      ],
      [
        "SELECT Code FROM country WHERE Continent = value EXCEPT SELECT Code FROM country WHERE LocalName = value",
        -4.635471343994141
      ],
      [
        "SELECT Code FROM country WHERE Continent = value EXCEPT SELECT Code FROM country WHERE GovernmentForm = value",
        -5.24827241897583
      ],
      [
        "SELECT Code FROM country WHERE Continent = value EXCEPT SELECT Code FROM country WHERE Continent = value",
        -5.302222728729248
      ],
      [
        "SELECT T1.Code FROM country AS T1 WHERE T1.GovernmentForm = value EXCEPT SELECT T1.Code FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value",
        -5.452850341796875
      ],
      [
        "SELECT T1.Code FROM country AS T1 WHERE T1.Continent = value EXCEPT SELECT T2.CountryCode FROM countrylanguage AS T2 WHERE T2.Language = value",
        -5.913618087768555
      ],
      [
        "SELECT Code FROM country WHERE Continent = value EXCEPT SELECT Code FROM country WHERE Name = value",
        -6.744379043579102
      ],
      [
        "SELECT T1.Code FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value EXCEPT SELECT T1.Code FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value",
        -6.954869270324707
      ],
      [
        "SELECT T1.Code FROM country AS T1 WHERE T1.Continent = value EXCEPT SELECT T2.CountryCode FROM city AS T2 JOIN country AS T1 ON T2.CountryCode = T1.Code JOIN countrylanguage AS T3 ON T1.Code = T3.CountryCode WHERE T3.Language = value",
        -7.0808515548706055
      ],
      [
        "SELECT T1.Code FROM country AS T1 WHERE T1.Continent = value EXCEPT SELECT T1.Code FROM sqlite_sequence AS T2 JOIN country AS T1 WHERE T2.name = value",
        -7.6565752029418945
      ],
      [
        "SELECT T1.Code FROM country AS T1 WHERE T1.Continent = value EXCEPT SELECT T1.GovernmentForm FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value",
        -8.046679019927979
      ],
      [
        "SELECT T1.Code FROM country AS T1 EXCEPT SELECT T1.Code FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value",
        -8.13156509399414
      ],
      [
        "SELECT T1.Code FROM country AS T1 WHERE T1.Name = value EXCEPT SELECT T1.Code FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value",
        -8.203116416931152
      ],
      [
        "SELECT T1.Code FROM country AS T1 WHERE T1.LocalName = value EXCEPT SELECT T1.Code FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value",
        -8.677698135375977
      ],
      [
        "SELECT Code FROM country WHERE Continent = value EXCEPT SELECT Code FROM country WHERE Capital = value",
        -9.008275985717773
      ],
      [
        "SELECT T1.Code FROM country AS T1 WHERE T1.Code2 = value EXCEPT SELECT T1.Code FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value",
        -9.681838989257812
      ],
      [
        "SELECT T1.Code FROM country AS T1 WHERE T1.Continent = value EXCEPT SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value",
        -9.699368476867676
      ],
      [
        "SELECT Code FROM country WHERE Continent = value EXCEPT SELECT Code FROM country WHERE Population = value",
        -9.87409496307373
      ],
      [
        "SELECT Code FROM country WHERE Continent ! = value ORDER BY Code Desc",
        -9.932547569274902
      ],
      [
        "SELECT Code FROM country WHERE Continent = value EXCEPT SELECT Code FROM country",
        -10.869420528411865
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.Code FROM country AS T1 WHERE T1.Continent = \"Republic\" EXCEPT SELECT T1.Code FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\"",
    "predicted_parse": "SELECT T1.Code FROM country AS T1 WHERE T1.Continent = value EXCEPT SELECT T1.Code FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value",
    "predicted_parse_explanation": [
      "Step 1: find the code in country table whose continent equals Republic",
      "Step 2: for each row in country table , find the corresponding rows in countrylanguage table",
      "Step 3: find the code of the results of step 2 whose language equals English",
      "Step 4: show the rows that are in the results of step 1 but not in the results of step 3"
    ],
    "template_feedback": "in step 1 , consider the government form not equals Republic conditions in place of the continent equals Republic conditions . in step 2 , do not use the country table .",
    "primary_span": [
      [
        4,
        11
      ],
      [
        25,
        31
      ]
    ],
    "secondary_span": [
      [
        12,
        20
      ],
      [
        25,
        31
      ]
    ],
    "edits": [
      "government form not equals to \"Republic\"",
      "continent equals \"Republic\"",
      "countrycode",
      "code",
      "country"
    ],
    "edits_original": "< where > add government form not equals to \" Republic \" </ where > < where > remove continent equals \" Republic \" </ where > < select > add countrycode </ select > < select > remove code </ select > < from > remove country </ from >"
  },
  {
    "db_id": "flight_2",
    "feedback": "Change airlines table and airline to flights table and source airport respectively .",
    "question": "How many flights depart from 'APG'?",
    "gold_parse": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
    "beam": [
      [
        "SELECT Count ( * ) FROM airlines WHERE Airline = value",
        -0.07300567626953125
      ],
      [
        "SELECT Count ( * ) FROM airlines WHERE Abbreviation = value",
        -3.4580142498016357
      ],
      [
        "SELECT Count ( * ) FROM airlines WHERE Country = value",
        -3.580562114715576
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE AirportName = value",
        -5.526644706726074
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE Country = value",
        -5.696045398712158
      ],
      [
        "SELECT Count ( * ) FROM flights WHERE FlightNo = value",
        -5.798588752746582
      ],
      [
        "SELECT Count ( * ) FROM flights WHERE Airline = value",
        -7.8241167068481445
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE CountryAbbrev = value",
        -8.692161560058594
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE City = value",
        -9.801985740661621
      ],
      [
        "SELECT Count ( * ) FROM airlines WHERE uid = value",
        -10.066885948181152
      ],
      [
        "SELECT Count ( * ) FROM flights WHERE SourceAirport = value",
        -12.19169807434082
      ],
      [
        "SELECT Count ( * ) FROM airlines WHERE Airline LIKE value",
        -12.602961540222168
      ],
      [
        "SELECT Count ( * ) FROM flights WHERE DestAirport = value",
        -13.456343650817871
      ],
      [
        "SELECT T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Airline = value",
        -13.882874131202698
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE AirportCode = value",
        -13.960030555725098
      ],
      [
        "SELECT * FROM airlines WHERE Airline = value",
        -14.039906620979309
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM airlines WHERE Airline = value",
        -14.26729965209961
      ],
      [
        "SELECT Avg ( * ) FROM airlines WHERE Airline = value",
        -14.282044172286987
      ],
      [
        "SELECT Count ( * ) FROM airlines",
        -14.455751419067383
      ],
      [
        "SELECT Count ( * ) FROM flights WHERE FlightNo LIKE value",
        -14.600730895996094
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM airlines WHERE Airline = \"APG\"",
    "predicted_parse": "SELECT Count ( * ) FROM airlines WHERE Airline = value",
    "predicted_parse_explanation": [
      "find the number of rows in airlines table whose airline name equals APG"
    ],
    "template_feedback": "use flights table in place of airlines table . consider the source airport equals APG conditions in place of the airlines 's airline name equals APG conditions .",
    "primary_span": [
      [
        0,
        2
      ],
      [
        9,
        15
      ]
    ],
    "secondary_span": [
      [
        3,
        8
      ],
      [
        16,
        27
      ]
    ],
    "edits": [
      "flights",
      "airlines",
      "source airport equals \"APG\"",
      "airline name equals \"APG\""
    ],
    "edits_original": "< from > add flights </ from > < from > remove airlines </ from > < where > add source airport equals \" APG \" </ where > < where > remove airline name equals \" APG \" </ where >"
  },
  {
    "db_id": "world_1",
    "feedback": "For which name equals Angola .",
    "question": "What region does Angola belong to and what is its population?",
    "gold_parse": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"",
    "beam": [
      [
        "SELECT Region , Population FROM country",
        -0.39229488372802734
      ],
      [
        "SELECT Region , LifeExpectancy FROM country",
        -1.7878618240356445
      ],
      [
        "SELECT SurfaceArea , Population FROM country",
        -2.1426849365234375
      ],
      [
        "SELECT LocalName , Population FROM country",
        -4.335333824157715
      ],
      [
        "SELECT SurfaceArea , LocalName FROM country",
        -4.543478965759277
      ],
      [
        "SELECT SurfaceArea , LifeExpectancy FROM country",
        -5.30165958404541
      ],
      [
        "SELECT LocalName , LifeExpectancy FROM country",
        -5.454689979553223
      ],
      [
        "SELECT SurfaceArea , Continent FROM country",
        -5.690313339233398
      ],
      [
        "SELECT Region , LocalName FROM country",
        -6.322770118713379
      ],
      [
        "SELECT Region , Continent FROM country",
        -6.806009292602539
      ],
      [
        "SELECT SurfaceArea , Name FROM country",
        -8.313143730163574
      ],
      [
        "SELECT Region , SurfaceArea FROM country",
        -8.529473304748535
      ],
      [
        "SELECT SurfaceArea , SurfaceArea FROM country",
        -11.079488754272461
      ],
      [
        "SELECT Name , Population FROM country",
        -11.228782653808594
      ],
      [
        "SELECT LocalName , LocalName FROM country",
        -11.252065658569336
      ],
      [
        "SELECT LocalName , Continent FROM country",
        -11.36053466796875
      ],
      [
        "SELECT Region , Name FROM country",
        -11.362567901611328
      ],
      [
        "SELECT SurfaceArea , Region FROM country",
        -11.752213478088379
      ],
      [
        "SELECT Region , Population FROM country WHERE Name = value",
        -11.992228507995605
      ],
      [
        "SELECT SurfaceArea FROM country",
        -14.724045753479004
      ]
    ],
    "predicted_parse_with_values": "SELECT Region , Population FROM country",
    "predicted_parse": "SELECT Region , Population FROM country",
    "predicted_parse_explanation": [
      "find the region and population in country table"
    ],
    "template_feedback": "additionally make sure that name equals Angola .",
    "primary_span": [
      [
        0,
        7
      ]
    ],
    "secondary_span": [],
    "edits": [
      "name equals \"Angola\""
    ],
    "edits_original": "< where > add name equals \" Angola \" </ where >"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "feedback": "no repetition in output",
    "question": "What are the ids of documents that have 2 or more paragraphs?",
    "gold_parse": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2",
    "beam": [
      [
        "SELECT T1.Document_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T2.Document_ID HAVING Count ( * ) > = value",
        -1.4433374404907227
      ],
      [
        "SELECT Document_ID FROM Documents GROUP BY Document_ID HAVING Count ( * ) > = value",
        -1.5262174606323242
      ],
      [
        "SELECT Document_ID FROM Documents GROUP BY Template_ID HAVING Count ( * ) > = value",
        -1.7332448959350586
      ],
      [
        "SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING Count ( * ) > = value",
        -2.544865608215332
      ],
      [
        "SELECT T2.Document_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T1.Document_ID HAVING Count ( * ) > = value",
        -2.650813102722168
      ],
      [
        "SELECT T2.Document_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T1.Template_ID HAVING Count ( * ) > = value",
        -2.733952522277832
      ],
      [
        "SELECT Template_ID FROM Documents GROUP BY Document_ID HAVING Count ( * ) > = value",
        -2.909374237060547
      ],
      [
        "SELECT T1.Template_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T2.Document_ID HAVING Count ( * ) > = value",
        -2.9787492752075195
      ],
      [
        "SELECT Template_ID FROM Documents GROUP BY Template_ID HAVING Count ( * ) > = value",
        -3.0801143646240234
      ],
      [
        "SELECT Document_ID FROM Documents GROUP BY Document_ID HAVING Count ( * ) = value OR Count ( * ) = value",
        -7.027825355529785
      ],
      [
        "SELECT T1.Document_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T2.Document_ID HAVING Count ( * ) = value OR Count ( * ) = value",
        -7.540148735046387
      ],
      [
        "SELECT Document_ID FROM Documents GROUP BY Template_ID HAVING Count ( * ) = value OR Count ( * ) = value",
        -7.778288841247559
      ],
      [
        "SELECT T2.Document_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T1.Document_ID HAVING Count ( * ) = value OR Count ( * ) = value",
        -8.044914245605469
      ],
      [
        "SELECT Template_ID FROM Documents GROUP BY Document_ID HAVING Count ( * ) = value OR Count ( * ) = value",
        -8.349924087524414
      ],
      [
        "SELECT Document_ID FROM Documents GROUP BY Document_ID HAVING Count ( * ) > value",
        -8.570487022399902
      ],
      [
        "SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING Count ( * ) = value OR Count ( * ) = value",
        -8.859893798828125
      ],
      [
        "SELECT Document_ID FROM Documents GROUP BY Document_ID HAVING Count ( * ) < = value",
        -9.093255043029785
      ],
      [
        "SELECT T2.Document_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T1.Template_ID HAVING Count ( * ) = value OR Count ( * ) = value",
        -9.207435607910156
      ],
      [
        "SELECT Document_ID FROM Documents GROUP BY Document_ID HAVING Count ( * ) > value OR Count ( * ) = value",
        -9.308141708374023
      ],
      [
        "SELECT Document_ID FROM Documents",
        -15.379894256591797
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.Document_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T2.Document_ID HAVING Count ( * ) > = 2",
    "predicted_parse": "SELECT T1.Document_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T2.Document_ID HAVING Count ( * ) > = value",
    "predicted_parse_explanation": [
      "Step 1: for each row in documents table , find the corresponding rows in paragraphs table",
      "Step 2: find the number of rows of each value of paragraphs 's document id of the results of step 1",
      "Step 3: find the documents 's document id of the results of step 1 whose corresponding value in step 2 is greater than or equals 2"
    ],
    "template_feedback": "in step 1 , do not use the documents table .",
    "primary_span": [
      [
        4,
        10
      ]
    ],
    "secondary_span": [
      [
        4,
        10
      ]
    ],
    "edits": [
      "documents"
    ],
    "edits_original": "< from > remove documents </ from >"
  },
  {
    "db_id": "network_1",
    "feedback": "search for name of Highschooler's having kyle as a friend and also available in friend table.",
    "question": "Return the names of friends of the high school student Kyle.",
    "gold_parse": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"",
    "beam": [
      [
        "SELECT name FROM Highschooler WHERE grade = value",
        -0.00029277801513671875
      ],
      [
        "SELECT name FROM Highschooler WHERE grade > value",
        -8.152311325073242
      ],
      [
        "SELECT grade FROM Highschooler WHERE grade = value",
        -13.051786422729492
      ],
      [
        "SELECT DISTINCT name FROM Highschooler WHERE grade = value",
        -13.619150161743164
      ],
      [
        "SELECT name , grade FROM Highschooler WHERE grade = value",
        -14.105440139770508
      ],
      [
        "SELECT name FROM Highschooler WHERE grade = value AND name = value",
        -14.355051040649414
      ],
      [
        "SELECT name FROM Highschooler WHERE name = value",
        -14.391742706298828
      ],
      [
        "SELECT name FROM Highschooler WHERE grade < value",
        -14.861861228942871
      ],
      [
        "SELECT name FROM Highschooler WHERE grade > = value",
        -14.976430892944336
      ],
      [
        "SELECT DISTINCT name FROM Highschooler WHERE grade = value",
        -15.63440990447998
      ],
      [
        "SELECT name FROM Highschooler WHERE grade ! = value",
        -15.855828285217285
      ],
      [
        "SELECT name FROM Highschooler",
        -16.50078582763672
      ],
      [
        "SELECT Count ( name ) FROM Highschooler WHERE grade = value",
        -16.53050136566162
      ],
      [
        "SELECT name FROM Highschooler WHERE grade LIKE value",
        -16.6170015335083
      ],
      [
        "SELECT T2.friend_id FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id WHERE T1.grade = value",
        -16.645100593566895
      ],
      [
        "SELECT name FROM Highschooler WHERE grade = value AND grade = value",
        -17.03837776184082
      ],
      [
        "SELECT name FROM Highschooler WHERE grade = value LIMIT value",
        -17.160019874572754
      ],
      [
        "SELECT name FROM Highschooler WHERE DISTINCT grade = value",
        -17.280003547668457
      ],
      [
        "SELECT name FROM Highschooler WHERE grade IN ( SELECT name FROM Highschooler WHERE grade = value )",
        -17.76640224456787
      ],
      [
        "SELECT name FROM Highschooler WHERE grade = value INTERSECT SELECT name FROM Highschooler WHERE grade = value",
        -18.23603343963623
      ]
    ],
    "predicted_parse_with_values": "SELECT name FROM Highschooler WHERE grade = \"Kyle\"",
    "predicted_parse": "SELECT name FROM Highschooler WHERE grade = value",
    "predicted_parse_explanation": [
      "find the name in high schooler table whose grade equals Kyle"
    ],
    "template_feedback": "additionally use the information from the friend table besides the high schooler table . consider the name equals Kyle conditions in place of the grade equals Kyle conditions .",
    "primary_span": [
      [
        0,
        7
      ],
      [
        14,
        19
      ]
    ],
    "secondary_span": [
      [
        8,
        13
      ],
      [
        20,
        28
      ]
    ],
    "edits": [
      "friend",
      "high schooler",
      "name equals \"Kyle\"",
      "grade equals \"Kyle\""
    ],
    "edits_original": "< from > add friend </ from > < from > add high schooler </ from > < where > add name equals \" Kyle \" </ where > < where > remove grade equals \" Kyle \" </ where >"
  },
  {
    "db_id": "concert_singer",
    "feedback": "Use singer table instead of stadium table.",
    "question": "What is the total number of singers?",
    "gold_parse": "SELECT count(*) FROM singer",
    "beam": [
      [
        "SELECT Count ( * ) FROM stadium",
        -3.910064697265625e-05
      ],
      [
        "SELECT Sum ( * ) FROM stadium",
        -10.650087714195251
      ],
      [
        "SELECT Count ( * ) , Is_male FROM singer",
        -13.802892923355103
      ],
      [
        "SELECT Count ( * ) , Count ( * ) FROM stadium",
        -13.821847915649414
      ],
      [
        "SELECT Avg ( * ) FROM stadium",
        -14.170768976211548
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM stadium",
        -14.172357559204102
      ],
      [
        "SELECT Count ( * ) FROM singer WHERE Is_male = value",
        -14.231342852115631
      ],
      [
        "SELECT Count ( * ) FROM singer GROUP BY Is_male",
        -14.438531458377838
      ],
      [
        "SELECT Count ( Count ( * ) ) FROM stadium",
        -15.147602081298828
      ],
      [
        "SELECT Count ( * ) , Name FROM singer",
        -15.251264214515686
      ],
      [
        "SELECT Sum ( Is_male ) FROM singer",
        -15.488133907318115
      ],
      [
        "SELECT Count ( * ) FROM stadium GROUP BY *",
        -15.675745010375977
      ],
      [
        "SELECT Count ( * ) , Country FROM singer",
        -15.718810081481934
      ],
      [
        "SELECT Count ( * ) FROM singer GROUP BY Country",
        -15.75999903678894
      ],
      [
        "SELECT Sum ( Age ) FROM singer",
        -16.31625747680664
      ],
      [
        "SELECT Sum ( Name ) FROM singer",
        -16.379499435424805
      ],
      [
        "SELECT Count ( * ) FROM singer ORDER BY Age Desc",
        -16.599579334259033
      ],
      [
        "SELECT Max ( * ) FROM stadium",
        -16.65291142463684
      ],
      [
        "SELECT Count ( Avg ( * ) ) FROM stadium",
        -16.814387321472168
      ],
      [
        "SELECT Count ( * ) FROM stadium LIMIT value",
        -17.040297508239746
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM stadium",
    "predicted_parse": "SELECT Count ( * ) FROM stadium",
    "predicted_parse_explanation": [
      "find the number of rows in stadium table"
    ],
    "template_feedback": "use singer table in place of stadium table .",
    "primary_span": [
      [
        0,
        2
      ]
    ],
    "secondary_span": [
      [
        3,
        8
      ]
    ],
    "edits": [
      "singer",
      "stadium"
    ],
    "edits_original": "< from > add singer </ from > < from > remove stadium </ from >"
  },
  {
    "db_id": "network_1",
    "feedback": "Instead of grade use name .",
    "question": "Show the ID of the high schooler named Kyle.",
    "gold_parse": "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\"",
    "beam": [
      [
        "SELECT ID FROM Highschooler WHERE grade = value",
        -0.42580509185791016
      ],
      [
        "SELECT ID FROM Highschooler WHERE name = value",
        -1.7877216339111328
      ],
      [
        "SELECT ID FROM Highschooler WHERE grade = value AND name = value",
        -2.1800785064697266
      ],
      [
        "SELECT T2.liked_id FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id WHERE T1.grade = value AND T1.name = value",
        -3.4980621337890625
      ],
      [
        "SELECT T2.liked_id FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id WHERE T1.grade = value",
        -3.6781625747680664
      ],
      [
        "SELECT ID FROM Highschooler WHERE name = value AND name = value",
        -5.621843338012695
      ],
      [
        "SELECT T2.liked_id FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id WHERE T1.name = value",
        -5.845587730407715
      ],
      [
        "SELECT ID FROM Highschooler WHERE grade = value AND grade = value",
        -6.087043762207031
      ],
      [
        "SELECT T2.liked_id FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id WHERE T1.grade = value AND T1.grade = value",
        -7.362665176391602
      ],
      [
        "SELECT ID FROM Highschooler WHERE name = value AND grade = value",
        -7.470881462097168
      ],
      [
        "SELECT T2.liked_id FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id WHERE T1.name = value AND T1.name = value",
        -7.762200355529785
      ],
      [
        "SELECT T2.student_id FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id WHERE T1.grade = value",
        -8.727033615112305
      ],
      [
        "SELECT T2.student_id FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id WHERE T1.name = value",
        -8.903251647949219
      ],
      [
        "SELECT T2.liked_id FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id WHERE T1.name = value AND T1.grade = value",
        -9.638277053833008
      ],
      [
        "SELECT T2.student_id FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id WHERE T1.grade = value AND T1.name = value",
        -10.113725662231445
      ],
      [
        "SELECT ID FROM Highschooler WHERE grade < value",
        -12.886335372924805
      ],
      [
        "SELECT ID FROM Highschooler WHERE grade > value",
        -13.401906967163086
      ],
      [
        "SELECT ID FROM Highschooler WHERE grade > = value",
        -13.427701950073242
      ],
      [
        "SELECT T2.liked_id FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id WHERE T1.grade > = value",
        -14.417043685913086
      ],
      [
        "SELECT DISTINCT ID FROM Highschooler WHERE grade = value",
        -14.450942993164062
      ]
    ],
    "predicted_parse_with_values": "SELECT ID FROM Highschooler WHERE grade = \"Kyle\"",
    "predicted_parse": "SELECT ID FROM Highschooler WHERE grade = value",
    "predicted_parse_explanation": [
      "find the id in high schooler table whose grade equals Kyle"
    ],
    "template_feedback": "consider the name equals Kyle conditions in place of the grade equals Kyle conditions .",
    "primary_span": [
      [
        0,
        5
      ]
    ],
    "secondary_span": [
      [
        6,
        14
      ]
    ],
    "edits": [
      "name equals \"Kyle\"",
      "grade equals \"Kyle\""
    ],
    "edits_original": "< where > add name equals \" Kyle \" </ where > < where > remove grade equals \" Kyle \" </ where >"
  },
  {
    "db_id": "tvshow",
    "feedback": "Take id in place of content and directed by in place of written by .",
    "question": "What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?",
    "gold_parse": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'",
    "beam": [
      [
        "SELECT T1.Content FROM TV_Channel AS T1 EXCEPT SELECT T1.Content FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value",
        -0.20060348510742188
      ],
      [
        "SELECT T1.Content FROM TV_Channel AS T1 EXCEPT SELECT T2.Channel FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T2.Channel = T1.id JOIN Cartoon AS T3 ON T1.id = T3.Channel WHERE T3.Written_by = value",
        -2.1916732788085938
      ],
      [
        "SELECT T1.Content FROM TV_Channel AS T1 EXCEPT SELECT T1.Content FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = value",
        -2.9356813430786133
      ],
      [
        "SELECT T1.Content FROM TV_Channel AS T1 EXCEPT SELECT T2.Channel FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T2.Channel = T1.id JOIN Cartoon AS T3 ON T1.id = T3.Channel WHERE T3.Directed_by = value",
        -4.76685905456543
      ],
      [
        "SELECT T1.Content FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value EXCEPT SELECT T1.Content FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value",
        -5.495960235595703
      ],
      [
        "SELECT T1.Content FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by ! = value",
        -6.568564414978027
      ],
      [
        "SELECT T1.Content FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value EXCEPT SELECT T3.Channel FROM TV_Channel AS T1 JOIN TV_series AS T3 ON T3.Channel = T1.id JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value",
        -7.033674240112305
      ],
      [
        "SELECT T1.Channel FROM TV_series AS T1 EXCEPT SELECT T2.Content FROM TV_Channel AS T2 JOIN Cartoon AS T3 ON T2.id = T3.Channel WHERE T3.Written_by = value",
        -7.039459228515625
      ],
      [
        "SELECT T1.Content FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value EXCEPT SELECT T1.Content FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = value",
        -8.145288467407227
      ],
      [
        "SELECT T1.id FROM TV_Channel AS T1 EXCEPT SELECT T1.Content FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value",
        -8.621097564697266
      ],
      [
        "SELECT T1.Channel FROM TV_series AS T1 EXCEPT SELECT T1.Channel FROM TV_Channel AS T2 JOIN TV_series AS T1 ON T1.Channel = T2.id JOIN Cartoon AS T3 ON T2.id = T3.Channel WHERE T3.Written_by = value",
        -9.076467514038086
      ],
      [
        "SELECT T1.Content FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value EXCEPT SELECT T3.Channel FROM TV_Channel AS T1 JOIN TV_series AS T3 ON T3.Channel = T1.id JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = value",
        -9.515043258666992
      ],
      [
        "SELECT T1.Channel FROM TV_series AS T1 EXCEPT SELECT T2.Content FROM TV_Channel AS T2 JOIN Cartoon AS T3 ON T2.id = T3.Channel WHERE T3.Directed_by = value",
        -9.779906272888184
      ],
      [
        "SELECT T1.id FROM TV_series AS T1 EXCEPT SELECT T2.Content FROM TV_Channel AS T2 JOIN Cartoon AS T3 ON T2.id = T3.Channel WHERE T3.Written_by = value",
        -10.359973907470703
      ],
      [
        "SELECT T1.Content FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value AND T2.Directed_by = value",
        -10.407402038574219
      ],
      [
        "SELECT T1.Content FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by ! = value",
        -10.429327964782715
      ],
      [
        "SELECT T1.id FROM TV_Channel AS T1 EXCEPT SELECT T2.Channel FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T2.Channel = T1.id JOIN Cartoon AS T3 ON T1.id = T3.Channel WHERE T3.Written_by = value",
        -10.653897285461426
      ],
      [
        "SELECT T1.Content FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value AND T2.Written_by = value",
        -10.774169921875
      ],
      [
        "SELECT T1.Content FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value",
        -10.909226417541504
      ],
      [
        "SELECT T2.Channel FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T2.Channel = T1.id JOIN Cartoon AS T3 ON T1.id = T3.Channel WHERE T3.Written_by ! = value",
        -13.97710132598877
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.Content FROM TV_Channel AS T1 EXCEPT SELECT T1.Content FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = \"Ben Jones\"",
    "predicted_parse": "SELECT T1.Content FROM TV_Channel AS T1 EXCEPT SELECT T1.Content FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value",
    "predicted_parse_explanation": [
      "Step 1: find the content in tv channel table",
      "Step 2: for each row in tv channel table , find the corresponding rows in cartoon table",
      "Step 3: find the content of the results of step 2 whose written by equals Ben Jones",
      "Step 4: show the rows that are in the results of step 1 but not in the results of step 3"
    ],
    "template_feedback": "in step 1 , find id in place of content . in step 2 , do not use the tv channel table . in step 3 , consider the directed by equals Ben Jones conditions in place of the written by equals Ben Jones conditions . find channel in place of content .",
    "primary_span": [
      [
        4,
        5
      ],
      [
        15,
        22
      ],
      [
        27,
        34
      ],
      [
        46,
        47
      ]
    ],
    "secondary_span": [
      [
        6,
        10
      ],
      [
        15,
        22
      ],
      [
        35,
        45
      ],
      [
        48,
        52
      ]
    ],
    "edits": [
      "id",
      "content",
      "channel",
      "content",
      "tv channel",
      "directed by equals \"Ben Jones\"",
      "written by equals \"Ben Jones\""
    ],
    "edits_original": "< select > add id </ select > < select > remove content </ select > < select > add channel </ select > < select > remove content </ select > < from > remove tv channel </ from > < where > add directed by equals \" Ben Jones \" </ where > < where > remove written by equals \" Ben Jones \" </ where >"
  },
  {
    "db_id": "flight_2",
    "feedback": "Change airports table with flights table and airport name with destination airport .",
    "question": "What are airlines that have flights arriving at airport 'AHD'?",
    "gold_parse": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"",
    "beam": [
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = value",
        -0.0056324005126953125
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value",
        -5.307849407196045
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = value AND T2.AirportName = value",
        -8.237330436706543
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 WHERE T2.FlightNo = value",
        -8.928245544433594
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = value AND T2.Country = value",
        -9.198027729988098
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.CountryAbbrev = value",
        -9.808980941772461
      ],
      [
        "SELECT Airline FROM airlines WHERE Country = value",
        -10.126477241516113
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = value AND T1.Airline = value",
        -10.81570291519165
      ],
      [
        "SELECT Airline FROM airlines WHERE Airline = value",
        -11.514955520629883
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName LIKE value",
        -12.753732681274414
      ],
      [
        "SELECT Airline FROM airlines WHERE Abbreviation = value",
        -13.120084762573242
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName < value",
        -13.12451422214508
      ],
      [
        "SELECT Airline FROM airlines WHERE Airline < value",
        -13.439179301261902
      ],
      [
        "SELECT DISTINCT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = value",
        -13.509428024291992
      ],
      [
        "SELECT DISTINCT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = value",
        -13.675683975219727
      ],
      [
        "SELECT Airline FROM airlines WHERE Airline LIKE value",
        -13.820025444030762
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 WHERE T2.FlightNo < value",
        -13.997389078140259
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.City = value",
        -14.899765968322754
      ],
      [
        "SELECT T2.Airline FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.AirportName = value",
        -15.361105918884277
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 WHERE T2.Airline = value",
        -15.675479888916016
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = \"AHD\"",
    "predicted_parse": "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = value",
    "predicted_parse_explanation": [
      "Step 1: for each row in airlines table , find the corresponding rows in airports table",
      "Step 2: find the airline name of the results of step 1 whose airport name equals AHD"
    ],
    "template_feedback": "in step 1 , use flights table in place of airports table in step 2 , consider the destination airport equals AHD conditions in place of the airport name equals AHD conditions .",
    "primary_span": [
      [
        4,
        6
      ],
      [
        16,
        22
      ]
    ],
    "secondary_span": [
      [
        7,
        11
      ],
      [
        23,
        32
      ]
    ],
    "edits": [
      "flights",
      "airports",
      "destination airport equals \"AHD\"",
      "airport name equals \"AHD\""
    ],
    "edits_original": "< from > add flights </ from > < from > remove airports </ from > < where > add destination airport equals \" AHD \" </ where > < where > remove airport name equals \" AHD \" </ where >"
  },
  {
    "db_id": "tvshow",
    "feedback": "order by original air date and replace title with production code .",
    "question": "What is the produdction code and channel of the most recent cartoon?",
    "gold_parse": "SELECT production_code ,  channel FROM cartoon ORDER BY original_air_date LIMIT 1",
    "beam": [
      [
        "SELECT Title , Channel FROM Cartoon GROUP BY Channel ORDER BY Count ( * ) Desc LIMIT value",
        -0.4143190383911133
      ],
      [
        "SELECT T1.Content , T2.Channel FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel GROUP BY T2.Channel ORDER BY Count ( * ) Desc LIMIT value",
        -2.1167850494384766
      ],
      [
        "SELECT T2.Episode , T3.Channel FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T2.Channel = T1.id JOIN Cartoon AS T3 ON T1.id = T3.Channel GROUP BY T3.Channel ORDER BY Count ( * ) Desc LIMIT value",
        -2.5218076705932617
      ],
      [
        "SELECT T2.Title , T2.Channel FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel GROUP BY T1.Content ORDER BY Count ( * ) Desc LIMIT value",
        -3.229672431945801
      ],
      [
        "SELECT T3.Title , T3.Channel FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T2.Channel = T1.id JOIN Cartoon AS T3 ON T1.id = T3.Channel GROUP BY T2.Channel ORDER BY Count ( * ) Desc LIMIT value",
        -3.3441529273986816
      ],
      [
        "SELECT T1.Content , T2.Channel FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel GROUP BY T1.Content ORDER BY Count ( * ) Desc LIMIT value",
        -4.974571704864502
      ],
      [
        "SELECT T1.Content , T3.Channel FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel JOIN Cartoon AS T3 ON T1.id = T3.Channel GROUP BY T2.Channel ORDER BY Count ( * ) Desc LIMIT value",
        -5.043280124664307
      ],
      [
        "SELECT T2.Episode , T3.Channel FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel JOIN Cartoon AS T3 ON T1.id = T3.Channel GROUP BY T1.Content ORDER BY Count ( * ) Desc LIMIT value",
        -5.058856010437012
      ],
      [
        "SELECT T1.Language , T2.Channel FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel GROUP BY T2.Channel ORDER BY Count ( * ) Desc LIMIT value",
        -5.177303314208984
      ],
      [
        "SELECT Production_code , Channel FROM Cartoon GROUP BY Channel ORDER BY Count ( * ) Desc LIMIT value",
        -5.283632278442383
      ],
      [
        "SELECT T3.Title , T3.Channel FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T2.Channel = T1.id JOIN Cartoon AS T3 ON T1.id = T3.Channel GROUP BY T2.Episode ORDER BY Count ( * ) Desc LIMIT value",
        -5.2862019538879395
      ],
      [
        "SELECT T2.Title , T2.Channel FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel GROUP BY T1.id ORDER BY Count ( * ) Desc LIMIT value",
        -5.364205837249756
      ],
      [
        "SELECT T2.Episode , T3.Channel FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T2.Channel = T1.id JOIN Cartoon AS T3 ON T1.id = T3.Channel GROUP BY T2.Channel ORDER BY Count ( * ) Desc LIMIT value",
        -5.399739742279053
      ],
      [
        "SELECT T2.Title , T2.Channel FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel GROUP BY T1.Language ORDER BY Count ( * ) Desc LIMIT value",
        -5.52885627746582
      ],
      [
        "SELECT T2.Title , T2.Channel FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel GROUP BY T1.series_name ORDER BY Count ( * ) Desc LIMIT value",
        -6.064836025238037
      ],
      [
        "SELECT T3.Title , T2.Channel FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T2.Channel = T1.id JOIN Cartoon AS T3 ON T1.id = T3.Channel GROUP BY T3.Channel ORDER BY Count ( * ) Desc LIMIT value",
        -6.882508277893066
      ],
      [
        "SELECT T1.Content , T3.Channel FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel JOIN Cartoon AS T3 ON T1.id = T3.Channel GROUP BY T2.Episode ORDER BY Count ( * ) Desc LIMIT value",
        -7.032698631286621
      ],
      [
        "SELECT T1.Content , T2.Channel FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel GROUP BY T1.id ORDER BY Count ( * ) Desc LIMIT value",
        -7.06144380569458
      ],
      [
        "SELECT T2.Title , T2.Channel FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel GROUP BY T1.Country ORDER BY Count ( * ) Desc LIMIT value",
        -7.1087493896484375
      ],
      [
        "SELECT T1.Content , T2.Channel FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel GROUP BY T1.Language ORDER BY Count ( * ) Desc LIMIT value",
        -7.273665428161621
      ]
    ],
    "predicted_parse_with_values": "SELECT Title , Channel FROM Cartoon GROUP BY Channel ORDER BY Count ( * ) Desc LIMIT 1",
    "predicted_parse": "SELECT Title , Channel FROM Cartoon GROUP BY Channel ORDER BY Count ( * ) Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of channel in cartoon table",
      "Step 2: find the title and channel in cartoon table with largest value in the results of step 1"
    ],
    "template_feedback": "in step 1 , do not find for each value of channel . in step 2 , find production code in place of title . order the results ascending by original air date in place of ordering descending by number of rows .",
    "primary_span": [
      [
        4,
        12
      ],
      [
        17,
        19
      ],
      [
        25,
        32
      ]
    ],
    "secondary_span": [
      [
        20,
        24
      ],
      [
        33,
        42
      ]
    ],
    "edits": [
      "production code",
      "title",
      "channel",
      "original air date",
      "number of rows",
      "descending"
    ],
    "edits_original": "< select > add production code </ select > < select > remove title </ select > < groupBy > remove channel </ groupBy > < orderBy > add original air date </ orderBy > < orderBy > remove number of rows </ orderBy > < orderBy > remove descending </ orderBy >"
  },
  {
    "db_id": "car_1",
    "feedback": "i want continents table from step 1 and verify that country is continent europe in step 2.",
    "question": "Which countries in europe have at least 3 car manufacturers?",
    "gold_parse": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3",
    "beam": [
      [
        "SELECT T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country GROUP BY T2.Country HAVING Count ( * ) > = value",
        -0.0783843994140625
      ],
      [
        "SELECT Country FROM car_makers GROUP BY Country HAVING Count ( * ) > = value",
        -2.61350154876709
      ],
      [
        "SELECT T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country WHERE T2.Country = value GROUP BY T2.Country HAVING Count ( * ) > = value",
        -6.202325820922852
      ],
      [
        "SELECT T1.Continent FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country GROUP BY T2.Country HAVING Count ( * ) > = value",
        -9.711562156677246
      ],
      [
        "SELECT T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country GROUP BY T2.Country HAVING Count ( * ) > = value UNION SELECT T2.Country FROM car_makers AS T2 GROUP BY T2.Country HAVING Count ( * ) > = value",
        -12.028555870056152
      ],
      [
        "SELECT Country FROM car_makers WHERE Country = value GROUP BY Country HAVING Count ( * ) > = value",
        -12.154799699783325
      ],
      [
        "SELECT Country FROM car_makers WHERE FullName = value GROUP BY Country HAVING Count ( * ) > = value",
        -12.435397386550903
      ],
      [
        "SELECT T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country WHERE T2.Country = value",
        -14.062153339385986
      ],
      [
        "SELECT T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country GROUP BY T2.Country HAVING Count ( * ) > = value EXCEPT SELECT T2.Country FROM car_makers AS T2",
        -14.097752571105957
      ],
      [
        "SELECT T1.Country FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker WHERE T2.Model = value GROUP BY T1.Country HAVING Count ( * ) > = value",
        -14.108533143997192
      ],
      [
        "SELECT Country FROM car_makers WHERE Maker = value GROUP BY Country HAVING Count ( * ) > = value",
        -14.121694803237915
      ],
      [
        "SELECT T1.Country FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker WHERE T2.ModelId = value GROUP BY T1.Country HAVING Count ( * ) > = value",
        -14.228947877883911
      ],
      [
        "SELECT DISTINCT T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country GROUP BY T2.Country HAVING Count ( * ) > = value",
        -14.379446029663086
      ],
      [
        "SELECT T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country AND T1.CountryId = T2.Country JOIN model_list AS T3 ON T2.Id = T3.Maker WHERE T3.Model = value GROUP BY T2.Country HAVING Count ( * ) > = value",
        -14.698403358459473
      ],
      [
        "SELECT T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country WHERE T2.FullName = value GROUP BY T2.Country HAVING Count ( * ) > = value",
        -14.859634399414062
      ],
      [
        "SELECT T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country GROUP BY T2.Country HAVING Count ( * ) > value",
        -14.930883407592773
      ],
      [
        "SELECT T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country GROUP BY T2.Country , T2.Country HAVING Count ( * ) > = value",
        -15.077064037322998
      ],
      [
        "SELECT T2.Country , T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country GROUP BY T2.Country HAVING Count ( * ) > = value",
        -15.166639029979706
      ],
      [
        "SELECT T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country GROUP BY T2.Country HAVING Count ( * ) > = value EXCEPT SELECT T1.CountryName FROM countries AS T1",
        -15.238415718078613
      ],
      [
        "SELECT CountryName FROM countries",
        -15.551207542419434
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country GROUP BY T2.Country HAVING Count ( * ) > = 3",
    "predicted_parse": "SELECT T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country GROUP BY T2.Country HAVING Count ( * ) > = value",
    "predicted_parse_explanation": [
      "Step 1: for each row in countries table , find the corresponding rows in car makers table",
      "Step 2: find the number of rows of each value of country of the results of step 1",
      "Step 3: find the country name of the results of step 1 whose corresponding value in step 2 is greater than or equals 3"
    ],
    "template_feedback": "in step 1 , additionally use the information from the continents table . in step 2 , find for value of country name in place of country . in step 3 , additionally make sure that continents 's continent equals europe .",
    "primary_span": [
      [
        4,
        12
      ],
      [
        17,
        22
      ],
      [
        32,
        41
      ]
    ],
    "secondary_span": [
      [
        23,
        27
      ]
    ],
    "edits": [
      "continents",
      "continent equals \"europe\"",
      "country name",
      "country"
    ],
    "edits_original": "< from > add continents </ from > < where > add continent equals \" europe \" </ where > < groupBy > add country name </ groupBy > < groupBy > remove country </ groupBy >"
  },
  {
    "db_id": "network_1",
    "feedback": "likes not Friends",
    "question": "How many likes correspond to each student id?",
    "gold_parse": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id",
    "beam": [
      [
        "SELECT student_id , Count ( * ) FROM Friend GROUP BY student_id",
        -0.08905220031738281
      ],
      [
        "SELECT T1.ID , Count ( * ) FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id",
        -3.2234904766082764
      ],
      [
        "SELECT T2.student_id , Count ( * ) FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T1.ID",
        -4.233128070831299
      ],
      [
        "SELECT Count ( * ) , student_id FROM Friend GROUP BY student_id",
        -4.396188259124756
      ],
      [
        "SELECT T3.liked_id , Count ( * ) FROM Highschooler AS T1 JOIN Friend AS T2 ON T2.student_id = T1.ID JOIN Likes AS T3 ON T1.ID = T3.liked_id GROUP BY T2.student_id",
        -4.452763080596924
      ],
      [
        "SELECT friend_id , Count ( * ) FROM Friend GROUP BY student_id",
        -6.632693290710449
      ],
      [
        "SELECT T3.student_id , Count ( * ) FROM Highschooler AS T1 JOIN Friend AS T2 ON T2.student_id = T1.ID JOIN Likes AS T3 ON T1.ID = T3.liked_id GROUP BY T2.student_id",
        -6.75197172164917
      ],
      [
        "SELECT T1.ID , T2.student_id FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id",
        -6.893857717514038
      ],
      [
        "SELECT T1.name , Count ( * ) FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id",
        -7.379167079925537
      ],
      [
        "SELECT ID , Count ( * ) FROM Highschooler GROUP BY ID",
        -7.45610785484314
      ],
      [
        "SELECT T2.student_id , Count ( * ) FROM Highschooler AS T1 JOIN Friend AS T2 ON T2.student_id = T1.ID JOIN Likes AS T3 ON T1.ID = T3.liked_id GROUP BY T3.liked_id",
        -8.118314743041992
      ],
      [
        "SELECT Count ( * ) , T3.liked_id FROM Highschooler AS T1 JOIN Friend AS T2 ON T2.student_id = T1.ID JOIN Likes AS T3 ON T1.ID = T3.liked_id GROUP BY T2.student_id",
        -8.30510950088501
      ],
      [
        "SELECT Count ( * ) , T2.student_id FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T1.ID",
        -8.501585960388184
      ],
      [
        "SELECT T2.liked_id , Count ( * ) FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id GROUP BY T1.ID",
        -8.567723751068115
      ],
      [
        "SELECT student_id , Count ( * ) FROM Friend GROUP BY friend_id",
        -8.635260581970215
      ],
      [
        "SELECT Count ( * ) , T1.ID FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id",
        -8.776897430419922
      ],
      [
        "SELECT T2.student_id , Count ( * ) FROM Highschooler AS T1 JOIN Friend AS T2 ON T2.student_id = T1.ID JOIN Likes AS T3 ON T1.ID = T3.liked_id GROUP BY T3.student_id",
        -8.895824432373047
      ],
      [
        "SELECT student_id FROM Friend GROUP BY student_id",
        -10.22272777557373
      ],
      [
        "SELECT Count ( * ) FROM Friend GROUP BY student_id",
        -10.737102508544922
      ],
      [
        "SELECT Count ( * ) FROM Highschooler",
        -11.28873872756958
      ]
    ],
    "predicted_parse_with_values": "SELECT student_id , Count ( * ) FROM Friend GROUP BY student_id",
    "predicted_parse": "SELECT student_id , Count ( * ) FROM Friend GROUP BY student_id",
    "predicted_parse_explanation": [
      "find each value of student id in friend table along with the number of the corresponding rows to each value"
    ],
    "template_feedback": "use likes table in place of friend table .",
    "primary_span": [
      [
        0,
        2
      ]
    ],
    "secondary_span": [
      [
        3,
        8
      ]
    ],
    "edits": [
      "likes",
      "friend"
    ],
    "edits_original": "< from > add likes </ from > < from > remove friend </ from >"
  },
  {
    "db_id": "world_1",
    "feedback": "Change government form with name name , Ensure population greater than country whose Continent's name name equals Africa .",
    "question": "What are the Asian countries which have a population larger than that of any country in Africa?",
    "gold_parse": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT min(population) FROM country WHERE Continent  =  \"Africa\")",
    "beam": [
      [
        "SELECT GovernmentForm FROM country WHERE Continent = value AND Population > value",
        -1.3859500885009766
      ],
      [
        "SELECT GovernmentForm FROM country WHERE Population > ( SELECT Max ( Population ) FROM country WHERE Continent = value ) AND Population > value",
        -1.6087026596069336
      ],
      [
        "SELECT GovernmentForm FROM country WHERE Population > ( SELECT Max ( Population ) FROM country WHERE Continent = value )",
        -2.0273256301879883
      ],
      [
        "SELECT GovernmentForm FROM country WHERE Population > ( SELECT Population FROM country WHERE Continent = value )",
        -2.3336963653564453
      ],
      [
        "SELECT GovernmentForm FROM country WHERE Population > ( SELECT Population FROM country WHERE Continent = value ) AND Population > value",
        -2.355733871459961
      ],
      [
        "SELECT Name FROM country WHERE Continent = value AND Population > value",
        -2.7988991737365723
      ],
      [
        "SELECT Continent FROM country WHERE Population > ( SELECT Max ( Population ) FROM country WHERE Continent = value )",
        -3.0762743949890137
      ],
      [
        "SELECT Continent FROM country WHERE Population > ( SELECT Population FROM country WHERE Continent = value )",
        -3.3071494102478027
      ],
      [
        "SELECT Name FROM country WHERE Population > ( SELECT Max ( Population ) FROM country WHERE Continent = value ) AND Population > value",
        -3.945279598236084
      ],
      [
        "SELECT GovernmentForm FROM country WHERE Continent = value AND Population > ( SELECT Max ( Population ) FROM country WHERE Continent = value )",
        -4.025668144226074
      ],
      [
        "SELECT GovernmentForm FROM country WHERE Population > value AND Continent = value",
        -4.687941551208496
      ],
      [
        "SELECT Name FROM country WHERE Population > ( SELECT Population FROM country WHERE Continent = value ) AND Population > value",
        -4.828161716461182
      ],
      [
        "SELECT GovernmentForm FROM country WHERE Continent = value AND Population > ( SELECT Population FROM country WHERE Continent = value )",
        -5.536277770996094
      ],
      [
        "SELECT Name FROM country WHERE Continent = value AND Population > ( SELECT Max ( Population ) FROM country WHERE Continent = value )",
        -5.564478397369385
      ],
      [
        "SELECT Name FROM country WHERE Population > ( SELECT Max ( Population ) FROM country WHERE Continent = value )",
        -6.1178879737854
      ],
      [
        "SELECT Name FROM country WHERE Population > ( SELECT Population FROM country WHERE Continent = value )",
        -6.608609676361084
      ],
      [
        "SELECT Code2 FROM country WHERE Continent = value AND Population > value",
        -6.661466598510742
      ],
      [
        "SELECT GovernmentForm FROM country WHERE SurfaceArea > value AND Continent = value",
        -7.024084091186523
      ],
      [
        "SELECT GovernmentForm FROM country WHERE Continent = value AND SurfaceArea > value",
        -7.085893630981445
      ],
      [
        "SELECT Name FROM country WHERE Population > value AND Continent = value",
        -7.308250904083252
      ]
    ],
    "predicted_parse_with_values": "SELECT GovernmentForm FROM country WHERE Continent = \"Asia\" AND Population > 103000",
    "predicted_parse": "SELECT GovernmentForm FROM country WHERE Continent = value AND Population > value",
    "predicted_parse_explanation": [
      "find the government form in country table whose continent equals Asia and population greater than 103000"
    ],
    "template_feedback": "consider the population is greater than minimum population country whose continent equals Africa conditions in place of the population greater than 103000 conditions . find name in place of government form .",
    "primary_span": [
      [
        0,
        13
      ],
      [
        24,
        25
      ]
    ],
    "secondary_span": [
      [
        14,
        23
      ],
      [
        26,
        31
      ]
    ],
    "edits": [
      "name",
      "government form",
      "population greater than SUBS1",
      "population greater than 103000",
      "minimum population",
      "country",
      "continent equals \"Africa\""
    ],
    "edits_original": "< select > add name </ select > < select > remove government form </ select > < where > add population greater than SUBS1 </ where > < where > remove population greater than 103000 </ where > < select > add minimum population </ select > < from > add country </ from > < where > add continent equals \" Africa \" </ where >"
  },
  {
    "db_id": "tvshow",
    "feedback": "Sequentially, air date and episode required in place of episode and title.",
    "question": "When did the episode \"A Love of a Lifetime\" air?",
    "gold_parse": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\"",
    "beam": [
      [
        "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T2.Channel = T1.id JOIN Cartoon AS T3 ON T1.id = T3.Channel WHERE T3.Title = value",
        -0.00016498565673828125
      ],
      [
        "SELECT Episode FROM TV_series WHERE Episode = value",
        -8.825066566467285
      ],
      [
        "SELECT Title FROM Cartoon WHERE Title = value",
        -11.394567489624023
      ],
      [
        "SELECT Count ( DISTINCT T2.Episode ) FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T2.Channel = T1.id JOIN Cartoon AS T3 ON T1.id = T3.Channel WHERE T3.Title = value",
        -12.802982330322266
      ],
      [
        "SELECT DISTINCT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T2.Channel = T1.id JOIN Cartoon AS T3 ON T1.id = T3.Channel WHERE T3.Title = value",
        -13.016545295715332
      ],
      [
        "SELECT Count ( * ) FROM TV_series WHERE Episode = value",
        -13.742403984069824
      ],
      [
        "SELECT T2.Episode , T3.Title FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T2.Channel = T1.id JOIN Cartoon AS T3 ON T1.id = T3.Channel WHERE T3.Title = value",
        -13.886568069458008
      ],
      [
        "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T2.Channel = T1.id JOIN Cartoon AS T3 ON T1.id = T3.Channel WHERE T3.Written_by = value",
        -14.07445240020752
      ],
      [
        "SELECT Count ( * ) FROM Cartoon WHERE Title = value",
        -14.32662582397461
      ],
      [
        "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T2.Channel = T1.id JOIN Cartoon AS T3 ON T1.id = T3.Channel WHERE T3.Title LIKE value",
        -14.394548416137695
      ],
      [
        "SELECT Episode FROM TV_series",
        -14.902192115783691
      ],
      [
        "SELECT Directed_by FROM Cartoon WHERE Title = value",
        -15.881436347961426
      ],
      [
        "SELECT Written_by FROM Cartoon WHERE Title = value",
        -15.959112167358398
      ],
      [
        "SELECT T1.Episode FROM TV_series AS T1 EXCEPT SELECT T1.Episode FROM TV_Channel AS T2 JOIN TV_series AS T1 ON T1.Channel = T2.id JOIN Cartoon AS T3 ON T2.id = T3.Channel WHERE T3.Title = value",
        -16.36426544189453
      ],
      [
        "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T2.Channel = T1.id JOIN Cartoon AS T3 ON T1.id = T3.Channel WHERE T3.Title = value AND T3.Title = value",
        -16.5351505279541
      ],
      [
        "SELECT Episode FROM TV_series WHERE Episode LIKE value",
        -16.546765327453613
      ],
      [
        "SELECT DISTINCT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T2.Channel = T1.id JOIN Cartoon AS T3 ON T1.id = T3.Channel WHERE T3.Title = value",
        -16.697847366333008
      ],
      [
        "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = value",
        -16.7524356842041
      ],
      [
        "SELECT * FROM Cartoon WHERE Title = value",
        -16.900076866149902
      ],
      [
        "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T2.Channel = T1.id JOIN Cartoon AS T3 ON T1.id = T3.Channel WHERE T3.Title > value",
        -16.938281059265137
      ]
    ],
    "predicted_parse_with_values": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T2.Channel = T1.id JOIN Cartoon AS T3 ON T1.id = T3.Channel WHERE T3.Title = \"A Love of a Lifetime\"",
    "predicted_parse": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T2.Channel = T1.id JOIN Cartoon AS T3 ON T1.id = T3.Channel WHERE T3.Title = value",
    "predicted_parse_explanation": [
      "Step 1: for each row in tv channel table , find the corresponding rows in tv series table and in cartoon table",
      "Step 2: find the episode of the results of step 1 whose title equals A Love of a Lifetime"
    ],
    "template_feedback": "in step 1 , do not use the cartoon table and tv channel table . in step 2 , consider the episode equals A Love of a Lifetime conditions in place of the title equals A Love of a Lifetime conditions . find air date in place of episode .",
    "primary_span": [
      [
        4,
        14
      ],
      [
        19,
        28
      ],
      [
        42,
        44
      ]
    ],
    "secondary_span": [
      [
        4,
        14
      ],
      [
        29,
        41
      ],
      [
        45,
        49
      ]
    ],
    "edits": [
      "air date",
      "episode",
      "tv channel",
      "cartoon",
      "episode equals \"A Love of a Lifetime\"",
      "title equals \"A Love of a Lifetime\""
    ],
    "edits_original": "< select > add air date </ select > < select > remove episode </ select > < from > remove tv channel </ from > < from > remove cartoon </ from > < where > add episode equals \" A Love of a Lifetime \" </ where > < where > remove title equals \" A Love of a Lifetime \" </ where >"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "feedback": "Need to look for the equivqlent code type of the result and in step 1 and 2 use template id.",
    "question": "Show all template type codes that are not used by any document.",
    "gold_parse": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id",
    "beam": [
      [
        "SELECT Template_Type_Code FROM Templates EXCEPT SELECT Template_Type_Code FROM Templates",
        -0.1572723388671875
      ],
      [
        "SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 EXCEPT SELECT T2.Template_Type_Code FROM Templates AS T2",
        -2.2519617080688477
      ],
      [
        "SELECT T1.Template_Type_Code FROM Templates AS T1 EXCEPT SELECT T2.Template_Type_Code FROM Ref_Template_Types AS T2",
        -3.475022792816162
      ],
      [
        "SELECT T1.Template_Type_Code FROM Templates AS T1 EXCEPT SELECT T2.Template_ID FROM Documents AS T2",
        -5.3308234214782715
      ],
      [
        "SELECT Template_Type_Code FROM Ref_Template_Types EXCEPT SELECT Template_Type_Code FROM Ref_Template_Types",
        -5.593194961547852
      ],
      [
        "SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 EXCEPT SELECT T2.Template_ID FROM Documents AS T2",
        -7.538084506988525
      ],
      [
        "SELECT T1.Template_Type_Code FROM Templates AS T1 EXCEPT SELECT T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Document_Name = value",
        -9.321601867675781
      ],
      [
        "SELECT T1.Template_Type_Code FROM Templates AS T1 EXCEPT SELECT T2.Document_Name FROM Documents AS T2",
        -9.468583106994629
      ],
      [
        "SELECT T2.Template_Type_Code FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T1.Template_Type_Code NOT IN ( SELECT T3.Template_ID FROM Documents AS T3 )",
        -10.784685611724854
      ],
      [
        "SELECT T1.Template_Type_Code FROM Templates AS T1 WHERE T1.Template_ID NOT IN ( SELECT T2.Template_ID FROM Documents AS T2 )",
        -11.02140188217163
      ],
      [
        "SELECT T1.Template_Type_Code FROM Templates AS T1 WHERE T1.Template_Type_Code NOT IN ( SELECT T2.Template_ID FROM Documents AS T2 )",
        -11.419228553771973
      ],
      [
        "SELECT T1.Template_Type_Code FROM Templates AS T1 EXCEPT SELECT * FROM Ref_Template_Types AS T2",
        -11.6270751953125
      ],
      [
        "SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 EXCEPT SELECT T2.Document_Name FROM Documents AS T2",
        -11.627388000488281
      ],
      [
        "SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 EXCEPT SELECT T2.Template_Type_Code FROM Templates AS T2 JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID WHERE T3.Document_Name = value",
        -12.042681217193604
      ],
      [
        "SELECT T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Document_Name = value EXCEPT SELECT T1.Template_Type_Code FROM Templates AS T1",
        -12.424097776412964
      ],
      [
        "SELECT Template_Type_Code FROM Templates EXCEPT SELECT DISTINCT Template_Type_Code FROM Templates",
        -12.45324420928955
      ],
      [
        "SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 WHERE T1.Template_Type_Code NOT IN ( SELECT T2.Template_ID FROM Documents AS T2 )",
        -12.73997974395752
      ],
      [
        "SELECT T1.Template_Type_Code FROM Templates AS T1 EXCEPT SELECT T2.Template_Type_Code FROM Ref_Template_Types AS T2 JOIN Templates AS T1 ON T2.Template_Type_Code = T1.Template_Type_Code JOIN Documents AS T3 ON T1.Template_ID = T3.Template_ID WHERE T3.Document_Name = value",
        -12.767958164215088
      ],
      [
        "SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T2.Template_ID NOT IN ( SELECT T3.Template_ID FROM Documents AS T3 )",
        -13.006030082702637
      ],
      [
        "SELECT T1.Template_Type_Code FROM Templates AS T1 EXCEPT SELECT T2.Template_Type_Description FROM Ref_Template_Types AS T2",
        -13.06160831451416
      ]
    ],
    "predicted_parse_with_values": "SELECT Template_Type_Code FROM Templates EXCEPT SELECT Template_Type_Code FROM Templates",
    "predicted_parse": "SELECT Template_Type_Code FROM Templates EXCEPT SELECT Template_Type_Code FROM Templates",
    "predicted_parse_explanation": [
      "Step 1: find the template type code in templates table",
      "Step 2: find the template type code in templates table",
      "Step 3: show the rows that are in the results of step 1 but not in the results of step 2"
    ],
    "template_feedback": "in step 2 , additionally use the information from the documents table besides the templates table .",
    "primary_span": [
      [
        4,
        11
      ]
    ],
    "secondary_span": [
      [
        12,
        16
      ]
    ],
    "edits": [
      "documents"
    ],
    "edits_original": "< from > add documents </ from >"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "feedback": "Search for the non duplicate description of template type from reference template types table having similar template id available in documents table.",
    "question": "Return the different descriptions for templates that have been used in a document.",
    "gold_parse": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID",
    "beam": [
      [
        "SELECT DISTINCT Document_Description FROM Documents",
        -0.0009555816650390625
      ],
      [
        "SELECT DISTINCT Document_Description FROM Documents WHERE Document_Name = value",
        -7.222713470458984
      ],
      [
        "SELECT DISTINCT DISTINCT Document_Description FROM Documents",
        -9.119420051574707
      ],
      [
        "SELECT DISTINCT Document_Description FROM Documents WHERE Document_Description = value",
        -9.833383798599243
      ],
      [
        "SELECT Document_Description FROM Documents",
        -10.91305160522461
      ],
      [
        "SELECT DISTINCT Document_Description FROM Documents WHERE Document_Name = Document_Description",
        -11.196691513061523
      ],
      [
        "SELECT DISTINCT T3.Document_Description FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID WHERE T1.Template_Type_Description = value",
        -11.590327739715576
      ],
      [
        "SELECT DISTINCT Template_Type_Description FROM Ref_Template_Types",
        -12.293639183044434
      ],
      [
        "SELECT DISTINCT T2.Document_Description FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T1.Version_Number = value",
        -12.582060813903809
      ],
      [
        "SELECT DISTINCT T1.Document_Description FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Paragraph_Text = value",
        -13.314266204833984
      ],
      [
        "SELECT DISTINCT Document_Description FROM Documents WHERE Document_ID = Document_Description",
        -13.394097805023193
      ],
      [
        "SELECT DISTINCT T2.Document_Description FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T1.Version_Number = T2.Document_Description",
        -13.70887041091919
      ],
      [
        "SELECT DISTINCT Document_Description FROM Documents GROUP BY Template_ID",
        -13.788580894470215
      ],
      [
        "SELECT Document_Description FROM Documents",
        -13.820038795471191
      ],
      [
        "SELECT DISTINCT Document_Description FROM Documents GROUP BY Document_Description",
        -14.487177848815918
      ],
      [
        "SELECT DISTINCT Count ( DISTINCT Document_Description ) FROM Documents",
        -16.265470504760742
      ],
      [
        "SELECT DISTINCT Document_Description FROM Documents LIMIT value",
        -17.194311141967773
      ],
      [
        "SELECT DISTINCT Paragraph_Text FROM Paragraphs",
        -17.562232971191406
      ],
      [
        "SELECT DISTINCT Count ( Document_Description ) FROM Documents",
        -18.17726993560791
      ],
      [
        "SELECT DISTINCT Document_Description FROM Documents",
        -18.262276649475098
      ]
    ],
    "predicted_parse_with_values": "SELECT DISTINCT Document_Description FROM Documents",
    "predicted_parse": "SELECT DISTINCT Document_Description FROM Documents",
    "predicted_parse_explanation": [
      "find without repetition document description in documents table"
    ],
    "template_feedback": "additionally use the information from the templates table and reference template types table besides the documents table . find template type description in place of document description .",
    "primary_span": [
      [
        0,
        12
      ],
      [
        18,
        21
      ]
    ],
    "secondary_span": [
      [
        13,
        17
      ],
      [
        22,
        27
      ]
    ],
    "edits": [
      "template type description",
      "document description",
      "reference template types",
      "templates"
    ],
    "edits_original": "< select > add template type description </ select > < select > remove document description </ select > < from > add reference template types </ from > < from > add templates </ from >"
  },
  {
    "db_id": "orchestra",
    "feedback": "And also find corresponding orchestra from orchestra table .",
    "question": "What are the names of conductors as well as the corresonding orchestras that they have conducted?",
    "gold_parse": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID",
    "beam": [
      [
        "SELECT Name FROM conductor",
        -1.217698097229004
      ],
      [
        "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Orchestra = value",
        -1.3457339406013489
      ],
      [
        "SELECT Name FROM conductor WHERE Name = value",
        -1.8501310348510742
      ],
      [
        "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID JOIN performance AS T3 ON T2.Orchestra_ID = T3.Orchestra_ID WHERE T3.Weekly_rank = value",
        -1.8828108310699463
      ],
      [
        "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID JOIN performance AS T3 ON T2.Orchestra_ID = T3.Orchestra_ID WHERE T3.Date = value",
        -2.9347188472747803
      ],
      [
        "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Major_Record_Format = value",
        -3.4974663257598877
      ],
      [
        "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Record_Company = value",
        -3.822058916091919
      ],
      [
        "SELECT Name FROM conductor WHERE Nationality = value",
        -4.5041327476501465
      ],
      [
        "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Year_of_Founded = value",
        -4.776417255401611
      ],
      [
        "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID JOIN performance AS T3 ON T2.Orchestra_ID = T3.Orchestra_ID JOIN show AS T4 ON T3.Performance_ID = T4.Performance_ID WHERE T4.Result = value",
        -5.152127265930176
      ],
      [
        "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID JOIN performance AS T3 ON T2.Orchestra_ID = T3.Orchestra_ID WHERE T3.Share = value",
        -6.6688642501831055
      ],
      [
        "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID JOIN performance AS T3 ON T2.Orchestra_ID = T3.Orchestra_ID WHERE T3.Type = value",
        -7.371723651885986
      ],
      [
        "SELECT Name FROM conductor WHERE Year_of_Work = value",
        -7.386811256408691
      ],
      [
        "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID JOIN performance AS T3 ON T2.Orchestra_ID = T3.Orchestra_ID WHERE T3.Official_ratings_(millions) = value",
        -8.133152484893799
      ],
      [
        "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID JOIN performance AS T3 ON T2.Orchestra_ID = T3.Orchestra_ID JOIN show AS T4 ON T3.Performance_ID = T4.Performance_ID WHERE T4.Attendance = value",
        -8.410534858703613
      ],
      [
        "SELECT Name FROM conductor WHERE Age = value",
        -8.561660766601562
      ],
      [
        "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID JOIN performance AS T3 ON T2.Orchestra_ID = T3.Orchestra_ID JOIN show AS T4 ON T3.Performance_ID = T4.Performance_ID WHERE T4.If_first_show = value",
        -8.785896301269531
      ],
      [
        "SELECT Name FROM conductor GROUP BY Conductor_ID HAVING Count ( * ) = value",
        -9.062973499298096
      ],
      [
        "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID JOIN performance AS T3 ON T2.Orchestra_ID = T3.Orchestra_ID JOIN show AS T4 ON T3.Performance_ID = T4.Performance_ID WHERE T4.Show_ID = value",
        -9.183932304382324
      ],
      [
        "SELECT DISTINCT Name FROM conductor",
        -13.982215881347656
      ]
    ],
    "predicted_parse_with_values": "SELECT Name FROM conductor",
    "predicted_parse": "SELECT Name FROM conductor",
    "predicted_parse_explanation": [
      "find the name in conductor table"
    ],
    "template_feedback": "additionally use the information from the orchestra table besides the conductor table . additionally find orchestra .",
    "primary_span": [
      [
        0,
        7
      ],
      [
        13,
        16
      ]
    ],
    "secondary_span": [
      [
        8,
        12
      ]
    ],
    "edits": [
      "orchestra",
      "orchestra"
    ],
    "edits_original": "< select > add orchestra </ select > < from > add orchestra </ from >"
  },
  {
    "db_id": "network_1",
    "feedback": "Look for grade in which number of name of all grade is higher or equivalent to 4.",
    "question": "Which grades have 4 or more high schoolers?",
    "gold_parse": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4",
    "beam": [
      [
        "SELECT grade FROM Highschooler WHERE grade = value OR grade = value",
        -0.08521747589111328
      ],
      [
        "SELECT grade FROM Highschooler WHERE grade > = value",
        -3.7962779998779297
      ],
      [
        "SELECT grade FROM Highschooler WHERE grade = value GROUP BY ID HAVING Count ( * ) > = value",
        -4.213011860847473
      ],
      [
        "SELECT T1.grade FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id WHERE T1.grade = value GROUP BY T2.student_id HAVING Count ( * ) > = value",
        -4.400353789329529
      ],
      [
        "SELECT T1.grade FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id WHERE T1.grade > = value GROUP BY T2.student_id HAVING Count ( * ) > = value",
        -4.540754556655884
      ],
      [
        "SELECT grade FROM Highschooler WHERE grade = value GROUP BY grade HAVING Count ( * ) > = value",
        -5.184301137924194
      ],
      [
        "SELECT grade FROM Highschooler WHERE grade > = value GROUP BY grade HAVING Count ( * ) > = value",
        -5.5911785364151
      ],
      [
        "SELECT grade FROM Highschooler WHERE grade > = value GROUP BY ID HAVING Count ( * ) > = value",
        -6.07912278175354
      ],
      [
        "SELECT name FROM Highschooler WHERE grade = value OR grade = value",
        -6.364130020141602
      ],
      [
        "SELECT name FROM Highschooler WHERE grade > = value",
        -6.480154037475586
      ],
      [
        "SELECT DISTINCT grade FROM Highschooler WHERE grade = value OR grade = value",
        -6.871904134750366
      ],
      [
        "SELECT T1.grade FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id WHERE T1.grade = value GROUP BY T2.liked_id HAVING Count ( * ) > = value",
        -7.412355422973633
      ],
      [
        "SELECT grade FROM Highschooler WHERE grade = value GROUP BY name HAVING Count ( * ) > = value",
        -7.724069118499756
      ],
      [
        "SELECT T1.grade FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id WHERE T1.grade = value OR T1.grade = value GROUP BY T2.student_id HAVING Count ( * ) > = value",
        -7.836144924163818
      ],
      [
        "SELECT grade FROM Highschooler WHERE grade = value INTERSECT SELECT grade FROM Highschooler WHERE grade = value",
        -8.011418491601944
      ],
      [
        "SELECT T1.grade FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id WHERE T1.grade = value GROUP BY T2.friend_id HAVING Count ( * ) > = value",
        -8.051509380340576
      ],
      [
        "SELECT grade FROM Highschooler WHERE grade = value OR grade = value GROUP BY ID HAVING Count ( * ) > = value",
        -8.206290006637573
      ],
      [
        "SELECT grade FROM Highschooler WHERE grade < = value",
        -8.325226783752441
      ],
      [
        "SELECT grade FROM Highschooler WHERE grade > = value OR grade = value",
        -8.387419700622559
      ],
      [
        "SELECT ID FROM Highschooler WHERE grade > = value",
        -9.051578521728516
      ]
    ],
    "predicted_parse_with_values": "SELECT grade FROM Highschooler WHERE grade = 9 OR grade = 4",
    "predicted_parse": "SELECT grade FROM Highschooler WHERE grade = value OR grade = value",
    "predicted_parse_explanation": [
      "find the grade in high schooler table whose grade equals 9 or grade equals 4"
    ],
    "template_feedback": "remove the grade equals 4 and grade equals 9 conditions . find for each value of grade whose number of rows greater than or equals 4 .",
    "primary_span": [
      [
        0,
        10
      ],
      [
        11,
        26
      ]
    ],
    "secondary_span": [],
    "edits": [
      "grade equals 9 or grade equals 4",
      "grade",
      "number of rows greater than or equals to 4"
    ],
    "edits_original": "< where > remove grade equals 9 or grade equals 4 </ where > < groupBy > add grade </ groupBy > < having > add number of rows greater than or equals to 4 </ having >"
  },
  {
    "db_id": "flight_2",
    "feedback": "Find number of flights whose airline's airline equals United airlines and source airport equals AHD",
    "question": "How many 'United Airlines' flights depart from Airport 'AHD'?",
    "gold_parse": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"",
    "beam": [
      [
        "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value AND T1.Airline = value",
        -0.27205753326416016
      ],
      [
        "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.CountryAbbrev = value AND T1.Airline = value",
        -1.4809484481811523
      ],
      [
        "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value AND T1.Abbreviation = value",
        -5.4275312423706055
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE Country = value AND AirportName = value",
        -5.622130393981934
      ],
      [
        "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.CountryAbbrev = value AND T1.Abbreviation = value",
        -6.601326942443848
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE CountryAbbrev = value AND AirportName = value",
        -6.739956855773926
      ],
      [
        "SELECT Count ( * ) FROM airlines WHERE Country = value AND Airline = value",
        -8.593585968017578
      ],
      [
        "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = value AND T1.Airline = value",
        -11.931743621826172
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE Country = value AND CountryAbbrev = value",
        -12.3295316696167
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE Country = value",
        -12.696820259094238
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE CountryAbbrev = value AND CountryAbbrev = value",
        -13.320281028747559
      ],
      [
        "SELECT Count ( * ) FROM airlines WHERE Country = value AND Abbreviation = value",
        -13.659274101257324
      ],
      [
        "SELECT Count ( Count ( * ) ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value AND T1.Airline = value",
        -13.711053848266602
      ],
      [
        "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T1.Country = value AND T2.AirportName = value",
        -13.778660774230957
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE CountryAbbrev = value",
        -14.21862506866455
      ],
      [
        "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value AND T1.Country = value",
        -14.263228416442871
      ],
      [
        "SELECT Count ( * ) , T2.Country FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value AND T1.Airline = value",
        -14.340875148773193
      ],
      [
        "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country IN ( SELECT * FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value AND T1.Airline = value ) AND T1.Abbreviation IN ( SELECT * FROM airports AS T2 WHERE T2.Country = value )",
        -16.22104263305664
      ],
      [
        "SELECT Count ( * ) FROM airports AS T1 WHERE T1.Country IN ( SELECT * FROM airlines AS T2 JOIN airports AS T1 WHERE T1.Country = value AND T2.Airline = value ) AND T1.AirportName IN ( SELECT * FROM airports AS T1 WHERE T1.Country = value )",
        -16.295120000839233
      ],
      [
        "SELECT Count ( * ) FROM airlines",
        -18.633569717407227
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = \"United Airlines\" AND T1.Airline = \"AHD\"",
    "predicted_parse": "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value AND T1.Airline = value",
    "predicted_parse_explanation": [
      "Step 1: for each row in airlines table , find the corresponding rows in airports table",
      "Step 2: find the number of rows of the results of step 1 whose airports 's country equals United Airlines and airline name equals AHD"
    ],
    "template_feedback": "in step 1 , use flights table in place of airports table in step 2 , consider the airlines 's airline name equals United Airlines and source airport equals AHD conditions in place of the airports 's country equals United Airlines and airlines 's airline name equals AHD conditions .",
    "primary_span": [
      [
        4,
        6
      ],
      [
        16,
        30
      ]
    ],
    "secondary_span": [
      [
        7,
        11
      ],
      [
        31,
        49
      ]
    ],
    "edits": [
      "flights",
      "airports",
      "airline name equals \"United Airlines\"",
      "source airport equals \"AHD\"",
      "country equals \"United Airlines\"",
      "airline name equals \"AHD\""
    ],
    "edits_original": "< from > add flights </ from > < from > remove airports </ from > < where > add airline name equals \" United Airlines \" </ where > < where > add source airport equals \" AHD \" </ where > < where > remove country equals \" United Airlines \" </ where > < where > remove airline name equals \" AHD \" </ where >"
  },
  {
    "db_id": "world_1",
    "feedback": "make sure that t should be the is official of countrylanguage.",
    "question": "Return the codes of countries for which Spanish is the predominantly spoken language.",
    "gold_parse": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
    "beam": [
      [
        "SELECT Code FROM country WHERE LocalName = value",
        -0.03575706481933594
      ],
      [
        "SELECT Code FROM country WHERE Name = ( SELECT LocalName FROM country WHERE LocalName = value )",
        -4.608842134475708
      ],
      [
        "SELECT Code FROM country WHERE Name = ( SELECT Code FROM country WHERE LocalName = value )",
        -5.15836238861084
      ],
      [
        "SELECT Code FROM country WHERE LocalName = ( SELECT LocalName FROM country WHERE LocalName = value )",
        -5.5092408657073975
      ],
      [
        "SELECT Code FROM country WHERE Name = ( SELECT Continent FROM country WHERE LocalName = value )",
        -5.696282386779785
      ],
      [
        "SELECT Code FROM country WHERE Name = value",
        -5.759695053100586
      ],
      [
        "SELECT Code FROM country WHERE LocalName = value AND LocalName = value",
        -6.095881462097168
      ],
      [
        "SELECT Code FROM country WHERE Name = ( SELECT GovernmentForm FROM country WHERE LocalName = value )",
        -6.684909820556641
      ],
      [
        "SELECT Code FROM country WHERE LocalName = ( SELECT Code FROM country WHERE LocalName = value )",
        -6.753830671310425
      ],
      [
        "SELECT T1.Code FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value",
        -7.02496862411499
      ],
      [
        "SELECT Code FROM country WHERE Name = ( SELECT Name FROM country WHERE LocalName = value )",
        -7.432623863220215
      ],
      [
        "SELECT Code FROM country WHERE LocalName = ( SELECT Continent FROM country WHERE LocalName = value )",
        -7.835778474807739
      ],
      [
        "SELECT T1.Code FROM country AS T1 WHERE T1.Name = ( SELECT T2.CountryCode FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.LocalName = value )",
        -8.040611267089844
      ],
      [
        "SELECT Code FROM country WHERE Name = value AND LocalName = value",
        -8.128641128540039
      ],
      [
        "SELECT Code FROM country WHERE LocalName = ( SELECT GovernmentForm FROM country WHERE LocalName = value )",
        -8.401232242584229
      ],
      [
        "SELECT Code FROM country WHERE LocalName = ( SELECT Name FROM country WHERE LocalName = value )",
        -8.748169422149658
      ],
      [
        "SELECT Code FROM country WHERE Continent = value",
        -10.238290786743164
      ],
      [
        "SELECT T2.Code FROM sqlite_sequence AS T1 JOIN country AS T2 WHERE T1.name = value",
        -10.373886108398438
      ],
      [
        "SELECT Code FROM country WHERE LocalName > value",
        -11.424201965332031
      ],
      [
        "SELECT Code FROM country",
        -18.028162956237793
      ]
    ],
    "predicted_parse_with_values": "SELECT Code FROM country WHERE LocalName = \"Spanish\"",
    "predicted_parse": "SELECT Code FROM country WHERE LocalName = value",
    "predicted_parse_explanation": [
      "find the code in country table whose local name equals Spanish"
    ],
    "template_feedback": "use countrylanguage table in place of country table . consider the language equals Spanish conditions in place of the local name equals Spanish conditions . find for each value of countrycode . additionally find maximum percentage .",
    "primary_span": [
      [
        0,
        2
      ],
      [
        9,
        14
      ],
      [
        25,
        31
      ],
      [
        32,
        36
      ]
    ],
    "secondary_span": [
      [
        3,
        8
      ],
      [
        15,
        24
      ]
    ],
    "edits": [
      "countrycode",
      "maximum percentage",
      "code",
      "countrylanguage",
      "country",
      "language equals \"Spanish\"",
      "local name equals \"Spanish\"",
      "countrycode"
    ],
    "edits_original": "< select > add countrycode </ select > < select > add maximum percentage </ select > < select > remove code </ select > < from > add countrylanguage </ from > < from > remove country </ from > < where > add language equals \" Spanish \" </ where > < where > remove local name equals \" Spanish \" </ where > < groupBy > add countrycode </ groupBy >"
  },
  {
    "db_id": "voter_1",
    "feedback": "Use contestant number , votes table rather than contestant name , contestants table in step 1.",
    "question": "What are the contestant numbers and names of the contestants who had at least two votes?",
    "gold_parse": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number HAVING count(*)  >=  2",
    "beam": [
      [
        "SELECT contestant_number , contestant_name FROM CONTESTANTS GROUP BY contestant_name HAVING Count ( * ) > = value",
        -0.0189361572265625
      ],
      [
        "SELECT T1.contestant_number , T1.contestant_name FROM CONTESTANTS AS T1 JOIN VOTES AS T2 ON T1.contestant_number = T2.contestant_number GROUP BY T2.contestant_number HAVING Count ( * ) > = value",
        -4.565995693206787
      ],
      [
        "SELECT T2.phone_number , T1.contestant_name FROM CONTESTANTS AS T1 JOIN VOTES AS T2 ON T1.contestant_number = T2.contestant_number GROUP BY T1.contestant_name HAVING Count ( * ) > = value",
        -5.585597991943359
      ],
      [
        "SELECT contestant_name , contestant_name FROM CONTESTANTS GROUP BY contestant_name HAVING Count ( * ) > = value",
        -5.707267761230469
      ],
      [
        "SELECT T2.contestant_number , T1.contestant_name FROM CONTESTANTS AS T1 JOIN VOTES AS T2 ON T1.contestant_number = T2.contestant_number GROUP BY T1.contestant_name HAVING Count ( * ) > = value",
        -6.866130828857422
      ],
      [
        "SELECT T1.contestant_name , T1.contestant_name FROM CONTESTANTS AS T1 JOIN VOTES AS T2 ON T1.contestant_number = T2.contestant_number GROUP BY T2.contestant_number HAVING Count ( * ) > = value",
        -9.408166408538818
      ],
      [
        "SELECT T2.phone_number , T1.contestant_name FROM CONTESTANTS AS T1 JOIN VOTES AS T2 ON T1.contestant_number = T2.contestant_number GROUP BY T2.contestant_number HAVING Count ( * ) > = value",
        -10.123332500457764
      ],
      [
        "SELECT contestant_name , Count ( * ) FROM CONTESTANTS GROUP BY contestant_name HAVING Count ( * ) > = value",
        -10.285957336425781
      ],
      [
        "SELECT contestant_number , contestant_name FROM CONTESTANTS GROUP BY contestant_number HAVING Count ( * ) > = value",
        -10.69607925415039
      ],
      [
        "SELECT T2.contestant_number , T1.contestant_name FROM CONTESTANTS AS T1 JOIN VOTES AS T2 ON T1.contestant_number = T2.contestant_number GROUP BY T2.contestant_number HAVING Count ( * ) > = value",
        -11.461557388305664
      ],
      [
        "SELECT T1.contestant_name , Count ( * ) FROM CONTESTANTS AS T1 JOIN VOTES AS T2 ON T1.contestant_number = T2.contestant_number GROUP BY T2.contestant_number HAVING Count ( * ) > = value",
        -12.460861206054688
      ],
      [
        "SELECT contestant_number , contestant_name FROM CONTESTANTS GROUP BY Count ( * ) HAVING Count ( * ) > = value",
        -12.883132934570312
      ],
      [
        "SELECT T1.contestant_number , T1.contestant_name FROM CONTESTANTS AS T1 JOIN VOTES AS T2 ON T1.contestant_number = T2.contestant_number GROUP BY T2.vote_id HAVING Count ( * ) > = value",
        -13.264418601989746
      ],
      [
        "SELECT contestant_number , contestant_name FROM CONTESTANTS GROUP BY contestant_name , contestant_name HAVING Count ( * ) > = value",
        -13.316195487976074
      ],
      [
        "SELECT T1.contestant_number , T1.contestant_name FROM CONTESTANTS AS T1 JOIN VOTES AS T2 ON T1.contestant_number = T2.contestant_number GROUP BY T2.phone_number HAVING Count ( * ) > = value",
        -13.879080772399902
      ],
      [
        "SELECT contestant_number , contestant_number FROM CONTESTANTS GROUP BY contestant_name HAVING Count ( * ) > = value",
        -13.99239730834961
      ],
      [
        "SELECT contestant_number , contestant_name , Count ( * ) FROM CONTESTANTS GROUP BY contestant_name HAVING Count ( * ) > = value",
        -14.02448844909668
      ],
      [
        "SELECT T1.contestant_number , T1.contestant_name FROM CONTESTANTS AS T1 JOIN VOTES AS T2 ON T1.contestant_number = T2.contestant_number WHERE T2.phone_number = value GROUP BY T1.contestant_name HAVING Count ( * ) > = value",
        -14.243735551834106
      ],
      [
        "SELECT T1.contestant_number , T1.contestant_name , Count ( * ) FROM CONTESTANTS AS T1 JOIN VOTES AS T2 ON T1.contestant_number = T2.contestant_number GROUP BY T2.contestant_number HAVING Count ( * ) > = value",
        -14.411938667297363
      ],
      [
        "SELECT T1.contestant_number , T1.contestant_name FROM CONTESTANTS AS T1 JOIN VOTES AS T2 ON T1.contestant_number = T2.contestant_number WHERE T2.vote_id = value GROUP BY T1.contestant_name HAVING Count ( * ) > = value",
        -14.776107430458069
      ]
    ],
    "predicted_parse_with_values": "SELECT contestant_number , contestant_name FROM CONTESTANTS GROUP BY contestant_name HAVING Count ( * ) > = 2",
    "predicted_parse": "SELECT contestant_number , contestant_name FROM CONTESTANTS GROUP BY contestant_name HAVING Count ( * ) > = value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of contestant name in contestants table",
      "Step 2: find the contestant number and contestant name in contestants table whose corresponding value in step 1 is greater than or equals 2"
    ],
    "template_feedback": "in step 1 , additionally use the information from the votes table besides the contestants table . find for value of contestants 's contestant number in place of contestant name .",
    "primary_span": [
      [
        4,
        11
      ],
      [
        17,
        24
      ]
    ],
    "secondary_span": [
      [
        12,
        16
      ],
      [
        25,
        30
      ]
    ],
    "edits": [
      "votes",
      "contestant number",
      "contestant name"
    ],
    "edits_original": "< from > add votes </ from > < groupBy > add contestant number </ groupBy > < groupBy > remove contestant name </ groupBy >"
  },
  {
    "db_id": "wta_1",
    "feedback": "Exchange players table with matches table . Ensure that winner hand equals to Left .",
    "question": "Find the number of left handed winners who participated in the WTA Championships.",
    "gold_parse": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'",
    "beam": [
      [
        "SELECT Count ( * ) FROM players",
        -0.04226207733154297
      ],
      [
        "SELECT Count ( * ) , loser_ioc FROM matches GROUP BY loser_ioc",
        -3.996518611907959
      ],
      [
        "SELECT Count ( * ) , loser_ioc FROM matches GROUP BY loser_name",
        -5.297950744628906
      ],
      [
        "SELECT Count ( * ) , loser_ioc FROM matches GROUP BY winner_name",
        -5.40846061706543
      ],
      [
        "SELECT Count ( * ) , loser_ioc FROM matches GROUP BY winner_ioc",
        -6.286993503570557
      ],
      [
        "SELECT Count ( * ) , loser_ioc FROM matches GROUP BY loser_entry",
        -6.536427974700928
      ],
      [
        "SELECT Count ( * ) , loser_entry FROM matches GROUP BY loser_ioc",
        -6.70588493347168
      ],
      [
        "SELECT Count ( * ) , loser_name FROM matches GROUP BY loser_ioc",
        -6.81365442276001
      ],
      [
        "SELECT Count ( * ) , loser_ioc FROM matches GROUP BY winner_entry",
        -6.90749979019165
      ],
      [
        "SELECT Count ( * ) , winner_ioc FROM matches GROUP BY loser_ioc",
        -7.271072149276733
      ],
      [
        "SELECT Count ( * ) , winner_entry FROM matches GROUP BY loser_ioc",
        -7.3586931228637695
      ],
      [
        "SELECT Count ( * ) FROM matches WHERE loser_ioc = value",
        -7.499848365783691
      ],
      [
        "SELECT Count ( * ) , loser_ioc FROM matches",
        -10.45331621170044
      ],
      [
        "SELECT Count ( * ) FROM matches GROUP BY loser_ioc",
        -11.402209281921387
      ],
      [
        "SELECT Count ( DISTINCT loser_ioc ) FROM matches",
        -14.118858337402344
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM players",
        -15.022936820983887
      ],
      [
        "SELECT Sum ( loser_entry ) FROM matches",
        -15.147728323936462
      ],
      [
        "SELECT Sum ( loser_ioc ) FROM matches",
        -15.192268967628479
      ],
      [
        "SELECT Count ( DISTINCT winner_ioc ) FROM matches",
        -15.270215034484863
      ],
      [
        "SELECT Sum ( * ) FROM players",
        -15.337583303451538
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM players",
    "predicted_parse": "SELECT Count ( * ) FROM players",
    "predicted_parse_explanation": [
      "find the number of rows in players table"
    ],
    "template_feedback": "use matches table in place of players table . additionally make sure that winner hand equals L and tourney name equals WTA Championships . find number of different winner name in place of number of rows .",
    "primary_span": [
      [
        0,
        2
      ],
      [
        9,
        23
      ],
      [
        24,
        29
      ]
    ],
    "secondary_span": [
      [
        3,
        8
      ],
      [
        30,
        36
      ]
    ],
    "edits": [
      "number of distinct winner name",
      "number of rows",
      "matches",
      "players",
      "tourney name equals \"WTA Championships\"",
      "winner hand equals \"L\""
    ],
    "edits_original": "< select > add number of distinct winner name </ select > < select > remove number of rows </ select > < from > add matches </ from > < from > remove players </ from > < where > add tourney name equals \" WTA Championships \" </ where > < where > add winner hand equals \" L \" </ where >"
  },
  {
    "db_id": "car_1",
    "feedback": "Exchange both full name with year .",
    "question": "What is the maker of the carr produced in the earliest year and what year was it?",
    "gold_parse": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA)",
    "beam": [
      [
        "SELECT FullName , Maker FROM car_makers ORDER BY FullName Asc LIMIT value",
        -0.3029165267944336
      ],
      [
        "SELECT FullName , Maker FROM car_makers ORDER BY FullName Asc",
        -2.373417377471924
      ],
      [
        "SELECT T1.FullName , T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id ORDER BY T4.Year Asc LIMIT value",
        -2.5650272369384766
      ],
      [
        "SELECT T1.FullName , T4.Year FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id ORDER BY T1.FullName Asc LIMIT value",
        -2.9341483116149902
      ],
      [
        "SELECT FullName , Maker FROM car_makers WHERE FullName = value ORDER BY FullName Asc LIMIT value",
        -4.969330787658691
      ],
      [
        "SELECT Maker , Maker FROM car_makers ORDER BY FullName Asc LIMIT value",
        -5.011748790740967
      ],
      [
        "SELECT T1.FullName , T4.Year FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id ORDER BY T4.Year Asc LIMIT value",
        -5.107344150543213
      ],
      [
        "SELECT T1.FullName , T4.Year FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id ORDER BY T1.FullName Asc",
        -5.470608234405518
      ],
      [
        "SELECT T1.FullName , T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id ORDER BY T4.Edispl Asc LIMIT value",
        -6.068546772003174
      ],
      [
        "SELECT FullName FROM car_makers ORDER BY FullName Asc LIMIT value",
        -6.418304443359375
      ],
      [
        "SELECT FullName , Maker FROM car_makers ORDER BY Maker Asc LIMIT value",
        -6.462290287017822
      ],
      [
        "SELECT FullName , FullName FROM car_makers ORDER BY FullName Asc LIMIT value",
        -6.691827297210693
      ],
      [
        "SELECT T1.FullName , T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id WHERE T4.Year = value ORDER BY T1.FullName Asc LIMIT value",
        -6.698495388031006
      ],
      [
        "SELECT Maker , Maker FROM car_makers ORDER BY FullName Asc",
        -7.0794243812561035
      ],
      [
        "SELECT T1.FullName , T4.Year FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id WHERE T1.FullName = value ORDER BY T1.FullName Asc LIMIT value",
        -7.390204668045044
      ],
      [
        "SELECT T1.Maker , T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id ORDER BY T4.Year Asc LIMIT value",
        -7.3922505378723145
      ],
      [
        "SELECT Maker FROM car_makers ORDER BY FullName Asc LIMIT value",
        -8.097902297973633
      ],
      [
        "SELECT T1.FullName FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id ORDER BY T4.Year Asc LIMIT value",
        -8.282717227935791
      ],
      [
        "SELECT FullName FROM car_makers ORDER BY FullName Asc",
        -9.443471431732178
      ],
      [
        "SELECT T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id ORDER BY T4.Year Asc LIMIT value",
        -9.992814540863037
      ]
    ],
    "predicted_parse_with_values": "SELECT FullName , Maker FROM car_makers ORDER BY FullName Asc LIMIT 1",
    "predicted_parse": "SELECT FullName , Maker FROM car_makers ORDER BY FullName Asc LIMIT value",
    "predicted_parse_explanation": [
      "find the full name and maker in car makers table with smallest value of full name"
    ],
    "template_feedback": "use cars data table and car names table in place of car makers table . additionally make sure that year is equals minimum year cars data . find make and year in place of maker and full name . you should not find the smallest of the results . show me all the results .",
    "primary_span": [
      [
        0,
        7
      ],
      [
        15,
        26
      ],
      [
        27,
        30
      ],
      [
        39,
        54
      ]
    ],
    "secondary_span": [
      [
        8,
        14
      ],
      [
        31,
        38
      ]
    ],
    "edits": [
      "make",
      "year",
      "full name",
      "maker",
      "cars data",
      "car names",
      "car makers",
      "year equals SUBS1",
      "full name",
      "1",
      "minimum year",
      "cars data"
    ],
    "edits_original": "< select > add make </ select > < select > add year </ select > < select > remove full name </ select > < select > remove maker </ select > < from > add cars data </ from > < from > add car names </ from > < from > remove car makers </ from > < where > add year equals SUBS1 </ where > < orderBy > remove full name </ orderBy > < limit > remove 1 </ limit > < select > add minimum year </ select > < from > add cars data </ from >"
  },
  {
    "db_id": "orchestra",
    "feedback": "Find record company in place of rows in step 1.",
    "question": "Show the record companies shared by orchestras founded before 2003 and after 2003.",
    "gold_parse": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003",
    "beam": [
      [
        "SELECT * FROM orchestra WHERE Year_of_Founded > value INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded < value",
        -1.0322933197021484
      ],
      [
        "SELECT Record_Company FROM orchestra WHERE Year_of_Founded > value INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded < value",
        -1.4380779266357422
      ],
      [
        "SELECT * FROM orchestra WHERE Year_of_Founded > value INTERSECT SELECT * FROM orchestra WHERE Year_of_Founded < value",
        -1.4636926651000977
      ],
      [
        "SELECT Record_Company FROM orchestra WHERE Year_of_Founded > value INTERSECT SELECT * FROM orchestra WHERE Year_of_Founded < value",
        -1.861976146697998
      ],
      [
        "SELECT * FROM orchestra WHERE Year_of_Founded < value INTERSECT SELECT * FROM orchestra WHERE Year_of_Founded > value",
        -4.995344638824463
      ],
      [
        "SELECT * FROM orchestra WHERE Year_of_Founded < value INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded > value",
        -5.489144325256348
      ],
      [
        "SELECT T2.Official_ratings_(millions) FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID WHERE T1.Year_of_Founded > value INTERSECT SELECT T1.Record_Company FROM orchestra AS T1 WHERE T1.Year_of_Founded < value",
        -6.279476642608643
      ],
      [
        "SELECT T2.Official_ratings_(millions) FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID WHERE T1.Year_of_Founded > value INTERSECT SELECT * FROM orchestra AS T1 WHERE T1.Year_of_Founded < value",
        -6.707221031188965
      ],
      [
        "SELECT Orchestra FROM orchestra WHERE Year_of_Founded > value INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded < value",
        -6.865518093109131
      ],
      [
        "SELECT * FROM orchestra AS T1 WHERE T1.Year_of_Founded > value INTERSECT SELECT T2.Official_ratings_(millions) FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID WHERE T1.Year_of_Founded < value",
        -7.153170108795166
      ],
      [
        "SELECT Record_Company FROM orchestra WHERE Year_of_Founded < value INTERSECT SELECT * FROM orchestra WHERE Year_of_Founded > value",
        -7.232268333435059
      ],
      [
        "SELECT Orchestra FROM orchestra WHERE Year_of_Founded > value INTERSECT SELECT * FROM orchestra WHERE Year_of_Founded < value",
        -7.304649353027344
      ],
      [
        "SELECT T1.Record_Company FROM orchestra AS T1 WHERE T1.Year_of_Founded > value INTERSECT SELECT T2.Official_ratings_(millions) FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID WHERE T1.Year_of_Founded < value",
        -7.539588451385498
      ],
      [
        "SELECT Record_Company FROM orchestra WHERE Year_of_Founded < value INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded > value",
        -7.712893009185791
      ],
      [
        "SELECT * FROM orchestra WHERE Year_of_Founded > value INTERSECT SELECT Orchestra FROM orchestra WHERE Year_of_Founded < value",
        -8.149005889892578
      ],
      [
        "SELECT Record_Company FROM orchestra WHERE Year_of_Founded > value INTERSECT SELECT Orchestra FROM orchestra WHERE Year_of_Founded < value",
        -8.551187992095947
      ],
      [
        "SELECT * FROM orchestra WHERE Year_of_Founded > value INTERSECT SELECT * FROM orchestra WHERE Year_of_Founded > value",
        -8.967403411865234
      ],
      [
        "SELECT Record_Company FROM orchestra WHERE Year_of_Founded > value INTERSECT SELECT * FROM orchestra WHERE Year_of_Founded > value",
        -9.004819393157959
      ],
      [
        "SELECT T2.Share FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID WHERE T1.Year_of_Founded > value INTERSECT SELECT T1.Record_Company FROM orchestra AS T1 WHERE T1.Year_of_Founded < value",
        -9.876123428344727
      ],
      [
        "SELECT * FROM orchestra AS T1 WHERE T1.Year_of_Founded > value INTERSECT SELECT T2.Nationality FROM conductor AS T2 JOIN orchestra AS T1 ON T2.Conductor_ID = T1.Conductor_ID WHERE T1.Year_of_Founded < value",
        -10.259661197662354
      ]
    ],
    "predicted_parse_with_values": "SELECT * FROM orchestra WHERE Year_of_Founded > 2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003",
    "predicted_parse": "SELECT * FROM orchestra WHERE Year_of_Founded > value INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded < value",
    "predicted_parse_explanation": [
      "Step 1: find the rows in orchestra table whose year of founded greater than 2003",
      "Step 2: find the record company in orchestra table whose year of founded less than 2003",
      "Step 3: show the rows that are in both the results of step 1 and step 2"
    ],
    "template_feedback": "in step 1 , consider the year of founded less than 2003 conditions in place of the year of founded greater than 2003 conditions . find record company in place of rows . in step 2 , consider the year of founded greater than 2003 conditions in place of the year of founded less than 2003 conditions .",
    "primary_span": [
      [
        4,
        12
      ],
      [
        25,
        27
      ],
      [
        37,
        45
      ]
    ],
    "secondary_span": [
      [
        13,
        24
      ],
      [
        28,
        32
      ],
      [
        46,
        57
      ]
    ],
    "edits": [
      "record company",
      "rows",
      "year of founded less than 2003",
      "year of founded greater than 2003",
      "year of founded greater than 2003",
      "year of founded less than 2003"
    ],
    "edits_original": "< select > add record company </ select > < select > remove rows </ select > < where > add year of founded less than 2003 </ where > < where > remove year of founded greater than 2003 </ where > < where > add year of founded greater than 2003 </ where > < where > remove year of founded less than 2003 </ where >"
  },
  {
    "db_id": "world_1",
    "feedback": "It should be name name in place of local name .",
    "question": "Which continent is Anguilla in?",
    "gold_parse": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"",
    "beam": [
      [
        "SELECT Continent FROM country WHERE LocalName = value",
        -0.056252479553222656
      ],
      [
        "SELECT Continent FROM country WHERE Name = value",
        -2.9063615798950195
      ],
      [
        "SELECT Continent FROM country",
        -11.148886680603027
      ],
      [
        "SELECT Continent FROM country WHERE LocalName LIKE value",
        -12.752240180969238
      ],
      [
        "SELECT Continent , LocalName FROM country WHERE LocalName = value",
        -12.857470512390137
      ],
      [
        "SELECT Continent FROM country WHERE Name LIKE value",
        -13.20645809173584
      ],
      [
        "SELECT DISTINCT Continent FROM country WHERE LocalName = value",
        -14.688799858093262
      ],
      [
        "SELECT Continent FROM country WHERE Name = Continent",
        -14.71208381652832
      ],
      [
        "SELECT Continent FROM country WHERE Region = value",
        -15.087580680847168
      ],
      [
        "SELECT Continent , Name FROM country WHERE LocalName = value",
        -15.709020137786865
      ],
      [
        "SELECT Continent FROM country GROUP BY Continent HAVING Count ( * ) = value",
        -15.937651634216309
      ],
      [
        "SELECT Name FROM country WHERE LocalName = value",
        -15.959452629089355
      ],
      [
        "SELECT Continent , LocalName FROM country WHERE Name = value",
        -16.02473545074463
      ],
      [
        "SELECT Continent FROM country WHERE Continent IN ( SELECT Continent FROM country WHERE LocalName = value )",
        -16.454362392425537
      ],
      [
        "SELECT Count ( Continent ) FROM country WHERE LocalName = value",
        -16.53171730041504
      ],
      [
        "SELECT Continent FROM country WHERE Continent = value",
        -16.55413246154785
      ],
      [
        "SELECT Continent FROM country WHERE LocalName < value",
        -16.701828002929688
      ],
      [
        "SELECT Continent FROM country WHERE LocalName > value",
        -16.73611068725586
      ],
      [
        "SELECT Continent FROM country WHERE SurfaceArea = value",
        -16.794937133789062
      ],
      [
        "SELECT DISTINCT Continent FROM country WHERE LocalName = value",
        -16.80219554901123
      ]
    ],
    "predicted_parse_with_values": "SELECT Continent FROM country WHERE LocalName = \"Anguilla\"",
    "predicted_parse": "SELECT Continent FROM country WHERE LocalName = value",
    "predicted_parse_explanation": [
      "find the continent in country table whose local name equals Anguilla"
    ],
    "template_feedback": "consider the name equals Anguilla conditions in place of the local name equals Anguilla conditions .",
    "primary_span": [
      [
        0,
        5
      ]
    ],
    "secondary_span": [
      [
        6,
        15
      ]
    ],
    "edits": [
      "name equals \"Anguilla\"",
      "local name equals \"Anguilla\""
    ],
    "edits_original": "< where > add name equals \" Anguilla \" </ where > < where > remove local name equals \" Anguilla \" </ where >"
  },
  {
    "db_id": "flight_2",
    "feedback": "Put flights table instead of airports table In step 1 and source airport instead of airport name In step 2.",
    "question": "What are airlines that have some flight departing from airport 'AHD'?",
    "gold_parse": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"",
    "beam": [
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = value",
        -2.09808349609375e-05
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value",
        -11.300881385803223
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = value AND T2.AirportName = value",
        -12.561445236206055
      ],
      [
        "SELECT DISTINCT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = value",
        -12.706314086914062
      ],
      [
        "SELECT DISTINCT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = value",
        -13.14494514465332
      ],
      [
        "SELECT T1.Airline , T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = value",
        -14.793073534965515
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName LIKE value",
        -15.229880332946777
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.CountryAbbrev = value",
        -15.762044906616211
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = value AND T2.Country = value",
        -15.901031494140625
      ],
      [
        "SELECT T1.Airline , T1.uid FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = value",
        -16.03796935081482
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 WHERE T2.FlightNo = value",
        -16.114758491516113
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE AirportName = value",
        -16.39450454711914
      ],
      [
        "SELECT Airline FROM airlines WHERE Country = value",
        -16.66389751434326
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName < value",
        -16.739347457885742
      ],
      [
        "SELECT Count ( DISTINCT T1.Airline ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = value",
        -16.763206481933594
      ],
      [
        "SELECT T2.Airline FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.AirportName = value",
        -16.823476791381836
      ],
      [
        "SELECT Airline FROM airlines WHERE Airline = value",
        -16.83295726776123
      ],
      [
        "SELECT T1.uid FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = value",
        -17.114437103271484
      ],
      [
        "SELECT T1.Abbreviation FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = value",
        -17.16505241394043
      ],
      [
        "SELECT Airline FROM airlines",
        -18.97262668609619
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = \"AHD\"",
    "predicted_parse": "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = value",
    "predicted_parse_explanation": [
      "Step 1: for each row in airlines table , find the corresponding rows in airports table",
      "Step 2: find the airline name of the results of step 1 whose airport name equals AHD"
    ],
    "template_feedback": "in step 1 , use flights table in place of airports table in step 2 , consider the source airport equals AHD conditions in place of the airport name equals AHD conditions .",
    "primary_span": [
      [
        4,
        6
      ],
      [
        16,
        22
      ]
    ],
    "secondary_span": [
      [
        7,
        11
      ],
      [
        23,
        32
      ]
    ],
    "edits": [
      "flights",
      "airports",
      "source airport equals \"AHD\"",
      "airport name equals \"AHD\""
    ],
    "edits_original": "< from > add flights </ from > < from > remove airports </ from > < where > add source airport equals \" AHD \" </ where > < where > remove airport name equals \" AHD \" </ where >"
  },
  {
    "db_id": "dog_kennels",
    "feedback": "Rather than date of birth , Use date arrived in place of it .",
    "question": "What are the arriving date and the departing date of all the dogs?",
    "gold_parse": "SELECT date_arrived ,  date_departed FROM Dogs",
    "beam": [
      [
        "SELECT date_departed , date_of_birth FROM Dogs",
        -0.7718658447265625
      ],
      [
        "SELECT date_departed , date_of_birth FROM Dogs WHERE weight = value",
        -1.851165771484375
      ],
      [
        "SELECT date_departed , date_arrived FROM Dogs",
        -2.307161331176758
      ],
      [
        "SELECT date_departed , date_arrived FROM Dogs WHERE weight = value",
        -2.7224960327148438
      ],
      [
        "SELECT date_departed , date_departed FROM Dogs",
        -3.167819023132324
      ],
      [
        "SELECT date_departed , date_departed FROM Dogs WHERE weight = value",
        -3.348452568054199
      ],
      [
        "SELECT date_arrived , date_of_birth FROM Dogs",
        -3.3743038177490234
      ],
      [
        "SELECT date_departed , date_adopted FROM Dogs",
        -3.402193069458008
      ],
      [
        "SELECT date_departed , date_adopted FROM Dogs WHERE weight = value",
        -3.89422607421875
      ],
      [
        "SELECT date_arrived , date_of_birth FROM Dogs WHERE weight = value",
        -4.4034929275512695
      ],
      [
        "SELECT date_arrived , date_arrived FROM Dogs",
        -4.844514846801758
      ],
      [
        "SELECT date_arrived , date_arrived FROM Dogs WHERE weight = value",
        -5.271145820617676
      ],
      [
        "SELECT date_adopted , date_of_birth FROM Dogs",
        -5.543204307556152
      ],
      [
        "SELECT date_arrived , date_departed FROM Dogs",
        -5.6724748611450195
      ],
      [
        "SELECT date_arrived , date_departed FROM Dogs WHERE weight = value",
        -5.88979434967041
      ],
      [
        "SELECT date_arrived , date_adopted FROM Dogs",
        -5.926280975341797
      ],
      [
        "SELECT date_arrived , date_adopted FROM Dogs WHERE weight = value",
        -6.417336463928223
      ],
      [
        "SELECT date_departed , date_of_birth FROM Dogs WHERE gender = value",
        -6.581192970275879
      ],
      [
        "SELECT date_adopted , date_arrived FROM Dogs",
        -6.834231376647949
      ],
      [
        "SELECT date_departed FROM Dogs",
        -14.499085426330566
      ]
    ],
    "predicted_parse_with_values": "SELECT date_departed , date_of_birth FROM Dogs",
    "predicted_parse": "SELECT date_departed , date_of_birth FROM Dogs",
    "predicted_parse_explanation": [
      "find the date departed and date of birth in dogs table"
    ],
    "template_feedback": "find date arrived in place of date of birth .",
    "primary_span": [
      [
        0,
        2
      ]
    ],
    "secondary_span": [
      [
        3,
        9
      ]
    ],
    "edits": [
      "date arrived",
      "date of birth"
    ],
    "edits_original": "< select > add date arrived </ select > < select > remove date of birth </ select >"
  },
  {
    "db_id": "pets_1",
    "feedback": "Exchange pet age with weight .",
    "question": "Find the number of pets whose weight is heavier than 10.",
    "gold_parse": "SELECT count(*) FROM pets WHERE weight  >  10",
    "beam": [
      [
        "SELECT Count ( * ) FROM Pets WHERE pet_age > value",
        -1.1193914413452148
      ],
      [
        "SELECT Count ( * ) FROM Pets WHERE weight > value AND pet_age > value",
        -1.352564811706543
      ],
      [
        "SELECT Count ( * ) FROM Pets WHERE weight > value",
        -1.5329713821411133
      ],
      [
        "SELECT Count ( * ) FROM Pets WHERE pet_age > value AND pet_age > value",
        -1.9301872253417969
      ],
      [
        "SELECT Count ( * ) FROM Pets WHERE weight > value AND weight > value",
        -3.4731340408325195
      ],
      [
        "SELECT Count ( * ) FROM Pets WHERE pet_age > value AND weight > value",
        -4.0312957763671875
      ],
      [
        "SELECT Count ( * ) FROM Pets WHERE weight > value AND pet_age < value",
        -6.02757453918457
      ],
      [
        "SELECT Count ( * ) FROM Pets WHERE pet_age > value AND pet_age < value",
        -6.44587516784668
      ],
      [
        "SELECT Count ( * ) FROM Pets WHERE weight > value AND weight < value",
        -8.605314254760742
      ],
      [
        "SELECT Count ( * ) FROM Pets WHERE pet_age < value",
        -8.640707969665527
      ],
      [
        "SELECT Count ( * ) FROM Pets WHERE pet_age > value AND weight < value",
        -9.01217269897461
      ],
      [
        "SELECT Count ( * ) FROM Pets WHERE weight > value AND pet_age = value",
        -9.25692081451416
      ],
      [
        "SELECT Count ( * ) FROM Pets WHERE weight > value AND pet_age > = value",
        -9.467572212219238
      ],
      [
        "SELECT Count ( * ) FROM Pets WHERE pet_age > value AND pet_age = value",
        -9.756669998168945
      ],
      [
        "SELECT Count ( * ) FROM Pets WHERE weight < value",
        -9.90180492401123
      ],
      [
        "SELECT Count ( * ) FROM Pets WHERE PetType = value",
        -11.757197856903076
      ],
      [
        "SELECT Count ( * ) FROM Pets WHERE pet_age > = value",
        -12.871660232543945
      ],
      [
        "SELECT Count ( * ) FROM Pets WHERE weight > = value",
        -13.330209732055664
      ],
      [
        "SELECT Count ( * ) FROM Pets WHERE pet_age = value",
        -14.244585990905762
      ],
      [
        "SELECT Count ( * ) FROM Pets WHERE PetID > value",
        -14.403833389282227
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM Pets WHERE pet_age > 10",
    "predicted_parse": "SELECT Count ( * ) FROM Pets WHERE pet_age > value",
    "predicted_parse_explanation": [
      "find the number of rows in pets table whose pet age greater than 10"
    ],
    "template_feedback": "consider the weight greater than 10 conditions in place of the pet age greater than 10 conditions .",
    "primary_span": [
      [
        0,
        6
      ]
    ],
    "secondary_span": [
      [
        7,
        17
      ]
    ],
    "edits": [
      "weight greater than 10",
      "pet age greater than 10"
    ],
    "edits_original": "< where > add weight greater than 10 </ where > < where > remove pet age greater than 10 </ where >"
  },
  {
    "db_id": "tvshow",
    "feedback": "You have to use country in step 2 and id in step 3 in place of channel and content respectively.",
    "question": "find id of the tv channels that from the countries where have more than two tv channels.",
    "gold_parse": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2",
    "beam": [
      [
        "SELECT T1.Content FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel GROUP BY T2.Channel HAVING Count ( * ) > value",
        -0.4927520751953125
      ],
      [
        "SELECT T1.Content FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.18_49_Rating_Share > value GROUP BY T2.Channel HAVING Count ( * ) > value",
        -1.2446155548095703
      ],
      [
        "SELECT T1.Content FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Viewers_m > value GROUP BY T2.Channel HAVING Count ( * ) > value",
        -3.7519421577453613
      ],
      [
        "SELECT T1.Content FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.Pay_per_view_PPV > value GROUP BY T2.Channel HAVING Count ( * ) > value",
        -4.4014668464660645
      ],
      [
        "SELECT Channel FROM TV_series GROUP BY Channel HAVING Count ( * ) > value",
        -4.606393814086914
      ],
      [
        "SELECT T1.Content FROM TV_Channel AS T1 WHERE T1.Country = value INTERSECT SELECT T2.Channel FROM TV_series AS T2 GROUP BY T2.Channel HAVING Count ( * ) > value",
        -4.6699981689453125
      ],
      [
        "SELECT T1.Content FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel GROUP BY T2.Channel HAVING Count ( * ) > value INTERSECT SELECT T2.Channel FROM TV_series AS T2 GROUP BY T2.Channel HAVING Count ( * ) > value",
        -4.823844909667969
      ],
      [
        "SELECT T1.Content FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.18_49_Rating_Share > value GROUP BY T1.Country HAVING Count ( * ) > value",
        -5.255464553833008
      ],
      [
        "SELECT T1.Content FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Share > value GROUP BY T2.Channel HAVING Count ( * ) > value",
        -5.8211669921875
      ],
      [
        "SELECT T1.Content FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.Pixel_aspect_ratio_PAR > value GROUP BY T2.Channel HAVING Count ( * ) > value",
        -5.86566686630249
      ],
      [
        "SELECT T1.Content FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.Country > value GROUP BY T2.Channel HAVING Count ( * ) > value",
        -5.933041572570801
      ],
      [
        "SELECT T1.Content FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.18_49_Rating_Share > value INTERSECT SELECT T1.Content FROM TV_Channel AS T1 WHERE T1.Country = value",
        -6.179133892059326
      ],
      [
        "SELECT T1.Content FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.Hight_definition_TV > value GROUP BY T2.Channel HAVING Count ( * ) > value",
        -6.198235034942627
      ],
      [
        "SELECT T1.Content FROM TV_Channel AS T1 INTERSECT SELECT T2.Channel FROM TV_series AS T2 WHERE T2.18_49_Rating_Share > value",
        -6.375001907348633
      ],
      [
        "SELECT T1.Content FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.18_49_Rating_Share > value INTERSECT SELECT T2.Channel FROM TV_series AS T2 WHERE T2.18_49_Rating_Share < value",
        -6.446043491363525
      ],
      [
        "SELECT Content FROM TV_Channel WHERE Pay_per_view_PPV > value GROUP BY Country HAVING Count ( * ) > value",
        -6.448791980743408
      ],
      [
        "SELECT T1.Content FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Rating > value GROUP BY T2.Channel HAVING Count ( * ) > value",
        -6.800962448120117
      ],
      [
        "SELECT Content FROM TV_Channel GROUP BY Content HAVING Count ( * ) > value",
        -7.018930435180664
      ],
      [
        "SELECT T1.Content FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.Content > value GROUP BY T2.Channel HAVING Count ( * ) > value",
        -7.111516952514648
      ],
      [
        "SELECT Content FROM TV_Channel",
        -9.64638900756836
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.Content FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel GROUP BY T2.Channel HAVING Count ( * ) > 2",
    "predicted_parse": "SELECT T1.Content FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel GROUP BY T2.Channel HAVING Count ( * ) > value",
    "predicted_parse_explanation": [
      "Step 1: for each row in tv channel table , find the corresponding rows in tv series table",
      "Step 2: find the number of rows of each value of channel of the results of step 1",
      "Step 3: find the content of the results of step 1 whose corresponding value in step 2 is greater than 2"
    ],
    "template_feedback": "in step 1 , do not use the tv series table . in step 2 , find for value of country in place of channel . in step 3 , find tv channel 's id in place of content .",
    "primary_span": [
      [
        4,
        11
      ],
      [
        16,
        20
      ],
      [
        30,
        34
      ]
    ],
    "secondary_span": [
      [
        4,
        11
      ],
      [
        21,
        25
      ],
      [
        35,
        39
      ]
    ],
    "edits": [
      "id",
      "content",
      "tv series",
      "country",
      "channel"
    ],
    "edits_original": "< select > add id </ select > < select > remove content </ select > < from > remove tv series </ from > < groupBy > add country </ groupBy > < groupBy > remove channel </ groupBy >"
  },
  {
    "db_id": "wta_1",
    "feedback": "You have to use tourney name and \"largest value of winner rank points\" instead of loser ioc and \"smallest value of winner rank\" respectively.",
    "question": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?",
    "gold_parse": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
    "beam": [
      [
        "SELECT winner_name FROM matches WHERE loser_ioc = value ORDER BY winner_rank Asc LIMIT value",
        -1.0612239837646484
      ],
      [
        "SELECT tourney_name FROM matches WHERE loser_ioc = value ORDER BY winner_rank Asc LIMIT value",
        -1.5899581909179688
      ],
      [
        "SELECT winner_name FROM matches WHERE winner_rank = ( SELECT Max ( winner_rank ) FROM matches WHERE loser_ioc = value ) ORDER BY winner_rank Asc LIMIT value",
        -2.282607078552246
      ],
      [
        "SELECT T2.winner_name FROM players AS T1 JOIN matches AS T2 ON T2.loser_id = T1.player_id JOIN rankings AS T3 ON T1.player_id = T3.player_id WHERE T3.ranking = ( SELECT Max ( T2.winner_rank ) FROM matches AS T2 WHERE T2.loser_ioc = value ) ORDER BY T2.winner_rank Asc LIMIT value",
        -2.587848663330078
      ],
      [
        "SELECT tourney_name FROM matches WHERE winner_rank = ( SELECT Max ( winner_rank ) FROM matches WHERE loser_ioc = value ) ORDER BY winner_rank Asc LIMIT value",
        -3.447178840637207
      ],
      [
        "SELECT T2.winner_name FROM players AS T1 JOIN matches AS T2 ON T2.loser_id = T1.player_id JOIN rankings AS T3 ON T1.player_id = T3.player_id WHERE T3.ranking = ( SELECT Max ( T2.winner_rank ) FROM matches AS T2 ) ORDER BY T2.winner_rank Asc LIMIT value",
        -3.59622859954834
      ],
      [
        "SELECT T2.tourney_name FROM players AS T1 JOIN matches AS T2 ON T2.loser_id = T1.player_id JOIN rankings AS T3 ON T1.player_id = T3.player_id WHERE T3.ranking = ( SELECT Max ( T2.winner_rank ) FROM matches AS T2 WHERE T2.loser_ioc = value ) ORDER BY T2.winner_rank Asc LIMIT value",
        -3.5965871810913086
      ],
      [
        "SELECT winner_name FROM matches WHERE winner_rank = ( SELECT Max ( winner_rank ) FROM matches ) ORDER BY winner_rank Asc LIMIT value",
        -3.862062454223633
      ],
      [
        "SELECT T2.tourney_name FROM players AS T1 JOIN matches AS T2 ON T2.loser_id = T1.player_id JOIN rankings AS T3 ON T1.player_id = T3.player_id WHERE T3.ranking = ( SELECT Max ( T2.winner_rank ) FROM matches AS T2 ) ORDER BY T2.winner_rank Asc LIMIT value",
        -4.484861373901367
      ],
      [
        "SELECT winner_name FROM matches WHERE loser_rank = ( SELECT Max ( winner_rank ) FROM matches WHERE loser_ioc = value ) ORDER BY winner_rank Asc LIMIT value",
        -4.491488456726074
      ],
      [
        "SELECT winner_name FROM matches WHERE winner_ioc = value ORDER BY winner_rank Asc LIMIT value",
        -4.643537521362305
      ],
      [
        "SELECT T2.winner_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T1.country_code = value ORDER BY T2.winner_rank Asc LIMIT value",
        -4.706721305847168
      ],
      [
        "SELECT winner_name FROM matches WHERE winner_rank = ( SELECT Max ( winner_rank_points ) FROM matches WHERE loser_ioc = value ) ORDER BY winner_rank Asc LIMIT value",
        -4.798151969909668
      ],
      [
        "SELECT tourney_name FROM matches WHERE winner_rank = ( SELECT Max ( winner_rank ) FROM matches ) ORDER BY winner_rank Asc LIMIT value",
        -4.800678253173828
      ],
      [
        "SELECT winner_name FROM matches WHERE loser_ioc = value ORDER BY winner_rank_points Asc LIMIT value",
        -5.029705047607422
      ],
      [
        "SELECT T2.winner_name FROM players AS T1 JOIN matches AS T2 ON T2.loser_id = T1.player_id JOIN rankings AS T3 ON T1.player_id = T3.player_id WHERE T3.ranking = ( SELECT Max ( T2.winner_rank_points ) FROM matches AS T2 WHERE T2.loser_ioc = value ) ORDER BY T2.winner_rank Asc LIMIT value",
        -5.083902359008789
      ],
      [
        "SELECT tourney_name FROM matches WHERE winner_ioc = value ORDER BY winner_rank Asc LIMIT value",
        -5.214947700500488
      ],
      [
        "SELECT T2.tourney_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T1.country_code = value ORDER BY T2.winner_rank Asc LIMIT value",
        -5.3758440017700195
      ],
      [
        "SELECT tourney_name FROM matches WHERE loser_rank = ( SELECT Max ( winner_rank ) FROM matches WHERE loser_ioc = value ) ORDER BY winner_rank Asc LIMIT value",
        -5.529729843139648
      ],
      [
        "SELECT tourney_name FROM matches WHERE loser_ioc = value ORDER BY winner_rank_points Asc LIMIT value",
        -5.556131362915039
      ]
    ],
    "predicted_parse_with_values": "SELECT winner_name FROM matches WHERE loser_ioc = \"Australian Open\" ORDER BY winner_rank Asc LIMIT 1",
    "predicted_parse": "SELECT winner_name FROM matches WHERE loser_ioc = value ORDER BY winner_rank Asc LIMIT value",
    "predicted_parse_explanation": [
      "find the winner name in matches table whose loser ioc equals Australian Open with smallest value of winner rank"
    ],
    "template_feedback": "consider the tourney name equals Australian Open conditions in place of the loser ioc equals Australian Open conditions . order the results descending by winner rank points in place of ordering ascending by winner rank .",
    "primary_span": [
      [
        0,
        7
      ],
      [
        19,
        26
      ]
    ],
    "secondary_span": [
      [
        8,
        18
      ],
      [
        27,
        35
      ]
    ],
    "edits": [
      "tourney name equals \"Australian Open\"",
      "loser ioc equals \"Australian Open\"",
      "winner rank points",
      "descending",
      "winner rank"
    ],
    "edits_original": "< where > add tourney name equals \" Australian Open \" </ where > < where > remove loser ioc equals \" Australian Open \" </ where > < orderBy > add winner rank points </ orderBy > < orderBy > add descending </ orderBy > < orderBy > remove winner rank </ orderBy >"
  },
  {
    "db_id": "student_transcripts_tracking",
    "feedback": "I want current address id.",
    "question": "What are the different addresses that have students living there?",
    "gold_parse": "SELECT count(DISTINCT current_address_id) FROM Students",
    "beam": [
      [
        "SELECT DISTINCT email_address FROM Students",
        -8.0108642578125e-05
      ],
      [
        "SELECT email_address FROM Students",
        -10.45335578918457
      ],
      [
        "SELECT DISTINCT DISTINCT email_address FROM Students",
        -10.678116798400879
      ],
      [
        "SELECT DISTINCT current_address_id FROM Students",
        -11.137277603149414
      ],
      [
        "SELECT DISTINCT Count ( DISTINCT email_address ) FROM Students",
        -12.975712776184082
      ],
      [
        "SELECT DISTINCT T2.email_address FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id WHERE T1.country = value",
        -13.070198714733124
      ],
      [
        "SELECT email_address FROM Students",
        -13.485272407531738
      ],
      [
        "SELECT DISTINCT email_address FROM Students WHERE student_id = value",
        -13.761181950569153
      ],
      [
        "SELECT DISTINCT permanent_address_id FROM Students",
        -14.062080383300781
      ],
      [
        "SELECT DISTINCT email_address FROM Students ORDER BY email_address Asc",
        -14.65409231185913
      ],
      [
        "SELECT DISTINCT email_address FROM Students WHERE student_id = email_address",
        -14.865323662757874
      ],
      [
        "SELECT DISTINCT email_address , current_address_id FROM Students",
        -15.100528001785278
      ],
      [
        "SELECT DISTINCT Avg ( email_address ) FROM Students",
        -15.422493934631348
      ],
      [
        "SELECT DISTINCT T2.email_address FROM Semesters AS T1 JOIN Students AS T2 JOIN Student_Enrolment AS T3 ON T1.semester_id = T3.semester_id AND T3.student_id = T2.student_id WHERE T1.semester_description = value",
        -15.663930177688599
      ],
      [
        "SELECT DISTINCT email_address FROM Students WHERE ssn = value",
        -15.694071769714355
      ],
      [
        "SELECT DISTINCT email_address FROM Students ORDER BY student_id Asc",
        -16.157789707183838
      ],
      [
        "SELECT DISTINCT email_address FROM Students LIMIT value",
        -17.125469207763672
      ],
      [
        "SELECT Count ( DISTINCT email_address ) FROM Students",
        -17.304311752319336
      ],
      [
        "SELECT DISTINCT Count ( email_address ) FROM Students",
        -17.361473083496094
      ],
      [
        "SELECT DISTINCT Min ( email_address ) FROM Students",
        -17.59848976135254
      ]
    ],
    "predicted_parse_with_values": "SELECT DISTINCT email_address FROM Students",
    "predicted_parse": "SELECT DISTINCT email_address FROM Students",
    "predicted_parse_explanation": [
      "find without repetition email address in students table"
    ],
    "template_feedback": "find number of different current address id in place of email address . permit repetitions in the results .",
    "primary_span": [
      [
        0,
        6
      ],
      [
        13,
        18
      ]
    ],
    "secondary_span": [
      [
        7,
        12
      ]
    ],
    "edits": [
      "number of distinct current address id",
      "distinct",
      "email address"
    ],
    "edits_original": "< select > add number of distinct current address id </ select > < select > remove distinct </ select > < select > remove email address </ select >"
  },
  {
    "db_id": "flight_2",
    "feedback": "Substitute airlines with flights and airline with source airport .",
    "question": "Count the number of flights departing from 'APG'.",
    "gold_parse": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
    "beam": [
      [
        "SELECT Count ( * ) FROM airlines WHERE Airline = value",
        -0.20242023468017578
      ],
      [
        "SELECT Count ( * ) FROM airlines WHERE Abbreviation = value",
        -2.2875990867614746
      ],
      [
        "SELECT Count ( * ) FROM airlines WHERE Country = value",
        -2.8268415927886963
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE AirportName = value",
        -4.422821044921875
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE Country = value",
        -4.863869667053223
      ],
      [
        "SELECT Count ( * ) FROM flights WHERE Airline = value",
        -6.284850120544434
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE CountryAbbrev = value",
        -7.776052474975586
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE City = value",
        -8.218114852905273
      ],
      [
        "SELECT Count ( * ) FROM flights WHERE SourceAirport = value",
        -9.471611022949219
      ],
      [
        "SELECT Count ( * ) FROM flights WHERE FlightNo = value",
        -9.696056365966797
      ],
      [
        "SELECT Count ( * ) FROM airlines WHERE uid = value",
        -9.754839897155762
      ],
      [
        "SELECT Count ( DISTINCT T2.FlightNo ) FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Airline = value",
        -10.306280612945557
      ],
      [
        "SELECT Count ( * ) FROM flights WHERE DestAirport = value",
        -11.291360855102539
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE AirportCode = value",
        -12.450685501098633
      ],
      [
        "SELECT Count ( DISTINCT T2.FlightNo ) FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Abbreviation = value",
        -12.464596271514893
      ],
      [
        "SELECT T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Airline = value",
        -12.50410795211792
      ],
      [
        "SELECT Count ( DISTINCT T2.FlightNo ) FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Country = value",
        -12.77477240562439
      ],
      [
        "SELECT Count ( * ) FROM airlines WHERE Airline LIKE value",
        -12.889922618865967
      ],
      [
        "SELECT Count ( * ) FROM airlines",
        -13.968881607055664
      ],
      [
        "SELECT T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Abbreviation = value",
        -14.21325945854187
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM airlines WHERE Airline = \"APG\"",
    "predicted_parse": "SELECT Count ( * ) FROM airlines WHERE Airline = value",
    "predicted_parse_explanation": [
      "find the number of rows in airlines table whose airline name equals APG"
    ],
    "template_feedback": "use flights table in place of airlines table . consider the source airport equals APG conditions in place of the airlines 's airline name equals APG conditions .",
    "primary_span": [
      [
        0,
        2
      ],
      [
        9,
        15
      ]
    ],
    "secondary_span": [
      [
        3,
        8
      ],
      [
        16,
        27
      ]
    ],
    "edits": [
      "flights",
      "airlines",
      "source airport equals \"APG\"",
      "airline name equals \"APG\""
    ],
    "edits_original": "< from > add flights </ from > < from > remove airlines </ from > < where > add source airport equals \" APG \" </ where > < where > remove airline name equals \" APG \" </ where >"
  },
  {
    "db_id": "orchestra",
    "feedback": "I want orchestra and use phrase 'Major Record Format CD or DVD' instead of 'Type greater than or'.",
    "question": "Count the number of orchestras that have CD or DVD as their record format.",
    "gold_parse": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\"",
    "beam": [
      [
        "SELECT Count ( * ) FROM performance WHERE Type > = value",
        -0.7609827518463135
      ],
      [
        "SELECT Count ( * ) FROM performance WHERE Weekly_rank > = value",
        -0.8479034900665283
      ],
      [
        "SELECT Count ( * ) FROM orchestra WHERE Major_Record_Format > = value",
        -3.0971362590789795
      ],
      [
        "SELECT Count ( * ) FROM performance WHERE Date > = value",
        -3.5565452575683594
      ],
      [
        "SELECT Count ( * ) FROM performance WHERE Official_ratings_(millions) > = value",
        -4.008120059967041
      ],
      [
        "SELECT Count ( * ) FROM performance WHERE Type = value OR Type = value",
        -5.374691009521484
      ],
      [
        "SELECT Count ( * ) FROM performance WHERE Performance_ID > = value",
        -5.5007734298706055
      ],
      [
        "SELECT Count ( * ) FROM performance WHERE Type = value OR Weekly_rank = value",
        -6.270491123199463
      ],
      [
        "SELECT Count ( * ) FROM orchestra WHERE Orchestra > = value",
        -7.539018630981445
      ],
      [
        "SELECT Count ( * ) FROM orchestra WHERE Orchestra_ID > = value",
        -7.646173477172852
      ],
      [
        "SELECT Count ( * ) FROM performance WHERE Share > = value",
        -7.84544563293457
      ],
      [
        "SELECT Count ( * ) FROM show WHERE If_first_show > = value",
        -9.121454238891602
      ],
      [
        "SELECT Count ( * ) FROM orchestra WHERE Year_of_Founded > = value",
        -9.546517372131348
      ],
      [
        "SELECT Count ( * ) FROM orchestra WHERE Record_Company > = value",
        -9.669367790222168
      ],
      [
        "SELECT Count ( * ) FROM performance WHERE Type < = value",
        -10.233721733093262
      ],
      [
        "SELECT Count ( * ) FROM performance WHERE Type = value",
        -10.261868000030518
      ],
      [
        "SELECT Count ( * ) FROM show WHERE Result > = value",
        -10.687260627746582
      ],
      [
        "SELECT Count ( * ) FROM performance WHERE Weekly_rank < = value",
        -11.070375442504883
      ],
      [
        "SELECT Count ( * ) FROM show WHERE Show_ID > = value",
        -11.080413818359375
      ],
      [
        "SELECT Count ( * ) FROM conductor",
        -13.392765998840332
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM performance WHERE Type > = \"CD\"",
    "predicted_parse": "SELECT Count ( * ) FROM performance WHERE Type > = value",
    "predicted_parse_explanation": [
      "find the number of rows in performance table whose type greater than or equals CD"
    ],
    "template_feedback": "use orchestra table in place of performance table . consider the major record format equals CD or major record format equals DVD conditions in place of the type greater than or equals CD conditions .",
    "primary_span": [
      [
        0,
        2
      ],
      [
        9,
        22
      ]
    ],
    "secondary_span": [
      [
        3,
        8
      ],
      [
        23,
        34
      ]
    ],
    "edits": [
      "orchestra",
      "performance",
      "major record format equals \"CD\" or major record format equals \"DVD\"",
      "type greater than or equals to \"CD\""
    ],
    "edits_original": "< from > add orchestra </ from > < from > remove performance </ from > < where > add major record format equals \" CD \" or major record format equals \" DVD \" </ where > < where > remove type greater than or equals to \" CD \" </ where >"
  },
  {
    "db_id": "singer",
    "feedback": "You have to interchange less than and greater than with each other.",
    "question": "What are the citizenships that are shared by singers with a birth year before 1945 and after 1955?",
    "gold_parse": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955",
    "beam": [
      [
        "SELECT Citizenship FROM singer WHERE Birth_Year > value INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year < value",
        -0.0059757232666015625
      ],
      [
        "SELECT Citizenship FROM singer WHERE Birth_Year < value INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year > value",
        -5.3982391357421875
      ],
      [
        "SELECT Citizenship FROM singer WHERE Birth_Year > = value INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year > value",
        -7.012112617492676
      ],
      [
        "SELECT Citizenship FROM singer WHERE Birth_Year > value INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year LIKE value",
        -8.390939712524414
      ],
      [
        "SELECT Citizenship FROM singer WHERE Birth_Year > value INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year > value",
        -9.088196754455566
      ],
      [
        "SELECT Citizenship FROM singer WHERE Birth_Year = value INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year > value",
        -9.31079387664795
      ],
      [
        "SELECT Citizenship FROM singer WHERE Birth_Year > value INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year = value",
        -10.831818103790283
      ],
      [
        "SELECT Citizenship FROM singer WHERE Birth_Year LIKE value INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year < value",
        -11.032980918884277
      ],
      [
        "SELECT Citizenship FROM singer WHERE Birth_Year < value INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year < value",
        -11.168696403503418
      ],
      [
        "SELECT Citizenship FROM singer WHERE Birth_Year > value INTERSECT SELECT Citizenship FROM singer GROUP BY Citizenship HAVING Count ( * ) < value",
        -11.6980562210083
      ],
      [
        "SELECT Citizenship FROM singer WHERE Birth_Year = value INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year < value",
        -12.004563331604004
      ],
      [
        "SELECT Citizenship FROM singer WHERE Birth_Year BETWEEN value AND value",
        -12.427444458007812
      ],
      [
        "SELECT Citizenship FROM singer WHERE Birth_Year > = value INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year < value",
        -12.60582447052002
      ],
      [
        "SELECT Citizenship FROM singer WHERE Birth_Year > value INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year BETWEEN value AND value",
        -12.891651153564453
      ],
      [
        "SELECT Citizenship FROM singer WHERE Birth_Year LIKE value INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year > value",
        -12.951842308044434
      ],
      [
        "SELECT Citizenship FROM singer WHERE Birth_Year > value EXCEPT SELECT Citizenship FROM singer WHERE Birth_Year < value",
        -13.842806816101074
      ],
      [
        "SELECT Citizenship FROM singer INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year > value",
        -13.92821216583252
      ],
      [
        "SELECT Citizenship FROM singer WHERE Birth_Year > value INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year IN ( SELECT Citizenship FROM singer WHERE Birth_Year < value )",
        -13.950495719909668
      ],
      [
        "SELECT Citizenship FROM singer WHERE Birth_Year > value INTERSECT SELECT Citizenship , Birth_Year FROM singer WHERE Birth_Year < value",
        -14.029163360595703
      ],
      [
        "SELECT Citizenship FROM singer WHERE Birth_Year > value INTERSECT SELECT Citizenship FROM singer GROUP BY Citizenship HAVING Birth_Year < value",
        -14.686095237731934
      ]
    ],
    "predicted_parse_with_values": "SELECT Citizenship FROM singer WHERE Birth_Year > 1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year < 1955",
    "predicted_parse": "SELECT Citizenship FROM singer WHERE Birth_Year > value INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year < value",
    "predicted_parse_explanation": [
      "Step 1: find the citizenship in singer table whose birth year greater than 1945",
      "Step 2: find the citizenship in singer table whose birth year less than 1955",
      "Step 3: show the rows that are in both the results of step 1 and step 2"
    ],
    "template_feedback": "in step 1 , consider the birth year less than 1945 conditions in place of the birth year greater than 1945 conditions . in step 2 , consider the birth year greater than 1955 conditions in place of the birth year less than 1955 conditions .",
    "primary_span": [
      [
        4,
        11
      ],
      [
        27,
        34
      ]
    ],
    "secondary_span": [
      [
        12,
        22
      ],
      [
        35,
        45
      ]
    ],
    "edits": [
      "birth year less than 1945",
      "birth year greater than 1945",
      "birth year greater than 1955",
      "birth year less than 1955"
    ],
    "edits_original": "< where > add birth year less than 1945 </ where > < where > remove birth year greater than 1945 </ where > < where > add birth year greater than 1955 </ where > < where > remove birth year less than 1955 </ where >"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "feedback": "In step 1 , I want the documents table.",
    "question": "Which template type code is used by most number of documents?",
    "gold_parse": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1",
    "beam": [
      [
        "SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY Count ( * ) Desc LIMIT value",
        -0.0006237030029296875
      ],
      [
        "SELECT T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T2.Template_ID ORDER BY Count ( * ) Desc LIMIT value",
        -7.518691062927246
      ],
      [
        "SELECT T2.Template_Type_Code FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code GROUP BY T1.Template_Type_Code ORDER BY Count ( * ) Desc LIMIT value",
        -10.281048774719238
      ],
      [
        "SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code GROUP BY T2.Template_Type_Code ORDER BY Count ( * ) Desc LIMIT value",
        -10.320786476135254
      ],
      [
        "SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY Count ( * ) Desc",
        -12.3750638961792
      ],
      [
        "SELECT DISTINCT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY Count ( * ) Desc LIMIT value",
        -13.431036949157715
      ],
      [
        "SELECT Template_Type_Code , Count ( * ) FROM Templates GROUP BY Template_Type_Code ORDER BY Count ( * ) Desc LIMIT value",
        -13.534340858459473
      ],
      [
        "SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code",
        -14.164786338806152
      ],
      [
        "SELECT T2.Template_ID FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T1.Template_Type_Code ORDER BY Count ( * ) Desc LIMIT value",
        -14.292108535766602
      ],
      [
        "SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY Count ( * ) Asc LIMIT value",
        -14.581592559814453
      ],
      [
        "SELECT T1.Template_Type_Description FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code GROUP BY T2.Template_Type_Code ORDER BY Count ( * ) Desc LIMIT value",
        -14.699930191040039
      ],
      [
        "SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code HAVING Count ( * ) > value",
        -14.93304443359375
      ],
      [
        "SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY Avg ( * ) Desc LIMIT value",
        -15.45605754852295
      ],
      [
        "SELECT Template_Type_Code FROM Templates GROUP BY Max ( Template_Type_Code ) ORDER BY Count ( * ) Desc LIMIT value",
        -15.458062171936035
      ],
      [
        "SELECT Template_Type_Code FROM Templates ORDER BY Count ( * ) Desc LIMIT value",
        -15.500375747680664
      ],
      [
        "SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY Sum ( * ) Desc LIMIT value",
        -15.698318481445312
      ],
      [
        "SELECT * FROM Templates GROUP BY Template_Type_Code ORDER BY Count ( * ) Desc LIMIT value",
        -15.821582794189453
      ],
      [
        "SELECT Count ( * ) FROM Templates GROUP BY Template_Type_Code ORDER BY Count ( * ) Desc LIMIT value",
        -15.873687744140625
      ],
      [
        "SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY Count ( DISTINCT * ) Desc LIMIT value",
        -15.918246269226074
      ],
      [
        "SELECT T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Document_Name = ( SELECT T1.Template_Type_Code FROM Templates AS T1 GROUP BY T1.Template_Type_Code ORDER BY Count ( * ) Desc LIMIT value ) GROUP BY T1.Template_Type_Code ORDER BY Count ( * ) Desc LIMIT value",
        -16.0109703540802
      ]
    ],
    "predicted_parse_with_values": "SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY Count ( * ) Desc LIMIT 1",
    "predicted_parse": "SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY Count ( * ) Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of template type code in templates table",
      "Step 2: find the template type code in templates table with largest value in the results of step 1"
    ],
    "template_feedback": "in step 1 , additionally use the information from the documents table besides the templates table .",
    "primary_span": [
      [
        4,
        11
      ]
    ],
    "secondary_span": [
      [
        12,
        16
      ]
    ],
    "edits": [
      "documents"
    ],
    "edits_original": "< from > add documents </ from >"
  },
  {
    "db_id": "dog_kennels",
    "feedback": "Need to ensure that those dog's dog id present in treatments table .",
    "question": "Find the average age of the dogs who went through treatments.",
    "gold_parse": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
    "beam": [
      [
        "SELECT Avg ( age ) FROM Dogs",
        -0.0006380081176757812
      ],
      [
        "SELECT Avg ( date_of_birth ) FROM Dogs",
        -7.897087097167969
      ],
      [
        "SELECT Avg ( T1.age ) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T2.treatment_type_code = value",
        -8.372203826904297
      ],
      [
        "SELECT Avg ( age ) FROM Dogs WHERE gender = value",
        -10.727229118347168
      ],
      [
        "SELECT Avg ( age ) , Avg ( age ) FROM Dogs",
        -13.323116302490234
      ],
      [
        "SELECT Avg ( age ) FROM Dogs ORDER BY age Asc LIMIT value",
        -13.61880111694336
      ],
      [
        "SELECT Avg ( age ) FROM Dogs WHERE name = value",
        -13.901647090911865
      ],
      [
        "SELECT Avg ( date_adopted ) FROM Dogs",
        -14.050982475280762
      ],
      [
        "SELECT Avg ( age ) FROM Dogs WHERE breed_code = value",
        -14.102643489837646
      ],
      [
        "SELECT Avg ( T1.age ) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id GROUP BY T2.dog_id",
        -14.355793952941895
      ],
      [
        "SELECT DISTINCT Avg ( age ) FROM Dogs",
        -14.400505065917969
      ],
      [
        "SELECT Count ( age ) FROM Dogs",
        -14.50312614440918
      ],
      [
        "SELECT Avg ( T1.age ) FROM Dogs AS T1 WHERE T1.dog_id = ( SELECT T2.dog_id FROM Treatments AS T2 )",
        -15.091273784637451
      ],
      [
        "SELECT Avg ( age ) FROM Dogs WHERE weight = value",
        -15.263261318206787
      ],
      [
        "SELECT Avg ( age ) , dog_id FROM Dogs",
        -15.408373832702637
      ],
      [
        "SELECT Avg ( date_departed ) FROM Dogs",
        -16.312663078308105
      ],
      [
        "SELECT Avg ( date_arrived ) FROM Dogs",
        -16.439692497253418
      ],
      [
        "SELECT Sum ( age ) FROM Dogs",
        -16.712943077087402
      ],
      [
        "SELECT Avg ( age ) FROM Dogs LIMIT value",
        -16.732077598571777
      ],
      [
        "SELECT Avg ( Count ( age ) ) FROM Dogs",
        -16.85429286956787
      ]
    ],
    "predicted_parse_with_values": "SELECT Avg ( age ) FROM Dogs",
    "predicted_parse": "SELECT Avg ( age ) FROM Dogs",
    "predicted_parse_explanation": [
      "find the average age in dogs table"
    ],
    "template_feedback": "additionally make sure that dog id is one of treatments 's dog id treatments .",
    "primary_span": [
      [
        0,
        14
      ]
    ],
    "secondary_span": [],
    "edits": [
      "dog id one of SUBS1",
      "dog id",
      "treatments"
    ],
    "edits_original": "< where > add dog id one of SUBS1 </ where > < select > add dog id </ select > < from > add treatments </ from >"
  },
  {
    "db_id": "network_1",
    "feedback": "You need to search for the rows count for all student from Friends table.",
    "question": "How many friends does each student have?",
    "gold_parse": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id",
    "beam": [
      [
        "SELECT Count ( * ) FROM Highschooler",
        -0.0005960464477539062
      ],
      [
        "SELECT Count ( * ) FROM Friend GROUP BY student_id",
        -7.658048629760742
      ],
      [
        "SELECT Count ( * ) , T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id",
        -10.026371598243713
      ],
      [
        "SELECT Count ( * ) , T1.grade FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id",
        -10.77300238609314
      ],
      [
        "SELECT Count ( * ) FROM Highschooler WHERE name = value",
        -11.358142852783203
      ],
      [
        "SELECT Count ( DISTINCT student_id ) FROM Friend",
        -11.631346702575684
      ],
      [
        "SELECT Count ( * ) FROM Highschooler WHERE grade = value",
        -12.021960973739624
      ],
      [
        "SELECT Count ( * ) , student_id FROM Friend GROUP BY student_id",
        -12.218967914581299
      ],
      [
        "SELECT Sum ( * ) FROM Highschooler",
        -12.393277049064636
      ],
      [
        "SELECT Count ( DISTINCT friend_id ) FROM Friend",
        -12.809066772460938
      ],
      [
        "SELECT Count ( * ) FROM Highschooler GROUP BY ID",
        -12.919381141662598
      ],
      [
        "SELECT Sum ( friend_id ) FROM Friend",
        -13.659996390342712
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM Highschooler",
        -13.868727684020996
      ],
      [
        "SELECT Count ( * ) , friend_id FROM Friend GROUP BY student_id",
        -14.135263919830322
      ],
      [
        "SELECT Sum ( student_id ) FROM Friend",
        -14.172901630401611
      ],
      [
        "SELECT Avg ( * ) FROM Highschooler",
        -14.47723251581192
      ],
      [
        "SELECT Count ( DISTINCT name ) FROM Highschooler",
        -15.351543426513672
      ],
      [
        "SELECT Sum ( name ) FROM Highschooler",
        -15.719675064086914
      ],
      [
        "SELECT student_id FROM Friend",
        -15.931698024272919
      ],
      [
        "SELECT Count ( Count ( * ) ) FROM Highschooler",
        -16.306099891662598
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM Highschooler",
    "predicted_parse": "SELECT Count ( * ) FROM Highschooler",
    "predicted_parse_explanation": [
      "find the number of rows in high schooler table"
    ],
    "template_feedback": "use friend table in place of high schooler table . find for each value of student id . additionally find student id .",
    "primary_span": [
      [
        0,
        2
      ],
      [
        10,
        17
      ],
      [
        18,
        22
      ]
    ],
    "secondary_span": [
      [
        3,
        9
      ]
    ],
    "edits": [
      "student id",
      "friend",
      "high schooler",
      "student id"
    ],
    "edits_original": "< select > add student id </ select > < from > add friend </ from > < from > remove high schooler </ from > < groupBy > add student id </ groupBy >"
  },
  {
    "db_id": "pets_1",
    "feedback": "Find number of rows in has pet table whose pet type equals dog and sex equals F .",
    "question": "How many dog pets are raised by female students?",
    "gold_parse": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'",
    "beam": [
      [
        "SELECT Count ( * ) FROM Pets WHERE PetType = value AND pet_age = value",
        -0.44783878326416016
      ],
      [
        "SELECT Count ( * ) FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value AND T1.Sex = value",
        -1.094076156616211
      ],
      [
        "SELECT Count ( * ) FROM Pets WHERE PetType = value AND PetType = value",
        -4.26595401763916
      ],
      [
        "SELECT Count ( * ) FROM Pets WHERE PetType = value",
        -4.451184272766113
      ],
      [
        "SELECT Count ( * ) FROM Pets WHERE PetType = value AND weight = value",
        -8.038832664489746
      ],
      [
        "SELECT Count ( * ) FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value AND T1.Age = value",
        -10.067183494567871
      ],
      [
        "SELECT Count ( * ) FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T1.Sex = value AND T3.PetType = value",
        -11.145304679870605
      ],
      [
        "SELECT Count ( * ) FROM Student WHERE Sex = value",
        -11.65657901763916
      ],
      [
        "SELECT Count ( * ) FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T1.Sex = value AND T3.pet_age = value",
        -11.895936012268066
      ],
      [
        "SELECT Count ( * ) FROM Student WHERE Sex = value AND Sex = value",
        -13.690556049346924
      ],
      [
        "SELECT Count ( * ) FROM Pets WHERE PetType = value AND pet_age > = value",
        -13.86830997467041
      ],
      [
        "SELECT Count ( * ) FROM Pets WHERE PetType = value AND pet_age IN ( SELECT weight FROM Pets WHERE PetType = value )",
        -14.506916761398315
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM Pets WHERE PetType = value AND pet_age = value",
        -14.736374855041504
      ],
      [
        "SELECT Count ( Count ( * ) ) FROM Pets WHERE PetType = value AND pet_age = value",
        -14.838168144226074
      ],
      [
        "SELECT Count ( * ) FROM Pets AS T1 WHERE T1.PetType = value AND T1.pet_age IN ( SELECT T2.PetID FROM Has_Pet AS T2 JOIN Pets AS T1 ON T2.PetID = T1.PetID WHERE T1.PetType = value )",
        -14.947375535964966
      ],
      [
        "SELECT Count ( * ) FROM Pets WHERE PetType = value AND pet_age < value",
        -15.105923652648926
      ],
      [
        "SELECT Count ( * ) FROM Student WHERE Sex < value",
        -15.480961799621582
      ],
      [
        "SELECT Count ( * ) FROM Pets WHERE pet_age < value",
        -15.926527976989746
      ],
      [
        "SELECT Count ( * ) FROM Pets WHERE PetType < value",
        -16.272212505340576
      ],
      [
        "SELECT T3.PetType FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T1.Sex = value",
        -17.020151138305664
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM Pets WHERE PetType = \"F\" AND pet_age = 3",
    "predicted_parse": "SELECT Count ( * ) FROM Pets WHERE PetType = value AND pet_age = value",
    "predicted_parse_explanation": [
      "find the number of rows in pets table whose pet type equals F and pet age equals 3"
    ],
    "template_feedback": "additionally use the information from the has pet table and student table besides the pets table . consider the sex equals F and pet type equals dog conditions in place of the pet age equals 3 and pet type equals F conditions .",
    "primary_span": [
      [
        0,
        11
      ],
      [
        17,
        27
      ]
    ],
    "secondary_span": [
      [
        12,
        16
      ],
      [
        28,
        42
      ]
    ],
    "edits": [
      "student",
      "has pet",
      "sex equals \"F\"",
      "pet type equals \"dog\"",
      "pet type equals \"F\"",
      "pet age equals 3"
    ],
    "edits_original": "< from > add student </ from > < from > add has pet </ from > < where > add sex equals \" F \" </ where > < where > add pet type equals \" dog \" </ where > < where > remove pet type equals \" F \" </ where > < where > remove pet age equals 3 </ where >"
  },
  {
    "db_id": "world_1",
    "feedback": "make sure is official equivalent with t . you need to use language , table of countrylanguage and code of country.",
    "question": "What is the official language used in the country the name of whose head of state is Beatrix.",
    "gold_parse": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"",
    "beam": [
      [
        "SELECT Name FROM country WHERE Continent = value",
        -0.11458015441894531
      ],
      [
        "SELECT Name FROM country WHERE Name = value",
        -3.107250213623047
      ],
      [
        "SELECT Code2 FROM country WHERE Continent = value",
        -3.381686210632324
      ],
      [
        "SELECT LocalName FROM country WHERE Continent = value",
        -4.245639801025391
      ],
      [
        "SELECT Name FROM country WHERE LocalName = value",
        -4.472731590270996
      ],
      [
        "SELECT Code2 FROM country WHERE Name = value",
        -6.412620544433594
      ],
      [
        "SELECT Continent FROM country WHERE Continent = value",
        -7.121368885040283
      ],
      [
        "SELECT LocalName FROM country WHERE Name = value",
        -7.226544380187988
      ],
      [
        "SELECT Code2 FROM country WHERE LocalName = value",
        -8.005491256713867
      ],
      [
        "SELECT LocalName FROM country WHERE LocalName = value",
        -8.781742095947266
      ],
      [
        "SELECT Continent FROM country WHERE Name = value",
        -10.066227436065674
      ],
      [
        "SELECT Name FROM country WHERE Name LIKE value",
        -10.556431770324707
      ],
      [
        "SELECT Name , Continent FROM country WHERE Continent = value",
        -10.89328384399414
      ],
      [
        "SELECT Continent FROM country WHERE LocalName = value",
        -11.583787441253662
      ],
      [
        "SELECT Code2 FROM country WHERE Name LIKE value",
        -11.663545608520508
      ],
      [
        "SELECT HeadOfState FROM country WHERE Continent = value",
        -11.874731063842773
      ],
      [
        "SELECT Name FROM country WHERE Continent LIKE value",
        -12.274822235107422
      ],
      [
        "SELECT T2.Name FROM sqlite_sequence AS T1 JOIN country AS T2 WHERE T1.name = value",
        -12.520919799804688
      ],
      [
        "SELECT Code2 FROM country WHERE Continent LIKE value",
        -13.152799606323242
      ],
      [
        "SELECT Name FROM country",
        -14.708425521850586
      ]
    ],
    "predicted_parse_with_values": "SELECT Name FROM country WHERE Continent = \"Beatrix\"",
    "predicted_parse": "SELECT Name FROM country WHERE Continent = value",
    "predicted_parse_explanation": [
      "find the name in country table whose continent equals Beatrix"
    ],
    "template_feedback": "additionally use the information from the countrylanguage table besides the country table . consider the head of state equals Beatrix and is official equals T conditions in place of the continent equals Beatrix conditions . find language in place of name .",
    "primary_span": [
      [
        0,
        7
      ],
      [
        13,
        25
      ],
      [
        35,
        36
      ]
    ],
    "secondary_span": [
      [
        8,
        12
      ],
      [
        26,
        34
      ],
      [
        37,
        41
      ]
    ],
    "edits": [
      "language",
      "name",
      "countrylanguage",
      "head of state equals \"Beatrix\"",
      "is official equals \"T\"",
      "continent equals \"Beatrix\""
    ],
    "edits_original": "< select > add language </ select > < select > remove name </ select > < from > add countrylanguage </ from > < where > add head of state equals \" Beatrix \" </ where > < where > add is official equals \" T \" </ where > < where > remove continent equals \" Beatrix \" </ where >"
  },
  {
    "db_id": "car_1",
    "feedback": "Find different cylinders whose have maximum accelerate .",
    "question": "What is the maximum accelerate for all the different cylinders?",
    "gold_parse": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders",
    "beam": [
      [
        "SELECT Max ( Cylinders ) , Accelerate FROM cars_data GROUP BY Cylinders",
        -1.104813814163208
      ],
      [
        "SELECT Max ( Cylinders ) , Cylinders FROM cars_data GROUP BY Cylinders",
        -1.1283912062644958
      ],
      [
        "SELECT Max ( Accelerate ) , Cylinders FROM cars_data GROUP BY Cylinders",
        -2.9244269728660583
      ],
      [
        "SELECT Cylinders , Max ( Accelerate ) FROM cars_data GROUP BY Cylinders",
        -2.986337184906006
      ],
      [
        "SELECT Max ( Cylinders ) , Year FROM cars_data GROUP BY Cylinders",
        -3.26176118850708
      ],
      [
        "SELECT Max ( T6.Cylinders ) , T1.Continent FROM continents AS T1 JOIN countries AS T2 ON T1.ContId = T2.Continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country JOIN model_list AS T4 ON T3.Id = T4.Maker JOIN car_names AS T5 ON T4.Model = T5.Model JOIN cars_data AS T6 ON T5.MakeId = T6.Id GROUP BY T6.Cylinders",
        -3.4420676231384277
      ],
      [
        "SELECT Max ( Cylinders ) , MPG FROM cars_data GROUP BY Cylinders",
        -3.7201504707336426
      ],
      [
        "SELECT Max ( Accelerate ) , Accelerate FROM cars_data GROUP BY Cylinders",
        -3.898971199989319
      ],
      [
        "SELECT Max ( Cylinders ) , Horsepower FROM cars_data GROUP BY Cylinders",
        -3.994490623474121
      ],
      [
        "SELECT Max ( T2.Cylinders ) , T1.Model FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id GROUP BY T2.Cylinders",
        -4.279343128204346
      ],
      [
        "SELECT Max ( T6.Accelerate ) , T1.Continent FROM continents AS T1 JOIN countries AS T2 ON T1.ContId = T2.Continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country JOIN model_list AS T4 ON T3.Id = T4.Maker JOIN car_names AS T5 ON T4.Model = T5.Model JOIN cars_data AS T6 ON T5.MakeId = T6.Id GROUP BY T6.Cylinders",
        -4.61618447303772
      ],
      [
        "SELECT Max ( T3.Cylinders ) , T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id GROUP BY T3.Cylinders",
        -4.723753929138184
      ],
      [
        "SELECT Max ( Accelerate ) , Year FROM cars_data GROUP BY Cylinders",
        -4.725738048553467
      ],
      [
        "SELECT Max ( Cylinders ) , Weight FROM cars_data GROUP BY Cylinders",
        -4.84800910949707
      ],
      [
        "SELECT Max ( T2.Accelerate ) , T1.Model FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id GROUP BY T2.Cylinders",
        -5.198630332946777
      ],
      [
        "SELECT Cylinders , Accelerate FROM cars_data GROUP BY Cylinders",
        -5.368916273117065
      ],
      [
        "SELECT Max ( T3.Cylinders ) , T1.ModelId FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id GROUP BY T3.Cylinders",
        -5.393777847290039
      ],
      [
        "SELECT Max ( Accelerate ) , MPG FROM cars_data GROUP BY Cylinders",
        -5.460032939910889
      ],
      [
        "SELECT Max ( Accelerate ) FROM cars_data",
        -11.44456672668457
      ],
      [
        "SELECT Max ( Cylinders ) FROM cars_data",
        -11.539496421813965
      ]
    ],
    "predicted_parse_with_values": "SELECT Max ( Cylinders ) , Accelerate FROM cars_data GROUP BY Cylinders",
    "predicted_parse": "SELECT Max ( Cylinders ) , Accelerate FROM cars_data GROUP BY Cylinders",
    "predicted_parse_explanation": [
      "find each value of cylinders in cars data table along with the accelerate and maximum cylinders of the corresponding rows to each value"
    ],
    "template_feedback": "find maximum accelerate in place of accelerate . find cylinders in place of maximum cylinders .",
    "primary_span": [
      [
        0,
        2
      ],
      [
        8,
        9
      ]
    ],
    "secondary_span": [
      [
        3,
        7
      ],
      [
        10,
        15
      ]
    ],
    "edits": [
      "maximum accelerate",
      "cylinders",
      "maximum cylinders",
      "accelerate"
    ],
    "edits_original": "< select > add maximum accelerate </ select > < select > add cylinders </ select > < select > remove maximum cylinders </ select > < select > remove accelerate </ select >"
  },
  {
    "db_id": "student_transcripts_tracking",
    "feedback": "Ensure that date first registered is smallest .",
    "question": "What is the first, middle, and last name of the first student to register?",
    "gold_parse": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",
    "beam": [
      [
        "SELECT first_name , middle_name , last_name FROM Students",
        -0.0001049041748046875
      ],
      [
        "SELECT first_name , middle_name , last_name , last_name FROM Students",
        -10.831342697143555
      ],
      [
        "SELECT first_name , middle_name , last_name FROM Students WHERE email_address = value",
        -11.053600311279297
      ],
      [
        "SELECT first_name , middle_name , last_name , date_first_registered FROM Students",
        -11.842347621917725
      ],
      [
        "SELECT first_name - middle_name , last_name , last_name FROM Students",
        -12.245418548583984
      ],
      [
        "SELECT first_name , middle_name FROM Students",
        -12.418813705444336
      ],
      [
        "SELECT first_name , middle_name , last_name FROM Students ORDER BY first_name Asc",
        -12.421825408935547
      ],
      [
        "SELECT first_name , middle_name , last_name FROM Students UNION SELECT first_name FROM Students",
        -12.474988460540771
      ],
      [
        "SELECT first_name , middle_name , last_name FROM Students UNION SELECT middle_name FROM Students",
        -12.848484754562378
      ],
      [
        "SELECT first_name , middle_name , last_name FROM Students WHERE first_name = value",
        -13.098732948303223
      ],
      [
        "SELECT first_name , middle_name , last_name FROM Students ORDER BY date_first_registered Asc LIMIT value",
        -13.201355457305908
      ],
      [
        "SELECT first_name - middle_name , last_name , date_first_registered FROM Students",
        -13.280034065246582
      ],
      [
        "SELECT first_name , middle_name , last_name , date_left FROM Students",
        -13.297747611999512
      ],
      [
        "SELECT DISTINCT first_name , middle_name , last_name FROM Students",
        -14.981014251708984
      ],
      [
        "SELECT first_name , middle_name , date_left FROM Students",
        -15.700607299804688
      ],
      [
        "SELECT Count ( first_name ) , middle_name , last_name FROM Students",
        -16.5173397064209
      ],
      [
        "SELECT first_name , middle_name , DISTINCT last_name FROM Students",
        -16.71977996826172
      ],
      [
        "SELECT first_name , DISTINCT middle_name , last_name FROM Students",
        -16.83107566833496
      ],
      [
        "SELECT DISTINCT first_name , middle_name , last_name FROM Students",
        -16.87091827392578
      ],
      [
        "SELECT first_name , middle_name , last_name FROM Students LIMIT value",
        -17.08920669555664
      ]
    ],
    "predicted_parse_with_values": "SELECT first_name , middle_name , last_name FROM Students",
    "predicted_parse": "SELECT first_name , middle_name , last_name FROM Students",
    "predicted_parse_explanation": [
      "find the first name , middle name , last name in students table"
    ],
    "template_feedback": "find the result with the smallest date first registered .",
    "primary_span": [
      [
        0,
        9
      ]
    ],
    "secondary_span": [],
    "edits": [
      "date first registered",
      "1"
    ],
    "edits_original": "< orderBy > add date first registered </ orderBy > < limit > add 1 </ limit >"
  },
  {
    "db_id": "pets_1",
    "feedback": "i want the number of rows of has pet table whose pet type is dog and sex is female.",
    "question": "Find the number of dog pets that are raised by female students (with sex F).",
    "gold_parse": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'",
    "beam": [
      [
        "SELECT Count ( * ) FROM Pets WHERE PetType = value AND PetType = value",
        -0.1914386749267578
      ],
      [
        "SELECT Count ( * ) FROM Pets WHERE PetType = value",
        -2.142622947692871
      ],
      [
        "SELECT Count ( * ) FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value AND T1.Sex = value",
        -3.133089065551758
      ],
      [
        "SELECT Count ( * ) FROM Pets WHERE PetType = value AND pet_age = value",
        -4.536290645599365
      ],
      [
        "SELECT Count ( * ) FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T1.Sex = value AND T3.PetType = value",
        -6.225438117980957
      ],
      [
        "SELECT Count ( * ) FROM Student WHERE Sex = value",
        -7.871589660644531
      ],
      [
        "SELECT Count ( * ) FROM Pets WHERE PetType = value AND weight = value",
        -10.26002025604248
      ],
      [
        "SELECT Count ( * ) FROM Student WHERE Sex = value AND Sex = value",
        -11.386850833892822
      ],
      [
        "SELECT Count ( * ) FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value AND T1.Age = value",
        -11.796062469482422
      ],
      [
        "SELECT Count ( * ) FROM Pets WHERE PetType = value AND pet_age < value",
        -12.334815979003906
      ],
      [
        "SELECT Count ( * ) FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T1.Sex = value AND T3.pet_age = value",
        -12.378482818603516
      ],
      [
        "SELECT Count ( * ) FROM Pets AS T1 WHERE T1.PetType = value AND T1.pet_age IN ( SELECT T2.PetID FROM Has_Pet AS T2 JOIN Pets AS T1 ON T2.PetID = T1.PetID WHERE T1.PetType = value )",
        -12.916645526885986
      ],
      [
        "SELECT Count ( * ) FROM Pets WHERE PetType < value",
        -13.048628807067871
      ],
      [
        "SELECT Count ( * ) FROM Student WHERE Sex < value",
        -13.458510875701904
      ],
      [
        "SELECT Count ( * ) FROM Pets AS T1 WHERE T1.PetType = value AND T1.PetID IN ( SELECT T2.PetID FROM Has_Pet AS T2 JOIN Pets AS T1 ON T2.PetID = T1.PetID WHERE T1.PetType = value )",
        -13.465851783752441
      ],
      [
        "SELECT Count ( * ) FROM Pets WHERE PetType LIKE value",
        -15.020134925842285
      ],
      [
        "SELECT Avg ( * ) FROM Pets WHERE PetType = value",
        -15.498119354248047
      ],
      [
        "SELECT Sum ( * ) FROM Pets WHERE PetType = value",
        -16.004857063293457
      ],
      [
        "SELECT Count ( * ) FROM Pets WHERE pet_age < value",
        -16.129960536956787
      ],
      [
        "SELECT Count ( Count ( * ) ) FROM Pets WHERE PetType = value",
        -16.266775131225586
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM Pets WHERE PetType = \"dog\" AND PetType = \"F\"",
    "predicted_parse": "SELECT Count ( * ) FROM Pets WHERE PetType = value AND PetType = value",
    "predicted_parse_explanation": [
      "find the number of rows in pets table whose pet type equals dog and pet type equals F"
    ],
    "template_feedback": "additionally use the information from the has pet table and student table besides the pets table . consider the sex equals F conditions in place of the pet type equals F conditions .",
    "primary_span": [
      [
        0,
        11
      ],
      [
        17,
        22
      ]
    ],
    "secondary_span": [
      [
        12,
        16
      ],
      [
        23,
        32
      ]
    ],
    "edits": [
      "student",
      "has pet",
      "sex equals \"F\"",
      "pet type equals \"F\""
    ],
    "edits_original": "< from > add student </ from > < from > add has pet </ from > < where > add sex equals \" F \" </ where > < where > remove pet type equals \" F \" </ where >"
  },
  {
    "db_id": "world_1",
    "feedback": "Use Asia and name in place of Africa and government form in step 1 and 2 respectively.",
    "question": "Which African countries have a smaller population than that of any country in Asia?",
    "gold_parse": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT min(population) FROM country WHERE Continent  =  \"Asia\")",
    "beam": [
      [
        "SELECT GovernmentForm FROM country WHERE Population < ( SELECT Population FROM country WHERE Continent = value )",
        -1.1117630004882812
      ],
      [
        "SELECT Code2 FROM country WHERE Population < ( SELECT Population FROM country WHERE Continent = value )",
        -1.3002738952636719
      ],
      [
        "SELECT Code2 FROM country WHERE Population < ( SELECT Min ( Population ) FROM country WHERE Continent = value )",
        -2.5299415588378906
      ],
      [
        "SELECT GovernmentForm FROM country WHERE Population < ( SELECT Min ( Population ) FROM country WHERE Continent = value )",
        -2.601713180541992
      ],
      [
        "SELECT Code2 FROM country WHERE Population < ( SELECT Population FROM country WHERE Continent = value ) AND Population < value",
        -3.0534515380859375
      ],
      [
        "SELECT GovernmentForm FROM country WHERE Population < ( SELECT LifeExpectancy FROM country WHERE Continent = value )",
        -3.1692676544189453
      ],
      [
        "SELECT Code2 FROM country WHERE Population < ( SELECT LifeExpectancy FROM country WHERE Continent = value )",
        -3.339596748352051
      ],
      [
        "SELECT GovernmentForm FROM country WHERE Population < ( SELECT Max ( Population ) FROM country WHERE Continent = value )",
        -3.9508562088012695
      ],
      [
        "SELECT Code2 FROM country WHERE Population < ( SELECT Max ( Population ) FROM country WHERE Continent = value )",
        -4.069181442260742
      ],
      [
        "SELECT GovernmentForm FROM country WHERE LifeExpectancy < ( SELECT Population FROM country WHERE Continent = value )",
        -4.608994483947754
      ],
      [
        "SELECT Code2 FROM country WHERE LifeExpectancy < ( SELECT Population FROM country WHERE Continent = value )",
        -4.774910926818848
      ],
      [
        "SELECT Code2 FROM country WHERE Population < ( SELECT LifeExpectancy FROM country WHERE Continent = value ) AND Population < value",
        -5.069785118103027
      ],
      [
        "SELECT Code2 FROM country WHERE Population < ( SELECT Min ( LifeExpectancy ) FROM country WHERE Continent = value )",
        -5.181002616882324
      ],
      [
        "SELECT Code2 FROM country WHERE LifeExpectancy < ( SELECT Min ( Population ) FROM country WHERE Continent = value )",
        -5.278132438659668
      ],
      [
        "SELECT GovernmentForm FROM country WHERE Population < ( SELECT Min ( LifeExpectancy ) FROM country WHERE Continent = value )",
        -5.311155319213867
      ],
      [
        "SELECT GovernmentForm FROM country WHERE LifeExpectancy < ( SELECT Min ( Population ) FROM country WHERE Continent = value )",
        -5.530805587768555
      ],
      [
        "SELECT Code2 FROM country WHERE LifeExpectancy < ( SELECT Population FROM country WHERE Continent = value ) AND Population < value",
        -5.622855186462402
      ],
      [
        "SELECT Code2 FROM country WHERE Population < ( SELECT Min ( Population ) FROM country WHERE Continent = value ) AND Population < value",
        -5.829846382141113
      ],
      [
        "SELECT GovernmentForm FROM country WHERE Population < ( SELECT Population FROM country WHERE Continent = value ) AND Population < value",
        -6.451116561889648
      ],
      [
        "SELECT Continent FROM country WHERE Population < ( SELECT Population FROM country WHERE Continent = value )",
        -6.474124431610107
      ]
    ],
    "predicted_parse_with_values": "SELECT GovernmentForm FROM country WHERE Population < ( SELECT Population FROM country WHERE Continent = \"Africa\" )",
    "predicted_parse": "SELECT GovernmentForm FROM country WHERE Population < ( SELECT Population FROM country WHERE Continent = value )",
    "predicted_parse_explanation": [
      "Step 1: find the population in country table whose continent equals Africa",
      "Step 2: find the government form in country table whose population less than the results of step 1"
    ],
    "template_feedback": "in step 1 , consider the continent equals Asia conditions in place of the continent equals Africa conditions . find minimum population in place of population . in step 2 , additionally make sure that continent equals Africa . find name in place of government form .",
    "primary_span": [
      [
        4,
        9
      ],
      [
        19,
        21
      ],
      [
        31,
        38
      ],
      [
        39,
        40
      ]
    ],
    "secondary_span": [
      [
        10,
        18
      ],
      [
        22,
        26
      ],
      [
        41,
        46
      ]
    ],
    "edits": [
      "name",
      "government form",
      "continent equals \"Africa\"",
      "minimum population",
      "population",
      "continent equals \"Asia\"",
      "continent equals \"Africa\""
    ],
    "edits_original": "< select > add name </ select > < select > remove government form </ select > < where > add continent equals \" Africa \" </ where > < select > add minimum population </ select > < select > remove population </ select > < where > add continent equals \" Asia \" </ where > < where > remove continent equals \" Africa \" </ where >"
  },
  {
    "db_id": "tvshow",
    "feedback": "Use episode instead of title .",
    "question": "What is the weekly rank for the episode \"A Love of a Lifetime\"?",
    "gold_parse": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\"",
    "beam": [
      [
        "SELECT T2.Weekly_Rank FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T2.Channel = T1.id JOIN Cartoon AS T3 ON T1.id = T3.Channel WHERE T3.Title = value",
        -0.15606689453125
      ],
      [
        "SELECT Weekly_Rank FROM TV_series WHERE Episode = value",
        -1.9345378875732422
      ],
      [
        "SELECT T2.Weekly_Rank FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = value",
        -12.379047393798828
      ],
      [
        "SELECT T2.Weekly_Rank FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.Language = value",
        -13.671486854553223
      ],
      [
        "SELECT T2.Weekly_Rank FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T2.Channel = T1.id JOIN Cartoon AS T3 ON T1.id = T3.Channel WHERE T3.Written_by = value",
        -14.221113204956055
      ],
      [
        "SELECT T2.Weekly_Rank FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T2.Channel = T1.id JOIN Cartoon AS T3 ON T1.id = T3.Channel WHERE T3.Title LIKE value",
        -14.475969314575195
      ],
      [
        "SELECT DISTINCT T2.Weekly_Rank FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T2.Channel = T1.id JOIN Cartoon AS T3 ON T1.id = T3.Channel WHERE T3.Title = value",
        -14.518977165222168
      ],
      [
        "SELECT T2.Weekly_Rank , T2.Weekly_Rank FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T2.Channel = T1.id JOIN Cartoon AS T3 ON T1.id = T3.Channel WHERE T3.Title = value",
        -15.621894836425781
      ],
      [
        "SELECT Weekly_Rank FROM TV_series WHERE Episode LIKE value",
        -15.70304012298584
      ],
      [
        "SELECT T1.Pay_per_view_PPV FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = value",
        -15.787225723266602
      ],
      [
        "SELECT T2.Weekly_Rank , T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T2.Channel = T1.id JOIN Cartoon AS T3 ON T1.id = T3.Channel WHERE T3.Title = value",
        -15.825493812561035
      ],
      [
        "SELECT Weekly_Rank FROM TV_series WHERE Rating = value",
        -16.146553993225098
      ],
      [
        "SELECT DISTINCT Weekly_Rank FROM TV_series WHERE Episode = value",
        -16.276631355285645
      ],
      [
        "SELECT Count ( T2.Weekly_Rank ) FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T2.Channel = T1.id JOIN Cartoon AS T3 ON T1.id = T3.Channel WHERE T3.Title = value",
        -16.320164680480957
      ],
      [
        "SELECT Weekly_Rank FROM TV_series",
        -16.42201519012451
      ],
      [
        "SELECT T2.Weekly_Rank , T3.Title FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T2.Channel = T1.id JOIN Cartoon AS T3 ON T1.id = T3.Channel WHERE T3.Title = value",
        -16.864529609680176
      ],
      [
        "SELECT DISTINCT T2.Weekly_Rank FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T2.Channel = T1.id JOIN Cartoon AS T3 ON T1.id = T3.Channel WHERE T3.Title = value",
        -16.971991539001465
      ],
      [
        "SELECT T2.Weekly_Rank FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T2.Channel = T1.id JOIN Cartoon AS T3 ON T1.id = T3.Channel WHERE DISTINCT T3.Title = value",
        -17.030048370361328
      ],
      [
        "SELECT T2.18_49_Rating_Share FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T2.Channel = T1.id JOIN Cartoon AS T3 ON T1.id = T3.Channel WHERE T3.Title = value",
        -17.507391929626465
      ],
      [
        "SELECT T2.Weekly_Rank FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T2.Channel = T1.id JOIN Cartoon AS T3 ON T1.id = T3.Channel WHERE T3.Title = value LIMIT value",
        -17.548782348632812
      ]
    ],
    "predicted_parse_with_values": "SELECT T2.Weekly_Rank FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T2.Channel = T1.id JOIN Cartoon AS T3 ON T1.id = T3.Channel WHERE T3.Title = \"A Love of a Lifetime\"",
    "predicted_parse": "SELECT T2.Weekly_Rank FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T2.Channel = T1.id JOIN Cartoon AS T3 ON T1.id = T3.Channel WHERE T3.Title = value",
    "predicted_parse_explanation": [
      "Step 1: for each row in tv channel table , find the corresponding rows in tv series table and in cartoon table",
      "Step 2: find the weekly rank of the results of step 1 whose title equals A Love of a Lifetime"
    ],
    "template_feedback": "in step 1 , do not use the cartoon table and tv channel table . in step 2 , consider the episode equals A Love of a Lifetime conditions in place of the title equals A Love of a Lifetime conditions .",
    "primary_span": [
      [
        4,
        14
      ],
      [
        19,
        28
      ]
    ],
    "secondary_span": [
      [
        4,
        14
      ],
      [
        29,
        41
      ]
    ],
    "edits": [
      "tv channel",
      "cartoon",
      "episode equals \"A Love of a Lifetime\"",
      "title equals \"A Love of a Lifetime\""
    ],
    "edits_original": "< from > remove tv channel </ from > < from > remove cartoon </ from > < where > add episode equals \" A Love of a Lifetime \" </ where > < where > remove title equals \" A Love of a Lifetime \" </ where >"
  },
  {
    "db_id": "pets_1",
    "feedback": "Need to find Student's age in place of pet age .",
    "question": "How many pets are owned by students that have an age greater than 20?",
    "gold_parse": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20",
    "beam": [
      [
        "SELECT Count ( * ) FROM Pets WHERE pet_age > value",
        -0.38396167755126953
      ],
      [
        "SELECT Count ( * ) FROM Student WHERE Age > value",
        -1.4528532028198242
      ],
      [
        "SELECT Count ( * ) FROM Pets WHERE weight > value",
        -2.470616340637207
      ],
      [
        "SELECT Count ( * ) FROM Pets WHERE weight > value AND pet_age > value",
        -8.727344512939453
      ],
      [
        "SELECT Count ( * ) FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.weight > value AND T1.Age > value",
        -9.336091995239258
      ],
      [
        "SELECT Count ( * ) FROM Pets WHERE pet_age > value AND pet_age > value",
        -10.225762367248535
      ],
      [
        "SELECT Count ( * ) FROM Pets WHERE pet_age > = value",
        -10.451752662658691
      ],
      [
        "SELECT Count ( * ) FROM Student WHERE Age > = value",
        -10.479846000671387
      ],
      [
        "SELECT Count ( * ) FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.pet_age > value AND T1.Age > value",
        -10.791417121887207
      ],
      [
        "SELECT Count ( * ) FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T1.Age > value AND T3.pet_age > value",
        -11.726180076599121
      ],
      [
        "SELECT Count ( * ) FROM Pets WHERE weight > = value",
        -12.24386978149414
      ],
      [
        "SELECT Count ( * ) FROM Student WHERE Age > value AND Age > value",
        -12.314780235290527
      ],
      [
        "SELECT Count ( * ) FROM Pets WHERE weight > value OR pet_age > value",
        -12.53310489654541
      ],
      [
        "SELECT Count ( * ) FROM Student WHERE Age = value",
        -14.019082069396973
      ],
      [
        "SELECT Count ( DISTINCT PetType ) FROM Pets WHERE pet_age > value",
        -14.204331398010254
      ],
      [
        "SELECT Count ( DISTINCT PetType ) FROM Pets WHERE weight > value",
        -14.548331260681152
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM Pets WHERE pet_age > value",
        -14.707157135009766
      ],
      [
        "SELECT Sum ( weight ) FROM Pets WHERE pet_age > value",
        -14.911606788635254
      ],
      [
        "SELECT PetType FROM Pets WHERE pet_age > value",
        -14.967837810516357
      ],
      [
        "SELECT Count ( * ) FROM Student",
        -18.447261810302734
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM Pets WHERE pet_age > 20",
    "predicted_parse": "SELECT Count ( * ) FROM Pets WHERE pet_age > value",
    "predicted_parse_explanation": [
      "find the number of rows in pets table whose pet age greater than 20"
    ],
    "template_feedback": "use has pet table and student table in place of pets table . consider the age greater than 20 conditions in place of the pet age greater than 20 conditions .",
    "primary_span": [
      [
        0,
        6
      ],
      [
        13,
        19
      ]
    ],
    "secondary_span": [
      [
        7,
        12
      ],
      [
        20,
        30
      ]
    ],
    "edits": [
      "student",
      "has pet",
      "pets",
      "age greater than 20",
      "pet age greater than 20"
    ],
    "edits_original": "< from > add student </ from > < from > add has pet </ from > < from > remove pets </ from > < where > add age greater than 20 </ where > < where > remove pet age greater than 20 </ where >"
  },
  {
    "db_id": "network_1",
    "feedback": "In step 1, Swap friend table with likes table.",
    "question": "Give the name of the student with the most likes.",
    "gold_parse": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
    "beam": [
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id ORDER BY Count ( * ) Desc LIMIT value",
        -0.00040149688720703125
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id GROUP BY T2.student_id ORDER BY Count ( * ) Desc LIMIT value",
        -9.328924179077148
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.friend_id ORDER BY Count ( * ) Desc LIMIT value",
        -9.357808113098145
      ],
      [
        "SELECT name FROM Highschooler ORDER BY name Desc LIMIT value",
        -9.943349599838257
      ],
      [
        "SELECT name FROM Highschooler GROUP BY name ORDER BY Count ( * ) Desc LIMIT value",
        -10.022171020507812
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id ORDER BY T2.friend_id Desc LIMIT value",
        -10.180269479751587
      ],
      [
        "SELECT name FROM Highschooler ORDER BY ID Desc LIMIT value",
        -10.234604120254517
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id ORDER BY T2.student_id Desc LIMIT value",
        -11.13211178779602
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id GROUP BY T2.liked_id ORDER BY Count ( * ) Desc LIMIT value",
        -12.011957168579102
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id , T1.name ORDER BY Count ( * ) Desc LIMIT value",
        -12.234484910964966
      ],
      [
        "SELECT name FROM Highschooler GROUP BY ID ORDER BY Count ( * ) Desc LIMIT value",
        -12.364680290222168
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id ORDER BY Count ( * ) Desc",
        -12.477507591247559
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id",
        -12.54578685760498
      ],
      [
        "SELECT T1.name , T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id ORDER BY Count ( * ) Desc LIMIT value",
        -12.630686283111572
      ],
      [
        "SELECT name FROM Highschooler ORDER BY * Desc LIMIT value",
        -12.996519088745117
      ],
      [
        "SELECT name FROM Highschooler ORDER BY grade Desc LIMIT value",
        -13.131819725036621
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 WHERE T1.grade = ( SELECT T2.student_id FROM Friend AS T2 GROUP BY T2.student_id ORDER BY Count ( * ) Desc LIMIT value )",
        -13.678333580493927
      ],
      [
        "SELECT name FROM Highschooler WHERE grade = value",
        -13.777407944202423
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id , T2.friend_id ORDER BY Count ( * ) Desc LIMIT value",
        -14.071192979812622
      ],
      [
        "SELECT name FROM Highschooler",
        -14.953813552856445
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id ORDER BY Count ( * ) Desc LIMIT 1",
    "predicted_parse": "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id ORDER BY Count ( * ) Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: for each row in high schooler table , find the corresponding rows in friend table",
      "Step 2: find the number of rows of each value of student id of the results of step 1",
      "Step 3: find the name of the results of step 1 with largest value in the results of step 2"
    ],
    "template_feedback": "in step 1 , use likes table in place of friend table",
    "primary_span": [
      [
        4,
        6
      ]
    ],
    "secondary_span": [
      [
        7,
        11
      ]
    ],
    "edits": [
      "likes",
      "friend"
    ],
    "edits_original": "< from > add likes </ from > < from > remove friend </ from >"
  },
  {
    "db_id": "student_transcripts_tracking",
    "feedback": "I want enrollment of student in step 1.",
    "question": "For each semester, what is the name and id of the one with the most students registered?",
    "gold_parse": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1",
    "beam": [
      [
        "SELECT semester_name , semester_id FROM Semesters GROUP BY semester_id ORDER BY Count ( * ) Desc LIMIT value",
        -0.012875556945800781
      ],
      [
        "SELECT T1.semester_name , T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id GROUP BY T2.semester_id ORDER BY Count ( * ) Desc LIMIT value",
        -4.98525333404541
      ],
      [
        "SELECT T2.first_name , T1.semester_id FROM Semesters AS T1 JOIN Students AS T2 JOIN Student_Enrolment AS T3 ON T1.semester_id = T3.semester_id AND T3.student_id = T2.student_id GROUP BY T1.semester_id ORDER BY Count ( * ) Desc LIMIT value",
        -6.320942401885986
      ],
      [
        "SELECT T1.semester_name , T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id GROUP BY T2.student_id ORDER BY Count ( * ) Desc LIMIT value",
        -6.85996150970459
      ],
      [
        "SELECT T1.semester_name , T2.student_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id GROUP BY T1.semester_id ORDER BY Count ( * ) Desc LIMIT value",
        -7.145244598388672
      ],
      [
        "SELECT T1.semester_name , T2.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id GROUP BY T1.semester_id ORDER BY Count ( * ) Desc LIMIT value",
        -7.2573041915893555
      ],
      [
        "SELECT T1.course_name , T2.semester_id FROM Courses AS T1 JOIN Semesters AS T2 JOIN Student_Enrolment AS T3 ON T3.semester_id = T2.semester_id JOIN Student_Enrolment_Courses AS T4 ON T1.course_id = T4.course_id AND T4.student_enrolment_id = T3.student_enrolment_id GROUP BY T2.semester_id ORDER BY Count ( * ) Desc LIMIT value",
        -8.202169418334961
      ],
      [
        "SELECT T1.semester_name , T2.permanent_address_id FROM Semesters AS T1 JOIN Students AS T2 JOIN Student_Enrolment AS T3 ON T1.semester_id = T3.semester_id AND T3.student_id = T2.student_id GROUP BY T1.semester_id ORDER BY Count ( * ) Desc LIMIT value",
        -8.293708801269531
      ],
      [
        "SELECT semester_name , semester_name FROM Semesters GROUP BY semester_id ORDER BY Count ( * ) Desc LIMIT value",
        -8.506854057312012
      ],
      [
        "SELECT semester_name , Count ( * ) FROM Semesters GROUP BY semester_id ORDER BY Count ( * ) Desc LIMIT value",
        -8.897326469421387
      ],
      [
        "SELECT semester_name , semester_id FROM Semesters GROUP BY semester_id ORDER BY Count ( * ) Asc LIMIT value",
        -9.183880805969238
      ],
      [
        "SELECT T1.semester_name , T2.ssn FROM Semesters AS T1 JOIN Students AS T2 JOIN Student_Enrolment AS T3 ON T1.semester_id = T3.semester_id AND T3.student_id = T2.student_id GROUP BY T1.semester_id ORDER BY Count ( * ) Desc LIMIT value",
        -9.532546043395996
      ],
      [
        "SELECT T1.degree_summary_name , T2.semester_id FROM Degree_Programs AS T1 JOIN Semesters AS T2 JOIN Student_Enrolment AS T3 ON T1.degree_program_id = T3.degree_program_id AND T3.semester_id = T2.semester_id GROUP BY T2.semester_id ORDER BY Count ( * ) Desc LIMIT value",
        -9.566681861877441
      ],
      [
        "SELECT T1.semester_name , T2.student_id FROM Semesters AS T1 JOIN Students AS T2 JOIN Student_Enrolment AS T3 ON T1.semester_id = T3.semester_id AND T3.student_id = T2.student_id GROUP BY T1.semester_id ORDER BY Count ( * ) Desc LIMIT value",
        -9.703018188476562
      ],
      [
        "SELECT T1.semester_name , T1.semester_id FROM Semesters AS T1 JOIN Students AS T2 JOIN Student_Enrolment AS T3 ON T1.semester_id = T3.semester_id AND T3.student_id = T2.student_id GROUP BY T2.student_id ORDER BY Count ( * ) Desc LIMIT value",
        -9.72339916229248
      ],
      [
        "SELECT semester_id , semester_id FROM Semesters GROUP BY semester_id ORDER BY Count ( * ) Desc LIMIT value",
        -9.840767860412598
      ],
      [
        "SELECT T1.semester_name , T2.student_enrolment_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id GROUP BY T1.semester_id ORDER BY Count ( * ) Desc LIMIT value",
        -10.26574993133545
      ],
      [
        "SELECT T2.semester_id , T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id GROUP BY T1.semester_id ORDER BY Count ( * ) Desc LIMIT value",
        -10.389389038085938
      ],
      [
        "SELECT semester_name , semester_id FROM Semesters GROUP BY semester_name ORDER BY Count ( * ) Desc LIMIT value",
        -10.436488151550293
      ],
      [
        "SELECT semester_name , semester_description FROM Semesters GROUP BY semester_id ORDER BY Count ( * ) Desc LIMIT value",
        -10.528960227966309
      ]
    ],
    "predicted_parse_with_values": "SELECT semester_name , semester_id FROM Semesters GROUP BY semester_id ORDER BY Count ( * ) Desc LIMIT 1",
    "predicted_parse": "SELECT semester_name , semester_id FROM Semesters GROUP BY semester_id ORDER BY Count ( * ) Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of semester id in semesters table",
      "Step 2: find the semester name and semester id in semesters table with largest value in the results of step 1"
    ],
    "template_feedback": "in step 1 , additionally use the information from the student enrolment table besides the semesters table .",
    "primary_span": [
      [
        4,
        12
      ]
    ],
    "secondary_span": [
      [
        13,
        17
      ]
    ],
    "edits": [
      "student enrolment"
    ],
    "edits_original": "< from > add student enrolment </ from >"
  },
  {
    "db_id": "flight_2",
    "feedback": "Find number of rows of flights table whose corresponding airlines's airport name equals JetBlue Airways .",
    "question": "How many flights does airline 'JetBlue Airways' have?",
    "gold_parse": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"",
    "beam": [
      [
        "SELECT Count ( * ) FROM airlines WHERE Airline = value",
        -6.67572021484375e-05
      ],
      [
        "SELECT Count ( * ) FROM airlines WHERE Airline = value AND Airline = value",
        -9.81442642211914
      ],
      [
        "SELECT Count ( * ) FROM airlines WHERE Abbreviation = value",
        -12.646474838256836
      ],
      [
        "SELECT Count ( * ) FROM airlines WHERE Airline = value AND Abbreviation = value",
        -13.022592067718506
      ],
      [
        "SELECT Avg ( * ) FROM airlines WHERE Airline = value",
        -13.801501750946045
      ],
      [
        "SELECT Count ( * ) FROM airlines WHERE Airline LIKE value",
        -14.138988494873047
      ],
      [
        "SELECT * FROM airlines WHERE Airline = value",
        -14.282228589057922
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM airlines WHERE Airline = value",
        -14.691171646118164
      ],
      [
        "SELECT Count ( * ) FROM airlines WHERE Airline < value",
        -14.734886169433594
      ],
      [
        "SELECT Count ( * ) , Abbreviation FROM airlines WHERE Airline = value",
        -15.908855378627777
      ],
      [
        "SELECT Count ( Count ( * ) ) FROM airlines WHERE Airline = value",
        -16.071123123168945
      ],
      [
        "SELECT Sum ( * ) FROM airlines WHERE Airline = value",
        -16.56767201423645
      ],
      [
        "SELECT Count ( * ) FROM airlines WHERE * IN ( SELECT * FROM airlines WHERE Airline = value )",
        -16.72678965330124
      ],
      [
        "SELECT Count ( * ) , Airline FROM airlines WHERE Airline = value",
        -16.781678915023804
      ],
      [
        "SELECT Count ( * ) FROM airlines WHERE Airline > value",
        -16.81737095117569
      ],
      [
        "SELECT Count ( * ) FROM airlines WHERE Airline = value ORDER BY * Asc",
        -16.835121393203735
      ],
      [
        "SELECT Count ( DISTINCT * ) FROM airlines WHERE Airline = value",
        -16.950654983520508
      ],
      [
        "SELECT Count ( * ) FROM airlines WHERE Min ( Airline ) = value",
        -17.051984786987305
      ],
      [
        "SELECT Count ( * ) FROM airlines WHERE Airline = value LIMIT value",
        -17.128828048706055
      ],
      [
        "SELECT Count ( * ) FROM airlines",
        -19.08628273010254
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM airlines WHERE Airline = \"JetBlue Airways\"",
    "predicted_parse": "SELECT Count ( * ) FROM airlines WHERE Airline = value",
    "predicted_parse_explanation": [
      "find the number of rows in airlines table whose airline name equals JetBlue Airways"
    ],
    "template_feedback": "additionally use the information from the flights table besides the airlines table .",
    "primary_span": [
      [
        0,
        7
      ]
    ],
    "secondary_span": [
      [
        8,
        12
      ]
    ],
    "edits": [
      "flights"
    ],
    "edits_original": "< from > add flights </ from >"
  },
  {
    "db_id": "student_transcripts_tracking",
    "feedback": "In step 3 , also find department name .",
    "question": "For each department id, what is the name of the department with the most number of degrees?",
    "gold_parse": "SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1",
    "beam": [
      [
        "SELECT T1.department_name , Count ( * ) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id GROUP BY T2.department_id ORDER BY Count ( * ) Desc LIMIT value",
        -0.004352569580078125
      ],
      [
        "SELECT department_name , Count ( * ) FROM Departments GROUP BY department_id ORDER BY Count ( * ) Desc LIMIT value",
        -6.6127777099609375
      ],
      [
        "SELECT department_name , Count ( * ) FROM Departments GROUP BY department_name ORDER BY Count ( * ) Desc LIMIT value",
        -6.636928558349609
      ],
      [
        "SELECT T1.department_name FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id GROUP BY T2.department_id ORDER BY Count ( * ) Desc LIMIT value",
        -6.639984130859375
      ],
      [
        "SELECT T1.department_name , Sum ( * ) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id GROUP BY T2.department_id ORDER BY Count ( * ) Desc LIMIT value",
        -9.36981749534607
      ],
      [
        "SELECT T1.department_name , Sum ( T1.department_name ) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id GROUP BY T2.department_id ORDER BY Count ( * ) Desc LIMIT value",
        -9.384765863418579
      ],
      [
        "SELECT T1.department_name , Sum ( T2.degree_summary_name ) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id GROUP BY T2.department_id ORDER BY Count ( * ) Desc LIMIT value",
        -9.943616390228271
      ],
      [
        "SELECT T1.department_name , Sum ( T2.department_id ) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id GROUP BY T2.department_id ORDER BY Count ( * ) Desc LIMIT value",
        -10.38194227218628
      ],
      [
        "SELECT T2.department_name , Sum ( T1.course_name ) FROM Courses AS T1 JOIN Departments AS T2 JOIN Degree_Programs AS T3 ON T3.department_id = T2.department_id JOIN Student_Enrolment AS T4 ON T4.degree_program_id = T3.degree_program_id AND T4.degree_program_id = T3.degree_program_id JOIN Student_Enrolment_Courses AS T5 ON T1.course_id = T5.course_id AND T5.student_enrolment_id = T4.student_enrolment_id AND T1.course_id = T5.course_id AND T5.student_enrolment_id = T4.student_enrolment_id GROUP BY T3.department_id ORDER BY Count ( * ) Desc LIMIT value",
        -11.33970594406128
      ],
      [
        "SELECT T1.department_name , T1.department_name FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id GROUP BY T2.department_id ORDER BY Count ( * ) Desc LIMIT value",
        -11.342847347259521
      ],
      [
        "SELECT T1.department_name , Sum ( T2.degree_program_id ) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id GROUP BY T2.department_id ORDER BY Count ( * ) Desc LIMIT value",
        -11.64527940750122
      ],
      [
        "SELECT department_id , Count ( * ) FROM Degree_Programs GROUP BY department_id ORDER BY Count ( * ) Desc LIMIT value",
        -11.748429298400879
      ],
      [
        "SELECT T1.department_name , T2.department_id FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id GROUP BY T2.department_id ORDER BY Count ( * ) Desc LIMIT value",
        -11.784934282302856
      ],
      [
        "SELECT T1.department_name , Sum ( T2.degree_summary_description ) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id GROUP BY T2.department_id ORDER BY Count ( * ) Desc LIMIT value",
        -11.814693450927734
      ],
      [
        "SELECT T1.department_name , Sum ( T1.department_id ) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id GROUP BY T2.department_id ORDER BY Count ( * ) Desc LIMIT value",
        -11.865347862243652
      ],
      [
        "SELECT T2.department_name , Sum ( T1.course_id ) FROM Courses AS T1 JOIN Departments AS T2 JOIN Degree_Programs AS T3 ON T3.department_id = T2.department_id JOIN Student_Enrolment AS T4 ON T4.degree_program_id = T3.degree_program_id AND T4.degree_program_id = T3.degree_program_id JOIN Student_Enrolment_Courses AS T5 ON T1.course_id = T5.course_id AND T5.student_enrolment_id = T4.student_enrolment_id AND T1.course_id = T5.course_id AND T5.student_enrolment_id = T4.student_enrolment_id GROUP BY T3.department_id ORDER BY Count ( * ) Desc LIMIT value",
        -12.090397834777832
      ],
      [
        "SELECT T1.department_name , Sum ( T1.department_description ) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id GROUP BY T2.department_id ORDER BY Count ( * ) Desc LIMIT value",
        -12.10297966003418
      ],
      [
        "SELECT T1.department_name , Count ( * ) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id GROUP BY T2.department_id",
        -12.114287376403809
      ],
      [
        "SELECT T1.department_name , Count ( * ) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id GROUP BY T2.department_id ORDER BY Count ( * ) Desc",
        -12.285185813903809
      ],
      [
        "SELECT T1.department_name , Count ( * ) , T1.department_name FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id GROUP BY T2.department_id ORDER BY Count ( * ) Desc LIMIT value",
        -12.496051788330078
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.department_name , Count ( * ) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id GROUP BY T2.department_id ORDER BY Count ( * ) Desc LIMIT 1",
    "predicted_parse": "SELECT T1.department_name , Count ( * ) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id GROUP BY T2.department_id ORDER BY Count ( * ) Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: for each row in departments table , find the corresponding rows in degree programs table",
      "Step 2: find the number of rows of each value of degree programs 's department id of the results of step 1",
      "Step 3: find the department name and number of rows of the results of step 1 with largest value in the results of step 2"
    ],
    "template_feedback": "in step 3 , find degree programs 's department id in place of number of rows .",
    "primary_span": [
      [
        4,
        9
      ]
    ],
    "secondary_span": [
      [
        10,
        16
      ]
    ],
    "edits": [
      "department id",
      "number of rows"
    ],
    "edits_original": "< select > add department id </ select > < select > remove number of rows </ select >"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "feedback": "It should be documents table , not reference template types table .",
    "question": "How many documents do we have?",
    "gold_parse": "SELECT count(*) FROM Documents",
    "beam": [
      [
        "SELECT Count ( * ) FROM Ref_Template_Types",
        -1.9073486328125e-05
      ],
      [
        "SELECT Sum ( * ) FROM Ref_Template_Types",
        -12.052688002586365
      ],
      [
        "SELECT Count ( * ) FROM Documents WHERE Document_Name = value",
        -12.987147569656372
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM Ref_Template_Types",
        -13.333991050720215
      ],
      [
        "SELECT Count ( Count ( * ) ) FROM Ref_Template_Types",
        -14.091165542602539
      ],
      [
        "SELECT Avg ( * ) FROM Ref_Template_Types",
        -14.094772458076477
      ],
      [
        "SELECT Count ( * ) FROM Paragraphs GROUP BY Document_ID",
        -14.481115341186523
      ],
      [
        "SELECT Sum ( Document_Name ) FROM Documents",
        -14.674625396728516
      ],
      [
        "SELECT Count ( * ) , Document_Name FROM Documents",
        -14.745999217033386
      ],
      [
        "SELECT Count ( * ) , Document_ID FROM Paragraphs",
        -15.097939372062683
      ],
      [
        "SELECT Count ( * ) , Template_ID FROM Documents",
        -15.695263266563416
      ],
      [
        "SELECT Count ( * ) FROM Documents ORDER BY Document_Name Desc",
        -15.83294153213501
      ],
      [
        "SELECT Count ( * ) FROM Documents ORDER BY Document_ID Desc",
        -15.884557723999023
      ],
      [
        "SELECT Sum ( Document_ID ) FROM Documents",
        -16.46923303604126
      ],
      [
        "SELECT Max ( * ) FROM Ref_Template_Types",
        -17.003360748291016
      ],
      [
        "SELECT Count ( DISTINCT * ) FROM Ref_Template_Types",
        -17.02701187133789
      ],
      [
        "SELECT Count ( * ) FROM Ref_Template_Types LIMIT value",
        -17.04969596862793
      ],
      [
        "SELECT Avg ( Document_Name ) FROM Documents",
        -17.10193395614624
      ],
      [
        "SELECT * FROM Ref_Template_Types",
        -17.197692573070526
      ],
      [
        "SELECT Sum ( Paragraph_ID ) FROM Paragraphs",
        -17.23510503768921
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM Ref_Template_Types",
    "predicted_parse": "SELECT Count ( * ) FROM Ref_Template_Types",
    "predicted_parse_explanation": [
      "find the number of rows in reference template types table"
    ],
    "template_feedback": "use documents table in place of reference template types table .",
    "primary_span": [
      [
        0,
        2
      ]
    ],
    "secondary_span": [
      [
        3,
        10
      ]
    ],
    "edits": [
      "documents",
      "reference template types"
    ],
    "edits_original": "< from > add documents </ from > < from > remove reference template types </ from >"
  },
  {
    "db_id": "student_transcripts_tracking",
    "feedback": "In step 2 , I want the date of transcript from Transcripts table.",
    "question": "Show the date of the transcript which shows the least number of results, also list the id.",
    "gold_parse": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1",
    "beam": [
      [
        "SELECT transcript_id , transcript_id FROM Transcript_Contents GROUP BY transcript_id ORDER BY Count ( * ) Asc LIMIT value",
        -0.7131619453430176
      ],
      [
        "SELECT T1.transcript_date , T2.transcript_id FROM Transcripts AS T1 JOIN Transcript_Contents AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T2.transcript_id ORDER BY Count ( * ) Asc LIMIT value",
        -0.7593364715576172
      ],
      [
        "SELECT transcript_id , student_course_id FROM Transcript_Contents GROUP BY transcript_id ORDER BY Count ( * ) Asc LIMIT value",
        -4.070119380950928
      ],
      [
        "SELECT T2.transcript_id , T1.transcript_id FROM Transcripts AS T1 JOIN Transcript_Contents AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T2.transcript_id ORDER BY Count ( * ) Asc LIMIT value",
        -4.559064626693726
      ],
      [
        "SELECT T2.transcript_id , T1.transcript_date FROM Transcripts AS T1 JOIN Transcript_Contents AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T2.transcript_id ORDER BY Count ( * ) Asc LIMIT value",
        -4.806272029876709
      ],
      [
        "SELECT T1.transcript_id , T2.transcript_id FROM Transcripts AS T1 JOIN Transcript_Contents AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T2.transcript_id ORDER BY Count ( * ) Asc LIMIT value",
        -5.415859222412109
      ],
      [
        "SELECT T2.transcript_id , T1.other_details FROM Transcripts AS T1 JOIN Transcript_Contents AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T2.transcript_id ORDER BY Count ( * ) Asc LIMIT value",
        -6.969003677368164
      ],
      [
        "SELECT T1.transcript_date , T1.transcript_id FROM Transcripts AS T1 JOIN Transcript_Contents AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T2.transcript_id ORDER BY Count ( * ) Asc LIMIT value",
        -8.747340202331543
      ],
      [
        "SELECT transcript_id , Count ( * ) FROM Transcript_Contents GROUP BY transcript_id ORDER BY Count ( * ) Asc LIMIT value",
        -9.502397537231445
      ],
      [
        "SELECT transcript_id , transcript_id FROM Transcript_Contents GROUP BY transcript_id ORDER BY Count ( * ) Desc LIMIT value",
        -9.840636730194092
      ],
      [
        "SELECT T1.transcript_date , T2.transcript_id FROM Transcripts AS T1 JOIN Transcript_Contents AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T2.transcript_id ORDER BY Count ( * ) Desc LIMIT value",
        -10.000777244567871
      ],
      [
        "SELECT T1.transcript_id , T1.transcript_id FROM Transcripts AS T1 JOIN Transcript_Contents AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T2.transcript_id ORDER BY Count ( * ) Asc LIMIT value",
        -10.015482902526855
      ],
      [
        "SELECT T1.transcript_id , T1.transcript_date FROM Transcripts AS T1 JOIN Transcript_Contents AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T2.transcript_id ORDER BY Count ( * ) Asc LIMIT value",
        -10.054151058197021
      ],
      [
        "SELECT T3.transcript_id , T1.student_enrolment_id FROM Student_Enrolment AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.student_enrolment_id = T2.student_enrolment_id JOIN Transcript_Contents AS T3 ON T2.student_course_id = T3.student_course_id GROUP BY T3.transcript_id ORDER BY Count ( * ) Asc LIMIT value",
        -10.05655574798584
      ],
      [
        "SELECT T1.transcript_date , T1.transcript_date FROM Transcripts AS T1 JOIN Transcript_Contents AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T2.transcript_id ORDER BY Count ( * ) Asc LIMIT value",
        -10.33155632019043
      ],
      [
        "SELECT * , transcript_id FROM Transcript_Contents GROUP BY transcript_id ORDER BY Count ( * ) Asc LIMIT value",
        -10.593738555908203
      ],
      [
        "SELECT student_course_id , transcript_id FROM Transcript_Contents GROUP BY transcript_id ORDER BY Count ( * ) Asc LIMIT value",
        -10.67963695526123
      ],
      [
        "SELECT T1.transcript_id , T2.student_course_id FROM Transcripts AS T1 JOIN Transcript_Contents AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T2.transcript_id ORDER BY Count ( * ) Asc LIMIT value",
        -10.718351364135742
      ],
      [
        "SELECT T3.transcript_id , T1.other_details FROM Student_Enrolment AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.student_enrolment_id = T2.student_enrolment_id JOIN Transcript_Contents AS T3 ON T2.student_course_id = T3.student_course_id GROUP BY T3.transcript_id ORDER BY Count ( * ) Asc LIMIT value",
        -10.73871898651123
      ],
      [
        "SELECT T3.transcript_id , T1.semester_id FROM Student_Enrolment AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.student_enrolment_id = T2.student_enrolment_id JOIN Transcript_Contents AS T3 ON T2.student_course_id = T3.student_course_id GROUP BY T3.transcript_id ORDER BY Count ( * ) Asc LIMIT value",
        -10.864998817443848
      ]
    ],
    "predicted_parse_with_values": "SELECT transcript_id , transcript_id FROM Transcript_Contents GROUP BY transcript_id ORDER BY Count ( * ) Asc LIMIT 1",
    "predicted_parse": "SELECT transcript_id , transcript_id FROM Transcript_Contents GROUP BY transcript_id ORDER BY Count ( * ) Asc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of transcript id in transcript contents table",
      "Step 2: find the transcript id and transcript id in transcript contents table with smallest value in the results of step 1"
    ],
    "template_feedback": "in step 1 , additionally use the information from the transcripts table besides the transcript contents table . in step 2 , additionally find transcript date .",
    "primary_span": [
      [
        4,
        11
      ],
      [
        22,
        26
      ]
    ],
    "secondary_span": [
      [
        12,
        17
      ]
    ],
    "edits": [
      "transcript date",
      "transcript id",
      "transcripts"
    ],
    "edits_original": "< select > add transcript date </ select > < select > remove transcript id </ select > < from > add transcripts </ from >"
  },
  {
    "db_id": "flight_2",
    "feedback": "Change country , airlines table with airline , flights table .",
    "question": "What is the abbreviation of the airilne has the fewest flights and what country is it in?",
    "gold_parse": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1",
    "beam": [
      [
        "SELECT Abbreviation , Country FROM airlines GROUP BY Country ORDER BY Count ( * ) Asc LIMIT value",
        -0.07222366333007812
      ],
      [
        "SELECT Abbreviation , Country FROM airlines GROUP BY Abbreviation ORDER BY Count ( * ) Asc LIMIT value",
        -3.9683971405029297
      ],
      [
        "SELECT Abbreviation , Country FROM airlines GROUP BY Country , Country , Country ORDER BY Count ( * ) Asc LIMIT value",
        -4.265779495239258
      ],
      [
        "SELECT Abbreviation , Country FROM airlines GROUP BY Airline , Country , Country ORDER BY Count ( * ) Asc LIMIT value",
        -4.311768054962158
      ],
      [
        "SELECT Abbreviation , Country FROM airlines GROUP BY Abbreviation , Country , Country ORDER BY Count ( * ) Asc LIMIT value",
        -4.3778300285339355
      ],
      [
        "SELECT Abbreviation , Country FROM airlines GROUP BY Abbreviation , Country ORDER BY Count ( * ) Asc LIMIT value",
        -5.826876640319824
      ],
      [
        "SELECT Abbreviation , Country FROM airlines GROUP BY Country ORDER BY Count ( * ) Asc LIMIT value INTERSECT SELECT Abbreviation , Country FROM airlines GROUP BY Country ORDER BY Count ( * ) Asc LIMIT value",
        -6.120232582092285
      ],
      [
        "SELECT Abbreviation , Country FROM airlines GROUP BY Country , Country , Airline ORDER BY Count ( * ) Asc LIMIT value",
        -7.061832904815674
      ],
      [
        "SELECT Abbreviation , Country FROM airlines GROUP BY Country , Country , Abbreviation ORDER BY Count ( * ) Asc LIMIT value",
        -7.768155574798584
      ],
      [
        "SELECT Abbreviation , Country FROM airlines GROUP BY Abbreviation ORDER BY Count ( * ) Asc LIMIT value INTERSECT SELECT Abbreviation , Country FROM airlines GROUP BY Country ORDER BY Count ( * ) Asc LIMIT value",
        -7.957696914672852
      ],
      [
        "SELECT Abbreviation , Country FROM airlines GROUP BY Country , Airline , Country ORDER BY Count ( * ) Asc LIMIT value",
        -8.158580303192139
      ],
      [
        "SELECT Abbreviation , Country FROM airlines GROUP BY Airline , Country , Airline ORDER BY Count ( * ) Asc LIMIT value",
        -8.175267219543457
      ],
      [
        "SELECT Abbreviation , Country FROM airlines GROUP BY Abbreviation , Country , Airline ORDER BY Count ( * ) Asc LIMIT value",
        -8.35231876373291
      ],
      [
        "SELECT Abbreviation , Country FROM airlines GROUP BY Airline , Country , Abbreviation ORDER BY Count ( * ) Asc LIMIT value",
        -8.67867374420166
      ],
      [
        "SELECT Abbreviation , Country FROM airlines GROUP BY Country , Abbreviation , Country ORDER BY Count ( * ) Asc LIMIT value",
        -8.756750583648682
      ],
      [
        "SELECT Abbreviation , Country FROM airlines GROUP BY Abbreviation , Country , Abbreviation ORDER BY Count ( * ) Asc LIMIT value",
        -8.91043472290039
      ],
      [
        "SELECT Abbreviation , Country FROM airlines GROUP BY Abbreviation , Airline , Country ORDER BY Count ( * ) Asc LIMIT value",
        -9.125570297241211
      ],
      [
        "SELECT Abbreviation , Country FROM airlines INTERSECT SELECT Abbreviation , Country FROM airlines",
        -9.138756275177002
      ],
      [
        "SELECT Abbreviation , Country FROM airlines GROUP BY Airline , Airline , Country ORDER BY Count ( * ) Asc LIMIT value",
        -9.182041645050049
      ],
      [
        "SELECT Abbreviation , Country FROM airlines GROUP BY Country HAVING Abbreviation = value ORDER BY Count ( * ) Asc",
        -9.77821683883667
      ]
    ],
    "predicted_parse_with_values": "SELECT Abbreviation , Country FROM airlines GROUP BY Country ORDER BY Count ( * ) Asc LIMIT 1",
    "predicted_parse": "SELECT Abbreviation , Country FROM airlines GROUP BY Country ORDER BY Count ( * ) Asc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of country in airlines table",
      "Step 2: find the abbreviation and country in airlines table with smallest value in the results of step 1"
    ],
    "template_feedback": "in step 1 , additionally use the information from the flights table besides the airlines table . find for each value of airlines 's airline name in place of country .",
    "primary_span": [
      [
        4,
        11
      ],
      [
        17,
        25
      ]
    ],
    "secondary_span": [
      [
        12,
        16
      ],
      [
        26,
        30
      ]
    ],
    "edits": [
      "flights",
      "airline name",
      "country"
    ],
    "edits_original": "< from > add flights </ from > < groupBy > add airline name </ groupBy > < groupBy > remove country </ groupBy >"
  },
  {
    "db_id": "tvshow",
    "feedback": "In step 1,use id written with cartoon's id and directed by in step 3.",
    "question": "find the id of tv channels that do not play any cartoon directed by Ben Jones.",
    "gold_parse": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'",
    "beam": [
      [
        "SELECT T1.Content FROM TV_Channel AS T1 EXCEPT SELECT T1.Content FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value",
        -0.6904993057250977
      ],
      [
        "SELECT T1.Content FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value EXCEPT SELECT T1.Content FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value",
        -0.9712400436401367
      ],
      [
        "SELECT T1.Content FROM TV_Channel AS T1 EXCEPT SELECT T1.Content FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = value",
        -3.2343673706054688
      ],
      [
        "SELECT T1.Content FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value EXCEPT SELECT T1.Content FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = value",
        -3.440153121948242
      ],
      [
        "SELECT T1.Content FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value EXCEPT SELECT T3.Channel FROM TV_Channel AS T1 JOIN TV_series AS T3 ON T3.Channel = T1.id JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value",
        -3.8782291412353516
      ],
      [
        "SELECT T1.Content FROM TV_Channel AS T1 EXCEPT SELECT T2.Channel FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T2.Channel = T1.id JOIN Cartoon AS T3 ON T1.id = T3.Channel WHERE T3.Written_by = value",
        -4.269513130187988
      ],
      [
        "SELECT T1.Content FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = value EXCEPT SELECT T1.Content FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value",
        -5.39076042175293
      ],
      [
        "SELECT T1.Content FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value EXCEPT SELECT T3.Channel FROM TV_Channel AS T1 JOIN TV_series AS T3 ON T3.Channel = T1.id JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = value",
        -5.946662902832031
      ],
      [
        "SELECT T1.Content FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by ! = value",
        -5.984813690185547
      ],
      [
        "SELECT T1.Content FROM TV_Channel AS T1 EXCEPT SELECT T2.Channel FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T2.Channel = T1.id JOIN Cartoon AS T3 ON T1.id = T3.Channel WHERE T3.Directed_by = value",
        -6.5157623291015625
      ],
      [
        "SELECT T1.Content FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value AND T2.Directed_by = value",
        -7.830265045166016
      ],
      [
        "SELECT T1.Content FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = value EXCEPT SELECT T1.Content FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = value",
        -7.856314659118652
      ],
      [
        "SELECT T1.Content FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value AND T2.Written_by = value",
        -8.816630840301514
      ],
      [
        "SELECT T1.Content FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value",
        -9.19374942779541
      ],
      [
        "SELECT T1.Content FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value ORDER BY T1.Content Asc",
        -9.341815948486328
      ],
      [
        "SELECT T1.Content FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by ! = value",
        -9.967601776123047
      ],
      [
        "SELECT T1.Content FROM TV_Channel AS T1 EXCEPT SELECT T1.Content FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = value",
        -10.324687004089355
      ],
      [
        "SELECT Content FROM TV_Channel EXCEPT SELECT Content FROM TV_Channel WHERE Language = value",
        -10.538430213928223
      ],
      [
        "SELECT T1.Content FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by ! = value ORDER BY T1.Content Asc",
        -10.61376667022705
      ],
      [
        "SELECT T1.Content FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel JOIN Cartoon AS T3 ON T1.id = T3.Channel WHERE T3.Written_by = value AND T2.Rating = value",
        -10.92482614517212
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.Content FROM TV_Channel AS T1 EXCEPT SELECT T1.Content FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = \"Ben Jones\"",
    "predicted_parse": "SELECT T1.Content FROM TV_Channel AS T1 EXCEPT SELECT T1.Content FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value",
    "predicted_parse_explanation": [
      "Step 1: find the content in tv channel table",
      "Step 2: for each row in tv channel table , find the corresponding rows in cartoon table",
      "Step 3: find the content of the results of step 2 whose written by equals Ben Jones",
      "Step 4: show the rows that are in the results of step 1 but not in the results of step 3"
    ],
    "template_feedback": "in step 1 , find id in place of content . in step 2 , do not use the tv channel table . in step 3 , consider the directed by equals Ben Jones conditions in place of the written by equals Ben Jones conditions . find channel in place of content .",
    "primary_span": [
      [
        4,
        5
      ],
      [
        15,
        22
      ],
      [
        27,
        34
      ],
      [
        46,
        47
      ]
    ],
    "secondary_span": [
      [
        6,
        10
      ],
      [
        15,
        22
      ],
      [
        35,
        45
      ],
      [
        48,
        52
      ]
    ],
    "edits": [
      "id",
      "content",
      "channel",
      "content",
      "tv channel",
      "directed by equals \"Ben Jones\"",
      "written by equals \"Ben Jones\""
    ],
    "edits_original": "< select > add id </ select > < select > remove content </ select > < select > add channel </ select > < select > remove content </ select > < from > remove tv channel </ from > < where > add directed by equals \" Ben Jones \" </ where > < where > remove written by equals \" Ben Jones \" </ where >"
  },
  {
    "db_id": "wta_1",
    "feedback": "Interchange loser ioc with tourney name in step 2 and 3.",
    "question": "What are the first names and country codes for players who won both the WTA Championships and the Australian Open?",
    "gold_parse": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'",
    "beam": [
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = value INTERSECT SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = value",
        -0.002376556396484375
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = value INTERSECT SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.winner_ioc = value",
        -6.56312370300293
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.winner_ioc = value INTERSECT SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = value",
        -7.287466049194336
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = value INTERSECT SELECT T1.first_name , T1.country_code , T2.loser_ioc FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = value",
        -8.91457748413086
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = value INTERSECT SELECT T1.first_name , T2.loser_ioc FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = value",
        -9.722078323364258
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = value INTERSECT SELECT T1.first_name , T1.country_code FROM players AS T1",
        -10.322246551513672
      ],
      [
        "SELECT T1.first_name , T1.country_code , T2.loser_ioc FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = value INTERSECT SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = value",
        -12.204296112060547
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = value INTERSECT SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc LIKE value",
        -12.558759689331055
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = value",
        -12.597161293029785
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = value INTERSECT SELECT T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = value",
        -12.836706161499023
      ],
      [
        "SELECT T1.first_name , T2.loser_ioc FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = value INTERSECT SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = value",
        -12.934774398803711
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = value INTERSECT SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = value INTERSECT SELECT T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = value",
        -12.985990524291992
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = value INTERSECT SELECT T2.winner_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = value",
        -13.030328750610352
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = value INTERSECT SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.winner_entry = value",
        -13.090500831604004
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = value INTERSECT SELECT T2.tourney_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = value",
        -13.150403022766113
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.winner_entry = value INTERSECT SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = value",
        -13.159998893737793
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = value INTERSECT SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.loser_ioc HAVING T2.loser_ioc = value",
        -13.56493091583252
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = value INTERSECT SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc ! = value",
        -13.603693962097168
      ],
      [
        "SELECT T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = value INTERSECT SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = value",
        -13.633190155029297
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 INTERSECT SELECT T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = value",
        -14.320843696594238
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = \"WTA Championships\" INTERSECT SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = \"Australian Open\"",
    "predicted_parse": "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = value INTERSECT SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = value",
    "predicted_parse_explanation": [
      "Step 1: for each row in players table , find the corresponding rows in matches table",
      "Step 2: find the first name and country code of the results of step 1 whose loser ioc equals WTA Championships",
      "Step 3: for each row in players table , find the corresponding rows in matches table",
      "Step 4: find the first name and country code of the results of step 3 whose loser ioc equals Australian Open",
      "Step 5: show the rows that are in both the results of step 2 and step 4"
    ],
    "template_feedback": "in step 2 , consider the tourney name equals WTA Championships conditions in place of the loser ioc equals WTA Championships conditions . in step 4 , consider the tourney name equals Australian Open conditions in place of the loser ioc equals Australian Open conditions .",
    "primary_span": [
      [
        4,
        11
      ],
      [
        27,
        34
      ]
    ],
    "secondary_span": [
      [
        12,
        22
      ],
      [
        35,
        45
      ]
    ],
    "edits": [
      "tourney name equals \"WTA Championships\"",
      "loser ioc equals \"WTA Championships\"",
      "tourney name equals \"Australian Open\"",
      "loser ioc equals \"Australian Open\""
    ],
    "edits_original": "< where > add tourney name equals \" WTA Championships \" </ where > < where > remove loser ioc equals \" WTA Championships \" </ where > < where > add tourney name equals \" Australian Open \" </ where > < where > remove loser ioc equals \" Australian Open \" </ where >"
  },
  {
    "db_id": "dog_kennels",
    "feedback": "Not largest value of weight but Whose breed code count is highest .",
    "question": "What is the name of the breed with the most dogs?",
    "gold_parse": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1",
    "beam": [
      [
        "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code ORDER BY T2.weight Desc LIMIT value",
        -0.1811685562133789
      ],
      [
        "SELECT breed_name FROM Breeds GROUP BY breed_name ORDER BY Count ( * ) Desc LIMIT value",
        -1.8450393676757812
      ],
      [
        "SELECT name FROM Dogs ORDER BY weight Desc LIMIT value",
        -5.625391960144043
      ],
      [
        "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code ORDER BY T2.age Desc LIMIT value",
        -5.930473327636719
      ],
      [
        "SELECT T2.name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code GROUP BY T1.breed_name ORDER BY Count ( * ) Desc LIMIT value",
        -7.361899375915527
      ],
      [
        "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code ORDER BY T2.date_of_birth Desc LIMIT value",
        -7.904549598693848
      ],
      [
        "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code WHERE T2.weight = ( SELECT Max ( T2.weight ) FROM Dogs AS T2 )",
        -8.568073272705078
      ],
      [
        "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code GROUP BY T2.breed_code ORDER BY Count ( * ) Desc LIMIT value",
        -9.538783550262451
      ],
      [
        "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code GROUP BY T2.weight ORDER BY Count ( * ) Desc LIMIT value",
        -10.364325523376465
      ],
      [
        "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code GROUP BY T2.name ORDER BY Count ( * ) Desc LIMIT value",
        -10.510350227355957
      ],
      [
        "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code WHERE T2.weight = ( SELECT Max ( T2.weight ) FROM Dogs AS T2 ) ORDER BY T2.weight Desc LIMIT value",
        -10.94377326965332
      ],
      [
        "SELECT name FROM Dogs ORDER BY age Desc LIMIT value",
        -11.31450366973877
      ],
      [
        "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code GROUP BY T1.breed_name ORDER BY Sum ( T2.weight ) Desc LIMIT value",
        -11.810062408447266
      ],
      [
        "SELECT breed_name FROM Breeds GROUP BY breed_name",
        -12.070440292358398
      ],
      [
        "SELECT T1.breed_name FROM Breeds AS T1 UNION SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code WHERE T2.weight = ( SELECT Max ( T2.weight ) FROM Dogs AS T2 )",
        -12.509563446044922
      ],
      [
        "SELECT Max ( name ) FROM Dogs",
        -12.715639114379883
      ],
      [
        "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code GROUP BY T1.breed_name HAVING T2.weight < value ORDER BY Count ( * ) Desc LIMIT value",
        -13.033599853515625
      ],
      [
        "SELECT Max ( breed_name ) FROM Breeds",
        -13.070857048034668
      ],
      [
        "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code ORDER BY T2.weight Desc",
        -13.071601867675781
      ],
      [
        "SELECT breed_name FROM Breeds",
        -14.652945518493652
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code ORDER BY T2.weight Desc LIMIT 1",
    "predicted_parse": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code ORDER BY T2.weight Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: for each row in breeds table , find the corresponding rows in dogs table",
      "Step 2: find the breed name of the results of step 1 with largest value of weight"
    ],
    "template_feedback": "in step 2 , find for each value of breed name . order the results by number of rows in place of weight .",
    "primary_span": [
      [
        4,
        11
      ],
      [
        12,
        18
      ]
    ],
    "secondary_span": [
      [
        19,
        23
      ]
    ],
    "edits": [
      "breed name",
      "number of rows",
      "weight"
    ],
    "edits_original": "< groupBy > add breed name </ groupBy > < orderBy > add number of rows </ orderBy > < orderBy > remove weight </ orderBy >"
  },
  {
    "db_id": "world_1",
    "feedback": "you need to use surface area and along with that continent should equivalent with north america.",
    "question": "Give the total population and average surface area corresponding to countries in Noth America that have a surface area greater than 3000.",
    "gold_parse": "SELECT sum(Population) ,  avg(SurfaceArea) FROM country WHERE Continent  =  \"North America\" AND SurfaceArea  >  3000",
    "beam": [
      [
        "SELECT Sum ( Population ) , Avg ( Continent ) FROM country WHERE SurfaceArea > value",
        -1.1432247161865234
      ],
      [
        "SELECT Sum ( LifeExpectancy ) , Avg ( Continent ) FROM country WHERE SurfaceArea > value",
        -1.6425275802612305
      ],
      [
        "SELECT Sum ( LifeExpectancy ) , Sum ( Continent ) FROM country WHERE SurfaceArea > value",
        -2.2852516174316406
      ],
      [
        "SELECT Sum ( Population ) , Avg ( LifeExpectancy ) FROM country WHERE Region = value AND SurfaceArea > value",
        -2.734808921813965
      ],
      [
        "SELECT Sum ( Population ) , Sum ( Continent ) FROM country WHERE SurfaceArea > value",
        -2.922093391418457
      ],
      [
        "SELECT Sum ( Population ) , Avg ( Population ) FROM country WHERE Region = value AND SurfaceArea > value",
        -3.1629505157470703
      ],
      [
        "SELECT Sum ( LifeExpectancy ) , Continent FROM country WHERE SurfaceArea > value",
        -3.2626514434814453
      ],
      [
        "SELECT Sum ( LifeExpectancy ) , Avg ( LifeExpectancy ) FROM country WHERE Region = value AND SurfaceArea > value",
        -3.367918014526367
      ],
      [
        "SELECT Sum ( Population ) , Continent FROM country WHERE SurfaceArea > value",
        -3.4857263565063477
      ],
      [
        "SELECT Sum ( LifeExpectancy ) , Avg ( Population ) FROM country WHERE Region = value AND SurfaceArea > value",
        -3.7876243591308594
      ],
      [
        "SELECT Sum ( LifeExpectancy ) , Sum ( LifeExpectancy ) FROM country WHERE Region = value AND SurfaceArea > value",
        -4.362936019897461
      ],
      [
        "SELECT Sum ( LifeExpectancy ) , Sum ( Population ) FROM country WHERE Region = value AND SurfaceArea > value",
        -4.736677169799805
      ],
      [
        "SELECT Sum ( Population ) , Sum ( LifeExpectancy ) FROM country WHERE Region = value AND SurfaceArea > value",
        -4.794245719909668
      ],
      [
        "SELECT Sum ( Population ) , Avg ( LifeExpectancy ) FROM country WHERE SurfaceArea > value",
        -4.994254112243652
      ],
      [
        "SELECT Sum ( Population ) , Sum ( Population ) FROM country WHERE Region = value AND SurfaceArea > value",
        -5.1809587478637695
      ],
      [
        "SELECT Sum ( Population ) , Avg ( Population ) FROM country WHERE SurfaceArea > value",
        -5.340583801269531
      ],
      [
        "SELECT Sum ( LifeExpectancy ) , Avg ( LifeExpectancy ) FROM country WHERE SurfaceArea > value",
        -5.461203575134277
      ],
      [
        "SELECT Sum ( Population ) , Avg ( LifeExpectancy ) FROM country WHERE Name = value AND SurfaceArea > value",
        -5.47403621673584
      ],
      [
        "SELECT Sum ( LifeExpectancy ) , Avg ( Population ) FROM country WHERE SurfaceArea > value",
        -5.625357627868652
      ],
      [
        "SELECT Sum ( Population ) , Avg ( Continent ) FROM country WHERE SurfaceArea > value AND Region = value",
        -5.793304443359375
      ]
    ],
    "predicted_parse_with_values": "SELECT Sum ( Population ) , Avg ( Continent ) FROM country WHERE SurfaceArea > 3000",
    "predicted_parse": "SELECT Sum ( Population ) , Avg ( Continent ) FROM country WHERE SurfaceArea > value",
    "predicted_parse_explanation": [
      "find the summation of population and average continent in country table whose surface area greater than 3000"
    ],
    "template_feedback": "additionally make sure that continent equals North America . find average surface area in place of average continent .",
    "primary_span": [
      [
        0,
        8
      ],
      [
        9,
        12
      ]
    ],
    "secondary_span": [
      [
        13,
        18
      ]
    ],
    "edits": [
      "average surface area",
      "average continent",
      "continent equals \"North America\""
    ],
    "edits_original": "< select > add average surface area </ select > < select > remove average continent </ select > < where > add continent equals \" North America \" </ where >"
  },
  {
    "db_id": "world_1",
    "feedback": "Name should be Angola.",
    "question": "What region does Angola belong to and what is its population?",
    "gold_parse": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"",
    "beam": [
      [
        "SELECT Region , Population FROM country",
        -0.39229488372802734
      ],
      [
        "SELECT Region , LifeExpectancy FROM country",
        -1.7878618240356445
      ],
      [
        "SELECT SurfaceArea , Population FROM country",
        -2.1426849365234375
      ],
      [
        "SELECT LocalName , Population FROM country",
        -4.335333824157715
      ],
      [
        "SELECT SurfaceArea , LocalName FROM country",
        -4.543478965759277
      ],
      [
        "SELECT SurfaceArea , LifeExpectancy FROM country",
        -5.30165958404541
      ],
      [
        "SELECT LocalName , LifeExpectancy FROM country",
        -5.454689979553223
      ],
      [
        "SELECT SurfaceArea , Continent FROM country",
        -5.690313339233398
      ],
      [
        "SELECT Region , LocalName FROM country",
        -6.322770118713379
      ],
      [
        "SELECT Region , Continent FROM country",
        -6.806009292602539
      ],
      [
        "SELECT SurfaceArea , Name FROM country",
        -8.313143730163574
      ],
      [
        "SELECT Region , SurfaceArea FROM country",
        -8.529473304748535
      ],
      [
        "SELECT SurfaceArea , SurfaceArea FROM country",
        -11.079488754272461
      ],
      [
        "SELECT Name , Population FROM country",
        -11.228782653808594
      ],
      [
        "SELECT LocalName , LocalName FROM country",
        -11.252065658569336
      ],
      [
        "SELECT LocalName , Continent FROM country",
        -11.36053466796875
      ],
      [
        "SELECT Region , Name FROM country",
        -11.362567901611328
      ],
      [
        "SELECT SurfaceArea , Region FROM country",
        -11.752213478088379
      ],
      [
        "SELECT Region , Population FROM country WHERE Name = value",
        -11.992228507995605
      ],
      [
        "SELECT SurfaceArea FROM country",
        -14.724045753479004
      ]
    ],
    "predicted_parse_with_values": "SELECT Region , Population FROM country",
    "predicted_parse": "SELECT Region , Population FROM country",
    "predicted_parse_explanation": [
      "find the region and population in country table"
    ],
    "template_feedback": "additionally make sure that name equals Angola .",
    "primary_span": [
      [
        0,
        7
      ]
    ],
    "secondary_span": [],
    "edits": [
      "name equals \"Angola\""
    ],
    "edits_original": "< where > add name equals \" Angola \" </ where >"
  },
  {
    "db_id": "orchestra",
    "feedback": "In step 3 , delete the condition for descending order for the year founded , alter 200 3 with 2008.",
    "question": "Please show the name of the conductor that has conducted orchestras founded after 2008.",
    "gold_parse": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008",
    "beam": [
      [
        "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Year_of_Founded > value ORDER BY T2.Year_of_Founded Desc LIMIT value",
        -0.27953529357910156
      ],
      [
        "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Year_of_Founded > value",
        -1.6167306900024414
      ],
      [
        "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Year_of_Founded > value GROUP BY T2.Conductor_ID ORDER BY Count ( * ) Desc LIMIT value",
        -3.6482276916503906
      ],
      [
        "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Year_of_Founded > value ORDER BY T2.Year_of_Founded Asc LIMIT value",
        -4.384346008300781
      ],
      [
        "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID ORDER BY T2.Year_of_Founded Desc LIMIT value",
        -5.50018310546875
      ],
      [
        "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Year_of_Founded > value GROUP BY T2.Conductor_ID ORDER BY T2.Year_of_Founded Desc LIMIT value",
        -6.667233467102051
      ],
      [
        "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Year_of_Founded > value ORDER BY T2.Year_of_Founded Desc",
        -7.625516414642334
      ],
      [
        "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Year_of_Founded > value ORDER BY T1.Year_of_Work Desc LIMIT value",
        -7.702636241912842
      ],
      [
        "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Year_of_Founded > value GROUP BY T1.Conductor_ID ORDER BY Count ( * ) Desc LIMIT value",
        -8.608154773712158
      ],
      [
        "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Year_of_Founded > value GROUP BY T2.Conductor_ID ORDER BY Count ( * ) Desc",
        -10.010515213012695
      ],
      [
        "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Year_of_Founded > value GROUP BY T2.Conductor_ID",
        -10.21871566772461
      ],
      [
        "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Year_of_Founded > value ORDER BY T2.Year_of_Founded Asc",
        -11.358325958251953
      ],
      [
        "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Year_of_Founded > value ORDER BY T1.Name Desc",
        -11.458503246307373
      ],
      [
        "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Year_of_Founded > value ORDER BY T1.Name Asc",
        -11.916779518127441
      ],
      [
        "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Year_of_Founded > value ORDER BY T1.Name Desc LIMIT value",
        -12.201552391052246
      ],
      [
        "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY Count ( * ) Desc LIMIT value",
        -12.388581275939941
      ],
      [
        "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Year_of_Founded > value ORDER BY T1.Year_of_Work Asc LIMIT value",
        -12.74144458770752
      ],
      [
        "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Year_of_Founded = value ORDER BY T2.Year_of_Founded Desc LIMIT value",
        -13.243542671203613
      ],
      [
        "SELECT DISTINCT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Year_of_Founded > value",
        -14.657073974609375
      ],
      [
        "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID ORDER BY T2.Year_of_Founded Desc",
        -14.70117473602295
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Year_of_Founded > 2003 ORDER BY T2.Year_of_Founded Desc LIMIT 2008",
    "predicted_parse": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Year_of_Founded > value ORDER BY T2.Year_of_Founded Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: for each row in conductor table , find the corresponding rows in orchestra table",
      "Step 2: find the name of the results of step 1 whose year of founded greater than 2003 ordered descending by year of founded",
      "Step 3: only show the first 2008 rows of the results"
    ],
    "template_feedback": "in step 2 , consider the year of founded greater than 2008 conditions in place of the year of founded greater than 2003 conditions . you should not order the results . in step 1 , show me all the results .",
    "primary_span": [
      [
        4,
        12
      ],
      [
        25,
        31
      ],
      [
        36,
        41
      ]
    ],
    "secondary_span": [
      [
        13,
        24
      ]
    ],
    "edits": [
      "year of founded greater than 2008",
      "year of founded greater than 2003",
      "year of founded",
      "descending",
      "2008"
    ],
    "edits_original": "< where > add year of founded greater than 2008 </ where > < where > remove year of founded greater than 2003 </ where > < orderBy > remove year of founded </ orderBy > < orderBy > remove descending </ orderBy > < limit > remove 2008 </ limit >"
  },
  {
    "db_id": "orchestra",
    "feedback": "Replace year of founded in orchestra table with orchestra id in performance table in step 1.",
    "question": "What are years of founding for orchestras that have had more than a single performance?",
    "gold_parse": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1",
    "beam": [
      [
        "SELECT Year_of_Founded FROM orchestra GROUP BY Year_of_Founded HAVING Count ( * ) > value",
        -0.34111595153808594
      ],
      [
        "SELECT T1.Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID GROUP BY T2.Official_ratings_(millions) HAVING Count ( * ) > value",
        -1.706322193145752
      ],
      [
        "SELECT T2.Year_of_Founded FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T1.Nationality HAVING Count ( * ) > value",
        -3.140362024307251
      ],
      [
        "SELECT Year_of_Founded FROM orchestra GROUP BY Record_Company HAVING Count ( * ) > value",
        -3.8241724967956543
      ],
      [
        "SELECT T1.Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING Count ( * ) > value",
        -4.369881629943848
      ],
      [
        "SELECT T1.Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID GROUP BY T2.Date HAVING Count ( * ) > value",
        -4.9064531326293945
      ],
      [
        "SELECT T1.Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID JOIN show AS T3 ON T2.Performance_ID = T3.Performance_ID GROUP BY T3.Result HAVING Count ( * ) > value",
        -4.968257427215576
      ],
      [
        "SELECT T1.Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID JOIN show AS T3 ON T2.Performance_ID = T3.Performance_ID WHERE T3.Attendance > value",
        -5.218719959259033
      ],
      [
        "SELECT Year_of_Founded FROM orchestra GROUP BY Conductor_ID HAVING Count ( * ) > value",
        -5.47503662109375
      ],
      [
        "SELECT Year_of_Founded FROM orchestra GROUP BY Major_Record_Format HAVING Count ( * ) > value",
        -6.878458023071289
      ],
      [
        "SELECT T1.Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID GROUP BY T2.Performance_ID HAVING Count ( * ) > value",
        -7.007451057434082
      ],
      [
        "SELECT T1.Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID JOIN show AS T3 ON T2.Performance_ID = T3.Performance_ID GROUP BY T3.Performance_ID HAVING Count ( * ) > value",
        -7.0752058029174805
      ],
      [
        "SELECT T1.Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID GROUP BY T2.Type HAVING Count ( * ) > value",
        -7.509363174438477
      ],
      [
        "SELECT T1.Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID JOIN show AS T3 ON T2.Performance_ID = T3.Performance_ID GROUP BY T3.Attendance HAVING Count ( * ) > value",
        -7.735261917114258
      ],
      [
        "SELECT T1.Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID GROUP BY T2.Share HAVING Count ( * ) > value",
        -7.8990373611450195
      ],
      [
        "SELECT T1.Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID GROUP BY T2.Weekly_rank HAVING Count ( * ) > value",
        -7.925105571746826
      ],
      [
        "SELECT Year_of_Founded FROM orchestra GROUP BY Orchestra HAVING Count ( * ) > value",
        -8.057650566101074
      ],
      [
        "SELECT T2.Year_of_Founded FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T1.Year_of_Work HAVING Count ( * ) > value",
        -8.809466361999512
      ],
      [
        "SELECT Year_of_Founded FROM orchestra",
        -10.902145385742188
      ],
      [
        "SELECT DISTINCT Year_of_Founded FROM orchestra",
        -15.407172203063965
      ]
    ],
    "predicted_parse_with_values": "SELECT Year_of_Founded FROM orchestra GROUP BY Year_of_Founded HAVING Count ( * ) > 1",
    "predicted_parse": "SELECT Year_of_Founded FROM orchestra GROUP BY Year_of_Founded HAVING Count ( * ) > value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of year of founded in orchestra table",
      "Step 2: find the year of founded in orchestra table whose corresponding value in step 1 is greater than 1"
    ],
    "template_feedback": "in step 1 , additionally use the information from the performance table besides the orchestra table . find for value of performance 's orchestra id in place of year of founded .",
    "primary_span": [
      [
        4,
        11
      ],
      [
        17,
        24
      ]
    ],
    "secondary_span": [
      [
        12,
        16
      ],
      [
        25,
        31
      ]
    ],
    "edits": [
      "performance",
      "orchestra id",
      "year of founded"
    ],
    "edits_original": "< from > add performance </ from > < groupBy > add orchestra id </ groupBy > < groupBy > remove year of founded </ groupBy >"
  },
  {
    "db_id": "world_1",
    "feedback": "give me the continent where maximum number of language are spoken.",
    "question": "Which continent speaks the most languages?",
    "gold_parse": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1",
    "beam": [
      [
        "SELECT Continent FROM country GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value",
        -0.010229110717773438
      ],
      [
        "SELECT Continent FROM country GROUP BY LocalName ORDER BY Count ( * ) Desc LIMIT value",
        -4.657102584838867
      ],
      [
        "SELECT LocalName FROM country GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value",
        -8.02554988861084
      ],
      [
        "SELECT Continent , Count ( * ) FROM country GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value",
        -8.395837783813477
      ],
      [
        "SELECT Continent , Continent FROM country GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value",
        -9.920454025268555
      ],
      [
        "SELECT Name FROM country GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value",
        -10.212600708007812
      ],
      [
        "SELECT Continent , Count ( * ) FROM country GROUP BY LocalName ORDER BY Count ( * ) Desc LIMIT value",
        -11.158763885498047
      ],
      [
        "SELECT Continent FROM country GROUP BY Continent ORDER BY Count ( * ) Desc",
        -11.974347114562988
      ],
      [
        "SELECT Continent FROM country GROUP BY Region ORDER BY Count ( * ) Desc LIMIT value",
        -12.456242561340332
      ],
      [
        "SELECT LocalName FROM country GROUP BY LocalName ORDER BY Count ( * ) Desc LIMIT value",
        -12.615068435668945
      ],
      [
        "SELECT LocalName , Continent FROM country GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value",
        -13.159576416015625
      ],
      [
        "SELECT Continent , Count ( * ) FROM country GROUP BY Continent",
        -13.197139739990234
      ],
      [
        "SELECT DISTINCT Continent FROM country GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value",
        -13.387922286987305
      ],
      [
        "SELECT Region FROM country GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value",
        -13.6077880859375
      ],
      [
        "SELECT Continent FROM country GROUP BY Continent ORDER BY Count ( LocalName ) Desc LIMIT value",
        -13.798603057861328
      ],
      [
        "SELECT Continent , LocalName FROM country GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value",
        -13.959980964660645
      ],
      [
        "SELECT Continent FROM country GROUP BY Name ORDER BY Count ( * ) Desc LIMIT value",
        -14.092795372009277
      ],
      [
        "SELECT Continent , Continent FROM country GROUP BY LocalName ORDER BY Count ( * ) Desc LIMIT value",
        -14.323760986328125
      ],
      [
        "SELECT Continent FROM country ORDER BY LocalName Desc LIMIT value",
        -15.056974172592163
      ],
      [
        "SELECT Continent FROM country GROUP BY Continent",
        -15.226131439208984
      ]
    ],
    "predicted_parse_with_values": "SELECT Continent FROM country GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT 1",
    "predicted_parse": "SELECT Continent FROM country GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of continent in country table",
      "Step 2: find the continent in country table with largest value in the results of step 1"
    ],
    "template_feedback": "in step 1 , additionally use the information from the countrylanguage table besides the country table .",
    "primary_span": [
      [
        4,
        11
      ]
    ],
    "secondary_span": [
      [
        12,
        16
      ]
    ],
    "edits": [
      "countrylanguage"
    ],
    "edits_original": "< from > add countrylanguage </ from >"
  },
  {
    "db_id": "flight_2",
    "feedback": "No need to find airport name , need to find destination airport instead of that .",
    "question": "What are flight numbers of flights arriving at Airport \"APG\"?",
    "gold_parse": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"",
    "beam": [
      [
        "SELECT T2.FlightNo FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.AirportName = value",
        -0.00713348388671875
      ],
      [
        "SELECT T2.FlightNo FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.City = value",
        -5.2813920974731445
      ],
      [
        "SELECT T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Airline = value",
        -6.9916672706604
      ],
      [
        "SELECT T2.FlightNo FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.Country = value",
        -7.406379699707031
      ],
      [
        "SELECT T2.FlightNo FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.CountryAbbrev = value",
        -7.650154113769531
      ],
      [
        "SELECT T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Abbreviation = value",
        -12.274560928344727
      ],
      [
        "SELECT FlightNo FROM flights WHERE DestAirport = value",
        -12.395827293395996
      ],
      [
        "SELECT FlightNo FROM flights WHERE FlightNo = value",
        -12.413926124572754
      ],
      [
        "SELECT T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Country = value",
        -12.965789794921875
      ],
      [
        "SELECT FlightNo FROM flights WHERE Airline = value",
        -13.747151374816895
      ],
      [
        "SELECT DISTINCT T2.FlightNo FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.AirportName = value",
        -13.935583114624023
      ],
      [
        "SELECT T2.FlightNo , T2.FlightNo FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.AirportName = value",
        -14.058749556541443
      ],
      [
        "SELECT FlightNo FROM flights WHERE SourceAirport = value",
        -14.269207000732422
      ],
      [
        "SELECT FlightNo FROM flights WHERE FlightNo LIKE value",
        -14.452965259552002
      ],
      [
        "SELECT T2.FlightNo FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.AirportName LIKE value",
        -15.08799934387207
      ],
      [
        "SELECT T2.FlightNo FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.AirportName < value",
        -16.02611756324768
      ],
      [
        "SELECT DISTINCT T2.FlightNo FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.AirportName = value",
        -16.096824645996094
      ],
      [
        "SELECT T2.FlightNo FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.AirportName = value AND T1.AirportName = value",
        -16.225952923297882
      ],
      [
        "SELECT T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 WHERE T1.uid = value",
        -16.24849224090576
      ],
      [
        "SELECT FlightNo FROM flights",
        -16.81099033355713
      ]
    ],
    "predicted_parse_with_values": "SELECT T2.FlightNo FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.AirportName = \"APG\"",
    "predicted_parse": "SELECT T2.FlightNo FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.AirportName = value",
    "predicted_parse_explanation": [
      "Step 1: for each row in airports table , find the corresponding rows in flights table",
      "Step 2: find the flight number of the results of step 1 whose airport name equals APG"
    ],
    "template_feedback": "in step 1 , do not use the airports table . in step 2 , consider the destination airport equals APG conditions in place of the airport name equals APG conditions .",
    "primary_span": [
      [
        4,
        10
      ],
      [
        15,
        21
      ]
    ],
    "secondary_span": [
      [
        4,
        10
      ],
      [
        22,
        31
      ]
    ],
    "edits": [
      "airports",
      "destination airport equals \"APG\"",
      "airport name equals \"APG\""
    ],
    "edits_original": "< from > remove airports </ from > < where > add destination airport equals \" APG \" </ where > < where > remove airport name equals \" APG \" </ where >"
  },
  {
    "db_id": "car_1",
    "feedback": "you have to look for highest value of mpg instead of accelerate.",
    "question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.",
    "gold_parse": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1",
    "beam": [
      [
        "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id ORDER BY T3.Accelerate Desc LIMIT value",
        -0.19952774047851562
      ],
      [
        "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id GROUP BY T1.Model ORDER BY Sum ( T3.Accelerate ) Desc LIMIT value",
        -1.7722082138061523
      ],
      [
        "SELECT Model FROM model_list GROUP BY Model ORDER BY Count ( * ) Desc LIMIT value",
        -5.0454511642456055
      ],
      [
        "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id GROUP BY T1.ModelId ORDER BY Sum ( T3.Accelerate ) Desc LIMIT value",
        -6.76581335067749
      ],
      [
        "SELECT T1.Model FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id ORDER BY T2.Accelerate Desc LIMIT value",
        -7.246732711791992
      ],
      [
        "SELECT T2.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model AND T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id GROUP BY T1.Model ORDER BY Sum ( T3.Accelerate ) Desc LIMIT value",
        -7.441787242889404
      ],
      [
        "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T3.Accelerate = ( SELECT Max ( T3.Accelerate ) FROM cars_data AS T3 )",
        -7.572031497955322
      ],
      [
        "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model AND T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id GROUP BY T2.Model ORDER BY Sum ( T3.Accelerate ) Desc LIMIT value",
        -7.937093734741211
      ],
      [
        "SELECT T1.ModelId FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id ORDER BY T3.Accelerate Desc LIMIT value",
        -8.643351554870605
      ],
      [
        "SELECT T1.Model , T1.ModelId FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id ORDER BY T3.Accelerate Desc LIMIT value",
        -8.915610313415527
      ],
      [
        "SELECT Edispl FROM cars_data ORDER BY Accelerate Desc LIMIT value",
        -9.227777481079102
      ],
      [
        "SELECT T1.ModelId FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id GROUP BY T1.Model ORDER BY Sum ( T3.Accelerate ) Desc LIMIT value",
        -9.386157512664795
      ],
      [
        "SELECT T1.Model , T1.ModelId FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id GROUP BY T1.Model ORDER BY Sum ( T3.Accelerate ) Desc LIMIT value",
        -9.716459035873413
      ],
      [
        "SELECT T3.Edispl FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id GROUP BY T1.Model ORDER BY Sum ( T3.Accelerate ) Desc LIMIT value",
        -9.831071853637695
      ],
      [
        "SELECT Model FROM model_list GROUP BY ModelId ORDER BY Count ( * ) Desc LIMIT value",
        -10.003035068511963
      ],
      [
        "SELECT Max ( Accelerate ) FROM cars_data",
        -10.05556583404541
      ],
      [
        "SELECT T1.Model , T3.Accelerate FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id ORDER BY T3.Accelerate Desc LIMIT value",
        -10.189726829528809
      ],
      [
        "SELECT Model , Count ( * ) FROM model_list GROUP BY Model",
        -10.546210289001465
      ],
      [
        "SELECT T1.Model FROM model_list AS T1 UNION SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T3.Accelerate = ( SELECT Max ( T3.Accelerate ) FROM cars_data AS T3 )",
        -10.761260986328125
      ],
      [
        "SELECT Max ( ModelId ) FROM model_list",
        -11.908624172210693
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id ORDER BY T3.Accelerate Desc LIMIT 1",
    "predicted_parse": "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id ORDER BY T3.Accelerate Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: for each row in model list table , find the corresponding rows in car names table and in cars data table",
      "Step 2: find the model list 's model of the results of step 1 with largest value of accelerate"
    ],
    "template_feedback": "in step 1 , do not use the model list table . in step 2 , order the results by mpg in place of accelerate .",
    "primary_span": [
      [
        4,
        11
      ],
      [
        16,
        20
      ]
    ],
    "secondary_span": [
      [
        4,
        11
      ],
      [
        21,
        25
      ]
    ],
    "edits": [
      "model list",
      "mpg",
      "accelerate"
    ],
    "edits_original": "< from > remove model list </ from > < orderBy > add mpg </ orderBy > < orderBy > remove accelerate </ orderBy >"
  },
  {
    "db_id": "dog_kennels",
    "feedback": "Use state in place of first name.",
    "question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.",
    "gold_parse": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'",
    "beam": [
      [
        "SELECT first_name , last_name , email_address FROM Owners WHERE first_name LIKE value",
        -0.3232889175415039
      ],
      [
        "SELECT first_name , last_name , email_address FROM Owners WHERE state LIKE value",
        -1.2951374053955078
      ],
      [
        "SELECT T1.first_name , T1.last_name , T1.email_address FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id WHERE T3.first_name LIKE value",
        -6.769861698150635
      ],
      [
        "SELECT T1.first_name , T1.last_name , T1.email_address FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T2.name LIKE value",
        -7.011463165283203
      ],
      [
        "SELECT first_name , last_name , email_address FROM Owners WHERE last_name LIKE value",
        -9.057523727416992
      ],
      [
        "SELECT T1.first_name , T1.last_name , T3.email_address FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id WHERE T1.first_name LIKE value",
        -9.646177291870117
      ],
      [
        "SELECT T1.first_name , T1.last_name , T3.email_address FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id WHERE T1.state LIKE value",
        -10.547931671142578
      ],
      [
        "SELECT T1.first_name , T1.last_name , T1.email_address FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id WHERE T3.state LIKE value",
        -10.819725036621094
      ],
      [
        "SELECT first_name , last_name , email_address FROM Owners WHERE street LIKE value",
        -11.033024787902832
      ],
      [
        "SELECT T1.first_name , T3.last_name , T1.email_address FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id WHERE T1.first_name LIKE value",
        -11.469470024108887
      ],
      [
        "SELECT T1.first_name , T3.last_name , T1.email_address FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id WHERE T1.state LIKE value",
        -12.396248817443848
      ],
      [
        "SELECT first_name , last_name , email_address FROM Owners WHERE zip_code LIKE value",
        -12.617679595947266
      ],
      [
        "SELECT first_name , last_name FROM Owners WHERE first_name LIKE value",
        -12.755758285522461
      ],
      [
        "SELECT first_name , last_name , Sum ( email_address ) FROM Owners WHERE first_name LIKE value",
        -13.16707992553711
      ],
      [
        "SELECT first_name , last_name , email_address , email_address FROM Owners WHERE first_name LIKE value",
        -13.3251371383667
      ],
      [
        "SELECT first_name , last_name , email_address FROM Owners WHERE state = value",
        -13.48579216003418
      ],
      [
        "SELECT first_name , last_name , email_address FROM Owners WHERE city LIKE value",
        -13.683944702148438
      ],
      [
        "SELECT first_name , last_name , email_address FROM Owners WHERE state ! = value",
        -13.763303756713867
      ],
      [
        "SELECT first_name , last_name , email_address FROM Owners WHERE state IN ( SELECT first_name FROM Owners WHERE first_name LIKE value )",
        -13.792787790298462
      ],
      [
        "SELECT first_name , last_name FROM Owners WHERE state LIKE value",
        -15.578185081481934
      ]
    ],
    "predicted_parse_with_values": "SELECT first_name , last_name , email_address FROM Owners WHERE first_name LIKE \"North\"",
    "predicted_parse": "SELECT first_name , last_name , email_address FROM Owners WHERE first_name LIKE value",
    "predicted_parse_explanation": [
      "find the first name , last name , email address in owners table whose first name like North"
    ],
    "template_feedback": "consider the state like % North % conditions in place of the first name like North conditions .",
    "primary_span": [
      [
        0,
        7
      ]
    ],
    "secondary_span": [
      [
        8,
        17
      ]
    ],
    "edits": [
      "state like \"%North%\"",
      "first name like \"North\""
    ],
    "edits_original": "< where > add state like \" % North % \" </ where > < where > remove first name like \" North \" </ where >"
  },
  {
    "db_id": "tvshow",
    "feedback": "The written by is wrong , directed by is the right parameter .",
    "question": "What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?",
    "gold_parse": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\"",
    "beam": [
      [
        "SELECT Title FROM Cartoon WHERE Written_by = value OR Directed_by = value",
        -0.43244361877441406
      ],
      [
        "SELECT Title FROM Cartoon WHERE Written_by = value OR Written_by = value",
        -1.1060733795166016
      ],
      [
        "SELECT Title FROM Cartoon WHERE Directed_by = value OR Written_by = value",
        -4.9087934494018555
      ],
      [
        "SELECT Title FROM Cartoon WHERE Directed_by = value OR Directed_by = value",
        -5.093618392944336
      ],
      [
        "SELECT DISTINCT Title FROM Cartoon WHERE Written_by = value OR Directed_by = value",
        -5.486326217651367
      ],
      [
        "SELECT DISTINCT Title FROM Cartoon WHERE Written_by = value OR Written_by = value",
        -6.0793867111206055
      ],
      [
        "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T2.Channel = T1.id JOIN Cartoon AS T3 ON T1.id = T3.Channel WHERE T3.Written_by = value OR T3.Directed_by = value",
        -9.845775604248047
      ],
      [
        "SELECT DISTINCT Title FROM Cartoon WHERE Directed_by = value OR Written_by = value",
        -9.973236083984375
      ],
      [
        "SELECT DISTINCT Title FROM Cartoon WHERE Directed_by = value OR Directed_by = value",
        -10.204060554504395
      ],
      [
        "SELECT Title FROM Cartoon WHERE Written_by = value AND Directed_by = value",
        -10.382328033447266
      ],
      [
        "SELECT DISTINCT Title FROM Cartoon WHERE Written_by = value OR Directed_by = value",
        -10.589056968688965
      ],
      [
        "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value OR T1.series_name = value",
        -10.616189002990723
      ],
      [
        "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T2.Channel = T1.id JOIN Cartoon AS T3 ON T1.id = T3.Channel WHERE T3.Written_by = value OR T3.Written_by = value",
        -10.663461685180664
      ],
      [
        "SELECT DISTINCT Title FROM Cartoon WHERE Written_by = value OR Written_by = value",
        -11.517088890075684
      ],
      [
        "SELECT Title FROM Cartoon WHERE Written_by = value AND Written_by = value",
        -12.281514167785645
      ],
      [
        "SELECT T3.Title , T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T2.Channel = T1.id JOIN Cartoon AS T3 ON T1.id = T3.Channel WHERE T3.Written_by = value OR T3.Directed_by = value",
        -12.334762573242188
      ],
      [
        "SELECT T3.Title , T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T2.Channel = T1.id JOIN Cartoon AS T3 ON T1.id = T3.Channel WHERE T3.Written_by = value OR T3.Written_by = value",
        -12.736080169677734
      ],
      [
        "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value OR T1.Language = value",
        -13.184258460998535
      ],
      [
        "SELECT Title FROM Cartoon WHERE Written_by = value OR Written_by = value AND Directed_by = value",
        -13.749441146850586
      ],
      [
        "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T2.Channel = T1.id JOIN Cartoon AS T3 ON T1.id = T3.Channel WHERE T3.Directed_by = value OR T3.Written_by = value",
        -14.502991676330566
      ]
    ],
    "predicted_parse_with_values": "SELECT Title FROM Cartoon WHERE Written_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\"",
    "predicted_parse": "SELECT Title FROM Cartoon WHERE Written_by = value OR Directed_by = value",
    "predicted_parse_explanation": [
      "find the title in cartoon table whose written by equals Ben Jones or directed by equals Brandon Vietti"
    ],
    "template_feedback": "consider the directed by equals Ben Jones conditions in place of the written by equals Ben Jones conditions .",
    "primary_span": [
      [
        0,
        7
      ]
    ],
    "secondary_span": [
      [
        8,
        18
      ]
    ],
    "edits": [
      "directed by equals \"Ben Jones\" or directed by equals \"Brandon Vietti\"",
      "written by equals \"Ben Jones\" or directed by equals \"Brandon Vietti\""
    ],
    "edits_original": "< where > add directed by equals \" Ben Jones \" or directed by equals \" Brandon Vietti \" </ where > < where > remove written by equals \" Ben Jones \" or directed by equals \" Brandon Vietti \" </ where >"
  },
  {
    "db_id": "world_1",
    "feedback": "i want region and also make sure that name of country should be angola.",
    "question": "What are the region and population of Angola?",
    "gold_parse": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"",
    "beam": [
      [
        "SELECT SurfaceArea , Population FROM country",
        -0.24196624755859375
      ],
      [
        "SELECT LocalName , Population FROM country",
        -1.7886104583740234
      ],
      [
        "SELECT Region , Population FROM country",
        -3.0752410888671875
      ],
      [
        "SELECT SurfaceArea , LifeExpectancy FROM country",
        -6.858251571655273
      ],
      [
        "SELECT LocalName , LifeExpectancy FROM country",
        -8.436891555786133
      ],
      [
        "SELECT SurfaceArea , Continent FROM country",
        -8.93580436706543
      ],
      [
        "SELECT Region , LifeExpectancy FROM country",
        -9.719932556152344
      ],
      [
        "SELECT Continent , Population FROM country",
        -10.18881893157959
      ],
      [
        "SELECT LocalName , Continent FROM country",
        -10.436565399169922
      ],
      [
        "SELECT Region , Continent FROM country",
        -11.774602890014648
      ],
      [
        "SELECT SurfaceArea , Population FROM country WHERE Name = value",
        -12.482538223266602
      ],
      [
        "SELECT SurfaceArea , Population , Population FROM country",
        -13.427834510803223
      ],
      [
        "SELECT SurfaceArea , Population FROM country UNION SELECT Continent FROM country",
        -13.444072723388672
      ],
      [
        "SELECT SurfaceArea , Population FROM country WHERE Continent = value",
        -13.725368022918701
      ],
      [
        "SELECT LocalName , Population FROM country WHERE Name = value",
        -13.759716033935547
      ],
      [
        "SELECT SurfaceArea , Population , LifeExpectancy FROM country",
        -13.793049812316895
      ],
      [
        "SELECT Count ( SurfaceArea ) , Population FROM country",
        -14.35529899597168
      ],
      [
        "SELECT SurfaceArea FROM country",
        -14.647189140319824
      ],
      [
        "SELECT DISTINCT SurfaceArea , Population FROM country",
        -15.026813507080078
      ],
      [
        "SELECT LocalName , Population FROM country UNION SELECT Continent FROM country",
        -15.136405944824219
      ]
    ],
    "predicted_parse_with_values": "SELECT SurfaceArea , Population FROM country",
    "predicted_parse": "SELECT SurfaceArea , Population FROM country",
    "predicted_parse_explanation": [
      "find the surface area and population in country table"
    ],
    "template_feedback": "additionally make sure that name equals Angola . find region in place of surface area .",
    "primary_span": [
      [
        0,
        7
      ],
      [
        8,
        9
      ]
    ],
    "secondary_span": [
      [
        10,
        15
      ]
    ],
    "edits": [
      "region",
      "surface area",
      "name equals \"Angola\""
    ],
    "edits_original": "< select > add region </ select > < select > remove surface area </ select > < where > add name equals \" Angola \" </ where >"
  },
  {
    "db_id": "flight_2",
    "feedback": "delete the phrase \"\"and country equals united states\"\".",
    "question": "Which city and country is the Alton airport at?",
    "gold_parse": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"",
    "beam": [
      [
        "SELECT City , Country FROM airports WHERE AirportName = value AND Country = value",
        -0.8434314727783203
      ],
      [
        "SELECT City , Country FROM airports WHERE AirportName = value AND CountryAbbrev = value",
        -0.8582038879394531
      ],
      [
        "SELECT City , CountryAbbrev FROM airports WHERE AirportName = value AND Country = value",
        -2.649993896484375
      ],
      [
        "SELECT City , CountryAbbrev FROM airports WHERE AirportName = value AND CountryAbbrev = value",
        -2.6596508026123047
      ],
      [
        "SELECT City , AirportName FROM airports WHERE AirportName = value AND Country = value",
        -6.8410444259643555
      ],
      [
        "SELECT City , Country FROM airports",
        -6.957042694091797
      ],
      [
        "SELECT AirportName , Country FROM airports WHERE AirportName = value AND CountryAbbrev = value",
        -7.084686279296875
      ],
      [
        "SELECT AirportName , Country FROM airports WHERE AirportName = value AND Country = value",
        -7.087873458862305
      ],
      [
        "SELECT City , AirportName FROM airports WHERE AirportName = value AND CountryAbbrev = value",
        -7.451170921325684
      ],
      [
        "SELECT City , CountryAbbrev FROM airports",
        -8.585702896118164
      ],
      [
        "SELECT AirportName , CountryAbbrev FROM airports WHERE AirportName = value AND CountryAbbrev = value",
        -8.754422187805176
      ],
      [
        "SELECT AirportName , CountryAbbrev FROM airports WHERE AirportName = value AND Country = value",
        -8.759934425354004
      ],
      [
        "SELECT City , Country FROM airports WHERE Country = value",
        -8.85794448852539
      ],
      [
        "SELECT City , Country FROM airports WHERE CountryAbbrev = value",
        -9.97956371307373
      ],
      [
        "SELECT City , Country FROM airports WHERE City = value AND Country = value",
        -10.230461120605469
      ],
      [
        "SELECT City , CountryAbbrev FROM airports WHERE Country = value",
        -10.446248054504395
      ],
      [
        "SELECT City , CountryAbbrev FROM airports WHERE CountryAbbrev = value",
        -11.691415786743164
      ],
      [
        "SELECT City FROM airports WHERE AirportName = value AND Country = value",
        -12.432645797729492
      ],
      [
        "SELECT AirportName , Country FROM airports",
        -12.80504035949707
      ],
      [
        "SELECT City , AirportName FROM airports",
        -13.32243537902832
      ]
    ],
    "predicted_parse_with_values": "SELECT City , Country FROM airports WHERE AirportName = \"Alton\" AND Country = \"United States \"",
    "predicted_parse": "SELECT City , Country FROM airports WHERE AirportName = value AND Country = value",
    "predicted_parse_explanation": [
      "find the city and country in airports table whose airport name equals Alton and country equals United States"
    ],
    "template_feedback": "remove the country equals United States conditions .",
    "primary_span": [
      [
        0,
        7
      ]
    ],
    "secondary_span": [],
    "edits": [
      "country equals \"United States \""
    ],
    "edits_original": "< where > remove country equals \" United States \" </ where >"
  },
  {
    "db_id": "dog_kennels",
    "feedback": "Verify that the money which was used by the owner was for his or her dogs treament in step 1.",
    "question": "Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.",
    "gold_parse": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
    "beam": [
      [
        "SELECT owner_id , last_name FROM Owners GROUP BY owner_id ORDER BY Count ( * ) Desc LIMIT value",
        -0.002635955810546875
      ],
      [
        "SELECT owner_id , last_name FROM Owners GROUP BY owner_id ORDER BY Sum ( * ) Desc LIMIT value",
        -6.236084461212158
      ],
      [
        "SELECT T2.owner_id , T2.last_name FROM Charges AS T1 JOIN Owners AS T2 GROUP BY T2.owner_id ORDER BY Sum ( T1.charge_amount ) Desc LIMIT value",
        -7.831473350524902
      ],
      [
        "SELECT first_name , last_name FROM Owners GROUP BY owner_id ORDER BY Count ( * ) Desc LIMIT value",
        -8.701148986816406
      ],
      [
        "SELECT owner_id , last_name FROM Owners GROUP BY owner_id ORDER BY Count ( * ) Asc LIMIT value",
        -10.1455078125
      ],
      [
        "SELECT owner_id , last_name FROM Owners GROUP BY first_name ORDER BY Count ( * ) Desc LIMIT value",
        -10.720514297485352
      ],
      [
        "SELECT owner_id , last_name FROM Owners GROUP BY owner_id ORDER BY Sum ( last_name ) Desc LIMIT value",
        -11.91795825958252
      ],
      [
        "SELECT owner_id , last_name FROM Owners GROUP BY owner_id ORDER BY Count ( * ) Desc",
        -11.9209566116333
      ],
      [
        "SELECT T2.owner_id , T2.last_name FROM Charges AS T1 JOIN Owners AS T2 ORDER BY T1.charge_amount Desc LIMIT value",
        -11.93275237083435
      ],
      [
        "SELECT owner_id , last_name FROM Owners GROUP BY owner_id HAVING Count ( * ) < value ORDER BY Count ( * ) Desc LIMIT value",
        -12.413507461547852
      ],
      [
        "SELECT owner_id , last_name FROM Owners GROUP BY owner_id",
        -12.774439811706543
      ],
      [
        "SELECT owner_id , last_name FROM Owners GROUP BY owner_id HAVING Count ( * ) > = value ORDER BY Count ( * ) Desc LIMIT value",
        -12.93900978565216
      ],
      [
        "SELECT owner_id , last_name FROM Owners GROUP BY owner_id ORDER BY Avg ( * ) Desc LIMIT value",
        -13.066670417785645
      ],
      [
        "SELECT owner_id , last_name , last_name FROM Owners GROUP BY owner_id ORDER BY Count ( * ) Desc LIMIT value",
        -13.484919667243958
      ],
      [
        "SELECT DISTINCT owner_id , last_name FROM Owners GROUP BY owner_id ORDER BY Count ( * ) Desc LIMIT value",
        -13.566100120544434
      ],
      [
        "SELECT T3.professional_id , T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id GROUP BY T1.owner_id ORDER BY Count ( * ) Desc LIMIT value",
        -13.595155715942383
      ],
      [
        "SELECT owner_id FROM Owners GROUP BY owner_id ORDER BY Count ( * ) Desc LIMIT value",
        -13.88426685333252
      ],
      [
        "SELECT T2.owner_id , T2.last_name FROM Charges AS T1 JOIN Owners AS T2 GROUP BY T2.owner_id ORDER BY T1.charge_amount Desc LIMIT value",
        -13.93154764175415
      ],
      [
        "SELECT T1.owner_id , T3.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id GROUP BY T1.owner_id ORDER BY Count ( * ) Desc LIMIT value",
        -14.394598007202148
      ],
      [
        "SELECT owner_id , last_name FROM Owners ORDER BY * Desc LIMIT value",
        -15.129610300064087
      ]
    ],
    "predicted_parse_with_values": "SELECT owner_id , last_name FROM Owners GROUP BY owner_id ORDER BY Count ( * ) Desc LIMIT 1",
    "predicted_parse": "SELECT owner_id , last_name FROM Owners GROUP BY owner_id ORDER BY Count ( * ) Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of owner id in owners table",
      "Step 2: find the owner id and last name in owners table with largest value in the results of step 1"
    ],
    "template_feedback": "in step 1 , additionally use the information from the treatments table and dogs table besides the owners table .",
    "primary_span": [
      [
        4,
        14
      ]
    ],
    "secondary_span": [
      [
        15,
        19
      ]
    ],
    "edits": [
      "dogs",
      "treatments"
    ],
    "edits_original": "< from > add dogs </ from > < from > add treatments </ from >"
  },
  {
    "db_id": "flight_2",
    "feedback": "you need to put city and flights table in place of airport name and airports table respectively.",
    "question": "How many flights land in Aberdeen or Abilene?",
    "gold_parse": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"",
    "beam": [
      [
        "SELECT Count ( * ) FROM airports WHERE AirportName = value OR City = value",
        -0.2524290084838867
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE City = value OR City = value",
        -1.5425872802734375
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE Country = value OR City = value",
        -4.855408191680908
      ],
      [
        "SELECT Count ( * ) FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T2.DestAirport = value OR T1.City = value",
        -8.148386001586914
      ],
      [
        "SELECT Count ( * ) FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T2.DestAirport IN ( SELECT T1.AirportName FROM airports AS T1 WHERE T1.City = value ) AND T1.City = value",
        -8.939091205596924
      ],
      [
        "SELECT Count ( * ) FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T2.DestAirport IN ( SELECT T1.AirportName FROM airports AS T1 WHERE T1.City = value ) OR T1.City = value",
        -9.144224643707275
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE CountryAbbrev = value OR City = value",
        -9.294201850891113
      ],
      [
        "SELECT Count ( * ) FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T2.DestAirport IN ( SELECT T1.AirportName FROM airports AS T1 WHERE T1.City = value OR T1.City = value ) OR T1.City = value",
        -9.51556921005249
      ],
      [
        "SELECT Count ( * ) FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T2.DestAirport IN ( SELECT T1.AirportName FROM airports AS T1 WHERE T1.City = value OR T1.City = value ) AND T1.AirportName IN ( SELECT T1.AirportName FROM airports AS T1 WHERE T1.City = value )",
        -9.589532852172852
      ],
      [
        "SELECT Count ( * ) FROM flights AS T1 WHERE T1.DestAirport IN ( SELECT T2.AirportName FROM airports AS T2 WHERE T2.City = value OR T2.City = value ) AND T1.DestAirport IN ( SELECT T2.AirportName FROM airports AS T2 WHERE T2.City = value )",
        -9.64387559890747
      ],
      [
        "SELECT Count ( * ) FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T2.DestAirport IN ( SELECT T1.AirportCode FROM airports AS T1 WHERE T1.City = value ) AND T1.City = value",
        -9.794037818908691
      ],
      [
        "SELECT Count ( * ) FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T2.DestAirport IN ( SELECT T1.AirportName FROM airports AS T1 WHERE T1.City = value OR T1.City = value ) AND T1.City = value",
        -10.25823450088501
      ],
      [
        "SELECT Count ( * ) FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T2.DestAirport IN ( SELECT T1.AirportCode FROM airports AS T1 WHERE T1.City = value ) OR T1.City = value",
        -10.270814418792725
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE AirportName = value OR AirportName = value",
        -10.584067344665527
      ],
      [
        "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T1.Country = value OR T2.City = value",
        -11.282672882080078
      ],
      [
        "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T1.Abbreviation = value OR T2.City = value",
        -11.604805946350098
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE AirportName = value AND City = value",
        -11.736108779907227
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE AirportName ! = value OR City = value",
        -11.913330078125
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE City = value OR AirportName = value",
        -11.971209526062012
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE AirportCode = value OR City = value",
        -12.856975555419922
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM airports WHERE AirportName = \"Aberdeen\" OR City = \"Abilene\"",
    "predicted_parse": "SELECT Count ( * ) FROM airports WHERE AirportName = value OR City = value",
    "predicted_parse_explanation": [
      "find the number of rows in airports table whose airport name equals Aberdeen or city equals Abilene"
    ],
    "template_feedback": "additionally use the information from the flights table besides the airports table . consider the city equals Aberdeen conditions in place of the airport name equals Aberdeen conditions .",
    "primary_span": [
      [
        0,
        7
      ],
      [
        13,
        18
      ]
    ],
    "secondary_span": [
      [
        8,
        12
      ],
      [
        19,
        28
      ]
    ],
    "edits": [
      "flights",
      "city equals \"Aberdeen\" or city equals \"Abilene\"",
      "airport name equals \"Aberdeen\" or city equals \"Abilene\""
    ],
    "edits_original": "< from > add flights </ from > < where > add city equals \" Aberdeen \" or city equals \" Abilene \" </ where > < where > remove airport name equals \" Aberdeen \" or city equals \" Abilene \" </ where >"
  },
  {
    "db_id": "car_1",
    "feedback": "Verify that france is the country name of Country table.",
    "question": "What is the number of makers of care in France?",
    "gold_parse": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'",
    "beam": [
      [
        "SELECT Count ( * ) FROM car_makers WHERE Country = value",
        -0.07511568069458008
      ],
      [
        "SELECT Count ( * ) FROM countries WHERE CountryName = value",
        -3.033611297607422
      ],
      [
        "SELECT Count ( * ) FROM car_makers WHERE FullName = value",
        -3.7497262954711914
      ],
      [
        "SELECT Count ( * ) FROM continents WHERE Continent = value",
        -7.6018195152282715
      ],
      [
        "SELECT Count ( * ) FROM model_list WHERE Model = value",
        -9.635200500488281
      ],
      [
        "SELECT Count ( * ) FROM cars_data WHERE Year = value",
        -9.856244087219238
      ],
      [
        "SELECT Count ( * ) FROM car_makers WHERE Maker = value",
        -10.453193664550781
      ],
      [
        "SELECT Count ( * ) FROM countries WHERE CountryId = value",
        -11.478484153747559
      ],
      [
        "SELECT Count ( * ) FROM model_list WHERE ModelId = value",
        -11.520278930664062
      ],
      [
        "SELECT Count ( * ) FROM car_names WHERE Make = value",
        -11.60771369934082
      ],
      [
        "SELECT Count ( * ) FROM car_names WHERE Model = value",
        -12.08273696899414
      ],
      [
        "SELECT Count ( * ) FROM countries WHERE Continent = value",
        -12.812896728515625
      ],
      [
        "SELECT Count ( * ) FROM cars_data WHERE Accelerate = value",
        -12.838600158691406
      ],
      [
        "SELECT Count ( * ) FROM cars_data WHERE Edispl = value",
        -12.90597915649414
      ],
      [
        "SELECT Count ( * ) FROM continents",
        -13.187370300292969
      ],
      [
        "SELECT Count ( * ) FROM cars_data WHERE Cylinders = value",
        -13.287813186645508
      ],
      [
        "SELECT Count ( * ) FROM cars_data WHERE Horsepower = value",
        -13.792587280273438
      ],
      [
        "SELECT Count ( * ) FROM cars_data WHERE MPG = value",
        -14.04079818725586
      ],
      [
        "SELECT Count ( * ) FROM model_list WHERE Maker = value",
        -14.359607696533203
      ],
      [
        "SELECT Count ( * ) FROM car_makers WHERE Id = value",
        -14.557271957397461
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM car_makers WHERE Country = \"france\"",
    "predicted_parse": "SELECT Count ( * ) FROM car_makers WHERE Country = value",
    "predicted_parse_explanation": [
      "find the number of rows in car makers table whose country equals france"
    ],
    "template_feedback": "additionally use the information from the countries table besides the car makers table . consider the country name equals france conditions in place of the country equals france conditions .",
    "primary_span": [
      [
        0,
        7
      ],
      [
        14,
        20
      ]
    ],
    "secondary_span": [
      [
        8,
        13
      ],
      [
        21,
        29
      ]
    ],
    "edits": [
      "countries",
      "country name equals \"france\"",
      "country equals \"france\""
    ],
    "edits_original": "< from > add countries </ from > < where > add country name equals \" france \" </ where > < where > remove country equals \" france \" </ where >"
  },
  {
    "db_id": "student_transcripts_tracking",
    "feedback": "We need to use transcripts table  instead of addresses",
    "question": "How many transcripts are released?",
    "gold_parse": "SELECT count(*) FROM Transcripts",
    "beam": [
      [
        "SELECT Count ( * ) FROM Addresses",
        -2.765655517578125e-05
      ],
      [
        "SELECT Sum ( * ) FROM Addresses",
        -11.135778188705444
      ],
      [
        "SELECT Count ( * ) FROM Courses WHERE course_name = value",
        -13.019154012203217
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM Addresses",
        -13.564901351928711
      ],
      [
        "SELECT Avg ( * ) FROM Addresses",
        -14.225157499313354
      ],
      [
        "SELECT Count ( Count ( * ) ) FROM Addresses",
        -14.343140602111816
      ],
      [
        "SELECT Sum ( student_course_id ) FROM Transcript_Contents",
        -14.934276103973389
      ],
      [
        "SELECT Count ( * ) FROM Transcripts WHERE transcript_date = value",
        -15.018036603927612
      ],
      [
        "SELECT Count ( * ) FROM Transcripts ORDER BY transcript_date Asc",
        -15.028991937637329
      ],
      [
        "SELECT Count ( * ) FROM Semesters WHERE semester_name = value",
        -15.089314460754395
      ],
      [
        "SELECT Sum ( transcript_date ) FROM Transcripts",
        -15.365528583526611
      ],
      [
        "SELECT Count ( * ) FROM Addresses WHERE city = value",
        -15.67005181312561
      ],
      [
        "SELECT Sum ( transcript_id ) FROM Transcript_Contents",
        -15.727712154388428
      ],
      [
        "SELECT Count ( * ) FROM Semesters WHERE semester_description = value",
        -15.834532499313354
      ],
      [
        "SELECT Count ( * ) FROM Students WHERE first_name = value",
        -15.971717596054077
      ],
      [
        "SELECT Sum ( section_description ) FROM Sections",
        -16.75182580947876
      ],
      [
        "SELECT Max ( * ) FROM Addresses",
        -17.00051784515381
      ],
      [
        "SELECT Sum ( course_description ) FROM Courses",
        -17.06807565689087
      ],
      [
        "SELECT Count ( DISTINCT * ) FROM Addresses",
        -17.090834617614746
      ],
      [
        "SELECT Count ( * ) FROM Addresses LIMIT value",
        -17.169968605041504
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM Addresses",
    "predicted_parse": "SELECT Count ( * ) FROM Addresses",
    "predicted_parse_explanation": [
      "find the number of rows in addresses table"
    ],
    "template_feedback": "use transcripts table in place of addresses table .",
    "primary_span": [
      [
        0,
        2
      ]
    ],
    "secondary_span": [
      [
        3,
        8
      ]
    ],
    "edits": [
      "transcripts",
      "addresses"
    ],
    "edits_original": "< from > add transcripts </ from > < from > remove addresses </ from >"
  },
  {
    "db_id": "car_1",
    "feedback": "i want unique cylinders with highest accelerate.",
    "question": "What is the maximum accelerate for all the different cylinders?",
    "gold_parse": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders",
    "beam": [
      [
        "SELECT Max ( Cylinders ) , Accelerate FROM cars_data GROUP BY Cylinders",
        -1.104813814163208
      ],
      [
        "SELECT Max ( Cylinders ) , Cylinders FROM cars_data GROUP BY Cylinders",
        -1.1283912062644958
      ],
      [
        "SELECT Max ( Accelerate ) , Cylinders FROM cars_data GROUP BY Cylinders",
        -2.9244269728660583
      ],
      [
        "SELECT Cylinders , Max ( Accelerate ) FROM cars_data GROUP BY Cylinders",
        -2.986337184906006
      ],
      [
        "SELECT Max ( Cylinders ) , Year FROM cars_data GROUP BY Cylinders",
        -3.26176118850708
      ],
      [
        "SELECT Max ( T6.Cylinders ) , T1.Continent FROM continents AS T1 JOIN countries AS T2 ON T1.ContId = T2.Continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country JOIN model_list AS T4 ON T3.Id = T4.Maker JOIN car_names AS T5 ON T4.Model = T5.Model JOIN cars_data AS T6 ON T5.MakeId = T6.Id GROUP BY T6.Cylinders",
        -3.4420676231384277
      ],
      [
        "SELECT Max ( Cylinders ) , MPG FROM cars_data GROUP BY Cylinders",
        -3.7201504707336426
      ],
      [
        "SELECT Max ( Accelerate ) , Accelerate FROM cars_data GROUP BY Cylinders",
        -3.898971199989319
      ],
      [
        "SELECT Max ( Cylinders ) , Horsepower FROM cars_data GROUP BY Cylinders",
        -3.994490623474121
      ],
      [
        "SELECT Max ( T2.Cylinders ) , T1.Model FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id GROUP BY T2.Cylinders",
        -4.279343128204346
      ],
      [
        "SELECT Max ( T6.Accelerate ) , T1.Continent FROM continents AS T1 JOIN countries AS T2 ON T1.ContId = T2.Continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country JOIN model_list AS T4 ON T3.Id = T4.Maker JOIN car_names AS T5 ON T4.Model = T5.Model JOIN cars_data AS T6 ON T5.MakeId = T6.Id GROUP BY T6.Cylinders",
        -4.61618447303772
      ],
      [
        "SELECT Max ( T3.Cylinders ) , T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id GROUP BY T3.Cylinders",
        -4.723753929138184
      ],
      [
        "SELECT Max ( Accelerate ) , Year FROM cars_data GROUP BY Cylinders",
        -4.725738048553467
      ],
      [
        "SELECT Max ( Cylinders ) , Weight FROM cars_data GROUP BY Cylinders",
        -4.84800910949707
      ],
      [
        "SELECT Max ( T2.Accelerate ) , T1.Model FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id GROUP BY T2.Cylinders",
        -5.198630332946777
      ],
      [
        "SELECT Cylinders , Accelerate FROM cars_data GROUP BY Cylinders",
        -5.368916273117065
      ],
      [
        "SELECT Max ( T3.Cylinders ) , T1.ModelId FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id GROUP BY T3.Cylinders",
        -5.393777847290039
      ],
      [
        "SELECT Max ( Accelerate ) , MPG FROM cars_data GROUP BY Cylinders",
        -5.460032939910889
      ],
      [
        "SELECT Max ( Accelerate ) FROM cars_data",
        -11.44456672668457
      ],
      [
        "SELECT Max ( Cylinders ) FROM cars_data",
        -11.539496421813965
      ]
    ],
    "predicted_parse_with_values": "SELECT Max ( Cylinders ) , Accelerate FROM cars_data GROUP BY Cylinders",
    "predicted_parse": "SELECT Max ( Cylinders ) , Accelerate FROM cars_data GROUP BY Cylinders",
    "predicted_parse_explanation": [
      "find each value of cylinders in cars data table along with the accelerate and maximum cylinders of the corresponding rows to each value"
    ],
    "template_feedback": "find maximum accelerate in place of accelerate . find cylinders in place of maximum cylinders .",
    "primary_span": [
      [
        0,
        2
      ],
      [
        8,
        9
      ]
    ],
    "secondary_span": [
      [
        3,
        7
      ],
      [
        10,
        15
      ]
    ],
    "edits": [
      "maximum accelerate",
      "cylinders",
      "maximum cylinders",
      "accelerate"
    ],
    "edits_original": "< select > add maximum accelerate </ select > < select > add cylinders </ select > < select > remove maximum cylinders </ select > < select > remove accelerate </ select >"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "feedback": "Find without repetition template type description of reference template types whose corresponding template id in present in documents table .",
    "question": "Return the different descriptions for templates that have been used in a document.",
    "gold_parse": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID",
    "beam": [
      [
        "SELECT DISTINCT Document_Description FROM Documents",
        -0.0009555816650390625
      ],
      [
        "SELECT DISTINCT Document_Description FROM Documents WHERE Document_Name = value",
        -7.222713470458984
      ],
      [
        "SELECT DISTINCT DISTINCT Document_Description FROM Documents",
        -9.119420051574707
      ],
      [
        "SELECT DISTINCT Document_Description FROM Documents WHERE Document_Description = value",
        -9.833383798599243
      ],
      [
        "SELECT Document_Description FROM Documents",
        -10.91305160522461
      ],
      [
        "SELECT DISTINCT Document_Description FROM Documents WHERE Document_Name = Document_Description",
        -11.196691513061523
      ],
      [
        "SELECT DISTINCT T3.Document_Description FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID WHERE T1.Template_Type_Description = value",
        -11.590327739715576
      ],
      [
        "SELECT DISTINCT Template_Type_Description FROM Ref_Template_Types",
        -12.293639183044434
      ],
      [
        "SELECT DISTINCT T2.Document_Description FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T1.Version_Number = value",
        -12.582060813903809
      ],
      [
        "SELECT DISTINCT T1.Document_Description FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Paragraph_Text = value",
        -13.314266204833984
      ],
      [
        "SELECT DISTINCT Document_Description FROM Documents WHERE Document_ID = Document_Description",
        -13.394097805023193
      ],
      [
        "SELECT DISTINCT T2.Document_Description FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T1.Version_Number = T2.Document_Description",
        -13.70887041091919
      ],
      [
        "SELECT DISTINCT Document_Description FROM Documents GROUP BY Template_ID",
        -13.788580894470215
      ],
      [
        "SELECT Document_Description FROM Documents",
        -13.820038795471191
      ],
      [
        "SELECT DISTINCT Document_Description FROM Documents GROUP BY Document_Description",
        -14.487177848815918
      ],
      [
        "SELECT DISTINCT Count ( DISTINCT Document_Description ) FROM Documents",
        -16.265470504760742
      ],
      [
        "SELECT DISTINCT Document_Description FROM Documents LIMIT value",
        -17.194311141967773
      ],
      [
        "SELECT DISTINCT Paragraph_Text FROM Paragraphs",
        -17.562232971191406
      ],
      [
        "SELECT DISTINCT Count ( Document_Description ) FROM Documents",
        -18.17726993560791
      ],
      [
        "SELECT DISTINCT Document_Description FROM Documents",
        -18.262276649475098
      ]
    ],
    "predicted_parse_with_values": "SELECT DISTINCT Document_Description FROM Documents",
    "predicted_parse": "SELECT DISTINCT Document_Description FROM Documents",
    "predicted_parse_explanation": [
      "find without repetition document description in documents table"
    ],
    "template_feedback": "additionally use the information from the templates table and reference template types table besides the documents table . find template type description in place of document description .",
    "primary_span": [
      [
        0,
        12
      ],
      [
        18,
        21
      ]
    ],
    "secondary_span": [
      [
        13,
        17
      ],
      [
        22,
        27
      ]
    ],
    "edits": [
      "template type description",
      "document description",
      "reference template types",
      "templates"
    ],
    "edits_original": "< select > add template type description </ select > < select > remove document description </ select > < from > add reference template types </ from > < from > add templates </ from >"
  },
  {
    "db_id": "network_1",
    "feedback": "Only ensure that corresponding student id present in friend in step 1 , and present in likes in step 2.",
    "question": "What are the names of high schoolers who both have friends and are liked?",
    "gold_parse": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id",
    "beam": [
      [
        "SELECT name FROM Highschooler WHERE grade = value INTERSECT SELECT name FROM Highschooler WHERE grade = value",
        -0.0030727386474609375
      ],
      [
        "SELECT name FROM Highschooler WHERE grade = value INTERSECT SELECT name FROM Highschooler WHERE name = name",
        -6.826787948608398
      ],
      [
        "SELECT name FROM Highschooler WHERE grade = value INTERSECT SELECT name FROM Highschooler WHERE name = value",
        -7.415349006652832
      ],
      [
        "SELECT name FROM Highschooler WHERE grade = value INTERSECT SELECT name FROM Highschooler",
        -7.87800407409668
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 WHERE T1.grade = value INTERSECT SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id WHERE T2.friend_id = T1.name",
        -7.920429229736328
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 WHERE T1.grade = value INTERSECT SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id WHERE T2.liked_id = T1.name",
        -8.563467025756836
      ],
      [
        "SELECT name FROM Highschooler INTERSECT SELECT name FROM Highschooler WHERE grade = value",
        -8.602606296539307
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 WHERE T1.grade = value INTERSECT SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id WHERE T2.liked_id = value",
        -9.12610912322998
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 WHERE T1.grade = value INTERSECT SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id WHERE T2.friend_id = value",
        -9.914225578308105
      ],
      [
        "SELECT name FROM Highschooler WHERE grade = value INTERSECT SELECT name FROM Highschooler WHERE grade = name",
        -11.459002494812012
      ],
      [
        "SELECT grade FROM Highschooler WHERE grade = value INTERSECT SELECT name FROM Highschooler WHERE grade = value",
        -11.675817966461182
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 WHERE T1.grade = value INTERSECT SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id WHERE T2.student_id = T1.name",
        -11.729668617248535
      ],
      [
        "SELECT name FROM Highschooler WHERE grade = value INTERSECT SELECT name FROM Highschooler WHERE grade < value",
        -11.738763809204102
      ],
      [
        "SELECT name FROM Highschooler WHERE grade = name INTERSECT SELECT name FROM Highschooler WHERE grade = value",
        -11.806349754333496
      ],
      [
        "SELECT T1.name FROM Highschooler AS T1 WHERE T1.grade = value INTERSECT SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id WHERE T2.student_id = T1.name",
        -12.173186302185059
      ],
      [
        "SELECT name FROM Highschooler WHERE grade ! = value",
        -12.494775772094727
      ],
      [
        "SELECT name FROM Highschooler INTERSECT SELECT name FROM Highschooler",
        -12.78290843963623
      ],
      [
        "SELECT name FROM Highschooler WHERE grade = value",
        -13.801797866821289
      ],
      [
        "SELECT name , grade FROM Highschooler",
        -16.01224136352539
      ],
      [
        "SELECT name FROM Highschooler",
        -16.36396598815918
      ]
    ],
    "predicted_parse_with_values": "SELECT name FROM Highschooler WHERE grade = 9 INTERSECT SELECT name FROM Highschooler WHERE grade = 9",
    "predicted_parse": "SELECT name FROM Highschooler WHERE grade = value INTERSECT SELECT name FROM Highschooler WHERE grade = value",
    "predicted_parse_explanation": [
      "Step 1: find the name in high schooler table whose grade equals 9",
      "Step 2: find the name in high schooler table whose grade equals 9",
      "Step 3: show the rows that are in both the results of step 1 and step 2"
    ],
    "template_feedback": "in step 1 , additionally use the information from the friend table besides the high schooler table . remove the grade equals 9 conditions . in step 2 , additionally use the information from the likes table besides the high schooler table . remove the grade equals 9 conditions .",
    "primary_span": [
      [
        4,
        11
      ],
      [
        18,
        24
      ],
      [
        29,
        36
      ],
      [
        43,
        49
      ]
    ],
    "secondary_span": [
      [
        12,
        17
      ],
      [
        37,
        42
      ]
    ],
    "edits": [
      "friend",
      "grade equals 9",
      "likes",
      "grade equals 9"
    ],
    "edits_original": "< from > add friend </ from > < where > remove grade equals 9 </ where > < from > add likes </ from > < where > remove grade equals 9 </ where >"
  },
  {
    "db_id": "museum_visit",
    "feedback": "In step 3 Supplant num of staff with level of membership .",
    "question": "What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?",
    "gold_parse": "SELECT t2.visitor_id ,  t1.name ,  t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1",
    "beam": [
      [
        "SELECT T3.visitor_ID , T2.Name , T1.Num_of_Staff FROM museum AS T1 JOIN visitor AS T2 JOIN visit AS T3 ON T1.Museum_ID = T3.Museum_ID AND T3.visitor_ID = T2.ID AND T1.Museum_ID = T3.Museum_ID GROUP BY T3.Museum_ID ORDER BY Sum ( T3.Total_spent ) Desc LIMIT value",
        -1.1532602310180664
      ],
      [
        "SELECT T3.visitor_ID , T2.Name , T1.Name FROM museum AS T1 JOIN visitor AS T2 JOIN visit AS T3 ON T1.Museum_ID = T3.Museum_ID AND T3.visitor_ID = T2.ID AND T1.Museum_ID = T3.Museum_ID GROUP BY T3.Museum_ID ORDER BY Sum ( T3.Total_spent ) Desc LIMIT value",
        -1.331289291381836
      ],
      [
        "SELECT T2.visitor_ID , T1.Name , T1.Level_of_membership FROM visitor AS T1 JOIN visit AS T2 ON T1.ID = T2.visitor_ID GROUP BY T2.Museum_ID ORDER BY Sum ( T2.Total_spent ) Desc LIMIT value",
        -1.882349967956543
      ],
      [
        "SELECT T2.ID , T2.Name , T1.Name FROM museum AS T1 JOIN visitor AS T2 JOIN visit AS T3 ON T1.Museum_ID = T3.Museum_ID AND T3.visitor_ID = T2.ID AND T1.Museum_ID = T3.Museum_ID GROUP BY T3.Museum_ID ORDER BY Sum ( T3.Total_spent ) Desc LIMIT value",
        -2.4812135696411133
      ],
      [
        "SELECT T2.ID , T2.Name , T1.Num_of_Staff FROM museum AS T1 JOIN visitor AS T2 JOIN visit AS T3 ON T1.Museum_ID = T3.Museum_ID AND T3.visitor_ID = T2.ID AND T1.Museum_ID = T3.Museum_ID GROUP BY T3.Museum_ID ORDER BY Sum ( T3.Total_spent ) Desc LIMIT value",
        -2.7309560775756836
      ],
      [
        "SELECT T2.visitor_ID , T1.Name , T2.Total_spent FROM visitor AS T1 JOIN visit AS T2 ON T1.ID = T2.visitor_ID GROUP BY T2.Museum_ID ORDER BY Sum ( T2.Total_spent ) Desc LIMIT value",
        -2.850311279296875
      ],
      [
        "SELECT T1.ID , T1.Name , T1.Level_of_membership FROM visitor AS T1 JOIN visit AS T2 ON T1.ID = T2.visitor_ID GROUP BY T2.Museum_ID ORDER BY Sum ( T2.Total_spent ) Desc LIMIT value",
        -3.1426029205322266
      ],
      [
        "SELECT T1.ID , T1.Name , T2.Total_spent FROM visitor AS T1 JOIN visit AS T2 ON T1.ID = T2.visitor_ID GROUP BY T2.Museum_ID ORDER BY Sum ( T2.Total_spent ) Desc LIMIT value",
        -4.330716133117676
      ],
      [
        "SELECT T2.visitor_ID , T1.Name , T2.Num_of_Ticket FROM visitor AS T1 JOIN visit AS T2 ON T1.ID = T2.visitor_ID GROUP BY T2.Museum_ID ORDER BY Sum ( T2.Total_spent ) Desc LIMIT value",
        -6.156993865966797
      ],
      [
        "SELECT T2.visitor_ID , T1.Name , T1.Name FROM visitor AS T1 JOIN visit AS T2 ON T1.ID = T2.visitor_ID GROUP BY T2.Museum_ID ORDER BY Sum ( T2.Total_spent ) Desc LIMIT value",
        -7.460331916809082
      ],
      [
        "SELECT T1.ID , T1.Name , T2.Num_of_Ticket FROM visitor AS T1 JOIN visit AS T2 ON T1.ID = T2.visitor_ID GROUP BY T2.Museum_ID ORDER BY Sum ( T2.Total_spent ) Desc LIMIT value",
        -7.642153739929199
      ],
      [
        "SELECT T2.visitor_ID , T1.Name , T2.Total_spent FROM museum AS T1 JOIN visit AS T2 ON T1.Museum_ID = T2.Museum_ID GROUP BY T2.Museum_ID ORDER BY Sum ( T2.Total_spent ) Desc LIMIT value",
        -8.172268867492676
      ],
      [
        "SELECT T1.ID , T1.Name , T1.Name FROM visitor AS T1 JOIN visit AS T2 ON T1.ID = T2.visitor_ID GROUP BY T2.Museum_ID ORDER BY Sum ( T2.Total_spent ) Desc LIMIT value",
        -8.332469463348389
      ],
      [
        "SELECT T2.visitor_ID , T1.Name , Sum ( T2.Total_spent ) FROM visitor AS T1 JOIN visit AS T2 ON T1.ID = T2.visitor_ID GROUP BY T2.Museum_ID ORDER BY Sum ( T2.Total_spent ) Desc LIMIT value",
        -8.64273452758789
      ],
      [
        "SELECT T3.visitor_ID , T2.Name , T1.Num_of_Staff FROM museum AS T1 JOIN visitor AS T2 JOIN visit AS T3 ON T1.Museum_ID = T3.Museum_ID AND T3.visitor_ID = T2.ID AND T1.Museum_ID = T3.Museum_ID GROUP BY T3.Museum_ID ORDER BY Count ( * ) Desc LIMIT value",
        -8.693660736083984
      ],
      [
        "SELECT T2.visitor_ID , T1.Name , T1.Num_of_Staff FROM museum AS T1 JOIN visit AS T2 ON T1.Museum_ID = T2.Museum_ID GROUP BY T2.Museum_ID ORDER BY Sum ( T2.Total_spent ) Desc LIMIT value",
        -9.141318321228027
      ],
      [
        "SELECT T3.visitor_ID , T2.Name , T1.Name FROM museum AS T1 JOIN visitor AS T2 JOIN visit AS T3 ON T1.Museum_ID = T3.Museum_ID AND T3.visitor_ID = T2.ID AND T1.Museum_ID = T3.Museum_ID GROUP BY T3.Museum_ID ORDER BY Count ( * ) Desc LIMIT value",
        -9.300159454345703
      ],
      [
        "SELECT T2.visitor_ID , T1.Name , T1.Level_of_membership FROM visitor AS T1 JOIN visit AS T2 ON T1.ID = T2.visitor_ID GROUP BY T2.Museum_ID ORDER BY Count ( * ) Desc LIMIT value",
        -9.448992729187012
      ],
      [
        "SELECT T2.visitor_ID , T1.Name , T2.Museum_ID FROM visitor AS T1 JOIN visit AS T2 ON T1.ID = T2.visitor_ID GROUP BY T2.Museum_ID ORDER BY Sum ( T2.Total_spent ) Desc LIMIT value",
        -9.709918975830078
      ],
      [
        "SELECT T2.ID , T1.Name , T3.Total_spent FROM museum AS T1 JOIN visitor AS T2 JOIN visit AS T3 ON T1.Museum_ID = T3.Museum_ID AND T3.visitor_ID = T2.ID AND T1.Museum_ID = T3.Museum_ID GROUP BY T3.Museum_ID ORDER BY Sum ( T3.Total_spent ) Desc LIMIT value",
        -9.818428039550781
      ]
    ],
    "predicted_parse_with_values": "SELECT T3.visitor_ID , T2.Name , T1.Num_of_Staff FROM museum AS T1 JOIN visitor AS T2 JOIN visit AS T3 ON T1.Museum_ID = T3.Museum_ID AND T3.visitor_ID = T2.ID AND T1.Museum_ID = T3.Museum_ID GROUP BY T3.Museum_ID ORDER BY Sum ( T3.Total_spent ) Desc LIMIT 1",
    "predicted_parse": "SELECT T3.visitor_ID , T2.Name , T1.Num_of_Staff FROM museum AS T1 JOIN visitor AS T2 JOIN visit AS T3 ON T1.Museum_ID = T3.Museum_ID AND T3.visitor_ID = T2.ID AND T1.Museum_ID = T3.Museum_ID GROUP BY T3.Museum_ID ORDER BY Sum ( T3.Total_spent ) Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: for each row in museum table , find the corresponding rows in customer table and in visit table",
      "Step 2: find the summation of total spent of each value of visit 's museum id of the results of step 1",
      "Step 3: find the customer id , customer 's name , num of staff of the results of step 1 with largest value in the results of step 2"
    ],
    "template_feedback": "in step 1 , do not use the museum table . in step 2 , find for each value of customer id in place of visit 's museum id . in step 3 , find level of membership in place of num of staff .",
    "primary_span": [
      [
        4,
        10
      ],
      [
        15,
        21
      ],
      [
        34,
        37
      ]
    ],
    "secondary_span": [
      [
        4,
        10
      ],
      [
        22,
        29
      ],
      [
        38,
        44
      ]
    ],
    "edits": [
      "level of membership",
      "num of staff",
      "museum",
      "customer id",
      "museum id"
    ],
    "edits_original": "< select > add level of membership </ select > < select > remove num of staff </ select > < from > remove museum </ from > < groupBy > add customer id </ groupBy > < groupBy > remove museum id </ groupBy >"
  },
  {
    "db_id": "student_transcripts_tracking",
    "feedback": "Take other student details in place of other details and students table in place of student enrolment table .",
    "question": "What other details can you tell me about students in reverse alphabetical order?",
    "gold_parse": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC",
    "beam": [
      [
        "SELECT other_details FROM Student_Enrolment ORDER BY other_details Desc",
        -0.004380702972412109
      ],
      [
        "SELECT other_details FROM Student_Enrolment ORDER BY other_details Asc",
        -6.094260215759277
      ],
      [
        "SELECT T2.other_details FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id ORDER BY T1.other_student_details Desc",
        -7.079164505004883
      ],
      [
        "SELECT T2.other_details FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id ORDER BY T1.other_details Desc",
        -7.5806450843811035
      ],
      [
        "SELECT T2.other_details FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id ORDER BY T1.email_address Desc",
        -8.797977447509766
      ],
      [
        "SELECT other_details FROM Student_Enrolment ORDER BY * Desc",
        -9.41502857208252
      ],
      [
        "SELECT T2.other_details FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id ORDER BY T1.date_left Desc",
        -9.565641403198242
      ],
      [
        "SELECT * FROM Student_Enrolment ORDER BY other_details Desc",
        -9.680667400360107
      ],
      [
        "SELECT T2.other_details FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id ORDER BY T1.first_name Desc",
        -9.810787200927734
      ],
      [
        "SELECT T1.other_details FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id ORDER BY T2.other_details Desc",
        -10.100533723831177
      ],
      [
        "SELECT T2.other_details FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id ORDER BY T1.last_name Desc",
        -10.188066482543945
      ],
      [
        "SELECT T3.other_details FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id JOIN Student_Enrolment AS T3 ON T2.student_id = T3.student_id ORDER BY T1.other_address_details Desc",
        -10.246265411376953
      ],
      [
        "SELECT T2.other_details FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id ORDER BY T1.ssn Desc",
        -10.268352508544922
      ],
      [
        "SELECT T2.other_details FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id ORDER BY T1.semester_name Desc",
        -10.721001625061035
      ],
      [
        "SELECT T2.other_details FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id ORDER BY T1.date_first_registered Desc",
        -10.91627025604248
      ],
      [
        "SELECT other_details FROM Student_Enrolment ORDER BY student_id Desc",
        -11.151165008544922
      ],
      [
        "SELECT T2.other_details FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id ORDER BY T1.other_details Desc",
        -11.225541114807129
      ],
      [
        "SELECT T2.other_details FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id ORDER BY T1.middle_name Desc",
        -11.413871765136719
      ],
      [
        "SELECT T2.other_details FROM Courses AS T1 JOIN Student_Enrolment AS T2 JOIN Student_Enrolment_Courses AS T3 ON T1.course_id = T3.course_id AND T3.student_enrolment_id = T2.student_enrolment_id ORDER BY T1.course_name Desc",
        -11.53345012664795
      ],
      [
        "SELECT other_details FROM Student_Enrolment",
        -14.684025764465332
      ]
    ],
    "predicted_parse_with_values": "SELECT other_details FROM Student_Enrolment ORDER BY other_details Desc",
    "predicted_parse": "SELECT other_details FROM Student_Enrolment ORDER BY other_details Desc",
    "predicted_parse_explanation": [
      "find the other details in student enrolment table ordered descending by other details"
    ],
    "template_feedback": "use students table in place of student enrolment table . find other student details in place of other details . order the results by other student details in place of other details .",
    "primary_span": [
      [
        0,
        2
      ],
      [
        10,
        13
      ],
      [
        20,
        26
      ]
    ],
    "secondary_span": [
      [
        3,
        9
      ],
      [
        14,
        19
      ],
      [
        27,
        32
      ]
    ],
    "edits": [
      "other student details",
      "other details",
      "students",
      "student enrolment",
      "other student details",
      "other details"
    ],
    "edits_original": "< select > add other student details </ select > < select > remove other details </ select > < from > add students </ from > < from > remove student enrolment </ from > < orderBy > add other student details </ orderBy > < orderBy > remove other details </ orderBy >"
  },
  {
    "db_id": "wta_1",
    "feedback": "Search tours of ranking table for all the value of ranking date.",
    "question": "Find the total number of tours for each ranking date.",
    "gold_parse": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date",
    "beam": [
      [
        "SELECT Count ( * ) , winner_rank FROM matches GROUP BY winner_rank",
        -0.10420417785644531
      ],
      [
        "SELECT winner_rank , Count ( * ) FROM matches GROUP BY winner_rank",
        -2.5486698150634766
      ],
      [
        "SELECT Count ( * ) , T3.ranking FROM players AS T1 JOIN matches AS T2 ON T2.loser_id = T1.player_id JOIN rankings AS T3 ON T1.player_id = T3.player_id GROUP BY T2.winner_rank",
        -4.145606994628906
      ],
      [
        "SELECT Count ( * ) , loser_rank FROM matches GROUP BY winner_rank",
        -6.418293476104736
      ],
      [
        "SELECT Count ( * ) , T2.winner_rank FROM players AS T1 JOIN matches AS T2 ON T2.loser_id = T1.player_id JOIN rankings AS T3 ON T1.player_id = T3.player_id GROUP BY T3.ranking",
        -7.025334358215332
      ],
      [
        "SELECT Count ( * ) , loser_entry FROM matches GROUP BY winner_rank",
        -7.451204299926758
      ],
      [
        "SELECT Count ( * ) , year FROM matches GROUP BY winner_rank",
        -8.112760543823242
      ],
      [
        "SELECT Count ( * ) , score FROM matches GROUP BY winner_rank",
        -8.114324569702148
      ],
      [
        "SELECT T3.ranking , Count ( * ) FROM players AS T1 JOIN matches AS T2 ON T2.loser_id = T1.player_id JOIN rankings AS T3 ON T1.player_id = T3.player_id GROUP BY T2.winner_rank",
        -8.18307113647461
      ],
      [
        "SELECT Count ( * ) , T3.ranking_date FROM players AS T1 JOIN matches AS T2 ON T2.loser_id = T1.player_id JOIN rankings AS T3 ON T1.player_id = T3.player_id GROUP BY T2.winner_rank",
        -8.376112937927246
      ],
      [
        "SELECT Count ( * ) , loser_name FROM matches GROUP BY winner_rank",
        -9.119759559631348
      ],
      [
        "SELECT loser_entry , Count ( * ) FROM matches GROUP BY winner_rank",
        -9.837199211120605
      ],
      [
        "SELECT Count ( * ) , T2.winner_rank FROM players AS T1 JOIN matches AS T2 ON T2.loser_id = T1.player_id JOIN rankings AS T3 ON T1.player_id = T3.player_id GROUP BY T3.ranking_date",
        -10.210455894470215
      ],
      [
        "SELECT loser_rank , Count ( * ) FROM matches GROUP BY winner_rank",
        -10.238448143005371
      ],
      [
        "SELECT T2.winner_rank , Count ( * ) FROM players AS T1 JOIN matches AS T2 ON T2.loser_id = T1.player_id JOIN rankings AS T3 ON T1.player_id = T3.player_id GROUP BY T3.ranking",
        -10.274763107299805
      ],
      [
        "SELECT T3.ranking_date , Count ( * ) FROM players AS T1 JOIN matches AS T2 ON T2.loser_id = T1.player_id JOIN rankings AS T3 ON T1.player_id = T3.player_id GROUP BY T2.winner_rank",
        -10.344712257385254
      ],
      [
        "SELECT year , Count ( * ) FROM matches GROUP BY winner_rank",
        -10.423346519470215
      ],
      [
        "SELECT Count ( * ) , tourney_date FROM matches GROUP BY winner_rank",
        -10.738274574279785
      ],
      [
        "SELECT Sum ( * ) , winner_rank FROM matches GROUP BY winner_rank",
        -10.764201641082764
      ],
      [
        "SELECT Count ( * ) FROM players",
        -13.012507438659668
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) , winner_rank FROM matches GROUP BY winner_rank",
    "predicted_parse": "SELECT Count ( * ) , winner_rank FROM matches GROUP BY winner_rank",
    "predicted_parse_explanation": [
      "find each value of winner rank in matches table along with the number of the corresponding rows to each value"
    ],
    "template_feedback": "use rankings table in place of matches table . find for each value of ranking date in place of winner rank . find summation of tours and ranking date in place of winner rank and number of rows .",
    "primary_span": [
      [
        0,
        2
      ],
      [
        9,
        15
      ],
      [
        22,
        28
      ]
    ],
    "secondary_span": [
      [
        3,
        8
      ],
      [
        16,
        21
      ],
      [
        29,
        38
      ]
    ],
    "edits": [
      "summation of tours",
      "ranking date",
      "number of rows",
      "winner rank",
      "rankings",
      "matches",
      "ranking date",
      "winner rank"
    ],
    "edits_original": "< select > add summation of tours </ select > < select > add ranking date </ select > < select > remove number of rows </ select > < select > remove winner rank </ select > < from > add rankings </ from > < from > remove matches </ from > < groupBy > add ranking date </ groupBy > < groupBy > remove winner rank </ groupBy >"
  },
  {
    "db_id": "world_1",
    "feedback": "Find summation of surface area and exchange name name with region .",
    "question": "How much surface area do the countires in the Carribean cover together?",
    "gold_parse": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"",
    "beam": [
      [
        "SELECT SurfaceArea FROM country WHERE Name = value",
        -0.27551698684692383
      ],
      [
        "SELECT SurfaceArea FROM country WHERE Region = value",
        -1.987874984741211
      ],
      [
        "SELECT T2.SurfaceArea FROM sqlite_sequence AS T1 JOIN country AS T2 WHERE T1.name = value",
        -2.7434754371643066
      ],
      [
        "SELECT SurfaceArea FROM country WHERE Continent = value",
        -3.8934922218322754
      ],
      [
        "SELECT SurfaceArea FROM country WHERE LocalName = value",
        -3.98789644241333
      ],
      [
        "SELECT SurfaceArea FROM country WHERE SurfaceArea = value",
        -8.091896057128906
      ],
      [
        "SELECT T2.SurfaceArea FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Name = value",
        -9.365143775939941
      ],
      [
        "SELECT SurfaceArea , Continent FROM country WHERE Name = value",
        -9.435864448547363
      ],
      [
        "SELECT T1.SurfaceArea FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value",
        -10.568408966064453
      ],
      [
        "SELECT SurfaceArea FROM country WHERE GovernmentForm = value",
        -11.07941722869873
      ],
      [
        "SELECT SurfaceArea FROM country WHERE Code2 = value",
        -11.382308006286621
      ],
      [
        "SELECT SurfaceArea FROM country",
        -11.831088066101074
      ],
      [
        "SELECT SurfaceArea FROM country WHERE SurfaceArea LIKE value",
        -11.87017822265625
      ],
      [
        "SELECT T2.SurfaceArea , T2.Continent FROM sqlite_sequence AS T1 JOIN country AS T2 WHERE T1.name = value",
        -12.05758285522461
      ],
      [
        "SELECT SurfaceArea FROM country WHERE HeadOfState = value",
        -12.400830268859863
      ],
      [
        "SELECT SurfaceArea FROM country WHERE IndepYear = value",
        -12.414170265197754
      ],
      [
        "SELECT SurfaceArea FROM country WHERE Capital = value",
        -12.967534065246582
      ],
      [
        "SELECT T2.SurfaceArea FROM sqlite_sequence AS T1 JOIN country AS T2 WHERE T1.seq = value",
        -13.297734260559082
      ],
      [
        "SELECT SurfaceArea FROM country WHERE GNP = value",
        -13.651000022888184
      ],
      [
        "SELECT Min ( SurfaceArea ) FROM country",
        -17.020188331604004
      ]
    ],
    "predicted_parse_with_values": "SELECT SurfaceArea FROM country WHERE Name = \"Caribbean\"",
    "predicted_parse": "SELECT SurfaceArea FROM country WHERE Name = value",
    "predicted_parse_explanation": [
      "find the surface area in country table whose name equals Caribbean"
    ],
    "template_feedback": "consider the region equals Caribbean conditions in place of the name equals Caribbean conditions . find summation of surface area in place of surface area .",
    "primary_span": [
      [
        0,
        5
      ],
      [
        15,
        19
      ]
    ],
    "secondary_span": [
      [
        6,
        14
      ],
      [
        20,
        25
      ]
    ],
    "edits": [
      "summation of surface area",
      "surface area",
      "region equals \"Caribbean\"",
      "name equals \"Caribbean\""
    ],
    "edits_original": "< select > add summation of surface area </ select > < select > remove surface area </ select > < where > add region equals \" Caribbean \" </ where > < where > remove name equals \" Caribbean \" </ where >"
  },
  {
    "db_id": "student_transcripts_tracking",
    "feedback": "Replace course id(both ) with degree program id , first courses with student enrolment , course description with degree summary name , second courses with degree programs .",
    "question": "Find the program which most number of students are enrolled in. List both the id and the summary.",
    "gold_parse": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1",
    "beam": [
      [
        "SELECT course_id , course_description FROM Courses GROUP BY course_id ORDER BY Count ( * ) Desc LIMIT value",
        -0.16117191314697266
      ],
      [
        "SELECT course_id , course_name FROM Courses GROUP BY course_id ORDER BY Count ( * ) Desc LIMIT value",
        -2.8894691467285156
      ],
      [
        "SELECT T1.course_id , T2.semester_description FROM Courses AS T1 JOIN Semesters AS T2 JOIN Student_Enrolment AS T3 ON T3.semester_id = T2.semester_id JOIN Student_Enrolment_Courses AS T4 ON T1.course_id = T4.course_id AND T4.student_enrolment_id = T3.student_enrolment_id GROUP BY T1.course_id ORDER BY Count ( * ) Desc LIMIT value",
        -2.959529399871826
      ],
      [
        "SELECT T1.course_id , T2.degree_summary_description FROM Courses AS T1 JOIN Degree_Programs AS T2 JOIN Student_Enrolment AS T3 ON T3.degree_program_id = T2.degree_program_id JOIN Student_Enrolment_Courses AS T4 ON T1.course_id = T4.course_id AND T4.student_enrolment_id = T3.student_enrolment_id GROUP BY T1.course_id ORDER BY Count ( * ) Desc LIMIT value",
        -4.614816188812256
      ],
      [
        "SELECT T2.student_id , T1.course_description FROM Courses AS T1 JOIN Students AS T2 JOIN Student_Enrolment AS T3 ON T3.student_id = T2.student_id JOIN Student_Enrolment_Courses AS T4 ON T1.course_id = T4.course_id AND T4.student_enrolment_id = T3.student_enrolment_id GROUP BY T1.course_id ORDER BY Count ( * ) Desc LIMIT value",
        -5.00453519821167
      ],
      [
        "SELECT T1.course_id , T1.course_description FROM Courses AS T1 JOIN Semesters AS T2 JOIN Student_Enrolment AS T3 ON T3.semester_id = T2.semester_id JOIN Student_Enrolment_Courses AS T4 ON T1.course_id = T4.course_id AND T4.student_enrolment_id = T3.student_enrolment_id GROUP BY T2.semester_description ORDER BY Count ( * ) Desc LIMIT value",
        -5.63020133972168
      ],
      [
        "SELECT T1.course_id , T1.course_description FROM Courses AS T1 JOIN Student_Enrolment AS T2 JOIN Student_Enrolment_Courses AS T3 ON T1.course_id = T3.course_id AND T3.student_enrolment_id = T2.student_enrolment_id GROUP BY T2.student_enrolment_id ORDER BY Count ( * ) Desc LIMIT value",
        -5.693995475769043
      ],
      [
        "SELECT T2.degree_program_id , T1.course_description FROM Courses AS T1 JOIN Degree_Programs AS T2 JOIN Student_Enrolment AS T3 ON T3.degree_program_id = T2.degree_program_id JOIN Student_Enrolment_Courses AS T4 ON T1.course_id = T4.course_id AND T4.student_enrolment_id = T3.student_enrolment_id GROUP BY T1.course_id ORDER BY Count ( * ) Desc LIMIT value",
        -6.337809085845947
      ],
      [
        "SELECT T2.student_enrolment_id , T1.course_description FROM Courses AS T1 JOIN Student_Enrolment AS T2 JOIN Student_Enrolment_Courses AS T3 ON T1.course_id = T3.course_id AND T3.student_enrolment_id = T2.student_enrolment_id GROUP BY T1.course_id ORDER BY Count ( * ) Desc LIMIT value",
        -6.347227096557617
      ],
      [
        "SELECT T2.semester_description , T1.course_description FROM Courses AS T1 JOIN Semesters AS T2 JOIN Student_Enrolment AS T3 ON T3.semester_id = T2.semester_id JOIN Student_Enrolment_Courses AS T4 ON T1.course_id = T4.course_id AND T4.student_enrolment_id = T3.student_enrolment_id GROUP BY T1.course_id ORDER BY Count ( * ) Desc LIMIT value",
        -6.610387325286865
      ],
      [
        "SELECT T2.course_id , T1.course_description FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id ORDER BY Count ( * ) Desc LIMIT value",
        -6.799621105194092
      ],
      [
        "SELECT course_name , course_description FROM Courses GROUP BY course_id ORDER BY Count ( * ) Desc LIMIT value",
        -6.864509582519531
      ],
      [
        "SELECT course_description , course_description FROM Courses GROUP BY course_id ORDER BY Count ( * ) Desc LIMIT value",
        -6.933600425720215
      ],
      [
        "SELECT T3.student_id , T2.semester_description FROM Courses AS T1 JOIN Semesters AS T2 JOIN Students AS T3 JOIN Student_Enrolment AS T4 ON T4.semester_id = T2.semester_id AND T4.student_id = T3.student_id JOIN Student_Enrolment_Courses AS T5 ON T1.course_id = T5.course_id AND T5.student_enrolment_id = T4.student_enrolment_id AND T1.course_id = T5.course_id AND T5.student_enrolment_id = T4.student_enrolment_id GROUP BY T1.course_id ORDER BY Count ( * ) Desc LIMIT value",
        -7.151299476623535
      ],
      [
        "SELECT T2.student_id , T1.course_name FROM Courses AS T1 JOIN Students AS T2 JOIN Student_Enrolment AS T3 ON T3.student_id = T2.student_id JOIN Student_Enrolment_Courses AS T4 ON T1.course_id = T4.course_id AND T4.student_enrolment_id = T3.student_enrolment_id GROUP BY T1.course_id ORDER BY Count ( * ) Desc LIMIT value",
        -7.224365234375
      ],
      [
        "SELECT T3.transcript_id , T1.course_description FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id JOIN Transcripts AS T3 JOIN Transcript_Contents AS T4 ON T2.student_course_id = T4.student_course_id AND T4.transcript_id = T3.transcript_id GROUP BY T1.course_id ORDER BY Count ( * ) Desc LIMIT value",
        -7.293962001800537
      ],
      [
        "SELECT T2.student_id , T1.course_description FROM Courses AS T1 JOIN Student_Enrolment AS T2 JOIN Student_Enrolment_Courses AS T3 ON T1.course_id = T3.course_id AND T3.student_enrolment_id = T2.student_enrolment_id GROUP BY T1.course_id ORDER BY Count ( * ) Desc LIMIT value",
        -7.294114112854004
      ],
      [
        "SELECT T2.degree_summary_description , T1.course_description FROM Courses AS T1 JOIN Degree_Programs AS T2 JOIN Student_Enrolment AS T3 ON T3.degree_program_id = T2.degree_program_id JOIN Student_Enrolment_Courses AS T4 ON T1.course_id = T4.course_id AND T4.student_enrolment_id = T3.student_enrolment_id GROUP BY T1.course_id ORDER BY Count ( * ) Desc LIMIT value",
        -7.533862590789795
      ],
      [
        "SELECT T1.course_id , T1.course_description FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id ORDER BY Count ( * ) Desc LIMIT value",
        -7.593780517578125
      ],
      [
        "SELECT T1.course_id , T2.semester_description FROM Courses AS T1 JOIN Semesters AS T2 JOIN Student_Enrolment AS T3 ON T3.semester_id = T2.semester_id JOIN Student_Enrolment_Courses AS T4 ON T1.course_id = T4.course_id AND T4.student_enrolment_id = T3.student_enrolment_id GROUP BY T2.semester_description ORDER BY Count ( * ) Desc LIMIT value",
        -7.937625408172607
      ]
    ],
    "predicted_parse_with_values": "SELECT course_id , course_description FROM Courses GROUP BY course_id ORDER BY Count ( * ) Desc LIMIT 1",
    "predicted_parse": "SELECT course_id , course_description FROM Courses GROUP BY course_id ORDER BY Count ( * ) Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of course id in courses table",
      "Step 2: find the course id and course description in courses table with largest value in the results of step 1"
    ],
    "template_feedback": "in step 1 , use degree programs table and student enrolment table in place of courses table . find for each value of degree programs 's degree program id in place of course id . in step 2 , find degree programs 's degree program id and degree summary name in place of course description and course id .",
    "primary_span": [
      [
        4,
        11
      ],
      [
        18,
        28
      ],
      [
        39,
        49
      ]
    ],
    "secondary_span": [
      [
        12,
        17
      ],
      [
        29,
        34
      ],
      [
        50,
        58
      ]
    ],
    "edits": [
      "degree program id",
      "degree summary name",
      "course id",
      "course description",
      "degree programs",
      "student enrolment",
      "courses",
      "degree program id",
      "course id"
    ],
    "edits_original": "< select > add degree program id </ select > < select > add degree summary name </ select > < select > remove course id </ select > < select > remove course description </ select > < from > add degree programs </ from > < from > add student enrolment </ from > < from > remove courses </ from > < groupBy > add degree program id </ groupBy > < groupBy > remove course id </ groupBy >"
  },
  {
    "db_id": "orchestra",
    "feedback": "For performance table you should use orchestra Id.",
    "question": "Show the years in which orchestras that have given more than one performance are founded.",
    "gold_parse": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1",
    "beam": [
      [
        "SELECT Year_of_Founded FROM orchestra GROUP BY Year_of_Founded HAVING Count ( * ) > value",
        -0.0037250518798828125
      ],
      [
        "SELECT T1.Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING Count ( * ) > value",
        -5.609215259552002
      ],
      [
        "SELECT T1.Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID GROUP BY T2.Official_ratings_(millions) HAVING Count ( * ) > value",
        -11.012125015258789
      ],
      [
        "SELECT T1.Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID JOIN show AS T3 ON T2.Performance_ID = T3.Performance_ID WHERE T3.Attendance > value",
        -11.34201955795288
      ],
      [
        "SELECT Year_of_Founded FROM orchestra GROUP BY Year_of_Founded HAVING Avg ( * ) > value",
        -12.808069229125977
      ],
      [
        "SELECT Year_of_Founded FROM orchestra",
        -12.847124099731445
      ],
      [
        "SELECT Year_of_Founded FROM orchestra GROUP BY Record_Company HAVING Count ( * ) > value",
        -12.85191822052002
      ],
      [
        "SELECT T1.Year_of_Founded FROM orchestra AS T1 GROUP BY T1.Year_of_Founded HAVING Count ( * ) > ( SELECT Max ( T2.Official_ratings_(millions) ) FROM performance AS T2 )",
        -12.932894706726074
      ],
      [
        "SELECT Year_of_Founded FROM orchestra GROUP BY Orchestra_ID HAVING Count ( * ) > value",
        -12.94254207611084
      ],
      [
        "SELECT T1.Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID JOIN show AS T3 ON T2.Performance_ID = T3.Performance_ID GROUP BY T3.Attendance HAVING Count ( * ) > value",
        -13.934981346130371
      ],
      [
        "SELECT DISTINCT Year_of_Founded FROM orchestra GROUP BY Year_of_Founded HAVING Count ( * ) > value",
        -14.047676086425781
      ],
      [
        "SELECT Year_of_Founded FROM orchestra WHERE Year_of_Founded > value",
        -14.103211641311646
      ],
      [
        "SELECT T1.Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID JOIN show AS T3 ON T2.Performance_ID = T3.Performance_ID GROUP BY T1.Year_of_Founded HAVING Count ( T3.Performance_ID ) > value",
        -14.175323486328125
      ],
      [
        "SELECT Year_of_Founded FROM orchestra GROUP BY Major_Record_Format HAVING Count ( * ) > value",
        -14.283157348632812
      ],
      [
        "SELECT T1.Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID JOIN show AS T3 ON T2.Performance_ID = T3.Performance_ID WHERE T3.Attendance > value GROUP BY T1.Year_of_Founded HAVING Count ( * ) > value",
        -14.603060960769653
      ],
      [
        "SELECT Year_of_Founded FROM orchestra GROUP BY Orchestra HAVING Count ( * ) > value",
        -14.828060150146484
      ],
      [
        "SELECT Year_of_Founded FROM orchestra GROUP BY Year_of_Founded HAVING Count ( * ) = value",
        -14.853821754455566
      ],
      [
        "SELECT Year_of_Founded FROM orchestra GROUP BY Conductor_ID HAVING Count ( * ) > value",
        -15.030594825744629
      ],
      [
        "SELECT T1.Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID WHERE T2.Weekly_rank > value",
        -15.052148580551147
      ],
      [
        "SELECT T1.Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID WHERE T2.Performance_ID > value",
        -15.627662181854248
      ]
    ],
    "predicted_parse_with_values": "SELECT Year_of_Founded FROM orchestra GROUP BY Year_of_Founded HAVING Count ( * ) > 1",
    "predicted_parse": "SELECT Year_of_Founded FROM orchestra GROUP BY Year_of_Founded HAVING Count ( * ) > value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of year of founded in orchestra table",
      "Step 2: find the year of founded in orchestra table whose corresponding value in step 1 is greater than 1"
    ],
    "template_feedback": "in step 1 , additionally use the information from the performance table besides the orchestra table . find for value of performance 's orchestra id in place of year of founded .",
    "primary_span": [
      [
        4,
        11
      ],
      [
        17,
        24
      ]
    ],
    "secondary_span": [
      [
        12,
        16
      ],
      [
        25,
        31
      ]
    ],
    "edits": [
      "performance",
      "orchestra id",
      "year of founded"
    ],
    "edits_original": "< from > add performance </ from > < groupBy > add orchestra id </ groupBy > < groupBy > remove year of founded </ groupBy >"
  },
  {
    "db_id": "world_1",
    "feedback": "Swap population greater than English\" with \"countrylanguage's language not equals English\".",
    "question": "What are the country codes of countries where people use languages other than English?",
    "gold_parse": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"",
    "beam": [
      [
        "SELECT Code FROM country WHERE Population > value",
        -0.34552001953125
      ],
      [
        "SELECT Code FROM country WHERE LifeExpectancy > value",
        -2.418281078338623
      ],
      [
        "SELECT Continent FROM country WHERE Population > value",
        -2.741302967071533
      ],
      [
        "SELECT Code FROM country WHERE Name > value",
        -2.854646682739258
      ],
      [
        "SELECT Code FROM country WHERE Continent > value",
        -3.6161603927612305
      ],
      [
        "SELECT Continent FROM country WHERE LifeExpectancy > value",
        -4.775200366973877
      ],
      [
        "SELECT Code FROM country WHERE LocalName > value",
        -4.879859924316406
      ],
      [
        "SELECT Code FROM country WHERE Code > value",
        -5.0955634117126465
      ],
      [
        "SELECT Continent FROM country WHERE Name > value",
        -5.170477867126465
      ],
      [
        "SELECT Code FROM country WHERE Population > ( SELECT Continent FROM country WHERE LocalName = value )",
        -5.629090309143066
      ],
      [
        "SELECT Code FROM country WHERE Population > ( SELECT Continent FROM country WHERE Name = value )",
        -5.77700138092041
      ],
      [
        "SELECT Continent FROM country WHERE Continent > value",
        -6.022821426391602
      ],
      [
        "SELECT Code FROM country WHERE Population > ( SELECT Population FROM country WHERE LocalName = value )",
        -6.702350378036499
      ],
      [
        "SELECT Code FROM country WHERE SurfaceArea > value",
        -6.758275985717773
      ],
      [
        "SELECT Code FROM country WHERE Population > ( SELECT LocalName FROM country WHERE LocalName = value )",
        -7.116174697875977
      ],
      [
        "SELECT Continent FROM country WHERE LocalName > value",
        -7.198991775512695
      ],
      [
        "SELECT Continent FROM country WHERE Code > value",
        -7.300393104553223
      ],
      [
        "SELECT Code FROM country WHERE GNPOld > value",
        -7.394654750823975
      ],
      [
        "SELECT Code FROM country",
        -13.086272239685059
      ],
      [
        "SELECT Continent FROM country",
        -14.388903617858887
      ]
    ],
    "predicted_parse_with_values": "SELECT Code FROM country WHERE Population > \"English\"",
    "predicted_parse": "SELECT Code FROM country WHERE Population > value",
    "predicted_parse_explanation": [
      "find the code in country table whose population greater than English"
    ],
    "template_feedback": "use countrylanguage table in place of country table . consider the language not equals English conditions in place of the population greater than English conditions . make sure no repetition in the results .",
    "primary_span": [
      [
        0,
        2
      ],
      [
        9,
        15
      ],
      [
        26,
        33
      ]
    ],
    "secondary_span": [
      [
        3,
        8
      ],
      [
        16,
        25
      ]
    ],
    "edits": [
      "distinct",
      "countrycode",
      "code",
      "countrylanguage",
      "country",
      "language not equals to \"English\"",
      "population greater than \"English\""
    ],
    "edits_original": "< select > add distinct </ select > < select > add countrycode </ select > < select > remove code </ select > < from > add countrylanguage </ from > < from > remove country </ from > < where > add language not equals to \" English \" </ where > < where > remove population greater than \" English \" </ where >"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "feedback": "You have to look for the distinct code of template type from the reference template type table used for documents.",
    "question": "Count the number of different templates used for documents.",
    "gold_parse": "SELECT count(DISTINCT template_id) FROM Documents",
    "beam": [
      [
        "SELECT Count ( * ) FROM Ref_Template_Types",
        -0.5934293270111084
      ],
      [
        "SELECT Count ( DISTINCT Template_ID ) FROM Documents",
        -0.8120801448822021
      ],
      [
        "SELECT Count ( DISTINCT Template_Type_Code ) FROM Templates",
        -6.128413200378418
      ],
      [
        "SELECT Count ( DISTINCT Document_Name ) FROM Documents",
        -6.5929646492004395
      ],
      [
        "SELECT Count ( DISTINCT Version_Number ) FROM Templates",
        -10.31248950958252
      ],
      [
        "SELECT Count ( DISTINCT Template_Type_Code ) FROM Ref_Template_Types",
        -12.027135848999023
      ],
      [
        "SELECT Count ( Template_ID ) FROM Documents",
        -12.08401370048523
      ],
      [
        "SELECT Count ( DISTINCT Paragraph_Text ) FROM Paragraphs",
        -12.29985523223877
      ],
      [
        "SELECT Count ( DISTINCT Template_Type_Description ) FROM Ref_Template_Types",
        -12.328836441040039
      ],
      [
        "SELECT Count ( DISTINCT Date_Effective_From ) FROM Templates",
        -12.436367988586426
      ],
      [
        "SELECT Count ( DISTINCT Document_Description ) FROM Documents",
        -12.480140209197998
      ],
      [
        "SELECT Count ( DISTINCT Document_ID ) FROM Paragraphs",
        -12.542125701904297
      ],
      [
        "SELECT Count ( DISTINCT Paragraph_ID ) FROM Paragraphs",
        -12.607579231262207
      ],
      [
        "SELECT Sum ( Version_Number ) FROM Templates",
        -12.64931583404541
      ],
      [
        "SELECT Count ( DISTINCT Template_Details ) FROM Templates",
        -12.969463348388672
      ],
      [
        "SELECT Count ( DISTINCT Other_Details ) FROM Paragraphs",
        -13.15521764755249
      ],
      [
        "SELECT Count ( DISTINCT Date_Effective_To ) FROM Templates",
        -13.305808544158936
      ],
      [
        "SELECT Count ( DISTINCT Template_ID ) FROM Templates",
        -13.314910888671875
      ],
      [
        "SELECT Sum ( DISTINCT Template_ID ) FROM Documents",
        -13.474074602127075
      ],
      [
        "SELECT Count ( * ) FROM Documents WHERE Document_Name = value",
        -14.09886384010315
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM Ref_Template_Types",
    "predicted_parse": "SELECT Count ( * ) FROM Ref_Template_Types",
    "predicted_parse_explanation": [
      "find the number of rows in reference template types table"
    ],
    "template_feedback": "use documents table in place of reference template types table . find number of different template id in place of number of rows .",
    "primary_span": [
      [
        0,
        2
      ],
      [
        11,
        16
      ]
    ],
    "secondary_span": [
      [
        3,
        10
      ],
      [
        17,
        23
      ]
    ],
    "edits": [
      "number of distinct template id",
      "number of rows",
      "documents",
      "reference template types"
    ],
    "edits_original": "< select > add number of distinct template id </ select > < select > remove number of rows </ select > < from > add documents </ from > < from > remove reference template types </ from >"
  },
  {
    "db_id": "wta_1",
    "feedback": "Put winner name and winner age in place of tourney name and loser age .",
    "question": "What are the names and ranks of the three youngest winners across all matches?",
    "gold_parse": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3",
    "beam": [
      [
        "SELECT tourney_name , winner_rank FROM matches ORDER BY loser_age Asc LIMIT value",
        -0.4659891128540039
      ],
      [
        "SELECT tourney_name , loser_rank FROM matches ORDER BY loser_age Asc LIMIT value",
        -1.030989646911621
      ],
      [
        "SELECT winner_name , winner_rank FROM matches ORDER BY loser_age Asc LIMIT value",
        -4.7537641525268555
      ],
      [
        "SELECT winner_name , loser_rank FROM matches ORDER BY loser_age Asc LIMIT value",
        -5.264349937438965
      ],
      [
        "SELECT loser_name , winner_rank FROM matches ORDER BY loser_age Asc LIMIT value",
        -6.961458206176758
      ],
      [
        "SELECT loser_name , loser_rank FROM matches ORDER BY loser_age Asc LIMIT value",
        -7.462125778198242
      ],
      [
        "SELECT tourney_name , winner_rank FROM matches ORDER BY winner_age Asc LIMIT value",
        -8.496054649353027
      ],
      [
        "SELECT tourney_name , loser_rank FROM matches ORDER BY winner_age Asc LIMIT value",
        -9.07669734954834
      ],
      [
        "SELECT tourney_name , winner_rank_points FROM matches ORDER BY loser_age Asc LIMIT value",
        -9.131550788879395
      ],
      [
        "SELECT T2.tourney_name , T3.ranking FROM players AS T1 JOIN matches AS T2 ON T2.loser_id = T1.player_id JOIN rankings AS T3 ON T1.player_id = T3.player_id ORDER BY T2.loser_age Asc LIMIT value",
        -9.985767364501953
      ],
      [
        "SELECT tourney_name , score FROM matches ORDER BY loser_age Asc LIMIT value",
        -11.306649208068848
      ],
      [
        "SELECT tourney_name , loser_rank_points FROM matches ORDER BY loser_age Asc LIMIT value",
        -11.973393440246582
      ],
      [
        "SELECT tourney_name , winner_rank FROM matches ORDER BY loser_age Asc",
        -12.643129348754883
      ],
      [
        "SELECT winner_name , winner_rank FROM matches ORDER BY winner_age Asc LIMIT value",
        -12.78389835357666
      ],
      [
        "SELECT tourney_name , loser_rank FROM matches ORDER BY loser_age Asc",
        -13.212809562683105
      ],
      [
        "SELECT tourney_name , winner_rank FROM matches",
        -13.298845291137695
      ],
      [
        "SELECT winner_name , loser_rank FROM matches ORDER BY winner_age Asc LIMIT value",
        -13.310547828674316
      ],
      [
        "SELECT winner_name , winner_rank_points FROM matches ORDER BY loser_age Asc LIMIT value",
        -13.360428810119629
      ],
      [
        "SELECT tourney_name FROM matches ORDER BY loser_age Asc LIMIT value",
        -13.497491836547852
      ],
      [
        "SELECT tourney_name , loser_rank FROM matches",
        -13.83720588684082
      ]
    ],
    "predicted_parse_with_values": "SELECT tourney_name , winner_rank FROM matches ORDER BY loser_age Asc LIMIT 3",
    "predicted_parse": "SELECT tourney_name , winner_rank FROM matches ORDER BY loser_age Asc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: find the tourney name and winner rank in matches table ordered ascending by loser age",
      "Step 2: only show the first 3 rows of the results"
    ],
    "template_feedback": "in step 1 , find winner name in place of tourney name . make sure no repetition in the results . order the results by winner age in place of loser age .",
    "primary_span": [
      [
        4,
        6
      ],
      [
        13,
        20
      ],
      [
        21,
        26
      ]
    ],
    "secondary_span": [
      [
        7,
        12
      ],
      [
        27,
        32
      ]
    ],
    "edits": [
      "distinct",
      "winner name",
      "tourney name",
      "winner age",
      "loser age"
    ],
    "edits_original": "< select > add distinct </ select > < select > add winner name </ select > < select > remove tourney name </ select > < orderBy > add winner age </ orderBy > < orderBy > remove loser age </ orderBy >"
  },
  {
    "db_id": "pets_1",
    "feedback": "from has pet table look for student id whose rows number are corresponding to all the value.",
    "question": "Find the number of pets for each student who has any pet and student id.",
    "gold_parse": "SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid",
    "beam": [
      [
        "SELECT Count ( * ) FROM Student",
        -0.05356597900390625
      ],
      [
        "SELECT Count ( * ) , StuID FROM Student GROUP BY StuID",
        -4.155095100402832
      ],
      [
        "SELECT Count ( * ) , T1.StuID FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID GROUP BY T2.StuID",
        -4.342970848083496
      ],
      [
        "SELECT Count ( * ) , T1.StuID FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID GROUP BY T2.StuID HAVING Count ( * ) > = value",
        -4.9599103927612305
      ],
      [
        "SELECT Count ( * ) , T1.StuID FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID WHERE T2.PetID = value GROUP BY T2.StuID",
        -5.898468971252441
      ],
      [
        "SELECT Count ( * ) , StuID FROM Has_Pet GROUP BY StuID",
        -5.903482437133789
      ],
      [
        "SELECT Count ( * ) , StuID FROM Student GROUP BY StuID HAVING Count ( * ) > = value",
        -6.0218706130981445
      ],
      [
        "SELECT Count ( * ) , StuID FROM Student",
        -6.051037788391113
      ],
      [
        "SELECT Count ( * ) , T2.StuID FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID GROUP BY T1.StuID",
        -6.059257507324219
      ],
      [
        "SELECT Count ( * ) FROM Has_Pet WHERE PetID = value",
        -6.742471694946289
      ],
      [
        "SELECT Count ( * ) , StuID FROM Has_Pet GROUP BY StuID HAVING Count ( * ) > = value",
        -7.403480529785156
      ],
      [
        "SELECT Count ( * ) , T1.StuID FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID WHERE T2.PetID = value GROUP BY T1.StuID",
        -7.479474067687988
      ],
      [
        "SELECT Count ( * ) , StuID FROM Has_Pet",
        -7.732541084289551
      ],
      [
        "SELECT Count ( * ) , T2.StuID FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID GROUP BY T1.StuID HAVING Count ( * ) > = value",
        -7.9271392822265625
      ],
      [
        "SELECT Count ( * ) , PetID FROM Has_Pet GROUP BY StuID",
        -8.779053688049316
      ],
      [
        "SELECT Count ( * ) , T2.PetID FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID GROUP BY T1.StuID",
        -9.365012168884277
      ],
      [
        "SELECT Sum ( Sex ) FROM Student",
        -11.789400100708008
      ],
      [
        "SELECT Count ( * ) , PetID FROM Has_Pet",
        -11.900425434112549
      ],
      [
        "SELECT Count ( DISTINCT StuID ) FROM Has_Pet",
        -12.425919532775879
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM Student",
        -15.011297225952148
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM Student",
    "predicted_parse": "SELECT Count ( * ) FROM Student",
    "predicted_parse_explanation": [
      "find the number of rows in student table"
    ],
    "template_feedback": "additionally use the information from the has pet table besides the student table . find for each value of student 's student id . additionally find student 's student id .",
    "primary_span": [
      [
        0,
        8
      ],
      [
        14,
        23
      ],
      [
        24,
        30
      ]
    ],
    "secondary_span": [
      [
        9,
        13
      ]
    ],
    "edits": [
      "student id",
      "has pet",
      "student id"
    ],
    "edits_original": "< select > add student id </ select > < from > add has pet </ from > < groupBy > add student id </ groupBy >"
  },
  {
    "db_id": "car_1",
    "feedback": "Find cylinders of cars data table with least value of accelerate and car names's model equals volvo .",
    "question": "For a volvo model, how many cylinders does the version with least accelerate have?",
    "gold_parse": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1",
    "beam": [
      [
        "SELECT Count ( * ) FROM cars_data WHERE Accelerate = value",
        -0.48175477981567383
      ],
      [
        "SELECT Model , Count ( * ) FROM model_list GROUP BY Model ORDER BY Count ( * ) Asc LIMIT value",
        -2.0346386432647705
      ],
      [
        "SELECT T3.Cylinders , Count ( * ) FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id GROUP BY T1.Model ORDER BY Count ( * ) Asc LIMIT value",
        -2.3510265350341797
      ],
      [
        "SELECT Count ( * ) FROM cars_data WHERE Year = value",
        -3.370906352996826
      ],
      [
        "SELECT Cylinders FROM cars_data WHERE Accelerate = value",
        -4.018920421600342
      ],
      [
        "SELECT T1.Model , Count ( * ) FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id GROUP BY T3.MPG ORDER BY Count ( * ) Asc LIMIT value",
        -4.445937395095825
      ],
      [
        "SELECT Cylinders FROM cars_data ORDER BY Accelerate Asc LIMIT value",
        -4.516180992126465
      ],
      [
        "SELECT T1.Model , Count ( * ) FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T3.Accelerate = value GROUP BY T1.Model ORDER BY Count ( * ) Asc LIMIT value",
        -4.712887287139893
      ],
      [
        "SELECT T3.Cylinders , Count ( * ) FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T3.Accelerate = value GROUP BY T1.Model ORDER BY Count ( * ) Asc LIMIT value",
        -4.718696117401123
      ],
      [
        "SELECT Cylinders , Count ( * ) FROM cars_data GROUP BY MPG ORDER BY Count ( * ) Asc LIMIT value",
        -4.96094274520874
      ],
      [
        "SELECT T3.MPG , Count ( * ) FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id GROUP BY T1.Model ORDER BY Count ( * ) Asc LIMIT value",
        -5.143734693527222
      ],
      [
        "SELECT T3.Year , Count ( * ) FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id GROUP BY T1.Model ORDER BY Count ( * ) Asc LIMIT value",
        -5.397576570510864
      ],
      [
        "SELECT T2.Model , Count ( * ) FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model GROUP BY T1.Model ORDER BY Count ( * ) Asc LIMIT value",
        -5.678754568099976
      ],
      [
        "SELECT T3.Horsepower , Count ( * ) FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id GROUP BY T1.Model ORDER BY Count ( * ) Asc LIMIT value",
        -5.964642524719238
      ],
      [
        "SELECT T3.Edispl , Count ( * ) FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id GROUP BY T1.Model ORDER BY Count ( * ) Asc LIMIT value",
        -5.997071981430054
      ],
      [
        "SELECT Count ( * ) FROM model_list WHERE Model = value",
        -6.323211193084717
      ],
      [
        "SELECT Count ( * ) FROM cars_data WHERE Accelerate < value",
        -6.392577171325684
      ],
      [
        "SELECT T1.Model , Count ( * ) FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model GROUP BY T2.Model ORDER BY Count ( * ) Asc LIMIT value",
        -6.4114670753479
      ],
      [
        "SELECT T3.Cylinders , Count ( * ) FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T3.Accelerate < value GROUP BY T1.Model ORDER BY Count ( * ) Asc LIMIT value",
        -6.616487264633179
      ],
      [
        "SELECT Cylinders , Count ( * ) FROM cars_data WHERE Accelerate = value GROUP BY MPG ORDER BY Count ( * ) Asc LIMIT value",
        -6.628116130828857
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM cars_data WHERE Accelerate = 1",
    "predicted_parse": "SELECT Count ( * ) FROM cars_data WHERE Accelerate = value",
    "predicted_parse_explanation": [
      "find the number of rows in cars data table whose accelerate equals 1"
    ],
    "template_feedback": "additionally use the information from the car names table besides the cars data table . consider the model equals volvo conditions in place of the accelerate equals 1 conditions . find cylinders in place of number of rows . find the result with the smallest accelerate .",
    "primary_span": [
      [
        0,
        8
      ],
      [
        15,
        20
      ],
      [
        30,
        31
      ],
      [
        39,
        46
      ]
    ],
    "secondary_span": [
      [
        9,
        14
      ],
      [
        21,
        29
      ],
      [
        32,
        38
      ]
    ],
    "edits": [
      "cylinders",
      "number of rows",
      "car names",
      "model equals \"volvo\"",
      "accelerate equals 1",
      "accelerate",
      "1"
    ],
    "edits_original": "< select > add cylinders </ select > < select > remove number of rows </ select > < from > add car names </ from > < where > add model equals \" volvo \" </ where > < where > remove accelerate equals 1 </ where > < orderBy > add accelerate </ orderBy > < limit > add 1 </ limit >"
  },
  {
    "db_id": "dog_kennels",
    "feedback": "Need to search dog id from Treatments table who exist in the dog id of dogs table.",
    "question": "Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.",
    "gold_parse": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
    "beam": [
      [
        "SELECT owner_id , last_name FROM Owners GROUP BY owner_id ORDER BY Count ( * ) Desc LIMIT value",
        -0.0014667510986328125
      ],
      [
        "SELECT first_name , last_name FROM Owners GROUP BY owner_id ORDER BY Count ( * ) Desc LIMIT value",
        -7.466975688934326
      ],
      [
        "SELECT owner_id , last_name FROM Owners GROUP BY owner_id HAVING Count ( * ) > = value ORDER BY Count ( * ) Desc LIMIT value",
        -7.835806965827935
      ],
      [
        "SELECT owner_id , last_name FROM Owners GROUP BY owner_id ORDER BY Count ( * ) Asc LIMIT value",
        -9.079127311706543
      ],
      [
        "SELECT T3.professional_id , T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id GROUP BY T1.owner_id ORDER BY Count ( * ) Desc LIMIT value",
        -9.429448127746582
      ],
      [
        "SELECT T1.owner_id , T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY T2.owner_id ORDER BY Count ( * ) Desc LIMIT value",
        -9.982155799865723
      ],
      [
        "SELECT T2.owner_id , T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id ORDER BY Count ( * ) Desc LIMIT value",
        -10.15236759185791
      ],
      [
        "SELECT T1.owner_id , T3.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id GROUP BY T1.owner_id ORDER BY Count ( * ) Desc LIMIT value",
        -10.241291046142578
      ],
      [
        "SELECT owner_id , last_name FROM Owners GROUP BY owner_id HAVING Count ( * ) > = value ORDER BY last_name Desc LIMIT value",
        -10.626272916793823
      ],
      [
        "SELECT owner_id , last_name FROM Owners GROUP BY owner_id HAVING Count ( * ) > = value",
        -10.62813949584961
      ],
      [
        "SELECT owner_id , last_name FROM Owners GROUP BY owner_id ORDER BY Count ( * ) Desc",
        -10.919842720031738
      ],
      [
        "SELECT T1.owner_id , T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T3.professional_id ORDER BY Count ( * ) Desc LIMIT value",
        -11.079437255859375
      ],
      [
        "SELECT owner_id , last_name FROM Owners GROUP BY owner_id HAVING Count ( * ) > = value ORDER BY owner_id Desc LIMIT value",
        -11.17696738243103
      ],
      [
        "SELECT T1.owner_id , T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T2.weight > = value GROUP BY T1.owner_id ORDER BY Count ( * ) Desc LIMIT value",
        -11.322531461715698
      ],
      [
        "SELECT owner_id , last_name FROM Owners GROUP BY owner_id",
        -11.35069751739502
      ],
      [
        "SELECT T3.professional_id , T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY Count ( * ) Desc LIMIT value",
        -12.059325218200684
      ],
      [
        "SELECT T1.owner_id , T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id ORDER BY T2.age Desc LIMIT value",
        -12.203095436096191
      ],
      [
        "SELECT owner_id , last_name FROM Owners GROUP BY owner_id HAVING Count ( * ) < = value",
        -12.239047050476074
      ],
      [
        "SELECT T1.owner_id , T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T2.age > = value GROUP BY T1.owner_id ORDER BY Count ( * ) Desc LIMIT value",
        -12.245551824569702
      ],
      [
        "SELECT T1.owner_id , T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id ORDER BY T2.weight Desc LIMIT value",
        -13.009644508361816
      ]
    ],
    "predicted_parse_with_values": "SELECT owner_id , last_name FROM Owners GROUP BY owner_id ORDER BY Count ( * ) Desc LIMIT 1",
    "predicted_parse": "SELECT owner_id , last_name FROM Owners GROUP BY owner_id ORDER BY Count ( * ) Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of owner id in owners table",
      "Step 2: find the owner id and last name in owners table with largest value in the results of step 1"
    ],
    "template_feedback": "in step 1 , additionally use the information from the treatments table and dogs table besides the owners table .",
    "primary_span": [
      [
        4,
        14
      ]
    ],
    "secondary_span": [
      [
        15,
        19
      ]
    ],
    "edits": [
      "dogs",
      "treatments"
    ],
    "edits_original": "< from > add dogs </ from > < from > add treatments </ from >"
  },
  {
    "db_id": "flight_2",
    "feedback": "Find number of rows in flights table whose SourceAirport's corresponding city equals Aberdeen .",
    "question": "How many flights depart from City Aberdeen?",
    "gold_parse": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
    "beam": [
      [
        "SELECT Count ( * ) FROM airports WHERE City = value",
        -0.1332540512084961
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE AirportName = value",
        -2.097379684448242
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE AirportName = value AND City = value",
        -6.241168975830078
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE Country = value",
        -10.893143653869629
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE City = value AND City = value",
        -11.869972229003906
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE CountryAbbrev = value",
        -13.55180835723877
      ],
      [
        "SELECT Count ( * ) FROM flights AS T1 WHERE T1.DestAirport IN ( SELECT T2.AirportCode FROM airports AS T2 WHERE T2.City = value )",
        -14.282464504241943
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE City > value",
        -14.445050716400146
      ],
      [
        "SELECT Count ( * ) FROM flights AS T1 WHERE T1.DestAirport IN ( SELECT T2.AirportName FROM airports AS T2 WHERE T2.City = value )",
        -14.495113372802734
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM airports WHERE City = value",
        -14.55345344543457
      ],
      [
        "SELECT Avg ( * ) FROM airports WHERE City = value",
        -14.849285364151001
      ],
      [
        "SELECT * FROM airports WHERE City = value",
        -15.54818844795227
      ],
      [
        "SELECT Count ( Count ( * ) ) FROM airports WHERE City = value",
        -15.672724723815918
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE AirportName LIKE value",
        -15.789641380310059
      ],
      [
        "SELECT Count ( * ) , AirportName FROM airports WHERE City = value",
        -15.905969738960266
      ],
      [
        "SELECT Count ( * ) FROM flights AS T1 WHERE T1.DestAirport IN ( SELECT * FROM airports AS T2 WHERE T2.City = value )",
        -15.940426349639893
      ],
      [
        "SELECT Sum ( * ) FROM airports WHERE City = value",
        -15.992004871368408
      ],
      [
        "SELECT Count ( * ) FROM flights WHERE DestAirport = value",
        -16.2912015914917
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM airports WHERE AirportName = value",
        -16.6366024017334
      ],
      [
        "SELECT Count ( * ) FROM airlines",
        -18.555978775024414
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM airports WHERE City = \"Aberdeen\"",
    "predicted_parse": "SELECT Count ( * ) FROM airports WHERE City = value",
    "predicted_parse_explanation": [
      "find the number of rows in airports table whose city equals Aberdeen"
    ],
    "template_feedback": "additionally use the information from the flights table besides the airports table .",
    "primary_span": [
      [
        0,
        7
      ]
    ],
    "secondary_span": [
      [
        8,
        12
      ]
    ],
    "edits": [
      "flights"
    ],
    "edits_original": "< from > add flights </ from >"
  },
  {
    "db_id": "dog_kennels",
    "feedback": "You have to swap the code of distinct breed and size with the code of treatment type and weight respectively in step 2.",
    "question": "What are all the possible breed type and size type combinations?",
    "gold_parse": "SELECT DISTINCT breed_code ,  size_code FROM dogs",
    "beam": [
      [
        "SELECT T2.treatment_type_code , T1.weight FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id",
        -1.1061220169067383
      ],
      [
        "SELECT T1.treatment_type_code , T2.weight FROM Treatment_Types AS T1 JOIN Dogs AS T2 JOIN Treatments AS T3 ON T1.treatment_type_code = T3.treatment_type_code AND T3.dog_id = T2.dog_id",
        -1.6764941215515137
      ],
      [
        "SELECT T2.treatment_type_code , T1.gender FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id",
        -1.7381365299224854
      ],
      [
        "SELECT T1.treatment_type_code , T2.gender FROM Treatment_Types AS T1 JOIN Dogs AS T2 JOIN Treatments AS T3 ON T1.treatment_type_code = T3.treatment_type_code AND T3.dog_id = T2.dog_id",
        -2.456571578979492
      ],
      [
        "SELECT T2.treatment_type_code , T1.treatment_type_code FROM Treatment_Types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code",
        -3.2452003955841064
      ],
      [
        "SELECT T1.treatment_type_code , T2.treatment_type_code FROM Treatment_Types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code",
        -3.437206506729126
      ],
      [
        "SELECT T2.treatment_type_code , T1.size_code FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id",
        -3.6905720233917236
      ],
      [
        "SELECT treatment_type_code , treatment_type_code FROM Treatment_Types",
        -3.693279504776001
      ],
      [
        "SELECT treatment_type_code , treatment_type_code FROM Treatments",
        -3.9444379806518555
      ],
      [
        "SELECT weight , weight FROM Dogs",
        -4.459888935089111
      ],
      [
        "SELECT T1.treatment_type_code , T2.size_code FROM Treatment_Types AS T1 JOIN Dogs AS T2 JOIN Treatments AS T3 ON T1.treatment_type_code = T3.treatment_type_code AND T3.dog_id = T2.dog_id",
        -4.475806474685669
      ],
      [
        "SELECT T2.treatment_type_code , T1.weight FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id GROUP BY T2.treatment_type_code",
        -4.8467817306518555
      ],
      [
        "SELECT T2.treatment_type_code , T1.treatment_type_description FROM Treatment_Types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code",
        -4.873431205749512
      ],
      [
        "SELECT weight , gender FROM Dogs",
        -5.2074713706970215
      ],
      [
        "SELECT T3.treatment_type_code , T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id",
        -5.279167175292969
      ],
      [
        "SELECT T2.treatment_type_code , T1.gender FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id GROUP BY T2.treatment_type_code",
        -5.513826131820679
      ],
      [
        "SELECT T1.weight , T2.treatment_type_code FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id",
        -5.711946487426758
      ],
      [
        "SELECT T2.treatment_type_code , T1.breed_name FROM Breeds AS T1 JOIN Treatment_Types AS T2 JOIN Dogs AS T3 ON T1.breed_code = T3.breed_code JOIN Treatments AS T4 ON T3.dog_id = T4.dog_id AND T4.treatment_type_code = T2.treatment_type_code",
        -5.736309051513672
      ],
      [
        "SELECT treatment_type_code , treatment_type_description FROM Treatment_Types",
        -5.801647663116455
      ],
      [
        "SELECT treatment_type_code , treatment_id FROM Treatments",
        -6.134875774383545
      ]
    ],
    "predicted_parse_with_values": "SELECT T2.treatment_type_code , T1.weight FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id",
    "predicted_parse": "SELECT T2.treatment_type_code , T1.weight FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id",
    "predicted_parse_explanation": [
      "Step 1: for each row in dogs table , find the corresponding rows in treatments table",
      "Step 2: find the treatment type code and weight of the results of step 1"
    ],
    "template_feedback": "in step 1 , do not use the treatments table . in step 2 , find breed code and size code in place of treatment type code and weight . make sure no repetition in the results .",
    "primary_span": [
      [
        4,
        10
      ],
      [
        15,
        20
      ],
      [
        30,
        37
      ]
    ],
    "secondary_span": [
      [
        4,
        10
      ],
      [
        21,
        29
      ]
    ],
    "edits": [
      "distinct",
      "breed code",
      "size code",
      "treatment type code",
      "weight",
      "treatments"
    ],
    "edits_original": "< select > add distinct </ select > < select > add breed code </ select > < select > add size code </ select > < select > remove treatment type code </ select > < select > remove weight </ select > < from > remove treatments </ from >"
  },
  {
    "db_id": "pets_1",
    "feedback": "Need to use has pet table and not the student table.",
    "question": "For students who have pets, how many pets does each student have?",
    "gold_parse": "SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid",
    "beam": [
      [
        "SELECT StuID , Count ( * ) FROM Student GROUP BY StuID",
        -0.8673965930938721
      ],
      [
        "SELECT T2.StuID , Count ( * ) FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID GROUP BY T1.StuID",
        -1.1215839385986328
      ],
      [
        "SELECT T3.PetType , Count ( * ) FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID GROUP BY T1.StuID",
        -1.76493501663208
      ],
      [
        "SELECT Fname , Count ( * ) FROM Student GROUP BY StuID",
        -3.726778984069824
      ],
      [
        "SELECT T1.StuID , Count ( * ) FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID GROUP BY T2.StuID",
        -4.104693174362183
      ],
      [
        "SELECT StuID , Count ( * ) FROM Has_Pet GROUP BY StuID",
        -4.485296726226807
      ],
      [
        "SELECT T2.PetType , Count ( * ) FROM Has_Pet AS T1 JOIN Pets AS T2 ON T1.PetID = T2.PetID GROUP BY T1.StuID",
        -5.0496506690979
      ],
      [
        "SELECT Advisor , Count ( * ) FROM Student GROUP BY StuID",
        -5.180371284484863
      ],
      [
        "SELECT city_code , Count ( * ) FROM Student GROUP BY StuID",
        -5.459663391113281
      ],
      [
        "SELECT Major , Count ( * ) FROM Student GROUP BY StuID",
        -5.713788032531738
      ],
      [
        "SELECT Count ( * ) , T3.PetType FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID GROUP BY T1.StuID",
        -6.110941290855408
      ],
      [
        "SELECT Sex , Count ( * ) FROM Student GROUP BY StuID",
        -6.378358840942383
      ],
      [
        "SELECT T1.Fname , Count ( * ) FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID GROUP BY T2.StuID",
        -6.935879230499268
      ],
      [
        "SELECT Count ( * ) FROM Student",
        -7.1780195236206055
      ],
      [
        "SELECT T2.PetID , Count ( * ) FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID GROUP BY T1.StuID",
        -7.198047637939453
      ],
      [
        "SELECT Count ( * ) , StuID FROM Student GROUP BY StuID",
        -7.228447437286377
      ],
      [
        "SELECT LName , Count ( * ) FROM Student GROUP BY StuID",
        -7.322292327880859
      ],
      [
        "SELECT T3.weight , Count ( * ) FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID GROUP BY T1.StuID",
        -8.025803565979004
      ],
      [
        "SELECT T1.StuID , Count ( * ) FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID GROUP BY T2.PetID",
        -8.140518426895142
      ],
      [
        "SELECT T3.pet_age , Count ( * ) FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID GROUP BY T1.StuID",
        -8.2249116897583
      ]
    ],
    "predicted_parse_with_values": "SELECT StuID , Count ( * ) FROM Student GROUP BY StuID",
    "predicted_parse": "SELECT StuID , Count ( * ) FROM Student GROUP BY StuID",
    "predicted_parse_explanation": [
      "find each value of student id in student table along with the number of the corresponding rows to each value"
    ],
    "template_feedback": "additionally use the information from the has pet table besides the student table .",
    "primary_span": [
      [
        0,
        8
      ]
    ],
    "secondary_span": [
      [
        9,
        13
      ]
    ],
    "edits": [
      "has pet"
    ],
    "edits_original": "< from > add has pet </ from >"
  },
  {
    "db_id": "student_transcripts_tracking",
    "feedback": "Ensure to find number of rows in degree programs table , not in departments table .",
    "question": "How many degrees does the engineering department have?",
    "gold_parse": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'",
    "beam": [
      [
        "SELECT Count ( * ) FROM Departments WHERE department_name = value",
        -0.000640869140625
      ],
      [
        "SELECT Count ( DISTINCT T2.degree_summary_name ) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id WHERE T1.department_name = value",
        -7.36814546585083
      ],
      [
        "SELECT Count ( department_id ) FROM Departments WHERE department_name = value",
        -12.741174697875977
      ],
      [
        "SELECT Count ( T2.degree_summary_name ) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id WHERE T1.department_name = value",
        -12.907069683074951
      ],
      [
        "SELECT Count ( * ) FROM Addresses",
        -12.97460651397705
      ],
      [
        "SELECT Sum ( T2.degree_summary_name ) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id WHERE T1.department_name = value",
        -14.46307897567749
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM Departments WHERE department_name = value",
        -14.73717212677002
      ],
      [
        "SELECT T2.degree_summary_name FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id WHERE T1.department_name = value",
        -15.178955554962158
      ],
      [
        "SELECT Count ( T2.degree_summary_description ) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id WHERE T1.department_name = value",
        -15.213229656219482
      ],
      [
        "SELECT Count ( * ) FROM Departments WHERE department_name LIKE value",
        -15.261077880859375
      ],
      [
        "SELECT Avg ( T2.degree_summary_name ) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id WHERE T1.department_name = value",
        -15.360556602478027
      ],
      [
        "SELECT Count ( T2.degree_program_id ) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id WHERE T1.department_name = value",
        -15.510354042053223
      ],
      [
        "SELECT Count ( * ) , department_name FROM Departments WHERE department_name = value",
        -16.17046618461609
      ],
      [
        "SELECT Count ( * ) , T2.degree_summary_name FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id WHERE T1.department_name = value",
        -16.86219620704651
      ],
      [
        "SELECT Count ( DISTINCT * ) FROM Departments WHERE department_name = value",
        -16.880937576293945
      ],
      [
        "SELECT Count ( * ) FROM Departments WHERE department_name > value",
        -16.90650510787964
      ],
      [
        "SELECT Count ( Count ( * ) ) FROM Departments WHERE department_name = value",
        -17.004737854003906
      ],
      [
        "SELECT Count ( * ) FROM Departments WHERE department_name = value AND department_name = value",
        -17.07100486755371
      ],
      [
        "SELECT Count ( * ) FROM Departments WHERE DISTINCT department_name = value",
        -17.212060928344727
      ],
      [
        "SELECT Count ( * ) FROM Departments WHERE department_name = value LIMIT value",
        -17.321008682250977
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM Departments WHERE department_name = \"engineer\"",
    "predicted_parse": "SELECT Count ( * ) FROM Departments WHERE department_name = value",
    "predicted_parse_explanation": [
      "find the number of rows in departments table whose department name equals engineer"
    ],
    "template_feedback": "additionally use the information from the degree programs table besides the departments table .",
    "primary_span": [
      [
        0,
        8
      ]
    ],
    "secondary_span": [
      [
        9,
        13
      ]
    ],
    "edits": [
      "degree programs"
    ],
    "edits_original": "< from > add degree programs </ from >"
  },
  {
    "db_id": "dog_kennels",
    "feedback": "Make sure to search for the name in step 2 , and delete \"and name equals Kacey\" phrase .",
    "question": "Find the first names of owners living in Virginia and the names of dogs they own.",
    "gold_parse": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'",
    "beam": [
      [
        "SELECT T1.first_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = value AND T2.name = value",
        -0.035859107971191406
      ],
      [
        "SELECT T1.first_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = value AND T2.gender = value",
        -4.107245445251465
      ],
      [
        "SELECT T1.first_name FROM Owners AS T1 WHERE T1.state = value INTERSECT SELECT T1.first_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T2.name = value",
        -4.505980491638184
      ],
      [
        "SELECT T1.first_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = value AND T2.name = value INTERSECT SELECT T1.first_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T2.name = value",
        -5.298467636108398
      ],
      [
        "SELECT T1.first_name FROM Owners AS T1 WHERE T1.state = value INTERSECT SELECT T1.first_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T2.gender = value",
        -6.783978462219238
      ],
      [
        "SELECT T1.first_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = value AND T2.name = value INTERSECT SELECT T1.first_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T2.gender = value",
        -7.342787742614746
      ],
      [
        "SELECT first_name FROM Owners WHERE state = value INTERSECT SELECT first_name FROM Owners WHERE state = value",
        -7.787156105041504
      ],
      [
        "SELECT first_name FROM Owners WHERE state = value",
        -8.945784568786621
      ],
      [
        "SELECT T2.first_name FROM Breeds AS T1 JOIN Owners AS T2 JOIN Dogs AS T3 ON T1.breed_code = T3.breed_code AND T3.owner_id = T2.owner_id WHERE T2.state = value AND T1.breed_name = value",
        -9.820327758789062
      ],
      [
        "SELECT first_name FROM Owners WHERE state = value ORDER BY first_name Asc",
        -10.1585111618042
      ],
      [
        "SELECT T1.first_name FROM Owners AS T1 WHERE T1.state = value INTERSECT SELECT T1.first_name FROM Breeds AS T2 JOIN Owners AS T1 JOIN Dogs AS T3 ON T2.breed_code = T3.breed_code AND T3.owner_id = T1.owner_id WHERE T2.breed_name = value",
        -10.6857271194458
      ],
      [
        "SELECT T1.first_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id AND T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id WHERE T3.state = value AND T2.name = value",
        -11.0859375
      ],
      [
        "SELECT T2.first_name FROM Breeds AS T1 JOIN Owners AS T2 JOIN Dogs AS T3 ON T1.breed_code = T3.breed_code AND T3.owner_id = T2.owner_id AND T1.breed_code = T3.breed_code WHERE T1.breed_name = value AND T3.name = value",
        -11.93254566192627
      ],
      [
        "SELECT T1.first_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T2.name = value AND T2.name = value",
        -12.041647911071777
      ],
      [
        "SELECT T1.first_name , T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = value",
        -12.054704666137695
      ],
      [
        "SELECT T1.first_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = value AND T2.weight = value",
        -12.829413414001465
      ],
      [
        "SELECT first_name FROM Owners WHERE state = value AND state = value",
        -13.45410442352295
      ],
      [
        "SELECT T1.first_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = value ORDER BY T2.weight Asc LIMIT value",
        -13.456443309783936
      ],
      [
        "SELECT T1.first_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T2.gender = value AND T2.name = value",
        -13.57263469696045
      ],
      [
        "SELECT first_name FROM Owners",
        -14.911208152770996
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.first_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = \"Virginia\" AND T2.name = \"Kacey\"",
    "predicted_parse": "SELECT T1.first_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = value AND T2.name = value",
    "predicted_parse_explanation": [
      "Step 1: for each row in owners table , find the corresponding rows in dogs table",
      "Step 2: find the first name of the results of step 1 whose state equals Virginia and name equals Kacey"
    ],
    "template_feedback": "in step 2 , remove the name equals Kacey conditions . additionally find name .",
    "primary_span": [
      [
        4,
        10
      ],
      [
        11,
        14
      ]
    ],
    "secondary_span": [],
    "edits": [
      "name",
      "name equals \"Kacey\""
    ],
    "edits_original": "< select > add name </ select > < where > remove name equals \" Kacey \" </ where >"
  },
  {
    "db_id": "car_1",
    "feedback": "It should be the number of the corresponding rows for each continent in car makers table .",
    "question": "What is the name of each continent and how many car makers are there in each one?",
    "gold_parse": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent",
    "beam": [
      [
        "SELECT Continent , Count ( * ) FROM continents GROUP BY Continent",
        -4.38690185546875e-05
      ],
      [
        "SELECT Continent , Sum ( * ) FROM continents GROUP BY Continent",
        -10.617781460285187
      ],
      [
        "SELECT Count ( * ) , Continent FROM continents GROUP BY Continent",
        -12.383185386657715
      ],
      [
        "SELECT Continent , Count ( * ) , Continent FROM continents GROUP BY Continent",
        -12.46388902515173
      ],
      [
        "SELECT T1.Continent , Count ( * ) FROM continents AS T1 JOIN countries AS T2 ON T1.ContId = T2.Continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T3.Country",
        -12.691201210021973
      ],
      [
        "SELECT Continent , Count ( * ) FROM continents",
        -13.453065872192383
      ],
      [
        "SELECT Continent FROM continents GROUP BY Continent",
        -13.453556060791016
      ],
      [
        "SELECT T3.Country , Count ( * ) FROM continents AS T1 JOIN countries AS T2 ON T1.ContId = T2.Continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent",
        -14.522832870483398
      ],
      [
        "SELECT Continent , Count ( * ) FROM continents GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value",
        -14.632140159606934
      ],
      [
        "SELECT T2.CountryName , Count ( * ) FROM continents AS T1 JOIN countries AS T2 ON T1.ContId = T2.Continent GROUP BY T1.Continent",
        -14.809307098388672
      ],
      [
        "SELECT Continent , Continent FROM continents GROUP BY Continent",
        -14.900368452072144
      ],
      [
        "SELECT T1.Continent , Count ( * ) FROM continents AS T1 JOIN countries AS T2 ON T1.ContId = T2.Continent GROUP BY T2.Continent",
        -15.18916130065918
      ],
      [
        "SELECT Continent , Sum ( Continent ) FROM continents GROUP BY Continent",
        -15.325387001037598
      ],
      [
        "SELECT T1.Continent , Count ( * ) , Sum ( T4.ModelId ) FROM continents AS T1 JOIN countries AS T2 ON T1.ContId = T2.Continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country JOIN model_list AS T4 ON T3.Id = T4.Maker GROUP BY T1.Continent",
        -15.732830047607422
      ],
      [
        "SELECT Continent , Count ( * ) FROM continents GROUP BY Continent HAVING Count ( * ) > value",
        -15.806014060974121
      ],
      [
        "SELECT Continent , Count ( * ) FROM continents GROUP BY *",
        -15.877459526062012
      ],
      [
        "SELECT T1.Continent , Sum ( T4.ModelId ) FROM continents AS T1 JOIN countries AS T2 ON T1.ContId = T2.Continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country JOIN model_list AS T4 ON T3.Id = T4.Maker GROUP BY T1.Continent",
        -15.960354328155518
      ],
      [
        "SELECT Continent , Count ( * ) FROM continents WHERE Continent = value GROUP BY Continent",
        -16.066564917564392
      ],
      [
        "SELECT Continent , Avg ( * ) FROM continents GROUP BY Continent",
        -16.265695080161095
      ],
      [
        "SELECT Continent , Count ( * ) , Sum ( * ) FROM continents GROUP BY Continent",
        -16.35868263244629
      ]
    ],
    "predicted_parse_with_values": "SELECT Continent , Count ( * ) FROM continents GROUP BY Continent",
    "predicted_parse": "SELECT Continent , Count ( * ) FROM continents GROUP BY Continent",
    "predicted_parse_explanation": [
      "find each value of continent in continents table along with the number of the corresponding rows to each value"
    ],
    "template_feedback": "additionally use the information from the car makers table and countries table besides the continents table .",
    "primary_span": [
      [
        0,
        11
      ]
    ],
    "secondary_span": [
      [
        12,
        16
      ]
    ],
    "edits": [
      "countries",
      "car makers"
    ],
    "edits_original": "< from > add countries </ from > < from > add car makers </ from >"
  },
  {
    "db_id": "wta_1",
    "feedback": "Change tourney name , loser rank and loser age with winner name , winner rank and winner age .",
    "question": "Find the name and rank of the 3 youngest winners across all matches.",
    "gold_parse": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3",
    "beam": [
      [
        "SELECT tourney_name , loser_rank FROM matches ORDER BY loser_age Asc LIMIT value",
        -0.1535787582397461
      ],
      [
        "SELECT tourney_name , winner_rank FROM matches ORDER BY loser_age Asc LIMIT value",
        -2.074681282043457
      ],
      [
        "SELECT winner_name , loser_rank FROM matches ORDER BY loser_age Asc LIMIT value",
        -4.953305244445801
      ],
      [
        "SELECT tourney_name , score FROM matches ORDER BY loser_age Asc LIMIT value",
        -5.366766929626465
      ],
      [
        "SELECT tourney_name , loser_rank_points FROM matches ORDER BY loser_age Asc LIMIT value",
        -6.607052803039551
      ],
      [
        "SELECT winner_name , winner_rank FROM matches ORDER BY loser_age Asc LIMIT value",
        -6.863089561462402
      ],
      [
        "SELECT tourney_name , loser_rank FROM matches ORDER BY winner_age Asc LIMIT value",
        -6.924005508422852
      ],
      [
        "SELECT loser_name , loser_rank FROM matches ORDER BY loser_age Asc LIMIT value",
        -7.395624160766602
      ],
      [
        "SELECT tourney_name , winner_rank_points FROM matches ORDER BY loser_age Asc LIMIT value",
        -7.412196159362793
      ],
      [
        "SELECT tourney_name , winner_rank FROM matches ORDER BY winner_age Asc LIMIT value",
        -8.820825576782227
      ],
      [
        "SELECT T2.tourney_name , T3.ranking FROM players AS T1 JOIN matches AS T2 ON T2.loser_id = T1.player_id JOIN rankings AS T3 ON T1.player_id = T3.player_id ORDER BY T2.loser_age Asc LIMIT value",
        -9.015549659729004
      ],
      [
        "SELECT loser_name , winner_rank FROM matches ORDER BY loser_age Asc LIMIT value",
        -9.310729026794434
      ],
      [
        "SELECT winner_name , score FROM matches ORDER BY loser_age Asc LIMIT value",
        -10.660826683044434
      ],
      [
        "SELECT winner_name , loser_rank FROM matches ORDER BY winner_age Asc LIMIT value",
        -11.717334747314453
      ],
      [
        "SELECT winner_name , loser_rank_points FROM matches ORDER BY loser_age Asc LIMIT value",
        -11.72208309173584
      ],
      [
        "SELECT T2.tourney_name , T3.ranking_points FROM players AS T1 JOIN matches AS T2 ON T2.loser_id = T1.player_id JOIN rankings AS T3 ON T1.player_id = T3.player_id ORDER BY T2.loser_age Asc LIMIT value",
        -11.74496078491211
      ],
      [
        "SELECT tourney_name , score FROM matches ORDER BY winner_age Asc LIMIT value",
        -12.184057235717773
      ],
      [
        "SELECT tourney_name , loser_rank FROM matches ORDER BY loser_age Asc",
        -12.335358619689941
      ],
      [
        "SELECT tourney_name , loser_rank FROM matches",
        -12.64555549621582
      ],
      [
        "SELECT tourney_name FROM matches ORDER BY loser_age Asc LIMIT value",
        -13.787235260009766
      ]
    ],
    "predicted_parse_with_values": "SELECT tourney_name , loser_rank FROM matches ORDER BY loser_age Asc LIMIT 3",
    "predicted_parse": "SELECT tourney_name , loser_rank FROM matches ORDER BY loser_age Asc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: find the tourney name and loser rank in matches table ordered ascending by loser age",
      "Step 2: only show the first 3 rows of the results"
    ],
    "template_feedback": "in step 1 , find winner name and winner rank in place of tourney name and loser rank . make sure no repetition in the results . order the results by winner age in place of loser age .",
    "primary_span": [
      [
        4,
        9
      ],
      [
        19,
        26
      ],
      [
        27,
        32
      ]
    ],
    "secondary_span": [
      [
        10,
        18
      ],
      [
        33,
        38
      ]
    ],
    "edits": [
      "distinct",
      "winner name",
      "winner rank",
      "tourney name",
      "loser rank",
      "winner age",
      "loser age"
    ],
    "edits_original": "< select > add distinct </ select > < select > add winner name </ select > < select > add winner rank </ select > < select > remove tourney name </ select > < select > remove loser rank </ select > < orderBy > add winner age </ orderBy > < orderBy > remove loser age </ orderBy >"
  },
  {
    "db_id": "student_transcripts_tracking",
    "feedback": "also output student id",
    "question": "Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id.",
    "gold_parse": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2",
    "beam": [
      [
        "SELECT T1.first_name , T1.middle_name , T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) = value",
        -0.7226591110229492
      ],
      [
        "SELECT T1.first_name , T1.middle_name , T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) BETWEEN value AND value",
        -2.035140037536621
      ],
      [
        "SELECT T1.first_name , T1.middle_name , T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) > = value",
        -2.339385986328125
      ],
      [
        "SELECT T1.first_name , T1.middle_name , T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T2.student_enrolment_id HAVING Count ( * ) > = value",
        -3.5294933319091797
      ],
      [
        "SELECT T1.first_name , T1.middle_name , T2.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) BETWEEN value AND value",
        -3.649139404296875
      ],
      [
        "SELECT T1.first_name , T1.middle_name , T2.student_enrolment_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) BETWEEN value AND value",
        -3.979598045349121
      ],
      [
        "SELECT T1.first_name , T1.middle_name , T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) LIKE value",
        -3.9974560737609863
      ],
      [
        "SELECT T1.first_name , T1.middle_name , T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T2.student_enrolment_id HAVING Count ( * ) = value",
        -4.012093544006348
      ],
      [
        "SELECT T1.first_name , T1.middle_name , T2.student_enrolment_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) = value",
        -4.219856262207031
      ],
      [
        "SELECT T1.first_name , T1.middle_name , T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) IN ( SELECT T2.student_id FROM Student_Enrolment AS T2 )",
        -4.404507160186768
      ],
      [
        "SELECT T1.first_name , T1.middle_name , T2.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) = value",
        -4.564968109130859
      ],
      [
        "SELECT T1.first_name , T1.middle_name , T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) = value INTERSECT SELECT T1.first_name , T1.middle_name , T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) = value",
        -4.8672990798950195
      ],
      [
        "SELECT T1.first_name , T1.middle_name , T2.student_enrolment_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) > = value",
        -4.8923540115356445
      ],
      [
        "SELECT T1.first_name , T1.middle_name , T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T2.student_enrolment_id HAVING Count ( * ) BETWEEN value AND value",
        -5.3793134689331055
      ],
      [
        "SELECT T1.first_name , T1.middle_name , T2.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) > = value",
        -5.404165267944336
      ],
      [
        "SELECT T1.first_name , T1.middle_name , T2.student_enrolment_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T2.student_enrolment_id HAVING Count ( * ) > = value",
        -6.025620460510254
      ],
      [
        "SELECT T1.first_name , T1.middle_name , T2.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T2.student_enrolment_id HAVING Count ( * ) > = value",
        -6.208412170410156
      ],
      [
        "SELECT T1.first_name , T1.middle_name , T1.last_name FROM Students AS T1 UNION SELECT T1.first_name , T2.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id",
        -6.250458717346191
      ],
      [
        "SELECT T1.first_name , T1.middle_name , T2.student_enrolment_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T2.student_enrolment_id HAVING Count ( * ) = value",
        -6.253242492675781
      ],
      [
        "SELECT first_name , middle_name , last_name FROM Students INTERSECT SELECT first_name , middle_name , last_name FROM Students",
        -6.374659538269043
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.first_name , T1.middle_name , T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) = 2",
    "predicted_parse": "SELECT T1.first_name , T1.middle_name , T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T2.student_id HAVING Count ( * ) = value",
    "predicted_parse_explanation": [
      "Step 1: for each row in students table , find the corresponding rows in student enrolment table",
      "Step 2: find the number of rows of each value of student enrolment 's student id of the results of step 1",
      "Step 3: find the first name , middle name , last name of the results of step 1 whose corresponding value in step 2 is equals 2"
    ],
    "template_feedback": "in step 3 , additionally find students 's student id .",
    "primary_span": [
      [
        4,
        10
      ]
    ],
    "secondary_span": [],
    "edits": [
      "student id"
    ],
    "edits_original": "< select > add student id </ select >"
  },
  {
    "db_id": "wta_1",
    "feedback": "winner age should be used instead one of the loser age .",
    "question": "What are the average ages of losers and winners across matches?",
    "gold_parse": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches",
    "beam": [
      [
        "SELECT Avg ( loser_age ) , Avg ( loser_age ) FROM matches",
        -0.5658998489379883
      ],
      [
        "SELECT Avg ( loser_age ) , Avg ( winner_age ) FROM matches",
        -0.9338359832763672
      ],
      [
        "SELECT Avg ( winner_age ) , Avg ( loser_age ) FROM matches",
        -3.8521547317504883
      ],
      [
        "SELECT Avg ( winner_age ) , Avg ( winner_age ) FROM matches",
        -4.431907653808594
      ],
      [
        "SELECT Avg ( loser_age ) , Avg ( loser_entry ) FROM matches",
        -5.69521427154541
      ],
      [
        "SELECT Avg ( loser_age ) , Count ( * ) FROM matches",
        -7.504897117614746
      ],
      [
        "SELECT Avg ( loser_age ) , Avg ( winner_rank ) FROM matches",
        -7.638041019439697
      ],
      [
        "SELECT Avg ( loser_age ) , Avg ( loser_rank ) FROM matches",
        -8.061271667480469
      ],
      [
        "SELECT Avg ( loser_age ) , loser_entry FROM matches",
        -8.107596397399902
      ],
      [
        "SELECT Avg ( loser_age ) , Count ( winner_age ) FROM matches",
        -8.654053211212158
      ],
      [
        "SELECT Avg ( loser_age ) , Min ( loser_age ) FROM matches",
        -9.159065246582031
      ],
      [
        "SELECT Avg ( loser_age ) , Min ( winner_age ) FROM matches",
        -9.305296897888184
      ],
      [
        "SELECT Avg ( loser_age ) , Count ( loser_age ) FROM matches",
        -9.584367752075195
      ],
      [
        "SELECT Avg ( loser_age ) , Avg ( draw_size ) FROM matches",
        -9.600398063659668
      ],
      [
        "SELECT Avg ( loser_age ) , Max ( loser_age ) FROM matches",
        -9.74824333190918
      ],
      [
        "SELECT Avg ( loser_age ) , Sum ( loser_age ) FROM matches",
        -9.759367942810059
      ],
      [
        "SELECT Avg ( winner_age ) , Avg ( loser_entry ) FROM matches",
        -9.794979572296143
      ],
      [
        "SELECT Avg ( loser_age ) , Sum ( winner_age ) FROM matches",
        -10.057157516479492
      ],
      [
        "SELECT Avg ( loser_age ) , Max ( winner_age ) FROM matches",
        -10.288636207580566
      ],
      [
        "SELECT Avg ( loser_age ) FROM matches",
        -12.327484130859375
      ]
    ],
    "predicted_parse_with_values": "SELECT Avg ( loser_age ) , Avg ( loser_age ) FROM matches",
    "predicted_parse": "SELECT Avg ( loser_age ) , Avg ( loser_age ) FROM matches",
    "predicted_parse_explanation": [
      "find the average loser age and average loser age in matches table"
    ],
    "template_feedback": "additionally find average winner age .",
    "primary_span": [
      [
        0,
        5
      ]
    ],
    "secondary_span": [],
    "edits": [
      "average winner age",
      "average loser age"
    ],
    "edits_original": "< select > add average winner age </ select > < select > remove average loser age </ select >"
  },
  {
    "db_id": "dog_kennels",
    "feedback": "In step 2 Find only for whose corresponding professional id is in treatments table .",
    "question": "Which professional did not operate any treatment on dogs? List the professional's id, role and email.",
    "gold_parse": "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id",
    "beam": [
      [
        "SELECT professional_id , role_code , email_address FROM Professionals EXCEPT SELECT professional_id , role_code , email_address FROM Professionals",
        -0.010187149047851562
      ],
      [
        "SELECT T1.professional_id , T1.role_code , T1.email_address FROM Professionals AS T1 EXCEPT SELECT T2.owner_id , T1.role_code , T1.email_address FROM Owners AS T2 JOIN Dogs AS T3 ON T2.owner_id = T3.owner_id JOIN Professionals AS T1 JOIN Treatments AS T4 ON T3.dog_id = T4.dog_id AND T4.professional_id = T1.professional_id",
        -5.335687637329102
      ],
      [
        "SELECT professional_id , role_code , email_address FROM Professionals EXCEPT SELECT professional_id , email_address , email_address FROM Professionals",
        -5.900644302368164
      ],
      [
        "SELECT professional_id , email_address , email_address FROM Professionals EXCEPT SELECT professional_id , role_code , email_address FROM Professionals",
        -7.008169174194336
      ],
      [
        "SELECT T1.owner_id , T3.role_code , T3.email_address FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id EXCEPT SELECT T3.professional_id , T3.role_code , T3.email_address FROM Professionals AS T3",
        -7.739483833312988
      ],
      [
        "SELECT T1.professional_id , T1.role_code , T1.email_address FROM Professionals AS T1 EXCEPT SELECT T1.professional_id , T1.role_code , T1.email_address FROM Dogs AS T2 JOIN Professionals AS T1 JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id AND T3.professional_id = T1.professional_id WHERE T2.dog_id = value",
        -8.431208610534668
      ],
      [
        "SELECT professional_id , role_code , email_address FROM Professionals EXCEPT SELECT role_code , email_address , email_address FROM Professionals",
        -8.442317962646484
      ],
      [
        "SELECT T1.professional_id , T1.role_code , T1.email_address FROM Professionals AS T1 WHERE T1.professional_id NOT IN ( SELECT T2.owner_id FROM Dogs AS T2 )",
        -9.15474796295166
      ],
      [
        "SELECT T1.professional_id , T1.role_code , T1.email_address FROM Professionals AS T1 WHERE T1.role_code = value EXCEPT SELECT T1.professional_id , T1.role_code , T1.email_address FROM Dogs AS T2 JOIN Professionals AS T1 JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id AND T3.professional_id = T1.professional_id WHERE T2.dog_id = value",
        -9.394618511199951
      ],
      [
        "SELECT T1.professional_id , T1.role_code , T1.email_address FROM Professionals AS T1 EXCEPT SELECT T1.professional_id , T1.role_code , T1.email_address FROM Dogs AS T2 JOIN Professionals AS T1 JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id AND T3.professional_id = T1.professional_id WHERE T2.weight = value",
        -9.528432846069336
      ],
      [
        "SELECT T1.professional_id , T1.role_code , T1.email_address FROM Professionals AS T1 EXCEPT SELECT T2.owner_id , T1.role_code , T1.email_address FROM Dogs AS T2 JOIN Professionals AS T1 JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id AND T3.professional_id = T1.professional_id",
        -9.731252670288086
      ],
      [
        "SELECT T1.professional_id , T1.role_code , T1.email_address FROM Professionals AS T1 WHERE T1.professional_id NOT IN ( SELECT T2.dog_id FROM Dogs AS T2 )",
        -10.33417797088623
      ],
      [
        "SELECT T1.professional_id , T1.role_code , T1.email_address FROM Professionals AS T1 WHERE T1.role_code = value EXCEPT SELECT T1.professional_id , T1.role_code , T1.email_address FROM Dogs AS T2 JOIN Professionals AS T1 JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id AND T3.professional_id = T1.professional_id WHERE T2.weight = value",
        -10.37014389038086
      ],
      [
        "SELECT T1.professional_id , T1.role_code , T1.email_address FROM Professionals AS T1 WHERE T1.first_name = value EXCEPT SELECT T1.professional_id , T1.role_code , T1.email_address FROM Dogs AS T2 JOIN Professionals AS T1 JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id AND T3.professional_id = T1.professional_id WHERE T2.dog_id = value",
        -10.436262607574463
      ],
      [
        "SELECT T1.professional_id , T1.role_code , T1.email_address FROM Professionals AS T1 EXCEPT SELECT T1.professional_id , T1.role_code , T2.email_address FROM Owners AS T2 JOIN Dogs AS T3 ON T2.owner_id = T3.owner_id JOIN Professionals AS T1 JOIN Treatments AS T4 ON T3.dog_id = T4.dog_id AND T4.professional_id = T1.professional_id",
        -10.453951835632324
      ],
      [
        "SELECT professional_id , role_code , email_address FROM Professionals EXCEPT SELECT professional_id , role_code , email_address , email_address FROM Professionals",
        -11.073751449584961
      ],
      [
        "SELECT T1.professional_id , T1.role_code , T1.email_address FROM Professionals AS T1 WHERE T1.professional_id NOT IN ( SELECT T2.weight FROM Dogs AS T2 )",
        -11.147969722747803
      ],
      [
        "SELECT professional_id , role_code , email_address FROM Professionals EXCEPT SELECT first_name , role_code , email_address FROM Professionals",
        -11.160160064697266
      ],
      [
        "SELECT professional_id , role_code , email_address FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Professionals )",
        -11.160531997680664
      ],
      [
        "SELECT T1.professional_id , T1.role_code , T1.email_address FROM Professionals AS T1 EXCEPT SELECT T1.professional_id , T1.role_code , T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id WHERE T2.dog_id = value",
        -11.259100914001465
      ]
    ],
    "predicted_parse_with_values": "SELECT professional_id , role_code , email_address FROM Professionals EXCEPT SELECT professional_id , role_code , email_address FROM Professionals",
    "predicted_parse": "SELECT professional_id , role_code , email_address FROM Professionals EXCEPT SELECT professional_id , role_code , email_address FROM Professionals",
    "predicted_parse_explanation": [
      "Step 1: find the professional id , role code , email address in professionals table",
      "Step 2: find the professional id , role code , email address in professionals table",
      "Step 3: show the rows that are in the results of step 1 but not in the results of step 2"
    ],
    "template_feedback": "in step 2 , additionally use the information from the treatments table besides the professionals table .",
    "primary_span": [
      [
        4,
        11
      ]
    ],
    "secondary_span": [
      [
        12,
        16
      ]
    ],
    "edits": [
      "treatments"
    ],
    "edits_original": "< from > add treatments </ from >"
  },
  {
    "db_id": "flight_2",
    "feedback": "i want the table of flights and destination airport.",
    "question": "What are airlines that have flights arriving at airport 'AHD'?",
    "gold_parse": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"",
    "beam": [
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = value",
        -0.0056324005126953125
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value",
        -5.307849407196045
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = value AND T2.AirportName = value",
        -8.237330436706543
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 WHERE T2.FlightNo = value",
        -8.928245544433594
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = value AND T2.Country = value",
        -9.198027729988098
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.CountryAbbrev = value",
        -9.808980941772461
      ],
      [
        "SELECT Airline FROM airlines WHERE Country = value",
        -10.126477241516113
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = value AND T1.Airline = value",
        -10.81570291519165
      ],
      [
        "SELECT Airline FROM airlines WHERE Airline = value",
        -11.514955520629883
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName LIKE value",
        -12.753732681274414
      ],
      [
        "SELECT Airline FROM airlines WHERE Abbreviation = value",
        -13.120084762573242
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName < value",
        -13.12451422214508
      ],
      [
        "SELECT Airline FROM airlines WHERE Airline < value",
        -13.439179301261902
      ],
      [
        "SELECT DISTINCT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = value",
        -13.509428024291992
      ],
      [
        "SELECT DISTINCT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = value",
        -13.675683975219727
      ],
      [
        "SELECT Airline FROM airlines WHERE Airline LIKE value",
        -13.820025444030762
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 WHERE T2.FlightNo < value",
        -13.997389078140259
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.City = value",
        -14.899765968322754
      ],
      [
        "SELECT T2.Airline FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.AirportName = value",
        -15.361105918884277
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 WHERE T2.Airline = value",
        -15.675479888916016
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = \"AHD\"",
    "predicted_parse": "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = value",
    "predicted_parse_explanation": [
      "Step 1: for each row in airlines table , find the corresponding rows in airports table",
      "Step 2: find the airline name of the results of step 1 whose airport name equals AHD"
    ],
    "template_feedback": "in step 1 , use flights table in place of airports table in step 2 , consider the destination airport equals AHD conditions in place of the airport name equals AHD conditions .",
    "primary_span": [
      [
        4,
        6
      ],
      [
        16,
        22
      ]
    ],
    "secondary_span": [
      [
        7,
        11
      ],
      [
        23,
        32
      ]
    ],
    "edits": [
      "flights",
      "airports",
      "destination airport equals \"AHD\"",
      "airport name equals \"AHD\""
    ],
    "edits_original": "< from > add flights </ from > < from > remove airports </ from > < where > add destination airport equals \" AHD \" </ where > < where > remove airport name equals \" AHD \" </ where >"
  },
  {
    "db_id": "car_1",
    "feedback": "Need to change car makers table with model list country to country name",
    "question": "What is the count of the car models produced in the United States?",
    "gold_parse": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'",
    "beam": [
      [
        "SELECT Count ( * ) FROM car_makers WHERE Country = value",
        -0.0033893585205078125
      ],
      [
        "SELECT Count ( DISTINCT T2.Model ) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker WHERE T1.Country = value",
        -5.822124481201172
      ],
      [
        "SELECT Count ( * ) FROM model_list WHERE Model = value",
        -7.948709487915039
      ],
      [
        "SELECT Count ( * ) FROM continents WHERE Continent = value",
        -9.699694633483887
      ],
      [
        "SELECT Count ( T2.Model ) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker WHERE T1.Country = value",
        -12.577058792114258
      ],
      [
        "SELECT T2.Model FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker WHERE T1.Country = value",
        -13.55517864227295
      ],
      [
        "SELECT Count ( DISTINCT T4.Model ) FROM continents AS T1 JOIN countries AS T2 ON T1.ContId = T2.Continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country JOIN model_list AS T4 ON T3.Id = T4.Maker WHERE T1.Continent = value",
        -13.9127197265625
      ],
      [
        "SELECT Count ( * ) FROM continents",
        -14.574226379394531
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM car_makers WHERE Country = value",
        -14.891658782958984
      ],
      [
        "SELECT Count ( * ) FROM countries WHERE CountryName = value",
        -15.181331634521484
      ],
      [
        "SELECT Sum ( T2.Model ) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker WHERE T1.Country = value",
        -15.294007778167725
      ],
      [
        "SELECT Count ( DISTINCT T3.Model ) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model WHERE T1.Country = value",
        -15.470515251159668
      ],
      [
        "SELECT Count ( * ) , T2.Model FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker WHERE T1.Country = value",
        -15.476957321166992
      ],
      [
        "SELECT Avg ( T2.Model ) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker WHERE T1.Country = value",
        -15.87129259109497
      ],
      [
        "SELECT Count ( * ) FROM cars_data WHERE Year = value",
        -15.925263404846191
      ],
      [
        "SELECT Count ( DISTINCT Model ) FROM model_list WHERE Model = value",
        -16.172927856445312
      ],
      [
        "SELECT Count ( * ) FROM model_list AS T1 WHERE T1.Model = ( SELECT T1.Model FROM car_makers AS T2 JOIN model_list AS T1 ON T2.Id = T1.Maker WHERE T2.Country = value )",
        -16.22088384628296
      ],
      [
        "SELECT Count ( * ) FROM model_list WHERE Model LIKE value",
        -16.257481575012207
      ],
      [
        "SELECT Count ( * ) FROM model_list WHERE Maker = value",
        -16.28965663909912
      ],
      [
        "SELECT Count ( Count ( * ) ) FROM car_makers WHERE Country = value",
        -16.344423294067383
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM car_makers WHERE Country = \"usa\"",
    "predicted_parse": "SELECT Count ( * ) FROM car_makers WHERE Country = value",
    "predicted_parse_explanation": [
      "find the number of rows in car makers table whose country equals usa"
    ],
    "template_feedback": "additionally use the information from the countries table and model list table besides the car makers table . consider the country name equals usa conditions in place of the country equals usa conditions .",
    "primary_span": [
      [
        0,
        11
      ],
      [
        18,
        24
      ]
    ],
    "secondary_span": [
      [
        12,
        17
      ],
      [
        25,
        33
      ]
    ],
    "edits": [
      "model list",
      "countries",
      "country name equals \"usa\"",
      "country equals \"usa\""
    ],
    "edits_original": "< from > add model list </ from > < from > add countries </ from > < where > add country name equals \" usa \" </ where > < where > remove country equals \" usa \" </ where >"
  },
  {
    "db_id": "car_1",
    "feedback": "For each id of car makers , find corresponding number of rows in model list , also display full name .",
    "question": "What is the number of car models that are produced by each maker and what is the id and full name of each maker?",
    "gold_parse": "SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id",
    "beam": [
      [
        "SELECT T2.ModelId , T1.FullName , Count ( * ) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id",
        -1.1215195655822754
      ],
      [
        "SELECT Id , FullName , Count ( * ) FROM car_makers GROUP BY Id",
        -1.2936666011810303
      ],
      [
        "SELECT Count ( * ) , FullName , Count ( * ) FROM car_makers GROUP BY Id",
        -2.351243019104004
      ],
      [
        "SELECT T2.ModelId , T1.FullName , Count ( * ) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T2.Maker",
        -2.8459699153900146
      ],
      [
        "SELECT T2.ModelId , T1.FullName , Count ( * ) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T2.ModelId",
        -2.858597755432129
      ],
      [
        "SELECT T1.Id , T1.FullName , Count ( * ) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T2.Maker",
        -3.004483222961426
      ],
      [
        "SELECT T1.Id , T1.FullName , Count ( * ) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T2.ModelId",
        -3.0240890979766846
      ],
      [
        "SELECT T3.MakeId , T1.FullName , Count ( * ) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model GROUP BY T1.Id",
        -4.254643678665161
      ],
      [
        "SELECT Count ( * ) , T1.FullName , Count ( * ) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T2.ModelId",
        -4.273103713989258
      ],
      [
        "SELECT Count ( * ) , T1.FullName , Count ( * ) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T2.Maker",
        -4.427269697189331
      ],
      [
        "SELECT T2.ModelId , T1.FullName , Count ( * ) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker AND T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id GROUP BY T4.Id",
        -4.651842355728149
      ],
      [
        "SELECT T1.Id , T1.FullName , Count ( * ) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id GROUP BY T4.Id",
        -4.82069993019104
      ],
      [
        "SELECT T2.Maker , T1.FullName , Count ( * ) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id",
        -5.392707347869873
      ],
      [
        "SELECT Count ( * ) , T1.FullName , Count ( * ) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id GROUP BY T4.Id",
        -5.760804176330566
      ],
      [
        "SELECT T2.Model , T1.FullName , Count ( * ) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id",
        -5.790304899215698
      ],
      [
        "SELECT T3.MakeId , T1.FullName , Count ( * ) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker AND T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model GROUP BY T2.Maker",
        -5.969273567199707
      ],
      [
        "SELECT T3.MakeId , T1.FullName , Count ( * ) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker AND T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model GROUP BY T2.ModelId",
        -5.986924648284912
      ],
      [
        "SELECT T2.ModelId , T1.FullName , Count ( * ) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker AND T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model GROUP BY T3.MakeId",
        -6.32534122467041
      ],
      [
        "SELECT T1.Id , T1.FullName , Count ( * ) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model GROUP BY T3.MakeId",
        -6.492628574371338
      ],
      [
        "SELECT Maker , FullName , Count ( * ) FROM car_makers GROUP BY Id",
        -6.963478088378906
      ]
    ],
    "predicted_parse_with_values": "SELECT T2.ModelId , T1.FullName , Count ( * ) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id",
    "predicted_parse": "SELECT T2.ModelId , T1.FullName , Count ( * ) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id",
    "predicted_parse_explanation": [
      "Step 1: for each row in car makers table , find the corresponding rows in model list table",
      "Step 2: find each value of id of the results of step 1 along with the number of the corresponding rows to each value"
    ],
    "template_feedback": "in step 2 , find id in place of model id .",
    "primary_span": [
      [
        4,
        5
      ]
    ],
    "secondary_span": [
      [
        6,
        11
      ]
    ],
    "edits": [
      "id",
      "model id"
    ],
    "edits_original": "< select > add id </ select > < select > remove model id </ select >"
  },
  {
    "db_id": "student_transcripts_tracking",
    "feedback": "Instead of second semester name of step 1 , semester description of step 2 use degree summary name .",
    "question": "Find the semester when both Master students and Bachelor students got enrolled in.",
    "gold_parse": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'",
    "beam": [
      [
        "SELECT semester_name FROM Semesters WHERE semester_name = value INTERSECT SELECT semester_name FROM Semesters WHERE semester_description = value",
        -1.1605072021484375
      ],
      [
        "SELECT semester_name FROM Semesters WHERE semester_description = value INTERSECT SELECT semester_name FROM Semesters WHERE semester_description = value",
        -1.1674299240112305
      ],
      [
        "SELECT semester_name FROM Semesters WHERE semester_name = value INTERSECT SELECT semester_name FROM Semesters WHERE semester_name = value",
        -1.7362546920776367
      ],
      [
        "SELECT semester_name FROM Semesters WHERE semester_description = value INTERSECT SELECT semester_name FROM Semesters WHERE semester_name = value",
        -1.74261474609375
      ],
      [
        "SELECT semester_description FROM Semesters WHERE semester_name = value INTERSECT SELECT semester_name FROM Semesters WHERE semester_description = value",
        -5.8495683670043945
      ],
      [
        "SELECT semester_name FROM Semesters WHERE semester_description = value",
        -5.99075984954834
      ],
      [
        "SELECT T2.semester_name FROM Degree_Programs AS T1 JOIN Semesters AS T2 JOIN Student_Enrolment AS T3 ON T1.degree_program_id = T3.degree_program_id AND T3.semester_id = T2.semester_id WHERE T1.degree_summary_name = value INTERSECT SELECT T2.semester_name FROM Semesters AS T2 WHERE T2.semester_description = value",
        -6.311412811279297
      ],
      [
        "SELECT semester_name FROM Semesters WHERE semester_name = value INTERSECT SELECT semester_description FROM Semesters WHERE semester_description = value",
        -6.323058128356934
      ],
      [
        "SELECT semester_name FROM Semesters WHERE semester_description = value INTERSECT SELECT semester_description FROM Semesters WHERE semester_description = value",
        -6.328211307525635
      ],
      [
        "SELECT semester_description FROM Semesters WHERE semester_description = value INTERSECT SELECT semester_name FROM Semesters WHERE semester_description = value",
        -6.3790483474731445
      ],
      [
        "SELECT semester_name FROM Semesters WHERE semester_name = value INTERSECT SELECT semester_description FROM Semesters WHERE semester_name = value",
        -6.407318115234375
      ],
      [
        "SELECT semester_name FROM Semesters WHERE semester_description = value INTERSECT SELECT semester_description FROM Semesters WHERE semester_name = value",
        -6.418124675750732
      ],
      [
        "SELECT semester_description FROM Semesters WHERE semester_name = value INTERSECT SELECT semester_name FROM Semesters WHERE semester_name = value",
        -6.424278259277344
      ],
      [
        "SELECT semester_name FROM Semesters WHERE semester_name = value",
        -6.63843297958374
      ],
      [
        "SELECT T1.semester_name FROM Semesters AS T1 WHERE T1.semester_name = value INTERSECT SELECT T1.semester_name FROM Degree_Programs AS T2 JOIN Semesters AS T1 JOIN Student_Enrolment AS T3 ON T2.degree_program_id = T3.degree_program_id AND T3.semester_id = T1.semester_id WHERE T2.degree_summary_name = value",
        -6.810323715209961
      ],
      [
        "SELECT T1.semester_name FROM Semesters AS T1 WHERE T1.semester_description = value INTERSECT SELECT T1.semester_name FROM Degree_Programs AS T2 JOIN Semesters AS T1 JOIN Student_Enrolment AS T3 ON T2.degree_program_id = T3.degree_program_id AND T3.semester_id = T1.semester_id WHERE T2.degree_summary_name = value",
        -6.819819450378418
      ],
      [
        "SELECT semester_description FROM Semesters WHERE semester_description = value",
        -10.948647499084473
      ],
      [
        "SELECT semester_description FROM Semesters WHERE semester_name = value",
        -11.11071491241455
      ],
      [
        "SELECT T2.semester_name FROM Degree_Programs AS T1 JOIN Semesters AS T2 JOIN Student_Enrolment AS T3 ON T1.degree_program_id = T3.degree_program_id AND T3.semester_id = T2.semester_id WHERE T1.degree_summary_name = value",
        -11.154610633850098
      ],
      [
        "SELECT semester_name FROM Semesters WHERE semester_name LIKE value",
        -11.336321830749512
      ]
    ],
    "predicted_parse_with_values": "SELECT semester_name FROM Semesters WHERE semester_name = \"Master\" INTERSECT SELECT semester_name FROM Semesters WHERE semester_description = \"Bachelor\"",
    "predicted_parse": "SELECT semester_name FROM Semesters WHERE semester_name = value INTERSECT SELECT semester_name FROM Semesters WHERE semester_description = value",
    "predicted_parse_explanation": [
      "Step 1: find the semester name in semesters table whose semester name equals Master",
      "Step 2: find the semester name in semesters table whose semester description equals Bachelor",
      "Step 3: show the rows that are in both the results of step 1 and step 2"
    ],
    "template_feedback": "in step 1 , use degree programs table and student enrolment table in place of semesters table . consider the degree summary name equals Master conditions in place of the semester name equals Master conditions . find student enrolment 's semester id in place of semester name . make sure no repetition in the results . in step 2 , use degree programs table and student enrolment table in place of semesters table . consider the degree summary name equals Bachelor conditions in place of the semester description equals Bachelor conditions . find student enrolment 's semester id in place of semester name . make sure no repetition in the results .",
    "primary_span": [
      [
        4,
        11
      ],
      [
        18,
        25
      ],
      [
        36,
        41
      ],
      [
        48,
        55
      ],
      [
        60,
        67
      ],
      [
        74,
        81
      ],
      [
        92,
        97
      ],
      [
        104,
        111
      ]
    ],
    "secondary_span": [
      [
        12,
        17
      ],
      [
        26,
        35
      ],
      [
        42,
        47
      ],
      [
        68,
        73
      ],
      [
        82,
        91
      ],
      [
        98,
        103
      ]
    ],
    "edits": [
      "distinct",
      "semester id",
      "semester name",
      "degree programs",
      "student enrolment",
      "semesters",
      "degree summary name equals \"Master\"",
      "semester name equals \"Master\"",
      "distinct",
      "semester id",
      "semester name",
      "degree programs",
      "student enrolment",
      "semesters",
      "degree summary name equals \"Bachelor\"",
      "semester description equals \"Bachelor\""
    ],
    "edits_original": "< select > add distinct </ select > < select > add semester id </ select > < select > remove semester name </ select > < from > add degree programs </ from > < from > add student enrolment </ from > < from > remove semesters </ from > < where > add degree summary name equals \" Master \" </ where > < where > remove semester name equals \" Master \" </ where > < select > add distinct </ select > < select > add semester id </ select > < select > remove semester name </ select > < from > add degree programs </ from > < from > add student enrolment </ from > < from > remove semesters </ from > < where > add degree summary name equals \" Bachelor \" </ where > < where > remove semester description equals \" Bachelor \" </ where >"
  },
  {
    "db_id": "wta_1",
    "feedback": "You need to search for the winner name which is equivalent to Australian Open along with highest value of winner rank points.",
    "question": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.",
    "gold_parse": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
    "beam": [
      [
        "SELECT winner_name , loser_rank FROM matches ORDER BY winner_rank_points Desc LIMIT value",
        -0.49358463287353516
      ],
      [
        "SELECT winner_name , loser_rank FROM matches ORDER BY winner_rank Desc LIMIT value",
        -1.652181625366211
      ],
      [
        "SELECT tourney_name , loser_rank FROM matches ORDER BY winner_rank_points Desc LIMIT value",
        -2.99082088470459
      ],
      [
        "SELECT winner_name , loser_rank FROM matches ORDER BY winner_rank_points Asc LIMIT value",
        -3.6693220138549805
      ],
      [
        "SELECT T2.winner_name , T2.loser_rank FROM players AS T1 JOIN matches AS T2 ON T2.loser_id = T1.player_id JOIN rankings AS T3 ON T1.player_id = T3.player_id ORDER BY T3.ranking_points Desc LIMIT value",
        -3.7108678817749023
      ],
      [
        "SELECT tourney_name , loser_rank FROM matches ORDER BY winner_rank Desc LIMIT value",
        -4.153221130371094
      ],
      [
        "SELECT winner_name , loser_rank FROM matches ORDER BY winner_rank Asc LIMIT value",
        -4.234376907348633
      ],
      [
        "SELECT winner_name , loser_rank FROM matches WHERE loser_ioc = value ORDER BY winner_rank_points Asc LIMIT value",
        -4.334235191345215
      ],
      [
        "SELECT winner_name , loser_rank FROM matches WHERE loser_ioc = value ORDER BY winner_rank Asc LIMIT value",
        -4.53275203704834
      ],
      [
        "SELECT winner_name , winner_rank FROM matches ORDER BY winner_rank_points Desc LIMIT value",
        -5.01605224609375
      ],
      [
        "SELECT winner_name , loser_rank FROM matches ORDER BY loser_rank_points Desc LIMIT value",
        -5.434361457824707
      ],
      [
        "SELECT T2.winner_name , T2.loser_rank FROM players AS T1 JOIN matches AS T2 ON T2.loser_id = T1.player_id JOIN rankings AS T3 ON T1.player_id = T3.player_id ORDER BY T3.ranking_points Asc LIMIT value",
        -6.018044471740723
      ],
      [
        "SELECT winner_name , loser_rank_points FROM matches ORDER BY winner_rank_points Desc LIMIT value",
        -6.073757171630859
      ],
      [
        "SELECT loser_name , loser_rank FROM matches ORDER BY winner_rank_points Desc LIMIT value",
        -6.1229963302612305
      ],
      [
        "SELECT tourney_name , loser_rank FROM matches ORDER BY winner_rank_points Asc LIMIT value",
        -6.189373016357422
      ],
      [
        "SELECT winner_name FROM matches ORDER BY winner_rank_points Desc LIMIT value",
        -7.234726905822754
      ],
      [
        "SELECT winner_name FROM matches ORDER BY winner_rank_points Asc LIMIT value",
        -7.822827339172363
      ],
      [
        "SELECT tourney_name FROM matches ORDER BY winner_rank_points Desc LIMIT value",
        -8.21163272857666
      ],
      [
        "SELECT winner_name FROM matches ORDER BY winner_rank Asc LIMIT value",
        -8.382928848266602
      ],
      [
        "SELECT winner_name FROM matches ORDER BY winner_rank Desc LIMIT value",
        -8.415979385375977
      ]
    ],
    "predicted_parse_with_values": "SELECT winner_name , loser_rank FROM matches ORDER BY winner_rank_points Desc LIMIT 1",
    "predicted_parse": "SELECT winner_name , loser_rank FROM matches ORDER BY winner_rank_points Desc LIMIT value",
    "predicted_parse_explanation": [
      "find the winner name and loser rank in matches table with largest value of winner rank points"
    ],
    "template_feedback": "additionally make sure that tourney name equals Australian Open . do not return loser rank .",
    "primary_span": [
      [
        0,
        9
      ],
      [
        10,
        15
      ]
    ],
    "secondary_span": [],
    "edits": [
      "loser rank",
      "tourney name equals \"Australian Open\""
    ],
    "edits_original": "< select > remove loser rank </ select > < where > add tourney name equals \" Australian Open \" </ where >"
  },
  {
    "db_id": "wta_1",
    "feedback": "You need to consider matches table.",
    "question": "Count the number of matches.",
    "gold_parse": "SELECT count(*) FROM matches",
    "beam": [
      [
        "SELECT Count ( * ) FROM players",
        -1.430511474609375e-05
      ],
      [
        "SELECT Sum ( * ) FROM players",
        -12.750096917152405
      ],
      [
        "SELECT Sum ( tourney_id ) FROM matches",
        -13.696229696273804
      ],
      [
        "SELECT Count ( * ) FROM matches WHERE tourney_name = value",
        -13.87127161026001
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM players",
        -14.241270065307617
      ],
      [
        "SELECT Count ( Count ( * ) ) FROM players",
        -14.434544563293457
      ],
      [
        "SELECT Sum ( tourney_name ) FROM matches",
        -14.514157056808472
      ],
      [
        "SELECT Count ( * ) FROM matches WHERE tourney_id = value",
        -14.590603113174438
      ],
      [
        "SELECT Count ( * ) , tourney_name FROM matches",
        -14.862401723861694
      ],
      [
        "SELECT Count ( * ) FROM matches ORDER BY tourney_id Asc",
        -14.955021858215332
      ],
      [
        "SELECT Avg ( * ) FROM players",
        -15.07319450378418
      ],
      [
        "SELECT Count ( * ) , tourney_id FROM matches",
        -15.326892018318176
      ],
      [
        "SELECT Count ( * ) FROM matches ORDER BY tourney_id Desc",
        -15.418828964233398
      ],
      [
        "SELECT Sum ( winner_seed ) FROM matches",
        -16.479793548583984
      ],
      [
        "SELECT Sum ( loser_rank_points ) FROM matches",
        -16.67654037475586
      ],
      [
        "SELECT Avg ( tourney_id ) FROM matches",
        -16.741807222366333
      ],
      [
        "SELECT Count ( * ) FROM players AS T1 UNION SELECT T2.tourney_name FROM matches AS T2",
        -16.783362865447998
      ],
      [
        "SELECT Sum ( winner_rank_points ) FROM matches",
        -16.963438034057617
      ],
      [
        "SELECT Count ( DISTINCT * ) FROM players",
        -17.10496234893799
      ],
      [
        "SELECT Sum ( loser_seed ) FROM matches",
        -17.143146514892578
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM players",
    "predicted_parse": "SELECT Count ( * ) FROM players",
    "predicted_parse_explanation": [
      "find the number of rows in players table"
    ],
    "template_feedback": "use matches table in place of players table .",
    "primary_span": [
      [
        0,
        2
      ]
    ],
    "secondary_span": [
      [
        3,
        8
      ]
    ],
    "edits": [
      "matches",
      "players"
    ],
    "edits_original": "< from > add matches </ from > < from > remove players </ from >"
  },
  {
    "db_id": "dog_kennels",
    "feedback": "You need to search for the rows count in treatment table.",
    "question": "Find the number of professionals who have ever treated dogs.",
    "gold_parse": "SELECT count(DISTINCT professional_id) FROM Treatments",
    "beam": [
      [
        "SELECT Count ( * ) FROM Dogs WHERE weight = value",
        -0.00537109375
      ],
      [
        "SELECT Count ( DISTINCT T2.professional_id ) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.weight = value",
        -5.502472877502441
      ],
      [
        "SELECT Count ( * ) FROM Treatments WHERE dog_id = value",
        -6.89218282699585
      ],
      [
        "SELECT Count ( * ) FROM Dogs WHERE gender = value",
        -9.619170188903809
      ],
      [
        "SELECT Count ( * ) FROM Treatments WHERE treatment_type_code = value",
        -9.6453218460083
      ],
      [
        "SELECT Count ( * ) FROM Dogs WHERE dog_id = value",
        -9.752126693725586
      ],
      [
        "SELECT Count ( * ) FROM Professionals WHERE professional_id = value",
        -10.809054374694824
      ],
      [
        "SELECT Count ( DISTINCT T1.owner_id ) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T2.weight = value",
        -12.266294479370117
      ],
      [
        "SELECT Count ( * ) FROM Treatments WHERE treatment_id = value",
        -12.419628143310547
      ],
      [
        "SELECT Count ( DISTINCT professional_id ) FROM Treatments WHERE dog_id = value",
        -12.533936500549316
      ],
      [
        "SELECT Count ( * ) FROM Professionals AS T1 WHERE T1.professional_id IN ( SELECT T3.professional_id FROM Dogs AS T2 JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id WHERE T2.weight = value )",
        -12.580114364624023
      ],
      [
        "SELECT Count ( * ) FROM Professionals WHERE state = value",
        -12.63843822479248
      ],
      [
        "SELECT Count ( * ) FROM Owners WHERE state = value",
        -12.662805557250977
      ],
      [
        "SELECT Count ( * ) FROM Owners WHERE first_name = value",
        -12.700794219970703
      ],
      [
        "SELECT Count ( * ) FROM Professionals WHERE first_name = value",
        -12.714191436767578
      ],
      [
        "SELECT Count ( * ) FROM Professionals WHERE role_code = value",
        -13.050797462463379
      ],
      [
        "SELECT Count ( DISTINCT owner_id ) FROM Dogs WHERE weight = value",
        -13.283806800842285
      ],
      [
        "SELECT Count ( T2.professional_id ) FROM Dogs AS T1 JOIN Professionals AS T2 JOIN Treatments AS T3 ON T1.dog_id = T3.dog_id AND T3.professional_id = T2.professional_id WHERE T1.weight = value",
        -13.379496097564697
      ],
      [
        "SELECT Count ( * ) FROM Breeds",
        -15.050179481506348
      ],
      [
        "SELECT Count ( DISTINCT professional_id ) FROM Treatments",
        -15.54338264465332
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM Dogs WHERE weight = 7.57",
    "predicted_parse": "SELECT Count ( * ) FROM Dogs WHERE weight = value",
    "predicted_parse_explanation": [
      "find the number of rows in dogs table whose weight equals 7.57"
    ],
    "template_feedback": "use treatments table in place of dogs table . remove the weight equals 7.57 conditions . find number of different professional id in place of number of rows .",
    "primary_span": [
      [
        0,
        2
      ],
      [
        9,
        15
      ],
      [
        16,
        21
      ]
    ],
    "secondary_span": [
      [
        3,
        8
      ],
      [
        22,
        28
      ]
    ],
    "edits": [
      "number of distinct professional id",
      "number of rows",
      "treatments",
      "dogs",
      "weight equals 7.57"
    ],
    "edits_original": "< select > add number of distinct professional id </ select > < select > remove number of rows </ select > < from > add treatments </ from > < from > remove dogs </ from > < where > remove weight equals 7.57 </ where >"
  },
  {
    "db_id": "world_1",
    "feedback": "i want the name of country table having english and french language and t is official. ",
    "question": "Give the names of countries with English and French as official languages.",
    "gold_parse": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\"",
    "beam": [
      [
        "SELECT Continent FROM country WHERE Code2 = value INTERSECT SELECT Continent FROM country WHERE Code2 = value",
        -0.13996601104736328
      ],
      [
        "SELECT Continent FROM country WHERE LocalName = value INTERSECT SELECT Continent FROM country WHERE Code2 = value",
        -2.2608394622802734
      ],
      [
        "SELECT Continent FROM country WHERE Code2 = value INTERSECT SELECT Continent FROM country WHERE LocalName = value",
        -4.052709579467773
      ],
      [
        "SELECT T1.Continent FROM country AS T1 WHERE T1.Code2 = value INTERSECT SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value",
        -5.763288497924805
      ],
      [
        "SELECT Continent FROM country WHERE LocalName = value INTERSECT SELECT Continent FROM country WHERE LocalName = value",
        -6.192272186279297
      ],
      [
        "SELECT Name FROM country WHERE Code2 = value INTERSECT SELECT Continent FROM country WHERE Code2 = value",
        -6.603294372558594
      ],
      [
        "SELECT Continent FROM country WHERE Code2 = value INTERSECT SELECT Name FROM country WHERE Code2 = value",
        -7.486716270446777
      ],
      [
        "SELECT Name FROM country WHERE LocalName = value INTERSECT SELECT Continent FROM country WHERE Code2 = value",
        -7.875702857971191
      ],
      [
        "SELECT T1.Continent FROM country AS T1 WHERE T1.LocalName = value INTERSECT SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value",
        -8.064620018005371
      ],
      [
        "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value INTERSECT SELECT T1.Continent FROM country AS T1 WHERE T1.Code2 = value",
        -8.227853775024414
      ],
      [
        "SELECT Continent FROM country WHERE Name = value INTERSECT SELECT Continent FROM country WHERE Code2 = value",
        -8.437955856323242
      ],
      [
        "SELECT Continent FROM country WHERE Code = value INTERSECT SELECT Continent FROM country WHERE Code2 = value",
        -8.768574714660645
      ],
      [
        "SELECT Continent FROM country WHERE Code2 = value INTERSECT SELECT Continent FROM country WHERE Code = value",
        -8.942476272583008
      ],
      [
        "SELECT Continent FROM country WHERE Code2 = value INTERSECT SELECT LocalName FROM country WHERE Code2 = value",
        -9.6952486038208
      ],
      [
        "SELECT Continent FROM country WHERE Code2 = value INTERSECT SELECT Continent FROM country WHERE Name = value",
        -9.744712829589844
      ],
      [
        "SELECT Continent FROM country WHERE LocalName = value INTERSECT SELECT Name FROM country WHERE Code2 = value",
        -10.045429229736328
      ],
      [
        "SELECT Continent FROM country WHERE Continent = value INTERSECT SELECT Continent FROM country WHERE Code2 = value",
        -10.195155143737793
      ],
      [
        "SELECT Continent FROM country WHERE LocalName = value AND Code2 = value",
        -11.644816398620605
      ],
      [
        "SELECT Continent FROM country WHERE Code2 = value AND Code2 = value",
        -12.137452125549316
      ],
      [
        "SELECT Continent FROM country WHERE LocalName = value AND LocalName = value",
        -13.90047836303711
      ]
    ],
    "predicted_parse_with_values": "SELECT Continent FROM country WHERE Code2 = \"T\" INTERSECT SELECT Continent FROM country WHERE Code2 = \"French\"",
    "predicted_parse": "SELECT Continent FROM country WHERE Code2 = value INTERSECT SELECT Continent FROM country WHERE Code2 = value",
    "predicted_parse_explanation": [
      "Step 1: find the continent in country table whose code2 equals T",
      "Step 2: find the continent in country table whose code2 equals French",
      "Step 3: show the rows that are in both the results of step 1 and step 2"
    ],
    "template_feedback": "in step 1 , additionally use the information from the countrylanguage table besides the country table . consider the language equals English and is official equals T conditions in place of the code2 equals T conditions . find name in place of continent . in step 2 , additionally use the information from the countrylanguage table besides the country table . consider the language equals French and is official equals T conditions in place of the code2 equals French conditions . find name in place of continent .",
    "primary_span": [
      [
        4,
        11
      ],
      [
        17,
        27
      ],
      [
        37,
        38
      ],
      [
        48,
        55
      ],
      [
        61,
        71
      ],
      [
        81,
        82
      ]
    ],
    "secondary_span": [
      [
        12,
        16
      ],
      [
        28,
        36
      ],
      [
        39,
        43
      ],
      [
        56,
        60
      ],
      [
        72,
        80
      ],
      [
        83,
        87
      ]
    ],
    "edits": [
      "name",
      "continent",
      "countrylanguage",
      "language equals \"English\"",
      "is official equals \"T\"",
      "code2 equals \"T\"",
      "name",
      "continent",
      "countrylanguage",
      "language equals \"French\"",
      "is official equals \"T\"",
      "code2 equals \"French\""
    ],
    "edits_original": "< select > add name </ select > < select > remove continent </ select > < from > add countrylanguage </ from > < where > add language equals \" English \" </ where > < where > add is official equals \" T \" </ where > < where > remove code2 equals \" T \" </ where > < select > add name </ select > < select > remove continent </ select > < from > add countrylanguage </ from > < where > add language equals \" French \" </ where > < where > add is official equals \" T \" </ where > < where > remove code2 equals \" French \" </ where >"
  },
  {
    "db_id": "museum_visit",
    "feedback": "Use level of membership in step 3 in place of num of staff.",
    "question": "What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?",
    "gold_parse": "SELECT t2.visitor_id ,  t1.name ,  t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1",
    "beam": [
      [
        "SELECT T3.visitor_ID , T2.Name , T1.Num_of_Staff FROM museum AS T1 JOIN visitor AS T2 JOIN visit AS T3 ON T1.Museum_ID = T3.Museum_ID AND T3.visitor_ID = T2.ID AND T1.Museum_ID = T3.Museum_ID GROUP BY T3.Museum_ID ORDER BY Sum ( T3.Total_spent ) Desc LIMIT value",
        -1.1532602310180664
      ],
      [
        "SELECT T3.visitor_ID , T2.Name , T1.Name FROM museum AS T1 JOIN visitor AS T2 JOIN visit AS T3 ON T1.Museum_ID = T3.Museum_ID AND T3.visitor_ID = T2.ID AND T1.Museum_ID = T3.Museum_ID GROUP BY T3.Museum_ID ORDER BY Sum ( T3.Total_spent ) Desc LIMIT value",
        -1.331289291381836
      ],
      [
        "SELECT T2.visitor_ID , T1.Name , T1.Level_of_membership FROM visitor AS T1 JOIN visit AS T2 ON T1.ID = T2.visitor_ID GROUP BY T2.Museum_ID ORDER BY Sum ( T2.Total_spent ) Desc LIMIT value",
        -1.882349967956543
      ],
      [
        "SELECT T2.ID , T2.Name , T1.Name FROM museum AS T1 JOIN visitor AS T2 JOIN visit AS T3 ON T1.Museum_ID = T3.Museum_ID AND T3.visitor_ID = T2.ID AND T1.Museum_ID = T3.Museum_ID GROUP BY T3.Museum_ID ORDER BY Sum ( T3.Total_spent ) Desc LIMIT value",
        -2.4812135696411133
      ],
      [
        "SELECT T2.ID , T2.Name , T1.Num_of_Staff FROM museum AS T1 JOIN visitor AS T2 JOIN visit AS T3 ON T1.Museum_ID = T3.Museum_ID AND T3.visitor_ID = T2.ID AND T1.Museum_ID = T3.Museum_ID GROUP BY T3.Museum_ID ORDER BY Sum ( T3.Total_spent ) Desc LIMIT value",
        -2.7309560775756836
      ],
      [
        "SELECT T2.visitor_ID , T1.Name , T2.Total_spent FROM visitor AS T1 JOIN visit AS T2 ON T1.ID = T2.visitor_ID GROUP BY T2.Museum_ID ORDER BY Sum ( T2.Total_spent ) Desc LIMIT value",
        -2.850311279296875
      ],
      [
        "SELECT T1.ID , T1.Name , T1.Level_of_membership FROM visitor AS T1 JOIN visit AS T2 ON T1.ID = T2.visitor_ID GROUP BY T2.Museum_ID ORDER BY Sum ( T2.Total_spent ) Desc LIMIT value",
        -3.1426029205322266
      ],
      [
        "SELECT T1.ID , T1.Name , T2.Total_spent FROM visitor AS T1 JOIN visit AS T2 ON T1.ID = T2.visitor_ID GROUP BY T2.Museum_ID ORDER BY Sum ( T2.Total_spent ) Desc LIMIT value",
        -4.330716133117676
      ],
      [
        "SELECT T2.visitor_ID , T1.Name , T2.Num_of_Ticket FROM visitor AS T1 JOIN visit AS T2 ON T1.ID = T2.visitor_ID GROUP BY T2.Museum_ID ORDER BY Sum ( T2.Total_spent ) Desc LIMIT value",
        -6.156993865966797
      ],
      [
        "SELECT T2.visitor_ID , T1.Name , T1.Name FROM visitor AS T1 JOIN visit AS T2 ON T1.ID = T2.visitor_ID GROUP BY T2.Museum_ID ORDER BY Sum ( T2.Total_spent ) Desc LIMIT value",
        -7.460331916809082
      ],
      [
        "SELECT T1.ID , T1.Name , T2.Num_of_Ticket FROM visitor AS T1 JOIN visit AS T2 ON T1.ID = T2.visitor_ID GROUP BY T2.Museum_ID ORDER BY Sum ( T2.Total_spent ) Desc LIMIT value",
        -7.642153739929199
      ],
      [
        "SELECT T2.visitor_ID , T1.Name , T2.Total_spent FROM museum AS T1 JOIN visit AS T2 ON T1.Museum_ID = T2.Museum_ID GROUP BY T2.Museum_ID ORDER BY Sum ( T2.Total_spent ) Desc LIMIT value",
        -8.172268867492676
      ],
      [
        "SELECT T1.ID , T1.Name , T1.Name FROM visitor AS T1 JOIN visit AS T2 ON T1.ID = T2.visitor_ID GROUP BY T2.Museum_ID ORDER BY Sum ( T2.Total_spent ) Desc LIMIT value",
        -8.332469463348389
      ],
      [
        "SELECT T2.visitor_ID , T1.Name , Sum ( T2.Total_spent ) FROM visitor AS T1 JOIN visit AS T2 ON T1.ID = T2.visitor_ID GROUP BY T2.Museum_ID ORDER BY Sum ( T2.Total_spent ) Desc LIMIT value",
        -8.64273452758789
      ],
      [
        "SELECT T3.visitor_ID , T2.Name , T1.Num_of_Staff FROM museum AS T1 JOIN visitor AS T2 JOIN visit AS T3 ON T1.Museum_ID = T3.Museum_ID AND T3.visitor_ID = T2.ID AND T1.Museum_ID = T3.Museum_ID GROUP BY T3.Museum_ID ORDER BY Count ( * ) Desc LIMIT value",
        -8.693660736083984
      ],
      [
        "SELECT T2.visitor_ID , T1.Name , T1.Num_of_Staff FROM museum AS T1 JOIN visit AS T2 ON T1.Museum_ID = T2.Museum_ID GROUP BY T2.Museum_ID ORDER BY Sum ( T2.Total_spent ) Desc LIMIT value",
        -9.141318321228027
      ],
      [
        "SELECT T3.visitor_ID , T2.Name , T1.Name FROM museum AS T1 JOIN visitor AS T2 JOIN visit AS T3 ON T1.Museum_ID = T3.Museum_ID AND T3.visitor_ID = T2.ID AND T1.Museum_ID = T3.Museum_ID GROUP BY T3.Museum_ID ORDER BY Count ( * ) Desc LIMIT value",
        -9.300159454345703
      ],
      [
        "SELECT T2.visitor_ID , T1.Name , T1.Level_of_membership FROM visitor AS T1 JOIN visit AS T2 ON T1.ID = T2.visitor_ID GROUP BY T2.Museum_ID ORDER BY Count ( * ) Desc LIMIT value",
        -9.448992729187012
      ],
      [
        "SELECT T2.visitor_ID , T1.Name , T2.Museum_ID FROM visitor AS T1 JOIN visit AS T2 ON T1.ID = T2.visitor_ID GROUP BY T2.Museum_ID ORDER BY Sum ( T2.Total_spent ) Desc LIMIT value",
        -9.709918975830078
      ],
      [
        "SELECT T2.ID , T1.Name , T3.Total_spent FROM museum AS T1 JOIN visitor AS T2 JOIN visit AS T3 ON T1.Museum_ID = T3.Museum_ID AND T3.visitor_ID = T2.ID AND T1.Museum_ID = T3.Museum_ID GROUP BY T3.Museum_ID ORDER BY Sum ( T3.Total_spent ) Desc LIMIT value",
        -9.818428039550781
      ]
    ],
    "predicted_parse_with_values": "SELECT T3.visitor_ID , T2.Name , T1.Num_of_Staff FROM museum AS T1 JOIN visitor AS T2 JOIN visit AS T3 ON T1.Museum_ID = T3.Museum_ID AND T3.visitor_ID = T2.ID AND T1.Museum_ID = T3.Museum_ID GROUP BY T3.Museum_ID ORDER BY Sum ( T3.Total_spent ) Desc LIMIT 1",
    "predicted_parse": "SELECT T3.visitor_ID , T2.Name , T1.Num_of_Staff FROM museum AS T1 JOIN visitor AS T2 JOIN visit AS T3 ON T1.Museum_ID = T3.Museum_ID AND T3.visitor_ID = T2.ID AND T1.Museum_ID = T3.Museum_ID GROUP BY T3.Museum_ID ORDER BY Sum ( T3.Total_spent ) Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: for each row in museum table , find the corresponding rows in customer table and in visit table",
      "Step 2: find the summation of total spent of each value of visit 's museum id of the results of step 1",
      "Step 3: find the customer id , customer 's name , num of staff of the results of step 1 with largest value in the results of step 2"
    ],
    "template_feedback": "in step 1 , do not use the museum table . in step 2 , find for each value of customer id in place of visit 's museum id . in step 3 , find level of membership in place of num of staff .",
    "primary_span": [
      [
        4,
        10
      ],
      [
        15,
        21
      ],
      [
        34,
        37
      ]
    ],
    "secondary_span": [
      [
        4,
        10
      ],
      [
        22,
        29
      ],
      [
        38,
        44
      ]
    ],
    "edits": [
      "level of membership",
      "num of staff",
      "museum",
      "customer id",
      "museum id"
    ],
    "edits_original": "< select > add level of membership </ select > < select > remove num of staff </ select > < from > remove museum </ from > < groupBy > add customer id </ groupBy > < groupBy > remove museum id </ groupBy >"
  },
  {
    "db_id": "flight_2",
    "feedback": "swap airports with flights in step 1 and use airline and destination airport.",
    "question": "How many 'United Airlines' flights go to Airport 'ASY'?",
    "gold_parse": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"",
    "beam": [
      [
        "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value AND T1.Airline = value",
        -0.027840614318847656
      ],
      [
        "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.CountryAbbrev = value AND T1.Airline = value",
        -3.670750617980957
      ],
      [
        "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value AND T1.Abbreviation = value",
        -6.874447822570801
      ],
      [
        "SELECT Count ( * ) FROM airlines WHERE Country = value AND Airline = value",
        -7.052338600158691
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE Country = value AND AirportName = value",
        -9.9996337890625
      ],
      [
        "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.CountryAbbrev = value AND T1.Abbreviation = value",
        -10.291191101074219
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE Country = value AND CountryAbbrev = value",
        -12.181641578674316
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE Country = value",
        -12.244850158691406
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE CountryAbbrev = value AND AirportName = value",
        -13.382431983947754
      ],
      [
        "SELECT Count ( Count ( * ) ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value AND T1.Airline = value",
        -13.733711242675781
      ],
      [
        "SELECT Count ( * ) FROM airlines WHERE Country = value AND Abbreviation = value",
        -13.766593933105469
      ],
      [
        "SELECT Count ( * ) , T2.Country FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value AND T1.Airline = value",
        -13.768961906433105
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value AND T1.Airline = value",
        -14.406815528869629
      ],
      [
        "SELECT Count ( * ) , T2.CountryAbbrev FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value AND T1.Airline = value",
        -14.80099105834961
      ],
      [
        "SELECT Avg ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value AND T1.Airline = value",
        -14.987470149993896
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE CountryAbbrev = value AND CountryAbbrev = value",
        -15.177350044250488
      ],
      [
        "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country IN ( SELECT * FROM airports AS T2 WHERE T2.Country = value ) AND T1.Airline = value",
        -15.511722087860107
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE CountryAbbrev = value",
        -15.689804077148438
      ],
      [
        "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.CountryAbbrev IN ( SELECT * FROM airports AS T2 WHERE T2.Country = value ) AND T1.Airline = value",
        -15.765821933746338
      ],
      [
        "SELECT Count ( * ) FROM airlines",
        -18.97757911682129
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = \"United Airlines\" AND T1.Airline = \"ASY\"",
    "predicted_parse": "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value AND T1.Airline = value",
    "predicted_parse_explanation": [
      "Step 1: for each row in airlines table , find the corresponding rows in airports table",
      "Step 2: find the number of rows of the results of step 1 whose airports 's country equals United Airlines and airline name equals ASY"
    ],
    "template_feedback": "in step 1 , use flights table in place of airports table in step 2 , consider the destination airport equals ASY and airlines 's airline name equals United Airlines conditions in place of the airports 's country equals United Airlines and airlines 's airline name equals ASY conditions .",
    "primary_span": [
      [
        4,
        6
      ],
      [
        16,
        30
      ]
    ],
    "secondary_span": [
      [
        7,
        11
      ],
      [
        31,
        49
      ]
    ],
    "edits": [
      "flights",
      "airports",
      "airline name equals \"United Airlines\"",
      "destination airport equals \"ASY\"",
      "country equals \"United Airlines\"",
      "airline name equals \"ASY\""
    ],
    "edits_original": "< from > add flights </ from > < from > remove airports </ from > < where > add airline name equals \" United Airlines \" </ where > < where > add destination airport equals \" ASY \" </ where > < where > remove country equals \" United Airlines \" </ where > < where > remove airline name equals \" ASY \" </ where >"
  },
  {
    "db_id": "network_1",
    "feedback": "Count the number of student id present in friend table having Highschooler name as Kyle.",
    "question": "Count the number of friends Kyle has.",
    "gold_parse": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
    "beam": [
      [
        "SELECT Count ( * ) FROM Highschooler",
        -0.4513397216796875
      ],
      [
        "SELECT Count ( * ) FROM Friend WHERE student_id = value",
        -1.9600245952606201
      ],
      [
        "SELECT Count ( * ) FROM Highschooler WHERE name = value",
        -1.9728960990905762
      ],
      [
        "SELECT Count ( * ) FROM Friend WHERE friend_id = value",
        -3.2903568744659424
      ],
      [
        "SELECT Count ( * ) FROM Likes WHERE liked_id = value",
        -3.434490203857422
      ],
      [
        "SELECT Count ( * ) FROM Highschooler WHERE grade = value",
        -4.500275135040283
      ],
      [
        "SELECT Count ( * ) FROM Likes WHERE student_id = value",
        -6.193698883056641
      ],
      [
        "SELECT Count ( DISTINCT friend_id ) FROM Friend",
        -8.001491069793701
      ],
      [
        "SELECT Count ( DISTINCT liked_id ) FROM Likes",
        -8.662900924682617
      ],
      [
        "SELECT Count ( DISTINCT T2.friend_id ) FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id WHERE T1.name = value",
        -10.332438945770264
      ],
      [
        "SELECT Count ( * ) FROM Highschooler WHERE ID = value",
        -10.380459785461426
      ],
      [
        "SELECT Count ( DISTINCT student_id ) FROM Likes",
        -10.5850248336792
      ],
      [
        "SELECT Count ( DISTINCT student_id ) FROM Friend",
        -10.64282512664795
      ],
      [
        "SELECT Count ( DISTINCT T2.liked_id ) FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id WHERE T1.name = value",
        -11.002968072891235
      ],
      [
        "SELECT Count ( DISTINCT friend_id ) FROM Friend WHERE student_id = value",
        -12.09766674041748
      ],
      [
        "SELECT Count ( DISTINCT T3.liked_id ) FROM Highschooler AS T1 JOIN Friend AS T2 ON T2.student_id = T1.ID JOIN Likes AS T3 ON T1.ID = T3.liked_id WHERE T2.student_id = value",
        -12.37129294872284
      ],
      [
        "SELECT Count ( * ) FROM Highschooler EXCEPT SELECT * FROM Highschooler WHERE name = value",
        -13.69478853046894
      ],
      [
        "SELECT Sum ( * ) FROM Highschooler",
        -14.418223023414612
      ],
      [
        "SELECT Count ( DISTINCT name ) FROM Highschooler",
        -14.628194808959961
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM Highschooler",
        -15.229860305786133
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM Highschooler",
    "predicted_parse": "SELECT Count ( * ) FROM Highschooler",
    "predicted_parse_explanation": [
      "find the number of rows in high schooler table"
    ],
    "template_feedback": "additionally use the information from the friend table besides the high schooler table . additionally make sure that name equals Kyle .",
    "primary_span": [
      [
        0,
        7
      ],
      [
        14,
        21
      ]
    ],
    "secondary_span": [
      [
        8,
        13
      ]
    ],
    "edits": [
      "friend",
      "name equals \"Kyle\""
    ],
    "edits_original": "< from > add friend </ from > < where > add name equals \" Kyle \" </ where >"
  },
  {
    "db_id": "flight_2",
    "feedback": "airlines's country is wrong , exchange it with flights's source airport and airports's country with flights's source airport .",
    "question": "Which airlines have departures from CVO but not from APG airports?",
    "gold_parse": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"",
    "beam": [
      [
        "SELECT T1.Airline FROM airlines AS T1 WHERE T1.Country = value EXCEPT SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value",
        -0.21746158599853516
      ],
      [
        "SELECT Airline FROM airlines WHERE Country = value EXCEPT SELECT Airline FROM airlines WHERE Country = value",
        -1.639918327331543
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value EXCEPT SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value",
        -7.592743873596191
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 WHERE T1.Country = value AND T1.Abbreviation ! = value EXCEPT SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value",
        -8.375959396362305
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 WHERE T1.Country = value EXCEPT SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.CountryAbbrev = value",
        -9.05394172668457
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value EXCEPT SELECT T1.Airline FROM airlines AS T1 WHERE T1.Country = value",
        -9.086662292480469
      ],
      [
        "SELECT Airline FROM airlines WHERE Country = value EXCEPT SELECT Airline FROM airlines WHERE Abbreviation = value",
        -9.911491394042969
      ],
      [
        "SELECT Airline FROM airlines WHERE Country = value AND Abbreviation ! = value EXCEPT SELECT Airline FROM airlines WHERE Country = value",
        -10.239858627319336
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 WHERE T1.Abbreviation = ( SELECT T2.Country FROM airports AS T2 WHERE T2.Country = value ) EXCEPT SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value",
        -10.793429136276245
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 WHERE T1.Country = T1.Airline EXCEPT SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value",
        -10.958916664123535
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 WHERE T1.Abbreviation > value EXCEPT SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value",
        -11.02490758895874
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 WHERE T1.Country = value EXCEPT SELECT T1.Abbreviation FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value",
        -11.080076217651367
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 WHERE T1.Abbreviation = ( SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value ) EXCEPT SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value",
        -11.095235347747803
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 WHERE T1.Country = value AND T1.Abbreviation = value EXCEPT SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value",
        -11.112500190734863
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 WHERE T1.Abbreviation = ( SELECT T2.Country FROM airlines AS T1 JOIN airports AS T2 WHERE T1.Country = value ) EXCEPT SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value",
        -11.331303358078003
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 WHERE T1.Abbreviation = ( SELECT T1.Airline FROM airlines AS T1 WHERE T1.Country = value ) EXCEPT SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value",
        -11.450348377227783
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 WHERE T1.Country = ( SELECT T2.Country FROM airports AS T2 WHERE T2.Country = value ) EXCEPT SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value",
        -11.460766792297363
      ],
      [
        "SELECT Airline FROM airlines WHERE Country = value EXCEPT SELECT Airline FROM airlines WHERE Abbreviation = Airline",
        -11.56347131729126
      ],
      [
        "SELECT Airline FROM airlines WHERE Country = value ORDER BY Abbreviation Desc LIMIT value",
        -12.663726806640625
      ],
      [
        "SELECT Airline FROM airlines WHERE Country = value ORDER BY Airline Desc",
        -12.97007417678833
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.Airline FROM airlines AS T1 WHERE T1.Country = \"CVO\" EXCEPT SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = \"APG\"",
    "predicted_parse": "SELECT T1.Airline FROM airlines AS T1 WHERE T1.Country = value EXCEPT SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value",
    "predicted_parse_explanation": [
      "Step 1: find the airline name in airlines table whose airlines 's country equals CVO",
      "Step 2: for each row in airlines table , find the corresponding rows in airports table",
      "Step 3: find the airline name of the results of step 2 whose airports 's country equals APG",
      "Step 4: show the rows that are in the results of step 1 but not in the results of step 3"
    ],
    "template_feedback": "in step 1 , additionally use the information from the flights table besides the airlines table . consider the source airport equals CVO conditions in place of the country equals CVO conditions . in step 2 , use flights table in place of airports table in step 3 , consider the source airport equals APG conditions in place of the airports 's country equals APG conditions .",
    "primary_span": [
      [
        4,
        11
      ],
      [
        17,
        23
      ],
      [
        37,
        39
      ],
      [
        49,
        55
      ]
    ],
    "secondary_span": [
      [
        12,
        16
      ],
      [
        24,
        32
      ],
      [
        40,
        44
      ],
      [
        56,
        66
      ]
    ],
    "edits": [
      "flights",
      "source airport equals \"CVO\"",
      "country equals \"CVO\"",
      "flights",
      "airports",
      "source airport equals \"APG\"",
      "country equals \"APG\""
    ],
    "edits_original": "< from > add flights </ from > < where > add source airport equals \" CVO \" </ where > < where > remove country equals \" CVO \" </ where > < from > add flights </ from > < from > remove airports </ from > < where > add source airport equals \" APG \" </ where > < where > remove country equals \" APG \" </ where >"
  },
  {
    "db_id": "student_transcripts_tracking",
    "feedback": "Search degree summary name whose degree program id is present most number of times in student enrolment table .",
    "question": "Find the kind of program which most number of students are enrolled in?",
    "gold_parse": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1",
    "beam": [
      [
        "SELECT course_name FROM Courses GROUP BY course_name ORDER BY Count ( * ) Desc LIMIT value",
        -0.2838268280029297
      ],
      [
        "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment AS T2 JOIN Student_Enrolment_Courses AS T3 ON T1.course_id = T3.course_id AND T3.student_enrolment_id = T2.student_enrolment_id GROUP BY T2.student_enrolment_id ORDER BY Count ( * ) Desc LIMIT value",
        -1.406613826751709
      ],
      [
        "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T2.student_enrolment_id ORDER BY Count ( * ) Desc LIMIT value",
        -7.316222190856934
      ],
      [
        "SELECT * FROM Courses GROUP BY course_name ORDER BY Count ( * ) Desc LIMIT value",
        -8.39173698425293
      ],
      [
        "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment AS T2 JOIN Student_Enrolment_Courses AS T3 ON T1.course_id = T3.course_id AND T3.student_enrolment_id = T2.student_enrolment_id GROUP BY T2.student_id ORDER BY Count ( * ) Desc LIMIT value",
        -9.101365566253662
      ],
      [
        "SELECT course_description FROM Courses GROUP BY course_name ORDER BY Count ( * ) Desc LIMIT value",
        -9.106742858886719
      ],
      [
        "SELECT T2.department_name FROM Courses AS T1 JOIN Departments AS T2 JOIN Degree_Programs AS T3 ON T3.department_id = T2.department_id JOIN Student_Enrolment AS T4 ON T4.degree_program_id = T3.degree_program_id JOIN Student_Enrolment_Courses AS T5 ON T1.course_id = T5.course_id AND T5.student_enrolment_id = T4.student_enrolment_id GROUP BY T1.course_name ORDER BY Count ( * ) Desc LIMIT value",
        -9.131824493408203
      ],
      [
        "SELECT T2.other_details FROM Courses AS T1 JOIN Student_Enrolment AS T2 JOIN Student_Enrolment_Courses AS T3 ON T1.course_id = T3.course_id AND T3.student_enrolment_id = T2.student_enrolment_id GROUP BY T1.course_name ORDER BY Count ( * ) Desc LIMIT value",
        -9.740801811218262
      ],
      [
        "SELECT other_details FROM Courses GROUP BY course_name ORDER BY Count ( * ) Desc LIMIT value",
        -10.070783615112305
      ],
      [
        "SELECT T1.course_name FROM Courses AS T1 JOIN Students AS T2 JOIN Student_Enrolment AS T3 ON T3.student_id = T2.student_id JOIN Student_Enrolment_Courses AS T4 ON T1.course_id = T4.course_id AND T4.student_enrolment_id = T3.student_enrolment_id GROUP BY T2.student_id ORDER BY Count ( * ) Desc LIMIT value",
        -10.198835849761963
      ],
      [
        "SELECT T1.course_name FROM Courses AS T1 JOIN Semesters AS T2 JOIN Student_Enrolment AS T3 ON T3.semester_id = T2.semester_id JOIN Student_Enrolment_Courses AS T4 ON T1.course_id = T4.course_id AND T4.student_enrolment_id = T3.student_enrolment_id GROUP BY T2.semester_name ORDER BY Count ( * ) Desc LIMIT value",
        -10.223874568939209
      ],
      [
        "SELECT * FROM Student_Enrolment GROUP BY student_enrolment_id ORDER BY Count ( * ) Desc LIMIT value",
        -10.372659683227539
      ],
      [
        "SELECT T2.degree_summary_name FROM Courses AS T1 JOIN Degree_Programs AS T2 JOIN Student_Enrolment AS T3 ON T3.degree_program_id = T2.degree_program_id JOIN Student_Enrolment_Courses AS T4 ON T1.course_id = T4.course_id AND T4.student_enrolment_id = T3.student_enrolment_id GROUP BY T1.course_name ORDER BY Count ( * ) Desc LIMIT value",
        -10.604825973510742
      ],
      [
        "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id ORDER BY Count ( * ) Desc LIMIT value",
        -10.623274326324463
      ],
      [
        "SELECT T1.department_name FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id JOIN Student_Enrolment AS T3 ON T2.degree_program_id = T3.degree_program_id GROUP BY T3.student_enrolment_id ORDER BY Count ( * ) Desc LIMIT value",
        -10.6681809425354
      ],
      [
        "SELECT T2.section_name FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY Count ( * ) Desc LIMIT value",
        -10.67699909210205
      ],
      [
        "SELECT T2.degree_summary_description FROM Courses AS T1 JOIN Degree_Programs AS T2 JOIN Student_Enrolment AS T3 ON T3.degree_program_id = T2.degree_program_id JOIN Student_Enrolment_Courses AS T4 ON T1.course_id = T4.course_id AND T4.student_enrolment_id = T3.student_enrolment_id GROUP BY T1.course_name ORDER BY Count ( * ) Desc LIMIT value",
        -10.692008018493652
      ],
      [
        "SELECT T2.semester_name FROM Courses AS T1 JOIN Semesters AS T2 JOIN Student_Enrolment AS T3 ON T3.semester_id = T2.semester_id JOIN Student_Enrolment_Courses AS T4 ON T1.course_id = T4.course_id AND T4.student_enrolment_id = T3.student_enrolment_id GROUP BY T1.course_name ORDER BY Count ( * ) Desc LIMIT value",
        -10.868036270141602
      ],
      [
        "SELECT T3.other_details FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id JOIN Transcripts AS T3 JOIN Transcript_Contents AS T4 ON T2.student_course_id = T4.student_course_id AND T4.transcript_id = T3.transcript_id GROUP BY T1.course_name ORDER BY Count ( * ) Desc LIMIT value",
        -10.868302345275879
      ],
      [
        "SELECT T2.first_name FROM Courses AS T1 JOIN Students AS T2 JOIN Student_Enrolment AS T3 ON T3.student_id = T2.student_id JOIN Student_Enrolment_Courses AS T4 ON T1.course_id = T4.course_id AND T4.student_enrolment_id = T3.student_enrolment_id GROUP BY T1.course_name ORDER BY Count ( * ) Desc LIMIT value",
        -10.885932922363281
      ]
    ],
    "predicted_parse_with_values": "SELECT course_name FROM Courses GROUP BY course_name ORDER BY Count ( * ) Desc LIMIT 1",
    "predicted_parse": "SELECT course_name FROM Courses GROUP BY course_name ORDER BY Count ( * ) Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of course name in courses table",
      "Step 2: find the course name in courses table with largest value in the results of step 1"
    ],
    "template_feedback": "in step 1 , use degree programs table and student enrolment table in place of courses table . find for each value of degree summary name in place of course name . in step 2 , find degree summary name in place of course name .",
    "primary_span": [
      [
        4,
        11
      ],
      [
        18,
        25
      ],
      [
        36,
        39
      ]
    ],
    "secondary_span": [
      [
        12,
        17
      ],
      [
        26,
        31
      ],
      [
        40,
        45
      ]
    ],
    "edits": [
      "degree summary name",
      "course name",
      "degree programs",
      "student enrolment",
      "courses",
      "degree summary name",
      "course name"
    ],
    "edits_original": "< select > add degree summary name </ select > < select > remove course name </ select > < from > add degree programs </ from > < from > add student enrolment </ from > < from > remove courses </ from > < groupBy > add degree summary name </ groupBy > < groupBy > remove course name </ groupBy >"
  },
  {
    "db_id": "dog_kennels",
    "feedback": "Use treatments cost of treatment in place of treatment type code .",
    "question": "List the cost of each treatment and the corresponding treatment type description.",
    "gold_parse": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code",
    "beam": [
      [
        "SELECT treatment_type_description , treatment_type_code FROM Treatment_Types",
        -0.00042629241943359375
      ],
      [
        "SELECT treatment_type_description , treatment_type_description FROM Treatment_Types",
        -7.907010078430176
      ],
      [
        "SELECT treatment_type_description , treatment_type_code FROM Treatment_Types GROUP BY treatment_type_description",
        -10.821714401245117
      ],
      [
        "SELECT treatment_type_description , Count ( * ) FROM Treatment_Types",
        -11.71229600906372
      ],
      [
        "SELECT treatment_type_description , Count ( treatment_type_code ) FROM Treatment_Types",
        -12.265134334564209
      ],
      [
        "SELECT T1.treatment_type_description , T2.treatment_type_code FROM Treatment_Types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code",
        -12.381342887878418
      ],
      [
        "SELECT treatment_type_code , treatment_type_code FROM Treatment_Types",
        -12.78044319152832
      ],
      [
        "SELECT treatment_type_description , treatment_type_code FROM Treatment_Types WHERE treatment_type_code = value",
        -12.791462898254395
      ],
      [
        "SELECT treatment_type_description , treatment_type_code , treatment_type_code FROM Treatment_Types",
        -13.053436279296875
      ],
      [
        "SELECT T2.cost_of_treatment , T1.treatment_type_description FROM Treatment_Types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code",
        -13.212309837341309
      ],
      [
        "SELECT treatment_type_description , treatment_type_code FROM Treatment_Types ORDER BY treatment_type_description Asc",
        -13.26369857788086
      ],
      [
        "SELECT T2.treatment_type_code , T1.treatment_type_code FROM Treatment_Types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code",
        -13.296655654907227
      ],
      [
        "SELECT T2.treatment_type_description , T1.size_description FROM Sizes AS T1 JOIN Treatment_Types AS T2 JOIN Dogs AS T3 ON T1.size_code = T3.size_code JOIN Treatments AS T4 ON T3.dog_id = T4.dog_id AND T4.treatment_type_code = T2.treatment_type_code",
        -13.504034996032715
      ],
      [
        "SELECT treatment_type_description FROM Treatment_Types",
        -13.693531036376953
      ],
      [
        "SELECT DISTINCT treatment_type_description , treatment_type_code FROM Treatment_Types",
        -14.461690902709961
      ],
      [
        "SELECT treatment_type_description , treatment_type_code FROM Treatment_Types UNION SELECT treatment_type_code FROM Treatment_Types",
        -14.517420768737793
      ],
      [
        "SELECT treatment_type_description , Count ( treatment_type_description ) FROM Treatment_Types",
        -14.541970252990723
      ],
      [
        "SELECT treatment_type_description , treatment_type_code FROM Treatment_Types INTERSECT SELECT treatment_type_description FROM Treatment_Types",
        -14.938592910766602
      ],
      [
        "SELECT T1.size_description , T2.treatment_type_code FROM Sizes AS T1 JOIN Treatment_Types AS T2 JOIN Dogs AS T3 ON T1.size_code = T3.size_code JOIN Treatments AS T4 ON T3.dog_id = T4.dog_id AND T4.treatment_type_code = T2.treatment_type_code",
        -15.363690376281738
      ],
      [
        "SELECT * , treatment_type_description FROM Treatment_Types",
        -15.587779998779297
      ]
    ],
    "predicted_parse_with_values": "SELECT treatment_type_description , treatment_type_code FROM Treatment_Types",
    "predicted_parse": "SELECT treatment_type_description , treatment_type_code FROM Treatment_Types",
    "predicted_parse_explanation": [
      "find the treatment type description and treatment type code in treatment types table"
    ],
    "template_feedback": "additionally use the information from the treatments table besides the treatment types table . find cost of treatment in place of treatment types 's treatment type code .",
    "primary_span": [
      [
        0,
        7
      ],
      [
        14,
        17
      ]
    ],
    "secondary_span": [
      [
        8,
        13
      ],
      [
        18,
        27
      ]
    ],
    "edits": [
      "cost of treatment",
      "treatment type code",
      "treatments"
    ],
    "edits_original": "< select > add cost of treatment </ select > < select > remove treatment type code </ select > < from > add treatments </ from >"
  },
  {
    "db_id": "flight_2",
    "feedback": "Add flights table in step 1 , replace airports's country and airline with airlines'Airline and destination airport respectively .",
    "question": "Count the number of United Airlines flights arriving in ASY Airport.",
    "gold_parse": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"",
    "beam": [
      [
        "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value AND T1.Airline = value",
        -0.20778465270996094
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE Country = value AND CountryAbbrev = value",
        -2.0996809005737305
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE Country = value",
        -3.1108102798461914
      ],
      [
        "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.CountryAbbrev = value AND T1.Airline = value",
        -4.9654130935668945
      ],
      [
        "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value AND T1.Country = value",
        -5.033575057983398
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE Country = value AND Country = value",
        -5.569018840789795
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE CountryAbbrev = value AND CountryAbbrev = value",
        -6.8470611572265625
      ],
      [
        "SELECT Count ( * ) FROM airlines WHERE Country = value AND Airline = value",
        -7.131414413452148
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE CountryAbbrev = value",
        -7.844361305236816
      ],
      [
        "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value AND T1.Abbreviation = value",
        -7.880075931549072
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE Country = value AND AirportName = value",
        -8.550487518310547
      ],
      [
        "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T1.Country = value AND T2.CountryAbbrev = value",
        -9.008654594421387
      ],
      [
        "SELECT Count ( * ) FROM airlines WHERE Country = value",
        -9.27341079711914
      ],
      [
        "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.CountryAbbrev = value AND T1.Country = value",
        -9.809369087219238
      ],
      [
        "SELECT Count ( * ) FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.Country = value AND T2.Airline = value",
        -9.812949180603027
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE CountryAbbrev = value AND Country = value",
        -10.343778610229492
      ],
      [
        "SELECT Count ( * ) FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.Country = value AND T2.FlightNo = value",
        -11.272315979003906
      ],
      [
        "SELECT Count ( * ) FROM airlines WHERE Airline > value",
        -11.708158493041992
      ],
      [
        "SELECT Count ( * ) FROM airlines WHERE Airline < value",
        -15.769947528839111
      ],
      [
        "SELECT Avg ( * ) FROM airports WHERE Country = value",
        -16.00672483444214
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = \"United Airlines\" AND T1.Airline = \"ASY\"",
    "predicted_parse": "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value AND T1.Airline = value",
    "predicted_parse_explanation": [
      "Step 1: for each row in airlines table , find the corresponding rows in airports table",
      "Step 2: find the number of rows of the results of step 1 whose airports 's country equals United Airlines and airline name equals ASY"
    ],
    "template_feedback": "in step 1 , use flights table in place of airports table in step 2 , consider the destination airport equals ASY and airlines 's airline name equals United Airlines conditions in place of the airports 's country equals United Airlines and airlines 's airline name equals ASY conditions .",
    "primary_span": [
      [
        4,
        6
      ],
      [
        16,
        30
      ]
    ],
    "secondary_span": [
      [
        7,
        11
      ],
      [
        31,
        49
      ]
    ],
    "edits": [
      "flights",
      "airports",
      "airline name equals \"United Airlines\"",
      "destination airport equals \"ASY\"",
      "country equals \"United Airlines\"",
      "airline name equals \"ASY\""
    ],
    "edits_original": "< from > add flights </ from > < from > remove airports </ from > < where > add airline name equals \" United Airlines \" </ where > < where > add destination airport equals \" ASY \" </ where > < where > remove country equals \" United Airlines \" </ where > < where > remove airline name equals \" ASY \" </ where >"
  },
  {
    "db_id": "world_1",
    "feedback": "i want population.",
    "question": "What are the population, name and leader of the country with the largest area?",
    "gold_parse": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",
    "beam": [
      [
        "SELECT LifeExpectancy , Name , LocalName FROM country ORDER BY SurfaceArea Desc LIMIT value",
        -0.3971233367919922
      ],
      [
        "SELECT Population , Name , LocalName FROM country ORDER BY SurfaceArea Desc LIMIT value",
        -1.158914566040039
      ],
      [
        "SELECT LifeExpectancy , LocalName , LocalName FROM country ORDER BY SurfaceArea Desc LIMIT value",
        -4.563441276550293
      ],
      [
        "SELECT LifeExpectancy , LocalName , SurfaceArea FROM country ORDER BY SurfaceArea Desc LIMIT value",
        -6.895321846008301
      ],
      [
        "SELECT LifeExpectancy , Name , LocalName FROM country WHERE SurfaceArea = ( SELECT Max ( SurfaceArea ) FROM country ) ORDER BY SurfaceArea Desc LIMIT value",
        -7.726860046386719
      ],
      [
        "SELECT Population , LocalName , LocalName FROM country ORDER BY SurfaceArea Desc LIMIT value",
        -7.979002952575684
      ],
      [
        "SELECT LifeExpectancy , Name , LocalName FROM country WHERE Region = value ORDER BY SurfaceArea Desc LIMIT value",
        -8.044275283813477
      ],
      [
        "SELECT Population , Name , LocalName FROM country WHERE SurfaceArea = ( SELECT Max ( SurfaceArea ) FROM country ) ORDER BY SurfaceArea Desc LIMIT value",
        -8.522736549377441
      ],
      [
        "SELECT LifeExpectancy , LocalName , Region FROM country ORDER BY SurfaceArea Desc LIMIT value",
        -8.554612159729004
      ],
      [
        "SELECT LifeExpectancy , LocalName , Continent FROM country ORDER BY SurfaceArea Desc LIMIT value",
        -8.632255554199219
      ],
      [
        "SELECT Population , Name , LocalName FROM country WHERE Region = value ORDER BY SurfaceArea Desc LIMIT value",
        -8.784799575805664
      ],
      [
        "SELECT LifeExpectancy , Name , Continent FROM country ORDER BY SurfaceArea Desc LIMIT value",
        -8.986029624938965
      ],
      [
        "SELECT LifeExpectancy , LifeExpectancy , LocalName FROM country ORDER BY SurfaceArea Desc LIMIT value",
        -9.422159194946289
      ],
      [
        "SELECT Population , Name , Continent FROM country ORDER BY SurfaceArea Desc LIMIT value",
        -9.697774887084961
      ],
      [
        "SELECT Population , LifeExpectancy , LocalName FROM country ORDER BY SurfaceArea Desc LIMIT value",
        -9.759611129760742
      ],
      [
        "SELECT LifeExpectancy , Name , Region FROM country ORDER BY SurfaceArea Desc LIMIT value",
        -10.196084022521973
      ],
      [
        "SELECT Population , LocalName , SurfaceArea FROM country ORDER BY SurfaceArea Desc LIMIT value",
        -10.338257789611816
      ],
      [
        "SELECT Name , LocalName , LocalName FROM country ORDER BY SurfaceArea Desc LIMIT value",
        -10.787164688110352
      ],
      [
        "SELECT Population , Name , Region FROM country ORDER BY SurfaceArea Desc LIMIT value",
        -10.8956298828125
      ],
      [
        "SELECT LifeExpectancy , LocalName FROM country ORDER BY SurfaceArea Desc LIMIT value",
        -11.321252822875977
      ]
    ],
    "predicted_parse_with_values": "SELECT LifeExpectancy , Name , LocalName FROM country ORDER BY SurfaceArea Desc LIMIT 1",
    "predicted_parse": "SELECT LifeExpectancy , Name , LocalName FROM country ORDER BY SurfaceArea Desc LIMIT value",
    "predicted_parse_explanation": [
      "find the life expectancy , name , local name in country table with largest value of surface area"
    ],
    "template_feedback": "find head of state and population in place of local name and life expectancy .",
    "primary_span": [
      [
        0,
        5
      ]
    ],
    "secondary_span": [
      [
        6,
        14
      ]
    ],
    "edits": [
      "population",
      "head of state",
      "life expectancy",
      "local name"
    ],
    "edits_original": "< select > add population </ select > < select > add head of state </ select > < select > remove life expectancy </ select > < select > remove local name </ select >"
  },
  {
    "db_id": "wta_1",
    "feedback": "We need to use rankings and ranking in step 1 and 2 respectively.",
    "question": "Find the average ranking for each player and their first name.",
    "gold_parse": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
    "beam": [
      [
        "SELECT Avg ( T2.winner_rank ) , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T1.first_name",
        -0.20597362518310547
      ],
      [
        "SELECT Avg ( T2.winner_rank_points ) , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T1.first_name",
        -2.68294620513916
      ],
      [
        "SELECT Avg ( T2.loser_rank_points ) , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T1.first_name",
        -3.609980583190918
      ],
      [
        "SELECT Avg ( T2.loser_rank ) , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T1.first_name",
        -3.6889772415161133
      ],
      [
        "SELECT Avg ( T2.winner_rank ) , T2.winner_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T1.first_name",
        -4.338933944702148
      ],
      [
        "SELECT Avg ( T2.score ) , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T1.first_name",
        -4.340102195739746
      ],
      [
        "SELECT Avg ( T2.winner_rank ) , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.winner_name",
        -4.437554359436035
      ],
      [
        "SELECT Avg ( T2.winner_rank ) , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.loser_name",
        -5.01036262512207
      ],
      [
        "SELECT Avg ( T2.winner_rank ) , T2.loser_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T1.first_name",
        -5.120253562927246
      ],
      [
        "SELECT Avg ( T2.ranking_points ) , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name",
        -5.790083885192871
      ],
      [
        "SELECT Avg ( T2.winner_rank ) , T2.tourney_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T1.first_name",
        -6.415109634399414
      ],
      [
        "SELECT Avg ( T2.winner_rank_points ) , T2.winner_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T1.first_name",
        -6.519464492797852
      ],
      [
        "SELECT Avg ( T2.ranking ) , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name",
        -6.612643241882324
      ],
      [
        "SELECT Avg ( T2.winner_rank_points ) , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.winner_name",
        -6.889073371887207
      ],
      [
        "SELECT Avg ( T2.winner_rank_points ) , T2.loser_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T1.first_name",
        -7.3004150390625
      ],
      [
        "SELECT Avg ( T2.winner_rank ) , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.tourney_name",
        -7.342477798461914
      ],
      [
        "SELECT Avg ( T2.winner_rank_points ) , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.loser_name",
        -7.475555896759033
      ],
      [
        "SELECT Avg ( T2.loser_rank ) , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.winner_name",
        -7.756518363952637
      ],
      [
        "SELECT Avg ( T2.loser_rank_points ) , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.winner_name",
        -7.900909423828125
      ],
      [
        "SELECT T1.first_name , Avg ( T2.winner_rank_points ) FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T1.first_name",
        -7.926630020141602
      ]
    ],
    "predicted_parse_with_values": "SELECT Avg ( T2.winner_rank ) , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T1.first_name",
    "predicted_parse": "SELECT Avg ( T2.winner_rank ) , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T1.first_name",
    "predicted_parse_explanation": [
      "Step 1: for each row in players table , find the corresponding rows in matches table",
      "Step 2: find each value of first name of the results of step 1 along with the average winner rank of the corresponding rows to each value"
    ],
    "template_feedback": "in step 1 , use rankings table in place of matches table in step 2 , find average ranking in place of average winner rank .",
    "primary_span": [
      [
        4,
        6
      ],
      [
        16,
        18
      ]
    ],
    "secondary_span": [
      [
        7,
        11
      ],
      [
        19,
        25
      ]
    ],
    "edits": [
      "average ranking",
      "average winner rank",
      "rankings",
      "matches"
    ],
    "edits_original": "< select > add average ranking </ select > < select > remove average winner rank </ select > < from > add rankings </ from > < from > remove matches </ from >"
  },
  {
    "db_id": "world_1",
    "feedback": "you have to use language of country and asia in place of name of country and t respectively.also make sure that is official should be t. ",
    "question": "Return the different names of cities that are in Asia and for which Chinese is the official language.",
    "gold_parse": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  \"Asia\"",
    "beam": [
      [
        "SELECT DISTINCT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = value AND T2.Name = value",
        -0.3822212219238281
      ],
      [
        "SELECT DISTINCT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = value INTERSECT SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = value",
        -2.027048110961914
      ],
      [
        "SELECT DISTINCT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = value AND T2.LocalName = value",
        -2.117952346801758
      ],
      [
        "SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = value INTERSECT SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = value",
        -3.248831272125244
      ],
      [
        "SELECT DISTINCT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = value AND T2.Continent = value",
        -4.721166610717773
      ],
      [
        "SELECT DISTINCT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = value AND T2.Code2 = value",
        -4.837771415710449
      ],
      [
        "SELECT DISTINCT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = value INTERSECT SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Code2 = value",
        -5.910665512084961
      ],
      [
        "SELECT DISTINCT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = value AND T2.Name ! = value",
        -6.022639274597168
      ],
      [
        "SELECT DISTINCT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = value AND T2.LocalName ! = value",
        -6.987607002258301
      ],
      [
        "SELECT DISTINCT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = value INTERSECT SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.LocalName = value",
        -6.989814758300781
      ],
      [
        "SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = value INTERSECT SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Code2 = value",
        -7.1277689933776855
      ],
      [
        "SELECT DISTINCT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = value",
        -7.896095275878906
      ],
      [
        "SELECT DISTINCT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code AND T1.CountryCode = T2.Code JOIN countrylanguage AS T3 ON T2.Code = T3.CountryCode WHERE T2.Continent = value AND T3.Language = value",
        -8.443058013916016
      ],
      [
        "SELECT DISTINCT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = value AND T1.CountryCode IN ( SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = value )",
        -8.593348026275635
      ],
      [
        "SELECT DISTINCT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = value AND T2.Code2 ! = value",
        -9.492716789245605
      ],
      [
        "SELECT DISTINCT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = value ORDER BY T1.Name Asc",
        -9.537871360778809
      ],
      [
        "SELECT DISTINCT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = value AND T2.GovernmentForm = value",
        -9.780111312866211
      ],
      [
        "SELECT DISTINCT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = value AND T2.Name < value",
        -10.427637100219727
      ],
      [
        "SELECT DISTINCT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.LocalName = value AND T2.Name = value",
        -10.485838890075684
      ],
      [
        "SELECT DISTINCT Name FROM city",
        -14.423418998718262
      ]
    ],
    "predicted_parse_with_values": "SELECT DISTINCT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = \"T\" AND T2.Name = \"Chinese\"",
    "predicted_parse": "SELECT DISTINCT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = value AND T2.Name = value",
    "predicted_parse_explanation": [
      "Step 1: for each row in city table , find the corresponding rows in country table",
      "Step 2: find without repetition city 's name of the results of step 1 whose continent equals T and country 's name equals Chinese"
    ],
    "template_feedback": "in step 1 , additionally use the information from the countrylanguage table . in step 2 , consider the continent equals Asia and language equals Chinese and is official equals T conditions in place of the continent equals T and country 's name equals Chinese conditions .",
    "primary_span": [
      [
        4,
        12
      ],
      [
        17,
        31
      ]
    ],
    "secondary_span": [
      [
        32,
        46
      ]
    ],
    "edits": [
      "countrylanguage",
      "is official equals \"T\"",
      "language equals \"Chinese\"",
      "continent equals \"Asia\"",
      "continent equals \"T\"",
      "name equals \"Chinese\""
    ],
    "edits_original": "< from > add countrylanguage </ from > < where > add is official equals \" T \" </ where > < where > add language equals \" Chinese \" </ where > < where > add continent equals \" Asia \" </ where > < where > remove continent equals \" T \" </ where > < where > remove name equals \" Chinese \" </ where >"
  },
  {
    "db_id": "world_1",
    "feedback": "Swap local name with region and Verify corresponding city's name name equals Kabul .",
    "question": "What region is Kabul in?",
    "gold_parse": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"",
    "beam": [
      [
        "SELECT LocalName FROM country",
        -0.34911632537841797
      ],
      [
        "SELECT SurfaceArea FROM country",
        -1.2255659103393555
      ],
      [
        "SELECT Region FROM country",
        -6.934637069702148
      ],
      [
        "SELECT LocalName , SurfaceArea FROM country",
        -9.20621109008789
      ],
      [
        "SELECT LocalName FROM country WHERE Name = value",
        -11.566310405731201
      ],
      [
        "SELECT SurfaceArea FROM country WHERE Name = value",
        -13.030464172363281
      ],
      [
        "SELECT Max ( SurfaceArea ) FROM country",
        -13.134650230407715
      ],
      [
        "SELECT LocalName FROM country WHERE Region = value",
        -13.34104299545288
      ],
      [
        "SELECT SurfaceArea , SurfaceArea FROM country",
        -13.896849155426025
      ],
      [
        "SELECT DISTINCT LocalName FROM country",
        -13.975403785705566
      ],
      [
        "SELECT LocalName FROM country WHERE Continent = value",
        -14.613111019134521
      ],
      [
        "SELECT Name FROM country",
        -14.98038101196289
      ],
      [
        "SELECT DISTINCT SurfaceArea FROM country",
        -15.000462532043457
      ],
      [
        "SELECT LocalName FROM country UNION SELECT LocalName FROM country",
        -15.036863327026367
      ],
      [
        "SELECT LocalName FROM country WHERE SurfaceArea = value",
        -15.07916522026062
      ],
      [
        "SELECT SurfaceArea FROM country WHERE Region = value",
        -15.096925258636475
      ],
      [
        "SELECT Sum ( SurfaceArea ) FROM country",
        -15.116570472717285
      ],
      [
        "SELECT SurfaceArea FROM country WHERE LocalName = value",
        -15.27103328704834
      ],
      [
        "SELECT Count ( LocalName ) FROM country",
        -15.467806816101074
      ],
      [
        "SELECT Count ( SurfaceArea ) FROM country",
        -15.685079574584961
      ]
    ],
    "predicted_parse_with_values": "SELECT LocalName FROM country",
    "predicted_parse": "SELECT LocalName FROM country",
    "predicted_parse_explanation": [
      "find the local name in country table"
    ],
    "template_feedback": "additionally use the information from the city table besides the country table . additionally make sure that city 's name equals Kabul . find region in place of local name .",
    "primary_span": [
      [
        0,
        7
      ],
      [
        13,
        22
      ],
      [
        23,
        24
      ]
    ],
    "secondary_span": [
      [
        8,
        12
      ],
      [
        25,
        30
      ]
    ],
    "edits": [
      "region",
      "local name",
      "city",
      "name equals \"Kabul\""
    ],
    "edits_original": "< select > add region </ select > < select > remove local name </ select > < from > add city </ from > < where > add name equals \" Kabul \" </ where >"
  },
  {
    "db_id": "world_1",
    "feedback": "You need to use language instead of name.",
    "question": "What are the regions that use English or Dutch?",
    "gold_parse": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\"",
    "beam": [
      [
        "SELECT Region FROM country WHERE Name = value OR Name = value",
        -0.6307477951049805
      ],
      [
        "SELECT Region FROM country WHERE Name = value OR LifeExpectancy = value",
        -1.2470388412475586
      ],
      [
        "SELECT Region FROM country WHERE LocalName = value OR Name = value",
        -3.4388480186462402
      ],
      [
        "SELECT Region FROM country WHERE LifeExpectancy = value OR Name = value",
        -3.666489601135254
      ],
      [
        "SELECT Region FROM country WHERE LocalName = value OR LifeExpectancy = value",
        -4.001450061798096
      ],
      [
        "SELECT Region FROM country WHERE Continent = value OR Name = value",
        -4.0179762840271
      ],
      [
        "SELECT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value OR T1.Name = value",
        -4.094491481781006
      ],
      [
        "SELECT Region FROM country WHERE Name = value OR LocalName = value",
        -4.149877071380615
      ],
      [
        "SELECT Region FROM country WHERE Continent = value OR LifeExpectancy = value",
        -4.194262981414795
      ],
      [
        "SELECT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value OR T1.LifeExpectancy = value",
        -4.484429836273193
      ],
      [
        "SELECT Region FROM country WHERE Name = value OR Continent = value",
        -5.046898365020752
      ],
      [
        "SELECT Continent FROM country WHERE Name = value OR Name = value",
        -5.844672203063965
      ],
      [
        "SELECT Region FROM country WHERE LifeExpectancy = value OR LifeExpectancy = value",
        -5.9353156089782715
      ],
      [
        "SELECT Region FROM country WHERE LifeExpectancy = value OR LocalName = value",
        -6.22235107421875
      ],
      [
        "SELECT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = value OR T2.Language = value",
        -6.238914966583252
      ],
      [
        "SELECT Continent FROM country WHERE Name = value OR LifeExpectancy = value",
        -6.317293167114258
      ],
      [
        "SELECT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.LifeExpectancy = value OR T2.Language = value",
        -6.734768867492676
      ],
      [
        "SELECT Region FROM country WHERE LocalName = value OR LocalName = value",
        -7.007853984832764
      ],
      [
        "SELECT LocalName FROM country WHERE Name = value OR Name = value",
        -7.080775260925293
      ],
      [
        "SELECT SurfaceArea FROM country WHERE Name = value OR Name = value",
        -7.275058746337891
      ]
    ],
    "predicted_parse_with_values": "SELECT Region FROM country WHERE Name = \"Dutch\" OR Name = \"English\"",
    "predicted_parse": "SELECT Region FROM country WHERE Name = value OR Name = value",
    "predicted_parse_explanation": [
      "find the region in country table whose name equals Dutch or name equals English"
    ],
    "template_feedback": "additionally use the information from the countrylanguage table besides the country table . consider the language equals English or language equals Dutch conditions in place of the name equals Dutch or name equals English conditions . make sure no repetition in the results .",
    "primary_span": [
      [
        0,
        7
      ],
      [
        13,
        22
      ],
      [
        36,
        43
      ]
    ],
    "secondary_span": [
      [
        8,
        12
      ],
      [
        23,
        35
      ]
    ],
    "edits": [
      "distinct",
      "countrylanguage",
      "language equals \"English\" or language equals \"Dutch\"",
      "name equals \"Dutch\" or name equals \"English\""
    ],
    "edits_original": "< select > add distinct </ select > < from > add countrylanguage </ from > < where > add language equals \" English \" or language equals \" Dutch \" </ where > < where > remove name equals \" Dutch \" or name equals \" English \" </ where >"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "feedback": "In step 2 just find version number .",
    "question": "Return the version numbers and template type codes of templates with a version number greater than 5.",
    "gold_parse": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5",
    "beam": [
      [
        "SELECT T1.Version_Number , T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T2.Template_ID HAVING Count ( * ) > value",
        -0.2832794189453125
      ],
      [
        "SELECT Version_Number , Template_Type_Code FROM Templates WHERE Version_Number > value",
        -1.9471592903137207
      ],
      [
        "SELECT T1.Template_Details , T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T2.Template_ID HAVING Count ( * ) > value",
        -3.0759050846099854
      ],
      [
        "SELECT T2.Document_Name , T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T2.Template_ID HAVING Count ( * ) > value",
        -3.9890310764312744
      ],
      [
        "SELECT * , T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T2.Template_ID HAVING Count ( * ) > value",
        -4.920594215393066
      ],
      [
        "SELECT T1.Template_ID , T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T2.Template_ID HAVING Count ( * ) > value",
        -5.024171352386475
      ],
      [
        "SELECT T1.Template_Type_Code , T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T2.Template_ID HAVING Count ( * ) > value",
        -5.159045219421387
      ],
      [
        "SELECT Template_Details , Template_Type_Code FROM Templates WHERE Version_Number > value",
        -5.176711082458496
      ],
      [
        "SELECT T1.Template_Type_Description , T2.Template_Type_Code FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code AND T1.Template_Type_Code = T2.Template_Type_Code JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID GROUP BY T3.Template_ID HAVING Count ( * ) > value",
        -5.794191360473633
      ],
      [
        "SELECT Version_Number , Template_Type_Code FROM Templates WHERE Date_Effective_To > value",
        -6.244771480560303
      ],
      [
        "SELECT Version_Number , Template_Type_Code FROM Templates GROUP BY Template_ID HAVING Count ( * ) > value",
        -6.526228904724121
      ],
      [
        "SELECT T1.Date_Effective_From , T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T2.Template_ID HAVING Count ( * ) > value",
        -6.714597225189209
      ],
      [
        "SELECT T2.Template_ID , T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T2.Template_ID HAVING Count ( * ) > value",
        -6.838565349578857
      ],
      [
        "SELECT T2.Document_Name , T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T1.Version_Number > value",
        -6.918155670166016
      ],
      [
        "SELECT Template_ID , Template_Type_Code FROM Templates WHERE Version_Number > value",
        -7.120926380157471
      ],
      [
        "SELECT * , Template_Type_Code FROM Templates WHERE Version_Number > value",
        -7.302884578704834
      ],
      [
        "SELECT T3.Paragraph_Text , T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID AND T1.Template_ID = T2.Template_ID JOIN Paragraphs AS T3 ON T2.Document_ID = T3.Document_ID GROUP BY T2.Template_ID HAVING Count ( * ) > value",
        -7.542675971984863
      ],
      [
        "SELECT Version_Number , Template_Type_Code FROM Templates GROUP BY Template_Type_Code HAVING Count ( * ) > value",
        -8.218057632446289
      ],
      [
        "SELECT T1.Version_Number , T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Document_Name > value",
        -8.232123851776123
      ],
      [
        "SELECT T1.Template_Type_Description , T2.Template_Type_Code FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T2.Version_Number > value",
        -8.356780052185059
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.Version_Number , T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T2.Template_ID HAVING Count ( * ) > 5",
    "predicted_parse": "SELECT T1.Version_Number , T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T2.Template_ID HAVING Count ( * ) > value",
    "predicted_parse_explanation": [
      "Step 1: for each row in templates table , find the corresponding rows in documents table",
      "Step 2: find the number of rows of each value of documents 's template id of the results of step 1",
      "Step 3: find the version number and template type code of the results of step 1 whose corresponding value in step 2 is greater than 5"
    ],
    "template_feedback": "in step 1 , do not use the documents table . in step 2 , do not find for each value of documents 's template id . in step 3 , additionally make sure that version number greater than 5 .",
    "primary_span": [
      [
        4,
        10
      ],
      [
        15,
        26
      ],
      [
        31,
        40
      ]
    ],
    "secondary_span": [
      [
        4,
        10
      ]
    ],
    "edits": [
      "documents",
      "version number greater than 5",
      "template id",
      "number of rows greater than 5"
    ],
    "edits_original": "< from > remove documents </ from > < where > add version number greater than 5 </ where > < groupBy > remove template id </ groupBy > < having > remove number of rows greater than 5 </ having >"
  },
  {
    "db_id": "wta_1",
    "feedback": "Change tourney name , loser rank to winner name and winner rank points respectively .",
    "question": "Find the name and rank points of the winner who won the most times.",
    "gold_parse": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1",
    "beam": [
      [
        "SELECT tourney_name , loser_rank FROM matches GROUP BY winner_entry ORDER BY Count ( * ) Desc LIMIT value",
        -0.5481443405151367
      ],
      [
        "SELECT tourney_name , winner_rank FROM matches GROUP BY winner_entry ORDER BY Count ( * ) Desc LIMIT value",
        -1.4135160446166992
      ],
      [
        "SELECT tourney_name , loser_rank FROM matches GROUP BY winner_id ORDER BY Count ( * ) Desc LIMIT value",
        -3.300062656402588
      ],
      [
        "SELECT tourney_name , loser_rank FROM matches GROUP BY winner_name ORDER BY Count ( * ) Desc LIMIT value",
        -3.5394105911254883
      ],
      [
        "SELECT tourney_name , loser_rank FROM matches GROUP BY loser_rank ORDER BY Count ( * ) Desc LIMIT value",
        -4.123556137084961
      ],
      [
        "SELECT tourney_name , winner_rank FROM matches GROUP BY winner_id ORDER BY Count ( * ) Desc LIMIT value",
        -4.197805404663086
      ],
      [
        "SELECT tourney_name , loser_rank FROM matches GROUP BY score ORDER BY Count ( * ) Desc LIMIT value",
        -4.30258321762085
      ],
      [
        "SELECT tourney_name , winner_rank FROM matches GROUP BY winner_name ORDER BY Count ( * ) Desc LIMIT value",
        -4.426298141479492
      ],
      [
        "SELECT T2.tourney_name , T2.loser_rank FROM players AS T1 JOIN matches AS T2 ON T2.loser_id = T1.player_id JOIN rankings AS T3 ON T1.player_id = T3.player_id GROUP BY T3.player_id ORDER BY Count ( * ) Desc LIMIT value",
        -4.936907768249512
      ],
      [
        "SELECT tourney_name , winner_rank FROM matches GROUP BY loser_rank ORDER BY Count ( * ) Desc LIMIT value",
        -4.956705093383789
      ],
      [
        "SELECT tourney_name , winner_rank FROM matches GROUP BY score ORDER BY Count ( * ) Desc LIMIT value",
        -5.1485066413879395
      ],
      [
        "SELECT tourney_name , loser_rank FROM matches GROUP BY winner_rank ORDER BY Count ( * ) Desc LIMIT value",
        -5.31472110748291
      ],
      [
        "SELECT tourney_name , loser_rank FROM matches GROUP BY winner_ioc ORDER BY Count ( * ) Desc LIMIT value",
        -5.424812316894531
      ],
      [
        "SELECT tourney_name , loser_rank FROM matches GROUP BY tourney_id ORDER BY Count ( * ) Desc LIMIT value",
        -5.527065277099609
      ],
      [
        "SELECT T2.tourney_name , T2.winner_rank FROM players AS T1 JOIN matches AS T2 ON T2.loser_id = T1.player_id JOIN rankings AS T3 ON T1.player_id = T3.player_id GROUP BY T3.player_id ORDER BY Count ( * ) Desc LIMIT value",
        -5.84791898727417
      ],
      [
        "SELECT tourney_name , winner_rank FROM matches GROUP BY winner_rank ORDER BY Count ( * ) Desc LIMIT value",
        -6.148256778717041
      ],
      [
        "SELECT tourney_name , loser_rank FROM matches GROUP BY winner_hand ORDER BY Count ( * ) Desc LIMIT value",
        -6.227151870727539
      ],
      [
        "SELECT tourney_name , winner_rank FROM matches GROUP BY winner_ioc ORDER BY Count ( * ) Desc LIMIT value",
        -6.332376956939697
      ],
      [
        "SELECT tourney_name , winner_rank_points FROM matches GROUP BY winner_entry ORDER BY Count ( * ) Desc LIMIT value",
        -6.423288345336914
      ],
      [
        "SELECT tourney_name , winner_rank FROM matches GROUP BY tourney_id ORDER BY Count ( * ) Desc LIMIT value",
        -6.430148601531982
      ]
    ],
    "predicted_parse_with_values": "SELECT tourney_name , loser_rank FROM matches GROUP BY winner_entry ORDER BY Count ( * ) Desc LIMIT 1",
    "predicted_parse": "SELECT tourney_name , loser_rank FROM matches GROUP BY winner_entry ORDER BY Count ( * ) Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of winner entry in matches table",
      "Step 2: find the tourney name and loser rank in matches table with largest value in the results of step 1"
    ],
    "template_feedback": "in step 1 , find for each value of winner name in place of winner entry . in step 2 , find winner name and winner rank points in place of tourney name and loser rank .",
    "primary_span": [
      [
        4,
        10
      ],
      [
        21,
        27
      ]
    ],
    "secondary_span": [
      [
        11,
        16
      ],
      [
        28,
        36
      ]
    ],
    "edits": [
      "winner name",
      "winner rank points",
      "tourney name",
      "loser rank",
      "winner name",
      "winner entry"
    ],
    "edits_original": "< select > add winner name </ select > < select > add winner rank points </ select > < select > remove tourney name </ select > < select > remove loser rank </ select > < groupBy > add winner name </ groupBy > < groupBy > remove winner entry </ groupBy >"
  },
  {
    "db_id": "wta_1",
    "feedback": "Swap first name contains L\" with \"hand equals L\".",
    "question": "List the first and last name of all players who are left / L hand in the order of birth date.",
    "gold_parse": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date",
    "beam": [
      [
        "SELECT first_name , last_name FROM players WHERE first_name LIKE value ORDER BY birth_date Asc",
        -0.17728328704833984
      ],
      [
        "SELECT first_name , last_name FROM players WHERE hand = value ORDER BY birth_date Asc",
        -1.857330322265625
      ],
      [
        "SELECT first_name , last_name FROM players WHERE hand LIKE value ORDER BY birth_date Asc",
        -5.529695987701416
      ],
      [
        "SELECT first_name , last_name FROM players WHERE birth_date LIKE value ORDER BY birth_date Asc",
        -7.080506324768066
      ],
      [
        "SELECT first_name , last_name FROM players WHERE first_name = value ORDER BY birth_date Asc",
        -7.193922996520996
      ],
      [
        "SELECT first_name , last_name FROM players WHERE hand ! = value ORDER BY birth_date Asc",
        -8.559157371520996
      ],
      [
        "SELECT first_name , last_name FROM players WHERE birth_date < value ORDER BY birth_date Asc",
        -9.345573425292969
      ],
      [
        "SELECT first_name , last_name FROM players WHERE first_name ! = value ORDER BY birth_date Asc",
        -9.677483081817627
      ],
      [
        "SELECT T1.first_name , T1.last_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.year = value ORDER BY T1.birth_date Asc",
        -10.268651008605957
      ],
      [
        "SELECT first_name , last_name FROM players WHERE birth_date IN ( SELECT birth_date FROM players WHERE hand = value ) ORDER BY birth_date Asc",
        -10.32891035079956
      ],
      [
        "SELECT first_name , last_name FROM players WHERE first_name LIKE value ORDER BY birth_date Asc LIMIT value",
        -10.380885124206543
      ],
      [
        "SELECT first_name , last_name FROM players WHERE birth_date = value ORDER BY birth_date Asc",
        -10.443001747131348
      ],
      [
        "SELECT first_name , last_name FROM players WHERE hand IN ( SELECT birth_date FROM players WHERE hand = value ) ORDER BY birth_date Asc",
        -10.73690128326416
      ],
      [
        "SELECT T1.first_name , T1.last_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_age = value ORDER BY T1.birth_date Asc",
        -10.82180118560791
      ],
      [
        "SELECT first_name , last_name FROM players ORDER BY birth_date Asc",
        -10.87684440612793
      ],
      [
        "SELECT T1.first_name , T1.last_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = value ORDER BY T1.birth_date Asc",
        -10.887648582458496
      ],
      [
        "SELECT T1.first_name , T1.last_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T1.first_name LIKE value ORDER BY T2.loser_age Asc",
        -11.409120559692383
      ],
      [
        "SELECT T1.first_name , T1.last_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_age LIKE value ORDER BY T1.birth_date Asc",
        -11.441039085388184
      ],
      [
        "SELECT T1.first_name , T1.last_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.winner_name = value ORDER BY T1.birth_date Asc",
        -11.454415321350098
      ],
      [
        "SELECT T1.first_name , T1.last_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.winner_age = value ORDER BY T1.birth_date Asc",
        -11.51184368133545
      ]
    ],
    "predicted_parse_with_values": "SELECT first_name , last_name FROM players WHERE first_name LIKE \"L\" ORDER BY birth_date Asc",
    "predicted_parse": "SELECT first_name , last_name FROM players WHERE first_name LIKE value ORDER BY birth_date Asc",
    "predicted_parse_explanation": [
      "find the first name and last name in players table whose first name like L ordered ascending by birth date"
    ],
    "template_feedback": "consider the hand equals L conditions in place of the first name like L conditions .",
    "primary_span": [
      [
        0,
        5
      ]
    ],
    "secondary_span": [
      [
        6,
        15
      ]
    ],
    "edits": [
      "hand equals \"L\"",
      "first name like \"L\""
    ],
    "edits_original": "< where > add hand equals \" L \" </ where > < where > remove first name like \" L \" </ where >"
  },
  {
    "db_id": "world_1",
    "feedback": "For each country find countrylanguage's language used by most of population in that country .",
    "question": "What is the language spoken by the largest percentage of people in each country?",
    "gold_parse": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode",
    "beam": [
      [
        "SELECT Name , Continent FROM country GROUP BY Continent ORDER BY Max ( Population ) Desc LIMIT value",
        -0.8105354309082031
      ],
      [
        "SELECT Name FROM country GROUP BY Continent ORDER BY Max ( Population ) Desc LIMIT value",
        -1.783163070678711
      ],
      [
        "SELECT Name , Continent FROM country GROUP BY Continent",
        -1.9867639541625977
      ],
      [
        "SELECT Continent , Max ( Population ) FROM country GROUP BY Continent ORDER BY Max ( Population ) Desc LIMIT value",
        -2.116959571838379
      ],
      [
        "SELECT Name , Max ( Population ) FROM country GROUP BY Continent",
        -3.395009994506836
      ],
      [
        "SELECT Name , Continent FROM country GROUP BY Continent ORDER BY Sum ( Population ) Desc LIMIT value",
        -3.742854118347168
      ],
      [
        "SELECT Continent , Max ( Population ) FROM country GROUP BY Continent",
        -3.876911163330078
      ],
      [
        "SELECT Continent FROM country GROUP BY Continent ORDER BY Max ( Population ) Desc LIMIT value",
        -4.071725845336914
      ],
      [
        "SELECT Name FROM country GROUP BY Continent ORDER BY Sum ( Population ) Desc LIMIT value",
        -4.46604061126709
      ],
      [
        "SELECT Continent , Max ( GNP ) FROM country GROUP BY Continent ORDER BY Max ( Population ) Desc LIMIT value",
        -5.297504425048828
      ],
      [
        "SELECT Continent , Max ( Population ) FROM country GROUP BY Continent ORDER BY Sum ( Population ) Desc LIMIT value",
        -5.751765251159668
      ],
      [
        "SELECT Name , Max ( Population ) FROM country GROUP BY Continent ORDER BY Max ( Population ) Desc LIMIT value",
        -5.9140119552612305
      ],
      [
        "SELECT Name , Max ( GNP ) FROM country GROUP BY Continent",
        -6.326148986816406
      ],
      [
        "SELECT Name , Continent FROM country GROUP BY Continent ORDER BY Population Desc LIMIT value",
        -6.528931617736816
      ],
      [
        "SELECT Name , Continent FROM country GROUP BY Continent ORDER BY Max ( GNP ) Desc LIMIT value",
        -6.708066940307617
      ],
      [
        "SELECT Continent FROM country GROUP BY Continent ORDER BY Sum ( Population ) Desc LIMIT value",
        -6.838070869445801
      ],
      [
        "SELECT Name FROM country GROUP BY Continent ORDER BY Population Desc LIMIT value",
        -7.06370735168457
      ],
      [
        "SELECT Continent , Max ( GNP ) FROM country GROUP BY Continent",
        -7.450722694396973
      ],
      [
        "SELECT Name FROM country GROUP BY Continent ORDER BY Max ( GNP ) Desc LIMIT value",
        -7.672853469848633
      ],
      [
        "SELECT Continent , Max ( Population ) FROM country GROUP BY Continent ORDER BY Max ( GNP ) Desc LIMIT value",
        -8.063544273376465
      ]
    ],
    "predicted_parse_with_values": "SELECT Name , Continent FROM country GROUP BY Continent ORDER BY Max ( Population ) Desc LIMIT 1",
    "predicted_parse": "SELECT Name , Continent FROM country GROUP BY Continent ORDER BY Max ( Population ) Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: find the maximum population of each value of continent in country table",
      "Step 2: find the name and continent in country table with largest value in the results of step 1"
    ],
    "template_feedback": "in step 1 , use countrylanguage table in place of country table . find for each value of countrycode in place of continent . in step 2 , find maximum percentage , language , and countrycode in place of continent and name . you should not find the largest of the results . show me all the results .",
    "primary_span": [
      [
        4,
        6
      ],
      [
        13,
        18
      ],
      [
        28,
        35
      ],
      [
        43,
        58
      ]
    ],
    "secondary_span": [
      [
        7,
        12
      ],
      [
        19,
        23
      ],
      [
        36,
        42
      ]
    ],
    "edits": [
      "language",
      "countrycode",
      "maximum percentage",
      "name",
      "continent",
      "countrylanguage",
      "country",
      "countrycode",
      "continent",
      "maximum population",
      "descending",
      "1"
    ],
    "edits_original": "< select > add language </ select > < select > add countrycode </ select > < select > add maximum percentage </ select > < select > remove name </ select > < select > remove continent </ select > < from > add countrylanguage </ from > < from > remove country </ from > < groupBy > add countrycode </ groupBy > < groupBy > remove continent </ groupBy > < orderBy > remove maximum population </ orderBy > < orderBy > remove descending </ orderBy > < limit > remove 1 </ limit >"
  },
  {
    "db_id": "dog_kennels",
    "feedback": "In step 1 supplant professionals table with treatments table .",
    "question": "Which professionals have done at least two treatments? List the professional's id, role, and first name.",
    "gold_parse": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
    "beam": [
      [
        "SELECT professional_id , role_code , first_name FROM Professionals GROUP BY professional_id HAVING Count ( * ) > = value",
        -0.05596160888671875
      ],
      [
        "SELECT professional_id , first_name , first_name FROM Professionals GROUP BY professional_id HAVING Count ( * ) > = value",
        -2.9468154907226562
      ],
      [
        "SELECT T3.professional_id , T3.role_code , T1.first_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id GROUP BY T3.professional_id HAVING Count ( * ) > = value",
        -7.317100524902344
      ],
      [
        "SELECT T3.professional_id , T3.first_name , T1.first_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id GROUP BY T3.professional_id HAVING Count ( * ) > = value",
        -7.670717716217041
      ],
      [
        "SELECT T3.professional_id , T1.first_name , T3.first_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id GROUP BY T3.professional_id HAVING Count ( * ) > = value",
        -8.356199264526367
      ],
      [
        "SELECT T1.owner_id , T3.role_code , T3.first_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id GROUP BY T3.professional_id HAVING Count ( * ) > = value",
        -8.548564910888672
      ],
      [
        "SELECT professional_id , role_code , first_name FROM Professionals GROUP BY first_name HAVING Count ( * ) > = value",
        -8.90737247467041
      ],
      [
        "SELECT role_code , first_name , first_name FROM Professionals GROUP BY professional_id HAVING Count ( * ) > = value",
        -9.00885009765625
      ],
      [
        "SELECT professional_id , role_code , first_name , first_name FROM Professionals GROUP BY professional_id HAVING Count ( * ) > = value",
        -10.500205039978027
      ],
      [
        "SELECT professional_id , first_name FROM Professionals GROUP BY professional_id HAVING Count ( * ) > = value",
        -11.088248252868652
      ],
      [
        "SELECT professional_id , first_name , first_name FROM Professionals GROUP BY first_name HAVING Count ( * ) > = value",
        -11.72414493560791
      ],
      [
        "SELECT T3.professional_id , T3.role_code , T3.first_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id GROUP BY T1.first_name HAVING Count ( * ) > = value",
        -12.655217170715332
      ],
      [
        "SELECT T3.professional_id , T3.role_code , T3.first_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id GROUP BY T1.owner_id HAVING Count ( * ) > = value",
        -12.842177391052246
      ],
      [
        "SELECT T3.professional_id , T1.first_name , T1.first_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id GROUP BY T3.professional_id HAVING Count ( * ) > = value",
        -13.63930082321167
      ],
      [
        "SELECT T3.role_code , T3.first_name , T1.first_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id GROUP BY T3.professional_id HAVING Count ( * ) > = value",
        -13.929178237915039
      ],
      [
        "SELECT professional_id , role_code , first_name FROM Professionals GROUP BY Count ( * ) HAVING Count ( * ) > = value",
        -13.930130004882812
      ],
      [
        "SELECT professional_id , role_code , first_name FROM Professionals WHERE first_name = value GROUP BY professional_id HAVING Count ( * ) > = value",
        -14.01392126083374
      ],
      [
        "SELECT T2.professional_id , T1.role_code , T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING Count ( * ) > = value",
        -14.1519136428833
      ],
      [
        "SELECT professional_id , first_name , professional_id FROM Professionals GROUP BY professional_id HAVING Count ( * ) > = value",
        -14.4790620803833
      ],
      [
        "SELECT professional_id , role_code , first_name FROM Professionals GROUP BY professional_id HAVING Sum ( * ) > = value",
        -14.618021130561829
      ]
    ],
    "predicted_parse_with_values": "SELECT professional_id , role_code , first_name FROM Professionals GROUP BY professional_id HAVING Count ( * ) > = 2",
    "predicted_parse": "SELECT professional_id , role_code , first_name FROM Professionals GROUP BY professional_id HAVING Count ( * ) > = value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of professional id in professionals table",
      "Step 2: find the professional id , role code , first name in professionals table whose corresponding value in step 1 is greater than or equals 2"
    ],
    "template_feedback": "in step 1 , additionally use the information from the treatments table besides the professionals table .",
    "primary_span": [
      [
        4,
        11
      ]
    ],
    "secondary_span": [
      [
        12,
        16
      ]
    ],
    "edits": [
      "treatments"
    ],
    "edits_original": "< from > add treatments </ from >"
  },
  {
    "db_id": "dog_kennels",
    "feedback": "In step 1 Take professional id in treatments table in place of professional id in professionals table\".",
    "question": "What are the id, role, and first name of the professionals who have performed two or more treatments?",
    "gold_parse": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
    "beam": [
      [
        "SELECT professional_id , role_code , first_name FROM Professionals GROUP BY professional_id HAVING Count ( * ) > = value",
        -0.0023221969604492188
      ],
      [
        "SELECT T3.professional_id , T3.role_code , T1.first_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id GROUP BY T3.professional_id HAVING Count ( * ) > = value",
        -6.593689918518066
      ],
      [
        "SELECT T1.owner_id , T3.role_code , T3.first_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id GROUP BY T3.professional_id HAVING Count ( * ) > = value",
        -7.222521781921387
      ],
      [
        "SELECT professional_id , first_name , first_name FROM Professionals GROUP BY professional_id HAVING Count ( * ) > = value",
        -8.897043228149414
      ],
      [
        "SELECT professional_id , role_code , first_name , first_name FROM Professionals GROUP BY professional_id HAVING Count ( * ) > = value",
        -10.60902214050293
      ],
      [
        "SELECT T3.professional_id , T1.first_name , T3.first_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id GROUP BY T3.professional_id HAVING Count ( * ) > = value",
        -11.25628662109375
      ],
      [
        "SELECT professional_id , role_code , first_name FROM Professionals GROUP BY first_name HAVING Count ( * ) > = value",
        -11.355657577514648
      ],
      [
        "SELECT professional_id , role_code FROM Professionals GROUP BY professional_id HAVING Count ( * ) > = value",
        -11.648999214172363
      ],
      [
        "SELECT role_code , first_name , first_name FROM Professionals GROUP BY professional_id HAVING Count ( * ) > = value",
        -11.850780487060547
      ],
      [
        "SELECT professional_id , first_name FROM Professionals GROUP BY professional_id HAVING Count ( * ) > = value",
        -13.172636985778809
      ],
      [
        "SELECT professional_id , professional_id , first_name FROM Professionals GROUP BY professional_id HAVING Count ( * ) > = value",
        -13.2195405960083
      ],
      [
        "SELECT T1.owner_id , T3.role_code , T1.first_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id GROUP BY T3.professional_id HAVING Count ( * ) > = value",
        -13.767937660217285
      ],
      [
        "SELECT professional_id , role_code , first_name FROM Professionals WHERE first_name = value GROUP BY professional_id HAVING Count ( * ) > = value",
        -14.236897230148315
      ],
      [
        "SELECT professional_id , role_code , first_name FROM Professionals GROUP BY professional_id HAVING Count ( * ) > = value EXCEPT SELECT professional_id , role_code , first_name FROM Professionals",
        -14.69163703918457
      ],
      [
        "SELECT T3.professional_id , T3.first_name , T1.first_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id GROUP BY T3.professional_id HAVING Count ( * ) > = value",
        -14.808398246765137
      ],
      [
        "SELECT professional_id , role_code , first_name FROM Professionals GROUP BY professional_id HAVING Sum ( * ) > = value",
        -14.859099864959717
      ],
      [
        "SELECT T3.professional_id , T3.role_code , T3.first_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id GROUP BY T1.owner_id HAVING Count ( * ) > = value",
        -15.041223526000977
      ],
      [
        "SELECT professional_id , role_code , first_name FROM Professionals",
        -15.158771514892578
      ],
      [
        "SELECT professional_id , role_code , first_name , Count ( * ) FROM Professionals GROUP BY professional_id HAVING Count ( * ) > = value",
        -15.184534549713135
      ],
      [
        "SELECT professional_id , role_code , first_name FROM Professionals GROUP BY professional_id HAVING Count ( * ) > value",
        -15.202951431274414
      ]
    ],
    "predicted_parse_with_values": "SELECT professional_id , role_code , first_name FROM Professionals GROUP BY professional_id HAVING Count ( * ) > = 2",
    "predicted_parse": "SELECT professional_id , role_code , first_name FROM Professionals GROUP BY professional_id HAVING Count ( * ) > = value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of professional id in professionals table",
      "Step 2: find the professional id , role code , first name in professionals table whose corresponding value in step 1 is greater than or equals 2"
    ],
    "template_feedback": "in step 1 , additionally use the information from the treatments table besides the professionals table .",
    "primary_span": [
      [
        4,
        11
      ]
    ],
    "secondary_span": [
      [
        12,
        16
      ]
    ],
    "edits": [
      "treatments"
    ],
    "edits_original": "< from > add treatments </ from >"
  },
  {
    "db_id": "wta_1",
    "feedback": "Use tourney name instead of loser ioc in both step 2 , step 3. Ensure player id equals winner id in both step 2 , step 3.",
    "question": "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?",
    "gold_parse": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'",
    "beam": [
      [
        "SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = value INTERSECT SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = value",
        -0.7398357391357422
      ],
      [
        "SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = value INTERSECT SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.winner_ioc = value",
        -1.4040651321411133
      ],
      [
        "SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.winner_ioc = value INTERSECT SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = value",
        -1.733285903930664
      ],
      [
        "SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.winner_ioc = value INTERSECT SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.winner_ioc = value",
        -2.393037796020508
      ],
      [
        "SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = value INTERSECT SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.winner_entry = value",
        -5.543576240539551
      ],
      [
        "SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.winner_entry = value INTERSECT SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = value",
        -6.038583755493164
      ],
      [
        "SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.winner_ioc = value INTERSECT SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.winner_entry = value",
        -6.538250923156738
      ],
      [
        "SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.winner_entry = value INTERSECT SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.winner_ioc = value",
        -6.687217712402344
      ],
      [
        "SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.winner_entry = value INTERSECT SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.winner_entry = value",
        -10.844412803649902
      ],
      [
        "SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = value INTERSECT SELECT T1.country_code , T2.loser_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = value",
        -11.31354808807373
      ],
      [
        "SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = value INTERSECT SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN rankings AS T3 ON T1.player_id = T3.player_id WHERE T3.tours = value",
        -11.367794036865234
      ],
      [
        "SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = value INTERSECT SELECT T1.country_code , T2.loser_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.winner_ioc = value",
        -12.122929573059082
      ],
      [
        "SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.winner_ioc = value INTERSECT SELECT T1.country_code , T2.loser_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = value",
        -12.301114082336426
      ],
      [
        "SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.winner_name = value INTERSECT SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = value",
        -12.333696365356445
      ],
      [
        "SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.winner_ioc = value INTERSECT SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN rankings AS T3 ON T1.player_id = T3.player_id WHERE T3.tours = value",
        -12.358535766601562
      ],
      [
        "SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = value INTERSECT SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.tourney_level = value",
        -12.409820556640625
      ],
      [
        "SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = value INTERSECT SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.winner_name = value",
        -12.520490646362305
      ],
      [
        "SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = value INTERSECT SELECT T1.country_code , T1.first_name FROM players AS T1",
        -12.602743148803711
      ],
      [
        "SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = value",
        -13.879695892333984
      ],
      [
        "SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.winner_ioc = value",
        -14.852166175842285
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = \"WTA Championships\" INTERSECT SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = \"Australian Open\"",
    "predicted_parse": "SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = value INTERSECT SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = value",
    "predicted_parse_explanation": [
      "Step 1: for each row in players table , find the corresponding rows in matches table",
      "Step 2: find the country code and first name of the results of step 1 whose loser ioc equals WTA Championships",
      "Step 3: for each row in players table , find the corresponding rows in matches table",
      "Step 4: find the country code and first name of the results of step 3 whose loser ioc equals Australian Open",
      "Step 5: show the rows that are in both the results of step 2 and step 4"
    ],
    "template_feedback": "in step 2 , consider the tourney name equals WTA Championships conditions in place of the loser ioc equals WTA Championships conditions . in step 4 , consider the tourney name equals Australian Open conditions in place of the loser ioc equals Australian Open conditions .",
    "primary_span": [
      [
        4,
        11
      ],
      [
        27,
        34
      ]
    ],
    "secondary_span": [
      [
        12,
        22
      ],
      [
        35,
        45
      ]
    ],
    "edits": [
      "tourney name equals \"WTA Championships\"",
      "loser ioc equals \"WTA Championships\"",
      "tourney name equals \"Australian Open\"",
      "loser ioc equals \"Australian Open\""
    ],
    "edits_original": "< where > add tourney name equals \" WTA Championships \" </ where > < where > remove loser ioc equals \" WTA Championships \" </ where > < where > add tourney name equals \" Australian Open \" </ where > < where > remove loser ioc equals \" Australian Open \" </ where >"
  },
  {
    "db_id": "wta_1",
    "feedback": "Not greater than or equals 2013 but equals 2013 or 2016.",
    "question": "List the number of all matches who played in years of 2013 or 2016.",
    "gold_parse": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016",
    "beam": [
      [
        "SELECT Count ( * ) FROM matches WHERE year > = value",
        -0.6626806259155273
      ],
      [
        "SELECT Count ( * ) FROM matches WHERE year = value OR year = value",
        -0.7386388778686523
      ],
      [
        "SELECT Count ( * ) FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.year = value OR T1.last_name = value",
        -5.818159103393555
      ],
      [
        "SELECT Count ( * ) FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.year = value OR T1.birth_date = value",
        -6.264085292816162
      ],
      [
        "SELECT Count ( * ) FROM matches WHERE year LIKE value OR year = value",
        -7.314202308654785
      ],
      [
        "SELECT Count ( * ) FROM matches WHERE tourney_date = value OR year = value",
        -7.884380340576172
      ],
      [
        "SELECT Count ( * ) FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T1.birth_date = value OR T2.year = value",
        -8.243971824645996
      ],
      [
        "SELECT Count ( * ) FROM matches WHERE year = value OR tourney_date = value",
        -8.56968355178833
      ],
      [
        "SELECT Count ( * ) FROM matches WHERE year > = value OR year = value",
        -9.227121353149414
      ],
      [
        "SELECT Count ( * ) FROM matches WHERE year < = value",
        -9.33535385131836
      ],
      [
        "SELECT Count ( * ) FROM matches WHERE year > value OR year = value",
        -10.388520240783691
      ],
      [
        "SELECT Count ( * ) FROM matches WHERE year BETWEEN value AND value",
        -10.492470741271973
      ],
      [
        "SELECT Count ( * ) FROM matches WHERE year = value OR year LIKE value",
        -10.901714324951172
      ],
      [
        "SELECT Count ( * ) FROM matches WHERE year > value",
        -11.208930015563965
      ],
      [
        "SELECT Count ( * ) FROM matches WHERE year > = value AND year < = value",
        -11.321942329406738
      ],
      [
        "SELECT Count ( * ) FROM matches WHERE tourney_date > = value",
        -11.5324125289917
      ],
      [
        "SELECT Count ( * ) FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T1.last_name = value OR T2.year = value",
        -11.917165756225586
      ],
      [
        "SELECT Count ( * ) FROM matches WHERE year = value OR winner_age = value",
        -12.006551742553711
      ],
      [
        "SELECT Count ( * ) FROM matches WHERE year LIKE value",
        -12.10776424407959
      ],
      [
        "SELECT Count ( * ) FROM matches WHERE winner_age > = value",
        -12.702016830444336
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM matches WHERE year > = 2013",
    "predicted_parse": "SELECT Count ( * ) FROM matches WHERE year > = value",
    "predicted_parse_explanation": [
      "find the number of rows in matches table whose year greater than or equals 2013"
    ],
    "template_feedback": "consider the year equals 2016 or year equals 2013 conditions in place of the year greater than or equals 2013 conditions .",
    "primary_span": [
      [
        0,
        9
      ]
    ],
    "secondary_span": [
      [
        10,
        21
      ]
    ],
    "edits": [
      "year equals 2013 or year equals 2016",
      "year greater than or equals to 2013"
    ],
    "edits_original": "< where > add year equals 2013 or year equals 2016 </ where > < where > remove year greater than or equals to 2013 </ where >"
  },
  {
    "db_id": "real_estate_properties",
    "feedback": "Make sure to search for whose similar name of feature equivalent to AirCon.",
    "question": "What is the feature type name of feature AirCon?",
    "gold_parse": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\"",
    "beam": [
      [
        "SELECT feature_type_name FROM Ref_Feature_Types",
        -0.004658699035644531
      ],
      [
        "SELECT feature_name FROM Other_Available_Features",
        -5.605734825134277
      ],
      [
        "SELECT feature_type_code FROM Other_Available_Features",
        -6.96048641204834
      ],
      [
        "SELECT feature_type_code FROM Ref_Feature_Types",
        -11.935141563415527
      ],
      [
        "SELECT T1.feature_type_name , T2.feature_name FROM Ref_Feature_Types AS T1 JOIN Other_Available_Features AS T2 ON T1.feature_type_code = T2.feature_type_code",
        -11.98075008392334
      ],
      [
        "SELECT T1.feature_type_name FROM Ref_Feature_Types AS T1 JOIN Other_Available_Features AS T2 ON T1.feature_type_code = T2.feature_type_code WHERE T2.feature_name = value",
        -12.046830177307129
      ],
      [
        "SELECT DISTINCT feature_type_name FROM Ref_Feature_Types",
        -13.637561798095703
      ],
      [
        "SELECT T1.feature_type_name FROM Ref_Feature_Types AS T1 UNION SELECT T2.feature_name FROM Other_Available_Features AS T2",
        -15.239858627319336
      ],
      [
        "SELECT feature_name , feature_name FROM Other_Available_Features",
        -15.432734489440918
      ],
      [
        "SELECT T1.feature_type_name FROM Ref_Feature_Types AS T1 INTERSECT SELECT T2.feature_name FROM Other_Available_Features AS T2",
        -15.674054145812988
      ],
      [
        "SELECT T1.feature_type_name FROM Ref_Feature_Types AS T1 JOIN Other_Available_Features AS T2 ON T1.feature_type_code = T2.feature_type_code ORDER BY T2.feature_name Asc",
        -15.853546142578125
      ],
      [
        "SELECT T1.feature_type_name FROM Ref_Feature_Types AS T1 JOIN Other_Available_Features AS T2 ON T1.feature_type_code = T2.feature_type_code GROUP BY T2.feature_type_code HAVING Count ( * ) = value",
        -15.87298583984375
      ],
      [
        "SELECT Max ( feature_type_name ) FROM Ref_Feature_Types",
        -16.008856773376465
      ],
      [
        "SELECT feature_type_name , feature_type_code FROM Ref_Feature_Types",
        -16.16722011566162
      ],
      [
        "SELECT T1.feature_type_name FROM Ref_Feature_Types AS T1 JOIN Other_Available_Features AS T2 ON T1.feature_type_code = T2.feature_type_code GROUP BY T2.feature_type_code",
        -16.290424346923828
      ],
      [
        "SELECT feature_type_name FROM Ref_Feature_Types ORDER BY feature_type_name Asc",
        -16.389397621154785
      ],
      [
        "SELECT Count ( feature_type_name ) FROM Ref_Feature_Types",
        -16.460251808166504
      ],
      [
        "SELECT DISTINCT feature_type_name FROM Ref_Feature_Types",
        -16.512808799743652
      ],
      [
        "SELECT T1.feature_type_name , T2.feature_type_code FROM Ref_Feature_Types AS T1 JOIN Other_Available_Features AS T2 ON T1.feature_type_code = T2.feature_type_code",
        -16.61048173904419
      ],
      [
        "SELECT feature_type_name FROM Ref_Feature_Types LIMIT value",
        -17.273415565490723
      ]
    ],
    "predicted_parse_with_values": "SELECT feature_type_name FROM Ref_Feature_Types",
    "predicted_parse": "SELECT feature_type_name FROM Ref_Feature_Types",
    "predicted_parse_explanation": [
      "find the feature type name in reference feature types table"
    ],
    "template_feedback": "additionally use the information from the other available features table besides the reference feature types table . additionally make sure that feature name equals AirCon .",
    "primary_span": [
      [
        0,
        9
      ],
      [
        17,
        25
      ]
    ],
    "secondary_span": [
      [
        10,
        16
      ]
    ],
    "edits": [
      "other available features",
      "feature name equals \"AirCon\""
    ],
    "edits_original": "< from > add other available features </ from > < where > add feature name equals \" AirCon \" </ where >"
  },
  {
    "db_id": "student_transcripts_tracking",
    "feedback": "Substitute addresses table with courses table .",
    "question": "How many courses in total are listed?",
    "gold_parse": "SELECT count(*) FROM Courses",
    "beam": [
      [
        "SELECT Count ( * ) FROM Addresses",
        -4.76837158203125e-05
      ],
      [
        "SELECT Sum ( course_name ) FROM Courses",
        -10.728966534137726
      ],
      [
        "SELECT Sum ( * ) FROM Addresses",
        -12.308323621749878
      ],
      [
        "SELECT Count ( * ) FROM Courses WHERE course_name = value",
        -12.847787380218506
      ],
      [
        "SELECT Count ( Count ( * ) ) FROM Addresses",
        -13.092928886413574
      ],
      [
        "SELECT Sum ( course_id ) FROM Courses",
        -13.569973945617676
      ],
      [
        "SELECT Sum ( DISTINCT course_name ) FROM Courses",
        -13.671626389026642
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM Addresses",
        -13.837386131286621
      ],
      [
        "SELECT Count ( DISTINCT course_name ) FROM Courses",
        -13.858339309692383
      ],
      [
        "SELECT Count ( * ) , course_name FROM Courses",
        -14.274977207183838
      ],
      [
        "SELECT Count ( * ) FROM Courses ORDER BY course_name Asc",
        -14.615167341195047
      ],
      [
        "SELECT Count ( * ) FROM Courses GROUP BY course_name",
        -14.636628150939941
      ],
      [
        "SELECT Avg ( course_name ) FROM Courses",
        -14.773395776748657
      ],
      [
        "SELECT Avg ( * ) FROM Addresses",
        -15.312401294708252
      ],
      [
        "SELECT Count ( Avg ( * ) ) FROM Addresses",
        -15.662080764770508
      ],
      [
        "SELECT Count ( * ) , course_name FROM Courses GROUP BY course_name",
        -15.747682094573975
      ],
      [
        "SELECT Count ( * ) FROM Courses ORDER BY course_name Desc",
        -16.113338589668274
      ],
      [
        "SELECT Sum ( course_description ) FROM Courses",
        -16.32345151901245
      ],
      [
        "SELECT Avg ( course_id ) FROM Courses",
        -16.52721118927002
      ],
      [
        "SELECT Count ( * ) FROM Addresses AS T1 UNION SELECT T2.course_name FROM Courses AS T2",
        -16.968380451202393
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM Addresses",
    "predicted_parse": "SELECT Count ( * ) FROM Addresses",
    "predicted_parse_explanation": [
      "find the number of rows in addresses table"
    ],
    "template_feedback": "use courses table in place of addresses table .",
    "primary_span": [
      [
        0,
        2
      ]
    ],
    "secondary_span": [
      [
        3,
        8
      ]
    ],
    "edits": [
      "courses",
      "addresses"
    ],
    "edits_original": "< from > add courses </ from > < from > remove addresses </ from >"
  },
  {
    "db_id": "dog_kennels",
    "feedback": "In step 1, I want code of breed and table of dogs.",
    "question": "Which breed do the most dogs have? Give me the breed name.",
    "gold_parse": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1",
    "beam": [
      [
        "SELECT breed_name FROM Breeds GROUP BY breed_name ORDER BY Count ( * ) Desc LIMIT value",
        -0.0054836273193359375
      ],
      [
        "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code GROUP BY T2.breed_code ORDER BY Count ( * ) Desc LIMIT value",
        -5.565340995788574
      ],
      [
        "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code ORDER BY T2.weight Desc LIMIT value",
        -6.8311262130737305
      ],
      [
        "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code GROUP BY T2.weight ORDER BY Count ( * ) Desc LIMIT value",
        -8.245080947875977
      ],
      [
        "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code ORDER BY T2.age Desc LIMIT value",
        -9.34007740020752
      ],
      [
        "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code WHERE T2.weight = ( SELECT Max ( T2.weight ) FROM Dogs AS T2 )",
        -9.649724006652832
      ],
      [
        "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code GROUP BY T1.breed_name ORDER BY Count ( T2.weight ) Desc LIMIT value",
        -9.961566925048828
      ],
      [
        "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code GROUP BY T2.age ORDER BY Count ( * ) Desc LIMIT value",
        -10.48021125793457
      ],
      [
        "SELECT breed_name FROM Breeds GROUP BY breed_code ORDER BY Count ( * ) Desc LIMIT value",
        -11.445940971374512
      ],
      [
        "SELECT breed_name FROM Breeds GROUP BY breed_name",
        -11.998307228088379
      ],
      [
        "SELECT T2.name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code GROUP BY T1.breed_name ORDER BY Count ( * ) Desc LIMIT value",
        -12.148209571838379
      ],
      [
        "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code GROUP BY T1.breed_name ORDER BY Sum ( T2.weight ) Desc LIMIT value",
        -12.235135078430176
      ],
      [
        "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code GROUP BY T2.name ORDER BY Count ( * ) Desc LIMIT value",
        -12.335933685302734
      ],
      [
        "SELECT breed_name FROM Breeds GROUP BY breed_name ORDER BY Count ( * ) Desc",
        -12.708240509033203
      ],
      [
        "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code GROUP BY T1.breed_name ORDER BY Count ( T2.age ) Desc LIMIT value",
        -12.796051025390625
      ],
      [
        "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code WHERE T2.weight = ( SELECT T2.weight FROM Dogs AS T2 ORDER BY T2.weight Desc LIMIT value )",
        -12.83510684967041
      ],
      [
        "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code ORDER BY T2.date_of_birth Desc LIMIT value",
        -13.26677417755127
      ],
      [
        "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code WHERE T2.weight = ( SELECT T2.weight FROM Dogs AS T2 GROUP BY T2.breed_code ORDER BY Count ( * ) Desc LIMIT value )",
        -13.327041625976562
      ],
      [
        "SELECT breed_name FROM Breeds",
        -13.410792350769043
      ],
      [
        "SELECT Max ( breed_name ) FROM Breeds",
        -15.157206535339355
      ]
    ],
    "predicted_parse_with_values": "SELECT breed_name FROM Breeds GROUP BY breed_name ORDER BY Count ( * ) Desc LIMIT 1",
    "predicted_parse": "SELECT breed_name FROM Breeds GROUP BY breed_name ORDER BY Count ( * ) Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of breed name in breeds table",
      "Step 2: find the breed name in breeds table with largest value in the results of step 1"
    ],
    "template_feedback": "in step 1 , additionally use the information from the dogs table besides the breeds table .",
    "primary_span": [
      [
        4,
        11
      ]
    ],
    "secondary_span": [
      [
        12,
        16
      ]
    ],
    "edits": [
      "dogs"
    ],
    "edits_original": "< from > add dogs </ from >"
  },
  {
    "db_id": "world_1",
    "feedback": "Need to specify continent equals Asia .",
    "question": "What is the total population and maximum GNP in Asia?",
    "gold_parse": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"",
    "beam": [
      [
        "SELECT Sum ( Population ) , Max ( GNP ) FROM country",
        -0.935704231262207
      ],
      [
        "SELECT Sum ( Population ) , Sum ( GNP ) FROM country",
        -1.4820795059204102
      ],
      [
        "SELECT Sum ( LifeExpectancy ) , Max ( GNP ) FROM country",
        -1.565180778503418
      ],
      [
        "SELECT Sum ( GNP ) , Max ( GNP ) FROM country",
        -1.991927146911621
      ],
      [
        "SELECT Sum ( Population ) , Max ( GNPOld ) FROM country",
        -4.945727348327637
      ],
      [
        "SELECT Sum ( Population ) , Sum ( GNPOld ) FROM country",
        -5.095440864562988
      ],
      [
        "SELECT Sum ( GNPOld ) , Max ( GNP ) FROM country",
        -5.219660758972168
      ],
      [
        "SELECT Sum ( LifeExpectancy ) , Max ( GNPOld ) FROM country",
        -5.456978797912598
      ],
      [
        "SELECT Sum ( Population ) , Sum ( GNP ) FROM country WHERE Continent = value",
        -5.475719451904297
      ],
      [
        "SELECT Sum ( GNP ) , Max ( GNPOld ) FROM country",
        -5.535397529602051
      ],
      [
        "SELECT Sum ( LifeExpectancy ) , Sum ( GNP ) FROM country WHERE Continent = value",
        -6.895441055297852
      ],
      [
        "SELECT Sum ( LifeExpectancy ) , Sum ( GNP ) FROM country",
        -6.909156799316406
      ],
      [
        "SELECT Sum ( LifeExpectancy ) , Max ( GNP ) FROM country WHERE Continent = value",
        -7.96811580657959
      ],
      [
        "SELECT Sum ( Population ) , Avg ( GNP ) FROM country",
        -8.294814109802246
      ],
      [
        "SELECT Sum ( GNP ) , Max ( GNP ) FROM country WHERE Continent = value",
        -8.642239570617676
      ],
      [
        "SELECT Sum ( GNPOld ) , Max ( GNPOld ) FROM country",
        -8.722771644592285
      ],
      [
        "SELECT Sum ( Population ) , Max ( GNP ) FROM country GROUP BY Continent",
        -9.421749114990234
      ],
      [
        "SELECT Sum ( Population ) , Sum ( GNPOld ) FROM country WHERE Continent = value",
        -9.423046112060547
      ],
      [
        "SELECT Sum ( Population ) , Sum ( GNP ) FROM country ORDER BY GNP Desc LIMIT value",
        -10.0352201461792
      ],
      [
        "SELECT Sum ( Population ) , Max ( GNP ) , Max ( GNP ) FROM country",
        -10.214422225952148
      ]
    ],
    "predicted_parse_with_values": "SELECT Sum ( Population ) , Max ( GNP ) FROM country",
    "predicted_parse": "SELECT Sum ( Population ) , Max ( GNP ) FROM country",
    "predicted_parse_explanation": [
      "find the summation of population and maximum gnp in country table"
    ],
    "template_feedback": "additionally make sure that continent equals Asia .",
    "primary_span": [
      [
        0,
        7
      ]
    ],
    "secondary_span": [],
    "edits": [
      "continent equals \"Asia\""
    ],
    "edits_original": "< where > add continent equals \" Asia \" </ where >"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "feedback": "Ensure that template type code used in documents .",
    "question": "Return the code of the template type that is most commonly used in documents.",
    "gold_parse": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1",
    "beam": [
      [
        "SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY Count ( * ) Desc LIMIT value",
        -0.0004892349243164062
      ],
      [
        "SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code GROUP BY T2.Template_Type_Code ORDER BY Count ( * ) Desc LIMIT value",
        -8.036877632141113
      ],
      [
        "SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code HAVING Count ( * ) > value",
        -9.182403564453125
      ],
      [
        "SELECT T2.Template_Type_Code FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code GROUP BY T1.Template_Type_Code ORDER BY Count ( * ) Desc LIMIT value",
        -11.372151374816895
      ],
      [
        "SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code",
        -11.736835479736328
      ],
      [
        "SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY Count ( * ) Desc",
        -11.747570991516113
      ],
      [
        "SELECT T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Document_Name = ( SELECT T1.Template_Type_Code FROM Templates AS T1 GROUP BY T1.Template_Type_Code ORDER BY Count ( * ) Desc LIMIT value ) GROUP BY T1.Template_Type_Code ORDER BY Count ( * ) Desc LIMIT value",
        -13.659491062164307
      ],
      [
        "SELECT DISTINCT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY Count ( * ) Desc LIMIT value",
        -13.93980884552002
      ],
      [
        "SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY Count ( * ) Desc LIMIT value INTERSECT SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY Count ( * ) Desc LIMIT value",
        -14.045882225036621
      ],
      [
        "SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY Count ( * ) Asc LIMIT value",
        -14.176283836364746
      ],
      [
        "SELECT T1.Template_Type_Code FROM Templates AS T1 INTERSECT SELECT T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Document_Name = ( SELECT T1.Template_Type_Code FROM Templates AS T1 GROUP BY T1.Template_Type_Code ORDER BY Count ( * ) Desc LIMIT value )",
        -14.254619121551514
      ],
      [
        "SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code HAVING Count ( * ) = value",
        -14.35428524017334
      ],
      [
        "SELECT Template_Type_Code FROM Templates INTERSECT SELECT Template_Type_Code FROM Templates",
        -14.427772521972656
      ],
      [
        "SELECT Template_Type_Code , Count ( * ) FROM Templates GROUP BY Template_Type_Code ORDER BY Count ( * ) Desc LIMIT value",
        -14.437896728515625
      ],
      [
        "SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code HAVING Count ( * ) < = value",
        -15.48588752746582
      ],
      [
        "SELECT Template_Type_Code FROM Templates GROUP BY DISTINCT Template_Type_Code ORDER BY Count ( * ) Desc LIMIT value",
        -15.62440013885498
      ],
      [
        "SELECT DISTINCT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY Count ( * ) Desc LIMIT value",
        -15.624917030334473
      ],
      [
        "SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY Avg ( * ) Desc LIMIT value",
        -15.900846481323242
      ],
      [
        "SELECT T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Document_Name = ( SELECT T1.Template_Type_Code FROM Templates AS T1 GROUP BY T1.Template_Type_Code ORDER BY Count ( * ) Desc LIMIT value )",
        -15.928457498550415
      ],
      [
        "SELECT Template_Type_Code FROM Templates",
        -17.267417907714844
      ]
    ],
    "predicted_parse_with_values": "SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY Count ( * ) Desc LIMIT 1",
    "predicted_parse": "SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY Count ( * ) Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of template type code in templates table",
      "Step 2: find the template type code in templates table with largest value in the results of step 1"
    ],
    "template_feedback": "in step 1 , additionally use the information from the documents table besides the templates table .",
    "primary_span": [
      [
        4,
        11
      ]
    ],
    "secondary_span": [
      [
        12,
        16
      ]
    ],
    "edits": [
      "documents"
    ],
    "edits_original": "< from > add documents </ from >"
  },
  {
    "db_id": "employee_hire_evaluation",
    "feedback": "You need to utilize hiring table.",
    "question": "Give me all the information about hiring.",
    "gold_parse": "SELECT * FROM hiring",
    "beam": [
      [
        "SELECT * FROM employee",
        -0.0017518997192382812
      ],
      [
        "SELECT * FROM hiring WHERE Start_from = value",
        -6.366934776306152
      ],
      [
        "SELECT * FROM employee WHERE City = value",
        -10.798723220825195
      ],
      [
        "SELECT DISTINCT * FROM employee",
        -13.57988452911377
      ],
      [
        "SELECT * FROM employee WHERE Name = value",
        -13.831326484680176
      ],
      [
        "SELECT * FROM hiring ORDER BY Start_from Asc",
        -14.024029016494751
      ],
      [
        "SELECT * , Start_from FROM hiring",
        -14.2718585729599
      ],
      [
        "SELECT Count ( * ) FROM employee",
        -14.912434577941895
      ],
      [
        "SELECT * FROM hiring GROUP BY * HAVING Start_from = value",
        -15.195570468902588
      ],
      [
        "SELECT Sum ( * ) FROM employee",
        -15.42468547821045
      ],
      [
        "SELECT * FROM employee EXCEPT SELECT * FROM employee",
        -15.720837593078613
      ],
      [
        "SELECT * FROM employee AS T1 UNION SELECT T2.Start_from FROM hiring AS T2",
        -15.739361047744751
      ],
      [
        "SELECT * FROM employee GROUP BY *",
        -16.326254844665527
      ],
      [
        "SELECT * FROM employee LIMIT value",
        -17.111334800720215
      ],
      [
        "SELECT Min ( * ) FROM employee",
        -17.22048282623291
      ],
      [
        "SELECT DISTINCT * FROM employee",
        -17.31570339202881
      ],
      [
        "SELECT Count ( * ) FROM employee",
        -17.761425971984863
      ],
      [
        "SELECT Avg ( * ) FROM employee",
        -18.01231098175049
      ],
      [
        "SELECT Start_from FROM hiring",
        -18.110133171081543
      ],
      [
        "SELECT Max ( * ) FROM employee",
        -18.127795219421387
      ]
    ],
    "predicted_parse_with_values": "SELECT * FROM employee",
    "predicted_parse": "SELECT * FROM employee",
    "predicted_parse_explanation": [
      "find the rows in employee table"
    ],
    "template_feedback": "use hiring table in place of employee table .",
    "primary_span": [
      [
        0,
        2
      ]
    ],
    "secondary_span": [
      [
        3,
        8
      ]
    ],
    "edits": [
      "hiring",
      "employee"
    ],
    "edits_original": "< from > add hiring </ from > < from > remove employee </ from >"
  },
  {
    "db_id": "flight_2",
    "feedback": "Omit \"and country equals USA\".",
    "question": "What are flight numbers of Airline \"United Airlines\"?",
    "gold_parse": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"",
    "beam": [
      [
        "SELECT T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Airline = value AND T1.Country = value",
        -0.019800186157226562
      ],
      [
        "SELECT T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Country = value",
        -4.7509565353393555
      ],
      [
        "SELECT T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Country = value AND T1.Country = value",
        -5.179288864135742
      ],
      [
        "SELECT T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Airline = value",
        -5.430619239807129
      ],
      [
        "SELECT T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Airline = value AND T1.Airline = value",
        -7.079662322998047
      ],
      [
        "SELECT T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Airline = value AND T1.Abbreviation = value",
        -9.83553409576416
      ],
      [
        "SELECT T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Abbreviation = value AND T1.Country = value",
        -11.063919067382812
      ],
      [
        "SELECT T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Country = value AND T1.Airline = value",
        -11.507238388061523
      ],
      [
        "SELECT T3.FlightNo FROM airlines AS T1 JOIN airports AS T2 JOIN flights AS T3 WHERE T2.Country = value AND T1.Country = value",
        -13.017732620239258
      ],
      [
        "SELECT T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Airline = value AND T1.Country > = value",
        -13.973302841186523
      ],
      [
        "SELECT T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Country = value AND T1.Abbreviation = value",
        -14.005949020385742
      ],
      [
        "SELECT T2.FlightNo , T1.Airline FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Airline = value AND T1.Country = value",
        -14.918555974960327
      ],
      [
        "SELECT DISTINCT T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Airline = value AND T1.Country = value",
        -15.044288635253906
      ],
      [
        "SELECT T3.FlightNo FROM airlines AS T1 JOIN airports AS T2 JOIN flights AS T3 WHERE T2.CountryAbbrev = value AND T1.Country = value",
        -15.356281280517578
      ],
      [
        "SELECT Count ( T2.FlightNo ) FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Airline = value AND T1.Country = value",
        -15.386239051818848
      ],
      [
        "SELECT T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Airline < value",
        -15.492002487182617
      ],
      [
        "SELECT T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Country < value",
        -15.544044494628906
      ],
      [
        "SELECT T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Airline > value",
        -15.753019332885742
      ],
      [
        "SELECT T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Abbreviation = value",
        -16.571938514709473
      ],
      [
        "SELECT FlightNo FROM flights",
        -18.84488582611084
      ]
    ],
    "predicted_parse_with_values": "SELECT T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Airline = \"United Airlines\" AND T1.Country = \"USA\"",
    "predicted_parse": "SELECT T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Airline = value AND T1.Country = value",
    "predicted_parse_explanation": [
      "Step 1: for each row in airlines table , find the corresponding rows in flights table",
      "Step 2: find the flight number of the results of step 1 whose airlines 's airline name equals United Airlines and country equals USA"
    ],
    "template_feedback": "in step 2 , remove the country equals USA conditions .",
    "primary_span": [
      [
        4,
        10
      ]
    ],
    "secondary_span": [],
    "edits": [
      "country equals \"USA\""
    ],
    "edits_original": "< where > remove country equals \" USA \" </ where >"
  },
  {
    "db_id": "car_1",
    "feedback": "make sure only to find for which continents continent equals europe .",
    "question": "What are the names of all European countries with at least 3 manufacturers?",
    "gold_parse": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3",
    "beam": [
      [
        "SELECT T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country GROUP BY T2.Country HAVING Count ( * ) > = value",
        -0.00035572052001953125
      ],
      [
        "SELECT T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country WHERE T1.Continent = value GROUP BY T2.Country HAVING Count ( * ) > = value",
        -8.811070442199707
      ],
      [
        "SELECT T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country WHERE T2.Country = value GROUP BY T2.Country HAVING Count ( * ) > = value",
        -9.172640800476074
      ],
      [
        "SELECT CountryName FROM countries WHERE Continent > = value",
        -10.649072647094727
      ],
      [
        "SELECT CountryName FROM countries GROUP BY CountryId HAVING Count ( * ) > = value",
        -10.813899993896484
      ],
      [
        "SELECT T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country GROUP BY T2.Country , T1.Continent HAVING Count ( * ) > = value",
        -11.476332187652588
      ],
      [
        "SELECT T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country GROUP BY T2.Country HAVING Count ( * ) < = value",
        -11.678872108459473
      ],
      [
        "SELECT CountryName FROM countries GROUP BY Continent HAVING Count ( * ) > = value",
        -11.90969181060791
      ],
      [
        "SELECT Country FROM car_makers GROUP BY Country HAVING Count ( * ) > = value",
        -11.945822715759277
      ],
      [
        "SELECT T1.Continent FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country GROUP BY T2.Country HAVING Count ( * ) > = value",
        -12.213915824890137
      ],
      [
        "SELECT T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country WHERE T1.CountryId = value GROUP BY T2.Country HAVING Count ( * ) > = value",
        -12.49764633178711
      ],
      [
        "SELECT T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country GROUP BY T2.Country HAVING Count ( * ) = value OR Count ( * ) = value",
        -13.496626853942871
      ],
      [
        "SELECT DISTINCT T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country GROUP BY T2.Country HAVING Count ( * ) > = value",
        -13.777963638305664
      ],
      [
        "SELECT CountryName FROM countries WHERE Continent = value",
        -13.817836284637451
      ],
      [
        "SELECT T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country GROUP BY T2.Country HAVING Count ( * ) > value",
        -13.961908340454102
      ],
      [
        "SELECT T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country GROUP BY T2.Country HAVING Count ( * ) > = value UNION SELECT T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country WHERE T2.Country = value",
        -14.0336012840271
      ],
      [
        "SELECT T1.CountryName FROM countries AS T1 EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country WHERE T2.Country = value",
        -14.15772008895874
      ],
      [
        "SELECT CountryName FROM countries WHERE Continent < = value",
        -14.240539073944092
      ],
      [
        "SELECT CountryName FROM countries WHERE Continent ! = value",
        -14.406820297241211
      ],
      [
        "SELECT CountryName FROM countries WHERE Continent = value OR Continent = value",
        -14.685029029846191
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country GROUP BY T2.Country HAVING Count ( * ) > = 3",
    "predicted_parse": "SELECT T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country GROUP BY T2.Country HAVING Count ( * ) > = value",
    "predicted_parse_explanation": [
      "Step 1: for each row in countries table , find the corresponding rows in car makers table",
      "Step 2: find the number of rows of each value of country of the results of step 1",
      "Step 3: find the country name of the results of step 1 whose corresponding value in step 2 is greater than or equals 3"
    ],
    "template_feedback": "in step 1 , additionally use the information from the continents table . in step 2 , find for value of country name in place of country . in step 3 , additionally make sure that continents 's continent equals europe .",
    "primary_span": [
      [
        4,
        12
      ],
      [
        17,
        22
      ],
      [
        32,
        41
      ]
    ],
    "secondary_span": [
      [
        23,
        27
      ]
    ],
    "edits": [
      "continents",
      "continent equals \"europe\"",
      "country name",
      "country"
    ],
    "edits_original": "< from > add continents </ from > < where > add continent equals \" europe \" </ where > < groupBy > add country name </ groupBy > < groupBy > remove country </ groupBy >"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "feedback": "The template id of each template type code are there in document table in step 2.",
    "question": "What are the codes of template types that are not used for any document?",
    "gold_parse": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id",
    "beam": [
      [
        "SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 EXCEPT SELECT T2.Template_Type_Code FROM Templates AS T2",
        -0.012828826904296875
      ],
      [
        "SELECT Template_Type_Code FROM Ref_Template_Types EXCEPT SELECT Template_Type_Code FROM Ref_Template_Types",
        -4.735682487487793
      ],
      [
        "SELECT Template_Type_Code FROM Templates EXCEPT SELECT Template_Type_Code FROM Templates",
        -5.795694351196289
      ],
      [
        "SELECT Template_Type_Code FROM Ref_Template_Types EXCEPT SELECT Template_Type_Description FROM Ref_Template_Types",
        -8.039437294006348
      ],
      [
        "SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 WHERE T1.Template_Type_Code NOT IN ( SELECT T2.Template_Type_Code FROM Templates AS T2 )",
        -8.590470314025879
      ],
      [
        "SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 WHERE T1.Template_Type_Code NOT IN ( SELECT T2.Template_ID FROM Documents AS T2 )",
        -8.625609397888184
      ],
      [
        "SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 EXCEPT SELECT T2.Document_Name FROM Documents AS T2",
        -8.891775131225586
      ],
      [
        "SELECT T1.Template_Type_Code FROM Templates AS T1 EXCEPT SELECT T2.Template_Type_Code FROM Ref_Template_Types AS T2",
        -10.23399305343628
      ],
      [
        "SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 EXCEPT SELECT T2.Template_Type_Code FROM Templates AS T2 JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID WHERE T3.Document_Name = value",
        -10.627079963684082
      ],
      [
        "SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 EXCEPT SELECT T2.Template_ID FROM Documents AS T2",
        -11.464432716369629
      ],
      [
        "SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 WHERE T1.Template_Type_Code NOT IN ( SELECT T2.Document_Name FROM Documents AS T2 )",
        -11.814543724060059
      ],
      [
        "SELECT Template_Type_Code FROM Ref_Template_Types EXCEPT SELECT * FROM Ref_Template_Types",
        -12.14744758605957
      ],
      [
        "SELECT T2.Template_Type_Code FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T1.Template_Type_Code NOT IN ( SELECT T3.Template_ID FROM Documents AS T3 )",
        -13.556865692138672
      ],
      [
        "SELECT T1.Template_Type_Code FROM Templates AS T1 EXCEPT SELECT T2.Template_Type_Description FROM Ref_Template_Types AS T2",
        -13.751558303833008
      ],
      [
        "SELECT DISTINCT T1.Template_Type_Code FROM Ref_Template_Types AS T1 EXCEPT SELECT T2.Template_Type_Code FROM Templates AS T2",
        -13.774359703063965
      ],
      [
        "SELECT T2.Template_Type_Code FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T1.Template_Type_Code NOT IN ( SELECT T2.Template_Type_Code FROM Templates AS T2 )",
        -13.78862190246582
      ],
      [
        "SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 EXCEPT SELECT T2.Document_Description FROM Documents AS T2",
        -13.940313339233398
      ],
      [
        "SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 EXCEPT SELECT DISTINCT T2.Template_Type_Code FROM Templates AS T2",
        -14.169960021972656
      ],
      [
        "SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 UNION SELECT T2.Document_Name FROM Documents AS T2",
        -14.257344722747803
      ],
      [
        "SELECT Template_Type_Code FROM Ref_Template_Types",
        -16.79344367980957
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 EXCEPT SELECT T2.Template_Type_Code FROM Templates AS T2",
    "predicted_parse": "SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 EXCEPT SELECT T2.Template_Type_Code FROM Templates AS T2",
    "predicted_parse_explanation": [
      "Step 1: find the reference template types 's template type code in reference template types table",
      "Step 2: find the templates 's template type code in templates table",
      "Step 3: show the rows that are in the results of step 1 but not in the results of step 2"
    ],
    "template_feedback": "in step 1 , use templates table in place of reference template types table . in step 2 , additionally use the information from the documents table besides the templates table .",
    "primary_span": [
      [
        4,
        6
      ],
      [
        19,
        26
      ]
    ],
    "secondary_span": [
      [
        7,
        14
      ],
      [
        27,
        31
      ]
    ],
    "edits": [
      "templates",
      "reference template types",
      "documents"
    ],
    "edits_original": "< from > add templates </ from > < from > remove reference template types </ from > < from > add documents </ from >"
  },
  {
    "db_id": "tvshow",
    "feedback": "Title should be replaced with episode.",
    "question": "What is the weekly rank for the episode \"A Love of a Lifetime\"?",
    "gold_parse": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\"",
    "beam": [
      [
        "SELECT T2.Weekly_Rank FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T2.Channel = T1.id JOIN Cartoon AS T3 ON T1.id = T3.Channel WHERE T3.Title = value",
        -0.15606689453125
      ],
      [
        "SELECT Weekly_Rank FROM TV_series WHERE Episode = value",
        -1.9345378875732422
      ],
      [
        "SELECT T2.Weekly_Rank FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = value",
        -12.379047393798828
      ],
      [
        "SELECT T2.Weekly_Rank FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.Language = value",
        -13.671486854553223
      ],
      [
        "SELECT T2.Weekly_Rank FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T2.Channel = T1.id JOIN Cartoon AS T3 ON T1.id = T3.Channel WHERE T3.Written_by = value",
        -14.221113204956055
      ],
      [
        "SELECT T2.Weekly_Rank FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T2.Channel = T1.id JOIN Cartoon AS T3 ON T1.id = T3.Channel WHERE T3.Title LIKE value",
        -14.475969314575195
      ],
      [
        "SELECT DISTINCT T2.Weekly_Rank FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T2.Channel = T1.id JOIN Cartoon AS T3 ON T1.id = T3.Channel WHERE T3.Title = value",
        -14.518977165222168
      ],
      [
        "SELECT T2.Weekly_Rank , T2.Weekly_Rank FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T2.Channel = T1.id JOIN Cartoon AS T3 ON T1.id = T3.Channel WHERE T3.Title = value",
        -15.621894836425781
      ],
      [
        "SELECT Weekly_Rank FROM TV_series WHERE Episode LIKE value",
        -15.70304012298584
      ],
      [
        "SELECT T1.Pay_per_view_PPV FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = value",
        -15.787225723266602
      ],
      [
        "SELECT T2.Weekly_Rank , T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T2.Channel = T1.id JOIN Cartoon AS T3 ON T1.id = T3.Channel WHERE T3.Title = value",
        -15.825493812561035
      ],
      [
        "SELECT Weekly_Rank FROM TV_series WHERE Rating = value",
        -16.146553993225098
      ],
      [
        "SELECT DISTINCT Weekly_Rank FROM TV_series WHERE Episode = value",
        -16.276631355285645
      ],
      [
        "SELECT Count ( T2.Weekly_Rank ) FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T2.Channel = T1.id JOIN Cartoon AS T3 ON T1.id = T3.Channel WHERE T3.Title = value",
        -16.320164680480957
      ],
      [
        "SELECT Weekly_Rank FROM TV_series",
        -16.42201519012451
      ],
      [
        "SELECT T2.Weekly_Rank , T3.Title FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T2.Channel = T1.id JOIN Cartoon AS T3 ON T1.id = T3.Channel WHERE T3.Title = value",
        -16.864529609680176
      ],
      [
        "SELECT DISTINCT T2.Weekly_Rank FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T2.Channel = T1.id JOIN Cartoon AS T3 ON T1.id = T3.Channel WHERE T3.Title = value",
        -16.971991539001465
      ],
      [
        "SELECT T2.Weekly_Rank FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T2.Channel = T1.id JOIN Cartoon AS T3 ON T1.id = T3.Channel WHERE DISTINCT T3.Title = value",
        -17.030048370361328
      ],
      [
        "SELECT T2.18_49_Rating_Share FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T2.Channel = T1.id JOIN Cartoon AS T3 ON T1.id = T3.Channel WHERE T3.Title = value",
        -17.507391929626465
      ],
      [
        "SELECT T2.Weekly_Rank FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T2.Channel = T1.id JOIN Cartoon AS T3 ON T1.id = T3.Channel WHERE T3.Title = value LIMIT value",
        -17.548782348632812
      ]
    ],
    "predicted_parse_with_values": "SELECT T2.Weekly_Rank FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T2.Channel = T1.id JOIN Cartoon AS T3 ON T1.id = T3.Channel WHERE T3.Title = \"A Love of a Lifetime\"",
    "predicted_parse": "SELECT T2.Weekly_Rank FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T2.Channel = T1.id JOIN Cartoon AS T3 ON T1.id = T3.Channel WHERE T3.Title = value",
    "predicted_parse_explanation": [
      "Step 1: for each row in tv channel table , find the corresponding rows in tv series table and in cartoon table",
      "Step 2: find the weekly rank of the results of step 1 whose title equals A Love of a Lifetime"
    ],
    "template_feedback": "in step 1 , do not use the cartoon table and tv channel table . in step 2 , consider the episode equals A Love of a Lifetime conditions in place of the title equals A Love of a Lifetime conditions .",
    "primary_span": [
      [
        4,
        14
      ],
      [
        19,
        28
      ]
    ],
    "secondary_span": [
      [
        4,
        14
      ],
      [
        29,
        41
      ]
    ],
    "edits": [
      "tv channel",
      "cartoon",
      "episode equals \"A Love of a Lifetime\"",
      "title equals \"A Love of a Lifetime\""
    ],
    "edits_original": "< from > remove tv channel </ from > < from > remove cartoon </ from > < where > add episode equals \" A Love of a Lifetime \" </ where > < where > remove title equals \" A Love of a Lifetime \" </ where >"
  },
  {
    "db_id": "dog_kennels",
    "feedback": "Have to substitute owner id with corresponding size code of dogs table .",
    "question": "What are each owner's first name, last name, and the size of their dog?",
    "gold_parse": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
    "beam": [
      [
        "SELECT first_name , last_name , owner_id FROM Owners",
        -0.8441896438598633
      ],
      [
        "SELECT T1.first_name , T1.last_name , T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id",
        -1.049952507019043
      ],
      [
        "SELECT T1.first_name , T1.last_name , T2.weight FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id",
        -1.620455265045166
      ],
      [
        "SELECT T1.first_name , T1.last_name , T2.owner_id FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id",
        -4.174918174743652
      ],
      [
        "SELECT T2.first_name , T2.last_name , T1.size_description FROM Sizes AS T1 JOIN Owners AS T2 JOIN Dogs AS T3 ON T1.size_code = T3.size_code AND T3.owner_id = T2.owner_id",
        -5.960669040679932
      ],
      [
        "SELECT T1.first_name , T1.last_name , T2.age FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id",
        -6.491628170013428
      ],
      [
        "SELECT first_name , last_name , email_address FROM Owners",
        -7.742936134338379
      ],
      [
        "SELECT first_name , last_name , last_name FROM Owners",
        -7.933233737945557
      ],
      [
        "SELECT first_name , last_name , home_phone FROM Owners",
        -8.315518379211426
      ],
      [
        "SELECT T2.first_name , T2.last_name , T1.breed_name FROM Breeds AS T1 JOIN Owners AS T2 JOIN Dogs AS T3 ON T1.breed_code = T3.breed_code AND T3.owner_id = T2.owner_id",
        -8.643982887268066
      ],
      [
        "SELECT T2.first_name , T2.last_name , T1.charge_amount FROM Charges AS T1 JOIN Owners AS T2",
        -8.698716163635254
      ],
      [
        "SELECT T1.first_name , T1.last_name , T1.owner_id FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T2.name = value",
        -8.89725399017334
      ],
      [
        "SELECT T1.first_name , T1.last_name , T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id",
        -8.983692169189453
      ],
      [
        "SELECT T1.first_name , T1.last_name , T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T2.name = value",
        -9.196624755859375
      ],
      [
        "SELECT T1.first_name , T1.last_name , T2.date_arrived FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id",
        -9.298033714294434
      ],
      [
        "SELECT first_name , last_name , cell_number FROM Owners",
        -9.313876152038574
      ],
      [
        "SELECT first_name , last_name , city FROM Owners",
        -9.345757484436035
      ],
      [
        "SELECT first_name , last_name , state FROM Owners",
        -9.363125801086426
      ],
      [
        "SELECT T1.first_name , T1.last_name , T2.date_of_birth FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id",
        -9.560540199279785
      ],
      [
        "SELECT first_name , last_name FROM Owners",
        -12.786704063415527
      ]
    ],
    "predicted_parse_with_values": "SELECT first_name , last_name , owner_id FROM Owners",
    "predicted_parse": "SELECT first_name , last_name , owner_id FROM Owners",
    "predicted_parse_explanation": [
      "find the first name , last name , owner id in owners table"
    ],
    "template_feedback": "additionally use the information from the dogs table besides the owners table . find size code in place of owners 's owner id .",
    "primary_span": [
      [
        0,
        7
      ],
      [
        13,
        15
      ]
    ],
    "secondary_span": [
      [
        8,
        12
      ],
      [
        16,
        23
      ]
    ],
    "edits": [
      "size code",
      "owner id",
      "dogs"
    ],
    "edits_original": "< select > add size code </ select > < select > remove owner id </ select > < from > add dogs </ from >"
  },
  {
    "db_id": "network_1",
    "feedback": "Find grade whose name count for each grade is greater than or equals to 4.",
    "question": "Which grades have 4 or more high schoolers?",
    "gold_parse": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4",
    "beam": [
      [
        "SELECT grade FROM Highschooler WHERE grade = value OR grade = value",
        -0.08521747589111328
      ],
      [
        "SELECT grade FROM Highschooler WHERE grade > = value",
        -3.7962779998779297
      ],
      [
        "SELECT grade FROM Highschooler WHERE grade = value GROUP BY ID HAVING Count ( * ) > = value",
        -4.213011860847473
      ],
      [
        "SELECT T1.grade FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id WHERE T1.grade = value GROUP BY T2.student_id HAVING Count ( * ) > = value",
        -4.400353789329529
      ],
      [
        "SELECT T1.grade FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id WHERE T1.grade > = value GROUP BY T2.student_id HAVING Count ( * ) > = value",
        -4.540754556655884
      ],
      [
        "SELECT grade FROM Highschooler WHERE grade = value GROUP BY grade HAVING Count ( * ) > = value",
        -5.184301137924194
      ],
      [
        "SELECT grade FROM Highschooler WHERE grade > = value GROUP BY grade HAVING Count ( * ) > = value",
        -5.5911785364151
      ],
      [
        "SELECT grade FROM Highschooler WHERE grade > = value GROUP BY ID HAVING Count ( * ) > = value",
        -6.07912278175354
      ],
      [
        "SELECT name FROM Highschooler WHERE grade = value OR grade = value",
        -6.364130020141602
      ],
      [
        "SELECT name FROM Highschooler WHERE grade > = value",
        -6.480154037475586
      ],
      [
        "SELECT DISTINCT grade FROM Highschooler WHERE grade = value OR grade = value",
        -6.871904134750366
      ],
      [
        "SELECT T1.grade FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id WHERE T1.grade = value GROUP BY T2.liked_id HAVING Count ( * ) > = value",
        -7.412355422973633
      ],
      [
        "SELECT grade FROM Highschooler WHERE grade = value GROUP BY name HAVING Count ( * ) > = value",
        -7.724069118499756
      ],
      [
        "SELECT T1.grade FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id WHERE T1.grade = value OR T1.grade = value GROUP BY T2.student_id HAVING Count ( * ) > = value",
        -7.836144924163818
      ],
      [
        "SELECT grade FROM Highschooler WHERE grade = value INTERSECT SELECT grade FROM Highschooler WHERE grade = value",
        -8.011418491601944
      ],
      [
        "SELECT T1.grade FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id WHERE T1.grade = value GROUP BY T2.friend_id HAVING Count ( * ) > = value",
        -8.051509380340576
      ],
      [
        "SELECT grade FROM Highschooler WHERE grade = value OR grade = value GROUP BY ID HAVING Count ( * ) > = value",
        -8.206290006637573
      ],
      [
        "SELECT grade FROM Highschooler WHERE grade < = value",
        -8.325226783752441
      ],
      [
        "SELECT grade FROM Highschooler WHERE grade > = value OR grade = value",
        -8.387419700622559
      ],
      [
        "SELECT ID FROM Highschooler WHERE grade > = value",
        -9.051578521728516
      ]
    ],
    "predicted_parse_with_values": "SELECT grade FROM Highschooler WHERE grade = 9 OR grade = 4",
    "predicted_parse": "SELECT grade FROM Highschooler WHERE grade = value OR grade = value",
    "predicted_parse_explanation": [
      "find the grade in high schooler table whose grade equals 9 or grade equals 4"
    ],
    "template_feedback": "remove the grade equals 4 and grade equals 9 conditions . find for each value of grade whose number of rows greater than or equals 4 .",
    "primary_span": [
      [
        0,
        10
      ],
      [
        11,
        26
      ]
    ],
    "secondary_span": [],
    "edits": [
      "grade equals 9 or grade equals 4",
      "grade",
      "number of rows greater than or equals to 4"
    ],
    "edits_original": "< where > remove grade equals 9 or grade equals 4 </ where > < groupBy > add grade </ groupBy > < having > add number of rows greater than or equals to 4 </ having >"
  },
  {
    "db_id": "network_1",
    "feedback": "Change grade with name , Find number of the corresponding rows to Highschooler's id in likes table .",
    "question": "What are the names of high schoolers who have likes, and how many likes does each have?",
    "gold_parse": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
    "beam": [
      [
        "SELECT Count ( * ) , grade FROM Highschooler GROUP BY grade",
        -0.8020381927490234
      ],
      [
        "SELECT name , Count ( * ) FROM Highschooler GROUP BY grade",
        -1.477783203125
      ],
      [
        "SELECT name , grade FROM Highschooler GROUP BY grade",
        -1.69573974609375
      ],
      [
        "SELECT Count ( DISTINCT name ) , grade FROM Highschooler GROUP BY grade",
        -2.0090560913085938
      ],
      [
        "SELECT Count ( * ) , T1.grade FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id",
        -6.700167179107666
      ],
      [
        "SELECT T1.name , T1.grade FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id",
        -6.887655735015869
      ],
      [
        "SELECT Count ( * ) , T1.grade FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id GROUP BY T2.liked_id",
        -7.726169586181641
      ],
      [
        "SELECT T1.name , T1.grade FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id GROUP BY T2.liked_id",
        -7.760010242462158
      ],
      [
        "SELECT Count ( * ) , T1.grade FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id GROUP BY T2.student_id",
        -7.779569625854492
      ],
      [
        "SELECT grade , Count ( * ) FROM Highschooler GROUP BY grade",
        -7.788818836212158
      ],
      [
        "SELECT Count ( DISTINCT T1.name ) , T1.grade FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id",
        -7.9696455001831055
      ],
      [
        "SELECT T1.name , T1.grade FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id GROUP BY T2.student_id",
        -7.988757133483887
      ],
      [
        "SELECT name , grade , Count ( * ) FROM Highschooler GROUP BY grade",
        -8.406134605407715
      ],
      [
        "SELECT name , Count ( DISTINCT grade ) FROM Highschooler GROUP BY grade",
        -8.844220161437988
      ],
      [
        "SELECT Count ( DISTINCT T1.name ) , T1.grade FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id GROUP BY T2.liked_id",
        -9.010663509368896
      ],
      [
        "SELECT Count ( DISTINCT T1.name ) , T1.grade FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id GROUP BY T2.student_id",
        -9.060196876525879
      ],
      [
        "SELECT name , grade FROM Highschooler",
        -12.540884971618652
      ],
      [
        "SELECT Count ( * ) , grade FROM Highschooler",
        -12.576220512390137
      ],
      [
        "SELECT Count ( DISTINCT name ) , grade FROM Highschooler",
        -14.001798629760742
      ],
      [
        "SELECT name FROM Highschooler GROUP BY grade",
        -14.015847206115723
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) , grade FROM Highschooler GROUP BY grade",
    "predicted_parse": "SELECT Count ( * ) , grade FROM Highschooler GROUP BY grade",
    "predicted_parse_explanation": [
      "find each value of grade in high schooler table along with the number of the corresponding rows to each value"
    ],
    "template_feedback": "additionally use the information from the likes table besides the high schooler table . find for each value of student id in place of grade . find name in place of grade .",
    "primary_span": [
      [
        0,
        7
      ],
      [
        14,
        20
      ],
      [
        26,
        27
      ]
    ],
    "secondary_span": [
      [
        8,
        13
      ],
      [
        21,
        25
      ],
      [
        28,
        32
      ]
    ],
    "edits": [
      "name",
      "grade",
      "likes",
      "student id",
      "grade"
    ],
    "edits_original": "< select > add name </ select > < select > remove grade </ select > < from > add likes </ from > < groupBy > add student id </ groupBy > < groupBy > remove grade </ groupBy >"
  },
  {
    "db_id": "wta_1",
    "feedback": "In step 1, You need use rankings table , In step 2 , Use tours.",
    "question": "What is the first name and country code of the player with the most tours?",
    "gold_parse": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1",
    "beam": [
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.loser_id ORDER BY Count ( * ) Desc LIMIT value",
        -0.11469268798828125
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.tourney_id ORDER BY Count ( * ) Desc LIMIT value",
        -2.712191581726074
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.winner_id ORDER BY Count ( * ) Desc LIMIT value",
        -3.7815723419189453
      ],
      [
        "SELECT first_name , country_code FROM players GROUP BY player_id ORDER BY Count ( * ) Desc LIMIT value",
        -4.833338737487793
      ],
      [
        "SELECT first_name , country_code FROM players ORDER BY birth_date Desc LIMIT value",
        -4.906695365905762
      ],
      [
        "SELECT first_name , country_code FROM players GROUP BY country_code ORDER BY Count ( * ) Desc LIMIT value",
        -6.325872421264648
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.winner_name ORDER BY Count ( * ) Desc LIMIT value",
        -7.298305511474609
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.loser_ioc ORDER BY Count ( * ) Desc LIMIT value",
        -8.190587043762207
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T2.player_id ORDER BY Count ( * ) Desc LIMIT value",
        -8.378937721252441
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.loser_id HAVING Count ( * ) < value ORDER BY Count ( * ) Desc LIMIT value",
        -8.955629348754883
      ],
      [
        "SELECT first_name , country_code FROM players GROUP BY birth_date ORDER BY Count ( * ) Desc LIMIT value",
        -9.123099327087402
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.loser_name ORDER BY Count ( * ) Desc LIMIT value",
        -9.171735763549805
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.winner_entry ORDER BY Count ( * ) Desc LIMIT value",
        -9.371784210205078
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.winner_ioc ORDER BY Count ( * ) Desc LIMIT value",
        -9.765314102172852
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.loser_entry ORDER BY Count ( * ) Desc LIMIT value",
        -9.809050559997559
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.tourney_name ORDER BY Count ( * ) Desc LIMIT value",
        -10.181685447692871
      ],
      [
        "SELECT first_name , country_code FROM players GROUP BY first_name ORDER BY Count ( * ) Desc LIMIT value",
        -10.21143627166748
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.loser_id",
        -10.90723991394043
      ],
      [
        "SELECT first_name , country_code FROM players ORDER BY first_name Desc LIMIT value",
        -11.067732810974121
      ],
      [
        "SELECT first_name , country_code FROM players",
        -13.560832023620605
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.loser_id ORDER BY Count ( * ) Desc LIMIT 1",
    "predicted_parse": "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.loser_id ORDER BY Count ( * ) Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: for each row in players table , find the corresponding rows in matches table",
      "Step 2: find the number of rows of each value of loser id of the results of step 1",
      "Step 3: find the first name and country code of the results of step 1 with largest value in the results of step 2"
    ],
    "template_feedback": "in step 1 , use rankings table in place of matches table in step 2 , do not find for each value of loser id . in step 3 , order the results by tours in place of number of rows .",
    "primary_span": [
      [
        4,
        6
      ],
      [
        16,
        25
      ],
      [
        30,
        34
      ]
    ],
    "secondary_span": [
      [
        7,
        11
      ],
      [
        35,
        41
      ]
    ],
    "edits": [
      "rankings",
      "matches",
      "loser id",
      "tours",
      "number of rows"
    ],
    "edits_original": "< from > add rankings </ from > < from > remove matches </ from > < groupBy > remove loser id </ groupBy > < orderBy > add tours </ orderBy > < orderBy > remove number of rows </ orderBy >"
  },
  {
    "db_id": "flight_2",
    "feedback": "swap between airlines and flights table and 1st and 2nd airline with source airport.",
    "question": "How many flights fly from Aberdeen to Ashley?",
    "gold_parse": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"",
    "beam": [
      [
        "SELECT Count ( * ) FROM airlines WHERE Airline = value AND Airline = value",
        -0.048213958740234375
      ],
      [
        "SELECT Count ( * ) FROM airlines WHERE Airline = value AND Country = value",
        -3.1008858680725098
      ],
      [
        "SELECT Count ( * ) FROM airlines WHERE Airline = value AND Abbreviation = value",
        -6.779435157775879
      ],
      [
        "SELECT Count ( * ) FROM airlines WHERE Airline = value",
        -7.510384559631348
      ],
      [
        "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = value AND T1.Airline = value",
        -9.123551368713379
      ],
      [
        "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T1.Airline = value AND T2.Country = value",
        -9.13187313079834
      ],
      [
        "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T1.Airline = value AND T2.CountryAbbrev = value",
        -9.781883239746094
      ],
      [
        "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T1.Airline = value AND T2.City = value",
        -10.545140266418457
      ],
      [
        "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T1.Airline = value AND T2.AirportName = value",
        -10.545933723449707
      ],
      [
        "SELECT Count ( * ) FROM airlines WHERE Country = value AND Airline = value",
        -10.910725593566895
      ],
      [
        "SELECT Count ( * ) FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Airline = value AND T2.DestAirport = value",
        -11.895478248596191
      ],
      [
        "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value AND T1.Airline = value",
        -12.685919761657715
      ],
      [
        "SELECT Count ( * ) FROM airlines WHERE Abbreviation = value AND Airline = value",
        -13.173816680908203
      ],
      [
        "SELECT Count ( * ) FROM airlines WHERE Airline = value AND * IN ( SELECT * FROM airlines WHERE Airline = value )",
        -13.345569610595703
      ],
      [
        "SELECT Count ( * ) FROM airlines AS T1 JOIN flights AS T2 WHERE T2.DestAirport = value AND T1.Airline = value",
        -13.626212120056152
      ],
      [
        "SELECT Count ( * ) FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Airline = value AND T2.SourceAirport = value",
        -13.645692825317383
      ],
      [
        "SELECT Count ( * ) FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Airline = value AND T2.Airline = value",
        -13.730290412902832
      ],
      [
        "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = value AND T1.Country = value",
        -13.739559650421143
      ],
      [
        "SELECT Count ( * ) FROM airlines WHERE Airline = value AND Airline > value",
        -13.912249088287354
      ],
      [
        "SELECT Count ( * ) FROM airlines",
        -18.78858184814453
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM airlines WHERE Airline = \"Aberdeen\" AND Airline = \"Ashley\"",
    "predicted_parse": "SELECT Count ( * ) FROM airlines WHERE Airline = value AND Airline = value",
    "predicted_parse_explanation": [
      "find the number of rows in airlines table whose airline name equals Aberdeen and airline name equals Ashley"
    ],
    "template_feedback": "use airports table and flights table in place of airlines table . consider the city equals Aberdeen and city equals Ashley conditions in place of the airlines 's airline name equals Ashley and airlines 's airline name equals Aberdeen conditions .",
    "primary_span": [
      [
        0,
        5
      ],
      [
        12,
        21
      ]
    ],
    "secondary_span": [
      [
        6,
        11
      ],
      [
        22,
        40
      ]
    ],
    "edits": [
      "flights",
      "airports",
      "airlines",
      "city equals \"Ashley\"",
      "city equals \"Aberdeen\"",
      "airline name equals \"Aberdeen\"",
      "airline name equals \"Ashley\""
    ],
    "edits_original": "< from > add flights </ from > < from > add airports </ from > < from > remove airlines </ from > < where > add city equals \" Ashley \" </ where > < where > add city equals \" Aberdeen \" </ where > < where > remove airline name equals \" Aberdeen \" </ where > < where > remove airline name equals \" Ashley \" </ where >"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "feedback": "Make sure to arrange ID of document.",
    "question": "Return the different document ids along with the number of paragraphs corresponding to each, ordered by id.",
    "gold_parse": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id",
    "beam": [
      [
        "SELECT Document_ID , Count ( * ) FROM Paragraphs GROUP BY Document_ID ORDER BY Count ( * ) Asc",
        -0.0008401870727539062
      ],
      [
        "SELECT Document_ID , Count ( * ) FROM Paragraphs GROUP BY Document_ID ORDER BY Count ( * ) Desc",
        -8.168935775756836
      ],
      [
        "SELECT Document_ID , Count ( * ) FROM Paragraphs GROUP BY Document_ID ORDER BY Sum ( Paragraph_ID ) Asc",
        -9.196168661117554
      ],
      [
        "SELECT Document_ID , Sum ( Paragraph_ID ) FROM Paragraphs GROUP BY Document_ID ORDER BY Count ( * ) Asc",
        -9.345266819000244
      ],
      [
        "SELECT T2.Document_ID , Count ( * ) FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T2.Document_ID ORDER BY Sum ( T1.Template_ID ) Asc",
        -9.353832483291626
      ],
      [
        "SELECT Document_ID , Count ( * ) FROM Paragraphs GROUP BY Document_ID",
        -9.619437217712402
      ],
      [
        "SELECT Document_ID , Sum ( * ) FROM Paragraphs GROUP BY Document_ID ORDER BY Count ( * ) Asc",
        -10.959320545196533
      ],
      [
        "SELECT Document_ID , Count ( * ) FROM Paragraphs GROUP BY Document_ID ORDER BY Sum ( * ) Asc",
        -11.173646926879883
      ],
      [
        "SELECT T2.Document_ID , Count ( * ) FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T2.Document_ID ORDER BY T1.Template_ID Asc",
        -11.381858825683594
      ],
      [
        "SELECT T1.Document_ID , Count ( * ) FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T2.Document_ID ORDER BY Count ( * ) Asc",
        -11.578330993652344
      ],
      [
        "SELECT T2.Document_ID , Sum ( T1.Template_ID ) FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T2.Document_ID ORDER BY Count ( * ) Asc",
        -11.614113330841064
      ],
      [
        "SELECT Document_ID , Count ( * ) FROM Paragraphs GROUP BY Document_ID ORDER BY Document_ID Asc",
        -11.681256294250488
      ],
      [
        "SELECT T2.Document_ID , Count ( * ) FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T2.Document_ID ORDER BY Sum ( T1.Document_ID ) Asc",
        -11.962863683700562
      ],
      [
        "SELECT Document_ID , Count ( * ) FROM Paragraphs GROUP BY Document_ID ORDER BY Sum ( Paragraph_Text ) Asc",
        -12.00970256328582
      ],
      [
        "SELECT Document_ID , Count ( * ) , Document_ID FROM Paragraphs GROUP BY Document_ID ORDER BY Count ( * ) Asc",
        -12.741480827331543
      ],
      [
        "SELECT Document_ID FROM Paragraphs GROUP BY Document_ID ORDER BY Count ( * ) Asc",
        -12.929536819458008
      ],
      [
        "SELECT T1.Template_ID , Count ( * ) FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T2.Document_ID ORDER BY Count ( * ) Asc",
        -12.962247848510742
      ],
      [
        "SELECT Document_ID , Count ( * ) FROM Paragraphs GROUP BY Document_ID ORDER BY Count ( * ) Asc LIMIT value",
        -13.51868724822998
      ],
      [
        "SELECT Document_ID , Count ( * ) FROM Paragraphs GROUP BY Document_ID HAVING Count ( * ) > = value ORDER BY Count ( * ) Asc",
        -13.528483390808105
      ],
      [
        "SELECT T2.Document_ID , Count ( * ) FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID ORDER BY T1.Template_ID Asc",
        -13.854952812194824
      ]
    ],
    "predicted_parse_with_values": "SELECT Document_ID , Count ( * ) FROM Paragraphs GROUP BY Document_ID ORDER BY Count ( * ) Asc",
    "predicted_parse": "SELECT Document_ID , Count ( * ) FROM Paragraphs GROUP BY Document_ID ORDER BY Count ( * ) Asc",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of document id in paragraphs table",
      "Step 2: find the document id and number of rows in paragraphs table ordered ascending by the results of step 1"
    ],
    "template_feedback": "in step 2 , order the results by document id in place of number of rows .",
    "primary_span": [
      [
        4,
        9
      ]
    ],
    "secondary_span": [
      [
        10,
        16
      ]
    ],
    "edits": [
      "document id",
      "number of rows"
    ],
    "edits_original": "< orderBy > add document id </ orderBy > < orderBy > remove number of rows </ orderBy >"
  },
  {
    "db_id": "pets_1",
    "feedback": "Find student id in has pet table with corresponding number of rows of each value .",
    "question": "Find the number of pets for each student who has any pet and student id.",
    "gold_parse": "SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid",
    "beam": [
      [
        "SELECT Count ( * ) FROM Student",
        -0.05356597900390625
      ],
      [
        "SELECT Count ( * ) , StuID FROM Student GROUP BY StuID",
        -4.155095100402832
      ],
      [
        "SELECT Count ( * ) , T1.StuID FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID GROUP BY T2.StuID",
        -4.342970848083496
      ],
      [
        "SELECT Count ( * ) , T1.StuID FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID GROUP BY T2.StuID HAVING Count ( * ) > = value",
        -4.9599103927612305
      ],
      [
        "SELECT Count ( * ) , T1.StuID FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID WHERE T2.PetID = value GROUP BY T2.StuID",
        -5.898468971252441
      ],
      [
        "SELECT Count ( * ) , StuID FROM Has_Pet GROUP BY StuID",
        -5.903482437133789
      ],
      [
        "SELECT Count ( * ) , StuID FROM Student GROUP BY StuID HAVING Count ( * ) > = value",
        -6.0218706130981445
      ],
      [
        "SELECT Count ( * ) , StuID FROM Student",
        -6.051037788391113
      ],
      [
        "SELECT Count ( * ) , T2.StuID FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID GROUP BY T1.StuID",
        -6.059257507324219
      ],
      [
        "SELECT Count ( * ) FROM Has_Pet WHERE PetID = value",
        -6.742471694946289
      ],
      [
        "SELECT Count ( * ) , StuID FROM Has_Pet GROUP BY StuID HAVING Count ( * ) > = value",
        -7.403480529785156
      ],
      [
        "SELECT Count ( * ) , T1.StuID FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID WHERE T2.PetID = value GROUP BY T1.StuID",
        -7.479474067687988
      ],
      [
        "SELECT Count ( * ) , StuID FROM Has_Pet",
        -7.732541084289551
      ],
      [
        "SELECT Count ( * ) , T2.StuID FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID GROUP BY T1.StuID HAVING Count ( * ) > = value",
        -7.9271392822265625
      ],
      [
        "SELECT Count ( * ) , PetID FROM Has_Pet GROUP BY StuID",
        -8.779053688049316
      ],
      [
        "SELECT Count ( * ) , T2.PetID FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID GROUP BY T1.StuID",
        -9.365012168884277
      ],
      [
        "SELECT Sum ( Sex ) FROM Student",
        -11.789400100708008
      ],
      [
        "SELECT Count ( * ) , PetID FROM Has_Pet",
        -11.900425434112549
      ],
      [
        "SELECT Count ( DISTINCT StuID ) FROM Has_Pet",
        -12.425919532775879
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM Student",
        -15.011297225952148
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM Student",
    "predicted_parse": "SELECT Count ( * ) FROM Student",
    "predicted_parse_explanation": [
      "find the number of rows in student table"
    ],
    "template_feedback": "additionally use the information from the has pet table besides the student table . find for each value of student 's student id . additionally find student 's student id .",
    "primary_span": [
      [
        0,
        8
      ],
      [
        14,
        23
      ],
      [
        24,
        30
      ]
    ],
    "secondary_span": [
      [
        9,
        13
      ]
    ],
    "edits": [
      "student id",
      "has pet",
      "student id"
    ],
    "edits_original": "< select > add student id </ select > < from > add has pet </ from > < groupBy > add student id </ groupBy >"
  },
  {
    "db_id": "wta_1",
    "feedback": "Change matches table with rankings table in step 1 , loser id with tours in step 2.",
    "question": "What is the first name and country code of the player with the most tours?",
    "gold_parse": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1",
    "beam": [
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.loser_id ORDER BY Count ( * ) Desc LIMIT value",
        -0.11469268798828125
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.tourney_id ORDER BY Count ( * ) Desc LIMIT value",
        -2.712191581726074
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.winner_id ORDER BY Count ( * ) Desc LIMIT value",
        -3.7815723419189453
      ],
      [
        "SELECT first_name , country_code FROM players GROUP BY player_id ORDER BY Count ( * ) Desc LIMIT value",
        -4.833338737487793
      ],
      [
        "SELECT first_name , country_code FROM players ORDER BY birth_date Desc LIMIT value",
        -4.906695365905762
      ],
      [
        "SELECT first_name , country_code FROM players GROUP BY country_code ORDER BY Count ( * ) Desc LIMIT value",
        -6.325872421264648
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.winner_name ORDER BY Count ( * ) Desc LIMIT value",
        -7.298305511474609
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.loser_ioc ORDER BY Count ( * ) Desc LIMIT value",
        -8.190587043762207
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T2.player_id ORDER BY Count ( * ) Desc LIMIT value",
        -8.378937721252441
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.loser_id HAVING Count ( * ) < value ORDER BY Count ( * ) Desc LIMIT value",
        -8.955629348754883
      ],
      [
        "SELECT first_name , country_code FROM players GROUP BY birth_date ORDER BY Count ( * ) Desc LIMIT value",
        -9.123099327087402
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.loser_name ORDER BY Count ( * ) Desc LIMIT value",
        -9.171735763549805
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.winner_entry ORDER BY Count ( * ) Desc LIMIT value",
        -9.371784210205078
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.winner_ioc ORDER BY Count ( * ) Desc LIMIT value",
        -9.765314102172852
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.loser_entry ORDER BY Count ( * ) Desc LIMIT value",
        -9.809050559997559
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.tourney_name ORDER BY Count ( * ) Desc LIMIT value",
        -10.181685447692871
      ],
      [
        "SELECT first_name , country_code FROM players GROUP BY first_name ORDER BY Count ( * ) Desc LIMIT value",
        -10.21143627166748
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.loser_id",
        -10.90723991394043
      ],
      [
        "SELECT first_name , country_code FROM players ORDER BY first_name Desc LIMIT value",
        -11.067732810974121
      ],
      [
        "SELECT first_name , country_code FROM players",
        -13.560832023620605
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.loser_id ORDER BY Count ( * ) Desc LIMIT 1",
    "predicted_parse": "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.loser_id ORDER BY Count ( * ) Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: for each row in players table , find the corresponding rows in matches table",
      "Step 2: find the number of rows of each value of loser id of the results of step 1",
      "Step 3: find the first name and country code of the results of step 1 with largest value in the results of step 2"
    ],
    "template_feedback": "in step 1 , use rankings table in place of matches table in step 2 , do not find for each value of loser id . in step 3 , order the results by tours in place of number of rows .",
    "primary_span": [
      [
        4,
        6
      ],
      [
        16,
        25
      ],
      [
        30,
        34
      ]
    ],
    "secondary_span": [
      [
        7,
        11
      ],
      [
        35,
        41
      ]
    ],
    "edits": [
      "rankings",
      "matches",
      "loser id",
      "tours",
      "number of rows"
    ],
    "edits_original": "< from > add rankings </ from > < from > remove matches </ from > < groupBy > remove loser id </ groupBy > < orderBy > add tours </ orderBy > < orderBy > remove number of rows </ orderBy >"
  },
  {
    "db_id": "world_1",
    "feedback": "you should substitute life expectancy in place of gnp old and verify that only republic government is being used. ",
    "question": "Give the average life expectancy for countries in Africa which are republics?",
    "gold_parse": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"",
    "beam": [
      [
        "SELECT Avg ( GNPOld ) FROM country WHERE Continent = value",
        -1.2809600830078125
      ],
      [
        "SELECT Avg ( LifeExpectancy ) FROM country WHERE Continent = value",
        -1.4579811096191406
      ],
      [
        "SELECT Avg ( GNPOld ) FROM country WHERE Region = value",
        -1.757319450378418
      ],
      [
        "SELECT Avg ( LifeExpectancy ) FROM country WHERE Region = value",
        -2.117508888244629
      ],
      [
        "SELECT Avg ( Population ) FROM country WHERE Continent = value",
        -2.1548280715942383
      ],
      [
        "SELECT Avg ( Population ) FROM country WHERE Region = value",
        -2.7998046875
      ],
      [
        "SELECT Avg ( GNPOld ) FROM country WHERE Name = value",
        -5.027615547180176
      ],
      [
        "SELECT Avg ( LifeExpectancy ) FROM country WHERE Name = value",
        -5.237897872924805
      ],
      [
        "SELECT Avg ( Population ) FROM country WHERE Name = value",
        -5.914853096008301
      ],
      [
        "SELECT Avg ( GNPOld ) FROM country WHERE LocalName = value",
        -6.465349197387695
      ],
      [
        "SELECT Avg ( GNP ) FROM country WHERE Continent = value",
        -6.6262311935424805
      ],
      [
        "SELECT Avg ( LifeExpectancy ) FROM country WHERE LocalName = value",
        -6.854654312133789
      ],
      [
        "SELECT Avg ( GNP ) FROM country WHERE Region = value",
        -7.250068664550781
      ],
      [
        "SELECT Avg ( Population ) FROM country WHERE LocalName = value",
        -7.525608062744141
      ],
      [
        "SELECT Avg ( GNPOld ) FROM country WHERE GovernmentForm = value",
        -9.859943389892578
      ],
      [
        "SELECT Avg ( LifeExpectancy ) FROM country WHERE GovernmentForm = value",
        -10.058977127075195
      ],
      [
        "SELECT Avg ( GNP ) FROM country WHERE Name = value",
        -10.421530723571777
      ],
      [
        "SELECT Avg ( GNPOld ) FROM country",
        -13.270462036132812
      ],
      [
        "SELECT Avg ( LifeExpectancy ) FROM country",
        -13.543645858764648
      ],
      [
        "SELECT Avg ( Population ) FROM country",
        -14.215372085571289
      ]
    ],
    "predicted_parse_with_values": "SELECT Avg ( GNPOld ) FROM country WHERE Continent = \"Africa\"",
    "predicted_parse": "SELECT Avg ( GNPOld ) FROM country WHERE Continent = value",
    "predicted_parse_explanation": [
      "find the average gnp old in country table whose continent equals Africa"
    ],
    "template_feedback": "additionally make sure that government form equals Republic . find average life expectancy in place of average gnp old .",
    "primary_span": [
      [
        0,
        8
      ],
      [
        9,
        12
      ]
    ],
    "secondary_span": [
      [
        13,
        19
      ]
    ],
    "edits": [
      "average life expectancy",
      "average gnp old",
      "government form equals \"Republic\""
    ],
    "edits_original": "< select > add average life expectancy </ select > < select > remove average gnp old </ select > < where > add government form equals \" Republic \" </ where >"
  },
  {
    "db_id": "wta_1",
    "feedback": "we should add winner name and winner age.",
    "question": "What are the names and ranks of the three youngest winners across all matches?",
    "gold_parse": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3",
    "beam": [
      [
        "SELECT tourney_name , winner_rank FROM matches ORDER BY loser_age Asc LIMIT value",
        -0.4659891128540039
      ],
      [
        "SELECT tourney_name , loser_rank FROM matches ORDER BY loser_age Asc LIMIT value",
        -1.030989646911621
      ],
      [
        "SELECT winner_name , winner_rank FROM matches ORDER BY loser_age Asc LIMIT value",
        -4.7537641525268555
      ],
      [
        "SELECT winner_name , loser_rank FROM matches ORDER BY loser_age Asc LIMIT value",
        -5.264349937438965
      ],
      [
        "SELECT loser_name , winner_rank FROM matches ORDER BY loser_age Asc LIMIT value",
        -6.961458206176758
      ],
      [
        "SELECT loser_name , loser_rank FROM matches ORDER BY loser_age Asc LIMIT value",
        -7.462125778198242
      ],
      [
        "SELECT tourney_name , winner_rank FROM matches ORDER BY winner_age Asc LIMIT value",
        -8.496054649353027
      ],
      [
        "SELECT tourney_name , loser_rank FROM matches ORDER BY winner_age Asc LIMIT value",
        -9.07669734954834
      ],
      [
        "SELECT tourney_name , winner_rank_points FROM matches ORDER BY loser_age Asc LIMIT value",
        -9.131550788879395
      ],
      [
        "SELECT T2.tourney_name , T3.ranking FROM players AS T1 JOIN matches AS T2 ON T2.loser_id = T1.player_id JOIN rankings AS T3 ON T1.player_id = T3.player_id ORDER BY T2.loser_age Asc LIMIT value",
        -9.985767364501953
      ],
      [
        "SELECT tourney_name , score FROM matches ORDER BY loser_age Asc LIMIT value",
        -11.306649208068848
      ],
      [
        "SELECT tourney_name , loser_rank_points FROM matches ORDER BY loser_age Asc LIMIT value",
        -11.973393440246582
      ],
      [
        "SELECT tourney_name , winner_rank FROM matches ORDER BY loser_age Asc",
        -12.643129348754883
      ],
      [
        "SELECT winner_name , winner_rank FROM matches ORDER BY winner_age Asc LIMIT value",
        -12.78389835357666
      ],
      [
        "SELECT tourney_name , loser_rank FROM matches ORDER BY loser_age Asc",
        -13.212809562683105
      ],
      [
        "SELECT tourney_name , winner_rank FROM matches",
        -13.298845291137695
      ],
      [
        "SELECT winner_name , loser_rank FROM matches ORDER BY winner_age Asc LIMIT value",
        -13.310547828674316
      ],
      [
        "SELECT winner_name , winner_rank_points FROM matches ORDER BY loser_age Asc LIMIT value",
        -13.360428810119629
      ],
      [
        "SELECT tourney_name FROM matches ORDER BY loser_age Asc LIMIT value",
        -13.497491836547852
      ],
      [
        "SELECT tourney_name , loser_rank FROM matches",
        -13.83720588684082
      ]
    ],
    "predicted_parse_with_values": "SELECT tourney_name , winner_rank FROM matches ORDER BY loser_age Asc LIMIT 3",
    "predicted_parse": "SELECT tourney_name , winner_rank FROM matches ORDER BY loser_age Asc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: find the tourney name and winner rank in matches table ordered ascending by loser age",
      "Step 2: only show the first 3 rows of the results"
    ],
    "template_feedback": "in step 1 , find winner name in place of tourney name . make sure no repetition in the results . order the results by winner age in place of loser age .",
    "primary_span": [
      [
        4,
        6
      ],
      [
        13,
        20
      ],
      [
        21,
        26
      ]
    ],
    "secondary_span": [
      [
        7,
        12
      ],
      [
        27,
        32
      ]
    ],
    "edits": [
      "distinct",
      "winner name",
      "tourney name",
      "winner age",
      "loser age"
    ],
    "edits_original": "< select > add distinct </ select > < select > add winner name </ select > < select > remove tourney name </ select > < orderBy > add winner age </ orderBy > < orderBy > remove loser age </ orderBy >"
  },
  {
    "db_id": "world_1",
    "feedback": "population should be more than africa's population of 103000.",
    "question": "Which Asian countries have a population that is larger than any country in Africa?",
    "gold_parse": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT max(population) FROM country WHERE Continent  =  \"Africa\")",
    "beam": [
      [
        "SELECT Name FROM country WHERE Continent = value AND Population > value",
        -0.19785118103027344
      ],
      [
        "SELECT GovernmentForm FROM country WHERE Continent = value AND Population > value",
        -2.7059688568115234
      ],
      [
        "SELECT Code2 FROM country WHERE Continent = value AND Population > value",
        -2.8800458908081055
      ],
      [
        "SELECT Continent FROM country WHERE Population > ( SELECT Max ( Population ) FROM country WHERE Continent = value )",
        -4.347561359405518
      ],
      [
        "SELECT Name FROM country WHERE Population > ( SELECT Max ( Population ) FROM country WHERE Continent = value )",
        -5.118539810180664
      ],
      [
        "SELECT T1.name FROM sqlite_sequence AS T1 JOIN country AS T2 WHERE T2.Continent = value AND T2.Population > value",
        -5.393017768859863
      ],
      [
        "SELECT Continent FROM country WHERE Population > ( SELECT Population FROM country WHERE Continent = value )",
        -5.406887531280518
      ],
      [
        "SELECT Name FROM country WHERE Continent = value AND Population > ( SELECT Max ( Population ) FROM country WHERE Continent = value )",
        -5.549849510192871
      ],
      [
        "SELECT Continent FROM country WHERE Population > value AND Continent = value",
        -5.646304607391357
      ],
      [
        "SELECT Name FROM country WHERE Continent = value AND SurfaceArea > value",
        -5.920941352844238
      ],
      [
        "SELECT GovernmentForm FROM country WHERE Population > ( SELECT Max ( Population ) FROM country WHERE Continent = value )",
        -5.934309005737305
      ],
      [
        "SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = value AND T2.Population > value",
        -6.049828052520752
      ],
      [
        "SELECT Name FROM country WHERE Population > ( SELECT Population FROM country WHERE Continent = value )",
        -6.076001167297363
      ],
      [
        "SELECT LocalName FROM country WHERE Continent = value AND Population > value",
        -6.428740978240967
      ],
      [
        "SELECT Name FROM country WHERE Continent = value AND Population > ( SELECT Population FROM country WHERE Continent = value )",
        -6.793160438537598
      ],
      [
        "SELECT GovernmentForm FROM country WHERE Population > ( SELECT Population FROM country WHERE Continent = value )",
        -6.9750871658325195
      ],
      [
        "SELECT Code FROM country WHERE Continent = value AND Population > value",
        -7.274576187133789
      ],
      [
        "SELECT Code2 FROM country WHERE Population > ( SELECT Max ( Population ) FROM country WHERE Continent = value )",
        -7.412487030029297
      ],
      [
        "SELECT Name FROM country WHERE Continent = value AND GNP > value",
        -7.599493980407715
      ],
      [
        "SELECT LifeExpectancy FROM country WHERE Continent = value AND Population > value",
        -7.778144836425781
      ]
    ],
    "predicted_parse_with_values": "SELECT Name FROM country WHERE Continent = \"Asia\" AND Population > 103000",
    "predicted_parse": "SELECT Name FROM country WHERE Continent = value AND Population > value",
    "predicted_parse_explanation": [
      "find the name in country table whose continent equals Asia and population greater than 103000"
    ],
    "template_feedback": "consider the population is greater than maximum population country whose continent equals Africa conditions in place of the population greater than 103000 conditions .",
    "primary_span": [
      [
        0,
        13
      ]
    ],
    "secondary_span": [
      [
        14,
        23
      ]
    ],
    "edits": [
      "population greater than SUBS1",
      "population greater than 103000",
      "maximum population",
      "country",
      "continent equals \"Africa\""
    ],
    "edits_original": "< where > add population greater than SUBS1 </ where > < where > remove population greater than 103000 </ where > < select > add maximum population </ select > < from > add country </ from > < where > add continent equals \" Africa \" </ where >"
  },
  {
    "db_id": "wta_1",
    "feedback": "I want name of winner, winner rank and age of winner.",
    "question": "Find the name and rank of the 3 youngest winners across all matches.",
    "gold_parse": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3",
    "beam": [
      [
        "SELECT tourney_name , loser_rank FROM matches ORDER BY loser_age Asc LIMIT value",
        -0.1535787582397461
      ],
      [
        "SELECT tourney_name , winner_rank FROM matches ORDER BY loser_age Asc LIMIT value",
        -2.074681282043457
      ],
      [
        "SELECT winner_name , loser_rank FROM matches ORDER BY loser_age Asc LIMIT value",
        -4.953305244445801
      ],
      [
        "SELECT tourney_name , score FROM matches ORDER BY loser_age Asc LIMIT value",
        -5.366766929626465
      ],
      [
        "SELECT tourney_name , loser_rank_points FROM matches ORDER BY loser_age Asc LIMIT value",
        -6.607052803039551
      ],
      [
        "SELECT winner_name , winner_rank FROM matches ORDER BY loser_age Asc LIMIT value",
        -6.863089561462402
      ],
      [
        "SELECT tourney_name , loser_rank FROM matches ORDER BY winner_age Asc LIMIT value",
        -6.924005508422852
      ],
      [
        "SELECT loser_name , loser_rank FROM matches ORDER BY loser_age Asc LIMIT value",
        -7.395624160766602
      ],
      [
        "SELECT tourney_name , winner_rank_points FROM matches ORDER BY loser_age Asc LIMIT value",
        -7.412196159362793
      ],
      [
        "SELECT tourney_name , winner_rank FROM matches ORDER BY winner_age Asc LIMIT value",
        -8.820825576782227
      ],
      [
        "SELECT T2.tourney_name , T3.ranking FROM players AS T1 JOIN matches AS T2 ON T2.loser_id = T1.player_id JOIN rankings AS T3 ON T1.player_id = T3.player_id ORDER BY T2.loser_age Asc LIMIT value",
        -9.015549659729004
      ],
      [
        "SELECT loser_name , winner_rank FROM matches ORDER BY loser_age Asc LIMIT value",
        -9.310729026794434
      ],
      [
        "SELECT winner_name , score FROM matches ORDER BY loser_age Asc LIMIT value",
        -10.660826683044434
      ],
      [
        "SELECT winner_name , loser_rank FROM matches ORDER BY winner_age Asc LIMIT value",
        -11.717334747314453
      ],
      [
        "SELECT winner_name , loser_rank_points FROM matches ORDER BY loser_age Asc LIMIT value",
        -11.72208309173584
      ],
      [
        "SELECT T2.tourney_name , T3.ranking_points FROM players AS T1 JOIN matches AS T2 ON T2.loser_id = T1.player_id JOIN rankings AS T3 ON T1.player_id = T3.player_id ORDER BY T2.loser_age Asc LIMIT value",
        -11.74496078491211
      ],
      [
        "SELECT tourney_name , score FROM matches ORDER BY winner_age Asc LIMIT value",
        -12.184057235717773
      ],
      [
        "SELECT tourney_name , loser_rank FROM matches ORDER BY loser_age Asc",
        -12.335358619689941
      ],
      [
        "SELECT tourney_name , loser_rank FROM matches",
        -12.64555549621582
      ],
      [
        "SELECT tourney_name FROM matches ORDER BY loser_age Asc LIMIT value",
        -13.787235260009766
      ]
    ],
    "predicted_parse_with_values": "SELECT tourney_name , loser_rank FROM matches ORDER BY loser_age Asc LIMIT 3",
    "predicted_parse": "SELECT tourney_name , loser_rank FROM matches ORDER BY loser_age Asc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: find the tourney name and loser rank in matches table ordered ascending by loser age",
      "Step 2: only show the first 3 rows of the results"
    ],
    "template_feedback": "in step 1 , find winner name and winner rank in place of tourney name and loser rank . make sure no repetition in the results . order the results by winner age in place of loser age .",
    "primary_span": [
      [
        4,
        9
      ],
      [
        19,
        26
      ],
      [
        27,
        32
      ]
    ],
    "secondary_span": [
      [
        10,
        18
      ],
      [
        33,
        38
      ]
    ],
    "edits": [
      "distinct",
      "winner name",
      "winner rank",
      "tourney name",
      "loser rank",
      "winner age",
      "loser age"
    ],
    "edits_original": "< select > add distinct </ select > < select > add winner name </ select > < select > add winner rank </ select > < select > remove tourney name </ select > < select > remove loser rank </ select > < orderBy > add winner age </ orderBy > < orderBy > remove loser age </ orderBy >"
  },
  {
    "db_id": "world_1",
    "feedback": "In step 1 Switch Africa with Asia , In step 2 Switch government form with name .",
    "question": "Which African countries have a smaller population than that of any country in Asia?",
    "gold_parse": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT min(population) FROM country WHERE Continent  =  \"Asia\")",
    "beam": [
      [
        "SELECT GovernmentForm FROM country WHERE Population < ( SELECT Population FROM country WHERE Continent = value )",
        -1.1117630004882812
      ],
      [
        "SELECT Code2 FROM country WHERE Population < ( SELECT Population FROM country WHERE Continent = value )",
        -1.3002738952636719
      ],
      [
        "SELECT Code2 FROM country WHERE Population < ( SELECT Min ( Population ) FROM country WHERE Continent = value )",
        -2.5299415588378906
      ],
      [
        "SELECT GovernmentForm FROM country WHERE Population < ( SELECT Min ( Population ) FROM country WHERE Continent = value )",
        -2.601713180541992
      ],
      [
        "SELECT Code2 FROM country WHERE Population < ( SELECT Population FROM country WHERE Continent = value ) AND Population < value",
        -3.0534515380859375
      ],
      [
        "SELECT GovernmentForm FROM country WHERE Population < ( SELECT LifeExpectancy FROM country WHERE Continent = value )",
        -3.1692676544189453
      ],
      [
        "SELECT Code2 FROM country WHERE Population < ( SELECT LifeExpectancy FROM country WHERE Continent = value )",
        -3.339596748352051
      ],
      [
        "SELECT GovernmentForm FROM country WHERE Population < ( SELECT Max ( Population ) FROM country WHERE Continent = value )",
        -3.9508562088012695
      ],
      [
        "SELECT Code2 FROM country WHERE Population < ( SELECT Max ( Population ) FROM country WHERE Continent = value )",
        -4.069181442260742
      ],
      [
        "SELECT GovernmentForm FROM country WHERE LifeExpectancy < ( SELECT Population FROM country WHERE Continent = value )",
        -4.608994483947754
      ],
      [
        "SELECT Code2 FROM country WHERE LifeExpectancy < ( SELECT Population FROM country WHERE Continent = value )",
        -4.774910926818848
      ],
      [
        "SELECT Code2 FROM country WHERE Population < ( SELECT LifeExpectancy FROM country WHERE Continent = value ) AND Population < value",
        -5.069785118103027
      ],
      [
        "SELECT Code2 FROM country WHERE Population < ( SELECT Min ( LifeExpectancy ) FROM country WHERE Continent = value )",
        -5.181002616882324
      ],
      [
        "SELECT Code2 FROM country WHERE LifeExpectancy < ( SELECT Min ( Population ) FROM country WHERE Continent = value )",
        -5.278132438659668
      ],
      [
        "SELECT GovernmentForm FROM country WHERE Population < ( SELECT Min ( LifeExpectancy ) FROM country WHERE Continent = value )",
        -5.311155319213867
      ],
      [
        "SELECT GovernmentForm FROM country WHERE LifeExpectancy < ( SELECT Min ( Population ) FROM country WHERE Continent = value )",
        -5.530805587768555
      ],
      [
        "SELECT Code2 FROM country WHERE LifeExpectancy < ( SELECT Population FROM country WHERE Continent = value ) AND Population < value",
        -5.622855186462402
      ],
      [
        "SELECT Code2 FROM country WHERE Population < ( SELECT Min ( Population ) FROM country WHERE Continent = value ) AND Population < value",
        -5.829846382141113
      ],
      [
        "SELECT GovernmentForm FROM country WHERE Population < ( SELECT Population FROM country WHERE Continent = value ) AND Population < value",
        -6.451116561889648
      ],
      [
        "SELECT Continent FROM country WHERE Population < ( SELECT Population FROM country WHERE Continent = value )",
        -6.474124431610107
      ]
    ],
    "predicted_parse_with_values": "SELECT GovernmentForm FROM country WHERE Population < ( SELECT Population FROM country WHERE Continent = \"Africa\" )",
    "predicted_parse": "SELECT GovernmentForm FROM country WHERE Population < ( SELECT Population FROM country WHERE Continent = value )",
    "predicted_parse_explanation": [
      "Step 1: find the population in country table whose continent equals Africa",
      "Step 2: find the government form in country table whose population less than the results of step 1"
    ],
    "template_feedback": "in step 1 , consider the continent equals Asia conditions in place of the continent equals Africa conditions . find minimum population in place of population . in step 2 , additionally make sure that continent equals Africa . find name in place of government form .",
    "primary_span": [
      [
        4,
        9
      ],
      [
        19,
        21
      ],
      [
        31,
        38
      ],
      [
        39,
        40
      ]
    ],
    "secondary_span": [
      [
        10,
        18
      ],
      [
        22,
        26
      ],
      [
        41,
        46
      ]
    ],
    "edits": [
      "name",
      "government form",
      "continent equals \"Africa\"",
      "minimum population",
      "population",
      "continent equals \"Asia\"",
      "continent equals \"Africa\""
    ],
    "edits_original": "< select > add name </ select > < select > remove government form </ select > < where > add continent equals \" Africa \" </ where > < select > add minimum population </ select > < select > remove population </ select > < where > add continent equals \" Asia \" </ where > < where > remove continent equals \" Africa \" </ where >"
  },
  {
    "db_id": "world_1",
    "feedback": "Accept that in their government form those countries are stated as republic.",
    "question": "What is the average life expectancy in African countries that are republics?",
    "gold_parse": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"",
    "beam": [
      [
        "SELECT Avg ( LifeExpectancy ) FROM country WHERE Continent = value",
        -0.9150505065917969
      ],
      [
        "SELECT Avg ( GNPOld ) FROM country WHERE Continent = value",
        -1.015817642211914
      ],
      [
        "SELECT Avg ( Population ) FROM country WHERE Continent = value",
        -1.4444599151611328
      ],
      [
        "SELECT Avg ( GNP ) FROM country WHERE Continent = value",
        -6.533487319946289
      ],
      [
        "SELECT Avg ( GNPOld ) FROM country WHERE GovernmentForm = value",
        -10.782464027404785
      ],
      [
        "SELECT Avg ( LifeExpectancy ) FROM country WHERE GovernmentForm = value",
        -11.074831008911133
      ],
      [
        "SELECT Avg ( Population ) FROM country WHERE GovernmentForm = value",
        -11.615483283996582
      ],
      [
        "SELECT Avg ( LifeExpectancy ) , Avg ( GNPOld ) FROM country WHERE Continent = value",
        -12.064489364624023
      ],
      [
        "SELECT Avg ( GNPOld ) FROM country WHERE Region = value",
        -12.649625778198242
      ],
      [
        "SELECT Avg ( GNPOld ) , Avg ( GNPOld ) FROM country WHERE Continent = value",
        -12.653228759765625
      ],
      [
        "SELECT Avg ( Population ) , Avg ( GNPOld ) FROM country WHERE Continent = value",
        -12.831985473632812
      ],
      [
        "SELECT Avg ( LifeExpectancy ) FROM country WHERE Region = value",
        -12.878868103027344
      ],
      [
        "SELECT Avg ( Population ) FROM country WHERE Region = value",
        -13.427423477172852
      ],
      [
        "SELECT Avg ( GNPOld ) FROM country",
        -13.87571907043457
      ],
      [
        "SELECT Avg ( LifeExpectancy ) FROM country",
        -14.007863998413086
      ],
      [
        "SELECT Avg ( T1.Population ) FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = value",
        -14.086506843566895
      ],
      [
        "SELECT Avg ( LifeExpectancy ) , Avg ( LifeExpectancy ) FROM country WHERE Continent = value",
        -14.149075508117676
      ],
      [
        "SELECT Avg ( LifeExpectancy ) , Avg ( Population ) FROM country WHERE Continent = value",
        -14.550220489501953
      ],
      [
        "SELECT Avg ( Population ) FROM country",
        -14.657403945922852
      ],
      [
        "SELECT Avg ( GNPOld ) , Avg ( LifeExpectancy ) FROM country WHERE Continent = value",
        -14.874655723571777
      ]
    ],
    "predicted_parse_with_values": "SELECT Avg ( LifeExpectancy ) FROM country WHERE Continent = \"Africa\"",
    "predicted_parse": "SELECT Avg ( LifeExpectancy ) FROM country WHERE Continent = value",
    "predicted_parse_explanation": [
      "find the average life expectancy in country table whose continent equals Africa"
    ],
    "template_feedback": "additionally make sure that government form equals Republic .",
    "primary_span": [
      [
        0,
        8
      ]
    ],
    "secondary_span": [],
    "edits": [
      "government form equals \"Republic\""
    ],
    "edits_original": "< where > add government form equals \" Republic \" </ where >"
  },
  {
    "db_id": "employee_hire_evaluation",
    "feedback": "I want to find name in step 2.",
    "question": "For each shop, return the number of employees working there and the name of the shop.",
    "gold_parse": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name",
    "beam": [
      [
        "SELECT Count ( * ) , T1.Name FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T2.Shop_ID",
        -0.15260791778564453
      ],
      [
        "SELECT Count ( * ) , T1.Name , Count ( * ) FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T2.Shop_ID",
        -2.0698022842407227
      ],
      [
        "SELECT Count ( * ) , T1.Name FROM employee AS T1 JOIN hiring AS T2 ON T1.Employee_ID = T2.Employee_ID GROUP BY T2.Shop_ID",
        -4.468438148498535
      ],
      [
        "SELECT Count ( * ) , T1.Manager_name FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T2.Shop_ID",
        -5.9491472244262695
      ],
      [
        "SELECT Count ( * ) , T1.Name , Count ( * ) FROM employee AS T1 JOIN hiring AS T2 ON T1.Employee_ID = T2.Employee_ID GROUP BY T2.Shop_ID",
        -7.019576072692871
      ],
      [
        "SELECT Count ( * ) , T1.Manager_name , Count ( * ) FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T2.Shop_ID",
        -8.841383934020996
      ],
      [
        "SELECT Count ( * ) , Shop_ID FROM hiring GROUP BY Shop_ID",
        -9.22669792175293
      ],
      [
        "SELECT Count ( * ) , Name FROM shop GROUP BY Shop_ID",
        -10.786643028259277
      ],
      [
        "SELECT T1.Name , Count ( * ) FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T2.Shop_ID",
        -11.01997184753418
      ],
      [
        "SELECT Count ( * ) , T1.Number_products FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T2.Shop_ID",
        -11.74429988861084
      ],
      [
        "SELECT Count ( * ) , Count ( * ) , T1.Name FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T2.Shop_ID",
        -11.813047409057617
      ],
      [
        "SELECT Count ( * ) , Sum ( T1.Name ) , Count ( * ) FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T2.Shop_ID",
        -12.07517147064209
      ],
      [
        "SELECT Avg ( * ) , T1.Name FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T2.Shop_ID",
        -12.320457458496094
      ],
      [
        "SELECT Count ( * ) , Shop_ID , Count ( * ) FROM hiring GROUP BY Shop_ID",
        -12.498404502868652
      ],
      [
        "SELECT T1.Name , Count ( * ) , T1.Name FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T2.Shop_ID",
        -12.95507526397705
      ],
      [
        "SELECT Count ( * ) , T1.Name , Sum ( T2.Employee_ID ) FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T2.Shop_ID",
        -13.084877014160156
      ],
      [
        "SELECT Count ( * ) , T1.Shop_ID FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T2.Shop_ID",
        -13.146612167358398
      ],
      [
        "SELECT Count ( * ) , Name FROM shop",
        -13.168039321899414
      ],
      [
        "SELECT Count ( * ) , T1.Name , Count ( * ) , T2.Shop_ID FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T2.Shop_ID",
        -13.545130729675293
      ],
      [
        "SELECT Count ( * ) FROM hiring GROUP BY Shop_ID",
        -13.574548721313477
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) , T1.Name FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T2.Shop_ID",
    "predicted_parse": "SELECT Count ( * ) , T1.Name FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T2.Shop_ID",
    "predicted_parse_explanation": [
      "Step 1: for each row in shop table , find the corresponding rows in hiring table",
      "Step 2: find each value of hiring 's shop id of the results of step 1 along with the number of the corresponding rows to each value"
    ],
    "template_feedback": "in step 2 , find for each value of name in place of hiring 's shop id .",
    "primary_span": [
      [
        4,
        9
      ]
    ],
    "secondary_span": [
      [
        10,
        17
      ]
    ],
    "edits": [
      "name",
      "shop id"
    ],
    "edits_original": "< groupBy > add name </ groupBy > < groupBy > remove shop id </ groupBy >"
  },
  {
    "db_id": "course_teach",
    "feedback": "Swap between course and teacher table.",
    "question": "What is the total count of teachers?",
    "gold_parse": "SELECT count(*) FROM teacher",
    "beam": [
      [
        "SELECT Count ( * ) FROM course",
        -6.389617919921875e-05
      ],
      [
        "SELECT Sum ( * ) FROM course",
        -9.932831525802612
      ],
      [
        "SELECT Count ( * ) FROM teacher GROUP BY Name",
        -13.462078511714935
      ],
      [
        "SELECT Count ( * ) , Name FROM teacher",
        -13.718948245048523
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM course",
        -13.863846778869629
      ],
      [
        "SELECT Avg ( * ) FROM course",
        -13.966369718313217
      ],
      [
        "SELECT Count ( * ) FROM teacher GROUP BY Hometown",
        -14.244701623916626
      ],
      [
        "SELECT Count ( * ) FROM course GROUP BY *",
        -14.264763355255127
      ],
      [
        "SELECT Count ( * ) FROM teacher WHERE Hometown = value",
        -14.717382490634918
      ],
      [
        "SELECT Count ( * ) FROM teacher WHERE Name = value",
        -15.000487625598907
      ],
      [
        "SELECT Count ( Count ( * ) ) FROM course",
        -15.17809009552002
      ],
      [
        "SELECT Count ( * ) , Hometown FROM teacher",
        -15.276010632514954
      ],
      [
        "SELECT Count ( * ) FROM course ORDER BY * Desc LIMIT value",
        -15.92009973526001
      ],
      [
        "SELECT Count ( * ) FROM teacher GROUP BY Name HAVING Count ( * ) = value",
        -15.956212818622589
      ],
      [
        "SELECT Max ( * ) FROM course",
        -16.302445769309998
      ],
      [
        "SELECT Count ( Avg ( * ) ) FROM course",
        -16.535744667053223
      ],
      [
        "SELECT Count ( * ) FROM course",
        -16.774361610412598
      ],
      [
        "SELECT Count ( Sum ( * ) ) FROM course",
        -17.035359382629395
      ],
      [
        "SELECT Count ( * ) FROM course LIMIT value",
        -17.053454399108887
      ],
      [
        "SELECT Count ( DISTINCT * ) FROM course",
        -17.34835147857666
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM course",
    "predicted_parse": "SELECT Count ( * ) FROM course",
    "predicted_parse_explanation": [
      "find the number of rows in course table"
    ],
    "template_feedback": "use teacher table in place of course table .",
    "primary_span": [
      [
        0,
        2
      ]
    ],
    "secondary_span": [
      [
        3,
        8
      ]
    ],
    "edits": [
      "teacher",
      "course"
    ],
    "edits_original": "< from > add teacher </ from > < from > remove course </ from >"
  },
  {
    "db_id": "student_transcripts_tracking",
    "feedback": "In step 1 , there should be course id of student enrolment courses table , not course name in courses table .",
    "question": "What is the name of the course with the most students enrolled?",
    "gold_parse": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1",
    "beam": [
      [
        "SELECT course_name FROM Courses GROUP BY course_name ORDER BY Count ( * ) Desc LIMIT value",
        -2.384185791015625e-05
      ],
      [
        "SELECT course_name FROM Courses GROUP BY course_id ORDER BY Count ( * ) Desc LIMIT value",
        -11.692488670349121
      ],
      [
        "SELECT course_name FROM Courses GROUP BY course_name ORDER BY Count ( * ) Desc",
        -12.379347801208496
      ],
      [
        "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id ORDER BY Count ( * ) Desc LIMIT value",
        -13.314269065856934
      ],
      [
        "SELECT course_name FROM Courses GROUP BY course_name",
        -13.410811424255371
      ],
      [
        "SELECT course_name FROM Courses ORDER BY course_name Desc LIMIT value",
        -13.538057684898376
      ],
      [
        "SELECT course_name FROM Courses GROUP BY course_name ORDER BY Count ( * ) Asc LIMIT value",
        -14.075992584228516
      ],
      [
        "SELECT DISTINCT course_name FROM Courses GROUP BY course_name ORDER BY Count ( * ) Desc LIMIT value",
        -14.226727485656738
      ],
      [
        "SELECT course_name FROM Courses GROUP BY course_name HAVING Count ( * ) < value ORDER BY Count ( * ) Desc LIMIT value",
        -14.254181861877441
      ],
      [
        "SELECT course_name , course_name FROM Courses GROUP BY course_name ORDER BY Count ( * ) Desc LIMIT value",
        -14.323742389678955
      ],
      [
        "SELECT course_name FROM Courses GROUP BY course_name ORDER BY Sum ( * ) Desc LIMIT value",
        -15.198190212249756
      ],
      [
        "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id ORDER BY T2.student_enrolment_id Desc LIMIT value",
        -15.349891424179077
      ],
      [
        "SELECT course_name FROM Courses GROUP BY course_name ORDER BY Count ( DISTINCT * ) Desc LIMIT value",
        -15.880199432373047
      ],
      [
        "SELECT course_name FROM Courses GROUP BY course_name ORDER BY Avg ( * ) Desc LIMIT value",
        -15.936107635498047
      ],
      [
        "SELECT DISTINCT course_name FROM Courses GROUP BY course_name ORDER BY Count ( * ) Desc LIMIT value",
        -16.216708183288574
      ],
      [
        "SELECT course_name , Count ( * ) FROM Courses GROUP BY course_name ORDER BY Count ( * ) Desc LIMIT value",
        -16.307059288024902
      ],
      [
        "SELECT course_name FROM Courses GROUP BY course_name HAVING Count ( * ) = value",
        -16.35360050201416
      ],
      [
        "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id ORDER BY T2.student_course_id Desc LIMIT value",
        -16.783140182495117
      ],
      [
        "SELECT course_name FROM Courses ORDER BY * Desc LIMIT value",
        -17.16908884048462
      ],
      [
        "SELECT course_name FROM Courses",
        -18.75843906402588
      ]
    ],
    "predicted_parse_with_values": "SELECT course_name FROM Courses GROUP BY course_name ORDER BY Count ( * ) Desc LIMIT 1",
    "predicted_parse": "SELECT course_name FROM Courses GROUP BY course_name ORDER BY Count ( * ) Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of course name in courses table",
      "Step 2: find the course name in courses table with largest value in the results of step 1"
    ],
    "template_feedback": "in step 1 , additionally use the information from the student enrolment courses table besides the courses table .",
    "primary_span": [
      [
        4,
        13
      ]
    ],
    "secondary_span": [
      [
        14,
        18
      ]
    ],
    "edits": [
      "student enrolment courses"
    ],
    "edits_original": "< from > add student enrolment courses </ from >"
  },
  {
    "db_id": "museum_visit",
    "feedback": "Ensure that open year less than 2009 in step 2 , Make sure open year greater than 2011 in step 3.",
    "question": "What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?",
    "gold_parse": "SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  <  2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  >  2011",
    "beam": [
      [
        "SELECT T2.Name FROM museum AS T1 JOIN visitor AS T2 JOIN visit AS T3 ON T1.Museum_ID = T3.Museum_ID AND T3.visitor_ID = T2.ID WHERE T1.Open_Year > value INTERSECT SELECT T2.Name FROM museum AS T1 JOIN visitor AS T2 JOIN visit AS T3 ON T1.Museum_ID = T3.Museum_ID AND T3.visitor_ID = T2.ID WHERE T1.Open_Year < value",
        -0.0016069412231445312
      ],
      [
        "SELECT T2.Name FROM museum AS T1 JOIN visitor AS T2 JOIN visit AS T3 ON T1.Museum_ID = T3.Museum_ID AND T3.visitor_ID = T2.ID WHERE T1.Open_Year < value INTERSECT SELECT T2.Name FROM museum AS T1 JOIN visitor AS T2 JOIN visit AS T3 ON T1.Museum_ID = T3.Museum_ID AND T3.visitor_ID = T2.ID WHERE T1.Open_Year > value",
        -7.480775833129883
      ],
      [
        "SELECT T2.Name FROM museum AS T1 JOIN visitor AS T2 JOIN visit AS T3 ON T1.Museum_ID = T3.Museum_ID AND T3.visitor_ID = T2.ID WHERE T1.Open_Year > value INTERSECT SELECT T2.Name FROM museum AS T1 JOIN visitor AS T2 JOIN visit AS T3 ON T1.Museum_ID = T3.Museum_ID AND T3.visitor_ID = T2.ID WHERE T1.Open_Year IN ( SELECT T2.Name FROM museum AS T1 JOIN visitor AS T2 JOIN visit AS T3 ON T1.Museum_ID = T3.Museum_ID AND T3.visitor_ID = T2.ID WHERE T1.Open_Year < value )",
        -7.520985126495361
      ],
      [
        "SELECT T2.Name FROM museum AS T1 JOIN visitor AS T2 JOIN visit AS T3 ON T1.Museum_ID = T3.Museum_ID AND T3.visitor_ID = T2.ID WHERE T1.Open_Year = value INTERSECT SELECT T2.Name FROM museum AS T1 JOIN visitor AS T2 JOIN visit AS T3 ON T1.Museum_ID = T3.Museum_ID AND T3.visitor_ID = T2.ID WHERE T1.Open_Year > value",
        -9.028252601623535
      ],
      [
        "SELECT T2.Name FROM museum AS T1 JOIN visitor AS T2 JOIN visit AS T3 ON T1.Museum_ID = T3.Museum_ID AND T3.visitor_ID = T2.ID WHERE T1.Open_Year > value INTERSECT SELECT T2.Name FROM museum AS T1 JOIN visitor AS T2 JOIN visit AS T3 ON T1.Museum_ID = T3.Museum_ID AND T3.visitor_ID = T2.ID WHERE T1.Open_Year > value",
        -9.465785026550293
      ],
      [
        "SELECT T2.Name FROM museum AS T1 JOIN visitor AS T2 JOIN visit AS T3 ON T1.Museum_ID = T3.Museum_ID AND T3.visitor_ID = T2.ID WHERE T1.Open_Year > value INTERSECT SELECT T2.Name FROM museum AS T1 JOIN visitor AS T2 JOIN visit AS T3 ON T1.Museum_ID = T3.Museum_ID AND T3.visitor_ID = T2.ID WHERE T1.Open_Year IN ( SELECT T1.Name FROM museum AS T1 WHERE T1.Open_Year < value )",
        -9.4792959690094
      ],
      [
        "SELECT T2.Name FROM museum AS T1 JOIN visitor AS T2 JOIN visit AS T3 ON T1.Museum_ID = T3.Museum_ID AND T3.visitor_ID = T2.ID WHERE T1.Name > value INTERSECT SELECT T2.Name FROM museum AS T1 JOIN visitor AS T2 JOIN visit AS T3 ON T1.Museum_ID = T3.Museum_ID AND T3.visitor_ID = T2.ID WHERE T1.Open_Year < value",
        -10.216789245605469
      ],
      [
        "SELECT T2.Name FROM museum AS T1 JOIN visitor AS T2 JOIN visit AS T3 ON T1.Museum_ID = T3.Museum_ID AND T3.visitor_ID = T2.ID WHERE T1.Open_Year > value INTERSECT SELECT T2.Name FROM museum AS T1 JOIN visitor AS T2 JOIN visit AS T3 ON T1.Museum_ID = T3.Museum_ID AND T3.visitor_ID = T2.ID WHERE T1.Open_Year = value",
        -10.302977561950684
      ],
      [
        "SELECT T2.Name FROM museum AS T1 JOIN visitor AS T2 JOIN visit AS T3 ON T1.Museum_ID = T3.Museum_ID AND T3.visitor_ID = T2.ID WHERE T1.Open_Year > value INTERSECT SELECT T2.Name FROM museum AS T1 JOIN visitor AS T2 JOIN visit AS T3 ON T1.Museum_ID = T3.Museum_ID AND T3.visitor_ID = T2.ID WHERE T1.Open_Year IN ( SELECT T1.Museum_ID FROM museum AS T1 WHERE T1.Open_Year < value )",
        -10.529930353164673
      ],
      [
        "SELECT T2.Name FROM museum AS T1 JOIN visitor AS T2 JOIN visit AS T3 ON T1.Museum_ID = T3.Museum_ID AND T3.visitor_ID = T2.ID WHERE T1.Open_Year > value INTERSECT SELECT T2.Name FROM museum AS T1 JOIN visitor AS T2 JOIN visit AS T3 ON T1.Museum_ID = T3.Museum_ID AND T3.visitor_ID = T2.ID WHERE T1.Open_Year IN ( SELECT T3.Museum_ID FROM museum AS T1 JOIN visit AS T3 ON T1.Museum_ID = T3.Museum_ID WHERE T1.Open_Year < value )",
        -10.674909114837646
      ],
      [
        "SELECT T2.Name FROM museum AS T1 JOIN visitor AS T2 JOIN visit AS T3 ON T1.Museum_ID = T3.Museum_ID AND T3.visitor_ID = T2.ID WHERE T1.Open_Year > value INTERSECT SELECT T2.Name FROM visitor AS T2 JOIN visit AS T3 ON T2.ID = T3.visitor_ID WHERE T3.Museum_ID IN ( SELECT T2.Name FROM museum AS T1 JOIN visitor AS T2 JOIN visit AS T3 ON T1.Museum_ID = T3.Museum_ID AND T3.visitor_ID = T2.ID WHERE T1.Open_Year < value )",
        -10.918185234069824
      ],
      [
        "SELECT T1.Name FROM visitor AS T1 WHERE T1.Age > value INTERSECT SELECT T1.Name FROM museum AS T2 JOIN visitor AS T1 JOIN visit AS T3 ON T2.Museum_ID = T3.Museum_ID AND T3.visitor_ID = T1.ID WHERE T2.Open_Year < value",
        -10.94639778137207
      ],
      [
        "SELECT T2.Name FROM museum AS T1 JOIN visitor AS T2 JOIN visit AS T3 ON T1.Museum_ID = T3.Museum_ID AND T3.visitor_ID = T2.ID WHERE T1.Open_Year > = value INTERSECT SELECT T2.Name FROM museum AS T1 JOIN visitor AS T2 JOIN visit AS T3 ON T1.Museum_ID = T3.Museum_ID AND T3.visitor_ID = T2.ID WHERE T1.Open_Year > value",
        -11.500699043273926
      ],
      [
        "SELECT T1.Name FROM visitor AS T1 JOIN visit AS T2 ON T1.ID = T2.visitor_ID WHERE T2.Total_spent > value INTERSECT SELECT T1.Name FROM museum AS T3 JOIN visitor AS T1 JOIN visit AS T2 ON T3.Museum_ID = T2.Museum_ID AND T2.visitor_ID = T1.ID WHERE T3.Open_Year < value",
        -12.62719440460205
      ],
      [
        "SELECT T2.Name FROM museum AS T1 JOIN visitor AS T2 JOIN visit AS T3 ON T1.Museum_ID = T3.Museum_ID AND T3.visitor_ID = T2.ID WHERE T1.Open_Year > value INTERSECT SELECT T2.Name FROM museum AS T1 JOIN visitor AS T2 JOIN visit AS T3 ON T1.Museum_ID = T3.Museum_ID AND T3.visitor_ID = T2.ID WHERE T1.Open_Year LIKE value",
        -12.740248680114746
      ],
      [
        "SELECT T2.Name FROM museum AS T1 JOIN visitor AS T2 JOIN visit AS T3 ON T1.Museum_ID = T3.Museum_ID AND T3.visitor_ID = T2.ID WHERE T1.Open_Year > value INTERSECT SELECT T2.Name FROM museum AS T1 JOIN visitor AS T2 JOIN visit AS T3 ON T1.Museum_ID = T3.Museum_ID AND T3.visitor_ID = T2.ID WHERE T1.Name < value",
        -12.823055267333984
      ],
      [
        "SELECT T2.Name FROM museum AS T1 JOIN visitor AS T2 JOIN visit AS T3 ON T1.Museum_ID = T3.Museum_ID AND T3.visitor_ID = T2.ID WHERE T1.Num_of_Staff > value INTERSECT SELECT T2.Name FROM museum AS T1 JOIN visitor AS T2 JOIN visit AS T3 ON T1.Museum_ID = T3.Museum_ID AND T3.visitor_ID = T2.ID WHERE T1.Open_Year < value",
        -12.898338317871094
      ],
      [
        "SELECT DISTINCT T2.Name FROM museum AS T1 JOIN visitor AS T2 JOIN visit AS T3 ON T1.Museum_ID = T3.Museum_ID AND T3.visitor_ID = T2.ID WHERE T1.Open_Year > value INTERSECT SELECT T2.Name FROM museum AS T1 JOIN visitor AS T2 JOIN visit AS T3 ON T1.Museum_ID = T3.Museum_ID AND T3.visitor_ID = T2.ID WHERE T1.Open_Year < value",
        -12.979724884033203
      ],
      [
        "SELECT T2.Name FROM museum AS T1 JOIN visitor AS T2 JOIN visit AS T3 ON T1.Museum_ID = T3.Museum_ID AND T3.visitor_ID = T2.ID WHERE T1.Open_Year > value",
        -13.083075523376465
      ],
      [
        "SELECT T2.Name FROM museum AS T1 JOIN visitor AS T2 JOIN visit AS T3 ON T1.Museum_ID = T3.Museum_ID AND T3.visitor_ID = T2.ID WHERE T1.Open_Year > value INTERSECT SELECT T1.Name FROM museum AS T1 WHERE T1.Open_Year < value",
        -13.839919090270996
      ]
    ],
    "predicted_parse_with_values": "SELECT T2.Name FROM museum AS T1 JOIN visitor AS T2 JOIN visit AS T3 ON T1.Museum_ID = T3.Museum_ID AND T3.visitor_ID = T2.ID WHERE T1.Open_Year > 2009 INTERSECT SELECT T2.Name FROM museum AS T1 JOIN visitor AS T2 JOIN visit AS T3 ON T1.Museum_ID = T3.Museum_ID AND T3.visitor_ID = T2.ID WHERE T1.Open_Year < 2011",
    "predicted_parse": "SELECT T2.Name FROM museum AS T1 JOIN visitor AS T2 JOIN visit AS T3 ON T1.Museum_ID = T3.Museum_ID AND T3.visitor_ID = T2.ID WHERE T1.Open_Year > value INTERSECT SELECT T2.Name FROM museum AS T1 JOIN visitor AS T2 JOIN visit AS T3 ON T1.Museum_ID = T3.Museum_ID AND T3.visitor_ID = T2.ID WHERE T1.Open_Year < value",
    "predicted_parse_explanation": [
      "Step 1: for each row in museum table , find the corresponding rows in customer table and in visit table",
      "Step 2: find the customer 's name of the results of step 1 whose open year greater than 2009",
      "Step 3: for each row in museum table , find the corresponding rows in customer table and in visit table",
      "Step 4: find the customer 's name of the results of step 3 whose open year less than 2011",
      "Step 5: show the rows that are in both the results of step 2 and step 4"
    ],
    "template_feedback": "in step 2 , consider the open year less than 2009 conditions in place of the open year greater than 2009 conditions . in step 4 , consider the open year greater than 2011 conditions in place of the open year less than 2011 conditions .",
    "primary_span": [
      [
        4,
        11
      ],
      [
        27,
        34
      ]
    ],
    "secondary_span": [
      [
        12,
        22
      ],
      [
        35,
        45
      ]
    ],
    "edits": [
      "open year less than 2009",
      "open year greater than 2009",
      "open year greater than 2011",
      "open year less than 2011"
    ],
    "edits_original": "< where > add open year less than 2009 </ where > < where > remove open year greater than 2009 </ where > < where > add open year greater than 2011 </ where > < where > remove open year less than 2011 </ where >"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "feedback": "Make sure we use template type code in documents.",
    "question": "Return the code of the template type that is most commonly used in documents.",
    "gold_parse": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1",
    "beam": [
      [
        "SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY Count ( * ) Desc LIMIT value",
        -0.0004892349243164062
      ],
      [
        "SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code GROUP BY T2.Template_Type_Code ORDER BY Count ( * ) Desc LIMIT value",
        -8.036877632141113
      ],
      [
        "SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code HAVING Count ( * ) > value",
        -9.182403564453125
      ],
      [
        "SELECT T2.Template_Type_Code FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code GROUP BY T1.Template_Type_Code ORDER BY Count ( * ) Desc LIMIT value",
        -11.372151374816895
      ],
      [
        "SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code",
        -11.736835479736328
      ],
      [
        "SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY Count ( * ) Desc",
        -11.747570991516113
      ],
      [
        "SELECT T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Document_Name = ( SELECT T1.Template_Type_Code FROM Templates AS T1 GROUP BY T1.Template_Type_Code ORDER BY Count ( * ) Desc LIMIT value ) GROUP BY T1.Template_Type_Code ORDER BY Count ( * ) Desc LIMIT value",
        -13.659491062164307
      ],
      [
        "SELECT DISTINCT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY Count ( * ) Desc LIMIT value",
        -13.93980884552002
      ],
      [
        "SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY Count ( * ) Desc LIMIT value INTERSECT SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY Count ( * ) Desc LIMIT value",
        -14.045882225036621
      ],
      [
        "SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY Count ( * ) Asc LIMIT value",
        -14.176283836364746
      ],
      [
        "SELECT T1.Template_Type_Code FROM Templates AS T1 INTERSECT SELECT T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Document_Name = ( SELECT T1.Template_Type_Code FROM Templates AS T1 GROUP BY T1.Template_Type_Code ORDER BY Count ( * ) Desc LIMIT value )",
        -14.254619121551514
      ],
      [
        "SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code HAVING Count ( * ) = value",
        -14.35428524017334
      ],
      [
        "SELECT Template_Type_Code FROM Templates INTERSECT SELECT Template_Type_Code FROM Templates",
        -14.427772521972656
      ],
      [
        "SELECT Template_Type_Code , Count ( * ) FROM Templates GROUP BY Template_Type_Code ORDER BY Count ( * ) Desc LIMIT value",
        -14.437896728515625
      ],
      [
        "SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code HAVING Count ( * ) < = value",
        -15.48588752746582
      ],
      [
        "SELECT Template_Type_Code FROM Templates GROUP BY DISTINCT Template_Type_Code ORDER BY Count ( * ) Desc LIMIT value",
        -15.62440013885498
      ],
      [
        "SELECT DISTINCT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY Count ( * ) Desc LIMIT value",
        -15.624917030334473
      ],
      [
        "SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY Avg ( * ) Desc LIMIT value",
        -15.900846481323242
      ],
      [
        "SELECT T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Document_Name = ( SELECT T1.Template_Type_Code FROM Templates AS T1 GROUP BY T1.Template_Type_Code ORDER BY Count ( * ) Desc LIMIT value )",
        -15.928457498550415
      ],
      [
        "SELECT Template_Type_Code FROM Templates",
        -17.267417907714844
      ]
    ],
    "predicted_parse_with_values": "SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY Count ( * ) Desc LIMIT 1",
    "predicted_parse": "SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY Count ( * ) Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of template type code in templates table",
      "Step 2: find the template type code in templates table with largest value in the results of step 1"
    ],
    "template_feedback": "in step 1 , additionally use the information from the documents table besides the templates table .",
    "primary_span": [
      [
        4,
        11
      ]
    ],
    "secondary_span": [
      [
        12,
        16
      ]
    ],
    "edits": [
      "documents"
    ],
    "edits_original": "< from > add documents </ from >"
  },
  {
    "db_id": "dog_kennels",
    "feedback": "Replace professionals table with treatments table in step 2.",
    "question": "Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments.",
    "gold_parse": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2",
    "beam": [
      [
        "SELECT professional_id , last_name , cell_number FROM Professionals WHERE state = value UNION SELECT professional_id , last_name , cell_number FROM Professionals GROUP BY professional_id HAVING Count ( * ) > value",
        -3.2466955184936523
      ],
      [
        "SELECT T3.professional_id , T1.last_name , T3.cell_number FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id WHERE T3.state = value UNION SELECT T3.professional_id , T3.last_name , T3.cell_number FROM Professionals AS T3 GROUP BY T3.professional_id HAVING Count ( * ) > value",
        -3.500727653503418
      ],
      [
        "SELECT T1.professional_id , T1.last_name , T1.cell_number FROM Professionals AS T1 WHERE T1.state = value UNION SELECT T1.professional_id , T2.last_name , T1.cell_number FROM Owners AS T2 JOIN Dogs AS T3 ON T2.owner_id = T3.owner_id JOIN Professionals AS T1 JOIN Treatments AS T4 ON T3.dog_id = T4.dog_id AND T4.professional_id = T1.professional_id GROUP BY T1.professional_id HAVING Count ( * ) > value",
        -3.6357460021972656
      ],
      [
        "SELECT professional_id , last_name , cell_number FROM Professionals WHERE state = value UNION SELECT professional_id , last_name , cell_number FROM Professionals GROUP BY professional_id HAVING Count ( * ) > = value",
        -3.749295234680176
      ],
      [
        "SELECT professional_id , last_name , home_phone FROM Professionals WHERE state = value UNION SELECT professional_id , last_name , cell_number FROM Professionals GROUP BY professional_id HAVING Count ( * ) > value",
        -3.769460678100586
      ],
      [
        "SELECT professional_id , last_name , cell_number FROM Professionals WHERE state = value UNION SELECT professional_id , last_name , home_phone FROM Professionals GROUP BY professional_id HAVING Count ( * ) > value",
        -3.8846607208251953
      ],
      [
        "SELECT T3.professional_id , T1.last_name , T3.cell_number FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id WHERE T3.state = value UNION SELECT T3.professional_id , T1.last_name , T3.cell_number FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id GROUP BY T3.professional_id HAVING Count ( * ) > value",
        -3.8907766342163086
      ],
      [
        "SELECT T3.professional_id , T1.last_name , T3.cell_number FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id WHERE T3.state = value UNION SELECT T3.professional_id , T3.last_name , T3.cell_number FROM Professionals AS T3 GROUP BY T3.professional_id HAVING Count ( * ) > = value",
        -4.006285667419434
      ],
      [
        "SELECT T3.professional_id , T1.last_name , T3.home_phone FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id WHERE T3.state = value UNION SELECT T3.professional_id , T3.last_name , T3.cell_number FROM Professionals AS T3 GROUP BY T3.professional_id HAVING Count ( * ) > value",
        -4.080019950866699
      ],
      [
        "SELECT T1.professional_id , T1.last_name , T1.cell_number FROM Professionals AS T1 WHERE T1.state = value UNION SELECT T1.professional_id , T2.last_name , T1.cell_number FROM Owners AS T2 JOIN Dogs AS T3 ON T2.owner_id = T3.owner_id JOIN Professionals AS T1 JOIN Treatments AS T4 ON T3.dog_id = T4.dog_id AND T4.professional_id = T1.professional_id GROUP BY T1.professional_id HAVING Count ( * ) > = value",
        -4.099737167358398
      ],
      [
        "SELECT professional_id , last_name , cell_number FROM Professionals WHERE state = value GROUP BY professional_id HAVING Count ( * ) > = value",
        -4.139167785644531
      ],
      [
        "SELECT T3.professional_id , T1.last_name , T3.cell_number FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id WHERE T3.state = value UNION SELECT T3.professional_id , T3.last_name , T3.home_phone FROM Professionals AS T3 GROUP BY T3.professional_id HAVING Count ( * ) > value",
        -4.140011787414551
      ],
      [
        "SELECT T1.professional_id , T1.last_name , T1.home_phone FROM Professionals AS T1 WHERE T1.state = value UNION SELECT T1.professional_id , T2.last_name , T1.cell_number FROM Owners AS T2 JOIN Dogs AS T3 ON T2.owner_id = T3.owner_id JOIN Professionals AS T1 JOIN Treatments AS T4 ON T3.dog_id = T4.dog_id AND T4.professional_id = T1.professional_id GROUP BY T1.professional_id HAVING Count ( * ) > value",
        -4.160675048828125
      ],
      [
        "SELECT T1.professional_id , T1.last_name , T1.cell_number FROM Professionals AS T1 WHERE T1.state = value UNION SELECT T1.professional_id , T2.last_name , T1.home_phone FROM Owners AS T2 JOIN Dogs AS T3 ON T2.owner_id = T3.owner_id JOIN Professionals AS T1 JOIN Treatments AS T4 ON T3.dog_id = T4.dog_id AND T4.professional_id = T1.professional_id GROUP BY T1.professional_id HAVING Count ( * ) > value",
        -4.244733810424805
      ],
      [
        "SELECT professional_id , last_name , home_phone FROM Professionals WHERE state = value UNION SELECT professional_id , last_name , cell_number FROM Professionals GROUP BY professional_id HAVING Count ( * ) > = value",
        -4.274408340454102
      ],
      [
        "SELECT T3.professional_id , T1.last_name , T3.cell_number FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id WHERE T3.state = value UNION SELECT T3.professional_id , T1.last_name , T3.cell_number FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id GROUP BY T3.professional_id HAVING Count ( * ) > = value",
        -4.356989860534668
      ],
      [
        "SELECT professional_id , last_name , cell_number FROM Professionals WHERE state = value UNION SELECT professional_id , last_name , home_phone FROM Professionals GROUP BY professional_id HAVING Count ( * ) > = value",
        -4.38648796081543
      ],
      [
        "SELECT professional_id , last_name , home_phone FROM Professionals WHERE state = value UNION SELECT professional_id , last_name , home_phone FROM Professionals GROUP BY professional_id HAVING Count ( * ) > value",
        -4.413946151733398
      ],
      [
        "SELECT T3.professional_id , T1.last_name , T3.cell_number FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id WHERE T3.state = value GROUP BY T3.professional_id HAVING Count ( * ) > = value",
        -4.414763450622559
      ],
      [
        "SELECT T3.professional_id , T1.last_name , T3.home_phone FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id WHERE T3.state = value UNION SELECT T3.professional_id , T1.last_name , T3.cell_number FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id GROUP BY T3.professional_id HAVING Count ( * ) > value",
        -4.47176456451416
      ]
    ],
    "predicted_parse_with_values": "SELECT professional_id , last_name , cell_number FROM Professionals WHERE state = \"Indiana\" UNION SELECT professional_id , last_name , cell_number FROM Professionals GROUP BY professional_id HAVING Count ( * ) > 2",
    "predicted_parse": "SELECT professional_id , last_name , cell_number FROM Professionals WHERE state = value UNION SELECT professional_id , last_name , cell_number FROM Professionals GROUP BY professional_id HAVING Count ( * ) > value",
    "predicted_parse_explanation": [
      "Step 1: find the professional id , last name , cell number in professionals table whose state equals Indiana",
      "Step 2: find the number of rows of each value of professional id in professionals table",
      "Step 3: find the professional id , last name , cell number in professionals table whose corresponding value in step 2 is greater than 2",
      "Step 4: show the rows that are in any of the results of step 1 and step 3"
    ],
    "template_feedback": "in step 2 , additionally use the information from the treatments table besides the professionals table .",
    "primary_span": [
      [
        4,
        11
      ]
    ],
    "secondary_span": [
      [
        12,
        16
      ]
    ],
    "edits": [
      "treatments"
    ],
    "edits_original": "< from > add treatments </ from >"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "feedback": "Make sure to arrange Id of documents.",
    "question": "Show all document ids and the number of paragraphs in each document. Order by document id.",
    "gold_parse": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id",
    "beam": [
      [
        "SELECT Document_ID , Count ( * ) FROM Paragraphs GROUP BY Document_ID ORDER BY Count ( * ) Asc",
        -0.00350189208984375
      ],
      [
        "SELECT Document_ID , Count ( * ) FROM Paragraphs GROUP BY Document_ID",
        -5.745479583740234
      ],
      [
        "SELECT Document_ID , Count ( DISTINCT Paragraph_ID ) FROM Paragraphs GROUP BY Document_ID ORDER BY Count ( * ) Asc",
        -8.817754745483398
      ],
      [
        "SELECT Document_ID , Sum ( Paragraph_ID ) FROM Paragraphs GROUP BY Document_ID ORDER BY Count ( * ) Asc",
        -9.934069633483887
      ],
      [
        "SELECT Document_ID , Count ( * ) FROM Paragraphs GROUP BY Document_ID ORDER BY Count ( * ) Desc",
        -10.459850311279297
      ],
      [
        "SELECT Document_ID , Count ( * ) FROM Paragraphs ORDER BY Paragraph_ID Asc",
        -12.345690250396729
      ],
      [
        "SELECT T2.Document_ID , Count ( * ) FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID ORDER BY T1.Template_ID Asc",
        -12.378083229064941
      ],
      [
        "SELECT Document_ID FROM Paragraphs GROUP BY Document_ID ORDER BY Count ( * ) Asc",
        -12.788971900939941
      ],
      [
        "SELECT T2.Document_ID , Count ( * ) FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T2.Document_ID ORDER BY T1.Template_ID Asc",
        -12.831031322479248
      ],
      [
        "SELECT Document_ID , Count ( * ) FROM Paragraphs GROUP BY Document_ID ORDER BY Count ( * ) Asc LIMIT value",
        -12.908905982971191
      ],
      [
        "SELECT Document_ID , Count ( Paragraph_ID ) FROM Paragraphs GROUP BY Document_ID ORDER BY Count ( * ) Asc",
        -13.045195579528809
      ],
      [
        "SELECT Document_ID , Count ( * ) FROM Paragraphs GROUP BY Document_ID HAVING Count ( * ) > = value ORDER BY Count ( * ) Asc",
        -13.117050170898438
      ],
      [
        "SELECT T2.Document_ID , Count ( * ) , T1.Template_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T2.Document_ID ORDER BY Count ( * ) Asc",
        -13.178593158721924
      ],
      [
        "SELECT T2.Document_ID , Count ( * ) FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T1.Template_ID ORDER BY Count ( * ) Asc",
        -13.28305721282959
      ],
      [
        "SELECT Document_ID , Sum ( Paragraph_Text ) FROM Paragraphs GROUP BY Document_ID ORDER BY Count ( * ) Asc",
        -13.355037450790405
      ],
      [
        "SELECT Document_ID , Count ( * ) FROM Paragraphs GROUP BY Document_ID ORDER BY Sum ( Paragraph_ID ) Asc",
        -13.365321636199951
      ],
      [
        "SELECT T1.Document_ID , Count ( * ) FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T2.Document_ID ORDER BY Count ( * ) Asc",
        -13.494121551513672
      ],
      [
        "SELECT Document_ID , Count ( * ) , Document_ID FROM Paragraphs GROUP BY Document_ID ORDER BY Count ( * ) Asc",
        -13.576909065246582
      ],
      [
        "SELECT T2.Document_ID , Count ( * ) FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T2.Document_ID HAVING T1.Template_ID = value ORDER BY Count ( * ) Asc",
        -13.58466100692749
      ],
      [
        "SELECT Document_ID , Count ( * ) FROM Paragraphs",
        -14.847434997558594
      ]
    ],
    "predicted_parse_with_values": "SELECT Document_ID , Count ( * ) FROM Paragraphs GROUP BY Document_ID ORDER BY Count ( * ) Asc",
    "predicted_parse": "SELECT Document_ID , Count ( * ) FROM Paragraphs GROUP BY Document_ID ORDER BY Count ( * ) Asc",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of document id in paragraphs table",
      "Step 2: find the document id and number of rows in paragraphs table ordered ascending by the results of step 1"
    ],
    "template_feedback": "in step 2 , order the results by document id in place of number of rows .",
    "primary_span": [
      [
        4,
        9
      ]
    ],
    "secondary_span": [
      [
        10,
        16
      ]
    ],
    "edits": [
      "document id",
      "number of rows"
    ],
    "edits_original": "< orderBy > add document id </ orderBy > < orderBy > remove number of rows </ orderBy >"
  },
  {
    "db_id": "car_1",
    "feedback": "Exchange accelerate with horsepower .",
    "question": "What is the number of cars with a horsepower greater than 150?",
    "gold_parse": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150",
    "beam": [
      [
        "SELECT Count ( * ) FROM cars_data WHERE Accelerate > value",
        -0.6229934692382812
      ],
      [
        "SELECT Count ( * ) FROM cars_data WHERE Horsepower > value",
        -0.9651575088500977
      ],
      [
        "SELECT Count ( * ) FROM cars_data WHERE Weight > value",
        -3.0600697994232178
      ],
      [
        "SELECT Count ( * ) FROM cars_data WHERE Cylinders > value",
        -3.364159107208252
      ],
      [
        "SELECT Count ( * ) FROM model_list WHERE ModelId > value",
        -7.022499084472656
      ],
      [
        "SELECT Count ( * ) FROM cars_data WHERE MPG > value",
        -8.283463478088379
      ],
      [
        "SELECT Count ( * ) FROM cars_data WHERE Edispl > value",
        -9.159119606018066
      ],
      [
        "SELECT Count ( * ) FROM car_makers WHERE Maker > value",
        -12.24353313446045
      ],
      [
        "SELECT Count ( * ) FROM cars_data WHERE Year > value",
        -13.491652488708496
      ],
      [
        "SELECT Count ( * ) FROM car_makers WHERE FullName > value",
        -13.859230041503906
      ],
      [
        "SELECT Count ( * ) FROM cars_data WHERE Horsepower = value",
        -14.041687488555908
      ],
      [
        "SELECT Count ( * ) FROM model_list WHERE Model > value",
        -14.128172874450684
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM cars_data WHERE Accelerate > value",
        -14.332990646362305
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM cars_data WHERE Horsepower > value",
        -14.59459638595581
      ],
      [
        "SELECT Count ( * ) FROM cars_data WHERE Horsepower > = value",
        -14.77661943435669
      ],
      [
        "SELECT Count ( * ) FROM cars_data WHERE MPG = value",
        -14.790965676307678
      ],
      [
        "SELECT Count ( * ) FROM continents",
        -14.869786262512207
      ],
      [
        "SELECT * FROM cars_data WHERE Accelerate > value",
        -15.161713600158691
      ],
      [
        "SELECT Count ( * ) , MPG FROM cars_data WHERE Accelerate > value",
        -15.272071659564972
      ],
      [
        "SELECT Count ( * ) FROM car_names WHERE MakeId > value",
        -15.333288192749023
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM cars_data WHERE Accelerate > 150",
    "predicted_parse": "SELECT Count ( * ) FROM cars_data WHERE Accelerate > value",
    "predicted_parse_explanation": [
      "find the number of rows in cars data table whose accelerate greater than 150"
    ],
    "template_feedback": "consider the horsepower greater than 150 conditions in place of the accelerate greater than 150 conditions .",
    "primary_span": [
      [
        0,
        6
      ]
    ],
    "secondary_span": [
      [
        7,
        16
      ]
    ],
    "edits": [
      "horsepower greater than 150",
      "accelerate greater than 150"
    ],
    "edits_original": "< where > add horsepower greater than 150 </ where > < where > remove accelerate greater than 150 </ where >"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "feedback": "Also add template type code equals CV .",
    "question": "Count the number of templates of the type CV.",
    "gold_parse": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"",
    "beam": [
      [
        "SELECT Count ( * ) FROM Ref_Template_Types",
        -0.057018280029296875
      ],
      [
        "SELECT Count ( DISTINCT Template_Type_Code ) FROM Templates",
        -2.9200305938720703
      ],
      [
        "SELECT Count ( DISTINCT Template_Type_Code ) FROM Ref_Template_Types",
        -6.744678497314453
      ],
      [
        "SELECT Count ( Template_Type_Code ) FROM Templates",
        -8.462985038757324
      ],
      [
        "SELECT Count ( * ) FROM Templates WHERE Template_Type_Code = value",
        -9.471526145935059
      ],
      [
        "SELECT Count ( * ) FROM Templates GROUP BY Template_Type_Code",
        -11.44133186340332
      ],
      [
        "SELECT Sum ( Template_Type_Code ) FROM Ref_Template_Types",
        -12.119002342224121
      ],
      [
        "SELECT Count ( * ) FROM Templates GROUP BY Template_Type_Code HAVING Count ( * ) = value",
        -14.012517929077148
      ],
      [
        "SELECT Count ( * ) , Template_Type_Code FROM Templates GROUP BY Template_Type_Code",
        -14.172308921813965
      ],
      [
        "SELECT Count ( * ) , Template_Type_Code FROM Templates",
        -14.33085823059082
      ],
      [
        "SELECT Count ( * ) FROM Ref_Template_Types WHERE Template_Type_Code = value",
        -14.816689491271973
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM Ref_Template_Types",
        -14.947250366210938
      ],
      [
        "SELECT Avg ( Template_Type_Code ) FROM Ref_Template_Types",
        -14.979901313781738
      ],
      [
        "SELECT Count ( * ) FROM Templates GROUP BY Template_Type_Code ORDER BY Count ( * ) Desc LIMIT value",
        -15.078666687011719
      ],
      [
        "SELECT Max ( Template_Type_Code ) FROM Ref_Template_Types",
        -15.324174404144287
      ],
      [
        "SELECT Count ( Count ( * ) ) FROM Ref_Template_Types",
        -15.745871543884277
      ],
      [
        "SELECT Count ( * ) FROM Ref_Template_Types EXCEPT SELECT Count ( * ) FROM Ref_Template_Types",
        -15.8220796585083
      ],
      [
        "SELECT Count ( * ) FROM Ref_Template_Types ORDER BY Template_Type_Code Desc LIMIT value",
        -15.89109468460083
      ],
      [
        "SELECT Sum ( Template_Type_Code ) FROM Templates",
        -16.29538631439209
      ],
      [
        "SELECT Count ( * ) FROM Templates GROUP BY Template_Type_Code HAVING Template_Type_Code = value",
        -16.592216968536377
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM Ref_Template_Types",
    "predicted_parse": "SELECT Count ( * ) FROM Ref_Template_Types",
    "predicted_parse_explanation": [
      "find the number of rows in reference template types table"
    ],
    "template_feedback": "use templates table in place of reference template types table . additionally make sure that templates 's template type code equals CV .",
    "primary_span": [
      [
        0,
        2
      ],
      [
        11,
        22
      ]
    ],
    "secondary_span": [
      [
        3,
        10
      ]
    ],
    "edits": [
      "templates",
      "reference template types",
      "template type code equals \"CV\""
    ],
    "edits_original": "< from > add templates </ from > < from > remove reference template types </ from > < where > add template type code equals \" CV \" </ where >"
  },
  {
    "db_id": "dog_kennels",
    "feedback": "Exchange breed name with breed code and breeds table with dogs table in step 1.",
    "question": "Which breed do the most dogs have? Give me the breed name.",
    "gold_parse": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1",
    "beam": [
      [
        "SELECT breed_name FROM Breeds GROUP BY breed_name ORDER BY Count ( * ) Desc LIMIT value",
        -0.0054836273193359375
      ],
      [
        "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code GROUP BY T2.breed_code ORDER BY Count ( * ) Desc LIMIT value",
        -5.565340995788574
      ],
      [
        "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code ORDER BY T2.weight Desc LIMIT value",
        -6.8311262130737305
      ],
      [
        "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code GROUP BY T2.weight ORDER BY Count ( * ) Desc LIMIT value",
        -8.245080947875977
      ],
      [
        "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code ORDER BY T2.age Desc LIMIT value",
        -9.34007740020752
      ],
      [
        "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code WHERE T2.weight = ( SELECT Max ( T2.weight ) FROM Dogs AS T2 )",
        -9.649724006652832
      ],
      [
        "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code GROUP BY T1.breed_name ORDER BY Count ( T2.weight ) Desc LIMIT value",
        -9.961566925048828
      ],
      [
        "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code GROUP BY T2.age ORDER BY Count ( * ) Desc LIMIT value",
        -10.48021125793457
      ],
      [
        "SELECT breed_name FROM Breeds GROUP BY breed_code ORDER BY Count ( * ) Desc LIMIT value",
        -11.445940971374512
      ],
      [
        "SELECT breed_name FROM Breeds GROUP BY breed_name",
        -11.998307228088379
      ],
      [
        "SELECT T2.name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code GROUP BY T1.breed_name ORDER BY Count ( * ) Desc LIMIT value",
        -12.148209571838379
      ],
      [
        "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code GROUP BY T1.breed_name ORDER BY Sum ( T2.weight ) Desc LIMIT value",
        -12.235135078430176
      ],
      [
        "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code GROUP BY T2.name ORDER BY Count ( * ) Desc LIMIT value",
        -12.335933685302734
      ],
      [
        "SELECT breed_name FROM Breeds GROUP BY breed_name ORDER BY Count ( * ) Desc",
        -12.708240509033203
      ],
      [
        "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code GROUP BY T1.breed_name ORDER BY Count ( T2.age ) Desc LIMIT value",
        -12.796051025390625
      ],
      [
        "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code WHERE T2.weight = ( SELECT T2.weight FROM Dogs AS T2 ORDER BY T2.weight Desc LIMIT value )",
        -12.83510684967041
      ],
      [
        "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code ORDER BY T2.date_of_birth Desc LIMIT value",
        -13.26677417755127
      ],
      [
        "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code WHERE T2.weight = ( SELECT T2.weight FROM Dogs AS T2 GROUP BY T2.breed_code ORDER BY Count ( * ) Desc LIMIT value )",
        -13.327041625976562
      ],
      [
        "SELECT breed_name FROM Breeds",
        -13.410792350769043
      ],
      [
        "SELECT Max ( breed_name ) FROM Breeds",
        -15.157206535339355
      ]
    ],
    "predicted_parse_with_values": "SELECT breed_name FROM Breeds GROUP BY breed_name ORDER BY Count ( * ) Desc LIMIT 1",
    "predicted_parse": "SELECT breed_name FROM Breeds GROUP BY breed_name ORDER BY Count ( * ) Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of breed name in breeds table",
      "Step 2: find the breed name in breeds table with largest value in the results of step 1"
    ],
    "template_feedback": "in step 1 , additionally use the information from the dogs table besides the breeds table .",
    "primary_span": [
      [
        4,
        11
      ]
    ],
    "secondary_span": [
      [
        12,
        16
      ]
    ],
    "edits": [
      "dogs"
    ],
    "edits_original": "< from > add dogs </ from >"
  },
  {
    "db_id": "flight_2",
    "feedback": "In step 1 replace airlines's country with flights's source airport , in step 3 airports's country with flights's source airport .",
    "question": "Which airlines have departing flights from both APG and CVO airports?",
    "gold_parse": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\"",
    "beam": [
      [
        "SELECT T1.Airline FROM airlines AS T1 WHERE T1.Country = value INTERSECT SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value",
        -0.17249774932861328
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value INTERSECT SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value",
        -2.0254440307617188
      ],
      [
        "SELECT Airline FROM airlines WHERE Country = value INTERSECT SELECT Airline FROM airlines WHERE Country = value",
        -3.779306411743164
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value INTERSECT SELECT T1.Airline FROM airlines AS T1 WHERE T1.Country = value",
        -5.643898010253906
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 WHERE T1.Country = value INTERSECT SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.CountryAbbrev = value",
        -9.77209758758545
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value INTERSECT SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.CountryAbbrev = value",
        -11.600220680236816
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.CountryAbbrev = value INTERSECT SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value",
        -11.824843406677246
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value AND T1.Country = value",
        -12.346043109893799
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 WHERE T1.Abbreviation = value INTERSECT SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value",
        -12.38132381439209
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 WHERE T1.uid = value INTERSECT SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value",
        -12.391176223754883
      ],
      [
        "SELECT Airline FROM airlines WHERE Country = value AND Country = value",
        -12.666198253631592
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 WHERE T1.Country = value INTERSECT SELECT T1.Abbreviation FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value",
        -12.745254516601562
      ],
      [
        "SELECT Airline FROM airlines WHERE Country = value INTERSECT SELECT Airline FROM airlines",
        -13.21889877319336
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 WHERE T1.Country = value INTERSECT SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 GROUP BY T1.uid HAVING T2.Country = value",
        -13.244203090667725
      ],
      [
        "SELECT Airline FROM airlines WHERE Country = value INTERSECT SELECT Abbreviation FROM airlines WHERE Country = value",
        -13.652939796447754
      ],
      [
        "SELECT Airline FROM airlines WHERE Country = value INTERSECT SELECT Airline FROM airlines WHERE Abbreviation = value",
        -13.656370162963867
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 INTERSECT SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value",
        -13.746594905853271
      ],
      [
        "SELECT T1.Airline , T1.Country FROM airlines AS T1 WHERE T1.Country = value INTERSECT SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value",
        -13.806585788726807
      ],
      [
        "SELECT Airline FROM airlines WHERE Country = value INTERSECT SELECT Airline FROM airlines GROUP BY uid HAVING Country = value",
        -14.196623802185059
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 WHERE T1.Country = value INTERSECT SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value AND T2.Country = value",
        -14.360902786254883
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.Airline FROM airlines AS T1 WHERE T1.Country = \"APG\" INTERSECT SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = \"CVO\"",
    "predicted_parse": "SELECT T1.Airline FROM airlines AS T1 WHERE T1.Country = value INTERSECT SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value",
    "predicted_parse_explanation": [
      "Step 1: find the airline name in airlines table whose airlines 's country equals APG",
      "Step 2: for each row in airlines table , find the corresponding rows in airports table",
      "Step 3: find the airline name of the results of step 2 whose airports 's country equals CVO",
      "Step 4: show the rows that are in both the results of step 1 and step 3"
    ],
    "template_feedback": "in step 1 , additionally use the information from the flights table besides the airlines table . consider the source airport equals APG conditions in place of the country equals APG conditions . in step 2 , use flights table in place of airports table in step 3 , consider the source airport equals CVO conditions in place of the airports 's country equals CVO conditions .",
    "primary_span": [
      [
        4,
        11
      ],
      [
        17,
        23
      ],
      [
        37,
        39
      ],
      [
        49,
        55
      ]
    ],
    "secondary_span": [
      [
        12,
        16
      ],
      [
        24,
        32
      ],
      [
        40,
        44
      ],
      [
        56,
        66
      ]
    ],
    "edits": [
      "flights",
      "source airport equals \"APG\"",
      "country equals \"APG\"",
      "flights",
      "airports",
      "source airport equals \"CVO\"",
      "country equals \"CVO\""
    ],
    "edits_original": "< from > add flights </ from > < where > add source airport equals \" APG \" </ where > < where > remove country equals \" APG \" </ where > < from > add flights </ from > < from > remove airports </ from > < where > add source airport equals \" CVO \" </ where > < where > remove country equals \" CVO \" </ where >"
  },
  {
    "db_id": "flight_2",
    "feedback": "Find each value of source airport of flights table whose city equals Aberdeen .",
    "question": "Return the number of flights departing from Aberdeen.",
    "gold_parse": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
    "beam": [
      [
        "SELECT Count ( * ) FROM airports WHERE AirportName = value",
        -0.5530843734741211
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE City = value",
        -0.8685359954833984
      ],
      [
        "SELECT Count ( DISTINCT T2.FlightNo ) FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.AirportName = value",
        -5.812397003173828
      ],
      [
        "SELECT Count ( DISTINCT T2.FlightNo ) FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.City = value",
        -6.232259750366211
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE AirportName = value AND City = value",
        -8.362846374511719
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE Country = value",
        -10.809883117675781
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE City = value AND City = value",
        -11.455645561218262
      ],
      [
        "SELECT T2.FlightNo FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.City = value",
        -11.5651216506958
      ],
      [
        "SELECT Count ( T2.FlightNo ) FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.AirportName = value",
        -11.724117279052734
      ],
      [
        "SELECT T2.FlightNo FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.AirportName = value",
        -11.767508506774902
      ],
      [
        "SELECT Count ( T2.FlightNo ) FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.City = value",
        -11.844104766845703
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE AirportName = value AND AirportName = value",
        -13.415326118469238
      ],
      [
        "SELECT Count ( * ) FROM airlines WHERE Country = value",
        -14.302447319030762
      ],
      [
        "SELECT Avg ( T2.FlightNo ) FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.City = value",
        -14.600997924804688
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE CountryAbbrev = value",
        -14.613422393798828
      ],
      [
        "SELECT Count ( * ) FROM airlines WHERE Airline = value",
        -14.783849716186523
      ],
      [
        "SELECT Avg ( T2.FlightNo ) FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.AirportName = value",
        -15.349220275878906
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM airports WHERE AirportName = value",
        -15.591076850891113
      ],
      [
        "SELECT Count ( DISTINCT T2.FlightNo ) FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.Country = value",
        -15.718374252319336
      ],
      [
        "SELECT Count ( * ) FROM airlines",
        -18.12453842163086
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM airports WHERE AirportName = \"Aberdeen\"",
    "predicted_parse": "SELECT Count ( * ) FROM airports WHERE AirportName = value",
    "predicted_parse_explanation": [
      "find the number of rows in airports table whose airport name equals Aberdeen"
    ],
    "template_feedback": "additionally use the information from the flights table besides the airports table . consider the city equals Aberdeen conditions in place of the airport name equals Aberdeen conditions .",
    "primary_span": [
      [
        0,
        7
      ],
      [
        13,
        18
      ]
    ],
    "secondary_span": [
      [
        8,
        12
      ],
      [
        19,
        28
      ]
    ],
    "edits": [
      "flights",
      "city equals \"Aberdeen\"",
      "airport name equals \"Aberdeen\""
    ],
    "edits_original": "< from > add flights </ from > < where > add city equals \" Aberdeen \" </ where > < where > remove airport name equals \" Aberdeen \" </ where >"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "feedback": "Find each value of paragraphs table whose paragraph text equals Korea .",
    "question": "Show paragraph details for paragraph with text 'Korea'.",
    "gold_parse": "SELECT Other_Details FROM Paragraphs WHERE paragraph_text  =  'Korea'",
    "beam": [
      [
        "SELECT T2.Other_Details FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Name = value",
        -0.00679779052734375
      ],
      [
        "SELECT T2.Other_Details FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Name LIKE value",
        -5.891047477722168
      ],
      [
        "SELECT * FROM Documents WHERE Document_Name = value",
        -5.966283798217773
      ],
      [
        "SELECT Other_Details FROM Paragraphs WHERE Paragraph_Text = value",
        -7.078404426574707
      ],
      [
        "SELECT Other_Details FROM Documents WHERE Document_Name = value",
        -8.084089279174805
      ],
      [
        "SELECT T1.Template_Details FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Document_Name = value",
        -9.245524406433105
      ],
      [
        "SELECT T2.Paragraph_Text FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Name = value",
        -9.540614128112793
      ],
      [
        "SELECT T1.Date_Effective_To FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Document_Name = value",
        -9.81924057006836
      ],
      [
        "SELECT Other_Details FROM Paragraphs WHERE Paragraph_Text LIKE value",
        -10.140790939331055
      ],
      [
        "SELECT Document_Description FROM Documents WHERE Document_Name = value",
        -11.185294151306152
      ],
      [
        "SELECT * FROM Documents WHERE Document_Name LIKE value",
        -11.567346572875977
      ],
      [
        "SELECT * FROM Paragraphs WHERE Paragraph_Text = value",
        -12.659350395202637
      ],
      [
        "SELECT T2.Other_Details FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Name = value AND T1.Document_Name = value",
        -13.361648082733154
      ],
      [
        "SELECT T2.Paragraph_Text FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Name LIKE value",
        -13.749361991882324
      ],
      [
        "SELECT Other_Details FROM Documents WHERE Document_Name LIKE value",
        -13.897616386413574
      ],
      [
        "SELECT T2.Other_Details FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Description = value",
        -14.518956184387207
      ],
      [
        "SELECT T1.Template_Details FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Document_Name LIKE value",
        -14.879528045654297
      ],
      [
        "SELECT T1.Other_Details FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Paragraph_Text = value",
        -15.033417701721191
      ],
      [
        "SELECT T2.Other_Details , T2.Paragraph_Text FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Name = value",
        -15.077078938484192
      ],
      [
        "SELECT T2.Other_Details FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Name ! = value",
        -15.138871192932129
      ]
    ],
    "predicted_parse_with_values": "SELECT T2.Other_Details FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Name = \"Korea\"",
    "predicted_parse": "SELECT T2.Other_Details FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Name = value",
    "predicted_parse_explanation": [
      "Step 1: for each row in documents table , find the corresponding rows in paragraphs table",
      "Step 2: find the paragraphs 's other details of the results of step 1 whose document name equals Korea"
    ],
    "template_feedback": "in step 1 , do not use the documents table . in step 2 , consider the paragraph text equals Korea conditions in place of the document name equals Korea conditions .",
    "primary_span": [
      [
        4,
        10
      ],
      [
        15,
        21
      ]
    ],
    "secondary_span": [
      [
        4,
        10
      ],
      [
        22,
        31
      ]
    ],
    "edits": [
      "documents",
      "paragraph text equals \"Korea\"",
      "document name equals \"Korea\""
    ],
    "edits_original": "< from > remove documents </ from > < where > add paragraph text equals \" Korea \" </ where > < where > remove document name equals \" Korea \" </ where >"
  },
  {
    "db_id": "world_1",
    "feedback": "use continent instead of region for step 1, and put name in place of continent for step 2.",
    "question": "What are the countries that have greater surface area than any country in Europe?",
    "gold_parse": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")",
    "beam": [
      [
        "SELECT Continent FROM country WHERE SurfaceArea > ( SELECT Max ( SurfaceArea ) FROM country WHERE Region = value )",
        -0.41095924377441406
      ],
      [
        "SELECT Continent FROM country WHERE SurfaceArea > ( SELECT SurfaceArea FROM country WHERE Region = value )",
        -1.9903059005737305
      ],
      [
        "SELECT Continent FROM country WHERE SurfaceArea > ( SELECT Max ( SurfaceArea ) FROM country WHERE Continent = value )",
        -2.146559715270996
      ],
      [
        "SELECT GovernmentForm FROM country WHERE SurfaceArea > ( SELECT Max ( SurfaceArea ) FROM country WHERE Region = value )",
        -3.108792304992676
      ],
      [
        "SELECT Continent FROM country WHERE SurfaceArea > ( SELECT SurfaceArea FROM country WHERE Continent = value )",
        -4.253074645996094
      ],
      [
        "SELECT GovernmentForm FROM country WHERE SurfaceArea > ( SELECT SurfaceArea FROM country WHERE Region = value )",
        -4.548041343688965
      ],
      [
        "SELECT GovernmentForm FROM country WHERE SurfaceArea > ( SELECT Max ( SurfaceArea ) FROM country WHERE Continent = value )",
        -4.841872215270996
      ],
      [
        "SELECT Continent FROM country WHERE SurfaceArea > value",
        -6.248291969299316
      ],
      [
        "SELECT GovernmentForm FROM country WHERE SurfaceArea > ( SELECT SurfaceArea FROM country WHERE Continent = value )",
        -6.801033973693848
      ],
      [
        "SELECT Continent FROM country WHERE SurfaceArea > ( SELECT Max ( SurfaceArea ) FROM country WHERE Name = value )",
        -7.3814263343811035
      ],
      [
        "SELECT Continent FROM country WHERE SurfaceArea > ( SELECT Max ( SurfaceArea ) FROM country WHERE LocalName = value )",
        -7.402712821960449
      ],
      [
        "SELECT Continent FROM country WHERE SurfaceArea > ( SELECT Sum ( SurfaceArea ) FROM country WHERE Region = value )",
        -8.249146461486816
      ],
      [
        "SELECT Continent FROM country WHERE SurfaceArea > ( SELECT Max ( SurfaceArea ) FROM country WHERE SurfaceArea < value )",
        -8.6295747756958
      ],
      [
        "SELECT GovernmentForm FROM country WHERE SurfaceArea > value",
        -8.963991165161133
      ],
      [
        "SELECT Continent FROM country WHERE SurfaceArea > Region",
        -10.105143070220947
      ],
      [
        "SELECT Continent FROM country WHERE SurfaceArea > Continent",
        -10.469000339508057
      ],
      [
        "SELECT Continent FROM country WHERE SurfaceArea > LocalName",
        -11.551881790161133
      ],
      [
        "SELECT Continent FROM country WHERE SurfaceArea > Population",
        -11.599742889404297
      ],
      [
        "SELECT Continent FROM country WHERE SurfaceArea > SurfaceArea",
        -12.14023494720459
      ],
      [
        "SELECT Name FROM country WHERE SurfaceArea > value",
        -15.228706359863281
      ]
    ],
    "predicted_parse_with_values": "SELECT Continent FROM country WHERE SurfaceArea > ( SELECT Max ( SurfaceArea ) FROM country WHERE Region = \"Europe\" )",
    "predicted_parse": "SELECT Continent FROM country WHERE SurfaceArea > ( SELECT Max ( SurfaceArea ) FROM country WHERE Region = value )",
    "predicted_parse_explanation": [
      "Step 1: find the maximum surface area in country table whose region equals Europe",
      "Step 2: find the continent in country table whose surface area greater than the results of step 1"
    ],
    "template_feedback": "in step 1 , consider the continent equals Europe conditions in place of the region equals Europe conditions . find minimum surface area in place of maximum surface area . in step 2 , find name in place of continent .",
    "primary_span": [
      [
        4,
        9
      ],
      [
        19,
        22
      ],
      [
        34,
        35
      ]
    ],
    "secondary_span": [
      [
        10,
        18
      ],
      [
        23,
        29
      ],
      [
        36,
        40
      ]
    ],
    "edits": [
      "name",
      "continent",
      "minimum surface area",
      "maximum surface area",
      "continent equals \"Europe\"",
      "region equals \"Europe\""
    ],
    "edits_original": "< select > add name </ select > < select > remove continent </ select > < select > add minimum surface area </ select > < select > remove maximum surface area </ select > < where > add continent equals \" Europe \" </ where > < where > remove region equals \" Europe \" </ where >"
  },
  {
    "db_id": "pets_1",
    "feedback": "you need to replace pets table and pet age for pet table and age.",
    "question": "Find number of pets owned by students who are older than 20.",
    "gold_parse": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20",
    "beam": [
      [
        "SELECT Count ( * ) FROM Pets WHERE pet_age > value",
        -0.07866668701171875
      ],
      [
        "SELECT Count ( * ) FROM Student WHERE Age > value",
        -3.0491790771484375
      ],
      [
        "SELECT Count ( * ) FROM Pets WHERE weight > value",
        -4.193456649780273
      ],
      [
        "SELECT Count ( * ) FROM Pets WHERE pet_age > value AND pet_age > value",
        -4.757226943969727
      ],
      [
        "SELECT Count ( * ) FROM Pets WHERE weight > value AND pet_age > value",
        -6.125687599182129
      ],
      [
        "SELECT Count ( * ) FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.pet_age > value AND T1.Age > value",
        -6.6849365234375
      ],
      [
        "SELECT Count ( * ) FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T1.Age > value AND T3.pet_age > value",
        -7.462170600891113
      ],
      [
        "SELECT Count ( * ) FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.weight > value AND T1.Age > value",
        -8.071080207824707
      ],
      [
        "SELECT Count ( * ) FROM Student WHERE Age > value AND Age > value",
        -9.396498680114746
      ],
      [
        "SELECT Count ( * ) FROM Pets WHERE pet_age > value AND pet_age > = value",
        -10.120434761047363
      ],
      [
        "SELECT Count ( * ) FROM Pets WHERE pet_age > value AND weight > value",
        -10.906526565551758
      ],
      [
        "SELECT Count ( * ) FROM Pets WHERE pet_age > = value",
        -11.373140335083008
      ],
      [
        "SELECT Count ( * ) FROM Pets WHERE pet_age > value AND pet_age = value",
        -11.438491821289062
      ],
      [
        "SELECT Count ( * ) FROM Pets WHERE weight > value AND pet_age > = value",
        -11.59004020690918
      ],
      [
        "SELECT Count ( * ) FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.pet_age > value AND T1.Age = value",
        -11.772541999816895
      ],
      [
        "SELECT Count ( * ) FROM Pets WHERE pet_age < value",
        -12.648153305053711
      ],
      [
        "SELECT Count ( * ) FROM Pets WHERE PetType = value",
        -13.541954040527344
      ],
      [
        "SELECT Count ( * ) FROM Student WHERE Age > = value",
        -13.913409233093262
      ],
      [
        "SELECT Count ( * ) FROM Pets WHERE weight > = value",
        -14.299365997314453
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM Pets WHERE pet_age > value",
        -14.528959274291992
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM Pets WHERE pet_age > 20",
    "predicted_parse": "SELECT Count ( * ) FROM Pets WHERE pet_age > value",
    "predicted_parse_explanation": [
      "find the number of rows in pets table whose pet age greater than 20"
    ],
    "template_feedback": "use has pet table and student table in place of pets table . consider the age greater than 20 conditions in place of the pet age greater than 20 conditions .",
    "primary_span": [
      [
        0,
        6
      ],
      [
        13,
        19
      ]
    ],
    "secondary_span": [
      [
        7,
        12
      ],
      [
        20,
        30
      ]
    ],
    "edits": [
      "student",
      "has pet",
      "pets",
      "age greater than 20",
      "pet age greater than 20"
    ],
    "edits_original": "< from > add student </ from > < from > add has pet </ from > < from > remove pets </ from > < where > add age greater than 20 </ where > < where > remove pet age greater than 20 </ where >"
  },
  {
    "db_id": "student_transcripts_tracking",
    "feedback": "Verify that student has enrolled in degree programs degree summary name equals Bachelor .",
    "question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?",
    "gold_parse": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'",
    "beam": [
      [
        "SELECT first_name , middle_name , last_name FROM Students",
        -0.01981353759765625
      ],
      [
        "SELECT T2.first_name , T2.middle_name , T2.last_name FROM Semesters AS T1 JOIN Students AS T2 JOIN Student_Enrolment AS T3 ON T1.semester_id = T3.semester_id AND T3.student_id = T2.student_id WHERE T1.semester_name = value",
        -4.82416296005249
      ],
      [
        "SELECT T2.first_name , T2.middle_name , T2.last_name FROM Courses AS T1 JOIN Students AS T2 JOIN Student_Enrolment AS T3 ON T3.student_id = T2.student_id JOIN Student_Enrolment_Courses AS T4 ON T1.course_id = T4.course_id AND T4.student_enrolment_id = T3.student_enrolment_id WHERE T1.course_name = value",
        -5.338443279266357
      ],
      [
        "SELECT T2.first_name , T2.middle_name , T2.last_name FROM Degree_Programs AS T1 JOIN Students AS T2 JOIN Student_Enrolment AS T3 ON T1.degree_program_id = T3.degree_program_id AND T3.student_id = T2.student_id WHERE T1.degree_summary_name = value",
        -5.4487199783325195
      ],
      [
        "SELECT first_name , middle_name , last_name FROM Students WHERE first_name = value",
        -6.382963418960571
      ],
      [
        "SELECT first_name , middle_name , last_name FROM Students WHERE middle_name = value",
        -7.679800987243652
      ],
      [
        "SELECT T2.first_name , T2.middle_name , T2.last_name FROM Semesters AS T1 JOIN Students AS T2 JOIN Student_Enrolment AS T3 ON T1.semester_id = T3.semester_id AND T3.student_id = T2.student_id WHERE T1.semester_description = value",
        -9.298354625701904
      ],
      [
        "SELECT first_name , middle_name , last_name FROM Students EXCEPT SELECT first_name , middle_name , last_name FROM Students",
        -10.793282508850098
      ],
      [
        "SELECT first_name , middle_name , last_name FROM Students WHERE date_first_registered = value",
        -10.85253381729126
      ],
      [
        "SELECT first_name , middle_name , last_name FROM Students ORDER BY last_name Asc LIMIT value",
        -10.880986392498016
      ],
      [
        "SELECT T2.first_name , T2.middle_name , T2.last_name , T1.course_name FROM Courses AS T1 JOIN Students AS T2 JOIN Student_Enrolment AS T3 ON T3.student_id = T2.student_id JOIN Student_Enrolment_Courses AS T4 ON T1.course_id = T4.course_id AND T4.student_enrolment_id = T3.student_enrolment_id",
        -10.8824782371521
      ],
      [
        "SELECT first_name , middle_name , last_name FROM Students ORDER BY first_name Asc",
        -11.086626708507538
      ],
      [
        "SELECT first_name , middle_name , last_name FROM Students WHERE other_student_details = value",
        -11.312886714935303
      ],
      [
        "SELECT T3.first_name , T3.middle_name , T3.last_name FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id JOIN Students AS T3 JOIN Student_Enrolment AS T4 ON T2.degree_program_id = T4.degree_program_id AND T4.student_id = T3.student_id WHERE T1.department_name = value",
        -11.370729446411133
      ],
      [
        "SELECT first_name , middle_name , last_name FROM Students UNION SELECT middle_name FROM Students",
        -11.862025260925293
      ],
      [
        "SELECT T2.first_name , T2.middle_name , T2.last_name FROM Degree_Programs AS T1 JOIN Students AS T2 JOIN Student_Enrolment AS T3 ON T1.degree_program_id = T3.degree_program_id AND T3.student_id = T2.student_id WHERE T1.degree_summary_description = value",
        -12.015717506408691
      ],
      [
        "SELECT first_name , middle_name FROM Students",
        -12.800690650939941
      ],
      [
        "SELECT Count ( first_name ) , middle_name , last_name FROM Students",
        -14.701388359069824
      ],
      [
        "SELECT DISTINCT first_name , middle_name , last_name FROM Students",
        -14.952290534973145
      ],
      [
        "SELECT first_name , DISTINCT middle_name , last_name FROM Students",
        -16.45470428466797
      ]
    ],
    "predicted_parse_with_values": "SELECT first_name , middle_name , last_name FROM Students",
    "predicted_parse": "SELECT first_name , middle_name , last_name FROM Students",
    "predicted_parse_explanation": [
      "find the first name , middle name , last name in students table"
    ],
    "template_feedback": "additionally use the information from the degree programs table and student enrolment table besides the students table . additionally make sure that degree summary name equals Bachelor . make sure no repetition in the results .",
    "primary_span": [
      [
        0,
        12
      ],
      [
        18,
        27
      ],
      [
        28,
        35
      ]
    ],
    "secondary_span": [
      [
        13,
        17
      ]
    ],
    "edits": [
      "distinct",
      "student enrolment",
      "degree programs",
      "degree summary name equals \"Bachelor\""
    ],
    "edits_original": "< select > add distinct </ select > < from > add student enrolment </ from > < from > add degree programs </ from > < where > add degree summary name equals \" Bachelor \" </ where >"
  },
  {
    "db_id": "car_1",
    "feedback": "Find maximum value in horsepower along with that .",
    "question": "What is the number of cars with a greater accelerate than the one with the most horsepower?",
    "gold_parse": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 )",
    "beam": [
      [
        "SELECT Count ( * ) FROM cars_data WHERE Accelerate > value",
        -0.4257020950317383
      ],
      [
        "SELECT Count ( * ) FROM cars_data WHERE Accelerate > value ORDER BY Accelerate Desc LIMIT value",
        -1.6964216232299805
      ],
      [
        "SELECT Count ( * ) FROM cars_data ORDER BY Accelerate Desc LIMIT value",
        -1.8396635055541992
      ],
      [
        "SELECT Count ( * ) FROM cars_data WHERE Accelerate > value GROUP BY Accelerate ORDER BY Count ( * ) Desc LIMIT value",
        -7.114784240722656
      ],
      [
        "SELECT Count ( * ) FROM cars_data GROUP BY Id ORDER BY Count ( * ) Desc LIMIT value",
        -7.145870685577393
      ],
      [
        "SELECT Count ( * ) FROM cars_data WHERE Accelerate > ( SELECT Max ( Accelerate ) FROM cars_data )",
        -7.359470367431641
      ],
      [
        "SELECT Count ( * ) FROM cars_data WHERE Accelerate > value GROUP BY Id ORDER BY Count ( * ) Desc LIMIT value",
        -7.624226331710815
      ],
      [
        "SELECT Count ( * ) FROM cars_data WHERE Accelerate > value GROUP BY Accelerate ORDER BY Accelerate Desc LIMIT value",
        -7.956796646118164
      ],
      [
        "SELECT Count ( * ) FROM model_list GROUP BY Model ORDER BY Count ( * ) Desc LIMIT value",
        -8.162497997283936
      ],
      [
        "SELECT Count ( * ) FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T3.Accelerate > value GROUP BY T1.Model ORDER BY Count ( * ) Desc LIMIT value",
        -8.458293199539185
      ],
      [
        "SELECT Count ( * ) FROM cars_data WHERE Accelerate > value GROUP BY MPG ORDER BY Count ( * ) Desc LIMIT value",
        -8.75926923751831
      ],
      [
        "SELECT Count ( * ) FROM cars_data WHERE Accelerate > value GROUP BY Horsepower ORDER BY Count ( * ) Desc LIMIT value",
        -9.771563053131104
      ],
      [
        "SELECT Count ( * ) FROM cars_data GROUP BY MPG ORDER BY Count ( * ) Desc LIMIT value",
        -9.814672470092773
      ],
      [
        "SELECT Count ( * ) FROM cars_data WHERE Accelerate = ( SELECT Max ( Accelerate ) FROM cars_data ) ORDER BY Accelerate Desc LIMIT value",
        -9.978800058364868
      ],
      [
        "SELECT Count ( * ) FROM cars_data WHERE Accelerate > value GROUP BY Year ORDER BY Count ( * ) Desc LIMIT value",
        -9.99770450592041
      ],
      [
        "SELECT Count ( * ) FROM continents GROUP BY * ORDER BY Count ( * ) Desc LIMIT value",
        -10.237091541290283
      ],
      [
        "SELECT Count ( * ) FROM cars_data GROUP BY Year ORDER BY Count ( * ) Desc LIMIT value",
        -10.563273906707764
      ],
      [
        "SELECT Count ( * ) FROM cars_data WHERE Accelerate > value ORDER BY * Desc LIMIT value",
        -10.680676460266113
      ],
      [
        "SELECT Count ( * ) FROM car_makers GROUP BY FullName ORDER BY Count ( * ) Desc LIMIT value",
        -10.833190441131592
      ],
      [
        "SELECT Count ( * ) FROM continents",
        -13.066018104553223
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM cars_data WHERE Accelerate > 1",
    "predicted_parse": "SELECT Count ( * ) FROM cars_data WHERE Accelerate > value",
    "predicted_parse_explanation": [
      "find the number of rows in cars data table whose accelerate greater than 1"
    ],
    "template_feedback": "consider the accelerate is greater than accelerate cars data with largest horsepower conditions in place of the accelerate greater than 1 conditions .",
    "primary_span": [
      [
        0,
        12
      ]
    ],
    "secondary_span": [
      [
        13,
        22
      ]
    ],
    "edits": [
      "accelerate greater than SUBS1",
      "accelerate greater than 1",
      "accelerate",
      "cars data",
      "horsepower",
      "descending",
      "1"
    ],
    "edits_original": "< where > add accelerate greater than SUBS1 </ where > < where > remove accelerate greater than 1 </ where > < select > add accelerate </ select > < from > add cars data </ from > < orderBy > add horsepower </ orderBy > < orderBy > add descending </ orderBy > < limit > add 1 </ limit >"
  },
  {
    "db_id": "dog_kennels",
    "feedback": "There should be \"dog id should be located in treatments table\" instead of \"gender equals 1\".",
    "question": "What is the average age of the dogs who have gone through any treatments?",
    "gold_parse": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
    "beam": [
      [
        "SELECT Avg ( age ) FROM Dogs WHERE gender = value",
        -0.12744140625
      ],
      [
        "SELECT Avg ( age ) FROM Dogs",
        -2.978224754333496
      ],
      [
        "SELECT Avg ( T1.age ) FROM Dogs AS T1 WHERE T1.dog_id = ( SELECT T2.dog_id FROM Treatments AS T2 )",
        -3.025521755218506
      ],
      [
        "SELECT Avg ( age ) FROM Dogs WHERE breed_code = value",
        -4.678166389465332
      ],
      [
        "SELECT Avg ( T1.age ) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T2.treatment_type_code = value",
        -5.243710994720459
      ],
      [
        "SELECT Avg ( T1.age ) FROM Dogs AS T1 WHERE T1.dog_id IN ( SELECT T2.dog_id FROM Treatments AS T2 )",
        -5.831369400024414
      ],
      [
        "SELECT Avg ( age ) FROM Dogs WHERE name = value",
        -7.236720085144043
      ],
      [
        "SELECT Avg ( T1.age ) FROM Dogs AS T1 WHERE T1.gender = ( SELECT T2.dog_id FROM Treatments AS T2 )",
        -7.656651496887207
      ],
      [
        "SELECT Avg ( age ) FROM Dogs WHERE weight = ( SELECT Min ( weight ) FROM Dogs )",
        -7.874341011047363
      ],
      [
        "SELECT Avg ( T2.age ) FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code WHERE T1.breed_name = value",
        -8.283258438110352
      ],
      [
        "SELECT Avg ( T1.age ) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.gender = T2.dog_id",
        -8.458293437957764
      ],
      [
        "SELECT Avg ( date_of_birth ) FROM Dogs WHERE gender = value",
        -8.517709732055664
      ],
      [
        "SELECT Avg ( age ) FROM Dogs WHERE weight = ( SELECT Min ( age ) FROM Dogs )",
        -8.743810653686523
      ],
      [
        "SELECT Avg ( T1.age ) FROM Dogs AS T1 WHERE T1.weight = ( SELECT T2.dog_id FROM Treatments AS T2 )",
        -9.656025886535645
      ],
      [
        "SELECT Avg ( age ) FROM Dogs WHERE size_code = value",
        -9.967280387878418
      ],
      [
        "SELECT Avg ( T1.age ) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.dog_id = T2.dog_id",
        -10.428727626800537
      ],
      [
        "SELECT Avg ( T2.age ) FROM Treatment_Types AS T1 JOIN Dogs AS T2 JOIN Treatments AS T3 ON T1.treatment_type_code = T3.treatment_type_code AND T3.dog_id = T2.dog_id WHERE T1.treatment_type_description = value",
        -11.24510669708252
      ],
      [
        "SELECT Avg ( T2.age ) FROM Treatment_Types AS T1 JOIN Dogs AS T2 JOIN Treatments AS T3 ON T1.treatment_type_code = T3.treatment_type_code AND T3.dog_id = T2.dog_id WHERE T1.treatment_type_code = value",
        -11.498476028442383
      ],
      [
        "SELECT Avg ( date_of_birth ) FROM Dogs",
        -11.807377815246582
      ],
      [
        "SELECT Avg ( age ) FROM Dogs WHERE dog_id = value",
        -11.90070390701294
      ]
    ],
    "predicted_parse_with_values": "SELECT Avg ( age ) FROM Dogs WHERE gender = 1",
    "predicted_parse": "SELECT Avg ( age ) FROM Dogs WHERE gender = value",
    "predicted_parse_explanation": [
      "find the average age in dogs table whose gender equals 1"
    ],
    "template_feedback": "consider the dog id is one of treatments 's dog id treatments conditions in place of the gender equals 1 conditions .",
    "primary_span": [
      [
        0,
        12
      ]
    ],
    "secondary_span": [
      [
        13,
        21
      ]
    ],
    "edits": [
      "dog id one of SUBS1",
      "gender equals 1",
      "dog id",
      "treatments"
    ],
    "edits_original": "< where > add dog id one of SUBS1 </ where > < where > remove gender equals 1 </ where > < select > add dog id </ select > < from > add treatments </ from >"
  },
  {
    "db_id": "wta_1",
    "feedback": "Change loser ioc with tourney name and \"smallest value of winner rank with \"largest value of winner rank points\".",
    "question": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?",
    "gold_parse": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
    "beam": [
      [
        "SELECT winner_name FROM matches WHERE loser_ioc = value ORDER BY winner_rank Asc LIMIT value",
        -1.0612239837646484
      ],
      [
        "SELECT tourney_name FROM matches WHERE loser_ioc = value ORDER BY winner_rank Asc LIMIT value",
        -1.5899581909179688
      ],
      [
        "SELECT winner_name FROM matches WHERE winner_rank = ( SELECT Max ( winner_rank ) FROM matches WHERE loser_ioc = value ) ORDER BY winner_rank Asc LIMIT value",
        -2.282607078552246
      ],
      [
        "SELECT T2.winner_name FROM players AS T1 JOIN matches AS T2 ON T2.loser_id = T1.player_id JOIN rankings AS T3 ON T1.player_id = T3.player_id WHERE T3.ranking = ( SELECT Max ( T2.winner_rank ) FROM matches AS T2 WHERE T2.loser_ioc = value ) ORDER BY T2.winner_rank Asc LIMIT value",
        -2.587848663330078
      ],
      [
        "SELECT tourney_name FROM matches WHERE winner_rank = ( SELECT Max ( winner_rank ) FROM matches WHERE loser_ioc = value ) ORDER BY winner_rank Asc LIMIT value",
        -3.447178840637207
      ],
      [
        "SELECT T2.winner_name FROM players AS T1 JOIN matches AS T2 ON T2.loser_id = T1.player_id JOIN rankings AS T3 ON T1.player_id = T3.player_id WHERE T3.ranking = ( SELECT Max ( T2.winner_rank ) FROM matches AS T2 ) ORDER BY T2.winner_rank Asc LIMIT value",
        -3.59622859954834
      ],
      [
        "SELECT T2.tourney_name FROM players AS T1 JOIN matches AS T2 ON T2.loser_id = T1.player_id JOIN rankings AS T3 ON T1.player_id = T3.player_id WHERE T3.ranking = ( SELECT Max ( T2.winner_rank ) FROM matches AS T2 WHERE T2.loser_ioc = value ) ORDER BY T2.winner_rank Asc LIMIT value",
        -3.5965871810913086
      ],
      [
        "SELECT winner_name FROM matches WHERE winner_rank = ( SELECT Max ( winner_rank ) FROM matches ) ORDER BY winner_rank Asc LIMIT value",
        -3.862062454223633
      ],
      [
        "SELECT T2.tourney_name FROM players AS T1 JOIN matches AS T2 ON T2.loser_id = T1.player_id JOIN rankings AS T3 ON T1.player_id = T3.player_id WHERE T3.ranking = ( SELECT Max ( T2.winner_rank ) FROM matches AS T2 ) ORDER BY T2.winner_rank Asc LIMIT value",
        -4.484861373901367
      ],
      [
        "SELECT winner_name FROM matches WHERE loser_rank = ( SELECT Max ( winner_rank ) FROM matches WHERE loser_ioc = value ) ORDER BY winner_rank Asc LIMIT value",
        -4.491488456726074
      ],
      [
        "SELECT winner_name FROM matches WHERE winner_ioc = value ORDER BY winner_rank Asc LIMIT value",
        -4.643537521362305
      ],
      [
        "SELECT T2.winner_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T1.country_code = value ORDER BY T2.winner_rank Asc LIMIT value",
        -4.706721305847168
      ],
      [
        "SELECT winner_name FROM matches WHERE winner_rank = ( SELECT Max ( winner_rank_points ) FROM matches WHERE loser_ioc = value ) ORDER BY winner_rank Asc LIMIT value",
        -4.798151969909668
      ],
      [
        "SELECT tourney_name FROM matches WHERE winner_rank = ( SELECT Max ( winner_rank ) FROM matches ) ORDER BY winner_rank Asc LIMIT value",
        -4.800678253173828
      ],
      [
        "SELECT winner_name FROM matches WHERE loser_ioc = value ORDER BY winner_rank_points Asc LIMIT value",
        -5.029705047607422
      ],
      [
        "SELECT T2.winner_name FROM players AS T1 JOIN matches AS T2 ON T2.loser_id = T1.player_id JOIN rankings AS T3 ON T1.player_id = T3.player_id WHERE T3.ranking = ( SELECT Max ( T2.winner_rank_points ) FROM matches AS T2 WHERE T2.loser_ioc = value ) ORDER BY T2.winner_rank Asc LIMIT value",
        -5.083902359008789
      ],
      [
        "SELECT tourney_name FROM matches WHERE winner_ioc = value ORDER BY winner_rank Asc LIMIT value",
        -5.214947700500488
      ],
      [
        "SELECT T2.tourney_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T1.country_code = value ORDER BY T2.winner_rank Asc LIMIT value",
        -5.3758440017700195
      ],
      [
        "SELECT tourney_name FROM matches WHERE loser_rank = ( SELECT Max ( winner_rank ) FROM matches WHERE loser_ioc = value ) ORDER BY winner_rank Asc LIMIT value",
        -5.529729843139648
      ],
      [
        "SELECT tourney_name FROM matches WHERE loser_ioc = value ORDER BY winner_rank_points Asc LIMIT value",
        -5.556131362915039
      ]
    ],
    "predicted_parse_with_values": "SELECT winner_name FROM matches WHERE loser_ioc = \"Australian Open\" ORDER BY winner_rank Asc LIMIT 1",
    "predicted_parse": "SELECT winner_name FROM matches WHERE loser_ioc = value ORDER BY winner_rank Asc LIMIT value",
    "predicted_parse_explanation": [
      "find the winner name in matches table whose loser ioc equals Australian Open with smallest value of winner rank"
    ],
    "template_feedback": "consider the tourney name equals Australian Open conditions in place of the loser ioc equals Australian Open conditions . order the results descending by winner rank points in place of ordering ascending by winner rank .",
    "primary_span": [
      [
        0,
        7
      ],
      [
        19,
        26
      ]
    ],
    "secondary_span": [
      [
        8,
        18
      ],
      [
        27,
        35
      ]
    ],
    "edits": [
      "tourney name equals \"Australian Open\"",
      "loser ioc equals \"Australian Open\"",
      "winner rank points",
      "descending",
      "winner rank"
    ],
    "edits_original": "< where > add tourney name equals \" Australian Open \" </ where > < where > remove loser ioc equals \" Australian Open \" </ where > < orderBy > add winner rank points </ orderBy > < orderBy > add descending </ orderBy > < orderBy > remove winner rank </ orderBy >"
  },
  {
    "db_id": "flight_2",
    "feedback": "I want table of flights instead of table of airlines in step 1.",
    "question": "Which airlines have less than 200 flights?",
    "gold_parse": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200",
    "beam": [
      [
        "SELECT Airline FROM airlines GROUP BY Airline HAVING Count ( * ) < value",
        -0.24365901947021484
      ],
      [
        "SELECT Airline FROM airlines WHERE Abbreviation < value",
        -2.6136364936828613
      ],
      [
        "SELECT Airline FROM airlines GROUP BY Airline HAVING Count ( * ) BETWEEN value AND value",
        -2.9963769912719727
      ],
      [
        "SELECT Airline FROM airlines GROUP BY Abbreviation HAVING Count ( * ) < value",
        -3.580033302307129
      ],
      [
        "SELECT Airline FROM airlines WHERE Airline < value",
        -3.777273178100586
      ],
      [
        "SELECT Airline FROM airlines GROUP BY Abbreviation HAVING Count ( * ) BETWEEN value AND value",
        -4.128104209899902
      ],
      [
        "SELECT Airline FROM airlines WHERE uid < value",
        -4.526791095733643
      ],
      [
        "SELECT Airline FROM airlines GROUP BY Airline HAVING Count ( * ) > = value",
        -4.578986167907715
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 WHERE T2.Airline < value",
        -6.364003658294678
      ],
      [
        "SELECT Airline FROM airlines GROUP BY Abbreviation HAVING Count ( * ) > = value",
        -6.729278564453125
      ],
      [
        "SELECT Airline FROM airlines GROUP BY uid HAVING Count ( * ) < value",
        -7.224949836730957
      ],
      [
        "SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 WHERE T2.FlightNo < value",
        -7.622908115386963
      ],
      [
        "SELECT Airline FROM airlines GROUP BY uid HAVING Count ( * ) BETWEEN value AND value",
        -7.766242980957031
      ],
      [
        "SELECT Airline FROM airlines WHERE Abbreviation BETWEEN value AND value",
        -8.688870906829834
      ],
      [
        "SELECT Airline FROM airlines GROUP BY Airline HAVING Count ( * ) = value",
        -10.021872520446777
      ],
      [
        "SELECT Airline FROM airlines WHERE Airline BETWEEN value AND value",
        -10.178562879562378
      ],
      [
        "SELECT Abbreviation FROM airlines GROUP BY Airline HAVING Count ( * ) < value",
        -10.958222389221191
      ],
      [
        "SELECT Airline FROM airlines GROUP BY uid HAVING Count ( * ) > = value",
        -10.99583625793457
      ],
      [
        "SELECT Airline FROM airlines WHERE Country < value",
        -11.385013580322266
      ],
      [
        "SELECT Airline FROM airlines",
        -11.712915420532227
      ]
    ],
    "predicted_parse_with_values": "SELECT Airline FROM airlines GROUP BY Airline HAVING Count ( * ) < 200",
    "predicted_parse": "SELECT Airline FROM airlines GROUP BY Airline HAVING Count ( * ) < value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of airline name in airlines table",
      "Step 2: find the airline name in airlines table whose corresponding value in step 1 is less than 200"
    ],
    "template_feedback": "in step 1 , additionally use the information from the flights table besides the airlines table .",
    "primary_span": [
      [
        4,
        11
      ]
    ],
    "secondary_span": [
      [
        12,
        16
      ]
    ],
    "edits": [
      "flights"
    ],
    "edits_original": "< from > add flights </ from >"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "feedback": "In step 1 use paragraphs table and switch document id, date effective to with paragraph id, paragraph text.",
    "question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?",
    "gold_parse": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'",
    "beam": [
      [
        "SELECT T2.Document_ID , T1.Date_Effective_To FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Document_Name = value",
        -1.2104039192199707
      ],
      [
        "SELECT T1.Document_ID , T2.Paragraph_Text FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Name = value",
        -1.3329286575317383
      ],
      [
        "SELECT Document_ID , Template_ID FROM Documents WHERE Document_Name = value",
        -1.6270804405212402
      ],
      [
        "SELECT T2.Template_ID , T1.Date_Effective_To FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Document_Name = value",
        -2.4363832473754883
      ],
      [
        "SELECT T1.Template_ID , T2.Paragraph_Text FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Name = value",
        -2.6242175102233887
      ],
      [
        "SELECT T1.Document_ID , T2.Paragraph_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Name = value",
        -3.4285693168640137
      ],
      [
        "SELECT Document_ID , Document_ID FROM Documents WHERE Document_Name = value",
        -4.288336277008057
      ],
      [
        "SELECT Template_ID , Template_ID FROM Documents WHERE Document_Name = value",
        -4.450746297836304
      ],
      [
        "SELECT Document_ID , Document_Name FROM Documents WHERE Document_Name = value",
        -5.3112945556640625
      ],
      [
        "SELECT T1.Template_ID , T2.Paragraph_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Name = value",
        -5.498436212539673
      ],
      [
        "SELECT Document_ID , Document_Description FROM Documents WHERE Document_Name = value",
        -5.5492424964904785
      ],
      [
        "SELECT Template_ID , Document_Name FROM Documents WHERE Document_Name = value",
        -5.786207675933838
      ],
      [
        "SELECT Template_ID , Document_Description FROM Documents WHERE Document_Name = value",
        -6.340936183929443
      ],
      [
        "SELECT Template_ID , Document_ID FROM Documents WHERE Document_Name = value",
        -6.490518093109131
      ],
      [
        "SELECT T2.Document_ID , T1.Date_Effective_From FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Document_Name = value",
        -7.1044487953186035
      ],
      [
        "SELECT T1.Document_ID , T2.Paragraph_Text FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Name LIKE value",
        -7.184764862060547
      ],
      [
        "SELECT Document_ID , Template_ID FROM Documents WHERE Document_Name LIKE value",
        -7.675963878631592
      ],
      [
        "SELECT T2.Document_ID , T1.Template_ID FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Document_Name = value",
        -7.812219619750977
      ],
      [
        "SELECT T2.Template_ID , T1.Date_Effective_From FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Document_Name = value",
        -8.054866790771484
      ],
      [
        "SELECT T2.Paragraph_ID , T1.Template_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Name = value",
        -8.065346717834473
      ]
    ],
    "predicted_parse_with_values": "SELECT T2.Document_ID , T1.Date_Effective_To FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Document_Name = \"Welcome to NY\"",
    "predicted_parse": "SELECT T2.Document_ID , T1.Date_Effective_To FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Document_Name = value",
    "predicted_parse_explanation": [
      "Step 1: for each row in templates table , find the corresponding rows in documents table",
      "Step 2: find the document id and date effective to of the results of step 1 whose document name equals Welcome to NY"
    ],
    "template_feedback": "in step 1 , use paragraphs table in place of templates table in step 2 , find paragraph text and paragraph id in place of documents 's document id and date effective to .",
    "primary_span": [
      [
        4,
        6
      ],
      [
        16,
        21
      ]
    ],
    "secondary_span": [
      [
        7,
        11
      ],
      [
        22,
        33
      ]
    ],
    "edits": [
      "paragraph id",
      "paragraph text",
      "document id",
      "date effective to",
      "paragraphs",
      "templates"
    ],
    "edits_original": "< select > add paragraph id </ select > < select > add paragraph text </ select > < select > remove document id </ select > < select > remove date effective to </ select > < from > add paragraphs </ from > < from > remove templates </ from >"
  },
  {
    "db_id": "orchestra",
    "feedback": "Remove \"ordered descending by year of founded and step 3 , Exchange 200 3 with 2008.",
    "question": "Please show the name of the conductor that has conducted orchestras founded after 2008.",
    "gold_parse": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008",
    "beam": [
      [
        "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Year_of_Founded > value ORDER BY T2.Year_of_Founded Desc LIMIT value",
        -0.27953529357910156
      ],
      [
        "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Year_of_Founded > value",
        -1.6167306900024414
      ],
      [
        "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Year_of_Founded > value GROUP BY T2.Conductor_ID ORDER BY Count ( * ) Desc LIMIT value",
        -3.6482276916503906
      ],
      [
        "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Year_of_Founded > value ORDER BY T2.Year_of_Founded Asc LIMIT value",
        -4.384346008300781
      ],
      [
        "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID ORDER BY T2.Year_of_Founded Desc LIMIT value",
        -5.50018310546875
      ],
      [
        "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Year_of_Founded > value GROUP BY T2.Conductor_ID ORDER BY T2.Year_of_Founded Desc LIMIT value",
        -6.667233467102051
      ],
      [
        "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Year_of_Founded > value ORDER BY T2.Year_of_Founded Desc",
        -7.625516414642334
      ],
      [
        "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Year_of_Founded > value ORDER BY T1.Year_of_Work Desc LIMIT value",
        -7.702636241912842
      ],
      [
        "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Year_of_Founded > value GROUP BY T1.Conductor_ID ORDER BY Count ( * ) Desc LIMIT value",
        -8.608154773712158
      ],
      [
        "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Year_of_Founded > value GROUP BY T2.Conductor_ID ORDER BY Count ( * ) Desc",
        -10.010515213012695
      ],
      [
        "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Year_of_Founded > value GROUP BY T2.Conductor_ID",
        -10.21871566772461
      ],
      [
        "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Year_of_Founded > value ORDER BY T2.Year_of_Founded Asc",
        -11.358325958251953
      ],
      [
        "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Year_of_Founded > value ORDER BY T1.Name Desc",
        -11.458503246307373
      ],
      [
        "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Year_of_Founded > value ORDER BY T1.Name Asc",
        -11.916779518127441
      ],
      [
        "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Year_of_Founded > value ORDER BY T1.Name Desc LIMIT value",
        -12.201552391052246
      ],
      [
        "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY Count ( * ) Desc LIMIT value",
        -12.388581275939941
      ],
      [
        "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Year_of_Founded > value ORDER BY T1.Year_of_Work Asc LIMIT value",
        -12.74144458770752
      ],
      [
        "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Year_of_Founded = value ORDER BY T2.Year_of_Founded Desc LIMIT value",
        -13.243542671203613
      ],
      [
        "SELECT DISTINCT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Year_of_Founded > value",
        -14.657073974609375
      ],
      [
        "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID ORDER BY T2.Year_of_Founded Desc",
        -14.70117473602295
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Year_of_Founded > 2003 ORDER BY T2.Year_of_Founded Desc LIMIT 2008",
    "predicted_parse": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Year_of_Founded > value ORDER BY T2.Year_of_Founded Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: for each row in conductor table , find the corresponding rows in orchestra table",
      "Step 2: find the name of the results of step 1 whose year of founded greater than 2003 ordered descending by year of founded",
      "Step 3: only show the first 2008 rows of the results"
    ],
    "template_feedback": "in step 2 , consider the year of founded greater than 2008 conditions in place of the year of founded greater than 2003 conditions . you should not order the results . in step 1 , show me all the results .",
    "primary_span": [
      [
        4,
        12
      ],
      [
        25,
        31
      ],
      [
        36,
        41
      ]
    ],
    "secondary_span": [
      [
        13,
        24
      ]
    ],
    "edits": [
      "year of founded greater than 2008",
      "year of founded greater than 2003",
      "year of founded",
      "descending",
      "2008"
    ],
    "edits_original": "< where > add year of founded greater than 2008 </ where > < where > remove year of founded greater than 2003 </ where > < orderBy > remove year of founded </ orderBy > < orderBy > remove descending </ orderBy > < limit > remove 2008 </ limit >"
  },
  {
    "db_id": "network_1",
    "feedback": "In step 2 ignore grade.",
    "question": "Show the names of high school students and their corresponding number of friends.",
    "gold_parse": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
    "beam": [
      [
        "SELECT T1.name , T1.grade , Count ( * ) FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id",
        -0.6819887161254883
      ],
      [
        "SELECT T1.name , T1.grade FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id",
        -1.4952983856201172
      ],
      [
        "SELECT T1.name , T1.grade , Count ( * ) FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id GROUP BY T2.student_id",
        -2.2147135734558105
      ],
      [
        "SELECT name , grade FROM Highschooler GROUP BY name",
        -3.1215763092041016
      ],
      [
        "SELECT T1.name , T1.grade FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id GROUP BY T2.student_id",
        -3.218562126159668
      ],
      [
        "SELECT T1.name , T1.grade , Count ( * ) FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id GROUP BY T2.liked_id",
        -3.5201690196990967
      ],
      [
        "SELECT T1.name , T1.grade FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id GROUP BY T2.liked_id",
        -4.063495397567749
      ],
      [
        "SELECT name , grade , Count ( * ) FROM Highschooler GROUP BY name",
        -4.487281799316406
      ],
      [
        "SELECT T1.name , T1.grade , Count ( * ) FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.friend_id",
        -4.699726104736328
      ],
      [
        "SELECT T1.name , T1.grade FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.friend_id",
        -5.660309791564941
      ],
      [
        "SELECT name , grade FROM Highschooler GROUP BY grade",
        -5.708004951477051
      ],
      [
        "SELECT name , grade FROM Highschooler GROUP BY ID",
        -6.987400054931641
      ],
      [
        "SELECT T1.grade , Count ( * ) FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id",
        -8.550743579864502
      ],
      [
        "SELECT grade , Count ( * ) FROM Highschooler GROUP BY name",
        -8.715344905853271
      ],
      [
        "SELECT T1.name , Count ( * ) FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id",
        -9.338793754577637
      ],
      [
        "SELECT name , Count ( * ) FROM Highschooler GROUP BY name",
        -9.763890743255615
      ],
      [
        "SELECT name , Count ( * ) FROM Highschooler GROUP BY grade",
        -10.00453519821167
      ],
      [
        "SELECT T1.grade , Count ( * ) FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id GROUP BY T2.student_id",
        -10.03730297088623
      ],
      [
        "SELECT name , grade FROM Highschooler",
        -10.432611465454102
      ],
      [
        "SELECT name FROM Highschooler GROUP BY grade",
        -15.484752655029297
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.name , T1.grade , Count ( * ) FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id",
    "predicted_parse": "SELECT T1.name , T1.grade , Count ( * ) FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id",
    "predicted_parse_explanation": [
      "Step 1: for each row in high schooler table , find the corresponding rows in friend table",
      "Step 2: find each value of student id of the results of step 1 along with the number of the corresponding rows to each value"
    ],
    "template_feedback": "in step 2 , do not return grade .",
    "primary_span": [
      [
        4,
        8
      ]
    ],
    "secondary_span": [],
    "edits": [
      "grade"
    ],
    "edits_original": "< select > remove grade </ select >"
  },
  {
    "db_id": "flight_2",
    "feedback": "in step 1 use destination airport of city from flights table.",
    "question": "Which city has the most frequent destination airport?",
    "gold_parse": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
    "beam": [
      [
        "SELECT City FROM airports GROUP BY City ORDER BY Count ( * ) Desc LIMIT value",
        -0.00103759765625
      ],
      [
        "SELECT AirportName FROM airports GROUP BY City ORDER BY Count ( * ) Desc LIMIT value",
        -6.931951522827148
      ],
      [
        "SELECT City FROM airports GROUP BY AirportCode ORDER BY Count ( * ) Desc LIMIT value",
        -10.311081886291504
      ],
      [
        "SELECT City FROM airports GROUP BY AirportName ORDER BY Count ( * ) Desc LIMIT value",
        -10.907729148864746
      ],
      [
        "SELECT City FROM airports GROUP BY City ORDER BY Count ( * ) Desc",
        -12.62484359741211
      ],
      [
        "SELECT City , Count ( * ) FROM airports GROUP BY City ORDER BY Count ( * ) Desc LIMIT value",
        -12.972237586975098
      ],
      [
        "SELECT City FROM airports GROUP BY City ORDER BY Count ( * ) Asc LIMIT value",
        -14.145435333251953
      ],
      [
        "SELECT DISTINCT City FROM airports GROUP BY City ORDER BY Count ( * ) Desc LIMIT value",
        -14.218443870544434
      ],
      [
        "SELECT City FROM airports GROUP BY City",
        -14.247861862182617
      ],
      [
        "SELECT Count ( City ) FROM airports GROUP BY City ORDER BY Count ( * ) Desc LIMIT value",
        -14.949201583862305
      ],
      [
        "SELECT City FROM airports GROUP BY City HAVING Count ( * ) > value",
        -15.101831436157227
      ],
      [
        "SELECT City FROM airports GROUP BY City ORDER BY Avg ( * ) Desc LIMIT value",
        -15.489709854125977
      ],
      [
        "SELECT City FROM airports ORDER BY Count ( * ) Desc LIMIT value",
        -15.497087478637695
      ],
      [
        "SELECT DISTINCT City FROM airports GROUP BY City ORDER BY Count ( * ) Desc LIMIT value",
        -15.690866470336914
      ],
      [
        "SELECT City FROM airports GROUP BY City ORDER BY Count ( DISTINCT * ) Desc LIMIT value",
        -15.946279525756836
      ],
      [
        "SELECT City FROM airports GROUP BY City ORDER BY Sum ( * ) Desc LIMIT value",
        -16.191466331481934
      ],
      [
        "SELECT Count ( * ) FROM airports GROUP BY City ORDER BY Count ( * ) Desc LIMIT value",
        -16.26286792755127
      ],
      [
        "SELECT City FROM airports GROUP BY Max ( City ) ORDER BY Count ( * ) Desc LIMIT value",
        -16.343538284301758
      ],
      [
        "SELECT City FROM airports GROUP BY DISTINCT City ORDER BY Count ( * ) Desc LIMIT value",
        -16.374814987182617
      ],
      [
        "SELECT City FROM airports GROUP BY City HAVING Count ( * ) = value",
        -16.648059844970703
      ]
    ],
    "predicted_parse_with_values": "SELECT City FROM airports GROUP BY City ORDER BY Count ( * ) Desc LIMIT 1",
    "predicted_parse": "SELECT City FROM airports GROUP BY City ORDER BY Count ( * ) Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: find the number of rows of each value of city in airports table",
      "Step 2: find the city in airports table with largest value in the results of step 1"
    ],
    "template_feedback": "in step 1 , additionally use the information from the flights table besides the airports table .",
    "primary_span": [
      [
        4,
        11
      ]
    ],
    "secondary_span": [
      [
        12,
        16
      ]
    ],
    "edits": [
      "flights"
    ],
    "edits_original": "< from > add flights </ from >"
  },
  {
    "db_id": "wta_1",
    "feedback": "\"largest value of birth date is Wrong . Need \"smallest value of birth date\".",
    "question": "What is the first name and country code of the oldest player?",
    "gold_parse": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1",
    "beam": [
      [
        "SELECT first_name , country_code FROM players ORDER BY birth_date Desc LIMIT value",
        -0.6215019226074219
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.loser_age Desc LIMIT value",
        -0.8806467056274414
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.winner_age Desc LIMIT value",
        -3.103529930114746
      ],
      [
        "SELECT first_name , country_code FROM players ORDER BY birth_date Asc LIMIT value",
        -6.298191070556641
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.loser_age Asc LIMIT value",
        -6.493950843811035
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.winner_age Asc LIMIT value",
        -9.485590934753418
      ],
      [
        "SELECT first_name , country_code FROM players",
        -11.811792373657227
      ],
      [
        "SELECT first_name , country_code FROM players ORDER BY birth_date Desc",
        -12.85400676727295
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.loser_age Desc",
        -12.995643615722656
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_age = ( SELECT Max ( T2.loser_age ) FROM matches AS T2 )",
        -13.958992004394531
      ],
      [
        "SELECT T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.loser_age Desc LIMIT value",
        -13.960854530334473
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 UNION SELECT Max ( T2.loser_age ) FROM matches AS T2",
        -13.995824813842773
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_age = ( SELECT Max ( T2.loser_age ) FROM matches AS T2 ) ORDER BY T1.birth_date Asc LIMIT value",
        -14.140932083129883
      ],
      [
        "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.loser_age - T1.birth_date Desc LIMIT value",
        -14.180830955505371
      ],
      [
        "SELECT first_name FROM players ORDER BY birth_date Desc LIMIT value",
        -14.262276649475098
      ],
      [
        "SELECT first_name , country_code FROM players GROUP BY country_code ORDER BY birth_date Desc LIMIT value",
        -14.521791934967041
      ],
      [
        "SELECT first_name , country_code , country_code FROM players ORDER BY birth_date Desc LIMIT value",
        -14.554508209228516
      ],
      [
        "SELECT T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.winner_age Desc LIMIT value",
        -16.456679344177246
      ],
      [
        "SELECT T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.loser_age Asc LIMIT value",
        -17.26303768157959
      ],
      [
        "SELECT first_name FROM players ORDER BY birth_date Asc LIMIT value",
        -17.369975090026855
      ]
    ],
    "predicted_parse_with_values": "SELECT first_name , country_code FROM players ORDER BY birth_date Desc LIMIT 1",
    "predicted_parse": "SELECT first_name , country_code FROM players ORDER BY birth_date Desc LIMIT value",
    "predicted_parse_explanation": [
      "find the first name and country code in players table with largest value of birth date"
    ],
    "template_feedback": "use the smallest in place of largest .",
    "primary_span": [
      [
        0,
        2
      ]
    ],
    "secondary_span": [
      [
        3,
        7
      ]
    ],
    "edits": [
      "descending"
    ],
    "edits_original": "< orderBy > remove descending </ orderBy >"
  },
  {
    "db_id": "world_1",
    "feedback": "I want the average of GNP",
    "question": "Give the mean GNP and total population of nations which are considered US territory.",
    "gold_parse": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"",
    "beam": [
      [
        "SELECT Sum ( GNP ) , Sum ( Population ) FROM country WHERE Continent = value",
        -0.3896932601928711
      ],
      [
        "SELECT Sum ( GNP ) , Sum ( LifeExpectancy ) FROM country WHERE Continent = value",
        -1.878861427307129
      ],
      [
        "SELECT Sum ( GNP ) , Sum ( Population ) FROM country",
        -2.5273447036743164
      ],
      [
        "SELECT Sum ( GNP ) , Sum ( GNPOld ) FROM country WHERE Continent = value",
        -3.74739933013916
      ],
      [
        "SELECT Sum ( GNP ) , Sum ( LifeExpectancy ) FROM country",
        -3.97415828704834
      ],
      [
        "SELECT Sum ( GNP ) , Sum ( Population ) , Sum ( Population ) FROM country GROUP BY GovernmentForm",
        -4.234537124633789
      ],
      [
        "SELECT Sum ( GNP ) , Sum ( Population ) , Sum ( LifeExpectancy ) FROM country GROUP BY GovernmentForm",
        -5.445639610290527
      ],
      [
        "SELECT Sum ( GNP ) , Sum ( Population ) FROM country WHERE Region = value",
        -5.463801383972168
      ],
      [
        "SELECT Sum ( GNP ) , Sum ( LifeExpectancy ) , Sum ( Population ) FROM country GROUP BY GovernmentForm",
        -5.563913345336914
      ],
      [
        "SELECT Sum ( GNP ) , Sum ( GNPOld ) FROM country",
        -5.888232231140137
      ],
      [
        "SELECT Avg ( GNP ) , Sum ( Population ) FROM country WHERE Continent = value",
        -6.001731872558594
      ],
      [
        "SELECT GNP , Sum ( Population ) FROM country WHERE Continent = value",
        -6.246618270874023
      ],
      [
        "SELECT Sum ( GNP ) , Sum ( Population ) FROM country WHERE GovernmentForm = value",
        -6.46933650970459
      ],
      [
        "SELECT Sum ( GNP ) , Sum ( LifeExpectancy ) , Sum ( LifeExpectancy ) FROM country GROUP BY GovernmentForm",
        -6.779990196228027
      ],
      [
        "SELECT Sum ( GNP ) , Sum ( Population ) , Sum ( Population ) FROM country WHERE Continent = value GROUP BY GovernmentForm",
        -6.946934700012207
      ],
      [
        "SELECT Sum ( GNP ) , Sum ( GNPOld ) , Sum ( Population ) FROM country GROUP BY GovernmentForm",
        -6.956475257873535
      ],
      [
        "SELECT Sum ( GNP ) , Sum ( LifeExpectancy ) FROM country WHERE Region = value",
        -7.089364051818848
      ],
      [
        "SELECT Avg ( GNP ) , Sum ( LifeExpectancy ) FROM country WHERE Continent = value",
        -7.49172306060791
      ],
      [
        "SELECT Sum ( GNP ) , Sum ( Population ) FROM country WHERE Continent = value GROUP BY GovernmentForm",
        -7.578529357910156
      ],
      [
        "SELECT Sum ( GNPOld ) , Sum ( Population ) FROM country",
        -8.037742614746094
      ]
    ],
    "predicted_parse_with_values": "SELECT Sum ( GNP ) , Sum ( Population ) FROM country WHERE Continent = \"US Territory\"",
    "predicted_parse": "SELECT Sum ( GNP ) , Sum ( Population ) FROM country WHERE Continent = value",
    "predicted_parse_explanation": [
      "find the summation of gnp and summation of population in country table whose continent equals US Territory"
    ],
    "template_feedback": "consider the government form equals US Territory conditions in place of the continent equals US Territory conditions . find average gnp in place of summation of gnp .",
    "primary_span": [
      [
        0,
        7
      ],
      [
        18,
        20
      ]
    ],
    "secondary_span": [
      [
        8,
        17
      ],
      [
        21,
        27
      ]
    ],
    "edits": [
      "average gnp",
      "summation of gnp",
      "government form equals \"US Territory\"",
      "continent equals \"US Territory\""
    ],
    "edits_original": "< select > add average gnp </ select > < select > remove summation of gnp </ select > < where > add government form equals \" US Territory \" </ where > < where > remove continent equals \" US Territory \" </ where >"
  },
  {
    "db_id": "wta_1",
    "feedback": "Take \"largest value of winner rank points instead of \"smallest value of winner rank\".",
    "question": "What is the first name, country code, and birth date of the player with the most winner rank points across all matches?",
    "gold_parse": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1",
    "beam": [
      [
        "SELECT T1.first_name , T1.country_code , T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.winner_rank Asc LIMIT value",
        -1.0453262329101562
      ],
      [
        "SELECT T1.first_name , T1.country_code , T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.winner_rank_points Asc LIMIT value",
        -1.428898811340332
      ],
      [
        "SELECT T1.first_name , T1.country_code , T2.loser_age FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.winner_rank Asc LIMIT value",
        -1.996042251586914
      ],
      [
        "SELECT T1.first_name , T1.country_code , T2.loser_age FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.winner_rank_points Asc LIMIT value",
        -2.3963747024536133
      ],
      [
        "SELECT T1.first_name , T1.country_code , T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.loser_rank Asc LIMIT value",
        -2.9868555068969727
      ],
      [
        "SELECT T1.first_name , T1.country_code , T2.loser_age FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.winner_rank_points Desc LIMIT value",
        -3.460378646850586
      ],
      [
        "SELECT T1.first_name , T1.country_code , T2.loser_age FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.winner_rank Desc LIMIT value",
        -3.7744007110595703
      ],
      [
        "SELECT T1.first_name , T1.country_code , T2.loser_age FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.loser_rank Asc LIMIT value",
        -3.90340518951416
      ],
      [
        "SELECT T1.first_name , T1.country_code , T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.loser_rank_points Asc LIMIT value",
        -4.012233734130859
      ],
      [
        "SELECT T1.first_name , T1.country_code , T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.winner_rank_points Desc LIMIT value",
        -4.252184867858887
      ],
      [
        "SELECT T1.first_name , T1.country_code , T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.winner_rank Desc LIMIT value",
        -4.668242454528809
      ],
      [
        "SELECT T1.first_name , T1.country_code , T2.loser_age FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.loser_rank_points Asc LIMIT value",
        -4.950719833374023
      ],
      [
        "SELECT T1.first_name , T1.country_code , T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.score Asc LIMIT value",
        -6.259014129638672
      ],
      [
        "SELECT T1.first_name , T1.country_code , T2.loser_age FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.loser_rank_points Desc LIMIT value",
        -6.549989700317383
      ],
      [
        "SELECT T1.first_name , T1.country_code , T2.loser_age FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.loser_rank Desc LIMIT value",
        -6.758214950561523
      ],
      [
        "SELECT T1.first_name , T1.country_code , T2.loser_age FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.score Asc LIMIT value",
        -7.177562713623047
      ],
      [
        "SELECT T1.first_name , T1.country_code , T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.loser_rank_points Desc LIMIT value",
        -7.343932151794434
      ],
      [
        "SELECT T1.first_name , T1.country_code , T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.loser_rank Desc LIMIT value",
        -7.715664863586426
      ],
      [
        "SELECT T1.first_name , T1.country_code , T3.ranking_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id JOIN rankings AS T3 ON T1.player_id = T3.player_id ORDER BY T2.winner_rank Asc LIMIT value",
        -8.141003608703613
      ],
      [
        "SELECT T1.first_name , T1.country_code , T2.tourney_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.winner_rank Asc LIMIT value",
        -8.369974136352539
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.first_name , T1.country_code , T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.winner_rank Asc LIMIT 1",
    "predicted_parse": "SELECT T1.first_name , T1.country_code , T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.winner_rank Asc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: for each row in players table , find the corresponding rows in matches table",
      "Step 2: find the first name , country code , birth date of the results of step 1 with smallest value of winner rank"
    ],
    "template_feedback": "in step 2 , order the results descending by winner rank points in place of ordering ascending by winner rank .",
    "primary_span": [
      [
        4,
        11
      ]
    ],
    "secondary_span": [
      [
        12,
        20
      ]
    ],
    "edits": [
      "winner rank points",
      "descending",
      "winner rank"
    ],
    "edits_original": "< orderBy > add winner rank points </ orderBy > < orderBy > add descending </ orderBy > < orderBy > remove winner rank </ orderBy >"
  },
  {
    "db_id": "dog_kennels",
    "feedback": "In the dog's table, you need to use the owner's Id in place of size code.",
    "question": "What are each owner's first name, last name, and the size of their dog?",
    "gold_parse": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
    "beam": [
      [
        "SELECT first_name , last_name , owner_id FROM Owners",
        -0.8441896438598633
      ],
      [
        "SELECT T1.first_name , T1.last_name , T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id",
        -1.049952507019043
      ],
      [
        "SELECT T1.first_name , T1.last_name , T2.weight FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id",
        -1.620455265045166
      ],
      [
        "SELECT T1.first_name , T1.last_name , T2.owner_id FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id",
        -4.174918174743652
      ],
      [
        "SELECT T2.first_name , T2.last_name , T1.size_description FROM Sizes AS T1 JOIN Owners AS T2 JOIN Dogs AS T3 ON T1.size_code = T3.size_code AND T3.owner_id = T2.owner_id",
        -5.960669040679932
      ],
      [
        "SELECT T1.first_name , T1.last_name , T2.age FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id",
        -6.491628170013428
      ],
      [
        "SELECT first_name , last_name , email_address FROM Owners",
        -7.742936134338379
      ],
      [
        "SELECT first_name , last_name , last_name FROM Owners",
        -7.933233737945557
      ],
      [
        "SELECT first_name , last_name , home_phone FROM Owners",
        -8.315518379211426
      ],
      [
        "SELECT T2.first_name , T2.last_name , T1.breed_name FROM Breeds AS T1 JOIN Owners AS T2 JOIN Dogs AS T3 ON T1.breed_code = T3.breed_code AND T3.owner_id = T2.owner_id",
        -8.643982887268066
      ],
      [
        "SELECT T2.first_name , T2.last_name , T1.charge_amount FROM Charges AS T1 JOIN Owners AS T2",
        -8.698716163635254
      ],
      [
        "SELECT T1.first_name , T1.last_name , T1.owner_id FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T2.name = value",
        -8.89725399017334
      ],
      [
        "SELECT T1.first_name , T1.last_name , T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id",
        -8.983692169189453
      ],
      [
        "SELECT T1.first_name , T1.last_name , T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T2.name = value",
        -9.196624755859375
      ],
      [
        "SELECT T1.first_name , T1.last_name , T2.date_arrived FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id",
        -9.298033714294434
      ],
      [
        "SELECT first_name , last_name , cell_number FROM Owners",
        -9.313876152038574
      ],
      [
        "SELECT first_name , last_name , city FROM Owners",
        -9.345757484436035
      ],
      [
        "SELECT first_name , last_name , state FROM Owners",
        -9.363125801086426
      ],
      [
        "SELECT T1.first_name , T1.last_name , T2.date_of_birth FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id",
        -9.560540199279785
      ],
      [
        "SELECT first_name , last_name FROM Owners",
        -12.786704063415527
      ]
    ],
    "predicted_parse_with_values": "SELECT first_name , last_name , owner_id FROM Owners",
    "predicted_parse": "SELECT first_name , last_name , owner_id FROM Owners",
    "predicted_parse_explanation": [
      "find the first name , last name , owner id in owners table"
    ],
    "template_feedback": "additionally use the information from the dogs table besides the owners table . find size code in place of owners 's owner id .",
    "primary_span": [
      [
        0,
        7
      ],
      [
        13,
        15
      ]
    ],
    "secondary_span": [
      [
        8,
        12
      ],
      [
        16,
        23
      ]
    ],
    "edits": [
      "size code",
      "owner id",
      "dogs"
    ],
    "edits_original": "< select > add size code </ select > < select > remove owner id </ select > < from > add dogs </ from >"
  },
  {
    "db_id": "wta_1",
    "feedback": "Change ranking to total ranking points .",
    "question": "What are the first names of all players, and their total ranking points?",
    "gold_parse": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
    "beam": [
      [
        "SELECT T1.first_name , T2.ranking FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id",
        -0.6670064926147461
      ],
      [
        "SELECT T1.first_name , T2.winner_rank FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id",
        -1.4370603561401367
      ],
      [
        "SELECT T1.first_name , T2.ranking_points FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id",
        -1.960770606994629
      ],
      [
        "SELECT T1.first_name , T2.winner_rank_points FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id",
        -3.1519041061401367
      ],
      [
        "SELECT T1.first_name , T2.loser_rank FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id",
        -3.5617637634277344
      ],
      [
        "SELECT T1.first_name , T2.loser_rank_points FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id",
        -4.444921493530273
      ],
      [
        "SELECT T1.first_name , T2.winner_rank + T2.loser_rank FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id",
        -6.208954811096191
      ],
      [
        "SELECT T1.first_name , T2.winner_rank + T3.ranking FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id JOIN rankings AS T3 ON T1.player_id = T3.player_id",
        -6.4069671630859375
      ],
      [
        "SELECT T1.first_name , Sum ( T2.ranking_points ) FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id",
        -6.504149436950684
      ],
      [
        "SELECT T1.first_name , T3.ranking + T2.loser_rank FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id JOIN rankings AS T3 ON T1.player_id = T3.player_id",
        -6.626040458679199
      ],
      [
        "SELECT T1.first_name , T2.ranking + T2.ranking FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id",
        -6.873827934265137
      ],
      [
        "SELECT T1.first_name , T3.ranking_points + T2.loser_rank FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id JOIN rankings AS T3 ON T1.player_id = T3.player_id",
        -6.881308555603027
      ],
      [
        "SELECT T1.first_name , Sum ( T2.winner_rank ) FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id",
        -6.957766532897949
      ],
      [
        "SELECT T1.first_name , T2.ranking_points + T2.ranking FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id",
        -7.076059341430664
      ],
      [
        "SELECT T1.first_name , Sum ( T2.ranking ) FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id",
        -7.553363800048828
      ],
      [
        "SELECT T1.first_name , T2.winner_rank_points + T2.loser_rank FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id",
        -7.614347457885742
      ],
      [
        "SELECT T1.first_name , T2.winner_rank_points + T3.ranking FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id JOIN rankings AS T3 ON T1.player_id = T3.player_id",
        -7.776861190795898
      ],
      [
        "SELECT T1.first_name , T2.loser_rank + T2.loser_rank FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id",
        -8.026388168334961
      ],
      [
        "SELECT T1.first_name , Sum ( T2.winner_rank_points ) FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id",
        -8.112244606018066
      ],
      [
        "SELECT first_name FROM players",
        -13.517203330993652
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.first_name , T2.ranking FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id",
    "predicted_parse": "SELECT T1.first_name , T2.ranking FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id",
    "predicted_parse_explanation": [
      "Step 1: for each row in players table , find the corresponding rows in rankings table",
      "Step 2: find the first name and ranking of the results of step 1"
    ],
    "template_feedback": "in step 2 , find for each value of first name . find summation of ranking points in place of ranking .",
    "primary_span": [
      [
        4,
        11
      ],
      [
        12,
        16
      ]
    ],
    "secondary_span": [
      [
        17,
        21
      ]
    ],
    "edits": [
      "summation of ranking points",
      "ranking",
      "first name"
    ],
    "edits_original": "< select > add summation of ranking points </ select > < select > remove ranking </ select > < groupBy > add first name </ groupBy >"
  },
  {
    "db_id": "concert_singer",
    "feedback": "In step 2, you need to make sure year should be more than 2013.",
    "question": "What is the name and capacity of the stadium  with the most concerts after 2013?",
    "gold_parse": "SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1",
    "beam": [
      [
        "SELECT T1.Name , T1.Capacity FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year > value GROUP BY T1.Stadium_ID ORDER BY Count ( * ) Desc LIMIT value",
        -0.0007467269897460938
      ],
      [
        "SELECT T1.Name , T1.Capacity FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year > value GROUP BY T2.Stadium_ID ORDER BY Count ( * ) Desc LIMIT value",
        -7.4426140785217285
      ],
      [
        "SELECT T1.Name , T1.Capacity FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year > value GROUP BY T1.Stadium_ID ORDER BY Count ( * ) Desc",
        -10.37925910949707
      ],
      [
        "SELECT Name , Capacity FROM stadium GROUP BY Stadium_ID ORDER BY Count ( * ) Desc LIMIT value",
        -10.438172340393066
      ],
      [
        "SELECT T1.Name , T1.Capacity FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE Max ( T2.Year ) > value GROUP BY T1.Stadium_ID ORDER BY Count ( * ) Desc LIMIT value",
        -10.490579605102539
      ],
      [
        "SELECT T1.Name , T1.Capacity , T1.Stadium_ID FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year > value GROUP BY T1.Stadium_ID ORDER BY Count ( * ) Desc LIMIT value",
        -11.538217067718506
      ],
      [
        "SELECT T1.Name , T1.Capacity FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID GROUP BY T1.Stadium_ID HAVING T2.Year > value ORDER BY Count ( * ) Desc LIMIT value",
        -11.578674793243408
      ],
      [
        "SELECT T1.Name , T1.Capacity FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year > value ORDER BY T2.Year Desc LIMIT value",
        -12.02289867401123
      ],
      [
        "SELECT T1.Name , T1.Capacity FROM stadium AS T1 JOIN singer AS T2 JOIN concert AS T3 ON T1.Stadium_ID = T3.Stadium_ID JOIN singer_in_concert AS T4 ON T3.concert_ID = T4.concert_ID AND T4.Singer_ID = T2.Singer_ID WHERE T2.Song_release_year > value GROUP BY T1.Stadium_ID ORDER BY Count ( * ) Desc LIMIT value",
        -12.139519691467285
      ],
      [
        "SELECT T1.Name , T1.Capacity , T1.Capacity FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year > value GROUP BY T1.Stadium_ID ORDER BY Count ( * ) Desc LIMIT value",
        -12.19132137298584
      ],
      [
        "SELECT T1.Name FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year > value GROUP BY T1.Stadium_ID ORDER BY Count ( * ) Desc LIMIT value",
        -12.213446617126465
      ],
      [
        "SELECT T1.Name , T1.Capacity FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year > value ORDER BY T1.Capacity Desc LIMIT value",
        -12.371932029724121
      ],
      [
        "SELECT T1.Name , T1.Capacity , T2.concert_Name FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year > value GROUP BY T1.Stadium_ID ORDER BY Count ( * ) Desc LIMIT value",
        -13.059196472167969
      ],
      [
        "SELECT Name , Capacity FROM stadium WHERE Count ( * ) > value GROUP BY Stadium_ID ORDER BY Count ( * ) Desc LIMIT value",
        -13.216779708862305
      ],
      [
        "SELECT T1.Name , T1.Capacity FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year > value",
        -13.232545852661133
      ],
      [
        "SELECT T1.Name , T1.Capacity FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year > value GROUP BY T1.Stadium_ID",
        -13.235490322113037
      ],
      [
        "SELECT T1.Name , T1.Capacity FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year = value GROUP BY T1.Stadium_ID ORDER BY Count ( * ) Desc LIMIT value",
        -13.489328384399414
      ],
      [
        "SELECT T1.Name , T1.Capacity FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year > value GROUP BY T1.Stadium_ID ORDER BY Count ( * ) Asc LIMIT value",
        -13.704129219055176
      ],
      [
        "SELECT T1.Name , T1.Capacity FROM stadium AS T1 GROUP BY T1.Stadium_ID HAVING Count ( * ) > value UNION SELECT T1.Name , T1.Capacity FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year > value",
        -13.935761451721191
      ],
      [
        "SELECT T1.Name , T1.Capacity FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID GROUP BY T1.Stadium_ID HAVING T2.Year > value ORDER BY Count ( * ) Desc",
        -14.052781581878662
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.Name , T1.Capacity FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year > 2014 GROUP BY T1.Stadium_ID ORDER BY Count ( * ) Desc LIMIT 1",
    "predicted_parse": "SELECT T1.Name , T1.Capacity FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year > value GROUP BY T1.Stadium_ID ORDER BY Count ( * ) Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: for each row in stadium table , find the corresponding rows in concert table",
      "Step 2: only keep the results of step 1 whose year greater than 2014",
      "Step 3: find the number of rows of each value of stadium 's stadium id the results of step 2",
      "Step 4: find the name and capacity the results of step 2 with largest value in the results of step 3"
    ],
    "template_feedback": "in step 2 , consider the year greater than or equals 2014 conditions in place of the year greater than 2014 conditions .",
    "primary_span": [
      [
        4,
        12
      ]
    ],
    "secondary_span": [
      [
        13,
        22
      ]
    ],
    "edits": [
      "year greater than or equals to 2014",
      "year greater than 2014"
    ],
    "edits_original": "< where > add year greater than or equals to 2014 </ where > < where > remove year greater than 2014 </ where >"
  },
  {
    "db_id": "world_1",
    "feedback": "you have to provide total rows of countrylanguage table having country name afghanistan and t should be the is official.",
    "question": "How many official languages does Afghanistan have?",
    "gold_parse": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"",
    "beam": [
      [
        "SELECT Count ( DISTINCT Code2 ) FROM country",
        -0.0010395050048828125
      ],
      [
        "SELECT Count ( DISTINCT Code ) FROM country",
        -7.5882720947265625
      ],
      [
        "SELECT Count ( DISTINCT Code2 ) FROM country WHERE Continent = value",
        -7.911436080932617
      ],
      [
        "SELECT Count ( * ) FROM city",
        -9.153563499450684
      ],
      [
        "SELECT Count ( Code2 ) FROM country",
        -10.654711723327637
      ],
      [
        "SELECT Count ( DISTINCT Language ) FROM countrylanguage",
        -11.67861270904541
      ],
      [
        "SELECT Count ( DISTINCT LocalName ) FROM country",
        -12.069808006286621
      ],
      [
        "SELECT Count ( DISTINCT Code2 ) FROM country WHERE Name = value",
        -12.436380386352539
      ],
      [
        "SELECT Count ( DISTINCT GovernmentForm ) FROM country",
        -12.610930442810059
      ],
      [
        "SELECT Count ( DISTINCT Code2 ) FROM country WHERE GovernmentForm = value",
        -12.895336627960205
      ],
      [
        "SELECT Count ( DISTINCT Code2 ) FROM country GROUP BY Code2",
        -12.943352699279785
      ],
      [
        "SELECT Count ( DISTINCT Code2 ) FROM country WHERE LocalName = value",
        -13.508328914642334
      ],
      [
        "SELECT Sum ( Code2 ) FROM country",
        -13.521543502807617
      ],
      [
        "SELECT DISTINCT Count ( DISTINCT Code2 ) FROM country",
        -13.601913452148438
      ],
      [
        "SELECT Count ( DISTINCT Code2 ) FROM country WHERE Code2 = value",
        -13.738870620727539
      ],
      [
        "SELECT Avg ( Code2 ) FROM country",
        -14.454059600830078
      ],
      [
        "SELECT Count ( DISTINCT HeadOfState ) FROM country",
        -14.978092193603516
      ],
      [
        "SELECT Count ( DISTINCT Code2 ) , Count ( DISTINCT Code2 ) FROM country",
        -14.985576152801514
      ],
      [
        "SELECT Count ( DISTINCT Name ) FROM country",
        -15.085602760314941
      ],
      [
        "SELECT Count ( DISTINCT Continent ) FROM country",
        -15.649054527282715
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( DISTINCT Code2 ) FROM country",
    "predicted_parse": "SELECT Count ( DISTINCT Code2 ) FROM country",
    "predicted_parse_explanation": [
      "find the number of different code2 in country table"
    ],
    "template_feedback": "additionally use the information from the countrylanguage table besides the country table . additionally make sure that is official equals T and name equals Afghanistan . find number of rows in place of number of different code2 .",
    "primary_span": [
      [
        0,
        7
      ],
      [
        13,
        25
      ],
      [
        26,
        29
      ]
    ],
    "secondary_span": [
      [
        8,
        12
      ],
      [
        30,
        37
      ]
    ],
    "edits": [
      "number of rows",
      "number of distinct code2",
      "countrylanguage",
      "name equals \"Afghanistan\"",
      "is official equals \"T\""
    ],
    "edits_original": "< select > add number of rows </ select > < select > remove number of distinct code2 </ select > < from > add countrylanguage </ from > < where > add name equals \" Afghanistan \" </ where > < where > add is official equals \" T \" </ where >"
  },
  {
    "db_id": "car_1",
    "feedback": "You need to supplant continents table with countries table.",
    "question": "How many countries are listed?",
    "gold_parse": "SELECT count(*) FROM COUNTRIES",
    "beam": [
      [
        "SELECT Count ( * ) FROM continents",
        -8.0108642578125e-05
      ],
      [
        "SELECT Count ( DISTINCT Country ) FROM car_makers",
        -9.70834732055664
      ],
      [
        "SELECT Sum ( * ) FROM continents",
        -12.305557012557983
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM continents",
        -13.19533920288086
      ],
      [
        "SELECT Sum ( CountryId ) FROM countries",
        -13.21297311782837
      ],
      [
        "SELECT Sum ( CountryName ) FROM countries",
        -13.270373582839966
      ],
      [
        "SELECT Sum ( Continent ) FROM countries",
        -13.957758903503418
      ],
      [
        "SELECT Count ( * ) FROM car_makers GROUP BY Country",
        -14.11003828048706
      ],
      [
        "SELECT Count ( * ) FROM countries WHERE CountryName = value",
        -14.26592555642128
      ],
      [
        "SELECT Count ( * ) , Country FROM car_makers",
        -14.320509850978851
      ],
      [
        "SELECT Count ( Count ( * ) ) FROM continents",
        -15.010566711425781
      ],
      [
        "SELECT Count ( * ) FROM countries ORDER BY CountryId Desc LIMIT value",
        -15.283901780843735
      ],
      [
        "SELECT Avg ( * ) FROM continents",
        -15.489896059036255
      ],
      [
        "SELECT Count ( * ) , Count ( * ) FROM continents",
        -15.633842468261719
      ],
      [
        "SELECT Avg ( CountryId ) FROM countries",
        -15.78449034690857
      ],
      [
        "SELECT Sum ( Country ) FROM car_makers",
        -15.85370683670044
      ],
      [
        "SELECT Avg ( CountryName ) FROM countries",
        -16.244167804718018
      ],
      [
        "SELECT Avg ( Continent ) FROM countries",
        -16.351184606552124
      ],
      [
        "SELECT Count ( * ) FROM continents LIMIT value",
        -16.841468811035156
      ],
      [
        "SELECT Sum ( Continent ) FROM continents",
        -16.893025875091553
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM continents",
    "predicted_parse": "SELECT Count ( * ) FROM continents",
    "predicted_parse_explanation": [
      "find the number of rows in continents table"
    ],
    "template_feedback": "use countries table in place of continents table .",
    "primary_span": [
      [
        0,
        2
      ]
    ],
    "secondary_span": [
      [
        3,
        8
      ]
    ],
    "edits": [
      "countries",
      "continents"
    ],
    "edits_original": "< from > add countries </ from > < from > remove continents </ from >"
  },
  {
    "db_id": "network_1",
    "feedback": "Determine number of rows of friend table whose Highschooler's name equals Kyle .",
    "question": "How many friends does the high school student Kyle have?",
    "gold_parse": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
    "beam": [
      [
        "SELECT Count ( * ) FROM Highschooler WHERE grade = value",
        -0.0006866455078125
      ],
      [
        "SELECT Count ( * ) FROM Highschooler WHERE name = value",
        -7.307183265686035
      ],
      [
        "SELECT Count ( DISTINCT T2.friend_id ) FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id WHERE T1.grade = value",
        -11.46265983581543
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM Highschooler WHERE grade = value",
        -13.425863265991211
      ],
      [
        "SELECT Count ( * ) FROM Highschooler WHERE grade = value AND name = value",
        -14.435830116271973
      ],
      [
        "SELECT Count ( * ) FROM Highschooler WHERE grade = value AND grade = value",
        -14.7753267288208
      ],
      [
        "SELECT Count ( * ) FROM Highschooler WHERE name = grade",
        -15.07306718826294
      ],
      [
        "SELECT Avg ( grade ) FROM Highschooler WHERE grade = value",
        -15.13945198059082
      ],
      [
        "SELECT Count ( * ) FROM Highschooler WHERE grade > value",
        -15.414151191711426
      ],
      [
        "SELECT grade FROM Highschooler WHERE grade = value",
        -15.535077095031738
      ],
      [
        "SELECT Count ( * ) , grade FROM Highschooler WHERE grade = value",
        -15.737211227416992
      ],
      [
        "SELECT Avg ( * ) FROM Highschooler WHERE grade = value",
        -15.998160123825073
      ],
      [
        "SELECT T2.friend_id FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id WHERE T1.grade = value",
        -16.024281978607178
      ],
      [
        "SELECT Count ( * ) FROM Highschooler",
        -16.197800636291504
      ],
      [
        "SELECT Avg ( T2.friend_id ) FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id WHERE T1.grade = value",
        -16.358247876167297
      ],
      [
        "SELECT Count ( DISTINCT name ) FROM Highschooler WHERE grade = value",
        -16.40259552001953
      ],
      [
        "SELECT Count ( DISTINCT ID ) FROM Highschooler WHERE grade = value",
        -16.568938732147217
      ],
      [
        "SELECT Count ( Count ( * ) ) FROM Highschooler WHERE grade = value",
        -16.60647487640381
      ],
      [
        "SELECT Count ( DISTINCT T2.student_id ) FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id WHERE T1.grade = value",
        -16.792075157165527
      ],
      [
        "SELECT Sum ( * ) FROM Highschooler WHERE grade = value",
        -17.05428171157837
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM Highschooler WHERE grade = \"Kyle\"",
    "predicted_parse": "SELECT Count ( * ) FROM Highschooler WHERE grade = value",
    "predicted_parse_explanation": [
      "find the number of rows in high schooler table whose grade equals Kyle"
    ],
    "template_feedback": "additionally use the information from the friend table besides the high schooler table . consider the name equals Kyle conditions in place of the grade equals Kyle conditions .",
    "primary_span": [
      [
        0,
        7
      ],
      [
        14,
        19
      ]
    ],
    "secondary_span": [
      [
        8,
        13
      ],
      [
        20,
        28
      ]
    ],
    "edits": [
      "friend",
      "name equals \"Kyle\"",
      "grade equals \"Kyle\""
    ],
    "edits_original": "< from > add friend </ from > < where > add name equals \" Kyle \" </ where > < where > remove grade equals \" Kyle \" </ where >"
  },
  {
    "db_id": "world_1",
    "feedback": "Search number of rows of country table for which continent equals Asia .",
    "question": "how many countries are in Asia?",
    "gold_parse": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"",
    "beam": [
      [
        "SELECT Count ( * ) FROM city",
        -0.02012157440185547
      ],
      [
        "SELECT Count ( * ) FROM country WHERE Continent = value",
        -4.068818092346191
      ],
      [
        "SELECT Count ( * ) FROM country WHERE Name = value",
        -6.64515495300293
      ],
      [
        "SELECT Count ( DISTINCT Continent ) FROM country",
        -6.849464416503906
      ],
      [
        "SELECT Count ( * ) FROM country WHERE Region = value",
        -8.08029842376709
      ],
      [
        "SELECT Count ( Continent ) FROM country",
        -9.719619750976562
      ],
      [
        "SELECT Count ( * ) FROM country WHERE LocalName = value",
        -10.168553829193115
      ],
      [
        "SELECT Count ( * ) FROM country GROUP BY Continent",
        -11.73190689086914
      ],
      [
        "SELECT Count ( DISTINCT Continent ) FROM country WHERE Continent = value",
        -11.766122341156006
      ],
      [
        "SELECT Count ( * ) FROM country GROUP BY Continent HAVING Continent = value",
        -12.158723831176758
      ],
      [
        "SELECT Count ( DISTINCT GovernmentForm ) FROM country",
        -12.651534080505371
      ],
      [
        "SELECT Count ( * ) FROM country GROUP BY Continent HAVING Name = value",
        -12.70542860031128
      ],
      [
        "SELECT Count ( DISTINCT Continent ) FROM country WHERE Name = value",
        -12.751752376556396
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM city",
        -13.050773620605469
      ],
      [
        "SELECT Count ( * ) FROM city AS T1 EXCEPT SELECT T2.Continent FROM country AS T2 WHERE T2.Continent = value",
        -13.243257999420166
      ],
      [
        "SELECT Count ( * ) FROM country GROUP BY Continent HAVING LocalName = value",
        -13.451062202453613
      ],
      [
        "SELECT Sum ( Continent ) FROM country",
        -13.63771677017212
      ],
      [
        "SELECT Count ( * ) FROM city EXCEPT SELECT Count ( * ) FROM city",
        -13.723264694213867
      ],
      [
        "SELECT Count ( * ) , Continent FROM country",
        -13.845343589782715
      ],
      [
        "SELECT Continent FROM country",
        -15.219895362854004
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM city",
    "predicted_parse": "SELECT Count ( * ) FROM city",
    "predicted_parse_explanation": [
      "find the number of rows in city table"
    ],
    "template_feedback": "use country table in place of city table . additionally make sure that continent equals Asia .",
    "primary_span": [
      [
        0,
        2
      ],
      [
        9,
        16
      ]
    ],
    "secondary_span": [
      [
        3,
        8
      ]
    ],
    "edits": [
      "country",
      "city",
      "continent equals \"Asia\""
    ],
    "edits_original": "< from > add country </ from > < from > remove city </ from > < where > add continent equals \" Asia \" </ where >"
  },
  {
    "db_id": "dog_kennels",
    "feedback": "In step 1 and 3 , You need to alter home phone with cell number  and use treatments table in step 2.",
    "question": "Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.",
    "gold_parse": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2",
    "beam": [
      [
        "SELECT professional_id , last_name , home_phone FROM Professionals WHERE state = value UNION SELECT professional_id , last_name , home_phone FROM Professionals GROUP BY professional_id HAVING Count ( * ) > = value",
        -1.2054004669189453
      ],
      [
        "SELECT professional_id , last_name , cell_number FROM Professionals WHERE state = value UNION SELECT professional_id , last_name , home_phone FROM Professionals GROUP BY professional_id HAVING Count ( * ) > = value",
        -2.466958999633789
      ],
      [
        "SELECT T1.professional_id , T1.last_name , T1.home_phone FROM Professionals AS T1 WHERE T1.state = value UNION SELECT T1.professional_id , T2.last_name , T1.home_phone FROM Owners AS T2 JOIN Dogs AS T3 ON T2.owner_id = T3.owner_id JOIN Professionals AS T1 JOIN Treatments AS T4 ON T3.dog_id = T4.dog_id AND T4.professional_id = T1.professional_id GROUP BY T1.professional_id HAVING Count ( * ) > = value",
        -2.6060562133789062
      ],
      [
        "SELECT T3.professional_id , T1.last_name , T3.home_phone FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id WHERE T3.state = value UNION SELECT T3.professional_id , T3.last_name , T3.home_phone FROM Professionals AS T3 GROUP BY T3.professional_id HAVING Count ( * ) > = value",
        -2.769937515258789
      ],
      [
        "SELECT professional_id , last_name , home_phone FROM Professionals WHERE state = value UNION SELECT professional_id , last_name , cell_number FROM Professionals GROUP BY professional_id HAVING Count ( * ) > = value",
        -2.915980339050293
      ],
      [
        "SELECT professional_id , last_name , home_phone FROM Professionals WHERE state = value UNION SELECT professional_id , last_name , home_phone FROM Professionals WHERE state = value",
        -3.4661216735839844
      ],
      [
        "SELECT T3.professional_id , T3.last_name , T1.home_phone FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id WHERE T3.state = value UNION SELECT T3.professional_id , T3.last_name , T3.home_phone FROM Professionals AS T3 GROUP BY T3.professional_id HAVING Count ( * ) > = value",
        -3.5846128463745117
      ],
      [
        "SELECT T1.professional_id , T1.last_name , T1.home_phone FROM Professionals AS T1 WHERE T1.state = value UNION SELECT T1.professional_id , T1.last_name , T2.home_phone FROM Owners AS T2 JOIN Dogs AS T3 ON T2.owner_id = T3.owner_id JOIN Professionals AS T1 JOIN Treatments AS T4 ON T3.dog_id = T4.dog_id AND T4.professional_id = T1.professional_id GROUP BY T1.professional_id HAVING Count ( * ) > = value",
        -3.8631467819213867
      ],
      [
        "SELECT T1.professional_id , T1.last_name , T1.cell_number FROM Professionals AS T1 WHERE T1.state = value UNION SELECT T1.professional_id , T2.last_name , T1.home_phone FROM Owners AS T2 JOIN Dogs AS T3 ON T2.owner_id = T3.owner_id JOIN Professionals AS T1 JOIN Treatments AS T4 ON T3.dog_id = T4.dog_id AND T4.professional_id = T1.professional_id GROUP BY T1.professional_id HAVING Count ( * ) > = value",
        -3.8661270141601562
      ],
      [
        "SELECT T3.professional_id , T1.last_name , T3.cell_number FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id WHERE T3.state = value UNION SELECT T3.professional_id , T3.last_name , T3.home_phone FROM Professionals AS T3 GROUP BY T3.professional_id HAVING Count ( * ) > = value",
        -4.009112358093262
      ],
      [
        "SELECT T1.professional_id , T1.last_name , T1.home_phone FROM Professionals AS T1 WHERE T1.state = value UNION SELECT T1.professional_id , T2.last_name , T1.cell_number FROM Owners AS T2 JOIN Dogs AS T3 ON T2.owner_id = T3.owner_id JOIN Professionals AS T1 JOIN Treatments AS T4 ON T3.dog_id = T4.dog_id AND T4.professional_id = T1.professional_id GROUP BY T1.professional_id HAVING Count ( * ) > = value",
        -4.130533218383789
      ],
      [
        "SELECT T3.professional_id , T1.last_name , T3.home_phone FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id WHERE T3.state = value UNION SELECT T3.professional_id , T1.last_name , T3.home_phone FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id GROUP BY T3.professional_id HAVING Count ( * ) > = value",
        -4.170772552490234
      ],
      [
        "SELECT professional_id , last_name , cell_number FROM Professionals WHERE state = value UNION SELECT professional_id , last_name , cell_number FROM Professionals GROUP BY professional_id HAVING Count ( * ) > = value",
        -4.177660942077637
      ],
      [
        "SELECT professional_id , last_name , home_phone FROM Professionals WHERE state = value UNION SELECT professional_id , last_name , home_phone FROM Professionals GROUP BY professional_id HAVING Count ( * ) > value",
        -4.436786651611328
      ],
      [
        "SELECT T3.professional_id , T1.last_name , T3.home_phone FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id WHERE T3.state = value UNION SELECT T3.professional_id , T3.last_name , T3.cell_number FROM Professionals AS T3 GROUP BY T3.professional_id HAVING Count ( * ) > = value",
        -4.480489730834961
      ],
      [
        "SELECT T3.professional_id , T3.last_name , T1.cell_number FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id WHERE T3.state = value UNION SELECT T3.professional_id , T3.last_name , T3.home_phone FROM Professionals AS T3 GROUP BY T3.professional_id HAVING Count ( * ) > = value",
        -4.567965507507324
      ],
      [
        "SELECT professional_id , last_name , cell_number FROM Professionals WHERE state = value UNION SELECT professional_id , last_name , home_phone FROM Professionals WHERE state = value",
        -4.75356388092041
      ],
      [
        "SELECT T1.professional_id , T1.last_name , T1.home_phone FROM Professionals AS T1 WHERE T1.state = value UNION SELECT T1.professional_id , T2.last_name , T1.home_phone FROM Owners AS T2 JOIN Dogs AS T3 ON T2.owner_id = T3.owner_id JOIN Professionals AS T1 JOIN Treatments AS T4 ON T3.dog_id = T4.dog_id AND T4.professional_id = T1.professional_id WHERE T1.state = value",
        -4.945621490478516
      ],
      [
        "SELECT T3.professional_id , T3.last_name , T1.home_phone FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id WHERE T3.state = value UNION SELECT T3.professional_id , T1.last_name , T3.home_phone FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Professionals AS T3 JOIN Treatments AS T4 ON T2.dog_id = T4.dog_id AND T4.professional_id = T3.professional_id GROUP BY T3.professional_id HAVING Count ( * ) > = value",
        -4.984536170959473
      ],
      [
        "SELECT T1.professional_id , T1.last_name , T1.home_phone FROM Professionals AS T1 WHERE T1.state = value UNION SELECT T1.professional_id , T1.last_name , T2.cell_number FROM Owners AS T2 JOIN Dogs AS T3 ON T2.owner_id = T3.owner_id JOIN Professionals AS T1 JOIN Treatments AS T4 ON T3.dog_id = T4.dog_id AND T4.professional_id = T1.professional_id GROUP BY T1.professional_id HAVING Count ( * ) > = value",
        -5.014387130737305
      ]
    ],
    "predicted_parse_with_values": "SELECT professional_id , last_name , home_phone FROM Professionals WHERE state = \"Indiana\" UNION SELECT professional_id , last_name , home_phone FROM Professionals GROUP BY professional_id HAVING Count ( * ) > = 2",
    "predicted_parse": "SELECT professional_id , last_name , home_phone FROM Professionals WHERE state = value UNION SELECT professional_id , last_name , home_phone FROM Professionals GROUP BY professional_id HAVING Count ( * ) > = value",
    "predicted_parse_explanation": [
      "Step 1: find the professional id , last name , home phone in professionals table whose state equals Indiana",
      "Step 2: find the number of rows of each value of professional id in professionals table",
      "Step 3: find the professional id , last name , home phone in professionals table whose corresponding value in step 2 is greater than or equals 2",
      "Step 4: show the rows that are in any of the results of step 1 and step 3"
    ],
    "template_feedback": "in step 1 , find cell number in place of home phone . in step 2 , additionally use the information from the treatments table besides the professionals table . in step 3 , make sure that the corresponding value in step 2 greater than 2 . find cell number in place of home phone .",
    "primary_span": [
      [
        4,
        6
      ],
      [
        17,
        24
      ],
      [
        34,
        46
      ],
      [
        47,
        49
      ]
    ],
    "secondary_span": [
      [
        7,
        12
      ],
      [
        25,
        29
      ],
      [
        50,
        55
      ]
    ],
    "edits": [
      "cell number",
      "home phone",
      "cell number",
      "home phone",
      "treatments",
      "number of rows greater than 2",
      "number of rows greater than or equals to 2"
    ],
    "edits_original": "< select > add cell number </ select > < select > remove home phone </ select > < select > add cell number </ select > < select > remove home phone </ select > < from > add treatments </ from > < having > add number of rows greater than 2 </ having > < having > remove number of rows greater than or equals to 2 </ having >"
  },
  {
    "db_id": "flight_2",
    "feedback": "i want source airport and flights in place of airline and airlines respectively.",
    "question": "Count the number of flights departing from 'APG'.",
    "gold_parse": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
    "beam": [
      [
        "SELECT Count ( * ) FROM airlines WHERE Airline = value",
        -0.20242023468017578
      ],
      [
        "SELECT Count ( * ) FROM airlines WHERE Abbreviation = value",
        -2.2875990867614746
      ],
      [
        "SELECT Count ( * ) FROM airlines WHERE Country = value",
        -2.8268415927886963
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE AirportName = value",
        -4.422821044921875
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE Country = value",
        -4.863869667053223
      ],
      [
        "SELECT Count ( * ) FROM flights WHERE Airline = value",
        -6.284850120544434
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE CountryAbbrev = value",
        -7.776052474975586
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE City = value",
        -8.218114852905273
      ],
      [
        "SELECT Count ( * ) FROM flights WHERE SourceAirport = value",
        -9.471611022949219
      ],
      [
        "SELECT Count ( * ) FROM flights WHERE FlightNo = value",
        -9.696056365966797
      ],
      [
        "SELECT Count ( * ) FROM airlines WHERE uid = value",
        -9.754839897155762
      ],
      [
        "SELECT Count ( DISTINCT T2.FlightNo ) FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Airline = value",
        -10.306280612945557
      ],
      [
        "SELECT Count ( * ) FROM flights WHERE DestAirport = value",
        -11.291360855102539
      ],
      [
        "SELECT Count ( * ) FROM airports WHERE AirportCode = value",
        -12.450685501098633
      ],
      [
        "SELECT Count ( DISTINCT T2.FlightNo ) FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Abbreviation = value",
        -12.464596271514893
      ],
      [
        "SELECT T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Airline = value",
        -12.50410795211792
      ],
      [
        "SELECT Count ( DISTINCT T2.FlightNo ) FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Country = value",
        -12.77477240562439
      ],
      [
        "SELECT Count ( * ) FROM airlines WHERE Airline LIKE value",
        -12.889922618865967
      ],
      [
        "SELECT Count ( * ) FROM airlines",
        -13.968881607055664
      ],
      [
        "SELECT T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Abbreviation = value",
        -14.21325945854187
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM airlines WHERE Airline = \"APG\"",
    "predicted_parse": "SELECT Count ( * ) FROM airlines WHERE Airline = value",
    "predicted_parse_explanation": [
      "find the number of rows in airlines table whose airline name equals APG"
    ],
    "template_feedback": "use flights table in place of airlines table . consider the source airport equals APG conditions in place of the airlines 's airline name equals APG conditions .",
    "primary_span": [
      [
        0,
        2
      ],
      [
        9,
        15
      ]
    ],
    "secondary_span": [
      [
        3,
        8
      ],
      [
        16,
        27
      ]
    ],
    "edits": [
      "flights",
      "airlines",
      "source airport equals \"APG\"",
      "airline name equals \"APG\""
    ],
    "edits_original": "< from > add flights </ from > < from > remove airlines </ from > < where > add source airport equals \" APG \" </ where > < where > remove airline name equals \" APG \" </ where >"
  },
  {
    "db_id": "pets_1",
    "feedback": "Replace student table with has pet table .",
    "question": "For students who have pets, how many pets does each student have?",
    "gold_parse": "SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid",
    "beam": [
      [
        "SELECT StuID , Count ( * ) FROM Student GROUP BY StuID",
        -0.8673965930938721
      ],
      [
        "SELECT T2.StuID , Count ( * ) FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID GROUP BY T1.StuID",
        -1.1215839385986328
      ],
      [
        "SELECT T3.PetType , Count ( * ) FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID GROUP BY T1.StuID",
        -1.76493501663208
      ],
      [
        "SELECT Fname , Count ( * ) FROM Student GROUP BY StuID",
        -3.726778984069824
      ],
      [
        "SELECT T1.StuID , Count ( * ) FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID GROUP BY T2.StuID",
        -4.104693174362183
      ],
      [
        "SELECT StuID , Count ( * ) FROM Has_Pet GROUP BY StuID",
        -4.485296726226807
      ],
      [
        "SELECT T2.PetType , Count ( * ) FROM Has_Pet AS T1 JOIN Pets AS T2 ON T1.PetID = T2.PetID GROUP BY T1.StuID",
        -5.0496506690979
      ],
      [
        "SELECT Advisor , Count ( * ) FROM Student GROUP BY StuID",
        -5.180371284484863
      ],
      [
        "SELECT city_code , Count ( * ) FROM Student GROUP BY StuID",
        -5.459663391113281
      ],
      [
        "SELECT Major , Count ( * ) FROM Student GROUP BY StuID",
        -5.713788032531738
      ],
      [
        "SELECT Count ( * ) , T3.PetType FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID GROUP BY T1.StuID",
        -6.110941290855408
      ],
      [
        "SELECT Sex , Count ( * ) FROM Student GROUP BY StuID",
        -6.378358840942383
      ],
      [
        "SELECT T1.Fname , Count ( * ) FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID GROUP BY T2.StuID",
        -6.935879230499268
      ],
      [
        "SELECT Count ( * ) FROM Student",
        -7.1780195236206055
      ],
      [
        "SELECT T2.PetID , Count ( * ) FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID GROUP BY T1.StuID",
        -7.198047637939453
      ],
      [
        "SELECT Count ( * ) , StuID FROM Student GROUP BY StuID",
        -7.228447437286377
      ],
      [
        "SELECT LName , Count ( * ) FROM Student GROUP BY StuID",
        -7.322292327880859
      ],
      [
        "SELECT T3.weight , Count ( * ) FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID GROUP BY T1.StuID",
        -8.025803565979004
      ],
      [
        "SELECT T1.StuID , Count ( * ) FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID GROUP BY T2.PetID",
        -8.140518426895142
      ],
      [
        "SELECT T3.pet_age , Count ( * ) FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID GROUP BY T1.StuID",
        -8.2249116897583
      ]
    ],
    "predicted_parse_with_values": "SELECT StuID , Count ( * ) FROM Student GROUP BY StuID",
    "predicted_parse": "SELECT StuID , Count ( * ) FROM Student GROUP BY StuID",
    "predicted_parse_explanation": [
      "find each value of student id in student table along with the number of the corresponding rows to each value"
    ],
    "template_feedback": "additionally use the information from the has pet table besides the student table .",
    "primary_span": [
      [
        0,
        8
      ]
    ],
    "secondary_span": [
      [
        9,
        13
      ]
    ],
    "edits": [
      "has pet"
    ],
    "edits_original": "< from > add has pet </ from >"
  },
  {
    "db_id": "car_1",
    "feedback": "confirm that the year is 1974 and cylinders is 8.",
    "question": "What is the minimu weight of the car with 8 cylinders produced in 1974?",
    "gold_parse": "SELECT Weight FROM CARS_DATA WHERE Cylinders  =  4 AND YEAR  =  1974 ORDER BY Weight ASC LIMIT 1",
    "beam": [
      [
        "SELECT Min ( Weight ) FROM cars_data WHERE Year = value",
        -0.41231441497802734
      ],
      [
        "SELECT Weight FROM cars_data WHERE Year = value",
        -1.1037349700927734
      ],
      [
        "SELECT Max ( Weight ) FROM cars_data WHERE Year = value",
        -5.373108863830566
      ],
      [
        "SELECT Min ( Weight ) FROM cars_data WHERE Year = value AND Year = value",
        -10.92110538482666
      ],
      [
        "SELECT Weight , Horsepower FROM cars_data WHERE Year = value",
        -10.945921897888184
      ],
      [
        "SELECT Weight , Cylinders FROM cars_data WHERE Year = value",
        -11.785119533538818
      ],
      [
        "SELECT Avg ( Weight ) FROM cars_data WHERE Year = value",
        -11.931183815002441
      ],
      [
        "SELECT Min ( Weight ) , Horsepower FROM cars_data WHERE Year = value",
        -12.297146797180176
      ],
      [
        "SELECT Min ( Weight ) , Cylinders FROM cars_data WHERE Year = value",
        -12.61029863357544
      ],
      [
        "SELECT Min ( Weight ) FROM cars_data WHERE Year LIKE value",
        -12.988261222839355
      ],
      [
        "SELECT Weight FROM cars_data WHERE Year = value AND Year = value",
        -13.08621597290039
      ],
      [
        "SELECT Min ( Weight ) FROM cars_data WHERE Year < value",
        -13.151199340820312
      ],
      [
        "SELECT Sum ( Weight ) FROM cars_data WHERE Year = value",
        -13.504499435424805
      ],
      [
        "SELECT Min ( Weight ) FROM cars_data WHERE Cylinders = ( SELECT Max ( Cylinders ) FROM cars_data WHERE Year = value )",
        -14.16018009185791
      ],
      [
        "SELECT Min ( Weight ) FROM cars_data WHERE Cylinders = value",
        -14.47861385345459
      ],
      [
        "SELECT Min ( Weight ) FROM cars_data WHERE Cylinders < value",
        -14.506961822509766
      ],
      [
        "SELECT Weight FROM cars_data WHERE Year LIKE value",
        -14.687870979309082
      ],
      [
        "SELECT Min ( DISTINCT Weight ) FROM cars_data WHERE Year = value",
        -14.730875968933105
      ],
      [
        "SELECT DISTINCT Weight FROM cars_data WHERE Year = value",
        -15.33373737335205
      ],
      [
        "SELECT Count ( DISTINCT Weight ) FROM cars_data WHERE Year = value",
        -15.540810108184814
      ]
    ],
    "predicted_parse_with_values": "SELECT Min ( Weight ) FROM cars_data WHERE Year = 1",
    "predicted_parse": "SELECT Min ( Weight ) FROM cars_data WHERE Year = value",
    "predicted_parse_explanation": [
      "find the minimum weight in cars data table whose year equals 1"
    ],
    "template_feedback": "consider the cylinders equals 4 and year equals 1974 conditions in place of the year equals 1 conditions . find weight in place of minimum weight . find the result with the smallest weight .",
    "primary_span": [
      [
        0,
        9
      ],
      [
        19,
        20
      ],
      [
        27,
        34
      ]
    ],
    "secondary_span": [
      [
        10,
        18
      ],
      [
        21,
        26
      ]
    ],
    "edits": [
      "weight",
      "minimum weight",
      "cylinders equals 4",
      "year equals 1974",
      "year equals 1",
      "weight",
      "1"
    ],
    "edits_original": "< select > add weight </ select > < select > remove minimum weight </ select > < where > add cylinders equals 4 </ where > < where > add year equals 1974 </ where > < where > remove year equals 1 </ where > < orderBy > add weight </ orderBy > < limit > add 1 </ limit >"
  },
  {
    "db_id": "tvshow",
    "feedback": "Omit \"and directed by equals Ben Jones\" condition .",
    "question": "What is the number of cartoones written by Joseph Kuhr?",
    "gold_parse": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\"",
    "beam": [
      [
        "SELECT Count ( * ) FROM Cartoon WHERE Written_by = value AND Directed_by = value",
        -0.08048248291015625
      ],
      [
        "SELECT Count ( * ) FROM Cartoon WHERE Written_by = value AND Written_by = value",
        -2.800891876220703
      ],
      [
        "SELECT Count ( * ) FROM Cartoon WHERE Directed_by = value AND Directed_by = value",
        -4.502720832824707
      ],
      [
        "SELECT Count ( * ) FROM Cartoon WHERE Written_by = value",
        -6.117766380310059
      ],
      [
        "SELECT Count ( * ) FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.Language = value AND T2.Directed_by = value",
        -6.547404766082764
      ],
      [
        "SELECT Count ( * ) FROM Cartoon WHERE Directed_by = value AND Written_by = value",
        -7.1129069328308105
      ],
      [
        "SELECT Count ( * ) FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value AND T1.Language = value",
        -7.996701717376709
      ],
      [
        "SELECT Count ( * ) FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value AND T1.series_name = value",
        -8.480340957641602
      ],
      [
        "SELECT Count ( * ) FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.Language = value AND T2.Written_by = value",
        -8.761784553527832
      ],
      [
        "SELECT Count ( * ) FROM Cartoon WHERE Directed_by = value",
        -8.893311023712158
      ],
      [
        "SELECT Count ( * ) FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = value AND T2.Directed_by = value",
        -9.127702713012695
      ],
      [
        "SELECT Count ( * ) FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.Country = value AND T2.Directed_by = value",
        -10.153273582458496
      ],
      [
        "SELECT Count ( * ) FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = value AND T2.Written_by = value",
        -11.050971031188965
      ],
      [
        "SELECT Count ( * ) FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = value AND T1.Language = value",
        -12.139021396636963
      ],
      [
        "SELECT Count ( * ) FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.Country = value AND T2.Written_by = value",
        -12.319840431213379
      ],
      [
        "SELECT Count ( * ) FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value AND T1.Country = value",
        -12.419050216674805
      ],
      [
        "SELECT Count ( * ) FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = value AND T1.series_name = value",
        -12.69496774673462
      ],
      [
        "SELECT Count ( * ) FROM Cartoon WHERE Written_by = value AND Title = value",
        -13.06935977935791
      ],
      [
        "SELECT Count ( * ) FROM TV_Channel WHERE Language = value",
        -14.1492280960083
      ],
      [
        "SELECT Count ( * ) FROM Cartoon WHERE Written_by < value",
        -14.929509162902832
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\" AND Directed_by = \"Ben Jones\"",
    "predicted_parse": "SELECT Count ( * ) FROM Cartoon WHERE Written_by = value AND Directed_by = value",
    "predicted_parse_explanation": [
      "find the number of rows in cartoon table whose written by equals Joseph Kuhr and directed by equals Ben Jones"
    ],
    "template_feedback": "remove the directed by equals Ben Jones conditions .",
    "primary_span": [
      [
        0,
        8
      ]
    ],
    "secondary_span": [],
    "edits": [
      "directed by equals \"Ben Jones\""
    ],
    "edits_original": "< where > remove directed by equals \" Ben Jones \" </ where >"
  },
  {
    "db_id": "student_transcripts_tracking",
    "feedback": "Substitute addresses with transcripts .",
    "question": "How many transcripts are listed?",
    "gold_parse": "SELECT count(*) FROM Transcripts",
    "beam": [
      [
        "SELECT Count ( * ) FROM Addresses",
        -2.765655517578125e-05
      ],
      [
        "SELECT Sum ( * ) FROM Addresses",
        -11.060861349105835
      ],
      [
        "SELECT Count ( * ) FROM Courses WHERE course_name = value",
        -12.968192040920258
      ],
      [
        "SELECT Count ( Count ( * ) ) FROM Addresses",
        -13.352812767028809
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM Addresses",
        -13.734801292419434
      ],
      [
        "SELECT Avg ( * ) FROM Addresses",
        -13.952095746994019
      ],
      [
        "SELECT Count ( * ) FROM Semesters WHERE semester_name = value",
        -15.292291641235352
      ],
      [
        "SELECT Sum ( student_course_id ) FROM Transcript_Contents",
        -15.29506540298462
      ],
      [
        "SELECT Sum ( transcript_id ) FROM Transcript_Contents",
        -15.42789077758789
      ],
      [
        "SELECT Count ( * ) FROM Addresses WHERE city = value",
        -15.898446798324585
      ],
      [
        "SELECT Count ( * ) FROM Semesters WHERE semester_description = value",
        -15.914389610290527
      ],
      [
        "SELECT Sum ( course_name ) FROM Courses",
        -16.071372509002686
      ],
      [
        "SELECT Sum ( course_description ) FROM Courses",
        -16.30050802230835
      ],
      [
        "SELECT Count ( * ) FROM Transcripts ORDER BY transcript_date Asc",
        -16.328251361846924
      ],
      [
        "SELECT Sum ( transcript_date ) FROM Transcripts",
        -16.626830577850342
      ],
      [
        "SELECT Count ( Avg ( * ) ) FROM Addresses",
        -16.807108879089355
      ],
      [
        "SELECT Count ( * ) FROM Transcripts ORDER BY transcript_date Desc",
        -16.89185905456543
      ],
      [
        "SELECT Sum ( other_details ) FROM Transcripts",
        -16.90420389175415
      ],
      [
        "SELECT Max ( * ) FROM Addresses",
        -17.072776317596436
      ],
      [
        "SELECT Count ( * ) FROM Addresses LIMIT value",
        -17.12685775756836
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM Addresses",
    "predicted_parse": "SELECT Count ( * ) FROM Addresses",
    "predicted_parse_explanation": [
      "find the number of rows in addresses table"
    ],
    "template_feedback": "use transcripts table in place of addresses table .",
    "primary_span": [
      [
        0,
        2
      ]
    ],
    "secondary_span": [
      [
        3,
        8
      ]
    ],
    "edits": [
      "transcripts",
      "addresses"
    ],
    "edits_original": "< from > add transcripts </ from > < from > remove addresses </ from >"
  },
  {
    "db_id": "pets_1",
    "feedback": "Confirm to find pet type equals cat in step 2.",
    "question": "What are the ids of the students who do not own cats as pets?",
    "gold_parse": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'",
    "beam": [
      [
        "SELECT T1.StuID FROM Student AS T1 EXCEPT SELECT T2.StuID FROM Has_Pet AS T2",
        -0.1845245361328125
      ],
      [
        "SELECT T1.StuID FROM Student AS T1 EXCEPT SELECT T2.StuID FROM Has_Pet AS T2 JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value",
        -2.2572364807128906
      ],
      [
        "SELECT T1.StuID FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value EXCEPT SELECT T2.StuID FROM Has_Pet AS T2",
        -2.806168556213379
      ],
      [
        "SELECT T1.StuID FROM Student AS T1 WHERE T1.StuID NOT IN ( SELECT T2.StuID FROM Has_Pet AS T2 JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value ) EXCEPT SELECT T2.StuID FROM Has_Pet AS T2",
        -6.861310005187988
      ],
      [
        "SELECT T1.StuID FROM Student AS T1 WHERE T1.StuID NOT IN ( SELECT T2.StuID FROM Has_Pet AS T2 JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value )",
        -7.277170181274414
      ],
      [
        "SELECT T1.StuID FROM Student AS T1 WHERE T1.StuID IN ( SELECT T2.StuID FROM Has_Pet AS T2 JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value ) EXCEPT SELECT T2.StuID FROM Has_Pet AS T2",
        -7.90091609954834
      ],
      [
        "SELECT T1.StuID FROM Student AS T1 WHERE T1.StuID NOT IN ( SELECT T2.StuID FROM Has_Pet AS T2 ) EXCEPT SELECT T2.StuID FROM Has_Pet AS T2",
        -8.67982006072998
      ],
      [
        "SELECT T1.StuID FROM Student AS T1 WHERE T1.StuID NOT IN ( SELECT T2.StuID FROM Has_Pet AS T2 ) EXCEPT SELECT T2.StuID FROM Has_Pet AS T2 JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value",
        -8.97221851348877
      ],
      [
        "SELECT T1.StuID FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value EXCEPT SELECT T2.StuID FROM Has_Pet AS T2 JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value",
        -9.406717300415039
      ],
      [
        "SELECT T1.StuID FROM Student AS T1 EXCEPT SELECT T2.StuID FROM Has_Pet AS T2 JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.pet_age = value",
        -9.609746932983398
      ],
      [
        "SELECT T1.StuID FROM Student AS T1 WHERE T1.StuID = value EXCEPT SELECT T2.StuID FROM Has_Pet AS T2",
        -9.6389479637146
      ],
      [
        "SELECT T1.StuID FROM Student AS T1 WHERE T1.StuID = ( SELECT T2.StuID FROM Has_Pet AS T2 JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value ) EXCEPT SELECT T2.StuID FROM Has_Pet AS T2",
        -9.740210056304932
      ],
      [
        "SELECT T1.StuID FROM Student AS T1 WHERE T1.StuID IN ( SELECT T2.StuID FROM Has_Pet AS T2 ) EXCEPT SELECT T2.StuID FROM Has_Pet AS T2",
        -10.088597297668457
      ],
      [
        "SELECT T1.StuID FROM Student AS T1 WHERE T1.StuID NOT IN ( SELECT T2.StuID FROM Has_Pet AS T2 JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value ) EXCEPT SELECT T2.StuID FROM Has_Pet AS T2 JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value",
        -10.220198631286621
      ],
      [
        "SELECT T1.StuID FROM Student AS T1 WHERE T1.StuID IN ( SELECT T2.StuID FROM Has_Pet AS T2 ) EXCEPT SELECT T2.StuID FROM Has_Pet AS T2 JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = value",
        -10.325761795043945
      ],
      [
        "SELECT T1.StuID FROM Student AS T1 WHERE T1.StuID NOT IN ( SELECT T2.StuID FROM Has_Pet AS T2 )",
        -10.496774673461914
      ],
      [
        "SELECT T1.StuID FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID WHERE T1.StuID = T2.StuID EXCEPT SELECT T2.StuID FROM Has_Pet AS T2",
        -11.068674087524414
      ],
      [
        "SELECT T1.StuID FROM Student AS T1 UNION SELECT T2.StuID FROM Has_Pet AS T2",
        -11.202652931213379
      ],
      [
        "SELECT T1.StuID FROM Student AS T1 EXCEPT SELECT T2.StuID FROM Has_Pet AS T2 EXCEPT SELECT T2.StuID FROM Has_Pet AS T2",
        -11.4713773727417
      ],
      [
        "SELECT T1.StuID FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID WHERE T2.PetID = value EXCEPT SELECT T2.StuID FROM Has_Pet AS T2",
        -11.492624282836914
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.StuID FROM Student AS T1 EXCEPT SELECT T2.StuID FROM Has_Pet AS T2",
    "predicted_parse": "SELECT T1.StuID FROM Student AS T1 EXCEPT SELECT T2.StuID FROM Has_Pet AS T2",
    "predicted_parse_explanation": [
      "Step 1: find the student 's student id in student table",
      "Step 2: find the has pet 's student id in has pet table",
      "Step 3: show the rows that are in the results of step 1 but not in the results of step 2"
    ],
    "template_feedback": "in step 2 , additionally use the information from the student table and pets table besides the has pet table . additionally make sure that pet type equals cat .",
    "primary_span": [
      [
        4,
        14
      ],
      [
        21,
        29
      ]
    ],
    "secondary_span": [
      [
        15,
        20
      ]
    ],
    "edits": [
      "student",
      "pets",
      "pet type equals \"cat\""
    ],
    "edits_original": "< from > add student </ from > < from > add pets </ from > < where > add pet type equals \" cat \" </ where >"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "feedback": "Need to swap reference template types table with templates table .",
    "question": "How many templates do we have?",
    "gold_parse": "SELECT count(*) FROM Templates",
    "beam": [
      [
        "SELECT Count ( * ) FROM Ref_Template_Types",
        -1.239776611328125e-05
      ],
      [
        "SELECT Sum ( * ) FROM Ref_Template_Types",
        -12.934898614883423
      ],
      [
        "SELECT Count ( * ) , Template_ID FROM Documents",
        -13.946965456008911
      ],
      [
        "SELECT Count ( * ) FROM Documents GROUP BY Template_ID",
        -14.00022029876709
      ],
      [
        "SELECT Sum ( Version_Number ) FROM Templates",
        -14.029449224472046
      ],
      [
        "SELECT Count ( * ) FROM Templates WHERE Version_Number = value",
        -14.04408311843872
      ],
      [
        "SELECT Avg ( * ) FROM Ref_Template_Types",
        -14.086286544799805
      ],
      [
        "SELECT Count ( Count ( * ) ) FROM Ref_Template_Types",
        -14.20938777923584
      ],
      [
        "SELECT DISTINCT Count ( * ) FROM Ref_Template_Types",
        -14.224188804626465
      ],
      [
        "SELECT Avg ( Version_Number ) FROM Templates",
        -15.681646347045898
      ],
      [
        "SELECT Count ( * ) FROM Templates ORDER BY Template_ID Desc",
        -15.890565633773804
      ],
      [
        "SELECT Count ( * ) FROM Templates ORDER BY Version_Number Desc",
        -16.08732295036316
      ],
      [
        "SELECT Sum ( Template_ID ) FROM Documents",
        -16.564003705978394
      ],
      [
        "SELECT Count ( DISTINCT Template_ID ) FROM Documents",
        -16.626111030578613
      ],
      [
        "SELECT Sum ( Template_ID ) FROM Templates",
        -16.799067497253418
      ],
      [
        "SELECT Count ( * ) FROM Ref_Template_Types LIMIT value",
        -17.10350513458252
      ],
      [
        "SELECT Count ( DISTINCT * ) FROM Ref_Template_Types",
        -17.132019996643066
      ],
      [
        "SELECT Count ( Avg ( * ) ) FROM Ref_Template_Types",
        -17.282763481140137
      ],
      [
        "SELECT Count ( Max ( * ) ) FROM Ref_Template_Types",
        -17.434340476989746
      ],
      [
        "SELECT Template_ID FROM Documents",
        -17.48572015762329
      ]
    ],
    "predicted_parse_with_values": "SELECT Count ( * ) FROM Ref_Template_Types",
    "predicted_parse": "SELECT Count ( * ) FROM Ref_Template_Types",
    "predicted_parse_explanation": [
      "find the number of rows in reference template types table"
    ],
    "template_feedback": "use templates table in place of reference template types table .",
    "primary_span": [
      [
        0,
        2
      ]
    ],
    "secondary_span": [
      [
        3,
        10
      ]
    ],
    "edits": [
      "templates",
      "reference template types"
    ],
    "edits_original": "< from > add templates </ from > < from > remove reference template types </ from >"
  },
  {
    "db_id": "flight_2",
    "feedback": "you have to check flight in flights table which is  most number of times part as source airport or destination airport. ",
    "question": "What is the code of airport that has the highest number of flights?",
    "gold_parse": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1",
    "beam": [
      [
        "SELECT T1.AirportCode FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport ORDER BY T2.FlightNo Desc LIMIT value",
        -0.14777183532714844
      ],
      [
        "SELECT T1.AirportCode FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport GROUP BY T2.DestAirport ORDER BY Count ( * ) Desc LIMIT value",
        -2.5527544021606445
      ],
      [
        "SELECT DestAirport FROM flights GROUP BY DestAirport ORDER BY Count ( * ) Desc LIMIT value",
        -3.60374116897583
      ],
      [
        "SELECT DestAirport FROM flights ORDER BY FlightNo Desc LIMIT value",
        -4.169185161590576
      ],
      [
        "SELECT T2.AirportCode FROM airlines AS T1 JOIN airports AS T2 ORDER BY T1.Abbreviation Desc LIMIT value",
        -4.676436901092529
      ],
      [
        "SELECT T1.AirportCode FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport GROUP BY T2.SourceAirport ORDER BY Count ( * ) Desc LIMIT value",
        -6.213203430175781
      ],
      [
        "SELECT T2.DestAirport FROM airlines AS T1 JOIN flights AS T2 GROUP BY T1.Abbreviation ORDER BY Count ( * ) Desc LIMIT value",
        -6.328322887420654
      ],
      [
        "SELECT T2.AirportCode FROM airlines AS T1 JOIN airports AS T2 GROUP BY T1.Abbreviation ORDER BY Count ( * ) Desc LIMIT value",
        -6.535943508148193
      ],
      [
        "SELECT DestAirport FROM flights GROUP BY SourceAirport ORDER BY Count ( * ) Desc LIMIT value",
        -6.964221954345703
      ],
      [
        "SELECT T2.AirportCode FROM airlines AS T1 JOIN airports AS T2 ORDER BY T1.Airline Desc LIMIT value",
        -7.827068328857422
      ],
      [
        "SELECT AirportCode FROM airports ORDER BY * Desc LIMIT value",
        -8.709935188293457
      ],
      [
        "SELECT T2.DestAirport FROM airlines AS T1 JOIN flights AS T2 ORDER BY T1.Abbreviation Desc LIMIT value",
        -8.749741554260254
      ],
      [
        "SELECT T2.AirportCode FROM airlines AS T1 JOIN airports AS T2 ORDER BY T1.Country Desc LIMIT value",
        -9.001255989074707
      ],
      [
        "SELECT T2.AirportCode FROM airlines AS T1 JOIN airports AS T2 GROUP BY T1.Airline ORDER BY Count ( * ) Desc LIMIT value",
        -9.993478298187256
      ],
      [
        "SELECT AirportCode FROM airports GROUP BY Country ORDER BY Count ( * ) Desc LIMIT value",
        -9.993667602539062
      ],
      [
        "SELECT T2.DestAirport FROM airlines AS T1 JOIN flights AS T2 GROUP BY T1.Airline ORDER BY Count ( * ) Desc LIMIT value",
        -10.063955783843994
      ],
      [
        "SELECT AirportCode FROM airports ORDER BY Country Desc LIMIT value",
        -10.34117603302002
      ],
      [
        "SELECT Max ( AirportCode ) FROM airports",
        -10.818230152130127
      ],
      [
        "SELECT AirportCode FROM airports",
        -11.85211181640625
      ],
      [
        "SELECT DestAirport FROM flights",
        -12.682203769683838
      ]
    ],
    "predicted_parse_with_values": "SELECT T1.AirportCode FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport ORDER BY T2.FlightNo Desc LIMIT 1",
    "predicted_parse": "SELECT T1.AirportCode FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport ORDER BY T2.FlightNo Desc LIMIT value",
    "predicted_parse_explanation": [
      "Step 1: for each row in airports table , find the corresponding rows in flights table",
      "Step 2: find the airport code of the results of step 1 with largest value of flight number"
    ],
    "template_feedback": "in step 2 , find for each value of airport code . order the results by number of rows in place of flight number .",
    "primary_span": [
      [
        4,
        11
      ],
      [
        12,
        18
      ]
    ],
    "secondary_span": [
      [
        19,
        24
      ]
    ],
    "edits": [
      "airport code",
      "number of rows",
      "flight number"
    ],
    "edits_original": "< groupBy > add airport code </ groupBy > < orderBy > add number of rows </ orderBy > < orderBy > remove flight number </ orderBy >"
  },
  {
    "db_id": "poker_player",
    "feedback": "Skip \" with smallest value of Best Finish \".",
    "question": "List the final tables made and the best finishes of poker players.",
    "gold_parse": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player",
    "beam": [
      [
        "SELECT Final_Table_Made , Best_Finish FROM poker_player ORDER BY Best_Finish Asc LIMIT value",
        -0.012475013732910156
      ],
      [
        "SELECT Final_Table_Made , Best_Finish FROM poker_player ORDER BY Final_Table_Made Asc LIMIT value",
        -4.620633602142334
      ],
      [
        "SELECT Final_Table_Made , Best_Finish FROM poker_player ORDER BY Best_Finish Desc LIMIT value",
        -6.55390739440918
      ],
      [
        "SELECT Final_Table_Made , Best_Finish FROM poker_player",
        -6.970312118530273
      ],
      [
        "SELECT Final_Table_Made , Best_Finish FROM poker_player UNION SELECT Best_Finish FROM poker_player",
        -9.315177321434021
      ],
      [
        "SELECT Final_Table_Made , Best_Finish FROM poker_player ORDER BY Poker_Player_ID Asc LIMIT value",
        -10.790696144104004
      ],
      [
        "SELECT Final_Table_Made , Best_Finish FROM poker_player ORDER BY Best_Finish Asc",
        -10.944923400878906
      ],
      [
        "SELECT Final_Table_Made , Best_Finish FROM poker_player ORDER BY Final_Table_Made Asc",
        -11.752825736999512
      ],
      [
        "SELECT T1.Final_Table_Made , T1.Best_Finish FROM poker_player AS T1 UNION SELECT T2.Name FROM people AS T2",
        -11.758708715438843
      ],
      [
        "SELECT Final_Table_Made , Best_Finish FROM poker_player UNION SELECT Final_Table_Made FROM poker_player",
        -11.988697052001953
      ],
      [
        "SELECT T1.Final_Table_Made , T1.Best_Finish FROM poker_player AS T1 UNION SELECT T2.Height FROM people AS T2",
        -11.999734163284302
      ],
      [
        "SELECT Final_Table_Made , Best_Finish FROM poker_player WHERE Best_Finish = value",
        -12.003646969795227
      ],
      [
        "SELECT Final_Table_Made , Best_Finish , Best_Finish FROM poker_player ORDER BY Best_Finish Asc LIMIT value",
        -12.914961338043213
      ],
      [
        "SELECT Final_Table_Made , Best_Finish FROM poker_player ORDER BY Final_Table_Made Desc LIMIT value",
        -13.13825511932373
      ],
      [
        "SELECT Final_Table_Made , Best_Finish FROM poker_player GROUP BY People_ID ORDER BY Count ( * ) Asc LIMIT value",
        -13.488744497299194
      ],
      [
        "SELECT Final_Table_Made FROM poker_player ORDER BY Best_Finish Asc LIMIT value",
        -13.676830291748047
      ],
      [
        "SELECT Final_Table_Made , Best_Finish FROM poker_player WHERE Final_Table_Made = value",
        -13.819393396377563
      ],
      [
        "SELECT T1.Final_Table_Made , T1.Best_Finish FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Nationality = value",
        -14.049726963043213
      ],
      [
        "SELECT Final_Table_Made , Best_Finish FROM poker_player ORDER BY Earnings Asc LIMIT value",
        -14.067239761352539
      ],
      [
        "SELECT Final_Table_Made , Best_Finish FROM poker_player GROUP BY People_ID",
        -14.41428792476654
      ]
    ],
    "predicted_parse_with_values": "SELECT Final_Table_Made , Best_Finish FROM poker_player ORDER BY Best_Finish Asc LIMIT 1",
    "predicted_parse": "SELECT Final_Table_Made , Best_Finish FROM poker_player ORDER BY Best_Finish Asc LIMIT value",
    "predicted_parse_explanation": [
      "find the final table made and best finish in poker player table with smallest value of best finish"
    ],
    "template_feedback": "you should not find the smallest of the results . show me all the results .",
    "primary_span": [
      [
        0,
        15
      ]
    ],
    "secondary_span": [],
    "edits": [
      "best finish",
      "1"
    ],
    "edits_original": "< orderBy > remove best finish </ orderBy > < limit > remove 1 </ limit >"
  }
]