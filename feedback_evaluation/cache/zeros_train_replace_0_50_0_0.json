[
    {
        "db_id": "hr_1",
        "table_names": [
            "regions",
            "countries",
            "departments",
            "jobs",
            "employees",
            "job history",
            "locations"
        ],
        "column_names": [
            "region id",
            "region name",
            "country id",
            "country name",
            "region id",
            "department id",
            "department name",
            "manager id",
            "location id",
            "job id",
            "job title",
            "min salary",
            "max salary",
            "employee id",
            "first name",
            "last name",
            "email",
            "phone number",
            "hire date",
            "job id",
            "salary",
            "commission pct",
            "manager id",
            "department id",
            "employee id",
            "start date",
            "end date",
            "job id",
            "department id",
            "location id",
            "street address",
            "postal code",
            "city",
            "state province",
            "country id"
        ],
        "template_feedback": "consider the min salary greater than 9000 conditions in place of the max salary greater than 9000 conditions .",
        "positive_example": "you need to use minimum salary ."
    },
    {
        "db_id": "hr_1",
        "table_names": [
            "regions",
            "countries",
            "departments",
            "jobs",
            "employees",
            "job history",
            "locations"
        ],
        "column_names": [
            "region id",
            "region name",
            "country id",
            "country name",
            "region id",
            "department id",
            "department name",
            "manager id",
            "location id",
            "job id",
            "job title",
            "min salary",
            "max salary",
            "employee id",
            "first name",
            "last name",
            "email",
            "phone number",
            "hire date",
            "job id",
            "salary",
            "commission pct",
            "manager id",
            "department id",
            "employee id",
            "start date",
            "end date",
            "job id",
            "department id",
            "location id",
            "street address",
            "postal code",
            "city",
            "state province",
            "country id"
        ],
        "template_feedback": "additionally make sure that manager id not equals null .",
        "positive_example": "assert each employee has a manger"
    },
    {
        "db_id": "hr_1",
        "table_names": [
            "regions",
            "countries",
            "departments",
            "jobs",
            "employees",
            "job history",
            "locations"
        ],
        "column_names": [
            "region id",
            "region name",
            "country id",
            "country name",
            "region id",
            "department id",
            "department name",
            "manager id",
            "location id",
            "job id",
            "job title",
            "min salary",
            "max salary",
            "employee id",
            "first name",
            "last name",
            "email",
            "phone number",
            "hire date",
            "job id",
            "salary",
            "commission pct",
            "manager id",
            "department id",
            "employee id",
            "start date",
            "end date",
            "job id",
            "department id",
            "location id",
            "street address",
            "postal code",
            "city",
            "state province",
            "country id"
        ],
        "template_feedback": "additionally make sure that manager id not equals null .",
        "positive_example": "you need to declare every worker has a manager ."
    },
    {
        "db_id": "network_2",
        "table_names": [
            "person",
            "person friend"
        ],
        "column_names": [
            "name",
            "age",
            "city",
            "gender",
            "job",
            "name",
            "friend",
            "year"
        ],
        "template_feedback": "additionally use the information from the person table besides the person friend table .",
        "positive_example": "use friend instead of name and name in place of friend ."
    },
    {
        "db_id": "network_2",
        "table_names": [
            "person",
            "person friend"
        ],
        "column_names": [
            "name",
            "age",
            "city",
            "gender",
            "job",
            "name",
            "friend",
            "year"
        ],
        "template_feedback": "additionally use the information from the person table besides the person friend table .",
        "positive_example": "you need to edit the name section to friend section and vice versa ."
    },
    {
        "db_id": "insurance_and_eClaims",
        "table_names": [
            "customers",
            "staff",
            "policies",
            "claim headers",
            "claims documents",
            "claims processing stages",
            "claims processing"
        ],
        "column_names": [
            "customer id",
            "customer details",
            "staff id",
            "staff details",
            "policy id",
            "customer id",
            "policy type code",
            "start date",
            "end date",
            "claim header id",
            "claim status code",
            "claim type code",
            "policy id",
            "date of claim",
            "date of settlement",
            "amount claimed",
            "amount piad",
            "claim id",
            "document type code",
            "created by staff id",
            "created date",
            "claim stage id",
            "next claim stage id",
            "claim status name",
            "claim status description",
            "claim processing id",
            "claim id",
            "claim outcome code",
            "claim stage id",
            "staff id"
        ],
        "template_feedback": "in step 2 , additionally make sure that start date is equals maximum start date policies . you should not find the largest of the results . show me all the results .",
        "positive_example": "customer details is wrong , find customer id in place of that ."
    },
    {
        "db_id": "insurance_and_eClaims",
        "table_names": [
            "customers",
            "staff",
            "policies",
            "claim headers",
            "claims documents",
            "claims processing stages",
            "claims processing"
        ],
        "column_names": [
            "customer id",
            "customer details",
            "staff id",
            "staff details",
            "policy id",
            "customer id",
            "policy type code",
            "start date",
            "end date",
            "claim header id",
            "claim status code",
            "claim type code",
            "policy id",
            "date of claim",
            "date of settlement",
            "amount claimed",
            "amount piad",
            "claim id",
            "document type code",
            "created by staff id",
            "created date",
            "claim stage id",
            "next claim stage id",
            "claim status name",
            "claim status description",
            "claim processing id",
            "claim id",
            "claim outcome code",
            "claim stage id",
            "staff id"
        ],
        "template_feedback": "in step 2 , additionally make sure that start date is equals maximum start date policies . you should not find the largest of the results . show me all the results .",
        "positive_example": "instead of customer details , look for customer id because it is incorrect ."
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "table_names": [
            "reference document types",
            "reference budget codes",
            "projects",
            "documents",
            "statements",
            "documents with expenses",
            "accounts"
        ],
        "column_names": [
            "document type code",
            "document type name",
            "document type description",
            "budget type code",
            "budget type description",
            "project id",
            "project details",
            "document id",
            "document type code",
            "project id",
            "document date",
            "document name",
            "document description",
            "other details",
            "statement id",
            "statement details",
            "document id",
            "budget type code",
            "document details",
            "account id",
            "statement id",
            "account details"
        ],
        "template_feedback": "use reference budget codes table in place of reference document types table .",
        "positive_example": "make sure to use ref budget codes table ."
    },
    {
        "db_id": "store_1",
        "table_names": [
            "sqlite sequence",
            "artists",
            "albums",
            "employees",
            "customers",
            "genres",
            "invoices",
            "media types",
            "tracks",
            "invoice lines",
            "playlists",
            "playlist tracks"
        ],
        "column_names": [
            "name",
            "seq",
            "id",
            "name",
            "id",
            "title",
            "artist id",
            "id",
            "last name",
            "first name",
            "title",
            "reports to",
            "birth date",
            "hire date",
            "address",
            "city",
            "state",
            "country",
            "postal code",
            "phone",
            "fax",
            "email",
            "id",
            "first name",
            "last name",
            "company",
            "address",
            "city",
            "state",
            "country",
            "postal code",
            "phone",
            "fax",
            "email",
            "support rep id",
            "id",
            "name",
            "id",
            "customer id",
            "invoice date",
            "billing address",
            "billing city",
            "billing state",
            "billing country",
            "billing postal code",
            "total",
            "id",
            "name",
            "id",
            "name",
            "album id",
            "media type id",
            "genre id",
            "composer",
            "milliseconds",
            "bytes",
            "unit price",
            "id",
            "invoice id",
            "track id",
            "unit price",
            "quantity",
            "id",
            "name",
            "playlist id",
            "track id"
        ],
        "template_feedback": "use the largest in place of smallest .",
        "positive_example": "ensure to find largest value of birth date ."
    },
    {
        "db_id": "store_1",
        "table_names": [
            "sqlite sequence",
            "artists",
            "albums",
            "employees",
            "customers",
            "genres",
            "invoices",
            "media types",
            "tracks",
            "invoice lines",
            "playlists",
            "playlist tracks"
        ],
        "column_names": [
            "name",
            "seq",
            "id",
            "name",
            "id",
            "title",
            "artist id",
            "id",
            "last name",
            "first name",
            "title",
            "reports to",
            "birth date",
            "hire date",
            "address",
            "city",
            "state",
            "country",
            "postal code",
            "phone",
            "fax",
            "email",
            "id",
            "first name",
            "last name",
            "company",
            "address",
            "city",
            "state",
            "country",
            "postal code",
            "phone",
            "fax",
            "email",
            "support rep id",
            "id",
            "name",
            "id",
            "customer id",
            "invoice date",
            "billing address",
            "billing city",
            "billing state",
            "billing country",
            "billing postal code",
            "total",
            "id",
            "name",
            "id",
            "name",
            "album id",
            "media type id",
            "genre id",
            "composer",
            "milliseconds",
            "bytes",
            "unit price",
            "id",
            "invoice id",
            "track id",
            "unit price",
            "quantity",
            "id",
            "name",
            "playlist id",
            "track id"
        ],
        "template_feedback": "use the largest in place of smallest .",
        "positive_example": "i want the highest value of birth date ."
    },
    {
        "db_id": "network_2",
        "table_names": [
            "person",
            "person friend"
        ],
        "column_names": [
            "name",
            "age",
            "city",
            "gender",
            "job",
            "name",
            "friend",
            "year"
        ],
        "template_feedback": "additionally make sure that age is equals maximum age person whose job equals student and job equals student . you should not find the largest of the results . show me all the results .",
        "positive_example": "i need data of student ."
    },
    {
        "db_id": "hr_1",
        "table_names": [
            "regions",
            "countries",
            "departments",
            "jobs",
            "employees",
            "job history",
            "locations"
        ],
        "column_names": [
            "region id",
            "region name",
            "country id",
            "country name",
            "region id",
            "department id",
            "department name",
            "manager id",
            "location id",
            "job id",
            "job title",
            "min salary",
            "max salary",
            "employee id",
            "first name",
            "last name",
            "email",
            "phone number",
            "hire date",
            "job id",
            "salary",
            "commission pct",
            "manager id",
            "department id",
            "employee id",
            "start date",
            "end date",
            "job id",
            "department id",
            "location id",
            "street address",
            "postal code",
            "city",
            "state province",
            "country id"
        ],
        "template_feedback": "in step 1 , additionally use the information from the departments table . in step 2 , additionally find salary .",
        "positive_example": "also need to find salaries along with full name ."
    },
    {
        "db_id": "hr_1",
        "table_names": [
            "regions",
            "countries",
            "departments",
            "jobs",
            "employees",
            "job history",
            "locations"
        ],
        "column_names": [
            "region id",
            "region name",
            "country id",
            "country name",
            "region id",
            "department id",
            "department name",
            "manager id",
            "location id",
            "job id",
            "job title",
            "min salary",
            "max salary",
            "employee id",
            "first name",
            "last name",
            "email",
            "phone number",
            "hire date",
            "job id",
            "salary",
            "commission pct",
            "manager id",
            "department id",
            "employee id",
            "start date",
            "end date",
            "job id",
            "department id",
            "location id",
            "street address",
            "postal code",
            "city",
            "state province",
            "country id"
        ],
        "template_feedback": "in step 1 , additionally use the information from the departments table . in step 2 , additionally find salary .",
        "positive_example": "i want full name and their salaries ."
    },
    {
        "db_id": "scientist_1",
        "table_names": [
            "scientists",
            "projects",
            "assigned to"
        ],
        "column_names": [
            "ssn",
            "name",
            "code",
            "name",
            "hours",
            "scientist",
            "project"
        ],
        "template_feedback": "use projects table in place of scientists table . find number of different projects 's name in place of number of rows .",
        "positive_example": "need to use projects table instead of assigned to table ."
    },
    {
        "db_id": "tracking_software_problems",
        "table_names": [
            "problem category codes",
            "problem log",
            "problem status codes",
            "product",
            "staff",
            "problems"
        ],
        "column_names": [
            "problem category code",
            "problem category description",
            "problem log id",
            "assigned to staff id",
            "problem id",
            "problem category code",
            "problem status code",
            "log entry date",
            "log entry description",
            "log entry fix",
            "other log details",
            "problem status code",
            "problem status description",
            "product id",
            "product name",
            "product details",
            "staff id",
            "staff first name",
            "staff last name",
            "other staff details",
            "problem id",
            "product id",
            "closure authorised by staff id",
            "reported by staff id",
            "date problem reported",
            "date problem closed",
            "problem description",
            "other problem details"
        ],
        "template_feedback": "in step 2 , consider the date problem reported greater than 1995 conditions in place of the date problem closed greater than 1995 conditions .",
        "positive_example": "you should use date when problem was reported in place of date when problem was closed because it is incorrect ."
    },
    {
        "db_id": "music_2",
        "table_names": [
            "songs",
            "albums",
            "band",
            "instruments",
            "performance",
            "track lists",
            "vocals"
        ],
        "column_names": [
            "song id",
            "title",
            "aid",
            "title",
            "year",
            "label",
            "type",
            "id",
            "first name",
            "last name",
            "song id",
            "bandmate id",
            "instrument",
            "song id",
            "bandmate",
            "stage position",
            "album id",
            "position",
            "song id",
            "song id",
            "bandmate",
            "type"
        ],
        "template_feedback": "in step 1 , do not use the track lists table and songs table . in step 2 , find rows in place of songs 's title .",
        "positive_example": "make sure to find each value of albums table ."
    },
    {
        "db_id": "music_2",
        "table_names": [
            "songs",
            "albums",
            "band",
            "instruments",
            "performance",
            "track lists",
            "vocals"
        ],
        "column_names": [
            "song id",
            "title",
            "aid",
            "title",
            "year",
            "label",
            "type",
            "id",
            "first name",
            "last name",
            "song id",
            "bandmate id",
            "instrument",
            "song id",
            "bandmate",
            "stage position",
            "album id",
            "position",
            "song id",
            "song id",
            "bandmate",
            "type"
        ],
        "template_feedback": "in step 1 , do not use the track lists table and songs table . in step 2 , find rows in place of songs 's title .",
        "positive_example": "give me total number of albums ."
    },
    {
        "db_id": "music_4",
        "table_names": [
            "artist",
            "volume",
            "music festival"
        ],
        "column_names": [
            "artist id",
            "artist",
            "age",
            "famous title",
            "famous release date",
            "volume id",
            "volume issue",
            "issue date",
            "weeks on top",
            "song",
            "artist id",
            "id",
            "music festival",
            "date of ceremony",
            "category",
            "volume",
            "result"
        ],
        "template_feedback": "find date of ceremony in place of music festival .",
        "positive_example": "need to look for ceremony date because festival of music is not correct ."
    },
    {
        "db_id": "store_1",
        "table_names": [
            "sqlite sequence",
            "artists",
            "albums",
            "employees",
            "customers",
            "genres",
            "invoices",
            "media types",
            "tracks",
            "invoice lines",
            "playlists",
            "playlist tracks"
        ],
        "column_names": [
            "name",
            "seq",
            "id",
            "name",
            "id",
            "title",
            "artist id",
            "id",
            "last name",
            "first name",
            "title",
            "reports to",
            "birth date",
            "hire date",
            "address",
            "city",
            "state",
            "country",
            "postal code",
            "phone",
            "fax",
            "email",
            "id",
            "first name",
            "last name",
            "company",
            "address",
            "city",
            "state",
            "country",
            "postal code",
            "phone",
            "fax",
            "email",
            "support rep id",
            "id",
            "name",
            "id",
            "customer id",
            "invoice date",
            "billing address",
            "billing city",
            "billing state",
            "billing country",
            "billing postal code",
            "total",
            "id",
            "name",
            "id",
            "name",
            "album id",
            "media type id",
            "genre id",
            "composer",
            "milliseconds",
            "bytes",
            "unit price",
            "id",
            "invoice id",
            "track id",
            "unit price",
            "quantity",
            "id",
            "name",
            "playlist id",
            "track id"
        ],
        "template_feedback": "consider the first name equals astrid and last name equals gruber conditions in place of the last name equals astrid conditions .",
        "positive_example": "name should be astrid gruber ."
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "table_names": [
            "reference document types",
            "reference calendar",
            "reference locations",
            "roles",
            "all documents",
            "employees",
            "document locations",
            "documents to be destroyed"
        ],
        "column_names": [
            "document type code",
            "document type name",
            "document type description",
            "calendar date",
            "day number",
            "location code",
            "location name",
            "location description",
            "role code",
            "role name",
            "role description",
            "document id",
            "date stored",
            "document type code",
            "document name",
            "document description",
            "other details",
            "employee id",
            "role code",
            "employee name",
            "gender mfu",
            "date of birth",
            "other details",
            "document id",
            "location code",
            "date in location from",
            "date in locaton to",
            "document id",
            "destruction authorised by employee id",
            "destroyed by employee id",
            "planned destruction date",
            "actual destruction date",
            "other details"
        ],
        "template_feedback": "use documents to be destroyed table in place of employees table .",
        "positive_example": "for destruction authorized by employee id of destroyed table , you need to perquisite that it had comparable rows for each value ."
    },
    {
        "db_id": "candidate_poll",
        "table_names": [
            "candidate",
            "people"
        ],
        "column_names": [
            "candidate id",
            "people id",
            "poll source",
            "date",
            "support rate",
            "consider rate",
            "oppose rate",
            "unsure rate",
            "people id",
            "sex",
            "name",
            "date of birth",
            "height",
            "weight"
        ],
        "template_feedback": "additionally use the information from the candidate table besides the people table .",
        "positive_example": "need to confirm that whose people 's people id should be present in candidate table ."
    },
    {
        "db_id": "candidate_poll",
        "table_names": [
            "candidate",
            "people"
        ],
        "column_names": [
            "candidate id",
            "people id",
            "poll source",
            "date",
            "support rate",
            "consider rate",
            "oppose rate",
            "unsure rate",
            "people id",
            "sex",
            "name",
            "date of birth",
            "height",
            "weight"
        ],
        "template_feedback": "additionally use the information from the candidate table besides the people table .",
        "positive_example": "you have to make sure that people id of people 's is included in candidate table ."
    },
    {
        "db_id": "hr_1",
        "table_names": [
            "regions",
            "countries",
            "departments",
            "jobs",
            "employees",
            "job history",
            "locations"
        ],
        "column_names": [
            "region id",
            "region name",
            "country id",
            "country name",
            "region id",
            "department id",
            "department name",
            "manager id",
            "location id",
            "job id",
            "job title",
            "min salary",
            "max salary",
            "employee id",
            "first name",
            "last name",
            "email",
            "phone number",
            "hire date",
            "job id",
            "salary",
            "commission pct",
            "manager id",
            "department id",
            "employee id",
            "start date",
            "end date",
            "job id",
            "department id",
            "location id",
            "street address",
            "postal code",
            "city",
            "state province",
            "country id"
        ],
        "template_feedback": "additionally use the information from the employees table besides the jobs table . find average salary in place of average max salary .",
        "positive_example": "i want highest income instead of average income ."
    },
    {
        "db_id": "scientist_1",
        "table_names": [
            "scientists",
            "projects",
            "assigned to"
        ],
        "column_names": [
            "ssn",
            "name",
            "code",
            "name",
            "hours",
            "scientist",
            "project"
        ],
        "template_feedback": "use projects table in place of scientists table . find number of different projects 's name in place of number of rows .",
        "positive_example": "find the number of different projects in projects table ."
    },
    {
        "db_id": "scientist_1",
        "table_names": [
            "scientists",
            "projects",
            "assigned to"
        ],
        "column_names": [
            "ssn",
            "name",
            "code",
            "name",
            "hours",
            "scientist",
            "project"
        ],
        "template_feedback": "use projects table in place of scientists table . find number of different projects 's name in place of number of rows .",
        "positive_example": "you have to search in projects table for total number of distinct projects ."
    },
    {
        "db_id": "candidate_poll",
        "table_names": [
            "candidate",
            "people"
        ],
        "column_names": [
            "candidate id",
            "people id",
            "poll source",
            "date",
            "support rate",
            "consider rate",
            "oppose rate",
            "unsure rate",
            "people id",
            "sex",
            "name",
            "date of birth",
            "height",
            "weight"
        ],
        "template_feedback": "additionally use the information from the candidate table besides the people table .",
        "positive_example": "be sure that people are candidate ."
    },
    {
        "db_id": "candidate_poll",
        "table_names": [
            "candidate",
            "people"
        ],
        "column_names": [
            "candidate id",
            "people id",
            "poll source",
            "date",
            "support rate",
            "consider rate",
            "oppose rate",
            "unsure rate",
            "people id",
            "sex",
            "name",
            "date of birth",
            "height",
            "weight"
        ],
        "template_feedback": "additionally use the information from the candidate table besides the people table .",
        "positive_example": "make sure that persons equals to applicant ."
    },
    {
        "db_id": "customer_deliveries",
        "table_names": [
            "products",
            "addresses",
            "customers",
            "regular orders",
            "regular order products",
            "actual orders",
            "actual order products",
            "customer addresses",
            "delivery routes",
            "delivery route locations",
            "trucks",
            "employees",
            "order deliveries"
        ],
        "column_names": [
            "product id",
            "product name",
            "product price",
            "product description",
            "address id",
            "address details",
            "city",
            "zip postcode",
            "state province county",
            "country",
            "customer id",
            "payment method",
            "customer name",
            "customer phone",
            "customer email",
            "date became customer",
            "regular order id",
            "distributer id",
            "regular order id",
            "product id",
            "actual order id",
            "order status code",
            "regular order id",
            "actual order date",
            "actual order id",
            "product id",
            "customer id",
            "address id",
            "date from",
            "address type",
            "date to",
            "route id",
            "route name",
            "other route details",
            "location code",
            "route id",
            "location address id",
            "location name",
            "truck id",
            "truck licence number",
            "truck details",
            "employee id",
            "employee address id",
            "employee name",
            "employee phone",
            "location code",
            "actual order id",
            "delivery status code",
            "driver employee id",
            "truck id",
            "delivery date"
        ],
        "template_feedback": "in step 1 , order the results by date became customer in place of customer name .",
        "positive_example": "you should arrange it in ascending order by date of becoming a customer in step 1 rather than the name of customer ."
    },
    {
        "db_id": "hr_1",
        "table_names": [
            "regions",
            "countries",
            "departments",
            "jobs",
            "employees",
            "job history",
            "locations"
        ],
        "column_names": [
            "region id",
            "region name",
            "country id",
            "country name",
            "region id",
            "department id",
            "department name",
            "manager id",
            "location id",
            "job id",
            "job title",
            "min salary",
            "max salary",
            "employee id",
            "first name",
            "last name",
            "email",
            "phone number",
            "hire date",
            "job id",
            "salary",
            "commission pct",
            "manager id",
            "department id",
            "employee id",
            "start date",
            "end date",
            "job id",
            "department id",
            "location id",
            "street address",
            "postal code",
            "city",
            "state province",
            "country id"
        ],
        "template_feedback": "consider the max salary between 12000 and 18000 conditions in place of the min salary between 18000 and 12000 conditions . find max salary minus min salary in place of max salary .",
        "positive_example": "also need to find maximum salary for which salary falls between range 12000 and 18000 ."
    },
    {
        "db_id": "hr_1",
        "table_names": [
            "regions",
            "countries",
            "departments",
            "jobs",
            "employees",
            "job history",
            "locations"
        ],
        "column_names": [
            "region id",
            "region name",
            "country id",
            "country name",
            "region id",
            "department id",
            "department name",
            "manager id",
            "location id",
            "job id",
            "job title",
            "min salary",
            "max salary",
            "employee id",
            "first name",
            "last name",
            "email",
            "phone number",
            "hire date",
            "job id",
            "salary",
            "commission pct",
            "manager id",
            "department id",
            "employee id",
            "start date",
            "end date",
            "job id",
            "department id",
            "location id",
            "street address",
            "postal code",
            "city",
            "state province",
            "country id"
        ],
        "template_feedback": "consider the max salary between 12000 and 18000 conditions in place of the min salary between 18000 and 12000 conditions . find max salary minus min salary in place of max salary .",
        "positive_example": "you need to check that highest salary should fall in the middle of 12000 and 18000 ."
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "table_names": [
            "reference document types",
            "reference budget codes",
            "projects",
            "documents",
            "statements",
            "documents with expenses",
            "accounts"
        ],
        "column_names": [
            "document type code",
            "document type name",
            "document type description",
            "budget type code",
            "budget type description",
            "project id",
            "project details",
            "document id",
            "document type code",
            "project id",
            "document date",
            "document name",
            "document description",
            "other details",
            "statement id",
            "statement details",
            "document id",
            "budget type code",
            "document details",
            "account id",
            "statement id",
            "account details"
        ],
        "template_feedback": "in step 1 , do not use the documents table .",
        "positive_example": "in step 2 supplant document id with statement id ."
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "table_names": [
            "reference document types",
            "reference budget codes",
            "projects",
            "documents",
            "statements",
            "documents with expenses",
            "accounts"
        ],
        "column_names": [
            "document type code",
            "document type name",
            "document type description",
            "budget type code",
            "budget type description",
            "project id",
            "project details",
            "document id",
            "document type code",
            "project id",
            "document date",
            "document name",
            "document description",
            "other details",
            "statement id",
            "statement details",
            "document id",
            "budget type code",
            "document details",
            "account id",
            "statement id",
            "account details"
        ],
        "template_feedback": "in step 1 , do not use the documents table .",
        "positive_example": "i want id of statement in step 2 ."
    },
    {
        "db_id": "store_1",
        "table_names": [
            "sqlite sequence",
            "artists",
            "albums",
            "employees",
            "customers",
            "genres",
            "invoices",
            "media types",
            "tracks",
            "invoice lines",
            "playlists",
            "playlist tracks"
        ],
        "column_names": [
            "name",
            "seq",
            "id",
            "name",
            "id",
            "title",
            "artist id",
            "id",
            "last name",
            "first name",
            "title",
            "reports to",
            "birth date",
            "hire date",
            "address",
            "city",
            "state",
            "country",
            "postal code",
            "phone",
            "fax",
            "email",
            "id",
            "first name",
            "last name",
            "company",
            "address",
            "city",
            "state",
            "country",
            "postal code",
            "phone",
            "fax",
            "email",
            "support rep id",
            "id",
            "name",
            "id",
            "customer id",
            "invoice date",
            "billing address",
            "billing city",
            "billing state",
            "billing country",
            "billing postal code",
            "total",
            "id",
            "name",
            "id",
            "name",
            "album id",
            "media type id",
            "genre id",
            "composer",
            "milliseconds",
            "bytes",
            "unit price",
            "id",
            "invoice id",
            "track id",
            "unit price",
            "quantity",
            "id",
            "name",
            "playlist id",
            "track id"
        ],
        "template_feedback": "in step 1 , do not use the customers table . in step 2 , consider the employees 's first name equals nancy and employees 's last name equals edwards conditions in place of the customers 's first name equals nancy and customers 's last name equals edwards conditions .",
        "positive_example": "in step 2 , i require reports of nancy edwards ."
    },
    {
        "db_id": "candidate_poll",
        "table_names": [
            "candidate",
            "people"
        ],
        "column_names": [
            "candidate id",
            "people id",
            "poll source",
            "date",
            "support rate",
            "consider rate",
            "oppose rate",
            "unsure rate",
            "people id",
            "sex",
            "name",
            "date of birth",
            "height",
            "weight"
        ],
        "template_feedback": "in step 2 , find sex and minimum oppose rate in place of minimum unsure rate .",
        "positive_example": "i want the rate of oppose and along with that find the people name who is candidate ."
    },
    {
        "db_id": "hr_1",
        "table_names": [
            "regions",
            "countries",
            "departments",
            "jobs",
            "employees",
            "job history",
            "locations"
        ],
        "column_names": [
            "region id",
            "region name",
            "country id",
            "country name",
            "region id",
            "department id",
            "department name",
            "manager id",
            "location id",
            "job id",
            "job title",
            "min salary",
            "max salary",
            "employee id",
            "first name",
            "last name",
            "email",
            "phone number",
            "hire date",
            "job id",
            "salary",
            "commission pct",
            "manager id",
            "department id",
            "employee id",
            "start date",
            "end date",
            "job id",
            "department id",
            "location id",
            "street address",
            "postal code",
            "city",
            "state province",
            "country id"
        ],
        "template_feedback": "use locations table in place of countries table .",
        "positive_example": "make sure to find each country 's cities ."
    },
    {
        "db_id": "hr_1",
        "table_names": [
            "regions",
            "countries",
            "departments",
            "jobs",
            "employees",
            "job history",
            "locations"
        ],
        "column_names": [
            "region id",
            "region name",
            "country id",
            "country name",
            "region id",
            "department id",
            "department name",
            "manager id",
            "location id",
            "job id",
            "job title",
            "min salary",
            "max salary",
            "employee id",
            "first name",
            "last name",
            "email",
            "phone number",
            "hire date",
            "job id",
            "salary",
            "commission pct",
            "manager id",
            "department id",
            "employee id",
            "start date",
            "end date",
            "job id",
            "department id",
            "location id",
            "street address",
            "postal code",
            "city",
            "state province",
            "country id"
        ],
        "template_feedback": "use locations table in place of countries table .",
        "positive_example": "you need to search for each cities under the country 's table ."
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "table_names": [
            "reference document types",
            "reference calendar",
            "reference locations",
            "roles",
            "all documents",
            "employees",
            "document locations",
            "documents to be destroyed"
        ],
        "column_names": [
            "document type code",
            "document type name",
            "document type description",
            "calendar date",
            "day number",
            "location code",
            "location name",
            "location description",
            "role code",
            "role name",
            "role description",
            "document id",
            "date stored",
            "document type code",
            "document name",
            "document description",
            "other details",
            "employee id",
            "role code",
            "employee name",
            "gender mfu",
            "date of birth",
            "other details",
            "document id",
            "location code",
            "date in location from",
            "date in locaton to",
            "document id",
            "destruction authorised by employee id",
            "destroyed by employee id",
            "planned destruction date",
            "actual destruction date",
            "other details"
        ],
        "template_feedback": "in step 1 , use documents to be destroyed table in place of employees table . return the rows in any of the results of step 1 and the results of step 2 .",
        "positive_example": "i want employee id through whom documents are destroyed or presented as authotised destruction ."
    },
    {
        "db_id": "network_2",
        "table_names": [
            "person",
            "person friend"
        ],
        "column_names": [
            "name",
            "age",
            "city",
            "gender",
            "job",
            "name",
            "friend",
            "year"
        ],
        "template_feedback": "additionally use the information from the person friend table besides the person table . additionally make sure that year is equals maximum year person friend whose person friend 's name equals zach and person friend 's name equals zach . you should not find the largest of the results . show me all the results .",
        "positive_example": "i want to find the age of zach 's eldest friend ."
    },
    {
        "db_id": "tracking_software_problems",
        "table_names": [
            "problem category codes",
            "problem log",
            "problem status codes",
            "product",
            "staff",
            "problems"
        ],
        "column_names": [
            "problem category code",
            "problem category description",
            "problem log id",
            "assigned to staff id",
            "problem id",
            "problem category code",
            "problem status code",
            "log entry date",
            "log entry description",
            "log entry fix",
            "other log details",
            "problem status code",
            "problem status description",
            "product id",
            "product name",
            "product details",
            "staff id",
            "staff first name",
            "staff last name",
            "other staff details",
            "problem id",
            "product id",
            "closure authorised by staff id",
            "reported by staff id",
            "date problem reported",
            "date problem closed",
            "problem description",
            "other problem details"
        ],
        "template_feedback": "find the result with the smallest log entry date .",
        "positive_example": "need to search entry date of log which has the lowest value ."
    },
    {
        "db_id": "college_3",
        "table_names": [
            "student",
            "faculty",
            "department",
            "member of",
            "course",
            "minor in",
            "enrolled in",
            "grade conversion"
        ],
        "column_names": [
            "student id",
            "last name",
            "first name",
            "age",
            "sex",
            "major",
            "advisor",
            "city code",
            "faculty id",
            "last name",
            "first name",
            "rank",
            "sex",
            "phone",
            "room",
            "building",
            "department number",
            "division",
            "department name",
            "room",
            "building",
            "department phone",
            "faculty id",
            "department number",
            "appt type",
            "course id",
            "course name",
            "credits",
            "instructor",
            "days",
            "hours",
            "department number",
            "student id",
            "department number",
            "student id",
            "course id",
            "grade",
            "letter grade",
            "grade point"
        ],
        "template_feedback": "additionally use the information from the enrolled in table and grade conversion table besides the student table . find minimum grade point and maximum grade point in place of minimum age and maximum age .",
        "positive_example": "find maximum and minimum of gradeconversion 's department number for enrolled student whose department number equals nyc ."
    },
    {
        "db_id": "tracking_software_problems",
        "table_names": [
            "problem category codes",
            "problem log",
            "problem status codes",
            "product",
            "staff",
            "problems"
        ],
        "column_names": [
            "problem category code",
            "problem category description",
            "problem log id",
            "assigned to staff id",
            "problem id",
            "problem category code",
            "problem status code",
            "log entry date",
            "log entry description",
            "log entry fix",
            "other log details",
            "problem status code",
            "problem status description",
            "product id",
            "product name",
            "product details",
            "staff id",
            "staff first name",
            "staff last name",
            "other staff details",
            "problem id",
            "product id",
            "closure authorised by staff id",
            "reported by staff id",
            "date problem reported",
            "date problem closed",
            "problem description",
            "other problem details"
        ],
        "template_feedback": "in step 2 , consider the staff last name equals berge and staff first name equals christop conditions in place of the staff last name less than or equals medhurst and staff last name greater than or equals christop conditions . in step 4 , additionally make sure that staff last name equals medhurst .",
        "positive_example": "verify that reported by staff id equals staff id who is christop berge , closure authorised by staff id equals staff id who is ashley medhurst ."
    },
    {
        "db_id": "tracking_software_problems",
        "table_names": [
            "problem category codes",
            "problem log",
            "problem status codes",
            "product",
            "staff",
            "problems"
        ],
        "column_names": [
            "problem category code",
            "problem category description",
            "problem log id",
            "assigned to staff id",
            "problem id",
            "problem category code",
            "problem status code",
            "log entry date",
            "log entry description",
            "log entry fix",
            "other log details",
            "problem status code",
            "problem status description",
            "product id",
            "product name",
            "product details",
            "staff id",
            "staff first name",
            "staff last name",
            "other staff details",
            "problem id",
            "product id",
            "closure authorised by staff id",
            "reported by staff id",
            "date problem reported",
            "date problem closed",
            "problem description",
            "other problem details"
        ],
        "template_feedback": "in step 2 , consider the staff last name equals berge and staff first name equals christop conditions in place of the staff last name less than or equals medhurst and staff last name greater than or equals christop conditions . in step 4 , additionally make sure that staff last name equals medhurst .",
        "positive_example": "make sure that closure was authorized by ashley medhurst and reported by christop berge ."
    },
    {
        "db_id": "customer_deliveries",
        "table_names": [
            "products",
            "addresses",
            "customers",
            "regular orders",
            "regular order products",
            "actual orders",
            "actual order products",
            "customer addresses",
            "delivery routes",
            "delivery route locations",
            "trucks",
            "employees",
            "order deliveries"
        ],
        "column_names": [
            "product id",
            "product name",
            "product price",
            "product description",
            "address id",
            "address details",
            "city",
            "zip postcode",
            "state province county",
            "country",
            "customer id",
            "payment method",
            "customer name",
            "customer phone",
            "customer email",
            "date became customer",
            "regular order id",
            "distributer id",
            "regular order id",
            "product id",
            "actual order id",
            "order status code",
            "regular order id",
            "actual order date",
            "actual order id",
            "product id",
            "customer id",
            "address id",
            "date from",
            "address type",
            "date to",
            "route id",
            "route name",
            "other route details",
            "location code",
            "route id",
            "location address id",
            "location name",
            "truck id",
            "truck licence number",
            "truck details",
            "employee id",
            "employee address id",
            "employee name",
            "employee phone",
            "location code",
            "actual order id",
            "delivery status code",
            "driver employee id",
            "truck id",
            "delivery date"
        ],
        "template_feedback": "order the results by truck licence number in place of truck details .",
        "positive_example": "it should be arrange by license number of truck in ascending order , omit details of truck ."
    },
    {
        "db_id": "hr_1",
        "table_names": [
            "regions",
            "countries",
            "departments",
            "jobs",
            "employees",
            "job history",
            "locations"
        ],
        "column_names": [
            "region id",
            "region name",
            "country id",
            "country name",
            "region id",
            "department id",
            "department name",
            "manager id",
            "location id",
            "job id",
            "job title",
            "min salary",
            "max salary",
            "employee id",
            "first name",
            "last name",
            "email",
            "phone number",
            "hire date",
            "job id",
            "salary",
            "commission pct",
            "manager id",
            "department id",
            "employee id",
            "start date",
            "end date",
            "job id",
            "department id",
            "location id",
            "street address",
            "postal code",
            "city",
            "state province",
            "country id"
        ],
        "template_feedback": "in step 1 , do not use the jobs table . in step 2 , consider the manager id is equals employee id employees whose first name equals payam conditions in place of the job title equals payam conditions .",
        "positive_example": "make sure it reports to payam ."
    },
    {
        "db_id": "gas_company",
        "table_names": [
            "company",
            "gas station",
            "station company"
        ],
        "column_names": [
            "company id",
            "rank",
            "company",
            "headquarters",
            "main industry",
            "sales billion",
            "profits billion",
            "assets billion",
            "market value",
            "station id",
            "open year",
            "location",
            "manager name",
            "vice manager name",
            "representative name",
            "station id",
            "company id",
            "rank of the year"
        ],
        "template_feedback": "order the results descending .",
        "positive_example": "it should order in decreasing order of sales billion instead of ascending order ."
    },
    {
        "db_id": "gas_company",
        "table_names": [
            "company",
            "gas station",
            "station company"
        ],
        "column_names": [
            "company id",
            "rank",
            "company",
            "headquarters",
            "main industry",
            "sales billion",
            "profits billion",
            "assets billion",
            "market value",
            "station id",
            "open year",
            "location",
            "manager name",
            "vice manager name",
            "representative name",
            "station id",
            "company id",
            "rank of the year"
        ],
        "template_feedback": "order the results descending .",
        "positive_example": "i want sales billion in decline order ."
    },
    {
        "db_id": "hr_1",
        "table_names": [
            "regions",
            "countries",
            "departments",
            "jobs",
            "employees",
            "job history",
            "locations"
        ],
        "column_names": [
            "region id",
            "region name",
            "country id",
            "country name",
            "region id",
            "department id",
            "department name",
            "manager id",
            "location id",
            "job id",
            "job title",
            "min salary",
            "max salary",
            "employee id",
            "first name",
            "last name",
            "email",
            "phone number",
            "hire date",
            "job id",
            "salary",
            "commission pct",
            "manager id",
            "department id",
            "employee id",
            "start date",
            "end date",
            "job id",
            "department id",
            "location id",
            "street address",
            "postal code",
            "city",
            "state province",
            "country id"
        ],
        "template_feedback": "additionally make sure that salary is one of minimum salary employees of each value of department id . additionally find department id . you should not find the smallest of the results . show me all the results .",
        "positive_example": "need to search id 's of all different departments with first and last name ."
    },
    {
        "db_id": "club_1",
        "table_names": [
            "student",
            "club",
            "member of club"
        ],
        "column_names": [
            "student id",
            "last name",
            "first name",
            "age",
            "sex",
            "major",
            "advisor",
            "city code",
            "club id",
            "club name",
            "club description",
            "club location",
            "student id",
            "club id",
            "position"
        ],
        "template_feedback": "consider the club location equals akw conditions in place of the club name equals akw conditions .",
        "positive_example": "replace name of club as akw with location of club equivalent to akw ."
    },
    {
        "db_id": "network_2",
        "table_names": [
            "person",
            "person friend"
        ],
        "column_names": [
            "name",
            "age",
            "city",
            "gender",
            "job",
            "name",
            "friend",
            "year"
        ],
        "template_feedback": "in step 2 , additionally make sure that year is equals maximum year person friend whose person friend 's name equals zach and person friend 's name equals zach . you should not find the largest of the results . show me all the results .",
        "positive_example": "need to mention that person should be zach 's friend ."
    },
    {
        "db_id": "network_2",
        "table_names": [
            "person",
            "person friend"
        ],
        "column_names": [
            "name",
            "age",
            "city",
            "gender",
            "job",
            "name",
            "friend",
            "year"
        ],
        "template_feedback": "in step 2 , additionally make sure that year is equals maximum year person friend whose person friend 's name equals zach and person friend 's name equals zach . you should not find the largest of the results . show me all the results .",
        "positive_example": "you need to specify that person as zach 's friend ."
    },
    {
        "db_id": "music_4",
        "table_names": [
            "artist",
            "volume",
            "music festival"
        ],
        "column_names": [
            "artist id",
            "artist",
            "age",
            "famous title",
            "famous release date",
            "volume id",
            "volume issue",
            "issue date",
            "weeks on top",
            "song",
            "artist id",
            "id",
            "music festival",
            "date of ceremony",
            "category",
            "volume",
            "result"
        ],
        "template_feedback": "in step 1 , do not find for each value of song . in step 2 , additionally make sure that weeks on top greater than 1 .",
        "positive_example": "look for the value which are on top of the weeks in step 1 ."
    },
    {
        "db_id": "bike_1",
        "table_names": [
            "station",
            "status",
            "trip",
            "weather"
        ],
        "column_names": [
            "id",
            "name",
            "latitude",
            "longitude",
            "dock count",
            "city",
            "installation date",
            "station id",
            "bikes available",
            "docks available",
            "time",
            "id",
            "duration",
            "start date",
            "start station name",
            "start station id",
            "end date",
            "end station name",
            "end station id",
            "bike id",
            "subscription type",
            "zip code",
            "date",
            "max temperature f",
            "mean temperature f",
            "min temperature f",
            "max dew point f",
            "mean dew point f",
            "min dew point f",
            "max humidity",
            "mean humidity",
            "min humidity",
            "max sea level pressure inches",
            "mean sea level pressure inches",
            "min sea level pressure inches",
            "max visibility miles",
            "mean visibility miles",
            "min visibility miles",
            "max wind speed mph",
            "mean wind speed mph",
            "max gust speed mph",
            "precipitation inches",
            "cloud cover",
            "events",
            "wind dir degrees",
            "zip code"
        ],
        "template_feedback": "consider the mean sea level pressure inches between 30.3 and 31 conditions in place of the min humidity between 31 and 30.3 conditions .",
        "positive_example": "you need to use \" average sea level pressure inches is \" ."
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "table_names": [
            "reference document types",
            "reference calendar",
            "reference locations",
            "roles",
            "all documents",
            "employees",
            "document locations",
            "documents to be destroyed"
        ],
        "column_names": [
            "document type code",
            "document type name",
            "document type description",
            "calendar date",
            "day number",
            "location code",
            "location name",
            "location description",
            "role code",
            "role name",
            "role description",
            "document id",
            "date stored",
            "document type code",
            "document name",
            "document description",
            "other details",
            "employee id",
            "role code",
            "employee name",
            "gender mfu",
            "date of birth",
            "other details",
            "document id",
            "location code",
            "date in location from",
            "date in locaton to",
            "document id",
            "destruction authorised by employee id",
            "destroyed by employee id",
            "planned destruction date",
            "actual destruction date",
            "other details"
        ],
        "template_feedback": "use documents to be destroyed table in place of employees table .",
        "positive_example": "here , you should look for employee id 's corresponding row value to be equivalent to the destruction granted by employee id in the document 's destroyed table ."
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "table_names": [
            "reference document types",
            "reference budget codes",
            "projects",
            "documents",
            "statements",
            "documents with expenses",
            "accounts"
        ],
        "column_names": [
            "document type code",
            "document type name",
            "document type description",
            "budget type code",
            "budget type description",
            "project id",
            "project details",
            "document id",
            "document type code",
            "project id",
            "document date",
            "document name",
            "document description",
            "other details",
            "statement id",
            "statement details",
            "document id",
            "budget type code",
            "document details",
            "account id",
            "statement id",
            "account details"
        ],
        "template_feedback": "use statements table in place of documents table . find statement details in place of document description .",
        "positive_example": "they need id and details of statement from its table ."
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "table_names": [
            "reference document types",
            "reference calendar",
            "reference locations",
            "roles",
            "all documents",
            "employees",
            "document locations",
            "documents to be destroyed"
        ],
        "column_names": [
            "document type code",
            "document type name",
            "document type description",
            "calendar date",
            "day number",
            "location code",
            "location name",
            "location description",
            "role code",
            "role name",
            "role description",
            "document id",
            "date stored",
            "document type code",
            "document name",
            "document description",
            "other details",
            "employee id",
            "role code",
            "employee name",
            "gender mfu",
            "date of birth",
            "other details",
            "document id",
            "location code",
            "date in location from",
            "date in locaton to",
            "document id",
            "destruction authorised by employee id",
            "destroyed by employee id",
            "planned destruction date",
            "actual destruction date",
            "other details"
        ],
        "template_feedback": "in step 1 , do not find for each value of destroyed by employee id . in step 2 , make sure no repetition in the results .",
        "positive_example": "you only need to use the employee id ."
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "table_names": [
            "reference document types",
            "reference calendar",
            "reference locations",
            "roles",
            "all documents",
            "employees",
            "document locations",
            "documents to be destroyed"
        ],
        "column_names": [
            "document type code",
            "document type name",
            "document type description",
            "calendar date",
            "day number",
            "location code",
            "location name",
            "location description",
            "role code",
            "role name",
            "role description",
            "document id",
            "date stored",
            "document type code",
            "document name",
            "document description",
            "other details",
            "employee id",
            "role code",
            "employee name",
            "gender mfu",
            "date of birth",
            "other details",
            "document id",
            "location code",
            "date in location from",
            "date in locaton to",
            "document id",
            "destruction authorised by employee id",
            "destroyed by employee id",
            "planned destruction date",
            "actual destruction date",
            "other details"
        ],
        "template_feedback": "in step 1 , do not find for each value of destroyed by employee id . in step 2 , make sure no repetition in the results .",
        "positive_example": "you only need to use the different employee ids that was destroyed by ."
    },
    {
        "db_id": "store_1",
        "table_names": [
            "sqlite sequence",
            "artists",
            "albums",
            "employees",
            "customers",
            "genres",
            "invoices",
            "media types",
            "tracks",
            "invoice lines",
            "playlists",
            "playlist tracks"
        ],
        "column_names": [
            "name",
            "seq",
            "id",
            "name",
            "id",
            "title",
            "artist id",
            "id",
            "last name",
            "first name",
            "title",
            "reports to",
            "birth date",
            "hire date",
            "address",
            "city",
            "state",
            "country",
            "postal code",
            "phone",
            "fax",
            "email",
            "id",
            "first name",
            "last name",
            "company",
            "address",
            "city",
            "state",
            "country",
            "postal code",
            "phone",
            "fax",
            "email",
            "support rep id",
            "id",
            "name",
            "id",
            "customer id",
            "invoice date",
            "billing address",
            "billing city",
            "billing state",
            "billing country",
            "billing postal code",
            "total",
            "id",
            "name",
            "id",
            "name",
            "album id",
            "media type id",
            "genre id",
            "composer",
            "milliseconds",
            "bytes",
            "unit price",
            "id",
            "invoice id",
            "track id",
            "unit price",
            "quantity",
            "id",
            "name",
            "playlist id",
            "track id"
        ],
        "template_feedback": "use the largest in place of smallest .",
        "positive_example": "make sure to find largest value of birth date ."
    },
    {
        "db_id": "store_1",
        "table_names": [
            "sqlite sequence",
            "artists",
            "albums",
            "employees",
            "customers",
            "genres",
            "invoices",
            "media types",
            "tracks",
            "invoice lines",
            "playlists",
            "playlist tracks"
        ],
        "column_names": [
            "name",
            "seq",
            "id",
            "name",
            "id",
            "title",
            "artist id",
            "id",
            "last name",
            "first name",
            "title",
            "reports to",
            "birth date",
            "hire date",
            "address",
            "city",
            "state",
            "country",
            "postal code",
            "phone",
            "fax",
            "email",
            "id",
            "first name",
            "last name",
            "company",
            "address",
            "city",
            "state",
            "country",
            "postal code",
            "phone",
            "fax",
            "email",
            "support rep id",
            "id",
            "name",
            "id",
            "customer id",
            "invoice date",
            "billing address",
            "billing city",
            "billing state",
            "billing country",
            "billing postal code",
            "total",
            "id",
            "name",
            "id",
            "name",
            "album id",
            "media type id",
            "genre id",
            "composer",
            "milliseconds",
            "bytes",
            "unit price",
            "id",
            "invoice id",
            "track id",
            "unit price",
            "quantity",
            "id",
            "name",
            "playlist id",
            "track id"
        ],
        "template_feedback": "use the largest in place of smallest .",
        "positive_example": "find the highest value of birth date ."
    },
    {
        "db_id": "allergy_1",
        "table_names": [
            "allergy type",
            "has allergy",
            "student"
        ],
        "column_names": [
            "allergy name",
            "allergy type",
            "stuid",
            "allergy",
            "stuid",
            "last name",
            "first name",
            "age",
            "sex",
            "major",
            "advisor",
            "city code"
        ],
        "template_feedback": "in step 2 , you should consider both of the conditions rather than either of them . additionally make sure that allergy equals eggs .",
        "positive_example": "replace \" or \" with \" and \" and replace milk with \" milk or eggs \" ."
    },
    {
        "db_id": "allergy_1",
        "table_names": [
            "allergy type",
            "has allergy",
            "student"
        ],
        "column_names": [
            "allergy name",
            "allergy type",
            "stuid",
            "allergy",
            "stuid",
            "last name",
            "first name",
            "age",
            "sex",
            "major",
            "advisor",
            "city code"
        ],
        "template_feedback": "in step 2 , you should consider both of the conditions rather than either of them . additionally make sure that allergy equals eggs .",
        "positive_example": "you need to use \" and \" and \" milk or eggs \" in place of \" or \" and \" milk \" respectively ."
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "table_names": [
            "reference document types",
            "reference calendar",
            "reference locations",
            "roles",
            "all documents",
            "employees",
            "document locations",
            "documents to be destroyed"
        ],
        "column_names": [
            "document type code",
            "document type name",
            "document type description",
            "calendar date",
            "day number",
            "location code",
            "location name",
            "location description",
            "role code",
            "role name",
            "role description",
            "document id",
            "date stored",
            "document type code",
            "document name",
            "document description",
            "other details",
            "employee id",
            "role code",
            "employee name",
            "gender mfu",
            "date of birth",
            "other details",
            "document id",
            "location code",
            "date in location from",
            "date in locaton to",
            "document id",
            "destruction authorised by employee id",
            "destroyed by employee id",
            "planned destruction date",
            "actual destruction date",
            "other details"
        ],
        "template_feedback": "find number of rows in place of number of different role code .",
        "positive_example": "find the number of rows in roles table ."
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "table_names": [
            "reference document types",
            "reference calendar",
            "reference locations",
            "roles",
            "all documents",
            "employees",
            "document locations",
            "documents to be destroyed"
        ],
        "column_names": [
            "document type code",
            "document type name",
            "document type description",
            "calendar date",
            "day number",
            "location code",
            "location name",
            "location description",
            "role code",
            "role name",
            "role description",
            "document id",
            "date stored",
            "document type code",
            "document name",
            "document description",
            "other details",
            "employee id",
            "role code",
            "employee name",
            "gender mfu",
            "date of birth",
            "other details",
            "document id",
            "location code",
            "date in location from",
            "date in locaton to",
            "document id",
            "destruction authorised by employee id",
            "destroyed by employee id",
            "planned destruction date",
            "actual destruction date",
            "other details"
        ],
        "template_feedback": "find number of rows in place of number of different role code .",
        "positive_example": "from table of roles , you need to calculate the rows ."
    },
    {
        "db_id": "college_3",
        "table_names": [
            "student",
            "faculty",
            "department",
            "member of",
            "course",
            "minor in",
            "enrolled in",
            "grade conversion"
        ],
        "column_names": [
            "student id",
            "last name",
            "first name",
            "age",
            "sex",
            "major",
            "advisor",
            "city code",
            "faculty id",
            "last name",
            "first name",
            "rank",
            "sex",
            "phone",
            "room",
            "building",
            "department number",
            "division",
            "department name",
            "room",
            "building",
            "department phone",
            "faculty id",
            "department number",
            "appt type",
            "course id",
            "course name",
            "credits",
            "instructor",
            "days",
            "hours",
            "department number",
            "student id",
            "department number",
            "student id",
            "course id",
            "grade",
            "letter grade",
            "grade point"
        ],
        "template_feedback": "return the rows in any of the results of step 1 and the results of step 2 .",
        "positive_example": "also make sure building equals neb in step 1 ."
    },
    {
        "db_id": "hr_1",
        "table_names": [
            "regions",
            "countries",
            "departments",
            "jobs",
            "employees",
            "job history",
            "locations"
        ],
        "column_names": [
            "region id",
            "region name",
            "country id",
            "country name",
            "region id",
            "department id",
            "department name",
            "manager id",
            "location id",
            "job id",
            "job title",
            "min salary",
            "max salary",
            "employee id",
            "first name",
            "last name",
            "email",
            "phone number",
            "hire date",
            "job id",
            "salary",
            "commission pct",
            "manager id",
            "department id",
            "employee id",
            "start date",
            "end date",
            "job id",
            "department id",
            "location id",
            "street address",
            "postal code",
            "city",
            "state province",
            "country id"
        ],
        "template_feedback": "in step 1 , additionally use the information from the locations table and departments table . in step 2 , remove the country name equals argentina conditions . additionally find country name and employee id .",
        "positive_example": "confirm that ( s ) he is working in that country , additionally look for name and id of the country and drop condition ."
    },
    {
        "db_id": "scientist_1",
        "table_names": [
            "scientists",
            "projects",
            "assigned to"
        ],
        "column_names": [
            "ssn",
            "name",
            "code",
            "name",
            "hours",
            "scientist",
            "project"
        ],
        "template_feedback": "in step 2 , additionally make sure that hours is equals minimum hours projects . do not find for each value of project . in step 3 , you should not find the largest of the results . show me all the results .",
        "positive_example": "remove summation in step 2 and need smallest value in step 3 ."
    },
    {
        "db_id": "scientist_1",
        "table_names": [
            "scientists",
            "projects",
            "assigned to"
        ],
        "column_names": [
            "ssn",
            "name",
            "code",
            "name",
            "hours",
            "scientist",
            "project"
        ],
        "template_feedback": "in step 2 , additionally make sure that hours is equals minimum hours projects . do not find for each value of project . in step 3 , you should not find the largest of the results . show me all the results .",
        "positive_example": "i want lowest value from step 3 and summation should be delete from step 2 ."
    },
    {
        "db_id": "music_2",
        "table_names": [
            "songs",
            "albums",
            "band",
            "instruments",
            "performance",
            "track lists",
            "vocals"
        ],
        "column_names": [
            "song id",
            "title",
            "aid",
            "title",
            "year",
            "label",
            "type",
            "id",
            "first name",
            "last name",
            "song id",
            "bandmate id",
            "instrument",
            "song id",
            "bandmate",
            "stage position",
            "album id",
            "position",
            "song id",
            "song id",
            "bandmate",
            "type"
        ],
        "template_feedback": "in step 1 , additionally use the information from the performance table and songs table besides the band table .",
        "positive_example": "you need to swap last name with bandmate in step 1 ."
    },
    {
        "db_id": "hr_1",
        "table_names": [
            "regions",
            "countries",
            "departments",
            "jobs",
            "employees",
            "job history",
            "locations"
        ],
        "column_names": [
            "region id",
            "region name",
            "country id",
            "country name",
            "region id",
            "department id",
            "department name",
            "manager id",
            "location id",
            "job id",
            "job title",
            "min salary",
            "max salary",
            "employee id",
            "first name",
            "last name",
            "email",
            "phone number",
            "hire date",
            "job id",
            "salary",
            "commission pct",
            "manager id",
            "department id",
            "employee id",
            "start date",
            "end date",
            "job id",
            "department id",
            "location id",
            "street address",
            "postal code",
            "city",
            "state province",
            "country id"
        ],
        "template_feedback": "use employees table and departments table in place of regions table . additionally make sure that employee id equals departments 's manager id . make sure no repetition in the results .",
        "positive_example": "you need to look for the table of workers those who are handling various sectors ."
    },
    {
        "db_id": "school_player",
        "table_names": [
            "school",
            "school details",
            "school performance",
            "player"
        ],
        "column_names": [
            "school id",
            "school",
            "location",
            "enrollment",
            "founded",
            "denomination",
            "boys or girls",
            "day or boarding",
            "year entered competition",
            "school colors",
            "school id",
            "nickname",
            "colors",
            "league",
            "class",
            "division",
            "school id",
            "school year",
            "class a",
            "class aa",
            "player id",
            "player",
            "team",
            "age",
            "position",
            "school id"
        ],
        "template_feedback": "in step 1 , consider the founded less than 1890 conditions in place of the founded greater than 1890 conditions . in step 2 , consider the founded greater than 1900 conditions in place of the founded less than 1900 conditions .",
        "positive_example": "interchange 1890 and 1900 with each other ."
    },
    {
        "db_id": "school_player",
        "table_names": [
            "school",
            "school details",
            "school performance",
            "player"
        ],
        "column_names": [
            "school id",
            "school",
            "location",
            "enrollment",
            "founded",
            "denomination",
            "boys or girls",
            "day or boarding",
            "year entered competition",
            "school colors",
            "school id",
            "nickname",
            "colors",
            "league",
            "class",
            "division",
            "school id",
            "school year",
            "class a",
            "class aa",
            "player id",
            "player",
            "team",
            "age",
            "position",
            "school id"
        ],
        "template_feedback": "in step 1 , consider the founded less than 1890 conditions in place of the founded greater than 1890 conditions . in step 2 , consider the founded greater than 1900 conditions in place of the founded less than 1900 conditions .",
        "positive_example": "swap 1890 and 1900 with each other ."
    },
    {
        "db_id": "inn_1",
        "table_names": [
            "rooms",
            "reservations"
        ],
        "column_names": [
            "room id",
            "room name",
            "beds",
            "bed type",
            "max occupancy",
            "base price",
            "decor",
            "code",
            "room",
            "check in",
            "check out",
            "rate",
            "last name",
            "first name",
            "adults",
            "kids"
        ],
        "template_feedback": "in step 2 , remove the rate equals 60 conditions . find for each value of room whose number of rows greater than 60 .",
        "positive_example": "be sure the rooms have been reserved more than 60 times ."
    },
    {
        "db_id": "inn_1",
        "table_names": [
            "rooms",
            "reservations"
        ],
        "column_names": [
            "room id",
            "room name",
            "beds",
            "bed type",
            "max occupancy",
            "base price",
            "decor",
            "code",
            "room",
            "check in",
            "check out",
            "rate",
            "last name",
            "first name",
            "adults",
            "kids"
        ],
        "template_feedback": "in step 2 , remove the rate equals 60 conditions . find for each value of room whose number of rows greater than 60 .",
        "positive_example": "confirm that the room are booked greater than 60 times ."
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "table_names": [
            "reference document types",
            "reference calendar",
            "reference locations",
            "roles",
            "all documents",
            "employees",
            "document locations",
            "documents to be destroyed"
        ],
        "column_names": [
            "document type code",
            "document type name",
            "document type description",
            "calendar date",
            "day number",
            "location code",
            "location name",
            "location description",
            "role code",
            "role name",
            "role description",
            "document id",
            "date stored",
            "document type code",
            "document name",
            "document description",
            "other details",
            "employee id",
            "role code",
            "employee name",
            "gender mfu",
            "date of birth",
            "other details",
            "document id",
            "location code",
            "date in location from",
            "date in locaton to",
            "document id",
            "destruction authorised by employee id",
            "destroyed by employee id",
            "planned destruction date",
            "actual destruction date",
            "other details"
        ],
        "template_feedback": "use reference calendar table in place of reference document types table .",
        "positive_example": "find number of rows in all documents table ."
    },
    {
        "db_id": "bike_1",
        "table_names": [
            "station",
            "status",
            "trip",
            "weather"
        ],
        "column_names": [
            "id",
            "name",
            "latitude",
            "longitude",
            "dock count",
            "city",
            "installation date",
            "station id",
            "bikes available",
            "docks available",
            "time",
            "id",
            "duration",
            "start date",
            "start station name",
            "start station id",
            "end date",
            "end station name",
            "end station id",
            "bike id",
            "subscription type",
            "zip code",
            "date",
            "max temperature f",
            "mean temperature f",
            "min temperature f",
            "max dew point f",
            "mean dew point f",
            "min dew point f",
            "max humidity",
            "mean humidity",
            "min humidity",
            "max sea level pressure inches",
            "mean sea level pressure inches",
            "min sea level pressure inches",
            "max visibility miles",
            "mean visibility miles",
            "min visibility miles",
            "max wind speed mph",
            "mean wind speed mph",
            "max gust speed mph",
            "precipitation inches",
            "cloud cover",
            "events",
            "wind dir degrees",
            "zip code"
        ],
        "template_feedback": "additionally use the information from the station table besides the trip table . consider the city not equals san francisco conditions in place of the start date not equals san francisco conditions .",
        "positive_example": "ensure that end station id not equals to id of station whose name equals san francisco ."
    },
    {
        "db_id": "bike_1",
        "table_names": [
            "station",
            "status",
            "trip",
            "weather"
        ],
        "column_names": [
            "id",
            "name",
            "latitude",
            "longitude",
            "dock count",
            "city",
            "installation date",
            "station id",
            "bikes available",
            "docks available",
            "time",
            "id",
            "duration",
            "start date",
            "start station name",
            "start station id",
            "end date",
            "end station name",
            "end station id",
            "bike id",
            "subscription type",
            "zip code",
            "date",
            "max temperature f",
            "mean temperature f",
            "min temperature f",
            "max dew point f",
            "mean dew point f",
            "min dew point f",
            "max humidity",
            "mean humidity",
            "min humidity",
            "max sea level pressure inches",
            "mean sea level pressure inches",
            "min sea level pressure inches",
            "max visibility miles",
            "mean visibility miles",
            "min visibility miles",
            "max wind speed mph",
            "mean wind speed mph",
            "max gust speed mph",
            "precipitation inches",
            "cloud cover",
            "events",
            "wind dir degrees",
            "zip code"
        ],
        "template_feedback": "additionally use the information from the station table besides the trip table . consider the city not equals san francisco conditions in place of the start date not equals san francisco conditions .",
        "positive_example": "you need to make sure that san francisco end station id should not match with station id ."
    },
    {
        "db_id": "insurance_and_eClaims",
        "table_names": [
            "customers",
            "staff",
            "policies",
            "claim headers",
            "claims documents",
            "claims processing stages",
            "claims processing"
        ],
        "column_names": [
            "customer id",
            "customer details",
            "staff id",
            "staff details",
            "policy id",
            "customer id",
            "policy type code",
            "start date",
            "end date",
            "claim header id",
            "claim status code",
            "claim type code",
            "policy id",
            "date of claim",
            "date of settlement",
            "amount claimed",
            "amount piad",
            "claim id",
            "document type code",
            "created by staff id",
            "created date",
            "claim stage id",
            "next claim stage id",
            "claim status name",
            "claim status description",
            "claim processing id",
            "claim id",
            "claim outcome code",
            "claim stage id",
            "staff id"
        ],
        "template_feedback": "in step 2 , additionally make sure that amount piad is equals minimum amount piad claim headers . do not find for each value of customers 's customer id . in step 3 , you should not find the smallest of the results . show me all the results .",
        "positive_example": "there is no need to do summation of amount claimed , use only amount claimed ."
    },
    {
        "db_id": "insurance_and_eClaims",
        "table_names": [
            "customers",
            "staff",
            "policies",
            "claim headers",
            "claims documents",
            "claims processing stages",
            "claims processing"
        ],
        "column_names": [
            "customer id",
            "customer details",
            "staff id",
            "staff details",
            "policy id",
            "customer id",
            "policy type code",
            "start date",
            "end date",
            "claim header id",
            "claim status code",
            "claim type code",
            "policy id",
            "date of claim",
            "date of settlement",
            "amount claimed",
            "amount piad",
            "claim id",
            "document type code",
            "created by staff id",
            "created date",
            "claim stage id",
            "next claim stage id",
            "claim status name",
            "claim status description",
            "claim processing id",
            "claim id",
            "claim outcome code",
            "claim stage id",
            "staff id"
        ],
        "template_feedback": "in step 2 , additionally make sure that amount piad is equals minimum amount piad claim headers . do not find for each value of customers 's customer id . in step 3 , you should not find the smallest of the results . show me all the results .",
        "positive_example": "just claimed amount is needed ."
    },
    {
        "db_id": "hr_1",
        "table_names": [
            "regions",
            "countries",
            "departments",
            "jobs",
            "employees",
            "job history",
            "locations"
        ],
        "column_names": [
            "region id",
            "region name",
            "country id",
            "country name",
            "region id",
            "department id",
            "department name",
            "manager id",
            "location id",
            "job id",
            "job title",
            "min salary",
            "max salary",
            "employee id",
            "first name",
            "last name",
            "email",
            "phone number",
            "hire date",
            "job id",
            "salary",
            "commission pct",
            "manager id",
            "department id",
            "employee id",
            "start date",
            "end date",
            "job id",
            "department id",
            "location id",
            "street address",
            "postal code",
            "city",
            "state province",
            "country id"
        ],
        "template_feedback": "in step 2 , find job id in place of salary .",
        "positive_example": "in step 2 , i want the id of job ."
    },
    {
        "db_id": "network_2",
        "table_names": [
            "person",
            "person friend"
        ],
        "column_names": [
            "name",
            "age",
            "city",
            "gender",
            "job",
            "name",
            "friend",
            "year"
        ],
        "template_feedback": "in step 1 , do not use the person table . in step 2 , additionally make sure that year is equals maximum year person friend whose person friend 's name equals zach and person friend 's name equals zach . you should not find the largest of the results . show me all the results .",
        "positive_example": "in step 2 ensure friend equals zach ."
    },
    {
        "db_id": "music_2",
        "table_names": [
            "songs",
            "albums",
            "band",
            "instruments",
            "performance",
            "track lists",
            "vocals"
        ],
        "column_names": [
            "song id",
            "title",
            "aid",
            "title",
            "year",
            "label",
            "type",
            "id",
            "first name",
            "last name",
            "song id",
            "bandmate id",
            "instrument",
            "song id",
            "bandmate",
            "stage position",
            "album id",
            "position",
            "song id",
            "song id",
            "bandmate",
            "type"
        ],
        "template_feedback": "in step 1 , use performance table in place of instruments table",
        "positive_example": "specify that musician has performed the songs badlands ."
    },
    {
        "db_id": "music_2",
        "table_names": [
            "songs",
            "albums",
            "band",
            "instruments",
            "performance",
            "track lists",
            "vocals"
        ],
        "column_names": [
            "song id",
            "title",
            "aid",
            "title",
            "year",
            "label",
            "type",
            "id",
            "first name",
            "last name",
            "song id",
            "bandmate id",
            "instrument",
            "song id",
            "bandmate",
            "stage position",
            "album id",
            "position",
            "song id",
            "song id",
            "bandmate",
            "type"
        ],
        "template_feedback": "in step 1 , use performance table in place of instruments table",
        "positive_example": "you must cite that the musician should have performed the song badlands ."
    },
    {
        "db_id": "bike_1",
        "table_names": [
            "station",
            "status",
            "trip",
            "weather"
        ],
        "column_names": [
            "id",
            "name",
            "latitude",
            "longitude",
            "dock count",
            "city",
            "installation date",
            "station id",
            "bikes available",
            "docks available",
            "time",
            "id",
            "duration",
            "start date",
            "start station name",
            "start station id",
            "end date",
            "end station name",
            "end station id",
            "bike id",
            "subscription type",
            "zip code",
            "date",
            "max temperature f",
            "mean temperature f",
            "min temperature f",
            "max dew point f",
            "mean dew point f",
            "min dew point f",
            "max humidity",
            "mean humidity",
            "min humidity",
            "max sea level pressure inches",
            "mean sea level pressure inches",
            "min sea level pressure inches",
            "max visibility miles",
            "mean visibility miles",
            "min visibility miles",
            "max wind speed mph",
            "mean wind speed mph",
            "max gust speed mph",
            "precipitation inches",
            "cloud cover",
            "events",
            "wind dir degrees",
            "zip code"
        ],
        "template_feedback": "find start station name in place of start date .",
        "positive_example": "you should have name of start station ."
    },
    {
        "db_id": "club_1",
        "table_names": [
            "student",
            "club",
            "member of club"
        ],
        "column_names": [
            "student id",
            "last name",
            "first name",
            "age",
            "sex",
            "major",
            "advisor",
            "city code",
            "club id",
            "club name",
            "club description",
            "club location",
            "student id",
            "club id",
            "position"
        ],
        "template_feedback": "in step 2 , additionally make sure that position equals president .",
        "positive_example": "finding id 's of club and last name where id 's of student are president ."
    },
    {
        "db_id": "product_catalog",
        "table_names": [
            "attribute definitions",
            "catalogs",
            "catalog structure",
            "catalog contents",
            "catalog contents additional attributes"
        ],
        "column_names": [
            "attribute id",
            "attribute name",
            "attribute data type",
            "catalog id",
            "catalog name",
            "catalog publisher",
            "date of publication",
            "date of latest revision",
            "catalog level number",
            "catalog id",
            "catalog level name",
            "catalog entry id",
            "catalog level number",
            "parent entry id",
            "previous entry id",
            "next entry id",
            "catalog entry name",
            "product stock number",
            "price in dollars",
            "price in euros",
            "price in pounds",
            "capacity",
            "length",
            "height",
            "width",
            "catalog entry id",
            "catalog level number",
            "attribute id",
            "attribute value"
        ],
        "template_feedback": "consider the catalog publisher like % murray % conditions in place of the catalog name like murray conditions . make sure no repetition in the results .",
        "positive_example": "i want the publisher of the catalog ."
    },
    {
        "db_id": "product_catalog",
        "table_names": [
            "attribute definitions",
            "catalogs",
            "catalog structure",
            "catalog contents",
            "catalog contents additional attributes"
        ],
        "column_names": [
            "attribute id",
            "attribute name",
            "attribute data type",
            "catalog id",
            "catalog name",
            "catalog publisher",
            "date of publication",
            "date of latest revision",
            "catalog level number",
            "catalog id",
            "catalog level name",
            "catalog entry id",
            "catalog level number",
            "parent entry id",
            "previous entry id",
            "next entry id",
            "catalog entry name",
            "product stock number",
            "price in dollars",
            "price in euros",
            "price in pounds",
            "capacity",
            "length",
            "height",
            "width",
            "catalog entry id",
            "catalog level number",
            "attribute id",
            "attribute value"
        ],
        "template_feedback": "consider the catalog publisher like % murray % conditions in place of the catalog name like murray conditions . make sure no repetition in the results .",
        "positive_example": "you need to use publisher of catalog ."
    },
    {
        "db_id": "product_catalog",
        "table_names": [
            "attribute definitions",
            "catalogs",
            "catalog structure",
            "catalog contents",
            "catalog contents additional attributes"
        ],
        "column_names": [
            "attribute id",
            "attribute name",
            "attribute data type",
            "catalog id",
            "catalog name",
            "catalog publisher",
            "date of publication",
            "date of latest revision",
            "catalog level number",
            "catalog id",
            "catalog level name",
            "catalog entry id",
            "catalog level number",
            "parent entry id",
            "previous entry id",
            "next entry id",
            "catalog entry name",
            "product stock number",
            "price in dollars",
            "price in euros",
            "price in pounds",
            "capacity",
            "length",
            "height",
            "width",
            "catalog entry id",
            "catalog level number",
            "attribute id",
            "attribute value"
        ],
        "template_feedback": "consider the catalog publisher like % murray % conditions in place of the catalog name like murray conditions . make sure no repetition in the results .",
        "positive_example": "i want the publisher of the catalog ."
    },
    {
        "db_id": "product_catalog",
        "table_names": [
            "attribute definitions",
            "catalogs",
            "catalog structure",
            "catalog contents",
            "catalog contents additional attributes"
        ],
        "column_names": [
            "attribute id",
            "attribute name",
            "attribute data type",
            "catalog id",
            "catalog name",
            "catalog publisher",
            "date of publication",
            "date of latest revision",
            "catalog level number",
            "catalog id",
            "catalog level name",
            "catalog entry id",
            "catalog level number",
            "parent entry id",
            "previous entry id",
            "next entry id",
            "catalog entry name",
            "product stock number",
            "price in dollars",
            "price in euros",
            "price in pounds",
            "capacity",
            "length",
            "height",
            "width",
            "catalog entry id",
            "catalog level number",
            "attribute id",
            "attribute value"
        ],
        "template_feedback": "consider the catalog publisher like % murray % conditions in place of the catalog name like murray conditions . make sure no repetition in the results .",
        "positive_example": "you need to use publisher of catalog ."
    },
    {
        "db_id": "university_basketball",
        "table_names": [
            "basketball match",
            "university"
        ],
        "column_names": [
            "team id",
            "school id",
            "team name",
            "acc regular season",
            "acc percent",
            "acc home",
            "acc road",
            "all games",
            "all games percent",
            "all home",
            "all road",
            "all neutral",
            "school id",
            "school",
            "location",
            "founded",
            "affiliation",
            "enrollment",
            "nickname",
            "primary conference"
        ],
        "template_feedback": "in step 1 , do not find for each value of acc percent . in step 2 , order the results by acc percent in place of number of rows .",
        "positive_example": "calculate the highest account percent ."
    },
    {
        "db_id": "hospital_1",
        "table_names": [
            "physician",
            "department",
            "affiliated with",
            "procedures",
            "trained in",
            "patient",
            "nurse",
            "appointment",
            "medication",
            "prescribes",
            "block",
            "room",
            "on call",
            "stay",
            "undergoes"
        ],
        "column_names": [
            "employee id",
            "name",
            "position",
            "ssn",
            "departmentid",
            "name",
            "head",
            "physician",
            "department",
            "primary affiliation",
            "code",
            "name",
            "cost",
            "physician",
            "treatment",
            "certification date",
            "certification expires",
            "ssn",
            "name",
            "address",
            "phone",
            "insurance id",
            "pcp",
            "employee id",
            "name",
            "position",
            "registered",
            "ssn",
            "appointment id",
            "patient",
            "prep nurse",
            "physician",
            "start",
            "end",
            "examination room",
            "code",
            "name",
            "brand",
            "description",
            "physician",
            "patient",
            "medication",
            "date",
            "appointment",
            "dose",
            "block floor",
            "block code",
            "roomnumber",
            "room type",
            "block floor",
            "block code",
            "unavailable",
            "nurse",
            "block floor",
            "block code",
            "oncall start",
            "oncall end",
            "stay id",
            "patient",
            "room",
            "stay start",
            "stay end",
            "patient",
            "procedures",
            "stay",
            "date undergoes",
            "physician",
            "assisting nurse"
        ],
        "template_feedback": "additionally use the information from the on call table besides the nurse table .",
        "positive_example": "you need to search for those nurses having their ids on table of call ."
    },
    {
        "db_id": "tracking_orders",
        "table_names": [
            "customers",
            "invoices",
            "orders",
            "products",
            "order items",
            "shipments",
            "shipment items"
        ],
        "column_names": [
            "customer id",
            "customer name",
            "customer details",
            "invoice number",
            "invoice date",
            "invoice details",
            "order id",
            "customer id",
            "order status",
            "date order placed",
            "order details",
            "product id",
            "product name",
            "product details",
            "order item id",
            "product id",
            "order id",
            "order item status",
            "order item details",
            "shipment id",
            "order id",
            "invoice number",
            "shipment tracking number",
            "shipment date",
            "other shipment details",
            "shipment id",
            "order item id"
        ],
        "template_feedback": "in step 1 , additionally use the information from the products table and orders table besides the order items table . in step 2 , you should not order the results .",
        "positive_example": "find product id in order items table along with corresponding number of rows of each value ."
    },
    {
        "db_id": "tracking_orders",
        "table_names": [
            "customers",
            "invoices",
            "orders",
            "products",
            "order items",
            "shipments",
            "shipment items"
        ],
        "column_names": [
            "customer id",
            "customer name",
            "customer details",
            "invoice number",
            "invoice date",
            "invoice details",
            "order id",
            "customer id",
            "order status",
            "date order placed",
            "order details",
            "product id",
            "product name",
            "product details",
            "order item id",
            "product id",
            "order id",
            "order item status",
            "order item details",
            "shipment id",
            "order id",
            "invoice number",
            "shipment tracking number",
            "shipment date",
            "other shipment details",
            "shipment id",
            "order item id"
        ],
        "template_feedback": "in step 1 , additionally use the information from the products table and orders table besides the order items table . in step 2 , you should not order the results .",
        "positive_example": "i want product id from order items table with count of number of corresponding value ."
    },
    {
        "db_id": "products_gen_characteristics",
        "table_names": [
            "reference characteristic types",
            "reference colors",
            "reference product categories",
            "characteristics",
            "products",
            "product characteristics"
        ],
        "column_names": [
            "characteristic type code",
            "characteristic type description",
            "color code",
            "color description",
            "product category code",
            "product category description",
            "unit of measure",
            "characteristic id",
            "characteristic type code",
            "characteristic data type",
            "characteristic name",
            "other characteristic details",
            "product id",
            "color code",
            "product category code",
            "product name",
            "typical buying price",
            "typical selling price",
            "product description",
            "other product details",
            "product id",
            "characteristic id",
            "product characteristic value"
        ],
        "template_feedback": "additionally use the information from the product characteristics table and characteristics table besides the products table .",
        "positive_example": "the products table is wrong and should be replaced by characteristics table ."
    },
    {
        "db_id": "college_2",
        "table_names": [
            "classroom",
            "department",
            "course",
            "instructor",
            "section",
            "teaches",
            "student",
            "takes classes",
            "advisor",
            "time slot",
            "prerequisite"
        ],
        "column_names": [
            "building",
            "room number",
            "capacity",
            "department name",
            "building",
            "budget",
            "course id",
            "title",
            "department name",
            "credits",
            "id",
            "name",
            "department name",
            "salary",
            "course id",
            "section id",
            "semester",
            "year",
            "building",
            "room number",
            "time slot id",
            "id",
            "course id",
            "section id",
            "semester",
            "year",
            "id",
            "name",
            "department name",
            "total credits",
            "id",
            "course id",
            "section id",
            "semester",
            "year",
            "grade",
            "student id",
            "instructor id",
            "time slot id",
            "day",
            "start hour",
            "start minute",
            "end hour",
            "end minute",
            "course id",
            "prerequisite id"
        ],
        "template_feedback": "in step 1 , use prerequisite table in place of takes classes table . in step 2 , use course table in place of section table .",
        "positive_example": "in step 1 find total credits of advisor table , in step 2 exchange classroom with student ."
    },
    {
        "db_id": "customers_card_transactions",
        "table_names": [
            "accounts",
            "customers",
            "customers cards",
            "financial transactions"
        ],
        "column_names": [
            "account id",
            "customer id",
            "account name",
            "other account details",
            "customer id",
            "customer first name",
            "customer last name",
            "customer address",
            "customer phone",
            "customer email",
            "other customer details",
            "card id",
            "customer id",
            "card type code",
            "card number",
            "date valid from",
            "date valid to",
            "other card details",
            "transaction id",
            "previous transaction id",
            "account id",
            "card id",
            "transaction type",
            "transaction date",
            "transaction amount",
            "transaction comment",
            "other transaction details"
        ],
        "template_feedback": "find customer id in place of other card details .",
        "positive_example": "i want id of customer rather than card details ."
    },
    {
        "db_id": "customers_and_addresses",
        "table_names": [
            "addresses",
            "products",
            "customers",
            "customer addresses",
            "customer contact channels",
            "customer orders",
            "order items"
        ],
        "column_names": [
            "address id",
            "address content",
            "city",
            "zip postcode",
            "state province county",
            "country",
            "other address details",
            "product id",
            "product details",
            "customer id",
            "payment method",
            "customer name",
            "date became customer",
            "other customer details",
            "customer id",
            "address id",
            "date address from",
            "address type",
            "date address to",
            "customer id",
            "channel code",
            "active from date",
            "active to date",
            "contact number",
            "order id",
            "customer id",
            "order status",
            "order date",
            "order details",
            "order id",
            "product id",
            "order quantity"
        ],
        "template_feedback": "additionally use the information from the customer orders table besides the customers table . order the results by order date in place of date became customer .",
        "positive_example": "i want date of order ."
    },
    {
        "db_id": "mountain_photos",
        "table_names": [
            "mountain",
            "camera lens",
            "photos"
        ],
        "column_names": [
            "id",
            "name",
            "height",
            "prominence",
            "range",
            "country",
            "id",
            "brand",
            "name",
            "focal length mm",
            "max aperture",
            "id",
            "camera lens id",
            "mountain id",
            "color",
            "name"
        ],
        "template_feedback": "in step 2 , additionally make sure that height greater than 4000 . find mountain 's name in place of photos 's name .",
        "positive_example": "use photos 's id instead of mountain 's id ."
    },
    {
        "db_id": "mountain_photos",
        "table_names": [
            "mountain",
            "camera lens",
            "photos"
        ],
        "column_names": [
            "id",
            "name",
            "height",
            "prominence",
            "range",
            "country",
            "id",
            "brand",
            "name",
            "focal length mm",
            "max aperture",
            "id",
            "camera lens id",
            "mountain id",
            "color",
            "name"
        ],
        "template_feedback": "in step 2 , additionally make sure that height greater than 4000 . find mountain 's name in place of photos 's name .",
        "positive_example": "change id ; s of mountain with id 's of photos ."
    },
    {
        "db_id": "dorm_1",
        "table_names": [
            "student",
            "dorm",
            "dorm amenity",
            "has amenity",
            "lives in"
        ],
        "column_names": [
            "student id",
            "last name",
            "first name",
            "age",
            "sex",
            "major",
            "advisor",
            "city code",
            "dorm id",
            "dorm name",
            "student capacity",
            "gender",
            "amenity id",
            "amenity name",
            "dorm id",
            "amenity id",
            "student id",
            "dorm id",
            "room number"
        ],
        "template_feedback": "use has amenity table in place of student table . find number of different dorm id in place of number of rows .",
        "positive_example": "you need to search for total number of rows in amenity table ."
    },
    {
        "db_id": "customers_and_addresses",
        "table_names": [
            "addresses",
            "products",
            "customers",
            "customer addresses",
            "customer contact channels",
            "customer orders",
            "order items"
        ],
        "column_names": [
            "address id",
            "address content",
            "city",
            "zip postcode",
            "state province county",
            "country",
            "other address details",
            "product id",
            "product details",
            "customer id",
            "payment method",
            "customer name",
            "date became customer",
            "other customer details",
            "customer id",
            "address id",
            "date address from",
            "address type",
            "date address to",
            "customer id",
            "channel code",
            "active from date",
            "active to date",
            "contact number",
            "order id",
            "customer id",
            "order status",
            "order date",
            "order details",
            "order id",
            "product id",
            "order quantity"
        ],
        "template_feedback": "consider the product details like % latte % or product details like % americano % conditions in place of the product details equals latte or product details equals americano conditions .",
        "positive_example": "you need to use id of product also with information of first product ."
    },
    {
        "db_id": "swimming",
        "table_names": [
            "swimmer",
            "stadium",
            "event",
            "record"
        ],
        "column_names": [
            "id",
            "name",
            "nationality",
            "meter 100",
            "meter 200",
            "meter 300",
            "meter 400",
            "meter 500",
            "meter 600",
            "meter 700",
            "time",
            "id",
            "name",
            "capacity",
            "city",
            "country",
            "opening year",
            "id",
            "name",
            "stadium id",
            "year",
            "id",
            "result",
            "swimmer id",
            "event id"
        ],
        "template_feedback": "find meter 300 and meter 200 in place of meter 600 and meter 400 .",
        "positive_example": "substitute 100 & 300 meter for 100 & 100 meter respectively ."
    },
    {
        "db_id": "customers_and_addresses",
        "table_names": [
            "addresses",
            "products",
            "customers",
            "customer addresses",
            "customer contact channels",
            "customer orders",
            "order items"
        ],
        "column_names": [
            "address id",
            "address content",
            "city",
            "zip postcode",
            "state province county",
            "country",
            "other address details",
            "product id",
            "product details",
            "customer id",
            "payment method",
            "customer name",
            "date became customer",
            "other customer details",
            "customer id",
            "address id",
            "date address from",
            "address type",
            "date address to",
            "customer id",
            "channel code",
            "active from date",
            "active to date",
            "contact number",
            "order id",
            "customer id",
            "order status",
            "order date",
            "order details",
            "order id",
            "product id",
            "order quantity"
        ],
        "template_feedback": "in step 2 , additionally use the information from the customer orders table besides the customers table .",
        "positive_example": "from customers table use customer name and also check that customer id is there or not in orders of customer in step 2 ."
    },
    {
        "db_id": "customers_and_addresses",
        "table_names": [
            "addresses",
            "products",
            "customers",
            "customer addresses",
            "customer contact channels",
            "customer orders",
            "order items"
        ],
        "column_names": [
            "address id",
            "address content",
            "city",
            "zip postcode",
            "state province county",
            "country",
            "other address details",
            "product id",
            "product details",
            "customer id",
            "payment method",
            "customer name",
            "date became customer",
            "other customer details",
            "customer id",
            "address id",
            "date address from",
            "address type",
            "date address to",
            "customer id",
            "channel code",
            "active from date",
            "active to date",
            "contact number",
            "order id",
            "customer id",
            "order status",
            "order date",
            "order details",
            "order id",
            "product id",
            "order quantity"
        ],
        "template_feedback": "additionally use the information from the order items table and customer orders table besides the customers table . find summation of order quantity in place of number of rows .",
        "positive_example": "need the total number of items ordered by rodrick heaney ."
    },
    {
        "db_id": "phone_market",
        "table_names": [
            "phone",
            "market",
            "phone market"
        ],
        "column_names": [
            "name",
            "phone id",
            "memory in g",
            "carrier",
            "price",
            "market id",
            "district",
            "num of employees",
            "num of shops",
            "ranking",
            "market id",
            "phone id",
            "num of stock"
        ],
        "template_feedback": "in step 1 , consider the memory in g less than 32 conditions in place of the memory in g greater than 32 conditions . in step 2 , consider the memory in g greater than 64 conditions in place of the memory in g less than 64 conditions .",
        "positive_example": "switch \" greater than \" and \" less than \" with each other in steps ."
    },
    {
        "db_id": "phone_market",
        "table_names": [
            "phone",
            "market",
            "phone market"
        ],
        "column_names": [
            "name",
            "phone id",
            "memory in g",
            "carrier",
            "price",
            "market id",
            "district",
            "num of employees",
            "num of shops",
            "ranking",
            "market id",
            "phone id",
            "num of stock"
        ],
        "template_feedback": "in step 1 , consider the memory in g less than 32 conditions in place of the memory in g greater than 32 conditions . in step 2 , consider the memory in g greater than 64 conditions in place of the memory in g less than 64 conditions .",
        "positive_example": "in steps , you need to replace more than and smaller than ."
    },
    {
        "db_id": "product_catalog",
        "table_names": [
            "attribute definitions",
            "catalogs",
            "catalog structure",
            "catalog contents",
            "catalog contents additional attributes"
        ],
        "column_names": [
            "attribute id",
            "attribute name",
            "attribute data type",
            "catalog id",
            "catalog name",
            "catalog publisher",
            "date of publication",
            "date of latest revision",
            "catalog level number",
            "catalog id",
            "catalog level name",
            "catalog entry id",
            "catalog level number",
            "parent entry id",
            "previous entry id",
            "next entry id",
            "catalog entry name",
            "product stock number",
            "price in dollars",
            "price in euros",
            "price in pounds",
            "capacity",
            "length",
            "height",
            "width",
            "catalog entry id",
            "catalog level number",
            "attribute id",
            "attribute value"
        ],
        "template_feedback": "in step 1 , do not use the catalog structure table and catalogs table . in step 2 , consider the width greater than 5 or length less than 3 conditions in place of the height less than 5 or length greater than 3 conditions . find catalog entry name in place of catalog name .",
        "positive_example": "exchange \" greater than \" and \" less than \" with each other ."
    },
    {
        "db_id": "product_catalog",
        "table_names": [
            "attribute definitions",
            "catalogs",
            "catalog structure",
            "catalog contents",
            "catalog contents additional attributes"
        ],
        "column_names": [
            "attribute id",
            "attribute name",
            "attribute data type",
            "catalog id",
            "catalog name",
            "catalog publisher",
            "date of publication",
            "date of latest revision",
            "catalog level number",
            "catalog id",
            "catalog level name",
            "catalog entry id",
            "catalog level number",
            "parent entry id",
            "previous entry id",
            "next entry id",
            "catalog entry name",
            "product stock number",
            "price in dollars",
            "price in euros",
            "price in pounds",
            "capacity",
            "length",
            "height",
            "width",
            "catalog entry id",
            "catalog level number",
            "attribute id",
            "attribute value"
        ],
        "template_feedback": "in step 1 , do not use the catalog structure table and catalogs table . in step 2 , consider the width greater than 5 or length less than 3 conditions in place of the height less than 5 or length greater than 3 conditions . find catalog entry name in place of catalog name .",
        "positive_example": "you should use less than in place of greater than ."
    },
    {
        "db_id": "college_2",
        "table_names": [
            "classroom",
            "department",
            "course",
            "instructor",
            "section",
            "teaches",
            "student",
            "takes classes",
            "advisor",
            "time slot",
            "prerequisite"
        ],
        "column_names": [
            "building",
            "room number",
            "capacity",
            "department name",
            "building",
            "budget",
            "course id",
            "title",
            "department name",
            "credits",
            "id",
            "name",
            "department name",
            "salary",
            "course id",
            "section id",
            "semester",
            "year",
            "building",
            "room number",
            "time slot id",
            "id",
            "course id",
            "section id",
            "semester",
            "year",
            "id",
            "name",
            "department name",
            "total credits",
            "id",
            "course id",
            "section id",
            "semester",
            "year",
            "grade",
            "student id",
            "instructor id",
            "time slot id",
            "day",
            "start hour",
            "start minute",
            "end hour",
            "end minute",
            "course id",
            "prerequisite id"
        ],
        "template_feedback": "in step 1 , use teaches table in place of department table",
        "positive_example": "ensure that instructor had taught c programming course ."
    },
    {
        "db_id": "college_2",
        "table_names": [
            "classroom",
            "department",
            "course",
            "instructor",
            "section",
            "teaches",
            "student",
            "takes classes",
            "advisor",
            "time slot",
            "prerequisite"
        ],
        "column_names": [
            "building",
            "room number",
            "capacity",
            "department name",
            "building",
            "budget",
            "course id",
            "title",
            "department name",
            "credits",
            "id",
            "name",
            "department name",
            "salary",
            "course id",
            "section id",
            "semester",
            "year",
            "building",
            "room number",
            "time slot id",
            "id",
            "course id",
            "section id",
            "semester",
            "year",
            "id",
            "name",
            "department name",
            "total credits",
            "id",
            "course id",
            "section id",
            "semester",
            "year",
            "grade",
            "student id",
            "instructor id",
            "time slot id",
            "day",
            "start hour",
            "start minute",
            "end hour",
            "end minute",
            "course id",
            "prerequisite id"
        ],
        "template_feedback": "in step 1 , use teaches table in place of department table",
        "positive_example": "you should make sure that instructors have taught c programming to course ."
    },
    {
        "db_id": "hospital_1",
        "table_names": [
            "physician",
            "department",
            "affiliated with",
            "procedures",
            "trained in",
            "patient",
            "nurse",
            "appointment",
            "medication",
            "prescribes",
            "block",
            "room",
            "on call",
            "stay",
            "undergoes"
        ],
        "column_names": [
            "employee id",
            "name",
            "position",
            "ssn",
            "departmentid",
            "name",
            "head",
            "physician",
            "department",
            "primary affiliation",
            "code",
            "name",
            "cost",
            "physician",
            "treatment",
            "certification date",
            "certification expires",
            "ssn",
            "name",
            "address",
            "phone",
            "insurance id",
            "pcp",
            "employee id",
            "name",
            "position",
            "registered",
            "ssn",
            "appointment id",
            "patient",
            "prep nurse",
            "physician",
            "start",
            "end",
            "examination room",
            "code",
            "name",
            "brand",
            "description",
            "physician",
            "patient",
            "medication",
            "date",
            "appointment",
            "dose",
            "block floor",
            "block code",
            "roomnumber",
            "room type",
            "block floor",
            "block code",
            "unavailable",
            "nurse",
            "block floor",
            "block code",
            "oncall start",
            "oncall end",
            "stay id",
            "patient",
            "room",
            "stay start",
            "stay end",
            "patient",
            "procedures",
            "stay",
            "date undergoes",
            "physician",
            "assisting nurse"
        ],
        "template_feedback": "find patient in place of physician . use the smallest in place of largest .",
        "positive_example": "address should be use in place of roomnumber ."
    },
    {
        "db_id": "college_2",
        "table_names": [
            "classroom",
            "department",
            "course",
            "instructor",
            "section",
            "teaches",
            "student",
            "takes classes",
            "advisor",
            "time slot",
            "prerequisite"
        ],
        "column_names": [
            "building",
            "room number",
            "capacity",
            "department name",
            "building",
            "budget",
            "course id",
            "title",
            "department name",
            "credits",
            "id",
            "name",
            "department name",
            "salary",
            "course id",
            "section id",
            "semester",
            "year",
            "building",
            "room number",
            "time slot id",
            "id",
            "course id",
            "section id",
            "semester",
            "year",
            "id",
            "name",
            "department name",
            "total credits",
            "id",
            "course id",
            "section id",
            "semester",
            "year",
            "grade",
            "student id",
            "instructor id",
            "time slot id",
            "day",
            "start hour",
            "start minute",
            "end hour",
            "end minute",
            "course id",
            "prerequisite id"
        ],
        "template_feedback": "additionally order the results by title .",
        "positive_example": "be sure that order of ascending is by capacity and budget ."
    },
    {
        "db_id": "product_catalog",
        "table_names": [
            "attribute definitions",
            "catalogs",
            "catalog structure",
            "catalog contents",
            "catalog contents additional attributes"
        ],
        "column_names": [
            "attribute id",
            "attribute name",
            "attribute data type",
            "catalog id",
            "catalog name",
            "catalog publisher",
            "date of publication",
            "date of latest revision",
            "catalog level number",
            "catalog id",
            "catalog level name",
            "catalog entry id",
            "catalog level number",
            "parent entry id",
            "previous entry id",
            "next entry id",
            "catalog entry name",
            "product stock number",
            "price in dollars",
            "price in euros",
            "price in pounds",
            "capacity",
            "length",
            "height",
            "width",
            "catalog entry id",
            "catalog level number",
            "attribute id",
            "attribute value"
        ],
        "template_feedback": "use catalog structure table in place of catalog contents table . consider the catalog structure 's catalog level number between 5 and 10 conditions in place of the length between 10 and 5 conditions . find catalog structure 's catalog level number and catalog level name in place of catalog entry name and height .",
        "positive_example": "you need to look for the name of catalog level and number of catalog level having range form 5 to 10 ."
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "table_names": [
            "reference payment methods",
            "reference service types",
            "addresses",
            "products",
            "marketing regions",
            "clients",
            "drama workshop groups",
            "performers",
            "customers",
            "stores",
            "bookings",
            "performers in bookings",
            "customer orders",
            "order items",
            "invoices",
            "services",
            "bookings services",
            "invoice items"
        ],
        "column_names": [
            "payment method code",
            "payment method description",
            "service type code",
            "parent service type code",
            "service type description",
            "address id",
            "line 1",
            "line 2",
            "city town",
            "state county",
            "other details",
            "product id",
            "product name",
            "product price",
            "product description",
            "other product service details",
            "marketing region code",
            "marketing region name",
            "marketing region descriptrion",
            "other details",
            "client id",
            "address id",
            "customer email address",
            "customer name",
            "customer phone",
            "other details",
            "workshop group id",
            "address id",
            "currency code",
            "marketing region code",
            "store name",
            "store phone",
            "store email address",
            "other details",
            "performer id",
            "address id",
            "customer name",
            "customer phone",
            "customer email address",
            "other details",
            "customer id",
            "address id",
            "customer name",
            "customer phone",
            "customer email address",
            "other details",
            "store id",
            "address id",
            "marketing region code",
            "store name",
            "store phone",
            "store email address",
            "other details",
            "booking id",
            "customer id",
            "workshop group id",
            "status code",
            "store id",
            "order date",
            "planned delivery date",
            "actual delivery date",
            "other order details",
            "order id",
            "performer id",
            "order id",
            "customer id",
            "store id",
            "order date",
            "planned delivery date",
            "actual delivery date",
            "other order details",
            "order item id",
            "order id",
            "product id",
            "order quantity",
            "other item details",
            "invoice id",
            "order id",
            "payment method code",
            "product id",
            "order quantity",
            "other item details",
            "order item id",
            "service id",
            "service type code",
            "workshop group id",
            "product description",
            "product name",
            "product price",
            "other product service details",
            "order id",
            "product id",
            "invoice item id",
            "invoice id",
            "order id",
            "order item id",
            "product id",
            "order quantity",
            "other item details"
        ],
        "template_feedback": "in step 1 , use drama workshop groups table in place of performers in bookings table and performers table in step 2 , find store name in place of customer name .",
        "positive_example": "i want name of store ."
    },
    {
        "db_id": "manufactory_1",
        "table_names": [
            "manufacturers",
            "products"
        ],
        "column_names": [
            "code",
            "name",
            "headquarter",
            "founder",
            "revenue",
            "code",
            "name",
            "price",
            "manufacturer"
        ],
        "template_feedback": "in step 1 , do not use the products table . in step 2 , find for each value of manufacturers 's name in place of manufacturer . find manufacturers 's name in place of manufacturer .",
        "positive_example": "erase \" summation of \" in step 2 ."
    },
    {
        "db_id": "manufactory_1",
        "table_names": [
            "manufacturers",
            "products"
        ],
        "column_names": [
            "code",
            "name",
            "headquarter",
            "founder",
            "revenue",
            "code",
            "name",
            "price",
            "manufacturer"
        ],
        "template_feedback": "in step 1 , do not use the products table . in step 2 , find for each value of manufacturers 's name in place of manufacturer . find manufacturers 's name in place of manufacturer .",
        "positive_example": "in step 2 , you need to remove \" summation of \" ."
    },
    {
        "db_id": "soccer_2",
        "table_names": [
            "college",
            "player",
            "tryout"
        ],
        "column_names": [
            "college name",
            "state",
            "enrollment",
            "player id",
            "player name",
            "yes card",
            "training hours",
            "player id",
            "college name",
            "player position",
            "decision"
        ],
        "template_feedback": "in step 1 , do not use the college table .",
        "positive_example": "also add tryout 's decision equals yes in step 2 ."
    },
    {
        "db_id": "twitter_1",
        "table_names": [
            "follows",
            "tweets",
            "user profiles"
        ],
        "column_names": [
            "user id",
            "follower id",
            "id",
            "user id",
            "text",
            "create date",
            "uid",
            "name",
            "email",
            "partition id",
            "followers"
        ],
        "template_feedback": "consider the email like % edu % or email like % superstar % conditions in place of the email equals edu or email equals superstar conditions .",
        "positive_example": "exchange both \" equals \" with \" contains \" ."
    },
    {
        "db_id": "twitter_1",
        "table_names": [
            "follows",
            "tweets",
            "user profiles"
        ],
        "column_names": [
            "user id",
            "follower id",
            "id",
            "user id",
            "text",
            "create date",
            "uid",
            "name",
            "email",
            "partition id",
            "followers"
        ],
        "template_feedback": "consider the email like % edu % or email like % superstar % conditions in place of the email equals edu or email equals superstar conditions .",
        "positive_example": "you should use contains instead of equals ."
    },
    {
        "db_id": "hospital_1",
        "table_names": [
            "physician",
            "department",
            "affiliated with",
            "procedures",
            "trained in",
            "patient",
            "nurse",
            "appointment",
            "medication",
            "prescribes",
            "block",
            "room",
            "on call",
            "stay",
            "undergoes"
        ],
        "column_names": [
            "employee id",
            "name",
            "position",
            "ssn",
            "departmentid",
            "name",
            "head",
            "physician",
            "department",
            "primary affiliation",
            "code",
            "name",
            "cost",
            "physician",
            "treatment",
            "certification date",
            "certification expires",
            "ssn",
            "name",
            "address",
            "phone",
            "insurance id",
            "pcp",
            "employee id",
            "name",
            "position",
            "registered",
            "ssn",
            "appointment id",
            "patient",
            "prep nurse",
            "physician",
            "start",
            "end",
            "examination room",
            "code",
            "name",
            "brand",
            "description",
            "physician",
            "patient",
            "medication",
            "date",
            "appointment",
            "dose",
            "block floor",
            "block code",
            "roomnumber",
            "room type",
            "block floor",
            "block code",
            "unavailable",
            "nurse",
            "block floor",
            "block code",
            "oncall start",
            "oncall end",
            "stay id",
            "patient",
            "room",
            "stay start",
            "stay end",
            "patient",
            "procedures",
            "stay",
            "date undergoes",
            "physician",
            "assisting nurse"
        ],
        "template_feedback": "in step 1 , additionally use the information from the affiliated with table . in step 3 , additionally use the information from the affiliated with table .",
        "positive_example": "make sure to find correlation associated with the table in step 1 ."
    },
    {
        "db_id": "journal_committee",
        "table_names": [
            "journal",
            "editor",
            "journal committee"
        ],
        "column_names": [
            "journal id",
            "date",
            "theme",
            "sales",
            "editor id",
            "name",
            "age",
            "editor id",
            "journal id",
            "work type"
        ],
        "template_feedback": "use the smallest in place of largest .",
        "positive_example": "ensure to find smallest value of age ."
    },
    {
        "db_id": "journal_committee",
        "table_names": [
            "journal",
            "editor",
            "journal committee"
        ],
        "column_names": [
            "journal id",
            "date",
            "theme",
            "sales",
            "editor id",
            "name",
            "age",
            "editor id",
            "journal id",
            "work type"
        ],
        "template_feedback": "use the smallest in place of largest .",
        "positive_example": "confirm to look for the lowest age value ."
    },
    {
        "db_id": "perpetrator",
        "table_names": [
            "perpetrator",
            "people"
        ],
        "column_names": [
            "perpetrator id",
            "people id",
            "date",
            "year",
            "location",
            "country",
            "killed",
            "injured",
            "people id",
            "name",
            "height",
            "weight",
            "home town"
        ],
        "template_feedback": "additionally use the information from the perpetrator table besides the people table .",
        "positive_example": "make sure they are in perpetrator table ."
    },
    {
        "db_id": "perpetrator",
        "table_names": [
            "perpetrator",
            "people"
        ],
        "column_names": [
            "perpetrator id",
            "people id",
            "date",
            "year",
            "location",
            "country",
            "killed",
            "injured",
            "people id",
            "name",
            "height",
            "weight",
            "home town"
        ],
        "template_feedback": "additionally use the information from the perpetrator table besides the people table .",
        "positive_example": "they must be present in table of perpetrator ."
    },
    {
        "db_id": "college_2",
        "table_names": [
            "classroom",
            "department",
            "course",
            "instructor",
            "section",
            "teaches",
            "student",
            "takes classes",
            "advisor",
            "time slot",
            "prerequisite"
        ],
        "column_names": [
            "building",
            "room number",
            "capacity",
            "department name",
            "building",
            "budget",
            "course id",
            "title",
            "department name",
            "credits",
            "id",
            "name",
            "department name",
            "salary",
            "course id",
            "section id",
            "semester",
            "year",
            "building",
            "room number",
            "time slot id",
            "id",
            "course id",
            "section id",
            "semester",
            "year",
            "id",
            "name",
            "department name",
            "total credits",
            "id",
            "course id",
            "section id",
            "semester",
            "year",
            "grade",
            "student id",
            "instructor id",
            "time slot id",
            "day",
            "start hour",
            "start minute",
            "end hour",
            "end minute",
            "course id",
            "prerequisite id"
        ],
        "template_feedback": "find number of different course id in place of number of rows .",
        "positive_example": "find the distinct number of rows in course table whose department name equals physics ."
    },
    {
        "db_id": "college_2",
        "table_names": [
            "classroom",
            "department",
            "course",
            "instructor",
            "section",
            "teaches",
            "student",
            "takes classes",
            "advisor",
            "time slot",
            "prerequisite"
        ],
        "column_names": [
            "building",
            "room number",
            "capacity",
            "department name",
            "building",
            "budget",
            "course id",
            "title",
            "department name",
            "credits",
            "id",
            "name",
            "department name",
            "salary",
            "course id",
            "section id",
            "semester",
            "year",
            "building",
            "room number",
            "time slot id",
            "id",
            "course id",
            "section id",
            "semester",
            "year",
            "id",
            "name",
            "department name",
            "total credits",
            "id",
            "course id",
            "section id",
            "semester",
            "year",
            "grade",
            "student id",
            "instructor id",
            "time slot id",
            "day",
            "start hour",
            "start minute",
            "end hour",
            "end minute",
            "course id",
            "prerequisite id"
        ],
        "template_feedback": "find number of different course id in place of number of rows .",
        "positive_example": "provide me the definite number of courses whose department name is physics ."
    },
    {
        "db_id": "program_share",
        "table_names": [
            "program",
            "channel",
            "broadcast",
            "broadcast share"
        ],
        "column_names": [
            "program id",
            "name",
            "origin",
            "launch",
            "owner",
            "channel id",
            "name",
            "owner",
            "share in percent",
            "rating in percent",
            "channel id",
            "program id",
            "time of day",
            "channel id",
            "program id",
            "date",
            "share in percent"
        ],
        "template_feedback": "order the results descending .",
        "positive_example": "the order should be of descending ."
    },
    {
        "db_id": "program_share",
        "table_names": [
            "program",
            "channel",
            "broadcast",
            "broadcast share"
        ],
        "column_names": [
            "program id",
            "name",
            "origin",
            "launch",
            "owner",
            "channel id",
            "name",
            "owner",
            "share in percent",
            "rating in percent",
            "channel id",
            "program id",
            "time of day",
            "channel id",
            "program id",
            "date",
            "share in percent"
        ],
        "template_feedback": "order the results descending .",
        "positive_example": "arrangement must be declining ."
    },
    {
        "db_id": "program_share",
        "table_names": [
            "program",
            "channel",
            "broadcast",
            "broadcast share"
        ],
        "column_names": [
            "program id",
            "name",
            "origin",
            "launch",
            "owner",
            "channel id",
            "name",
            "owner",
            "share in percent",
            "rating in percent",
            "channel id",
            "program id",
            "time of day",
            "channel id",
            "program id",
            "date",
            "share in percent"
        ],
        "template_feedback": "in step 1 , do not use the broadcast table and channel table . in step 2 , find program 's name in place of channel 's name .",
        "positive_example": "make sure to utilize \" program 's name \" ."
    },
    {
        "db_id": "product_catalog",
        "table_names": [
            "attribute definitions",
            "catalogs",
            "catalog structure",
            "catalog contents",
            "catalog contents additional attributes"
        ],
        "column_names": [
            "attribute id",
            "attribute name",
            "attribute data type",
            "catalog id",
            "catalog name",
            "catalog publisher",
            "date of publication",
            "date of latest revision",
            "catalog level number",
            "catalog id",
            "catalog level name",
            "catalog entry id",
            "catalog level number",
            "parent entry id",
            "previous entry id",
            "next entry id",
            "catalog entry name",
            "product stock number",
            "price in dollars",
            "price in euros",
            "price in pounds",
            "capacity",
            "length",
            "height",
            "width",
            "catalog entry id",
            "catalog level number",
            "attribute id",
            "attribute value"
        ],
        "template_feedback": "additionally use the information from the catalog contents additional attributes table besides the attribute definitions table . additionally make sure that attribute value equals 0 .",
        "positive_example": "make sure attribute value equals 0 ."
    },
    {
        "db_id": "product_catalog",
        "table_names": [
            "attribute definitions",
            "catalogs",
            "catalog structure",
            "catalog contents",
            "catalog contents additional attributes"
        ],
        "column_names": [
            "attribute id",
            "attribute name",
            "attribute data type",
            "catalog id",
            "catalog name",
            "catalog publisher",
            "date of publication",
            "date of latest revision",
            "catalog level number",
            "catalog id",
            "catalog level name",
            "catalog entry id",
            "catalog level number",
            "parent entry id",
            "previous entry id",
            "next entry id",
            "catalog entry name",
            "product stock number",
            "price in dollars",
            "price in euros",
            "price in pounds",
            "capacity",
            "length",
            "height",
            "width",
            "catalog entry id",
            "catalog level number",
            "attribute id",
            "attribute value"
        ],
        "template_feedback": "additionally use the information from the catalog contents additional attributes table besides the attribute definitions table . additionally make sure that attribute value equals 0 .",
        "positive_example": "ascertain that attribute 's value is 0 ."
    },
    {
        "db_id": "department_store",
        "table_names": [
            "addresses",
            "staff",
            "suppliers",
            "department store chain",
            "customers",
            "products",
            "supplier addresses",
            "customer addresses",
            "customer orders",
            "department stores",
            "departments",
            "order items",
            "product suppliers",
            "staff department assignments"
        ],
        "column_names": [
            "address id",
            "address details",
            "staff id",
            "staff gender",
            "staff name",
            "supplier id",
            "supplier name",
            "supplier phone",
            "department store chain id",
            "department store chain name",
            "customer id",
            "payment method code",
            "customer code",
            "customer name",
            "customer address",
            "customer phone",
            "customer email",
            "product id",
            "product type code",
            "product name",
            "product price",
            "supplier id",
            "address id",
            "date from",
            "date to",
            "customer id",
            "address id",
            "date from",
            "date to",
            "order id",
            "customer id",
            "order status code",
            "order date",
            "department store id",
            "department store chain id",
            "store name",
            "store address",
            "store phone",
            "store email",
            "department id",
            "department store id",
            "department name",
            "order item id",
            "order id",
            "product id",
            "product id",
            "supplier id",
            "date supplied from",
            "date supplied to",
            "total amount purchased",
            "total value purchased",
            "staff id",
            "department id",
            "date assigned from",
            "job title code",
            "date assigned to"
        ],
        "template_feedback": "in step 1 , additionally use the information from the customer orders table besides the customers table . do not find for each value of customers 's customer id . in step 2 , additionally make sure that order status code equals new . in step 3 , additionally use the information from the customer orders table besides the customers table . do not find for each value of customers 's customer id . in step 4 , additionally make sure that order status code equals pending .",
        "positive_example": "search customers ' supplier name and product type code for which date assigned from equals new and pending both ."
    },
    {
        "db_id": "department_store",
        "table_names": [
            "addresses",
            "staff",
            "suppliers",
            "department store chain",
            "customers",
            "products",
            "supplier addresses",
            "customer addresses",
            "customer orders",
            "department stores",
            "departments",
            "order items",
            "product suppliers",
            "staff department assignments"
        ],
        "column_names": [
            "address id",
            "address details",
            "staff id",
            "staff gender",
            "staff name",
            "supplier id",
            "supplier name",
            "supplier phone",
            "department store chain id",
            "department store chain name",
            "customer id",
            "payment method code",
            "customer code",
            "customer name",
            "customer address",
            "customer phone",
            "customer email",
            "product id",
            "product type code",
            "product name",
            "product price",
            "supplier id",
            "address id",
            "date from",
            "date to",
            "customer id",
            "address id",
            "date from",
            "date to",
            "order id",
            "customer id",
            "order status code",
            "order date",
            "department store id",
            "department store chain id",
            "store name",
            "store address",
            "store phone",
            "store email",
            "department id",
            "department store id",
            "department name",
            "order item id",
            "order id",
            "product id",
            "product id",
            "supplier id",
            "date supplied from",
            "date supplied to",
            "total amount purchased",
            "total value purchased",
            "staff id",
            "department id",
            "date assigned from",
            "job title code",
            "date assigned to"
        ],
        "template_feedback": "in step 1 , additionally use the information from the customer orders table besides the customers table . do not find for each value of customers 's customer id . in step 2 , additionally make sure that order status code equals new . in step 3 , additionally use the information from the customer orders table besides the customers table . do not find for each value of customers 's customer id . in step 4 , additionally make sure that order status code equals pending .",
        "positive_example": "you need to fetch both customer name and customer address for new and pending orders ."
    },
    {
        "db_id": "dorm_1",
        "table_names": [
            "student",
            "dorm",
            "dorm amenity",
            "has amenity",
            "lives in"
        ],
        "column_names": [
            "student id",
            "last name",
            "first name",
            "age",
            "sex",
            "major",
            "advisor",
            "city code",
            "dorm id",
            "dorm name",
            "student capacity",
            "gender",
            "amenity id",
            "amenity name",
            "dorm id",
            "amenity id",
            "student id",
            "dorm id",
            "room number"
        ],
        "template_feedback": "additionally use the information from the dorm table and lives in table besides the student table . consider the dorm name equals smith hall conditions in place of the city code equals smith hall conditions .",
        "positive_example": "first name should be smith hall , not student id ."
    },
    {
        "db_id": "dorm_1",
        "table_names": [
            "student",
            "dorm",
            "dorm amenity",
            "has amenity",
            "lives in"
        ],
        "column_names": [
            "student id",
            "last name",
            "first name",
            "age",
            "sex",
            "major",
            "advisor",
            "city code",
            "dorm id",
            "dorm name",
            "student capacity",
            "gender",
            "amenity id",
            "amenity name",
            "dorm id",
            "amenity id",
            "student id",
            "dorm id",
            "room number"
        ],
        "template_feedback": "additionally use the information from the dorm table and lives in table besides the student table . consider the dorm name equals smith hall conditions in place of the city code equals smith hall conditions .",
        "positive_example": "smith hall should be the first name"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "table_names": [
            "reference payment methods",
            "reference service types",
            "addresses",
            "products",
            "marketing regions",
            "clients",
            "drama workshop groups",
            "performers",
            "customers",
            "stores",
            "bookings",
            "performers in bookings",
            "customer orders",
            "order items",
            "invoices",
            "services",
            "bookings services",
            "invoice items"
        ],
        "column_names": [
            "payment method code",
            "payment method description",
            "service type code",
            "parent service type code",
            "service type description",
            "address id",
            "line 1",
            "line 2",
            "city town",
            "state county",
            "other details",
            "product id",
            "product name",
            "product price",
            "product description",
            "other product service details",
            "marketing region code",
            "marketing region name",
            "marketing region descriptrion",
            "other details",
            "client id",
            "address id",
            "customer email address",
            "customer name",
            "customer phone",
            "other details",
            "workshop group id",
            "address id",
            "currency code",
            "marketing region code",
            "store name",
            "store phone",
            "store email address",
            "other details",
            "performer id",
            "address id",
            "customer name",
            "customer phone",
            "customer email address",
            "other details",
            "customer id",
            "address id",
            "customer name",
            "customer phone",
            "customer email address",
            "other details",
            "store id",
            "address id",
            "marketing region code",
            "store name",
            "store phone",
            "store email address",
            "other details",
            "booking id",
            "customer id",
            "workshop group id",
            "status code",
            "store id",
            "order date",
            "planned delivery date",
            "actual delivery date",
            "other order details",
            "order id",
            "performer id",
            "order id",
            "customer id",
            "store id",
            "order date",
            "planned delivery date",
            "actual delivery date",
            "other order details",
            "order item id",
            "order id",
            "product id",
            "order quantity",
            "other item details",
            "invoice id",
            "order id",
            "payment method code",
            "product id",
            "order quantity",
            "other item details",
            "order item id",
            "service id",
            "service type code",
            "workshop group id",
            "product description",
            "product name",
            "product price",
            "other product service details",
            "order id",
            "product id",
            "invoice item id",
            "invoice id",
            "order id",
            "order item id",
            "product id",
            "order quantity",
            "other item details"
        ],
        "template_feedback": "in step 1 , additionally use the information from the services table besides the reference service types table .",
        "positive_example": "in step 1 replace service type code with service id , drama workshop groups table with service table ."
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "table_names": [
            "reference payment methods",
            "reference service types",
            "addresses",
            "products",
            "marketing regions",
            "clients",
            "drama workshop groups",
            "performers",
            "customers",
            "stores",
            "bookings",
            "performers in bookings",
            "customer orders",
            "order items",
            "invoices",
            "services",
            "bookings services",
            "invoice items"
        ],
        "column_names": [
            "payment method code",
            "payment method description",
            "service type code",
            "parent service type code",
            "service type description",
            "address id",
            "line 1",
            "line 2",
            "city town",
            "state county",
            "other details",
            "product id",
            "product name",
            "product price",
            "product description",
            "other product service details",
            "marketing region code",
            "marketing region name",
            "marketing region descriptrion",
            "other details",
            "client id",
            "address id",
            "customer email address",
            "customer name",
            "customer phone",
            "other details",
            "workshop group id",
            "address id",
            "currency code",
            "marketing region code",
            "store name",
            "store phone",
            "store email address",
            "other details",
            "performer id",
            "address id",
            "customer name",
            "customer phone",
            "customer email address",
            "other details",
            "customer id",
            "address id",
            "customer name",
            "customer phone",
            "customer email address",
            "other details",
            "store id",
            "address id",
            "marketing region code",
            "store name",
            "store phone",
            "store email address",
            "other details",
            "booking id",
            "customer id",
            "workshop group id",
            "status code",
            "store id",
            "order date",
            "planned delivery date",
            "actual delivery date",
            "other order details",
            "order id",
            "performer id",
            "order id",
            "customer id",
            "store id",
            "order date",
            "planned delivery date",
            "actual delivery date",
            "other order details",
            "order item id",
            "order id",
            "product id",
            "order quantity",
            "other item details",
            "invoice id",
            "order id",
            "payment method code",
            "product id",
            "order quantity",
            "other item details",
            "order item id",
            "service id",
            "service type code",
            "workshop group id",
            "product description",
            "product name",
            "product price",
            "other product service details",
            "order id",
            "product id",
            "invoice item id",
            "invoice id",
            "order id",
            "order item id",
            "product id",
            "order quantity",
            "other item details"
        ],
        "template_feedback": "in step 1 , additionally use the information from the services table besides the reference service types table .",
        "positive_example": "exchange service type code with service id and reference service types table with service table in step 1 ."
    },
    {
        "db_id": "election",
        "table_names": [
            "county",
            "party",
            "election"
        ],
        "column_names": [
            "county id",
            "county name",
            "population",
            "zip code",
            "party id",
            "year",
            "party",
            "governor",
            "lieutenant governor",
            "comptroller",
            "attorney general",
            "us senate",
            "election id",
            "counties represented",
            "district",
            "delegate",
            "party",
            "first elected",
            "committee"
        ],
        "template_feedback": "in step 1 , additionally use the information from the election table besides the party table . find for each value of election 's party in place of party 's party .",
        "positive_example": "there should be governor , not party in step 1 ."
    },
    {
        "db_id": "election",
        "table_names": [
            "county",
            "party",
            "election"
        ],
        "column_names": [
            "county id",
            "county name",
            "population",
            "zip code",
            "party id",
            "year",
            "party",
            "governor",
            "lieutenant governor",
            "comptroller",
            "attorney general",
            "us senate",
            "election id",
            "counties represented",
            "district",
            "delegate",
            "party",
            "first elected",
            "committee"
        ],
        "template_feedback": "in step 1 , additionally use the information from the election table besides the party table . find for each value of election 's party in place of party 's party .",
        "positive_example": "in step 1 , use governor in behalf of party ."
    },
    {
        "db_id": "storm_record",
        "table_names": [
            "storm",
            "region",
            "affected region"
        ],
        "column_names": [
            "storm id",
            "name",
            "dates active",
            "max speed",
            "damage millions usd",
            "number deaths",
            "region id",
            "region code",
            "region name",
            "region id",
            "storm id",
            "number city affected"
        ],
        "template_feedback": "additionally make sure that number deaths greater than 0 .",
        "positive_example": "check that death number not contains zero ."
    },
    {
        "db_id": "hospital_1",
        "table_names": [
            "physician",
            "department",
            "affiliated with",
            "procedures",
            "trained in",
            "patient",
            "nurse",
            "appointment",
            "medication",
            "prescribes",
            "block",
            "room",
            "on call",
            "stay",
            "undergoes"
        ],
        "column_names": [
            "employee id",
            "name",
            "position",
            "ssn",
            "departmentid",
            "name",
            "head",
            "physician",
            "department",
            "primary affiliation",
            "code",
            "name",
            "cost",
            "physician",
            "treatment",
            "certification date",
            "certification expires",
            "ssn",
            "name",
            "address",
            "phone",
            "insurance id",
            "pcp",
            "employee id",
            "name",
            "position",
            "registered",
            "ssn",
            "appointment id",
            "patient",
            "prep nurse",
            "physician",
            "start",
            "end",
            "examination room",
            "code",
            "name",
            "brand",
            "description",
            "physician",
            "patient",
            "medication",
            "date",
            "appointment",
            "dose",
            "block floor",
            "block code",
            "roomnumber",
            "room type",
            "block floor",
            "block code",
            "unavailable",
            "nurse",
            "block floor",
            "block code",
            "oncall start",
            "oncall end",
            "stay id",
            "patient",
            "room",
            "stay start",
            "stay end",
            "patient",
            "procedures",
            "stay",
            "date undergoes",
            "physician",
            "assisting nurse"
        ],
        "template_feedback": "additionally use the information from the block table besides the room table .",
        "positive_example": "find different room 's block code with number of corresponding rows to each value in room room table ."
    },
    {
        "db_id": "hospital_1",
        "table_names": [
            "physician",
            "department",
            "affiliated with",
            "procedures",
            "trained in",
            "patient",
            "nurse",
            "appointment",
            "medication",
            "prescribes",
            "block",
            "room",
            "on call",
            "stay",
            "undergoes"
        ],
        "column_names": [
            "employee id",
            "name",
            "position",
            "ssn",
            "departmentid",
            "name",
            "head",
            "physician",
            "department",
            "primary affiliation",
            "code",
            "name",
            "cost",
            "physician",
            "treatment",
            "certification date",
            "certification expires",
            "ssn",
            "name",
            "address",
            "phone",
            "insurance id",
            "pcp",
            "employee id",
            "name",
            "position",
            "registered",
            "ssn",
            "appointment id",
            "patient",
            "prep nurse",
            "physician",
            "start",
            "end",
            "examination room",
            "code",
            "name",
            "brand",
            "description",
            "physician",
            "patient",
            "medication",
            "date",
            "appointment",
            "dose",
            "block floor",
            "block code",
            "roomnumber",
            "room type",
            "block floor",
            "block code",
            "unavailable",
            "nurse",
            "block floor",
            "block code",
            "oncall start",
            "oncall end",
            "stay id",
            "patient",
            "room",
            "stay start",
            "stay end",
            "patient",
            "procedures",
            "stay",
            "date undergoes",
            "physician",
            "assisting nurse"
        ],
        "template_feedback": "additionally use the information from the block table besides the room table .",
        "positive_example": "you need to determine the block code 's room number that relates to the each value of rows from the room table ."
    },
    {
        "db_id": "products_gen_characteristics",
        "table_names": [
            "reference characteristic types",
            "reference colors",
            "reference product categories",
            "characteristics",
            "products",
            "product characteristics"
        ],
        "column_names": [
            "characteristic type code",
            "characteristic type description",
            "color code",
            "color description",
            "product category code",
            "product category description",
            "unit of measure",
            "characteristic id",
            "characteristic type code",
            "characteristic data type",
            "characteristic name",
            "other characteristic details",
            "product id",
            "color code",
            "product category code",
            "product name",
            "typical buying price",
            "typical selling price",
            "product description",
            "other product details",
            "product id",
            "characteristic id",
            "product characteristic value"
        ],
        "template_feedback": "in step 1 , additionally use the information from the reference colors table . in step 2 , consider the characteristic name equals fast and color description equals red conditions in place of the characteristic name equals red conditions .",
        "positive_example": "you have to use product characteristics table and description of color for fast should be name of characteristic , omit ref colors and its name ."
    },
    {
        "db_id": "soccer_2",
        "table_names": [
            "college",
            "player",
            "tryout"
        ],
        "column_names": [
            "college name",
            "state",
            "enrollment",
            "player id",
            "player name",
            "yes card",
            "training hours",
            "player id",
            "college name",
            "player position",
            "decision"
        ],
        "template_feedback": "use player table and tryout table in place of college table . find player name in place of college 's college name . order the results by player name in place of college 's college name .",
        "positive_example": "from the player table search for name of college in ascendant manner where player id should be available in tryout table ."
    },
    {
        "db_id": "party_host",
        "table_names": [
            "party",
            "host",
            "party host"
        ],
        "column_names": [
            "party id",
            "party theme",
            "location",
            "first year",
            "last year",
            "number of hosts",
            "host id",
            "name",
            "nationality",
            "age",
            "party id",
            "host id",
            "is main in charge"
        ],
        "template_feedback": "find number of rows in place of number of different party theme .",
        "positive_example": "find the number of rows in party table ."
    },
    {
        "db_id": "party_host",
        "table_names": [
            "party",
            "host",
            "party host"
        ],
        "column_names": [
            "party id",
            "party theme",
            "location",
            "first year",
            "last year",
            "number of hosts",
            "host id",
            "name",
            "nationality",
            "age",
            "party id",
            "host id",
            "is main in charge"
        ],
        "template_feedback": "find number of rows in place of number of different party theme .",
        "positive_example": "for party table , could you give me the row 's total number ."
    },
    {
        "db_id": "ship_1",
        "table_names": [
            "captain",
            "ship"
        ],
        "column_names": [
            "captain id",
            "name",
            "ship id",
            "age",
            "class",
            "rank",
            "ship id",
            "name",
            "type",
            "built year",
            "class",
            "flag"
        ],
        "template_feedback": "use ship table in place of captain table .",
        "positive_example": "swap captain table with ship table ."
    },
    {
        "db_id": "hospital_1",
        "table_names": [
            "physician",
            "department",
            "affiliated with",
            "procedures",
            "trained in",
            "patient",
            "nurse",
            "appointment",
            "medication",
            "prescribes",
            "block",
            "room",
            "on call",
            "stay",
            "undergoes"
        ],
        "column_names": [
            "employee id",
            "name",
            "position",
            "ssn",
            "departmentid",
            "name",
            "head",
            "physician",
            "department",
            "primary affiliation",
            "code",
            "name",
            "cost",
            "physician",
            "treatment",
            "certification date",
            "certification expires",
            "ssn",
            "name",
            "address",
            "phone",
            "insurance id",
            "pcp",
            "employee id",
            "name",
            "position",
            "registered",
            "ssn",
            "appointment id",
            "patient",
            "prep nurse",
            "physician",
            "start",
            "end",
            "examination room",
            "code",
            "name",
            "brand",
            "description",
            "physician",
            "patient",
            "medication",
            "date",
            "appointment",
            "dose",
            "block floor",
            "block code",
            "roomnumber",
            "room type",
            "block floor",
            "block code",
            "unavailable",
            "nurse",
            "block floor",
            "block code",
            "oncall start",
            "oncall end",
            "stay id",
            "patient",
            "room",
            "stay start",
            "stay end",
            "patient",
            "procedures",
            "stay",
            "date undergoes",
            "physician",
            "assisting nurse"
        ],
        "template_feedback": "additionally use the information from the prescribes table and patient table besides the physician table . find number of patient 's ssn in place of number of rows .",
        "positive_example": "i want the total number of prescription given by physician john dorian ."
    },
    {
        "db_id": "sakila_1",
        "table_names": [
            "actor",
            "address",
            "category",
            "city",
            "country",
            "customer",
            "film",
            "film actor",
            "film category",
            "film text",
            "inventory",
            "language",
            "payment",
            "rental",
            "staff",
            "store"
        ],
        "column_names": [
            "actor id",
            "first name",
            "last name",
            "last update",
            "address id",
            "address",
            "address2",
            "district",
            "city id",
            "postal code",
            "phone",
            "last update",
            "category id",
            "name",
            "last update",
            "city id",
            "city",
            "country id",
            "last update",
            "country id",
            "country",
            "last update",
            "customer id",
            "store id",
            "first name",
            "last name",
            "email",
            "address id",
            "active",
            "create date",
            "last update",
            "film id",
            "title",
            "description",
            "release year",
            "language id",
            "original language id",
            "rental duration",
            "rental rate",
            "length",
            "replacement cost",
            "rating",
            "special features",
            "last update",
            "actor id",
            "film id",
            "last update",
            "film id",
            "category id",
            "last update",
            "film id",
            "title",
            "description",
            "inventory id",
            "film id",
            "store id",
            "last update",
            "language id",
            "name",
            "last update",
            "payment id",
            "customer id",
            "staff id",
            "rental id",
            "amount",
            "payment date",
            "last update",
            "rental id",
            "rental date",
            "inventory id",
            "customer id",
            "return date",
            "staff id",
            "last update",
            "staff id",
            "first name",
            "last name",
            "address id",
            "picture",
            "email",
            "store id",
            "active",
            "username",
            "password",
            "last update",
            "store id",
            "manager staff id",
            "address id",
            "last update"
        ],
        "template_feedback": "in step 1 , additionally use the information from the inventory table besides the film table .",
        "positive_example": "there should be inventory table instead of film table in step 1 ."
    },
    {
        "db_id": "sakila_1",
        "table_names": [
            "actor",
            "address",
            "category",
            "city",
            "country",
            "customer",
            "film",
            "film actor",
            "film category",
            "film text",
            "inventory",
            "language",
            "payment",
            "rental",
            "staff",
            "store"
        ],
        "column_names": [
            "actor id",
            "first name",
            "last name",
            "last update",
            "address id",
            "address",
            "address2",
            "district",
            "city id",
            "postal code",
            "phone",
            "last update",
            "category id",
            "name",
            "last update",
            "city id",
            "city",
            "country id",
            "last update",
            "country id",
            "country",
            "last update",
            "customer id",
            "store id",
            "first name",
            "last name",
            "email",
            "address id",
            "active",
            "create date",
            "last update",
            "film id",
            "title",
            "description",
            "release year",
            "language id",
            "original language id",
            "rental duration",
            "rental rate",
            "length",
            "replacement cost",
            "rating",
            "special features",
            "last update",
            "actor id",
            "film id",
            "last update",
            "film id",
            "category id",
            "last update",
            "film id",
            "title",
            "description",
            "inventory id",
            "film id",
            "store id",
            "last update",
            "language id",
            "name",
            "last update",
            "payment id",
            "customer id",
            "staff id",
            "rental id",
            "amount",
            "payment date",
            "last update",
            "rental id",
            "rental date",
            "inventory id",
            "customer id",
            "return date",
            "staff id",
            "last update",
            "staff id",
            "first name",
            "last name",
            "address id",
            "picture",
            "email",
            "store id",
            "active",
            "username",
            "password",
            "last update",
            "store id",
            "manager staff id",
            "address id",
            "last update"
        ],
        "template_feedback": "in step 1 , additionally use the information from the inventory table besides the film table .",
        "positive_example": "in step 1 , you should swap film table with inventory table ."
    },
    {
        "db_id": "sakila_1",
        "table_names": [
            "actor",
            "address",
            "category",
            "city",
            "country",
            "customer",
            "film",
            "film actor",
            "film category",
            "film text",
            "inventory",
            "language",
            "payment",
            "rental",
            "staff",
            "store"
        ],
        "column_names": [
            "actor id",
            "first name",
            "last name",
            "last update",
            "address id",
            "address",
            "address2",
            "district",
            "city id",
            "postal code",
            "phone",
            "last update",
            "category id",
            "name",
            "last update",
            "city id",
            "city",
            "country id",
            "last update",
            "country id",
            "country",
            "last update",
            "customer id",
            "store id",
            "first name",
            "last name",
            "email",
            "address id",
            "active",
            "create date",
            "last update",
            "film id",
            "title",
            "description",
            "release year",
            "language id",
            "original language id",
            "rental duration",
            "rental rate",
            "length",
            "replacement cost",
            "rating",
            "special features",
            "last update",
            "actor id",
            "film id",
            "last update",
            "film id",
            "category id",
            "last update",
            "film id",
            "title",
            "description",
            "inventory id",
            "film id",
            "store id",
            "last update",
            "language id",
            "name",
            "last update",
            "payment id",
            "customer id",
            "staff id",
            "rental id",
            "amount",
            "payment date",
            "last update",
            "rental id",
            "rental date",
            "inventory id",
            "customer id",
            "return date",
            "staff id",
            "last update",
            "staff id",
            "first name",
            "last name",
            "address id",
            "picture",
            "email",
            "store id",
            "active",
            "username",
            "password",
            "last update",
            "store id",
            "manager staff id",
            "address id",
            "last update"
        ],
        "template_feedback": "additionally use the information from the city table besides the country table .",
        "positive_example": "you have to calculate number of cities from the country of australia ."
    },
    {
        "db_id": "hospital_1",
        "table_names": [
            "physician",
            "department",
            "affiliated with",
            "procedures",
            "trained in",
            "patient",
            "nurse",
            "appointment",
            "medication",
            "prescribes",
            "block",
            "room",
            "on call",
            "stay",
            "undergoes"
        ],
        "column_names": [
            "employee id",
            "name",
            "position",
            "ssn",
            "departmentid",
            "name",
            "head",
            "physician",
            "department",
            "primary affiliation",
            "code",
            "name",
            "cost",
            "physician",
            "treatment",
            "certification date",
            "certification expires",
            "ssn",
            "name",
            "address",
            "phone",
            "insurance id",
            "pcp",
            "employee id",
            "name",
            "position",
            "registered",
            "ssn",
            "appointment id",
            "patient",
            "prep nurse",
            "physician",
            "start",
            "end",
            "examination room",
            "code",
            "name",
            "brand",
            "description",
            "physician",
            "patient",
            "medication",
            "date",
            "appointment",
            "dose",
            "block floor",
            "block code",
            "roomnumber",
            "room type",
            "block floor",
            "block code",
            "unavailable",
            "nurse",
            "block floor",
            "block code",
            "oncall start",
            "oncall end",
            "stay id",
            "patient",
            "room",
            "stay start",
            "stay end",
            "patient",
            "procedures",
            "stay",
            "date undergoes",
            "physician",
            "assisting nurse"
        ],
        "template_feedback": "additionally use the information from the appointment table besides the physician table .",
        "positive_example": "make sure physicians have took any employee id ."
    },
    {
        "db_id": "hospital_1",
        "table_names": [
            "physician",
            "department",
            "affiliated with",
            "procedures",
            "trained in",
            "patient",
            "nurse",
            "appointment",
            "medication",
            "prescribes",
            "block",
            "room",
            "on call",
            "stay",
            "undergoes"
        ],
        "column_names": [
            "employee id",
            "name",
            "position",
            "ssn",
            "departmentid",
            "name",
            "head",
            "physician",
            "department",
            "primary affiliation",
            "code",
            "name",
            "cost",
            "physician",
            "treatment",
            "certification date",
            "certification expires",
            "ssn",
            "name",
            "address",
            "phone",
            "insurance id",
            "pcp",
            "employee id",
            "name",
            "position",
            "registered",
            "ssn",
            "appointment id",
            "patient",
            "prep nurse",
            "physician",
            "start",
            "end",
            "examination room",
            "code",
            "name",
            "brand",
            "description",
            "physician",
            "patient",
            "medication",
            "date",
            "appointment",
            "dose",
            "block floor",
            "block code",
            "roomnumber",
            "room type",
            "block floor",
            "block code",
            "unavailable",
            "nurse",
            "block floor",
            "block code",
            "oncall start",
            "oncall end",
            "stay id",
            "patient",
            "room",
            "stay start",
            "stay end",
            "patient",
            "procedures",
            "stay",
            "date undergoes",
            "physician",
            "assisting nurse"
        ],
        "template_feedback": "additionally use the information from the appointment table besides the physician table .",
        "positive_example": "check for physicians have taken any appointment ."
    },
    {
        "db_id": "hospital_1",
        "table_names": [
            "physician",
            "department",
            "affiliated with",
            "procedures",
            "trained in",
            "patient",
            "nurse",
            "appointment",
            "medication",
            "prescribes",
            "block",
            "room",
            "on call",
            "stay",
            "undergoes"
        ],
        "column_names": [
            "employee id",
            "name",
            "position",
            "ssn",
            "departmentid",
            "name",
            "head",
            "physician",
            "department",
            "primary affiliation",
            "code",
            "name",
            "cost",
            "physician",
            "treatment",
            "certification date",
            "certification expires",
            "ssn",
            "name",
            "address",
            "phone",
            "insurance id",
            "pcp",
            "employee id",
            "name",
            "position",
            "registered",
            "ssn",
            "appointment id",
            "patient",
            "prep nurse",
            "physician",
            "start",
            "end",
            "examination room",
            "code",
            "name",
            "brand",
            "description",
            "physician",
            "patient",
            "medication",
            "date",
            "appointment",
            "dose",
            "block floor",
            "block code",
            "roomnumber",
            "room type",
            "block floor",
            "block code",
            "unavailable",
            "nurse",
            "block floor",
            "block code",
            "oncall start",
            "oncall end",
            "stay id",
            "patient",
            "room",
            "stay start",
            "stay end",
            "patient",
            "procedures",
            "stay",
            "date undergoes",
            "physician",
            "assisting nurse"
        ],
        "template_feedback": "additionally use the information from the appointment table besides the physician table .",
        "positive_example": "need to confirm that roomnumber took any employee id of patients ."
    },
    {
        "db_id": "hospital_1",
        "table_names": [
            "physician",
            "department",
            "affiliated with",
            "procedures",
            "trained in",
            "patient",
            "nurse",
            "appointment",
            "medication",
            "prescribes",
            "block",
            "room",
            "on call",
            "stay",
            "undergoes"
        ],
        "column_names": [
            "employee id",
            "name",
            "position",
            "ssn",
            "departmentid",
            "name",
            "head",
            "physician",
            "department",
            "primary affiliation",
            "code",
            "name",
            "cost",
            "physician",
            "treatment",
            "certification date",
            "certification expires",
            "ssn",
            "name",
            "address",
            "phone",
            "insurance id",
            "pcp",
            "employee id",
            "name",
            "position",
            "registered",
            "ssn",
            "appointment id",
            "patient",
            "prep nurse",
            "physician",
            "start",
            "end",
            "examination room",
            "code",
            "name",
            "brand",
            "description",
            "physician",
            "patient",
            "medication",
            "date",
            "appointment",
            "dose",
            "block floor",
            "block code",
            "roomnumber",
            "room type",
            "block floor",
            "block code",
            "unavailable",
            "nurse",
            "block floor",
            "block code",
            "oncall start",
            "oncall end",
            "stay id",
            "patient",
            "room",
            "stay start",
            "stay end",
            "patient",
            "procedures",
            "stay",
            "date undergoes",
            "physician",
            "assisting nurse"
        ],
        "template_feedback": "additionally use the information from the appointment table besides the physician table .",
        "positive_example": "check that physician took any appointment of patients ."
    },
    {
        "db_id": "university_basketball",
        "table_names": [
            "basketball match",
            "university"
        ],
        "column_names": [
            "team id",
            "school id",
            "team name",
            "acc regular season",
            "acc percent",
            "acc home",
            "acc road",
            "all games",
            "all games percent",
            "all home",
            "all road",
            "all neutral",
            "school id",
            "school",
            "location",
            "founded",
            "affiliation",
            "enrollment",
            "nickname",
            "primary conference"
        ],
        "template_feedback": "in step 2 , additionally use the information from the basketball match table besides the university table . find team name in place of nickname .",
        "positive_example": "you should use basketball team 's name from the match table ."
    },
    {
        "db_id": "department_store",
        "table_names": [
            "addresses",
            "staff",
            "suppliers",
            "department store chain",
            "customers",
            "products",
            "supplier addresses",
            "customer addresses",
            "customer orders",
            "department stores",
            "departments",
            "order items",
            "product suppliers",
            "staff department assignments"
        ],
        "column_names": [
            "address id",
            "address details",
            "staff id",
            "staff gender",
            "staff name",
            "supplier id",
            "supplier name",
            "supplier phone",
            "department store chain id",
            "department store chain name",
            "customer id",
            "payment method code",
            "customer code",
            "customer name",
            "customer address",
            "customer phone",
            "customer email",
            "product id",
            "product type code",
            "product name",
            "product price",
            "supplier id",
            "address id",
            "date from",
            "date to",
            "customer id",
            "address id",
            "date from",
            "date to",
            "order id",
            "customer id",
            "order status code",
            "order date",
            "department store id",
            "department store chain id",
            "store name",
            "store address",
            "store phone",
            "store email",
            "department id",
            "department store id",
            "department name",
            "order item id",
            "order id",
            "product id",
            "product id",
            "supplier id",
            "date supplied from",
            "date supplied to",
            "total amount purchased",
            "total value purchased",
            "staff id",
            "department id",
            "date assigned from",
            "job title code",
            "date assigned to"
        ],
        "template_feedback": "in step 1 , additionally use the information from the staff department assignments table besides the staff table . do not find for each value of staff 's staff id . in step 2 , order the results by date assigned to minus date assigned from in place of number of rows .",
        "positive_example": "in step 1 find difference between department store id and customer address ."
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "table_names": [
            "reference payment methods",
            "reference service types",
            "addresses",
            "products",
            "marketing regions",
            "clients",
            "drama workshop groups",
            "performers",
            "customers",
            "stores",
            "bookings",
            "performers in bookings",
            "customer orders",
            "order items",
            "invoices",
            "services",
            "bookings services",
            "invoice items"
        ],
        "column_names": [
            "payment method code",
            "payment method description",
            "service type code",
            "parent service type code",
            "service type description",
            "address id",
            "line 1",
            "line 2",
            "city town",
            "state county",
            "other details",
            "product id",
            "product name",
            "product price",
            "product description",
            "other product service details",
            "marketing region code",
            "marketing region name",
            "marketing region descriptrion",
            "other details",
            "client id",
            "address id",
            "customer email address",
            "customer name",
            "customer phone",
            "other details",
            "workshop group id",
            "address id",
            "currency code",
            "marketing region code",
            "store name",
            "store phone",
            "store email address",
            "other details",
            "performer id",
            "address id",
            "customer name",
            "customer phone",
            "customer email address",
            "other details",
            "customer id",
            "address id",
            "customer name",
            "customer phone",
            "customer email address",
            "other details",
            "store id",
            "address id",
            "marketing region code",
            "store name",
            "store phone",
            "store email address",
            "other details",
            "booking id",
            "customer id",
            "workshop group id",
            "status code",
            "store id",
            "order date",
            "planned delivery date",
            "actual delivery date",
            "other order details",
            "order id",
            "performer id",
            "order id",
            "customer id",
            "store id",
            "order date",
            "planned delivery date",
            "actual delivery date",
            "other order details",
            "order item id",
            "order id",
            "product id",
            "order quantity",
            "other item details",
            "invoice id",
            "order id",
            "payment method code",
            "product id",
            "order quantity",
            "other item details",
            "order item id",
            "service id",
            "service type code",
            "workshop group id",
            "product description",
            "product name",
            "product price",
            "other product service details",
            "order id",
            "product id",
            "invoice item id",
            "invoice id",
            "order id",
            "order item id",
            "product id",
            "order quantity",
            "other item details"
        ],
        "template_feedback": "in step 1 , do not use the invoice items table . in step 2 , find average invoices 's order quantity in place of average invoice items 's order quantity .",
        "positive_example": "the required parameter is invoices ' order quantity , not invoice items 's order quantity in step 2 ."
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "table_names": [
            "reference payment methods",
            "reference service types",
            "addresses",
            "products",
            "marketing regions",
            "clients",
            "drama workshop groups",
            "performers",
            "customers",
            "stores",
            "bookings",
            "performers in bookings",
            "customer orders",
            "order items",
            "invoices",
            "services",
            "bookings services",
            "invoice items"
        ],
        "column_names": [
            "payment method code",
            "payment method description",
            "service type code",
            "parent service type code",
            "service type description",
            "address id",
            "line 1",
            "line 2",
            "city town",
            "state county",
            "other details",
            "product id",
            "product name",
            "product price",
            "product description",
            "other product service details",
            "marketing region code",
            "marketing region name",
            "marketing region descriptrion",
            "other details",
            "client id",
            "address id",
            "customer email address",
            "customer name",
            "customer phone",
            "other details",
            "workshop group id",
            "address id",
            "currency code",
            "marketing region code",
            "store name",
            "store phone",
            "store email address",
            "other details",
            "performer id",
            "address id",
            "customer name",
            "customer phone",
            "customer email address",
            "other details",
            "customer id",
            "address id",
            "customer name",
            "customer phone",
            "customer email address",
            "other details",
            "store id",
            "address id",
            "marketing region code",
            "store name",
            "store phone",
            "store email address",
            "other details",
            "booking id",
            "customer id",
            "workshop group id",
            "status code",
            "store id",
            "order date",
            "planned delivery date",
            "actual delivery date",
            "other order details",
            "order id",
            "performer id",
            "order id",
            "customer id",
            "store id",
            "order date",
            "planned delivery date",
            "actual delivery date",
            "other order details",
            "order item id",
            "order id",
            "product id",
            "order quantity",
            "other item details",
            "invoice id",
            "order id",
            "payment method code",
            "product id",
            "order quantity",
            "other item details",
            "order item id",
            "service id",
            "service type code",
            "workshop group id",
            "product description",
            "product name",
            "product price",
            "other product service details",
            "order id",
            "product id",
            "invoice item id",
            "invoice id",
            "order id",
            "order item id",
            "product id",
            "order quantity",
            "other item details"
        ],
        "template_feedback": "in step 1 , do not use the invoice items table . in step 2 , find average invoices 's order quantity in place of average invoice items 's order quantity .",
        "positive_example": "in step 2 , you should use the order quantity of invoices ' ."
    },
    {
        "db_id": "student_assessment",
        "table_names": [
            "addresses",
            "people",
            "students",
            "courses",
            "people addresses",
            "student course registrations",
            "student course attendance",
            "candidates",
            "candidate assessments"
        ],
        "column_names": [
            "address id",
            "line 1",
            "line 2",
            "city",
            "zip postcode",
            "state province county",
            "country",
            "person id",
            "first name",
            "middle name",
            "last name",
            "cell mobile number",
            "email address",
            "login name",
            "password",
            "student id",
            "student details",
            "course id",
            "course name",
            "course description",
            "other details",
            "person address id",
            "person id",
            "address id",
            "date from",
            "date to",
            "student id",
            "course id",
            "registration date",
            "student id",
            "course id",
            "date of attendance",
            "candidate id",
            "candidate details",
            "candidate id",
            "qualification",
            "assessment date",
            "asessment outcome code"
        ],
        "template_feedback": "additionally use the information from the people addresses table and students table besides the addresses table .",
        "positive_example": "make sure you search city only for the pupils ."
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "table_names": [
            "medicine",
            "enzyme",
            "medicine enzyme interaction"
        ],
        "column_names": [
            "id",
            "name",
            "trade name",
            "fda approved",
            "id",
            "name",
            "location",
            "product",
            "chromosome",
            "omim",
            "porphyria",
            "enzyme id",
            "medicine id",
            "interaction type"
        ],
        "template_feedback": "use medicine table and medicine enzyme interaction table in place of enzyme table . find for each value of medicine 's id . find medicine 's id , fda approved , and medicine 's name in place of enzyme 's id , enzyme 's name , and porphyria . order the results by number of rows in place of porphyria .",
        "positive_example": "i want the medicine id , name and fda approval status in the order descending of medicine id and also make sure that medicine has approval from fda ."
    },
    {
        "db_id": "hospital_1",
        "table_names": [
            "physician",
            "department",
            "affiliated with",
            "procedures",
            "trained in",
            "patient",
            "nurse",
            "appointment",
            "medication",
            "prescribes",
            "block",
            "room",
            "on call",
            "stay",
            "undergoes"
        ],
        "column_names": [
            "employee id",
            "name",
            "position",
            "ssn",
            "departmentid",
            "name",
            "head",
            "physician",
            "department",
            "primary affiliation",
            "code",
            "name",
            "cost",
            "physician",
            "treatment",
            "certification date",
            "certification expires",
            "ssn",
            "name",
            "address",
            "phone",
            "insurance id",
            "pcp",
            "employee id",
            "name",
            "position",
            "registered",
            "ssn",
            "appointment id",
            "patient",
            "prep nurse",
            "physician",
            "start",
            "end",
            "examination room",
            "code",
            "name",
            "brand",
            "description",
            "physician",
            "patient",
            "medication",
            "date",
            "appointment",
            "dose",
            "block floor",
            "block code",
            "roomnumber",
            "room type",
            "block floor",
            "block code",
            "unavailable",
            "nurse",
            "block floor",
            "block code",
            "oncall start",
            "oncall end",
            "stay id",
            "patient",
            "room",
            "stay start",
            "stay end",
            "patient",
            "procedures",
            "stay",
            "date undergoes",
            "physician",
            "assisting nurse"
        ],
        "template_feedback": "in step 1 , do not use the appointment table and physician table . in step 2 , order the results by nurse 's name in place of physician 's name .",
        "positive_example": "in step 2 , i want name of carer ."
    },
    {
        "db_id": "product_catalog",
        "table_names": [
            "attribute definitions",
            "catalogs",
            "catalog structure",
            "catalog contents",
            "catalog contents additional attributes"
        ],
        "column_names": [
            "attribute id",
            "attribute name",
            "attribute data type",
            "catalog id",
            "catalog name",
            "catalog publisher",
            "date of publication",
            "date of latest revision",
            "catalog level number",
            "catalog id",
            "catalog level name",
            "catalog entry id",
            "catalog level number",
            "parent entry id",
            "previous entry id",
            "next entry id",
            "catalog entry name",
            "product stock number",
            "price in dollars",
            "price in euros",
            "price in pounds",
            "capacity",
            "length",
            "height",
            "width",
            "catalog entry id",
            "catalog level number",
            "attribute id",
            "attribute value"
        ],
        "template_feedback": "in step 1 , find for value of date of latest revision in place of catalog name . in step 2 , find date of latest revision in place of date of publication .",
        "positive_example": "you should use catalog 's latest revision date instead of it 's name ."
    },
    {
        "db_id": "protein_institute",
        "table_names": [
            "building",
            "institution",
            "protein"
        ],
        "column_names": [
            "building id",
            "name",
            "street address",
            "years as tallest",
            "height feet",
            "floors",
            "institution id",
            "institution",
            "location",
            "founded",
            "type",
            "enrollment",
            "team",
            "primary conference",
            "building id",
            "common name",
            "protein name",
            "divergence from human lineage",
            "accession number",
            "sequence length",
            "sequence identity to human protein",
            "institution id"
        ],
        "template_feedback": "additionally use the information from the institution table besides the protein table . find institution in place of common name .",
        "positive_example": "i want institution from institution table ."
    },
    {
        "db_id": "machine_repair",
        "table_names": [
            "repair",
            "machine",
            "technician",
            "repair assignment"
        ],
        "column_names": [
            "repair id",
            "name",
            "launch date",
            "notes",
            "machine id",
            "making year",
            "class",
            "team",
            "machine series",
            "value points",
            "quality rank",
            "technician id",
            "name",
            "team",
            "starting year",
            "age",
            "technician id",
            "repair id",
            "machine id"
        ],
        "template_feedback": "use technician table in place of repair table .",
        "positive_example": "you should only use the technician table ."
    },
    {
        "db_id": "dorm_1",
        "table_names": [
            "student",
            "dorm",
            "dorm amenity",
            "has amenity",
            "lives in"
        ],
        "column_names": [
            "student id",
            "last name",
            "first name",
            "age",
            "sex",
            "major",
            "advisor",
            "city code",
            "dorm id",
            "dorm name",
            "student capacity",
            "gender",
            "amenity id",
            "amenity name",
            "dorm id",
            "amenity id",
            "student id",
            "dorm id",
            "room number"
        ],
        "template_feedback": "in step 2 , additionally find number of rows .",
        "positive_example": "for each city code need to find average age where student 's sex equals m ."
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "table_names": [
            "reference document types",
            "roles",
            "addresses",
            "reference document status",
            "reference shipping agents",
            "documents",
            "employees",
            "document drafts",
            "draft copies",
            "circulation history",
            "documents mailed"
        ],
        "column_names": [
            "document type code",
            "document type description",
            "role code",
            "role description",
            "address id",
            "address details",
            "document status code",
            "document status description",
            "shipping agent code",
            "shipping agent name",
            "shipping agent description",
            "document id",
            "document status code",
            "document type code",
            "shipping agent code",
            "receipt date",
            "receipt number",
            "other details",
            "employee id",
            "role code",
            "employee name",
            "other details",
            "document id",
            "draft number",
            "draft details",
            "document id",
            "draft number",
            "copy number",
            "document id",
            "draft number",
            "copy number",
            "employee id",
            "document id",
            "mailed to address id",
            "mailing date"
        ],
        "template_feedback": "in step 3 , find number of document id in place of number of rows . order the results by number of document id in place of number of rows .",
        "positive_example": "use reference shipping agents shipping agent name on behalf of documents 's shipping agent code in step 3 ."
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "table_names": [
            "reference document types",
            "roles",
            "addresses",
            "reference document status",
            "reference shipping agents",
            "documents",
            "employees",
            "document drafts",
            "draft copies",
            "circulation history",
            "documents mailed"
        ],
        "column_names": [
            "document type code",
            "document type description",
            "role code",
            "role description",
            "address id",
            "address details",
            "document status code",
            "document status description",
            "shipping agent code",
            "shipping agent name",
            "shipping agent description",
            "document id",
            "document status code",
            "document type code",
            "shipping agent code",
            "receipt date",
            "receipt number",
            "other details",
            "employee id",
            "role code",
            "employee name",
            "other details",
            "document id",
            "draft number",
            "draft details",
            "document id",
            "draft number",
            "copy number",
            "document id",
            "draft number",
            "copy number",
            "employee id",
            "document id",
            "mailed to address id",
            "mailing date"
        ],
        "template_feedback": "in step 3 , find number of document id in place of number of rows . order the results by number of document id in place of number of rows .",
        "positive_example": "you need to consider the name of shipping agent from shipping agents table in step 3 ."
    },
    {
        "db_id": "ship_mission",
        "table_names": [
            "mission",
            "ship"
        ],
        "column_names": [
            "mission id",
            "ship id",
            "code",
            "launched year",
            "location",
            "speed knots",
            "fate",
            "ship id",
            "name",
            "type",
            "nationality",
            "tonnage"
        ],
        "template_feedback": "use ship table in place of mission table .",
        "positive_example": "exchange mission table with ship table ."
    },
    {
        "db_id": "ship_mission",
        "table_names": [
            "mission",
            "ship"
        ],
        "column_names": [
            "mission id",
            "ship id",
            "code",
            "launched year",
            "location",
            "speed knots",
            "fate",
            "ship id",
            "name",
            "type",
            "nationality",
            "tonnage"
        ],
        "template_feedback": "use ship table in place of mission table .",
        "positive_example": "here , the ship table to be swap with mission table ."
    },
    {
        "db_id": "insurance_and_eClaims",
        "table_names": [
            "customers",
            "staff",
            "policies",
            "claim headers",
            "claims documents",
            "claims processing stages",
            "claims processing"
        ],
        "column_names": [
            "customer id",
            "customer details",
            "staff id",
            "staff details",
            "policy id",
            "customer id",
            "policy type code",
            "start date",
            "end date",
            "claim header id",
            "claim status code",
            "claim type code",
            "policy id",
            "date of claim",
            "date of settlement",
            "amount claimed",
            "amount piad",
            "claim id",
            "document type code",
            "created by staff id",
            "created date",
            "claim stage id",
            "next claim stage id",
            "claim status name",
            "claim status description",
            "claim processing id",
            "claim id",
            "claim outcome code",
            "claim stage id",
            "staff id"
        ],
        "template_feedback": "in step 2 , additionally make sure that amount claimed is equals maximum amount claimed claim headers . do not find for each value of customers 's customer id . in step 3 , you should not find the largest of the results . show me all the results .",
        "positive_example": "you need to delete the total claimed amount in step 2 ."
    },
    {
        "db_id": "store_1",
        "table_names": [
            "sqlite sequence",
            "artists",
            "albums",
            "employees",
            "customers",
            "genres",
            "invoices",
            "media types",
            "tracks",
            "invoice lines",
            "playlists",
            "playlist tracks"
        ],
        "column_names": [
            "name",
            "seq",
            "id",
            "name",
            "id",
            "title",
            "artist id",
            "id",
            "last name",
            "first name",
            "title",
            "reports to",
            "birth date",
            "hire date",
            "address",
            "city",
            "state",
            "country",
            "postal code",
            "phone",
            "fax",
            "email",
            "id",
            "first name",
            "last name",
            "company",
            "address",
            "city",
            "state",
            "country",
            "postal code",
            "phone",
            "fax",
            "email",
            "support rep id",
            "id",
            "name",
            "id",
            "customer id",
            "invoice date",
            "billing address",
            "billing city",
            "billing state",
            "billing country",
            "billing postal code",
            "total",
            "id",
            "name",
            "id",
            "name",
            "album id",
            "media type id",
            "genre id",
            "composer",
            "milliseconds",
            "bytes",
            "unit price",
            "id",
            "invoice id",
            "track id",
            "unit price",
            "quantity",
            "id",
            "name",
            "playlist id",
            "track id"
        ],
        "template_feedback": "additionally make sure that name equals fast as a shark . find unit price in place of milliseconds .",
        "positive_example": "you should look for the cost of tracks which is equivalent to fast as a shark ."
    },
    {
        "db_id": "store_1",
        "table_names": [
            "sqlite sequence",
            "artists",
            "albums",
            "employees",
            "customers",
            "genres",
            "invoices",
            "media types",
            "tracks",
            "invoice lines",
            "playlists",
            "playlist tracks"
        ],
        "column_names": [
            "name",
            "seq",
            "id",
            "name",
            "id",
            "title",
            "artist id",
            "id",
            "last name",
            "first name",
            "title",
            "reports to",
            "birth date",
            "hire date",
            "address",
            "city",
            "state",
            "country",
            "postal code",
            "phone",
            "fax",
            "email",
            "id",
            "first name",
            "last name",
            "company",
            "address",
            "city",
            "state",
            "country",
            "postal code",
            "phone",
            "fax",
            "email",
            "support rep id",
            "id",
            "name",
            "id",
            "customer id",
            "invoice date",
            "billing address",
            "billing city",
            "billing state",
            "billing country",
            "billing postal code",
            "total",
            "id",
            "name",
            "id",
            "name",
            "album id",
            "media type id",
            "genre id",
            "composer",
            "milliseconds",
            "bytes",
            "unit price",
            "id",
            "invoice id",
            "track id",
            "unit price",
            "quantity",
            "id",
            "name",
            "playlist id",
            "track id"
        ],
        "template_feedback": "additionally make sure that title like a % .",
        "positive_example": "you need to ensure that subject starts with a ."
    },
    {
        "db_id": "store_1",
        "table_names": [
            "sqlite sequence",
            "artists",
            "albums",
            "employees",
            "customers",
            "genres",
            "invoices",
            "media types",
            "tracks",
            "invoice lines",
            "playlists",
            "playlist tracks"
        ],
        "column_names": [
            "name",
            "seq",
            "id",
            "name",
            "id",
            "title",
            "artist id",
            "id",
            "last name",
            "first name",
            "title",
            "reports to",
            "birth date",
            "hire date",
            "address",
            "city",
            "state",
            "country",
            "postal code",
            "phone",
            "fax",
            "email",
            "id",
            "first name",
            "last name",
            "company",
            "address",
            "city",
            "state",
            "country",
            "postal code",
            "phone",
            "fax",
            "email",
            "support rep id",
            "id",
            "name",
            "id",
            "customer id",
            "invoice date",
            "billing address",
            "billing city",
            "billing state",
            "billing country",
            "billing postal code",
            "total",
            "id",
            "name",
            "id",
            "name",
            "album id",
            "media type id",
            "genre id",
            "composer",
            "milliseconds",
            "bytes",
            "unit price",
            "id",
            "invoice id",
            "track id",
            "unit price",
            "quantity",
            "id",
            "name",
            "playlist id",
            "track id"
        ],
        "template_feedback": "in step 1 , do not use the customers table . in step 2 , consider the employees 's first name equals nancy and employees 's last name equals edwards conditions in place of the customers 's first name equals nancy and customers 's last name equals edwards conditions .",
        "positive_example": "discard the last part and add reports to equal nancy edwards ."
    },
    {
        "db_id": "store_1",
        "table_names": [
            "sqlite sequence",
            "artists",
            "albums",
            "employees",
            "customers",
            "genres",
            "invoices",
            "media types",
            "tracks",
            "invoice lines",
            "playlists",
            "playlist tracks"
        ],
        "column_names": [
            "name",
            "seq",
            "id",
            "name",
            "id",
            "title",
            "artist id",
            "id",
            "last name",
            "first name",
            "title",
            "reports to",
            "birth date",
            "hire date",
            "address",
            "city",
            "state",
            "country",
            "postal code",
            "phone",
            "fax",
            "email",
            "id",
            "first name",
            "last name",
            "company",
            "address",
            "city",
            "state",
            "country",
            "postal code",
            "phone",
            "fax",
            "email",
            "support rep id",
            "id",
            "name",
            "id",
            "customer id",
            "invoice date",
            "billing address",
            "billing city",
            "billing state",
            "billing country",
            "billing postal code",
            "total",
            "id",
            "name",
            "id",
            "name",
            "album id",
            "media type id",
            "genre id",
            "composer",
            "milliseconds",
            "bytes",
            "unit price",
            "id",
            "invoice id",
            "track id",
            "unit price",
            "quantity",
            "id",
            "name",
            "playlist id",
            "track id"
        ],
        "template_feedback": "in step 1 , do not use the customers table . in step 2 , consider the employees 's first name equals nancy and employees 's last name equals edwards conditions in place of the customers 's first name equals nancy and customers 's last name equals edwards conditions .",
        "positive_example": "you need to delete last part and include the reports as nancy edwards ."
    },
    {
        "db_id": "insurance_and_eClaims",
        "table_names": [
            "customers",
            "staff",
            "policies",
            "claim headers",
            "claims documents",
            "claims processing stages",
            "claims processing"
        ],
        "column_names": [
            "customer id",
            "customer details",
            "staff id",
            "staff details",
            "policy id",
            "customer id",
            "policy type code",
            "start date",
            "end date",
            "claim header id",
            "claim status code",
            "claim type code",
            "policy id",
            "date of claim",
            "date of settlement",
            "amount claimed",
            "amount piad",
            "claim id",
            "document type code",
            "created by staff id",
            "created date",
            "claim stage id",
            "next claim stage id",
            "claim status name",
            "claim status description",
            "claim processing id",
            "claim id",
            "claim outcome code",
            "claim stage id",
            "staff id"
        ],
        "template_feedback": "in step 1 , do not use the claim headers table . in step 2 , consider the claim status name equals open conditions in place of the claim status code equals open conditions .",
        "positive_example": "you should use name contrary to code of claim status ."
    },
    {
        "db_id": "bike_1",
        "table_names": [
            "station",
            "status",
            "trip",
            "weather"
        ],
        "column_names": [
            "id",
            "name",
            "latitude",
            "longitude",
            "dock count",
            "city",
            "installation date",
            "station id",
            "bikes available",
            "docks available",
            "time",
            "id",
            "duration",
            "start date",
            "start station name",
            "start station id",
            "end date",
            "end station name",
            "end station id",
            "bike id",
            "subscription type",
            "zip code",
            "date",
            "max temperature f",
            "mean temperature f",
            "min temperature f",
            "max dew point f",
            "mean dew point f",
            "min dew point f",
            "max humidity",
            "mean humidity",
            "min humidity",
            "max sea level pressure inches",
            "mean sea level pressure inches",
            "min sea level pressure inches",
            "max visibility miles",
            "mean visibility miles",
            "min visibility miles",
            "max wind speed mph",
            "mean wind speed mph",
            "max gust speed mph",
            "precipitation inches",
            "cloud cover",
            "events",
            "wind dir degrees",
            "zip code"
        ],
        "template_feedback": "find latitude in place of longitude . order the results by latitude in place of longitude .",
        "positive_example": "replace events with date for both ."
    },
    {
        "db_id": "bike_1",
        "table_names": [
            "station",
            "status",
            "trip",
            "weather"
        ],
        "column_names": [
            "id",
            "name",
            "latitude",
            "longitude",
            "dock count",
            "city",
            "installation date",
            "station id",
            "bikes available",
            "docks available",
            "time",
            "id",
            "duration",
            "start date",
            "start station name",
            "start station id",
            "end date",
            "end station name",
            "end station id",
            "bike id",
            "subscription type",
            "zip code",
            "date",
            "max temperature f",
            "mean temperature f",
            "min temperature f",
            "max dew point f",
            "mean dew point f",
            "min dew point f",
            "max humidity",
            "mean humidity",
            "min humidity",
            "max sea level pressure inches",
            "mean sea level pressure inches",
            "min sea level pressure inches",
            "max visibility miles",
            "mean visibility miles",
            "min visibility miles",
            "max wind speed mph",
            "mean wind speed mph",
            "max gust speed mph",
            "precipitation inches",
            "cloud cover",
            "events",
            "wind dir degrees",
            "zip code"
        ],
        "template_feedback": "find latitude in place of longitude . order the results by latitude in place of longitude .",
        "positive_example": "use date instead of events"
    },
    {
        "db_id": "store_1",
        "table_names": [
            "sqlite sequence",
            "artists",
            "albums",
            "employees",
            "customers",
            "genres",
            "invoices",
            "media types",
            "tracks",
            "invoice lines",
            "playlists",
            "playlist tracks"
        ],
        "column_names": [
            "name",
            "seq",
            "id",
            "name",
            "id",
            "title",
            "artist id",
            "id",
            "last name",
            "first name",
            "title",
            "reports to",
            "birth date",
            "hire date",
            "address",
            "city",
            "state",
            "country",
            "postal code",
            "phone",
            "fax",
            "email",
            "id",
            "first name",
            "last name",
            "company",
            "address",
            "city",
            "state",
            "country",
            "postal code",
            "phone",
            "fax",
            "email",
            "support rep id",
            "id",
            "name",
            "id",
            "customer id",
            "invoice date",
            "billing address",
            "billing city",
            "billing state",
            "billing country",
            "billing postal code",
            "total",
            "id",
            "name",
            "id",
            "name",
            "album id",
            "media type id",
            "genre id",
            "composer",
            "milliseconds",
            "bytes",
            "unit price",
            "id",
            "invoice id",
            "track id",
            "unit price",
            "quantity",
            "id",
            "name",
            "playlist id",
            "track id"
        ],
        "template_feedback": "additionally make sure that billing state equals il .",
        "positive_example": "also add billing city equals il ."
    },
    {
        "db_id": "store_1",
        "table_names": [
            "sqlite sequence",
            "artists",
            "albums",
            "employees",
            "customers",
            "genres",
            "invoices",
            "media types",
            "tracks",
            "invoice lines",
            "playlists",
            "playlist tracks"
        ],
        "column_names": [
            "name",
            "seq",
            "id",
            "name",
            "id",
            "title",
            "artist id",
            "id",
            "last name",
            "first name",
            "title",
            "reports to",
            "birth date",
            "hire date",
            "address",
            "city",
            "state",
            "country",
            "postal code",
            "phone",
            "fax",
            "email",
            "id",
            "first name",
            "last name",
            "company",
            "address",
            "city",
            "state",
            "country",
            "postal code",
            "phone",
            "fax",
            "email",
            "support rep id",
            "id",
            "name",
            "id",
            "customer id",
            "invoice date",
            "billing address",
            "billing city",
            "billing state",
            "billing country",
            "billing postal code",
            "total",
            "id",
            "name",
            "id",
            "name",
            "album id",
            "media type id",
            "genre id",
            "composer",
            "milliseconds",
            "bytes",
            "unit price",
            "id",
            "invoice id",
            "track id",
            "unit price",
            "quantity",
            "id",
            "name",
            "playlist id",
            "track id"
        ],
        "template_feedback": "additionally make sure that billing state equals il .",
        "positive_example": "you need to include billing city as il ."
    },
    {
        "db_id": "store_1",
        "table_names": [
            "sqlite sequence",
            "artists",
            "albums",
            "employees",
            "customers",
            "genres",
            "invoices",
            "media types",
            "tracks",
            "invoice lines",
            "playlists",
            "playlist tracks"
        ],
        "column_names": [
            "name",
            "seq",
            "id",
            "name",
            "id",
            "title",
            "artist id",
            "id",
            "last name",
            "first name",
            "title",
            "reports to",
            "birth date",
            "hire date",
            "address",
            "city",
            "state",
            "country",
            "postal code",
            "phone",
            "fax",
            "email",
            "id",
            "first name",
            "last name",
            "company",
            "address",
            "city",
            "state",
            "country",
            "postal code",
            "phone",
            "fax",
            "email",
            "support rep id",
            "id",
            "name",
            "id",
            "customer id",
            "invoice date",
            "billing address",
            "billing city",
            "billing state",
            "billing country",
            "billing postal code",
            "total",
            "id",
            "name",
            "id",
            "name",
            "album id",
            "media type id",
            "genre id",
            "composer",
            "milliseconds",
            "bytes",
            "unit price",
            "id",
            "invoice id",
            "track id",
            "unit price",
            "quantity",
            "id",
            "name",
            "playlist id",
            "track id"
        ],
        "template_feedback": "find for each value of reports to . additionally find number of reports to . find the result with the largest number of reports to .",
        "positive_example": "also need to find total number of people reporting to them ."
    },
    {
        "db_id": "store_1",
        "table_names": [
            "sqlite sequence",
            "artists",
            "albums",
            "employees",
            "customers",
            "genres",
            "invoices",
            "media types",
            "tracks",
            "invoice lines",
            "playlists",
            "playlist tracks"
        ],
        "column_names": [
            "name",
            "seq",
            "id",
            "name",
            "id",
            "title",
            "artist id",
            "id",
            "last name",
            "first name",
            "title",
            "reports to",
            "birth date",
            "hire date",
            "address",
            "city",
            "state",
            "country",
            "postal code",
            "phone",
            "fax",
            "email",
            "id",
            "first name",
            "last name",
            "company",
            "address",
            "city",
            "state",
            "country",
            "postal code",
            "phone",
            "fax",
            "email",
            "support rep id",
            "id",
            "name",
            "id",
            "customer id",
            "invoice date",
            "billing address",
            "billing city",
            "billing state",
            "billing country",
            "billing postal code",
            "total",
            "id",
            "name",
            "id",
            "name",
            "album id",
            "media type id",
            "genre id",
            "composer",
            "milliseconds",
            "bytes",
            "unit price",
            "id",
            "invoice id",
            "track id",
            "unit price",
            "quantity",
            "id",
            "name",
            "playlist id",
            "track id"
        ],
        "template_feedback": "find for each value of reports to . additionally find number of reports to . find the result with the largest number of reports to .",
        "positive_example": "you should calculate the total number of reporting to them ."
    },
    {
        "db_id": "bike_1",
        "table_names": [
            "station",
            "status",
            "trip",
            "weather"
        ],
        "column_names": [
            "id",
            "name",
            "latitude",
            "longitude",
            "dock count",
            "city",
            "installation date",
            "station id",
            "bikes available",
            "docks available",
            "time",
            "id",
            "duration",
            "start date",
            "start station name",
            "start station id",
            "end date",
            "end station name",
            "end station id",
            "bike id",
            "subscription type",
            "zip code",
            "date",
            "max temperature f",
            "mean temperature f",
            "min temperature f",
            "max dew point f",
            "mean dew point f",
            "min dew point f",
            "max humidity",
            "mean humidity",
            "min humidity",
            "max sea level pressure inches",
            "mean sea level pressure inches",
            "min sea level pressure inches",
            "max visibility miles",
            "mean visibility miles",
            "min visibility miles",
            "max wind speed mph",
            "mean wind speed mph",
            "max gust speed mph",
            "precipitation inches",
            "cloud cover",
            "events",
            "wind dir degrees",
            "zip code"
        ],
        "template_feedback": "in step 1 , find the average mean visibility miles for each value of zip code .",
        "positive_example": "you need to find average visibility miles rather than sea level pressure ."
    },
    {
        "db_id": "allergy_1",
        "table_names": [
            "allergy type",
            "has allergy",
            "student"
        ],
        "column_names": [
            "allergy name",
            "allergy type",
            "stuid",
            "allergy",
            "stuid",
            "last name",
            "first name",
            "age",
            "sex",
            "major",
            "advisor",
            "city code"
        ],
        "template_feedback": "use has allergy table in place of student table . find for each value of allergy in place of sex . find allergy in place of sex .",
        "positive_example": "i want pupils having allergy name ."
    },
    {
        "db_id": "theme_gallery",
        "table_names": [
            "artist",
            "exhibition",
            "exhibition record"
        ],
        "column_names": [
            "artist id",
            "name",
            "country",
            "year join",
            "age",
            "exhibition id",
            "year",
            "theme",
            "artist id",
            "ticket price",
            "exhibition id",
            "date",
            "attendance"
        ],
        "template_feedback": "find minimum age in place of maximum age .",
        "positive_example": "need to replace maximum with minimum ."
    },
    {
        "db_id": "theme_gallery",
        "table_names": [
            "artist",
            "exhibition",
            "exhibition record"
        ],
        "column_names": [
            "artist id",
            "name",
            "country",
            "year join",
            "age",
            "exhibition id",
            "year",
            "theme",
            "artist id",
            "ticket price",
            "exhibition id",
            "date",
            "attendance"
        ],
        "template_feedback": "find minimum age in place of maximum age .",
        "positive_example": "you need use minimum instead of maximum ."
    },
    {
        "db_id": "company_1",
        "table_names": [
            "works on",
            "employee",
            "department",
            "project",
            "dependent",
            "department locations"
        ],
        "column_names": [
            "employee ssn",
            "project number",
            "hours",
            "first name",
            "minit",
            "last name",
            "ssn",
            "birth date",
            "address",
            "sex",
            "salary",
            "super ssn",
            "department no",
            "department name",
            "department number",
            "manager ssn",
            "manager start date",
            "dependent name",
            "dependent number",
            "dependent location",
            "department number",
            "employee ssn",
            "dependent name",
            "sex",
            "birth date",
            "relationship",
            "department number",
            "department location"
        ],
        "template_feedback": "additionally make sure that relationship equals spouse .",
        "positive_example": "make sure to find names of dependent with spouse employee relation ."
    },
    {
        "db_id": "company_1",
        "table_names": [
            "works on",
            "employee",
            "department",
            "project",
            "dependent",
            "department locations"
        ],
        "column_names": [
            "employee ssn",
            "project number",
            "hours",
            "first name",
            "minit",
            "last name",
            "ssn",
            "birth date",
            "address",
            "sex",
            "salary",
            "super ssn",
            "department no",
            "department name",
            "department number",
            "manager ssn",
            "manager start date",
            "dependent name",
            "dependent number",
            "dependent location",
            "department number",
            "employee ssn",
            "dependent name",
            "sex",
            "birth date",
            "relationship",
            "department number",
            "department location"
        ],
        "template_feedback": "additionally make sure that relationship equals spouse .",
        "positive_example": "for spouse employee relation , please double check to find names of dependent from it ."
    },
    {
        "db_id": "candidate_poll",
        "table_names": [
            "candidate",
            "people"
        ],
        "column_names": [
            "candidate id",
            "people id",
            "poll source",
            "date",
            "support rate",
            "consider rate",
            "oppose rate",
            "unsure rate",
            "people id",
            "sex",
            "name",
            "date of birth",
            "height",
            "weight"
        ],
        "template_feedback": "in step 2 , consider the support rate less than oppose rate conditions in place of the unsure rate less than 0.2 conditions .",
        "positive_example": "you need to use rate of support and rate of oppose ."
    },
    {
        "db_id": "bike_1",
        "table_names": [
            "station",
            "status",
            "trip",
            "weather"
        ],
        "column_names": [
            "id",
            "name",
            "latitude",
            "longitude",
            "dock count",
            "city",
            "installation date",
            "station id",
            "bikes available",
            "docks available",
            "time",
            "id",
            "duration",
            "start date",
            "start station name",
            "start station id",
            "end date",
            "end station name",
            "end station id",
            "bike id",
            "subscription type",
            "zip code",
            "date",
            "max temperature f",
            "mean temperature f",
            "min temperature f",
            "max dew point f",
            "mean dew point f",
            "min dew point f",
            "max humidity",
            "mean humidity",
            "min humidity",
            "max sea level pressure inches",
            "mean sea level pressure inches",
            "min sea level pressure inches",
            "max visibility miles",
            "mean visibility miles",
            "min visibility miles",
            "max wind speed mph",
            "mean wind speed mph",
            "max gust speed mph",
            "precipitation inches",
            "cloud cover",
            "events",
            "wind dir degrees",
            "zip code"
        ],
        "template_feedback": "in step 1 , do not use the station table . in step 2 , consider the start date like 8/ % conditions in place of the start date equals 8/ % conditions . in step 3 , find for each value of start station name in place of start station id . in step 4 , find start station name in place of name .",
        "positive_example": "i need an assurance that , the the starting date are equivalent to august rather than the 8 % ."
    },
    {
        "db_id": "store_1",
        "table_names": [
            "sqlite sequence",
            "artists",
            "albums",
            "employees",
            "customers",
            "genres",
            "invoices",
            "media types",
            "tracks",
            "invoice lines",
            "playlists",
            "playlist tracks"
        ],
        "column_names": [
            "name",
            "seq",
            "id",
            "name",
            "id",
            "title",
            "artist id",
            "id",
            "last name",
            "first name",
            "title",
            "reports to",
            "birth date",
            "hire date",
            "address",
            "city",
            "state",
            "country",
            "postal code",
            "phone",
            "fax",
            "email",
            "id",
            "first name",
            "last name",
            "company",
            "address",
            "city",
            "state",
            "country",
            "postal code",
            "phone",
            "fax",
            "email",
            "support rep id",
            "id",
            "name",
            "id",
            "customer id",
            "invoice date",
            "billing address",
            "billing city",
            "billing state",
            "billing country",
            "billing postal code",
            "total",
            "id",
            "name",
            "id",
            "name",
            "album id",
            "media type id",
            "genre id",
            "composer",
            "milliseconds",
            "bytes",
            "unit price",
            "id",
            "invoice id",
            "track id",
            "unit price",
            "quantity",
            "id",
            "name",
            "playlist id",
            "track id"
        ],
        "template_feedback": "additionally use the information from the sqlite sequence table besides the albums table . additionally make sure that seq equals aerosmith .",
        "positive_example": "need to make sure those albums are of aerosmith ."
    },
    {
        "db_id": "store_1",
        "table_names": [
            "sqlite sequence",
            "artists",
            "albums",
            "employees",
            "customers",
            "genres",
            "invoices",
            "media types",
            "tracks",
            "invoice lines",
            "playlists",
            "playlist tracks"
        ],
        "column_names": [
            "name",
            "seq",
            "id",
            "name",
            "id",
            "title",
            "artist id",
            "id",
            "last name",
            "first name",
            "title",
            "reports to",
            "birth date",
            "hire date",
            "address",
            "city",
            "state",
            "country",
            "postal code",
            "phone",
            "fax",
            "email",
            "id",
            "first name",
            "last name",
            "company",
            "address",
            "city",
            "state",
            "country",
            "postal code",
            "phone",
            "fax",
            "email",
            "support rep id",
            "id",
            "name",
            "id",
            "customer id",
            "invoice date",
            "billing address",
            "billing city",
            "billing state",
            "billing country",
            "billing postal code",
            "total",
            "id",
            "name",
            "id",
            "name",
            "album id",
            "media type id",
            "genre id",
            "composer",
            "milliseconds",
            "bytes",
            "unit price",
            "id",
            "invoice id",
            "track id",
            "unit price",
            "quantity",
            "id",
            "name",
            "playlist id",
            "track id"
        ],
        "template_feedback": "additionally use the information from the sqlite sequence table besides the albums table . additionally make sure that seq equals aerosmith .",
        "positive_example": "you need to ensure that albums contains aerosmith ."
    },
    {
        "db_id": "store_1",
        "table_names": [
            "sqlite sequence",
            "artists",
            "albums",
            "employees",
            "customers",
            "genres",
            "invoices",
            "media types",
            "tracks",
            "invoice lines",
            "playlists",
            "playlist tracks"
        ],
        "column_names": [
            "name",
            "seq",
            "id",
            "name",
            "id",
            "title",
            "artist id",
            "id",
            "last name",
            "first name",
            "title",
            "reports to",
            "birth date",
            "hire date",
            "address",
            "city",
            "state",
            "country",
            "postal code",
            "phone",
            "fax",
            "email",
            "id",
            "first name",
            "last name",
            "company",
            "address",
            "city",
            "state",
            "country",
            "postal code",
            "phone",
            "fax",
            "email",
            "support rep id",
            "id",
            "name",
            "id",
            "customer id",
            "invoice date",
            "billing address",
            "billing city",
            "billing state",
            "billing country",
            "billing postal code",
            "total",
            "id",
            "name",
            "id",
            "name",
            "album id",
            "media type id",
            "genre id",
            "composer",
            "milliseconds",
            "bytes",
            "unit price",
            "id",
            "invoice id",
            "track id",
            "unit price",
            "quantity",
            "id",
            "name",
            "playlist id",
            "track id"
        ],
        "template_feedback": "in step 1 , additionally use the information from the media types table . in step 2 , additionally make sure that media types 's name equals mpeg audio file .",
        "positive_example": "also need to make sure that the media type equals mpeg ."
    },
    {
        "db_id": "store_1",
        "table_names": [
            "sqlite sequence",
            "artists",
            "albums",
            "employees",
            "customers",
            "genres",
            "invoices",
            "media types",
            "tracks",
            "invoice lines",
            "playlists",
            "playlist tracks"
        ],
        "column_names": [
            "name",
            "seq",
            "id",
            "name",
            "id",
            "title",
            "artist id",
            "id",
            "last name",
            "first name",
            "title",
            "reports to",
            "birth date",
            "hire date",
            "address",
            "city",
            "state",
            "country",
            "postal code",
            "phone",
            "fax",
            "email",
            "id",
            "first name",
            "last name",
            "company",
            "address",
            "city",
            "state",
            "country",
            "postal code",
            "phone",
            "fax",
            "email",
            "support rep id",
            "id",
            "name",
            "id",
            "customer id",
            "invoice date",
            "billing address",
            "billing city",
            "billing state",
            "billing country",
            "billing postal code",
            "total",
            "id",
            "name",
            "id",
            "name",
            "album id",
            "media type id",
            "genre id",
            "composer",
            "milliseconds",
            "bytes",
            "unit price",
            "id",
            "invoice id",
            "track id",
            "unit price",
            "quantity",
            "id",
            "name",
            "playlist id",
            "track id"
        ],
        "template_feedback": "in step 1 , additionally use the information from the media types table . in step 2 , additionally make sure that media types 's name equals mpeg audio file .",
        "positive_example": "make certain the media type is mpeg ."
    },
    {
        "db_id": "small_bank_1",
        "table_names": [
            "accounts",
            "savings",
            "checking"
        ],
        "column_names": [
            "customer id",
            "name",
            "customer id",
            "balance",
            "customer id",
            "balance"
        ],
        "template_feedback": "in step 2 , only show me the first 3 results .",
        "positive_example": "make sure only top 3 accounts are needed ."
    },
    {
        "db_id": "small_bank_1",
        "table_names": [
            "accounts",
            "savings",
            "checking"
        ],
        "column_names": [
            "customer id",
            "name",
            "customer id",
            "balance",
            "customer id",
            "balance"
        ],
        "template_feedback": "in step 2 , only show me the first 3 results .",
        "positive_example": "confirm need is of just most 3 accounts ."
    },
    {
        "db_id": "store_1",
        "table_names": [
            "sqlite sequence",
            "artists",
            "albums",
            "employees",
            "customers",
            "genres",
            "invoices",
            "media types",
            "tracks",
            "invoice lines",
            "playlists",
            "playlist tracks"
        ],
        "column_names": [
            "name",
            "seq",
            "id",
            "name",
            "id",
            "title",
            "artist id",
            "id",
            "last name",
            "first name",
            "title",
            "reports to",
            "birth date",
            "hire date",
            "address",
            "city",
            "state",
            "country",
            "postal code",
            "phone",
            "fax",
            "email",
            "id",
            "first name",
            "last name",
            "company",
            "address",
            "city",
            "state",
            "country",
            "postal code",
            "phone",
            "fax",
            "email",
            "support rep id",
            "id",
            "name",
            "id",
            "customer id",
            "invoice date",
            "billing address",
            "billing city",
            "billing state",
            "billing country",
            "billing postal code",
            "total",
            "id",
            "name",
            "id",
            "name",
            "album id",
            "media type id",
            "genre id",
            "composer",
            "milliseconds",
            "bytes",
            "unit price",
            "id",
            "invoice id",
            "track id",
            "unit price",
            "quantity",
            "id",
            "name",
            "playlist id",
            "track id"
        ],
        "template_feedback": "in step 1 , do not use the media types table . in step 2 , consider the tracks 's name equals balls to the wall conditions in place of the media types 's name equals balls to the wall conditions .",
        "positive_example": "use name of track in place of name of media type ."
    },
    {
        "db_id": "bike_1",
        "table_names": [
            "station",
            "status",
            "trip",
            "weather"
        ],
        "column_names": [
            "id",
            "name",
            "latitude",
            "longitude",
            "dock count",
            "city",
            "installation date",
            "station id",
            "bikes available",
            "docks available",
            "time",
            "id",
            "duration",
            "start date",
            "start station name",
            "start station id",
            "end date",
            "end station name",
            "end station id",
            "bike id",
            "subscription type",
            "zip code",
            "date",
            "max temperature f",
            "mean temperature f",
            "min temperature f",
            "max dew point f",
            "mean dew point f",
            "min dew point f",
            "max humidity",
            "mean humidity",
            "min humidity",
            "max sea level pressure inches",
            "mean sea level pressure inches",
            "min sea level pressure inches",
            "max visibility miles",
            "mean visibility miles",
            "min visibility miles",
            "max wind speed mph",
            "mean wind speed mph",
            "max gust speed mph",
            "precipitation inches",
            "cloud cover",
            "events",
            "wind dir degrees",
            "zip code"
        ],
        "template_feedback": "additionally make sure that max wind speed mph greater than or equals 25 .",
        "positive_example": "count the rows with maximum velocity is 25"
    },
    {
        "db_id": "inn_1",
        "table_names": [
            "rooms",
            "reservations"
        ],
        "column_names": [
            "room id",
            "room name",
            "beds",
            "bed type",
            "max occupancy",
            "base price",
            "decor",
            "code",
            "room",
            "check in",
            "check out",
            "rate",
            "last name",
            "first name",
            "adults",
            "kids"
        ],
        "template_feedback": "in step 1 , do not use the reservations table . in step 2 , consider the max occupancy greater than 2 conditions in place of the adults greater than 2 conditions . find room id in place of decor .",
        "positive_example": "you have to use id of room ."
    },
    {
        "db_id": "bike_1",
        "table_names": [
            "station",
            "status",
            "trip",
            "weather"
        ],
        "column_names": [
            "id",
            "name",
            "latitude",
            "longitude",
            "dock count",
            "city",
            "installation date",
            "station id",
            "bikes available",
            "docks available",
            "time",
            "id",
            "duration",
            "start date",
            "start station name",
            "start station id",
            "end date",
            "end station name",
            "end station id",
            "bike id",
            "subscription type",
            "zip code",
            "date",
            "max temperature f",
            "mean temperature f",
            "min temperature f",
            "max dew point f",
            "mean dew point f",
            "min dew point f",
            "max humidity",
            "mean humidity",
            "min humidity",
            "max sea level pressure inches",
            "mean sea level pressure inches",
            "min sea level pressure inches",
            "max visibility miles",
            "mean visibility miles",
            "min visibility miles",
            "max wind speed mph",
            "mean wind speed mph",
            "max gust speed mph",
            "precipitation inches",
            "cloud cover",
            "events",
            "wind dir degrees",
            "zip code"
        ],
        "template_feedback": "additionally use the information from the station table besides the trip table . consider the city equals palo alto and city equals mountain view conditions in place of the end date equals palo alto and start date equals mountain view conditions .",
        "positive_example": "make sure start point is mountain view name and end point is palo alto name ."
    },
    {
        "db_id": "bike_1",
        "table_names": [
            "station",
            "status",
            "trip",
            "weather"
        ],
        "column_names": [
            "id",
            "name",
            "latitude",
            "longitude",
            "dock count",
            "city",
            "installation date",
            "station id",
            "bikes available",
            "docks available",
            "time",
            "id",
            "duration",
            "start date",
            "start station name",
            "start station id",
            "end date",
            "end station name",
            "end station id",
            "bike id",
            "subscription type",
            "zip code",
            "date",
            "max temperature f",
            "mean temperature f",
            "min temperature f",
            "max dew point f",
            "mean dew point f",
            "min dew point f",
            "max humidity",
            "mean humidity",
            "min humidity",
            "max sea level pressure inches",
            "mean sea level pressure inches",
            "min sea level pressure inches",
            "max visibility miles",
            "mean visibility miles",
            "min visibility miles",
            "max wind speed mph",
            "mean wind speed mph",
            "max gust speed mph",
            "precipitation inches",
            "cloud cover",
            "events",
            "wind dir degrees",
            "zip code"
        ],
        "template_feedback": "additionally use the information from the station table besides the trip table . consider the city equals palo alto and city equals mountain view conditions in place of the end date equals palo alto and start date equals mountain view conditions .",
        "positive_example": "the name of mountain view and palo atlo should be the start and end point respectively ."
    },
    {
        "db_id": "store_1",
        "table_names": [
            "sqlite sequence",
            "artists",
            "albums",
            "employees",
            "customers",
            "genres",
            "invoices",
            "media types",
            "tracks",
            "invoice lines",
            "playlists",
            "playlist tracks"
        ],
        "column_names": [
            "name",
            "seq",
            "id",
            "name",
            "id",
            "title",
            "artist id",
            "id",
            "last name",
            "first name",
            "title",
            "reports to",
            "birth date",
            "hire date",
            "address",
            "city",
            "state",
            "country",
            "postal code",
            "phone",
            "fax",
            "email",
            "id",
            "first name",
            "last name",
            "company",
            "address",
            "city",
            "state",
            "country",
            "postal code",
            "phone",
            "fax",
            "email",
            "support rep id",
            "id",
            "name",
            "id",
            "customer id",
            "invoice date",
            "billing address",
            "billing city",
            "billing state",
            "billing country",
            "billing postal code",
            "total",
            "id",
            "name",
            "id",
            "name",
            "album id",
            "media type id",
            "genre id",
            "composer",
            "milliseconds",
            "bytes",
            "unit price",
            "id",
            "invoice id",
            "track id",
            "unit price",
            "quantity",
            "id",
            "name",
            "playlist id",
            "track id"
        ],
        "template_feedback": "additionally make sure that billing country equals usa .",
        "positive_example": "make sure to find number of rows of invoices ."
    },
    {
        "db_id": "store_1",
        "table_names": [
            "sqlite sequence",
            "artists",
            "albums",
            "employees",
            "customers",
            "genres",
            "invoices",
            "media types",
            "tracks",
            "invoice lines",
            "playlists",
            "playlist tracks"
        ],
        "column_names": [
            "name",
            "seq",
            "id",
            "name",
            "id",
            "title",
            "artist id",
            "id",
            "last name",
            "first name",
            "title",
            "reports to",
            "birth date",
            "hire date",
            "address",
            "city",
            "state",
            "country",
            "postal code",
            "phone",
            "fax",
            "email",
            "id",
            "first name",
            "last name",
            "company",
            "address",
            "city",
            "state",
            "country",
            "postal code",
            "phone",
            "fax",
            "email",
            "support rep id",
            "id",
            "name",
            "id",
            "customer id",
            "invoice date",
            "billing address",
            "billing city",
            "billing state",
            "billing country",
            "billing postal code",
            "total",
            "id",
            "name",
            "id",
            "name",
            "album id",
            "media type id",
            "genre id",
            "composer",
            "milliseconds",
            "bytes",
            "unit price",
            "id",
            "invoice id",
            "track id",
            "unit price",
            "quantity",
            "id",
            "name",
            "playlist id",
            "track id"
        ],
        "template_feedback": "additionally make sure that billing country equals usa .",
        "positive_example": "i am searching for the invoice 's total number of rows ."
    },
    {
        "db_id": "store_1",
        "table_names": [
            "sqlite sequence",
            "artists",
            "albums",
            "employees",
            "customers",
            "genres",
            "invoices",
            "media types",
            "tracks",
            "invoice lines",
            "playlists",
            "playlist tracks"
        ],
        "column_names": [
            "name",
            "seq",
            "id",
            "name",
            "id",
            "title",
            "artist id",
            "id",
            "last name",
            "first name",
            "title",
            "reports to",
            "birth date",
            "hire date",
            "address",
            "city",
            "state",
            "country",
            "postal code",
            "phone",
            "fax",
            "email",
            "id",
            "first name",
            "last name",
            "company",
            "address",
            "city",
            "state",
            "country",
            "postal code",
            "phone",
            "fax",
            "email",
            "support rep id",
            "id",
            "name",
            "id",
            "customer id",
            "invoice date",
            "billing address",
            "billing city",
            "billing state",
            "billing country",
            "billing postal code",
            "total",
            "id",
            "name",
            "id",
            "name",
            "album id",
            "media type id",
            "genre id",
            "composer",
            "milliseconds",
            "bytes",
            "unit price",
            "id",
            "invoice id",
            "track id",
            "unit price",
            "quantity",
            "id",
            "name",
            "playlist id",
            "track id"
        ],
        "template_feedback": "in step 1 , additionally use the information from the media types table . in step 2 , additionally make sure that media types 's name equals mpeg audio file .",
        "positive_example": "make sure they are on mpeg audio files ."
    },
    {
        "db_id": "store_1",
        "table_names": [
            "sqlite sequence",
            "artists",
            "albums",
            "employees",
            "customers",
            "genres",
            "invoices",
            "media types",
            "tracks",
            "invoice lines",
            "playlists",
            "playlist tracks"
        ],
        "column_names": [
            "name",
            "seq",
            "id",
            "name",
            "id",
            "title",
            "artist id",
            "id",
            "last name",
            "first name",
            "title",
            "reports to",
            "birth date",
            "hire date",
            "address",
            "city",
            "state",
            "country",
            "postal code",
            "phone",
            "fax",
            "email",
            "id",
            "first name",
            "last name",
            "company",
            "address",
            "city",
            "state",
            "country",
            "postal code",
            "phone",
            "fax",
            "email",
            "support rep id",
            "id",
            "name",
            "id",
            "customer id",
            "invoice date",
            "billing address",
            "billing city",
            "billing state",
            "billing country",
            "billing postal code",
            "total",
            "id",
            "name",
            "id",
            "name",
            "album id",
            "media type id",
            "genre id",
            "composer",
            "milliseconds",
            "bytes",
            "unit price",
            "id",
            "invoice id",
            "track id",
            "unit price",
            "quantity",
            "id",
            "name",
            "playlist id",
            "track id"
        ],
        "template_feedback": "in step 1 , additionally use the information from the media types table . in step 2 , additionally make sure that media types 's name equals mpeg audio file .",
        "positive_example": "confirm that audio files are of mpeg format ."
    },
    {
        "db_id": "insurance_and_eClaims",
        "table_names": [
            "customers",
            "staff",
            "policies",
            "claim headers",
            "claims documents",
            "claims processing stages",
            "claims processing"
        ],
        "column_names": [
            "customer id",
            "customer details",
            "staff id",
            "staff details",
            "policy id",
            "customer id",
            "policy type code",
            "start date",
            "end date",
            "claim header id",
            "claim status code",
            "claim type code",
            "policy id",
            "date of claim",
            "date of settlement",
            "amount claimed",
            "amount piad",
            "claim id",
            "document type code",
            "created by staff id",
            "created date",
            "claim stage id",
            "next claim stage id",
            "claim status name",
            "claim status description",
            "claim processing id",
            "claim id",
            "claim outcome code",
            "claim stage id",
            "staff id"
        ],
        "template_feedback": "in step 1 , do not use the claim headers table . in step 2 , consider the claim status name equals open conditions in place of the claim status code equals open conditions .",
        "positive_example": "you should use name contrary to code of claim status ."
    },
    {
        "db_id": "allergy_1",
        "table_names": [
            "allergy type",
            "has allergy",
            "student"
        ],
        "column_names": [
            "allergy name",
            "allergy type",
            "stuid",
            "allergy",
            "stuid",
            "last name",
            "first name",
            "age",
            "sex",
            "major",
            "advisor",
            "city code"
        ],
        "template_feedback": "additionally use the information from the has allergy table besides the allergy type table . additionally make sure that allergy type equals food .",
        "positive_example": "need to count number of students , also make sure allergy name equals food ."
    },
    {
        "db_id": "allergy_1",
        "table_names": [
            "allergy type",
            "has allergy",
            "student"
        ],
        "column_names": [
            "allergy name",
            "allergy type",
            "stuid",
            "allergy",
            "stuid",
            "last name",
            "first name",
            "age",
            "sex",
            "major",
            "advisor",
            "city code"
        ],
        "template_feedback": "additionally use the information from the has allergy table besides the allergy type table . additionally make sure that allergy type equals food .",
        "positive_example": "i want the total number of students having food allergy ."
    },
    {
        "db_id": "local_govt_in_alabama",
        "table_names": [
            "services",
            "participants",
            "events",
            "participants in events"
        ],
        "column_names": [
            "service id",
            "service type code",
            "participant id",
            "participant type code",
            "participant details",
            "event id",
            "service id",
            "event details",
            "event id",
            "participant id"
        ],
        "template_feedback": "find number of different participant id in place of participant id . permit repetitions in the results .",
        "positive_example": "make sure participants attended at least one event ."
    },
    {
        "db_id": "local_govt_in_alabama",
        "table_names": [
            "services",
            "participants",
            "events",
            "participants in events"
        ],
        "column_names": [
            "service id",
            "service type code",
            "participant id",
            "participant type code",
            "participant details",
            "event id",
            "service id",
            "event details",
            "event id",
            "participant id"
        ],
        "template_feedback": "find number of different participant id in place of participant id . permit repetitions in the results .",
        "positive_example": "i want you to confirm that even a single event is attend by the participants ."
    },
    {
        "db_id": "store_1",
        "table_names": [
            "sqlite sequence",
            "artists",
            "albums",
            "employees",
            "customers",
            "genres",
            "invoices",
            "media types",
            "tracks",
            "invoice lines",
            "playlists",
            "playlist tracks"
        ],
        "column_names": [
            "name",
            "seq",
            "id",
            "name",
            "id",
            "title",
            "artist id",
            "id",
            "last name",
            "first name",
            "title",
            "reports to",
            "birth date",
            "hire date",
            "address",
            "city",
            "state",
            "country",
            "postal code",
            "phone",
            "fax",
            "email",
            "id",
            "first name",
            "last name",
            "company",
            "address",
            "city",
            "state",
            "country",
            "postal code",
            "phone",
            "fax",
            "email",
            "support rep id",
            "id",
            "name",
            "id",
            "customer id",
            "invoice date",
            "billing address",
            "billing city",
            "billing state",
            "billing country",
            "billing postal code",
            "total",
            "id",
            "name",
            "id",
            "name",
            "album id",
            "media type id",
            "genre id",
            "composer",
            "milliseconds",
            "bytes",
            "unit price",
            "id",
            "invoice id",
            "track id",
            "unit price",
            "quantity",
            "id",
            "name",
            "playlist id",
            "track id"
        ],
        "template_feedback": "in step 1 , additionally make sure that billing country equals usa . in step 2 , additionally find number of rows .",
        "positive_example": "make sure state is one of the us country ."
    },
    {
        "db_id": "store_1",
        "table_names": [
            "sqlite sequence",
            "artists",
            "albums",
            "employees",
            "customers",
            "genres",
            "invoices",
            "media types",
            "tracks",
            "invoice lines",
            "playlists",
            "playlist tracks"
        ],
        "column_names": [
            "name",
            "seq",
            "id",
            "name",
            "id",
            "title",
            "artist id",
            "id",
            "last name",
            "first name",
            "title",
            "reports to",
            "birth date",
            "hire date",
            "address",
            "city",
            "state",
            "country",
            "postal code",
            "phone",
            "fax",
            "email",
            "id",
            "first name",
            "last name",
            "company",
            "address",
            "city",
            "state",
            "country",
            "postal code",
            "phone",
            "fax",
            "email",
            "support rep id",
            "id",
            "name",
            "id",
            "customer id",
            "invoice date",
            "billing address",
            "billing city",
            "billing state",
            "billing country",
            "billing postal code",
            "total",
            "id",
            "name",
            "id",
            "name",
            "album id",
            "media type id",
            "genre id",
            "composer",
            "milliseconds",
            "bytes",
            "unit price",
            "id",
            "invoice id",
            "track id",
            "unit price",
            "quantity",
            "id",
            "name",
            "playlist id",
            "track id"
        ],
        "template_feedback": "in step 1 , additionally make sure that billing country equals usa . in step 2 , additionally find number of rows .",
        "positive_example": "us country is one of the state ."
    },
    {
        "db_id": "insurance_and_eClaims",
        "table_names": [
            "customers",
            "staff",
            "policies",
            "claim headers",
            "claims documents",
            "claims processing stages",
            "claims processing"
        ],
        "column_names": [
            "customer id",
            "customer details",
            "staff id",
            "staff details",
            "policy id",
            "customer id",
            "policy type code",
            "start date",
            "end date",
            "claim header id",
            "claim status code",
            "claim type code",
            "policy id",
            "date of claim",
            "date of settlement",
            "amount claimed",
            "amount piad",
            "claim id",
            "document type code",
            "created by staff id",
            "created date",
            "claim stage id",
            "next claim stage id",
            "claim status name",
            "claim status description",
            "claim processing id",
            "claim id",
            "claim outcome code",
            "claim stage id",
            "staff id"
        ],
        "template_feedback": "in step 1 , do not use the claim headers table . in step 2 , consider the policy type code equals deputy or policy type code equals uniform conditions in place of the claim status code equals uniform or claim status code equals deputy conditions . find customer details in place of customers 's customer id . make sure no repetition in the results .",
        "positive_example": "i want the details of customer and code of policy type from policy table ."
    },
    {
        "db_id": "allergy_1",
        "table_names": [
            "allergy type",
            "has allergy",
            "student"
        ],
        "column_names": [
            "allergy name",
            "allergy type",
            "stuid",
            "allergy",
            "stuid",
            "last name",
            "first name",
            "age",
            "sex",
            "major",
            "advisor",
            "city code"
        ],
        "template_feedback": "in step 1 , do not use the allergy type table . in step 2 , you should consider both of the conditions rather than either of them . consider the has allergy 's allergy equals milk and has allergy 's allergy equals eggs conditions in place of the allergy type equals milk conditions .",
        "positive_example": "replace \" or \" between sex and allergy name with \" and \" , make sure allergy name equals milk or egg"
    },
    {
        "db_id": "small_bank_1",
        "table_names": [
            "accounts",
            "savings",
            "checking"
        ],
        "column_names": [
            "customer id",
            "name",
            "customer id",
            "balance",
            "customer id",
            "balance"
        ],
        "template_feedback": "in step 2 , do not return checking 's balance . order the results by checking 's balance plus savings 's balance in place of savings 's balance .",
        "positive_example": "remove checking 's customer id and make sure to find addition of saving 's and checking 's customer id ."
    },
    {
        "db_id": "inn_1",
        "table_names": [
            "rooms",
            "reservations"
        ],
        "column_names": [
            "room id",
            "room name",
            "beds",
            "bed type",
            "max occupancy",
            "base price",
            "decor",
            "code",
            "room",
            "check in",
            "check out",
            "rate",
            "last name",
            "first name",
            "adults",
            "kids"
        ],
        "template_feedback": "find base price in place of decor .",
        "positive_example": "i want the price of base ."
    },
    {
        "db_id": "store_1",
        "table_names": [
            "sqlite sequence",
            "artists",
            "albums",
            "employees",
            "customers",
            "genres",
            "invoices",
            "media types",
            "tracks",
            "invoice lines",
            "playlists",
            "playlist tracks"
        ],
        "column_names": [
            "name",
            "seq",
            "id",
            "name",
            "id",
            "title",
            "artist id",
            "id",
            "last name",
            "first name",
            "title",
            "reports to",
            "birth date",
            "hire date",
            "address",
            "city",
            "state",
            "country",
            "postal code",
            "phone",
            "fax",
            "email",
            "id",
            "first name",
            "last name",
            "company",
            "address",
            "city",
            "state",
            "country",
            "postal code",
            "phone",
            "fax",
            "email",
            "support rep id",
            "id",
            "name",
            "id",
            "customer id",
            "invoice date",
            "billing address",
            "billing city",
            "billing state",
            "billing country",
            "billing postal code",
            "total",
            "id",
            "name",
            "id",
            "name",
            "album id",
            "media type id",
            "genre id",
            "composer",
            "milliseconds",
            "bytes",
            "unit price",
            "id",
            "invoice id",
            "track id",
            "unit price",
            "quantity",
            "id",
            "name",
            "playlist id",
            "track id"
        ],
        "template_feedback": "additionally use the information from the sqlite sequence table besides the albums table . additionally make sure that seq equals aerosmith .",
        "positive_example": "make sure they belongs to aerosmith albums ."
    },
    {
        "db_id": "store_1",
        "table_names": [
            "sqlite sequence",
            "artists",
            "albums",
            "employees",
            "customers",
            "genres",
            "invoices",
            "media types",
            "tracks",
            "invoice lines",
            "playlists",
            "playlist tracks"
        ],
        "column_names": [
            "name",
            "seq",
            "id",
            "name",
            "id",
            "title",
            "artist id",
            "id",
            "last name",
            "first name",
            "title",
            "reports to",
            "birth date",
            "hire date",
            "address",
            "city",
            "state",
            "country",
            "postal code",
            "phone",
            "fax",
            "email",
            "id",
            "first name",
            "last name",
            "company",
            "address",
            "city",
            "state",
            "country",
            "postal code",
            "phone",
            "fax",
            "email",
            "support rep id",
            "id",
            "name",
            "id",
            "customer id",
            "invoice date",
            "billing address",
            "billing city",
            "billing state",
            "billing country",
            "billing postal code",
            "total",
            "id",
            "name",
            "id",
            "name",
            "album id",
            "media type id",
            "genre id",
            "composer",
            "milliseconds",
            "bytes",
            "unit price",
            "id",
            "invoice id",
            "track id",
            "unit price",
            "quantity",
            "id",
            "name",
            "playlist id",
            "track id"
        ],
        "template_feedback": "additionally use the information from the sqlite sequence table besides the albums table . additionally make sure that seq equals aerosmith .",
        "positive_example": "i want you to confirm that they owned by albums of aerosmith ."
    },
    {
        "db_id": "store_1",
        "table_names": [
            "sqlite sequence",
            "artists",
            "albums",
            "employees",
            "customers",
            "genres",
            "invoices",
            "media types",
            "tracks",
            "invoice lines",
            "playlists",
            "playlist tracks"
        ],
        "column_names": [
            "name",
            "seq",
            "id",
            "name",
            "id",
            "title",
            "artist id",
            "id",
            "last name",
            "first name",
            "title",
            "reports to",
            "birth date",
            "hire date",
            "address",
            "city",
            "state",
            "country",
            "postal code",
            "phone",
            "fax",
            "email",
            "id",
            "first name",
            "last name",
            "company",
            "address",
            "city",
            "state",
            "country",
            "postal code",
            "phone",
            "fax",
            "email",
            "support rep id",
            "id",
            "name",
            "id",
            "customer id",
            "invoice date",
            "billing address",
            "billing city",
            "billing state",
            "billing country",
            "billing postal code",
            "total",
            "id",
            "name",
            "id",
            "name",
            "album id",
            "media type id",
            "genre id",
            "composer",
            "milliseconds",
            "bytes",
            "unit price",
            "id",
            "invoice id",
            "track id",
            "unit price",
            "quantity",
            "id",
            "name",
            "playlist id",
            "track id"
        ],
        "template_feedback": "additionally make sure that title equals it staff .",
        "positive_example": "make sure employees are from it staff ."
    },
    {
        "db_id": "store_1",
        "table_names": [
            "sqlite sequence",
            "artists",
            "albums",
            "employees",
            "customers",
            "genres",
            "invoices",
            "media types",
            "tracks",
            "invoice lines",
            "playlists",
            "playlist tracks"
        ],
        "column_names": [
            "name",
            "seq",
            "id",
            "name",
            "id",
            "title",
            "artist id",
            "id",
            "last name",
            "first name",
            "title",
            "reports to",
            "birth date",
            "hire date",
            "address",
            "city",
            "state",
            "country",
            "postal code",
            "phone",
            "fax",
            "email",
            "id",
            "first name",
            "last name",
            "company",
            "address",
            "city",
            "state",
            "country",
            "postal code",
            "phone",
            "fax",
            "email",
            "support rep id",
            "id",
            "name",
            "id",
            "customer id",
            "invoice date",
            "billing address",
            "billing city",
            "billing state",
            "billing country",
            "billing postal code",
            "total",
            "id",
            "name",
            "id",
            "name",
            "album id",
            "media type id",
            "genre id",
            "composer",
            "milliseconds",
            "bytes",
            "unit price",
            "id",
            "invoice id",
            "track id",
            "unit price",
            "quantity",
            "id",
            "name",
            "playlist id",
            "track id"
        ],
        "template_feedback": "additionally make sure that title equals it staff .",
        "positive_example": "i want workers from the staff of it ."
    },
    {
        "db_id": "bike_1",
        "table_names": [
            "station",
            "status",
            "trip",
            "weather"
        ],
        "column_names": [
            "id",
            "name",
            "latitude",
            "longitude",
            "dock count",
            "city",
            "installation date",
            "station id",
            "bikes available",
            "docks available",
            "time",
            "id",
            "duration",
            "start date",
            "start station name",
            "start station id",
            "end date",
            "end station name",
            "end station id",
            "bike id",
            "subscription type",
            "zip code",
            "date",
            "max temperature f",
            "mean temperature f",
            "min temperature f",
            "max dew point f",
            "mean dew point f",
            "min dew point f",
            "max humidity",
            "mean humidity",
            "min humidity",
            "max sea level pressure inches",
            "mean sea level pressure inches",
            "min sea level pressure inches",
            "max visibility miles",
            "mean visibility miles",
            "min visibility miles",
            "max wind speed mph",
            "mean wind speed mph",
            "max gust speed mph",
            "precipitation inches",
            "cloud cover",
            "events",
            "wind dir degrees",
            "zip code"
        ],
        "template_feedback": "consider the max temperature f greater than 85 conditions in place of the min temperature f greater than 85 conditions .",
        "positive_example": "provide the highest temperature in fahrenheit ."
    },
    {
        "db_id": "gas_company",
        "table_names": [
            "company",
            "gas station",
            "station company"
        ],
        "column_names": [
            "company id",
            "rank",
            "company",
            "headquarters",
            "main industry",
            "sales billion",
            "profits billion",
            "assets billion",
            "market value",
            "station id",
            "open year",
            "location",
            "manager name",
            "vice manager name",
            "representative name",
            "station id",
            "company id",
            "rank of the year"
        ],
        "template_feedback": "in step 2 , consider the market value greater than 100 conditions in place of the sales billion greater than 100 conditions .",
        "positive_example": "i want value of market ."
    },
    {
        "db_id": "pilot_record",
        "table_names": [
            "aircraft",
            "pilot",
            "pilot record"
        ],
        "column_names": [
            "aircraft id",
            "order year",
            "manufacturer",
            "model",
            "fleet series",
            "powertrain",
            "fuel propulsion",
            "pilot id",
            "pilot name",
            "rank",
            "age",
            "nationality",
            "position",
            "join year",
            "team",
            "record id",
            "pilot id",
            "aircraft id",
            "date"
        ],
        "template_feedback": "in step 1 , consider the join year less than 2000 conditions in place of the join year greater than 2000 conditions . in step 2 , consider the join year greater than 2005 conditions in place of the join year less than 2005 conditions .",
        "positive_example": "verify that the joining year is smaller than 2000 and higher than 2005 ."
    },
    {
        "db_id": "allergy_1",
        "table_names": [
            "allergy type",
            "has allergy",
            "student"
        ],
        "column_names": [
            "allergy name",
            "allergy type",
            "stuid",
            "allergy",
            "stuid",
            "last name",
            "first name",
            "age",
            "sex",
            "major",
            "advisor",
            "city code"
        ],
        "template_feedback": "additionally make sure that allergy type equals animal .",
        "positive_example": "make sure it has allergy type equal to animal ."
    },
    {
        "db_id": "store_1",
        "table_names": [
            "sqlite sequence",
            "artists",
            "albums",
            "employees",
            "customers",
            "genres",
            "invoices",
            "media types",
            "tracks",
            "invoice lines",
            "playlists",
            "playlist tracks"
        ],
        "column_names": [
            "name",
            "seq",
            "id",
            "name",
            "id",
            "title",
            "artist id",
            "id",
            "last name",
            "first name",
            "title",
            "reports to",
            "birth date",
            "hire date",
            "address",
            "city",
            "state",
            "country",
            "postal code",
            "phone",
            "fax",
            "email",
            "id",
            "first name",
            "last name",
            "company",
            "address",
            "city",
            "state",
            "country",
            "postal code",
            "phone",
            "fax",
            "email",
            "support rep id",
            "id",
            "name",
            "id",
            "customer id",
            "invoice date",
            "billing address",
            "billing city",
            "billing state",
            "billing country",
            "billing postal code",
            "total",
            "id",
            "name",
            "id",
            "name",
            "album id",
            "media type id",
            "genre id",
            "composer",
            "milliseconds",
            "bytes",
            "unit price",
            "id",
            "invoice id",
            "track id",
            "unit price",
            "quantity",
            "id",
            "name",
            "playlist id",
            "track id"
        ],
        "template_feedback": "additionally make sure that billing state equals ca . additionally find number of rows and billing state .",
        "positive_example": "replace \" summation of total with number of rows of invoices table ."
    },
    {
        "db_id": "store_1",
        "table_names": [
            "sqlite sequence",
            "artists",
            "albums",
            "employees",
            "customers",
            "genres",
            "invoices",
            "media types",
            "tracks",
            "invoice lines",
            "playlists",
            "playlist tracks"
        ],
        "column_names": [
            "name",
            "seq",
            "id",
            "name",
            "id",
            "title",
            "artist id",
            "id",
            "last name",
            "first name",
            "title",
            "reports to",
            "birth date",
            "hire date",
            "address",
            "city",
            "state",
            "country",
            "postal code",
            "phone",
            "fax",
            "email",
            "id",
            "first name",
            "last name",
            "company",
            "address",
            "city",
            "state",
            "country",
            "postal code",
            "phone",
            "fax",
            "email",
            "support rep id",
            "id",
            "name",
            "id",
            "customer id",
            "invoice date",
            "billing address",
            "billing city",
            "billing state",
            "billing country",
            "billing postal code",
            "total",
            "id",
            "name",
            "id",
            "name",
            "album id",
            "media type id",
            "genre id",
            "composer",
            "milliseconds",
            "bytes",
            "unit price",
            "id",
            "invoice id",
            "track id",
            "unit price",
            "quantity",
            "id",
            "name",
            "playlist id",
            "track id"
        ],
        "template_feedback": "additionally make sure that billing state equals ca . additionally find number of rows and billing state .",
        "positive_example": "use rows number of invoices table ."
    },
    {
        "db_id": "insurance_and_eClaims",
        "table_names": [
            "customers",
            "staff",
            "policies",
            "claim headers",
            "claims documents",
            "claims processing stages",
            "claims processing"
        ],
        "column_names": [
            "customer id",
            "customer details",
            "staff id",
            "staff details",
            "policy id",
            "customer id",
            "policy type code",
            "start date",
            "end date",
            "claim header id",
            "claim status code",
            "claim type code",
            "policy id",
            "date of claim",
            "date of settlement",
            "amount claimed",
            "amount piad",
            "claim id",
            "document type code",
            "created by staff id",
            "created date",
            "claim stage id",
            "next claim stage id",
            "claim status name",
            "claim status description",
            "claim processing id",
            "claim id",
            "claim outcome code",
            "claim stage id",
            "staff id"
        ],
        "template_feedback": "in step 2 , additionally make sure that amount claimed is equals maximum amount claimed claim headers . do not find for each value of customer details . in step 3 , you should not find the largest of the results . show me all the results .",
        "positive_example": "replace \" step 3 results \" with \" step 2 results \" in step 3 ."
    },
    {
        "db_id": "insurance_and_eClaims",
        "table_names": [
            "customers",
            "staff",
            "policies",
            "claim headers",
            "claims documents",
            "claims processing stages",
            "claims processing"
        ],
        "column_names": [
            "customer id",
            "customer details",
            "staff id",
            "staff details",
            "policy id",
            "customer id",
            "policy type code",
            "start date",
            "end date",
            "claim header id",
            "claim status code",
            "claim type code",
            "policy id",
            "date of claim",
            "date of settlement",
            "amount claimed",
            "amount piad",
            "claim id",
            "document type code",
            "created by staff id",
            "created date",
            "claim stage id",
            "next claim stage id",
            "claim status name",
            "claim status description",
            "claim processing id",
            "claim id",
            "claim outcome code",
            "claim stage id",
            "staff id"
        ],
        "template_feedback": "in step 2 , additionally make sure that amount claimed is equals maximum amount claimed claim headers . do not find for each value of customer details . in step 3 , you should not find the largest of the results . show me all the results .",
        "positive_example": "in step 3 use the \" results of step 2 \" ."
    },
    {
        "db_id": "local_govt_in_alabama",
        "table_names": [
            "services",
            "participants",
            "events",
            "participants in events"
        ],
        "column_names": [
            "service id",
            "service type code",
            "participant id",
            "participant type code",
            "participant details",
            "event id",
            "service id",
            "event details",
            "event id",
            "participant id"
        ],
        "template_feedback": "additionally use the information from the participants in events table besides the participants table . consider the participant details like % dr. % conditions in place of the participant details equals dr. conditions .",
        "positive_example": "replace equals with contains ."
    },
    {
        "db_id": "local_govt_in_alabama",
        "table_names": [
            "services",
            "participants",
            "events",
            "participants in events"
        ],
        "column_names": [
            "service id",
            "service type code",
            "participant id",
            "participant type code",
            "participant details",
            "event id",
            "service id",
            "event details",
            "event id",
            "participant id"
        ],
        "template_feedback": "additionally use the information from the participants in events table besides the participants table . consider the participant details like % dr. % conditions in place of the participant details equals dr. conditions .",
        "positive_example": "you should use contains instead of equals ."
    },
    {
        "db_id": "inn_1",
        "table_names": [
            "rooms",
            "reservations"
        ],
        "column_names": [
            "room id",
            "room name",
            "beds",
            "bed type",
            "max occupancy",
            "base price",
            "decor",
            "code",
            "room",
            "check in",
            "check out",
            "rate",
            "last name",
            "first name",
            "adults",
            "kids"
        ],
        "template_feedback": "additionally make sure that decor equals traditional .",
        "positive_example": "be sure that decoration as customary ."
    },
    {
        "db_id": "tracking_software_problems",
        "table_names": [
            "problem category codes",
            "problem log",
            "problem status codes",
            "product",
            "staff",
            "problems"
        ],
        "column_names": [
            "problem category code",
            "problem category description",
            "problem log id",
            "assigned to staff id",
            "problem id",
            "problem category code",
            "problem status code",
            "log entry date",
            "log entry description",
            "log entry fix",
            "other log details",
            "problem status code",
            "problem status description",
            "product id",
            "product name",
            "product details",
            "staff id",
            "staff first name",
            "staff last name",
            "other staff details",
            "problem id",
            "product id",
            "closure authorised by staff id",
            "reported by staff id",
            "date problem reported",
            "date problem closed",
            "problem description",
            "other problem details"
        ],
        "template_feedback": "additionally use the information from the problems table besides the product table .",
        "positive_example": "you need to search number of difficulties for \" voluptatem \" ."
    },
    {
        "db_id": "music_2",
        "table_names": [
            "songs",
            "albums",
            "band",
            "instruments",
            "performance",
            "track lists",
            "vocals"
        ],
        "column_names": [
            "song id",
            "title",
            "aid",
            "title",
            "year",
            "label",
            "type",
            "id",
            "first name",
            "last name",
            "song id",
            "bandmate id",
            "instrument",
            "song id",
            "bandmate",
            "stage position",
            "album id",
            "position",
            "song id",
            "song id",
            "bandmate",
            "type"
        ],
        "template_feedback": "in step 1 , use performance table in place of instruments table in step 2 , additionally make sure that stage position equals back .",
        "positive_example": "make sure that artist performed back stage ."
    },
    {
        "db_id": "music_2",
        "table_names": [
            "songs",
            "albums",
            "band",
            "instruments",
            "performance",
            "track lists",
            "vocals"
        ],
        "column_names": [
            "song id",
            "title",
            "aid",
            "title",
            "year",
            "label",
            "type",
            "id",
            "first name",
            "last name",
            "song id",
            "bandmate id",
            "instrument",
            "song id",
            "bandmate",
            "stage position",
            "album id",
            "position",
            "song id",
            "song id",
            "bandmate",
            "type"
        ],
        "template_feedback": "in step 1 , use performance table in place of instruments table in step 2 , additionally make sure that stage position equals back .",
        "positive_example": "i want the artist who have performed back stage ."
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "table_names": [
            "reference document types",
            "reference calendar",
            "reference locations",
            "roles",
            "all documents",
            "employees",
            "document locations",
            "documents to be destroyed"
        ],
        "column_names": [
            "document type code",
            "document type name",
            "document type description",
            "calendar date",
            "day number",
            "location code",
            "location name",
            "location description",
            "role code",
            "role name",
            "role description",
            "document id",
            "date stored",
            "document type code",
            "document name",
            "document description",
            "other details",
            "employee id",
            "role code",
            "employee name",
            "gender mfu",
            "date of birth",
            "other details",
            "document id",
            "location code",
            "date in location from",
            "date in locaton to",
            "document id",
            "destruction authorised by employee id",
            "destroyed by employee id",
            "planned destruction date",
            "actual destruction date",
            "other details"
        ],
        "template_feedback": "use reference locations table in place of reference document types table .",
        "positive_example": "from ref locations table , you should provide me total number of locations ."
    },
    {
        "db_id": "network_2",
        "table_names": [
            "person",
            "person friend"
        ],
        "column_names": [
            "name",
            "age",
            "city",
            "gender",
            "job",
            "name",
            "friend",
            "year"
        ],
        "template_feedback": "consider the age is greater than maximum age person whose job equals engineer conditions in place of the age greater than engineer conditions .",
        "positive_example": "make sure to find the total number of people ."
    },
    {
        "db_id": "network_2",
        "table_names": [
            "person",
            "person friend"
        ],
        "column_names": [
            "name",
            "age",
            "city",
            "gender",
            "job",
            "name",
            "friend",
            "year"
        ],
        "template_feedback": "additionally make sure that job equals engineer .",
        "positive_example": "make sure only to count number of engineers ."
    },
    {
        "db_id": "network_2",
        "table_names": [
            "person",
            "person friend"
        ],
        "column_names": [
            "name",
            "age",
            "city",
            "gender",
            "job",
            "name",
            "friend",
            "year"
        ],
        "template_feedback": "additionally make sure that job equals engineer .",
        "positive_example": "you should only determine the number of engineers ."
    },
    {
        "db_id": "flight_company",
        "table_names": [
            "airport",
            "operate company",
            "flight"
        ],
        "column_names": [
            "id",
            "city",
            "country",
            "iata",
            "icao",
            "name",
            "id",
            "name",
            "type",
            "principal activities",
            "incorporated in",
            "group equity shareholding",
            "id",
            "vehicle flight number",
            "date",
            "pilot",
            "velocity",
            "altitude",
            "airport id",
            "company id"
        ],
        "template_feedback": "additionally use the information from the flight table and operate company table besides the airport table . find for each value of airport 's id in place of airport 's name . find airport 's id in place of airport 's name .",
        "positive_example": "make sure to find operating companies in airline industry ."
    },
    {
        "db_id": "flight_company",
        "table_names": [
            "airport",
            "operate company",
            "flight"
        ],
        "column_names": [
            "id",
            "city",
            "country",
            "iata",
            "icao",
            "name",
            "id",
            "name",
            "type",
            "principal activities",
            "incorporated in",
            "group equity shareholding",
            "id",
            "vehicle flight number",
            "date",
            "pilot",
            "velocity",
            "altitude",
            "airport id",
            "company id"
        ],
        "template_feedback": "additionally use the information from the flight table and operate company table besides the airport table . find for each value of airport 's id in place of airport 's name . find airport 's id in place of airport 's name .",
        "positive_example": "confirm that you also search for the companies operating in airline industry ."
    },
    {
        "db_id": "music_2",
        "table_names": [
            "songs",
            "albums",
            "band",
            "instruments",
            "performance",
            "track lists",
            "vocals"
        ],
        "column_names": [
            "song id",
            "title",
            "aid",
            "title",
            "year",
            "label",
            "type",
            "id",
            "first name",
            "last name",
            "song id",
            "bandmate id",
            "instrument",
            "song id",
            "bandmate",
            "stage position",
            "album id",
            "position",
            "song id",
            "song id",
            "bandmate",
            "type"
        ],
        "template_feedback": "in step 1 , use performance table in place of instruments table in step 2 , additionally make sure that stage position equals back .",
        "positive_example": "make sure that performer perform back stage ."
    },
    {
        "db_id": "assets_maintenance",
        "table_names": [
            "third party companies",
            "maintenance contracts",
            "parts",
            "skills",
            "staff",
            "assets",
            "asset parts",
            "maintenance engineers",
            "engineer skills",
            "fault log",
            "engineer visits",
            "part faults",
            "fault log parts",
            "skills required to fix"
        ],
        "column_names": [
            "company id",
            "company type",
            "company name",
            "company address",
            "other company details",
            "maintenance contract id",
            "maintenance contract company id",
            "contract start date",
            "contract end date",
            "other contract details",
            "part id",
            "part name",
            "chargeable yn",
            "chargeable amount",
            "other part details",
            "skill id",
            "skill code",
            "skill description",
            "staff id",
            "staff name",
            "gender",
            "other staff details",
            "asset id",
            "maintenance contract id",
            "supplier company id",
            "asset details",
            "asset make",
            "asset model",
            "asset acquired date",
            "asset disposed date",
            "other asset details",
            "asset id",
            "part id",
            "engineer id",
            "company id",
            "first name",
            "last name",
            "other details",
            "engineer id",
            "skill id",
            "fault log entry id",
            "asset id",
            "recorded by staff id",
            "fault log entry datetime",
            "fault description",
            "other fault details",
            "engineer visit id",
            "contact staff id",
            "engineer id",
            "fault log entry id",
            "fault status",
            "visit start datetime",
            "visit end datetime",
            "other visit details",
            "part fault id",
            "part id",
            "fault short name",
            "fault description",
            "other fault details",
            "fault log entry id",
            "part fault id",
            "fault status",
            "part fault id",
            "skill id"
        ],
        "template_feedback": "find asset model and asset make in place of other asset details .",
        "positive_example": "you should attach make and model of asset and drop details of other part ."
    },
    {
        "db_id": "tracking_software_problems",
        "table_names": [
            "problem category codes",
            "problem log",
            "problem status codes",
            "product",
            "staff",
            "problems"
        ],
        "column_names": [
            "problem category code",
            "problem category description",
            "problem log id",
            "assigned to staff id",
            "problem id",
            "problem category code",
            "problem status code",
            "log entry date",
            "log entry description",
            "log entry fix",
            "other log details",
            "problem status code",
            "problem status description",
            "product id",
            "product name",
            "product details",
            "staff id",
            "staff first name",
            "staff last name",
            "other staff details",
            "problem id",
            "product id",
            "closure authorised by staff id",
            "reported by staff id",
            "date problem reported",
            "date problem closed",
            "problem description",
            "other problem details"
        ],
        "template_feedback": "in step 2 , consider the staff last name equals bosco conditions in place of the staff last name equals champlin conditions . in step 4 , additionally make sure that staff last name equals champlin .",
        "positive_example": "in step 3 , replace step3 with step 1 , staff full name equals lacey bosco and kenton champlin ."
    },
    {
        "db_id": "tracking_software_problems",
        "table_names": [
            "problem category codes",
            "problem log",
            "problem status codes",
            "product",
            "staff",
            "problems"
        ],
        "column_names": [
            "problem category code",
            "problem category description",
            "problem log id",
            "assigned to staff id",
            "problem id",
            "problem category code",
            "problem status code",
            "log entry date",
            "log entry description",
            "log entry fix",
            "other log details",
            "problem status code",
            "problem status description",
            "product id",
            "product name",
            "product details",
            "staff id",
            "staff first name",
            "staff last name",
            "other staff details",
            "problem id",
            "product id",
            "closure authorised by staff id",
            "reported by staff id",
            "date problem reported",
            "date problem closed",
            "problem description",
            "other problem details"
        ],
        "template_feedback": "in step 2 , consider the staff last name equals bosco conditions in place of the staff last name equals champlin conditions . in step 4 , additionally make sure that staff last name equals champlin .",
        "positive_example": "substitute step 1 in place of step 3 and make sure the staff 's full is lacey bosco and kenton champlin ."
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "table_names": [
            "reference document types",
            "reference calendar",
            "reference locations",
            "roles",
            "all documents",
            "employees",
            "document locations",
            "documents to be destroyed"
        ],
        "column_names": [
            "document type code",
            "document type name",
            "document type description",
            "calendar date",
            "day number",
            "location code",
            "location name",
            "location description",
            "role code",
            "role name",
            "role description",
            "document id",
            "date stored",
            "document type code",
            "document name",
            "document description",
            "other details",
            "employee id",
            "role code",
            "employee name",
            "gender mfu",
            "date of birth",
            "other details",
            "document id",
            "location code",
            "date in location from",
            "date in locaton to",
            "document id",
            "destruction authorised by employee id",
            "destroyed by employee id",
            "planned destruction date",
            "actual destruction date",
            "other details"
        ],
        "template_feedback": "in step 1 , do not use the all documents table . in step 2 , do not return document name .",
        "positive_example": "need to make sure employees authorised destruction and destroyed corresponding documents ."
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "table_names": [
            "reference document types",
            "reference calendar",
            "reference locations",
            "roles",
            "all documents",
            "employees",
            "document locations",
            "documents to be destroyed"
        ],
        "column_names": [
            "document type code",
            "document type name",
            "document type description",
            "calendar date",
            "day number",
            "location code",
            "location name",
            "location description",
            "role code",
            "role name",
            "role description",
            "document id",
            "date stored",
            "document type code",
            "document name",
            "document description",
            "other details",
            "employee id",
            "role code",
            "employee name",
            "gender mfu",
            "date of birth",
            "other details",
            "document id",
            "location code",
            "date in location from",
            "date in locaton to",
            "document id",
            "destruction authorised by employee id",
            "destroyed by employee id",
            "planned destruction date",
            "actual destruction date",
            "other details"
        ],
        "template_feedback": "in step 1 , do not use the all documents table . in step 2 , do not return document name .",
        "positive_example": "you should verify that documents are destroyed by employees and also , confirm that destruction is authorized by those employees ."
    },
    {
        "db_id": "hr_1",
        "table_names": [
            "regions",
            "countries",
            "departments",
            "jobs",
            "employees",
            "job history",
            "locations"
        ],
        "column_names": [
            "region id",
            "region name",
            "country id",
            "country name",
            "region id",
            "department id",
            "department name",
            "manager id",
            "location id",
            "job id",
            "job title",
            "min salary",
            "max salary",
            "employee id",
            "first name",
            "last name",
            "email",
            "phone number",
            "hire date",
            "job id",
            "salary",
            "commission pct",
            "manager id",
            "department id",
            "employee id",
            "start date",
            "end date",
            "job id",
            "department id",
            "location id",
            "street address",
            "postal code",
            "city",
            "state province",
            "country id"
        ],
        "template_feedback": "use employees table and departments table in place of regions table . additionally make sure that employee id equals departments 's manager id . make sure no repetition in the results .",
        "positive_example": "need to find all the rows for managers ."
    },
    {
        "db_id": "hr_1",
        "table_names": [
            "regions",
            "countries",
            "departments",
            "jobs",
            "employees",
            "job history",
            "locations"
        ],
        "column_names": [
            "region id",
            "region name",
            "country id",
            "country name",
            "region id",
            "department id",
            "department name",
            "manager id",
            "location id",
            "job id",
            "job title",
            "min salary",
            "max salary",
            "employee id",
            "first name",
            "last name",
            "email",
            "phone number",
            "hire date",
            "job id",
            "salary",
            "commission pct",
            "manager id",
            "department id",
            "employee id",
            "start date",
            "end date",
            "job id",
            "department id",
            "location id",
            "street address",
            "postal code",
            "city",
            "state province",
            "country id"
        ],
        "template_feedback": "use employees table and departments table in place of regions table . additionally make sure that employee id equals departments 's manager id . make sure no repetition in the results .",
        "positive_example": "look for each and every rows for managers ."
    },
    {
        "db_id": "network_2",
        "table_names": [
            "person",
            "person friend"
        ],
        "column_names": [
            "name",
            "age",
            "city",
            "gender",
            "job",
            "name",
            "friend",
            "year"
        ],
        "template_feedback": "in step 2 , additionally use the information from the person friend table besides the person table . additionally make sure that job equals student .",
        "positive_example": "replace person table with person friend in step 2 ."
    },
    {
        "db_id": "college_3",
        "table_names": [
            "student",
            "faculty",
            "department",
            "member of",
            "course",
            "minor in",
            "enrolled in",
            "grade conversion"
        ],
        "column_names": [
            "student id",
            "last name",
            "first name",
            "age",
            "sex",
            "major",
            "advisor",
            "city code",
            "faculty id",
            "last name",
            "first name",
            "rank",
            "sex",
            "phone",
            "room",
            "building",
            "department number",
            "division",
            "department name",
            "room",
            "building",
            "department phone",
            "faculty id",
            "department number",
            "appt type",
            "course id",
            "course name",
            "credits",
            "instructor",
            "days",
            "hours",
            "department number",
            "student id",
            "department number",
            "student id",
            "course id",
            "grade",
            "letter grade",
            "grade point"
        ],
        "template_feedback": "in step 1 , do not use the member of table and department table . in step 2 , find faculty 's room in place of department 's room .",
        "positive_example": "i want the room of faculty 's ."
    },
    {
        "db_id": "tracking_software_problems",
        "table_names": [
            "problem category codes",
            "problem log",
            "problem status codes",
            "product",
            "staff",
            "problems"
        ],
        "column_names": [
            "problem category code",
            "problem category description",
            "problem log id",
            "assigned to staff id",
            "problem id",
            "problem category code",
            "problem status code",
            "log entry date",
            "log entry description",
            "log entry fix",
            "other log details",
            "problem status code",
            "problem status description",
            "product id",
            "product name",
            "product details",
            "staff id",
            "staff first name",
            "staff last name",
            "other staff details",
            "problem id",
            "product id",
            "closure authorised by staff id",
            "reported by staff id",
            "date problem reported",
            "date problem closed",
            "problem description",
            "other problem details"
        ],
        "template_feedback": "in step 2 , consider the staff last name equals bosco conditions in place of the staff first name equals champlin conditions . in step 4 , additionally make sure that staff last name equals champlin .",
        "positive_example": "in step 3 , replace step3 with step 1. full names of staff equals lacey bosco and kenton champlin ."
    },
    {
        "db_id": "tracking_software_problems",
        "table_names": [
            "problem category codes",
            "problem log",
            "problem status codes",
            "product",
            "staff",
            "problems"
        ],
        "column_names": [
            "problem category code",
            "problem category description",
            "problem log id",
            "assigned to staff id",
            "problem id",
            "problem category code",
            "problem status code",
            "log entry date",
            "log entry description",
            "log entry fix",
            "other log details",
            "problem status code",
            "problem status description",
            "product id",
            "product name",
            "product details",
            "staff id",
            "staff first name",
            "staff last name",
            "other staff details",
            "problem id",
            "product id",
            "closure authorised by staff id",
            "reported by staff id",
            "date problem reported",
            "date problem closed",
            "problem description",
            "other problem details"
        ],
        "template_feedback": "in step 2 , consider the staff last name equals bosco conditions in place of the staff first name equals champlin conditions . in step 4 , additionally make sure that staff last name equals champlin .",
        "positive_example": "in step 3 , you need to use step 1 . make sure lacey bosco and kenton champlin should be staff full name ."
    },
    {
        "db_id": "network_2",
        "table_names": [
            "person",
            "person friend"
        ],
        "column_names": [
            "name",
            "age",
            "city",
            "gender",
            "job",
            "name",
            "friend",
            "year"
        ],
        "template_feedback": "in step 1 , do not use the person friend table . in step 2 , consider the age is greater than minimum age person whose job equals engineer conditions in place of the age greater than engineer conditions . in step 3 , do not find for each value of friend . in step 4 , order the results ascending by age .",
        "positive_example": "the steps are completely unrelated to questions . hence all the steps are defective ."
    },
    {
        "db_id": "network_2",
        "table_names": [
            "person",
            "person friend"
        ],
        "column_names": [
            "name",
            "age",
            "city",
            "gender",
            "job",
            "name",
            "friend",
            "year"
        ],
        "template_feedback": "in step 1 , do not use the person friend table . in step 2 , consider the age is greater than minimum age person whose job equals engineer conditions in place of the age greater than engineer conditions . in step 3 , do not find for each value of friend . in step 4 , order the results ascending by age .",
        "positive_example": "all the steps are flawed as they are not related to questions ."
    },
    {
        "db_id": "assets_maintenance",
        "table_names": [
            "third party companies",
            "maintenance contracts",
            "parts",
            "skills",
            "staff",
            "assets",
            "asset parts",
            "maintenance engineers",
            "engineer skills",
            "fault log",
            "engineer visits",
            "part faults",
            "fault log parts",
            "skills required to fix"
        ],
        "column_names": [
            "company id",
            "company type",
            "company name",
            "company address",
            "other company details",
            "maintenance contract id",
            "maintenance contract company id",
            "contract start date",
            "contract end date",
            "other contract details",
            "part id",
            "part name",
            "chargeable yn",
            "chargeable amount",
            "other part details",
            "skill id",
            "skill code",
            "skill description",
            "staff id",
            "staff name",
            "gender",
            "other staff details",
            "asset id",
            "maintenance contract id",
            "supplier company id",
            "asset details",
            "asset make",
            "asset model",
            "asset acquired date",
            "asset disposed date",
            "other asset details",
            "asset id",
            "part id",
            "engineer id",
            "company id",
            "first name",
            "last name",
            "other details",
            "engineer id",
            "skill id",
            "fault log entry id",
            "asset id",
            "recorded by staff id",
            "fault log entry datetime",
            "fault description",
            "other fault details",
            "engineer visit id",
            "contact staff id",
            "engineer id",
            "fault log entry id",
            "fault status",
            "visit start datetime",
            "visit end datetime",
            "other visit details",
            "part fault id",
            "part id",
            "fault short name",
            "fault description",
            "other fault details",
            "fault log entry id",
            "part fault id",
            "fault status",
            "part fault id",
            "skill id"
        ],
        "template_feedback": "in step 2 , order the results by contract start date in place of contract end date .",
        "positive_example": "you should put start date in replacement of end date of contract ."
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "table_names": [
            "reference document types",
            "reference budget codes",
            "projects",
            "documents",
            "statements",
            "documents with expenses",
            "accounts"
        ],
        "column_names": [
            "document type code",
            "document type name",
            "document type description",
            "budget type code",
            "budget type description",
            "project id",
            "project details",
            "document id",
            "document type code",
            "project id",
            "document date",
            "document name",
            "document description",
            "other details",
            "statement id",
            "statement details",
            "document id",
            "budget type code",
            "document details",
            "account id",
            "statement id",
            "account details"
        ],
        "template_feedback": "in step 1 , additionally use the information from the documents table besides the projects table .",
        "positive_example": "check that project has two extra records ."
    },
    {
        "db_id": "network_2",
        "table_names": [
            "person",
            "person friend"
        ],
        "column_names": [
            "name",
            "age",
            "city",
            "gender",
            "job",
            "name",
            "friend",
            "year"
        ],
        "template_feedback": "additionally make sure that age less than 40 .",
        "positive_example": "to be ensure you have to ask person is below 40 years ."
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "table_names": [
            "reference document types",
            "reference calendar",
            "reference locations",
            "roles",
            "all documents",
            "employees",
            "document locations",
            "documents to be destroyed"
        ],
        "column_names": [
            "document type code",
            "document type name",
            "document type description",
            "calendar date",
            "day number",
            "location code",
            "location name",
            "location description",
            "role code",
            "role name",
            "role description",
            "document id",
            "date stored",
            "document type code",
            "document name",
            "document description",
            "other details",
            "employee id",
            "role code",
            "employee name",
            "gender mfu",
            "date of birth",
            "other details",
            "document id",
            "location code",
            "date in location from",
            "date in locaton to",
            "document id",
            "destruction authorised by employee id",
            "destroyed by employee id",
            "planned destruction date",
            "actual destruction date",
            "other details"
        ],
        "template_feedback": "in step 1 , use all documents table in place of documents to be destroyed table",
        "positive_example": "replace actual destruction date with date stored ."
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "table_names": [
            "reference document types",
            "reference calendar",
            "reference locations",
            "roles",
            "all documents",
            "employees",
            "document locations",
            "documents to be destroyed"
        ],
        "column_names": [
            "document type code",
            "document type name",
            "document type description",
            "calendar date",
            "day number",
            "location code",
            "location name",
            "location description",
            "role code",
            "role name",
            "role description",
            "document id",
            "date stored",
            "document type code",
            "document name",
            "document description",
            "other details",
            "employee id",
            "role code",
            "employee name",
            "gender mfu",
            "date of birth",
            "other details",
            "document id",
            "location code",
            "date in location from",
            "date in locaton to",
            "document id",
            "destruction authorised by employee id",
            "destroyed by employee id",
            "planned destruction date",
            "actual destruction date",
            "other details"
        ],
        "template_feedback": "in step 1 , use all documents table in place of documents to be destroyed table",
        "positive_example": "i want stored date ."
    },
    {
        "db_id": "inn_1",
        "table_names": [
            "rooms",
            "reservations"
        ],
        "column_names": [
            "room id",
            "room name",
            "beds",
            "bed type",
            "max occupancy",
            "base price",
            "decor",
            "code",
            "room",
            "check in",
            "check out",
            "rate",
            "last name",
            "first name",
            "adults",
            "kids"
        ],
        "template_feedback": "in step 1 , do not use the reservations table . in step 2 , order the results by max occupancy in place of adults .",
        "positive_example": "i want the maximum occupancy ."
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "table_names": [
            "reference document types",
            "reference calendar",
            "reference locations",
            "roles",
            "all documents",
            "employees",
            "document locations",
            "documents to be destroyed"
        ],
        "column_names": [
            "document type code",
            "document type name",
            "document type description",
            "calendar date",
            "day number",
            "location code",
            "location name",
            "location description",
            "role code",
            "role name",
            "role description",
            "document id",
            "date stored",
            "document type code",
            "document name",
            "document description",
            "other details",
            "employee id",
            "role code",
            "employee name",
            "gender mfu",
            "date of birth",
            "other details",
            "document id",
            "location code",
            "date in location from",
            "date in locaton to",
            "document id",
            "destruction authorised by employee id",
            "destroyed by employee id",
            "planned destruction date",
            "actual destruction date",
            "other details"
        ],
        "template_feedback": "additionally make sure that document type code equals rv .",
        "positive_example": "you need to ensure that code of document type is rv ."
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "table_names": [
            "reference document types",
            "reference calendar",
            "reference locations",
            "roles",
            "all documents",
            "employees",
            "document locations",
            "documents to be destroyed"
        ],
        "column_names": [
            "document type code",
            "document type name",
            "document type description",
            "calendar date",
            "day number",
            "location code",
            "location name",
            "location description",
            "role code",
            "role name",
            "role description",
            "document id",
            "date stored",
            "document type code",
            "document name",
            "document description",
            "other details",
            "employee id",
            "role code",
            "employee name",
            "gender mfu",
            "date of birth",
            "other details",
            "document id",
            "location code",
            "date in location from",
            "date in locaton to",
            "document id",
            "destruction authorised by employee id",
            "destroyed by employee id",
            "planned destruction date",
            "actual destruction date",
            "other details"
        ],
        "template_feedback": "in step 1 , do not use the reference locations table .",
        "positive_example": "replace ref locations 's location code with document locations 's location code"
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "table_names": [
            "reference document types",
            "reference calendar",
            "reference locations",
            "roles",
            "all documents",
            "employees",
            "document locations",
            "documents to be destroyed"
        ],
        "column_names": [
            "document type code",
            "document type name",
            "document type description",
            "calendar date",
            "day number",
            "location code",
            "location name",
            "location description",
            "role code",
            "role name",
            "role description",
            "document id",
            "date stored",
            "document type code",
            "document name",
            "document description",
            "other details",
            "employee id",
            "role code",
            "employee name",
            "gender mfu",
            "date of birth",
            "other details",
            "document id",
            "location code",
            "date in location from",
            "date in locaton to",
            "document id",
            "destruction authorised by employee id",
            "destroyed by employee id",
            "planned destruction date",
            "actual destruction date",
            "other details"
        ],
        "template_feedback": "in step 1 , do not use the reference locations table .",
        "positive_example": "you need to find location code of document locations ."
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "table_names": [
            "reference document types",
            "reference budget codes",
            "projects",
            "documents",
            "statements",
            "documents with expenses",
            "accounts"
        ],
        "column_names": [
            "document type code",
            "document type name",
            "document type description",
            "budget type code",
            "budget type description",
            "project id",
            "project details",
            "document id",
            "document type code",
            "project id",
            "document date",
            "document name",
            "document description",
            "other details",
            "statement id",
            "statement details",
            "document id",
            "budget type code",
            "document details",
            "account id",
            "statement id",
            "account details"
        ],
        "template_feedback": "in step 1 , use documents table in place of reference document types table .",
        "positive_example": "replace documents with expenses table with documents table for both ."
    },
    {
        "db_id": "music_4",
        "table_names": [
            "artist",
            "volume",
            "music festival"
        ],
        "column_names": [
            "artist id",
            "artist",
            "age",
            "famous title",
            "famous release date",
            "volume id",
            "volume issue",
            "issue date",
            "weeks on top",
            "song",
            "artist id",
            "id",
            "music festival",
            "date of ceremony",
            "category",
            "volume",
            "result"
        ],
        "template_feedback": "use the smallest in place of largest .",
        "positive_example": "replace largest with smallest ."
    },
    {
        "db_id": "music_4",
        "table_names": [
            "artist",
            "volume",
            "music festival"
        ],
        "column_names": [
            "artist id",
            "artist",
            "age",
            "famous title",
            "famous release date",
            "volume id",
            "volume issue",
            "issue date",
            "weeks on top",
            "song",
            "artist id",
            "id",
            "music festival",
            "date of ceremony",
            "category",
            "volume",
            "result"
        ],
        "template_feedback": "use the smallest in place of largest .",
        "positive_example": "please consider an replacement of 'largest ' with the 'smallest ' ."
    },
    {
        "db_id": "city_record",
        "table_names": [
            "city",
            "match",
            "temperature",
            "hosting city"
        ],
        "column_names": [
            "city id",
            "city",
            "hanzi",
            "hanyu pinyin",
            "regional population",
            "gdp",
            "match id",
            "date",
            "venue",
            "score",
            "result",
            "competition",
            "city id",
            "jan",
            "feb",
            "mar",
            "apr",
            "jun",
            "jul",
            "aug",
            "sep",
            "oct",
            "nov",
            "dec",
            "year",
            "match id",
            "host city"
        ],
        "template_feedback": "in step 1 , do not use the city table . in step 2 , find host city in place of city .",
        "positive_example": "also find city id of city table that have hosted some events ."
    },
    {
        "db_id": "school_player",
        "table_names": [
            "school",
            "school details",
            "school performance",
            "player"
        ],
        "column_names": [
            "school id",
            "school",
            "location",
            "enrollment",
            "founded",
            "denomination",
            "boys or girls",
            "day or boarding",
            "year entered competition",
            "school colors",
            "school id",
            "nickname",
            "colors",
            "league",
            "class",
            "division",
            "school id",
            "school year",
            "class a",
            "class aa",
            "player id",
            "player",
            "team",
            "age",
            "position",
            "school id"
        ],
        "template_feedback": "use the largest in place of smallest .",
        "positive_example": "replace smallest value of age with largest value of age ."
    },
    {
        "db_id": "school_player",
        "table_names": [
            "school",
            "school details",
            "school performance",
            "player"
        ],
        "column_names": [
            "school id",
            "school",
            "location",
            "enrollment",
            "founded",
            "denomination",
            "boys or girls",
            "day or boarding",
            "year entered competition",
            "school colors",
            "school id",
            "nickname",
            "colors",
            "league",
            "class",
            "division",
            "school id",
            "school year",
            "class a",
            "class aa",
            "player id",
            "player",
            "team",
            "age",
            "position",
            "school id"
        ],
        "template_feedback": "use the largest in place of smallest .",
        "positive_example": "i want highest value of age ."
    },
    {
        "db_id": "school_player",
        "table_names": [
            "school",
            "school details",
            "school performance",
            "player"
        ],
        "column_names": [
            "school id",
            "school",
            "location",
            "enrollment",
            "founded",
            "denomination",
            "boys or girls",
            "day or boarding",
            "year entered competition",
            "school colors",
            "school id",
            "nickname",
            "colors",
            "league",
            "class",
            "division",
            "school id",
            "school year",
            "class a",
            "class aa",
            "player id",
            "player",
            "team",
            "age",
            "position",
            "school id"
        ],
        "template_feedback": "in step 1 , consider the founded less than 1890 conditions in place of the founded greater than 1890 conditions . in step 2 , consider the founded greater than 1900 conditions in place of the founded less than 1900 conditions .",
        "positive_example": "replace greater than to less than and less than to greater than in step 1 and 2 ."
    },
    {
        "db_id": "school_player",
        "table_names": [
            "school",
            "school details",
            "school performance",
            "player"
        ],
        "column_names": [
            "school id",
            "school",
            "location",
            "enrollment",
            "founded",
            "denomination",
            "boys or girls",
            "day or boarding",
            "year entered competition",
            "school colors",
            "school id",
            "nickname",
            "colors",
            "league",
            "class",
            "division",
            "school id",
            "school year",
            "class a",
            "class aa",
            "player id",
            "player",
            "team",
            "age",
            "position",
            "school id"
        ],
        "template_feedback": "in step 1 , consider the founded less than 1890 conditions in place of the founded greater than 1890 conditions . in step 2 , consider the founded greater than 1900 conditions in place of the founded less than 1900 conditions .",
        "positive_example": "in step 1 and 2 , use smaller than and higher than ."
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "table_names": [
            "reference document types",
            "reference calendar",
            "reference locations",
            "roles",
            "all documents",
            "employees",
            "document locations",
            "documents to be destroyed"
        ],
        "column_names": [
            "document type code",
            "document type name",
            "document type description",
            "calendar date",
            "day number",
            "location code",
            "location name",
            "location description",
            "role code",
            "role name",
            "role description",
            "document id",
            "date stored",
            "document type code",
            "document name",
            "document description",
            "other details",
            "employee id",
            "role code",
            "employee name",
            "gender mfu",
            "date of birth",
            "other details",
            "document id",
            "location code",
            "date in location from",
            "date in locaton to",
            "document id",
            "destruction authorised by employee id",
            "destroyed by employee id",
            "planned destruction date",
            "actual destruction date",
            "other details"
        ],
        "template_feedback": "in step 1 , do not use the reference locations table .",
        "positive_example": "should correspond rows with document id ."
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "table_names": [
            "reference document types",
            "reference calendar",
            "reference locations",
            "roles",
            "all documents",
            "employees",
            "document locations",
            "documents to be destroyed"
        ],
        "column_names": [
            "document type code",
            "document type name",
            "document type description",
            "calendar date",
            "day number",
            "location code",
            "location name",
            "location description",
            "role code",
            "role name",
            "role description",
            "document id",
            "date stored",
            "document type code",
            "document name",
            "document description",
            "other details",
            "employee id",
            "role code",
            "employee name",
            "gender mfu",
            "date of birth",
            "other details",
            "document id",
            "location code",
            "date in location from",
            "date in locaton to",
            "document id",
            "destruction authorised by employee id",
            "destroyed by employee id",
            "planned destruction date",
            "actual destruction date",
            "other details"
        ],
        "template_feedback": "in step 1 , do not use the reference locations table .",
        "positive_example": "you have to correlate id of document with rows ."
    },
    {
        "db_id": "company_office",
        "table_names": [
            "buildings",
            "companies",
            "office locations"
        ],
        "column_names": [
            "id",
            "name",
            "city",
            "height",
            "stories",
            "status",
            "id",
            "name",
            "headquarters",
            "industry",
            "sales billion",
            "profits billion",
            "assets billion",
            "market value billion",
            "building id",
            "company id",
            "move in year"
        ],
        "template_feedback": "find assets billion in place of industry .",
        "positive_example": "i want property billion instead of company ."
    },
    {
        "db_id": "network_2",
        "table_names": [
            "person",
            "person friend"
        ],
        "column_names": [
            "name",
            "age",
            "city",
            "gender",
            "job",
            "name",
            "friend",
            "year"
        ],
        "template_feedback": "additionally use the information from the person table besides the person friend table . additionally make sure that person 's name equals alice and person friend 's name not equals alice . make sure no repetition in the results .",
        "positive_example": "make sure friends of alice 's friend ."
    },
    {
        "db_id": "network_2",
        "table_names": [
            "person",
            "person friend"
        ],
        "column_names": [
            "name",
            "age",
            "city",
            "gender",
            "job",
            "name",
            "friend",
            "year"
        ],
        "template_feedback": "additionally use the information from the person table besides the person friend table . additionally make sure that person 's name equals alice and person friend 's name not equals alice . make sure no repetition in the results .",
        "positive_example": "could you validate friends of alice 's friend ."
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "table_names": [
            "reference document types",
            "reference calendar",
            "reference locations",
            "roles",
            "all documents",
            "employees",
            "document locations",
            "documents to be destroyed"
        ],
        "column_names": [
            "document type code",
            "document type name",
            "document type description",
            "calendar date",
            "day number",
            "location code",
            "location name",
            "location description",
            "role code",
            "role name",
            "role description",
            "document id",
            "date stored",
            "document type code",
            "document name",
            "document description",
            "other details",
            "employee id",
            "role code",
            "employee name",
            "gender mfu",
            "date of birth",
            "other details",
            "document id",
            "location code",
            "date in location from",
            "date in locaton to",
            "document id",
            "destruction authorised by employee id",
            "destroyed by employee id",
            "planned destruction date",
            "actual destruction date",
            "other details"
        ],
        "template_feedback": "use reference calendar table in place of reference document types table .",
        "positive_example": "you should put ref calendar table instead of ref document types table ."
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "table_names": [
            "reference document types",
            "reference calendar",
            "reference locations",
            "roles",
            "all documents",
            "employees",
            "document locations",
            "documents to be destroyed"
        ],
        "column_names": [
            "document type code",
            "document type name",
            "document type description",
            "calendar date",
            "day number",
            "location code",
            "location name",
            "location description",
            "role code",
            "role name",
            "role description",
            "document id",
            "date stored",
            "document type code",
            "document name",
            "document description",
            "other details",
            "employee id",
            "role code",
            "employee name",
            "gender mfu",
            "date of birth",
            "other details",
            "document id",
            "location code",
            "date in location from",
            "date in locaton to",
            "document id",
            "destruction authorised by employee id",
            "destroyed by employee id",
            "planned destruction date",
            "actual destruction date",
            "other details"
        ],
        "template_feedback": "in step 1 , do not use the documents to be destroyed table and all documents table .",
        "positive_example": "replace actual destruction date with date in locaton to of document locations table ."
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "table_names": [
            "reference document types",
            "reference calendar",
            "reference locations",
            "roles",
            "all documents",
            "employees",
            "document locations",
            "documents to be destroyed"
        ],
        "column_names": [
            "document type code",
            "document type name",
            "document type description",
            "calendar date",
            "day number",
            "location code",
            "location name",
            "location description",
            "role code",
            "role name",
            "role description",
            "document id",
            "date stored",
            "document type code",
            "document name",
            "document description",
            "other details",
            "employee id",
            "role code",
            "employee name",
            "gender mfu",
            "date of birth",
            "other details",
            "document id",
            "location code",
            "date in location from",
            "date in locaton to",
            "document id",
            "destruction authorised by employee id",
            "destroyed by employee id",
            "planned destruction date",
            "actual destruction date",
            "other details"
        ],
        "template_feedback": "in step 1 , do not use the documents to be destroyed table and all documents table .",
        "positive_example": "in table of document locations , you need to substitute date in location to rather than actual destruction date ."
    },
    {
        "db_id": "music_2",
        "table_names": [
            "songs",
            "albums",
            "band",
            "instruments",
            "performance",
            "track lists",
            "vocals"
        ],
        "column_names": [
            "song id",
            "title",
            "aid",
            "title",
            "year",
            "label",
            "type",
            "id",
            "first name",
            "last name",
            "song id",
            "bandmate id",
            "instrument",
            "song id",
            "bandmate",
            "stage position",
            "album id",
            "position",
            "song id",
            "song id",
            "bandmate",
            "type"
        ],
        "template_feedback": "in step 1 , additionally use the information from the vocals table besides the songs table . find for each value of vocals 's song id in place of title .",
        "positive_example": "you need to check that songs has highest voiced ."
    },
    {
        "db_id": "assets_maintenance",
        "table_names": [
            "third party companies",
            "maintenance contracts",
            "parts",
            "skills",
            "staff",
            "assets",
            "asset parts",
            "maintenance engineers",
            "engineer skills",
            "fault log",
            "engineer visits",
            "part faults",
            "fault log parts",
            "skills required to fix"
        ],
        "column_names": [
            "company id",
            "company type",
            "company name",
            "company address",
            "other company details",
            "maintenance contract id",
            "maintenance contract company id",
            "contract start date",
            "contract end date",
            "other contract details",
            "part id",
            "part name",
            "chargeable yn",
            "chargeable amount",
            "other part details",
            "skill id",
            "skill code",
            "skill description",
            "staff id",
            "staff name",
            "gender",
            "other staff details",
            "asset id",
            "maintenance contract id",
            "supplier company id",
            "asset details",
            "asset make",
            "asset model",
            "asset acquired date",
            "asset disposed date",
            "other asset details",
            "asset id",
            "part id",
            "engineer id",
            "company id",
            "first name",
            "last name",
            "other details",
            "engineer id",
            "skill id",
            "fault log entry id",
            "asset id",
            "recorded by staff id",
            "fault log entry datetime",
            "fault description",
            "other fault details",
            "engineer visit id",
            "contact staff id",
            "engineer id",
            "fault log entry id",
            "fault status",
            "visit start datetime",
            "visit end datetime",
            "other visit details",
            "part fault id",
            "part id",
            "fault short name",
            "fault description",
            "other fault details",
            "fault log entry id",
            "part fault id",
            "fault status",
            "part fault id",
            "skill id"
        ],
        "template_feedback": "in step 1 , use fault log parts table and fault log table in place of part faults table , skills required to fix table , and skills table in step 2 , find for each value of fault log 's fault log entry id in place of part faults 's part fault id . in step 3 , find fault log entry datetime , fault log 's fault log entry id , and fault log 's fault description in place of part faults 's part fault id , skill description , and part id .",
        "positive_example": "you only need to determine the fault 's log entry id , description and date/time of log entry ."
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "table_names": [
            "reference document types",
            "reference budget codes",
            "projects",
            "documents",
            "statements",
            "documents with expenses",
            "accounts"
        ],
        "column_names": [
            "document type code",
            "document type name",
            "document type description",
            "budget type code",
            "budget type description",
            "project id",
            "project details",
            "document id",
            "document type code",
            "project id",
            "document date",
            "document name",
            "document description",
            "other details",
            "statement id",
            "statement details",
            "document id",
            "budget type code",
            "document details",
            "account id",
            "statement id",
            "account details"
        ],
        "template_feedback": "in step 2 , find for each value of project id in place of document id .",
        "positive_example": "should be corresponding rows to each value of product id ."
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "table_names": [
            "reference document types",
            "reference budget codes",
            "projects",
            "documents",
            "statements",
            "documents with expenses",
            "accounts"
        ],
        "column_names": [
            "document type code",
            "document type name",
            "document type description",
            "budget type code",
            "budget type description",
            "project id",
            "project details",
            "document id",
            "document type code",
            "project id",
            "document date",
            "document name",
            "document description",
            "other details",
            "statement id",
            "statement details",
            "document id",
            "budget type code",
            "document details",
            "account id",
            "statement id",
            "account details"
        ],
        "template_feedback": "in step 2 , find for each value of project id in place of document id .",
        "positive_example": "find the rows corresponding to all the value of product id ."
    },
    {
        "db_id": "school_player",
        "table_names": [
            "school",
            "school details",
            "school performance",
            "player"
        ],
        "column_names": [
            "school id",
            "school",
            "location",
            "enrollment",
            "founded",
            "denomination",
            "boys or girls",
            "day or boarding",
            "year entered competition",
            "school colors",
            "school id",
            "nickname",
            "colors",
            "league",
            "class",
            "division",
            "school id",
            "school year",
            "class a",
            "class aa",
            "player id",
            "player",
            "team",
            "age",
            "position",
            "school id"
        ],
        "template_feedback": "find for each value of denomination in place of school id . find denomination in place of boys or girls .",
        "positive_example": "i want grade rather than id of school , and also need to check the total numbers of school affiliated with it ."
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "table_names": [
            "reference document types",
            "reference budget codes",
            "projects",
            "documents",
            "statements",
            "documents with expenses",
            "accounts"
        ],
        "column_names": [
            "document type code",
            "document type name",
            "document type description",
            "budget type code",
            "budget type description",
            "project id",
            "project details",
            "document id",
            "document type code",
            "project id",
            "document date",
            "document name",
            "document description",
            "other details",
            "statement id",
            "statement details",
            "document id",
            "budget type code",
            "document details",
            "account id",
            "statement id",
            "account details"
        ],
        "template_feedback": "in step 1 , do not find for each value of account details . in step 2 , do not return account id . find maximum account details in place of account details . you should not find the largest of the results . show me all the results . in step 3 , additionally make sure that account details like % 5 % . do not find for each value of account details . in step 4 , you should not find the largest of the results . show me all the results . return the rows in any of the results of step 2 and the results of step 4 .",
        "positive_example": "use step 2 in place of step 4 and character 5 must be there in details of account ."
    },
    {
        "db_id": "club_1",
        "table_names": [
            "student",
            "club",
            "member of club"
        ],
        "column_names": [
            "student id",
            "last name",
            "first name",
            "age",
            "sex",
            "major",
            "advisor",
            "city code",
            "club id",
            "club name",
            "club description",
            "club location",
            "student id",
            "club id",
            "position"
        ],
        "template_feedback": "additionally use the information from the member of club table and club table besides the student table .",
        "positive_example": "you need to check in which linda smith is a member of association ."
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "table_names": [
            "reference document types",
            "reference calendar",
            "reference locations",
            "roles",
            "all documents",
            "employees",
            "document locations",
            "documents to be destroyed"
        ],
        "column_names": [
            "document type code",
            "document type name",
            "document type description",
            "calendar date",
            "day number",
            "location code",
            "location name",
            "location description",
            "role code",
            "role name",
            "role description",
            "document id",
            "date stored",
            "document type code",
            "document name",
            "document description",
            "other details",
            "employee id",
            "role code",
            "employee name",
            "gender mfu",
            "date of birth",
            "other details",
            "document id",
            "location code",
            "date in location from",
            "date in locaton to",
            "document id",
            "destruction authorised by employee id",
            "destroyed by employee id",
            "planned destruction date",
            "actual destruction date",
            "other details"
        ],
        "template_feedback": "find number of rows in place of number of different document id .",
        "positive_example": "replace destruction authorised by employee id with destroyed by employee id"
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "table_names": [
            "reference document types",
            "reference calendar",
            "reference locations",
            "roles",
            "all documents",
            "employees",
            "document locations",
            "documents to be destroyed"
        ],
        "column_names": [
            "document type code",
            "document type name",
            "document type description",
            "calendar date",
            "day number",
            "location code",
            "location name",
            "location description",
            "role code",
            "role name",
            "role description",
            "document id",
            "date stored",
            "document type code",
            "document name",
            "document description",
            "other details",
            "employee id",
            "role code",
            "employee name",
            "gender mfu",
            "date of birth",
            "other details",
            "document id",
            "location code",
            "date in location from",
            "date in locaton to",
            "document id",
            "destruction authorised by employee id",
            "destroyed by employee id",
            "planned destruction date",
            "actual destruction date",
            "other details"
        ],
        "template_feedback": "find number of rows in place of number of different document id .",
        "positive_example": "you should use destroyed by employee id in place of employee id who authorized the destruction ."
    },
    {
        "db_id": "inn_1",
        "table_names": [
            "rooms",
            "reservations"
        ],
        "column_names": [
            "room id",
            "room name",
            "beds",
            "bed type",
            "max occupancy",
            "base price",
            "decor",
            "code",
            "room",
            "check in",
            "check out",
            "rate",
            "last name",
            "first name",
            "adults",
            "kids"
        ],
        "template_feedback": "order the results ascending .",
        "positive_example": "replace descending order with ascending order ."
    },
    {
        "db_id": "inn_1",
        "table_names": [
            "rooms",
            "reservations"
        ],
        "column_names": [
            "room id",
            "room name",
            "beds",
            "bed type",
            "max occupancy",
            "base price",
            "decor",
            "code",
            "room",
            "check in",
            "check out",
            "rate",
            "last name",
            "first name",
            "adults",
            "kids"
        ],
        "template_feedback": "order the results ascending .",
        "positive_example": "you need to use ascendant order ."
    },
    {
        "db_id": "hr_1",
        "table_names": [
            "regions",
            "countries",
            "departments",
            "jobs",
            "employees",
            "job history",
            "locations"
        ],
        "column_names": [
            "region id",
            "region name",
            "country id",
            "country name",
            "region id",
            "department id",
            "department name",
            "manager id",
            "location id",
            "job id",
            "job title",
            "min salary",
            "max salary",
            "employee id",
            "first name",
            "last name",
            "email",
            "phone number",
            "hire date",
            "job id",
            "salary",
            "commission pct",
            "manager id",
            "department id",
            "employee id",
            "start date",
            "end date",
            "job id",
            "department id",
            "location id",
            "street address",
            "postal code",
            "city",
            "state province",
            "country id"
        ],
        "template_feedback": "in step 1 , find for each value of department id and manager id whose number of employee id greater than or equals 4 . in step 2 , make sure no repetition in the results .",
        "positive_example": "make sure managers of those departments are managing more than 3 employees"
    },
    {
        "db_id": "hr_1",
        "table_names": [
            "regions",
            "countries",
            "departments",
            "jobs",
            "employees",
            "job history",
            "locations"
        ],
        "column_names": [
            "region id",
            "region name",
            "country id",
            "country name",
            "region id",
            "department id",
            "department name",
            "manager id",
            "location id",
            "job id",
            "job title",
            "min salary",
            "max salary",
            "employee id",
            "first name",
            "last name",
            "email",
            "phone number",
            "hire date",
            "job id",
            "salary",
            "commission pct",
            "manager id",
            "department id",
            "employee id",
            "start date",
            "end date",
            "job id",
            "department id",
            "location id",
            "street address",
            "postal code",
            "city",
            "state province",
            "country id"
        ],
        "template_feedback": "in step 1 , find for each value of department id and manager id whose number of employee id greater than or equals 4 . in step 2 , make sure no repetition in the results .",
        "positive_example": "you need to ensure that managers of departments are managing more employees ."
    },
    {
        "db_id": "assets_maintenance",
        "table_names": [
            "third party companies",
            "maintenance contracts",
            "parts",
            "skills",
            "staff",
            "assets",
            "asset parts",
            "maintenance engineers",
            "engineer skills",
            "fault log",
            "engineer visits",
            "part faults",
            "fault log parts",
            "skills required to fix"
        ],
        "column_names": [
            "company id",
            "company type",
            "company name",
            "company address",
            "other company details",
            "maintenance contract id",
            "maintenance contract company id",
            "contract start date",
            "contract end date",
            "other contract details",
            "part id",
            "part name",
            "chargeable yn",
            "chargeable amount",
            "other part details",
            "skill id",
            "skill code",
            "skill description",
            "staff id",
            "staff name",
            "gender",
            "other staff details",
            "asset id",
            "maintenance contract id",
            "supplier company id",
            "asset details",
            "asset make",
            "asset model",
            "asset acquired date",
            "asset disposed date",
            "other asset details",
            "asset id",
            "part id",
            "engineer id",
            "company id",
            "first name",
            "last name",
            "other details",
            "engineer id",
            "skill id",
            "fault log entry id",
            "asset id",
            "recorded by staff id",
            "fault log entry datetime",
            "fault description",
            "other fault details",
            "engineer visit id",
            "contact staff id",
            "engineer id",
            "fault log entry id",
            "fault status",
            "visit start datetime",
            "visit end datetime",
            "other visit details",
            "part fault id",
            "part id",
            "fault short name",
            "fault description",
            "other fault details",
            "fault log entry id",
            "part fault id",
            "fault status",
            "part fault id",
            "skill id"
        ],
        "template_feedback": "in step 1 , additionally use the information from the fault log table besides the staff table . in step 2 , additionally use the information from the engineer visits table besides the staff table .",
        "positive_example": "step 1 : staff who has recorded any fault . step 2 : staff who has contacted any visiting engineer ."
    },
    {
        "db_id": "assets_maintenance",
        "table_names": [
            "third party companies",
            "maintenance contracts",
            "parts",
            "skills",
            "staff",
            "assets",
            "asset parts",
            "maintenance engineers",
            "engineer skills",
            "fault log",
            "engineer visits",
            "part faults",
            "fault log parts",
            "skills required to fix"
        ],
        "column_names": [
            "company id",
            "company type",
            "company name",
            "company address",
            "other company details",
            "maintenance contract id",
            "maintenance contract company id",
            "contract start date",
            "contract end date",
            "other contract details",
            "part id",
            "part name",
            "chargeable yn",
            "chargeable amount",
            "other part details",
            "skill id",
            "skill code",
            "skill description",
            "staff id",
            "staff name",
            "gender",
            "other staff details",
            "asset id",
            "maintenance contract id",
            "supplier company id",
            "asset details",
            "asset make",
            "asset model",
            "asset acquired date",
            "asset disposed date",
            "other asset details",
            "asset id",
            "part id",
            "engineer id",
            "company id",
            "first name",
            "last name",
            "other details",
            "engineer id",
            "skill id",
            "fault log entry id",
            "asset id",
            "recorded by staff id",
            "fault log entry datetime",
            "fault description",
            "other fault details",
            "engineer visit id",
            "contact staff id",
            "engineer id",
            "fault log entry id",
            "fault status",
            "visit start datetime",
            "visit end datetime",
            "other visit details",
            "part fault id",
            "part id",
            "fault short name",
            "fault description",
            "other fault details",
            "fault log entry id",
            "part fault id",
            "fault status",
            "part fault id",
            "skill id"
        ],
        "template_feedback": "in step 1 , additionally use the information from the fault log table besides the staff table . in step 2 , additionally use the information from the engineer visits table besides the staff table .",
        "positive_example": "any fault which has been recorded by staff should be in step 1. otherwise , for step 2 , the visiting engineer been contacted by staff ."
    },
    {
        "db_id": "hr_1",
        "table_names": [
            "regions",
            "countries",
            "departments",
            "jobs",
            "employees",
            "job history",
            "locations"
        ],
        "column_names": [
            "region id",
            "region name",
            "country id",
            "country name",
            "region id",
            "department id",
            "department name",
            "manager id",
            "location id",
            "job id",
            "job title",
            "min salary",
            "max salary",
            "employee id",
            "first name",
            "last name",
            "email",
            "phone number",
            "hire date",
            "job id",
            "salary",
            "commission pct",
            "manager id",
            "department id",
            "employee id",
            "start date",
            "end date",
            "job id",
            "department id",
            "location id",
            "street address",
            "postal code",
            "city",
            "state province",
            "country id"
        ],
        "template_feedback": "in step 1 , use employees table in place of jobs table . find the average salary for each value of employees 's job id .",
        "positive_example": "replace min salary with salary ."
    },
    {
        "db_id": "assets_maintenance",
        "table_names": [
            "third party companies",
            "maintenance contracts",
            "parts",
            "skills",
            "staff",
            "assets",
            "asset parts",
            "maintenance engineers",
            "engineer skills",
            "fault log",
            "engineer visits",
            "part faults",
            "fault log parts",
            "skills required to fix"
        ],
        "column_names": [
            "company id",
            "company type",
            "company name",
            "company address",
            "other company details",
            "maintenance contract id",
            "maintenance contract company id",
            "contract start date",
            "contract end date",
            "other contract details",
            "part id",
            "part name",
            "chargeable yn",
            "chargeable amount",
            "other part details",
            "skill id",
            "skill code",
            "skill description",
            "staff id",
            "staff name",
            "gender",
            "other staff details",
            "asset id",
            "maintenance contract id",
            "supplier company id",
            "asset details",
            "asset make",
            "asset model",
            "asset acquired date",
            "asset disposed date",
            "other asset details",
            "asset id",
            "part id",
            "engineer id",
            "company id",
            "first name",
            "last name",
            "other details",
            "engineer id",
            "skill id",
            "fault log entry id",
            "asset id",
            "recorded by staff id",
            "fault log entry datetime",
            "fault description",
            "other fault details",
            "engineer visit id",
            "contact staff id",
            "engineer id",
            "fault log entry id",
            "fault status",
            "visit start datetime",
            "visit end datetime",
            "other visit details",
            "part fault id",
            "part id",
            "fault short name",
            "fault description",
            "other fault details",
            "fault log entry id",
            "part fault id",
            "fault status",
            "part fault id",
            "skill id"
        ],
        "template_feedback": "additionally use the information from the part faults table and skills required to fix table besides the skills table . additionally find fault short name . permit repetitions in the results .",
        "positive_example": "considering the part fault 's table , you need to use fault 's short name instead of skill description ."
    },
    {
        "db_id": "music_4",
        "table_names": [
            "artist",
            "volume",
            "music festival"
        ],
        "column_names": [
            "artist id",
            "artist",
            "age",
            "famous title",
            "famous release date",
            "volume id",
            "volume issue",
            "issue date",
            "weeks on top",
            "song",
            "artist id",
            "id",
            "music festival",
            "date of ceremony",
            "category",
            "volume",
            "result"
        ],
        "template_feedback": "in step 1 , additionally use the information from the volume table besides the artist table . additionally make sure that weeks on top greater than 2 . return the rows in both of the results of step 1 and the results of step 3 .",
        "positive_example": "replace less than 2 with quals to 2 ."
    },
    {
        "db_id": "music_4",
        "table_names": [
            "artist",
            "volume",
            "music festival"
        ],
        "column_names": [
            "artist id",
            "artist",
            "age",
            "famous title",
            "famous release date",
            "volume id",
            "volume issue",
            "issue date",
            "weeks on top",
            "song",
            "artist id",
            "id",
            "music festival",
            "date of ceremony",
            "category",
            "volume",
            "result"
        ],
        "template_feedback": "in step 1 , additionally use the information from the volume table besides the artist table . additionally make sure that weeks on top greater than 2 . return the rows in both of the results of step 1 and the results of step 3 .",
        "positive_example": "you should use equivalent to 2 instead of lower than 2 ."
    },
    {
        "db_id": "workshop_paper",
        "table_names": [
            "workshop",
            "submission",
            "acceptance"
        ],
        "column_names": [
            "workshop id",
            "date",
            "venue",
            "name",
            "submission id",
            "scores",
            "author",
            "college",
            "submission id",
            "workshop id",
            "result"
        ],
        "template_feedback": "use the largest in place of smallest .",
        "positive_example": "replace smallest with largest ."
    },
    {
        "db_id": "workshop_paper",
        "table_names": [
            "workshop",
            "submission",
            "acceptance"
        ],
        "column_names": [
            "workshop id",
            "date",
            "venue",
            "name",
            "submission id",
            "scores",
            "author",
            "college",
            "submission id",
            "workshop id",
            "result"
        ],
        "template_feedback": "use the largest in place of smallest .",
        "positive_example": "you should supersede smallest with the largest one ."
    },
    {
        "db_id": "music_2",
        "table_names": [
            "songs",
            "albums",
            "band",
            "instruments",
            "performance",
            "track lists",
            "vocals"
        ],
        "column_names": [
            "song id",
            "title",
            "aid",
            "title",
            "year",
            "label",
            "type",
            "id",
            "first name",
            "last name",
            "song id",
            "bandmate id",
            "instrument",
            "song id",
            "bandmate",
            "stage position",
            "album id",
            "position",
            "song id",
            "song id",
            "bandmate",
            "type"
        ],
        "template_feedback": "additionally use the information from the instruments table besides the songs table . find number of different instrument in place of number of rows .",
        "positive_example": "need to find distinct first name in first name table ."
    },
    {
        "db_id": "network_2",
        "table_names": [
            "person",
            "person friend"
        ],
        "column_names": [
            "name",
            "age",
            "city",
            "gender",
            "job",
            "name",
            "friend",
            "year"
        ],
        "template_feedback": "in step 2 , additionally use the information from the person friend table besides the person table . make sure no repetition in the results .",
        "positive_example": "replace name of person table with friend of person friend ."
    },
    {
        "db_id": "inn_1",
        "table_names": [
            "rooms",
            "reservations"
        ],
        "column_names": [
            "room id",
            "room name",
            "beds",
            "bed type",
            "max occupancy",
            "base price",
            "decor",
            "code",
            "room",
            "check in",
            "check out",
            "rate",
            "last name",
            "first name",
            "adults",
            "kids"
        ],
        "template_feedback": "in step 2 , consider the first name like % roy % conditions in place of the first name equals roy conditions .",
        "positive_example": "replace \" equals \" with \" contains \" in step 2 ."
    },
    {
        "db_id": "inn_1",
        "table_names": [
            "rooms",
            "reservations"
        ],
        "column_names": [
            "room id",
            "room name",
            "beds",
            "bed type",
            "max occupancy",
            "base price",
            "decor",
            "code",
            "room",
            "check in",
            "check out",
            "rate",
            "last name",
            "first name",
            "adults",
            "kids"
        ],
        "template_feedback": "in step 2 , consider the first name like % roy % conditions in place of the first name equals roy conditions .",
        "positive_example": "in step 2 , use contains in place of equals ."
    },
    {
        "db_id": "hospital_1",
        "table_names": [
            "physician",
            "department",
            "affiliated with",
            "procedures",
            "trained in",
            "patient",
            "nurse",
            "appointment",
            "medication",
            "prescribes",
            "block",
            "room",
            "on call",
            "stay",
            "undergoes"
        ],
        "column_names": [
            "employee id",
            "name",
            "position",
            "ssn",
            "departmentid",
            "name",
            "head",
            "physician",
            "department",
            "primary affiliation",
            "code",
            "name",
            "cost",
            "physician",
            "treatment",
            "certification date",
            "certification expires",
            "ssn",
            "name",
            "address",
            "phone",
            "insurance id",
            "pcp",
            "employee id",
            "name",
            "position",
            "registered",
            "ssn",
            "appointment id",
            "patient",
            "prep nurse",
            "physician",
            "start",
            "end",
            "examination room",
            "code",
            "name",
            "brand",
            "description",
            "physician",
            "patient",
            "medication",
            "date",
            "appointment",
            "dose",
            "block floor",
            "block code",
            "roomnumber",
            "room type",
            "block floor",
            "block code",
            "unavailable",
            "nurse",
            "block floor",
            "block code",
            "oncall start",
            "oncall end",
            "stay id",
            "patient",
            "room",
            "stay start",
            "stay end",
            "patient",
            "procedures",
            "stay",
            "date undergoes",
            "physician",
            "assisting nurse"
        ],
        "template_feedback": "in step 1 , do not use the appointment table and physician table . in step 2 , order the results by nurse 's name in place of physician 's name .",
        "positive_example": "should order by nurse 's name instead"
    },
    {
        "db_id": "hospital_1",
        "table_names": [
            "physician",
            "department",
            "affiliated with",
            "procedures",
            "trained in",
            "patient",
            "nurse",
            "appointment",
            "medication",
            "prescribes",
            "block",
            "room",
            "on call",
            "stay",
            "undergoes"
        ],
        "column_names": [
            "employee id",
            "name",
            "position",
            "ssn",
            "departmentid",
            "name",
            "head",
            "physician",
            "department",
            "primary affiliation",
            "code",
            "name",
            "cost",
            "physician",
            "treatment",
            "certification date",
            "certification expires",
            "ssn",
            "name",
            "address",
            "phone",
            "insurance id",
            "pcp",
            "employee id",
            "name",
            "position",
            "registered",
            "ssn",
            "appointment id",
            "patient",
            "prep nurse",
            "physician",
            "start",
            "end",
            "examination room",
            "code",
            "name",
            "brand",
            "description",
            "physician",
            "patient",
            "medication",
            "date",
            "appointment",
            "dose",
            "block floor",
            "block code",
            "roomnumber",
            "room type",
            "block floor",
            "block code",
            "unavailable",
            "nurse",
            "block floor",
            "block code",
            "oncall start",
            "oncall end",
            "stay id",
            "patient",
            "room",
            "stay start",
            "stay end",
            "patient",
            "procedures",
            "stay",
            "date undergoes",
            "physician",
            "assisting nurse"
        ],
        "template_feedback": "in step 1 , do not use the appointment table and physician table . in step 2 , order the results by nurse 's name in place of physician 's name .",
        "positive_example": "you should only use nurse 's name ."
    },
    {
        "db_id": "wrestler",
        "table_names": [
            "wrestler",
            "elimination"
        ],
        "column_names": [
            "wrestler id",
            "name",
            "reign",
            "days held",
            "location",
            "event",
            "elimination id",
            "wrestler id",
            "team",
            "eliminated by",
            "elimination move",
            "time"
        ],
        "template_feedback": "consider the days held less than 100 conditions in place of the days held equals 100 conditions .",
        "positive_example": "ensure to fulfill the condition that the days hold on to is smaller than 100 ."
    },
    {
        "db_id": "hospital_1",
        "table_names": [
            "physician",
            "department",
            "affiliated with",
            "procedures",
            "trained in",
            "patient",
            "nurse",
            "appointment",
            "medication",
            "prescribes",
            "block",
            "room",
            "on call",
            "stay",
            "undergoes"
        ],
        "column_names": [
            "employee id",
            "name",
            "position",
            "ssn",
            "departmentid",
            "name",
            "head",
            "physician",
            "department",
            "primary affiliation",
            "code",
            "name",
            "cost",
            "physician",
            "treatment",
            "certification date",
            "certification expires",
            "ssn",
            "name",
            "address",
            "phone",
            "insurance id",
            "pcp",
            "employee id",
            "name",
            "position",
            "registered",
            "ssn",
            "appointment id",
            "patient",
            "prep nurse",
            "physician",
            "start",
            "end",
            "examination room",
            "code",
            "name",
            "brand",
            "description",
            "physician",
            "patient",
            "medication",
            "date",
            "appointment",
            "dose",
            "block floor",
            "block code",
            "roomnumber",
            "room type",
            "block floor",
            "block code",
            "unavailable",
            "nurse",
            "block floor",
            "block code",
            "oncall start",
            "oncall end",
            "stay id",
            "patient",
            "room",
            "stay start",
            "stay end",
            "patient",
            "procedures",
            "stay",
            "date undergoes",
            "physician",
            "assisting nurse"
        ],
        "template_feedback": "additionally make sure that unavailable equals 0 .",
        "positive_example": "make sure rooms which are not reserved ."
    },
    {
        "db_id": "hospital_1",
        "table_names": [
            "physician",
            "department",
            "affiliated with",
            "procedures",
            "trained in",
            "patient",
            "nurse",
            "appointment",
            "medication",
            "prescribes",
            "block",
            "room",
            "on call",
            "stay",
            "undergoes"
        ],
        "column_names": [
            "employee id",
            "name",
            "position",
            "ssn",
            "departmentid",
            "name",
            "head",
            "physician",
            "department",
            "primary affiliation",
            "code",
            "name",
            "cost",
            "physician",
            "treatment",
            "certification date",
            "certification expires",
            "ssn",
            "name",
            "address",
            "phone",
            "insurance id",
            "pcp",
            "employee id",
            "name",
            "position",
            "registered",
            "ssn",
            "appointment id",
            "patient",
            "prep nurse",
            "physician",
            "start",
            "end",
            "examination room",
            "code",
            "name",
            "brand",
            "description",
            "physician",
            "patient",
            "medication",
            "date",
            "appointment",
            "dose",
            "block floor",
            "block code",
            "roomnumber",
            "room type",
            "block floor",
            "block code",
            "unavailable",
            "nurse",
            "block floor",
            "block code",
            "oncall start",
            "oncall end",
            "stay id",
            "patient",
            "room",
            "stay start",
            "stay end",
            "patient",
            "procedures",
            "stay",
            "date undergoes",
            "physician",
            "assisting nurse"
        ],
        "template_feedback": "additionally make sure that unavailable equals 0 .",
        "positive_example": "i want unreserved rooms ."
    },
    {
        "db_id": "department_management",
        "table_names": [
            "department",
            "head",
            "management"
        ],
        "column_names": [
            "department id",
            "name",
            "creation",
            "ranking",
            "budget in billions",
            "num employees",
            "head id",
            "name",
            "born state",
            "age",
            "department id",
            "head id",
            "temporary acting"
        ],
        "template_feedback": "consider the ranking between 10 and 15 conditions in place of the ranking less than 10 or ranking less than 15 conditions .",
        "positive_example": "replace \" less than 10 \" with \" greater than 10 \" and replace or with \" and \" ."
    },
    {
        "db_id": "department_management",
        "table_names": [
            "department",
            "head",
            "management"
        ],
        "column_names": [
            "department id",
            "name",
            "creation",
            "ranking",
            "budget in billions",
            "num employees",
            "head id",
            "name",
            "born state",
            "age",
            "department id",
            "head id",
            "temporary acting"
        ],
        "template_feedback": "consider the ranking between 10 and 15 conditions in place of the ranking less than 10 or ranking less than 15 conditions .",
        "positive_example": "you need to substitute \" greater than 10 \" in place of \" less than 10 \" and \" and \" with or ."
    },
    {
        "db_id": "sakila_1",
        "table_names": [
            "actor",
            "address",
            "category",
            "city",
            "country",
            "customer",
            "film",
            "film actor",
            "film category",
            "film text",
            "inventory",
            "language",
            "payment",
            "rental",
            "staff",
            "store"
        ],
        "column_names": [
            "actor id",
            "first name",
            "last name",
            "last update",
            "address id",
            "address",
            "address2",
            "district",
            "city id",
            "postal code",
            "phone",
            "last update",
            "category id",
            "name",
            "last update",
            "city id",
            "city",
            "country id",
            "last update",
            "country id",
            "country",
            "last update",
            "customer id",
            "store id",
            "first name",
            "last name",
            "email",
            "address id",
            "active",
            "create date",
            "last update",
            "film id",
            "title",
            "description",
            "release year",
            "language id",
            "original language id",
            "rental duration",
            "rental rate",
            "length",
            "replacement cost",
            "rating",
            "special features",
            "last update",
            "actor id",
            "film id",
            "last update",
            "film id",
            "category id",
            "last update",
            "film id",
            "title",
            "description",
            "inventory id",
            "film id",
            "store id",
            "last update",
            "language id",
            "name",
            "last update",
            "payment id",
            "customer id",
            "staff id",
            "rental id",
            "amount",
            "payment date",
            "last update",
            "rental id",
            "rental date",
            "inventory id",
            "customer id",
            "return date",
            "staff id",
            "last update",
            "staff id",
            "first name",
            "last name",
            "address id",
            "picture",
            "email",
            "store id",
            "active",
            "username",
            "password",
            "last update",
            "store id",
            "manager staff id",
            "address id",
            "last update"
        ],
        "template_feedback": "use inventory table in place of actor table . additionally make sure that store id equals 1 .",
        "positive_example": "from the table of inventory you need to verify the total number of stock item whose id of store should be equivalent to 1 ."
    },
    {
        "db_id": "school_finance",
        "table_names": [
            "school",
            "budget",
            "endowment"
        ],
        "column_names": [
            "school id",
            "school name",
            "location",
            "mascot",
            "enrollment",
            "ihsaa class",
            "ihsaa football class",
            "county",
            "school id",
            "year",
            "budgeted",
            "total budget percent budgeted",
            "invested",
            "total budget percent invested",
            "budget invested percent",
            "endowment id",
            "school id",
            "donator name",
            "amount"
        ],
        "template_feedback": "in step 2 , find for each value of endowment 's school id whose number of rows greater than 1 .",
        "positive_example": "also make sure that schools have greater than one donator ."
    },
    {
        "db_id": "school_finance",
        "table_names": [
            "school",
            "budget",
            "endowment"
        ],
        "column_names": [
            "school id",
            "school name",
            "location",
            "mascot",
            "enrollment",
            "ihsaa class",
            "ihsaa football class",
            "county",
            "school id",
            "year",
            "budgeted",
            "total budget percent budgeted",
            "invested",
            "total budget percent invested",
            "budget invested percent",
            "endowment id",
            "school id",
            "donator name",
            "amount"
        ],
        "template_feedback": "in step 2 , find for each value of endowment 's school id whose number of rows greater than 1 .",
        "positive_example": "additionally , we have to ensure that the donator of that schools is more than one ."
    },
    {
        "db_id": "department_store",
        "table_names": [
            "addresses",
            "staff",
            "suppliers",
            "department store chain",
            "customers",
            "products",
            "supplier addresses",
            "customer addresses",
            "customer orders",
            "department stores",
            "departments",
            "order items",
            "product suppliers",
            "staff department assignments"
        ],
        "column_names": [
            "address id",
            "address details",
            "staff id",
            "staff gender",
            "staff name",
            "supplier id",
            "supplier name",
            "supplier phone",
            "department store chain id",
            "department store chain name",
            "customer id",
            "payment method code",
            "customer code",
            "customer name",
            "customer address",
            "customer phone",
            "customer email",
            "product id",
            "product type code",
            "product name",
            "product price",
            "supplier id",
            "address id",
            "date from",
            "date to",
            "customer id",
            "address id",
            "date from",
            "date to",
            "order id",
            "customer id",
            "order status code",
            "order date",
            "department store id",
            "department store chain id",
            "store name",
            "store address",
            "store phone",
            "store email",
            "department id",
            "department store id",
            "department name",
            "order item id",
            "order id",
            "product id",
            "product id",
            "supplier id",
            "date supplied from",
            "date supplied to",
            "total amount purchased",
            "total value purchased",
            "staff id",
            "department id",
            "date assigned from",
            "job title code",
            "date assigned to"
        ],
        "template_feedback": "in step 1 , additionally use the information from the order items table and customer orders table besides the customers table . find for each value of customers 's customer id whose number of different product id greater than or equals 3 . in step 2 , make sure no repetition in the results .",
        "positive_example": "need to make sure customers have bought at least three distinct products ."
    },
    {
        "db_id": "department_store",
        "table_names": [
            "addresses",
            "staff",
            "suppliers",
            "department store chain",
            "customers",
            "products",
            "supplier addresses",
            "customer addresses",
            "customer orders",
            "department stores",
            "departments",
            "order items",
            "product suppliers",
            "staff department assignments"
        ],
        "column_names": [
            "address id",
            "address details",
            "staff id",
            "staff gender",
            "staff name",
            "supplier id",
            "supplier name",
            "supplier phone",
            "department store chain id",
            "department store chain name",
            "customer id",
            "payment method code",
            "customer code",
            "customer name",
            "customer address",
            "customer phone",
            "customer email",
            "product id",
            "product type code",
            "product name",
            "product price",
            "supplier id",
            "address id",
            "date from",
            "date to",
            "customer id",
            "address id",
            "date from",
            "date to",
            "order id",
            "customer id",
            "order status code",
            "order date",
            "department store id",
            "department store chain id",
            "store name",
            "store address",
            "store phone",
            "store email",
            "department id",
            "department store id",
            "department name",
            "order item id",
            "order id",
            "product id",
            "product id",
            "supplier id",
            "date supplied from",
            "date supplied to",
            "total amount purchased",
            "total value purchased",
            "staff id",
            "department id",
            "date assigned from",
            "job title code",
            "date assigned to"
        ],
        "template_feedback": "in step 1 , additionally use the information from the order items table and customer orders table besides the customers table . find for each value of customers 's customer id whose number of different product id greater than or equals 3 . in step 2 , make sure no repetition in the results .",
        "positive_example": "minimum three distinct products should be brought by every customers ."
    },
    {
        "db_id": "sakila_1",
        "table_names": [
            "actor",
            "address",
            "category",
            "city",
            "country",
            "customer",
            "film",
            "film actor",
            "film category",
            "film text",
            "inventory",
            "language",
            "payment",
            "rental",
            "staff",
            "store"
        ],
        "column_names": [
            "actor id",
            "first name",
            "last name",
            "last update",
            "address id",
            "address",
            "address2",
            "district",
            "city id",
            "postal code",
            "phone",
            "last update",
            "category id",
            "name",
            "last update",
            "city id",
            "city",
            "country id",
            "last update",
            "country id",
            "country",
            "last update",
            "customer id",
            "store id",
            "first name",
            "last name",
            "email",
            "address id",
            "active",
            "create date",
            "last update",
            "film id",
            "title",
            "description",
            "release year",
            "language id",
            "original language id",
            "rental duration",
            "rental rate",
            "length",
            "replacement cost",
            "rating",
            "special features",
            "last update",
            "actor id",
            "film id",
            "last update",
            "film id",
            "category id",
            "last update",
            "film id",
            "title",
            "description",
            "inventory id",
            "film id",
            "store id",
            "last update",
            "language id",
            "name",
            "last update",
            "payment id",
            "customer id",
            "staff id",
            "rental id",
            "amount",
            "payment date",
            "last update",
            "rental id",
            "rental date",
            "inventory id",
            "customer id",
            "return date",
            "staff id",
            "last update",
            "staff id",
            "first name",
            "last name",
            "address id",
            "picture",
            "email",
            "store id",
            "active",
            "username",
            "password",
            "last update",
            "store id",
            "manager staff id",
            "address id",
            "last update"
        ],
        "template_feedback": "in step 1 , do not use the film actor table . in step 2 , find for each value of first name in place of film actor 's actor id .",
        "positive_example": "need to make sure the actors are most popular ."
    },
    {
        "db_id": "sakila_1",
        "table_names": [
            "actor",
            "address",
            "category",
            "city",
            "country",
            "customer",
            "film",
            "film actor",
            "film category",
            "film text",
            "inventory",
            "language",
            "payment",
            "rental",
            "staff",
            "store"
        ],
        "column_names": [
            "actor id",
            "first name",
            "last name",
            "last update",
            "address id",
            "address",
            "address2",
            "district",
            "city id",
            "postal code",
            "phone",
            "last update",
            "category id",
            "name",
            "last update",
            "city id",
            "city",
            "country id",
            "last update",
            "country id",
            "country",
            "last update",
            "customer id",
            "store id",
            "first name",
            "last name",
            "email",
            "address id",
            "active",
            "create date",
            "last update",
            "film id",
            "title",
            "description",
            "release year",
            "language id",
            "original language id",
            "rental duration",
            "rental rate",
            "length",
            "replacement cost",
            "rating",
            "special features",
            "last update",
            "actor id",
            "film id",
            "last update",
            "film id",
            "category id",
            "last update",
            "film id",
            "title",
            "description",
            "inventory id",
            "film id",
            "store id",
            "last update",
            "language id",
            "name",
            "last update",
            "payment id",
            "customer id",
            "staff id",
            "rental id",
            "amount",
            "payment date",
            "last update",
            "rental id",
            "rental date",
            "inventory id",
            "customer id",
            "return date",
            "staff id",
            "last update",
            "staff id",
            "first name",
            "last name",
            "address id",
            "picture",
            "email",
            "store id",
            "active",
            "username",
            "password",
            "last update",
            "store id",
            "manager staff id",
            "address id",
            "last update"
        ],
        "template_feedback": "in step 1 , do not use the film actor table . in step 2 , find for each value of first name in place of film actor 's actor id .",
        "positive_example": "i need an assurance that the actors are very famous ."
    },
    {
        "db_id": "hospital_1",
        "table_names": [
            "physician",
            "department",
            "affiliated with",
            "procedures",
            "trained in",
            "patient",
            "nurse",
            "appointment",
            "medication",
            "prescribes",
            "block",
            "room",
            "on call",
            "stay",
            "undergoes"
        ],
        "column_names": [
            "employee id",
            "name",
            "position",
            "ssn",
            "departmentid",
            "name",
            "head",
            "physician",
            "department",
            "primary affiliation",
            "code",
            "name",
            "cost",
            "physician",
            "treatment",
            "certification date",
            "certification expires",
            "ssn",
            "name",
            "address",
            "phone",
            "insurance id",
            "pcp",
            "employee id",
            "name",
            "position",
            "registered",
            "ssn",
            "appointment id",
            "patient",
            "prep nurse",
            "physician",
            "start",
            "end",
            "examination room",
            "code",
            "name",
            "brand",
            "description",
            "physician",
            "patient",
            "medication",
            "date",
            "appointment",
            "dose",
            "block floor",
            "block code",
            "roomnumber",
            "room type",
            "block floor",
            "block code",
            "unavailable",
            "nurse",
            "block floor",
            "block code",
            "oncall start",
            "oncall end",
            "stay id",
            "patient",
            "room",
            "stay start",
            "stay end",
            "patient",
            "procedures",
            "stay",
            "date undergoes",
            "physician",
            "assisting nurse"
        ],
        "template_feedback": "in step 1 , use affiliated with table and department table in place of patient table in step 2 , consider the department 's name equals surgery conditions in place of the physician 's name equals surgery conditions . find physician 's name in place of patient 's name . in step 3 , use affiliated with table and department table in place of patient table in step 4 , consider the department 's name equals psychiatry conditions in place of the physician 's name equals psychiatry conditions . find physician 's name in place of patient 's name .",
        "positive_example": "need to find physician 's name associated with both surgery and psychiatry block floor . show their names ."
    },
    {
        "db_id": "flight_1",
        "table_names": [
            "flight",
            "aircraft",
            "employee",
            "certificate"
        ],
        "column_names": [
            "flight number",
            "origin",
            "destination",
            "distance",
            "departure date",
            "arrival date",
            "price",
            "airline id",
            "airline id",
            "name",
            "distance",
            "employee id",
            "name",
            "salary",
            "employee id",
            "airline id"
        ],
        "template_feedback": "consider the destination equals honolulu and origin equals los angeles conditions in place of the destination equals los angeles conditions .",
        "positive_example": "make sure whose employee id equals la , arrival date equals honolulu instead of los angeles ."
    },
    {
        "db_id": "hospital_1",
        "table_names": [
            "physician",
            "department",
            "affiliated with",
            "procedures",
            "trained in",
            "patient",
            "nurse",
            "appointment",
            "medication",
            "prescribes",
            "block",
            "room",
            "on call",
            "stay",
            "undergoes"
        ],
        "column_names": [
            "employee id",
            "name",
            "position",
            "ssn",
            "departmentid",
            "name",
            "head",
            "physician",
            "department",
            "primary affiliation",
            "code",
            "name",
            "cost",
            "physician",
            "treatment",
            "certification date",
            "certification expires",
            "ssn",
            "name",
            "address",
            "phone",
            "insurance id",
            "pcp",
            "employee id",
            "name",
            "position",
            "registered",
            "ssn",
            "appointment id",
            "patient",
            "prep nurse",
            "physician",
            "start",
            "end",
            "examination room",
            "code",
            "name",
            "brand",
            "description",
            "physician",
            "patient",
            "medication",
            "date",
            "appointment",
            "dose",
            "block floor",
            "block code",
            "roomnumber",
            "room type",
            "block floor",
            "block code",
            "unavailable",
            "nurse",
            "block floor",
            "block code",
            "oncall start",
            "oncall end",
            "stay id",
            "patient",
            "room",
            "stay start",
            "stay end",
            "patient",
            "procedures",
            "stay",
            "date undergoes",
            "physician",
            "assisting nurse"
        ],
        "template_feedback": "in step 1 , additionally use the information from the affiliated with table .",
        "positive_example": "be certain to place physicians with their relevant department ."
    },
    {
        "db_id": "soccer_1",
        "table_names": [
            "player attributes",
            "sqlite sequence",
            "player",
            "league",
            "country",
            "team",
            "team attributes"
        ],
        "column_names": [
            "id",
            "player fifa api id",
            "player api id",
            "date",
            "overall rating",
            "potential",
            "preferred foot",
            "attacking work rate",
            "defensive work rate",
            "crossing",
            "finishing",
            "heading accuracy",
            "short passing",
            "volleys",
            "dribbling",
            "curve",
            "free kick accuracy",
            "long passing",
            "ball control",
            "acceleration",
            "sprint speed",
            "agility",
            "reactions",
            "balance",
            "shot power",
            "jumping",
            "stamina",
            "strength",
            "long shots",
            "aggression",
            "interceptions",
            "positioning",
            "vision",
            "penalties",
            "marking",
            "standing tackle",
            "sliding tackle",
            "gk diving",
            "gk handling",
            "gk kicking",
            "gk positioning",
            "gk reflexes",
            "name",
            "seq",
            "id",
            "player api id",
            "player name",
            "player fifa api id",
            "birthday",
            "height",
            "weight",
            "id",
            "country id",
            "name",
            "id",
            "name",
            "id",
            "team api id",
            "team fifa api id",
            "team long name",
            "team short name",
            "id",
            "team fifa api id",
            "team api id",
            "date",
            "buildup play speed",
            "buildup play speed class",
            "buildup play dribbling",
            "buildup play dribbling class",
            "buildup play passing",
            "buildup play passing class",
            "buildup play positioning class",
            "chance creation passing",
            "chance creation passing class",
            "chance creation crossing",
            "chance creation crossing class",
            "chance creation shooting",
            "chance creation shooting class",
            "chance creation positioning class",
            "defence pressure",
            "defence pressure class",
            "defence aggression",
            "defence aggression class",
            "defence team width",
            "defence team width class",
            "defence defender line class"
        ],
        "template_feedback": "in step 1 , do not use the player table . in step 2 , find for each value of preferred foot . find preferred foot and number of rows in place of player name .",
        "positive_example": "i want the total number of right and left footed participant ."
    },
    {
        "db_id": "election",
        "table_names": [
            "county",
            "party",
            "election"
        ],
        "column_names": [
            "county id",
            "county name",
            "population",
            "zip code",
            "party id",
            "year",
            "party",
            "governor",
            "lieutenant governor",
            "comptroller",
            "attorney general",
            "us senate",
            "election id",
            "counties represented",
            "district",
            "delegate",
            "party",
            "first elected",
            "committee"
        ],
        "template_feedback": "additionally use the information from the election table besides the party table . find for each value of election 's party in place of party 's party .",
        "positive_example": "should corresponds to each value of delegates from that party ."
    },
    {
        "db_id": "election",
        "table_names": [
            "county",
            "party",
            "election"
        ],
        "column_names": [
            "county id",
            "county name",
            "population",
            "zip code",
            "party id",
            "year",
            "party",
            "governor",
            "lieutenant governor",
            "comptroller",
            "attorney general",
            "us senate",
            "election id",
            "counties represented",
            "district",
            "delegate",
            "party",
            "first elected",
            "committee"
        ],
        "template_feedback": "additionally use the information from the election table besides the party table . find for each value of election 's party in place of party 's party .",
        "positive_example": "it should be consistent with every single value of delegates from that party ."
    },
    {
        "db_id": "sports_competition",
        "table_names": [
            "club",
            "club rank",
            "player",
            "competition",
            "competition result"
        ],
        "column_names": [
            "club id",
            "name",
            "region",
            "start year",
            "rank",
            "club id",
            "gold",
            "silver",
            "bronze",
            "total",
            "player id",
            "name",
            "position",
            "club id",
            "apps",
            "tries",
            "goals",
            "points",
            "competition id",
            "year",
            "competition type",
            "country",
            "competition id",
            "club id 1",
            "club id 2",
            "score"
        ],
        "template_feedback": "order the results ascending . show me all the results .",
        "positive_example": "there should be smallest value instead of largest value ."
    },
    {
        "db_id": "sports_competition",
        "table_names": [
            "club",
            "club rank",
            "player",
            "competition",
            "competition result"
        ],
        "column_names": [
            "club id",
            "name",
            "region",
            "start year",
            "rank",
            "club id",
            "gold",
            "silver",
            "bronze",
            "total",
            "player id",
            "name",
            "position",
            "club id",
            "apps",
            "tries",
            "goals",
            "points",
            "competition id",
            "year",
            "competition type",
            "country",
            "competition id",
            "club id 1",
            "club id 2",
            "score"
        ],
        "template_feedback": "order the results ascending . show me all the results .",
        "positive_example": "make sure to use lowest value in-place of greatest value ."
    },
    {
        "db_id": "product_catalog",
        "table_names": [
            "attribute definitions",
            "catalogs",
            "catalog structure",
            "catalog contents",
            "catalog contents additional attributes"
        ],
        "column_names": [
            "attribute id",
            "attribute name",
            "attribute data type",
            "catalog id",
            "catalog name",
            "catalog publisher",
            "date of publication",
            "date of latest revision",
            "catalog level number",
            "catalog id",
            "catalog level name",
            "catalog entry id",
            "catalog level number",
            "parent entry id",
            "previous entry id",
            "next entry id",
            "catalog entry name",
            "product stock number",
            "price in dollars",
            "price in euros",
            "price in pounds",
            "capacity",
            "length",
            "height",
            "width",
            "catalog entry id",
            "catalog level number",
            "attribute id",
            "attribute value"
        ],
        "template_feedback": "additionally use the information from the catalog contents additional attributes table besides the attribute definitions table . consider the attribute value equals 0 conditions in place of the attribute data type equals 0 conditions .",
        "positive_example": "substitute value in place of data type of attribute ."
    },
    {
        "db_id": "flight_1",
        "table_names": [
            "flight",
            "aircraft",
            "employee",
            "certificate"
        ],
        "column_names": [
            "flight number",
            "origin",
            "destination",
            "distance",
            "departure date",
            "arrival date",
            "price",
            "airline id",
            "airline id",
            "name",
            "distance",
            "employee id",
            "name",
            "salary",
            "employee id",
            "airline id"
        ],
        "template_feedback": "find flight number in place of price .",
        "positive_example": "replace airline id with airline id ."
    },
    {
        "db_id": "mountain_photos",
        "table_names": [
            "mountain",
            "camera lens",
            "photos"
        ],
        "column_names": [
            "id",
            "name",
            "height",
            "prominence",
            "range",
            "country",
            "id",
            "brand",
            "name",
            "focal length mm",
            "max aperture",
            "id",
            "camera lens id",
            "mountain id",
            "color",
            "name"
        ],
        "template_feedback": "in step 1 , additionally use the information from the camera lens table besides the photos table . in step 2 , find camera lens 's name in place of photos 's name .",
        "positive_example": "replace camera lens id with id in step 1 , and camera lens id in photos table with name in camera lens ."
    },
    {
        "db_id": "product_catalog",
        "table_names": [
            "attribute definitions",
            "catalogs",
            "catalog structure",
            "catalog contents",
            "catalog contents additional attributes"
        ],
        "column_names": [
            "attribute id",
            "attribute name",
            "attribute data type",
            "catalog id",
            "catalog name",
            "catalog publisher",
            "date of publication",
            "date of latest revision",
            "catalog level number",
            "catalog id",
            "catalog level name",
            "catalog entry id",
            "catalog level number",
            "parent entry id",
            "previous entry id",
            "next entry id",
            "catalog entry name",
            "product stock number",
            "price in dollars",
            "price in euros",
            "price in pounds",
            "capacity",
            "length",
            "height",
            "width",
            "catalog entry id",
            "catalog level number",
            "attribute id",
            "attribute value"
        ],
        "template_feedback": "consider the width greater than 5 conditions in place of the length greater than 5 conditions .",
        "positive_example": "replace 3 with 5 , replace 5 with 3 ."
    },
    {
        "db_id": "product_catalog",
        "table_names": [
            "attribute definitions",
            "catalogs",
            "catalog structure",
            "catalog contents",
            "catalog contents additional attributes"
        ],
        "column_names": [
            "attribute id",
            "attribute name",
            "attribute data type",
            "catalog id",
            "catalog name",
            "catalog publisher",
            "date of publication",
            "date of latest revision",
            "catalog level number",
            "catalog id",
            "catalog level name",
            "catalog entry id",
            "catalog level number",
            "parent entry id",
            "previous entry id",
            "next entry id",
            "catalog entry name",
            "product stock number",
            "price in dollars",
            "price in euros",
            "price in pounds",
            "capacity",
            "length",
            "height",
            "width",
            "catalog entry id",
            "catalog level number",
            "attribute id",
            "attribute value"
        ],
        "template_feedback": "consider the width greater than 5 conditions in place of the length greater than 5 conditions .",
        "positive_example": "in place of 3 , 5 use 5 , 3 respectively ."
    },
    {
        "db_id": "match_season",
        "table_names": [
            "country",
            "team",
            "match season",
            "player"
        ],
        "column_names": [
            "country id",
            "country name",
            "capital",
            "official native language",
            "team id",
            "name",
            "season",
            "player",
            "position",
            "country",
            "team",
            "draft pick number",
            "draft class",
            "college",
            "player id",
            "player",
            "years played",
            "total wl",
            "singles wl",
            "doubles wl",
            "team"
        ],
        "template_feedback": "additionally use the information from the match season table besides the country table .",
        "positive_example": "should find number of players belonging to each country ."
    },
    {
        "db_id": "match_season",
        "table_names": [
            "country",
            "team",
            "match season",
            "player"
        ],
        "column_names": [
            "country id",
            "country name",
            "capital",
            "official native language",
            "team id",
            "name",
            "season",
            "player",
            "position",
            "country",
            "team",
            "draft pick number",
            "draft class",
            "college",
            "player id",
            "player",
            "years played",
            "total wl",
            "singles wl",
            "doubles wl",
            "team"
        ],
        "template_feedback": "additionally use the information from the match season table besides the country table .",
        "positive_example": "i want the count of players of all country ."
    },
    {
        "db_id": "election",
        "table_names": [
            "county",
            "party",
            "election"
        ],
        "column_names": [
            "county id",
            "county name",
            "population",
            "zip code",
            "party id",
            "year",
            "party",
            "governor",
            "lieutenant governor",
            "comptroller",
            "attorney general",
            "us senate",
            "election id",
            "counties represented",
            "district",
            "delegate",
            "party",
            "first elected",
            "committee"
        ],
        "template_feedback": "in step 2 , consider the population less than 100000 conditions in place of the population greater than 100000 conditions .",
        "positive_example": "i want \" citizens not greater than 100000 \" ."
    },
    {
        "db_id": "product_catalog",
        "table_names": [
            "attribute definitions",
            "catalogs",
            "catalog structure",
            "catalog contents",
            "catalog contents additional attributes"
        ],
        "column_names": [
            "attribute id",
            "attribute name",
            "attribute data type",
            "catalog id",
            "catalog name",
            "catalog publisher",
            "date of publication",
            "date of latest revision",
            "catalog level number",
            "catalog id",
            "catalog level name",
            "catalog entry id",
            "catalog level number",
            "parent entry id",
            "previous entry id",
            "next entry id",
            "catalog entry name",
            "product stock number",
            "price in dollars",
            "price in euros",
            "price in pounds",
            "capacity",
            "length",
            "height",
            "width",
            "catalog entry id",
            "catalog level number",
            "attribute id",
            "attribute value"
        ],
        "template_feedback": "additionally use the information from the catalog structure table besides the catalog contents table . find catalog level name in place of height .",
        "positive_example": "use name of the catalog level and structure of catalog ."
    },
    {
        "db_id": "product_catalog",
        "table_names": [
            "attribute definitions",
            "catalogs",
            "catalog structure",
            "catalog contents",
            "catalog contents additional attributes"
        ],
        "column_names": [
            "attribute id",
            "attribute name",
            "attribute data type",
            "catalog id",
            "catalog name",
            "catalog publisher",
            "date of publication",
            "date of latest revision",
            "catalog level number",
            "catalog id",
            "catalog level name",
            "catalog entry id",
            "catalog level number",
            "parent entry id",
            "previous entry id",
            "next entry id",
            "catalog entry name",
            "product stock number",
            "price in dollars",
            "price in euros",
            "price in pounds",
            "capacity",
            "length",
            "height",
            "width",
            "catalog entry id",
            "catalog level number",
            "attribute id",
            "attribute value"
        ],
        "template_feedback": "in step 1 , find for value of date of latest revision in place of date of publication . in step 2 , find date of latest revision in place of date of publication .",
        "positive_example": "in both steps , i want latest revision date ."
    },
    {
        "db_id": "hospital_1",
        "table_names": [
            "physician",
            "department",
            "affiliated with",
            "procedures",
            "trained in",
            "patient",
            "nurse",
            "appointment",
            "medication",
            "prescribes",
            "block",
            "room",
            "on call",
            "stay",
            "undergoes"
        ],
        "column_names": [
            "employee id",
            "name",
            "position",
            "ssn",
            "departmentid",
            "name",
            "head",
            "physician",
            "department",
            "primary affiliation",
            "code",
            "name",
            "cost",
            "physician",
            "treatment",
            "certification date",
            "certification expires",
            "ssn",
            "name",
            "address",
            "phone",
            "insurance id",
            "pcp",
            "employee id",
            "name",
            "position",
            "registered",
            "ssn",
            "appointment id",
            "patient",
            "prep nurse",
            "physician",
            "start",
            "end",
            "examination room",
            "code",
            "name",
            "brand",
            "description",
            "physician",
            "patient",
            "medication",
            "date",
            "appointment",
            "dose",
            "block floor",
            "block code",
            "roomnumber",
            "room type",
            "block floor",
            "block code",
            "unavailable",
            "nurse",
            "block floor",
            "block code",
            "oncall start",
            "oncall end",
            "stay id",
            "patient",
            "room",
            "stay start",
            "stay end",
            "patient",
            "procedures",
            "stay",
            "date undergoes",
            "physician",
            "assisting nurse"
        ],
        "template_feedback": "additionally use the information from the block table besides the room table .",
        "positive_example": "the number of rows should be corresponding to room table ."
    },
    {
        "db_id": "hospital_1",
        "table_names": [
            "physician",
            "department",
            "affiliated with",
            "procedures",
            "trained in",
            "patient",
            "nurse",
            "appointment",
            "medication",
            "prescribes",
            "block",
            "room",
            "on call",
            "stay",
            "undergoes"
        ],
        "column_names": [
            "employee id",
            "name",
            "position",
            "ssn",
            "departmentid",
            "name",
            "head",
            "physician",
            "department",
            "primary affiliation",
            "code",
            "name",
            "cost",
            "physician",
            "treatment",
            "certification date",
            "certification expires",
            "ssn",
            "name",
            "address",
            "phone",
            "insurance id",
            "pcp",
            "employee id",
            "name",
            "position",
            "registered",
            "ssn",
            "appointment id",
            "patient",
            "prep nurse",
            "physician",
            "start",
            "end",
            "examination room",
            "code",
            "name",
            "brand",
            "description",
            "physician",
            "patient",
            "medication",
            "date",
            "appointment",
            "dose",
            "block floor",
            "block code",
            "roomnumber",
            "room type",
            "block floor",
            "block code",
            "unavailable",
            "nurse",
            "block floor",
            "block code",
            "oncall start",
            "oncall end",
            "stay id",
            "patient",
            "room",
            "stay start",
            "stay end",
            "patient",
            "procedures",
            "stay",
            "date undergoes",
            "physician",
            "assisting nurse"
        ],
        "template_feedback": "additionally use the information from the block table besides the room table .",
        "positive_example": "i want rows count which is equivalent to room table ."
    },
    {
        "db_id": "hospital_1",
        "table_names": [
            "physician",
            "department",
            "affiliated with",
            "procedures",
            "trained in",
            "patient",
            "nurse",
            "appointment",
            "medication",
            "prescribes",
            "block",
            "room",
            "on call",
            "stay",
            "undergoes"
        ],
        "column_names": [
            "employee id",
            "name",
            "position",
            "ssn",
            "departmentid",
            "name",
            "head",
            "physician",
            "department",
            "primary affiliation",
            "code",
            "name",
            "cost",
            "physician",
            "treatment",
            "certification date",
            "certification expires",
            "ssn",
            "name",
            "address",
            "phone",
            "insurance id",
            "pcp",
            "employee id",
            "name",
            "position",
            "registered",
            "ssn",
            "appointment id",
            "patient",
            "prep nurse",
            "physician",
            "start",
            "end",
            "examination room",
            "code",
            "name",
            "brand",
            "description",
            "physician",
            "patient",
            "medication",
            "date",
            "appointment",
            "dose",
            "block floor",
            "block code",
            "roomnumber",
            "room type",
            "block floor",
            "block code",
            "unavailable",
            "nurse",
            "block floor",
            "block code",
            "oncall start",
            "oncall end",
            "stay id",
            "patient",
            "room",
            "stay start",
            "stay end",
            "patient",
            "procedures",
            "stay",
            "date undergoes",
            "physician",
            "assisting nurse"
        ],
        "template_feedback": "additionally use the information from the block table besides the room table .",
        "positive_example": "i want rows count of the room table ."
    },
    {
        "db_id": "department_management",
        "table_names": [
            "department",
            "head",
            "management"
        ],
        "column_names": [
            "department id",
            "name",
            "creation",
            "ranking",
            "budget in billions",
            "num employees",
            "head id",
            "name",
            "born state",
            "age",
            "department id",
            "head id",
            "temporary acting"
        ],
        "template_feedback": "in step 1 , additionally use the information from the head table . in step 2 , consider the born state equals alabama conditions in place of the temporary acting equals alabama conditions .",
        "positive_example": "you only need to use state of birth while searching under secretary managing department ."
    },
    {
        "db_id": "product_catalog",
        "table_names": [
            "attribute definitions",
            "catalogs",
            "catalog structure",
            "catalog contents",
            "catalog contents additional attributes"
        ],
        "column_names": [
            "attribute id",
            "attribute name",
            "attribute data type",
            "catalog id",
            "catalog name",
            "catalog publisher",
            "date of publication",
            "date of latest revision",
            "catalog level number",
            "catalog id",
            "catalog level name",
            "catalog entry id",
            "catalog level number",
            "parent entry id",
            "previous entry id",
            "next entry id",
            "catalog entry name",
            "product stock number",
            "price in dollars",
            "price in euros",
            "price in pounds",
            "capacity",
            "length",
            "height",
            "width",
            "catalog entry id",
            "catalog level number",
            "attribute id",
            "attribute value"
        ],
        "template_feedback": "in step 1 , use catalog contents additional attributes table in place of catalog structure table and catalogs table in step 2 , consider the catalog contents additional attributes 's catalog level number equals 8 conditions in place of the price in pounds equals 8 conditions . find catalog entry name in place of catalog name .",
        "positive_example": "you need to use name of catalog entry and level number of catalog ."
    },
    {
        "db_id": "ship_mission",
        "table_names": [
            "mission",
            "ship"
        ],
        "column_names": [
            "mission id",
            "ship id",
            "code",
            "launched year",
            "location",
            "speed knots",
            "fate",
            "ship id",
            "name",
            "type",
            "nationality",
            "tonnage"
        ],
        "template_feedback": "use ship table in place of mission table .",
        "positive_example": "replace mission table with ship table ."
    },
    {
        "db_id": "ship_mission",
        "table_names": [
            "mission",
            "ship"
        ],
        "column_names": [
            "mission id",
            "ship id",
            "code",
            "launched year",
            "location",
            "speed knots",
            "fate",
            "ship id",
            "name",
            "type",
            "nationality",
            "tonnage"
        ],
        "template_feedback": "use ship table in place of mission table .",
        "positive_example": "i want ship table instead of mission table ."
    },
    {
        "db_id": "soccer_1",
        "table_names": [
            "player attributes",
            "sqlite sequence",
            "player",
            "league",
            "country",
            "team",
            "team attributes"
        ],
        "column_names": [
            "id",
            "player fifa api id",
            "player api id",
            "date",
            "overall rating",
            "potential",
            "preferred foot",
            "attacking work rate",
            "defensive work rate",
            "crossing",
            "finishing",
            "heading accuracy",
            "short passing",
            "volleys",
            "dribbling",
            "curve",
            "free kick accuracy",
            "long passing",
            "ball control",
            "acceleration",
            "sprint speed",
            "agility",
            "reactions",
            "balance",
            "shot power",
            "jumping",
            "stamina",
            "strength",
            "long shots",
            "aggression",
            "interceptions",
            "positioning",
            "vision",
            "penalties",
            "marking",
            "standing tackle",
            "sliding tackle",
            "gk diving",
            "gk handling",
            "gk kicking",
            "gk positioning",
            "gk reflexes",
            "name",
            "seq",
            "id",
            "player api id",
            "player name",
            "player fifa api id",
            "birthday",
            "height",
            "weight",
            "id",
            "country id",
            "name",
            "id",
            "name",
            "id",
            "team api id",
            "team fifa api id",
            "team long name",
            "team short name",
            "id",
            "team fifa api id",
            "team api id",
            "date",
            "buildup play speed",
            "buildup play speed class",
            "buildup play dribbling",
            "buildup play dribbling class",
            "buildup play passing",
            "buildup play passing class",
            "buildup play positioning class",
            "chance creation passing",
            "chance creation passing class",
            "chance creation crossing",
            "chance creation crossing class",
            "chance creation shooting",
            "chance creation shooting class",
            "chance creation positioning class",
            "defence pressure",
            "defence pressure class",
            "defence aggression",
            "defence aggression class",
            "defence team width",
            "defence team width class",
            "defence defender line class"
        ],
        "template_feedback": "find for each value of preferred foot . additionally find preferred foot .",
        "positive_example": "you have to find selected foot for both right as well as left ."
    },
    {
        "db_id": "election",
        "table_names": [
            "county",
            "party",
            "election"
        ],
        "column_names": [
            "county id",
            "county name",
            "population",
            "zip code",
            "party id",
            "year",
            "party",
            "governor",
            "lieutenant governor",
            "comptroller",
            "attorney general",
            "us senate",
            "election id",
            "counties represented",
            "district",
            "delegate",
            "party",
            "first elected",
            "committee"
        ],
        "template_feedback": "additionally use the information from the election table besides the party table . find for each value of election 's party in place of party 's party .",
        "positive_example": "make sure to find delegates for each party ."
    },
    {
        "db_id": "election",
        "table_names": [
            "county",
            "party",
            "election"
        ],
        "column_names": [
            "county id",
            "county name",
            "population",
            "zip code",
            "party id",
            "year",
            "party",
            "governor",
            "lieutenant governor",
            "comptroller",
            "attorney general",
            "us senate",
            "election id",
            "counties represented",
            "district",
            "delegate",
            "party",
            "first elected",
            "committee"
        ],
        "template_feedback": "additionally use the information from the election table besides the party table . find for each value of election 's party in place of party 's party .",
        "positive_example": "they need every party 's delegates ."
    },
    {
        "db_id": "department_store",
        "table_names": [
            "addresses",
            "staff",
            "suppliers",
            "department store chain",
            "customers",
            "products",
            "supplier addresses",
            "customer addresses",
            "customer orders",
            "department stores",
            "departments",
            "order items",
            "product suppliers",
            "staff department assignments"
        ],
        "column_names": [
            "address id",
            "address details",
            "staff id",
            "staff gender",
            "staff name",
            "supplier id",
            "supplier name",
            "supplier phone",
            "department store chain id",
            "department store chain name",
            "customer id",
            "payment method code",
            "customer code",
            "customer name",
            "customer address",
            "customer phone",
            "customer email",
            "product id",
            "product type code",
            "product name",
            "product price",
            "supplier id",
            "address id",
            "date from",
            "date to",
            "customer id",
            "address id",
            "date from",
            "date to",
            "order id",
            "customer id",
            "order status code",
            "order date",
            "department store id",
            "department store chain id",
            "store name",
            "store address",
            "store phone",
            "store email",
            "department id",
            "department store id",
            "department name",
            "order item id",
            "order id",
            "product id",
            "product id",
            "supplier id",
            "date supplied from",
            "date supplied to",
            "total amount purchased",
            "total value purchased",
            "staff id",
            "department id",
            "date assigned from",
            "job title code",
            "date assigned to"
        ],
        "template_feedback": "in step 3 , additionally make sure that supplier id equals 2 .",
        "positive_example": "you need to verify that product suppliers as well as suppliers id should be 2 ."
    },
    {
        "db_id": "department_management",
        "table_names": [
            "department",
            "head",
            "management"
        ],
        "column_names": [
            "department id",
            "name",
            "creation",
            "ranking",
            "budget in billions",
            "num employees",
            "head id",
            "name",
            "born state",
            "age",
            "department id",
            "head id",
            "temporary acting"
        ],
        "template_feedback": "in step 1 , do not use the department table and management table . in step 2 , find head 's name in place of department 's name .",
        "positive_example": "make sure to find name of head table ."
    },
    {
        "db_id": "department_management",
        "table_names": [
            "department",
            "head",
            "management"
        ],
        "column_names": [
            "department id",
            "name",
            "creation",
            "ranking",
            "budget in billions",
            "num employees",
            "head id",
            "name",
            "born state",
            "age",
            "department id",
            "head id",
            "temporary acting"
        ],
        "template_feedback": "in step 1 , do not use the department table and management table . in step 2 , find head 's name in place of department 's name .",
        "positive_example": "you must search for the name of head table ."
    },
    {
        "db_id": "wrestler",
        "table_names": [
            "wrestler",
            "elimination"
        ],
        "column_names": [
            "wrestler id",
            "name",
            "reign",
            "days held",
            "location",
            "event",
            "elimination id",
            "wrestler id",
            "team",
            "eliminated by",
            "elimination move",
            "time"
        ],
        "template_feedback": "additionally use the information from the elimination table besides the wrestler table . find elimination move in place of event .",
        "positive_example": "give me the elimination move of elimination table ."
    },
    {
        "db_id": "program_share",
        "table_names": [
            "program",
            "channel",
            "broadcast",
            "broadcast share"
        ],
        "column_names": [
            "program id",
            "name",
            "origin",
            "launch",
            "owner",
            "channel id",
            "name",
            "owner",
            "share in percent",
            "rating in percent",
            "channel id",
            "program id",
            "time of day",
            "channel id",
            "program id",
            "date",
            "share in percent"
        ],
        "template_feedback": "additionally use the information from the broadcast table besides the channel table . additionally make sure that time of day equals morning .",
        "positive_example": "confirm that the day 's time is equivalent to morning ."
    },
    {
        "db_id": "election",
        "table_names": [
            "county",
            "party",
            "election"
        ],
        "column_names": [
            "county id",
            "county name",
            "population",
            "zip code",
            "party id",
            "year",
            "party",
            "governor",
            "lieutenant governor",
            "comptroller",
            "attorney general",
            "us senate",
            "election id",
            "counties represented",
            "district",
            "delegate",
            "party",
            "first elected",
            "committee"
        ],
        "template_feedback": "in step 1 , additionally use the information from the election table besides the county table . find for value of county id in place of county name .",
        "positive_example": "makes sure counties have two or more delegates ."
    },
    {
        "db_id": "election",
        "table_names": [
            "county",
            "party",
            "election"
        ],
        "column_names": [
            "county id",
            "county name",
            "population",
            "zip code",
            "party id",
            "year",
            "party",
            "governor",
            "lieutenant governor",
            "comptroller",
            "attorney general",
            "us senate",
            "election id",
            "counties represented",
            "district",
            "delegate",
            "party",
            "first elected",
            "committee"
        ],
        "template_feedback": "in step 1 , additionally use the information from the election table besides the county table . find for value of county id in place of county name .",
        "positive_example": "you need to confirm that counties should have more or two delegates ."
    },
    {
        "db_id": "department_management",
        "table_names": [
            "department",
            "head",
            "management"
        ],
        "column_names": [
            "department id",
            "name",
            "creation",
            "ranking",
            "budget in billions",
            "num employees",
            "head id",
            "name",
            "born state",
            "age",
            "department id",
            "head id",
            "temporary acting"
        ],
        "template_feedback": "additionally use the information from the management table besides the head table . additionally make sure that temporary acting equals yes .",
        "positive_example": "make sure to find only for the one with acting ."
    },
    {
        "db_id": "department_management",
        "table_names": [
            "department",
            "head",
            "management"
        ],
        "column_names": [
            "department id",
            "name",
            "creation",
            "ranking",
            "budget in billions",
            "num employees",
            "head id",
            "name",
            "born state",
            "age",
            "department id",
            "head id",
            "temporary acting"
        ],
        "template_feedback": "additionally use the information from the management table besides the head table . additionally make sure that temporary acting equals yes .",
        "positive_example": "calculate the one with drama ."
    },
    {
        "db_id": "hospital_1",
        "table_names": [
            "physician",
            "department",
            "affiliated with",
            "procedures",
            "trained in",
            "patient",
            "nurse",
            "appointment",
            "medication",
            "prescribes",
            "block",
            "room",
            "on call",
            "stay",
            "undergoes"
        ],
        "column_names": [
            "employee id",
            "name",
            "position",
            "ssn",
            "departmentid",
            "name",
            "head",
            "physician",
            "department",
            "primary affiliation",
            "code",
            "name",
            "cost",
            "physician",
            "treatment",
            "certification date",
            "certification expires",
            "ssn",
            "name",
            "address",
            "phone",
            "insurance id",
            "pcp",
            "employee id",
            "name",
            "position",
            "registered",
            "ssn",
            "appointment id",
            "patient",
            "prep nurse",
            "physician",
            "start",
            "end",
            "examination room",
            "code",
            "name",
            "brand",
            "description",
            "physician",
            "patient",
            "medication",
            "date",
            "appointment",
            "dose",
            "block floor",
            "block code",
            "roomnumber",
            "room type",
            "block floor",
            "block code",
            "unavailable",
            "nurse",
            "block floor",
            "block code",
            "oncall start",
            "oncall end",
            "stay id",
            "patient",
            "room",
            "stay start",
            "stay end",
            "patient",
            "procedures",
            "stay",
            "date undergoes",
            "physician",
            "assisting nurse"
        ],
        "template_feedback": "additionally make sure that unavailable equals 0 .",
        "positive_example": "make sure find for room that are not reserved ."
    },
    {
        "db_id": "hospital_1",
        "table_names": [
            "physician",
            "department",
            "affiliated with",
            "procedures",
            "trained in",
            "patient",
            "nurse",
            "appointment",
            "medication",
            "prescribes",
            "block",
            "room",
            "on call",
            "stay",
            "undergoes"
        ],
        "column_names": [
            "employee id",
            "name",
            "position",
            "ssn",
            "departmentid",
            "name",
            "head",
            "physician",
            "department",
            "primary affiliation",
            "code",
            "name",
            "cost",
            "physician",
            "treatment",
            "certification date",
            "certification expires",
            "ssn",
            "name",
            "address",
            "phone",
            "insurance id",
            "pcp",
            "employee id",
            "name",
            "position",
            "registered",
            "ssn",
            "appointment id",
            "patient",
            "prep nurse",
            "physician",
            "start",
            "end",
            "examination room",
            "code",
            "name",
            "brand",
            "description",
            "physician",
            "patient",
            "medication",
            "date",
            "appointment",
            "dose",
            "block floor",
            "block code",
            "roomnumber",
            "room type",
            "block floor",
            "block code",
            "unavailable",
            "nurse",
            "block floor",
            "block code",
            "oncall start",
            "oncall end",
            "stay id",
            "patient",
            "room",
            "stay start",
            "stay end",
            "patient",
            "procedures",
            "stay",
            "date undergoes",
            "physician",
            "assisting nurse"
        ],
        "template_feedback": "additionally make sure that unavailable equals 0 .",
        "positive_example": "confirm that the rooms are not booked ."
    },
    {
        "db_id": "department_store",
        "table_names": [
            "addresses",
            "staff",
            "suppliers",
            "department store chain",
            "customers",
            "products",
            "supplier addresses",
            "customer addresses",
            "customer orders",
            "department stores",
            "departments",
            "order items",
            "product suppliers",
            "staff department assignments"
        ],
        "column_names": [
            "address id",
            "address details",
            "staff id",
            "staff gender",
            "staff name",
            "supplier id",
            "supplier name",
            "supplier phone",
            "department store chain id",
            "department store chain name",
            "customer id",
            "payment method code",
            "customer code",
            "customer name",
            "customer address",
            "customer phone",
            "customer email",
            "product id",
            "product type code",
            "product name",
            "product price",
            "supplier id",
            "address id",
            "date from",
            "date to",
            "customer id",
            "address id",
            "date from",
            "date to",
            "order id",
            "customer id",
            "order status code",
            "order date",
            "department store id",
            "department store chain id",
            "store name",
            "store address",
            "store phone",
            "store email",
            "department id",
            "department store id",
            "department name",
            "order item id",
            "order id",
            "product id",
            "product id",
            "supplier id",
            "date supplied from",
            "date supplied to",
            "total amount purchased",
            "total value purchased",
            "staff id",
            "department id",
            "date assigned from",
            "job title code",
            "date assigned to"
        ],
        "template_feedback": "additionally use the information from the order items table and customer orders table besides the products table . find for each value of products 's product id whose number of different customer id greater than or equals 2 .",
        "positive_example": "confirm that at least two specific customers had purchased that product ."
    },
    {
        "db_id": "flight_1",
        "table_names": [
            "flight",
            "aircraft",
            "employee",
            "certificate"
        ],
        "column_names": [
            "flight number",
            "origin",
            "destination",
            "distance",
            "departure date",
            "arrival date",
            "price",
            "airline id",
            "airline id",
            "name",
            "distance",
            "employee id",
            "name",
            "salary",
            "employee id",
            "airline id"
        ],
        "template_feedback": "in step 1 , order the results ascending .",
        "positive_example": "there should be ordered ascending by distance instead of descending by distance ."
    },
    {
        "db_id": "flight_1",
        "table_names": [
            "flight",
            "aircraft",
            "employee",
            "certificate"
        ],
        "column_names": [
            "flight number",
            "origin",
            "destination",
            "distance",
            "departure date",
            "arrival date",
            "price",
            "airline id",
            "airline id",
            "name",
            "distance",
            "employee id",
            "name",
            "salary",
            "employee id",
            "airline id"
        ],
        "template_feedback": "in step 1 , order the results ascending .",
        "positive_example": "you have to arrange distance in move up order ."
    },
    {
        "db_id": "department_store",
        "table_names": [
            "addresses",
            "staff",
            "suppliers",
            "department store chain",
            "customers",
            "products",
            "supplier addresses",
            "customer addresses",
            "customer orders",
            "department stores",
            "departments",
            "order items",
            "product suppliers",
            "staff department assignments"
        ],
        "column_names": [
            "address id",
            "address details",
            "staff id",
            "staff gender",
            "staff name",
            "supplier id",
            "supplier name",
            "supplier phone",
            "department store chain id",
            "department store chain name",
            "customer id",
            "payment method code",
            "customer code",
            "customer name",
            "customer address",
            "customer phone",
            "customer email",
            "product id",
            "product type code",
            "product name",
            "product price",
            "supplier id",
            "address id",
            "date from",
            "date to",
            "customer id",
            "address id",
            "date from",
            "date to",
            "order id",
            "customer id",
            "order status code",
            "order date",
            "department store id",
            "department store chain id",
            "store name",
            "store address",
            "store phone",
            "store email",
            "department id",
            "department store id",
            "department name",
            "order item id",
            "order id",
            "product id",
            "product id",
            "supplier id",
            "date supplied from",
            "date supplied to",
            "total amount purchased",
            "total value purchased",
            "staff id",
            "department id",
            "date assigned from",
            "job title code",
            "date assigned to"
        ],
        "template_feedback": "consider the customer address like % tn % conditions in place of the customer address equals tn conditions .",
        "positive_example": "replace customer address equals tn with customer address contains tn"
    },
    {
        "db_id": "department_store",
        "table_names": [
            "addresses",
            "staff",
            "suppliers",
            "department store chain",
            "customers",
            "products",
            "supplier addresses",
            "customer addresses",
            "customer orders",
            "department stores",
            "departments",
            "order items",
            "product suppliers",
            "staff department assignments"
        ],
        "column_names": [
            "address id",
            "address details",
            "staff id",
            "staff gender",
            "staff name",
            "supplier id",
            "supplier name",
            "supplier phone",
            "department store chain id",
            "department store chain name",
            "customer id",
            "payment method code",
            "customer code",
            "customer name",
            "customer address",
            "customer phone",
            "customer email",
            "product id",
            "product type code",
            "product name",
            "product price",
            "supplier id",
            "address id",
            "date from",
            "date to",
            "customer id",
            "address id",
            "date from",
            "date to",
            "order id",
            "customer id",
            "order status code",
            "order date",
            "department store id",
            "department store chain id",
            "store name",
            "store address",
            "store phone",
            "store email",
            "department id",
            "department store id",
            "department name",
            "order item id",
            "order id",
            "product id",
            "product id",
            "supplier id",
            "date supplied from",
            "date supplied to",
            "total amount purchased",
            "total value purchased",
            "staff id",
            "department id",
            "date assigned from",
            "job title code",
            "date assigned to"
        ],
        "template_feedback": "consider the customer address like % tn % conditions in place of the customer address equals tn conditions .",
        "positive_example": "you should use tn contains customer address ."
    },
    {
        "db_id": "hospital_1",
        "table_names": [
            "physician",
            "department",
            "affiliated with",
            "procedures",
            "trained in",
            "patient",
            "nurse",
            "appointment",
            "medication",
            "prescribes",
            "block",
            "room",
            "on call",
            "stay",
            "undergoes"
        ],
        "column_names": [
            "employee id",
            "name",
            "position",
            "ssn",
            "departmentid",
            "name",
            "head",
            "physician",
            "department",
            "primary affiliation",
            "code",
            "name",
            "cost",
            "physician",
            "treatment",
            "certification date",
            "certification expires",
            "ssn",
            "name",
            "address",
            "phone",
            "insurance id",
            "pcp",
            "employee id",
            "name",
            "position",
            "registered",
            "ssn",
            "appointment id",
            "patient",
            "prep nurse",
            "physician",
            "start",
            "end",
            "examination room",
            "code",
            "name",
            "brand",
            "description",
            "physician",
            "patient",
            "medication",
            "date",
            "appointment",
            "dose",
            "block floor",
            "block code",
            "roomnumber",
            "room type",
            "block floor",
            "block code",
            "unavailable",
            "nurse",
            "block floor",
            "block code",
            "oncall start",
            "oncall end",
            "stay id",
            "patient",
            "room",
            "stay start",
            "stay end",
            "patient",
            "procedures",
            "stay",
            "date undergoes",
            "physician",
            "assisting nurse"
        ],
        "template_feedback": "in step 1 , do not use the trained in table and physician table . in step 2 , consider the cost greater than 1000 conditions in place of the physician 's name equals john wen conditions . in step 3 , additionally use the information from the trained in table and physician table besides the procedures table . consider the physician 's name equals john wen conditions in place of the cost greater than 1000 conditions .",
        "positive_example": "need to show results that are in step 3 but not in step 2 ."
    },
    {
        "db_id": "hospital_1",
        "table_names": [
            "physician",
            "department",
            "affiliated with",
            "procedures",
            "trained in",
            "patient",
            "nurse",
            "appointment",
            "medication",
            "prescribes",
            "block",
            "room",
            "on call",
            "stay",
            "undergoes"
        ],
        "column_names": [
            "employee id",
            "name",
            "position",
            "ssn",
            "departmentid",
            "name",
            "head",
            "physician",
            "department",
            "primary affiliation",
            "code",
            "name",
            "cost",
            "physician",
            "treatment",
            "certification date",
            "certification expires",
            "ssn",
            "name",
            "address",
            "phone",
            "insurance id",
            "pcp",
            "employee id",
            "name",
            "position",
            "registered",
            "ssn",
            "appointment id",
            "patient",
            "prep nurse",
            "physician",
            "start",
            "end",
            "examination room",
            "code",
            "name",
            "brand",
            "description",
            "physician",
            "patient",
            "medication",
            "date",
            "appointment",
            "dose",
            "block floor",
            "block code",
            "roomnumber",
            "room type",
            "block floor",
            "block code",
            "unavailable",
            "nurse",
            "block floor",
            "block code",
            "oncall start",
            "oncall end",
            "stay id",
            "patient",
            "room",
            "stay start",
            "stay end",
            "patient",
            "procedures",
            "stay",
            "date undergoes",
            "physician",
            "assisting nurse"
        ],
        "template_feedback": "in step 1 , do not use the trained in table and physician table . in step 2 , consider the cost greater than 1000 conditions in place of the physician 's name equals john wen conditions . in step 3 , additionally use the information from the trained in table and physician table besides the procedures table . consider the physician 's name equals john wen conditions in place of the cost greater than 1000 conditions .",
        "positive_example": "the results are only in step 3 require to be seen ."
    },
    {
        "db_id": "flight_1",
        "table_names": [
            "flight",
            "aircraft",
            "employee",
            "certificate"
        ],
        "column_names": [
            "flight number",
            "origin",
            "destination",
            "distance",
            "departure date",
            "arrival date",
            "price",
            "airline id",
            "airline id",
            "name",
            "distance",
            "employee id",
            "name",
            "salary",
            "employee id",
            "airline id"
        ],
        "template_feedback": "use employee table in place of flight table .",
        "positive_example": "i want table of workers ."
    },
    {
        "db_id": "hospital_1",
        "table_names": [
            "physician",
            "department",
            "affiliated with",
            "procedures",
            "trained in",
            "patient",
            "nurse",
            "appointment",
            "medication",
            "prescribes",
            "block",
            "room",
            "on call",
            "stay",
            "undergoes"
        ],
        "column_names": [
            "employee id",
            "name",
            "position",
            "ssn",
            "departmentid",
            "name",
            "head",
            "physician",
            "department",
            "primary affiliation",
            "code",
            "name",
            "cost",
            "physician",
            "treatment",
            "certification date",
            "certification expires",
            "ssn",
            "name",
            "address",
            "phone",
            "insurance id",
            "pcp",
            "employee id",
            "name",
            "position",
            "registered",
            "ssn",
            "appointment id",
            "patient",
            "prep nurse",
            "physician",
            "start",
            "end",
            "examination room",
            "code",
            "name",
            "brand",
            "description",
            "physician",
            "patient",
            "medication",
            "date",
            "appointment",
            "dose",
            "block floor",
            "block code",
            "roomnumber",
            "room type",
            "block floor",
            "block code",
            "unavailable",
            "nurse",
            "block floor",
            "block code",
            "oncall start",
            "oncall end",
            "stay id",
            "patient",
            "room",
            "stay start",
            "stay end",
            "patient",
            "procedures",
            "stay",
            "date undergoes",
            "physician",
            "assisting nurse"
        ],
        "template_feedback": "additionally use the information from the affiliated with table besides the department table . additionally make sure that primary affiliation equals 1 .",
        "positive_example": "you should confirm essentially departments are associated with physicians ."
    },
    {
        "db_id": "flight_1",
        "table_names": [
            "flight",
            "aircraft",
            "employee",
            "certificate"
        ],
        "column_names": [
            "flight number",
            "origin",
            "destination",
            "distance",
            "departure date",
            "arrival date",
            "price",
            "airline id",
            "airline id",
            "name",
            "distance",
            "employee id",
            "name",
            "salary",
            "employee id",
            "airline id"
        ],
        "template_feedback": "use employee table in place of flight table .",
        "positive_example": "i want table of workers ."
    },
    {
        "db_id": "sakila_1",
        "table_names": [
            "actor",
            "address",
            "category",
            "city",
            "country",
            "customer",
            "film",
            "film actor",
            "film category",
            "film text",
            "inventory",
            "language",
            "payment",
            "rental",
            "staff",
            "store"
        ],
        "column_names": [
            "actor id",
            "first name",
            "last name",
            "last update",
            "address id",
            "address",
            "address2",
            "district",
            "city id",
            "postal code",
            "phone",
            "last update",
            "category id",
            "name",
            "last update",
            "city id",
            "city",
            "country id",
            "last update",
            "country id",
            "country",
            "last update",
            "customer id",
            "store id",
            "first name",
            "last name",
            "email",
            "address id",
            "active",
            "create date",
            "last update",
            "film id",
            "title",
            "description",
            "release year",
            "language id",
            "original language id",
            "rental duration",
            "rental rate",
            "length",
            "replacement cost",
            "rating",
            "special features",
            "last update",
            "actor id",
            "film id",
            "last update",
            "film id",
            "category id",
            "last update",
            "film id",
            "title",
            "description",
            "inventory id",
            "film id",
            "store id",
            "last update",
            "language id",
            "name",
            "last update",
            "payment id",
            "customer id",
            "staff id",
            "rental id",
            "amount",
            "payment date",
            "last update",
            "rental id",
            "rental date",
            "inventory id",
            "customer id",
            "return date",
            "staff id",
            "last update",
            "staff id",
            "first name",
            "last name",
            "address id",
            "picture",
            "email",
            "store id",
            "active",
            "username",
            "password",
            "last update",
            "store id",
            "manager staff id",
            "address id",
            "last update"
        ],
        "template_feedback": "consider the special features like % deleted scenes % conditions in place of the title like deleted scenes conditions .",
        "positive_example": "i want special attributes ."
    },
    {
        "db_id": "product_catalog",
        "table_names": [
            "attribute definitions",
            "catalogs",
            "catalog structure",
            "catalog contents",
            "catalog contents additional attributes"
        ],
        "column_names": [
            "attribute id",
            "attribute name",
            "attribute data type",
            "catalog id",
            "catalog name",
            "catalog publisher",
            "date of publication",
            "date of latest revision",
            "catalog level number",
            "catalog id",
            "catalog level name",
            "catalog entry id",
            "catalog level number",
            "parent entry id",
            "previous entry id",
            "next entry id",
            "catalog entry name",
            "product stock number",
            "price in dollars",
            "price in euros",
            "price in pounds",
            "capacity",
            "length",
            "height",
            "width",
            "catalog entry id",
            "catalog level number",
            "attribute id",
            "attribute value"
        ],
        "template_feedback": "order the results by price in dollars in place of price in pounds .",
        "positive_example": "i want you to provied me cost in dollars ."
    },
    {
        "db_id": "protein_institute",
        "table_names": [
            "building",
            "institution",
            "protein"
        ],
        "column_names": [
            "building id",
            "name",
            "street address",
            "years as tallest",
            "height feet",
            "floors",
            "institution id",
            "institution",
            "location",
            "founded",
            "type",
            "enrollment",
            "team",
            "primary conference",
            "building id",
            "common name",
            "protein name",
            "divergence from human lineage",
            "accession number",
            "sequence length",
            "sequence identity to human protein",
            "institution id"
        ],
        "template_feedback": "in step 3 , find for value of building 's building id in place of institution .",
        "positive_example": "remove \" and greater than \" and also add founded year is greater than 1880 ."
    },
    {
        "db_id": "protein_institute",
        "table_names": [
            "building",
            "institution",
            "protein"
        ],
        "column_names": [
            "building id",
            "name",
            "street address",
            "years as tallest",
            "height feet",
            "floors",
            "institution id",
            "institution",
            "location",
            "founded",
            "type",
            "enrollment",
            "team",
            "primary conference",
            "building id",
            "common name",
            "protein name",
            "divergence from human lineage",
            "accession number",
            "sequence length",
            "sequence identity to human protein",
            "institution id"
        ],
        "template_feedback": "in step 3 , find for value of building 's building id in place of institution .",
        "positive_example": "you should delete and greater than and sum up year of foundation which is higher than 1880 ."
    },
    {
        "db_id": "department_store",
        "table_names": [
            "addresses",
            "staff",
            "suppliers",
            "department store chain",
            "customers",
            "products",
            "supplier addresses",
            "customer addresses",
            "customer orders",
            "department stores",
            "departments",
            "order items",
            "product suppliers",
            "staff department assignments"
        ],
        "column_names": [
            "address id",
            "address details",
            "staff id",
            "staff gender",
            "staff name",
            "supplier id",
            "supplier name",
            "supplier phone",
            "department store chain id",
            "department store chain name",
            "customer id",
            "payment method code",
            "customer code",
            "customer name",
            "customer address",
            "customer phone",
            "customer email",
            "product id",
            "product type code",
            "product name",
            "product price",
            "supplier id",
            "address id",
            "date from",
            "date to",
            "customer id",
            "address id",
            "date from",
            "date to",
            "order id",
            "customer id",
            "order status code",
            "order date",
            "department store id",
            "department store chain id",
            "store name",
            "store address",
            "store phone",
            "store email",
            "department id",
            "department store id",
            "department name",
            "order item id",
            "order id",
            "product id",
            "product id",
            "supplier id",
            "date supplied from",
            "date supplied to",
            "total amount purchased",
            "total value purchased",
            "staff id",
            "department id",
            "date assigned from",
            "job title code",
            "date assigned to"
        ],
        "template_feedback": "additionally use the information from the order items table , products table , and customer orders table besides the customers table . additionally make sure that product name equals keyboard .",
        "positive_example": "make sure to find for customers who purchased keyboard ."
    },
    {
        "db_id": "department_store",
        "table_names": [
            "addresses",
            "staff",
            "suppliers",
            "department store chain",
            "customers",
            "products",
            "supplier addresses",
            "customer addresses",
            "customer orders",
            "department stores",
            "departments",
            "order items",
            "product suppliers",
            "staff department assignments"
        ],
        "column_names": [
            "address id",
            "address details",
            "staff id",
            "staff gender",
            "staff name",
            "supplier id",
            "supplier name",
            "supplier phone",
            "department store chain id",
            "department store chain name",
            "customer id",
            "payment method code",
            "customer code",
            "customer name",
            "customer address",
            "customer phone",
            "customer email",
            "product id",
            "product type code",
            "product name",
            "product price",
            "supplier id",
            "address id",
            "date from",
            "date to",
            "customer id",
            "address id",
            "date from",
            "date to",
            "order id",
            "customer id",
            "order status code",
            "order date",
            "department store id",
            "department store chain id",
            "store name",
            "store address",
            "store phone",
            "store email",
            "department id",
            "department store id",
            "department name",
            "order item id",
            "order id",
            "product id",
            "product id",
            "supplier id",
            "date supplied from",
            "date supplied to",
            "total amount purchased",
            "total value purchased",
            "staff id",
            "department id",
            "date assigned from",
            "job title code",
            "date assigned to"
        ],
        "template_feedback": "additionally use the information from the order items table , products table , and customer orders table besides the customers table . additionally make sure that product name equals keyboard .",
        "positive_example": "looking for customers who had purchased a keyboard ."
    },
    {
        "db_id": "program_share",
        "table_names": [
            "program",
            "channel",
            "broadcast",
            "broadcast share"
        ],
        "column_names": [
            "program id",
            "name",
            "origin",
            "launch",
            "owner",
            "channel id",
            "name",
            "owner",
            "share in percent",
            "rating in percent",
            "channel id",
            "program id",
            "time of day",
            "channel id",
            "program id",
            "date",
            "share in percent"
        ],
        "template_feedback": "in step 1 , do not use the broadcast table and channel table . in step 2 , find program 's name and origin in place of channel 's name and channel 's owner .",
        "positive_example": "in step 2 , i want program at both the places ."
    },
    {
        "db_id": "products_gen_characteristics",
        "table_names": [
            "reference characteristic types",
            "reference colors",
            "reference product categories",
            "characteristics",
            "products",
            "product characteristics"
        ],
        "column_names": [
            "characteristic type code",
            "characteristic type description",
            "color code",
            "color description",
            "product category code",
            "product category description",
            "unit of measure",
            "characteristic id",
            "characteristic type code",
            "characteristic data type",
            "characteristic name",
            "other characteristic details",
            "product id",
            "color code",
            "product category code",
            "product name",
            "typical buying price",
            "typical selling price",
            "product description",
            "other product details",
            "product id",
            "characteristic id",
            "product characteristic value"
        ],
        "template_feedback": "additionally use the information from the reference colors table besides the products table . consider the color description equals white conditions in place of the product description equals white conditions .",
        "positive_example": "i want explanation of color ."
    },
    {
        "db_id": "customers_and_addresses",
        "table_names": [
            "addresses",
            "products",
            "customers",
            "customer addresses",
            "customer contact channels",
            "customer orders",
            "order items"
        ],
        "column_names": [
            "address id",
            "address content",
            "city",
            "zip postcode",
            "state province county",
            "country",
            "other address details",
            "product id",
            "product details",
            "customer id",
            "payment method",
            "customer name",
            "date became customer",
            "other customer details",
            "customer id",
            "address id",
            "date address from",
            "address type",
            "date address to",
            "customer id",
            "channel code",
            "active from date",
            "active to date",
            "contact number",
            "order id",
            "customer id",
            "order status",
            "order date",
            "order details",
            "order id",
            "product id",
            "order quantity"
        ],
        "template_feedback": "additionally use the information from the order items table and customer orders table besides the customers table . additionally make sure that order quantity is equals maximum order quantity order items . you should not find the largest of the results . show me all the results .",
        "positive_example": "i want the quantity of order ."
    },
    {
        "db_id": "wine_1",
        "table_names": [
            "grapes",
            "appellations",
            "wine"
        ],
        "column_names": [
            "id",
            "grape",
            "color",
            "no",
            "appelation",
            "county",
            "state",
            "area",
            "isava",
            "no",
            "grape",
            "winery",
            "appelation",
            "state",
            "name",
            "year",
            "price",
            "score",
            "cases",
            "drink"
        ],
        "template_feedback": "in step 1 , find minimum price in place of maximum price .",
        "positive_example": "should be minimum in step 1"
    },
    {
        "db_id": "wine_1",
        "table_names": [
            "grapes",
            "appellations",
            "wine"
        ],
        "column_names": [
            "id",
            "grape",
            "color",
            "no",
            "appelation",
            "county",
            "state",
            "area",
            "isava",
            "no",
            "grape",
            "winery",
            "appelation",
            "state",
            "name",
            "year",
            "price",
            "score",
            "cases",
            "drink"
        ],
        "template_feedback": "in step 1 , find minimum price in place of maximum price .",
        "positive_example": "the moderation should be set to minimal for the step 1 ."
    },
    {
        "db_id": "soccer_2",
        "table_names": [
            "college",
            "player",
            "tryout"
        ],
        "column_names": [
            "college name",
            "state",
            "enrollment",
            "player id",
            "player name",
            "yes card",
            "training hours",
            "player id",
            "college name",
            "player position",
            "decision"
        ],
        "template_feedback": "in step 1 , do not use the college table . in step 2 , find number of rows in place of summation of enrollment . order the results descending by number of rows .",
        "positive_example": "you should count total rows for each college name and sort them by the count ."
    },
    {
        "db_id": "soccer_2",
        "table_names": [
            "college",
            "player",
            "tryout"
        ],
        "column_names": [
            "college name",
            "state",
            "enrollment",
            "player id",
            "player name",
            "yes card",
            "training hours",
            "player id",
            "college name",
            "player position",
            "decision"
        ],
        "template_feedback": "you should consider both of the conditions rather than either of them .",
        "positive_example": "should be and instead of or"
    },
    {
        "db_id": "soccer_2",
        "table_names": [
            "college",
            "player",
            "tryout"
        ],
        "column_names": [
            "college name",
            "state",
            "enrollment",
            "player id",
            "player name",
            "yes card",
            "training hours",
            "player id",
            "college name",
            "player position",
            "decision"
        ],
        "template_feedback": "you should consider both of the conditions rather than either of them .",
        "positive_example": "you must use both rather than using either of one ."
    },
    {
        "db_id": "soccer_2",
        "table_names": [
            "college",
            "player",
            "tryout"
        ],
        "column_names": [
            "college name",
            "state",
            "enrollment",
            "player id",
            "player name",
            "yes card",
            "training hours",
            "player id",
            "college name",
            "player position",
            "decision"
        ],
        "template_feedback": "in step 1 , do not use the college table . in step 2 , additionally make sure that tryout 's college name is equals college 's college name college with largest enrollment . you should not find the largest of the results . show me all the results .",
        "positive_example": "only need to find for players whose player id is present in tryout table ."
    },
    {
        "db_id": "soccer_2",
        "table_names": [
            "college",
            "player",
            "tryout"
        ],
        "column_names": [
            "college name",
            "state",
            "enrollment",
            "player id",
            "player name",
            "yes card",
            "training hours",
            "player id",
            "college name",
            "player position",
            "decision"
        ],
        "template_feedback": "in step 1 , do not use the college table . in step 2 , additionally make sure that tryout 's college name is equals college 's college name college with largest enrollment . you should not find the largest of the results . show me all the results .",
        "positive_example": "you should look for players with the presence of player id in tryout table ."
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "table_names": [
            "reference payment methods",
            "reference service types",
            "addresses",
            "products",
            "marketing regions",
            "clients",
            "drama workshop groups",
            "performers",
            "customers",
            "stores",
            "bookings",
            "performers in bookings",
            "customer orders",
            "order items",
            "invoices",
            "services",
            "bookings services",
            "invoice items"
        ],
        "column_names": [
            "payment method code",
            "payment method description",
            "service type code",
            "parent service type code",
            "service type description",
            "address id",
            "line 1",
            "line 2",
            "city town",
            "state county",
            "other details",
            "product id",
            "product name",
            "product price",
            "product description",
            "other product service details",
            "marketing region code",
            "marketing region name",
            "marketing region descriptrion",
            "other details",
            "client id",
            "address id",
            "customer email address",
            "customer name",
            "customer phone",
            "other details",
            "workshop group id",
            "address id",
            "currency code",
            "marketing region code",
            "store name",
            "store phone",
            "store email address",
            "other details",
            "performer id",
            "address id",
            "customer name",
            "customer phone",
            "customer email address",
            "other details",
            "customer id",
            "address id",
            "customer name",
            "customer phone",
            "customer email address",
            "other details",
            "store id",
            "address id",
            "marketing region code",
            "store name",
            "store phone",
            "store email address",
            "other details",
            "booking id",
            "customer id",
            "workshop group id",
            "status code",
            "store id",
            "order date",
            "planned delivery date",
            "actual delivery date",
            "other order details",
            "order id",
            "performer id",
            "order id",
            "customer id",
            "store id",
            "order date",
            "planned delivery date",
            "actual delivery date",
            "other order details",
            "order item id",
            "order id",
            "product id",
            "order quantity",
            "other item details",
            "invoice id",
            "order id",
            "payment method code",
            "product id",
            "order quantity",
            "other item details",
            "order item id",
            "service id",
            "service type code",
            "workshop group id",
            "product description",
            "product name",
            "product price",
            "other product service details",
            "order id",
            "product id",
            "invoice item id",
            "invoice id",
            "order id",
            "order item id",
            "product id",
            "order quantity",
            "other item details"
        ],
        "template_feedback": "in step 1 , use order items table in place of invoices table and invoice items table in step 2 , consider the order items 's order quantity equals 1 conditions in place of the invoice items 's order quantity equals 1 conditions . find actual delivery date in place of order date .",
        "positive_example": "i want the actual date of delivery ."
    },
    {
        "db_id": "shop_membership",
        "table_names": [
            "member",
            "branch",
            "membership register branch",
            "purchase"
        ],
        "column_names": [
            "member id",
            "card number",
            "name",
            "hometown",
            "level",
            "branch id",
            "name",
            "open year",
            "address road",
            "city",
            "membership amount",
            "member id",
            "branch id",
            "register year",
            "member id",
            "branch id",
            "year",
            "total pounds"
        ],
        "template_feedback": "in step 2 , additionally make sure that register year equals 2016 .",
        "positive_example": "you need to attach year of register is 2016 ."
    },
    {
        "db_id": "manufactory_1",
        "table_names": [
            "manufacturers",
            "products"
        ],
        "column_names": [
            "code",
            "name",
            "headquarter",
            "founder",
            "revenue",
            "code",
            "name",
            "price",
            "manufacturer"
        ],
        "template_feedback": "additionally use the information from the manufacturers table besides the products table . find for each value of manufacturers 's name in place of products 's name . find manufacturers 's name in place of products 's name .",
        "positive_example": "replace products table with manufacturer table and should be corresponding rows to each product ."
    },
    {
        "db_id": "manufactory_1",
        "table_names": [
            "manufacturers",
            "products"
        ],
        "column_names": [
            "code",
            "name",
            "headquarter",
            "founder",
            "revenue",
            "code",
            "name",
            "price",
            "manufacturer"
        ],
        "template_feedback": "additionally use the information from the manufacturers table besides the products table . find for each value of manufacturers 's name in place of products 's name . find manufacturers 's name in place of products 's name .",
        "positive_example": "i want manufacturer table for each value of product ."
    },
    {
        "db_id": "customers_and_addresses",
        "table_names": [
            "addresses",
            "products",
            "customers",
            "customer addresses",
            "customer contact channels",
            "customer orders",
            "order items"
        ],
        "column_names": [
            "address id",
            "address content",
            "city",
            "zip postcode",
            "state province county",
            "country",
            "other address details",
            "product id",
            "product details",
            "customer id",
            "payment method",
            "customer name",
            "date became customer",
            "other customer details",
            "customer id",
            "address id",
            "date address from",
            "address type",
            "date address to",
            "customer id",
            "channel code",
            "active from date",
            "active to date",
            "contact number",
            "order id",
            "customer id",
            "order status",
            "order date",
            "order details",
            "order id",
            "product id",
            "order quantity"
        ],
        "template_feedback": "additionally use the information from the order items table besides the customer orders table . find summation of order quantity in place of number of rows .",
        "positive_example": "need to find corresponding total number of products"
    },
    {
        "db_id": "customers_and_addresses",
        "table_names": [
            "addresses",
            "products",
            "customers",
            "customer addresses",
            "customer contact channels",
            "customer orders",
            "order items"
        ],
        "column_names": [
            "address id",
            "address content",
            "city",
            "zip postcode",
            "state province county",
            "country",
            "other address details",
            "product id",
            "product details",
            "customer id",
            "payment method",
            "customer name",
            "date became customer",
            "other customer details",
            "customer id",
            "address id",
            "date address from",
            "address type",
            "date address to",
            "customer id",
            "channel code",
            "active from date",
            "active to date",
            "contact number",
            "order id",
            "customer id",
            "order status",
            "order date",
            "order details",
            "order id",
            "product id",
            "order quantity"
        ],
        "template_feedback": "additionally use the information from the order items table besides the customer orders table . find summation of order quantity in place of number of rows .",
        "positive_example": "i want you to look for the corresponding summation of products ."
    },
    {
        "db_id": "soccer_2",
        "table_names": [
            "college",
            "player",
            "tryout"
        ],
        "column_names": [
            "college name",
            "state",
            "enrollment",
            "player id",
            "player name",
            "yes card",
            "training hours",
            "player id",
            "college name",
            "player position",
            "decision"
        ],
        "template_feedback": "in step 2 , make sure the enrollment is less than the results of step 1 the enrollment is greater than the results of step 1 . make sure no repetition in the results .",
        "positive_example": "need to replace \" greater \" with \" smaller \" in step 2 ."
    },
    {
        "db_id": "soccer_2",
        "table_names": [
            "college",
            "player",
            "tryout"
        ],
        "column_names": [
            "college name",
            "state",
            "enrollment",
            "player id",
            "player name",
            "yes card",
            "training hours",
            "player id",
            "college name",
            "player position",
            "decision"
        ],
        "template_feedback": "in step 2 , make sure the enrollment is less than the results of step 1 the enrollment is greater than the results of step 1 . make sure no repetition in the results .",
        "positive_example": "in step 2 , i want least ."
    },
    {
        "db_id": "ship_1",
        "table_names": [
            "captain",
            "ship"
        ],
        "column_names": [
            "captain id",
            "name",
            "ship id",
            "age",
            "class",
            "rank",
            "ship id",
            "name",
            "type",
            "built year",
            "class",
            "flag"
        ],
        "template_feedback": "use ship table in place of captain table .",
        "positive_example": "need to replace captain table with ship table ."
    },
    {
        "db_id": "ship_1",
        "table_names": [
            "captain",
            "ship"
        ],
        "column_names": [
            "captain id",
            "name",
            "ship id",
            "age",
            "class",
            "rank",
            "ship id",
            "name",
            "type",
            "built year",
            "class",
            "flag"
        ],
        "template_feedback": "use ship table in place of captain table .",
        "positive_example": "i want table of ship instead of table of captain ."
    },
    {
        "db_id": "dorm_1",
        "table_names": [
            "student",
            "dorm",
            "dorm amenity",
            "has amenity",
            "lives in"
        ],
        "column_names": [
            "student id",
            "last name",
            "first name",
            "age",
            "sex",
            "major",
            "advisor",
            "city code",
            "dorm id",
            "dorm name",
            "student capacity",
            "gender",
            "amenity id",
            "amenity name",
            "dorm id",
            "amenity id",
            "student id",
            "dorm id",
            "room number"
        ],
        "template_feedback": "additionally find number of rows .",
        "positive_example": "instead finding each value of city code , need to find count of students living in city ."
    },
    {
        "db_id": "shop_membership",
        "table_names": [
            "member",
            "branch",
            "membership register branch",
            "purchase"
        ],
        "column_names": [
            "member id",
            "card number",
            "name",
            "hometown",
            "level",
            "branch id",
            "name",
            "open year",
            "address road",
            "city",
            "membership amount",
            "member id",
            "branch id",
            "register year",
            "member id",
            "branch id",
            "year",
            "total pounds"
        ],
        "template_feedback": "consider the hometown like % kentucky % conditions in place of the hometown like kentucky conditions . find card number in place of number of rows .",
        "positive_example": "you need to look for the number of card ."
    },
    {
        "db_id": "dorm_1",
        "table_names": [
            "student",
            "dorm",
            "dorm amenity",
            "has amenity",
            "lives in"
        ],
        "column_names": [
            "student id",
            "last name",
            "first name",
            "age",
            "sex",
            "major",
            "advisor",
            "city code",
            "dorm id",
            "dorm name",
            "student capacity",
            "gender",
            "amenity id",
            "amenity name",
            "dorm id",
            "amenity id",
            "student id",
            "dorm id",
            "room number"
        ],
        "template_feedback": "in step 2 , additionally use the information from the dorm amenity table and has amenity table besides the dorm table . additionally make sure that amenity name equals tv lounge .",
        "positive_example": "you need to check that there should be no tv lounge in dormitory ."
    },
    {
        "db_id": "customers_and_addresses",
        "table_names": [
            "addresses",
            "products",
            "customers",
            "customer addresses",
            "customer contact channels",
            "customer orders",
            "order items"
        ],
        "column_names": [
            "address id",
            "address content",
            "city",
            "zip postcode",
            "state province county",
            "country",
            "other address details",
            "product id",
            "product details",
            "customer id",
            "payment method",
            "customer name",
            "date became customer",
            "other customer details",
            "customer id",
            "address id",
            "date address from",
            "address type",
            "date address to",
            "customer id",
            "channel code",
            "active from date",
            "active to date",
            "contact number",
            "order id",
            "customer id",
            "order status",
            "order date",
            "order details",
            "order id",
            "product id",
            "order quantity"
        ],
        "template_feedback": "in step 2 , consider the customer name equals maudie kertzmann conditions in place of the customer name like maudie kertzmann conditions .",
        "positive_example": "in step 2 , name of customer is maudie kertzmann ."
    },
    {
        "db_id": "shop_membership",
        "table_names": [
            "member",
            "branch",
            "membership register branch",
            "purchase"
        ],
        "column_names": [
            "member id",
            "card number",
            "name",
            "hometown",
            "level",
            "branch id",
            "name",
            "open year",
            "address road",
            "city",
            "membership amount",
            "member id",
            "branch id",
            "register year",
            "member id",
            "branch id",
            "year",
            "total pounds"
        ],
        "template_feedback": "in step 2 , find number of rows in place of summation of total pounds .",
        "positive_example": "you only need to calculate the number of rows of purchase table ."
    },
    {
        "db_id": "customers_and_addresses",
        "table_names": [
            "addresses",
            "products",
            "customers",
            "customer addresses",
            "customer contact channels",
            "customer orders",
            "order items"
        ],
        "column_names": [
            "address id",
            "address content",
            "city",
            "zip postcode",
            "state province county",
            "country",
            "other address details",
            "product id",
            "product details",
            "customer id",
            "payment method",
            "customer name",
            "date became customer",
            "other customer details",
            "customer id",
            "address id",
            "date address from",
            "address type",
            "date address to",
            "customer id",
            "channel code",
            "active from date",
            "active to date",
            "contact number",
            "order id",
            "customer id",
            "order status",
            "order date",
            "order details",
            "order id",
            "product id",
            "order quantity"
        ],
        "template_feedback": "in step 2 , find maximum active to date in place of active from date . you should not find the largest of the results . show me all the results .",
        "positive_example": "i want the initial channel code of customer contact channels table and sort them in descending order of their expiration date ."
    },
    {
        "db_id": "customers_and_addresses",
        "table_names": [
            "addresses",
            "products",
            "customers",
            "customer addresses",
            "customer contact channels",
            "customer orders",
            "order items"
        ],
        "column_names": [
            "address id",
            "address content",
            "city",
            "zip postcode",
            "state province county",
            "country",
            "other address details",
            "product id",
            "product details",
            "customer id",
            "payment method",
            "customer name",
            "date became customer",
            "other customer details",
            "customer id",
            "address id",
            "date address from",
            "address type",
            "date address to",
            "customer id",
            "channel code",
            "active from date",
            "active to date",
            "contact number",
            "order id",
            "customer id",
            "order status",
            "order date",
            "order details",
            "order id",
            "product id",
            "order quantity"
        ],
        "template_feedback": "in step 2 , find maximum active to date in place of active from date . you should not find the largest of the results . show me all the results .",
        "positive_example": "you should find the first channel code of customer contact channel table in the descending order to expiration date ."
    },
    {
        "db_id": "products_gen_characteristics",
        "table_names": [
            "reference characteristic types",
            "reference colors",
            "reference product categories",
            "characteristics",
            "products",
            "product characteristics"
        ],
        "column_names": [
            "characteristic type code",
            "characteristic type description",
            "color code",
            "color description",
            "product category code",
            "product category description",
            "unit of measure",
            "characteristic id",
            "characteristic type code",
            "characteristic data type",
            "characteristic name",
            "other characteristic details",
            "product id",
            "color code",
            "product category code",
            "product name",
            "typical buying price",
            "typical selling price",
            "product description",
            "other product details",
            "product id",
            "characteristic id",
            "product characteristic value"
        ],
        "template_feedback": "additionally use the information from the product characteristics table and characteristics table besides the products table .",
        "positive_example": "replace products table with characteristics table and make sure to find total number of characteristics ."
    },
    {
        "db_id": "customers_and_addresses",
        "table_names": [
            "addresses",
            "products",
            "customers",
            "customer addresses",
            "customer contact channels",
            "customer orders",
            "order items"
        ],
        "column_names": [
            "address id",
            "address content",
            "city",
            "zip postcode",
            "state province county",
            "country",
            "other address details",
            "product id",
            "product details",
            "customer id",
            "payment method",
            "customer name",
            "date became customer",
            "other customer details",
            "customer id",
            "address id",
            "date address from",
            "address type",
            "date address to",
            "customer id",
            "channel code",
            "active from date",
            "active to date",
            "contact number",
            "order id",
            "customer id",
            "order status",
            "order date",
            "order details",
            "order id",
            "product id",
            "order quantity"
        ],
        "template_feedback": "in step 2 , find maximum active to date in place of active from date . you should not find the largest of the results . show me all the results .",
        "positive_example": "i want the initial channel code of customer contact channels table and sort them in descending order of their expiration date ."
    },
    {
        "db_id": "customers_and_addresses",
        "table_names": [
            "addresses",
            "products",
            "customers",
            "customer addresses",
            "customer contact channels",
            "customer orders",
            "order items"
        ],
        "column_names": [
            "address id",
            "address content",
            "city",
            "zip postcode",
            "state province county",
            "country",
            "other address details",
            "product id",
            "product details",
            "customer id",
            "payment method",
            "customer name",
            "date became customer",
            "other customer details",
            "customer id",
            "address id",
            "date address from",
            "address type",
            "date address to",
            "customer id",
            "channel code",
            "active from date",
            "active to date",
            "contact number",
            "order id",
            "customer id",
            "order status",
            "order date",
            "order details",
            "order id",
            "product id",
            "order quantity"
        ],
        "template_feedback": "in step 2 , find maximum active to date in place of active from date . you should not find the largest of the results . show me all the results .",
        "positive_example": "you should find the first channel code of customer contact channel table in the descending order to expiration date ."
    },
    {
        "db_id": "dorm_1",
        "table_names": [
            "student",
            "dorm",
            "dorm amenity",
            "has amenity",
            "lives in"
        ],
        "column_names": [
            "student id",
            "last name",
            "first name",
            "age",
            "sex",
            "major",
            "advisor",
            "city code",
            "dorm id",
            "dorm name",
            "student capacity",
            "gender",
            "amenity id",
            "amenity name",
            "dorm id",
            "amenity id",
            "student id",
            "dorm id",
            "room number"
        ],
        "template_feedback": "additionally find number of rows .",
        "positive_example": "find number of rows of city code instead of finding its value ."
    },
    {
        "db_id": "dorm_1",
        "table_names": [
            "student",
            "dorm",
            "dorm amenity",
            "has amenity",
            "lives in"
        ],
        "column_names": [
            "student id",
            "last name",
            "first name",
            "age",
            "sex",
            "major",
            "advisor",
            "city code",
            "dorm id",
            "dorm name",
            "student capacity",
            "gender",
            "amenity id",
            "amenity name",
            "dorm id",
            "amenity id",
            "student id",
            "dorm id",
            "room number"
        ],
        "template_feedback": "additionally find number of rows .",
        "positive_example": "you need to calculate the city code rows ."
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "table_names": [
            "reference payment methods",
            "reference service types",
            "addresses",
            "products",
            "marketing regions",
            "clients",
            "drama workshop groups",
            "performers",
            "customers",
            "stores",
            "bookings",
            "performers in bookings",
            "customer orders",
            "order items",
            "invoices",
            "services",
            "bookings services",
            "invoice items"
        ],
        "column_names": [
            "payment method code",
            "payment method description",
            "service type code",
            "parent service type code",
            "service type description",
            "address id",
            "line 1",
            "line 2",
            "city town",
            "state county",
            "other details",
            "product id",
            "product name",
            "product price",
            "product description",
            "other product service details",
            "marketing region code",
            "marketing region name",
            "marketing region descriptrion",
            "other details",
            "client id",
            "address id",
            "customer email address",
            "customer name",
            "customer phone",
            "other details",
            "workshop group id",
            "address id",
            "currency code",
            "marketing region code",
            "store name",
            "store phone",
            "store email address",
            "other details",
            "performer id",
            "address id",
            "customer name",
            "customer phone",
            "customer email address",
            "other details",
            "customer id",
            "address id",
            "customer name",
            "customer phone",
            "customer email address",
            "other details",
            "store id",
            "address id",
            "marketing region code",
            "store name",
            "store phone",
            "store email address",
            "other details",
            "booking id",
            "customer id",
            "workshop group id",
            "status code",
            "store id",
            "order date",
            "planned delivery date",
            "actual delivery date",
            "other order details",
            "order id",
            "performer id",
            "order id",
            "customer id",
            "store id",
            "order date",
            "planned delivery date",
            "actual delivery date",
            "other order details",
            "order item id",
            "order id",
            "product id",
            "order quantity",
            "other item details",
            "invoice id",
            "order id",
            "payment method code",
            "product id",
            "order quantity",
            "other item details",
            "order item id",
            "service id",
            "service type code",
            "workshop group id",
            "product description",
            "product name",
            "product price",
            "other product service details",
            "order id",
            "product id",
            "invoice item id",
            "invoice id",
            "order id",
            "order item id",
            "product id",
            "order quantity",
            "other item details"
        ],
        "template_feedback": "additionally use the information from the order items table besides the products table . find other item details in place of other product service details .",
        "positive_example": "i want information of other item ."
    },
    {
        "db_id": "products_gen_characteristics",
        "table_names": [
            "reference characteristic types",
            "reference colors",
            "reference product categories",
            "characteristics",
            "products",
            "product characteristics"
        ],
        "column_names": [
            "characteristic type code",
            "characteristic type description",
            "color code",
            "color description",
            "product category code",
            "product category description",
            "unit of measure",
            "characteristic id",
            "characteristic type code",
            "characteristic data type",
            "characteristic name",
            "other characteristic details",
            "product id",
            "color code",
            "product category code",
            "product name",
            "typical buying price",
            "typical selling price",
            "product description",
            "other product details",
            "product id",
            "characteristic id",
            "product characteristic value"
        ],
        "template_feedback": "in step 2 , additionally use the information from the product characteristics table besides the characteristics table .",
        "positive_example": "make sure to find product 's characteristics which have never been used ."
    },
    {
        "db_id": "products_gen_characteristics",
        "table_names": [
            "reference characteristic types",
            "reference colors",
            "reference product categories",
            "characteristics",
            "products",
            "product characteristics"
        ],
        "column_names": [
            "characteristic type code",
            "characteristic type description",
            "color code",
            "color description",
            "product category code",
            "product category description",
            "unit of measure",
            "characteristic id",
            "characteristic type code",
            "characteristic data type",
            "characteristic name",
            "other characteristic details",
            "product id",
            "color code",
            "product category code",
            "product name",
            "typical buying price",
            "typical selling price",
            "product description",
            "other product details",
            "product id",
            "characteristic id",
            "product characteristic value"
        ],
        "template_feedback": "in step 2 , additionally use the information from the product characteristics table besides the characteristics table .",
        "positive_example": "you need to verify that the characteristics of product is never been used ."
    },
    {
        "db_id": "soccer_2",
        "table_names": [
            "college",
            "player",
            "tryout"
        ],
        "column_names": [
            "college name",
            "state",
            "enrollment",
            "player id",
            "player name",
            "yes card",
            "training hours",
            "player id",
            "college name",
            "player position",
            "decision"
        ],
        "template_feedback": "in step 1 , do not use the college table .",
        "positive_example": "replace \" contains \" with \" equals \" ."
    },
    {
        "db_id": "soccer_2",
        "table_names": [
            "college",
            "player",
            "tryout"
        ],
        "column_names": [
            "college name",
            "state",
            "enrollment",
            "player id",
            "player name",
            "yes card",
            "training hours",
            "player id",
            "college name",
            "player position",
            "decision"
        ],
        "template_feedback": "in step 1 , do not use the college table .",
        "positive_example": "i want equivalent instead of contains ."
    },
    {
        "db_id": "shop_membership",
        "table_names": [
            "member",
            "branch",
            "membership register branch",
            "purchase"
        ],
        "column_names": [
            "member id",
            "card number",
            "name",
            "hometown",
            "level",
            "branch id",
            "name",
            "open year",
            "address road",
            "city",
            "membership amount",
            "member id",
            "branch id",
            "register year",
            "member id",
            "branch id",
            "year",
            "total pounds"
        ],
        "template_feedback": "in step 2 , do not use the purchase table . in step 3 , consider the membership amount greater than 100 conditions in place of the total pounds greater than 100 conditions .",
        "positive_example": "need to make sure city have branches with members smaller than 100 ."
    },
    {
        "db_id": "shop_membership",
        "table_names": [
            "member",
            "branch",
            "membership register branch",
            "purchase"
        ],
        "column_names": [
            "member id",
            "card number",
            "name",
            "hometown",
            "level",
            "branch id",
            "name",
            "open year",
            "address road",
            "city",
            "membership amount",
            "member id",
            "branch id",
            "register year",
            "member id",
            "branch id",
            "year",
            "total pounds"
        ],
        "template_feedback": "in step 2 , do not use the purchase table . in step 3 , consider the membership amount greater than 100 conditions in place of the total pounds greater than 100 conditions .",
        "positive_example": "each branches have members less than 100 in a city ."
    },
    {
        "db_id": "customers_and_addresses",
        "table_names": [
            "addresses",
            "products",
            "customers",
            "customer addresses",
            "customer contact channels",
            "customer orders",
            "order items"
        ],
        "column_names": [
            "address id",
            "address content",
            "city",
            "zip postcode",
            "state province county",
            "country",
            "other address details",
            "product id",
            "product details",
            "customer id",
            "payment method",
            "customer name",
            "date became customer",
            "other customer details",
            "customer id",
            "address id",
            "date address from",
            "address type",
            "date address to",
            "customer id",
            "channel code",
            "active from date",
            "active to date",
            "contact number",
            "order id",
            "customer id",
            "order status",
            "order date",
            "order details",
            "order id",
            "product id",
            "order quantity"
        ],
        "template_feedback": "find average active to date minus active from date in place of average active from date .",
        "positive_example": "you should search average difference between active to and from date ."
    },
    {
        "db_id": "products_gen_characteristics",
        "table_names": [
            "reference characteristic types",
            "reference colors",
            "reference product categories",
            "characteristics",
            "products",
            "product characteristics"
        ],
        "column_names": [
            "characteristic type code",
            "characteristic type description",
            "color code",
            "color description",
            "product category code",
            "product category description",
            "unit of measure",
            "characteristic id",
            "characteristic type code",
            "characteristic data type",
            "characteristic name",
            "other characteristic details",
            "product id",
            "color code",
            "product category code",
            "product name",
            "typical buying price",
            "typical selling price",
            "product description",
            "other product details",
            "product id",
            "characteristic id",
            "product characteristic value"
        ],
        "template_feedback": "use characteristics table in place of reference characteristic types table .",
        "positive_example": "ensure to look for various rows count and also use characteristics table ."
    },
    {
        "db_id": "customers_and_addresses",
        "table_names": [
            "addresses",
            "products",
            "customers",
            "customer addresses",
            "customer contact channels",
            "customer orders",
            "order items"
        ],
        "column_names": [
            "address id",
            "address content",
            "city",
            "zip postcode",
            "state province county",
            "country",
            "other address details",
            "product id",
            "product details",
            "customer id",
            "payment method",
            "customer name",
            "date became customer",
            "other customer details",
            "customer id",
            "address id",
            "date address from",
            "address type",
            "date address to",
            "customer id",
            "channel code",
            "active from date",
            "active to date",
            "contact number",
            "order id",
            "customer id",
            "order status",
            "order date",
            "order details",
            "order id",
            "product id",
            "order quantity"
        ],
        "template_feedback": "in step 2 , additionally use the information from the order items table , products table , and customer orders table besides the customers table . additionally make sure that product details equals latte .",
        "positive_example": "ensure that customer never bought latte ."
    },
    {
        "db_id": "soccer_2",
        "table_names": [
            "college",
            "player",
            "tryout"
        ],
        "column_names": [
            "college name",
            "state",
            "enrollment",
            "player id",
            "player name",
            "yes card",
            "training hours",
            "player id",
            "college name",
            "player position",
            "decision"
        ],
        "template_feedback": "in step 1 , find maximum enrollment in place of average enrollment . in step 2 , make sure no repetition in the results .",
        "positive_example": "also need to find colleges ."
    },
    {
        "db_id": "soccer_2",
        "table_names": [
            "college",
            "player",
            "tryout"
        ],
        "column_names": [
            "college name",
            "state",
            "enrollment",
            "player id",
            "player name",
            "yes card",
            "training hours",
            "player id",
            "college name",
            "player position",
            "decision"
        ],
        "template_feedback": "in step 1 , find maximum enrollment in place of average enrollment . in step 2 , make sure no repetition in the results .",
        "positive_example": "searching for the colleges is required as well ."
    },
    {
        "db_id": "railway",
        "table_names": [
            "railway",
            "train",
            "manager",
            "railway manage"
        ],
        "column_names": [
            "railway id",
            "railway",
            "builder",
            "built",
            "wheels",
            "location",
            "objectnumber",
            "train id",
            "train num",
            "name",
            "from",
            "arrival",
            "railway id",
            "manager id",
            "name",
            "country",
            "working year starts",
            "age",
            "level",
            "railway id",
            "manager id",
            "from year"
        ],
        "template_feedback": "in step 1 , additionally use the information from the train table besides the railway table .",
        "positive_example": "you should use table of train in place of table of railway ."
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "table_names": [
            "reference payment methods",
            "reference service types",
            "addresses",
            "products",
            "marketing regions",
            "clients",
            "drama workshop groups",
            "performers",
            "customers",
            "stores",
            "bookings",
            "performers in bookings",
            "customer orders",
            "order items",
            "invoices",
            "services",
            "bookings services",
            "invoice items"
        ],
        "column_names": [
            "payment method code",
            "payment method description",
            "service type code",
            "parent service type code",
            "service type description",
            "address id",
            "line 1",
            "line 2",
            "city town",
            "state county",
            "other details",
            "product id",
            "product name",
            "product price",
            "product description",
            "other product service details",
            "marketing region code",
            "marketing region name",
            "marketing region descriptrion",
            "other details",
            "client id",
            "address id",
            "customer email address",
            "customer name",
            "customer phone",
            "other details",
            "workshop group id",
            "address id",
            "currency code",
            "marketing region code",
            "store name",
            "store phone",
            "store email address",
            "other details",
            "performer id",
            "address id",
            "customer name",
            "customer phone",
            "customer email address",
            "other details",
            "customer id",
            "address id",
            "customer name",
            "customer phone",
            "customer email address",
            "other details",
            "store id",
            "address id",
            "marketing region code",
            "store name",
            "store phone",
            "store email address",
            "other details",
            "booking id",
            "customer id",
            "workshop group id",
            "status code",
            "store id",
            "order date",
            "planned delivery date",
            "actual delivery date",
            "other order details",
            "order id",
            "performer id",
            "order id",
            "customer id",
            "store id",
            "order date",
            "planned delivery date",
            "actual delivery date",
            "other order details",
            "order item id",
            "order id",
            "product id",
            "order quantity",
            "other item details",
            "invoice id",
            "order id",
            "payment method code",
            "product id",
            "order quantity",
            "other item details",
            "order item id",
            "service id",
            "service type code",
            "workshop group id",
            "product description",
            "product name",
            "product price",
            "other product service details",
            "order id",
            "product id",
            "invoice item id",
            "invoice id",
            "order id",
            "order item id",
            "product id",
            "order quantity",
            "other item details"
        ],
        "template_feedback": "find for each value of payment method code . additionally find number of rows . permit repetitions in the results .",
        "positive_example": "also need to find total value of orders made through that methods ."
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "table_names": [
            "reference payment methods",
            "reference service types",
            "addresses",
            "products",
            "marketing regions",
            "clients",
            "drama workshop groups",
            "performers",
            "customers",
            "stores",
            "bookings",
            "performers in bookings",
            "customer orders",
            "order items",
            "invoices",
            "services",
            "bookings services",
            "invoice items"
        ],
        "column_names": [
            "payment method code",
            "payment method description",
            "service type code",
            "parent service type code",
            "service type description",
            "address id",
            "line 1",
            "line 2",
            "city town",
            "state county",
            "other details",
            "product id",
            "product name",
            "product price",
            "product description",
            "other product service details",
            "marketing region code",
            "marketing region name",
            "marketing region descriptrion",
            "other details",
            "client id",
            "address id",
            "customer email address",
            "customer name",
            "customer phone",
            "other details",
            "workshop group id",
            "address id",
            "currency code",
            "marketing region code",
            "store name",
            "store phone",
            "store email address",
            "other details",
            "performer id",
            "address id",
            "customer name",
            "customer phone",
            "customer email address",
            "other details",
            "customer id",
            "address id",
            "customer name",
            "customer phone",
            "customer email address",
            "other details",
            "store id",
            "address id",
            "marketing region code",
            "store name",
            "store phone",
            "store email address",
            "other details",
            "booking id",
            "customer id",
            "workshop group id",
            "status code",
            "store id",
            "order date",
            "planned delivery date",
            "actual delivery date",
            "other order details",
            "order id",
            "performer id",
            "order id",
            "customer id",
            "store id",
            "order date",
            "planned delivery date",
            "actual delivery date",
            "other order details",
            "order item id",
            "order id",
            "product id",
            "order quantity",
            "other item details",
            "invoice id",
            "order id",
            "payment method code",
            "product id",
            "order quantity",
            "other item details",
            "order item id",
            "service id",
            "service type code",
            "workshop group id",
            "product description",
            "product name",
            "product price",
            "other product service details",
            "order id",
            "product id",
            "invoice item id",
            "invoice id",
            "order id",
            "order item id",
            "product id",
            "order quantity",
            "other item details"
        ],
        "template_feedback": "find for each value of payment method code . additionally find number of rows . permit repetitions in the results .",
        "positive_example": "search for the sum of values of sequences that are done by that methods ."
    },
    {
        "db_id": "dorm_1",
        "table_names": [
            "student",
            "dorm",
            "dorm amenity",
            "has amenity",
            "lives in"
        ],
        "column_names": [
            "student id",
            "last name",
            "first name",
            "age",
            "sex",
            "major",
            "advisor",
            "city code",
            "dorm id",
            "dorm name",
            "student capacity",
            "gender",
            "amenity id",
            "amenity name",
            "dorm id",
            "amenity id",
            "student id",
            "dorm id",
            "room number"
        ],
        "template_feedback": "in step 2 , remove the sex equals f conditions .",
        "positive_example": "need to make sure to find summation of students residing with male in same dorm ."
    },
    {
        "db_id": "dorm_1",
        "table_names": [
            "student",
            "dorm",
            "dorm amenity",
            "has amenity",
            "lives in"
        ],
        "column_names": [
            "student id",
            "last name",
            "first name",
            "age",
            "sex",
            "major",
            "advisor",
            "city code",
            "dorm id",
            "dorm name",
            "student capacity",
            "gender",
            "amenity id",
            "amenity name",
            "dorm id",
            "amenity id",
            "student id",
            "dorm id",
            "room number"
        ],
        "template_feedback": "in step 2 , remove the sex equals f conditions .",
        "positive_example": "you have to check the total number of pupils staying with male having same dorm ."
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "table_names": [
            "reference payment methods",
            "reference service types",
            "addresses",
            "products",
            "marketing regions",
            "clients",
            "drama workshop groups",
            "performers",
            "customers",
            "stores",
            "bookings",
            "performers in bookings",
            "customer orders",
            "order items",
            "invoices",
            "services",
            "bookings services",
            "invoice items"
        ],
        "column_names": [
            "payment method code",
            "payment method description",
            "service type code",
            "parent service type code",
            "service type description",
            "address id",
            "line 1",
            "line 2",
            "city town",
            "state county",
            "other details",
            "product id",
            "product name",
            "product price",
            "product description",
            "other product service details",
            "marketing region code",
            "marketing region name",
            "marketing region descriptrion",
            "other details",
            "client id",
            "address id",
            "customer email address",
            "customer name",
            "customer phone",
            "other details",
            "workshop group id",
            "address id",
            "currency code",
            "marketing region code",
            "store name",
            "store phone",
            "store email address",
            "other details",
            "performer id",
            "address id",
            "customer name",
            "customer phone",
            "customer email address",
            "other details",
            "customer id",
            "address id",
            "customer name",
            "customer phone",
            "customer email address",
            "other details",
            "store id",
            "address id",
            "marketing region code",
            "store name",
            "store phone",
            "store email address",
            "other details",
            "booking id",
            "customer id",
            "workshop group id",
            "status code",
            "store id",
            "order date",
            "planned delivery date",
            "actual delivery date",
            "other order details",
            "order id",
            "performer id",
            "order id",
            "customer id",
            "store id",
            "order date",
            "planned delivery date",
            "actual delivery date",
            "other order details",
            "order item id",
            "order id",
            "product id",
            "order quantity",
            "other item details",
            "invoice id",
            "order id",
            "payment method code",
            "product id",
            "order quantity",
            "other item details",
            "order item id",
            "service id",
            "service type code",
            "workshop group id",
            "product description",
            "product name",
            "product price",
            "other product service details",
            "order id",
            "product id",
            "invoice item id",
            "invoice id",
            "order id",
            "order item id",
            "product id",
            "order quantity",
            "other item details"
        ],
        "template_feedback": "in step 2 , find product id in place of order id .",
        "positive_example": "in step 2 , you need to swap the id 's of product and order ."
    },
    {
        "db_id": "manufactory_1",
        "table_names": [
            "manufacturers",
            "products"
        ],
        "column_names": [
            "code",
            "name",
            "headquarter",
            "founder",
            "revenue",
            "code",
            "name",
            "price",
            "manufacturer"
        ],
        "template_feedback": "consider the price greater than or equals 180 conditions in place of the price greater than 240 or price less than 180 conditions .",
        "positive_example": "\" less than 240 \" needs to be replaced by \" equals 180 \" ."
    },
    {
        "db_id": "manufactory_1",
        "table_names": [
            "manufacturers",
            "products"
        ],
        "column_names": [
            "code",
            "name",
            "headquarter",
            "founder",
            "revenue",
            "code",
            "name",
            "price",
            "manufacturer"
        ],
        "template_feedback": "consider the price greater than or equals 180 conditions in place of the price greater than 240 or price less than 180 conditions .",
        "positive_example": "you have to make use of equals 180 in place of less than 240 ."
    },
    {
        "db_id": "culture_company",
        "table_names": [
            "book club",
            "movie",
            "culture company"
        ],
        "column_names": [
            "book club id",
            "year",
            "author or editor",
            "book title",
            "publisher",
            "category",
            "result",
            "movie id",
            "title",
            "year",
            "director",
            "budget million",
            "gross worldwide",
            "company name",
            "type",
            "incorporated in",
            "group equity shareholding",
            "book club id",
            "movie id"
        ],
        "template_feedback": "in step 1 , do not use the culture company table and movie table . in step 2 , consider the book club 's year greater than 1989 conditions in place of the movie 's year greater than 1989 conditions . find book title in place of title .",
        "positive_example": "you need to find year of the club 's booking ."
    },
    {
        "db_id": "soccer_2",
        "table_names": [
            "college",
            "player",
            "tryout"
        ],
        "column_names": [
            "college name",
            "state",
            "enrollment",
            "player id",
            "player name",
            "yes card",
            "training hours",
            "player id",
            "college name",
            "player position",
            "decision"
        ],
        "template_feedback": "in step 1 , do not use the player table and tryout table . in step 2 , order the results by enrollment in place of training hours .",
        "positive_example": "make sure to find with descending order of player id instead of state in step 2 ."
    },
    {
        "db_id": "swimming",
        "table_names": [
            "swimmer",
            "stadium",
            "event",
            "record"
        ],
        "column_names": [
            "id",
            "name",
            "nationality",
            "meter 100",
            "meter 200",
            "meter 300",
            "meter 400",
            "meter 500",
            "meter 600",
            "meter 700",
            "time",
            "id",
            "name",
            "capacity",
            "city",
            "country",
            "opening year",
            "id",
            "name",
            "stadium id",
            "year",
            "id",
            "result",
            "swimmer id",
            "event id"
        ],
        "template_feedback": "find rows in place of name .",
        "positive_example": "also find id , nationality , meter 100 of swimmer table ."
    },
    {
        "db_id": "swimming",
        "table_names": [
            "swimmer",
            "stadium",
            "event",
            "record"
        ],
        "column_names": [
            "id",
            "name",
            "nationality",
            "meter 100",
            "meter 200",
            "meter 300",
            "meter 400",
            "meter 500",
            "meter 600",
            "meter 700",
            "time",
            "id",
            "name",
            "capacity",
            "city",
            "country",
            "opening year",
            "id",
            "name",
            "stadium id",
            "year",
            "id",
            "result",
            "swimmer id",
            "event id"
        ],
        "template_feedback": "find rows in place of name .",
        "positive_example": "from table of swimmer , you need to calculate the id , nationality and meter 100 ."
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "table_names": [
            "reference payment methods",
            "reference service types",
            "addresses",
            "products",
            "marketing regions",
            "clients",
            "drama workshop groups",
            "performers",
            "customers",
            "stores",
            "bookings",
            "performers in bookings",
            "customer orders",
            "order items",
            "invoices",
            "services",
            "bookings services",
            "invoice items"
        ],
        "column_names": [
            "payment method code",
            "payment method description",
            "service type code",
            "parent service type code",
            "service type description",
            "address id",
            "line 1",
            "line 2",
            "city town",
            "state county",
            "other details",
            "product id",
            "product name",
            "product price",
            "product description",
            "other product service details",
            "marketing region code",
            "marketing region name",
            "marketing region descriptrion",
            "other details",
            "client id",
            "address id",
            "customer email address",
            "customer name",
            "customer phone",
            "other details",
            "workshop group id",
            "address id",
            "currency code",
            "marketing region code",
            "store name",
            "store phone",
            "store email address",
            "other details",
            "performer id",
            "address id",
            "customer name",
            "customer phone",
            "customer email address",
            "other details",
            "customer id",
            "address id",
            "customer name",
            "customer phone",
            "customer email address",
            "other details",
            "store id",
            "address id",
            "marketing region code",
            "store name",
            "store phone",
            "store email address",
            "other details",
            "booking id",
            "customer id",
            "workshop group id",
            "status code",
            "store id",
            "order date",
            "planned delivery date",
            "actual delivery date",
            "other order details",
            "order id",
            "performer id",
            "order id",
            "customer id",
            "store id",
            "order date",
            "planned delivery date",
            "actual delivery date",
            "other order details",
            "order item id",
            "order id",
            "product id",
            "order quantity",
            "other item details",
            "invoice id",
            "order id",
            "payment method code",
            "product id",
            "order quantity",
            "other item details",
            "order item id",
            "service id",
            "service type code",
            "workshop group id",
            "product description",
            "product name",
            "product price",
            "other product service details",
            "order id",
            "product id",
            "invoice item id",
            "invoice id",
            "order id",
            "order item id",
            "product id",
            "order quantity",
            "other item details"
        ],
        "template_feedback": "in step 2 , remove the marketing region code equals in conditions .",
        "positive_example": "only need to find for marketing region code equals ca in step 2 ."
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "table_names": [
            "reference payment methods",
            "reference service types",
            "addresses",
            "products",
            "marketing regions",
            "clients",
            "drama workshop groups",
            "performers",
            "customers",
            "stores",
            "bookings",
            "performers in bookings",
            "customer orders",
            "order items",
            "invoices",
            "services",
            "bookings services",
            "invoice items"
        ],
        "column_names": [
            "payment method code",
            "payment method description",
            "service type code",
            "parent service type code",
            "service type description",
            "address id",
            "line 1",
            "line 2",
            "city town",
            "state county",
            "other details",
            "product id",
            "product name",
            "product price",
            "product description",
            "other product service details",
            "marketing region code",
            "marketing region name",
            "marketing region descriptrion",
            "other details",
            "client id",
            "address id",
            "customer email address",
            "customer name",
            "customer phone",
            "other details",
            "workshop group id",
            "address id",
            "currency code",
            "marketing region code",
            "store name",
            "store phone",
            "store email address",
            "other details",
            "performer id",
            "address id",
            "customer name",
            "customer phone",
            "customer email address",
            "other details",
            "customer id",
            "address id",
            "customer name",
            "customer phone",
            "customer email address",
            "other details",
            "store id",
            "address id",
            "marketing region code",
            "store name",
            "store phone",
            "store email address",
            "other details",
            "booking id",
            "customer id",
            "workshop group id",
            "status code",
            "store id",
            "order date",
            "planned delivery date",
            "actual delivery date",
            "other order details",
            "order id",
            "performer id",
            "order id",
            "customer id",
            "store id",
            "order date",
            "planned delivery date",
            "actual delivery date",
            "other order details",
            "order item id",
            "order id",
            "product id",
            "order quantity",
            "other item details",
            "invoice id",
            "order id",
            "payment method code",
            "product id",
            "order quantity",
            "other item details",
            "order item id",
            "service id",
            "service type code",
            "workshop group id",
            "product description",
            "product name",
            "product price",
            "other product service details",
            "order id",
            "product id",
            "invoice item id",
            "invoice id",
            "order id",
            "order item id",
            "product id",
            "order quantity",
            "other item details"
        ],
        "template_feedback": "in step 2 , remove the marketing region code equals in conditions .",
        "positive_example": "in step 2 , look for code of marketing region equivalent to ca ."
    },
    {
        "db_id": "products_gen_characteristics",
        "table_names": [
            "reference characteristic types",
            "reference colors",
            "reference product categories",
            "characteristics",
            "products",
            "product characteristics"
        ],
        "column_names": [
            "characteristic type code",
            "characteristic type description",
            "color code",
            "color description",
            "product category code",
            "product category description",
            "unit of measure",
            "characteristic id",
            "characteristic type code",
            "characteristic data type",
            "characteristic name",
            "other characteristic details",
            "product id",
            "color code",
            "product category code",
            "product name",
            "typical buying price",
            "typical selling price",
            "product description",
            "other product details",
            "product id",
            "characteristic id",
            "product characteristic value"
        ],
        "template_feedback": "additionally use the information from the product characteristics table besides the products table .",
        "positive_example": "it should be product characteristics table instead of products table ."
    },
    {
        "db_id": "products_gen_characteristics",
        "table_names": [
            "reference characteristic types",
            "reference colors",
            "reference product categories",
            "characteristics",
            "products",
            "product characteristics"
        ],
        "column_names": [
            "characteristic type code",
            "characteristic type description",
            "color code",
            "color description",
            "product category code",
            "product category description",
            "unit of measure",
            "characteristic id",
            "characteristic type code",
            "characteristic data type",
            "characteristic name",
            "other characteristic details",
            "product id",
            "color code",
            "product category code",
            "product name",
            "typical buying price",
            "typical selling price",
            "product description",
            "other product details",
            "product id",
            "characteristic id",
            "product characteristic value"
        ],
        "template_feedback": "additionally use the information from the product characteristics table besides the products table .",
        "positive_example": "no need of product table , just use product characteristics ."
    },
    {
        "db_id": "customers_and_addresses",
        "table_names": [
            "addresses",
            "products",
            "customers",
            "customer addresses",
            "customer contact channels",
            "customer orders",
            "order items"
        ],
        "column_names": [
            "address id",
            "address content",
            "city",
            "zip postcode",
            "state province county",
            "country",
            "other address details",
            "product id",
            "product details",
            "customer id",
            "payment method",
            "customer name",
            "date became customer",
            "other customer details",
            "customer id",
            "address id",
            "date address from",
            "address type",
            "date address to",
            "customer id",
            "channel code",
            "active from date",
            "active to date",
            "contact number",
            "order id",
            "customer id",
            "order status",
            "order date",
            "order details",
            "order id",
            "product id",
            "order quantity"
        ],
        "template_feedback": "in step 1 , find the number of address id for each value of country .",
        "positive_example": "there should be different address content instead of number of rows in step 1 ."
    },
    {
        "db_id": "customers_and_addresses",
        "table_names": [
            "addresses",
            "products",
            "customers",
            "customer addresses",
            "customer contact channels",
            "customer orders",
            "order items"
        ],
        "column_names": [
            "address id",
            "address content",
            "city",
            "zip postcode",
            "state province county",
            "country",
            "other address details",
            "product id",
            "product details",
            "customer id",
            "payment method",
            "customer name",
            "date became customer",
            "other customer details",
            "customer id",
            "address id",
            "date address from",
            "address type",
            "date address to",
            "customer id",
            "channel code",
            "active from date",
            "active to date",
            "contact number",
            "order id",
            "customer id",
            "order status",
            "order date",
            "order details",
            "order id",
            "product id",
            "order quantity"
        ],
        "template_feedback": "in step 1 , find the number of address id for each value of country .",
        "positive_example": "in step 1 , i want discrete address content ."
    },
    {
        "db_id": "dorm_1",
        "table_names": [
            "student",
            "dorm",
            "dorm amenity",
            "has amenity",
            "lives in"
        ],
        "column_names": [
            "student id",
            "last name",
            "first name",
            "age",
            "sex",
            "major",
            "advisor",
            "city code",
            "dorm id",
            "dorm name",
            "student capacity",
            "gender",
            "amenity id",
            "amenity name",
            "dorm id",
            "amenity id",
            "student id",
            "dorm id",
            "room number"
        ],
        "template_feedback": "additionally use the information from the dorm amenity table and has amenity table besides the dorm table . find for each value of has amenity 's dorm id . order the results by number of rows in place of dorm name .",
        "positive_example": "make sure it have minimum number of amenities ."
    },
    {
        "db_id": "dorm_1",
        "table_names": [
            "student",
            "dorm",
            "dorm amenity",
            "has amenity",
            "lives in"
        ],
        "column_names": [
            "student id",
            "last name",
            "first name",
            "age",
            "sex",
            "major",
            "advisor",
            "city code",
            "dorm id",
            "dorm name",
            "student capacity",
            "gender",
            "amenity id",
            "amenity name",
            "dorm id",
            "amenity id",
            "student id",
            "dorm id",
            "room number"
        ],
        "template_feedback": "additionally use the information from the dorm amenity table and has amenity table besides the dorm table . find for each value of has amenity 's dorm id . order the results by number of rows in place of dorm name .",
        "positive_example": "a verification is required for checking minimal value of amenities by your side ."
    },
    {
        "db_id": "customers_and_addresses",
        "table_names": [
            "addresses",
            "products",
            "customers",
            "customer addresses",
            "customer contact channels",
            "customer orders",
            "order items"
        ],
        "column_names": [
            "address id",
            "address content",
            "city",
            "zip postcode",
            "state province county",
            "country",
            "other address details",
            "product id",
            "product details",
            "customer id",
            "payment method",
            "customer name",
            "date became customer",
            "other customer details",
            "customer id",
            "address id",
            "date address from",
            "address type",
            "date address to",
            "customer id",
            "channel code",
            "active from date",
            "active to date",
            "contact number",
            "order id",
            "customer id",
            "order status",
            "order date",
            "order details",
            "order id",
            "product id",
            "order quantity"
        ],
        "template_feedback": "in step 2 , find order date in place of date became customer .",
        "positive_example": "in step 2 you should look for the date on which order was placed ."
    },
    {
        "db_id": "products_gen_characteristics",
        "table_names": [
            "reference characteristic types",
            "reference colors",
            "reference product categories",
            "characteristics",
            "products",
            "product characteristics"
        ],
        "column_names": [
            "characteristic type code",
            "characteristic type description",
            "color code",
            "color description",
            "product category code",
            "product category description",
            "unit of measure",
            "characteristic id",
            "characteristic type code",
            "characteristic data type",
            "characteristic name",
            "other characteristic details",
            "product id",
            "color code",
            "product category code",
            "product name",
            "typical buying price",
            "typical selling price",
            "product description",
            "other product details",
            "product id",
            "characteristic id",
            "product characteristic value"
        ],
        "template_feedback": "additionally use the information from the product characteristics table and characteristics table besides the products table .",
        "positive_example": "there should be reference colors table instead of products table ."
    },
    {
        "db_id": "products_gen_characteristics",
        "table_names": [
            "reference characteristic types",
            "reference colors",
            "reference product categories",
            "characteristics",
            "products",
            "product characteristics"
        ],
        "column_names": [
            "characteristic type code",
            "characteristic type description",
            "color code",
            "color description",
            "product category code",
            "product category description",
            "unit of measure",
            "characteristic id",
            "characteristic type code",
            "characteristic data type",
            "characteristic name",
            "other characteristic details",
            "product id",
            "color code",
            "product category code",
            "product name",
            "typical buying price",
            "typical selling price",
            "product description",
            "other product details",
            "product id",
            "characteristic id",
            "product characteristic value"
        ],
        "template_feedback": "additionally use the information from the product characteristics table and characteristics table besides the products table .",
        "positive_example": "i want table of characteristics ."
    },
    {
        "db_id": "customers_and_addresses",
        "table_names": [
            "addresses",
            "products",
            "customers",
            "customer addresses",
            "customer contact channels",
            "customer orders",
            "order items"
        ],
        "column_names": [
            "address id",
            "address content",
            "city",
            "zip postcode",
            "state province county",
            "country",
            "other address details",
            "product id",
            "product details",
            "customer id",
            "payment method",
            "customer name",
            "date became customer",
            "other customer details",
            "customer id",
            "address id",
            "date address from",
            "address type",
            "date address to",
            "customer id",
            "channel code",
            "active from date",
            "active to date",
            "contact number",
            "order id",
            "customer id",
            "order status",
            "order date",
            "order details",
            "order id",
            "product id",
            "order quantity"
        ],
        "template_feedback": "in step 2 , find active from date in place of date became customer .",
        "positive_example": "in step 2 , i required date of active from ."
    },
    {
        "db_id": "customers_and_addresses",
        "table_names": [
            "addresses",
            "products",
            "customers",
            "customer addresses",
            "customer contact channels",
            "customer orders",
            "order items"
        ],
        "column_names": [
            "address id",
            "address content",
            "city",
            "zip postcode",
            "state province county",
            "country",
            "other address details",
            "product id",
            "product details",
            "customer id",
            "payment method",
            "customer name",
            "date became customer",
            "other customer details",
            "customer id",
            "address id",
            "date address from",
            "address type",
            "date address to",
            "customer id",
            "channel code",
            "active from date",
            "active to date",
            "contact number",
            "order id",
            "customer id",
            "order status",
            "order date",
            "order details",
            "order id",
            "product id",
            "order quantity"
        ],
        "template_feedback": "in step 2 , find order date in place of date became customer .",
        "positive_example": "you need to provide only the date when customer ordered ."
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "table_names": [
            "reference payment methods",
            "reference service types",
            "addresses",
            "products",
            "marketing regions",
            "clients",
            "drama workshop groups",
            "performers",
            "customers",
            "stores",
            "bookings",
            "performers in bookings",
            "customer orders",
            "order items",
            "invoices",
            "services",
            "bookings services",
            "invoice items"
        ],
        "column_names": [
            "payment method code",
            "payment method description",
            "service type code",
            "parent service type code",
            "service type description",
            "address id",
            "line 1",
            "line 2",
            "city town",
            "state county",
            "other details",
            "product id",
            "product name",
            "product price",
            "product description",
            "other product service details",
            "marketing region code",
            "marketing region name",
            "marketing region descriptrion",
            "other details",
            "client id",
            "address id",
            "customer email address",
            "customer name",
            "customer phone",
            "other details",
            "workshop group id",
            "address id",
            "currency code",
            "marketing region code",
            "store name",
            "store phone",
            "store email address",
            "other details",
            "performer id",
            "address id",
            "customer name",
            "customer phone",
            "customer email address",
            "other details",
            "customer id",
            "address id",
            "customer name",
            "customer phone",
            "customer email address",
            "other details",
            "store id",
            "address id",
            "marketing region code",
            "store name",
            "store phone",
            "store email address",
            "other details",
            "booking id",
            "customer id",
            "workshop group id",
            "status code",
            "store id",
            "order date",
            "planned delivery date",
            "actual delivery date",
            "other order details",
            "order id",
            "performer id",
            "order id",
            "customer id",
            "store id",
            "order date",
            "planned delivery date",
            "actual delivery date",
            "other order details",
            "order item id",
            "order id",
            "product id",
            "order quantity",
            "other item details",
            "invoice id",
            "order id",
            "payment method code",
            "product id",
            "order quantity",
            "other item details",
            "order item id",
            "service id",
            "service type code",
            "workshop group id",
            "product description",
            "product name",
            "product price",
            "other product service details",
            "order id",
            "product id",
            "invoice item id",
            "invoice id",
            "order id",
            "order item id",
            "product id",
            "order quantity",
            "other item details"
        ],
        "template_feedback": "in step 2 , remove the marketing region code equals in conditions .",
        "positive_example": "remove \" or marketing region code equals in \" ."
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "table_names": [
            "reference payment methods",
            "reference service types",
            "addresses",
            "products",
            "marketing regions",
            "clients",
            "drama workshop groups",
            "performers",
            "customers",
            "stores",
            "bookings",
            "performers in bookings",
            "customer orders",
            "order items",
            "invoices",
            "services",
            "bookings services",
            "invoice items"
        ],
        "column_names": [
            "payment method code",
            "payment method description",
            "service type code",
            "parent service type code",
            "service type description",
            "address id",
            "line 1",
            "line 2",
            "city town",
            "state county",
            "other details",
            "product id",
            "product name",
            "product price",
            "product description",
            "other product service details",
            "marketing region code",
            "marketing region name",
            "marketing region descriptrion",
            "other details",
            "client id",
            "address id",
            "customer email address",
            "customer name",
            "customer phone",
            "other details",
            "workshop group id",
            "address id",
            "currency code",
            "marketing region code",
            "store name",
            "store phone",
            "store email address",
            "other details",
            "performer id",
            "address id",
            "customer name",
            "customer phone",
            "customer email address",
            "other details",
            "customer id",
            "address id",
            "customer name",
            "customer phone",
            "customer email address",
            "other details",
            "store id",
            "address id",
            "marketing region code",
            "store name",
            "store phone",
            "store email address",
            "other details",
            "booking id",
            "customer id",
            "workshop group id",
            "status code",
            "store id",
            "order date",
            "planned delivery date",
            "actual delivery date",
            "other order details",
            "order id",
            "performer id",
            "order id",
            "customer id",
            "store id",
            "order date",
            "planned delivery date",
            "actual delivery date",
            "other order details",
            "order item id",
            "order id",
            "product id",
            "order quantity",
            "other item details",
            "invoice id",
            "order id",
            "payment method code",
            "product id",
            "order quantity",
            "other item details",
            "order item id",
            "service id",
            "service type code",
            "workshop group id",
            "product description",
            "product name",
            "product price",
            "other product service details",
            "order id",
            "product id",
            "invoice item id",
            "invoice id",
            "order id",
            "order item id",
            "product id",
            "order quantity",
            "other item details"
        ],
        "template_feedback": "in step 2 , remove the marketing region code equals in conditions .",
        "positive_example": "drop \" or marketing region code equals in \" ."
    },
    {
        "db_id": "local_govt_and_lot",
        "table_names": [
            "customers",
            "properties",
            "residents",
            "organizations",
            "services",
            "residents services",
            "things",
            "customer events",
            "customer event notes",
            "timed status of things",
            "timed locations of things"
        ],
        "column_names": [
            "customer id",
            "customer details",
            "property id",
            "property type code",
            "property address",
            "other details",
            "resident id",
            "property id",
            "date moved in",
            "date moved out",
            "other details",
            "organization id",
            "parent organization id",
            "organization details",
            "service id",
            "organization id",
            "service type code",
            "service details",
            "resident id",
            "service id",
            "date moved in",
            "property id",
            "date requested",
            "date provided",
            "other details",
            "thing id",
            "organization id",
            "type of thing code",
            "service type code",
            "service details",
            "customer event id",
            "customer id",
            "date moved in",
            "property id",
            "resident id",
            "thing id",
            "customer event note id",
            "customer event id",
            "service type code",
            "resident id",
            "property id",
            "date moved in",
            "thing id",
            "date and date",
            "status of thing code",
            "thing id",
            "date and time",
            "location code"
        ],
        "template_feedback": "in step 1 , additionally use the information from the customer events table besides the customers table .",
        "positive_example": "replace customers table with customer events table in step 1 ."
    },
    {
        "db_id": "local_govt_and_lot",
        "table_names": [
            "customers",
            "properties",
            "residents",
            "organizations",
            "services",
            "residents services",
            "things",
            "customer events",
            "customer event notes",
            "timed status of things",
            "timed locations of things"
        ],
        "column_names": [
            "customer id",
            "customer details",
            "property id",
            "property type code",
            "property address",
            "other details",
            "resident id",
            "property id",
            "date moved in",
            "date moved out",
            "other details",
            "organization id",
            "parent organization id",
            "organization details",
            "service id",
            "organization id",
            "service type code",
            "service details",
            "resident id",
            "service id",
            "date moved in",
            "property id",
            "date requested",
            "date provided",
            "other details",
            "thing id",
            "organization id",
            "type of thing code",
            "service type code",
            "service details",
            "customer event id",
            "customer id",
            "date moved in",
            "property id",
            "resident id",
            "thing id",
            "customer event note id",
            "customer event id",
            "service type code",
            "resident id",
            "property id",
            "date moved in",
            "thing id",
            "date and date",
            "status of thing code",
            "thing id",
            "date and time",
            "location code"
        ],
        "template_feedback": "in step 1 , additionally use the information from the customer events table besides the customers table .",
        "positive_example": "in the first step , the consumer table should reinstate with customer event table ."
    },
    {
        "db_id": "local_govt_and_lot",
        "table_names": [
            "customers",
            "properties",
            "residents",
            "organizations",
            "services",
            "residents services",
            "things",
            "customer events",
            "customer event notes",
            "timed status of things",
            "timed locations of things"
        ],
        "column_names": [
            "customer id",
            "customer details",
            "property id",
            "property type code",
            "property address",
            "other details",
            "resident id",
            "property id",
            "date moved in",
            "date moved out",
            "other details",
            "organization id",
            "parent organization id",
            "organization details",
            "service id",
            "organization id",
            "service type code",
            "service details",
            "resident id",
            "service id",
            "date moved in",
            "property id",
            "date requested",
            "date provided",
            "other details",
            "thing id",
            "organization id",
            "type of thing code",
            "service type code",
            "service details",
            "customer event id",
            "customer id",
            "date moved in",
            "property id",
            "resident id",
            "thing id",
            "customer event note id",
            "customer event id",
            "service type code",
            "resident id",
            "property id",
            "date moved in",
            "thing id",
            "date and date",
            "status of thing code",
            "thing id",
            "date and time",
            "location code"
        ],
        "template_feedback": "additionally find property id .",
        "positive_example": "delete the second \" date moved in \" and use id of property ."
    },
    {
        "db_id": "train_station",
        "table_names": [
            "station",
            "train",
            "train station"
        ],
        "column_names": [
            "station id",
            "name",
            "annual entry exit",
            "annual interchanges",
            "total passengers",
            "location",
            "main services",
            "number of platforms",
            "train id",
            "name",
            "time",
            "service",
            "train id",
            "station id"
        ],
        "template_feedback": "in step 2 , do not find for each value of location . in step 3 , additionally make sure that number of platforms greater than or equals 15 .",
        "positive_example": "i want platforms in step 2 ."
    },
    {
        "db_id": "customers_and_addresses",
        "table_names": [
            "addresses",
            "products",
            "customers",
            "customer addresses",
            "customer contact channels",
            "customer orders",
            "order items"
        ],
        "column_names": [
            "address id",
            "address content",
            "city",
            "zip postcode",
            "state province county",
            "country",
            "other address details",
            "product id",
            "product details",
            "customer id",
            "payment method",
            "customer name",
            "date became customer",
            "other customer details",
            "customer id",
            "address id",
            "date address from",
            "address type",
            "date address to",
            "customer id",
            "channel code",
            "active from date",
            "active to date",
            "contact number",
            "order id",
            "customer id",
            "order status",
            "order date",
            "order details",
            "order id",
            "product id",
            "order quantity"
        ],
        "template_feedback": "consider the customer id between 10 and 20 conditions in place of the customer id equals 10 or customer id equals 20 conditions .",
        "positive_example": "you need to ensure that id of customer falls in the middle of 10 and 20 ."
    },
    {
        "db_id": "products_gen_characteristics",
        "table_names": [
            "reference characteristic types",
            "reference colors",
            "reference product categories",
            "characteristics",
            "products",
            "product characteristics"
        ],
        "column_names": [
            "characteristic type code",
            "characteristic type description",
            "color code",
            "color description",
            "product category code",
            "product category description",
            "unit of measure",
            "characteristic id",
            "characteristic type code",
            "characteristic data type",
            "characteristic name",
            "other characteristic details",
            "product id",
            "color code",
            "product category code",
            "product name",
            "typical buying price",
            "typical selling price",
            "product description",
            "other product details",
            "product id",
            "characteristic id",
            "product characteristic value"
        ],
        "template_feedback": "additionally use the information from the product characteristics table besides the products table .",
        "positive_example": "replace products table with product characteristics table ."
    },
    {
        "db_id": "products_gen_characteristics",
        "table_names": [
            "reference characteristic types",
            "reference colors",
            "reference product categories",
            "characteristics",
            "products",
            "product characteristics"
        ],
        "column_names": [
            "characteristic type code",
            "characteristic type description",
            "color code",
            "color description",
            "product category code",
            "product category description",
            "unit of measure",
            "characteristic id",
            "characteristic type code",
            "characteristic data type",
            "characteristic name",
            "other characteristic details",
            "product id",
            "color code",
            "product category code",
            "product name",
            "typical buying price",
            "typical selling price",
            "product description",
            "other product details",
            "product id",
            "characteristic id",
            "product characteristic value"
        ],
        "template_feedback": "additionally use the information from the product characteristics table besides the products table .",
        "positive_example": "you need to use table of product characteristics ."
    },
    {
        "db_id": "soccer_2",
        "table_names": [
            "college",
            "player",
            "tryout"
        ],
        "column_names": [
            "college name",
            "state",
            "enrollment",
            "player id",
            "player name",
            "yes card",
            "training hours",
            "player id",
            "college name",
            "player position",
            "decision"
        ],
        "template_feedback": "additionally use the information from the tryout table besides the player table . additionally make sure that decision equals yes .",
        "positive_example": "make sure students are from team equals practiced ."
    },
    {
        "db_id": "soccer_2",
        "table_names": [
            "college",
            "player",
            "tryout"
        ],
        "column_names": [
            "college name",
            "state",
            "enrollment",
            "player id",
            "player name",
            "yes card",
            "training hours",
            "player id",
            "college name",
            "player position",
            "decision"
        ],
        "template_feedback": "additionally use the information from the tryout table besides the player table . additionally make sure that decision equals yes .",
        "positive_example": "verify that students are of practiced team ."
    },
    {
        "db_id": "soccer_2",
        "table_names": [
            "college",
            "player",
            "tryout"
        ],
        "column_names": [
            "college name",
            "state",
            "enrollment",
            "player id",
            "player name",
            "yes card",
            "training hours",
            "player id",
            "college name",
            "player position",
            "decision"
        ],
        "template_feedback": "in step 1 , do not use the tryout table . in step 3 , do not find for each value of tryout 's college name . in step 4 , order the results ascending by college 's college name in place of ordering descending by number of rows .",
        "positive_example": "replace descending with ascending instep 4 ."
    },
    {
        "db_id": "soccer_2",
        "table_names": [
            "college",
            "player",
            "tryout"
        ],
        "column_names": [
            "college name",
            "state",
            "enrollment",
            "player id",
            "player name",
            "yes card",
            "training hours",
            "player id",
            "college name",
            "player position",
            "decision"
        ],
        "template_feedback": "in step 1 , do not use the tryout table . in step 3 , do not find for each value of tryout 's college name . in step 4 , order the results ascending by college 's college name in place of ordering descending by number of rows .",
        "positive_example": "in step 4 , it should be ascending not descending ."
    },
    {
        "db_id": "ship_1",
        "table_names": [
            "captain",
            "ship"
        ],
        "column_names": [
            "captain id",
            "name",
            "ship id",
            "age",
            "class",
            "rank",
            "ship id",
            "name",
            "type",
            "built year",
            "class",
            "flag"
        ],
        "template_feedback": "order the results descending .",
        "positive_example": "replace ascending with descending ."
    },
    {
        "db_id": "ship_1",
        "table_names": [
            "captain",
            "ship"
        ],
        "column_names": [
            "captain id",
            "name",
            "ship id",
            "age",
            "class",
            "rank",
            "ship id",
            "name",
            "type",
            "built year",
            "class",
            "flag"
        ],
        "template_feedback": "order the results descending .",
        "positive_example": "you should use descending order only ."
    },
    {
        "db_id": "manufactory_1",
        "table_names": [
            "manufacturers",
            "products"
        ],
        "column_names": [
            "code",
            "name",
            "headquarter",
            "founder",
            "revenue",
            "code",
            "name",
            "price",
            "manufacturer"
        ],
        "template_feedback": "consider the price less than or equals 200 conditions in place of the price greater than 240 or price less than 200 conditions .",
        "positive_example": "replace \" greater than \" with \" equals \" and \" 240 \" with \" 200 \" ."
    },
    {
        "db_id": "manufactory_1",
        "table_names": [
            "manufacturers",
            "products"
        ],
        "column_names": [
            "code",
            "name",
            "headquarter",
            "founder",
            "revenue",
            "code",
            "name",
            "price",
            "manufacturer"
        ],
        "template_feedback": "consider the price less than or equals 200 conditions in place of the price greater than 240 or price less than 200 conditions .",
        "positive_example": "it must be equal to 200 ."
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "table_names": [
            "reference payment methods",
            "reference service types",
            "addresses",
            "products",
            "marketing regions",
            "clients",
            "drama workshop groups",
            "performers",
            "customers",
            "stores",
            "bookings",
            "performers in bookings",
            "customer orders",
            "order items",
            "invoices",
            "services",
            "bookings services",
            "invoice items"
        ],
        "column_names": [
            "payment method code",
            "payment method description",
            "service type code",
            "parent service type code",
            "service type description",
            "address id",
            "line 1",
            "line 2",
            "city town",
            "state county",
            "other details",
            "product id",
            "product name",
            "product price",
            "product description",
            "other product service details",
            "marketing region code",
            "marketing region name",
            "marketing region descriptrion",
            "other details",
            "client id",
            "address id",
            "customer email address",
            "customer name",
            "customer phone",
            "other details",
            "workshop group id",
            "address id",
            "currency code",
            "marketing region code",
            "store name",
            "store phone",
            "store email address",
            "other details",
            "performer id",
            "address id",
            "customer name",
            "customer phone",
            "customer email address",
            "other details",
            "customer id",
            "address id",
            "customer name",
            "customer phone",
            "customer email address",
            "other details",
            "store id",
            "address id",
            "marketing region code",
            "store name",
            "store phone",
            "store email address",
            "other details",
            "booking id",
            "customer id",
            "workshop group id",
            "status code",
            "store id",
            "order date",
            "planned delivery date",
            "actual delivery date",
            "other order details",
            "order id",
            "performer id",
            "order id",
            "customer id",
            "store id",
            "order date",
            "planned delivery date",
            "actual delivery date",
            "other order details",
            "order item id",
            "order id",
            "product id",
            "order quantity",
            "other item details",
            "invoice id",
            "order id",
            "payment method code",
            "product id",
            "order quantity",
            "other item details",
            "order item id",
            "service id",
            "service type code",
            "workshop group id",
            "product description",
            "product name",
            "product price",
            "other product service details",
            "order id",
            "product id",
            "invoice item id",
            "invoice id",
            "order id",
            "order item id",
            "product id",
            "order quantity",
            "other item details"
        ],
        "template_feedback": "remove the product price less than 1000000 conditions . find for each value of product name whose average product price less than 1000000 .",
        "positive_example": "in place of price of product , ensure to search for median price of product ."
    },
    {
        "db_id": "products_gen_characteristics",
        "table_names": [
            "reference characteristic types",
            "reference colors",
            "reference product categories",
            "characteristics",
            "products",
            "product characteristics"
        ],
        "column_names": [
            "characteristic type code",
            "characteristic type description",
            "color code",
            "color description",
            "product category code",
            "product category description",
            "unit of measure",
            "characteristic id",
            "characteristic type code",
            "characteristic data type",
            "characteristic name",
            "other characteristic details",
            "product id",
            "color code",
            "product category code",
            "product name",
            "typical buying price",
            "typical selling price",
            "product description",
            "other product details",
            "product id",
            "characteristic id",
            "product characteristic value"
        ],
        "template_feedback": "use reference colors table in place of reference characteristic types table .",
        "positive_example": "you should use ref colors table instead of ref characteristic types table ."
    },
    {
        "db_id": "manufactory_1",
        "table_names": [
            "manufacturers",
            "products"
        ],
        "column_names": [
            "code",
            "name",
            "headquarter",
            "founder",
            "revenue",
            "code",
            "name",
            "price",
            "manufacturer"
        ],
        "template_feedback": "order the results descending .",
        "positive_example": "it should be descending instead ascending ."
    },
    {
        "db_id": "manufactory_1",
        "table_names": [
            "manufacturers",
            "products"
        ],
        "column_names": [
            "code",
            "name",
            "headquarter",
            "founder",
            "revenue",
            "code",
            "name",
            "price",
            "manufacturer"
        ],
        "template_feedback": "order the results descending .",
        "positive_example": "replace ascending with descending ."
    },
    {
        "db_id": "customers_and_products_contacts",
        "table_names": [
            "addresses",
            "products",
            "customers",
            "contacts",
            "customer address history",
            "customer orders",
            "order items"
        ],
        "column_names": [
            "address id",
            "line 1 number building",
            "city",
            "zip postcode",
            "state province county",
            "country",
            "product id",
            "product type code",
            "product name",
            "product price",
            "customer id",
            "payment method code",
            "customer number",
            "customer name",
            "customer address",
            "customer phone",
            "customer email",
            "contact id",
            "customer id",
            "gender",
            "first name",
            "last name",
            "contact phone",
            "customer id",
            "address id",
            "date from",
            "date to",
            "order id",
            "customer id",
            "order date",
            "order status code",
            "order item id",
            "order id",
            "product id",
            "order quantity"
        ],
        "template_feedback": "in step 1 , additionally use the information from the customer orders table besides the customers table .",
        "positive_example": "you should only use the customer 's order table ."
    },
    {
        "db_id": "manufactory_1",
        "table_names": [
            "manufacturers",
            "products"
        ],
        "column_names": [
            "code",
            "name",
            "headquarter",
            "founder",
            "revenue",
            "code",
            "name",
            "price",
            "manufacturer"
        ],
        "template_feedback": "in step 1 , do not use the products table . in step 3 , find manufacturers 's name in place of products 's name .",
        "positive_example": "i want table of manufacturer ."
    },
    {
        "db_id": "manufactory_1",
        "table_names": [
            "manufacturers",
            "products"
        ],
        "column_names": [
            "code",
            "name",
            "headquarter",
            "founder",
            "revenue",
            "code",
            "name",
            "price",
            "manufacturer"
        ],
        "template_feedback": "in step 1 , do not use the products table . in step 2 , find for each value of headquarter . additionally find headquarter . find maximum revenue in place of revenue . you should not find the smallest of the results . show me all the results .",
        "positive_example": "replace smallest with largest in step 2 ."
    },
    {
        "db_id": "manufactory_1",
        "table_names": [
            "manufacturers",
            "products"
        ],
        "column_names": [
            "code",
            "name",
            "headquarter",
            "founder",
            "revenue",
            "code",
            "name",
            "price",
            "manufacturer"
        ],
        "template_feedback": "in step 1 , do not use the products table . in step 2 , find for each value of headquarter . additionally find headquarter . find maximum revenue in place of revenue . you should not find the smallest of the results . show me all the results .",
        "positive_example": "in step 2 , you need to use largest in place of smallest ."
    },
    {
        "db_id": "swimming",
        "table_names": [
            "swimmer",
            "stadium",
            "event",
            "record"
        ],
        "column_names": [
            "id",
            "name",
            "nationality",
            "meter 100",
            "meter 200",
            "meter 300",
            "meter 400",
            "meter 500",
            "meter 600",
            "meter 700",
            "time",
            "id",
            "name",
            "capacity",
            "city",
            "country",
            "opening year",
            "id",
            "name",
            "stadium id",
            "year",
            "id",
            "result",
            "swimmer id",
            "event id"
        ],
        "template_feedback": "show me all the results .",
        "positive_example": "need to list all names in descending order of year ."
    },
    {
        "db_id": "swimming",
        "table_names": [
            "swimmer",
            "stadium",
            "event",
            "record"
        ],
        "column_names": [
            "id",
            "name",
            "nationality",
            "meter 100",
            "meter 200",
            "meter 300",
            "meter 400",
            "meter 500",
            "meter 600",
            "meter 700",
            "time",
            "id",
            "name",
            "capacity",
            "city",
            "country",
            "opening year",
            "id",
            "name",
            "stadium id",
            "year",
            "id",
            "result",
            "swimmer id",
            "event id"
        ],
        "template_feedback": "show me all the results .",
        "positive_example": "list out all the names of year in descending order ."
    },
    {
        "db_id": "student_assessment",
        "table_names": [
            "addresses",
            "people",
            "students",
            "courses",
            "people addresses",
            "student course registrations",
            "student course attendance",
            "candidates",
            "candidate assessments"
        ],
        "column_names": [
            "address id",
            "line 1",
            "line 2",
            "city",
            "zip postcode",
            "state province county",
            "country",
            "person id",
            "first name",
            "middle name",
            "last name",
            "cell mobile number",
            "email address",
            "login name",
            "password",
            "student id",
            "student details",
            "course id",
            "course name",
            "course description",
            "other details",
            "person address id",
            "person id",
            "address id",
            "date from",
            "date to",
            "student id",
            "course id",
            "registration date",
            "student id",
            "course id",
            "date of attendance",
            "candidate id",
            "candidate details",
            "candidate id",
            "qualification",
            "assessment date",
            "asessment outcome code"
        ],
        "template_feedback": "in step 1 , do not find for each value of candidate id . in step 2 , order the results by assessment date in place of number of rows .",
        "positive_example": "you should use date of assessment ."
    },
    {
        "db_id": "customers_card_transactions",
        "table_names": [
            "accounts",
            "customers",
            "customers cards",
            "financial transactions"
        ],
        "column_names": [
            "account id",
            "customer id",
            "account name",
            "other account details",
            "customer id",
            "customer first name",
            "customer last name",
            "customer address",
            "customer phone",
            "customer email",
            "other customer details",
            "card id",
            "customer id",
            "card type code",
            "card number",
            "date valid from",
            "date valid to",
            "other card details",
            "transaction id",
            "previous transaction id",
            "account id",
            "card id",
            "transaction type",
            "transaction date",
            "transaction amount",
            "transaction comment",
            "other transaction details"
        ],
        "template_feedback": "find number of different customer id in place of number of rows .",
        "positive_example": "you have to determine the number of unique id of customer ."
    },
    {
        "db_id": "college_2",
        "table_names": [
            "classroom",
            "department",
            "course",
            "instructor",
            "section",
            "teaches",
            "student",
            "takes classes",
            "advisor",
            "time slot",
            "prerequisite"
        ],
        "column_names": [
            "building",
            "room number",
            "capacity",
            "department name",
            "building",
            "budget",
            "course id",
            "title",
            "department name",
            "credits",
            "id",
            "name",
            "department name",
            "salary",
            "course id",
            "section id",
            "semester",
            "year",
            "building",
            "room number",
            "time slot id",
            "id",
            "course id",
            "section id",
            "semester",
            "year",
            "id",
            "name",
            "department name",
            "total credits",
            "id",
            "course id",
            "section id",
            "semester",
            "year",
            "grade",
            "student id",
            "instructor id",
            "time slot id",
            "day",
            "start hour",
            "start minute",
            "end hour",
            "end minute",
            "course id",
            "prerequisite id"
        ],
        "template_feedback": "in step 1 , do not find for each value of department name . in step 2 , order the results by total credits in place of summation of total credits .",
        "positive_example": "order by course id not by the results of step 1"
    },
    {
        "db_id": "customers_card_transactions",
        "table_names": [
            "accounts",
            "customers",
            "customers cards",
            "financial transactions"
        ],
        "column_names": [
            "account id",
            "customer id",
            "account name",
            "other account details",
            "customer id",
            "customer first name",
            "customer last name",
            "customer address",
            "customer phone",
            "customer email",
            "other customer details",
            "card id",
            "customer id",
            "card type code",
            "card number",
            "date valid from",
            "date valid to",
            "other card details",
            "transaction id",
            "previous transaction id",
            "account id",
            "card id",
            "transaction type",
            "transaction date",
            "transaction amount",
            "transaction comment",
            "other transaction details"
        ],
        "template_feedback": "find number of different customer id in place of number of rows .",
        "positive_example": "you have to determine the number of unique id of customer ."
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "table_names": [
            "reference document types",
            "roles",
            "addresses",
            "reference document status",
            "reference shipping agents",
            "documents",
            "employees",
            "document drafts",
            "draft copies",
            "circulation history",
            "documents mailed"
        ],
        "column_names": [
            "document type code",
            "document type description",
            "role code",
            "role description",
            "address id",
            "address details",
            "document status code",
            "document status description",
            "shipping agent code",
            "shipping agent name",
            "shipping agent description",
            "document id",
            "document status code",
            "document type code",
            "shipping agent code",
            "receipt date",
            "receipt number",
            "other details",
            "employee id",
            "role code",
            "employee name",
            "other details",
            "document id",
            "draft number",
            "draft details",
            "document id",
            "draft number",
            "copy number",
            "document id",
            "draft number",
            "copy number",
            "employee id",
            "document id",
            "mailed to address id",
            "mailing date"
        ],
        "template_feedback": "find for each value of document id in place of employee id . find document id in place of number of rows . find number of different employee id in place of employee id .",
        "positive_example": "you need to utilize id of document ."
    },
    {
        "db_id": "student_assessment",
        "table_names": [
            "addresses",
            "people",
            "students",
            "courses",
            "people addresses",
            "student course registrations",
            "student course attendance",
            "candidates",
            "candidate assessments"
        ],
        "column_names": [
            "address id",
            "line 1",
            "line 2",
            "city",
            "zip postcode",
            "state province county",
            "country",
            "person id",
            "first name",
            "middle name",
            "last name",
            "cell mobile number",
            "email address",
            "login name",
            "password",
            "student id",
            "student details",
            "course id",
            "course name",
            "course description",
            "other details",
            "person address id",
            "person id",
            "address id",
            "date from",
            "date to",
            "student id",
            "course id",
            "registration date",
            "student id",
            "course id",
            "date of attendance",
            "candidate id",
            "candidate details",
            "candidate id",
            "qualification",
            "assessment date",
            "asessment outcome code"
        ],
        "template_feedback": "additionally use the information from the candidates table besides the people table .",
        "positive_example": "and make sure they are candidate ."
    },
    {
        "db_id": "student_assessment",
        "table_names": [
            "addresses",
            "people",
            "students",
            "courses",
            "people addresses",
            "student course registrations",
            "student course attendance",
            "candidates",
            "candidate assessments"
        ],
        "column_names": [
            "address id",
            "line 1",
            "line 2",
            "city",
            "zip postcode",
            "state province county",
            "country",
            "person id",
            "first name",
            "middle name",
            "last name",
            "cell mobile number",
            "email address",
            "login name",
            "password",
            "student id",
            "student details",
            "course id",
            "course name",
            "course description",
            "other details",
            "person address id",
            "person id",
            "address id",
            "date from",
            "date to",
            "student id",
            "course id",
            "registration date",
            "student id",
            "course id",
            "date of attendance",
            "candidate id",
            "candidate details",
            "candidate id",
            "qualification",
            "assessment date",
            "asessment outcome code"
        ],
        "template_feedback": "additionally use the information from the candidates table besides the people table .",
        "positive_example": "you should ensure that they are applicant ."
    },
    {
        "db_id": "climbing",
        "table_names": [
            "mountain",
            "climber"
        ],
        "column_names": [
            "mountain id",
            "name",
            "height",
            "prominence",
            "range",
            "country",
            "climber id",
            "name",
            "country",
            "time",
            "points",
            "mountain id"
        ],
        "template_feedback": "use climber table in place of mountain table .",
        "positive_example": "substitute mountain table with climber table"
    },
    {
        "db_id": "climbing",
        "table_names": [
            "mountain",
            "climber"
        ],
        "column_names": [
            "mountain id",
            "name",
            "height",
            "prominence",
            "range",
            "country",
            "climber id",
            "name",
            "country",
            "time",
            "points",
            "mountain id"
        ],
        "template_feedback": "use climber table in place of mountain table .",
        "positive_example": "i want table of climber instead of table of mountain ."
    },
    {
        "db_id": "chinook_1",
        "table_names": [
            "album",
            "artist",
            "customer",
            "employee",
            "genre",
            "invoice",
            "invoice line",
            "media type",
            "playlist",
            "playlist track",
            "track"
        ],
        "column_names": [
            "album id",
            "title",
            "artist id",
            "artist id",
            "name",
            "customer id",
            "first name",
            "last name",
            "company",
            "address",
            "city",
            "state",
            "country",
            "postal code",
            "phone",
            "fax",
            "email",
            "support representative id",
            "employee id",
            "last name",
            "first name",
            "title",
            "reports to",
            "birth date",
            "hire date",
            "address",
            "city",
            "state",
            "country",
            "postal code",
            "phone",
            "fax",
            "email",
            "genre id",
            "name",
            "invoice id",
            "customer id",
            "invoice date",
            "billing address",
            "billing city",
            "billing state",
            "billing country",
            "billing postal code",
            "total",
            "invoice line id",
            "invoice id",
            "track id",
            "unit price",
            "quantity",
            "media type id",
            "name",
            "play list id",
            "name",
            "play list id",
            "track id",
            "track id",
            "name",
            "album id",
            "media type id",
            "genre id",
            "composer",
            "milliseconds",
            "bytes",
            "unit price"
        ],
        "template_feedback": "in step 2 , consider the country equals brazil conditions in place of the billing country equals brazil conditions .",
        "positive_example": "replace billing address with track id and make sure whose customer id present in invoice table ."
    },
    {
        "db_id": "local_govt_mdm",
        "table_names": [
            "customer master index",
            "cmi cross references",
            "council tax",
            "business rates",
            "benefits overpayments",
            "parking fines",
            "rent arrears",
            "electoral register"
        ],
        "column_names": [
            "master customer id",
            "cmi details",
            "cmi cross reference id",
            "master customer id",
            "source system code",
            "council tax id",
            "cmi cross reference id",
            "business rates id",
            "cmi cross reference id",
            "council tax id",
            "cmi cross ref id",
            "council tax id",
            "cmi cross reference id",
            "council tax id",
            "cmi cross reference id",
            "electoral register id",
            "cmi cross reference id"
        ],
        "template_feedback": "in step 2 , use parking fines table in place of rent arrears table .",
        "positive_example": "you need to change the 'rent appears table ' with 'fines table for parking ' ."
    },
    {
        "db_id": "storm_record",
        "table_names": [
            "storm",
            "region",
            "affected region"
        ],
        "column_names": [
            "storm id",
            "name",
            "dates active",
            "max speed",
            "damage millions usd",
            "number deaths",
            "region id",
            "region code",
            "region name",
            "region id",
            "storm id",
            "number city affected"
        ],
        "template_feedback": "consider the max speed greater than 1000 conditions in place of the max speed greater than or equals 1000 conditions .",
        "positive_example": "determine maximum speeds that are greater than 1,000 ."
    },
    {
        "db_id": "coffee_shop",
        "table_names": [
            "shop",
            "member",
            "happy hour",
            "happy hour member"
        ],
        "column_names": [
            "shop id",
            "address",
            "num of staff",
            "score",
            "open year",
            "member id",
            "name",
            "membership card",
            "age",
            "time of purchase",
            "level of membership",
            "address",
            "hh id",
            "shop id",
            "month",
            "num of shaff in charge",
            "hh id",
            "member id",
            "total amount"
        ],
        "template_feedback": "in step 2 , do not use the shop table . in step 3 , consider the address equals waterbury conditions in place of the shop 's address equals waterbury conditions .",
        "positive_example": "use member in place of shop in step 3 ."
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "table_names": [
            "medicine",
            "enzyme",
            "medicine enzyme interaction"
        ],
        "column_names": [
            "id",
            "name",
            "trade name",
            "fda approved",
            "id",
            "name",
            "location",
            "product",
            "chromosome",
            "omim",
            "porphyria",
            "enzyme id",
            "medicine id",
            "interaction type"
        ],
        "template_feedback": "additionally use the information from the medicine enzyme interaction table besides the enzyme table . consider the interaction type equals inhibitor conditions in place of the name like inhibitor conditions . make sure no repetition in the results .",
        "positive_example": "search for the type of interaction which is equivalent to inhibitor ."
    },
    {
        "db_id": "student_assessment",
        "table_names": [
            "addresses",
            "people",
            "students",
            "courses",
            "people addresses",
            "student course registrations",
            "student course attendance",
            "candidates",
            "candidate assessments"
        ],
        "column_names": [
            "address id",
            "line 1",
            "line 2",
            "city",
            "zip postcode",
            "state province county",
            "country",
            "person id",
            "first name",
            "middle name",
            "last name",
            "cell mobile number",
            "email address",
            "login name",
            "password",
            "student id",
            "student details",
            "course id",
            "course name",
            "course description",
            "other details",
            "person address id",
            "person id",
            "address id",
            "date from",
            "date to",
            "student id",
            "course id",
            "registration date",
            "student id",
            "course id",
            "date of attendance",
            "candidate id",
            "candidate details",
            "candidate id",
            "qualification",
            "assessment date",
            "asessment outcome code"
        ],
        "template_feedback": "in step 2 , use student course registrations table in place of students table . find rows in place of student details .",
        "positive_example": "check the pupil 's detail those who are not recorded in course ."
    },
    {
        "db_id": "debate",
        "table_names": [
            "people",
            "debate",
            "debate people"
        ],
        "column_names": [
            "people id",
            "district",
            "name",
            "party",
            "age",
            "debate id",
            "date",
            "venue",
            "num of audience",
            "debate id",
            "affirmative",
            "negative",
            "if affirmative win"
        ],
        "template_feedback": "use the smallest in place of largest .",
        "positive_example": "it should be smallest in place of largest ."
    },
    {
        "db_id": "debate",
        "table_names": [
            "people",
            "debate",
            "debate people"
        ],
        "column_names": [
            "people id",
            "district",
            "name",
            "party",
            "age",
            "debate id",
            "date",
            "venue",
            "num of audience",
            "debate id",
            "affirmative",
            "negative",
            "if affirmative win"
        ],
        "template_feedback": "use the smallest in place of largest .",
        "positive_example": "i want you to replace largest with smallest ."
    },
    {
        "db_id": "phone_market",
        "table_names": [
            "phone",
            "market",
            "phone market"
        ],
        "column_names": [
            "name",
            "phone id",
            "memory in g",
            "carrier",
            "price",
            "market id",
            "district",
            "num of employees",
            "num of shops",
            "ranking",
            "market id",
            "phone id",
            "num of stock"
        ],
        "template_feedback": "in step 2 , remove the num of stock greater than 2000 conditions . find for each value of name whose summation of num of stock greater than or equals 2000 . order the results by summation of num of stock in place of name .",
        "positive_example": "calculate the number of stock in decline order in step 2 ."
    },
    {
        "db_id": "college_2",
        "table_names": [
            "classroom",
            "department",
            "course",
            "instructor",
            "section",
            "teaches",
            "student",
            "takes classes",
            "advisor",
            "time slot",
            "prerequisite"
        ],
        "column_names": [
            "building",
            "room number",
            "capacity",
            "department name",
            "building",
            "budget",
            "course id",
            "title",
            "department name",
            "credits",
            "id",
            "name",
            "department name",
            "salary",
            "course id",
            "section id",
            "semester",
            "year",
            "building",
            "room number",
            "time slot id",
            "id",
            "course id",
            "section id",
            "semester",
            "year",
            "id",
            "name",
            "department name",
            "total credits",
            "id",
            "course id",
            "section id",
            "semester",
            "year",
            "grade",
            "student id",
            "instructor id",
            "time slot id",
            "day",
            "start hour",
            "start minute",
            "end hour",
            "end minute",
            "course id",
            "prerequisite id"
        ],
        "template_feedback": "in step 1 , do not use the department table . in step 3 , order the results by number of rows in place of summation of budget .",
        "positive_example": "remove step 2 , count number of row to each value of department name for each table ."
    },
    {
        "db_id": "perpetrator",
        "table_names": [
            "perpetrator",
            "people"
        ],
        "column_names": [
            "perpetrator id",
            "people id",
            "date",
            "year",
            "location",
            "country",
            "killed",
            "injured",
            "people id",
            "name",
            "height",
            "weight",
            "home town"
        ],
        "template_feedback": "additionally use the information from the perpetrator table besides the people table .",
        "positive_example": "make sure people id of that people is present in perpetrator table ."
    },
    {
        "db_id": "perpetrator",
        "table_names": [
            "perpetrator",
            "people"
        ],
        "column_names": [
            "perpetrator id",
            "people id",
            "date",
            "year",
            "location",
            "country",
            "killed",
            "injured",
            "people id",
            "name",
            "height",
            "weight",
            "home town"
        ],
        "template_feedback": "additionally use the information from the perpetrator table besides the people table .",
        "positive_example": "there must be people id in perpetrator table ."
    },
    {
        "db_id": "college_2",
        "table_names": [
            "classroom",
            "department",
            "course",
            "instructor",
            "section",
            "teaches",
            "student",
            "takes classes",
            "advisor",
            "time slot",
            "prerequisite"
        ],
        "column_names": [
            "building",
            "room number",
            "capacity",
            "department name",
            "building",
            "budget",
            "course id",
            "title",
            "department name",
            "credits",
            "id",
            "name",
            "department name",
            "salary",
            "course id",
            "section id",
            "semester",
            "year",
            "building",
            "room number",
            "time slot id",
            "id",
            "course id",
            "section id",
            "semester",
            "year",
            "id",
            "name",
            "department name",
            "total credits",
            "id",
            "course id",
            "section id",
            "semester",
            "year",
            "grade",
            "student id",
            "instructor id",
            "time slot id",
            "day",
            "start hour",
            "start minute",
            "end hour",
            "end minute",
            "course id",
            "prerequisite id"
        ],
        "template_feedback": "in step 1 , do not use the takes classes table . in step 2 , consider the section 's semester equals fall and section 's year equals 2010 and building equals chandler conditions in place of the takes classes 's semester equals chandler and takes classes 's year equals 2010 conditions .",
        "positive_example": "replace chandler with fall , make sure it is offered in chandler ."
    },
    {
        "db_id": "college_2",
        "table_names": [
            "classroom",
            "department",
            "course",
            "instructor",
            "section",
            "teaches",
            "student",
            "takes classes",
            "advisor",
            "time slot",
            "prerequisite"
        ],
        "column_names": [
            "building",
            "room number",
            "capacity",
            "department name",
            "building",
            "budget",
            "course id",
            "title",
            "department name",
            "credits",
            "id",
            "name",
            "department name",
            "salary",
            "course id",
            "section id",
            "semester",
            "year",
            "building",
            "room number",
            "time slot id",
            "id",
            "course id",
            "section id",
            "semester",
            "year",
            "id",
            "name",
            "department name",
            "total credits",
            "id",
            "course id",
            "section id",
            "semester",
            "year",
            "grade",
            "student id",
            "instructor id",
            "time slot id",
            "day",
            "start hour",
            "start minute",
            "end hour",
            "end minute",
            "course id",
            "prerequisite id"
        ],
        "template_feedback": "in step 1 , do not use the takes classes table . in step 2 , consider the section 's semester equals fall and section 's year equals 2010 and building equals chandler conditions in place of the takes classes 's semester equals chandler and takes classes 's year equals 2010 conditions .",
        "positive_example": "be certain to use fall instead of chandler ."
    },
    {
        "db_id": "machine_repair",
        "table_names": [
            "repair",
            "machine",
            "technician",
            "repair assignment"
        ],
        "column_names": [
            "repair id",
            "name",
            "launch date",
            "notes",
            "machine id",
            "making year",
            "class",
            "team",
            "machine series",
            "value points",
            "quality rank",
            "technician id",
            "name",
            "team",
            "starting year",
            "age",
            "technician id",
            "repair id",
            "machine id"
        ],
        "template_feedback": "use technician table in place of repair table .",
        "positive_example": "you need to use the technician 's table only ."
    },
    {
        "db_id": "coffee_shop",
        "table_names": [
            "shop",
            "member",
            "happy hour",
            "happy hour member"
        ],
        "column_names": [
            "shop id",
            "address",
            "num of staff",
            "score",
            "open year",
            "member id",
            "name",
            "membership card",
            "age",
            "time of purchase",
            "level of membership",
            "address",
            "hh id",
            "shop id",
            "month",
            "num of shaff in charge",
            "hh id",
            "member id",
            "total amount"
        ],
        "template_feedback": "remove the membership card greater than 5 conditions . find for each value of membership card whose number of rows greater than 5 .",
        "positive_example": "the condition is that the membersip card must be possessed by greater than 5 members ."
    },
    {
        "db_id": "college_2",
        "table_names": [
            "classroom",
            "department",
            "course",
            "instructor",
            "section",
            "teaches",
            "student",
            "takes classes",
            "advisor",
            "time slot",
            "prerequisite"
        ],
        "column_names": [
            "building",
            "room number",
            "capacity",
            "department name",
            "building",
            "budget",
            "course id",
            "title",
            "department name",
            "credits",
            "id",
            "name",
            "department name",
            "salary",
            "course id",
            "section id",
            "semester",
            "year",
            "building",
            "room number",
            "time slot id",
            "id",
            "course id",
            "section id",
            "semester",
            "year",
            "id",
            "name",
            "department name",
            "total credits",
            "id",
            "course id",
            "section id",
            "semester",
            "year",
            "grade",
            "student id",
            "instructor id",
            "time slot id",
            "day",
            "start hour",
            "start minute",
            "end hour",
            "end minute",
            "course id",
            "prerequisite id"
        ],
        "template_feedback": "do not return credits . additionally order the results by credits .",
        "positive_example": "just count total rows of course table and title and arrange them in ascending order with respect to title ."
    },
    {
        "db_id": "musical",
        "table_names": [
            "musical",
            "actor"
        ],
        "column_names": [
            "musical id",
            "name",
            "year",
            "award",
            "category",
            "nominee",
            "result",
            "actor id",
            "name",
            "musical id",
            "character",
            "duration",
            "age"
        ],
        "template_feedback": "use actor table in place of musical table .",
        "positive_example": "replace musical table with actor table ."
    },
    {
        "db_id": "musical",
        "table_names": [
            "musical",
            "actor"
        ],
        "column_names": [
            "musical id",
            "name",
            "year",
            "award",
            "category",
            "nominee",
            "result",
            "actor id",
            "name",
            "musical id",
            "character",
            "duration",
            "age"
        ],
        "template_feedback": "use actor table in place of musical table .",
        "positive_example": "i want table of actor instead of table of musical ."
    },
    {
        "db_id": "race_track",
        "table_names": [
            "race",
            "track"
        ],
        "column_names": [
            "race id",
            "name",
            "class",
            "date",
            "track id",
            "track id",
            "name",
            "location",
            "seating",
            "year opened"
        ],
        "template_feedback": "use track table in place of race table .",
        "positive_example": "change race table with track table ."
    },
    {
        "db_id": "race_track",
        "table_names": [
            "race",
            "track"
        ],
        "column_names": [
            "race id",
            "name",
            "class",
            "date",
            "track id",
            "track id",
            "name",
            "location",
            "seating",
            "year opened"
        ],
        "template_feedback": "use track table in place of race table .",
        "positive_example": "i want track table and not the race table ."
    },
    {
        "db_id": "formula_1",
        "table_names": [
            "circuits",
            "races",
            "drivers",
            "status",
            "seasons",
            "constructors",
            "constructor standings",
            "results",
            "driver standings",
            "constructor results",
            "qualifying",
            "pit stops",
            "lap times"
        ],
        "column_names": [
            "circuit id",
            "circuit reference",
            "name",
            "location",
            "country",
            "latitude",
            "longitude",
            "altitude",
            "url",
            "race id",
            "year",
            "round",
            "circuit id",
            "name",
            "date",
            "time",
            "url",
            "driver id",
            "driver reference",
            "number",
            "code",
            "forename",
            "surname",
            "dob",
            "nationality",
            "url",
            "status id",
            "status",
            "year",
            "url",
            "constructor id",
            "constructor reference",
            "name",
            "nationality",
            "url",
            "constructor standings id",
            "race id",
            "constructor id",
            "points",
            "position",
            "position text",
            "wins",
            "result id",
            "race id",
            "driver id",
            "constructor id",
            "number",
            "grid",
            "position",
            "position text",
            "position order",
            "points",
            "laps",
            "time",
            "milliseconds",
            "fastest lap",
            "rank",
            "fastest lap time",
            "fastest lap speed",
            "status id",
            "driver standings id",
            "race id",
            "driver id",
            "points",
            "position",
            "position text",
            "wins",
            "constructor results id",
            "race id",
            "constructor id",
            "points",
            "status",
            "qualify id",
            "race id",
            "driver id",
            "constructor id",
            "number",
            "position",
            "q1",
            "q2",
            "q3",
            "race id",
            "driver id",
            "stop",
            "lap",
            "time",
            "duration",
            "milliseconds",
            "race id",
            "driver id",
            "lap",
            "position",
            "time",
            "milliseconds"
        ],
        "template_feedback": "use races table and results table in place of circuits table . consider the races 's name equals australian grand prix and year equals 2009 conditions in place of the circuit reference equals 2009 and circuit reference equals australian grand prix conditions .",
        "positive_example": "you have to provide me the number of drivers for australian grand prix held in 2009 ."
    },
    {
        "db_id": "student_assessment",
        "table_names": [
            "addresses",
            "people",
            "students",
            "courses",
            "people addresses",
            "student course registrations",
            "student course attendance",
            "candidates",
            "candidate assessments"
        ],
        "column_names": [
            "address id",
            "line 1",
            "line 2",
            "city",
            "zip postcode",
            "state province county",
            "country",
            "person id",
            "first name",
            "middle name",
            "last name",
            "cell mobile number",
            "email address",
            "login name",
            "password",
            "student id",
            "student details",
            "course id",
            "course name",
            "course description",
            "other details",
            "person address id",
            "person id",
            "address id",
            "date from",
            "date to",
            "student id",
            "course id",
            "registration date",
            "student id",
            "course id",
            "date of attendance",
            "candidate id",
            "candidate details",
            "candidate id",
            "qualification",
            "assessment date",
            "asessment outcome code"
        ],
        "template_feedback": "additionally use the information from the people table besides the candidates table . consider the email address equals stanley.monahan @ example.org conditions in place of the candidate details equals stanley.monahan @ example.org conditions .",
        "positive_example": "i want email id address ."
    },
    {
        "db_id": "college_2",
        "table_names": [
            "classroom",
            "department",
            "course",
            "instructor",
            "section",
            "teaches",
            "student",
            "takes classes",
            "advisor",
            "time slot",
            "prerequisite"
        ],
        "column_names": [
            "building",
            "room number",
            "capacity",
            "department name",
            "building",
            "budget",
            "course id",
            "title",
            "department name",
            "credits",
            "id",
            "name",
            "department name",
            "salary",
            "course id",
            "section id",
            "semester",
            "year",
            "building",
            "room number",
            "time slot id",
            "id",
            "course id",
            "section id",
            "semester",
            "year",
            "id",
            "name",
            "department name",
            "total credits",
            "id",
            "course id",
            "section id",
            "semester",
            "year",
            "grade",
            "student id",
            "instructor id",
            "time slot id",
            "day",
            "start hour",
            "start minute",
            "end hour",
            "end minute",
            "course id",
            "prerequisite id"
        ],
        "template_feedback": "in step 1 , use section table in place of takes classes table .",
        "positive_example": "find the number of different course id in step 1"
    },
    {
        "db_id": "college_2",
        "table_names": [
            "classroom",
            "department",
            "course",
            "instructor",
            "section",
            "teaches",
            "student",
            "takes classes",
            "advisor",
            "time slot",
            "prerequisite"
        ],
        "column_names": [
            "building",
            "room number",
            "capacity",
            "department name",
            "building",
            "budget",
            "course id",
            "title",
            "department name",
            "credits",
            "id",
            "name",
            "department name",
            "salary",
            "course id",
            "section id",
            "semester",
            "year",
            "building",
            "room number",
            "time slot id",
            "id",
            "course id",
            "section id",
            "semester",
            "year",
            "id",
            "name",
            "department name",
            "total credits",
            "id",
            "course id",
            "section id",
            "semester",
            "year",
            "grade",
            "student id",
            "instructor id",
            "time slot id",
            "day",
            "start hour",
            "start minute",
            "end hour",
            "end minute",
            "course id",
            "prerequisite id"
        ],
        "template_feedback": "in step 1 , use section table in place of takes classes table .",
        "positive_example": "in step 1 , look for number of distinct course id ."
    },
    {
        "db_id": "party_host",
        "table_names": [
            "party",
            "host",
            "party host"
        ],
        "column_names": [
            "party id",
            "party theme",
            "location",
            "first year",
            "last year",
            "number of hosts",
            "host id",
            "name",
            "nationality",
            "age",
            "party id",
            "host id",
            "is main in charge"
        ],
        "template_feedback": "find number of rows in place of number of different party theme .",
        "positive_example": "need to count distinct rows of party table ."
    },
    {
        "db_id": "party_host",
        "table_names": [
            "party",
            "host",
            "party host"
        ],
        "column_names": [
            "party id",
            "party theme",
            "location",
            "first year",
            "last year",
            "number of hosts",
            "host id",
            "name",
            "nationality",
            "age",
            "party id",
            "host id",
            "is main in charge"
        ],
        "template_feedback": "find number of rows in place of number of different party theme .",
        "positive_example": "you need to calculate the definite rows of table of party ."
    },
    {
        "db_id": "student_assessment",
        "table_names": [
            "addresses",
            "people",
            "students",
            "courses",
            "people addresses",
            "student course registrations",
            "student course attendance",
            "candidates",
            "candidate assessments"
        ],
        "column_names": [
            "address id",
            "line 1",
            "line 2",
            "city",
            "zip postcode",
            "state province county",
            "country",
            "person id",
            "first name",
            "middle name",
            "last name",
            "cell mobile number",
            "email address",
            "login name",
            "password",
            "student id",
            "student details",
            "course id",
            "course name",
            "course description",
            "other details",
            "person address id",
            "person id",
            "address id",
            "date from",
            "date to",
            "student id",
            "course id",
            "registration date",
            "student id",
            "course id",
            "date of attendance",
            "candidate id",
            "candidate details",
            "candidate id",
            "qualification",
            "assessment date",
            "asessment outcome code"
        ],
        "template_feedback": "in step 1 , do not use the student course attendance table .",
        "positive_example": "i want registrations of student course in step 2 ."
    },
    {
        "db_id": "game_injury",
        "table_names": [
            "stadium",
            "game",
            "injury accident"
        ],
        "column_names": [
            "id",
            "name",
            "home games",
            "average attendance",
            "total attendance",
            "capacity percentage",
            "stadium id",
            "id",
            "season",
            "date",
            "home team",
            "away team",
            "score",
            "competition",
            "game id",
            "id",
            "player",
            "injury",
            "number of matches",
            "source"
        ],
        "template_feedback": "additionally use the information from the injury accident table besides the game table . find number of different injury in place of number of rows .",
        "positive_example": "need to find different injuries caused for season greater than 2010 ."
    },
    {
        "db_id": "game_injury",
        "table_names": [
            "stadium",
            "game",
            "injury accident"
        ],
        "column_names": [
            "id",
            "name",
            "home games",
            "average attendance",
            "total attendance",
            "capacity percentage",
            "stadium id",
            "id",
            "season",
            "date",
            "home team",
            "away team",
            "score",
            "competition",
            "game id",
            "id",
            "player",
            "injury",
            "number of matches",
            "source"
        ],
        "template_feedback": "additionally use the information from the injury accident table besides the game table . find number of different injury in place of number of rows .",
        "positive_example": "i want to information about variant injuries that are caused from season larger than 2010 ."
    },
    {
        "db_id": "college_2",
        "table_names": [
            "classroom",
            "department",
            "course",
            "instructor",
            "section",
            "teaches",
            "student",
            "takes classes",
            "advisor",
            "time slot",
            "prerequisite"
        ],
        "column_names": [
            "building",
            "room number",
            "capacity",
            "department name",
            "building",
            "budget",
            "course id",
            "title",
            "department name",
            "credits",
            "id",
            "name",
            "department name",
            "salary",
            "course id",
            "section id",
            "semester",
            "year",
            "building",
            "room number",
            "time slot id",
            "id",
            "course id",
            "section id",
            "semester",
            "year",
            "id",
            "name",
            "department name",
            "total credits",
            "id",
            "course id",
            "section id",
            "semester",
            "year",
            "grade",
            "student id",
            "instructor id",
            "time slot id",
            "day",
            "start hour",
            "start minute",
            "end hour",
            "end minute",
            "course id",
            "prerequisite id"
        ],
        "template_feedback": "additionally make sure that department name equals finance .",
        "positive_example": "find for prerequisite id equals marketing and prerequisite id equals finance ."
    },
    {
        "db_id": "college_2",
        "table_names": [
            "classroom",
            "department",
            "course",
            "instructor",
            "section",
            "teaches",
            "student",
            "takes classes",
            "advisor",
            "time slot",
            "prerequisite"
        ],
        "column_names": [
            "building",
            "room number",
            "capacity",
            "department name",
            "building",
            "budget",
            "course id",
            "title",
            "department name",
            "credits",
            "id",
            "name",
            "department name",
            "salary",
            "course id",
            "section id",
            "semester",
            "year",
            "building",
            "room number",
            "time slot id",
            "id",
            "course id",
            "section id",
            "semester",
            "year",
            "id",
            "name",
            "department name",
            "total credits",
            "id",
            "course id",
            "section id",
            "semester",
            "year",
            "grade",
            "student id",
            "instructor id",
            "time slot id",
            "day",
            "start hour",
            "start minute",
            "end hour",
            "end minute",
            "course id",
            "prerequisite id"
        ],
        "template_feedback": "additionally make sure that department name equals finance .",
        "positive_example": "you need to find the marketing and finance departments ."
    },
    {
        "db_id": "chinook_1",
        "table_names": [
            "album",
            "artist",
            "customer",
            "employee",
            "genre",
            "invoice",
            "invoice line",
            "media type",
            "playlist",
            "playlist track",
            "track"
        ],
        "column_names": [
            "album id",
            "title",
            "artist id",
            "artist id",
            "name",
            "customer id",
            "first name",
            "last name",
            "company",
            "address",
            "city",
            "state",
            "country",
            "postal code",
            "phone",
            "fax",
            "email",
            "support representative id",
            "employee id",
            "last name",
            "first name",
            "title",
            "reports to",
            "birth date",
            "hire date",
            "address",
            "city",
            "state",
            "country",
            "postal code",
            "phone",
            "fax",
            "email",
            "genre id",
            "name",
            "invoice id",
            "customer id",
            "invoice date",
            "billing address",
            "billing city",
            "billing state",
            "billing country",
            "billing postal code",
            "total",
            "invoice line id",
            "invoice id",
            "track id",
            "unit price",
            "quantity",
            "media type id",
            "name",
            "play list id",
            "name",
            "play list id",
            "track id",
            "track id",
            "name",
            "album id",
            "media type id",
            "genre id",
            "composer",
            "milliseconds",
            "bytes",
            "unit price"
        ],
        "template_feedback": "additionally use the information from the genre table besides the track table . additionally make sure that genre 's name equals rock .",
        "positive_example": "make sure to only find for rock tracks ."
    },
    {
        "db_id": "chinook_1",
        "table_names": [
            "album",
            "artist",
            "customer",
            "employee",
            "genre",
            "invoice",
            "invoice line",
            "media type",
            "playlist",
            "playlist track",
            "track"
        ],
        "column_names": [
            "album id",
            "title",
            "artist id",
            "artist id",
            "name",
            "customer id",
            "first name",
            "last name",
            "company",
            "address",
            "city",
            "state",
            "country",
            "postal code",
            "phone",
            "fax",
            "email",
            "support representative id",
            "employee id",
            "last name",
            "first name",
            "title",
            "reports to",
            "birth date",
            "hire date",
            "address",
            "city",
            "state",
            "country",
            "postal code",
            "phone",
            "fax",
            "email",
            "genre id",
            "name",
            "invoice id",
            "customer id",
            "invoice date",
            "billing address",
            "billing city",
            "billing state",
            "billing country",
            "billing postal code",
            "total",
            "invoice line id",
            "invoice id",
            "track id",
            "unit price",
            "quantity",
            "media type id",
            "name",
            "play list id",
            "name",
            "play list id",
            "track id",
            "track id",
            "name",
            "album id",
            "media type id",
            "genre id",
            "composer",
            "milliseconds",
            "bytes",
            "unit price"
        ],
        "template_feedback": "additionally use the information from the genre table besides the track table . additionally make sure that genre 's name equals rock .",
        "positive_example": "i want rock tracks ."
    },
    {
        "db_id": "college_2",
        "table_names": [
            "classroom",
            "department",
            "course",
            "instructor",
            "section",
            "teaches",
            "student",
            "takes classes",
            "advisor",
            "time slot",
            "prerequisite"
        ],
        "column_names": [
            "building",
            "room number",
            "capacity",
            "department name",
            "building",
            "budget",
            "course id",
            "title",
            "department name",
            "credits",
            "id",
            "name",
            "department name",
            "salary",
            "course id",
            "section id",
            "semester",
            "year",
            "building",
            "room number",
            "time slot id",
            "id",
            "course id",
            "section id",
            "semester",
            "year",
            "id",
            "name",
            "department name",
            "total credits",
            "id",
            "course id",
            "section id",
            "semester",
            "year",
            "grade",
            "student id",
            "instructor id",
            "time slot id",
            "day",
            "start hour",
            "start minute",
            "end hour",
            "end minute",
            "course id",
            "prerequisite id"
        ],
        "template_feedback": "additionally use the information from the prerequisite table besides the course table . find for each value of prerequisite 's course id whose number of rows equals 2 .",
        "positive_example": "make sure it has two prerequisites ."
    },
    {
        "db_id": "college_2",
        "table_names": [
            "classroom",
            "department",
            "course",
            "instructor",
            "section",
            "teaches",
            "student",
            "takes classes",
            "advisor",
            "time slot",
            "prerequisite"
        ],
        "column_names": [
            "building",
            "room number",
            "capacity",
            "department name",
            "building",
            "budget",
            "course id",
            "title",
            "department name",
            "credits",
            "id",
            "name",
            "department name",
            "salary",
            "course id",
            "section id",
            "semester",
            "year",
            "building",
            "room number",
            "time slot id",
            "id",
            "course id",
            "section id",
            "semester",
            "year",
            "id",
            "name",
            "department name",
            "total credits",
            "id",
            "course id",
            "section id",
            "semester",
            "year",
            "grade",
            "student id",
            "instructor id",
            "time slot id",
            "day",
            "start hour",
            "start minute",
            "end hour",
            "end minute",
            "course id",
            "prerequisite id"
        ],
        "template_feedback": "additionally use the information from the prerequisite table besides the course table . find for each value of prerequisite 's course id whose number of rows equals 2 .",
        "positive_example": "confirm that it should have two prerequisites ."
    },
    {
        "db_id": "customers_card_transactions",
        "table_names": [
            "accounts",
            "customers",
            "customers cards",
            "financial transactions"
        ],
        "column_names": [
            "account id",
            "customer id",
            "account name",
            "other account details",
            "customer id",
            "customer first name",
            "customer last name",
            "customer address",
            "customer phone",
            "customer email",
            "other customer details",
            "card id",
            "customer id",
            "card type code",
            "card number",
            "date valid from",
            "date valid to",
            "other card details",
            "transaction id",
            "previous transaction id",
            "account id",
            "card id",
            "transaction type",
            "transaction date",
            "transaction amount",
            "transaction comment",
            "other transaction details"
        ],
        "template_feedback": "additionally use the information from the accounts table besides the customers table .",
        "positive_example": "you should make sure that only customers table is being used ."
    },
    {
        "db_id": "local_govt_mdm",
        "table_names": [
            "customer master index",
            "cmi cross references",
            "council tax",
            "business rates",
            "benefits overpayments",
            "parking fines",
            "rent arrears",
            "electoral register"
        ],
        "column_names": [
            "master customer id",
            "cmi details",
            "cmi cross reference id",
            "master customer id",
            "source system code",
            "council tax id",
            "cmi cross reference id",
            "business rates id",
            "cmi cross reference id",
            "council tax id",
            "cmi cross ref id",
            "council tax id",
            "cmi cross reference id",
            "council tax id",
            "cmi cross reference id",
            "electoral register id",
            "cmi cross reference id"
        ],
        "template_feedback": "in step 1 , additionally use the information from the council tax table besides the cmi cross references table .",
        "positive_example": "in step 1 , it should be council tax table in place of cmi cross references table ."
    },
    {
        "db_id": "local_govt_mdm",
        "table_names": [
            "customer master index",
            "cmi cross references",
            "council tax",
            "business rates",
            "benefits overpayments",
            "parking fines",
            "rent arrears",
            "electoral register"
        ],
        "column_names": [
            "master customer id",
            "cmi details",
            "cmi cross reference id",
            "master customer id",
            "source system code",
            "council tax id",
            "cmi cross reference id",
            "business rates id",
            "cmi cross reference id",
            "council tax id",
            "cmi cross ref id",
            "council tax id",
            "cmi cross reference id",
            "council tax id",
            "cmi cross reference id",
            "electoral register id",
            "cmi cross reference id"
        ],
        "template_feedback": "in step 1 , additionally use the information from the council tax table besides the cmi cross references table .",
        "positive_example": "there should be council tax table in step 1 ."
    },
    {
        "db_id": "products_for_hire",
        "table_names": [
            "discount coupons",
            "customers",
            "bookings",
            "products for hire",
            "payments",
            "products booked",
            "view product availability"
        ],
        "column_names": [
            "coupon id",
            "date issued",
            "coupon amount",
            "customer id",
            "coupon id",
            "good or bad customer",
            "first name",
            "last name",
            "gender",
            "date became customer",
            "date last hire",
            "booking id",
            "customer id",
            "booking status code",
            "returned damaged yes or no",
            "booking start date",
            "booking end date",
            "count hired",
            "amount payable",
            "amount of discount",
            "amount outstanding",
            "amount of refund",
            "product id",
            "product type code",
            "daily hire cost",
            "product name",
            "product description",
            "payment id",
            "booking id",
            "customer id",
            "payment type code",
            "amount paid in full yn",
            "payment date",
            "amount due",
            "amount paid",
            "booking id",
            "product id",
            "returned yes or no",
            "returned late yes or no",
            "booked count",
            "booked amount",
            "product id",
            "booking id",
            "status date",
            "available yes or no"
        ],
        "template_feedback": "in step 2 , additionally find booking end date .",
        "positive_example": "one of the product description should be replaced by returned yes or no ."
    },
    {
        "db_id": "student_assessment",
        "table_names": [
            "addresses",
            "people",
            "students",
            "courses",
            "people addresses",
            "student course registrations",
            "student course attendance",
            "candidates",
            "candidate assessments"
        ],
        "column_names": [
            "address id",
            "line 1",
            "line 2",
            "city",
            "zip postcode",
            "state province county",
            "country",
            "person id",
            "first name",
            "middle name",
            "last name",
            "cell mobile number",
            "email address",
            "login name",
            "password",
            "student id",
            "student details",
            "course id",
            "course name",
            "course description",
            "other details",
            "person address id",
            "person id",
            "address id",
            "date from",
            "date to",
            "student id",
            "course id",
            "registration date",
            "student id",
            "course id",
            "date of attendance",
            "candidate id",
            "candidate details",
            "candidate id",
            "qualification",
            "assessment date",
            "asessment outcome code"
        ],
        "template_feedback": "in step 1 , additionally use the information from the students table . in step 2 , do not return courses 's course id .",
        "positive_example": "in step 2 , interchange student course registrations with courses and vice versa ."
    },
    {
        "db_id": "party_host",
        "table_names": [
            "party",
            "host",
            "party host"
        ],
        "column_names": [
            "party id",
            "party theme",
            "location",
            "first year",
            "last year",
            "number of hosts",
            "host id",
            "name",
            "nationality",
            "age",
            "party id",
            "host id",
            "is main in charge"
        ],
        "template_feedback": "in step 1 , consider the age greater than 45 conditions in place of the age less than 45 conditions . in step 2 , consider the age less than 35 conditions in place of the age greater than 35 conditions .",
        "positive_example": "replace less than to greater than in step 1 and greater than to less than ( in step 2 ) ."
    },
    {
        "db_id": "party_host",
        "table_names": [
            "party",
            "host",
            "party host"
        ],
        "column_names": [
            "party id",
            "party theme",
            "location",
            "first year",
            "last year",
            "number of hosts",
            "host id",
            "name",
            "nationality",
            "age",
            "party id",
            "host id",
            "is main in charge"
        ],
        "template_feedback": "in step 1 , consider the age greater than 45 conditions in place of the age less than 45 conditions . in step 2 , consider the age less than 35 conditions in place of the age greater than 35 conditions .",
        "positive_example": "for changes step 1 , please supersede less than with greater than . and the reciprocal for the second step ."
    },
    {
        "db_id": "college_2",
        "table_names": [
            "classroom",
            "department",
            "course",
            "instructor",
            "section",
            "teaches",
            "student",
            "takes classes",
            "advisor",
            "time slot",
            "prerequisite"
        ],
        "column_names": [
            "building",
            "room number",
            "capacity",
            "department name",
            "building",
            "budget",
            "course id",
            "title",
            "department name",
            "credits",
            "id",
            "name",
            "department name",
            "salary",
            "course id",
            "section id",
            "semester",
            "year",
            "building",
            "room number",
            "time slot id",
            "id",
            "course id",
            "section id",
            "semester",
            "year",
            "id",
            "name",
            "department name",
            "total credits",
            "id",
            "course id",
            "section id",
            "semester",
            "year",
            "grade",
            "student id",
            "instructor id",
            "time slot id",
            "day",
            "start hour",
            "start minute",
            "end hour",
            "end minute",
            "course id",
            "prerequisite id"
        ],
        "template_feedback": "order the results descending .",
        "positive_example": "make sure to find ordered descending by budget not ascending by budget ."
    },
    {
        "db_id": "college_2",
        "table_names": [
            "classroom",
            "department",
            "course",
            "instructor",
            "section",
            "teaches",
            "student",
            "takes classes",
            "advisor",
            "time slot",
            "prerequisite"
        ],
        "column_names": [
            "building",
            "room number",
            "capacity",
            "department name",
            "building",
            "budget",
            "course id",
            "title",
            "department name",
            "credits",
            "id",
            "name",
            "department name",
            "salary",
            "course id",
            "section id",
            "semester",
            "year",
            "building",
            "room number",
            "time slot id",
            "id",
            "course id",
            "section id",
            "semester",
            "year",
            "id",
            "name",
            "department name",
            "total credits",
            "id",
            "course id",
            "section id",
            "semester",
            "year",
            "grade",
            "student id",
            "instructor id",
            "time slot id",
            "day",
            "start hour",
            "start minute",
            "end hour",
            "end minute",
            "course id",
            "prerequisite id"
        ],
        "template_feedback": "order the results descending .",
        "positive_example": "required to arrange by budget in descending order ."
    },
    {
        "db_id": "musical",
        "table_names": [
            "musical",
            "actor"
        ],
        "column_names": [
            "musical id",
            "name",
            "year",
            "award",
            "category",
            "nominee",
            "result",
            "actor id",
            "name",
            "musical id",
            "character",
            "duration",
            "age"
        ],
        "template_feedback": "use actor table in place of musical table .",
        "positive_example": "need to find for actor table instead of musical table ."
    },
    {
        "db_id": "musical",
        "table_names": [
            "musical",
            "actor"
        ],
        "column_names": [
            "musical id",
            "name",
            "year",
            "award",
            "category",
            "nominee",
            "result",
            "actor id",
            "name",
            "musical id",
            "character",
            "duration",
            "age"
        ],
        "template_feedback": "use actor table in place of musical table .",
        "positive_example": "remove musical table and add actor table ."
    },
    {
        "db_id": "chinook_1",
        "table_names": [
            "album",
            "artist",
            "customer",
            "employee",
            "genre",
            "invoice",
            "invoice line",
            "media type",
            "playlist",
            "playlist track",
            "track"
        ],
        "column_names": [
            "album id",
            "title",
            "artist id",
            "artist id",
            "name",
            "customer id",
            "first name",
            "last name",
            "company",
            "address",
            "city",
            "state",
            "country",
            "postal code",
            "phone",
            "fax",
            "email",
            "support representative id",
            "employee id",
            "last name",
            "first name",
            "title",
            "reports to",
            "birth date",
            "hire date",
            "address",
            "city",
            "state",
            "country",
            "postal code",
            "phone",
            "fax",
            "email",
            "genre id",
            "name",
            "invoice id",
            "customer id",
            "invoice date",
            "billing address",
            "billing city",
            "billing state",
            "billing country",
            "billing postal code",
            "total",
            "invoice line id",
            "invoice id",
            "track id",
            "unit price",
            "quantity",
            "media type id",
            "name",
            "play list id",
            "name",
            "play list id",
            "track id",
            "track id",
            "name",
            "album id",
            "media type id",
            "genre id",
            "composer",
            "milliseconds",
            "bytes",
            "unit price"
        ],
        "template_feedback": "in step 1 , additionally use the information from the customer table besides the employee table . in step 2 , find customer 's first name in place of employee 's first name .",
        "positive_example": "you need to replace the employee id with customer id from the table of employee and customer respectively . in addition , change invoice line id with support representative id ."
    },
    {
        "db_id": "race_track",
        "table_names": [
            "race",
            "track"
        ],
        "column_names": [
            "race id",
            "name",
            "class",
            "date",
            "track id",
            "track id",
            "name",
            "location",
            "seating",
            "year opened"
        ],
        "template_feedback": "use track table in place of race table .",
        "positive_example": "find for track table instead of race table ."
    },
    {
        "db_id": "college_2",
        "table_names": [
            "classroom",
            "department",
            "course",
            "instructor",
            "section",
            "teaches",
            "student",
            "takes classes",
            "advisor",
            "time slot",
            "prerequisite"
        ],
        "column_names": [
            "building",
            "room number",
            "capacity",
            "department name",
            "building",
            "budget",
            "course id",
            "title",
            "department name",
            "credits",
            "id",
            "name",
            "department name",
            "salary",
            "course id",
            "section id",
            "semester",
            "year",
            "building",
            "room number",
            "time slot id",
            "id",
            "course id",
            "section id",
            "semester",
            "year",
            "id",
            "name",
            "department name",
            "total credits",
            "id",
            "course id",
            "section id",
            "semester",
            "year",
            "grade",
            "student id",
            "instructor id",
            "time slot id",
            "day",
            "start hour",
            "start minute",
            "end hour",
            "end minute",
            "course id",
            "prerequisite id"
        ],
        "template_feedback": "in step 1 , do not use the department table . in step 2 , find student 's department name in place of budget .",
        "positive_example": "find the number of rows of student 's name along with corresponding dept . name ."
    },
    {
        "db_id": "machine_repair",
        "table_names": [
            "repair",
            "machine",
            "technician",
            "repair assignment"
        ],
        "column_names": [
            "repair id",
            "name",
            "launch date",
            "notes",
            "machine id",
            "making year",
            "class",
            "team",
            "machine series",
            "value points",
            "quality rank",
            "technician id",
            "name",
            "team",
            "starting year",
            "age",
            "technician id",
            "repair id",
            "machine id"
        ],
        "template_feedback": "use the largest in place of smallest .",
        "positive_example": "instead of smallest value of age , find for largest value of age ."
    },
    {
        "db_id": "machine_repair",
        "table_names": [
            "repair",
            "machine",
            "technician",
            "repair assignment"
        ],
        "column_names": [
            "repair id",
            "name",
            "launch date",
            "notes",
            "machine id",
            "making year",
            "class",
            "team",
            "machine series",
            "value points",
            "quality rank",
            "technician id",
            "name",
            "team",
            "starting year",
            "age",
            "technician id",
            "repair id",
            "machine id"
        ],
        "template_feedback": "use the largest in place of smallest .",
        "positive_example": "you need search greatest value of age ."
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "table_names": [
            "reference document types",
            "roles",
            "addresses",
            "reference document status",
            "reference shipping agents",
            "documents",
            "employees",
            "document drafts",
            "draft copies",
            "circulation history",
            "documents mailed"
        ],
        "column_names": [
            "document type code",
            "document type description",
            "role code",
            "role description",
            "address id",
            "address details",
            "document status code",
            "document status description",
            "shipping agent code",
            "shipping agent name",
            "shipping agent description",
            "document id",
            "document status code",
            "document type code",
            "shipping agent code",
            "receipt date",
            "receipt number",
            "other details",
            "employee id",
            "role code",
            "employee name",
            "other details",
            "document id",
            "draft number",
            "draft details",
            "document id",
            "draft number",
            "copy number",
            "document id",
            "draft number",
            "copy number",
            "employee id",
            "document id",
            "mailed to address id",
            "mailing date"
        ],
        "template_feedback": "in step 2 , find employees 's role code in place of employee id .",
        "positive_example": "also count the number of rows of employees table ."
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "table_names": [
            "reference document types",
            "roles",
            "addresses",
            "reference document status",
            "reference shipping agents",
            "documents",
            "employees",
            "document drafts",
            "draft copies",
            "circulation history",
            "documents mailed"
        ],
        "column_names": [
            "document type code",
            "document type description",
            "role code",
            "role description",
            "address id",
            "address details",
            "document status code",
            "document status description",
            "shipping agent code",
            "shipping agent name",
            "shipping agent description",
            "document id",
            "document status code",
            "document type code",
            "shipping agent code",
            "receipt date",
            "receipt number",
            "other details",
            "employee id",
            "role code",
            "employee name",
            "other details",
            "document id",
            "draft number",
            "draft details",
            "document id",
            "draft number",
            "copy number",
            "document id",
            "draft number",
            "copy number",
            "employee id",
            "document id",
            "mailed to address id",
            "mailing date"
        ],
        "template_feedback": "in step 2 , find employees 's role code in place of employee id .",
        "positive_example": "look for the number of rows in employees table ."
    },
    {
        "db_id": "college_2",
        "table_names": [
            "classroom",
            "department",
            "course",
            "instructor",
            "section",
            "teaches",
            "student",
            "takes classes",
            "advisor",
            "time slot",
            "prerequisite"
        ],
        "column_names": [
            "building",
            "room number",
            "capacity",
            "department name",
            "building",
            "budget",
            "course id",
            "title",
            "department name",
            "credits",
            "id",
            "name",
            "department name",
            "salary",
            "course id",
            "section id",
            "semester",
            "year",
            "building",
            "room number",
            "time slot id",
            "id",
            "course id",
            "section id",
            "semester",
            "year",
            "id",
            "name",
            "department name",
            "total credits",
            "id",
            "course id",
            "section id",
            "semester",
            "year",
            "grade",
            "student id",
            "instructor id",
            "time slot id",
            "day",
            "start hour",
            "start minute",
            "end hour",
            "end minute",
            "course id",
            "prerequisite id"
        ],
        "template_feedback": "in step 1 , use student table in place of instructor table in step 2 , consider the student 's department name equals history conditions in place of the instructor 's department name equals history conditions .",
        "positive_example": "i want instructor id who advisor history ."
    },
    {
        "db_id": "storm_record",
        "table_names": [
            "storm",
            "region",
            "affected region"
        ],
        "column_names": [
            "storm id",
            "name",
            "dates active",
            "max speed",
            "damage millions usd",
            "number deaths",
            "region id",
            "region code",
            "region name",
            "region id",
            "storm id",
            "number city affected"
        ],
        "template_feedback": "consider the region name not equals denmark conditions in place of the region code not equals denmark conditions .",
        "positive_example": "replace code of region with name of region ."
    },
    {
        "db_id": "university_basketball",
        "table_names": [
            "basketball match",
            "university"
        ],
        "column_names": [
            "team id",
            "school id",
            "team name",
            "acc regular season",
            "acc percent",
            "acc home",
            "acc road",
            "all games",
            "all games percent",
            "all home",
            "all road",
            "all neutral",
            "school id",
            "school",
            "location",
            "founded",
            "affiliation",
            "enrollment",
            "nickname",
            "primary conference"
        ],
        "template_feedback": "additionally make sure that affiliation equals public .",
        "positive_example": "confirm affilition is correlate to public ."
    },
    {
        "db_id": "restaurant_1",
        "table_names": [
            "student",
            "restaurant",
            "type of restaurant",
            "restaurant type",
            "visits restaurant"
        ],
        "column_names": [
            "student id",
            "last name",
            "first name",
            "age",
            "sex",
            "major",
            "advisor",
            "city code",
            "restaurant id",
            "restaurant name",
            "address",
            "rating",
            "restaurant id",
            "restaurant type id",
            "restaurant type id",
            "restaurant type name",
            "restaurant type description",
            "student id",
            "restaurant id",
            "time",
            "spent"
        ],
        "template_feedback": "additionally make sure that advisor equals 1121 . find number of rows in place of number of different advisor .",
        "positive_example": "you should use student id rather than id of restaurant and also include id of student 's restaurant as 1121 ."
    },
    {
        "db_id": "university_basketball",
        "table_names": [
            "basketball match",
            "university"
        ],
        "column_names": [
            "team id",
            "school id",
            "team name",
            "acc regular season",
            "acc percent",
            "acc home",
            "acc road",
            "all games",
            "all games percent",
            "all home",
            "all road",
            "all neutral",
            "school id",
            "school",
            "location",
            "founded",
            "affiliation",
            "enrollment",
            "nickname",
            "primary conference"
        ],
        "template_feedback": "consider the location like % ny % conditions in place of the location equals ny conditions .",
        "positive_example": "instead \" equals \" make sure it is \" contains \" ."
    },
    {
        "db_id": "university_basketball",
        "table_names": [
            "basketball match",
            "university"
        ],
        "column_names": [
            "team id",
            "school id",
            "team name",
            "acc regular season",
            "acc percent",
            "acc home",
            "acc road",
            "all games",
            "all games percent",
            "all home",
            "all road",
            "all neutral",
            "school id",
            "school",
            "location",
            "founded",
            "affiliation",
            "enrollment",
            "nickname",
            "primary conference"
        ],
        "template_feedback": "consider the location like % ny % conditions in place of the location equals ny conditions .",
        "positive_example": "ensure that you have to use contains ."
    },
    {
        "db_id": "restaurant_1",
        "table_names": [
            "student",
            "restaurant",
            "type of restaurant",
            "restaurant type",
            "visits restaurant"
        ],
        "column_names": [
            "student id",
            "last name",
            "first name",
            "age",
            "sex",
            "major",
            "advisor",
            "city code",
            "restaurant id",
            "restaurant name",
            "address",
            "rating",
            "restaurant id",
            "restaurant type id",
            "restaurant type id",
            "restaurant type name",
            "restaurant type description",
            "student id",
            "restaurant id",
            "time",
            "spent"
        ],
        "template_feedback": "additionally use the information from the visits restaurant table and restaurant table besides the student table . additionally make sure that restaurant name equals subway .",
        "positive_example": "i want the total number of visits in subway ."
    },
    {
        "db_id": "customers_card_transactions",
        "table_names": [
            "accounts",
            "customers",
            "customers cards",
            "financial transactions"
        ],
        "column_names": [
            "account id",
            "customer id",
            "account name",
            "other account details",
            "customer id",
            "customer first name",
            "customer last name",
            "customer address",
            "customer phone",
            "customer email",
            "other customer details",
            "card id",
            "customer id",
            "card type code",
            "card number",
            "date valid from",
            "date valid to",
            "other card details",
            "transaction id",
            "previous transaction id",
            "account id",
            "card id",
            "transaction type",
            "transaction date",
            "transaction amount",
            "transaction comment",
            "other transaction details"
        ],
        "template_feedback": "find number of different customer id in place of number of rows .",
        "positive_example": "it should be the number of the corresponding rows to each card type code ."
    },
    {
        "db_id": "customers_card_transactions",
        "table_names": [
            "accounts",
            "customers",
            "customers cards",
            "financial transactions"
        ],
        "column_names": [
            "account id",
            "customer id",
            "account name",
            "other account details",
            "customer id",
            "customer first name",
            "customer last name",
            "customer address",
            "customer phone",
            "customer email",
            "other customer details",
            "card id",
            "customer id",
            "card type code",
            "card number",
            "date valid from",
            "date valid to",
            "other card details",
            "transaction id",
            "previous transaction id",
            "account id",
            "card id",
            "transaction type",
            "transaction date",
            "transaction amount",
            "transaction comment",
            "other transaction details"
        ],
        "template_feedback": "find number of different customer id in place of number of rows .",
        "positive_example": "i want the total correlated rows for every card type code ."
    },
    {
        "db_id": "musical",
        "table_names": [
            "musical",
            "actor"
        ],
        "column_names": [
            "musical id",
            "name",
            "year",
            "award",
            "category",
            "nominee",
            "result",
            "actor id",
            "name",
            "musical id",
            "character",
            "duration",
            "age"
        ],
        "template_feedback": "consider the age not equals 20 conditions in place of the age less than or equals 20 conditions .",
        "positive_example": "replace equals 20 with greater than 20 ."
    },
    {
        "db_id": "musical",
        "table_names": [
            "musical",
            "actor"
        ],
        "column_names": [
            "musical id",
            "name",
            "year",
            "award",
            "category",
            "nominee",
            "result",
            "actor id",
            "name",
            "musical id",
            "character",
            "duration",
            "age"
        ],
        "template_feedback": "consider the age not equals 20 conditions in place of the age less than or equals 20 conditions .",
        "positive_example": "use greater than 20 in place of equals 20 ."
    },
    {
        "db_id": "storm_record",
        "table_names": [
            "storm",
            "region",
            "affected region"
        ],
        "column_names": [
            "storm id",
            "name",
            "dates active",
            "max speed",
            "damage millions usd",
            "number deaths",
            "region id",
            "region code",
            "region name",
            "region id",
            "storm id",
            "number city affected"
        ],
        "template_feedback": "in step 2 , consider the number deaths greater than or equals 10 conditions in place of the number deaths less than 10 conditions .",
        "positive_example": "replace less with greater than or equals ."
    },
    {
        "db_id": "storm_record",
        "table_names": [
            "storm",
            "region",
            "affected region"
        ],
        "column_names": [
            "storm id",
            "name",
            "dates active",
            "max speed",
            "damage millions usd",
            "number deaths",
            "region id",
            "region code",
            "region name",
            "region id",
            "storm id",
            "number city affected"
        ],
        "template_feedback": "in step 2 , consider the number deaths greater than or equals 10 conditions in place of the number deaths less than 10 conditions .",
        "positive_example": "you have to use smaller than ."
    },
    {
        "db_id": "storm_record",
        "table_names": [
            "storm",
            "region",
            "affected region"
        ],
        "column_names": [
            "storm id",
            "name",
            "dates active",
            "max speed",
            "damage millions usd",
            "number deaths",
            "region id",
            "region code",
            "region name",
            "region id",
            "storm id",
            "number city affected"
        ],
        "template_feedback": "in step 2 , consider the number deaths greater than or equals 10 conditions in place of the number deaths less than 10 conditions .",
        "positive_example": "you have to use more than or equal to ."
    },
    {
        "db_id": "browser_web",
        "table_names": [
            "web client accelerator",
            "browser",
            "accelerator compatible browser"
        ],
        "column_names": [
            "id",
            "name",
            "operating system",
            "client",
            "connection",
            "id",
            "name",
            "market share",
            "accelerator id",
            "browser id",
            "compatible since year"
        ],
        "template_feedback": "remove the connection equals broadband , satellite , wireless , fiber , dsl conditions . find number of different client in place of number of rows .",
        "positive_example": "in web client accelerator table ensure to look for the client which are not repeating ."
    },
    {
        "db_id": "chinook_1",
        "table_names": [
            "album",
            "artist",
            "customer",
            "employee",
            "genre",
            "invoice",
            "invoice line",
            "media type",
            "playlist",
            "playlist track",
            "track"
        ],
        "column_names": [
            "album id",
            "title",
            "artist id",
            "artist id",
            "name",
            "customer id",
            "first name",
            "last name",
            "company",
            "address",
            "city",
            "state",
            "country",
            "postal code",
            "phone",
            "fax",
            "email",
            "support representative id",
            "employee id",
            "last name",
            "first name",
            "title",
            "reports to",
            "birth date",
            "hire date",
            "address",
            "city",
            "state",
            "country",
            "postal code",
            "phone",
            "fax",
            "email",
            "genre id",
            "name",
            "invoice id",
            "customer id",
            "invoice date",
            "billing address",
            "billing city",
            "billing state",
            "billing country",
            "billing postal code",
            "total",
            "invoice line id",
            "invoice id",
            "track id",
            "unit price",
            "quantity",
            "media type id",
            "name",
            "play list id",
            "name",
            "play list id",
            "track id",
            "track id",
            "name",
            "album id",
            "media type id",
            "genre id",
            "composer",
            "milliseconds",
            "bytes",
            "unit price"
        ],
        "template_feedback": "additionally use the information from the genre table besides the track table . additionally make sure that genre 's name equals jazz .",
        "positive_example": "make sure it is a track of jazz ."
    },
    {
        "db_id": "chinook_1",
        "table_names": [
            "album",
            "artist",
            "customer",
            "employee",
            "genre",
            "invoice",
            "invoice line",
            "media type",
            "playlist",
            "playlist track",
            "track"
        ],
        "column_names": [
            "album id",
            "title",
            "artist id",
            "artist id",
            "name",
            "customer id",
            "first name",
            "last name",
            "company",
            "address",
            "city",
            "state",
            "country",
            "postal code",
            "phone",
            "fax",
            "email",
            "support representative id",
            "employee id",
            "last name",
            "first name",
            "title",
            "reports to",
            "birth date",
            "hire date",
            "address",
            "city",
            "state",
            "country",
            "postal code",
            "phone",
            "fax",
            "email",
            "genre id",
            "name",
            "invoice id",
            "customer id",
            "invoice date",
            "billing address",
            "billing city",
            "billing state",
            "billing country",
            "billing postal code",
            "total",
            "invoice line id",
            "invoice id",
            "track id",
            "unit price",
            "quantity",
            "media type id",
            "name",
            "play list id",
            "name",
            "play list id",
            "track id",
            "track id",
            "name",
            "album id",
            "media type id",
            "genre id",
            "composer",
            "milliseconds",
            "bytes",
            "unit price"
        ],
        "template_feedback": "additionally use the information from the genre table besides the track table . additionally make sure that genre 's name equals jazz .",
        "positive_example": "you need to check that it is a jazz track ."
    },
    {
        "db_id": "party_host",
        "table_names": [
            "party",
            "host",
            "party host"
        ],
        "column_names": [
            "party id",
            "party theme",
            "location",
            "first year",
            "last year",
            "number of hosts",
            "host id",
            "name",
            "nationality",
            "age",
            "party id",
            "host id",
            "is main in charge"
        ],
        "template_feedback": "in step 2 , find location in place of party theme .",
        "positive_example": "you need use id of party by ensuring that you add up the rows of party table ."
    },
    {
        "db_id": "musical",
        "table_names": [
            "musical",
            "actor"
        ],
        "column_names": [
            "musical id",
            "name",
            "year",
            "award",
            "category",
            "nominee",
            "result",
            "actor id",
            "name",
            "musical id",
            "character",
            "duration",
            "age"
        ],
        "template_feedback": "use the largest in place of smallest .",
        "positive_example": "there should be largest value of age instead of smallest value of age ."
    },
    {
        "db_id": "musical",
        "table_names": [
            "musical",
            "actor"
        ],
        "column_names": [
            "musical id",
            "name",
            "year",
            "award",
            "category",
            "nominee",
            "result",
            "actor id",
            "name",
            "musical id",
            "character",
            "duration",
            "age"
        ],
        "template_feedback": "use the largest in place of smallest .",
        "positive_example": "i required the highest age ."
    },
    {
        "db_id": "college_2",
        "table_names": [
            "classroom",
            "department",
            "course",
            "instructor",
            "section",
            "teaches",
            "student",
            "takes classes",
            "advisor",
            "time slot",
            "prerequisite"
        ],
        "column_names": [
            "building",
            "room number",
            "capacity",
            "department name",
            "building",
            "budget",
            "course id",
            "title",
            "department name",
            "credits",
            "id",
            "name",
            "department name",
            "salary",
            "course id",
            "section id",
            "semester",
            "year",
            "building",
            "room number",
            "time slot id",
            "id",
            "course id",
            "section id",
            "semester",
            "year",
            "id",
            "name",
            "department name",
            "total credits",
            "id",
            "course id",
            "section id",
            "semester",
            "year",
            "grade",
            "student id",
            "instructor id",
            "time slot id",
            "day",
            "start hour",
            "start minute",
            "end hour",
            "end minute",
            "course id",
            "prerequisite id"
        ],
        "template_feedback": "consider the capacity less than 50 conditions in place of the capacity greater than 50 conditions .",
        "positive_example": "replace greater with less ."
    },
    {
        "db_id": "college_2",
        "table_names": [
            "classroom",
            "department",
            "course",
            "instructor",
            "section",
            "teaches",
            "student",
            "takes classes",
            "advisor",
            "time slot",
            "prerequisite"
        ],
        "column_names": [
            "building",
            "room number",
            "capacity",
            "department name",
            "building",
            "budget",
            "course id",
            "title",
            "department name",
            "credits",
            "id",
            "name",
            "department name",
            "salary",
            "course id",
            "section id",
            "semester",
            "year",
            "building",
            "room number",
            "time slot id",
            "id",
            "course id",
            "section id",
            "semester",
            "year",
            "id",
            "name",
            "department name",
            "total credits",
            "id",
            "course id",
            "section id",
            "semester",
            "year",
            "grade",
            "student id",
            "instructor id",
            "time slot id",
            "day",
            "start hour",
            "start minute",
            "end hour",
            "end minute",
            "course id",
            "prerequisite id"
        ],
        "template_feedback": "consider the capacity less than 50 conditions in place of the capacity greater than 50 conditions .",
        "positive_example": "you need to use less instead of greater ."
    },
    {
        "db_id": "customers_card_transactions",
        "table_names": [
            "accounts",
            "customers",
            "customers cards",
            "financial transactions"
        ],
        "column_names": [
            "account id",
            "customer id",
            "account name",
            "other account details",
            "customer id",
            "customer first name",
            "customer last name",
            "customer address",
            "customer phone",
            "customer email",
            "other customer details",
            "card id",
            "customer id",
            "card type code",
            "card number",
            "date valid from",
            "date valid to",
            "other card details",
            "transaction id",
            "previous transaction id",
            "account id",
            "card id",
            "transaction type",
            "transaction date",
            "transaction amount",
            "transaction comment",
            "other transaction details"
        ],
        "template_feedback": "find number of different customer id in place of number of rows .",
        "positive_example": "you can use number of discrete id of customer ."
    },
    {
        "db_id": "student_assessment",
        "table_names": [
            "addresses",
            "people",
            "students",
            "courses",
            "people addresses",
            "student course registrations",
            "student course attendance",
            "candidates",
            "candidate assessments"
        ],
        "column_names": [
            "address id",
            "line 1",
            "line 2",
            "city",
            "zip postcode",
            "state province county",
            "country",
            "person id",
            "first name",
            "middle name",
            "last name",
            "cell mobile number",
            "email address",
            "login name",
            "password",
            "student id",
            "student details",
            "course id",
            "course name",
            "course description",
            "other details",
            "person address id",
            "person id",
            "address id",
            "date from",
            "date to",
            "student id",
            "course id",
            "registration date",
            "student id",
            "course id",
            "date of attendance",
            "candidate id",
            "candidate details",
            "candidate id",
            "qualification",
            "assessment date",
            "asessment outcome code"
        ],
        "template_feedback": "additionally use the information from the courses table besides the student course attendance table . additionally make sure that course name equals statistics .",
        "positive_example": "make sure course in the statistics department ."
    },
    {
        "db_id": "customers_card_transactions",
        "table_names": [
            "accounts",
            "customers",
            "customers cards",
            "financial transactions"
        ],
        "column_names": [
            "account id",
            "customer id",
            "account name",
            "other account details",
            "customer id",
            "customer first name",
            "customer last name",
            "customer address",
            "customer phone",
            "customer email",
            "other customer details",
            "card id",
            "customer id",
            "card type code",
            "card number",
            "date valid from",
            "date valid to",
            "other card details",
            "transaction id",
            "previous transaction id",
            "account id",
            "card id",
            "transaction type",
            "transaction date",
            "transaction amount",
            "transaction comment",
            "other transaction details"
        ],
        "template_feedback": "do not return other account details .",
        "positive_example": "it is not necessary to find other account information ."
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "table_names": [
            "reference document types",
            "roles",
            "addresses",
            "reference document status",
            "reference shipping agents",
            "documents",
            "employees",
            "document drafts",
            "draft copies",
            "circulation history",
            "documents mailed"
        ],
        "column_names": [
            "document type code",
            "document type description",
            "role code",
            "role description",
            "address id",
            "address details",
            "document status code",
            "document status description",
            "shipping agent code",
            "shipping agent name",
            "shipping agent description",
            "document id",
            "document status code",
            "document type code",
            "shipping agent code",
            "receipt date",
            "receipt number",
            "other details",
            "employee id",
            "role code",
            "employee name",
            "other details",
            "document id",
            "draft number",
            "draft details",
            "document id",
            "draft number",
            "copy number",
            "document id",
            "draft number",
            "copy number",
            "employee id",
            "document id",
            "mailed to address id",
            "mailing date"
        ],
        "template_feedback": "in step 1 , do not use the documents table . in step 2 , find mailing date in place of receipt date .",
        "positive_example": "i want date of mailing in place of date of receipt ."
    },
    {
        "db_id": "college_2",
        "table_names": [
            "classroom",
            "department",
            "course",
            "instructor",
            "section",
            "teaches",
            "student",
            "takes classes",
            "advisor",
            "time slot",
            "prerequisite"
        ],
        "column_names": [
            "building",
            "room number",
            "capacity",
            "department name",
            "building",
            "budget",
            "course id",
            "title",
            "department name",
            "credits",
            "id",
            "name",
            "department name",
            "salary",
            "course id",
            "section id",
            "semester",
            "year",
            "building",
            "room number",
            "time slot id",
            "id",
            "course id",
            "section id",
            "semester",
            "year",
            "id",
            "name",
            "department name",
            "total credits",
            "id",
            "course id",
            "section id",
            "semester",
            "year",
            "grade",
            "student id",
            "instructor id",
            "time slot id",
            "day",
            "start hour",
            "start minute",
            "end hour",
            "end minute",
            "course id",
            "prerequisite id"
        ],
        "template_feedback": "in step 1 , use student table in place of course table .",
        "positive_example": "make sure deparment have largest enrollment ."
    },
    {
        "db_id": "college_2",
        "table_names": [
            "classroom",
            "department",
            "course",
            "instructor",
            "section",
            "teaches",
            "student",
            "takes classes",
            "advisor",
            "time slot",
            "prerequisite"
        ],
        "column_names": [
            "building",
            "room number",
            "capacity",
            "department name",
            "building",
            "budget",
            "course id",
            "title",
            "department name",
            "credits",
            "id",
            "name",
            "department name",
            "salary",
            "course id",
            "section id",
            "semester",
            "year",
            "building",
            "room number",
            "time slot id",
            "id",
            "course id",
            "section id",
            "semester",
            "year",
            "id",
            "name",
            "department name",
            "total credits",
            "id",
            "course id",
            "section id",
            "semester",
            "year",
            "grade",
            "student id",
            "instructor id",
            "time slot id",
            "day",
            "start hour",
            "start minute",
            "end hour",
            "end minute",
            "course id",
            "prerequisite id"
        ],
        "template_feedback": "in step 1 , use student table in place of course table .",
        "positive_example": "you need to make certain highest enrollment is in department ."
    },
    {
        "db_id": "college_2",
        "table_names": [
            "classroom",
            "department",
            "course",
            "instructor",
            "section",
            "teaches",
            "student",
            "takes classes",
            "advisor",
            "time slot",
            "prerequisite"
        ],
        "column_names": [
            "building",
            "room number",
            "capacity",
            "department name",
            "building",
            "budget",
            "course id",
            "title",
            "department name",
            "credits",
            "id",
            "name",
            "department name",
            "salary",
            "course id",
            "section id",
            "semester",
            "year",
            "building",
            "room number",
            "time slot id",
            "id",
            "course id",
            "section id",
            "semester",
            "year",
            "id",
            "name",
            "department name",
            "total credits",
            "id",
            "course id",
            "section id",
            "semester",
            "year",
            "grade",
            "student id",
            "instructor id",
            "time slot id",
            "day",
            "start hour",
            "start minute",
            "end hour",
            "end minute",
            "course id",
            "prerequisite id"
        ],
        "template_feedback": "additionally use the information from the advisor table and student table besides the instructor table . consider the student 's department name equals history conditions in place of the instructor 's department name equals history conditions .",
        "positive_example": "you need to make sure that instructor teaches ."
    },
    {
        "db_id": "chinook_1",
        "table_names": [
            "album",
            "artist",
            "customer",
            "employee",
            "genre",
            "invoice",
            "invoice line",
            "media type",
            "playlist",
            "playlist track",
            "track"
        ],
        "column_names": [
            "album id",
            "title",
            "artist id",
            "artist id",
            "name",
            "customer id",
            "first name",
            "last name",
            "company",
            "address",
            "city",
            "state",
            "country",
            "postal code",
            "phone",
            "fax",
            "email",
            "support representative id",
            "employee id",
            "last name",
            "first name",
            "title",
            "reports to",
            "birth date",
            "hire date",
            "address",
            "city",
            "state",
            "country",
            "postal code",
            "phone",
            "fax",
            "email",
            "genre id",
            "name",
            "invoice id",
            "customer id",
            "invoice date",
            "billing address",
            "billing city",
            "billing state",
            "billing country",
            "billing postal code",
            "total",
            "invoice line id",
            "invoice id",
            "track id",
            "unit price",
            "quantity",
            "media type id",
            "name",
            "play list id",
            "name",
            "play list id",
            "track id",
            "track id",
            "name",
            "album id",
            "media type id",
            "genre id",
            "composer",
            "milliseconds",
            "bytes",
            "unit price"
        ],
        "template_feedback": "in step 3 , find customer 's last name in place of employee 's last name .",
        "positive_example": "should find customer 's last name"
    },
    {
        "db_id": "chinook_1",
        "table_names": [
            "album",
            "artist",
            "customer",
            "employee",
            "genre",
            "invoice",
            "invoice line",
            "media type",
            "playlist",
            "playlist track",
            "track"
        ],
        "column_names": [
            "album id",
            "title",
            "artist id",
            "artist id",
            "name",
            "customer id",
            "first name",
            "last name",
            "company",
            "address",
            "city",
            "state",
            "country",
            "postal code",
            "phone",
            "fax",
            "email",
            "support representative id",
            "employee id",
            "last name",
            "first name",
            "title",
            "reports to",
            "birth date",
            "hire date",
            "address",
            "city",
            "state",
            "country",
            "postal code",
            "phone",
            "fax",
            "email",
            "genre id",
            "name",
            "invoice id",
            "customer id",
            "invoice date",
            "billing address",
            "billing city",
            "billing state",
            "billing country",
            "billing postal code",
            "total",
            "invoice line id",
            "invoice id",
            "track id",
            "unit price",
            "quantity",
            "media type id",
            "name",
            "play list id",
            "name",
            "play list id",
            "track id",
            "track id",
            "name",
            "album id",
            "media type id",
            "genre id",
            "composer",
            "milliseconds",
            "bytes",
            "unit price"
        ],
        "template_feedback": "in step 3 , find customer 's last name in place of employee 's last name .",
        "positive_example": "you need to look for last name of customer 's ."
    },
    {
        "db_id": "storm_record",
        "table_names": [
            "storm",
            "region",
            "affected region"
        ],
        "column_names": [
            "storm id",
            "name",
            "dates active",
            "max speed",
            "damage millions usd",
            "number deaths",
            "region id",
            "region code",
            "region name",
            "region id",
            "storm id",
            "number city affected"
        ],
        "template_feedback": "in step 1 , do not find for each value of region name . in step 2 , additionally make sure that region name not equals denmark .",
        "positive_example": "in step 2 corresponding value in step 1 is not equal to denmark"
    },
    {
        "db_id": "storm_record",
        "table_names": [
            "storm",
            "region",
            "affected region"
        ],
        "column_names": [
            "storm id",
            "name",
            "dates active",
            "max speed",
            "damage millions usd",
            "number deaths",
            "region id",
            "region code",
            "region name",
            "region id",
            "storm id",
            "number city affected"
        ],
        "template_feedback": "in step 1 , do not find for each value of region name . in step 2 , additionally make sure that region name not equals denmark .",
        "positive_example": "in step 2 , check that the value of step 1 should not be denmark ."
    },
    {
        "db_id": "machine_repair",
        "table_names": [
            "repair",
            "machine",
            "technician",
            "repair assignment"
        ],
        "column_names": [
            "repair id",
            "name",
            "launch date",
            "notes",
            "machine id",
            "making year",
            "class",
            "team",
            "machine series",
            "value points",
            "quality rank",
            "technician id",
            "name",
            "team",
            "starting year",
            "age",
            "technician id",
            "repair id",
            "machine id"
        ],
        "template_feedback": "use the largest in place of smallest .",
        "positive_example": "there should be largest value of age instead of smallest value ."
    },
    {
        "db_id": "machine_repair",
        "table_names": [
            "repair",
            "machine",
            "technician",
            "repair assignment"
        ],
        "column_names": [
            "repair id",
            "name",
            "launch date",
            "notes",
            "machine id",
            "making year",
            "class",
            "team",
            "machine series",
            "value points",
            "quality rank",
            "technician id",
            "name",
            "team",
            "starting year",
            "age",
            "technician id",
            "repair id",
            "machine id"
        ],
        "template_feedback": "use the largest in place of smallest .",
        "positive_example": "you have to use highest value of age ."
    },
    {
        "db_id": "college_2",
        "table_names": [
            "classroom",
            "department",
            "course",
            "instructor",
            "section",
            "teaches",
            "student",
            "takes classes",
            "advisor",
            "time slot",
            "prerequisite"
        ],
        "column_names": [
            "building",
            "room number",
            "capacity",
            "department name",
            "building",
            "budget",
            "course id",
            "title",
            "department name",
            "credits",
            "id",
            "name",
            "department name",
            "salary",
            "course id",
            "section id",
            "semester",
            "year",
            "building",
            "room number",
            "time slot id",
            "id",
            "course id",
            "section id",
            "semester",
            "year",
            "id",
            "name",
            "department name",
            "total credits",
            "id",
            "course id",
            "section id",
            "semester",
            "year",
            "grade",
            "student id",
            "instructor id",
            "time slot id",
            "day",
            "start hour",
            "start minute",
            "end hour",
            "end minute",
            "course id",
            "prerequisite id"
        ],
        "template_feedback": "use teaches table in place of instructor table . find number of different teaches 's id in place of number of different name .",
        "positive_example": "make sure instructor taught course ."
    },
    {
        "db_id": "tracking_orders",
        "table_names": [
            "customers",
            "invoices",
            "orders",
            "products",
            "order items",
            "shipments",
            "shipment items"
        ],
        "column_names": [
            "customer id",
            "customer name",
            "customer details",
            "invoice number",
            "invoice date",
            "invoice details",
            "order id",
            "customer id",
            "order status",
            "date order placed",
            "order details",
            "product id",
            "product name",
            "product details",
            "order item id",
            "product id",
            "order id",
            "order item status",
            "order item details",
            "shipment id",
            "order id",
            "invoice number",
            "shipment tracking number",
            "shipment date",
            "other shipment details",
            "shipment id",
            "order item id"
        ],
        "template_feedback": "in step 1 , do not use the order items table and shipments table . in step 2 , order the results by date order placed in place of shipment date .",
        "positive_example": "search for the date order was placed ."
    },
    {
        "db_id": "customer_complaints",
        "table_names": [
            "staff",
            "customers",
            "products",
            "complaints"
        ],
        "column_names": [
            "staff id",
            "gender",
            "first name",
            "last name",
            "email address",
            "phone number",
            "customer id",
            "customer type code",
            "address line 1",
            "address line 2",
            "town city",
            "state",
            "email address",
            "phone number",
            "product id",
            "parent product id",
            "product category code",
            "date product first available",
            "date product discontinued",
            "product name",
            "product description",
            "product price",
            "complaint id",
            "product id",
            "customer id",
            "complaint outcome code",
            "complaint status code",
            "complaint type code",
            "date complaint raised",
            "date complaint closed",
            "staff id"
        ],
        "template_feedback": "return the rows in any of the results of step 1 and the results of step 2 .",
        "positive_example": "it does not have to be in both results . should be in any of them instead"
    },
    {
        "db_id": "customer_complaints",
        "table_names": [
            "staff",
            "customers",
            "products",
            "complaints"
        ],
        "column_names": [
            "staff id",
            "gender",
            "first name",
            "last name",
            "email address",
            "phone number",
            "customer id",
            "customer type code",
            "address line 1",
            "address line 2",
            "town city",
            "state",
            "email address",
            "phone number",
            "product id",
            "parent product id",
            "product category code",
            "date product first available",
            "date product discontinued",
            "product name",
            "product description",
            "product price",
            "complaint id",
            "product id",
            "customer id",
            "complaint outcome code",
            "complaint status code",
            "complaint type code",
            "date complaint raised",
            "date complaint closed",
            "staff id"
        ],
        "template_feedback": "return the rows in any of the results of step 1 and the results of step 2 .",
        "positive_example": "you have to use it in one of them ."
    },
    {
        "db_id": "document_management",
        "table_names": [
            "roles",
            "users",
            "document structures",
            "functional areas",
            "images",
            "documents",
            "document functional areas",
            "document sections",
            "document sections images"
        ],
        "column_names": [
            "role code",
            "role description",
            "user id",
            "role code",
            "user name",
            "user login",
            "password",
            "document structure code",
            "parent document structure code",
            "document structure description",
            "functional area code",
            "parent functional area code",
            "functional area description",
            "image id",
            "image alt text",
            "image name",
            "image url",
            "document code",
            "document structure code",
            "document type code",
            "access count",
            "document name",
            "document code",
            "functional area code",
            "section id",
            "document code",
            "section sequence",
            "section code",
            "section title",
            "section id",
            "image id"
        ],
        "template_feedback": "in step 1 , do not find for each value of document name . in step 2 , find access count in place of number of rows . order the results by access count in place of number of rows .",
        "positive_example": "you should withdraw the first step ."
    },
    {
        "db_id": "tracking_orders",
        "table_names": [
            "customers",
            "invoices",
            "orders",
            "products",
            "order items",
            "shipments",
            "shipment items"
        ],
        "column_names": [
            "customer id",
            "customer name",
            "customer details",
            "invoice number",
            "invoice date",
            "invoice details",
            "order id",
            "customer id",
            "order status",
            "date order placed",
            "order details",
            "product id",
            "product name",
            "product details",
            "order item id",
            "product id",
            "order id",
            "order item status",
            "order item details",
            "shipment id",
            "order id",
            "invoice number",
            "shipment tracking number",
            "shipment date",
            "other shipment details",
            "shipment id",
            "order item id"
        ],
        "template_feedback": "in step 1 , do not use the shipments table . in step 2 , make sure no repetition in the results . order the results by date order placed in place of shipment date .",
        "positive_example": "search for unique order id from order table and arrange the date of order placed in ascending order ."
    },
    {
        "db_id": "entertainment_awards",
        "table_names": [
            "festival detail",
            "artwork",
            "nomination"
        ],
        "column_names": [
            "festival id",
            "festival name",
            "chair name",
            "location",
            "year",
            "num of audience",
            "artwork id",
            "type",
            "name",
            "artwork id",
            "festival id",
            "result"
        ],
        "template_feedback": "find summation of num of audience in place of number of rows .",
        "positive_example": "you have to calculate the numbers of spectators for each festivals ."
    },
    {
        "db_id": "music_1",
        "table_names": [
            "genre",
            "artist",
            "files",
            "song"
        ],
        "column_names": [
            "genre name",
            "rating",
            "most popular in",
            "artist name",
            "country",
            "gender",
            "preferred genre",
            "song id",
            "artist name",
            "file size",
            "duration",
            "formats",
            "song name",
            "artist name",
            "country",
            "song id",
            "genre is",
            "rating",
            "languages",
            "releasedate",
            "resolution"
        ],
        "template_feedback": "in step 1 , additionally use the information from the artist table besides the song table .",
        "positive_example": "ensure parallel to find songs they have produce ."
    },
    {
        "db_id": "music_1",
        "table_names": [
            "genre",
            "artist",
            "files",
            "song"
        ],
        "column_names": [
            "genre name",
            "rating",
            "most popular in",
            "artist name",
            "country",
            "gender",
            "preferred genre",
            "song id",
            "artist name",
            "file size",
            "duration",
            "formats",
            "song name",
            "artist name",
            "country",
            "song id",
            "genre is",
            "rating",
            "languages",
            "releasedate",
            "resolution"
        ],
        "template_feedback": "in step 1 , additionally use the information from the artist table besides the song table .",
        "positive_example": "make sure to provide the songs along with the producer name ."
    },
    {
        "db_id": "activity_1",
        "table_names": [
            "activity",
            "participates in",
            "faculty participates in",
            "student",
            "faculty"
        ],
        "column_names": [
            "activity id",
            "activity name",
            "student id",
            "activity id",
            "faculty id",
            "activity id",
            "student id",
            "last name",
            "first name",
            "age",
            "sex",
            "major",
            "advisor",
            "city code",
            "faculty id",
            "last name",
            "first name",
            "rank",
            "sex",
            "phone",
            "room",
            "building"
        ],
        "template_feedback": "in step 1 , remove the sex equals m conditions . in step 2 , additionally find for each value of sex . additionally find sex .",
        "positive_example": "for each rank , list out the number of males and females ."
    },
    {
        "db_id": "music_1",
        "table_names": [
            "genre",
            "artist",
            "files",
            "song"
        ],
        "column_names": [
            "genre name",
            "rating",
            "most popular in",
            "artist name",
            "country",
            "gender",
            "preferred genre",
            "song id",
            "artist name",
            "file size",
            "duration",
            "formats",
            "song name",
            "artist name",
            "country",
            "song id",
            "genre is",
            "rating",
            "languages",
            "releasedate",
            "resolution"
        ],
        "template_feedback": "in step 1 , do not use the artist table . in step 2 , additionally make sure that languages equals english .",
        "positive_example": "exchange preferred genre with duration , and ensure that song 's song name equals english ."
    },
    {
        "db_id": "music_1",
        "table_names": [
            "genre",
            "artist",
            "files",
            "song"
        ],
        "column_names": [
            "genre name",
            "rating",
            "most popular in",
            "artist name",
            "country",
            "gender",
            "preferred genre",
            "song id",
            "artist name",
            "file size",
            "duration",
            "formats",
            "song name",
            "artist name",
            "country",
            "song id",
            "genre is",
            "rating",
            "languages",
            "releasedate",
            "resolution"
        ],
        "template_feedback": "in step 1 , do not use the artist table . in step 2 , additionally make sure that languages equals english .",
        "positive_example": "i want the genre of only english song ."
    },
    {
        "db_id": "voter_2",
        "table_names": [
            "student",
            "voting record"
        ],
        "column_names": [
            "student id",
            "last name",
            "first name",
            "age",
            "sex",
            "major",
            "advisor",
            "city code",
            "student id",
            "registration date",
            "election cycle",
            "president vote",
            "vice president vote",
            "secretary vote",
            "treasurer vote",
            "class president vote",
            "class senator vote"
        ],
        "template_feedback": "in step 2 , remove the president vote equals 1004 conditions .",
        "positive_example": "i want students who have a vote of class president ."
    },
    {
        "db_id": "voter_2",
        "table_names": [
            "student",
            "voting record"
        ],
        "column_names": [
            "student id",
            "last name",
            "first name",
            "age",
            "sex",
            "major",
            "advisor",
            "city code",
            "student id",
            "registration date",
            "election cycle",
            "president vote",
            "vice president vote",
            "secretary vote",
            "treasurer vote",
            "class president vote",
            "class senator vote"
        ],
        "template_feedback": "consider the major equals 50 conditions in place of the major greater than 50 conditions .",
        "positive_example": "not greater than 50 but equal to 50 ."
    },
    {
        "db_id": "voter_2",
        "table_names": [
            "student",
            "voting record"
        ],
        "column_names": [
            "student id",
            "last name",
            "first name",
            "age",
            "sex",
            "major",
            "advisor",
            "city code",
            "student id",
            "registration date",
            "election cycle",
            "president vote",
            "vice president vote",
            "secretary vote",
            "treasurer vote",
            "class president vote",
            "class senator vote"
        ],
        "template_feedback": "consider the major equals 50 conditions in place of the major greater than 50 conditions .",
        "positive_example": "you need to find less than 50 but it should be not equivalent to 50 ."
    },
    {
        "db_id": "customer_complaints",
        "table_names": [
            "staff",
            "customers",
            "products",
            "complaints"
        ],
        "column_names": [
            "staff id",
            "gender",
            "first name",
            "last name",
            "email address",
            "phone number",
            "customer id",
            "customer type code",
            "address line 1",
            "address line 2",
            "town city",
            "state",
            "email address",
            "phone number",
            "product id",
            "parent product id",
            "product category code",
            "date product first available",
            "date product discontinued",
            "product name",
            "product description",
            "product price",
            "complaint id",
            "product id",
            "customer id",
            "complaint outcome code",
            "complaint status code",
            "complaint type code",
            "date complaint raised",
            "date complaint closed",
            "staff id"
        ],
        "template_feedback": "in step 2 , do not find for each value of complaints 's staff id . in step 3 , order the results by date complaint raised in place of number of rows .",
        "positive_example": "i want complaint date ."
    },
    {
        "db_id": "activity_1",
        "table_names": [
            "activity",
            "participates in",
            "faculty participates in",
            "student",
            "faculty"
        ],
        "column_names": [
            "activity id",
            "activity name",
            "student id",
            "activity id",
            "faculty id",
            "activity id",
            "student id",
            "last name",
            "first name",
            "age",
            "sex",
            "major",
            "advisor",
            "city code",
            "faculty id",
            "last name",
            "first name",
            "rank",
            "sex",
            "phone",
            "room",
            "building"
        ],
        "template_feedback": "additionally use the information from the faculty table besides the student table . consider the faculty 's last name equals goodrich and faculty 's first name equals michael conditions in place of the advisor equals michael conditions .",
        "positive_example": "ensure that student are advised by michael goodrich ."
    },
    {
        "db_id": "activity_1",
        "table_names": [
            "activity",
            "participates in",
            "faculty participates in",
            "student",
            "faculty"
        ],
        "column_names": [
            "activity id",
            "activity name",
            "student id",
            "activity id",
            "faculty id",
            "activity id",
            "student id",
            "last name",
            "first name",
            "age",
            "sex",
            "major",
            "advisor",
            "city code",
            "faculty id",
            "last name",
            "first name",
            "rank",
            "sex",
            "phone",
            "room",
            "building"
        ],
        "template_feedback": "additionally use the information from the faculty table besides the student table . consider the faculty 's last name equals goodrich and faculty 's first name equals michael conditions in place of the advisor equals michael conditions .",
        "positive_example": "you need to take care if the pupils are counseled by michael goodrich ."
    },
    {
        "db_id": "voter_2",
        "table_names": [
            "student",
            "voting record"
        ],
        "column_names": [
            "student id",
            "last name",
            "first name",
            "age",
            "sex",
            "major",
            "advisor",
            "city code",
            "student id",
            "registration date",
            "election cycle",
            "president vote",
            "vice president vote",
            "secretary vote",
            "treasurer vote",
            "class president vote",
            "class senator vote"
        ],
        "template_feedback": "additionally use the information from the voting record table besides the student table . consider the election cycle equals spring conditions in place of the major equals 600 conditions .",
        "positive_example": "you should verify that election held in spring has secretary votes and also drop advisor equals 600 ."
    },
    {
        "db_id": "tracking_orders",
        "table_names": [
            "customers",
            "invoices",
            "orders",
            "products",
            "order items",
            "shipments",
            "shipment items"
        ],
        "column_names": [
            "customer id",
            "customer name",
            "customer details",
            "invoice number",
            "invoice date",
            "invoice details",
            "order id",
            "customer id",
            "order status",
            "date order placed",
            "order details",
            "product id",
            "product name",
            "product details",
            "order item id",
            "product id",
            "order id",
            "order item status",
            "order item details",
            "shipment id",
            "order id",
            "invoice number",
            "shipment tracking number",
            "shipment date",
            "other shipment details",
            "shipment id",
            "order item id"
        ],
        "template_feedback": "in step 1 , do not use the shipments table . in step 2 , find date order placed in place of shipment date .",
        "positive_example": "i want the date of order placed from order table ."
    },
    {
        "db_id": "activity_1",
        "table_names": [
            "activity",
            "participates in",
            "faculty participates in",
            "student",
            "faculty"
        ],
        "column_names": [
            "activity id",
            "activity name",
            "student id",
            "activity id",
            "faculty id",
            "activity id",
            "student id",
            "last name",
            "first name",
            "age",
            "sex",
            "major",
            "advisor",
            "city code",
            "faculty id",
            "last name",
            "first name",
            "rank",
            "sex",
            "phone",
            "room",
            "building"
        ],
        "template_feedback": "additionally use the information from the faculty participates in table besides the activity table . find for each value of activity 's activity id in place of activity name .",
        "positive_example": "search number of the corresponding rows to each value of faculty id ."
    },
    {
        "db_id": "activity_1",
        "table_names": [
            "activity",
            "participates in",
            "faculty participates in",
            "student",
            "faculty"
        ],
        "column_names": [
            "activity id",
            "activity name",
            "student id",
            "activity id",
            "faculty id",
            "activity id",
            "student id",
            "last name",
            "first name",
            "age",
            "sex",
            "major",
            "advisor",
            "city code",
            "faculty id",
            "last name",
            "first name",
            "rank",
            "sex",
            "phone",
            "room",
            "building"
        ],
        "template_feedback": "additionally use the information from the faculty participates in table besides the activity table . find for each value of activity 's activity id in place of activity name .",
        "positive_example": "for each value of faculty id , count the number of equivalent rows ."
    },
    {
        "db_id": "school_bus",
        "table_names": [
            "driver",
            "school",
            "school bus"
        ],
        "column_names": [
            "driver id",
            "name",
            "party",
            "home city",
            "age",
            "school id",
            "grade",
            "school",
            "location",
            "type",
            "school id",
            "driver id",
            "years working",
            "if full time"
        ],
        "template_feedback": "in step 2 , make sure that the corresponding value in step 1 equals 2 .",
        "positive_example": "remove greater than or ."
    },
    {
        "db_id": "school_bus",
        "table_names": [
            "driver",
            "school",
            "school bus"
        ],
        "column_names": [
            "driver id",
            "name",
            "party",
            "home city",
            "age",
            "school id",
            "grade",
            "school",
            "location",
            "type",
            "school id",
            "driver id",
            "years working",
            "if full time"
        ],
        "template_feedback": "in step 2 , make sure that the corresponding value in step 1 equals 2 .",
        "positive_example": "you should not use greater than or ."
    },
    {
        "db_id": "e_learning",
        "table_names": [
            "course authors and tutors",
            "students",
            "subjects",
            "courses",
            "student course enrolment",
            "student tests taken"
        ],
        "column_names": [
            "author id",
            "author tutor atb",
            "login name",
            "password",
            "personal name",
            "middle name",
            "family name",
            "gender mf",
            "address line 1",
            "student id",
            "date of registration",
            "date of latest logon",
            "login name",
            "password",
            "personal name",
            "middle name",
            "family name",
            "subject id",
            "subject name",
            "course id",
            "author id",
            "subject id",
            "course name",
            "course description",
            "registration id",
            "student id",
            "course id",
            "date of enrolment",
            "date of completion",
            "registration id",
            "date test taken",
            "test result"
        ],
        "template_feedback": "in step 1 , use student tests taken table in place of student course enrolment table and courses table in step 2 , consider the test result equals pass conditions in place of the course name equals pass conditions . find date test taken in place of date of enrolment .",
        "positive_example": "i want the number of students who have taken the test and passed it ."
    },
    {
        "db_id": "flight_4",
        "table_names": [
            "routes",
            "airports",
            "airlines"
        ],
        "column_names": [
            "route id",
            "destination airport id",
            "destination airport",
            "source airport id",
            "source airport",
            "airline id",
            "airline",
            "code share",
            "airport id",
            "name",
            "city",
            "country",
            "x",
            "y",
            "elevation",
            "iata",
            "icao",
            "airline id",
            "name",
            "iata",
            "icao",
            "call sign",
            "country",
            "active"
        ],
        "template_feedback": "additionally use the information from the routes table besides the airports table .",
        "positive_example": "we have to look for airports for destination airport where its correlating country is available in airport table also country is equivalent to canada ."
    },
    {
        "db_id": "e_government",
        "table_names": [
            "addresses",
            "services",
            "forms",
            "individuals",
            "organizations",
            "parties",
            "organization contact individuals",
            "party addresses",
            "party forms",
            "party services"
        ],
        "column_names": [
            "address id",
            "line 1 number building",
            "town city",
            "zip postcode",
            "state province county",
            "country",
            "service id",
            "service type code",
            "service name",
            "service descriptio",
            "form id",
            "form type code",
            "service id",
            "form number",
            "form name",
            "form description",
            "individual id",
            "individual first name",
            "individual middle name",
            "inidividual phone",
            "individual email",
            "individual address",
            "individual last name",
            "organization id",
            "date formed",
            "organization name",
            "uk vat number",
            "party id",
            "payment method code",
            "party phone",
            "party email",
            "individual id",
            "organization id",
            "date contact from",
            "date contact to",
            "party id",
            "address id",
            "date address from",
            "address type code",
            "date address to",
            "party id",
            "form id",
            "date completion started",
            "form status code",
            "date fully completed",
            "booking id",
            "customer id",
            "service id",
            "service datetime",
            "booking made date"
        ],
        "template_feedback": "in step 1 , do not use the individuals table . in step 2 , consider the line 1 number building like % 6862 kaitlyn knolls % conditions in place of the individual first name equals 6862 kaitlyn knolls conditions .",
        "positive_example": "in place of first name of individual use number of building in line 1 ."
    },
    {
        "db_id": "entertainment_awards",
        "table_names": [
            "festival detail",
            "artwork",
            "nomination"
        ],
        "column_names": [
            "festival id",
            "festival name",
            "chair name",
            "location",
            "year",
            "num of audience",
            "artwork id",
            "type",
            "name",
            "artwork id",
            "festival id",
            "result"
        ],
        "template_feedback": "in step 1 , find festival name in place of chair name .",
        "positive_example": "you need to search the name of festival and also the name of chair is incorrect ."
    },
    {
        "db_id": "e_learning",
        "table_names": [
            "course authors and tutors",
            "students",
            "subjects",
            "courses",
            "student course enrolment",
            "student tests taken"
        ],
        "column_names": [
            "author id",
            "author tutor atb",
            "login name",
            "password",
            "personal name",
            "middle name",
            "family name",
            "gender mf",
            "address line 1",
            "student id",
            "date of registration",
            "date of latest logon",
            "login name",
            "password",
            "personal name",
            "middle name",
            "family name",
            "subject id",
            "subject name",
            "course id",
            "author id",
            "subject id",
            "course name",
            "course description",
            "registration id",
            "student id",
            "course id",
            "date of enrolment",
            "date of completion",
            "registration id",
            "date test taken",
            "test result"
        ],
        "template_feedback": "in step 1 , do not use the student course enrolment table and students table . in step 2 , find date test taken in place of date of registration .",
        "positive_example": "i want registration date ."
    },
    {
        "db_id": "flight_4",
        "table_names": [
            "routes",
            "airports",
            "airlines"
        ],
        "column_names": [
            "route id",
            "destination airport id",
            "destination airport",
            "source airport id",
            "source airport",
            "airline id",
            "airline",
            "code share",
            "airport id",
            "name",
            "city",
            "country",
            "x",
            "y",
            "elevation",
            "iata",
            "icao",
            "airline id",
            "name",
            "iata",
            "icao",
            "call sign",
            "country",
            "active"
        ],
        "template_feedback": "in step 1 , use airlines table in place of airports table . find for each value of airlines 's country in place of airports 's country . in step 2 , find airlines 's country in place of airports 's country .",
        "positive_example": "in step 1 , i want airlines table ."
    },
    {
        "db_id": "e_learning",
        "table_names": [
            "course authors and tutors",
            "students",
            "subjects",
            "courses",
            "student course enrolment",
            "student tests taken"
        ],
        "column_names": [
            "author id",
            "author tutor atb",
            "login name",
            "password",
            "personal name",
            "middle name",
            "family name",
            "gender mf",
            "address line 1",
            "student id",
            "date of registration",
            "date of latest logon",
            "login name",
            "password",
            "personal name",
            "middle name",
            "family name",
            "subject id",
            "subject name",
            "course id",
            "author id",
            "subject id",
            "course name",
            "course description",
            "registration id",
            "student id",
            "course id",
            "date of enrolment",
            "date of completion",
            "registration id",
            "date test taken",
            "test result"
        ],
        "template_feedback": "in step 1 , do not use the courses table . in step 2 , find rows in place of course description and course name .",
        "positive_example": "you have to look for id of author , author tutor atb and login name ."
    },
    {
        "db_id": "e_government",
        "table_names": [
            "addresses",
            "services",
            "forms",
            "individuals",
            "organizations",
            "parties",
            "organization contact individuals",
            "party addresses",
            "party forms",
            "party services"
        ],
        "column_names": [
            "address id",
            "line 1 number building",
            "town city",
            "zip postcode",
            "state province county",
            "country",
            "service id",
            "service type code",
            "service name",
            "service descriptio",
            "form id",
            "form type code",
            "service id",
            "form number",
            "form name",
            "form description",
            "individual id",
            "individual first name",
            "individual middle name",
            "inidividual phone",
            "individual email",
            "individual address",
            "individual last name",
            "organization id",
            "date formed",
            "organization name",
            "uk vat number",
            "party id",
            "payment method code",
            "party phone",
            "party email",
            "individual id",
            "organization id",
            "date contact from",
            "date contact to",
            "party id",
            "address id",
            "date address from",
            "address type code",
            "date address to",
            "party id",
            "form id",
            "date completion started",
            "form status code",
            "date fully completed",
            "booking id",
            "customer id",
            "service id",
            "service datetime",
            "booking made date"
        ],
        "template_feedback": "use the largest in place of smallest .",
        "positive_example": "it should find for largest value of date formed in place of \" smallest value of date formed \" ."
    },
    {
        "db_id": "e_government",
        "table_names": [
            "addresses",
            "services",
            "forms",
            "individuals",
            "organizations",
            "parties",
            "organization contact individuals",
            "party addresses",
            "party forms",
            "party services"
        ],
        "column_names": [
            "address id",
            "line 1 number building",
            "town city",
            "zip postcode",
            "state province county",
            "country",
            "service id",
            "service type code",
            "service name",
            "service descriptio",
            "form id",
            "form type code",
            "service id",
            "form number",
            "form name",
            "form description",
            "individual id",
            "individual first name",
            "individual middle name",
            "inidividual phone",
            "individual email",
            "individual address",
            "individual last name",
            "organization id",
            "date formed",
            "organization name",
            "uk vat number",
            "party id",
            "payment method code",
            "party phone",
            "party email",
            "individual id",
            "organization id",
            "date contact from",
            "date contact to",
            "party id",
            "address id",
            "date address from",
            "address type code",
            "date address to",
            "party id",
            "form id",
            "date completion started",
            "form status code",
            "date fully completed",
            "booking id",
            "customer id",
            "service id",
            "service datetime",
            "booking made date"
        ],
        "template_feedback": "use the largest in place of smallest .",
        "positive_example": "you have to search for highest instead of lowest value of date formed"
    },
    {
        "db_id": "activity_1",
        "table_names": [
            "activity",
            "participates in",
            "faculty participates in",
            "student",
            "faculty"
        ],
        "column_names": [
            "activity id",
            "activity name",
            "student id",
            "activity id",
            "faculty id",
            "activity id",
            "student id",
            "last name",
            "first name",
            "age",
            "sex",
            "major",
            "advisor",
            "city code",
            "faculty id",
            "last name",
            "first name",
            "rank",
            "sex",
            "phone",
            "room",
            "building"
        ],
        "template_feedback": "use activity table in place of faculty table . find activity name in place of room .",
        "positive_example": "looking for the name of activity in activity table ."
    },
    {
        "db_id": "e_government",
        "table_names": [
            "addresses",
            "services",
            "forms",
            "individuals",
            "organizations",
            "parties",
            "organization contact individuals",
            "party addresses",
            "party forms",
            "party services"
        ],
        "column_names": [
            "address id",
            "line 1 number building",
            "town city",
            "zip postcode",
            "state province county",
            "country",
            "service id",
            "service type code",
            "service name",
            "service descriptio",
            "form id",
            "form type code",
            "service id",
            "form number",
            "form name",
            "form description",
            "individual id",
            "individual first name",
            "individual middle name",
            "inidividual phone",
            "individual email",
            "individual address",
            "individual last name",
            "organization id",
            "date formed",
            "organization name",
            "uk vat number",
            "party id",
            "payment method code",
            "party phone",
            "party email",
            "individual id",
            "organization id",
            "date contact from",
            "date contact to",
            "party id",
            "address id",
            "date address from",
            "address type code",
            "date address to",
            "party id",
            "form id",
            "date completion started",
            "form status code",
            "date fully completed",
            "booking id",
            "customer id",
            "service id",
            "service datetime",
            "booking made date"
        ],
        "template_feedback": "in step 1 , additionally use the information from the organizations table . in step 2 , additionally make sure that organization name equals labour party .",
        "positive_example": "ensuring individuals also belongs in labour party organizations from organizations table ."
    },
    {
        "db_id": "e_government",
        "table_names": [
            "addresses",
            "services",
            "forms",
            "individuals",
            "organizations",
            "parties",
            "organization contact individuals",
            "party addresses",
            "party forms",
            "party services"
        ],
        "column_names": [
            "address id",
            "line 1 number building",
            "town city",
            "zip postcode",
            "state province county",
            "country",
            "service id",
            "service type code",
            "service name",
            "service descriptio",
            "form id",
            "form type code",
            "service id",
            "form number",
            "form name",
            "form description",
            "individual id",
            "individual first name",
            "individual middle name",
            "inidividual phone",
            "individual email",
            "individual address",
            "individual last name",
            "organization id",
            "date formed",
            "organization name",
            "uk vat number",
            "party id",
            "payment method code",
            "party phone",
            "party email",
            "individual id",
            "organization id",
            "date contact from",
            "date contact to",
            "party id",
            "address id",
            "date address from",
            "address type code",
            "date address to",
            "party id",
            "form id",
            "date completion started",
            "form status code",
            "date fully completed",
            "booking id",
            "customer id",
            "service id",
            "service datetime",
            "booking made date"
        ],
        "template_feedback": "in step 1 , additionally use the information from the organizations table . in step 2 , additionally make sure that organization name equals labour party .",
        "positive_example": "from organization table make sure that individuals are also owned in organization of labour party ."
    },
    {
        "db_id": "cre_Theme_park",
        "table_names": [
            "ref hotel star ratings",
            "locations",
            "ref attraction types",
            "visitors",
            "features",
            "hotels",
            "tourist attractions",
            "street markets",
            "shops",
            "museums",
            "royal family",
            "theme parks",
            "visits",
            "photos",
            "staff",
            "tourist attraction features"
        ],
        "column_names": [
            "star rating code",
            "star rating description",
            "location id",
            "location name",
            "address",
            "other details",
            "attraction type code",
            "attraction type description",
            "tourist id",
            "tourist details",
            "feature id",
            "feature details",
            "hotel id",
            "star rating code",
            "pets allowed yn",
            "price range",
            "other hotel details",
            "tourist attraction id",
            "attraction type code",
            "location id",
            "how to get there",
            "name",
            "description",
            "opening hours",
            "other details",
            "market id",
            "market details",
            "shop id",
            "shop details",
            "museum id",
            "museum details",
            "royal family id",
            "royal family details",
            "theme park id",
            "theme park details",
            "visit id",
            "tourist attraction id",
            "tourist id",
            "visit date",
            "visit details",
            "photo id",
            "tourist attraction id",
            "name",
            "description",
            "filename",
            "other details",
            "staff id",
            "tourist attraction id",
            "name",
            "other details",
            "tourist attraction id",
            "feature id"
        ],
        "template_feedback": "additionally make sure that star rating code equals 5 .",
        "positive_example": "add code of star rating is correlate to 5 ."
    },
    {
        "db_id": "voter_2",
        "table_names": [
            "student",
            "voting record"
        ],
        "column_names": [
            "student id",
            "last name",
            "first name",
            "age",
            "sex",
            "major",
            "advisor",
            "city code",
            "student id",
            "registration date",
            "election cycle",
            "president vote",
            "vice president vote",
            "secretary vote",
            "treasurer vote",
            "class president vote",
            "class senator vote"
        ],
        "template_feedback": "in step 1 , do not use the student table . in step 2 , remove the advisor equals 1121 and first name equals linda conditions .",
        "positive_example": "in step 2 find without repetition vice president vote along with president vote ."
    },
    {
        "db_id": "voter_2",
        "table_names": [
            "student",
            "voting record"
        ],
        "column_names": [
            "student id",
            "last name",
            "first name",
            "age",
            "sex",
            "major",
            "advisor",
            "city code",
            "student id",
            "registration date",
            "election cycle",
            "president vote",
            "vice president vote",
            "secretary vote",
            "treasurer vote",
            "class president vote",
            "class senator vote"
        ],
        "template_feedback": "in step 1 , do not use the student table . in step 2 , remove the advisor equals 1121 and first name equals linda conditions .",
        "positive_example": "in step 2 , you should count president 's and vice president 's vote and the value should be unique ."
    },
    {
        "db_id": "music_1",
        "table_names": [
            "genre",
            "artist",
            "files",
            "song"
        ],
        "column_names": [
            "genre name",
            "rating",
            "most popular in",
            "artist name",
            "country",
            "gender",
            "preferred genre",
            "song id",
            "artist name",
            "file size",
            "duration",
            "formats",
            "song name",
            "artist name",
            "country",
            "song id",
            "genre is",
            "rating",
            "languages",
            "releasedate",
            "resolution"
        ],
        "template_feedback": "in step 1 , do not use the genre table . in step 2 , additionally make sure that languages equals english .",
        "positive_example": "i want the genre is of english song mentioned in song 's table ."
    },
    {
        "db_id": "music_1",
        "table_names": [
            "genre",
            "artist",
            "files",
            "song"
        ],
        "column_names": [
            "genre name",
            "rating",
            "most popular in",
            "artist name",
            "country",
            "gender",
            "preferred genre",
            "song id",
            "artist name",
            "file size",
            "duration",
            "formats",
            "song name",
            "artist name",
            "country",
            "song id",
            "genre is",
            "rating",
            "languages",
            "releasedate",
            "resolution"
        ],
        "template_feedback": "in step 2 , do not use the artist table . in step 3 , consider the languages equals english conditions in place of the song 's country equals english conditions .",
        "positive_example": "it should be song name in place of genre is ."
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "table_names": [
            "premises",
            "products",
            "customers",
            "mailshot campaigns",
            "customer addresses",
            "customer orders",
            "mailshot customers",
            "order items"
        ],
        "column_names": [
            "premise id",
            "premises type",
            "premise details",
            "product id",
            "product category",
            "product name",
            "customer id",
            "payment method",
            "customer name",
            "customer phone",
            "customer email",
            "customer address",
            "customer login",
            "customer password",
            "mailshot id",
            "product category",
            "mailshot name",
            "mailshot start date",
            "mailshot end date",
            "customer id",
            "premise id",
            "date address from",
            "address type code",
            "date address to",
            "order id",
            "customer id",
            "order status code",
            "shipping method code",
            "order placed datetime",
            "order delivered datetime",
            "order shipping charges",
            "mailshot id",
            "customer id",
            "outcome code",
            "mailshot customer date",
            "item id",
            "order item status code",
            "order id",
            "product id",
            "item status code",
            "item delivered datetime",
            "item order quantity"
        ],
        "template_feedback": "in step 1 , use mailshot customers table in place of customer orders table in step 2 , consider the outcome code equals order conditions in place of the order status code equals order conditions . in step 3 , use mailshot customers table in place of customer orders table in step 4 , consider the outcome code equals no response conditions in place of the order status code equals no response conditions .",
        "positive_example": "in step 1 , use table of mailshot customers and code of outcome ."
    },
    {
        "db_id": "student_1",
        "table_names": [
            "list",
            "teachers"
        ],
        "column_names": [
            "last name",
            "first name",
            "grade",
            "class room",
            "last name",
            "first name",
            "class room"
        ],
        "template_feedback": "make sure no repetition in the results . you should not order the results .",
        "positive_example": "no need to order ascending by grade when there is only single value in grade ."
    },
    {
        "db_id": "student_1",
        "table_names": [
            "list",
            "teachers"
        ],
        "column_names": [
            "last name",
            "first name",
            "grade",
            "class room",
            "last name",
            "first name",
            "class room"
        ],
        "template_feedback": "make sure no repetition in the results . you should not order the results .",
        "positive_example": "for this phase , the grade can not be sorted by sequential order if there is solo value ."
    },
    {
        "db_id": "activity_1",
        "table_names": [
            "activity",
            "participates in",
            "faculty participates in",
            "student",
            "faculty"
        ],
        "column_names": [
            "activity id",
            "activity name",
            "student id",
            "activity id",
            "faculty id",
            "activity id",
            "student id",
            "last name",
            "first name",
            "age",
            "sex",
            "major",
            "advisor",
            "city code",
            "faculty id",
            "last name",
            "first name",
            "rank",
            "sex",
            "phone",
            "room",
            "building"
        ],
        "template_feedback": "additionally use the information from the student table besides the faculty table .",
        "positive_example": "calculate the total numbers of student id present in student table ."
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "table_names": [
            "premises",
            "products",
            "customers",
            "mailshot campaigns",
            "customer addresses",
            "customer orders",
            "mailshot customers",
            "order items"
        ],
        "column_names": [
            "premise id",
            "premises type",
            "premise details",
            "product id",
            "product category",
            "product name",
            "customer id",
            "payment method",
            "customer name",
            "customer phone",
            "customer email",
            "customer address",
            "customer login",
            "customer password",
            "mailshot id",
            "product category",
            "mailshot name",
            "mailshot start date",
            "mailshot end date",
            "customer id",
            "premise id",
            "date address from",
            "address type code",
            "date address to",
            "order id",
            "customer id",
            "order status code",
            "shipping method code",
            "order placed datetime",
            "order delivered datetime",
            "order shipping charges",
            "mailshot id",
            "customer id",
            "outcome code",
            "mailshot customer date",
            "item id",
            "order item status code",
            "order id",
            "product id",
            "item status code",
            "item delivered datetime",
            "item order quantity"
        ],
        "template_feedback": "in step 1 , use mailshot customers table in place of customer orders table in step 2 , consider the outcome code equals order conditions in place of the order status code equals order conditions .",
        "positive_example": "you need to use mailshot customers table and make sure code of outcome equivalent with order ."
    },
    {
        "db_id": "activity_1",
        "table_names": [
            "activity",
            "participates in",
            "faculty participates in",
            "student",
            "faculty"
        ],
        "column_names": [
            "activity id",
            "activity name",
            "student id",
            "activity id",
            "faculty id",
            "activity id",
            "student id",
            "last name",
            "first name",
            "age",
            "sex",
            "major",
            "advisor",
            "city code",
            "faculty id",
            "last name",
            "first name",
            "rank",
            "sex",
            "phone",
            "room",
            "building"
        ],
        "template_feedback": "additionally make sure that rank equals instructor .",
        "positive_example": "be sure that faculty are instructors ."
    },
    {
        "db_id": "activity_1",
        "table_names": [
            "activity",
            "participates in",
            "faculty participates in",
            "student",
            "faculty"
        ],
        "column_names": [
            "activity id",
            "activity name",
            "student id",
            "activity id",
            "faculty id",
            "activity id",
            "student id",
            "last name",
            "first name",
            "age",
            "sex",
            "major",
            "advisor",
            "city code",
            "faculty id",
            "last name",
            "first name",
            "rank",
            "sex",
            "phone",
            "room",
            "building"
        ],
        "template_feedback": "additionally make sure that rank equals instructor .",
        "positive_example": "you need to check that faculty are trainer ."
    },
    {
        "db_id": "e_government",
        "table_names": [
            "addresses",
            "services",
            "forms",
            "individuals",
            "organizations",
            "parties",
            "organization contact individuals",
            "party addresses",
            "party forms",
            "party services"
        ],
        "column_names": [
            "address id",
            "line 1 number building",
            "town city",
            "zip postcode",
            "state province county",
            "country",
            "service id",
            "service type code",
            "service name",
            "service descriptio",
            "form id",
            "form type code",
            "service id",
            "form number",
            "form name",
            "form description",
            "individual id",
            "individual first name",
            "individual middle name",
            "inidividual phone",
            "individual email",
            "individual address",
            "individual last name",
            "organization id",
            "date formed",
            "organization name",
            "uk vat number",
            "party id",
            "payment method code",
            "party phone",
            "party email",
            "individual id",
            "organization id",
            "date contact from",
            "date contact to",
            "party id",
            "address id",
            "date address from",
            "address type code",
            "date address to",
            "party id",
            "form id",
            "date completion started",
            "form status code",
            "date fully completed",
            "booking id",
            "customer id",
            "service id",
            "service datetime",
            "booking made date"
        ],
        "template_feedback": "in step 2 , find for each value of party email in place of customer id .",
        "positive_example": "i want id of service instead of id of customer ."
    },
    {
        "db_id": "flight_4",
        "table_names": [
            "routes",
            "airports",
            "airlines"
        ],
        "column_names": [
            "route id",
            "destination airport id",
            "destination airport",
            "source airport id",
            "source airport",
            "airline id",
            "airline",
            "code share",
            "airport id",
            "name",
            "city",
            "country",
            "x",
            "y",
            "elevation",
            "iata",
            "icao",
            "airline id",
            "name",
            "iata",
            "icao",
            "call sign",
            "country",
            "active"
        ],
        "template_feedback": "in step 2 , make sure that the corresponding value in step 1 equals 2 .",
        "positive_example": "remove \" greater than or \" ."
    },
    {
        "db_id": "flight_4",
        "table_names": [
            "routes",
            "airports",
            "airlines"
        ],
        "column_names": [
            "route id",
            "destination airport id",
            "destination airport",
            "source airport id",
            "source airport",
            "airline id",
            "airline",
            "code share",
            "airport id",
            "name",
            "city",
            "country",
            "x",
            "y",
            "elevation",
            "iata",
            "icao",
            "airline id",
            "name",
            "iata",
            "icao",
            "call sign",
            "country",
            "active"
        ],
        "template_feedback": "in step 2 , make sure that the corresponding value in step 1 equals 2 .",
        "positive_example": "eliminate the term \" greater than or \" and \" . \" ."
    },
    {
        "db_id": "flight_4",
        "table_names": [
            "routes",
            "airports",
            "airlines"
        ],
        "column_names": [
            "route id",
            "destination airport id",
            "destination airport",
            "source airport id",
            "source airport",
            "airline id",
            "airline",
            "code share",
            "airport id",
            "name",
            "city",
            "country",
            "x",
            "y",
            "elevation",
            "iata",
            "icao",
            "airline id",
            "name",
            "iata",
            "icao",
            "call sign",
            "country",
            "active"
        ],
        "template_feedback": "in step 2 , make sure that the corresponding value in step 1 equals 2 .",
        "positive_example": "you have to erase \" greater than or \" ."
    },
    {
        "db_id": "voter_2",
        "table_names": [
            "student",
            "voting record"
        ],
        "column_names": [
            "student id",
            "last name",
            "first name",
            "age",
            "sex",
            "major",
            "advisor",
            "city code",
            "student id",
            "registration date",
            "election cycle",
            "president vote",
            "vice president vote",
            "secretary vote",
            "treasurer vote",
            "class president vote",
            "class senator vote"
        ],
        "template_feedback": "in step 1 , additionally use the information from the voting record table besides the student table . in step 2 , make sure no repetition in the results .",
        "positive_example": "ensure that student have president vote ."
    },
    {
        "db_id": "voter_2",
        "table_names": [
            "student",
            "voting record"
        ],
        "column_names": [
            "student id",
            "last name",
            "first name",
            "age",
            "sex",
            "major",
            "advisor",
            "city code",
            "student id",
            "registration date",
            "election cycle",
            "president vote",
            "vice president vote",
            "secretary vote",
            "treasurer vote",
            "class president vote",
            "class senator vote"
        ],
        "template_feedback": "in step 1 , additionally use the information from the voting record table besides the student table . in step 2 , make sure no repetition in the results .",
        "positive_example": "make sure that president vote equals to pupils ."
    },
    {
        "db_id": "loan_1",
        "table_names": [
            "bank",
            "customer",
            "loan"
        ],
        "column_names": [
            "branch id",
            "bname",
            "no of customers",
            "city",
            "state",
            "customer id",
            "customer name",
            "account type",
            "account balance",
            "number of loans",
            "credit score",
            "branch id",
            "state",
            "loan id",
            "loan type",
            "customer id",
            "branch id",
            "amount"
        ],
        "template_feedback": "in step 1 , do not use the bank table .",
        "positive_example": "change customer name with customer id in step 2 ."
    },
    {
        "db_id": "activity_1",
        "table_names": [
            "activity",
            "participates in",
            "faculty participates in",
            "student",
            "faculty"
        ],
        "column_names": [
            "activity id",
            "activity name",
            "student id",
            "activity id",
            "faculty id",
            "activity id",
            "student id",
            "last name",
            "first name",
            "age",
            "sex",
            "major",
            "advisor",
            "city code",
            "faculty id",
            "last name",
            "first name",
            "rank",
            "sex",
            "phone",
            "room",
            "building"
        ],
        "template_feedback": "consider the building equals neb and rank equals professor conditions in place of the building equals professor conditions .",
        "positive_example": "it should be neb not professor ."
    },
    {
        "db_id": "activity_1",
        "table_names": [
            "activity",
            "participates in",
            "faculty participates in",
            "student",
            "faculty"
        ],
        "column_names": [
            "activity id",
            "activity name",
            "student id",
            "activity id",
            "faculty id",
            "activity id",
            "student id",
            "last name",
            "first name",
            "age",
            "sex",
            "major",
            "advisor",
            "city code",
            "faculty id",
            "last name",
            "first name",
            "rank",
            "sex",
            "phone",
            "room",
            "building"
        ],
        "template_feedback": "consider the building equals neb and rank equals professor conditions in place of the building equals professor conditions .",
        "positive_example": "you need to use neb not professor ."
    },
    {
        "db_id": "student_1",
        "table_names": [
            "list",
            "teachers"
        ],
        "column_names": [
            "last name",
            "first name",
            "grade",
            "class room",
            "last name",
            "first name",
            "class room"
        ],
        "template_feedback": "use list table in place of teachers table . consider the list 's class room equals 111 conditions in place of the teachers 's class room equals 111 conditions . find list 's last name in place of teachers 's last name .",
        "positive_example": "exchange teachers table with list table ."
    },
    {
        "db_id": "student_1",
        "table_names": [
            "list",
            "teachers"
        ],
        "column_names": [
            "last name",
            "first name",
            "grade",
            "class room",
            "last name",
            "first name",
            "class room"
        ],
        "template_feedback": "use list table in place of teachers table . consider the list 's class room equals 111 conditions in place of the teachers 's class room equals 111 conditions . find list 's last name in place of teachers 's last name .",
        "positive_example": "interchange teachers table with list table ."
    },
    {
        "db_id": "flight_4",
        "table_names": [
            "routes",
            "airports",
            "airlines"
        ],
        "column_names": [
            "route id",
            "destination airport id",
            "destination airport",
            "source airport id",
            "source airport",
            "airline id",
            "airline",
            "code share",
            "airport id",
            "name",
            "city",
            "country",
            "x",
            "y",
            "elevation",
            "iata",
            "icao",
            "airline id",
            "name",
            "iata",
            "icao",
            "call sign",
            "country",
            "active"
        ],
        "template_feedback": "in step 2 , additionally make sure that country equals united states .",
        "positive_example": "be certain the city is in the united states ."
    },
    {
        "db_id": "flight_4",
        "table_names": [
            "routes",
            "airports",
            "airlines"
        ],
        "column_names": [
            "route id",
            "destination airport id",
            "destination airport",
            "source airport id",
            "source airport",
            "airline id",
            "airline",
            "code share",
            "airport id",
            "name",
            "city",
            "country",
            "x",
            "y",
            "elevation",
            "iata",
            "icao",
            "airline id",
            "name",
            "iata",
            "icao",
            "call sign",
            "country",
            "active"
        ],
        "template_feedback": "in step 2 , additionally make sure that country equals united states .",
        "positive_example": "make sure that united states is city ."
    },
    {
        "db_id": "tracking_orders",
        "table_names": [
            "customers",
            "invoices",
            "orders",
            "products",
            "order items",
            "shipments",
            "shipment items"
        ],
        "column_names": [
            "customer id",
            "customer name",
            "customer details",
            "invoice number",
            "invoice date",
            "invoice details",
            "order id",
            "customer id",
            "order status",
            "date order placed",
            "order details",
            "product id",
            "product name",
            "product details",
            "order item id",
            "product id",
            "order id",
            "order item status",
            "order item details",
            "shipment id",
            "order id",
            "invoice number",
            "shipment tracking number",
            "shipment date",
            "other shipment details",
            "shipment id",
            "order item id"
        ],
        "template_feedback": "order the results ascending by date order placed in place of ordering descending by customer id .",
        "positive_example": "i want date of placing order with the lowest value ."
    },
    {
        "db_id": "cre_Theme_park",
        "table_names": [
            "ref hotel star ratings",
            "locations",
            "ref attraction types",
            "visitors",
            "features",
            "hotels",
            "tourist attractions",
            "street markets",
            "shops",
            "museums",
            "royal family",
            "theme parks",
            "visits",
            "photos",
            "staff",
            "tourist attraction features"
        ],
        "column_names": [
            "star rating code",
            "star rating description",
            "location id",
            "location name",
            "address",
            "other details",
            "attraction type code",
            "attraction type description",
            "tourist id",
            "tourist details",
            "feature id",
            "feature details",
            "hotel id",
            "star rating code",
            "pets allowed yn",
            "price range",
            "other hotel details",
            "tourist attraction id",
            "attraction type code",
            "location id",
            "how to get there",
            "name",
            "description",
            "opening hours",
            "other details",
            "market id",
            "market details",
            "shop id",
            "shop details",
            "museum id",
            "museum details",
            "royal family id",
            "royal family details",
            "theme park id",
            "theme park details",
            "visit id",
            "tourist attraction id",
            "tourist id",
            "visit date",
            "visit details",
            "photo id",
            "tourist attraction id",
            "name",
            "description",
            "filename",
            "other details",
            "staff id",
            "tourist attraction id",
            "name",
            "other details",
            "tourist attraction id",
            "feature id"
        ],
        "template_feedback": "in step 1 , do not use the ref hotel star ratings table . in step 2 , find hotels 's star rating code in place of star rating description and price range .",
        "positive_example": "you need to search for the code of star rating ."
    },
    {
        "db_id": "student_1",
        "table_names": [
            "list",
            "teachers"
        ],
        "column_names": [
            "last name",
            "first name",
            "grade",
            "class room",
            "last name",
            "first name",
            "class room"
        ],
        "template_feedback": "make sure no repetition in the results . you should not order the results .",
        "positive_example": "omit the condition \" ordered ascending by classroom \" ."
    },
    {
        "db_id": "student_1",
        "table_names": [
            "list",
            "teachers"
        ],
        "column_names": [
            "last name",
            "first name",
            "grade",
            "class room",
            "last name",
            "first name",
            "class room"
        ],
        "template_feedback": "make sure no repetition in the results . you should not order the results .",
        "positive_example": "skip the condition \" ordered ascending by classroom \" ."
    },
    {
        "db_id": "loan_1",
        "table_names": [
            "bank",
            "customer",
            "loan"
        ],
        "column_names": [
            "branch id",
            "bname",
            "no of customers",
            "city",
            "state",
            "customer id",
            "customer name",
            "account type",
            "account balance",
            "number of loans",
            "credit score",
            "branch id",
            "state",
            "loan id",
            "loan type",
            "customer id",
            "branch id",
            "amount"
        ],
        "template_feedback": "find summation of no of customers in place of number of rows .",
        "positive_example": "you to do an aggregate for the number of customers in the bank table ."
    },
    {
        "db_id": "loan_1",
        "table_names": [
            "bank",
            "customer",
            "loan"
        ],
        "column_names": [
            "branch id",
            "bname",
            "no of customers",
            "city",
            "state",
            "customer id",
            "customer name",
            "account type",
            "account balance",
            "number of loans",
            "credit score",
            "branch id",
            "state",
            "loan id",
            "loan type",
            "customer id",
            "branch id",
            "amount"
        ],
        "template_feedback": "in step 2 , additionally make sure that account type equals saving .",
        "positive_example": "in step 2 in-place of customer name utilize id of branch and make sure that saving equivalent with id of branch ."
    },
    {
        "db_id": "customer_complaints",
        "table_names": [
            "staff",
            "customers",
            "products",
            "complaints"
        ],
        "column_names": [
            "staff id",
            "gender",
            "first name",
            "last name",
            "email address",
            "phone number",
            "customer id",
            "customer type code",
            "address line 1",
            "address line 2",
            "town city",
            "state",
            "email address",
            "phone number",
            "product id",
            "parent product id",
            "product category code",
            "date product first available",
            "date product discontinued",
            "product name",
            "product description",
            "product price",
            "complaint id",
            "product id",
            "customer id",
            "complaint outcome code",
            "complaint status code",
            "complaint type code",
            "date complaint raised",
            "date complaint closed",
            "staff id"
        ],
        "template_feedback": "in step 3 , use the smallest in place of largest .",
        "positive_example": "supersede customer id with product id in step 2 ."
    },
    {
        "db_id": "customer_complaints",
        "table_names": [
            "staff",
            "customers",
            "products",
            "complaints"
        ],
        "column_names": [
            "staff id",
            "gender",
            "first name",
            "last name",
            "email address",
            "phone number",
            "customer id",
            "customer type code",
            "address line 1",
            "address line 2",
            "town city",
            "state",
            "email address",
            "phone number",
            "product id",
            "parent product id",
            "product category code",
            "date product first available",
            "date product discontinued",
            "product name",
            "product description",
            "product price",
            "complaint id",
            "product id",
            "customer id",
            "complaint outcome code",
            "complaint status code",
            "complaint type code",
            "date complaint raised",
            "date complaint closed",
            "staff id"
        ],
        "template_feedback": "in step 3 , use the smallest in place of largest .",
        "positive_example": "for the second step , you just need to replace 'customer id 'with 'product id ' ."
    },
    {
        "db_id": "cre_Theme_park",
        "table_names": [
            "ref hotel star ratings",
            "locations",
            "ref attraction types",
            "visitors",
            "features",
            "hotels",
            "tourist attractions",
            "street markets",
            "shops",
            "museums",
            "royal family",
            "theme parks",
            "visits",
            "photos",
            "staff",
            "tourist attraction features"
        ],
        "column_names": [
            "star rating code",
            "star rating description",
            "location id",
            "location name",
            "address",
            "other details",
            "attraction type code",
            "attraction type description",
            "tourist id",
            "tourist details",
            "feature id",
            "feature details",
            "hotel id",
            "star rating code",
            "pets allowed yn",
            "price range",
            "other hotel details",
            "tourist attraction id",
            "attraction type code",
            "location id",
            "how to get there",
            "name",
            "description",
            "opening hours",
            "other details",
            "market id",
            "market details",
            "shop id",
            "shop details",
            "museum id",
            "museum details",
            "royal family id",
            "royal family details",
            "theme park id",
            "theme park details",
            "visit id",
            "tourist attraction id",
            "tourist id",
            "visit date",
            "visit details",
            "photo id",
            "tourist attraction id",
            "name",
            "description",
            "filename",
            "other details",
            "staff id",
            "tourist attraction id",
            "name",
            "other details",
            "tourist attraction id",
            "feature id"
        ],
        "template_feedback": "in step 2 , consider the how to get there equals walk conditions in place of the address equals walk conditions .",
        "positive_example": "you have to search that how can be reach there by walking ."
    },
    {
        "db_id": "student_1",
        "table_names": [
            "list",
            "teachers"
        ],
        "column_names": [
            "last name",
            "first name",
            "grade",
            "class room",
            "last name",
            "first name",
            "class room"
        ],
        "template_feedback": "use list table in place of teachers table . consider the list 's class room equals 111 conditions in place of the teachers 's class room equals 111 conditions . find list 's last name in place of teachers 's last name .",
        "positive_example": "use list table instead of teachers table ."
    },
    {
        "db_id": "student_1",
        "table_names": [
            "list",
            "teachers"
        ],
        "column_names": [
            "last name",
            "first name",
            "grade",
            "class room",
            "last name",
            "first name",
            "class room"
        ],
        "template_feedback": "use list table in place of teachers table . consider the list 's class room equals 111 conditions in place of the teachers 's class room equals 111 conditions . find list 's last name in place of teachers 's last name .",
        "positive_example": "i want table of teachers in place of table of list ."
    },
    {
        "db_id": "cre_Theme_park",
        "table_names": [
            "ref hotel star ratings",
            "locations",
            "ref attraction types",
            "visitors",
            "features",
            "hotels",
            "tourist attractions",
            "street markets",
            "shops",
            "museums",
            "royal family",
            "theme parks",
            "visits",
            "photos",
            "staff",
            "tourist attraction features"
        ],
        "column_names": [
            "star rating code",
            "star rating description",
            "location id",
            "location name",
            "address",
            "other details",
            "attraction type code",
            "attraction type description",
            "tourist id",
            "tourist details",
            "feature id",
            "feature details",
            "hotel id",
            "star rating code",
            "pets allowed yn",
            "price range",
            "other hotel details",
            "tourist attraction id",
            "attraction type code",
            "location id",
            "how to get there",
            "name",
            "description",
            "opening hours",
            "other details",
            "market id",
            "market details",
            "shop id",
            "shop details",
            "museum id",
            "museum details",
            "royal family id",
            "royal family details",
            "theme park id",
            "theme park details",
            "visit id",
            "tourist attraction id",
            "tourist id",
            "visit date",
            "visit details",
            "photo id",
            "tourist attraction id",
            "name",
            "description",
            "filename",
            "other details",
            "staff id",
            "tourist attraction id",
            "name",
            "other details",
            "tourist attraction id",
            "feature id"
        ],
        "template_feedback": "in step 1 , additionally use the information from the tourist attractions table besides the ref attraction types table .",
        "positive_example": "in step 1 find number of rows of each value of attraction type code in tourist attractions table ."
    },
    {
        "db_id": "cre_Theme_park",
        "table_names": [
            "ref hotel star ratings",
            "locations",
            "ref attraction types",
            "visitors",
            "features",
            "hotels",
            "tourist attractions",
            "street markets",
            "shops",
            "museums",
            "royal family",
            "theme parks",
            "visits",
            "photos",
            "staff",
            "tourist attraction features"
        ],
        "column_names": [
            "star rating code",
            "star rating description",
            "location id",
            "location name",
            "address",
            "other details",
            "attraction type code",
            "attraction type description",
            "tourist id",
            "tourist details",
            "feature id",
            "feature details",
            "hotel id",
            "star rating code",
            "pets allowed yn",
            "price range",
            "other hotel details",
            "tourist attraction id",
            "attraction type code",
            "location id",
            "how to get there",
            "name",
            "description",
            "opening hours",
            "other details",
            "market id",
            "market details",
            "shop id",
            "shop details",
            "museum id",
            "museum details",
            "royal family id",
            "royal family details",
            "theme park id",
            "theme park details",
            "visit id",
            "tourist attraction id",
            "tourist id",
            "visit date",
            "visit details",
            "photo id",
            "tourist attraction id",
            "name",
            "description",
            "filename",
            "other details",
            "staff id",
            "tourist attraction id",
            "name",
            "other details",
            "tourist attraction id",
            "feature id"
        ],
        "template_feedback": "in step 1 , additionally use the information from the tourist attractions table besides the ref attraction types table .",
        "positive_example": "in tourist attractions table , discover the number of rows of each value of attraction type code in step 1 ."
    },
    {
        "db_id": "activity_1",
        "table_names": [
            "activity",
            "participates in",
            "faculty participates in",
            "student",
            "faculty"
        ],
        "column_names": [
            "activity id",
            "activity name",
            "student id",
            "activity id",
            "faculty id",
            "activity id",
            "student id",
            "last name",
            "first name",
            "age",
            "sex",
            "major",
            "advisor",
            "city code",
            "faculty id",
            "last name",
            "first name",
            "rank",
            "sex",
            "phone",
            "room",
            "building"
        ],
        "template_feedback": "use faculty participates in table in place of activity table . find number of different faculty id in place of number of rows .",
        "positive_example": "you only need to use faculty 's participation in table ."
    },
    {
        "db_id": "e_government",
        "table_names": [
            "addresses",
            "services",
            "forms",
            "individuals",
            "organizations",
            "parties",
            "organization contact individuals",
            "party addresses",
            "party forms",
            "party services"
        ],
        "column_names": [
            "address id",
            "line 1 number building",
            "town city",
            "zip postcode",
            "state province county",
            "country",
            "service id",
            "service type code",
            "service name",
            "service descriptio",
            "form id",
            "form type code",
            "service id",
            "form number",
            "form name",
            "form description",
            "individual id",
            "individual first name",
            "individual middle name",
            "inidividual phone",
            "individual email",
            "individual address",
            "individual last name",
            "organization id",
            "date formed",
            "organization name",
            "uk vat number",
            "party id",
            "payment method code",
            "party phone",
            "party email",
            "individual id",
            "organization id",
            "date contact from",
            "date contact to",
            "party id",
            "address id",
            "date address from",
            "address type code",
            "date address to",
            "party id",
            "form id",
            "date completion started",
            "form status code",
            "date fully completed",
            "booking id",
            "customer id",
            "service id",
            "service datetime",
            "booking made date"
        ],
        "template_feedback": "additionally use the information from the organization contact individuals table besides the individuals table . make sure no repetition in the results .",
        "positive_example": "remember that the individual id is exist in the list of organization contact of individual table ."
    },
    {
        "db_id": "tracking_orders",
        "table_names": [
            "customers",
            "invoices",
            "orders",
            "products",
            "order items",
            "shipments",
            "shipment items"
        ],
        "column_names": [
            "customer id",
            "customer name",
            "customer details",
            "invoice number",
            "invoice date",
            "invoice details",
            "order id",
            "customer id",
            "order status",
            "date order placed",
            "order details",
            "product id",
            "product name",
            "product details",
            "order item id",
            "product id",
            "order id",
            "order item status",
            "order item details",
            "shipment id",
            "order id",
            "invoice number",
            "shipment tracking number",
            "shipment date",
            "other shipment details",
            "shipment id",
            "order item id"
        ],
        "template_feedback": "order the results ascending by date order placed in place of ordering descending by customer id .",
        "positive_example": "the smallest value of date in the placed order to be change to the largest value of consumers id by your side ."
    },
    {
        "db_id": "voter_2",
        "table_names": [
            "student",
            "voting record"
        ],
        "column_names": [
            "student id",
            "last name",
            "first name",
            "age",
            "sex",
            "major",
            "advisor",
            "city code",
            "student id",
            "registration date",
            "election cycle",
            "president vote",
            "vice president vote",
            "secretary vote",
            "treasurer vote",
            "class president vote",
            "class senator vote"
        ],
        "template_feedback": "use voting record table in place of student table .",
        "positive_example": "voting record table should be used instead of student table ."
    },
    {
        "db_id": "music_1",
        "table_names": [
            "genre",
            "artist",
            "files",
            "song"
        ],
        "column_names": [
            "genre name",
            "rating",
            "most popular in",
            "artist name",
            "country",
            "gender",
            "preferred genre",
            "song id",
            "artist name",
            "file size",
            "duration",
            "formats",
            "song name",
            "artist name",
            "country",
            "song id",
            "genre is",
            "rating",
            "languages",
            "releasedate",
            "resolution"
        ],
        "template_feedback": "in step 1 , additionally use the information from the artist table besides the song table .",
        "positive_example": "ensuring that it corresponds of each value of artist name in song table in step 2 ."
    },
    {
        "db_id": "music_1",
        "table_names": [
            "genre",
            "artist",
            "files",
            "song"
        ],
        "column_names": [
            "genre name",
            "rating",
            "most popular in",
            "artist name",
            "country",
            "gender",
            "preferred genre",
            "song id",
            "artist name",
            "file size",
            "duration",
            "formats",
            "song name",
            "artist name",
            "country",
            "song id",
            "genre is",
            "rating",
            "languages",
            "releasedate",
            "resolution"
        ],
        "template_feedback": "in step 1 , additionally use the information from the artist table besides the song table .",
        "positive_example": "for the second step , each value of artist name present in song table is should be conform by you ."
    },
    {
        "db_id": "e_learning",
        "table_names": [
            "course authors and tutors",
            "students",
            "subjects",
            "courses",
            "student course enrolment",
            "student tests taken"
        ],
        "column_names": [
            "author id",
            "author tutor atb",
            "login name",
            "password",
            "personal name",
            "middle name",
            "family name",
            "gender mf",
            "address line 1",
            "student id",
            "date of registration",
            "date of latest logon",
            "login name",
            "password",
            "personal name",
            "middle name",
            "family name",
            "subject id",
            "subject name",
            "course id",
            "author id",
            "subject id",
            "course name",
            "course description",
            "registration id",
            "student id",
            "course id",
            "date of enrolment",
            "date of completion",
            "registration id",
            "date test taken",
            "test result"
        ],
        "template_feedback": "in step 2 , additionally find date of completion .",
        "positive_example": "in step 2 , you need to use completion date ."
    },
    {
        "db_id": "student_1",
        "table_names": [
            "list",
            "teachers"
        ],
        "column_names": [
            "last name",
            "first name",
            "grade",
            "class room",
            "last name",
            "first name",
            "class room"
        ],
        "template_feedback": "in step 2 , consider the list 's last name equals ray conditions in place of the teachers 's first name equals ray conditions .",
        "positive_example": "name madlock ray must be from list table ."
    },
    {
        "db_id": "student_1",
        "table_names": [
            "list",
            "teachers"
        ],
        "column_names": [
            "last name",
            "first name",
            "grade",
            "class room",
            "last name",
            "first name",
            "class room"
        ],
        "template_feedback": "in step 2 , consider the list 's last name equals ray conditions in place of the teachers 's first name equals ray conditions .",
        "positive_example": "you have to take name madlock ray from list table only ."
    },
    {
        "db_id": "activity_1",
        "table_names": [
            "activity",
            "participates in",
            "faculty participates in",
            "student",
            "faculty"
        ],
        "column_names": [
            "activity id",
            "activity name",
            "student id",
            "activity id",
            "faculty id",
            "activity id",
            "student id",
            "last name",
            "first name",
            "age",
            "sex",
            "major",
            "advisor",
            "city code",
            "faculty id",
            "last name",
            "first name",
            "rank",
            "sex",
            "phone",
            "room",
            "building"
        ],
        "template_feedback": "in step 2 , consider the last name equals giuliano and first name equals mark conditions in place of the last name equals mark conditions .",
        "positive_example": "need to confirm name should be mark giuliano in step 2 ."
    },
    {
        "db_id": "voter_2",
        "table_names": [
            "student",
            "voting record"
        ],
        "column_names": [
            "student id",
            "last name",
            "first name",
            "age",
            "sex",
            "major",
            "advisor",
            "city code",
            "student id",
            "registration date",
            "election cycle",
            "president vote",
            "vice president vote",
            "secretary vote",
            "treasurer vote",
            "class president vote",
            "class senator vote"
        ],
        "template_feedback": "in step 1 , do not use the student table . in step 2 , remove the advisor equals 1121 and first name equals linda conditions .",
        "positive_example": "there is no need of whose condition . also should find distinct vice president vote ."
    },
    {
        "db_id": "voter_2",
        "table_names": [
            "student",
            "voting record"
        ],
        "column_names": [
            "student id",
            "last name",
            "first name",
            "age",
            "sex",
            "major",
            "advisor",
            "city code",
            "student id",
            "registration date",
            "election cycle",
            "president vote",
            "vice president vote",
            "secretary vote",
            "treasurer vote",
            "class president vote",
            "class senator vote"
        ],
        "template_feedback": "in step 1 , do not use the student table . in step 2 , remove the advisor equals 1121 and first name equals linda conditions .",
        "positive_example": "remove the \" whose \" condition . make sure to search different vote of vice president ."
    },
    {
        "db_id": "tracking_orders",
        "table_names": [
            "customers",
            "invoices",
            "orders",
            "products",
            "order items",
            "shipments",
            "shipment items"
        ],
        "column_names": [
            "customer id",
            "customer name",
            "customer details",
            "invoice number",
            "invoice date",
            "invoice details",
            "order id",
            "customer id",
            "order status",
            "date order placed",
            "order details",
            "product id",
            "product name",
            "product details",
            "order item id",
            "product id",
            "order id",
            "order item status",
            "order item details",
            "shipment id",
            "order id",
            "invoice number",
            "shipment tracking number",
            "shipment date",
            "other shipment details",
            "shipment id",
            "order item id"
        ],
        "template_feedback": "in step 3 , make sure that the corresponding value in step 2 less than or equals 2 .",
        "positive_example": "the word \" greater \" must be replaced by \" less \" ."
    },
    {
        "db_id": "tracking_orders",
        "table_names": [
            "customers",
            "invoices",
            "orders",
            "products",
            "order items",
            "shipments",
            "shipment items"
        ],
        "column_names": [
            "customer id",
            "customer name",
            "customer details",
            "invoice number",
            "invoice date",
            "invoice details",
            "order id",
            "customer id",
            "order status",
            "date order placed",
            "order details",
            "product id",
            "product name",
            "product details",
            "order item id",
            "product id",
            "order id",
            "order item status",
            "order item details",
            "shipment id",
            "order id",
            "invoice number",
            "shipment tracking number",
            "shipment date",
            "other shipment details",
            "shipment id",
            "order item id"
        ],
        "template_feedback": "in step 3 , make sure that the corresponding value in step 2 less than or equals 2 .",
        "positive_example": "you have to use the word \" less \" instead of \" greater \" ."
    },
    {
        "db_id": "loan_1",
        "table_names": [
            "bank",
            "customer",
            "loan"
        ],
        "column_names": [
            "branch id",
            "bname",
            "no of customers",
            "city",
            "state",
            "customer id",
            "customer name",
            "account type",
            "account balance",
            "number of loans",
            "credit score",
            "branch id",
            "state",
            "loan id",
            "loan type",
            "customer id",
            "branch id",
            "amount"
        ],
        "template_feedback": "find summation of no of customers in place of number of rows .",
        "positive_example": "calculate the total number of consumers ."
    },
    {
        "db_id": "music_1",
        "table_names": [
            "genre",
            "artist",
            "files",
            "song"
        ],
        "column_names": [
            "genre name",
            "rating",
            "most popular in",
            "artist name",
            "country",
            "gender",
            "preferred genre",
            "song id",
            "artist name",
            "file size",
            "duration",
            "formats",
            "song name",
            "artist name",
            "country",
            "song id",
            "genre is",
            "rating",
            "languages",
            "releasedate",
            "resolution"
        ],
        "template_feedback": "in step 1 , additionally make sure that languages equals english .",
        "positive_example": "also ensure that song song name equals to english in step 2 ."
    },
    {
        "db_id": "cre_Theme_park",
        "table_names": [
            "ref hotel star ratings",
            "locations",
            "ref attraction types",
            "visitors",
            "features",
            "hotels",
            "tourist attractions",
            "street markets",
            "shops",
            "museums",
            "royal family",
            "theme parks",
            "visits",
            "photos",
            "staff",
            "tourist attraction features"
        ],
        "column_names": [
            "star rating code",
            "star rating description",
            "location id",
            "location name",
            "address",
            "other details",
            "attraction type code",
            "attraction type description",
            "tourist id",
            "tourist details",
            "feature id",
            "feature details",
            "hotel id",
            "star rating code",
            "pets allowed yn",
            "price range",
            "other hotel details",
            "tourist attraction id",
            "attraction type code",
            "location id",
            "how to get there",
            "name",
            "description",
            "opening hours",
            "other details",
            "market id",
            "market details",
            "shop id",
            "shop details",
            "museum id",
            "museum details",
            "royal family id",
            "royal family details",
            "theme park id",
            "theme park details",
            "visit id",
            "tourist attraction id",
            "tourist id",
            "visit date",
            "visit details",
            "photo id",
            "tourist attraction id",
            "name",
            "description",
            "filename",
            "other details",
            "staff id",
            "tourist attraction id",
            "name",
            "other details",
            "tourist attraction id",
            "feature id"
        ],
        "template_feedback": "additionally use the information from the tourist attractions table besides the shops table . additionally make sure that how to get there equals walk .",
        "positive_example": "you need to confirm that the value for how to get to tourist attraction should only be 'walk ' ."
    },
    {
        "db_id": "cre_Theme_park",
        "table_names": [
            "ref hotel star ratings",
            "locations",
            "ref attraction types",
            "visitors",
            "features",
            "hotels",
            "tourist attractions",
            "street markets",
            "shops",
            "museums",
            "royal family",
            "theme parks",
            "visits",
            "photos",
            "staff",
            "tourist attraction features"
        ],
        "column_names": [
            "star rating code",
            "star rating description",
            "location id",
            "location name",
            "address",
            "other details",
            "attraction type code",
            "attraction type description",
            "tourist id",
            "tourist details",
            "feature id",
            "feature details",
            "hotel id",
            "star rating code",
            "pets allowed yn",
            "price range",
            "other hotel details",
            "tourist attraction id",
            "attraction type code",
            "location id",
            "how to get there",
            "name",
            "description",
            "opening hours",
            "other details",
            "market id",
            "market details",
            "shop id",
            "shop details",
            "museum id",
            "museum details",
            "royal family id",
            "royal family details",
            "theme park id",
            "theme park details",
            "visit id",
            "tourist attraction id",
            "tourist id",
            "visit date",
            "visit details",
            "photo id",
            "tourist attraction id",
            "name",
            "description",
            "filename",
            "other details",
            "staff id",
            "tourist attraction id",
            "name",
            "other details",
            "tourist attraction id",
            "feature id"
        ],
        "template_feedback": "additionally use the information from the tourist attractions table besides the shops table . additionally make sure that how to get there equals walk .",
        "positive_example": "from tourist attraction 's table , derive that how can be reached to specified destination by walking ."
    },
    {
        "db_id": "flight_4",
        "table_names": [
            "routes",
            "airports",
            "airlines"
        ],
        "column_names": [
            "route id",
            "destination airport id",
            "destination airport",
            "source airport id",
            "source airport",
            "airline id",
            "airline",
            "code share",
            "airport id",
            "name",
            "city",
            "country",
            "x",
            "y",
            "elevation",
            "iata",
            "icao",
            "airline id",
            "name",
            "iata",
            "icao",
            "call sign",
            "country",
            "active"
        ],
        "template_feedback": "in step 1 , additionally use the information from the routes table besides the airports table .",
        "positive_example": "you should search for the highest number of flight path in which origin airport is in china ."
    },
    {
        "db_id": "voter_2",
        "table_names": [
            "student",
            "voting record"
        ],
        "column_names": [
            "student id",
            "last name",
            "first name",
            "age",
            "sex",
            "major",
            "advisor",
            "city code",
            "student id",
            "registration date",
            "election cycle",
            "president vote",
            "vice president vote",
            "secretary vote",
            "treasurer vote",
            "class president vote",
            "class senator vote"
        ],
        "template_feedback": "use voting record table in place of student table .",
        "positive_example": "there must be voting record table not student table ."
    },
    {
        "db_id": "voter_2",
        "table_names": [
            "student",
            "voting record"
        ],
        "column_names": [
            "student id",
            "last name",
            "first name",
            "age",
            "sex",
            "major",
            "advisor",
            "city code",
            "student id",
            "registration date",
            "election cycle",
            "president vote",
            "vice president vote",
            "secretary vote",
            "treasurer vote",
            "class president vote",
            "class senator vote"
        ],
        "template_feedback": "use voting record table in place of student table .",
        "positive_example": "instead of student table , you should look for voting record table ."
    },
    {
        "db_id": "document_management",
        "table_names": [
            "roles",
            "users",
            "document structures",
            "functional areas",
            "images",
            "documents",
            "document functional areas",
            "document sections",
            "document sections images"
        ],
        "column_names": [
            "role code",
            "role description",
            "user id",
            "role code",
            "user name",
            "user login",
            "password",
            "document structure code",
            "parent document structure code",
            "document structure description",
            "functional area code",
            "parent functional area code",
            "functional area description",
            "image id",
            "image alt text",
            "image name",
            "image url",
            "document code",
            "document structure code",
            "document type code",
            "access count",
            "document name",
            "document code",
            "functional area code",
            "section id",
            "document code",
            "section sequence",
            "section code",
            "section title",
            "section id",
            "image id"
        ],
        "template_feedback": "in step 1 , do not find for each value of document name . in step 2 , additionally find access count . order the results by access count in place of number of rows .",
        "positive_example": "in step 1 , i want excessive count in place of name of document ."
    },
    {
        "db_id": "e_learning",
        "table_names": [
            "course authors and tutors",
            "students",
            "subjects",
            "courses",
            "student course enrolment",
            "student tests taken"
        ],
        "column_names": [
            "author id",
            "author tutor atb",
            "login name",
            "password",
            "personal name",
            "middle name",
            "family name",
            "gender mf",
            "address line 1",
            "student id",
            "date of registration",
            "date of latest logon",
            "login name",
            "password",
            "personal name",
            "middle name",
            "family name",
            "subject id",
            "subject name",
            "course id",
            "author id",
            "subject id",
            "course name",
            "course description",
            "registration id",
            "student id",
            "course id",
            "date of enrolment",
            "date of completion",
            "registration id",
            "date test taken",
            "test result"
        ],
        "template_feedback": "additionally use the information from the student course enrolment table besides the courses table .",
        "positive_example": "you need to ascertain that the rows relate to each value of course id and it should be from student 's course enrollment ."
    },
    {
        "db_id": "flight_4",
        "table_names": [
            "routes",
            "airports",
            "airlines"
        ],
        "column_names": [
            "route id",
            "destination airport id",
            "destination airport",
            "source airport id",
            "source airport",
            "airline id",
            "airline",
            "code share",
            "airport id",
            "name",
            "city",
            "country",
            "x",
            "y",
            "elevation",
            "iata",
            "icao",
            "airline id",
            "name",
            "iata",
            "icao",
            "call sign",
            "country",
            "active"
        ],
        "template_feedback": "in step 2 , make sure that the corresponding value in step 1 equals 2 .",
        "positive_example": "remove \" greater than or \" ."
    },
    {
        "db_id": "flight_4",
        "table_names": [
            "routes",
            "airports",
            "airlines"
        ],
        "column_names": [
            "route id",
            "destination airport id",
            "destination airport",
            "source airport id",
            "source airport",
            "airline id",
            "airline",
            "code share",
            "airport id",
            "name",
            "city",
            "country",
            "x",
            "y",
            "elevation",
            "iata",
            "icao",
            "airline id",
            "name",
            "iata",
            "icao",
            "call sign",
            "country",
            "active"
        ],
        "template_feedback": "in step 2 , make sure that the corresponding value in step 1 equals 2 .",
        "positive_example": "eliminate the term \" greater than or \" and \" . \" ."
    },
    {
        "db_id": "flight_4",
        "table_names": [
            "routes",
            "airports",
            "airlines"
        ],
        "column_names": [
            "route id",
            "destination airport id",
            "destination airport",
            "source airport id",
            "source airport",
            "airline id",
            "airline",
            "code share",
            "airport id",
            "name",
            "city",
            "country",
            "x",
            "y",
            "elevation",
            "iata",
            "icao",
            "airline id",
            "name",
            "iata",
            "icao",
            "call sign",
            "country",
            "active"
        ],
        "template_feedback": "in step 2 , make sure that the corresponding value in step 1 equals 2 .",
        "positive_example": "you have to erase \" greater than or \" ."
    },
    {
        "db_id": "cre_Theme_park",
        "table_names": [
            "ref hotel star ratings",
            "locations",
            "ref attraction types",
            "visitors",
            "features",
            "hotels",
            "tourist attractions",
            "street markets",
            "shops",
            "museums",
            "royal family",
            "theme parks",
            "visits",
            "photos",
            "staff",
            "tourist attraction features"
        ],
        "column_names": [
            "star rating code",
            "star rating description",
            "location id",
            "location name",
            "address",
            "other details",
            "attraction type code",
            "attraction type description",
            "tourist id",
            "tourist details",
            "feature id",
            "feature details",
            "hotel id",
            "star rating code",
            "pets allowed yn",
            "price range",
            "other hotel details",
            "tourist attraction id",
            "attraction type code",
            "location id",
            "how to get there",
            "name",
            "description",
            "opening hours",
            "other details",
            "market id",
            "market details",
            "shop id",
            "shop details",
            "museum id",
            "museum details",
            "royal family id",
            "royal family details",
            "theme park id",
            "theme park details",
            "visit id",
            "tourist attraction id",
            "tourist id",
            "visit date",
            "visit details",
            "photo id",
            "tourist attraction id",
            "name",
            "description",
            "filename",
            "other details",
            "staff id",
            "tourist attraction id",
            "name",
            "other details",
            "tourist attraction id",
            "feature id"
        ],
        "template_feedback": "in step 1 , do not use the ref hotel star ratings table . in step 2 , find hotels 's star rating code in place of star rating description .",
        "positive_example": "just a single time look for code of star rating and not the description of star rating ."
    },
    {
        "db_id": "activity_1",
        "table_names": [
            "activity",
            "participates in",
            "faculty participates in",
            "student",
            "faculty"
        ],
        "column_names": [
            "activity id",
            "activity name",
            "student id",
            "activity id",
            "faculty id",
            "activity id",
            "student id",
            "last name",
            "first name",
            "age",
            "sex",
            "major",
            "advisor",
            "city code",
            "faculty id",
            "last name",
            "first name",
            "rank",
            "sex",
            "phone",
            "room",
            "building"
        ],
        "template_feedback": "consider the rank equals asstprof conditions in place of the rank equals instructor and sex equals asstprof conditions . find for each value of sex . additionally find sex .",
        "positive_example": "find out the number of male and female assistant professor ."
    },
    {
        "db_id": "e_government",
        "table_names": [
            "addresses",
            "services",
            "forms",
            "individuals",
            "organizations",
            "parties",
            "organization contact individuals",
            "party addresses",
            "party forms",
            "party services"
        ],
        "column_names": [
            "address id",
            "line 1 number building",
            "town city",
            "zip postcode",
            "state province county",
            "country",
            "service id",
            "service type code",
            "service name",
            "service descriptio",
            "form id",
            "form type code",
            "service id",
            "form number",
            "form name",
            "form description",
            "individual id",
            "individual first name",
            "individual middle name",
            "inidividual phone",
            "individual email",
            "individual address",
            "individual last name",
            "organization id",
            "date formed",
            "organization name",
            "uk vat number",
            "party id",
            "payment method code",
            "party phone",
            "party email",
            "individual id",
            "organization id",
            "date contact from",
            "date contact to",
            "party id",
            "address id",
            "date address from",
            "address type code",
            "date address to",
            "party id",
            "form id",
            "date completion started",
            "form status code",
            "date fully completed",
            "booking id",
            "customer id",
            "service id",
            "service datetime",
            "booking made date"
        ],
        "template_feedback": "in step 2 , additionally make sure that uk vat number is equals maximum uk vat number organizations . order the results ascending by date contact to in place of ordering descending by uk vat number .",
        "positive_example": "in step 2 also ensure that organization contact individuals date contact from is smallest for that specific individuals ."
    },
    {
        "db_id": "e_government",
        "table_names": [
            "addresses",
            "services",
            "forms",
            "individuals",
            "organizations",
            "parties",
            "organization contact individuals",
            "party addresses",
            "party forms",
            "party services"
        ],
        "column_names": [
            "address id",
            "line 1 number building",
            "town city",
            "zip postcode",
            "state province county",
            "country",
            "service id",
            "service type code",
            "service name",
            "service descriptio",
            "form id",
            "form type code",
            "service id",
            "form number",
            "form name",
            "form description",
            "individual id",
            "individual first name",
            "individual middle name",
            "inidividual phone",
            "individual email",
            "individual address",
            "individual last name",
            "organization id",
            "date formed",
            "organization name",
            "uk vat number",
            "party id",
            "payment method code",
            "party phone",
            "party email",
            "individual id",
            "organization id",
            "date contact from",
            "date contact to",
            "party id",
            "address id",
            "date address from",
            "address type code",
            "date address to",
            "party id",
            "form id",
            "date completion started",
            "form status code",
            "date fully completed",
            "booking id",
            "customer id",
            "service id",
            "service datetime",
            "booking made date"
        ],
        "template_feedback": "in step 2 , additionally make sure that uk vat number is equals maximum uk vat number organizations . order the results ascending by date contact to in place of ordering descending by uk vat number .",
        "positive_example": "verify that individuals ' from date of contact through organization should be lowest than any specific individuals ."
    },
    {
        "db_id": "voter_2",
        "table_names": [
            "student",
            "voting record"
        ],
        "column_names": [
            "student id",
            "last name",
            "first name",
            "age",
            "sex",
            "major",
            "advisor",
            "city code",
            "student id",
            "registration date",
            "election cycle",
            "president vote",
            "vice president vote",
            "secretary vote",
            "treasurer vote",
            "class president vote",
            "class senator vote"
        ],
        "template_feedback": "in step 2 , remove the president vote equals 1004 conditions .",
        "positive_example": "i want the student id that are present in voting record whose class senator vote is 1004 ."
    },
    {
        "db_id": "e_government",
        "table_names": [
            "addresses",
            "services",
            "forms",
            "individuals",
            "organizations",
            "parties",
            "organization contact individuals",
            "party addresses",
            "party forms",
            "party services"
        ],
        "column_names": [
            "address id",
            "line 1 number building",
            "town city",
            "zip postcode",
            "state province county",
            "country",
            "service id",
            "service type code",
            "service name",
            "service descriptio",
            "form id",
            "form type code",
            "service id",
            "form number",
            "form name",
            "form description",
            "individual id",
            "individual first name",
            "individual middle name",
            "inidividual phone",
            "individual email",
            "individual address",
            "individual last name",
            "organization id",
            "date formed",
            "organization name",
            "uk vat number",
            "party id",
            "payment method code",
            "party phone",
            "party email",
            "individual id",
            "organization id",
            "date contact from",
            "date contact to",
            "party id",
            "address id",
            "date address from",
            "address type code",
            "date address to",
            "party id",
            "form id",
            "date completion started",
            "form status code",
            "date fully completed",
            "booking id",
            "customer id",
            "service id",
            "service datetime",
            "booking made date"
        ],
        "template_feedback": "additionally use the information from the organization contact individuals table besides the individuals table .",
        "positive_example": "you need to ascertain that individual id should be there under organisation 's contact table ."
    },
    {
        "db_id": "e_learning",
        "table_names": [
            "course authors and tutors",
            "students",
            "subjects",
            "courses",
            "student course enrolment",
            "student tests taken"
        ],
        "column_names": [
            "author id",
            "author tutor atb",
            "login name",
            "password",
            "personal name",
            "middle name",
            "family name",
            "gender mf",
            "address line 1",
            "student id",
            "date of registration",
            "date of latest logon",
            "login name",
            "password",
            "personal name",
            "middle name",
            "family name",
            "subject id",
            "subject name",
            "course id",
            "author id",
            "subject id",
            "course name",
            "course description",
            "registration id",
            "student id",
            "course id",
            "date of enrolment",
            "date of completion",
            "registration id",
            "date test taken",
            "test result"
        ],
        "template_feedback": "additionally use the information from the student course enrolment table besides the courses table . find for each value of course name whose number of rows equals 1 .",
        "positive_example": "you need to make sure that course id is only used once in the course enrollment table ."
    },
    {
        "db_id": "music_1",
        "table_names": [
            "genre",
            "artist",
            "files",
            "song"
        ],
        "column_names": [
            "genre name",
            "rating",
            "most popular in",
            "artist name",
            "country",
            "gender",
            "preferred genre",
            "song id",
            "artist name",
            "file size",
            "duration",
            "formats",
            "song name",
            "artist name",
            "country",
            "song id",
            "genre is",
            "rating",
            "languages",
            "releasedate",
            "resolution"
        ],
        "template_feedback": "in step 2 , consider the song name like % love % conditions in place of the song name equals love conditions .",
        "positive_example": "there should be a name of song contains love , not equivalent love ."
    },
    {
        "db_id": "cre_Theme_park",
        "table_names": [
            "ref hotel star ratings",
            "locations",
            "ref attraction types",
            "visitors",
            "features",
            "hotels",
            "tourist attractions",
            "street markets",
            "shops",
            "museums",
            "royal family",
            "theme parks",
            "visits",
            "photos",
            "staff",
            "tourist attraction features"
        ],
        "column_names": [
            "star rating code",
            "star rating description",
            "location id",
            "location name",
            "address",
            "other details",
            "attraction type code",
            "attraction type description",
            "tourist id",
            "tourist details",
            "feature id",
            "feature details",
            "hotel id",
            "star rating code",
            "pets allowed yn",
            "price range",
            "other hotel details",
            "tourist attraction id",
            "attraction type code",
            "location id",
            "how to get there",
            "name",
            "description",
            "opening hours",
            "other details",
            "market id",
            "market details",
            "shop id",
            "shop details",
            "museum id",
            "museum details",
            "royal family id",
            "royal family details",
            "theme park id",
            "theme park details",
            "visit id",
            "tourist attraction id",
            "tourist id",
            "visit date",
            "visit details",
            "photo id",
            "tourist attraction id",
            "name",
            "description",
            "filename",
            "other details",
            "staff id",
            "tourist attraction id",
            "name",
            "other details",
            "tourist attraction id",
            "feature id"
        ],
        "template_feedback": "in step 1 , find visits 's tourist id in place of visits 's tourist attraction id . in step 2 , use visitors table in place of tourist attractions table . make sure the tourist id is not one of the results of step 1 the tourist attraction id is not one of the results of step 1 .",
        "positive_example": "in step 1 , you need to use id of travellers , travellers where in id of travellers should not exist ."
    },
    {
        "db_id": "station_weather",
        "table_names": [
            "train",
            "station",
            "route",
            "weekly weather"
        ],
        "column_names": [
            "id",
            "train number",
            "name",
            "origin",
            "destination",
            "time",
            "interval",
            "id",
            "network name",
            "services",
            "local authority",
            "train id",
            "station id",
            "station id",
            "day of week",
            "high temperature",
            "low temperature",
            "precipitation",
            "wind speed mph"
        ],
        "template_feedback": "consider the destination equals guruvayur and origin equals chennai conditions in place of the destination equals chennai conditions .",
        "positive_example": "make sure that start point must be chennai and point of disembarkation is guruvayur ."
    },
    {
        "db_id": "student_1",
        "table_names": [
            "list",
            "teachers"
        ],
        "column_names": [
            "last name",
            "first name",
            "grade",
            "class room",
            "last name",
            "first name",
            "class room"
        ],
        "template_feedback": "in step 2 , additionally make sure that list 's last name equals bromley .",
        "positive_example": "look for the teacher who teaches whose full name is evelina bromley ."
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "table_names": [
            "premises",
            "products",
            "customers",
            "mailshot campaigns",
            "customer addresses",
            "customer orders",
            "mailshot customers",
            "order items"
        ],
        "column_names": [
            "premise id",
            "premises type",
            "premise details",
            "product id",
            "product category",
            "product name",
            "customer id",
            "payment method",
            "customer name",
            "customer phone",
            "customer email",
            "customer address",
            "customer login",
            "customer password",
            "mailshot id",
            "product category",
            "mailshot name",
            "mailshot start date",
            "mailshot end date",
            "customer id",
            "premise id",
            "date address from",
            "address type code",
            "date address to",
            "order id",
            "customer id",
            "order status code",
            "shipping method code",
            "order placed datetime",
            "order delivered datetime",
            "order shipping charges",
            "mailshot id",
            "customer id",
            "outcome code",
            "mailshot customer date",
            "item id",
            "order item status code",
            "order id",
            "product id",
            "item status code",
            "item delivered datetime",
            "item order quantity"
        ],
        "template_feedback": "use mailshot campaigns table in place of products table . find for each value of mailshot campaigns 's product category in place of products 's product category . find mailshot campaigns 's product category in place of products 's product category .",
        "positive_example": "catch different value of product category with each value of corresponding rows of mailshot id ."
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "table_names": [
            "premises",
            "products",
            "customers",
            "mailshot campaigns",
            "customer addresses",
            "customer orders",
            "mailshot customers",
            "order items"
        ],
        "column_names": [
            "premise id",
            "premises type",
            "premise details",
            "product id",
            "product category",
            "product name",
            "customer id",
            "payment method",
            "customer name",
            "customer phone",
            "customer email",
            "customer address",
            "customer login",
            "customer password",
            "mailshot id",
            "product category",
            "mailshot name",
            "mailshot start date",
            "mailshot end date",
            "customer id",
            "premise id",
            "date address from",
            "address type code",
            "date address to",
            "order id",
            "customer id",
            "order status code",
            "shipping method code",
            "order placed datetime",
            "order delivered datetime",
            "order shipping charges",
            "mailshot id",
            "customer id",
            "outcome code",
            "mailshot customer date",
            "item id",
            "order item status code",
            "order id",
            "product id",
            "item status code",
            "item delivered datetime",
            "item order quantity"
        ],
        "template_feedback": "use mailshot campaigns table in place of products table . find for each value of mailshot campaigns 's product category in place of products 's product category . find mailshot campaigns 's product category in place of products 's product category .",
        "positive_example": "grab various product category value along with all the corresponding values of rows of mailshot id ."
    },
    {
        "db_id": "flight_4",
        "table_names": [
            "routes",
            "airports",
            "airlines"
        ],
        "column_names": [
            "route id",
            "destination airport id",
            "destination airport",
            "source airport id",
            "source airport",
            "airline id",
            "airline",
            "code share",
            "airport id",
            "name",
            "city",
            "country",
            "x",
            "y",
            "elevation",
            "iata",
            "icao",
            "airline id",
            "name",
            "iata",
            "icao",
            "call sign",
            "country",
            "active"
        ],
        "template_feedback": "in step 2 , find for each value of name in place of destination airport id .",
        "positive_example": "in step 2 it should find country in results of step 1 along with the number of corresponding rows to each value of source airport ."
    },
    {
        "db_id": "flight_4",
        "table_names": [
            "routes",
            "airports",
            "airlines"
        ],
        "column_names": [
            "route id",
            "destination airport id",
            "destination airport",
            "source airport id",
            "source airport",
            "airline id",
            "airline",
            "code share",
            "airport id",
            "name",
            "city",
            "country",
            "x",
            "y",
            "elevation",
            "iata",
            "icao",
            "airline id",
            "name",
            "iata",
            "icao",
            "call sign",
            "country",
            "active"
        ],
        "template_feedback": "in step 2 , find for each value of name in place of destination airport id .",
        "positive_example": "using the results of step 1 you need to determine the country along with number of corresponding rows to each value of source airport"
    },
    {
        "db_id": "flight_4",
        "table_names": [
            "routes",
            "airports",
            "airlines"
        ],
        "column_names": [
            "route id",
            "destination airport id",
            "destination airport",
            "source airport id",
            "source airport",
            "airline id",
            "airline",
            "code share",
            "airport id",
            "name",
            "city",
            "country",
            "x",
            "y",
            "elevation",
            "iata",
            "icao",
            "airline id",
            "name",
            "iata",
            "icao",
            "call sign",
            "country",
            "active"
        ],
        "template_feedback": "in step 2 , order the results ascending by number of rows .",
        "positive_example": "the order of cities should be sorted by number of rows counted for each active ."
    },
    {
        "db_id": "flight_4",
        "table_names": [
            "routes",
            "airports",
            "airlines"
        ],
        "column_names": [
            "route id",
            "destination airport id",
            "destination airport",
            "source airport id",
            "source airport",
            "airline id",
            "airline",
            "code share",
            "airport id",
            "name",
            "city",
            "country",
            "x",
            "y",
            "elevation",
            "iata",
            "icao",
            "airline id",
            "name",
            "iata",
            "icao",
            "call sign",
            "country",
            "active"
        ],
        "template_feedback": "in step 2 , order the results ascending by number of rows .",
        "positive_example": "we have to arrange the cities by number of rows counted for each active ."
    },
    {
        "db_id": "station_weather",
        "table_names": [
            "train",
            "station",
            "route",
            "weekly weather"
        ],
        "column_names": [
            "id",
            "train number",
            "name",
            "origin",
            "destination",
            "time",
            "interval",
            "id",
            "network name",
            "services",
            "local authority",
            "train id",
            "station id",
            "station id",
            "day of week",
            "high temperature",
            "low temperature",
            "precipitation",
            "wind speed mph"
        ],
        "template_feedback": "find average high temperature in place of average low temperature .",
        "positive_example": "you need to determine the average value of weekly 's highest temperature corresponding to days of the week ."
    },
    {
        "db_id": "e_government",
        "table_names": [
            "addresses",
            "services",
            "forms",
            "individuals",
            "organizations",
            "parties",
            "organization contact individuals",
            "party addresses",
            "party forms",
            "party services"
        ],
        "column_names": [
            "address id",
            "line 1 number building",
            "town city",
            "zip postcode",
            "state province county",
            "country",
            "service id",
            "service type code",
            "service name",
            "service descriptio",
            "form id",
            "form type code",
            "service id",
            "form number",
            "form name",
            "form description",
            "individual id",
            "individual first name",
            "individual middle name",
            "inidividual phone",
            "individual email",
            "individual address",
            "individual last name",
            "organization id",
            "date formed",
            "organization name",
            "uk vat number",
            "party id",
            "payment method code",
            "party phone",
            "party email",
            "individual id",
            "organization id",
            "date contact from",
            "date contact to",
            "party id",
            "address id",
            "date address from",
            "address type code",
            "date address to",
            "party id",
            "form id",
            "date completion started",
            "form status code",
            "date fully completed",
            "booking id",
            "customer id",
            "service id",
            "service datetime",
            "booking made date"
        ],
        "template_feedback": "in step 2 , find the result with the largest date contact to .",
        "positive_example": "also confirm that largest value of date contact from of organization contact individuals table ."
    },
    {
        "db_id": "e_government",
        "table_names": [
            "addresses",
            "services",
            "forms",
            "individuals",
            "organizations",
            "parties",
            "organization contact individuals",
            "party addresses",
            "party forms",
            "party services"
        ],
        "column_names": [
            "address id",
            "line 1 number building",
            "town city",
            "zip postcode",
            "state province county",
            "country",
            "service id",
            "service type code",
            "service name",
            "service descriptio",
            "form id",
            "form type code",
            "service id",
            "form number",
            "form name",
            "form description",
            "individual id",
            "individual first name",
            "individual middle name",
            "inidividual phone",
            "individual email",
            "individual address",
            "individual last name",
            "organization id",
            "date formed",
            "organization name",
            "uk vat number",
            "party id",
            "payment method code",
            "party phone",
            "party email",
            "individual id",
            "organization id",
            "date contact from",
            "date contact to",
            "party id",
            "address id",
            "date address from",
            "address type code",
            "date address to",
            "party id",
            "form id",
            "date completion started",
            "form status code",
            "date fully completed",
            "booking id",
            "customer id",
            "service id",
            "service datetime",
            "booking made date"
        ],
        "template_feedback": "in step 2 , find the result with the largest date contact to .",
        "positive_example": "for organization contact individuals table , please ensure me about the largest value of contact date ."
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "table_names": [
            "premises",
            "products",
            "customers",
            "mailshot campaigns",
            "customer addresses",
            "customer orders",
            "mailshot customers",
            "order items"
        ],
        "column_names": [
            "premise id",
            "premises type",
            "premise details",
            "product id",
            "product category",
            "product name",
            "customer id",
            "payment method",
            "customer name",
            "customer phone",
            "customer email",
            "customer address",
            "customer login",
            "customer password",
            "mailshot id",
            "product category",
            "mailshot name",
            "mailshot start date",
            "mailshot end date",
            "customer id",
            "premise id",
            "date address from",
            "address type code",
            "date address to",
            "order id",
            "customer id",
            "order status code",
            "shipping method code",
            "order placed datetime",
            "order delivered datetime",
            "order shipping charges",
            "mailshot id",
            "customer id",
            "outcome code",
            "mailshot customer date",
            "item id",
            "order item status code",
            "order id",
            "product id",
            "item status code",
            "item delivered datetime",
            "item order quantity"
        ],
        "template_feedback": "in step 1 , use mailshot customers table in place of customer orders table .",
        "positive_example": "i want mailshot consumers rather than orders of customer in step 1 ."
    },
    {
        "db_id": "music_1",
        "table_names": [
            "genre",
            "artist",
            "files",
            "song"
        ],
        "column_names": [
            "genre name",
            "rating",
            "most popular in",
            "artist name",
            "country",
            "gender",
            "preferred genre",
            "song id",
            "artist name",
            "file size",
            "duration",
            "formats",
            "song name",
            "artist name",
            "country",
            "song id",
            "genre is",
            "rating",
            "languages",
            "releasedate",
            "resolution"
        ],
        "template_feedback": "additionally make sure that languages equals english .",
        "positive_example": "ensure that song 's song name equals english ."
    },
    {
        "db_id": "loan_1",
        "table_names": [
            "bank",
            "customer",
            "loan"
        ],
        "column_names": [
            "branch id",
            "bname",
            "no of customers",
            "city",
            "state",
            "customer id",
            "customer name",
            "account type",
            "account balance",
            "number of loans",
            "credit score",
            "branch id",
            "state",
            "loan id",
            "loan type",
            "customer id",
            "branch id",
            "amount"
        ],
        "template_feedback": "use the smallest in place of largest .",
        "positive_example": "take smallest in place of largest ."
    },
    {
        "db_id": "loan_1",
        "table_names": [
            "bank",
            "customer",
            "loan"
        ],
        "column_names": [
            "branch id",
            "bname",
            "no of customers",
            "city",
            "state",
            "customer id",
            "customer name",
            "account type",
            "account balance",
            "number of loans",
            "credit score",
            "branch id",
            "state",
            "loan id",
            "loan type",
            "customer id",
            "branch id",
            "amount"
        ],
        "template_feedback": "use the smallest in place of largest .",
        "positive_example": "make sure to replace smallest with largest ."
    },
    {
        "db_id": "entertainment_awards",
        "table_names": [
            "festival detail",
            "artwork",
            "nomination"
        ],
        "column_names": [
            "festival id",
            "festival name",
            "chair name",
            "location",
            "year",
            "num of audience",
            "artwork id",
            "type",
            "name",
            "artwork id",
            "festival id",
            "result"
        ],
        "template_feedback": "in step 1 , do not find for each value of location . in step 2 , order the results by num of audience in place of number of rows .",
        "positive_example": "i want the number of audience ."
    },
    {
        "db_id": "music_1",
        "table_names": [
            "genre",
            "artist",
            "files",
            "song"
        ],
        "column_names": [
            "genre name",
            "rating",
            "most popular in",
            "artist name",
            "country",
            "gender",
            "preferred genre",
            "song id",
            "artist name",
            "file size",
            "duration",
            "formats",
            "song name",
            "artist name",
            "country",
            "song id",
            "genre is",
            "rating",
            "languages",
            "releasedate",
            "resolution"
        ],
        "template_feedback": "additionally use the information from the files table besides the song table . order the results by duration in place of rating .",
        "positive_example": "need to put languages in place of country ."
    },
    {
        "db_id": "cre_Theme_park",
        "table_names": [
            "ref hotel star ratings",
            "locations",
            "ref attraction types",
            "visitors",
            "features",
            "hotels",
            "tourist attractions",
            "street markets",
            "shops",
            "museums",
            "royal family",
            "theme parks",
            "visits",
            "photos",
            "staff",
            "tourist attraction features"
        ],
        "column_names": [
            "star rating code",
            "star rating description",
            "location id",
            "location name",
            "address",
            "other details",
            "attraction type code",
            "attraction type description",
            "tourist id",
            "tourist details",
            "feature id",
            "feature details",
            "hotel id",
            "star rating code",
            "pets allowed yn",
            "price range",
            "other hotel details",
            "tourist attraction id",
            "attraction type code",
            "location id",
            "how to get there",
            "name",
            "description",
            "opening hours",
            "other details",
            "market id",
            "market details",
            "shop id",
            "shop details",
            "museum id",
            "museum details",
            "royal family id",
            "royal family details",
            "theme park id",
            "theme park details",
            "visit id",
            "tourist attraction id",
            "tourist id",
            "visit date",
            "visit details",
            "photo id",
            "tourist attraction id",
            "name",
            "description",
            "filename",
            "other details",
            "staff id",
            "tourist attraction id",
            "name",
            "other details",
            "tourist attraction id",
            "feature id"
        ],
        "template_feedback": "use photos table in place of tourist attractions table . find number of different photos 's name in place of number of different tourist attractions 's name .",
        "positive_example": "and double check that they are without any recurrence ."
    },
    {
        "db_id": "cre_Theme_park",
        "table_names": [
            "ref hotel star ratings",
            "locations",
            "ref attraction types",
            "visitors",
            "features",
            "hotels",
            "tourist attractions",
            "street markets",
            "shops",
            "museums",
            "royal family",
            "theme parks",
            "visits",
            "photos",
            "staff",
            "tourist attraction features"
        ],
        "column_names": [
            "star rating code",
            "star rating description",
            "location id",
            "location name",
            "address",
            "other details",
            "attraction type code",
            "attraction type description",
            "tourist id",
            "tourist details",
            "feature id",
            "feature details",
            "hotel id",
            "star rating code",
            "pets allowed yn",
            "price range",
            "other hotel details",
            "tourist attraction id",
            "attraction type code",
            "location id",
            "how to get there",
            "name",
            "description",
            "opening hours",
            "other details",
            "market id",
            "market details",
            "shop id",
            "shop details",
            "museum id",
            "museum details",
            "royal family id",
            "royal family details",
            "theme park id",
            "theme park details",
            "visit id",
            "tourist attraction id",
            "tourist id",
            "visit date",
            "visit details",
            "photo id",
            "tourist attraction id",
            "name",
            "description",
            "filename",
            "other details",
            "staff id",
            "tourist attraction id",
            "name",
            "other details",
            "tourist attraction id",
            "feature id"
        ],
        "template_feedback": "use photos table in place of tourist attractions table . find number of different photos 's name in place of number of different tourist attractions 's name .",
        "positive_example": "make sure they are not repeated again ."
    },
    {
        "db_id": "cre_Theme_park",
        "table_names": [
            "ref hotel star ratings",
            "locations",
            "ref attraction types",
            "visitors",
            "features",
            "hotels",
            "tourist attractions",
            "street markets",
            "shops",
            "museums",
            "royal family",
            "theme parks",
            "visits",
            "photos",
            "staff",
            "tourist attraction features"
        ],
        "column_names": [
            "star rating code",
            "star rating description",
            "location id",
            "location name",
            "address",
            "other details",
            "attraction type code",
            "attraction type description",
            "tourist id",
            "tourist details",
            "feature id",
            "feature details",
            "hotel id",
            "star rating code",
            "pets allowed yn",
            "price range",
            "other hotel details",
            "tourist attraction id",
            "attraction type code",
            "location id",
            "how to get there",
            "name",
            "description",
            "opening hours",
            "other details",
            "market id",
            "market details",
            "shop id",
            "shop details",
            "museum id",
            "museum details",
            "royal family id",
            "royal family details",
            "theme park id",
            "theme park details",
            "visit id",
            "tourist attraction id",
            "tourist id",
            "visit date",
            "visit details",
            "photo id",
            "tourist attraction id",
            "name",
            "description",
            "filename",
            "other details",
            "staff id",
            "tourist attraction id",
            "name",
            "other details",
            "tourist attraction id",
            "feature id"
        ],
        "template_feedback": "in step 1 , additionally use the information from the tourist attractions table besides the ref attraction types table .",
        "positive_example": "put tourist attractions table instead of ref attraction types table in step 1 ."
    },
    {
        "db_id": "cre_Theme_park",
        "table_names": [
            "ref hotel star ratings",
            "locations",
            "ref attraction types",
            "visitors",
            "features",
            "hotels",
            "tourist attractions",
            "street markets",
            "shops",
            "museums",
            "royal family",
            "theme parks",
            "visits",
            "photos",
            "staff",
            "tourist attraction features"
        ],
        "column_names": [
            "star rating code",
            "star rating description",
            "location id",
            "location name",
            "address",
            "other details",
            "attraction type code",
            "attraction type description",
            "tourist id",
            "tourist details",
            "feature id",
            "feature details",
            "hotel id",
            "star rating code",
            "pets allowed yn",
            "price range",
            "other hotel details",
            "tourist attraction id",
            "attraction type code",
            "location id",
            "how to get there",
            "name",
            "description",
            "opening hours",
            "other details",
            "market id",
            "market details",
            "shop id",
            "shop details",
            "museum id",
            "museum details",
            "royal family id",
            "royal family details",
            "theme park id",
            "theme park details",
            "visit id",
            "tourist attraction id",
            "tourist id",
            "visit date",
            "visit details",
            "photo id",
            "tourist attraction id",
            "name",
            "description",
            "filename",
            "other details",
            "staff id",
            "tourist attraction id",
            "name",
            "other details",
            "tourist attraction id",
            "feature id"
        ],
        "template_feedback": "in step 1 , additionally use the information from the tourist attractions table besides the ref attraction types table .",
        "positive_example": "in step 1 , place tourist attractions table in-place of ref attraction types table ."
    },
    {
        "db_id": "student_1",
        "table_names": [
            "list",
            "teachers"
        ],
        "column_names": [
            "last name",
            "first name",
            "grade",
            "class room",
            "last name",
            "first name",
            "class room"
        ],
        "template_feedback": "additionally use the information from the teachers table besides the list table . consider the teachers 's last name equals kirk and teachers 's first name equals marrotte conditions in place of the list 's last name equals kirk and list 's first name equals marrotte conditions .",
        "positive_example": "marrotte kirk should teach every student ."
    },
    {
        "db_id": "cre_Theme_park",
        "table_names": [
            "ref hotel star ratings",
            "locations",
            "ref attraction types",
            "visitors",
            "features",
            "hotels",
            "tourist attractions",
            "street markets",
            "shops",
            "museums",
            "royal family",
            "theme parks",
            "visits",
            "photos",
            "staff",
            "tourist attraction features"
        ],
        "column_names": [
            "star rating code",
            "star rating description",
            "location id",
            "location name",
            "address",
            "other details",
            "attraction type code",
            "attraction type description",
            "tourist id",
            "tourist details",
            "feature id",
            "feature details",
            "hotel id",
            "star rating code",
            "pets allowed yn",
            "price range",
            "other hotel details",
            "tourist attraction id",
            "attraction type code",
            "location id",
            "how to get there",
            "name",
            "description",
            "opening hours",
            "other details",
            "market id",
            "market details",
            "shop id",
            "shop details",
            "museum id",
            "museum details",
            "royal family id",
            "royal family details",
            "theme park id",
            "theme park details",
            "visit id",
            "tourist attraction id",
            "tourist id",
            "visit date",
            "visit details",
            "photo id",
            "tourist attraction id",
            "name",
            "description",
            "filename",
            "other details",
            "staff id",
            "tourist attraction id",
            "name",
            "other details",
            "tourist attraction id",
            "feature id"
        ],
        "template_feedback": "in step 1 , use royal family table in place of locations table and street markets table in step 2 , remove the address equals 660 shea crescent conditions . find royal family details and how to get there in place of market details and address .",
        "positive_example": "you need to determine whether the tourist attractions are related to the royal family or not , also you need to search for details of how reach there ."
    },
    {
        "db_id": "network_2",
        "table_names": [
            "person",
            "person friend"
        ],
        "column_names": [
            "name",
            "age",
            "city",
            "gender",
            "job",
            "name",
            "friend",
            "year"
        ],
        "template_feedback": "in step 2 , consider the friend equals dan or friend equals alice conditions in place of the friend not equals dan conditions .",
        "positive_example": "the college should be ucla not the team name ."
    },
    {
        "db_id": "network_2",
        "table_names": [
            "person",
            "person friend"
        ],
        "column_names": [
            "name",
            "age",
            "city",
            "gender",
            "job",
            "name",
            "friend",
            "year"
        ],
        "template_feedback": "in step 2 , consider the friend equals dan or friend equals alice conditions in place of the friend not equals dan conditions .",
        "positive_example": "make sure ucla is the college ."
    },
    {
        "db_id": "network_2",
        "table_names": [
            "person",
            "person friend"
        ],
        "column_names": [
            "name",
            "age",
            "city",
            "gender",
            "job",
            "name",
            "friend",
            "year"
        ],
        "template_feedback": "in step 2 , consider the friend equals dan or friend equals alice conditions in place of the friend not equals dan conditions .",
        "positive_example": "make sure that college name is ucla not the team name ."
    },
    {
        "db_id": "tracking_software_problems",
        "table_names": [
            "problem category codes",
            "problem log",
            "problem status codes",
            "product",
            "staff",
            "problems"
        ],
        "column_names": [
            "problem category code",
            "problem category description",
            "problem log id",
            "assigned to staff id",
            "problem id",
            "problem category code",
            "problem status code",
            "log entry date",
            "log entry description",
            "log entry fix",
            "other log details",
            "problem status code",
            "problem status description",
            "product id",
            "product name",
            "product details",
            "staff id",
            "staff first name",
            "staff last name",
            "other staff details",
            "problem id",
            "product id",
            "closure authorised by staff id",
            "reported by staff id",
            "date problem reported",
            "date problem closed",
            "problem description",
            "other problem details"
        ],
        "template_feedback": "consider the problem id equals 10 conditions in place of the problem log id equals 10 conditions .",
        "positive_example": "i want id of problem should be 10 ."
    },
    {
        "db_id": "sakila_1",
        "table_names": [
            "actor",
            "address",
            "category",
            "city",
            "country",
            "customer",
            "film",
            "film actor",
            "film category",
            "film text",
            "inventory",
            "language",
            "payment",
            "rental",
            "staff",
            "store"
        ],
        "column_names": [
            "actor id",
            "first name",
            "last name",
            "last update",
            "address id",
            "address",
            "address2",
            "district",
            "city id",
            "postal code",
            "phone",
            "last update",
            "category id",
            "name",
            "last update",
            "city id",
            "city",
            "country id",
            "last update",
            "country id",
            "country",
            "last update",
            "customer id",
            "store id",
            "first name",
            "last name",
            "email",
            "address id",
            "active",
            "create date",
            "last update",
            "film id",
            "title",
            "description",
            "release year",
            "language id",
            "original language id",
            "rental duration",
            "rental rate",
            "length",
            "replacement cost",
            "rating",
            "special features",
            "last update",
            "actor id",
            "film id",
            "last update",
            "film id",
            "category id",
            "last update",
            "film id",
            "title",
            "description",
            "inventory id",
            "film id",
            "store id",
            "last update",
            "language id",
            "name",
            "last update",
            "payment id",
            "customer id",
            "staff id",
            "rental id",
            "amount",
            "payment date",
            "last update",
            "rental id",
            "rental date",
            "inventory id",
            "customer id",
            "return date",
            "staff id",
            "last update",
            "staff id",
            "first name",
            "last name",
            "address id",
            "picture",
            "email",
            "store id",
            "active",
            "username",
            "password",
            "last update",
            "store id",
            "manager staff id",
            "address id",
            "last update"
        ],
        "template_feedback": "in step 3 , find number of rows in place of address .",
        "positive_example": "in step 3 also need to find address 2 of address table ."
    },
    {
        "db_id": "sakila_1",
        "table_names": [
            "actor",
            "address",
            "category",
            "city",
            "country",
            "customer",
            "film",
            "film actor",
            "film category",
            "film text",
            "inventory",
            "language",
            "payment",
            "rental",
            "staff",
            "store"
        ],
        "column_names": [
            "actor id",
            "first name",
            "last name",
            "last update",
            "address id",
            "address",
            "address2",
            "district",
            "city id",
            "postal code",
            "phone",
            "last update",
            "category id",
            "name",
            "last update",
            "city id",
            "city",
            "country id",
            "last update",
            "country id",
            "country",
            "last update",
            "customer id",
            "store id",
            "first name",
            "last name",
            "email",
            "address id",
            "active",
            "create date",
            "last update",
            "film id",
            "title",
            "description",
            "release year",
            "language id",
            "original language id",
            "rental duration",
            "rental rate",
            "length",
            "replacement cost",
            "rating",
            "special features",
            "last update",
            "actor id",
            "film id",
            "last update",
            "film id",
            "category id",
            "last update",
            "film id",
            "title",
            "description",
            "inventory id",
            "film id",
            "store id",
            "last update",
            "language id",
            "name",
            "last update",
            "payment id",
            "customer id",
            "staff id",
            "rental id",
            "amount",
            "payment date",
            "last update",
            "rental id",
            "rental date",
            "inventory id",
            "customer id",
            "return date",
            "staff id",
            "last update",
            "staff id",
            "first name",
            "last name",
            "address id",
            "picture",
            "email",
            "store id",
            "active",
            "username",
            "password",
            "last update",
            "store id",
            "manager staff id",
            "address id",
            "last update"
        ],
        "template_feedback": "in step 3 , find number of rows in place of address .",
        "positive_example": "in step 3 , you should also determine address number 2 from address table ."
    },
    {
        "db_id": "cre_Theme_park",
        "table_names": [
            "ref hotel star ratings",
            "locations",
            "ref attraction types",
            "visitors",
            "features",
            "hotels",
            "tourist attractions",
            "street markets",
            "shops",
            "museums",
            "royal family",
            "theme parks",
            "visits",
            "photos",
            "staff",
            "tourist attraction features"
        ],
        "column_names": [
            "star rating code",
            "star rating description",
            "location id",
            "location name",
            "address",
            "other details",
            "attraction type code",
            "attraction type description",
            "tourist id",
            "tourist details",
            "feature id",
            "feature details",
            "hotel id",
            "star rating code",
            "pets allowed yn",
            "price range",
            "other hotel details",
            "tourist attraction id",
            "attraction type code",
            "location id",
            "how to get there",
            "name",
            "description",
            "opening hours",
            "other details",
            "market id",
            "market details",
            "shop id",
            "shop details",
            "museum id",
            "museum details",
            "royal family id",
            "royal family details",
            "theme park id",
            "theme park details",
            "visit id",
            "tourist attraction id",
            "tourist id",
            "visit date",
            "visit details",
            "photo id",
            "tourist attraction id",
            "name",
            "description",
            "filename",
            "other details",
            "staff id",
            "tourist attraction id",
            "name",
            "other details",
            "tourist attraction id",
            "feature id"
        ],
        "template_feedback": "additionally use the information from the tourist attractions table besides the street markets table . additionally make sure that how to get there equals walk or how to get there equals bus .",
        "positive_example": "confirm the travel can be by walking or by bus ."
    },
    {
        "db_id": "cre_Theme_park",
        "table_names": [
            "ref hotel star ratings",
            "locations",
            "ref attraction types",
            "visitors",
            "features",
            "hotels",
            "tourist attractions",
            "street markets",
            "shops",
            "museums",
            "royal family",
            "theme parks",
            "visits",
            "photos",
            "staff",
            "tourist attraction features"
        ],
        "column_names": [
            "star rating code",
            "star rating description",
            "location id",
            "location name",
            "address",
            "other details",
            "attraction type code",
            "attraction type description",
            "tourist id",
            "tourist details",
            "feature id",
            "feature details",
            "hotel id",
            "star rating code",
            "pets allowed yn",
            "price range",
            "other hotel details",
            "tourist attraction id",
            "attraction type code",
            "location id",
            "how to get there",
            "name",
            "description",
            "opening hours",
            "other details",
            "market id",
            "market details",
            "shop id",
            "shop details",
            "museum id",
            "museum details",
            "royal family id",
            "royal family details",
            "theme park id",
            "theme park details",
            "visit id",
            "tourist attraction id",
            "tourist id",
            "visit date",
            "visit details",
            "photo id",
            "tourist attraction id",
            "name",
            "description",
            "filename",
            "other details",
            "staff id",
            "tourist attraction id",
            "name",
            "other details",
            "tourist attraction id",
            "feature id"
        ],
        "template_feedback": "additionally use the information from the tourist attractions table besides the street markets table . additionally make sure that how to get there equals walk or how to get there equals bus .",
        "positive_example": "confirm how can i reach there whether by bus or by walking ."
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "table_names": [
            "reference document types",
            "reference calendar",
            "reference locations",
            "roles",
            "all documents",
            "employees",
            "document locations",
            "documents to be destroyed"
        ],
        "column_names": [
            "document type code",
            "document type name",
            "document type description",
            "calendar date",
            "day number",
            "location code",
            "location name",
            "location description",
            "role code",
            "role name",
            "role description",
            "document id",
            "date stored",
            "document type code",
            "document name",
            "document description",
            "other details",
            "employee id",
            "role code",
            "employee name",
            "gender mfu",
            "date of birth",
            "other details",
            "document id",
            "location code",
            "date in location from",
            "date in locaton to",
            "document id",
            "destruction authorised by employee id",
            "destroyed by employee id",
            "planned destruction date",
            "actual destruction date",
            "other details"
        ],
        "template_feedback": "in step 1 , do not use the document locations table .",
        "positive_example": "use date stored in place of date in location from ."
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "table_names": [
            "reference document types",
            "reference calendar",
            "reference locations",
            "roles",
            "all documents",
            "employees",
            "document locations",
            "documents to be destroyed"
        ],
        "column_names": [
            "document type code",
            "document type name",
            "document type description",
            "calendar date",
            "day number",
            "location code",
            "location name",
            "location description",
            "role code",
            "role name",
            "role description",
            "document id",
            "date stored",
            "document type code",
            "document name",
            "document description",
            "other details",
            "employee id",
            "role code",
            "employee name",
            "gender mfu",
            "date of birth",
            "other details",
            "document id",
            "location code",
            "date in location from",
            "date in locaton to",
            "document id",
            "destruction authorised by employee id",
            "destroyed by employee id",
            "planned destruction date",
            "actual destruction date",
            "other details"
        ],
        "template_feedback": "in step 1 , do not use the document locations table .",
        "positive_example": "make sure you use date stored ."
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "table_names": [
            "reference document types",
            "reference calendar",
            "reference locations",
            "roles",
            "all documents",
            "employees",
            "document locations",
            "documents to be destroyed"
        ],
        "column_names": [
            "document type code",
            "document type name",
            "document type description",
            "calendar date",
            "day number",
            "location code",
            "location name",
            "location description",
            "role code",
            "role name",
            "role description",
            "document id",
            "date stored",
            "document type code",
            "document name",
            "document description",
            "other details",
            "employee id",
            "role code",
            "employee name",
            "gender mfu",
            "date of birth",
            "other details",
            "document id",
            "location code",
            "date in location from",
            "date in locaton to",
            "document id",
            "destruction authorised by employee id",
            "destroyed by employee id",
            "planned destruction date",
            "actual destruction date",
            "other details"
        ],
        "template_feedback": "in step 1 , do not use the document locations table .",
        "positive_example": "supplant from location date with stored date ."
    },
    {
        "db_id": "bike_1",
        "table_names": [
            "station",
            "status",
            "trip",
            "weather"
        ],
        "column_names": [
            "id",
            "name",
            "latitude",
            "longitude",
            "dock count",
            "city",
            "installation date",
            "station id",
            "bikes available",
            "docks available",
            "time",
            "id",
            "duration",
            "start date",
            "start station name",
            "start station id",
            "end date",
            "end station name",
            "end station id",
            "bike id",
            "subscription type",
            "zip code",
            "date",
            "max temperature f",
            "mean temperature f",
            "min temperature f",
            "max dew point f",
            "mean dew point f",
            "min dew point f",
            "max humidity",
            "mean humidity",
            "min humidity",
            "max sea level pressure inches",
            "mean sea level pressure inches",
            "min sea level pressure inches",
            "max visibility miles",
            "mean visibility miles",
            "min visibility miles",
            "max wind speed mph",
            "mean wind speed mph",
            "max gust speed mph",
            "precipitation inches",
            "cloud cover",
            "events",
            "wind dir degrees",
            "zip code"
        ],
        "template_feedback": "consider the max temperature f greater than 85 conditions in place of the min temperature f greater than 85 conditions .",
        "positive_example": "i want highest temperature f ."
    },
    {
        "db_id": "soccer_2",
        "table_names": [
            "college",
            "player",
            "tryout"
        ],
        "column_names": [
            "college name",
            "state",
            "enrollment",
            "player id",
            "player name",
            "yes card",
            "training hours",
            "player id",
            "college name",
            "player position",
            "decision"
        ],
        "template_feedback": "additionally use the information from the tryout table besides the player table .",
        "positive_example": "ascertain that try out table should have student 's player id ."
    },
    {
        "db_id": "hr_1",
        "table_names": [
            "regions",
            "countries",
            "departments",
            "jobs",
            "employees",
            "job history",
            "locations"
        ],
        "column_names": [
            "region id",
            "region name",
            "country id",
            "country name",
            "region id",
            "department id",
            "department name",
            "manager id",
            "location id",
            "job id",
            "job title",
            "min salary",
            "max salary",
            "employee id",
            "first name",
            "last name",
            "email",
            "phone number",
            "hire date",
            "job id",
            "salary",
            "commission pct",
            "manager id",
            "department id",
            "employee id",
            "start date",
            "end date",
            "job id",
            "department id",
            "location id",
            "street address",
            "postal code",
            "city",
            "state province",
            "country id"
        ],
        "template_feedback": "additionally use the information from the departments table besides the employees table . additionally make sure that employee id equals departments 's manager id . find rows in place of employee id . make sure no repetition in the results .",
        "positive_example": "you should determine the values for department 's manager from employees table ."
    },
    {
        "db_id": "department_store",
        "table_names": [
            "addresses",
            "staff",
            "suppliers",
            "department store chain",
            "customers",
            "products",
            "supplier addresses",
            "customer addresses",
            "customer orders",
            "department stores",
            "departments",
            "order items",
            "product suppliers",
            "staff department assignments"
        ],
        "column_names": [
            "address id",
            "address details",
            "staff id",
            "staff gender",
            "staff name",
            "supplier id",
            "supplier name",
            "supplier phone",
            "department store chain id",
            "department store chain name",
            "customer id",
            "payment method code",
            "customer code",
            "customer name",
            "customer address",
            "customer phone",
            "customer email",
            "product id",
            "product type code",
            "product name",
            "product price",
            "supplier id",
            "address id",
            "date from",
            "date to",
            "customer id",
            "address id",
            "date from",
            "date to",
            "order id",
            "customer id",
            "order status code",
            "order date",
            "department store id",
            "department store chain id",
            "store name",
            "store address",
            "store phone",
            "store email",
            "department id",
            "department store id",
            "department name",
            "order item id",
            "order id",
            "product id",
            "product id",
            "supplier id",
            "date supplied from",
            "date supplied to",
            "total amount purchased",
            "total value purchased",
            "staff id",
            "department id",
            "date assigned from",
            "job title code",
            "date assigned to"
        ],
        "template_feedback": "in step 1 , additionally make sure that job title code equals clerical staff . find maximum date assigned to in place of minimum date assigned from .",
        "positive_example": "in step 1 , attach job title as clerical staff and eliminate minimum . also , use assigned from date in step 2 ."
    },
    {
        "db_id": "bike_1",
        "table_names": [
            "station",
            "status",
            "trip",
            "weather"
        ],
        "column_names": [
            "id",
            "name",
            "latitude",
            "longitude",
            "dock count",
            "city",
            "installation date",
            "station id",
            "bikes available",
            "docks available",
            "time",
            "id",
            "duration",
            "start date",
            "start station name",
            "start station id",
            "end date",
            "end station name",
            "end station id",
            "bike id",
            "subscription type",
            "zip code",
            "date",
            "max temperature f",
            "mean temperature f",
            "min temperature f",
            "max dew point f",
            "mean dew point f",
            "min dew point f",
            "max humidity",
            "mean humidity",
            "min humidity",
            "max sea level pressure inches",
            "mean sea level pressure inches",
            "min sea level pressure inches",
            "max visibility miles",
            "mean visibility miles",
            "min visibility miles",
            "max wind speed mph",
            "mean wind speed mph",
            "max gust speed mph",
            "precipitation inches",
            "cloud cover",
            "events",
            "wind dir degrees",
            "zip code"
        ],
        "template_feedback": "in step 1 , find the average mean visibility miles for each value of zip code . in step 2 , make sure that the corresponding value in step 1 less than 10 .",
        "positive_example": "find zip code whose average max visibility miles is less than 10 ."
    },
    {
        "db_id": "bike_1",
        "table_names": [
            "station",
            "status",
            "trip",
            "weather"
        ],
        "column_names": [
            "id",
            "name",
            "latitude",
            "longitude",
            "dock count",
            "city",
            "installation date",
            "station id",
            "bikes available",
            "docks available",
            "time",
            "id",
            "duration",
            "start date",
            "start station name",
            "start station id",
            "end date",
            "end station name",
            "end station id",
            "bike id",
            "subscription type",
            "zip code",
            "date",
            "max temperature f",
            "mean temperature f",
            "min temperature f",
            "max dew point f",
            "mean dew point f",
            "min dew point f",
            "max humidity",
            "mean humidity",
            "min humidity",
            "max sea level pressure inches",
            "mean sea level pressure inches",
            "min sea level pressure inches",
            "max visibility miles",
            "mean visibility miles",
            "min visibility miles",
            "max wind speed mph",
            "mean wind speed mph",
            "max gust speed mph",
            "precipitation inches",
            "cloud cover",
            "events",
            "wind dir degrees",
            "zip code"
        ],
        "template_feedback": "in step 1 , find the average mean visibility miles for each value of zip code . in step 2 , make sure that the corresponding value in step 1 less than 10 .",
        "positive_example": "determine the zip code where value of mean max visibility is less than 10 ."
    },
    {
        "db_id": "bike_1",
        "table_names": [
            "station",
            "status",
            "trip",
            "weather"
        ],
        "column_names": [
            "id",
            "name",
            "latitude",
            "longitude",
            "dock count",
            "city",
            "installation date",
            "station id",
            "bikes available",
            "docks available",
            "time",
            "id",
            "duration",
            "start date",
            "start station name",
            "start station id",
            "end date",
            "end station name",
            "end station id",
            "bike id",
            "subscription type",
            "zip code",
            "date",
            "max temperature f",
            "mean temperature f",
            "min temperature f",
            "max dew point f",
            "mean dew point f",
            "min dew point f",
            "max humidity",
            "mean humidity",
            "min humidity",
            "max sea level pressure inches",
            "mean sea level pressure inches",
            "min sea level pressure inches",
            "max visibility miles",
            "mean visibility miles",
            "min visibility miles",
            "max wind speed mph",
            "mean wind speed mph",
            "max gust speed mph",
            "precipitation inches",
            "cloud cover",
            "events",
            "wind dir degrees",
            "zip code"
        ],
        "template_feedback": "in step 2 , make sure the duration is greater than or equals the results of step 1 the duration is greater than the results of step 1 .",
        "positive_example": "in step 2 need to supersede \" greater than \" with \" equals \" ."
    },
    {
        "db_id": "bike_1",
        "table_names": [
            "station",
            "status",
            "trip",
            "weather"
        ],
        "column_names": [
            "id",
            "name",
            "latitude",
            "longitude",
            "dock count",
            "city",
            "installation date",
            "station id",
            "bikes available",
            "docks available",
            "time",
            "id",
            "duration",
            "start date",
            "start station name",
            "start station id",
            "end date",
            "end station name",
            "end station id",
            "bike id",
            "subscription type",
            "zip code",
            "date",
            "max temperature f",
            "mean temperature f",
            "min temperature f",
            "max dew point f",
            "mean dew point f",
            "min dew point f",
            "max humidity",
            "mean humidity",
            "min humidity",
            "max sea level pressure inches",
            "mean sea level pressure inches",
            "min sea level pressure inches",
            "max visibility miles",
            "mean visibility miles",
            "min visibility miles",
            "max wind speed mph",
            "mean wind speed mph",
            "max gust speed mph",
            "precipitation inches",
            "cloud cover",
            "events",
            "wind dir degrees",
            "zip code"
        ],
        "template_feedback": "in step 2 , make sure the duration is greater than or equals the results of step 1 the duration is greater than the results of step 1 .",
        "positive_example": "i want equivalent in place of higher than in step 2 ."
    },
    {
        "db_id": "storm_record",
        "table_names": [
            "storm",
            "region",
            "affected region"
        ],
        "column_names": [
            "storm id",
            "name",
            "dates active",
            "max speed",
            "damage millions usd",
            "number deaths",
            "region id",
            "region code",
            "region name",
            "region id",
            "storm id",
            "number city affected"
        ],
        "template_feedback": "consider the number deaths greater than 0 conditions in place of the name greater than or equals 0 conditions .",
        "positive_example": "you need to specify that number of deaths should be more than or equivalent to 1 ."
    },
    {
        "db_id": "storm_record",
        "table_names": [
            "storm",
            "region",
            "affected region"
        ],
        "column_names": [
            "storm id",
            "name",
            "dates active",
            "max speed",
            "damage millions usd",
            "number deaths",
            "region id",
            "region code",
            "region name",
            "region id",
            "storm id",
            "number city affected"
        ],
        "template_feedback": "consider the number deaths greater than 0 conditions in place of the name greater than or equals 0 conditions .",
        "positive_example": "make sure that number of deaths should be one or more than one ."
    },
    {
        "db_id": "tracking_software_problems",
        "table_names": [
            "problem category codes",
            "problem log",
            "problem status codes",
            "product",
            "staff",
            "problems"
        ],
        "column_names": [
            "problem category code",
            "problem category description",
            "problem log id",
            "assigned to staff id",
            "problem id",
            "problem category code",
            "problem status code",
            "log entry date",
            "log entry description",
            "log entry fix",
            "other log details",
            "problem status code",
            "problem status description",
            "product id",
            "product name",
            "product details",
            "staff id",
            "staff first name",
            "staff last name",
            "other staff details",
            "problem id",
            "product id",
            "closure authorised by staff id",
            "reported by staff id",
            "date problem reported",
            "date problem closed",
            "problem description",
            "other problem details"
        ],
        "template_feedback": "in step 2 , consider the date problem reported greater than 1986-11-13 conditions in place of the problem id greater than 1986-11-13 conditions .",
        "positive_example": "i want the date of problem reported and id of product problems ."
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "table_names": [
            "reference document types",
            "reference budget codes",
            "projects",
            "documents",
            "statements",
            "documents with expenses",
            "accounts"
        ],
        "column_names": [
            "document type code",
            "document type name",
            "document type description",
            "budget type code",
            "budget type description",
            "project id",
            "project details",
            "document id",
            "document type code",
            "project id",
            "document date",
            "document name",
            "document description",
            "other details",
            "statement id",
            "statement details",
            "document id",
            "budget type code",
            "document details",
            "account id",
            "statement id",
            "account details"
        ],
        "template_feedback": "in step 3 , make sure that the corresponding value in step 2 greater than 2 .",
        "positive_example": "replace projects project id with documents project id in step 2 ."
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "table_names": [
            "reference document types",
            "reference budget codes",
            "projects",
            "documents",
            "statements",
            "documents with expenses",
            "accounts"
        ],
        "column_names": [
            "document type code",
            "document type name",
            "document type description",
            "budget type code",
            "budget type description",
            "project id",
            "project details",
            "document id",
            "document type code",
            "project id",
            "document date",
            "document name",
            "document description",
            "other details",
            "statement id",
            "statement details",
            "document id",
            "budget type code",
            "document details",
            "account id",
            "statement id",
            "account details"
        ],
        "template_feedback": "in step 3 , make sure that the corresponding value in step 2 greater than 2 .",
        "positive_example": "in step 2 , i want project id of documents ."
    },
    {
        "db_id": "department_store",
        "table_names": [
            "addresses",
            "staff",
            "suppliers",
            "department store chain",
            "customers",
            "products",
            "supplier addresses",
            "customer addresses",
            "customer orders",
            "department stores",
            "departments",
            "order items",
            "product suppliers",
            "staff department assignments"
        ],
        "column_names": [
            "address id",
            "address details",
            "staff id",
            "staff gender",
            "staff name",
            "supplier id",
            "supplier name",
            "supplier phone",
            "department store chain id",
            "department store chain name",
            "customer id",
            "payment method code",
            "customer code",
            "customer name",
            "customer address",
            "customer phone",
            "customer email",
            "product id",
            "product type code",
            "product name",
            "product price",
            "supplier id",
            "address id",
            "date from",
            "date to",
            "customer id",
            "address id",
            "date from",
            "date to",
            "order id",
            "customer id",
            "order status code",
            "order date",
            "department store id",
            "department store chain id",
            "store name",
            "store address",
            "store phone",
            "store email",
            "department id",
            "department store id",
            "department name",
            "order item id",
            "order id",
            "product id",
            "product id",
            "supplier id",
            "date supplied from",
            "date supplied to",
            "total amount purchased",
            "total value purchased",
            "staff id",
            "department id",
            "date assigned from",
            "job title code",
            "date assigned to"
        ],
        "template_feedback": "do not return order date .",
        "positive_example": "you need to find the dst apid of the john f kennedy international airport first"
    },
    {
        "db_id": "department_store",
        "table_names": [
            "addresses",
            "staff",
            "suppliers",
            "department store chain",
            "customers",
            "products",
            "supplier addresses",
            "customer addresses",
            "customer orders",
            "department stores",
            "departments",
            "order items",
            "product suppliers",
            "staff department assignments"
        ],
        "column_names": [
            "address id",
            "address details",
            "staff id",
            "staff gender",
            "staff name",
            "supplier id",
            "supplier name",
            "supplier phone",
            "department store chain id",
            "department store chain name",
            "customer id",
            "payment method code",
            "customer code",
            "customer name",
            "customer address",
            "customer phone",
            "customer email",
            "product id",
            "product type code",
            "product name",
            "product price",
            "supplier id",
            "address id",
            "date from",
            "date to",
            "customer id",
            "address id",
            "date from",
            "date to",
            "order id",
            "customer id",
            "order status code",
            "order date",
            "department store id",
            "department store chain id",
            "store name",
            "store address",
            "store phone",
            "store email",
            "department id",
            "department store id",
            "department name",
            "order item id",
            "order id",
            "product id",
            "product id",
            "supplier id",
            "date supplied from",
            "date supplied to",
            "total amount purchased",
            "total value purchased",
            "staff id",
            "department id",
            "date assigned from",
            "job title code",
            "date assigned to"
        ],
        "template_feedback": "do not return order date .",
        "positive_example": "first search for the dst apid of the john f kennedy international airport ."
    },
    {
        "db_id": "hospital_1",
        "table_names": [
            "physician",
            "department",
            "affiliated with",
            "procedures",
            "trained in",
            "patient",
            "nurse",
            "appointment",
            "medication",
            "prescribes",
            "block",
            "room",
            "on call",
            "stay",
            "undergoes"
        ],
        "column_names": [
            "employee id",
            "name",
            "position",
            "ssn",
            "departmentid",
            "name",
            "head",
            "physician",
            "department",
            "primary affiliation",
            "code",
            "name",
            "cost",
            "physician",
            "treatment",
            "certification date",
            "certification expires",
            "ssn",
            "name",
            "address",
            "phone",
            "insurance id",
            "pcp",
            "employee id",
            "name",
            "position",
            "registered",
            "ssn",
            "appointment id",
            "patient",
            "prep nurse",
            "physician",
            "start",
            "end",
            "examination room",
            "code",
            "name",
            "brand",
            "description",
            "physician",
            "patient",
            "medication",
            "date",
            "appointment",
            "dose",
            "block floor",
            "block code",
            "roomnumber",
            "room type",
            "block floor",
            "block code",
            "unavailable",
            "nurse",
            "block floor",
            "block code",
            "oncall start",
            "oncall end",
            "stay id",
            "patient",
            "room",
            "stay start",
            "stay end",
            "patient",
            "procedures",
            "stay",
            "date undergoes",
            "physician",
            "assisting nurse"
        ],
        "template_feedback": "additionally use the information from the appointment table besides the patient table .",
        "positive_example": "ensure that patient are present in appointment table ."
    },
    {
        "db_id": "hospital_1",
        "table_names": [
            "physician",
            "department",
            "affiliated with",
            "procedures",
            "trained in",
            "patient",
            "nurse",
            "appointment",
            "medication",
            "prescribes",
            "block",
            "room",
            "on call",
            "stay",
            "undergoes"
        ],
        "column_names": [
            "employee id",
            "name",
            "position",
            "ssn",
            "departmentid",
            "name",
            "head",
            "physician",
            "department",
            "primary affiliation",
            "code",
            "name",
            "cost",
            "physician",
            "treatment",
            "certification date",
            "certification expires",
            "ssn",
            "name",
            "address",
            "phone",
            "insurance id",
            "pcp",
            "employee id",
            "name",
            "position",
            "registered",
            "ssn",
            "appointment id",
            "patient",
            "prep nurse",
            "physician",
            "start",
            "end",
            "examination room",
            "code",
            "name",
            "brand",
            "description",
            "physician",
            "patient",
            "medication",
            "date",
            "appointment",
            "dose",
            "block floor",
            "block code",
            "roomnumber",
            "room type",
            "block floor",
            "block code",
            "unavailable",
            "nurse",
            "block floor",
            "block code",
            "oncall start",
            "oncall end",
            "stay id",
            "patient",
            "room",
            "stay start",
            "stay end",
            "patient",
            "procedures",
            "stay",
            "date undergoes",
            "physician",
            "assisting nurse"
        ],
        "template_feedback": "additionally use the information from the appointment table besides the patient table .",
        "positive_example": "make sure the patients are included in appointment table ."
    },
    {
        "db_id": "hospital_1",
        "table_names": [
            "physician",
            "department",
            "affiliated with",
            "procedures",
            "trained in",
            "patient",
            "nurse",
            "appointment",
            "medication",
            "prescribes",
            "block",
            "room",
            "on call",
            "stay",
            "undergoes"
        ],
        "column_names": [
            "employee id",
            "name",
            "position",
            "ssn",
            "departmentid",
            "name",
            "head",
            "physician",
            "department",
            "primary affiliation",
            "code",
            "name",
            "cost",
            "physician",
            "treatment",
            "certification date",
            "certification expires",
            "ssn",
            "name",
            "address",
            "phone",
            "insurance id",
            "pcp",
            "employee id",
            "name",
            "position",
            "registered",
            "ssn",
            "appointment id",
            "patient",
            "prep nurse",
            "physician",
            "start",
            "end",
            "examination room",
            "code",
            "name",
            "brand",
            "description",
            "physician",
            "patient",
            "medication",
            "date",
            "appointment",
            "dose",
            "block floor",
            "block code",
            "roomnumber",
            "room type",
            "block floor",
            "block code",
            "unavailable",
            "nurse",
            "block floor",
            "block code",
            "oncall start",
            "oncall end",
            "stay id",
            "patient",
            "room",
            "stay start",
            "stay end",
            "patient",
            "procedures",
            "stay",
            "date undergoes",
            "physician",
            "assisting nurse"
        ],
        "template_feedback": "additionally use the information from the appointment table besides the patient table .",
        "positive_example": "confirm that the patient are available in appointment 's ."
    },
    {
        "db_id": "bike_1",
        "table_names": [
            "station",
            "status",
            "trip",
            "weather"
        ],
        "column_names": [
            "id",
            "name",
            "latitude",
            "longitude",
            "dock count",
            "city",
            "installation date",
            "station id",
            "bikes available",
            "docks available",
            "time",
            "id",
            "duration",
            "start date",
            "start station name",
            "start station id",
            "end date",
            "end station name",
            "end station id",
            "bike id",
            "subscription type",
            "zip code",
            "date",
            "max temperature f",
            "mean temperature f",
            "min temperature f",
            "max dew point f",
            "mean dew point f",
            "min dew point f",
            "max humidity",
            "mean humidity",
            "min humidity",
            "max sea level pressure inches",
            "mean sea level pressure inches",
            "min sea level pressure inches",
            "max visibility miles",
            "mean visibility miles",
            "min visibility miles",
            "max wind speed mph",
            "mean wind speed mph",
            "max gust speed mph",
            "precipitation inches",
            "cloud cover",
            "events",
            "wind dir degrees",
            "zip code"
        ],
        "template_feedback": "in step 1 , do not use the trip table . in step 2 , consider the mean visibility miles greater than 8 and mean humidity greater than 50 conditions in place of the min temperature f greater than 50 conditions . find number of rows in place of average duration .",
        "positive_example": "find the date whose average max humidity greater than 50 and average max visibility miles greater than 8 ."
    },
    {
        "db_id": "bike_1",
        "table_names": [
            "station",
            "status",
            "trip",
            "weather"
        ],
        "column_names": [
            "id",
            "name",
            "latitude",
            "longitude",
            "dock count",
            "city",
            "installation date",
            "station id",
            "bikes available",
            "docks available",
            "time",
            "id",
            "duration",
            "start date",
            "start station name",
            "start station id",
            "end date",
            "end station name",
            "end station id",
            "bike id",
            "subscription type",
            "zip code",
            "date",
            "max temperature f",
            "mean temperature f",
            "min temperature f",
            "max dew point f",
            "mean dew point f",
            "min dew point f",
            "max humidity",
            "mean humidity",
            "min humidity",
            "max sea level pressure inches",
            "mean sea level pressure inches",
            "min sea level pressure inches",
            "max visibility miles",
            "mean visibility miles",
            "min visibility miles",
            "max wind speed mph",
            "mean wind speed mph",
            "max gust speed mph",
            "precipitation inches",
            "cloud cover",
            "events",
            "wind dir degrees",
            "zip code"
        ],
        "template_feedback": "in step 1 , do not use the trip table . in step 2 , consider the mean visibility miles greater than 8 and mean humidity greater than 50 conditions in place of the min temperature f greater than 50 conditions . find number of rows in place of average duration .",
        "positive_example": "search for the date when average humidity is more than 50 and average max visibility miles is more than 8 ."
    },
    {
        "db_id": "allergy_1",
        "table_names": [
            "allergy type",
            "has allergy",
            "student"
        ],
        "column_names": [
            "allergy name",
            "allergy type",
            "stuid",
            "allergy",
            "stuid",
            "last name",
            "first name",
            "age",
            "sex",
            "major",
            "advisor",
            "city code"
        ],
        "template_feedback": "consider the city code equals hkg conditions in place of the sex equals hkg conditions .",
        "positive_example": "i want code of city ."
    },
    {
        "db_id": "music_4",
        "table_names": [
            "artist",
            "volume",
            "music festival"
        ],
        "column_names": [
            "artist id",
            "artist",
            "age",
            "famous title",
            "famous release date",
            "volume id",
            "volume issue",
            "issue date",
            "weeks on top",
            "song",
            "artist id",
            "id",
            "music festival",
            "date of ceremony",
            "category",
            "volume",
            "result"
        ],
        "template_feedback": "additionally find result .",
        "positive_example": "calculate the outcome of each music festival ."
    },
    {
        "db_id": "document_management",
        "table_names": [
            "roles",
            "users",
            "document structures",
            "functional areas",
            "images",
            "documents",
            "document functional areas",
            "document sections",
            "document sections images"
        ],
        "column_names": [
            "role code",
            "role description",
            "user id",
            "role code",
            "user name",
            "user login",
            "password",
            "document structure code",
            "parent document structure code",
            "document structure description",
            "functional area code",
            "parent functional area code",
            "functional area description",
            "image id",
            "image alt text",
            "image name",
            "image url",
            "document code",
            "document structure code",
            "document type code",
            "access count",
            "document name",
            "document code",
            "functional area code",
            "section id",
            "document code",
            "section sequence",
            "section code",
            "section title",
            "section id",
            "image id"
        ],
        "template_feedback": "in step 1 , do not use the document structures table . in step 3 , do not return access count .",
        "positive_example": "in step 3 , look for count of average access which has lesser value in the results of step 2 ."
    },
    {
        "db_id": "products_gen_characteristics",
        "table_names": [
            "reference characteristic types",
            "reference colors",
            "reference product categories",
            "characteristics",
            "products",
            "product characteristics"
        ],
        "column_names": [
            "characteristic type code",
            "characteristic type description",
            "color code",
            "color description",
            "product category code",
            "product category description",
            "unit of measure",
            "characteristic id",
            "characteristic type code",
            "characteristic data type",
            "characteristic name",
            "other characteristic details",
            "product id",
            "color code",
            "product category code",
            "product name",
            "typical buying price",
            "typical selling price",
            "product description",
            "other product details",
            "product id",
            "characteristic id",
            "product characteristic value"
        ],
        "template_feedback": "additionally use the information from the reference colors table besides the products table . consider the color description equals yellow conditions in place of the product description equals yellow conditions . additionally find typical selling price .",
        "positive_example": "supersede description of product with color and search price of typical selling ."
    },
    {
        "db_id": "bike_1",
        "table_names": [
            "station",
            "status",
            "trip",
            "weather"
        ],
        "column_names": [
            "id",
            "name",
            "latitude",
            "longitude",
            "dock count",
            "city",
            "installation date",
            "station id",
            "bikes available",
            "docks available",
            "time",
            "id",
            "duration",
            "start date",
            "start station name",
            "start station id",
            "end date",
            "end station name",
            "end station id",
            "bike id",
            "subscription type",
            "zip code",
            "date",
            "max temperature f",
            "mean temperature f",
            "min temperature f",
            "max dew point f",
            "mean dew point f",
            "min dew point f",
            "max humidity",
            "mean humidity",
            "min humidity",
            "max sea level pressure inches",
            "mean sea level pressure inches",
            "min sea level pressure inches",
            "max visibility miles",
            "mean visibility miles",
            "min visibility miles",
            "max wind speed mph",
            "mean wind speed mph",
            "max gust speed mph",
            "precipitation inches",
            "cloud cover",
            "events",
            "wind dir degrees",
            "zip code"
        ],
        "template_feedback": "consider the max temperature f greater than 85 conditions in place of the mean dew point f greater than 85 conditions .",
        "positive_example": "i want highest dew point f ."
    },
    {
        "db_id": "bike_1",
        "table_names": [
            "station",
            "status",
            "trip",
            "weather"
        ],
        "column_names": [
            "id",
            "name",
            "latitude",
            "longitude",
            "dock count",
            "city",
            "installation date",
            "station id",
            "bikes available",
            "docks available",
            "time",
            "id",
            "duration",
            "start date",
            "start station name",
            "start station id",
            "end date",
            "end station name",
            "end station id",
            "bike id",
            "subscription type",
            "zip code",
            "date",
            "max temperature f",
            "mean temperature f",
            "min temperature f",
            "max dew point f",
            "mean dew point f",
            "min dew point f",
            "max humidity",
            "mean humidity",
            "min humidity",
            "max sea level pressure inches",
            "mean sea level pressure inches",
            "min sea level pressure inches",
            "max visibility miles",
            "mean visibility miles",
            "min visibility miles",
            "max wind speed mph",
            "mean wind speed mph",
            "max gust speed mph",
            "precipitation inches",
            "cloud cover",
            "events",
            "wind dir degrees",
            "zip code"
        ],
        "template_feedback": "consider the max temperature f greater than 85 conditions in place of the max dew point f greater than 85 conditions .",
        "positive_example": "you should replace maximum dew point ' f ' with maximum temperature ' f ' ."
    },
    {
        "db_id": "department_store",
        "table_names": [
            "addresses",
            "staff",
            "suppliers",
            "department store chain",
            "customers",
            "products",
            "supplier addresses",
            "customer addresses",
            "customer orders",
            "department stores",
            "departments",
            "order items",
            "product suppliers",
            "staff department assignments"
        ],
        "column_names": [
            "address id",
            "address details",
            "staff id",
            "staff gender",
            "staff name",
            "supplier id",
            "supplier name",
            "supplier phone",
            "department store chain id",
            "department store chain name",
            "customer id",
            "payment method code",
            "customer code",
            "customer name",
            "customer address",
            "customer phone",
            "customer email",
            "product id",
            "product type code",
            "product name",
            "product price",
            "supplier id",
            "address id",
            "date from",
            "date to",
            "customer id",
            "address id",
            "date from",
            "date to",
            "order id",
            "customer id",
            "order status code",
            "order date",
            "department store id",
            "department store chain id",
            "store name",
            "store address",
            "store phone",
            "store email",
            "department id",
            "department store id",
            "department name",
            "order item id",
            "order id",
            "product id",
            "product id",
            "supplier id",
            "date supplied from",
            "date supplied to",
            "total amount purchased",
            "total value purchased",
            "staff id",
            "department id",
            "date assigned from",
            "job title code",
            "date assigned to"
        ],
        "template_feedback": "in step 1 , additionally use the information from the customer orders table besides the customers table . additionally make sure that order status code equals new . in step 2 , additionally use the information from the customer orders table besides the customers table . additionally make sure that order status code equals pending . additionally find customer address .",
        "positive_example": "in step 1 , make sure to look for the latest date of order and search name and address of customer whose status of order is pending in step 2 ."
    },
    {
        "db_id": "products_gen_characteristics",
        "table_names": [
            "reference characteristic types",
            "reference colors",
            "reference product categories",
            "characteristics",
            "products",
            "product characteristics"
        ],
        "column_names": [
            "characteristic type code",
            "characteristic type description",
            "color code",
            "color description",
            "product category code",
            "product category description",
            "unit of measure",
            "characteristic id",
            "characteristic type code",
            "characteristic data type",
            "characteristic name",
            "other characteristic details",
            "product id",
            "color code",
            "product category code",
            "product name",
            "typical buying price",
            "typical selling price",
            "product description",
            "other product details",
            "product id",
            "characteristic id",
            "product characteristic value"
        ],
        "template_feedback": "in step 1 , do not use the product characteristics table and products table . in step 2 , find characteristic name in place of product name . in step 3 , additionally use the information from the product characteristics table besides the characteristics table .",
        "positive_example": "you need to search name , other details , data type from characteristics table where characteristics is unavailable in product characteristics table ."
    },
    {
        "db_id": "hr_1",
        "table_names": [
            "regions",
            "countries",
            "departments",
            "jobs",
            "employees",
            "job history",
            "locations"
        ],
        "column_names": [
            "region id",
            "region name",
            "country id",
            "country name",
            "region id",
            "department id",
            "department name",
            "manager id",
            "location id",
            "job id",
            "job title",
            "min salary",
            "max salary",
            "employee id",
            "first name",
            "last name",
            "email",
            "phone number",
            "hire date",
            "job id",
            "salary",
            "commission pct",
            "manager id",
            "department id",
            "employee id",
            "start date",
            "end date",
            "job id",
            "department id",
            "location id",
            "street address",
            "postal code",
            "city",
            "state province",
            "country id"
        ],
        "template_feedback": "use departments table in place of regions table . additionally make sure that department name equals marketing .",
        "positive_example": "you need to calculate the table of department rows whose name of department as marketing ."
    },
    {
        "db_id": "hr_1",
        "table_names": [
            "regions",
            "countries",
            "departments",
            "jobs",
            "employees",
            "job history",
            "locations"
        ],
        "column_names": [
            "region id",
            "region name",
            "country id",
            "country name",
            "region id",
            "department id",
            "department name",
            "manager id",
            "location id",
            "job id",
            "job title",
            "min salary",
            "max salary",
            "employee id",
            "first name",
            "last name",
            "email",
            "phone number",
            "hire date",
            "job id",
            "salary",
            "commission pct",
            "manager id",
            "department id",
            "employee id",
            "start date",
            "end date",
            "job id",
            "department id",
            "location id",
            "street address",
            "postal code",
            "city",
            "state province",
            "country id"
        ],
        "template_feedback": "use departments table in place of regions table . additionally make sure that department name equals marketing .",
        "positive_example": "search the rows of marketing department ."
    },
    {
        "db_id": "swimming",
        "table_names": [
            "swimmer",
            "stadium",
            "event",
            "record"
        ],
        "column_names": [
            "id",
            "name",
            "nationality",
            "meter 100",
            "meter 200",
            "meter 300",
            "meter 400",
            "meter 500",
            "meter 600",
            "meter 700",
            "time",
            "id",
            "name",
            "capacity",
            "city",
            "country",
            "opening year",
            "id",
            "name",
            "stadium id",
            "year",
            "id",
            "result",
            "swimmer id",
            "event id"
        ],
        "template_feedback": "find meter 300 in place of meter 600 .",
        "positive_example": "the value of meter should be 300 ."
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "table_names": [
            "reference document types",
            "roles",
            "addresses",
            "reference document status",
            "reference shipping agents",
            "documents",
            "employees",
            "document drafts",
            "draft copies",
            "circulation history",
            "documents mailed"
        ],
        "column_names": [
            "document type code",
            "document type description",
            "role code",
            "role description",
            "address id",
            "address details",
            "document status code",
            "document status description",
            "shipping agent code",
            "shipping agent name",
            "shipping agent description",
            "document id",
            "document status code",
            "document type code",
            "shipping agent code",
            "receipt date",
            "receipt number",
            "other details",
            "employee id",
            "role code",
            "employee name",
            "other details",
            "document id",
            "draft number",
            "draft details",
            "document id",
            "draft number",
            "copy number",
            "document id",
            "draft number",
            "copy number",
            "employee id",
            "document id",
            "mailed to address id",
            "mailing date"
        ],
        "template_feedback": "use reference document types table in place of documents table .",
        "positive_example": "make sure to find unique document type code ."
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "table_names": [
            "reference document types",
            "roles",
            "addresses",
            "reference document status",
            "reference shipping agents",
            "documents",
            "employees",
            "document drafts",
            "draft copies",
            "circulation history",
            "documents mailed"
        ],
        "column_names": [
            "document type code",
            "document type description",
            "role code",
            "role description",
            "address id",
            "address details",
            "document status code",
            "document status description",
            "shipping agent code",
            "shipping agent name",
            "shipping agent description",
            "document id",
            "document status code",
            "document type code",
            "shipping agent code",
            "receipt date",
            "receipt number",
            "other details",
            "employee id",
            "role code",
            "employee name",
            "other details",
            "document id",
            "draft number",
            "draft details",
            "document id",
            "draft number",
            "copy number",
            "document id",
            "draft number",
            "copy number",
            "employee id",
            "document id",
            "mailed to address id",
            "mailing date"
        ],
        "template_feedback": "use reference document types table in place of documents table .",
        "positive_example": "you should search for unique document type code ."
    },
    {
        "db_id": "musical",
        "table_names": [
            "musical",
            "actor"
        ],
        "column_names": [
            "musical id",
            "name",
            "year",
            "award",
            "category",
            "nominee",
            "result",
            "actor id",
            "name",
            "musical id",
            "character",
            "duration",
            "age"
        ],
        "template_feedback": "additionally use the information from the actor table besides the musical table . find for each value of actor 's musical id . additionally find musical 's name .",
        "positive_example": "make sure the architects are male"
    },
    {
        "db_id": "musical",
        "table_names": [
            "musical",
            "actor"
        ],
        "column_names": [
            "musical id",
            "name",
            "year",
            "award",
            "category",
            "nominee",
            "result",
            "actor id",
            "name",
            "musical id",
            "character",
            "duration",
            "age"
        ],
        "template_feedback": "additionally use the information from the actor table besides the musical table . find for each value of actor 's musical id . additionally find musical 's name .",
        "positive_example": "confirm that the architects are equivalent to male ."
    },
    {
        "db_id": "products_gen_characteristics",
        "table_names": [
            "reference characteristic types",
            "reference colors",
            "reference product categories",
            "characteristics",
            "products",
            "product characteristics"
        ],
        "column_names": [
            "characteristic type code",
            "characteristic type description",
            "color code",
            "color description",
            "product category code",
            "product category description",
            "unit of measure",
            "characteristic id",
            "characteristic type code",
            "characteristic data type",
            "characteristic name",
            "other characteristic details",
            "product id",
            "color code",
            "product category code",
            "product name",
            "typical buying price",
            "typical selling price",
            "product description",
            "other product details",
            "product id",
            "characteristic id",
            "product characteristic value"
        ],
        "template_feedback": "in step 1 , find characteristic data type in place of characteristic type code . in step 2 , additionally use the information from the product characteristics table besides the characteristics table .",
        "positive_example": "find data type of characteristic in step 1. also , in step 2 , confirm that id of characteristic is available in product characteristics ."
    },
    {
        "db_id": "products_gen_characteristics",
        "table_names": [
            "reference characteristic types",
            "reference colors",
            "reference product categories",
            "characteristics",
            "products",
            "product characteristics"
        ],
        "column_names": [
            "characteristic type code",
            "characteristic type description",
            "color code",
            "color description",
            "product category code",
            "product category description",
            "unit of measure",
            "characteristic id",
            "characteristic type code",
            "characteristic data type",
            "characteristic name",
            "other characteristic details",
            "product id",
            "color code",
            "product category code",
            "product name",
            "typical buying price",
            "typical selling price",
            "product description",
            "other product details",
            "product id",
            "characteristic id",
            "product characteristic value"
        ],
        "template_feedback": "in step 1 , find characteristic data type in place of characteristic type code . in step 2 , additionally use the information from the product characteristics table besides the characteristics table . find characteristic data type in place of characteristic type code .",
        "positive_example": "in step 2 ensure that characteristics is present under product characteristics table ."
    },
    {
        "db_id": "products_gen_characteristics",
        "table_names": [
            "reference characteristic types",
            "reference colors",
            "reference product categories",
            "characteristics",
            "products",
            "product characteristics"
        ],
        "column_names": [
            "characteristic type code",
            "characteristic type description",
            "color code",
            "color description",
            "product category code",
            "product category description",
            "unit of measure",
            "characteristic id",
            "characteristic type code",
            "characteristic data type",
            "characteristic name",
            "other characteristic details",
            "product id",
            "color code",
            "product category code",
            "product name",
            "typical buying price",
            "typical selling price",
            "product description",
            "other product details",
            "product id",
            "characteristic id",
            "product characteristic value"
        ],
        "template_feedback": "in step 1 , find characteristic data type in place of characteristic type code . in step 2 , additionally use the information from the product characteristics table besides the characteristics table . find characteristic data type in place of characteristic type code .",
        "positive_example": "in step 2 , ascertain that product characteristics table should contain characteristics ."
    },
    {
        "db_id": "candidate_poll",
        "table_names": [
            "candidate",
            "people"
        ],
        "column_names": [
            "candidate id",
            "people id",
            "poll source",
            "date",
            "support rate",
            "consider rate",
            "oppose rate",
            "unsure rate",
            "people id",
            "sex",
            "name",
            "date of birth",
            "height",
            "weight"
        ],
        "template_feedback": "additionally find support rate .",
        "positive_example": "i want the rate of support ."
    },
    {
        "db_id": "products_gen_characteristics",
        "table_names": [
            "reference characteristic types",
            "reference colors",
            "reference product categories",
            "characteristics",
            "products",
            "product characteristics"
        ],
        "column_names": [
            "characteristic type code",
            "characteristic type description",
            "color code",
            "color description",
            "product category code",
            "product category description",
            "unit of measure",
            "characteristic id",
            "characteristic type code",
            "characteristic data type",
            "characteristic name",
            "other characteristic details",
            "product id",
            "color code",
            "product category code",
            "product name",
            "typical buying price",
            "typical selling price",
            "product description",
            "other product details",
            "product id",
            "characteristic id",
            "product characteristic value"
        ],
        "template_feedback": "in step 2 , additionally use the information from the product characteristics table besides the characteristics table . find characteristic data type in place of characteristic type code .",
        "positive_example": "in step 2 , ensure to fetch only for whose characteristics is present in product characteristics ."
    },
    {
        "db_id": "products_gen_characteristics",
        "table_names": [
            "reference characteristic types",
            "reference colors",
            "reference product categories",
            "characteristics",
            "products",
            "product characteristics"
        ],
        "column_names": [
            "characteristic type code",
            "characteristic type description",
            "color code",
            "color description",
            "product category code",
            "product category description",
            "unit of measure",
            "characteristic id",
            "characteristic type code",
            "characteristic data type",
            "characteristic name",
            "other characteristic details",
            "product id",
            "color code",
            "product category code",
            "product name",
            "typical buying price",
            "typical selling price",
            "product description",
            "other product details",
            "product id",
            "characteristic id",
            "product characteristic value"
        ],
        "template_feedback": "in step 2 , additionally use the information from the product characteristics table besides the characteristics table . find characteristic data type in place of characteristic type code .",
        "positive_example": "in step 2 , make sure to retrieve only for characteristics that are available in product characteristics ."
    },
    {
        "db_id": "student_1",
        "table_names": [
            "list",
            "teachers"
        ],
        "column_names": [
            "last name",
            "first name",
            "grade",
            "class room",
            "last name",
            "first name",
            "class room"
        ],
        "template_feedback": "in step 1 , do not use the list table . in step 2 , consider the teachers 's class room equals 110 conditions in place of the list 's class room equals 110 conditions .",
        "positive_example": "ensure to find teachers 's first name in step 2 ."
    },
    {
        "db_id": "student_1",
        "table_names": [
            "list",
            "teachers"
        ],
        "column_names": [
            "last name",
            "first name",
            "grade",
            "class room",
            "last name",
            "first name",
            "class room"
        ],
        "template_feedback": "in step 1 , do not use the list table . in step 2 , consider the teachers 's class room equals 110 conditions in place of the list 's class room equals 110 conditions .",
        "positive_example": "in step 2 , make sure to find the first name of the teacher ."
    },
    {
        "db_id": "department_store",
        "table_names": [
            "addresses",
            "staff",
            "suppliers",
            "department store chain",
            "customers",
            "products",
            "supplier addresses",
            "customer addresses",
            "customer orders",
            "department stores",
            "departments",
            "order items",
            "product suppliers",
            "staff department assignments"
        ],
        "column_names": [
            "address id",
            "address details",
            "staff id",
            "staff gender",
            "staff name",
            "supplier id",
            "supplier name",
            "supplier phone",
            "department store chain id",
            "department store chain name",
            "customer id",
            "payment method code",
            "customer code",
            "customer name",
            "customer address",
            "customer phone",
            "customer email",
            "product id",
            "product type code",
            "product name",
            "product price",
            "supplier id",
            "address id",
            "date from",
            "date to",
            "customer id",
            "address id",
            "date from",
            "date to",
            "order id",
            "customer id",
            "order status code",
            "order date",
            "department store id",
            "department store chain id",
            "store name",
            "store address",
            "store phone",
            "store email",
            "department id",
            "department store id",
            "department name",
            "order item id",
            "order id",
            "product id",
            "product id",
            "supplier id",
            "date supplied from",
            "date supplied to",
            "total amount purchased",
            "total value purchased",
            "staff id",
            "department id",
            "date assigned from",
            "job title code",
            "date assigned to"
        ],
        "template_feedback": "in step 1 , additionally use the information from the customer orders table besides the customers table . do not find for each value of customers 's customer id . in step 2 , additionally make sure that order status code equals new . find customer address in place of customer email . in step 3 , additionally use the information from the customer orders table besides the customers table . do not find for each value of customers 's customer id . in step 4 , additionally make sure that order status code equals pending .",
        "positive_example": "looking for the name and addresses of those customer whose status of order is pending and new ."
    },
    {
        "db_id": "hr_1",
        "table_names": [
            "regions",
            "countries",
            "departments",
            "jobs",
            "employees",
            "job history",
            "locations"
        ],
        "column_names": [
            "region id",
            "region name",
            "country id",
            "country name",
            "region id",
            "department id",
            "department name",
            "manager id",
            "location id",
            "job id",
            "job title",
            "min salary",
            "max salary",
            "employee id",
            "first name",
            "last name",
            "email",
            "phone number",
            "hire date",
            "job id",
            "salary",
            "commission pct",
            "manager id",
            "department id",
            "employee id",
            "start date",
            "end date",
            "job id",
            "department id",
            "location id",
            "street address",
            "postal code",
            "city",
            "state province",
            "country id"
        ],
        "template_feedback": "in step 1 , do not use the jobs table . in step 2 , consider the first name like % s % or first name like % d % conditions in place of the min salary less than or equals d conditions .",
        "positive_example": "determine the rows for employees wherein their name have d or s arranged in descending order of salary ."
    },
    {
        "db_id": "assets_maintenance",
        "table_names": [
            "third party companies",
            "maintenance contracts",
            "parts",
            "skills",
            "staff",
            "assets",
            "asset parts",
            "maintenance engineers",
            "engineer skills",
            "fault log",
            "engineer visits",
            "part faults",
            "fault log parts",
            "skills required to fix"
        ],
        "column_names": [
            "company id",
            "company type",
            "company name",
            "company address",
            "other company details",
            "maintenance contract id",
            "maintenance contract company id",
            "contract start date",
            "contract end date",
            "other contract details",
            "part id",
            "part name",
            "chargeable yn",
            "chargeable amount",
            "other part details",
            "skill id",
            "skill code",
            "skill description",
            "staff id",
            "staff name",
            "gender",
            "other staff details",
            "asset id",
            "maintenance contract id",
            "supplier company id",
            "asset details",
            "asset make",
            "asset model",
            "asset acquired date",
            "asset disposed date",
            "other asset details",
            "asset id",
            "part id",
            "engineer id",
            "company id",
            "first name",
            "last name",
            "other details",
            "engineer id",
            "skill id",
            "fault log entry id",
            "asset id",
            "recorded by staff id",
            "fault log entry datetime",
            "fault description",
            "other fault details",
            "engineer visit id",
            "contact staff id",
            "engineer id",
            "fault log entry id",
            "fault status",
            "visit start datetime",
            "visit end datetime",
            "other visit details",
            "part fault id",
            "part id",
            "fault short name",
            "fault description",
            "other fault details",
            "fault log entry id",
            "part fault id",
            "fault status",
            "part fault id",
            "skill id"
        ],
        "template_feedback": "find asset model , asset make , and asset details in place of rows . order the results by asset disposed date in place of asset details .",
        "positive_example": "arrange date of asset disposed in ascending order ."
    },
    {
        "db_id": "hospital_1",
        "table_names": [
            "physician",
            "department",
            "affiliated with",
            "procedures",
            "trained in",
            "patient",
            "nurse",
            "appointment",
            "medication",
            "prescribes",
            "block",
            "room",
            "on call",
            "stay",
            "undergoes"
        ],
        "column_names": [
            "employee id",
            "name",
            "position",
            "ssn",
            "departmentid",
            "name",
            "head",
            "physician",
            "department",
            "primary affiliation",
            "code",
            "name",
            "cost",
            "physician",
            "treatment",
            "certification date",
            "certification expires",
            "ssn",
            "name",
            "address",
            "phone",
            "insurance id",
            "pcp",
            "employee id",
            "name",
            "position",
            "registered",
            "ssn",
            "appointment id",
            "patient",
            "prep nurse",
            "physician",
            "start",
            "end",
            "examination room",
            "code",
            "name",
            "brand",
            "description",
            "physician",
            "patient",
            "medication",
            "date",
            "appointment",
            "dose",
            "block floor",
            "block code",
            "roomnumber",
            "room type",
            "block floor",
            "block code",
            "unavailable",
            "nurse",
            "block floor",
            "block code",
            "oncall start",
            "oncall end",
            "stay id",
            "patient",
            "room",
            "stay start",
            "stay end",
            "patient",
            "procedures",
            "stay",
            "date undergoes",
            "physician",
            "assisting nurse"
        ],
        "template_feedback": "in step 2 , find for each value of employee id in place of physician .",
        "positive_example": "in step 2 , you need to use prep nurse ."
    },
    {
        "db_id": "bike_1",
        "table_names": [
            "station",
            "status",
            "trip",
            "weather"
        ],
        "column_names": [
            "id",
            "name",
            "latitude",
            "longitude",
            "dock count",
            "city",
            "installation date",
            "station id",
            "bikes available",
            "docks available",
            "time",
            "id",
            "duration",
            "start date",
            "start station name",
            "start station id",
            "end date",
            "end station name",
            "end station id",
            "bike id",
            "subscription type",
            "zip code",
            "date",
            "max temperature f",
            "mean temperature f",
            "min temperature f",
            "max dew point f",
            "mean dew point f",
            "min dew point f",
            "max humidity",
            "mean humidity",
            "min humidity",
            "max sea level pressure inches",
            "mean sea level pressure inches",
            "min sea level pressure inches",
            "max visibility miles",
            "mean visibility miles",
            "min visibility miles",
            "max wind speed mph",
            "mean wind speed mph",
            "max gust speed mph",
            "precipitation inches",
            "cloud cover",
            "events",
            "wind dir degrees",
            "zip code"
        ],
        "template_feedback": "in step 1 , find mean humidity in place of mean wind speed mph .",
        "positive_example": "use max humidity in place of max wind speed mph ."
    },
    {
        "db_id": "bike_1",
        "table_names": [
            "station",
            "status",
            "trip",
            "weather"
        ],
        "column_names": [
            "id",
            "name",
            "latitude",
            "longitude",
            "dock count",
            "city",
            "installation date",
            "station id",
            "bikes available",
            "docks available",
            "time",
            "id",
            "duration",
            "start date",
            "start station name",
            "start station id",
            "end date",
            "end station name",
            "end station id",
            "bike id",
            "subscription type",
            "zip code",
            "date",
            "max temperature f",
            "mean temperature f",
            "min temperature f",
            "max dew point f",
            "mean dew point f",
            "min dew point f",
            "max humidity",
            "mean humidity",
            "min humidity",
            "max sea level pressure inches",
            "mean sea level pressure inches",
            "min sea level pressure inches",
            "max visibility miles",
            "mean visibility miles",
            "min visibility miles",
            "max wind speed mph",
            "mean wind speed mph",
            "max gust speed mph",
            "precipitation inches",
            "cloud cover",
            "events",
            "wind dir degrees",
            "zip code"
        ],
        "template_feedback": "in step 1 , find mean humidity in place of mean wind speed mph .",
        "positive_example": "supersede max wind speed mph with max humidity ."
    },
    {
        "db_id": "college_3",
        "table_names": [
            "student",
            "faculty",
            "department",
            "member of",
            "course",
            "minor in",
            "enrolled in",
            "grade conversion"
        ],
        "column_names": [
            "student id",
            "last name",
            "first name",
            "age",
            "sex",
            "major",
            "advisor",
            "city code",
            "faculty id",
            "last name",
            "first name",
            "rank",
            "sex",
            "phone",
            "room",
            "building",
            "department number",
            "division",
            "department name",
            "room",
            "building",
            "department phone",
            "faculty id",
            "department number",
            "appt type",
            "course id",
            "course name",
            "credits",
            "instructor",
            "days",
            "hours",
            "department number",
            "student id",
            "department number",
            "student id",
            "course id",
            "grade",
            "letter grade",
            "grade point"
        ],
        "template_feedback": "in step 2 , additionally use the information from the minor in table besides the department table .",
        "positive_example": "in step 2 , search only those departments ' name whose department number is available in minority ."
    },
    {
        "db_id": "e_learning",
        "table_names": [
            "course authors and tutors",
            "students",
            "subjects",
            "courses",
            "student course enrolment",
            "student tests taken"
        ],
        "column_names": [
            "author id",
            "author tutor atb",
            "login name",
            "password",
            "personal name",
            "middle name",
            "family name",
            "gender mf",
            "address line 1",
            "student id",
            "date of registration",
            "date of latest logon",
            "login name",
            "password",
            "personal name",
            "middle name",
            "family name",
            "subject id",
            "subject name",
            "course id",
            "author id",
            "subject id",
            "course name",
            "course description",
            "registration id",
            "student id",
            "course id",
            "date of enrolment",
            "date of completion",
            "registration id",
            "date test taken",
            "test result"
        ],
        "template_feedback": "in step 2 , find date of enrolment in place of date of latest logon .",
        "positive_example": "use enrolment date and drop latest logon date ."
    },
    {
        "db_id": "hr_1",
        "table_names": [
            "regions",
            "countries",
            "departments",
            "jobs",
            "employees",
            "job history",
            "locations"
        ],
        "column_names": [
            "region id",
            "region name",
            "country id",
            "country name",
            "region id",
            "department id",
            "department name",
            "manager id",
            "location id",
            "job id",
            "job title",
            "min salary",
            "max salary",
            "employee id",
            "first name",
            "last name",
            "email",
            "phone number",
            "hire date",
            "job id",
            "salary",
            "commission pct",
            "manager id",
            "department id",
            "employee id",
            "start date",
            "end date",
            "job id",
            "department id",
            "location id",
            "street address",
            "postal code",
            "city",
            "state province",
            "country id"
        ],
        "template_feedback": "use employees table in place of jobs table . consider the salary is between the minimum salary employees and 2500 conditions in place of the max salary less than 2500 conditions .",
        "positive_example": "make sure the architects are male"
    },
    {
        "db_id": "hr_1",
        "table_names": [
            "regions",
            "countries",
            "departments",
            "jobs",
            "employees",
            "job history",
            "locations"
        ],
        "column_names": [
            "region id",
            "region name",
            "country id",
            "country name",
            "region id",
            "department id",
            "department name",
            "manager id",
            "location id",
            "job id",
            "job title",
            "min salary",
            "max salary",
            "employee id",
            "first name",
            "last name",
            "email",
            "phone number",
            "hire date",
            "job id",
            "salary",
            "commission pct",
            "manager id",
            "department id",
            "employee id",
            "start date",
            "end date",
            "job id",
            "department id",
            "location id",
            "street address",
            "postal code",
            "city",
            "state province",
            "country id"
        ],
        "template_feedback": "use employees table in place of jobs table . consider the salary is between the minimum salary employees and 2500 conditions in place of the max salary less than 2500 conditions .",
        "positive_example": "architects should be male ."
    },
    {
        "db_id": "voter_2",
        "table_names": [
            "student",
            "voting record"
        ],
        "column_names": [
            "student id",
            "last name",
            "first name",
            "age",
            "sex",
            "major",
            "advisor",
            "city code",
            "student id",
            "registration date",
            "election cycle",
            "president vote",
            "vice president vote",
            "secretary vote",
            "treasurer vote",
            "class president vote",
            "class senator vote"
        ],
        "template_feedback": "additionally use the information from the voting record table besides the student table .",
        "positive_example": "ensure that whose corresponding value of vice president vote is not null ."
    },
    {
        "db_id": "voter_2",
        "table_names": [
            "student",
            "voting record"
        ],
        "column_names": [
            "student id",
            "last name",
            "first name",
            "age",
            "sex",
            "major",
            "advisor",
            "city code",
            "student id",
            "registration date",
            "election cycle",
            "president vote",
            "vice president vote",
            "secretary vote",
            "treasurer vote",
            "class president vote",
            "class senator vote"
        ],
        "template_feedback": "additionally use the information from the voting record table besides the student table .",
        "positive_example": "verify that vice president vote is more than 0 ."
    },
    {
        "db_id": "voter_2",
        "table_names": [
            "student",
            "voting record"
        ],
        "column_names": [
            "student id",
            "last name",
            "first name",
            "age",
            "sex",
            "major",
            "advisor",
            "city code",
            "student id",
            "registration date",
            "election cycle",
            "president vote",
            "vice president vote",
            "secretary vote",
            "treasurer vote",
            "class president vote",
            "class senator vote"
        ],
        "template_feedback": "additionally use the information from the voting record table besides the student table .",
        "positive_example": "ascertain that value of vice president 's vote is not 0 ."
    },
    {
        "db_id": "hr_1",
        "table_names": [
            "regions",
            "countries",
            "departments",
            "jobs",
            "employees",
            "job history",
            "locations"
        ],
        "column_names": [
            "region id",
            "region name",
            "country id",
            "country name",
            "region id",
            "department id",
            "department name",
            "manager id",
            "location id",
            "job id",
            "job title",
            "min salary",
            "max salary",
            "employee id",
            "first name",
            "last name",
            "email",
            "phone number",
            "hire date",
            "job id",
            "salary",
            "commission pct",
            "manager id",
            "department id",
            "employee id",
            "start date",
            "end date",
            "job id",
            "department id",
            "location id",
            "street address",
            "postal code",
            "city",
            "state province",
            "country id"
        ],
        "template_feedback": "in step 1 , do not use the jobs table . in step 2 , consider the salary is between the minimum salary employees and 2500 conditions in place of the salary greater than 2500 and max salary less than 40000 conditions .",
        "positive_example": "make sure the architects are male"
    },
    {
        "db_id": "hr_1",
        "table_names": [
            "regions",
            "countries",
            "departments",
            "jobs",
            "employees",
            "job history",
            "locations"
        ],
        "column_names": [
            "region id",
            "region name",
            "country id",
            "country name",
            "region id",
            "department id",
            "department name",
            "manager id",
            "location id",
            "job id",
            "job title",
            "min salary",
            "max salary",
            "employee id",
            "first name",
            "last name",
            "email",
            "phone number",
            "hire date",
            "job id",
            "salary",
            "commission pct",
            "manager id",
            "department id",
            "employee id",
            "start date",
            "end date",
            "job id",
            "department id",
            "location id",
            "street address",
            "postal code",
            "city",
            "state province",
            "country id"
        ],
        "template_feedback": "in step 1 , do not use the jobs table . in step 2 , consider the salary is between the minimum salary employees and 2500 conditions in place of the salary greater than 2500 and max salary less than 40000 conditions .",
        "positive_example": "architects should be male ."
    },
    {
        "db_id": "allergy_1",
        "table_names": [
            "allergy type",
            "has allergy",
            "student"
        ],
        "column_names": [
            "allergy name",
            "allergy type",
            "stuid",
            "allergy",
            "stuid",
            "last name",
            "first name",
            "age",
            "sex",
            "major",
            "advisor",
            "city code"
        ],
        "template_feedback": "find stuid in place of major .",
        "positive_example": "drop the teachers table and only give me the nuber of rows associated with each classroom values"
    },
    {
        "db_id": "allergy_1",
        "table_names": [
            "allergy type",
            "has allergy",
            "student"
        ],
        "column_names": [
            "allergy name",
            "allergy type",
            "stuid",
            "allergy",
            "stuid",
            "last name",
            "first name",
            "age",
            "sex",
            "major",
            "advisor",
            "city code"
        ],
        "template_feedback": "find stuid in place of major .",
        "positive_example": "i only require the number of rows that are associated with each classroom values ."
    },
    {
        "db_id": "flight_1",
        "table_names": [
            "flight",
            "aircraft",
            "employee",
            "certificate"
        ],
        "column_names": [
            "flight number",
            "origin",
            "destination",
            "distance",
            "departure date",
            "arrival date",
            "price",
            "airline id",
            "airline id",
            "name",
            "distance",
            "employee id",
            "name",
            "salary",
            "employee id",
            "airline id"
        ],
        "template_feedback": "additionally find flight number .",
        "positive_example": "you need to utilize number of flight instead of 1st distance ."
    },
    {
        "db_id": "hr_1",
        "table_names": [
            "regions",
            "countries",
            "departments",
            "jobs",
            "employees",
            "job history",
            "locations"
        ],
        "column_names": [
            "region id",
            "region name",
            "country id",
            "country name",
            "region id",
            "department id",
            "department name",
            "manager id",
            "location id",
            "job id",
            "job title",
            "min salary",
            "max salary",
            "employee id",
            "first name",
            "last name",
            "email",
            "phone number",
            "hire date",
            "job id",
            "salary",
            "commission pct",
            "manager id",
            "department id",
            "employee id",
            "start date",
            "end date",
            "job id",
            "department id",
            "location id",
            "street address",
            "postal code",
            "city",
            "state province",
            "country id"
        ],
        "template_feedback": "consider the first name not like % m % conditions in place of the first name like m conditions .",
        "positive_example": "use \" does not contains m \" as a replacement for \" contains m \" ."
    },
    {
        "db_id": "hr_1",
        "table_names": [
            "regions",
            "countries",
            "departments",
            "jobs",
            "employees",
            "job history",
            "locations"
        ],
        "column_names": [
            "region id",
            "region name",
            "country id",
            "country name",
            "region id",
            "department id",
            "department name",
            "manager id",
            "location id",
            "job id",
            "job title",
            "min salary",
            "max salary",
            "employee id",
            "first name",
            "last name",
            "email",
            "phone number",
            "hire date",
            "job id",
            "salary",
            "commission pct",
            "manager id",
            "department id",
            "employee id",
            "start date",
            "end date",
            "job id",
            "department id",
            "location id",
            "street address",
            "postal code",
            "city",
            "state province",
            "country id"
        ],
        "template_feedback": "consider the first name not like % m % conditions in place of the first name like m conditions .",
        "positive_example": "it should not contain m ."
    },
    {
        "db_id": "hospital_1",
        "table_names": [
            "physician",
            "department",
            "affiliated with",
            "procedures",
            "trained in",
            "patient",
            "nurse",
            "appointment",
            "medication",
            "prescribes",
            "block",
            "room",
            "on call",
            "stay",
            "undergoes"
        ],
        "column_names": [
            "employee id",
            "name",
            "position",
            "ssn",
            "departmentid",
            "name",
            "head",
            "physician",
            "department",
            "primary affiliation",
            "code",
            "name",
            "cost",
            "physician",
            "treatment",
            "certification date",
            "certification expires",
            "ssn",
            "name",
            "address",
            "phone",
            "insurance id",
            "pcp",
            "employee id",
            "name",
            "position",
            "registered",
            "ssn",
            "appointment id",
            "patient",
            "prep nurse",
            "physician",
            "start",
            "end",
            "examination room",
            "code",
            "name",
            "brand",
            "description",
            "physician",
            "patient",
            "medication",
            "date",
            "appointment",
            "dose",
            "block floor",
            "block code",
            "roomnumber",
            "room type",
            "block floor",
            "block code",
            "unavailable",
            "nurse",
            "block floor",
            "block code",
            "oncall start",
            "oncall end",
            "stay id",
            "patient",
            "room",
            "stay start",
            "stay end",
            "patient",
            "procedures",
            "stay",
            "date undergoes",
            "physician",
            "assisting nurse"
        ],
        "template_feedback": "in step 1 , do not use the physician table . in step 2 , find for each value of nurse 's employee id in place of physician 's name .",
        "positive_example": "in step 2 , you need to search for the number of similar rows from appointment table for all the nurse 's ."
    },
    {
        "db_id": "hospital_1",
        "table_names": [
            "physician",
            "department",
            "affiliated with",
            "procedures",
            "trained in",
            "patient",
            "nurse",
            "appointment",
            "medication",
            "prescribes",
            "block",
            "room",
            "on call",
            "stay",
            "undergoes"
        ],
        "column_names": [
            "employee id",
            "name",
            "position",
            "ssn",
            "departmentid",
            "name",
            "head",
            "physician",
            "department",
            "primary affiliation",
            "code",
            "name",
            "cost",
            "physician",
            "treatment",
            "certification date",
            "certification expires",
            "ssn",
            "name",
            "address",
            "phone",
            "insurance id",
            "pcp",
            "employee id",
            "name",
            "position",
            "registered",
            "ssn",
            "appointment id",
            "patient",
            "prep nurse",
            "physician",
            "start",
            "end",
            "examination room",
            "code",
            "name",
            "brand",
            "description",
            "physician",
            "patient",
            "medication",
            "date",
            "appointment",
            "dose",
            "block floor",
            "block code",
            "roomnumber",
            "room type",
            "block floor",
            "block code",
            "unavailable",
            "nurse",
            "block floor",
            "block code",
            "oncall start",
            "oncall end",
            "stay id",
            "patient",
            "room",
            "stay start",
            "stay end",
            "patient",
            "procedures",
            "stay",
            "date undergoes",
            "physician",
            "assisting nurse"
        ],
        "template_feedback": "in step 1 , do not use the physician table . in step 2 , find for each value of nurse 's employee id in place of physician 's name .",
        "positive_example": "in step 2 , you need to count the number of rows of appointment table equivalent to all nurses ."
    },
    {
        "db_id": "tracking_software_problems",
        "table_names": [
            "problem category codes",
            "problem log",
            "problem status codes",
            "product",
            "staff",
            "problems"
        ],
        "column_names": [
            "problem category code",
            "problem category description",
            "problem log id",
            "assigned to staff id",
            "problem id",
            "problem category code",
            "problem status code",
            "log entry date",
            "log entry description",
            "log entry fix",
            "other log details",
            "problem status code",
            "problem status description",
            "product id",
            "product name",
            "product details",
            "staff id",
            "staff first name",
            "staff last name",
            "other staff details",
            "problem id",
            "product id",
            "closure authorised by staff id",
            "reported by staff id",
            "date problem reported",
            "date problem closed",
            "problem description",
            "other problem details"
        ],
        "template_feedback": "in step 2 , find for each value of product name in place of problems 's product id . in step 3 , find number of rows in place of product details .",
        "positive_example": "i want count of step 2 ."
    },
    {
        "db_id": "twitter_1",
        "table_names": [
            "follows",
            "tweets",
            "user profiles"
        ],
        "column_names": [
            "user id",
            "follower id",
            "id",
            "user id",
            "text",
            "create date",
            "uid",
            "name",
            "email",
            "partition id",
            "followers"
        ],
        "template_feedback": "in step 3 , make sure that the corresponding value in step 2 less than 2 .",
        "positive_example": "in step 3 exchange greater with lesser ."
    },
    {
        "db_id": "twitter_1",
        "table_names": [
            "follows",
            "tweets",
            "user profiles"
        ],
        "column_names": [
            "user id",
            "follower id",
            "id",
            "user id",
            "text",
            "create date",
            "uid",
            "name",
            "email",
            "partition id",
            "followers"
        ],
        "template_feedback": "in step 3 , make sure that the corresponding value in step 2 less than 2 .",
        "positive_example": "you should use less than in place of more than in step 3 ."
    },
    {
        "db_id": "chinook_1",
        "table_names": [
            "album",
            "artist",
            "customer",
            "employee",
            "genre",
            "invoice",
            "invoice line",
            "media type",
            "playlist",
            "playlist track",
            "track"
        ],
        "column_names": [
            "album id",
            "title",
            "artist id",
            "artist id",
            "name",
            "customer id",
            "first name",
            "last name",
            "company",
            "address",
            "city",
            "state",
            "country",
            "postal code",
            "phone",
            "fax",
            "email",
            "support representative id",
            "employee id",
            "last name",
            "first name",
            "title",
            "reports to",
            "birth date",
            "hire date",
            "address",
            "city",
            "state",
            "country",
            "postal code",
            "phone",
            "fax",
            "email",
            "genre id",
            "name",
            "invoice id",
            "customer id",
            "invoice date",
            "billing address",
            "billing city",
            "billing state",
            "billing country",
            "billing postal code",
            "total",
            "invoice line id",
            "invoice id",
            "track id",
            "unit price",
            "quantity",
            "media type id",
            "name",
            "play list id",
            "name",
            "play list id",
            "track id",
            "track id",
            "name",
            "album id",
            "media type id",
            "genre id",
            "composer",
            "milliseconds",
            "bytes",
            "unit price"
        ],
        "template_feedback": "in step 2 , find the number of rows for each value of support representative id . in step 3 , make sure that the corresponding value in step 2 less than or equals 20 . find customer 's last name in place of employee 's last name .",
        "positive_example": "it should be \" less than or equals \" in place of \" greater than \" in step 3 ."
    },
    {
        "db_id": "chinook_1",
        "table_names": [
            "album",
            "artist",
            "customer",
            "employee",
            "genre",
            "invoice",
            "invoice line",
            "media type",
            "playlist",
            "playlist track",
            "track"
        ],
        "column_names": [
            "album id",
            "title",
            "artist id",
            "artist id",
            "name",
            "customer id",
            "first name",
            "last name",
            "company",
            "address",
            "city",
            "state",
            "country",
            "postal code",
            "phone",
            "fax",
            "email",
            "support representative id",
            "employee id",
            "last name",
            "first name",
            "title",
            "reports to",
            "birth date",
            "hire date",
            "address",
            "city",
            "state",
            "country",
            "postal code",
            "phone",
            "fax",
            "email",
            "genre id",
            "name",
            "invoice id",
            "customer id",
            "invoice date",
            "billing address",
            "billing city",
            "billing state",
            "billing country",
            "billing postal code",
            "total",
            "invoice line id",
            "invoice id",
            "track id",
            "unit price",
            "quantity",
            "media type id",
            "name",
            "play list id",
            "name",
            "play list id",
            "track id",
            "track id",
            "name",
            "album id",
            "media type id",
            "genre id",
            "composer",
            "milliseconds",
            "bytes",
            "unit price"
        ],
        "template_feedback": "in step 2 , find the number of rows for each value of support representative id . in step 3 , make sure that the corresponding value in step 2 less than or equals 20 . find customer 's last name in place of employee 's last name .",
        "positive_example": "in step 3 , supplant \" greater than \" with \" less than or equals \" ."
    },
    {
        "db_id": "loan_1",
        "table_names": [
            "bank",
            "customer",
            "loan"
        ],
        "column_names": [
            "branch id",
            "bname",
            "no of customers",
            "city",
            "state",
            "customer id",
            "customer name",
            "account type",
            "account balance",
            "number of loans",
            "credit score",
            "branch id",
            "state",
            "loan id",
            "loan type",
            "customer id",
            "branch id",
            "amount"
        ],
        "template_feedback": "in step 2 , additionally make sure that account type equals saving .",
        "positive_example": "in step 2 , ensure that customer has saving account ."
    },
    {
        "db_id": "bike_1",
        "table_names": [
            "station",
            "status",
            "trip",
            "weather"
        ],
        "column_names": [
            "id",
            "name",
            "latitude",
            "longitude",
            "dock count",
            "city",
            "installation date",
            "station id",
            "bikes available",
            "docks available",
            "time",
            "id",
            "duration",
            "start date",
            "start station name",
            "start station id",
            "end date",
            "end station name",
            "end station id",
            "bike id",
            "subscription type",
            "zip code",
            "date",
            "max temperature f",
            "mean temperature f",
            "min temperature f",
            "max dew point f",
            "mean dew point f",
            "min dew point f",
            "max humidity",
            "mean humidity",
            "min humidity",
            "max sea level pressure inches",
            "mean sea level pressure inches",
            "min sea level pressure inches",
            "max visibility miles",
            "mean visibility miles",
            "min visibility miles",
            "max wind speed mph",
            "mean wind speed mph",
            "max gust speed mph",
            "precipitation inches",
            "cloud cover",
            "events",
            "wind dir degrees",
            "zip code"
        ],
        "template_feedback": "in step 1 , find the average mean visibility miles for each value of zip code .",
        "positive_example": "change mean humidity with max visibility miles ."
    },
    {
        "db_id": "bike_1",
        "table_names": [
            "station",
            "status",
            "trip",
            "weather"
        ],
        "column_names": [
            "id",
            "name",
            "latitude",
            "longitude",
            "dock count",
            "city",
            "installation date",
            "station id",
            "bikes available",
            "docks available",
            "time",
            "id",
            "duration",
            "start date",
            "start station name",
            "start station id",
            "end date",
            "end station name",
            "end station id",
            "bike id",
            "subscription type",
            "zip code",
            "date",
            "max temperature f",
            "mean temperature f",
            "min temperature f",
            "max dew point f",
            "mean dew point f",
            "min dew point f",
            "max humidity",
            "mean humidity",
            "min humidity",
            "max sea level pressure inches",
            "mean sea level pressure inches",
            "min sea level pressure inches",
            "max visibility miles",
            "mean visibility miles",
            "min visibility miles",
            "max wind speed mph",
            "mean wind speed mph",
            "max gust speed mph",
            "precipitation inches",
            "cloud cover",
            "events",
            "wind dir degrees",
            "zip code"
        ],
        "template_feedback": "in step 1 , find the average mean visibility miles for each value of zip code .",
        "positive_example": "i want miles of max visibility in place of mean humidity ."
    },
    {
        "db_id": "flight_1",
        "table_names": [
            "flight",
            "aircraft",
            "employee",
            "certificate"
        ],
        "column_names": [
            "flight number",
            "origin",
            "destination",
            "distance",
            "departure date",
            "arrival date",
            "price",
            "airline id",
            "airline id",
            "name",
            "distance",
            "employee id",
            "name",
            "salary",
            "employee id",
            "airline id"
        ],
        "template_feedback": "in step 1 , do not use the certificate table .",
        "positive_example": "it should be \" equals or greater than \" instead of \" greater than \" in step 2 ."
    },
    {
        "db_id": "flight_1",
        "table_names": [
            "flight",
            "aircraft",
            "employee",
            "certificate"
        ],
        "column_names": [
            "flight number",
            "origin",
            "destination",
            "distance",
            "departure date",
            "arrival date",
            "price",
            "airline id",
            "airline id",
            "name",
            "distance",
            "employee id",
            "name",
            "salary",
            "employee id",
            "airline id"
        ],
        "template_feedback": "in step 1 , do not use the certificate table .",
        "positive_example": "in step 2 , i want equivalent or higher than value and not only greater than ."
    },
    {
        "db_id": "hr_1",
        "table_names": [
            "regions",
            "countries",
            "departments",
            "jobs",
            "employees",
            "job history",
            "locations"
        ],
        "column_names": [
            "region id",
            "region name",
            "country id",
            "country name",
            "region id",
            "department id",
            "department name",
            "manager id",
            "location id",
            "job id",
            "job title",
            "min salary",
            "max salary",
            "employee id",
            "first name",
            "last name",
            "email",
            "phone number",
            "hire date",
            "job id",
            "salary",
            "commission pct",
            "manager id",
            "department id",
            "employee id",
            "start date",
            "end date",
            "job id",
            "department id",
            "location id",
            "street address",
            "postal code",
            "city",
            "state province",
            "country id"
        ],
        "template_feedback": "in step 1 , do not use the job history table . in step 2 , you should consider both of the conditions rather than either of them . consider the salary between 8000 and 12000 and employees 's department id not equals 40 and commission pct not equals null conditions in place of the salary greater than 8000 or job history 's department id equals 12000 conditions .",
        "positive_example": "give me the number of distinct values of the school id in the basketbal match table"
    },
    {
        "db_id": "hr_1",
        "table_names": [
            "regions",
            "countries",
            "departments",
            "jobs",
            "employees",
            "job history",
            "locations"
        ],
        "column_names": [
            "region id",
            "region name",
            "country id",
            "country name",
            "region id",
            "department id",
            "department name",
            "manager id",
            "location id",
            "job id",
            "job title",
            "min salary",
            "max salary",
            "employee id",
            "first name",
            "last name",
            "email",
            "phone number",
            "hire date",
            "job id",
            "salary",
            "commission pct",
            "manager id",
            "department id",
            "employee id",
            "start date",
            "end date",
            "job id",
            "department id",
            "location id",
            "street address",
            "postal code",
            "city",
            "state province",
            "country id"
        ],
        "template_feedback": "in step 1 , do not use the job history table . in step 2 , you should consider both of the conditions rather than either of them . consider the salary between 8000 and 12000 and employees 's department id not equals 40 and commission pct not equals null conditions in place of the salary greater than 8000 or job history 's department id equals 12000 conditions .",
        "positive_example": "you need find the different value of school id from the basketball match table ."
    },
    {
        "db_id": "flight_company",
        "table_names": [
            "airport",
            "operate company",
            "flight"
        ],
        "column_names": [
            "id",
            "city",
            "country",
            "iata",
            "icao",
            "name",
            "id",
            "name",
            "type",
            "principal activities",
            "incorporated in",
            "group equity shareholding",
            "id",
            "vehicle flight number",
            "date",
            "pilot",
            "velocity",
            "altitude",
            "airport id",
            "company id"
        ],
        "template_feedback": "in step 2 , find for each value of flight 's id in place of airport id . in step 3 , find iata in place of vehicle flight number .",
        "positive_example": "i wan the employee id of the people who authorised the destruction not the people who detroyed the document"
    },
    {
        "db_id": "flight_company",
        "table_names": [
            "airport",
            "operate company",
            "flight"
        ],
        "column_names": [
            "id",
            "city",
            "country",
            "iata",
            "icao",
            "name",
            "id",
            "name",
            "type",
            "principal activities",
            "incorporated in",
            "group equity shareholding",
            "id",
            "vehicle flight number",
            "date",
            "pilot",
            "velocity",
            "altitude",
            "airport id",
            "company id"
        ],
        "template_feedback": "in step 2 , find for each value of flight 's id in place of airport id . in step 3 , find iata in place of vehicle flight number .",
        "positive_example": "you need the id of employee who authorised losses ."
    },
    {
        "db_id": "local_govt_and_lot",
        "table_names": [
            "customers",
            "properties",
            "residents",
            "organizations",
            "services",
            "residents services",
            "things",
            "customer events",
            "customer event notes",
            "timed status of things",
            "timed locations of things"
        ],
        "column_names": [
            "customer id",
            "customer details",
            "property id",
            "property type code",
            "property address",
            "other details",
            "resident id",
            "property id",
            "date moved in",
            "date moved out",
            "other details",
            "organization id",
            "parent organization id",
            "organization details",
            "service id",
            "organization id",
            "service type code",
            "service details",
            "resident id",
            "service id",
            "date moved in",
            "property id",
            "date requested",
            "date provided",
            "other details",
            "thing id",
            "organization id",
            "type of thing code",
            "service type code",
            "service details",
            "customer event id",
            "customer id",
            "date moved in",
            "property id",
            "resident id",
            "thing id",
            "customer event note id",
            "customer event id",
            "service type code",
            "resident id",
            "property id",
            "date moved in",
            "thing id",
            "date and date",
            "status of thing code",
            "thing id",
            "date and time",
            "location code"
        ],
        "template_feedback": "in step 2 , find things 's thing id in place of organization id .",
        "positive_example": "you need to use id of things ."
    },
    {
        "db_id": "products_gen_characteristics",
        "table_names": [
            "reference characteristic types",
            "reference colors",
            "reference product categories",
            "characteristics",
            "products",
            "product characteristics"
        ],
        "column_names": [
            "characteristic type code",
            "characteristic type description",
            "color code",
            "color description",
            "product category code",
            "product category description",
            "unit of measure",
            "characteristic id",
            "characteristic type code",
            "characteristic data type",
            "characteristic name",
            "other characteristic details",
            "product id",
            "color code",
            "product category code",
            "product name",
            "typical buying price",
            "typical selling price",
            "product description",
            "other product details",
            "product id",
            "characteristic id",
            "product characteristic value"
        ],
        "template_feedback": "additionally use the information from the product characteristics table and characteristics table besides the products table . consider the characteristic name equals hot conditions in place of the product name equals hot conditions .",
        "positive_example": "you have to use name of characteristic as substitute of product ."
    },
    {
        "db_id": "products_gen_characteristics",
        "table_names": [
            "reference characteristic types",
            "reference colors",
            "reference product categories",
            "characteristics",
            "products",
            "product characteristics"
        ],
        "column_names": [
            "characteristic type code",
            "characteristic type description",
            "color code",
            "color description",
            "product category code",
            "product category description",
            "unit of measure",
            "characteristic id",
            "characteristic type code",
            "characteristic data type",
            "characteristic name",
            "other characteristic details",
            "product id",
            "color code",
            "product category code",
            "product name",
            "typical buying price",
            "typical selling price",
            "product description",
            "other product details",
            "product id",
            "characteristic id",
            "product characteristic value"
        ],
        "template_feedback": "additionally use the information from the product characteristics table and characteristics table besides the products table . consider the characteristic name equals hot conditions in place of the product name equals hot conditions .",
        "positive_example": "looking for name of characteristic in place product ."
    },
    {
        "db_id": "bike_1",
        "table_names": [
            "station",
            "status",
            "trip",
            "weather"
        ],
        "column_names": [
            "id",
            "name",
            "latitude",
            "longitude",
            "dock count",
            "city",
            "installation date",
            "station id",
            "bikes available",
            "docks available",
            "time",
            "id",
            "duration",
            "start date",
            "start station name",
            "start station id",
            "end date",
            "end station name",
            "end station id",
            "bike id",
            "subscription type",
            "zip code",
            "date",
            "max temperature f",
            "mean temperature f",
            "min temperature f",
            "max dew point f",
            "mean dew point f",
            "min dew point f",
            "max humidity",
            "mean humidity",
            "min humidity",
            "max sea level pressure inches",
            "mean sea level pressure inches",
            "min sea level pressure inches",
            "max visibility miles",
            "mean visibility miles",
            "min visibility miles",
            "max wind speed mph",
            "mean wind speed mph",
            "max gust speed mph",
            "precipitation inches",
            "cloud cover",
            "events",
            "wind dir degrees",
            "zip code"
        ],
        "template_feedback": "in step 1 , do not use the trip table . in step 2 , consider the mean visibility miles greater than 8 and mean humidity greater than 50 conditions in place of the min sea level pressure inches greater than 50 conditions . find number of rows in place of average duration .",
        "positive_example": "find rows of weather table whose max humidity grater than 50 and max visibility miles grater than 8 ."
    },
    {
        "db_id": "bike_1",
        "table_names": [
            "station",
            "status",
            "trip",
            "weather"
        ],
        "column_names": [
            "id",
            "name",
            "latitude",
            "longitude",
            "dock count",
            "city",
            "installation date",
            "station id",
            "bikes available",
            "docks available",
            "time",
            "id",
            "duration",
            "start date",
            "start station name",
            "start station id",
            "end date",
            "end station name",
            "end station id",
            "bike id",
            "subscription type",
            "zip code",
            "date",
            "max temperature f",
            "mean temperature f",
            "min temperature f",
            "max dew point f",
            "mean dew point f",
            "min dew point f",
            "max humidity",
            "mean humidity",
            "min humidity",
            "max sea level pressure inches",
            "mean sea level pressure inches",
            "min sea level pressure inches",
            "max visibility miles",
            "mean visibility miles",
            "min visibility miles",
            "max wind speed mph",
            "mean wind speed mph",
            "max gust speed mph",
            "precipitation inches",
            "cloud cover",
            "events",
            "wind dir degrees",
            "zip code"
        ],
        "template_feedback": "in step 1 , do not use the trip table . in step 2 , consider the mean visibility miles greater than 8 and mean humidity greater than 50 conditions in place of the min sea level pressure inches greater than 50 conditions . find number of rows in place of average duration .",
        "positive_example": "looking for the rows of weather 's that are having miles of max visibility , max humidity is higher than 8 and 50 respectively ."
    },
    {
        "db_id": "customer_complaints",
        "table_names": [
            "staff",
            "customers",
            "products",
            "complaints"
        ],
        "column_names": [
            "staff id",
            "gender",
            "first name",
            "last name",
            "email address",
            "phone number",
            "customer id",
            "customer type code",
            "address line 1",
            "address line 2",
            "town city",
            "state",
            "email address",
            "phone number",
            "product id",
            "parent product id",
            "product category code",
            "date product first available",
            "date product discontinued",
            "product name",
            "product description",
            "product price",
            "complaint id",
            "product id",
            "customer id",
            "complaint outcome code",
            "complaint status code",
            "complaint type code",
            "date complaint raised",
            "date complaint closed",
            "staff id"
        ],
        "template_feedback": "in step 2 , do not find for each value of complaints 's customer id . in step 3 , order the results by date complaint raised in place of number of rows .",
        "positive_example": "in step 2 , you should list the date on which complaint was raised arranged in descending order and in step 3 , list the first phone number that is present in step 2 ."
    },
    {
        "db_id": "music_4",
        "table_names": [
            "artist",
            "volume",
            "music festival"
        ],
        "column_names": [
            "artist id",
            "artist",
            "age",
            "famous title",
            "famous release date",
            "volume id",
            "volume issue",
            "issue date",
            "weeks on top",
            "song",
            "artist id",
            "id",
            "music festival",
            "date of ceremony",
            "category",
            "volume",
            "result"
        ],
        "template_feedback": "in step 1 , do not use the volume table and artist table . in step 2 , find date of ceremony in place of famous release date .",
        "positive_example": "you should use ceremony date and not the date of famous release ."
    },
    {
        "db_id": "architecture",
        "table_names": [
            "architect",
            "bridge",
            "mill"
        ],
        "column_names": [
            "id",
            "name",
            "nationality",
            "gender",
            "architect id",
            "id",
            "name",
            "location",
            "length meters",
            "length feet",
            "architect id",
            "id",
            "location",
            "name",
            "type",
            "built year",
            "notes"
        ],
        "template_feedback": "find average length feet in place of average length meters .",
        "positive_example": "i want length in feet , not meters ."
    },
    {
        "db_id": "hospital_1",
        "table_names": [
            "physician",
            "department",
            "affiliated with",
            "procedures",
            "trained in",
            "patient",
            "nurse",
            "appointment",
            "medication",
            "prescribes",
            "block",
            "room",
            "on call",
            "stay",
            "undergoes"
        ],
        "column_names": [
            "employee id",
            "name",
            "position",
            "ssn",
            "departmentid",
            "name",
            "head",
            "physician",
            "department",
            "primary affiliation",
            "code",
            "name",
            "cost",
            "physician",
            "treatment",
            "certification date",
            "certification expires",
            "ssn",
            "name",
            "address",
            "phone",
            "insurance id",
            "pcp",
            "employee id",
            "name",
            "position",
            "registered",
            "ssn",
            "appointment id",
            "patient",
            "prep nurse",
            "physician",
            "start",
            "end",
            "examination room",
            "code",
            "name",
            "brand",
            "description",
            "physician",
            "patient",
            "medication",
            "date",
            "appointment",
            "dose",
            "block floor",
            "block code",
            "roomnumber",
            "room type",
            "block floor",
            "block code",
            "unavailable",
            "nurse",
            "block floor",
            "block code",
            "oncall start",
            "oncall end",
            "stay id",
            "patient",
            "room",
            "stay start",
            "stay end",
            "patient",
            "procedures",
            "stay",
            "date undergoes",
            "physician",
            "assisting nurse"
        ],
        "template_feedback": "in step 1 , do not use the prescribes table . in step 2 , find for each value of employee id in place of prescribes 's physician .",
        "positive_example": "in step 2 , make sure you search for the appointment prep nurse ."
    },
    {
        "db_id": "bike_1",
        "table_names": [
            "station",
            "status",
            "trip",
            "weather"
        ],
        "column_names": [
            "id",
            "name",
            "latitude",
            "longitude",
            "dock count",
            "city",
            "installation date",
            "station id",
            "bikes available",
            "docks available",
            "time",
            "id",
            "duration",
            "start date",
            "start station name",
            "start station id",
            "end date",
            "end station name",
            "end station id",
            "bike id",
            "subscription type",
            "zip code",
            "date",
            "max temperature f",
            "mean temperature f",
            "min temperature f",
            "max dew point f",
            "mean dew point f",
            "min dew point f",
            "max humidity",
            "mean humidity",
            "min humidity",
            "max sea level pressure inches",
            "mean sea level pressure inches",
            "min sea level pressure inches",
            "max visibility miles",
            "mean visibility miles",
            "min visibility miles",
            "max wind speed mph",
            "mean wind speed mph",
            "max gust speed mph",
            "precipitation inches",
            "cloud cover",
            "events",
            "wind dir degrees",
            "zip code"
        ],
        "template_feedback": "consider the mean visibility miles greater than 8 and mean humidity greater than 50 conditions in place of the min visibility miles greater than 50 conditions . find number of rows in place of average rows .",
        "positive_example": "don 't find average rows just rows for whose max humidity above 50 , max visibility miles above 8 ."
    },
    {
        "db_id": "bike_1",
        "table_names": [
            "station",
            "status",
            "trip",
            "weather"
        ],
        "column_names": [
            "id",
            "name",
            "latitude",
            "longitude",
            "dock count",
            "city",
            "installation date",
            "station id",
            "bikes available",
            "docks available",
            "time",
            "id",
            "duration",
            "start date",
            "start station name",
            "start station id",
            "end date",
            "end station name",
            "end station id",
            "bike id",
            "subscription type",
            "zip code",
            "date",
            "max temperature f",
            "mean temperature f",
            "min temperature f",
            "max dew point f",
            "mean dew point f",
            "min dew point f",
            "max humidity",
            "mean humidity",
            "min humidity",
            "max sea level pressure inches",
            "mean sea level pressure inches",
            "min sea level pressure inches",
            "max visibility miles",
            "mean visibility miles",
            "min visibility miles",
            "max wind speed mph",
            "mean wind speed mph",
            "max gust speed mph",
            "precipitation inches",
            "cloud cover",
            "events",
            "wind dir degrees",
            "zip code"
        ],
        "template_feedback": "consider the mean visibility miles greater than 8 and mean humidity greater than 50 conditions in place of the min visibility miles greater than 50 conditions . find number of rows in place of average rows .",
        "positive_example": "only search for rows whose whose max humidity is above 50 , max visibility miles is above 8 ."
    },
    {
        "db_id": "products_gen_characteristics",
        "table_names": [
            "reference characteristic types",
            "reference colors",
            "reference product categories",
            "characteristics",
            "products",
            "product characteristics"
        ],
        "column_names": [
            "characteristic type code",
            "characteristic type description",
            "color code",
            "color description",
            "product category code",
            "product category description",
            "unit of measure",
            "characteristic id",
            "characteristic type code",
            "characteristic data type",
            "characteristic name",
            "other characteristic details",
            "product id",
            "color code",
            "product category code",
            "product name",
            "typical buying price",
            "typical selling price",
            "product description",
            "other product details",
            "product id",
            "characteristic id",
            "product characteristic value"
        ],
        "template_feedback": "additionally use the information from the reference colors table besides the products table . consider the color description equals yellow conditions in place of the product description equals yellow conditions . additionally find typical selling price .",
        "positive_example": "for whom description of color is equivalent to yellow , make sure to look for such name of product , price of typical buying and price of typical selling from products table ."
    },
    {
        "db_id": "musical",
        "table_names": [
            "musical",
            "actor"
        ],
        "column_names": [
            "musical id",
            "name",
            "year",
            "award",
            "category",
            "nominee",
            "result",
            "actor id",
            "name",
            "musical id",
            "character",
            "duration",
            "age"
        ],
        "template_feedback": "in step 2 , use musical table in place of actor table . make sure the musical 's musical id is not one of the results of step 1 the actor id is not one of the results of step 1 . find musical 's name in place of actor 's name .",
        "positive_example": "in step 2 , substitute musical table and id with actor table and id ."
    },
    {
        "db_id": "hospital_1",
        "table_names": [
            "physician",
            "department",
            "affiliated with",
            "procedures",
            "trained in",
            "patient",
            "nurse",
            "appointment",
            "medication",
            "prescribes",
            "block",
            "room",
            "on call",
            "stay",
            "undergoes"
        ],
        "column_names": [
            "employee id",
            "name",
            "position",
            "ssn",
            "departmentid",
            "name",
            "head",
            "physician",
            "department",
            "primary affiliation",
            "code",
            "name",
            "cost",
            "physician",
            "treatment",
            "certification date",
            "certification expires",
            "ssn",
            "name",
            "address",
            "phone",
            "insurance id",
            "pcp",
            "employee id",
            "name",
            "position",
            "registered",
            "ssn",
            "appointment id",
            "patient",
            "prep nurse",
            "physician",
            "start",
            "end",
            "examination room",
            "code",
            "name",
            "brand",
            "description",
            "physician",
            "patient",
            "medication",
            "date",
            "appointment",
            "dose",
            "block floor",
            "block code",
            "roomnumber",
            "room type",
            "block floor",
            "block code",
            "unavailable",
            "nurse",
            "block floor",
            "block code",
            "oncall start",
            "oncall end",
            "stay id",
            "patient",
            "room",
            "stay start",
            "stay end",
            "patient",
            "procedures",
            "stay",
            "date undergoes",
            "physician",
            "assisting nurse"
        ],
        "template_feedback": "in step 1 , do not use the physician table . in step 2 , find for each value of nurse 's employee id in place of nurse 's position . in step 3 , find nurse 's name in place of physician 's name .",
        "positive_example": "i want the prep nurse and nurse 's , confirm id of nurseemployee equivalent with appointment prep nurse ."
    },
    {
        "db_id": "network_2",
        "table_names": [
            "person",
            "person friend"
        ],
        "column_names": [
            "name",
            "age",
            "city",
            "gender",
            "job",
            "name",
            "friend",
            "year"
        ],
        "template_feedback": "additionally use the information from the person friend table besides the person table . consider the person friend 's name equals alice conditions in place of the job equals alice conditions .",
        "positive_example": "you need to use friend ."
    },
    {
        "db_id": "products_gen_characteristics",
        "table_names": [
            "reference characteristic types",
            "reference colors",
            "reference product categories",
            "characteristics",
            "products",
            "product characteristics"
        ],
        "column_names": [
            "characteristic type code",
            "characteristic type description",
            "color code",
            "color description",
            "product category code",
            "product category description",
            "unit of measure",
            "characteristic id",
            "characteristic type code",
            "characteristic data type",
            "characteristic name",
            "other characteristic details",
            "product id",
            "color code",
            "product category code",
            "product name",
            "typical buying price",
            "typical selling price",
            "product description",
            "other product details",
            "product id",
            "characteristic id",
            "product characteristic value"
        ],
        "template_feedback": "in step 1 , use reference product categories table in place of product characteristics table , products table , and characteristics table in step 2 , consider the reference product categories 's product category code equals herbs conditions in place of the products 's product category code equals herbs conditions . find unit of measure in place of characteristic name .",
        "positive_example": "find the unit of measurement of herbs ."
    },
    {
        "db_id": "musical",
        "table_names": [
            "musical",
            "actor"
        ],
        "column_names": [
            "musical id",
            "name",
            "year",
            "award",
            "category",
            "nominee",
            "result",
            "actor id",
            "name",
            "musical id",
            "character",
            "duration",
            "age"
        ],
        "template_feedback": "in step 1 , find actor 's musical id in place of actor 's name . in step 2 , use musical table in place of actor table . make sure the musical 's musical id is not one of the results of step 1 the actor 's musical id is not one of the results of step 1 . find musical 's name in place of actor 's name .",
        "positive_example": "change actor table with musical table in step 2 ."
    },
    {
        "db_id": "musical",
        "table_names": [
            "musical",
            "actor"
        ],
        "column_names": [
            "musical id",
            "name",
            "year",
            "award",
            "category",
            "nominee",
            "result",
            "actor id",
            "name",
            "musical id",
            "character",
            "duration",
            "age"
        ],
        "template_feedback": "in step 1 , find actor 's musical id in place of actor 's name . in step 2 , use musical table in place of actor table . make sure the musical 's musical id is not one of the results of step 1 the actor 's musical id is not one of the results of step 1 . find musical 's name in place of actor 's name .",
        "positive_example": "in step 2 , find musical table in place of actor table ."
    },
    {
        "db_id": "bike_1",
        "table_names": [
            "station",
            "status",
            "trip",
            "weather"
        ],
        "column_names": [
            "id",
            "name",
            "latitude",
            "longitude",
            "dock count",
            "city",
            "installation date",
            "station id",
            "bikes available",
            "docks available",
            "time",
            "id",
            "duration",
            "start date",
            "start station name",
            "start station id",
            "end date",
            "end station name",
            "end station id",
            "bike id",
            "subscription type",
            "zip code",
            "date",
            "max temperature f",
            "mean temperature f",
            "min temperature f",
            "max dew point f",
            "mean dew point f",
            "min dew point f",
            "max humidity",
            "mean humidity",
            "min humidity",
            "max sea level pressure inches",
            "mean sea level pressure inches",
            "min sea level pressure inches",
            "max visibility miles",
            "mean visibility miles",
            "min visibility miles",
            "max wind speed mph",
            "mean wind speed mph",
            "max gust speed mph",
            "precipitation inches",
            "cloud cover",
            "events",
            "wind dir degrees",
            "zip code"
        ],
        "template_feedback": "consider the max temperature f greater than 85 conditions in place of the min visibility miles greater than 85 conditions .",
        "positive_example": "you need to use highest temperature f ."
    },
    {
        "db_id": "soccer_2",
        "table_names": [
            "college",
            "player",
            "tryout"
        ],
        "column_names": [
            "college name",
            "state",
            "enrollment",
            "player id",
            "player name",
            "yes card",
            "training hours",
            "player id",
            "college name",
            "player position",
            "decision"
        ],
        "template_feedback": "you should consider both of the conditions rather than either of them .",
        "positive_example": "swap \" or \" with \" and \" ."
    },
    {
        "db_id": "soccer_2",
        "table_names": [
            "college",
            "player",
            "tryout"
        ],
        "column_names": [
            "college name",
            "state",
            "enrollment",
            "player id",
            "player name",
            "yes card",
            "training hours",
            "player id",
            "college name",
            "player position",
            "decision"
        ],
        "template_feedback": "you should consider both of the conditions rather than either of them .",
        "positive_example": "interchange or with and ."
    },
    {
        "db_id": "bike_1",
        "table_names": [
            "station",
            "status",
            "trip",
            "weather"
        ],
        "column_names": [
            "id",
            "name",
            "latitude",
            "longitude",
            "dock count",
            "city",
            "installation date",
            "station id",
            "bikes available",
            "docks available",
            "time",
            "id",
            "duration",
            "start date",
            "start station name",
            "start station id",
            "end date",
            "end station name",
            "end station id",
            "bike id",
            "subscription type",
            "zip code",
            "date",
            "max temperature f",
            "mean temperature f",
            "min temperature f",
            "max dew point f",
            "mean dew point f",
            "min dew point f",
            "max humidity",
            "mean humidity",
            "min humidity",
            "max sea level pressure inches",
            "mean sea level pressure inches",
            "min sea level pressure inches",
            "max visibility miles",
            "mean visibility miles",
            "min visibility miles",
            "max wind speed mph",
            "mean wind speed mph",
            "max gust speed mph",
            "precipitation inches",
            "cloud cover",
            "events",
            "wind dir degrees",
            "zip code"
        ],
        "template_feedback": "additionally use the information from the weather table besides the trip table . remove the end station name equals san francisco caltrain 2 ( 330 townsend ) and duration greater than 60 conditions . find for each value of weather 's zip code whose average mean temperature f greater than 60 . find id in place of start date .",
        "positive_example": "i want trip id whose average max temperature is more than 60 ."
    },
    {
        "db_id": "products_gen_characteristics",
        "table_names": [
            "reference characteristic types",
            "reference colors",
            "reference product categories",
            "characteristics",
            "products",
            "product characteristics"
        ],
        "column_names": [
            "characteristic type code",
            "characteristic type description",
            "color code",
            "color description",
            "product category code",
            "product category description",
            "unit of measure",
            "characteristic id",
            "characteristic type code",
            "characteristic data type",
            "characteristic name",
            "other characteristic details",
            "product id",
            "color code",
            "product category code",
            "product name",
            "typical buying price",
            "typical selling price",
            "product description",
            "other product details",
            "product id",
            "characteristic id",
            "product characteristic value"
        ],
        "template_feedback": "in step 1 , do not use the reference characteristic types table . in step 2 , find characteristic data type in place of characteristic type description . in step 3 , additionally use the information from the product characteristics table besides the characteristics table .",
        "positive_example": "you need to search name , other details , data type from characteristics table where characteristics is unavailable in product characteristics table ."
    },
    {
        "db_id": "swimming",
        "table_names": [
            "swimmer",
            "stadium",
            "event",
            "record"
        ],
        "column_names": [
            "id",
            "name",
            "nationality",
            "meter 100",
            "meter 200",
            "meter 300",
            "meter 400",
            "meter 500",
            "meter 600",
            "meter 700",
            "time",
            "id",
            "name",
            "capacity",
            "city",
            "country",
            "opening year",
            "id",
            "name",
            "stadium id",
            "year",
            "id",
            "result",
            "swimmer id",
            "event id"
        ],
        "template_feedback": "find meter 300 and meter 200 in place of meter 700 and meter 400 .",
        "positive_example": "you need to look for 100 and 300 meter , also remove 100 and 400 meter ."
    },
    {
        "db_id": "musical",
        "table_names": [
            "musical",
            "actor"
        ],
        "column_names": [
            "musical id",
            "name",
            "year",
            "award",
            "category",
            "nominee",
            "result",
            "actor id",
            "name",
            "musical id",
            "character",
            "duration",
            "age"
        ],
        "template_feedback": "in step 2 , use musical table in place of actor table . make sure the musical 's musical id is not one of the results of step 1 the actor 's name is not one of the results of step 1 . find musical 's name in place of actor 's name .",
        "positive_example": "in step 1 and 2 , i want the id of musical and alter actor with musical ."
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "table_names": [
            "reference document types",
            "reference calendar",
            "reference locations",
            "roles",
            "all documents",
            "employees",
            "document locations",
            "documents to be destroyed"
        ],
        "column_names": [
            "document type code",
            "document type name",
            "document type description",
            "calendar date",
            "day number",
            "location code",
            "location name",
            "location description",
            "role code",
            "role name",
            "role description",
            "document id",
            "date stored",
            "document type code",
            "document name",
            "document description",
            "other details",
            "employee id",
            "role code",
            "employee name",
            "gender mfu",
            "date of birth",
            "other details",
            "document id",
            "location code",
            "date in location from",
            "date in locaton to",
            "document id",
            "destruction authorised by employee id",
            "destroyed by employee id",
            "planned destruction date",
            "actual destruction date",
            "other details"
        ],
        "template_feedback": "use documents to be destroyed table in place of employees table . remove the employee name equals leo conditions . make sure no repetition in the results .",
        "positive_example": "determine the employee id who authorized the destruction of documents ."
    },
    {
        "db_id": "dorm_1",
        "table_names": [
            "student",
            "dorm",
            "dorm amenity",
            "has amenity",
            "lives in"
        ],
        "column_names": [
            "student id",
            "last name",
            "first name",
            "age",
            "sex",
            "major",
            "advisor",
            "city code",
            "dorm id",
            "dorm name",
            "student capacity",
            "gender",
            "amenity id",
            "amenity name",
            "dorm id",
            "amenity id",
            "student id",
            "dorm id",
            "room number"
        ],
        "template_feedback": "additionally make sure that sex equals m . additionally find number of rows .",
        "positive_example": "make sure students are male ."
    },
    {
        "db_id": "city_record",
        "table_names": [
            "city",
            "match",
            "temperature",
            "hosting city"
        ],
        "column_names": [
            "city id",
            "city",
            "hanzi",
            "hanyu pinyin",
            "regional population",
            "gdp",
            "match id",
            "date",
            "venue",
            "score",
            "result",
            "competition",
            "city id",
            "jan",
            "feb",
            "mar",
            "apr",
            "jun",
            "jul",
            "aug",
            "sep",
            "oct",
            "nov",
            "dec",
            "year",
            "match id",
            "host city"
        ],
        "template_feedback": "additionally find gdp .",
        "positive_example": "need to find city only once ."
    },
    {
        "db_id": "city_record",
        "table_names": [
            "city",
            "match",
            "temperature",
            "hosting city"
        ],
        "column_names": [
            "city id",
            "city",
            "hanzi",
            "hanyu pinyin",
            "regional population",
            "gdp",
            "match id",
            "date",
            "venue",
            "score",
            "result",
            "competition",
            "city id",
            "jan",
            "feb",
            "mar",
            "apr",
            "jun",
            "jul",
            "aug",
            "sep",
            "oct",
            "nov",
            "dec",
            "year",
            "match id",
            "host city"
        ],
        "template_feedback": "additionally find gdp .",
        "positive_example": "you need to search for the city ."
    },
    {
        "db_id": "city_record",
        "table_names": [
            "city",
            "match",
            "temperature",
            "hosting city"
        ],
        "column_names": [
            "city id",
            "city",
            "hanzi",
            "hanyu pinyin",
            "regional population",
            "gdp",
            "match id",
            "date",
            "venue",
            "score",
            "result",
            "competition",
            "city id",
            "jan",
            "feb",
            "mar",
            "apr",
            "jun",
            "jul",
            "aug",
            "sep",
            "oct",
            "nov",
            "dec",
            "year",
            "match id",
            "host city"
        ],
        "template_feedback": "additionally find gdp .",
        "positive_example": "search for the city not more than 1 ."
    },
    {
        "db_id": "candidate_poll",
        "table_names": [
            "candidate",
            "people"
        ],
        "column_names": [
            "candidate id",
            "people id",
            "poll source",
            "date",
            "support rate",
            "consider rate",
            "oppose rate",
            "unsure rate",
            "people id",
            "sex",
            "name",
            "date of birth",
            "height",
            "weight"
        ],
        "template_feedback": "find support rate in place of maximum consider rate . order the results descending by support rate . only show me the first 3 results .",
        "positive_example": "provide the first three rows for maximum support from the candidate table ."
    },
    {
        "db_id": "dorm_1",
        "table_names": [
            "student",
            "dorm",
            "dorm amenity",
            "has amenity",
            "lives in"
        ],
        "column_names": [
            "student id",
            "last name",
            "first name",
            "age",
            "sex",
            "major",
            "advisor",
            "city code",
            "dorm id",
            "dorm name",
            "student capacity",
            "gender",
            "amenity id",
            "amenity name",
            "dorm id",
            "amenity id",
            "student id",
            "dorm id",
            "room number"
        ],
        "template_feedback": "consider the student capacity less than 100 or student capacity greater than 300 conditions in place of the student capacity less than 300 or student capacity equals 100 conditions .",
        "positive_example": "there should be \" greater than \" in place of \" equals \" ."
    },
    {
        "db_id": "dorm_1",
        "table_names": [
            "student",
            "dorm",
            "dorm amenity",
            "has amenity",
            "lives in"
        ],
        "column_names": [
            "student id",
            "last name",
            "first name",
            "age",
            "sex",
            "major",
            "advisor",
            "city code",
            "dorm id",
            "dorm name",
            "student capacity",
            "gender",
            "amenity id",
            "amenity name",
            "dorm id",
            "amenity id",
            "student id",
            "dorm id",
            "room number"
        ],
        "template_feedback": "consider the student capacity less than 100 or student capacity greater than 300 conditions in place of the student capacity less than 300 or student capacity equals 100 conditions .",
        "positive_example": "you should use \" more than \" ."
    },
    {
        "db_id": "products_gen_characteristics",
        "table_names": [
            "reference characteristic types",
            "reference colors",
            "reference product categories",
            "characteristics",
            "products",
            "product characteristics"
        ],
        "column_names": [
            "characteristic type code",
            "characteristic type description",
            "color code",
            "color description",
            "product category code",
            "product category description",
            "unit of measure",
            "characteristic id",
            "characteristic type code",
            "characteristic data type",
            "characteristic name",
            "other characteristic details",
            "product id",
            "color code",
            "product category code",
            "product name",
            "typical buying price",
            "typical selling price",
            "product description",
            "other product details",
            "product id",
            "characteristic id",
            "product characteristic value"
        ],
        "template_feedback": "in step 1 , do not use the product characteristics table and products table . in step 2 , remove the product name equals cumin conditions . find characteristic data type in place of characteristic type code . in step 3 , additionally use the information from the product characteristics table besides the characteristics table .",
        "positive_example": "look for the name of characteristic , details of other characteristic , type of data characteristic from characteristic table for whom its similar value is not available in product characteristic table ."
    },
    {
        "db_id": "twitter_1",
        "table_names": [
            "follows",
            "tweets",
            "user profiles"
        ],
        "column_names": [
            "user id",
            "follower id",
            "id",
            "user id",
            "text",
            "create date",
            "uid",
            "name",
            "email",
            "partition id",
            "followers"
        ],
        "template_feedback": "in step 1 , additionally use the information from the follows table besides the user profiles table . find for value of user id in place of name .",
        "positive_example": "in step 1 find number of rows in corresponding follows table ."
    },
    {
        "db_id": "twitter_1",
        "table_names": [
            "follows",
            "tweets",
            "user profiles"
        ],
        "column_names": [
            "user id",
            "follower id",
            "id",
            "user id",
            "text",
            "create date",
            "uid",
            "name",
            "email",
            "partition id",
            "followers"
        ],
        "template_feedback": "in step 1 , additionally use the information from the follows table besides the user profiles table . find for value of user id in place of name .",
        "positive_example": "count the number of rows from follows table ."
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "table_names": [
            "reference payment methods",
            "reference service types",
            "addresses",
            "products",
            "marketing regions",
            "clients",
            "drama workshop groups",
            "performers",
            "customers",
            "stores",
            "bookings",
            "performers in bookings",
            "customer orders",
            "order items",
            "invoices",
            "services",
            "bookings services",
            "invoice items"
        ],
        "column_names": [
            "payment method code",
            "payment method description",
            "service type code",
            "parent service type code",
            "service type description",
            "address id",
            "line 1",
            "line 2",
            "city town",
            "state county",
            "other details",
            "product id",
            "product name",
            "product price",
            "product description",
            "other product service details",
            "marketing region code",
            "marketing region name",
            "marketing region descriptrion",
            "other details",
            "client id",
            "address id",
            "customer email address",
            "customer name",
            "customer phone",
            "other details",
            "workshop group id",
            "address id",
            "currency code",
            "marketing region code",
            "store name",
            "store phone",
            "store email address",
            "other details",
            "performer id",
            "address id",
            "customer name",
            "customer phone",
            "customer email address",
            "other details",
            "customer id",
            "address id",
            "customer name",
            "customer phone",
            "customer email address",
            "other details",
            "store id",
            "address id",
            "marketing region code",
            "store name",
            "store phone",
            "store email address",
            "other details",
            "booking id",
            "customer id",
            "workshop group id",
            "status code",
            "store id",
            "order date",
            "planned delivery date",
            "actual delivery date",
            "other order details",
            "order id",
            "performer id",
            "order id",
            "customer id",
            "store id",
            "order date",
            "planned delivery date",
            "actual delivery date",
            "other order details",
            "order item id",
            "order id",
            "product id",
            "order quantity",
            "other item details",
            "invoice id",
            "order id",
            "payment method code",
            "product id",
            "order quantity",
            "other item details",
            "order item id",
            "service id",
            "service type code",
            "workshop group id",
            "product description",
            "product name",
            "product price",
            "other product service details",
            "order id",
            "product id",
            "invoice item id",
            "invoice id",
            "order id",
            "order item id",
            "product id",
            "order quantity",
            "other item details"
        ],
        "template_feedback": "in step 1 , find for each value of product id in place of order id .",
        "positive_example": "in step 1 , you should use id of product ."
    },
    {
        "db_id": "bike_1",
        "table_names": [
            "station",
            "status",
            "trip",
            "weather"
        ],
        "column_names": [
            "id",
            "name",
            "latitude",
            "longitude",
            "dock count",
            "city",
            "installation date",
            "station id",
            "bikes available",
            "docks available",
            "time",
            "id",
            "duration",
            "start date",
            "start station name",
            "start station id",
            "end date",
            "end station name",
            "end station id",
            "bike id",
            "subscription type",
            "zip code",
            "date",
            "max temperature f",
            "mean temperature f",
            "min temperature f",
            "max dew point f",
            "mean dew point f",
            "min dew point f",
            "max humidity",
            "mean humidity",
            "min humidity",
            "max sea level pressure inches",
            "mean sea level pressure inches",
            "min sea level pressure inches",
            "max visibility miles",
            "mean visibility miles",
            "min visibility miles",
            "max wind speed mph",
            "mean wind speed mph",
            "max gust speed mph",
            "precipitation inches",
            "cloud cover",
            "events",
            "wind dir degrees",
            "zip code"
        ],
        "template_feedback": "consider the mean sea level pressure inches between 30.3 and 31 conditions in place of the min temperature f between 31 and 30.3 conditions .",
        "positive_example": "max temperature f is wrong , take max sea level pressure inches in place of it and remove \" equals or \" ."
    },
    {
        "db_id": "bike_1",
        "table_names": [
            "station",
            "status",
            "trip",
            "weather"
        ],
        "column_names": [
            "id",
            "name",
            "latitude",
            "longitude",
            "dock count",
            "city",
            "installation date",
            "station id",
            "bikes available",
            "docks available",
            "time",
            "id",
            "duration",
            "start date",
            "start station name",
            "start station id",
            "end date",
            "end station name",
            "end station id",
            "bike id",
            "subscription type",
            "zip code",
            "date",
            "max temperature f",
            "mean temperature f",
            "min temperature f",
            "max dew point f",
            "mean dew point f",
            "min dew point f",
            "max humidity",
            "mean humidity",
            "min humidity",
            "max sea level pressure inches",
            "mean sea level pressure inches",
            "min sea level pressure inches",
            "max visibility miles",
            "mean visibility miles",
            "min visibility miles",
            "max wind speed mph",
            "mean wind speed mph",
            "max gust speed mph",
            "precipitation inches",
            "cloud cover",
            "events",
            "wind dir degrees",
            "zip code"
        ],
        "template_feedback": "consider the mean sea level pressure inches between 30.3 and 31 conditions in place of the min temperature f between 31 and 30.3 conditions .",
        "positive_example": "you have to delete \" equals or \" and \" max temperature f \" and instead use max sea level pressure inches ."
    },
    {
        "db_id": "bike_1",
        "table_names": [
            "station",
            "status",
            "trip",
            "weather"
        ],
        "column_names": [
            "id",
            "name",
            "latitude",
            "longitude",
            "dock count",
            "city",
            "installation date",
            "station id",
            "bikes available",
            "docks available",
            "time",
            "id",
            "duration",
            "start date",
            "start station name",
            "start station id",
            "end date",
            "end station name",
            "end station id",
            "bike id",
            "subscription type",
            "zip code",
            "date",
            "max temperature f",
            "mean temperature f",
            "min temperature f",
            "max dew point f",
            "mean dew point f",
            "min dew point f",
            "max humidity",
            "mean humidity",
            "min humidity",
            "max sea level pressure inches",
            "mean sea level pressure inches",
            "min sea level pressure inches",
            "max visibility miles",
            "mean visibility miles",
            "min visibility miles",
            "max wind speed mph",
            "mean wind speed mph",
            "max gust speed mph",
            "precipitation inches",
            "cloud cover",
            "events",
            "wind dir degrees",
            "zip code"
        ],
        "template_feedback": "consider the mean sea level pressure inches between 30.3 and 31 conditions in place of the min temperature f between 31 and 30.3 conditions .",
        "positive_example": "omit the phrase \" equals or \" and supplant max temperature f with max sea level pressure inches ."
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "table_names": [
            "reference payment methods",
            "reference service types",
            "addresses",
            "products",
            "marketing regions",
            "clients",
            "drama workshop groups",
            "performers",
            "customers",
            "stores",
            "bookings",
            "performers in bookings",
            "customer orders",
            "order items",
            "invoices",
            "services",
            "bookings services",
            "invoice items"
        ],
        "column_names": [
            "payment method code",
            "payment method description",
            "service type code",
            "parent service type code",
            "service type description",
            "address id",
            "line 1",
            "line 2",
            "city town",
            "state county",
            "other details",
            "product id",
            "product name",
            "product price",
            "product description",
            "other product service details",
            "marketing region code",
            "marketing region name",
            "marketing region descriptrion",
            "other details",
            "client id",
            "address id",
            "customer email address",
            "customer name",
            "customer phone",
            "other details",
            "workshop group id",
            "address id",
            "currency code",
            "marketing region code",
            "store name",
            "store phone",
            "store email address",
            "other details",
            "performer id",
            "address id",
            "customer name",
            "customer phone",
            "customer email address",
            "other details",
            "customer id",
            "address id",
            "customer name",
            "customer phone",
            "customer email address",
            "other details",
            "store id",
            "address id",
            "marketing region code",
            "store name",
            "store phone",
            "store email address",
            "other details",
            "booking id",
            "customer id",
            "workshop group id",
            "status code",
            "store id",
            "order date",
            "planned delivery date",
            "actual delivery date",
            "other order details",
            "order id",
            "performer id",
            "order id",
            "customer id",
            "store id",
            "order date",
            "planned delivery date",
            "actual delivery date",
            "other order details",
            "order item id",
            "order id",
            "product id",
            "order quantity",
            "other item details",
            "invoice id",
            "order id",
            "payment method code",
            "product id",
            "order quantity",
            "other item details",
            "order item id",
            "service id",
            "service type code",
            "workshop group id",
            "product description",
            "product name",
            "product price",
            "other product service details",
            "order id",
            "product id",
            "invoice item id",
            "invoice id",
            "order id",
            "order item id",
            "product id",
            "order quantity",
            "other item details"
        ],
        "template_feedback": "remove the marketing region code equals fr conditions .",
        "positive_example": "discard \" whose marketing region code equals fr \" ."
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "table_names": [
            "reference payment methods",
            "reference service types",
            "addresses",
            "products",
            "marketing regions",
            "clients",
            "drama workshop groups",
            "performers",
            "customers",
            "stores",
            "bookings",
            "performers in bookings",
            "customer orders",
            "order items",
            "invoices",
            "services",
            "bookings services",
            "invoice items"
        ],
        "column_names": [
            "payment method code",
            "payment method description",
            "service type code",
            "parent service type code",
            "service type description",
            "address id",
            "line 1",
            "line 2",
            "city town",
            "state county",
            "other details",
            "product id",
            "product name",
            "product price",
            "product description",
            "other product service details",
            "marketing region code",
            "marketing region name",
            "marketing region descriptrion",
            "other details",
            "client id",
            "address id",
            "customer email address",
            "customer name",
            "customer phone",
            "other details",
            "workshop group id",
            "address id",
            "currency code",
            "marketing region code",
            "store name",
            "store phone",
            "store email address",
            "other details",
            "performer id",
            "address id",
            "customer name",
            "customer phone",
            "customer email address",
            "other details",
            "customer id",
            "address id",
            "customer name",
            "customer phone",
            "customer email address",
            "other details",
            "store id",
            "address id",
            "marketing region code",
            "store name",
            "store phone",
            "store email address",
            "other details",
            "booking id",
            "customer id",
            "workshop group id",
            "status code",
            "store id",
            "order date",
            "planned delivery date",
            "actual delivery date",
            "other order details",
            "order id",
            "performer id",
            "order id",
            "customer id",
            "store id",
            "order date",
            "planned delivery date",
            "actual delivery date",
            "other order details",
            "order item id",
            "order id",
            "product id",
            "order quantity",
            "other item details",
            "invoice id",
            "order id",
            "payment method code",
            "product id",
            "order quantity",
            "other item details",
            "order item id",
            "service id",
            "service type code",
            "workshop group id",
            "product description",
            "product name",
            "product price",
            "other product service details",
            "order id",
            "product id",
            "invoice item id",
            "invoice id",
            "order id",
            "order item id",
            "product id",
            "order quantity",
            "other item details"
        ],
        "template_feedback": "remove the marketing region code equals fr conditions .",
        "positive_example": "omit the phrase \" whose marketing region code equals fr \" ."
    },
    {
        "db_id": "shop_membership",
        "table_names": [
            "member",
            "branch",
            "membership register branch",
            "purchase"
        ],
        "column_names": [
            "member id",
            "card number",
            "name",
            "hometown",
            "level",
            "branch id",
            "name",
            "open year",
            "address road",
            "city",
            "membership amount",
            "member id",
            "branch id",
            "register year",
            "member id",
            "branch id",
            "year",
            "total pounds"
        ],
        "template_feedback": "in step 2 , do not use the member table and membership register branch table . in step 3 , consider the membership amount greater than 100 conditions in place of the level greater than 100 conditions .",
        "positive_example": "in step 1 , confirm that amount of membership is higher than 100 ."
    },
    {
        "db_id": "bike_1",
        "table_names": [
            "station",
            "status",
            "trip",
            "weather"
        ],
        "column_names": [
            "id",
            "name",
            "latitude",
            "longitude",
            "dock count",
            "city",
            "installation date",
            "station id",
            "bikes available",
            "docks available",
            "time",
            "id",
            "duration",
            "start date",
            "start station name",
            "start station id",
            "end date",
            "end station name",
            "end station id",
            "bike id",
            "subscription type",
            "zip code",
            "date",
            "max temperature f",
            "mean temperature f",
            "min temperature f",
            "max dew point f",
            "mean dew point f",
            "min dew point f",
            "max humidity",
            "mean humidity",
            "min humidity",
            "max sea level pressure inches",
            "mean sea level pressure inches",
            "min sea level pressure inches",
            "max visibility miles",
            "mean visibility miles",
            "min visibility miles",
            "max wind speed mph",
            "mean wind speed mph",
            "max gust speed mph",
            "precipitation inches",
            "cloud cover",
            "events",
            "wind dir degrees",
            "zip code"
        ],
        "template_feedback": "in step 1 , do not use the trip table . in step 2 , consider the mean visibility miles greater than 8 and mean humidity greater than 50 conditions in place of the max sea level pressure inches greater than 50 conditions . find number of rows in place of average duration .",
        "positive_example": "find number of rows of weather table whose max humidity beyond 50 and max visibility miles beyond 8 ."
    },
    {
        "db_id": "bike_1",
        "table_names": [
            "station",
            "status",
            "trip",
            "weather"
        ],
        "column_names": [
            "id",
            "name",
            "latitude",
            "longitude",
            "dock count",
            "city",
            "installation date",
            "station id",
            "bikes available",
            "docks available",
            "time",
            "id",
            "duration",
            "start date",
            "start station name",
            "start station id",
            "end date",
            "end station name",
            "end station id",
            "bike id",
            "subscription type",
            "zip code",
            "date",
            "max temperature f",
            "mean temperature f",
            "min temperature f",
            "max dew point f",
            "mean dew point f",
            "min dew point f",
            "max humidity",
            "mean humidity",
            "min humidity",
            "max sea level pressure inches",
            "mean sea level pressure inches",
            "min sea level pressure inches",
            "max visibility miles",
            "mean visibility miles",
            "min visibility miles",
            "max wind speed mph",
            "mean wind speed mph",
            "max gust speed mph",
            "precipitation inches",
            "cloud cover",
            "events",
            "wind dir degrees",
            "zip code"
        ],
        "template_feedback": "in step 1 , do not use the trip table . in step 2 , consider the mean visibility miles greater than 8 and mean humidity greater than 50 conditions in place of the max sea level pressure inches greater than 50 conditions . find number of rows in place of average duration .",
        "positive_example": "provide the number of rows from weather table where max humidity is above 50 and max visibility miles is above 8 ."
    },
    {
        "db_id": "e_government",
        "table_names": [
            "addresses",
            "services",
            "forms",
            "individuals",
            "organizations",
            "parties",
            "organization contact individuals",
            "party addresses",
            "party forms",
            "party services"
        ],
        "column_names": [
            "address id",
            "line 1 number building",
            "town city",
            "zip postcode",
            "state province county",
            "country",
            "service id",
            "service type code",
            "service name",
            "service descriptio",
            "form id",
            "form type code",
            "service id",
            "form number",
            "form name",
            "form description",
            "individual id",
            "individual first name",
            "individual middle name",
            "inidividual phone",
            "individual email",
            "individual address",
            "individual last name",
            "organization id",
            "date formed",
            "organization name",
            "uk vat number",
            "party id",
            "payment method code",
            "party phone",
            "party email",
            "individual id",
            "organization id",
            "date contact from",
            "date contact to",
            "party id",
            "address id",
            "date address from",
            "address type code",
            "date address to",
            "party id",
            "form id",
            "date completion started",
            "form status code",
            "date fully completed",
            "booking id",
            "customer id",
            "service id",
            "service datetime",
            "booking made date"
        ],
        "template_feedback": "consider the line 1 number building like % 6862 kaitlyn knolls % conditions in place of the town city equals 6862 kaitlyn knolls conditions .",
        "positive_example": "i want 1 line number building ."
    },
    {
        "db_id": "e_government",
        "table_names": [
            "addresses",
            "services",
            "forms",
            "individuals",
            "organizations",
            "parties",
            "organization contact individuals",
            "party addresses",
            "party forms",
            "party services"
        ],
        "column_names": [
            "address id",
            "line 1 number building",
            "town city",
            "zip postcode",
            "state province county",
            "country",
            "service id",
            "service type code",
            "service name",
            "service descriptio",
            "form id",
            "form type code",
            "service id",
            "form number",
            "form name",
            "form description",
            "individual id",
            "individual first name",
            "individual middle name",
            "inidividual phone",
            "individual email",
            "individual address",
            "individual last name",
            "organization id",
            "date formed",
            "organization name",
            "uk vat number",
            "party id",
            "payment method code",
            "party phone",
            "party email",
            "individual id",
            "organization id",
            "date contact from",
            "date contact to",
            "party id",
            "address id",
            "date address from",
            "address type code",
            "date address to",
            "party id",
            "form id",
            "date completion started",
            "form status code",
            "date fully completed",
            "booking id",
            "customer id",
            "service id",
            "service datetime",
            "booking made date"
        ],
        "template_feedback": "consider the line 1 number building like % 6862 kaitlyn knolls % conditions in place of the town city equals 6862 kaitlyn knolls conditions .",
        "positive_example": "you should search for number building of line 1 instead of city of town ."
    },
    {
        "db_id": "e_learning",
        "table_names": [
            "course authors and tutors",
            "students",
            "subjects",
            "courses",
            "student course enrolment",
            "student tests taken"
        ],
        "column_names": [
            "author id",
            "author tutor atb",
            "login name",
            "password",
            "personal name",
            "middle name",
            "family name",
            "gender mf",
            "address line 1",
            "student id",
            "date of registration",
            "date of latest logon",
            "login name",
            "password",
            "personal name",
            "middle name",
            "family name",
            "subject id",
            "subject name",
            "course id",
            "author id",
            "subject id",
            "course name",
            "course description",
            "registration id",
            "student id",
            "course id",
            "date of enrolment",
            "date of completion",
            "registration id",
            "date test taken",
            "test result"
        ],
        "template_feedback": "in step 2 , additionally find date of completion .",
        "positive_example": "you should exchange one of the enrolment date with completion date ."
    },
    {
        "db_id": "sakila_1",
        "table_names": [
            "actor",
            "address",
            "category",
            "city",
            "country",
            "customer",
            "film",
            "film actor",
            "film category",
            "film text",
            "inventory",
            "language",
            "payment",
            "rental",
            "staff",
            "store"
        ],
        "column_names": [
            "actor id",
            "first name",
            "last name",
            "last update",
            "address id",
            "address",
            "address2",
            "district",
            "city id",
            "postal code",
            "phone",
            "last update",
            "category id",
            "name",
            "last update",
            "city id",
            "city",
            "country id",
            "last update",
            "country id",
            "country",
            "last update",
            "customer id",
            "store id",
            "first name",
            "last name",
            "email",
            "address id",
            "active",
            "create date",
            "last update",
            "film id",
            "title",
            "description",
            "release year",
            "language id",
            "original language id",
            "rental duration",
            "rental rate",
            "length",
            "replacement cost",
            "rating",
            "special features",
            "last update",
            "actor id",
            "film id",
            "last update",
            "film id",
            "category id",
            "last update",
            "film id",
            "title",
            "description",
            "inventory id",
            "film id",
            "store id",
            "last update",
            "language id",
            "name",
            "last update",
            "payment id",
            "customer id",
            "staff id",
            "rental id",
            "amount",
            "payment date",
            "last update",
            "rental id",
            "rental date",
            "inventory id",
            "customer id",
            "return date",
            "staff id",
            "last update",
            "staff id",
            "first name",
            "last name",
            "address id",
            "picture",
            "email",
            "store id",
            "active",
            "username",
            "password",
            "last update",
            "store id",
            "manager staff id",
            "address id",
            "last update"
        ],
        "template_feedback": "in step 3 , find number of rows in place of rows .",
        "positive_example": "need to change city id with address id in step 2 ."
    },
    {
        "db_id": "sakila_1",
        "table_names": [
            "actor",
            "address",
            "category",
            "city",
            "country",
            "customer",
            "film",
            "film actor",
            "film category",
            "film text",
            "inventory",
            "language",
            "payment",
            "rental",
            "staff",
            "store"
        ],
        "column_names": [
            "actor id",
            "first name",
            "last name",
            "last update",
            "address id",
            "address",
            "address2",
            "district",
            "city id",
            "postal code",
            "phone",
            "last update",
            "category id",
            "name",
            "last update",
            "city id",
            "city",
            "country id",
            "last update",
            "country id",
            "country",
            "last update",
            "customer id",
            "store id",
            "first name",
            "last name",
            "email",
            "address id",
            "active",
            "create date",
            "last update",
            "film id",
            "title",
            "description",
            "release year",
            "language id",
            "original language id",
            "rental duration",
            "rental rate",
            "length",
            "replacement cost",
            "rating",
            "special features",
            "last update",
            "actor id",
            "film id",
            "last update",
            "film id",
            "category id",
            "last update",
            "film id",
            "title",
            "description",
            "inventory id",
            "film id",
            "store id",
            "last update",
            "language id",
            "name",
            "last update",
            "payment id",
            "customer id",
            "staff id",
            "rental id",
            "amount",
            "payment date",
            "last update",
            "rental id",
            "rental date",
            "inventory id",
            "customer id",
            "return date",
            "staff id",
            "last update",
            "staff id",
            "first name",
            "last name",
            "address id",
            "picture",
            "email",
            "store id",
            "active",
            "username",
            "password",
            "last update",
            "store id",
            "manager staff id",
            "address id",
            "last update"
        ],
        "template_feedback": "in step 3 , find number of rows in place of rows .",
        "positive_example": "in step 2 , use id of address in place of city ."
    },
    {
        "db_id": "hospital_1",
        "table_names": [
            "physician",
            "department",
            "affiliated with",
            "procedures",
            "trained in",
            "patient",
            "nurse",
            "appointment",
            "medication",
            "prescribes",
            "block",
            "room",
            "on call",
            "stay",
            "undergoes"
        ],
        "column_names": [
            "employee id",
            "name",
            "position",
            "ssn",
            "departmentid",
            "name",
            "head",
            "physician",
            "department",
            "primary affiliation",
            "code",
            "name",
            "cost",
            "physician",
            "treatment",
            "certification date",
            "certification expires",
            "ssn",
            "name",
            "address",
            "phone",
            "insurance id",
            "pcp",
            "employee id",
            "name",
            "position",
            "registered",
            "ssn",
            "appointment id",
            "patient",
            "prep nurse",
            "physician",
            "start",
            "end",
            "examination room",
            "code",
            "name",
            "brand",
            "description",
            "physician",
            "patient",
            "medication",
            "date",
            "appointment",
            "dose",
            "block floor",
            "block code",
            "roomnumber",
            "room type",
            "block floor",
            "block code",
            "unavailable",
            "nurse",
            "block floor",
            "block code",
            "oncall start",
            "oncall end",
            "stay id",
            "patient",
            "room",
            "stay start",
            "stay end",
            "patient",
            "procedures",
            "stay",
            "date undergoes",
            "physician",
            "assisting nurse"
        ],
        "template_feedback": "in step 1 , use patient table in place of undergoes table",
        "positive_example": "find physician 's name in place of physician ."
    },
    {
        "db_id": "hospital_1",
        "table_names": [
            "physician",
            "department",
            "affiliated with",
            "procedures",
            "trained in",
            "patient",
            "nurse",
            "appointment",
            "medication",
            "prescribes",
            "block",
            "room",
            "on call",
            "stay",
            "undergoes"
        ],
        "column_names": [
            "employee id",
            "name",
            "position",
            "ssn",
            "departmentid",
            "name",
            "head",
            "physician",
            "department",
            "primary affiliation",
            "code",
            "name",
            "cost",
            "physician",
            "treatment",
            "certification date",
            "certification expires",
            "ssn",
            "name",
            "address",
            "phone",
            "insurance id",
            "pcp",
            "employee id",
            "name",
            "position",
            "registered",
            "ssn",
            "appointment id",
            "patient",
            "prep nurse",
            "physician",
            "start",
            "end",
            "examination room",
            "code",
            "name",
            "brand",
            "description",
            "physician",
            "patient",
            "medication",
            "date",
            "appointment",
            "dose",
            "block floor",
            "block code",
            "roomnumber",
            "room type",
            "block floor",
            "block code",
            "unavailable",
            "nurse",
            "block floor",
            "block code",
            "oncall start",
            "oncall end",
            "stay id",
            "patient",
            "room",
            "stay start",
            "stay end",
            "patient",
            "procedures",
            "stay",
            "date undergoes",
            "physician",
            "assisting nurse"
        ],
        "template_feedback": "in step 1 , use patient table in place of undergoes table",
        "positive_example": "you only need to find the name of physician ."
    },
    {
        "db_id": "bike_1",
        "table_names": [
            "station",
            "status",
            "trip",
            "weather"
        ],
        "column_names": [
            "id",
            "name",
            "latitude",
            "longitude",
            "dock count",
            "city",
            "installation date",
            "station id",
            "bikes available",
            "docks available",
            "time",
            "id",
            "duration",
            "start date",
            "start station name",
            "start station id",
            "end date",
            "end station name",
            "end station id",
            "bike id",
            "subscription type",
            "zip code",
            "date",
            "max temperature f",
            "mean temperature f",
            "min temperature f",
            "max dew point f",
            "mean dew point f",
            "min dew point f",
            "max humidity",
            "mean humidity",
            "min humidity",
            "max sea level pressure inches",
            "mean sea level pressure inches",
            "min sea level pressure inches",
            "max visibility miles",
            "mean visibility miles",
            "min visibility miles",
            "max wind speed mph",
            "mean wind speed mph",
            "max gust speed mph",
            "precipitation inches",
            "cloud cover",
            "events",
            "wind dir degrees",
            "zip code"
        ],
        "template_feedback": "in step 1 , do not use the trip table . in step 2 , consider the mean visibility miles greater than 8 and mean humidity greater than 50 conditions in place of the mean visibility miles greater than 50 conditions . find number of rows in place of average duration .",
        "positive_example": "count number of rows in weather table when max visibility miles over 8 and max humidity over 50 ."
    },
    {
        "db_id": "bike_1",
        "table_names": [
            "station",
            "status",
            "trip",
            "weather"
        ],
        "column_names": [
            "id",
            "name",
            "latitude",
            "longitude",
            "dock count",
            "city",
            "installation date",
            "station id",
            "bikes available",
            "docks available",
            "time",
            "id",
            "duration",
            "start date",
            "start station name",
            "start station id",
            "end date",
            "end station name",
            "end station id",
            "bike id",
            "subscription type",
            "zip code",
            "date",
            "max temperature f",
            "mean temperature f",
            "min temperature f",
            "max dew point f",
            "mean dew point f",
            "min dew point f",
            "max humidity",
            "mean humidity",
            "min humidity",
            "max sea level pressure inches",
            "mean sea level pressure inches",
            "min sea level pressure inches",
            "max visibility miles",
            "mean visibility miles",
            "min visibility miles",
            "max wind speed mph",
            "mean wind speed mph",
            "max gust speed mph",
            "precipitation inches",
            "cloud cover",
            "events",
            "wind dir degrees",
            "zip code"
        ],
        "template_feedback": "in step 1 , do not use the trip table . in step 2 , consider the mean visibility miles greater than 8 and mean humidity greater than 50 conditions in place of the mean visibility miles greater than 50 conditions . find number of rows in place of average duration .",
        "positive_example": "list out the number of rows of weather whose miles of max visibility and max humidity is above 8 and 50 respectively ."
    },
    {
        "db_id": "soccer_2",
        "table_names": [
            "college",
            "player",
            "tryout"
        ],
        "column_names": [
            "college name",
            "state",
            "enrollment",
            "player id",
            "player name",
            "yes card",
            "training hours",
            "player id",
            "college name",
            "player position",
            "decision"
        ],
        "template_feedback": "in step 1 , consider the enrollment less than 13000 conditions in place of the enrollment greater than 13000 conditions .",
        "positive_example": "swap \" greater \" with \" less \" in step 1 ."
    },
    {
        "db_id": "soccer_2",
        "table_names": [
            "college",
            "player",
            "tryout"
        ],
        "column_names": [
            "college name",
            "state",
            "enrollment",
            "player id",
            "player name",
            "yes card",
            "training hours",
            "player id",
            "college name",
            "player position",
            "decision"
        ],
        "template_feedback": "in step 1 , consider the enrollment less than 13000 conditions in place of the enrollment greater than 13000 conditions .",
        "positive_example": "in step 1 , interchange between greater and less ."
    },
    {
        "db_id": "protein_institute",
        "table_names": [
            "building",
            "institution",
            "protein"
        ],
        "column_names": [
            "building id",
            "name",
            "street address",
            "years as tallest",
            "height feet",
            "floors",
            "institution id",
            "institution",
            "location",
            "founded",
            "type",
            "enrollment",
            "team",
            "primary conference",
            "building id",
            "common name",
            "protein name",
            "divergence from human lineage",
            "accession number",
            "sequence length",
            "sequence identity to human protein",
            "institution id"
        ],
        "template_feedback": "additionally use the information from the institution table besides the protein table . additionally find institution .",
        "positive_example": "switch first protein name with institution of institution ."
    },
    {
        "db_id": "protein_institute",
        "table_names": [
            "building",
            "institution",
            "protein"
        ],
        "column_names": [
            "building id",
            "name",
            "street address",
            "years as tallest",
            "height feet",
            "floors",
            "institution id",
            "institution",
            "location",
            "founded",
            "type",
            "enrollment",
            "team",
            "primary conference",
            "building id",
            "common name",
            "protein name",
            "divergence from human lineage",
            "accession number",
            "sequence length",
            "sequence identity to human protein",
            "institution id"
        ],
        "template_feedback": "additionally use the information from the institution table besides the protein table . additionally find institution .",
        "positive_example": "use institution and drop first protein name ."
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "table_names": [
            "reference payment methods",
            "reference service types",
            "addresses",
            "products",
            "marketing regions",
            "clients",
            "drama workshop groups",
            "performers",
            "customers",
            "stores",
            "bookings",
            "performers in bookings",
            "customer orders",
            "order items",
            "invoices",
            "services",
            "bookings services",
            "invoice items"
        ],
        "column_names": [
            "payment method code",
            "payment method description",
            "service type code",
            "parent service type code",
            "service type description",
            "address id",
            "line 1",
            "line 2",
            "city town",
            "state county",
            "other details",
            "product id",
            "product name",
            "product price",
            "product description",
            "other product service details",
            "marketing region code",
            "marketing region name",
            "marketing region descriptrion",
            "other details",
            "client id",
            "address id",
            "customer email address",
            "customer name",
            "customer phone",
            "other details",
            "workshop group id",
            "address id",
            "currency code",
            "marketing region code",
            "store name",
            "store phone",
            "store email address",
            "other details",
            "performer id",
            "address id",
            "customer name",
            "customer phone",
            "customer email address",
            "other details",
            "customer id",
            "address id",
            "customer name",
            "customer phone",
            "customer email address",
            "other details",
            "store id",
            "address id",
            "marketing region code",
            "store name",
            "store phone",
            "store email address",
            "other details",
            "booking id",
            "customer id",
            "workshop group id",
            "status code",
            "store id",
            "order date",
            "planned delivery date",
            "actual delivery date",
            "other order details",
            "order id",
            "performer id",
            "order id",
            "customer id",
            "store id",
            "order date",
            "planned delivery date",
            "actual delivery date",
            "other order details",
            "order item id",
            "order id",
            "product id",
            "order quantity",
            "other item details",
            "invoice id",
            "order id",
            "payment method code",
            "product id",
            "order quantity",
            "other item details",
            "order item id",
            "service id",
            "service type code",
            "workshop group id",
            "product description",
            "product name",
            "product price",
            "other product service details",
            "order id",
            "product id",
            "invoice item id",
            "invoice id",
            "order id",
            "order item id",
            "product id",
            "order quantity",
            "other item details"
        ],
        "template_feedback": "remove the marketing region code equals fr conditions .",
        "positive_example": "take off \" whose marketing region code equals fr \" ."
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "table_names": [
            "reference payment methods",
            "reference service types",
            "addresses",
            "products",
            "marketing regions",
            "clients",
            "drama workshop groups",
            "performers",
            "customers",
            "stores",
            "bookings",
            "performers in bookings",
            "customer orders",
            "order items",
            "invoices",
            "services",
            "bookings services",
            "invoice items"
        ],
        "column_names": [
            "payment method code",
            "payment method description",
            "service type code",
            "parent service type code",
            "service type description",
            "address id",
            "line 1",
            "line 2",
            "city town",
            "state county",
            "other details",
            "product id",
            "product name",
            "product price",
            "product description",
            "other product service details",
            "marketing region code",
            "marketing region name",
            "marketing region descriptrion",
            "other details",
            "client id",
            "address id",
            "customer email address",
            "customer name",
            "customer phone",
            "other details",
            "workshop group id",
            "address id",
            "currency code",
            "marketing region code",
            "store name",
            "store phone",
            "store email address",
            "other details",
            "performer id",
            "address id",
            "customer name",
            "customer phone",
            "customer email address",
            "other details",
            "customer id",
            "address id",
            "customer name",
            "customer phone",
            "customer email address",
            "other details",
            "store id",
            "address id",
            "marketing region code",
            "store name",
            "store phone",
            "store email address",
            "other details",
            "booking id",
            "customer id",
            "workshop group id",
            "status code",
            "store id",
            "order date",
            "planned delivery date",
            "actual delivery date",
            "other order details",
            "order id",
            "performer id",
            "order id",
            "customer id",
            "store id",
            "order date",
            "planned delivery date",
            "actual delivery date",
            "other order details",
            "order item id",
            "order id",
            "product id",
            "order quantity",
            "other item details",
            "invoice id",
            "order id",
            "payment method code",
            "product id",
            "order quantity",
            "other item details",
            "order item id",
            "service id",
            "service type code",
            "workshop group id",
            "product description",
            "product name",
            "product price",
            "other product service details",
            "order id",
            "product id",
            "invoice item id",
            "invoice id",
            "order id",
            "order item id",
            "product id",
            "order quantity",
            "other item details"
        ],
        "template_feedback": "remove the marketing region code equals fr conditions .",
        "positive_example": "you should remove where code of marketing region is fr ."
    },
    {
        "db_id": "music_1",
        "table_names": [
            "genre",
            "artist",
            "files",
            "song"
        ],
        "column_names": [
            "genre name",
            "rating",
            "most popular in",
            "artist name",
            "country",
            "gender",
            "preferred genre",
            "song id",
            "artist name",
            "file size",
            "duration",
            "formats",
            "song name",
            "artist name",
            "country",
            "song id",
            "genre is",
            "rating",
            "languages",
            "releasedate",
            "resolution"
        ],
        "template_feedback": "in step 2 , find for each value of languages in place of song name .",
        "positive_example": "i need the artist 's name ."
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "table_names": [
            "reference document types",
            "reference calendar",
            "reference locations",
            "roles",
            "all documents",
            "employees",
            "document locations",
            "documents to be destroyed"
        ],
        "column_names": [
            "document type code",
            "document type name",
            "document type description",
            "calendar date",
            "day number",
            "location code",
            "location name",
            "location description",
            "role code",
            "role name",
            "role description",
            "document id",
            "date stored",
            "document type code",
            "document name",
            "document description",
            "other details",
            "employee id",
            "role code",
            "employee name",
            "gender mfu",
            "date of birth",
            "other details",
            "document id",
            "location code",
            "date in location from",
            "date in locaton to",
            "document id",
            "destruction authorised by employee id",
            "destroyed by employee id",
            "planned destruction date",
            "actual destruction date",
            "other details"
        ],
        "template_feedback": "additionally use the information from the documents to be destroyed table besides the employees table . do not return date of birth .",
        "positive_example": "show employee name whose employee id equals destruction authorised by employee id and employee id equals destroyed by employee id ."
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "table_names": [
            "reference document types",
            "reference calendar",
            "reference locations",
            "roles",
            "all documents",
            "employees",
            "document locations",
            "documents to be destroyed"
        ],
        "column_names": [
            "document type code",
            "document type name",
            "document type description",
            "calendar date",
            "day number",
            "location code",
            "location name",
            "location description",
            "role code",
            "role name",
            "role description",
            "document id",
            "date stored",
            "document type code",
            "document name",
            "document description",
            "other details",
            "employee id",
            "role code",
            "employee name",
            "gender mfu",
            "date of birth",
            "other details",
            "document id",
            "location code",
            "date in location from",
            "date in locaton to",
            "document id",
            "destruction authorised by employee id",
            "destroyed by employee id",
            "planned destruction date",
            "actual destruction date",
            "other details"
        ],
        "template_feedback": "additionally use the information from the documents to be destroyed table besides the employees table . do not return date of birth .",
        "positive_example": "list out employee name whose employee id is equivalent to employee id who is destruction auditioned by and destroyed by ."
    },
    {
        "db_id": "product_catalog",
        "table_names": [
            "attribute definitions",
            "catalogs",
            "catalog structure",
            "catalog contents",
            "catalog contents additional attributes"
        ],
        "column_names": [
            "attribute id",
            "attribute name",
            "attribute data type",
            "catalog id",
            "catalog name",
            "catalog publisher",
            "date of publication",
            "date of latest revision",
            "catalog level number",
            "catalog id",
            "catalog level name",
            "catalog entry id",
            "catalog level number",
            "parent entry id",
            "previous entry id",
            "next entry id",
            "catalog entry name",
            "product stock number",
            "price in dollars",
            "price in euros",
            "price in pounds",
            "capacity",
            "length",
            "height",
            "width",
            "catalog entry id",
            "catalog level number",
            "attribute id",
            "attribute value"
        ],
        "template_feedback": "in step 1 , do not use the catalog structure table and catalogs table . in step 2 , consider the price in dollars greater than 700 conditions in place of the price in euros greater than 700 conditions . find capacity in place of catalog publisher .",
        "positive_example": "i need the price of euro 's in dollars ."
    },
    {
        "db_id": "bike_1",
        "table_names": [
            "station",
            "status",
            "trip",
            "weather"
        ],
        "column_names": [
            "id",
            "name",
            "latitude",
            "longitude",
            "dock count",
            "city",
            "installation date",
            "station id",
            "bikes available",
            "docks available",
            "time",
            "id",
            "duration",
            "start date",
            "start station name",
            "start station id",
            "end date",
            "end station name",
            "end station id",
            "bike id",
            "subscription type",
            "zip code",
            "date",
            "max temperature f",
            "mean temperature f",
            "min temperature f",
            "max dew point f",
            "mean dew point f",
            "min dew point f",
            "max humidity",
            "mean humidity",
            "min humidity",
            "max sea level pressure inches",
            "mean sea level pressure inches",
            "min sea level pressure inches",
            "max visibility miles",
            "mean visibility miles",
            "min visibility miles",
            "max wind speed mph",
            "mean wind speed mph",
            "max gust speed mph",
            "precipitation inches",
            "cloud cover",
            "events",
            "wind dir degrees",
            "zip code"
        ],
        "template_feedback": "consider the max temperature f greater than 85 conditions in place of the precipitation inches greater than 85 conditions .",
        "positive_example": "you should only use maximum temperature ' f ' ."
    },
    {
        "db_id": "hr_1",
        "table_names": [
            "regions",
            "countries",
            "departments",
            "jobs",
            "employees",
            "job history",
            "locations"
        ],
        "column_names": [
            "region id",
            "region name",
            "country id",
            "country name",
            "region id",
            "department id",
            "department name",
            "manager id",
            "location id",
            "job id",
            "job title",
            "min salary",
            "max salary",
            "employee id",
            "first name",
            "last name",
            "email",
            "phone number",
            "hire date",
            "job id",
            "salary",
            "commission pct",
            "manager id",
            "department id",
            "employee id",
            "start date",
            "end date",
            "job id",
            "department id",
            "location id",
            "street address",
            "postal code",
            "city",
            "state province",
            "country id"
        ],
        "template_feedback": "additionally make sure that manager id not equals null . additionally find manager id .",
        "positive_example": "i want manager 's id and salary ."
    },
    {
        "db_id": "music_1",
        "table_names": [
            "genre",
            "artist",
            "files",
            "song"
        ],
        "column_names": [
            "genre name",
            "rating",
            "most popular in",
            "artist name",
            "country",
            "gender",
            "preferred genre",
            "song id",
            "artist name",
            "file size",
            "duration",
            "formats",
            "song name",
            "artist name",
            "country",
            "song id",
            "genre is",
            "rating",
            "languages",
            "releasedate",
            "resolution"
        ],
        "template_feedback": "additionally make sure that genre is equals modern or languages equals english .",
        "positive_example": "you need to check that song 's genre should be modern as english ."
    },
    {
        "db_id": "bike_1",
        "table_names": [
            "station",
            "status",
            "trip",
            "weather"
        ],
        "column_names": [
            "id",
            "name",
            "latitude",
            "longitude",
            "dock count",
            "city",
            "installation date",
            "station id",
            "bikes available",
            "docks available",
            "time",
            "id",
            "duration",
            "start date",
            "start station name",
            "start station id",
            "end date",
            "end station name",
            "end station id",
            "bike id",
            "subscription type",
            "zip code",
            "date",
            "max temperature f",
            "mean temperature f",
            "min temperature f",
            "max dew point f",
            "mean dew point f",
            "min dew point f",
            "max humidity",
            "mean humidity",
            "min humidity",
            "max sea level pressure inches",
            "mean sea level pressure inches",
            "min sea level pressure inches",
            "max visibility miles",
            "mean visibility miles",
            "min visibility miles",
            "max wind speed mph",
            "mean wind speed mph",
            "max gust speed mph",
            "precipitation inches",
            "cloud cover",
            "events",
            "wind dir degrees",
            "zip code"
        ],
        "template_feedback": "in step 1 , do not use the trip table . in step 2 , consider the mean visibility miles greater than 8 and mean humidity greater than 50 conditions in place of the mean sea level pressure inches greater than 50 conditions . find number of rows in place of average duration .",
        "positive_example": "find number of rows of weather ( table ) whose max humidity beyond 50 and max visibility miles beyond 8 ."
    },
    {
        "db_id": "bike_1",
        "table_names": [
            "station",
            "status",
            "trip",
            "weather"
        ],
        "column_names": [
            "id",
            "name",
            "latitude",
            "longitude",
            "dock count",
            "city",
            "installation date",
            "station id",
            "bikes available",
            "docks available",
            "time",
            "id",
            "duration",
            "start date",
            "start station name",
            "start station id",
            "end date",
            "end station name",
            "end station id",
            "bike id",
            "subscription type",
            "zip code",
            "date",
            "max temperature f",
            "mean temperature f",
            "min temperature f",
            "max dew point f",
            "mean dew point f",
            "min dew point f",
            "max humidity",
            "mean humidity",
            "min humidity",
            "max sea level pressure inches",
            "mean sea level pressure inches",
            "min sea level pressure inches",
            "max visibility miles",
            "mean visibility miles",
            "min visibility miles",
            "max wind speed mph",
            "mean wind speed mph",
            "max gust speed mph",
            "precipitation inches",
            "cloud cover",
            "events",
            "wind dir degrees",
            "zip code"
        ],
        "template_feedback": "in step 1 , do not use the trip table . in step 2 , consider the mean visibility miles greater than 8 and mean humidity greater than 50 conditions in place of the mean sea level pressure inches greater than 50 conditions . find number of rows in place of average duration .",
        "positive_example": "list the number of row from weather table whose max humidity and max visibility 's value is greater than 50 and 8 respectively ."
    },
    {
        "db_id": "hr_1",
        "table_names": [
            "regions",
            "countries",
            "departments",
            "jobs",
            "employees",
            "job history",
            "locations"
        ],
        "column_names": [
            "region id",
            "region name",
            "country id",
            "country name",
            "region id",
            "department id",
            "department name",
            "manager id",
            "location id",
            "job id",
            "job title",
            "min salary",
            "max salary",
            "employee id",
            "first name",
            "last name",
            "email",
            "phone number",
            "hire date",
            "job id",
            "salary",
            "commission pct",
            "manager id",
            "department id",
            "employee id",
            "start date",
            "end date",
            "job id",
            "department id",
            "location id",
            "street address",
            "postal code",
            "city",
            "state province",
            "country id"
        ],
        "template_feedback": "consider the hire date between 2007-11-05 and 2009-07-05 conditions in place of the last name between 2009-07-05 and 2007-11-05 conditions . find job id in place of salary .",
        "positive_example": "i want id of job , hiring date and skip \" equals or \" ."
    },
    {
        "db_id": "department_store",
        "table_names": [
            "addresses",
            "staff",
            "suppliers",
            "department store chain",
            "customers",
            "products",
            "supplier addresses",
            "customer addresses",
            "customer orders",
            "department stores",
            "departments",
            "order items",
            "product suppliers",
            "staff department assignments"
        ],
        "column_names": [
            "address id",
            "address details",
            "staff id",
            "staff gender",
            "staff name",
            "supplier id",
            "supplier name",
            "supplier phone",
            "department store chain id",
            "department store chain name",
            "customer id",
            "payment method code",
            "customer code",
            "customer name",
            "customer address",
            "customer phone",
            "customer email",
            "product id",
            "product type code",
            "product name",
            "product price",
            "supplier id",
            "address id",
            "date from",
            "date to",
            "customer id",
            "address id",
            "date from",
            "date to",
            "order id",
            "customer id",
            "order status code",
            "order date",
            "department store id",
            "department store chain id",
            "store name",
            "store address",
            "store phone",
            "store email",
            "department id",
            "department store id",
            "department name",
            "order item id",
            "order id",
            "product id",
            "product id",
            "supplier id",
            "date supplied from",
            "date supplied to",
            "total amount purchased",
            "total value purchased",
            "staff id",
            "department id",
            "date assigned from",
            "job title code",
            "date assigned to"
        ],
        "template_feedback": "in step 1 , additionally make sure that job title code equals clerical staff . find maximum date assigned to in place of minimum department id .",
        "positive_example": "need to find minimum assigned from date having job title as clerical staff in step 1 ."
    },
    {
        "db_id": "student_1",
        "table_names": [
            "list",
            "teachers"
        ],
        "column_names": [
            "last name",
            "first name",
            "grade",
            "class room",
            "last name",
            "first name",
            "class room"
        ],
        "template_feedback": "in step 1 , additionally use the information from the list table besides the teachers table . additionally find for each value of teachers 's first name .",
        "positive_example": "identify the teacher 's first and last name who teaches most number of students ."
    },
    {
        "db_id": "student_1",
        "table_names": [
            "list",
            "teachers"
        ],
        "column_names": [
            "last name",
            "first name",
            "grade",
            "class room",
            "last name",
            "first name",
            "class room"
        ],
        "template_feedback": "in step 1 , additionally use the information from the list table besides the teachers table . additionally find for each value of teachers 's first name .",
        "positive_example": "looking for the full name of teachers who has maximum students ."
    },
    {
        "db_id": "customer_complaints",
        "table_names": [
            "staff",
            "customers",
            "products",
            "complaints"
        ],
        "column_names": [
            "staff id",
            "gender",
            "first name",
            "last name",
            "email address",
            "phone number",
            "customer id",
            "customer type code",
            "address line 1",
            "address line 2",
            "town city",
            "state",
            "email address",
            "phone number",
            "product id",
            "parent product id",
            "product category code",
            "date product first available",
            "date product discontinued",
            "product name",
            "product description",
            "product price",
            "complaint id",
            "product id",
            "customer id",
            "complaint outcome code",
            "complaint status code",
            "complaint type code",
            "date complaint raised",
            "date complaint closed",
            "staff id"
        ],
        "template_feedback": "in step 3 , use the smallest in place of largest .",
        "positive_example": "substitute customer id with product id in step 2 ."
    },
    {
        "db_id": "customer_complaints",
        "table_names": [
            "staff",
            "customers",
            "products",
            "complaints"
        ],
        "column_names": [
            "staff id",
            "gender",
            "first name",
            "last name",
            "email address",
            "phone number",
            "customer id",
            "customer type code",
            "address line 1",
            "address line 2",
            "town city",
            "state",
            "email address",
            "phone number",
            "product id",
            "parent product id",
            "product category code",
            "date product first available",
            "date product discontinued",
            "product name",
            "product description",
            "product price",
            "complaint id",
            "product id",
            "customer id",
            "complaint outcome code",
            "complaint status code",
            "complaint type code",
            "date complaint raised",
            "date complaint closed",
            "staff id"
        ],
        "template_feedback": "in step 3 , use the smallest in place of largest .",
        "positive_example": "in step 2 , use product id instead of customer id ."
    },
    {
        "db_id": "assets_maintenance",
        "table_names": [
            "third party companies",
            "maintenance contracts",
            "parts",
            "skills",
            "staff",
            "assets",
            "asset parts",
            "maintenance engineers",
            "engineer skills",
            "fault log",
            "engineer visits",
            "part faults",
            "fault log parts",
            "skills required to fix"
        ],
        "column_names": [
            "company id",
            "company type",
            "company name",
            "company address",
            "other company details",
            "maintenance contract id",
            "maintenance contract company id",
            "contract start date",
            "contract end date",
            "other contract details",
            "part id",
            "part name",
            "chargeable yn",
            "chargeable amount",
            "other part details",
            "skill id",
            "skill code",
            "skill description",
            "staff id",
            "staff name",
            "gender",
            "other staff details",
            "asset id",
            "maintenance contract id",
            "supplier company id",
            "asset details",
            "asset make",
            "asset model",
            "asset acquired date",
            "asset disposed date",
            "other asset details",
            "asset id",
            "part id",
            "engineer id",
            "company id",
            "first name",
            "last name",
            "other details",
            "engineer id",
            "skill id",
            "fault log entry id",
            "asset id",
            "recorded by staff id",
            "fault log entry datetime",
            "fault description",
            "other fault details",
            "engineer visit id",
            "contact staff id",
            "engineer id",
            "fault log entry id",
            "fault status",
            "visit start datetime",
            "visit end datetime",
            "other visit details",
            "part fault id",
            "part id",
            "fault short name",
            "fault description",
            "other fault details",
            "fault log entry id",
            "part fault id",
            "fault status",
            "part fault id",
            "skill id"
        ],
        "template_feedback": "in step 1 , do not use the asset parts table and parts table . in step 2 , find asset model , asset make , and asset details in place of chargeable amount . order the results by asset disposed date in place of other asset details .",
        "positive_example": "you need to find make , model and details of asset in ascending order of date of removal ."
    },
    {
        "db_id": "cre_Theme_park",
        "table_names": [
            "ref hotel star ratings",
            "locations",
            "ref attraction types",
            "visitors",
            "features",
            "hotels",
            "tourist attractions",
            "street markets",
            "shops",
            "museums",
            "royal family",
            "theme parks",
            "visits",
            "photos",
            "staff",
            "tourist attraction features"
        ],
        "column_names": [
            "star rating code",
            "star rating description",
            "location id",
            "location name",
            "address",
            "other details",
            "attraction type code",
            "attraction type description",
            "tourist id",
            "tourist details",
            "feature id",
            "feature details",
            "hotel id",
            "star rating code",
            "pets allowed yn",
            "price range",
            "other hotel details",
            "tourist attraction id",
            "attraction type code",
            "location id",
            "how to get there",
            "name",
            "description",
            "opening hours",
            "other details",
            "market id",
            "market details",
            "shop id",
            "shop details",
            "museum id",
            "museum details",
            "royal family id",
            "royal family details",
            "theme park id",
            "theme park details",
            "visit id",
            "tourist attraction id",
            "tourist id",
            "visit date",
            "visit details",
            "photo id",
            "tourist attraction id",
            "name",
            "description",
            "filename",
            "other details",
            "staff id",
            "tourist attraction id",
            "name",
            "other details",
            "tourist attraction id",
            "feature id"
        ],
        "template_feedback": "additionally use the information from the tourist attractions table besides the street markets table . additionally make sure that how to get there equals walk or how to get there equals bus .",
        "positive_example": "confirm if tourist attractions can be reached by bus or walking ."
    },
    {
        "db_id": "school_player",
        "table_names": [
            "school",
            "school details",
            "school performance",
            "player"
        ],
        "column_names": [
            "school id",
            "school",
            "location",
            "enrollment",
            "founded",
            "denomination",
            "boys or girls",
            "day or boarding",
            "year entered competition",
            "school colors",
            "school id",
            "nickname",
            "colors",
            "league",
            "class",
            "division",
            "school id",
            "school year",
            "class a",
            "class aa",
            "player id",
            "player",
            "team",
            "age",
            "position",
            "school id"
        ],
        "template_feedback": "in step 1 , order the results descending .",
        "positive_example": "ensure that ordered descending by age ."
    },
    {
        "db_id": "school_player",
        "table_names": [
            "school",
            "school details",
            "school performance",
            "player"
        ],
        "column_names": [
            "school id",
            "school",
            "location",
            "enrollment",
            "founded",
            "denomination",
            "boys or girls",
            "day or boarding",
            "year entered competition",
            "school colors",
            "school id",
            "nickname",
            "colors",
            "league",
            "class",
            "division",
            "school id",
            "school year",
            "class a",
            "class aa",
            "player id",
            "player",
            "team",
            "age",
            "position",
            "school id"
        ],
        "template_feedback": "in step 1 , order the results descending .",
        "positive_example": "you should ascertain that age is arranged in descending order ."
    },
    {
        "db_id": "school_player",
        "table_names": [
            "school",
            "school details",
            "school performance",
            "player"
        ],
        "column_names": [
            "school id",
            "school",
            "location",
            "enrollment",
            "founded",
            "denomination",
            "boys or girls",
            "day or boarding",
            "year entered competition",
            "school colors",
            "school id",
            "nickname",
            "colors",
            "league",
            "class",
            "division",
            "school id",
            "school year",
            "class a",
            "class aa",
            "player id",
            "player",
            "team",
            "age",
            "position",
            "school id"
        ],
        "template_feedback": "in step 1 , order the results descending .",
        "positive_example": "confirm that age is in descending order ."
    },
    {
        "db_id": "hr_1",
        "table_names": [
            "regions",
            "countries",
            "departments",
            "jobs",
            "employees",
            "job history",
            "locations"
        ],
        "column_names": [
            "region id",
            "region name",
            "country id",
            "country name",
            "region id",
            "department id",
            "department name",
            "manager id",
            "location id",
            "job id",
            "job title",
            "min salary",
            "max salary",
            "employee id",
            "first name",
            "last name",
            "email",
            "phone number",
            "hire date",
            "job id",
            "salary",
            "commission pct",
            "manager id",
            "department id",
            "employee id",
            "start date",
            "end date",
            "job id",
            "department id",
            "location id",
            "street address",
            "postal code",
            "city",
            "state province",
            "country id"
        ],
        "template_feedback": "consider the first name not like % m % conditions in place of the first name not equals m conditions . additionally find hire date .",
        "positive_example": "looking for the date of hire and does not contain instead of unequal ."
    },
    {
        "db_id": "soccer_2",
        "table_names": [
            "college",
            "player",
            "tryout"
        ],
        "column_names": [
            "college name",
            "state",
            "enrollment",
            "player id",
            "player name",
            "yes card",
            "training hours",
            "player id",
            "college name",
            "player position",
            "decision"
        ],
        "template_feedback": "in step 1 , do not use the college table . in step 2 , consider the player position equals mid conditions in place of the player position equals goalie conditions . in step 3 , do not use the player table . in step 4 , consider the player position equals goalie conditions in place of the training hours equals 1200 conditions .",
        "positive_example": "i want college name whose tryout player is midfielder and not a goalie ."
    },
    {
        "db_id": "department_management",
        "table_names": [
            "department",
            "head",
            "management"
        ],
        "column_names": [
            "department id",
            "name",
            "creation",
            "ranking",
            "budget in billions",
            "num employees",
            "head id",
            "name",
            "born state",
            "age",
            "department id",
            "head id",
            "temporary acting"
        ],
        "template_feedback": "in step 1 , do not use the department table and management table . in step 2 , find head 's name in place of department 's name .",
        "positive_example": "use head 's name in place of name in step 2 ."
    },
    {
        "db_id": "department_management",
        "table_names": [
            "department",
            "head",
            "management"
        ],
        "column_names": [
            "department id",
            "name",
            "creation",
            "ranking",
            "budget in billions",
            "num employees",
            "head id",
            "name",
            "born state",
            "age",
            "department id",
            "head id",
            "temporary acting"
        ],
        "template_feedback": "in step 1 , do not use the department table and management table . in step 2 , find head 's name in place of department 's name .",
        "positive_example": "supplant name with name of head in step 2 ."
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "table_names": [
            "reference document types",
            "reference calendar",
            "reference locations",
            "roles",
            "all documents",
            "employees",
            "document locations",
            "documents to be destroyed"
        ],
        "column_names": [
            "document type code",
            "document type name",
            "document type description",
            "calendar date",
            "day number",
            "location code",
            "location name",
            "location description",
            "role code",
            "role name",
            "role description",
            "document id",
            "date stored",
            "document type code",
            "document name",
            "document description",
            "other details",
            "employee id",
            "role code",
            "employee name",
            "gender mfu",
            "date of birth",
            "other details",
            "document id",
            "location code",
            "date in location from",
            "date in locaton to",
            "document id",
            "destruction authorised by employee id",
            "destroyed by employee id",
            "planned destruction date",
            "actual destruction date",
            "other details"
        ],
        "template_feedback": "use documents to be destroyed table in place of employees table . remove the role code equals hr conditions . make sure no repetition in the results .",
        "positive_example": "i want the employee id who is authorized to destroy the document ."
    },
    {
        "db_id": "store_1",
        "table_names": [
            "sqlite sequence",
            "artists",
            "albums",
            "employees",
            "customers",
            "genres",
            "invoices",
            "media types",
            "tracks",
            "invoice lines",
            "playlists",
            "playlist tracks"
        ],
        "column_names": [
            "name",
            "seq",
            "id",
            "name",
            "id",
            "title",
            "artist id",
            "id",
            "last name",
            "first name",
            "title",
            "reports to",
            "birth date",
            "hire date",
            "address",
            "city",
            "state",
            "country",
            "postal code",
            "phone",
            "fax",
            "email",
            "id",
            "first name",
            "last name",
            "company",
            "address",
            "city",
            "state",
            "country",
            "postal code",
            "phone",
            "fax",
            "email",
            "support rep id",
            "id",
            "name",
            "id",
            "customer id",
            "invoice date",
            "billing address",
            "billing city",
            "billing state",
            "billing country",
            "billing postal code",
            "total",
            "id",
            "name",
            "id",
            "name",
            "album id",
            "media type id",
            "genre id",
            "composer",
            "milliseconds",
            "bytes",
            "unit price",
            "id",
            "invoice id",
            "track id",
            "unit price",
            "quantity",
            "id",
            "name",
            "playlist id",
            "track id"
        ],
        "template_feedback": "in step 2 , find the number of albums 's id for each value of albums 's id .",
        "positive_example": "in step 2 find number of rows of each value of tracks 's album id ."
    },
    {
        "db_id": "store_1",
        "table_names": [
            "sqlite sequence",
            "artists",
            "albums",
            "employees",
            "customers",
            "genres",
            "invoices",
            "media types",
            "tracks",
            "invoice lines",
            "playlists",
            "playlist tracks"
        ],
        "column_names": [
            "name",
            "seq",
            "id",
            "name",
            "id",
            "title",
            "artist id",
            "id",
            "last name",
            "first name",
            "title",
            "reports to",
            "birth date",
            "hire date",
            "address",
            "city",
            "state",
            "country",
            "postal code",
            "phone",
            "fax",
            "email",
            "id",
            "first name",
            "last name",
            "company",
            "address",
            "city",
            "state",
            "country",
            "postal code",
            "phone",
            "fax",
            "email",
            "support rep id",
            "id",
            "name",
            "id",
            "customer id",
            "invoice date",
            "billing address",
            "billing city",
            "billing state",
            "billing country",
            "billing postal code",
            "total",
            "id",
            "name",
            "id",
            "name",
            "album id",
            "media type id",
            "genre id",
            "composer",
            "milliseconds",
            "bytes",
            "unit price",
            "id",
            "invoice id",
            "track id",
            "unit price",
            "quantity",
            "id",
            "name",
            "playlist id",
            "track id"
        ],
        "template_feedback": "in step 2 , find the number of albums 's id for each value of albums 's id .",
        "positive_example": "calculate total number of album id of tracks table in step 2 ."
    },
    {
        "db_id": "products_gen_characteristics",
        "table_names": [
            "reference characteristic types",
            "reference colors",
            "reference product categories",
            "characteristics",
            "products",
            "product characteristics"
        ],
        "column_names": [
            "characteristic type code",
            "characteristic type description",
            "color code",
            "color description",
            "product category code",
            "product category description",
            "unit of measure",
            "characteristic id",
            "characteristic type code",
            "characteristic data type",
            "characteristic name",
            "other characteristic details",
            "product id",
            "color code",
            "product category code",
            "product name",
            "typical buying price",
            "typical selling price",
            "product description",
            "other product details",
            "product id",
            "characteristic id",
            "product characteristic value"
        ],
        "template_feedback": "in step 2 , do not use the products table . in step 3 , find characteristic name in place of product name .",
        "positive_example": "i want name of characteristic instead of name of product in step 3 ."
    },
    {
        "db_id": "flight_1",
        "table_names": [
            "flight",
            "aircraft",
            "employee",
            "certificate"
        ],
        "column_names": [
            "flight number",
            "origin",
            "destination",
            "distance",
            "departure date",
            "arrival date",
            "price",
            "airline id",
            "airline id",
            "name",
            "distance",
            "employee id",
            "name",
            "salary",
            "employee id",
            "airline id"
        ],
        "template_feedback": "in step 1 , order the results ascending .",
        "positive_example": "use \" ascending by distance , not \" descending by distance in step 1 ."
    },
    {
        "db_id": "flight_1",
        "table_names": [
            "flight",
            "aircraft",
            "employee",
            "certificate"
        ],
        "column_names": [
            "flight number",
            "origin",
            "destination",
            "distance",
            "departure date",
            "arrival date",
            "price",
            "airline id",
            "airline id",
            "name",
            "distance",
            "employee id",
            "name",
            "salary",
            "employee id",
            "airline id"
        ],
        "template_feedback": "in step 1 , order the results ascending .",
        "positive_example": "in step 1 , replace \" descending by distance \" with \" ascending by distance \" ."
    },
    {
        "db_id": "products_gen_characteristics",
        "table_names": [
            "reference characteristic types",
            "reference colors",
            "reference product categories",
            "characteristics",
            "products",
            "product characteristics"
        ],
        "column_names": [
            "characteristic type code",
            "characteristic type description",
            "color code",
            "color description",
            "product category code",
            "product category description",
            "unit of measure",
            "characteristic id",
            "characteristic type code",
            "characteristic data type",
            "characteristic name",
            "other characteristic details",
            "product id",
            "color code",
            "product category code",
            "product name",
            "typical buying price",
            "typical selling price",
            "product description",
            "other product details",
            "product id",
            "characteristic id",
            "product characteristic value"
        ],
        "template_feedback": "additionally use the information from the reference colors table besides the products table . consider the color description equals yellow conditions in place of the product description equals yellow conditions .",
        "positive_example": "you need to use explanation of color ."
    },
    {
        "db_id": "assets_maintenance",
        "table_names": [
            "third party companies",
            "maintenance contracts",
            "parts",
            "skills",
            "staff",
            "assets",
            "asset parts",
            "maintenance engineers",
            "engineer skills",
            "fault log",
            "engineer visits",
            "part faults",
            "fault log parts",
            "skills required to fix"
        ],
        "column_names": [
            "company id",
            "company type",
            "company name",
            "company address",
            "other company details",
            "maintenance contract id",
            "maintenance contract company id",
            "contract start date",
            "contract end date",
            "other contract details",
            "part id",
            "part name",
            "chargeable yn",
            "chargeable amount",
            "other part details",
            "skill id",
            "skill code",
            "skill description",
            "staff id",
            "staff name",
            "gender",
            "other staff details",
            "asset id",
            "maintenance contract id",
            "supplier company id",
            "asset details",
            "asset make",
            "asset model",
            "asset acquired date",
            "asset disposed date",
            "other asset details",
            "asset id",
            "part id",
            "engineer id",
            "company id",
            "first name",
            "last name",
            "other details",
            "engineer id",
            "skill id",
            "fault log entry id",
            "asset id",
            "recorded by staff id",
            "fault log entry datetime",
            "fault description",
            "other fault details",
            "engineer visit id",
            "contact staff id",
            "engineer id",
            "fault log entry id",
            "fault status",
            "visit start datetime",
            "visit end datetime",
            "other visit details",
            "part fault id",
            "part id",
            "fault short name",
            "fault description",
            "other fault details",
            "fault log entry id",
            "part fault id",
            "fault status",
            "part fault id",
            "skill id"
        ],
        "template_feedback": "in step 1 , do not use the asset parts table and parts table . in step 2 , additionally find asset model and asset make . order the results by asset disposed date in place of chargeable amount .",
        "positive_example": "looking for make and model of asset . also , use disposed date of asset instead of amount of chargeable ."
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "table_names": [
            "reference document types",
            "reference budget codes",
            "projects",
            "documents",
            "statements",
            "documents with expenses",
            "accounts"
        ],
        "column_names": [
            "document type code",
            "document type name",
            "document type description",
            "budget type code",
            "budget type description",
            "project id",
            "project details",
            "document id",
            "document type code",
            "project id",
            "document date",
            "document name",
            "document description",
            "other details",
            "statement id",
            "statement details",
            "document id",
            "budget type code",
            "document details",
            "account id",
            "statement id",
            "account details"
        ],
        "template_feedback": "in step 1 , do not use the reference document types table . in step 2 , find document name and documents 's document type code in place of document type description and document type name .",
        "positive_example": "you should use code of document type because description of document type is incorrect ."
    },
    {
        "db_id": "bike_1",
        "table_names": [
            "station",
            "status",
            "trip",
            "weather"
        ],
        "column_names": [
            "id",
            "name",
            "latitude",
            "longitude",
            "dock count",
            "city",
            "installation date",
            "station id",
            "bikes available",
            "docks available",
            "time",
            "id",
            "duration",
            "start date",
            "start station name",
            "start station id",
            "end date",
            "end station name",
            "end station id",
            "bike id",
            "subscription type",
            "zip code",
            "date",
            "max temperature f",
            "mean temperature f",
            "min temperature f",
            "max dew point f",
            "mean dew point f",
            "min dew point f",
            "max humidity",
            "mean humidity",
            "min humidity",
            "max sea level pressure inches",
            "mean sea level pressure inches",
            "min sea level pressure inches",
            "max visibility miles",
            "mean visibility miles",
            "min visibility miles",
            "max wind speed mph",
            "mean wind speed mph",
            "max gust speed mph",
            "precipitation inches",
            "cloud cover",
            "events",
            "wind dir degrees",
            "zip code"
        ],
        "template_feedback": "in step 1 , find the average mean visibility miles for each value of zip code .",
        "positive_example": "max visibility miles should be used in place of max visibility miles in step 1 ."
    },
    {
        "db_id": "bike_1",
        "table_names": [
            "station",
            "status",
            "trip",
            "weather"
        ],
        "column_names": [
            "id",
            "name",
            "latitude",
            "longitude",
            "dock count",
            "city",
            "installation date",
            "station id",
            "bikes available",
            "docks available",
            "time",
            "id",
            "duration",
            "start date",
            "start station name",
            "start station id",
            "end date",
            "end station name",
            "end station id",
            "bike id",
            "subscription type",
            "zip code",
            "date",
            "max temperature f",
            "mean temperature f",
            "min temperature f",
            "max dew point f",
            "mean dew point f",
            "min dew point f",
            "max humidity",
            "mean humidity",
            "min humidity",
            "max sea level pressure inches",
            "mean sea level pressure inches",
            "min sea level pressure inches",
            "max visibility miles",
            "mean visibility miles",
            "min visibility miles",
            "max wind speed mph",
            "mean wind speed mph",
            "max gust speed mph",
            "precipitation inches",
            "cloud cover",
            "events",
            "wind dir degrees",
            "zip code"
        ],
        "template_feedback": "in step 1 , find the average mean visibility miles for each value of zip code .",
        "positive_example": "in step 1 , ignore max visibility miles and look for max visibility miles ."
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "table_names": [
            "reference document types",
            "reference budget codes",
            "projects",
            "documents",
            "statements",
            "documents with expenses",
            "accounts"
        ],
        "column_names": [
            "document type code",
            "document type name",
            "document type description",
            "budget type code",
            "budget type description",
            "project id",
            "project details",
            "document id",
            "document type code",
            "project id",
            "document date",
            "document name",
            "document description",
            "other details",
            "statement id",
            "statement details",
            "document id",
            "budget type code",
            "document details",
            "account id",
            "statement id",
            "account details"
        ],
        "template_feedback": "in step 1 , do not use the documents table . in step 2 , find statement details in place of document description .",
        "positive_example": "change document type description with statement details ."
    },
    {
        "db_id": "flight_4",
        "table_names": [
            "routes",
            "airports",
            "airlines"
        ],
        "column_names": [
            "route id",
            "destination airport id",
            "destination airport",
            "source airport id",
            "source airport",
            "airline id",
            "airline",
            "code share",
            "airport id",
            "name",
            "city",
            "country",
            "x",
            "y",
            "elevation",
            "iata",
            "icao",
            "airline id",
            "name",
            "iata",
            "icao",
            "call sign",
            "country",
            "active"
        ],
        "template_feedback": "in step 1 , do not use the airports table and routes table . in step 2 , find for each value of airlines 's country in place of airports 's country .",
        "positive_example": "in step 2 , you need to search for airlines 's country ."
    },
    {
        "db_id": "products_gen_characteristics",
        "table_names": [
            "reference characteristic types",
            "reference colors",
            "reference product categories",
            "characteristics",
            "products",
            "product characteristics"
        ],
        "column_names": [
            "characteristic type code",
            "characteristic type description",
            "color code",
            "color description",
            "product category code",
            "product category description",
            "unit of measure",
            "characteristic id",
            "characteristic type code",
            "characteristic data type",
            "characteristic name",
            "other characteristic details",
            "product id",
            "color code",
            "product category code",
            "product name",
            "typical buying price",
            "typical selling price",
            "product description",
            "other product details",
            "product id",
            "characteristic id",
            "product characteristic value"
        ],
        "template_feedback": "in step 2 , additionally use the information from the product characteristics table besides the characteristics table . find characteristic data type in place of characteristic type code .",
        "positive_example": "in step 2 , make sure characteristics of characteristics is available in product characteristics and use characteristics data type in place of characteristics type code ."
    },
    {
        "db_id": "assets_maintenance",
        "table_names": [
            "third party companies",
            "maintenance contracts",
            "parts",
            "skills",
            "staff",
            "assets",
            "asset parts",
            "maintenance engineers",
            "engineer skills",
            "fault log",
            "engineer visits",
            "part faults",
            "fault log parts",
            "skills required to fix"
        ],
        "column_names": [
            "company id",
            "company type",
            "company name",
            "company address",
            "other company details",
            "maintenance contract id",
            "maintenance contract company id",
            "contract start date",
            "contract end date",
            "other contract details",
            "part id",
            "part name",
            "chargeable yn",
            "chargeable amount",
            "other part details",
            "skill id",
            "skill code",
            "skill description",
            "staff id",
            "staff name",
            "gender",
            "other staff details",
            "asset id",
            "maintenance contract id",
            "supplier company id",
            "asset details",
            "asset make",
            "asset model",
            "asset acquired date",
            "asset disposed date",
            "other asset details",
            "asset id",
            "part id",
            "engineer id",
            "company id",
            "first name",
            "last name",
            "other details",
            "engineer id",
            "skill id",
            "fault log entry id",
            "asset id",
            "recorded by staff id",
            "fault log entry datetime",
            "fault description",
            "other fault details",
            "engineer visit id",
            "contact staff id",
            "engineer id",
            "fault log entry id",
            "fault status",
            "visit start datetime",
            "visit end datetime",
            "other visit details",
            "part fault id",
            "part id",
            "fault short name",
            "fault description",
            "other fault details",
            "fault log entry id",
            "part fault id",
            "fault status",
            "part fault id",
            "skill id"
        ],
        "template_feedback": "additionally find asset model and asset make . order the results by asset disposed date in place of asset details .",
        "positive_example": "additionally , look for the make and model of assets . also , use disposed date of asset instead of details ."
    },
    {
        "db_id": "bike_1",
        "table_names": [
            "station",
            "status",
            "trip",
            "weather"
        ],
        "column_names": [
            "id",
            "name",
            "latitude",
            "longitude",
            "dock count",
            "city",
            "installation date",
            "station id",
            "bikes available",
            "docks available",
            "time",
            "id",
            "duration",
            "start date",
            "start station name",
            "start station id",
            "end date",
            "end station name",
            "end station id",
            "bike id",
            "subscription type",
            "zip code",
            "date",
            "max temperature f",
            "mean temperature f",
            "min temperature f",
            "max dew point f",
            "mean dew point f",
            "min dew point f",
            "max humidity",
            "mean humidity",
            "min humidity",
            "max sea level pressure inches",
            "mean sea level pressure inches",
            "min sea level pressure inches",
            "max visibility miles",
            "mean visibility miles",
            "min visibility miles",
            "max wind speed mph",
            "mean wind speed mph",
            "max gust speed mph",
            "precipitation inches",
            "cloud cover",
            "events",
            "wind dir degrees",
            "zip code"
        ],
        "template_feedback": "in step 1 , do not use the trip table . in step 2 , consider the mean visibility miles greater than 8 and mean humidity greater than 50 conditions in place of the min visibility miles greater than 50 conditions . find number of rows in place of average start date .",
        "positive_example": "instead of max visibility miles , use max humidity and ensure that max visibility miles greater than 8 ."
    },
    {
        "db_id": "bike_1",
        "table_names": [
            "station",
            "status",
            "trip",
            "weather"
        ],
        "column_names": [
            "id",
            "name",
            "latitude",
            "longitude",
            "dock count",
            "city",
            "installation date",
            "station id",
            "bikes available",
            "docks available",
            "time",
            "id",
            "duration",
            "start date",
            "start station name",
            "start station id",
            "end date",
            "end station name",
            "end station id",
            "bike id",
            "subscription type",
            "zip code",
            "date",
            "max temperature f",
            "mean temperature f",
            "min temperature f",
            "max dew point f",
            "mean dew point f",
            "min dew point f",
            "max humidity",
            "mean humidity",
            "min humidity",
            "max sea level pressure inches",
            "mean sea level pressure inches",
            "min sea level pressure inches",
            "max visibility miles",
            "mean visibility miles",
            "min visibility miles",
            "max wind speed mph",
            "mean wind speed mph",
            "max gust speed mph",
            "precipitation inches",
            "cloud cover",
            "events",
            "wind dir degrees",
            "zip code"
        ],
        "template_feedback": "in step 1 , do not use the trip table . in step 2 , consider the mean visibility miles greater than 8 and mean humidity greater than 50 conditions in place of the min visibility miles greater than 50 conditions . find number of rows in place of average start date .",
        "positive_example": "use max humidity in place of max visibility miles and ascertain that the value of max visibility miles is greater than 8 ."
    },
    {
        "db_id": "formula_1",
        "table_names": [
            "circuits",
            "races",
            "drivers",
            "status",
            "seasons",
            "constructors",
            "constructor standings",
            "results",
            "driver standings",
            "constructor results",
            "qualifying",
            "pit stops",
            "lap times"
        ],
        "column_names": [
            "circuit id",
            "circuit reference",
            "name",
            "location",
            "country",
            "latitude",
            "longitude",
            "altitude",
            "url",
            "race id",
            "year",
            "round",
            "circuit id",
            "name",
            "date",
            "time",
            "url",
            "driver id",
            "driver reference",
            "number",
            "code",
            "forename",
            "surname",
            "dob",
            "nationality",
            "url",
            "status id",
            "status",
            "year",
            "url",
            "constructor id",
            "constructor reference",
            "name",
            "nationality",
            "url",
            "constructor standings id",
            "race id",
            "constructor id",
            "points",
            "position",
            "position text",
            "wins",
            "result id",
            "race id",
            "driver id",
            "constructor id",
            "number",
            "grid",
            "position",
            "position text",
            "position order",
            "points",
            "laps",
            "time",
            "milliseconds",
            "fastest lap",
            "rank",
            "fastest lap time",
            "fastest lap speed",
            "status id",
            "driver standings id",
            "race id",
            "driver id",
            "points",
            "position",
            "position text",
            "wins",
            "constructor results id",
            "race id",
            "constructor id",
            "points",
            "status",
            "qualify id",
            "race id",
            "driver id",
            "constructor id",
            "number",
            "position",
            "q1",
            "q2",
            "q3",
            "race id",
            "driver id",
            "stop",
            "lap",
            "time",
            "duration",
            "milliseconds",
            "race id",
            "driver id",
            "lap",
            "position",
            "time",
            "milliseconds"
        ],
        "template_feedback": "use drivers table and driver standings table in place of constructor standings table . additionally make sure that driver standings 's position equals 1 and driver standings 's wins equals 1 . find forename in place of constructor standings 's position text .",
        "positive_example": "find distinct constructor id of status whose status 's driver id present in constructor results and constructor id equals 1 ."
    },
    {
        "db_id": "formula_1",
        "table_names": [
            "circuits",
            "races",
            "drivers",
            "status",
            "seasons",
            "constructors",
            "constructor standings",
            "results",
            "driver standings",
            "constructor results",
            "qualifying",
            "pit stops",
            "lap times"
        ],
        "column_names": [
            "circuit id",
            "circuit reference",
            "name",
            "location",
            "country",
            "latitude",
            "longitude",
            "altitude",
            "url",
            "race id",
            "year",
            "round",
            "circuit id",
            "name",
            "date",
            "time",
            "url",
            "driver id",
            "driver reference",
            "number",
            "code",
            "forename",
            "surname",
            "dob",
            "nationality",
            "url",
            "status id",
            "status",
            "year",
            "url",
            "constructor id",
            "constructor reference",
            "name",
            "nationality",
            "url",
            "constructor standings id",
            "race id",
            "constructor id",
            "points",
            "position",
            "position text",
            "wins",
            "result id",
            "race id",
            "driver id",
            "constructor id",
            "number",
            "grid",
            "position",
            "position text",
            "position order",
            "points",
            "laps",
            "time",
            "milliseconds",
            "fastest lap",
            "rank",
            "fastest lap time",
            "fastest lap speed",
            "status id",
            "driver standings id",
            "race id",
            "driver id",
            "points",
            "position",
            "position text",
            "wins",
            "constructor results id",
            "race id",
            "constructor id",
            "points",
            "status",
            "qualify id",
            "race id",
            "driver id",
            "constructor id",
            "number",
            "position",
            "q1",
            "q2",
            "q3",
            "race id",
            "driver id",
            "stop",
            "lap",
            "time",
            "duration",
            "milliseconds",
            "race id",
            "driver id",
            "lap",
            "position",
            "time",
            "milliseconds"
        ],
        "template_feedback": "use drivers table and driver standings table in place of constructor standings table . additionally make sure that driver standings 's position equals 1 and driver standings 's wins equals 1 . find forename in place of constructor standings 's position text .",
        "positive_example": "list the unique constructor id of status where constructor id is 1 and status id is from constructor result ."
    },
    {
        "db_id": "sakila_1",
        "table_names": [
            "actor",
            "address",
            "category",
            "city",
            "country",
            "customer",
            "film",
            "film actor",
            "film category",
            "film text",
            "inventory",
            "language",
            "payment",
            "rental",
            "staff",
            "store"
        ],
        "column_names": [
            "actor id",
            "first name",
            "last name",
            "last update",
            "address id",
            "address",
            "address2",
            "district",
            "city id",
            "postal code",
            "phone",
            "last update",
            "category id",
            "name",
            "last update",
            "city id",
            "city",
            "country id",
            "last update",
            "country id",
            "country",
            "last update",
            "customer id",
            "store id",
            "first name",
            "last name",
            "email",
            "address id",
            "active",
            "create date",
            "last update",
            "film id",
            "title",
            "description",
            "release year",
            "language id",
            "original language id",
            "rental duration",
            "rental rate",
            "length",
            "replacement cost",
            "rating",
            "special features",
            "last update",
            "actor id",
            "film id",
            "last update",
            "film id",
            "category id",
            "last update",
            "film id",
            "title",
            "description",
            "inventory id",
            "film id",
            "store id",
            "last update",
            "language id",
            "name",
            "last update",
            "payment id",
            "customer id",
            "staff id",
            "rental id",
            "amount",
            "payment date",
            "last update",
            "rental id",
            "rental date",
            "inventory id",
            "customer id",
            "return date",
            "staff id",
            "last update",
            "staff id",
            "first name",
            "last name",
            "address id",
            "picture",
            "email",
            "store id",
            "active",
            "username",
            "password",
            "last update",
            "store id",
            "manager staff id",
            "address id",
            "last update"
        ],
        "template_feedback": "in step 3 , find number of rows in place of address .",
        "positive_example": "in place of address in step 3 find count of city id of address table ."
    },
    {
        "db_id": "sakila_1",
        "table_names": [
            "actor",
            "address",
            "category",
            "city",
            "country",
            "customer",
            "film",
            "film actor",
            "film category",
            "film text",
            "inventory",
            "language",
            "payment",
            "rental",
            "staff",
            "store"
        ],
        "column_names": [
            "actor id",
            "first name",
            "last name",
            "last update",
            "address id",
            "address",
            "address2",
            "district",
            "city id",
            "postal code",
            "phone",
            "last update",
            "category id",
            "name",
            "last update",
            "city id",
            "city",
            "country id",
            "last update",
            "country id",
            "country",
            "last update",
            "customer id",
            "store id",
            "first name",
            "last name",
            "email",
            "address id",
            "active",
            "create date",
            "last update",
            "film id",
            "title",
            "description",
            "release year",
            "language id",
            "original language id",
            "rental duration",
            "rental rate",
            "length",
            "replacement cost",
            "rating",
            "special features",
            "last update",
            "actor id",
            "film id",
            "last update",
            "film id",
            "category id",
            "last update",
            "film id",
            "title",
            "description",
            "inventory id",
            "film id",
            "store id",
            "last update",
            "language id",
            "name",
            "last update",
            "payment id",
            "customer id",
            "staff id",
            "rental id",
            "amount",
            "payment date",
            "last update",
            "rental id",
            "rental date",
            "inventory id",
            "customer id",
            "return date",
            "staff id",
            "last update",
            "staff id",
            "first name",
            "last name",
            "address id",
            "picture",
            "email",
            "store id",
            "active",
            "username",
            "password",
            "last update",
            "store id",
            "manager staff id",
            "address id",
            "last update"
        ],
        "template_feedback": "in step 3 , find number of rows in place of address .",
        "positive_example": "in step 3 , you need to determine the number of city id from the address table instead of address ."
    },
    {
        "db_id": "products_gen_characteristics",
        "table_names": [
            "reference characteristic types",
            "reference colors",
            "reference product categories",
            "characteristics",
            "products",
            "product characteristics"
        ],
        "column_names": [
            "characteristic type code",
            "characteristic type description",
            "color code",
            "color description",
            "product category code",
            "product category description",
            "unit of measure",
            "characteristic id",
            "characteristic type code",
            "characteristic data type",
            "characteristic name",
            "other characteristic details",
            "product id",
            "color code",
            "product category code",
            "product name",
            "typical buying price",
            "typical selling price",
            "product description",
            "other product details",
            "product id",
            "characteristic id",
            "product characteristic value"
        ],
        "template_feedback": "in step 1 , do not use the product characteristics table and products table . in step 2 , remove the product name equals cumin conditions . in step 3 , additionally use the information from the product characteristics table besides the characteristics table .",
        "positive_example": "search name , other details and data type of characteristic whose characteristic should not available in product characteristic table ."
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "table_names": [
            "reference payment methods",
            "reference service types",
            "addresses",
            "products",
            "marketing regions",
            "clients",
            "drama workshop groups",
            "performers",
            "customers",
            "stores",
            "bookings",
            "performers in bookings",
            "customer orders",
            "order items",
            "invoices",
            "services",
            "bookings services",
            "invoice items"
        ],
        "column_names": [
            "payment method code",
            "payment method description",
            "service type code",
            "parent service type code",
            "service type description",
            "address id",
            "line 1",
            "line 2",
            "city town",
            "state county",
            "other details",
            "product id",
            "product name",
            "product price",
            "product description",
            "other product service details",
            "marketing region code",
            "marketing region name",
            "marketing region descriptrion",
            "other details",
            "client id",
            "address id",
            "customer email address",
            "customer name",
            "customer phone",
            "other details",
            "workshop group id",
            "address id",
            "currency code",
            "marketing region code",
            "store name",
            "store phone",
            "store email address",
            "other details",
            "performer id",
            "address id",
            "customer name",
            "customer phone",
            "customer email address",
            "other details",
            "customer id",
            "address id",
            "customer name",
            "customer phone",
            "customer email address",
            "other details",
            "store id",
            "address id",
            "marketing region code",
            "store name",
            "store phone",
            "store email address",
            "other details",
            "booking id",
            "customer id",
            "workshop group id",
            "status code",
            "store id",
            "order date",
            "planned delivery date",
            "actual delivery date",
            "other order details",
            "order id",
            "performer id",
            "order id",
            "customer id",
            "store id",
            "order date",
            "planned delivery date",
            "actual delivery date",
            "other order details",
            "order item id",
            "order id",
            "product id",
            "order quantity",
            "other item details",
            "invoice id",
            "order id",
            "payment method code",
            "product id",
            "order quantity",
            "other item details",
            "order item id",
            "service id",
            "service type code",
            "workshop group id",
            "product description",
            "product name",
            "product price",
            "other product service details",
            "order id",
            "product id",
            "invoice item id",
            "invoice id",
            "order id",
            "order item id",
            "product id",
            "order quantity",
            "other item details"
        ],
        "template_feedback": "use drama workshop groups table in place of reference payment methods table . find number of different currency code in place of number of different payment method code .",
        "positive_example": "i also want the different affiliations"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "table_names": [
            "reference payment methods",
            "reference service types",
            "addresses",
            "products",
            "marketing regions",
            "clients",
            "drama workshop groups",
            "performers",
            "customers",
            "stores",
            "bookings",
            "performers in bookings",
            "customer orders",
            "order items",
            "invoices",
            "services",
            "bookings services",
            "invoice items"
        ],
        "column_names": [
            "payment method code",
            "payment method description",
            "service type code",
            "parent service type code",
            "service type description",
            "address id",
            "line 1",
            "line 2",
            "city town",
            "state county",
            "other details",
            "product id",
            "product name",
            "product price",
            "product description",
            "other product service details",
            "marketing region code",
            "marketing region name",
            "marketing region descriptrion",
            "other details",
            "client id",
            "address id",
            "customer email address",
            "customer name",
            "customer phone",
            "other details",
            "workshop group id",
            "address id",
            "currency code",
            "marketing region code",
            "store name",
            "store phone",
            "store email address",
            "other details",
            "performer id",
            "address id",
            "customer name",
            "customer phone",
            "customer email address",
            "other details",
            "customer id",
            "address id",
            "customer name",
            "customer phone",
            "customer email address",
            "other details",
            "store id",
            "address id",
            "marketing region code",
            "store name",
            "store phone",
            "store email address",
            "other details",
            "booking id",
            "customer id",
            "workshop group id",
            "status code",
            "store id",
            "order date",
            "planned delivery date",
            "actual delivery date",
            "other order details",
            "order id",
            "performer id",
            "order id",
            "customer id",
            "store id",
            "order date",
            "planned delivery date",
            "actual delivery date",
            "other order details",
            "order item id",
            "order id",
            "product id",
            "order quantity",
            "other item details",
            "invoice id",
            "order id",
            "payment method code",
            "product id",
            "order quantity",
            "other item details",
            "order item id",
            "service id",
            "service type code",
            "workshop group id",
            "product description",
            "product name",
            "product price",
            "other product service details",
            "order id",
            "product id",
            "invoice item id",
            "invoice id",
            "order id",
            "order item id",
            "product id",
            "order quantity",
            "other item details"
        ],
        "template_feedback": "use drama workshop groups table in place of reference payment methods table . find number of different currency code in place of number of different payment method code .",
        "positive_example": "provide me various affiliations as well ."
    },
    {
        "db_id": "musical",
        "table_names": [
            "musical",
            "actor"
        ],
        "column_names": [
            "musical id",
            "name",
            "year",
            "award",
            "category",
            "nominee",
            "result",
            "actor id",
            "name",
            "musical id",
            "character",
            "duration",
            "age"
        ],
        "template_feedback": "in step 2 , use musical table in place of actor table . make sure the musical 's musical id is not one of the results of step 1 the actor 's musical id is not one of the results of step 1 . find musical 's name in place of actor 's name .",
        "positive_example": "supersede actor table with musical table in step 2 ."
    },
    {
        "db_id": "musical",
        "table_names": [
            "musical",
            "actor"
        ],
        "column_names": [
            "musical id",
            "name",
            "year",
            "award",
            "category",
            "nominee",
            "result",
            "actor id",
            "name",
            "musical id",
            "character",
            "duration",
            "age"
        ],
        "template_feedback": "in step 2 , use musical table in place of actor table . make sure the musical 's musical id is not one of the results of step 1 the actor 's musical id is not one of the results of step 1 . find musical 's name in place of actor 's name .",
        "positive_example": "in step 2 , use musical table in place of actor table ."
    },
    {
        "db_id": "student_1",
        "table_names": [
            "list",
            "teachers"
        ],
        "column_names": [
            "last name",
            "first name",
            "grade",
            "class room",
            "last name",
            "first name",
            "class room"
        ],
        "template_feedback": "make sure no repetition in the results . you should not order the results .",
        "positive_example": "remove \" ordered ascending by class room"
    },
    {
        "db_id": "student_1",
        "table_names": [
            "list",
            "teachers"
        ],
        "column_names": [
            "last name",
            "first name",
            "grade",
            "class room",
            "last name",
            "first name",
            "class room"
        ],
        "template_feedback": "make sure no repetition in the results . you should not order the results .",
        "positive_example": "delete the condition for arranging \" class room in ascendant order \" ."
    },
    {
        "db_id": "candidate_poll",
        "table_names": [
            "candidate",
            "people"
        ],
        "column_names": [
            "candidate id",
            "people id",
            "poll source",
            "date",
            "support rate",
            "consider rate",
            "oppose rate",
            "unsure rate",
            "people id",
            "sex",
            "name",
            "date of birth",
            "height",
            "weight"
        ],
        "template_feedback": "find support rate in place of unsure rate .",
        "positive_example": "you should use rate of support ."
    },
    {
        "db_id": "allergy_1",
        "table_names": [
            "allergy type",
            "has allergy",
            "student"
        ],
        "column_names": [
            "allergy name",
            "allergy type",
            "stuid",
            "allergy",
            "stuid",
            "last name",
            "first name",
            "age",
            "sex",
            "major",
            "advisor",
            "city code"
        ],
        "template_feedback": "in step 2 , you shoud consider either of the conditions rather than both of them . additionally make sure that allergy equals eggs .",
        "positive_example": "in step 2 add \" or eggs \" ahead of milk ."
    },
    {
        "db_id": "allergy_1",
        "table_names": [
            "allergy type",
            "has allergy",
            "student"
        ],
        "column_names": [
            "allergy name",
            "allergy type",
            "stuid",
            "allergy",
            "stuid",
            "last name",
            "first name",
            "age",
            "sex",
            "major",
            "advisor",
            "city code"
        ],
        "template_feedback": "in step 2 , you shoud consider either of the conditions rather than both of them . additionally make sure that allergy equals eggs .",
        "positive_example": "include the phrase \" or eggs \" before milk in step 2 ."
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "table_names": [
            "reference document types",
            "reference calendar",
            "reference locations",
            "roles",
            "all documents",
            "employees",
            "document locations",
            "documents to be destroyed"
        ],
        "column_names": [
            "document type code",
            "document type name",
            "document type description",
            "calendar date",
            "day number",
            "location code",
            "location name",
            "location description",
            "role code",
            "role name",
            "role description",
            "document id",
            "date stored",
            "document type code",
            "document name",
            "document description",
            "other details",
            "employee id",
            "role code",
            "employee name",
            "gender mfu",
            "date of birth",
            "other details",
            "document id",
            "location code",
            "date in location from",
            "date in locaton to",
            "document id",
            "destruction authorised by employee id",
            "destroyed by employee id",
            "planned destruction date",
            "actual destruction date",
            "other details"
        ],
        "template_feedback": "additionally use the information from the document locations table and all documents table besides the reference locations table . consider the document name equals robin cv conditions in place of the location name equals robin cv conditions .",
        "positive_example": "find name of documents in place of name of second location ."
    },
    {
        "db_id": "protein_institute",
        "table_names": [
            "building",
            "institution",
            "protein"
        ],
        "column_names": [
            "building id",
            "name",
            "street address",
            "years as tallest",
            "height feet",
            "floors",
            "institution id",
            "institution",
            "location",
            "founded",
            "type",
            "enrollment",
            "team",
            "primary conference",
            "building id",
            "common name",
            "protein name",
            "divergence from human lineage",
            "accession number",
            "sequence length",
            "sequence identity to human protein",
            "institution id"
        ],
        "template_feedback": "in step 2 , find institution and protein name in place of common name and type .",
        "positive_example": "in step 2 , find the name of protein and institution ."
    },
    {
        "db_id": "bike_1",
        "table_names": [
            "station",
            "status",
            "trip",
            "weather"
        ],
        "column_names": [
            "id",
            "name",
            "latitude",
            "longitude",
            "dock count",
            "city",
            "installation date",
            "station id",
            "bikes available",
            "docks available",
            "time",
            "id",
            "duration",
            "start date",
            "start station name",
            "start station id",
            "end date",
            "end station name",
            "end station id",
            "bike id",
            "subscription type",
            "zip code",
            "date",
            "max temperature f",
            "mean temperature f",
            "min temperature f",
            "max dew point f",
            "mean dew point f",
            "min dew point f",
            "max humidity",
            "mean humidity",
            "min humidity",
            "max sea level pressure inches",
            "mean sea level pressure inches",
            "min sea level pressure inches",
            "max visibility miles",
            "mean visibility miles",
            "min visibility miles",
            "max wind speed mph",
            "mean wind speed mph",
            "max gust speed mph",
            "precipitation inches",
            "cloud cover",
            "events",
            "wind dir degrees",
            "zip code"
        ],
        "template_feedback": "in step 1 , do not use the trip table . in step 2 , additionally make sure that max wind speed mph greater than or equals 25 . find weather 's zip code in place of trip 's zip code .",
        "positive_example": "need to fulfill the condition that max mph wind speed is equivalent to 25 in step 2 ."
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "table_names": [
            "reference payment methods",
            "reference service types",
            "addresses",
            "products",
            "marketing regions",
            "clients",
            "drama workshop groups",
            "performers",
            "customers",
            "stores",
            "bookings",
            "performers in bookings",
            "customer orders",
            "order items",
            "invoices",
            "services",
            "bookings services",
            "invoice items"
        ],
        "column_names": [
            "payment method code",
            "payment method description",
            "service type code",
            "parent service type code",
            "service type description",
            "address id",
            "line 1",
            "line 2",
            "city town",
            "state county",
            "other details",
            "product id",
            "product name",
            "product price",
            "product description",
            "other product service details",
            "marketing region code",
            "marketing region name",
            "marketing region descriptrion",
            "other details",
            "client id",
            "address id",
            "customer email address",
            "customer name",
            "customer phone",
            "other details",
            "workshop group id",
            "address id",
            "currency code",
            "marketing region code",
            "store name",
            "store phone",
            "store email address",
            "other details",
            "performer id",
            "address id",
            "customer name",
            "customer phone",
            "customer email address",
            "other details",
            "customer id",
            "address id",
            "customer name",
            "customer phone",
            "customer email address",
            "other details",
            "store id",
            "address id",
            "marketing region code",
            "store name",
            "store phone",
            "store email address",
            "other details",
            "booking id",
            "customer id",
            "workshop group id",
            "status code",
            "store id",
            "order date",
            "planned delivery date",
            "actual delivery date",
            "other order details",
            "order id",
            "performer id",
            "order id",
            "customer id",
            "store id",
            "order date",
            "planned delivery date",
            "actual delivery date",
            "other order details",
            "order item id",
            "order id",
            "product id",
            "order quantity",
            "other item details",
            "invoice id",
            "order id",
            "payment method code",
            "product id",
            "order quantity",
            "other item details",
            "order item id",
            "service id",
            "service type code",
            "workshop group id",
            "product description",
            "product name",
            "product price",
            "other product service details",
            "order id",
            "product id",
            "invoice item id",
            "invoice id",
            "order id",
            "order item id",
            "product id",
            "order quantity",
            "other item details"
        ],
        "template_feedback": "remove the store name equals amely cafe conditions .",
        "positive_example": "you should drop the condition where name of store is amely cafe ."
    },
    {
        "db_id": "chinook_1",
        "table_names": [
            "album",
            "artist",
            "customer",
            "employee",
            "genre",
            "invoice",
            "invoice line",
            "media type",
            "playlist",
            "playlist track",
            "track"
        ],
        "column_names": [
            "album id",
            "title",
            "artist id",
            "artist id",
            "name",
            "customer id",
            "first name",
            "last name",
            "company",
            "address",
            "city",
            "state",
            "country",
            "postal code",
            "phone",
            "fax",
            "email",
            "support representative id",
            "employee id",
            "last name",
            "first name",
            "title",
            "reports to",
            "birth date",
            "hire date",
            "address",
            "city",
            "state",
            "country",
            "postal code",
            "phone",
            "fax",
            "email",
            "genre id",
            "name",
            "invoice id",
            "customer id",
            "invoice date",
            "billing address",
            "billing city",
            "billing state",
            "billing country",
            "billing postal code",
            "total",
            "invoice line id",
            "invoice id",
            "track id",
            "unit price",
            "quantity",
            "media type id",
            "name",
            "play list id",
            "name",
            "play list id",
            "track id",
            "track id",
            "name",
            "album id",
            "media type id",
            "genre id",
            "composer",
            "milliseconds",
            "bytes",
            "unit price"
        ],
        "template_feedback": "in step 3 , make sure that the corresponding value in step 2 less than or equals 20 . find customer 's last name in place of employee 's last name .",
        "positive_example": "ensure who serves less than or equal to 20 customer not greater than 20 ."
    },
    {
        "db_id": "chinook_1",
        "table_names": [
            "album",
            "artist",
            "customer",
            "employee",
            "genre",
            "invoice",
            "invoice line",
            "media type",
            "playlist",
            "playlist track",
            "track"
        ],
        "column_names": [
            "album id",
            "title",
            "artist id",
            "artist id",
            "name",
            "customer id",
            "first name",
            "last name",
            "company",
            "address",
            "city",
            "state",
            "country",
            "postal code",
            "phone",
            "fax",
            "email",
            "support representative id",
            "employee id",
            "last name",
            "first name",
            "title",
            "reports to",
            "birth date",
            "hire date",
            "address",
            "city",
            "state",
            "country",
            "postal code",
            "phone",
            "fax",
            "email",
            "genre id",
            "name",
            "invoice id",
            "customer id",
            "invoice date",
            "billing address",
            "billing city",
            "billing state",
            "billing country",
            "billing postal code",
            "total",
            "invoice line id",
            "invoice id",
            "track id",
            "unit price",
            "quantity",
            "media type id",
            "name",
            "play list id",
            "name",
            "play list id",
            "track id",
            "track id",
            "name",
            "album id",
            "media type id",
            "genre id",
            "composer",
            "milliseconds",
            "bytes",
            "unit price"
        ],
        "template_feedback": "in step 3 , make sure that the corresponding value in step 2 less than or equals 20 . find customer 's last name in place of employee 's last name .",
        "positive_example": "you need to find who have served lower than or equivalent to 20 customer ."
    },
    {
        "db_id": "student_assessment",
        "table_names": [
            "addresses",
            "people",
            "students",
            "courses",
            "people addresses",
            "student course registrations",
            "student course attendance",
            "candidates",
            "candidate assessments"
        ],
        "column_names": [
            "address id",
            "line 1",
            "line 2",
            "city",
            "zip postcode",
            "state province county",
            "country",
            "person id",
            "first name",
            "middle name",
            "last name",
            "cell mobile number",
            "email address",
            "login name",
            "password",
            "student id",
            "student details",
            "course id",
            "course name",
            "course description",
            "other details",
            "person address id",
            "person id",
            "address id",
            "date from",
            "date to",
            "student id",
            "course id",
            "registration date",
            "student id",
            "course id",
            "date of attendance",
            "candidate id",
            "candidate details",
            "candidate id",
            "qualification",
            "assessment date",
            "asessment outcome code"
        ],
        "template_feedback": "additionally make sure that course id equals 301 .",
        "positive_example": "confirm that their id of course equivalent to 301 ."
    },
    {
        "db_id": "bike_1",
        "table_names": [
            "station",
            "status",
            "trip",
            "weather"
        ],
        "column_names": [
            "id",
            "name",
            "latitude",
            "longitude",
            "dock count",
            "city",
            "installation date",
            "station id",
            "bikes available",
            "docks available",
            "time",
            "id",
            "duration",
            "start date",
            "start station name",
            "start station id",
            "end date",
            "end station name",
            "end station id",
            "bike id",
            "subscription type",
            "zip code",
            "date",
            "max temperature f",
            "mean temperature f",
            "min temperature f",
            "max dew point f",
            "mean dew point f",
            "min dew point f",
            "max humidity",
            "mean humidity",
            "min humidity",
            "max sea level pressure inches",
            "mean sea level pressure inches",
            "min sea level pressure inches",
            "max visibility miles",
            "mean visibility miles",
            "min visibility miles",
            "max wind speed mph",
            "mean wind speed mph",
            "max gust speed mph",
            "precipitation inches",
            "cloud cover",
            "events",
            "wind dir degrees",
            "zip code"
        ],
        "template_feedback": "consider the max temperature f greater than 85 conditions in place of the max sea level pressure inches greater than 85 conditions .",
        "positive_example": "i want highest temperature f ."
    },
    {
        "db_id": "program_share",
        "table_names": [
            "program",
            "channel",
            "broadcast",
            "broadcast share"
        ],
        "column_names": [
            "program id",
            "name",
            "origin",
            "launch",
            "owner",
            "channel id",
            "name",
            "owner",
            "share in percent",
            "rating in percent",
            "channel id",
            "program id",
            "time of day",
            "channel id",
            "program id",
            "date",
            "share in percent"
        ],
        "template_feedback": "in step 1 , do not use the broadcast table and channel table . in step 2 , find program 's name in place of channel 's name .",
        "positive_example": "there should be program name and program origin along with program owner for each program ."
    },
    {
        "db_id": "program_share",
        "table_names": [
            "program",
            "channel",
            "broadcast",
            "broadcast share"
        ],
        "column_names": [
            "program id",
            "name",
            "origin",
            "launch",
            "owner",
            "channel id",
            "name",
            "owner",
            "share in percent",
            "rating in percent",
            "channel id",
            "program id",
            "time of day",
            "channel id",
            "program id",
            "date",
            "share in percent"
        ],
        "template_feedback": "in step 1 , do not use the broadcast table and channel table . in step 2 , find program 's name in place of channel 's name .",
        "positive_example": "each program should contain its name , origin and name of the owner ."
    },
    {
        "db_id": "program_share",
        "table_names": [
            "program",
            "channel",
            "broadcast",
            "broadcast share"
        ],
        "column_names": [
            "program id",
            "name",
            "origin",
            "launch",
            "owner",
            "channel id",
            "name",
            "owner",
            "share in percent",
            "rating in percent",
            "channel id",
            "program id",
            "time of day",
            "channel id",
            "program id",
            "date",
            "share in percent"
        ],
        "template_feedback": "in step 1 , do not use the broadcast table and channel table . in step 2 , find program 's name in place of channel 's name .",
        "positive_example": "there should be program 's name and program 's origin along with program 's owner for each program ."
    },
    {
        "db_id": "program_share",
        "table_names": [
            "program",
            "channel",
            "broadcast",
            "broadcast share"
        ],
        "column_names": [
            "program id",
            "name",
            "origin",
            "launch",
            "owner",
            "channel id",
            "name",
            "owner",
            "share in percent",
            "rating in percent",
            "channel id",
            "program id",
            "time of day",
            "channel id",
            "program id",
            "date",
            "share in percent"
        ],
        "template_feedback": "in step 1 , do not use the broadcast table and channel table . in step 2 , find program 's name in place of channel 's name .",
        "positive_example": "i want name , origin and owners name for all programs ."
    },
    {
        "db_id": "products_gen_characteristics",
        "table_names": [
            "reference characteristic types",
            "reference colors",
            "reference product categories",
            "characteristics",
            "products",
            "product characteristics"
        ],
        "column_names": [
            "characteristic type code",
            "characteristic type description",
            "color code",
            "color description",
            "product category code",
            "product category description",
            "unit of measure",
            "characteristic id",
            "characteristic type code",
            "characteristic data type",
            "characteristic name",
            "other characteristic details",
            "product id",
            "color code",
            "product category code",
            "product name",
            "typical buying price",
            "typical selling price",
            "product description",
            "other product details",
            "product id",
            "characteristic id",
            "product characteristic value"
        ],
        "template_feedback": "in step 1 , remove the characteristic name equals slow conditions . find characteristic data type in place of characteristic type code . in step 2 , additionally use the information from the product characteristics table besides the characteristics table .",
        "positive_example": "search the name , other details , data type of characteristic from characteristic table whose characteristic are not available in product characteristic table ."
    },
    {
        "db_id": "assets_maintenance",
        "table_names": [
            "third party companies",
            "maintenance contracts",
            "parts",
            "skills",
            "staff",
            "assets",
            "asset parts",
            "maintenance engineers",
            "engineer skills",
            "fault log",
            "engineer visits",
            "part faults",
            "fault log parts",
            "skills required to fix"
        ],
        "column_names": [
            "company id",
            "company type",
            "company name",
            "company address",
            "other company details",
            "maintenance contract id",
            "maintenance contract company id",
            "contract start date",
            "contract end date",
            "other contract details",
            "part id",
            "part name",
            "chargeable yn",
            "chargeable amount",
            "other part details",
            "skill id",
            "skill code",
            "skill description",
            "staff id",
            "staff name",
            "gender",
            "other staff details",
            "asset id",
            "maintenance contract id",
            "supplier company id",
            "asset details",
            "asset make",
            "asset model",
            "asset acquired date",
            "asset disposed date",
            "other asset details",
            "asset id",
            "part id",
            "engineer id",
            "company id",
            "first name",
            "last name",
            "other details",
            "engineer id",
            "skill id",
            "fault log entry id",
            "asset id",
            "recorded by staff id",
            "fault log entry datetime",
            "fault description",
            "other fault details",
            "engineer visit id",
            "contact staff id",
            "engineer id",
            "fault log entry id",
            "fault status",
            "visit start datetime",
            "visit end datetime",
            "other visit details",
            "part fault id",
            "part id",
            "fault short name",
            "fault description",
            "other fault details",
            "fault log entry id",
            "part fault id",
            "fault status",
            "part fault id",
            "skill id"
        ],
        "template_feedback": "additionally find asset model and asset make .",
        "positive_example": "you need to determine the asset 's make , model and details ."
    },
    {
        "db_id": "architecture",
        "table_names": [
            "architect",
            "bridge",
            "mill"
        ],
        "column_names": [
            "id",
            "name",
            "nationality",
            "gender",
            "architect id",
            "id",
            "name",
            "location",
            "length meters",
            "length feet",
            "architect id",
            "id",
            "location",
            "name",
            "type",
            "built year",
            "notes"
        ],
        "template_feedback": "additionally use the information from the architect table besides the bridge table . additionally make sure that nationality equals american . order the results ascending .",
        "positive_example": "you have to include that architect should be american ."
    },
    {
        "db_id": "student_1",
        "table_names": [
            "list",
            "teachers"
        ],
        "column_names": [
            "last name",
            "first name",
            "grade",
            "class room",
            "last name",
            "first name",
            "class room"
        ],
        "template_feedback": "in step 1 , additionally use the information from the list table besides the teachers table . additionally find for each value of teachers 's last name .",
        "positive_example": "you need to verify the name of the teacher who teaches maximum number of students ."
    },
    {
        "db_id": "student_1",
        "table_names": [
            "list",
            "teachers"
        ],
        "column_names": [
            "last name",
            "first name",
            "grade",
            "class room",
            "last name",
            "first name",
            "class room"
        ],
        "template_feedback": "in step 1 , additionally use the information from the list table besides the teachers table . additionally find for each value of teachers 's last name .",
        "positive_example": "look for the full name of teachers who had taught highest students ."
    },
    {
        "db_id": "department_store",
        "table_names": [
            "addresses",
            "staff",
            "suppliers",
            "department store chain",
            "customers",
            "products",
            "supplier addresses",
            "customer addresses",
            "customer orders",
            "department stores",
            "departments",
            "order items",
            "product suppliers",
            "staff department assignments"
        ],
        "column_names": [
            "address id",
            "address details",
            "staff id",
            "staff gender",
            "staff name",
            "supplier id",
            "supplier name",
            "supplier phone",
            "department store chain id",
            "department store chain name",
            "customer id",
            "payment method code",
            "customer code",
            "customer name",
            "customer address",
            "customer phone",
            "customer email",
            "product id",
            "product type code",
            "product name",
            "product price",
            "supplier id",
            "address id",
            "date from",
            "date to",
            "customer id",
            "address id",
            "date from",
            "date to",
            "order id",
            "customer id",
            "order status code",
            "order date",
            "department store id",
            "department store chain id",
            "store name",
            "store address",
            "store phone",
            "store email",
            "department id",
            "department store id",
            "department name",
            "order item id",
            "order id",
            "product id",
            "product id",
            "supplier id",
            "date supplied from",
            "date supplied to",
            "total amount purchased",
            "total value purchased",
            "staff id",
            "department id",
            "date assigned from",
            "job title code",
            "date assigned to"
        ],
        "template_feedback": "in step 1 , additionally make sure that job title code equals clerical staff . find maximum date assigned to in place of minimum date assigned to . in step 2 , make sure the date assigned to is less than the results of step 1 the date assigned to is greater than the results of step 1 .",
        "positive_example": "need to find assigned from date of staff having job title as clerical staff . also , in step 2 , i want lesser values instead of greater ."
    },
    {
        "db_id": "bike_1",
        "table_names": [
            "station",
            "status",
            "trip",
            "weather"
        ],
        "column_names": [
            "id",
            "name",
            "latitude",
            "longitude",
            "dock count",
            "city",
            "installation date",
            "station id",
            "bikes available",
            "docks available",
            "time",
            "id",
            "duration",
            "start date",
            "start station name",
            "start station id",
            "end date",
            "end station name",
            "end station id",
            "bike id",
            "subscription type",
            "zip code",
            "date",
            "max temperature f",
            "mean temperature f",
            "min temperature f",
            "max dew point f",
            "mean dew point f",
            "min dew point f",
            "max humidity",
            "mean humidity",
            "min humidity",
            "max sea level pressure inches",
            "mean sea level pressure inches",
            "min sea level pressure inches",
            "max visibility miles",
            "mean visibility miles",
            "min visibility miles",
            "max wind speed mph",
            "mean wind speed mph",
            "max gust speed mph",
            "precipitation inches",
            "cloud cover",
            "events",
            "wind dir degrees",
            "zip code"
        ],
        "template_feedback": "in step 1 , find mean humidity in place of mean dew point f .",
        "positive_example": "take max humidity instead of max dew point f in step 1 ."
    },
    {
        "db_id": "bike_1",
        "table_names": [
            "station",
            "status",
            "trip",
            "weather"
        ],
        "column_names": [
            "id",
            "name",
            "latitude",
            "longitude",
            "dock count",
            "city",
            "installation date",
            "station id",
            "bikes available",
            "docks available",
            "time",
            "id",
            "duration",
            "start date",
            "start station name",
            "start station id",
            "end date",
            "end station name",
            "end station id",
            "bike id",
            "subscription type",
            "zip code",
            "date",
            "max temperature f",
            "mean temperature f",
            "min temperature f",
            "max dew point f",
            "mean dew point f",
            "min dew point f",
            "max humidity",
            "mean humidity",
            "min humidity",
            "max sea level pressure inches",
            "mean sea level pressure inches",
            "min sea level pressure inches",
            "max visibility miles",
            "mean visibility miles",
            "min visibility miles",
            "max wind speed mph",
            "mean wind speed mph",
            "max gust speed mph",
            "precipitation inches",
            "cloud cover",
            "events",
            "wind dir degrees",
            "zip code"
        ],
        "template_feedback": "in step 1 , find mean humidity in place of mean dew point f .",
        "positive_example": "in step 1 , substitute max dew point f with max humidity ."
    },
    {
        "db_id": "bike_1",
        "table_names": [
            "station",
            "status",
            "trip",
            "weather"
        ],
        "column_names": [
            "id",
            "name",
            "latitude",
            "longitude",
            "dock count",
            "city",
            "installation date",
            "station id",
            "bikes available",
            "docks available",
            "time",
            "id",
            "duration",
            "start date",
            "start station name",
            "start station id",
            "end date",
            "end station name",
            "end station id",
            "bike id",
            "subscription type",
            "zip code",
            "date",
            "max temperature f",
            "mean temperature f",
            "min temperature f",
            "max dew point f",
            "mean dew point f",
            "min dew point f",
            "max humidity",
            "mean humidity",
            "min humidity",
            "max sea level pressure inches",
            "mean sea level pressure inches",
            "min sea level pressure inches",
            "max visibility miles",
            "mean visibility miles",
            "min visibility miles",
            "max wind speed mph",
            "mean wind speed mph",
            "max gust speed mph",
            "precipitation inches",
            "cloud cover",
            "events",
            "wind dir degrees",
            "zip code"
        ],
        "template_feedback": "in step 1 , find the average mean visibility miles for each value of zip code . in step 2 , make sure that the corresponding value in step 1 less than 10 .",
        "positive_example": "find zip code where max visibility miles below 10 ."
    },
    {
        "db_id": "bike_1",
        "table_names": [
            "station",
            "status",
            "trip",
            "weather"
        ],
        "column_names": [
            "id",
            "name",
            "latitude",
            "longitude",
            "dock count",
            "city",
            "installation date",
            "station id",
            "bikes available",
            "docks available",
            "time",
            "id",
            "duration",
            "start date",
            "start station name",
            "start station id",
            "end date",
            "end station name",
            "end station id",
            "bike id",
            "subscription type",
            "zip code",
            "date",
            "max temperature f",
            "mean temperature f",
            "min temperature f",
            "max dew point f",
            "mean dew point f",
            "min dew point f",
            "max humidity",
            "mean humidity",
            "min humidity",
            "max sea level pressure inches",
            "mean sea level pressure inches",
            "min sea level pressure inches",
            "max visibility miles",
            "mean visibility miles",
            "min visibility miles",
            "max wind speed mph",
            "mean wind speed mph",
            "max gust speed mph",
            "precipitation inches",
            "cloud cover",
            "events",
            "wind dir degrees",
            "zip code"
        ],
        "template_feedback": "in step 1 , find the average mean visibility miles for each value of zip code . in step 2 , make sure that the corresponding value in step 1 less than 10 .",
        "positive_example": "search for zip code having max visibility miles less than 10 ."
    },
    {
        "db_id": "products_gen_characteristics",
        "table_names": [
            "reference characteristic types",
            "reference colors",
            "reference product categories",
            "characteristics",
            "products",
            "product characteristics"
        ],
        "column_names": [
            "characteristic type code",
            "characteristic type description",
            "color code",
            "color description",
            "product category code",
            "product category description",
            "unit of measure",
            "characteristic id",
            "characteristic type code",
            "characteristic data type",
            "characteristic name",
            "other characteristic details",
            "product id",
            "color code",
            "product category code",
            "product name",
            "typical buying price",
            "typical selling price",
            "product description",
            "other product details",
            "product id",
            "characteristic id",
            "product characteristic value"
        ],
        "template_feedback": "find typical buying price in place of typical selling price .",
        "positive_example": "you need to use price of typical buying in place of price of typical selling ."
    },
    {
        "db_id": "assets_maintenance",
        "table_names": [
            "third party companies",
            "maintenance contracts",
            "parts",
            "skills",
            "staff",
            "assets",
            "asset parts",
            "maintenance engineers",
            "engineer skills",
            "fault log",
            "engineer visits",
            "part faults",
            "fault log parts",
            "skills required to fix"
        ],
        "column_names": [
            "company id",
            "company type",
            "company name",
            "company address",
            "other company details",
            "maintenance contract id",
            "maintenance contract company id",
            "contract start date",
            "contract end date",
            "other contract details",
            "part id",
            "part name",
            "chargeable yn",
            "chargeable amount",
            "other part details",
            "skill id",
            "skill code",
            "skill description",
            "staff id",
            "staff name",
            "gender",
            "other staff details",
            "asset id",
            "maintenance contract id",
            "supplier company id",
            "asset details",
            "asset make",
            "asset model",
            "asset acquired date",
            "asset disposed date",
            "other asset details",
            "asset id",
            "part id",
            "engineer id",
            "company id",
            "first name",
            "last name",
            "other details",
            "engineer id",
            "skill id",
            "fault log entry id",
            "asset id",
            "recorded by staff id",
            "fault log entry datetime",
            "fault description",
            "other fault details",
            "engineer visit id",
            "contact staff id",
            "engineer id",
            "fault log entry id",
            "fault status",
            "visit start datetime",
            "visit end datetime",
            "other visit details",
            "part fault id",
            "part id",
            "fault short name",
            "fault description",
            "other fault details",
            "fault log entry id",
            "part fault id",
            "fault status",
            "part fault id",
            "skill id"
        ],
        "template_feedback": "find asset model , asset make , and asset details in place of other asset details . order the results by asset disposed date in place of asset details .",
        "positive_example": "list the assets make , model and details and arrange them in ascending order of asset disposed rate ."
    },
    {
        "db_id": "hospital_1",
        "table_names": [
            "physician",
            "department",
            "affiliated with",
            "procedures",
            "trained in",
            "patient",
            "nurse",
            "appointment",
            "medication",
            "prescribes",
            "block",
            "room",
            "on call",
            "stay",
            "undergoes"
        ],
        "column_names": [
            "employee id",
            "name",
            "position",
            "ssn",
            "departmentid",
            "name",
            "head",
            "physician",
            "department",
            "primary affiliation",
            "code",
            "name",
            "cost",
            "physician",
            "treatment",
            "certification date",
            "certification expires",
            "ssn",
            "name",
            "address",
            "phone",
            "insurance id",
            "pcp",
            "employee id",
            "name",
            "position",
            "registered",
            "ssn",
            "appointment id",
            "patient",
            "prep nurse",
            "physician",
            "start",
            "end",
            "examination room",
            "code",
            "name",
            "brand",
            "description",
            "physician",
            "patient",
            "medication",
            "date",
            "appointment",
            "dose",
            "block floor",
            "block code",
            "roomnumber",
            "room type",
            "block floor",
            "block code",
            "unavailable",
            "nurse",
            "block floor",
            "block code",
            "oncall start",
            "oncall end",
            "stay id",
            "patient",
            "room",
            "stay start",
            "stay end",
            "patient",
            "procedures",
            "stay",
            "date undergoes",
            "physician",
            "assisting nurse"
        ],
        "template_feedback": "in step 1 , do not use the appointment table and physician table . in step 2 , find nurse 's name in place of physician 's name .",
        "positive_example": "find without repetition name of nurse table ordered ascending by nurse 's name ."
    },
    {
        "db_id": "hospital_1",
        "table_names": [
            "physician",
            "department",
            "affiliated with",
            "procedures",
            "trained in",
            "patient",
            "nurse",
            "appointment",
            "medication",
            "prescribes",
            "block",
            "room",
            "on call",
            "stay",
            "undergoes"
        ],
        "column_names": [
            "employee id",
            "name",
            "position",
            "ssn",
            "departmentid",
            "name",
            "head",
            "physician",
            "department",
            "primary affiliation",
            "code",
            "name",
            "cost",
            "physician",
            "treatment",
            "certification date",
            "certification expires",
            "ssn",
            "name",
            "address",
            "phone",
            "insurance id",
            "pcp",
            "employee id",
            "name",
            "position",
            "registered",
            "ssn",
            "appointment id",
            "patient",
            "prep nurse",
            "physician",
            "start",
            "end",
            "examination room",
            "code",
            "name",
            "brand",
            "description",
            "physician",
            "patient",
            "medication",
            "date",
            "appointment",
            "dose",
            "block floor",
            "block code",
            "roomnumber",
            "room type",
            "block floor",
            "block code",
            "unavailable",
            "nurse",
            "block floor",
            "block code",
            "oncall start",
            "oncall end",
            "stay id",
            "patient",
            "room",
            "stay start",
            "stay end",
            "patient",
            "procedures",
            "stay",
            "date undergoes",
            "physician",
            "assisting nurse"
        ],
        "template_feedback": "in step 1 , do not use the appointment table and physician table . in step 2 , find nurse 's name in place of physician 's name .",
        "positive_example": "i want unique nurse name of nurse table in ascending order ."
    },
    {
        "db_id": "hospital_1",
        "table_names": [
            "physician",
            "department",
            "affiliated with",
            "procedures",
            "trained in",
            "patient",
            "nurse",
            "appointment",
            "medication",
            "prescribes",
            "block",
            "room",
            "on call",
            "stay",
            "undergoes"
        ],
        "column_names": [
            "employee id",
            "name",
            "position",
            "ssn",
            "departmentid",
            "name",
            "head",
            "physician",
            "department",
            "primary affiliation",
            "code",
            "name",
            "cost",
            "physician",
            "treatment",
            "certification date",
            "certification expires",
            "ssn",
            "name",
            "address",
            "phone",
            "insurance id",
            "pcp",
            "employee id",
            "name",
            "position",
            "registered",
            "ssn",
            "appointment id",
            "patient",
            "prep nurse",
            "physician",
            "start",
            "end",
            "examination room",
            "code",
            "name",
            "brand",
            "description",
            "physician",
            "patient",
            "medication",
            "date",
            "appointment",
            "dose",
            "block floor",
            "block code",
            "roomnumber",
            "room type",
            "block floor",
            "block code",
            "unavailable",
            "nurse",
            "block floor",
            "block code",
            "oncall start",
            "oncall end",
            "stay id",
            "patient",
            "room",
            "stay start",
            "stay end",
            "patient",
            "procedures",
            "stay",
            "date undergoes",
            "physician",
            "assisting nurse"
        ],
        "template_feedback": "in step 1 , do not use the appointment table and physician table . in step 2 , find nurse 's name in place of physician 's name .",
        "positive_example": "find without repetition name of nurse table ordered ascending by nurse 's name ."
    },
    {
        "db_id": "hospital_1",
        "table_names": [
            "physician",
            "department",
            "affiliated with",
            "procedures",
            "trained in",
            "patient",
            "nurse",
            "appointment",
            "medication",
            "prescribes",
            "block",
            "room",
            "on call",
            "stay",
            "undergoes"
        ],
        "column_names": [
            "employee id",
            "name",
            "position",
            "ssn",
            "departmentid",
            "name",
            "head",
            "physician",
            "department",
            "primary affiliation",
            "code",
            "name",
            "cost",
            "physician",
            "treatment",
            "certification date",
            "certification expires",
            "ssn",
            "name",
            "address",
            "phone",
            "insurance id",
            "pcp",
            "employee id",
            "name",
            "position",
            "registered",
            "ssn",
            "appointment id",
            "patient",
            "prep nurse",
            "physician",
            "start",
            "end",
            "examination room",
            "code",
            "name",
            "brand",
            "description",
            "physician",
            "patient",
            "medication",
            "date",
            "appointment",
            "dose",
            "block floor",
            "block code",
            "roomnumber",
            "room type",
            "block floor",
            "block code",
            "unavailable",
            "nurse",
            "block floor",
            "block code",
            "oncall start",
            "oncall end",
            "stay id",
            "patient",
            "room",
            "stay start",
            "stay end",
            "patient",
            "procedures",
            "stay",
            "date undergoes",
            "physician",
            "assisting nurse"
        ],
        "template_feedback": "in step 1 , do not use the appointment table and physician table . in step 2 , find nurse 's name in place of physician 's name .",
        "positive_example": "you need to determine nurse 's name from nurse table ordered in ascending order and make sure that nurse 's name are not repeated ."
    },
    {
        "db_id": "network_2",
        "table_names": [
            "person",
            "person friend"
        ],
        "column_names": [
            "name",
            "age",
            "city",
            "gender",
            "job",
            "name",
            "friend",
            "year"
        ],
        "template_feedback": "in step 3 , additionally use the information from the person friend table besides the person table . consider the friend equals alice conditions in place of the job equals alice conditions .",
        "positive_example": "find person name and age of whose corresponding person friend friend equals both dan and alice ."
    },
    {
        "db_id": "network_2",
        "table_names": [
            "person",
            "person friend"
        ],
        "column_names": [
            "name",
            "age",
            "city",
            "gender",
            "job",
            "name",
            "friend",
            "year"
        ],
        "template_feedback": "in step 3 , additionally use the information from the person friend table besides the person table . consider the friend equals alice conditions in place of the job equals alice conditions .",
        "positive_example": "find person 's name and age of whose corresponding person friend 's friend equals both dan and alice ."
    }
]