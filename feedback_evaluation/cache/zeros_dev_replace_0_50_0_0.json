[
    {
        "db_id": "driving_school",
        "table_names": [
            "addresses",
            "staff",
            "vehicles",
            "customers",
            "customer payments",
            "lessons"
        ],
        "column_names": [
            "address id",
            "line 1 number building",
            "city",
            "zip postcode",
            "state province county",
            "country",
            "staff id",
            "staff address id",
            "nickname",
            "first name",
            "middle name",
            "last name",
            "date of birth",
            "date joined staff",
            "date left staff",
            "vehicle id",
            "vehicle details",
            "customer id",
            "customer address id",
            "customer status code",
            "date became customer",
            "date of birth",
            "first name",
            "last name",
            "amount outstanding",
            "email address",
            "phone number",
            "cell mobile phone number",
            "customer id",
            "datetime payment",
            "payment method code",
            "amount payment",
            "lesson id",
            "customer id",
            "lesson status code",
            "staff id",
            "vehicle id",
            "lesson date",
            "lesson time",
            "price"
        ],
        "template_feedback": "additionally use the information from the customer payments table besides the customers table . find summation of amount payment in place of summation of amount outstanding .",
        "positive_example": "i want transacted amount ."
    },
    {
        "db_id": "body_builder",
        "table_names": [
            "body builder",
            "people"
        ],
        "column_names": [
            "body builder id",
            "people id",
            "snatch",
            "clean jerk",
            "total",
            "people id",
            "name",
            "height",
            "weight",
            "birth date",
            "birth place"
        ],
        "template_feedback": "additionally use the information from the body builder table besides the people table .",
        "positive_example": "you have to ensure that table of body builder contains id of people ."
    },
    {
        "db_id": "apartment_rentals",
        "table_names": [
            "apartment buildings",
            "apartments",
            "apartment facilities",
            "guests",
            "apartment bookings",
            "view unit status"
        ],
        "column_names": [
            "building id",
            "building short name",
            "building full name",
            "building description",
            "building address",
            "building manager",
            "building phone",
            "apartment id",
            "building id",
            "apartment type code",
            "apartment number",
            "bathroom count",
            "bedroom count",
            "room count",
            "apartment id",
            "facility code",
            "guest id",
            "gender code",
            "guest first name",
            "guest last name",
            "date of birth",
            "apartment booking id",
            "apartment id",
            "guest id",
            "booking status code",
            "booking start date",
            "booking end date",
            "apartment id",
            "apartment booking id",
            "status date",
            "available yes or no"
        ],
        "template_feedback": "in step 2 , do not return booking end date .",
        "positive_example": "i want the guests who are having booking for apartment ."
    },
    {
        "db_id": "body_builder",
        "table_names": [
            "body builder",
            "people"
        ],
        "column_names": [
            "body builder id",
            "people id",
            "snatch",
            "clean jerk",
            "total",
            "people id",
            "name",
            "height",
            "weight",
            "birth date",
            "birth place"
        ],
        "template_feedback": "additionally use the information from the body builder table besides the people table .",
        "positive_example": "confirm that whose people id present in body builder table ."
    },
    {
        "db_id": "phone_1",
        "table_names": [
            "chip model",
            "screen mode",
            "phone"
        ],
        "column_names": [
            "model name",
            "launch year",
            "ram mib",
            "rom mib",
            "slots",
            "wifi",
            "bluetooth",
            "graphics mode",
            "char cells",
            "pixels",
            "hardware colours",
            "used kb",
            "map",
            "type",
            "company name",
            "hardware model name",
            "accreditation type",
            "accreditation level",
            "date",
            "chip model",
            "screen mode"
        ],
        "template_feedback": "find hardware model name in place of accreditation type .",
        "positive_example": "you need to identify the hardware model 's name and replace \" contains \" with \" equals \" ."
    },
    {
        "db_id": "behavior_monitoring",
        "table_names": [
            "reference address types",
            "reference detention type",
            "reference incident type",
            "addresses",
            "students",
            "teachers",
            "assessment notes",
            "behavior incident",
            "detention",
            "student addresses",
            "students in detention"
        ],
        "column_names": [
            "address type code",
            "address type description",
            "detention type code",
            "detention type description",
            "incident type code",
            "incident type description",
            "address id",
            "line 1",
            "line 2",
            "line 3",
            "city",
            "zip postcode",
            "state province county",
            "country",
            "other address details",
            "student id",
            "address id",
            "first name",
            "middle name",
            "last name",
            "cell mobile number",
            "email address",
            "date first rental",
            "date left university",
            "other student details",
            "teacher id",
            "address id",
            "first name",
            "middle name",
            "last name",
            "gender",
            "cell mobile number",
            "email address",
            "other details",
            "notes id",
            "student id",
            "teacher id",
            "date of notes",
            "text of notes",
            "other details",
            "incident id",
            "incident type code",
            "student id",
            "date incident start",
            "date incident end",
            "incident summary",
            "recommendations",
            "other details",
            "detention id",
            "detention type code",
            "teacher id",
            "datetime detention start",
            "datetime detention end",
            "detention summary",
            "other details",
            "student id",
            "address id",
            "date address from",
            "date address to",
            "monthly rental",
            "other details",
            "student id",
            "detention id",
            "incident id"
        ],
        "template_feedback": "use assessment notes table in place of reference incident type table . order the results by date of notes in place of incident type description .",
        "positive_example": "i want notes of assessment and notes of date ."
    },
    {
        "db_id": "customers_and_invoices",
        "table_names": [
            "customers",
            "orders",
            "invoices",
            "accounts",
            "product categories",
            "products",
            "financial transactions",
            "order items",
            "invoice line items"
        ],
        "column_names": [
            "customer id",
            "customer first name",
            "customer middle initial",
            "customer last name",
            "gender",
            "email address",
            "login name",
            "login password",
            "phone number",
            "town city",
            "state county province",
            "country",
            "order id",
            "customer id",
            "date order placed",
            "order details",
            "invoice number",
            "order id",
            "invoice date",
            "account id",
            "customer id",
            "date account opened",
            "account name",
            "other account details",
            "production type code",
            "product type description",
            "vat rating",
            "product id",
            "parent product id",
            "production type code",
            "unit price",
            "product name",
            "product color",
            "product size",
            "transaction id",
            "account id",
            "invoice number",
            "transaction type",
            "transaction date",
            "transaction amount",
            "transaction comment",
            "other transaction details",
            "order item id",
            "order id",
            "product id",
            "product quantity",
            "other order item details",
            "order item id",
            "invoice number",
            "product id",
            "product title",
            "product quantity",
            "product price",
            "derived product cost",
            "derived vat payable",
            "derived total cost"
        ],
        "template_feedback": "find product size in place of product color .",
        "positive_example": "need to use size of product and not the color of product ."
    },
    {
        "db_id": "customers_and_invoices",
        "table_names": [
            "customers",
            "orders",
            "invoices",
            "accounts",
            "product categories",
            "products",
            "financial transactions",
            "order items",
            "invoice line items"
        ],
        "column_names": [
            "customer id",
            "customer first name",
            "customer middle initial",
            "customer last name",
            "gender",
            "email address",
            "login name",
            "login password",
            "phone number",
            "town city",
            "state county province",
            "country",
            "order id",
            "customer id",
            "date order placed",
            "order details",
            "invoice number",
            "order id",
            "invoice date",
            "account id",
            "customer id",
            "date account opened",
            "account name",
            "other account details",
            "production type code",
            "product type description",
            "vat rating",
            "product id",
            "parent product id",
            "production type code",
            "unit price",
            "product name",
            "product color",
            "product size",
            "transaction id",
            "account id",
            "invoice number",
            "transaction type",
            "transaction date",
            "transaction amount",
            "transaction comment",
            "other transaction details",
            "order item id",
            "order id",
            "product id",
            "product quantity",
            "other order item details",
            "order item id",
            "invoice number",
            "product id",
            "product title",
            "product quantity",
            "product price",
            "derived product cost",
            "derived vat payable",
            "derived total cost"
        ],
        "template_feedback": "additionally find account name .",
        "positive_example": "you should look for name of account ."
    },
    {
        "db_id": "body_builder",
        "table_names": [
            "body builder",
            "people"
        ],
        "column_names": [
            "body builder id",
            "people id",
            "snatch",
            "clean jerk",
            "total",
            "people id",
            "name",
            "height",
            "weight",
            "birth date",
            "birth place"
        ],
        "template_feedback": "additionally use the information from the body builder table besides the people table .",
        "positive_example": "it should be body builder 's name ."
    },
    {
        "db_id": "apartment_rentals",
        "table_names": [
            "apartment buildings",
            "apartments",
            "apartment facilities",
            "guests",
            "apartment bookings",
            "view unit status"
        ],
        "column_names": [
            "building id",
            "building short name",
            "building full name",
            "building description",
            "building address",
            "building manager",
            "building phone",
            "apartment id",
            "building id",
            "apartment type code",
            "apartment number",
            "bathroom count",
            "bedroom count",
            "room count",
            "apartment id",
            "facility code",
            "guest id",
            "gender code",
            "guest first name",
            "guest last name",
            "date of birth",
            "apartment booking id",
            "apartment id",
            "guest id",
            "booking status code",
            "booking start date",
            "booking end date",
            "apartment id",
            "apartment booking id",
            "status date",
            "available yes or no"
        ],
        "template_feedback": "in step 1 , do not find for each value of apartment number . in step 2 , order the results by bedroom count in place of number of rows .",
        "positive_example": "replace apartment number with beds in step 1 ."
    },
    {
        "db_id": "csu_1",
        "table_names": [
            "campuses",
            "csu fees",
            "degrees",
            "discipline enrollments",
            "enrollments",
            "faculty"
        ],
        "column_names": [
            "id",
            "campus",
            "location",
            "county",
            "year",
            "campus",
            "year",
            "campus fee",
            "year",
            "campus",
            "degrees",
            "campus",
            "discipline",
            "year",
            "undergraduate",
            "graduate",
            "campus",
            "year",
            "totalenrollment ay",
            "fte ay",
            "campus",
            "year",
            "faculty"
        ],
        "template_feedback": "in step 1 , do not use the faculty table and campuses table . in step 2 , consider the csu fees 's year equals 2005 conditions in place of the faculty 's year equals 2005 conditions .",
        "positive_example": "need to confirm that csu fees 's year equals 2005 and campuses equals csu ."
    },
    {
        "db_id": "apartment_rentals",
        "table_names": [
            "apartment buildings",
            "apartments",
            "apartment facilities",
            "guests",
            "apartment bookings",
            "view unit status"
        ],
        "column_names": [
            "building id",
            "building short name",
            "building full name",
            "building description",
            "building address",
            "building manager",
            "building phone",
            "apartment id",
            "building id",
            "apartment type code",
            "apartment number",
            "bathroom count",
            "bedroom count",
            "room count",
            "apartment id",
            "facility code",
            "guest id",
            "gender code",
            "guest first name",
            "guest last name",
            "date of birth",
            "apartment booking id",
            "apartment id",
            "guest id",
            "booking status code",
            "booking start date",
            "booking end date",
            "apartment id",
            "apartment booking id",
            "status date",
            "available yes or no"
        ],
        "template_feedback": "order the results by room count in place of bathroom count .",
        "positive_example": "i want numbers of bedrooms ."
    },
    {
        "db_id": "movie_1",
        "table_names": [
            "movie",
            "reviewer",
            "rating"
        ],
        "column_names": [
            "movie id",
            "title",
            "year",
            "director",
            "reviewer id",
            "name",
            "reviewer id",
            "movie id",
            "rating stars",
            "rating date"
        ],
        "template_feedback": "in step 1 , do not use the movie table . in step 2 , find for each value of rating 's movie id whose number of rows greater than or equals 2 . in step 3 , find rating 's movie id and average rating stars in place of title .",
        "positive_example": "you need to find whether the corresponding value in step 2 is greater than 3 or not ."
    },
    {
        "db_id": "movie_1",
        "table_names": [
            "movie",
            "reviewer",
            "rating"
        ],
        "column_names": [
            "movie id",
            "title",
            "year",
            "director",
            "reviewer id",
            "name",
            "reviewer id",
            "movie id",
            "rating stars",
            "rating date"
        ],
        "template_feedback": "in step 1 , do not use the movie table . in step 2 , find for each value of rating 's movie id whose number of rows greater than or equals 2 . in step 3 , find rating 's movie id and average rating stars in place of title .",
        "positive_example": "in step 3 make sure to find corresponding value in step 2 is greater than 3 ."
    },
    {
        "db_id": "driving_school",
        "table_names": [
            "addresses",
            "staff",
            "vehicles",
            "customers",
            "customer payments",
            "lessons"
        ],
        "column_names": [
            "address id",
            "line 1 number building",
            "city",
            "zip postcode",
            "state province county",
            "country",
            "staff id",
            "staff address id",
            "nickname",
            "first name",
            "middle name",
            "last name",
            "date of birth",
            "date joined staff",
            "date left staff",
            "vehicle id",
            "vehicle details",
            "customer id",
            "customer address id",
            "customer status code",
            "date became customer",
            "date of birth",
            "first name",
            "last name",
            "amount outstanding",
            "email address",
            "phone number",
            "cell mobile phone number",
            "customer id",
            "datetime payment",
            "payment method code",
            "amount payment",
            "lesson id",
            "customer id",
            "lesson status code",
            "staff id",
            "vehicle id",
            "lesson date",
            "lesson time",
            "price"
        ],
        "template_feedback": "in step 1 , additionally use the information from the staff table besides the addresses table .",
        "positive_example": "in step 1 , it should calculate number of rows of staff address id in staff table ."
    },
    {
        "db_id": "movie_1",
        "table_names": [
            "movie",
            "reviewer",
            "rating"
        ],
        "column_names": [
            "movie id",
            "title",
            "year",
            "director",
            "reviewer id",
            "name",
            "reviewer id",
            "movie id",
            "rating stars",
            "rating date"
        ],
        "template_feedback": "in step 2 , additionally make sure that director not equals null . find for each value of director . additionally find maximum rating stars and rating stars . you should not find the largest of the results . show me all the results .",
        "positive_example": "you need to use \" do not show \" rather than \" only show the first \" ."
    },
    {
        "db_id": "apartment_rentals",
        "table_names": [
            "apartment buildings",
            "apartments",
            "apartment facilities",
            "guests",
            "apartment bookings",
            "view unit status"
        ],
        "column_names": [
            "building id",
            "building short name",
            "building full name",
            "building description",
            "building address",
            "building manager",
            "building phone",
            "apartment id",
            "building id",
            "apartment type code",
            "apartment number",
            "bathroom count",
            "bedroom count",
            "room count",
            "apartment id",
            "facility code",
            "guest id",
            "gender code",
            "guest first name",
            "guest last name",
            "date of birth",
            "apartment booking id",
            "apartment id",
            "guest id",
            "booking status code",
            "booking start date",
            "booking end date",
            "apartment id",
            "apartment booking id",
            "status date",
            "available yes or no"
        ],
        "template_feedback": "in step 2 , do not return booking end date .",
        "positive_example": "be sure that guests have booking for apartment ."
    },
    {
        "db_id": "csu_1",
        "table_names": [
            "campuses",
            "csu fees",
            "degrees",
            "discipline enrollments",
            "enrollments",
            "faculty"
        ],
        "column_names": [
            "id",
            "campus",
            "location",
            "county",
            "year",
            "campus",
            "year",
            "campus fee",
            "year",
            "campus",
            "degrees",
            "campus",
            "discipline",
            "year",
            "undergraduate",
            "graduate",
            "campus",
            "year",
            "totalenrollment ay",
            "fte ay",
            "campus",
            "year",
            "faculty"
        ],
        "template_feedback": "in step 1 , do not use the faculty table and campuses table . in step 2 , consider the csu fees 's year equals 2005 conditions in place of the faculty 's year equals 2005 conditions .",
        "positive_example": "verify that 2005 is the year of campuses fee ."
    },
    {
        "db_id": "csu_1",
        "table_names": [
            "campuses",
            "csu fees",
            "degrees",
            "discipline enrollments",
            "enrollments",
            "faculty"
        ],
        "column_names": [
            "id",
            "campus",
            "location",
            "county",
            "year",
            "campus",
            "year",
            "campus fee",
            "year",
            "campus",
            "degrees",
            "campus",
            "discipline",
            "year",
            "undergraduate",
            "graduate",
            "campus",
            "year",
            "totalenrollment ay",
            "fte ay",
            "campus",
            "year",
            "faculty"
        ],
        "template_feedback": "in step 1 , do not use the discipline enrollments table . in step 2 , consider the campuses 's campus equals san jose state university and csu fees 's year equals 1996 conditions in place of the discipline enrollments 's year equals 1996 and csu fees 's year equals san jose state university conditions .",
        "positive_example": "you should order the bikes based on their duration in step 2"
    },
    {
        "db_id": "csu_1",
        "table_names": [
            "campuses",
            "csu fees",
            "degrees",
            "discipline enrollments",
            "enrollments",
            "faculty"
        ],
        "column_names": [
            "id",
            "campus",
            "location",
            "county",
            "year",
            "campus",
            "year",
            "campus fee",
            "year",
            "campus",
            "degrees",
            "campus",
            "discipline",
            "year",
            "undergraduate",
            "graduate",
            "campus",
            "year",
            "totalenrollment ay",
            "fte ay",
            "campus",
            "year",
            "faculty"
        ],
        "template_feedback": "in step 1 , do not use the discipline enrollments table . in step 2 , consider the campuses 's campus equals san jose state university and csu fees 's year equals 1996 conditions in place of the discipline enrollments 's year equals 1996 and csu fees 's year equals san jose state university conditions .",
        "positive_example": "in step 2 , order the bikes by their duration ."
    },
    {
        "db_id": "csu_1",
        "table_names": [
            "campuses",
            "csu fees",
            "degrees",
            "discipline enrollments",
            "enrollments",
            "faculty"
        ],
        "column_names": [
            "id",
            "campus",
            "location",
            "county",
            "year",
            "campus",
            "year",
            "campus fee",
            "year",
            "campus",
            "degrees",
            "campus",
            "discipline",
            "year",
            "undergraduate",
            "graduate",
            "campus",
            "year",
            "totalenrollment ay",
            "fte ay",
            "campus",
            "year",
            "faculty"
        ],
        "template_feedback": "use csu fees table in place of campuses table . additionally make sure that campus fee is greater than average campus fee csu fees .",
        "positive_example": "looking for the campuses that are having higher than average fee ."
    },
    {
        "db_id": "body_builder",
        "table_names": [
            "body builder",
            "people"
        ],
        "column_names": [
            "body builder id",
            "people id",
            "snatch",
            "clean jerk",
            "total",
            "people id",
            "name",
            "height",
            "weight",
            "birth date",
            "birth place"
        ],
        "template_feedback": "additionally use the information from the body builder table besides the people table .",
        "positive_example": "you have to use the name of body builder ."
    },
    {
        "db_id": "apartment_rentals",
        "table_names": [
            "apartment buildings",
            "apartments",
            "apartment facilities",
            "guests",
            "apartment bookings",
            "view unit status"
        ],
        "column_names": [
            "building id",
            "building short name",
            "building full name",
            "building description",
            "building address",
            "building manager",
            "building phone",
            "apartment id",
            "building id",
            "apartment type code",
            "apartment number",
            "bathroom count",
            "bedroom count",
            "room count",
            "apartment id",
            "facility code",
            "guest id",
            "gender code",
            "guest first name",
            "guest last name",
            "date of birth",
            "apartment booking id",
            "apartment id",
            "guest id",
            "booking status code",
            "booking start date",
            "booking end date",
            "apartment id",
            "apartment booking id",
            "status date",
            "available yes or no"
        ],
        "template_feedback": "do not find for each value of apartment number . find room count in place of number of rows .",
        "positive_example": "also need to find number of rooms ."
    },
    {
        "db_id": "movie_1",
        "table_names": [
            "movie",
            "reviewer",
            "rating"
        ],
        "column_names": [
            "movie id",
            "title",
            "year",
            "director",
            "reviewer id",
            "name",
            "reviewer id",
            "movie id",
            "rating stars",
            "rating date"
        ],
        "template_feedback": "in step 2 , consider the rating date equals null conditions in place of the rating stars equals null conditions . make sure no repetition in the results .",
        "positive_example": "in step 2 , you need to find names whose star rating is more than 0 for specific date ."
    },
    {
        "db_id": "csu_1",
        "table_names": [
            "campuses",
            "csu fees",
            "degrees",
            "discipline enrollments",
            "enrollments",
            "faculty"
        ],
        "column_names": [
            "id",
            "campus",
            "location",
            "county",
            "year",
            "campus",
            "year",
            "campus fee",
            "year",
            "campus",
            "degrees",
            "campus",
            "discipline",
            "year",
            "undergraduate",
            "graduate",
            "campus",
            "year",
            "totalenrollment ay",
            "fte ay",
            "campus",
            "year",
            "faculty"
        ],
        "template_feedback": "in step 1 , do not use the campuses table and discipline enrollments table . in step 2 , remove the discipline equals 4 conditions .",
        "positive_example": "you should search for campuses which is equivalent to csu ."
    },
    {
        "db_id": "behavior_monitoring",
        "table_names": [
            "reference address types",
            "reference detention type",
            "reference incident type",
            "addresses",
            "students",
            "teachers",
            "assessment notes",
            "behavior incident",
            "detention",
            "student addresses",
            "students in detention"
        ],
        "column_names": [
            "address type code",
            "address type description",
            "detention type code",
            "detention type description",
            "incident type code",
            "incident type description",
            "address id",
            "line 1",
            "line 2",
            "line 3",
            "city",
            "zip postcode",
            "state province county",
            "country",
            "other address details",
            "student id",
            "address id",
            "first name",
            "middle name",
            "last name",
            "cell mobile number",
            "email address",
            "date first rental",
            "date left university",
            "other student details",
            "teacher id",
            "address id",
            "first name",
            "middle name",
            "last name",
            "gender",
            "cell mobile number",
            "email address",
            "other details",
            "notes id",
            "student id",
            "teacher id",
            "date of notes",
            "text of notes",
            "other details",
            "incident id",
            "incident type code",
            "student id",
            "date incident start",
            "date incident end",
            "incident summary",
            "recommendations",
            "other details",
            "detention id",
            "detention type code",
            "teacher id",
            "datetime detention start",
            "datetime detention end",
            "detention summary",
            "other details",
            "student id",
            "address id",
            "date address from",
            "date address to",
            "monthly rental",
            "other details",
            "student id",
            "detention id",
            "incident id"
        ],
        "template_feedback": "in step 1 , do not use the students table . in step 2 , find rows in place of email address .",
        "positive_example": "i want student id , address id and date address from of student addresses table ."
    },
    {
        "db_id": "movie_1",
        "table_names": [
            "movie",
            "reviewer",
            "rating"
        ],
        "column_names": [
            "movie id",
            "title",
            "year",
            "director",
            "reviewer id",
            "name",
            "reviewer id",
            "movie id",
            "rating stars",
            "rating date"
        ],
        "template_feedback": "in step 1 , do not use the rating table . in step 2 , consider the name like % mike % conditions in place of the name like mike conditions . find reviewer 's reviewer id in place of rating stars .",
        "positive_example": "there should be title instead of starts ."
    },
    {
        "db_id": "movie_1",
        "table_names": [
            "movie",
            "reviewer",
            "rating"
        ],
        "column_names": [
            "movie id",
            "title",
            "year",
            "director",
            "reviewer id",
            "name",
            "reviewer id",
            "movie id",
            "rating stars",
            "rating date"
        ],
        "template_feedback": "use rating table in place of movie table . additionally make sure that rating stars greater than 3 .",
        "positive_example": "you have to count total rows of rating date more than 3 from rating table ."
    },
    {
        "db_id": "driving_school",
        "table_names": [
            "addresses",
            "staff",
            "vehicles",
            "customers",
            "customer payments",
            "lessons"
        ],
        "column_names": [
            "address id",
            "line 1 number building",
            "city",
            "zip postcode",
            "state province county",
            "country",
            "staff id",
            "staff address id",
            "nickname",
            "first name",
            "middle name",
            "last name",
            "date of birth",
            "date joined staff",
            "date left staff",
            "vehicle id",
            "vehicle details",
            "customer id",
            "customer address id",
            "customer status code",
            "date became customer",
            "date of birth",
            "first name",
            "last name",
            "amount outstanding",
            "email address",
            "phone number",
            "cell mobile phone number",
            "customer id",
            "datetime payment",
            "payment method code",
            "amount payment",
            "lesson id",
            "customer id",
            "lesson status code",
            "staff id",
            "vehicle id",
            "lesson date",
            "lesson time",
            "price"
        ],
        "template_feedback": "additionally use the information from the lessons table besides the customers table . additionally make sure that lesson status code equals completed .",
        "positive_example": "ensure that the status code of lesson is completed for the customer mentioned in lesson 's table ."
    },
    {
        "db_id": "csu_1",
        "table_names": [
            "campuses",
            "csu fees",
            "degrees",
            "discipline enrollments",
            "enrollments",
            "faculty"
        ],
        "column_names": [
            "id",
            "campus",
            "location",
            "county",
            "year",
            "campus",
            "year",
            "campus fee",
            "year",
            "campus",
            "degrees",
            "campus",
            "discipline",
            "year",
            "undergraduate",
            "graduate",
            "campus",
            "year",
            "totalenrollment ay",
            "fte ay",
            "campus",
            "year",
            "faculty"
        ],
        "template_feedback": "in step 1 , do not use the faculty table and campuses table . in step 2 , consider the csu fees 's year equals 2005 conditions in place of the faculty 's year equals 2005 conditions .",
        "positive_example": "need to confirm that csu fees year equals 2005 and campuses equals csu ."
    },
    {
        "db_id": "behavior_monitoring",
        "table_names": [
            "reference address types",
            "reference detention type",
            "reference incident type",
            "addresses",
            "students",
            "teachers",
            "assessment notes",
            "behavior incident",
            "detention",
            "student addresses",
            "students in detention"
        ],
        "column_names": [
            "address type code",
            "address type description",
            "detention type code",
            "detention type description",
            "incident type code",
            "incident type description",
            "address id",
            "line 1",
            "line 2",
            "line 3",
            "city",
            "zip postcode",
            "state province county",
            "country",
            "other address details",
            "student id",
            "address id",
            "first name",
            "middle name",
            "last name",
            "cell mobile number",
            "email address",
            "date first rental",
            "date left university",
            "other student details",
            "teacher id",
            "address id",
            "first name",
            "middle name",
            "last name",
            "gender",
            "cell mobile number",
            "email address",
            "other details",
            "notes id",
            "student id",
            "teacher id",
            "date of notes",
            "text of notes",
            "other details",
            "incident id",
            "incident type code",
            "student id",
            "date incident start",
            "date incident end",
            "incident summary",
            "recommendations",
            "other details",
            "detention id",
            "detention type code",
            "teacher id",
            "datetime detention start",
            "datetime detention end",
            "detention summary",
            "other details",
            "student id",
            "address id",
            "date address from",
            "date address to",
            "monthly rental",
            "other details",
            "student id",
            "detention id",
            "incident id"
        ],
        "template_feedback": "use detention table in place of reference address types table . find detention type code in place of address type code .",
        "positive_example": "i want the type code of detention from detention table ."
    },
    {
        "db_id": "apartment_rentals",
        "table_names": [
            "apartment buildings",
            "apartments",
            "apartment facilities",
            "guests",
            "apartment bookings",
            "view unit status"
        ],
        "column_names": [
            "building id",
            "building short name",
            "building full name",
            "building description",
            "building address",
            "building manager",
            "building phone",
            "apartment id",
            "building id",
            "apartment type code",
            "apartment number",
            "bathroom count",
            "bedroom count",
            "room count",
            "apartment id",
            "facility code",
            "guest id",
            "gender code",
            "guest first name",
            "guest last name",
            "date of birth",
            "apartment booking id",
            "apartment id",
            "guest id",
            "booking status code",
            "booking start date",
            "booking end date",
            "apartment id",
            "apartment booking id",
            "status date",
            "available yes or no"
        ],
        "template_feedback": "additionally use the information from the apartments table besides the apartment buildings table . find summation of room count in place of number of rows .",
        "positive_example": "i want total number of bedroom count in apartment table ."
    },
    {
        "db_id": "csu_1",
        "table_names": [
            "campuses",
            "csu fees",
            "degrees",
            "discipline enrollments",
            "enrollments",
            "faculty"
        ],
        "column_names": [
            "id",
            "campus",
            "location",
            "county",
            "year",
            "campus",
            "year",
            "campus fee",
            "year",
            "campus",
            "degrees",
            "campus",
            "discipline",
            "year",
            "undergraduate",
            "graduate",
            "campus",
            "year",
            "totalenrollment ay",
            "fte ay",
            "campus",
            "year",
            "faculty"
        ],
        "template_feedback": "in step 1 , do not use the faculty table and campuses table . in step 2 , consider the csu fees 's year equals 2005 conditions in place of the faculty 's year equals 2005 conditions .",
        "positive_example": "find the csu fees for the year 2005 ."
    },
    {
        "db_id": "apartment_rentals",
        "table_names": [
            "apartment buildings",
            "apartments",
            "apartment facilities",
            "guests",
            "apartment bookings",
            "view unit status"
        ],
        "column_names": [
            "building id",
            "building short name",
            "building full name",
            "building description",
            "building address",
            "building manager",
            "building phone",
            "apartment id",
            "building id",
            "apartment type code",
            "apartment number",
            "bathroom count",
            "bedroom count",
            "room count",
            "apartment id",
            "facility code",
            "guest id",
            "gender code",
            "guest first name",
            "guest last name",
            "date of birth",
            "apartment booking id",
            "apartment id",
            "guest id",
            "booking status code",
            "booking start date",
            "booking end date",
            "apartment id",
            "apartment booking id",
            "status date",
            "available yes or no"
        ],
        "template_feedback": "use apartment bookings table in place of apartment buildings table .",
        "positive_example": "apartment buildings table is wrong . it has to be apartment bookings table ."
    },
    {
        "db_id": "driving_school",
        "table_names": [
            "addresses",
            "staff",
            "vehicles",
            "customers",
            "customer payments",
            "lessons"
        ],
        "column_names": [
            "address id",
            "line 1 number building",
            "city",
            "zip postcode",
            "state province county",
            "country",
            "staff id",
            "staff address id",
            "nickname",
            "first name",
            "middle name",
            "last name",
            "date of birth",
            "date joined staff",
            "date left staff",
            "vehicle id",
            "vehicle details",
            "customer id",
            "customer address id",
            "customer status code",
            "date became customer",
            "date of birth",
            "first name",
            "last name",
            "amount outstanding",
            "email address",
            "phone number",
            "cell mobile phone number",
            "customer id",
            "datetime payment",
            "payment method code",
            "amount payment",
            "lesson id",
            "customer id",
            "lesson status code",
            "staff id",
            "vehicle id",
            "lesson date",
            "lesson time",
            "price"
        ],
        "template_feedback": "find date joined staff in place of date left staff .",
        "positive_example": "i want staff joined date ."
    },
    {
        "db_id": "driving_school",
        "table_names": [
            "addresses",
            "staff",
            "vehicles",
            "customers",
            "customer payments",
            "lessons"
        ],
        "column_names": [
            "address id",
            "line 1 number building",
            "city",
            "zip postcode",
            "state province county",
            "country",
            "staff id",
            "staff address id",
            "nickname",
            "first name",
            "middle name",
            "last name",
            "date of birth",
            "date joined staff",
            "date left staff",
            "vehicle id",
            "vehicle details",
            "customer id",
            "customer address id",
            "customer status code",
            "date became customer",
            "date of birth",
            "first name",
            "last name",
            "amount outstanding",
            "email address",
            "phone number",
            "cell mobile phone number",
            "customer id",
            "datetime payment",
            "payment method code",
            "amount payment",
            "lesson id",
            "customer id",
            "lesson status code",
            "staff id",
            "vehicle id",
            "lesson date",
            "lesson time",
            "price"
        ],
        "template_feedback": "find date of birth in place of date became customer .",
        "positive_example": "i want birth date ."
    },
    {
        "db_id": "behavior_monitoring",
        "table_names": [
            "reference address types",
            "reference detention type",
            "reference incident type",
            "addresses",
            "students",
            "teachers",
            "assessment notes",
            "behavior incident",
            "detention",
            "student addresses",
            "students in detention"
        ],
        "column_names": [
            "address type code",
            "address type description",
            "detention type code",
            "detention type description",
            "incident type code",
            "incident type description",
            "address id",
            "line 1",
            "line 2",
            "line 3",
            "city",
            "zip postcode",
            "state province county",
            "country",
            "other address details",
            "student id",
            "address id",
            "first name",
            "middle name",
            "last name",
            "cell mobile number",
            "email address",
            "date first rental",
            "date left university",
            "other student details",
            "teacher id",
            "address id",
            "first name",
            "middle name",
            "last name",
            "gender",
            "cell mobile number",
            "email address",
            "other details",
            "notes id",
            "student id",
            "teacher id",
            "date of notes",
            "text of notes",
            "other details",
            "incident id",
            "incident type code",
            "student id",
            "date incident start",
            "date incident end",
            "incident summary",
            "recommendations",
            "other details",
            "detention id",
            "detention type code",
            "teacher id",
            "datetime detention start",
            "datetime detention end",
            "detention summary",
            "other details",
            "student id",
            "address id",
            "date address from",
            "date address to",
            "monthly rental",
            "other details",
            "student id",
            "detention id",
            "incident id"
        ],
        "template_feedback": "in step 1 , do not use the students table . in step 2 , find rows in place of email address .",
        "positive_example": "be certain to find student id , address id and date address from of student addresses table too ."
    },
    {
        "db_id": "apartment_rentals",
        "table_names": [
            "apartment buildings",
            "apartments",
            "apartment facilities",
            "guests",
            "apartment bookings",
            "view unit status"
        ],
        "column_names": [
            "building id",
            "building short name",
            "building full name",
            "building description",
            "building address",
            "building manager",
            "building phone",
            "apartment id",
            "building id",
            "apartment type code",
            "apartment number",
            "bathroom count",
            "bedroom count",
            "room count",
            "apartment id",
            "facility code",
            "guest id",
            "gender code",
            "guest first name",
            "guest last name",
            "date of birth",
            "apartment booking id",
            "apartment id",
            "guest id",
            "booking status code",
            "booking start date",
            "booking end date",
            "apartment id",
            "apartment booking id",
            "status date",
            "available yes or no"
        ],
        "template_feedback": "find apartment number in place of bedroom count . order the results by room count in place of bathroom count .",
        "positive_example": "you need to find apartment number and count of bedroom ."
    },
    {
        "db_id": "customers_and_invoices",
        "table_names": [
            "customers",
            "orders",
            "invoices",
            "accounts",
            "product categories",
            "products",
            "financial transactions",
            "order items",
            "invoice line items"
        ],
        "column_names": [
            "customer id",
            "customer first name",
            "customer middle initial",
            "customer last name",
            "gender",
            "email address",
            "login name",
            "login password",
            "phone number",
            "town city",
            "state county province",
            "country",
            "order id",
            "customer id",
            "date order placed",
            "order details",
            "invoice number",
            "order id",
            "invoice date",
            "account id",
            "customer id",
            "date account opened",
            "account name",
            "other account details",
            "production type code",
            "product type description",
            "vat rating",
            "product id",
            "parent product id",
            "production type code",
            "unit price",
            "product name",
            "product color",
            "product size",
            "transaction id",
            "account id",
            "invoice number",
            "transaction type",
            "transaction date",
            "transaction amount",
            "transaction comment",
            "other transaction details",
            "order item id",
            "order id",
            "product id",
            "product quantity",
            "other order item details",
            "order item id",
            "invoice number",
            "product id",
            "product title",
            "product quantity",
            "product price",
            "derived product cost",
            "derived vat payable",
            "derived total cost"
        ],
        "template_feedback": "additionally use the information from the order items table besides the products table . find summation of product quantity in place of summation of rows .",
        "positive_example": "you need to determine the different product names and the total quantity of each product id from ordered items ."
    },
    {
        "db_id": "phone_1",
        "table_names": [
            "chip model",
            "screen mode",
            "phone"
        ],
        "column_names": [
            "model name",
            "launch year",
            "ram mib",
            "rom mib",
            "slots",
            "wifi",
            "bluetooth",
            "graphics mode",
            "char cells",
            "pixels",
            "hardware colours",
            "used kb",
            "map",
            "type",
            "company name",
            "hardware model name",
            "accreditation type",
            "accreditation level",
            "date",
            "chip model",
            "screen mode"
        ],
        "template_feedback": "in step 2 , you shoud consider either of the conditions rather than both of them . find hardware model name in place of company name .",
        "positive_example": "in the phone table , you should only use hardware 's model name ."
    },
    {
        "db_id": "customers_and_invoices",
        "table_names": [
            "customers",
            "orders",
            "invoices",
            "accounts",
            "product categories",
            "products",
            "financial transactions",
            "order items",
            "invoice line items"
        ],
        "column_names": [
            "customer id",
            "customer first name",
            "customer middle initial",
            "customer last name",
            "gender",
            "email address",
            "login name",
            "login password",
            "phone number",
            "town city",
            "state county province",
            "country",
            "order id",
            "customer id",
            "date order placed",
            "order details",
            "invoice number",
            "order id",
            "invoice date",
            "account id",
            "customer id",
            "date account opened",
            "account name",
            "other account details",
            "production type code",
            "product type description",
            "vat rating",
            "product id",
            "parent product id",
            "production type code",
            "unit price",
            "product name",
            "product color",
            "product size",
            "transaction id",
            "account id",
            "invoice number",
            "transaction type",
            "transaction date",
            "transaction amount",
            "transaction comment",
            "other transaction details",
            "order item id",
            "order id",
            "product id",
            "product quantity",
            "other order item details",
            "order item id",
            "invoice number",
            "product id",
            "product title",
            "product quantity",
            "product price",
            "derived product cost",
            "derived vat payable",
            "derived total cost"
        ],
        "template_feedback": "use financial transactions table in place of customers table .",
        "positive_example": "you have to count the total number of transactions ."
    },
    {
        "db_id": "apartment_rentals",
        "table_names": [
            "apartment buildings",
            "apartments",
            "apartment facilities",
            "guests",
            "apartment bookings",
            "view unit status"
        ],
        "column_names": [
            "building id",
            "building short name",
            "building full name",
            "building description",
            "building address",
            "building manager",
            "building phone",
            "apartment id",
            "building id",
            "apartment type code",
            "apartment number",
            "bathroom count",
            "bedroom count",
            "room count",
            "apartment id",
            "facility code",
            "guest id",
            "gender code",
            "guest first name",
            "guest last name",
            "date of birth",
            "apartment booking id",
            "apartment id",
            "guest id",
            "booking status code",
            "booking start date",
            "booking end date",
            "apartment id",
            "apartment booking id",
            "status date",
            "available yes or no"
        ],
        "template_feedback": "in step 1 , do not find for each value of apartment number . in step 2 , order the results by bedroom count in place of number of rows .",
        "positive_example": "in step 1 , you should use beds in place of apartment number ."
    },
    {
        "db_id": "movie_1",
        "table_names": [
            "movie",
            "reviewer",
            "rating"
        ],
        "column_names": [
            "movie id",
            "title",
            "year",
            "director",
            "reviewer id",
            "name",
            "reviewer id",
            "movie id",
            "rating stars",
            "rating date"
        ],
        "template_feedback": "in step 2 , additionally make sure that director not equals null . find for each value of director . additionally find maximum rating stars and rating stars . you should not find the largest of the results . show me all the results .",
        "positive_example": "need to replace \" only show the first \" with \" do not show \""
    },
    {
        "db_id": "store_product",
        "table_names": [
            "product",
            "store",
            "district",
            "store product",
            "store district"
        ],
        "column_names": [
            "product id",
            "product",
            "dimensions",
            "dpi",
            "pages per minute color",
            "max page size",
            "interface",
            "store id",
            "store name",
            "type",
            "area size",
            "number of product category",
            "ranking",
            "district id",
            "district name",
            "headquartered city",
            "city population",
            "city area",
            "store id",
            "product id",
            "store id",
            "district id"
        ],
        "template_feedback": "consider the city population greater than 100000 conditions in place of the headquartered city equals attock city conditions .",
        "positive_example": "need to find the population of city which should be larger than 100000 ."
    },
    {
        "db_id": "customers_and_invoices",
        "table_names": [
            "customers",
            "orders",
            "invoices",
            "accounts",
            "product categories",
            "products",
            "financial transactions",
            "order items",
            "invoice line items"
        ],
        "column_names": [
            "customer id",
            "customer first name",
            "customer middle initial",
            "customer last name",
            "gender",
            "email address",
            "login name",
            "login password",
            "phone number",
            "town city",
            "state county province",
            "country",
            "order id",
            "customer id",
            "date order placed",
            "order details",
            "invoice number",
            "order id",
            "invoice date",
            "account id",
            "customer id",
            "date account opened",
            "account name",
            "other account details",
            "production type code",
            "product type description",
            "vat rating",
            "product id",
            "parent product id",
            "production type code",
            "unit price",
            "product name",
            "product color",
            "product size",
            "transaction id",
            "account id",
            "invoice number",
            "transaction type",
            "transaction date",
            "transaction amount",
            "transaction comment",
            "other transaction details",
            "order item id",
            "order id",
            "product id",
            "product quantity",
            "other order item details",
            "order item id",
            "invoice number",
            "product id",
            "product title",
            "product quantity",
            "product price",
            "derived product cost",
            "derived vat payable",
            "derived total cost"
        ],
        "template_feedback": "use financial transactions table in place of customers table .",
        "positive_example": "need to summation of transactions ."
    },
    {
        "db_id": "apartment_rentals",
        "table_names": [
            "apartment buildings",
            "apartments",
            "apartment facilities",
            "guests",
            "apartment bookings",
            "view unit status"
        ],
        "column_names": [
            "building id",
            "building short name",
            "building full name",
            "building description",
            "building address",
            "building manager",
            "building phone",
            "apartment id",
            "building id",
            "apartment type code",
            "apartment number",
            "bathroom count",
            "bedroom count",
            "room count",
            "apartment id",
            "facility code",
            "guest id",
            "gender code",
            "guest first name",
            "guest last name",
            "date of birth",
            "apartment booking id",
            "apartment id",
            "guest id",
            "booking status code",
            "booking start date",
            "booking end date",
            "apartment id",
            "apartment booking id",
            "status date",
            "available yes or no"
        ],
        "template_feedback": "consider the building manager equals brenden conditions in place of the building short name equals brenden conditions .",
        "positive_example": "find manager of building instead of short name ."
    },
    {
        "db_id": "driving_school",
        "table_names": [
            "addresses",
            "staff",
            "vehicles",
            "customers",
            "customer payments",
            "lessons"
        ],
        "column_names": [
            "address id",
            "line 1 number building",
            "city",
            "zip postcode",
            "state province county",
            "country",
            "staff id",
            "staff address id",
            "nickname",
            "first name",
            "middle name",
            "last name",
            "date of birth",
            "date joined staff",
            "date left staff",
            "vehicle id",
            "vehicle details",
            "customer id",
            "customer address id",
            "customer status code",
            "date became customer",
            "date of birth",
            "first name",
            "last name",
            "amount outstanding",
            "email address",
            "phone number",
            "cell mobile phone number",
            "customer id",
            "datetime payment",
            "payment method code",
            "amount payment",
            "lesson id",
            "customer id",
            "lesson status code",
            "staff id",
            "vehicle id",
            "lesson date",
            "lesson time",
            "price"
        ],
        "template_feedback": "in step 1 , additionally use the information from the staff table besides the addresses table .",
        "positive_example": "you need to compute rows count for staff address from staff table ."
    },
    {
        "db_id": "apartment_rentals",
        "table_names": [
            "apartment buildings",
            "apartments",
            "apartment facilities",
            "guests",
            "apartment bookings",
            "view unit status"
        ],
        "column_names": [
            "building id",
            "building short name",
            "building full name",
            "building description",
            "building address",
            "building manager",
            "building phone",
            "apartment id",
            "building id",
            "apartment type code",
            "apartment number",
            "bathroom count",
            "bedroom count",
            "room count",
            "apartment id",
            "facility code",
            "guest id",
            "gender code",
            "guest first name",
            "guest last name",
            "date of birth",
            "apartment booking id",
            "apartment id",
            "guest id",
            "booking status code",
            "booking start date",
            "booking end date",
            "apartment id",
            "apartment booking id",
            "status date",
            "available yes or no"
        ],
        "template_feedback": "in step 2 , consider the building short name equals columbus square conditions in place of the apartment number equals columbus square and building full name like normandie court conditions . find summation of room count in place of summation of bathroom count .",
        "positive_example": "eliminate full name of building which includes normandie court condition . also , use count of bedroom and short name of building instead of bathroom and apartment number respectively ."
    },
    {
        "db_id": "apartment_rentals",
        "table_names": [
            "apartment buildings",
            "apartments",
            "apartment facilities",
            "guests",
            "apartment bookings",
            "view unit status"
        ],
        "column_names": [
            "building id",
            "building short name",
            "building full name",
            "building description",
            "building address",
            "building manager",
            "building phone",
            "apartment id",
            "building id",
            "apartment type code",
            "apartment number",
            "bathroom count",
            "bedroom count",
            "room count",
            "apartment id",
            "facility code",
            "guest id",
            "gender code",
            "guest first name",
            "guest last name",
            "date of birth",
            "apartment booking id",
            "apartment id",
            "guest id",
            "booking status code",
            "booking start date",
            "booking end date",
            "apartment id",
            "apartment booking id",
            "status date",
            "available yes or no"
        ],
        "template_feedback": "use apartment bookings table in place of apartment buildings table .",
        "positive_example": "replace apartment buildings table with apartment bookings . and also find summation of all rows of table ."
    },
    {
        "db_id": "driving_school",
        "table_names": [
            "addresses",
            "staff",
            "vehicles",
            "customers",
            "customer payments",
            "lessons"
        ],
        "column_names": [
            "address id",
            "line 1 number building",
            "city",
            "zip postcode",
            "state province county",
            "country",
            "staff id",
            "staff address id",
            "nickname",
            "first name",
            "middle name",
            "last name",
            "date of birth",
            "date joined staff",
            "date left staff",
            "vehicle id",
            "vehicle details",
            "customer id",
            "customer address id",
            "customer status code",
            "date became customer",
            "date of birth",
            "first name",
            "last name",
            "amount outstanding",
            "email address",
            "phone number",
            "cell mobile phone number",
            "customer id",
            "datetime payment",
            "payment method code",
            "amount payment",
            "lesson id",
            "customer id",
            "lesson status code",
            "staff id",
            "vehicle id",
            "lesson date",
            "lesson time",
            "price"
        ],
        "template_feedback": "find date joined staff in place of date left staff .",
        "positive_example": "look for joined date of a staff and not the left date of a staff ."
    },
    {
        "db_id": "customers_and_invoices",
        "table_names": [
            "customers",
            "orders",
            "invoices",
            "accounts",
            "product categories",
            "products",
            "financial transactions",
            "order items",
            "invoice line items"
        ],
        "column_names": [
            "customer id",
            "customer first name",
            "customer middle initial",
            "customer last name",
            "gender",
            "email address",
            "login name",
            "login password",
            "phone number",
            "town city",
            "state county province",
            "country",
            "order id",
            "customer id",
            "date order placed",
            "order details",
            "invoice number",
            "order id",
            "invoice date",
            "account id",
            "customer id",
            "date account opened",
            "account name",
            "other account details",
            "production type code",
            "product type description",
            "vat rating",
            "product id",
            "parent product id",
            "production type code",
            "unit price",
            "product name",
            "product color",
            "product size",
            "transaction id",
            "account id",
            "invoice number",
            "transaction type",
            "transaction date",
            "transaction amount",
            "transaction comment",
            "other transaction details",
            "order item id",
            "order id",
            "product id",
            "product quantity",
            "other order item details",
            "order item id",
            "invoice number",
            "product id",
            "product title",
            "product quantity",
            "product price",
            "derived product cost",
            "derived vat payable",
            "derived total cost"
        ],
        "template_feedback": "additionally use the information from the order items table and orders table besides the products table .",
        "positive_example": "find distinct product name , should corresponding rows to each value of product ordered by customer ."
    },
    {
        "db_id": "apartment_rentals",
        "table_names": [
            "apartment buildings",
            "apartments",
            "apartment facilities",
            "guests",
            "apartment bookings",
            "view unit status"
        ],
        "column_names": [
            "building id",
            "building short name",
            "building full name",
            "building description",
            "building address",
            "building manager",
            "building phone",
            "apartment id",
            "building id",
            "apartment type code",
            "apartment number",
            "bathroom count",
            "bedroom count",
            "room count",
            "apartment id",
            "facility code",
            "guest id",
            "gender code",
            "guest first name",
            "guest last name",
            "date of birth",
            "apartment booking id",
            "apartment id",
            "guest id",
            "booking status code",
            "booking start date",
            "booking end date",
            "apartment id",
            "apartment booking id",
            "status date",
            "available yes or no"
        ],
        "template_feedback": "in step 1 , use apartment facilities table in place of apartment bookings table .",
        "positive_example": "as there is no facilities , you need to form something ."
    },
    {
        "db_id": "apartment_rentals",
        "table_names": [
            "apartment buildings",
            "apartments",
            "apartment facilities",
            "guests",
            "apartment bookings",
            "view unit status"
        ],
        "column_names": [
            "building id",
            "building short name",
            "building full name",
            "building description",
            "building address",
            "building manager",
            "building phone",
            "apartment id",
            "building id",
            "apartment type code",
            "apartment number",
            "bathroom count",
            "bedroom count",
            "room count",
            "apartment id",
            "facility code",
            "guest id",
            "gender code",
            "guest first name",
            "guest last name",
            "date of birth",
            "apartment booking id",
            "apartment id",
            "guest id",
            "booking status code",
            "booking start date",
            "booking end date",
            "apartment id",
            "apartment booking id",
            "status date",
            "available yes or no"
        ],
        "template_feedback": "in step 1 , use apartment facilities table in place of apartment bookings table .",
        "positive_example": "need to make there are no facilities ."
    },
    {
        "db_id": "driving_school",
        "table_names": [
            "addresses",
            "staff",
            "vehicles",
            "customers",
            "customer payments",
            "lessons"
        ],
        "column_names": [
            "address id",
            "line 1 number building",
            "city",
            "zip postcode",
            "state province county",
            "country",
            "staff id",
            "staff address id",
            "nickname",
            "first name",
            "middle name",
            "last name",
            "date of birth",
            "date joined staff",
            "date left staff",
            "vehicle id",
            "vehicle details",
            "customer id",
            "customer address id",
            "customer status code",
            "date became customer",
            "date of birth",
            "first name",
            "last name",
            "amount outstanding",
            "email address",
            "phone number",
            "cell mobile phone number",
            "customer id",
            "datetime payment",
            "payment method code",
            "amount payment",
            "lesson id",
            "customer id",
            "lesson status code",
            "staff id",
            "vehicle id",
            "lesson date",
            "lesson time",
            "price"
        ],
        "template_feedback": "additionally use the information from the staff table besides the addresses table . consider the first name equals janessa and last name equals sawayn conditions in place of the line 1 number building equals janessa conditions .",
        "positive_example": "i want full name as janessa sawayn ."
    },
    {
        "db_id": "customers_and_invoices",
        "table_names": [
            "customers",
            "orders",
            "invoices",
            "accounts",
            "product categories",
            "products",
            "financial transactions",
            "order items",
            "invoice line items"
        ],
        "column_names": [
            "customer id",
            "customer first name",
            "customer middle initial",
            "customer last name",
            "gender",
            "email address",
            "login name",
            "login password",
            "phone number",
            "town city",
            "state county province",
            "country",
            "order id",
            "customer id",
            "date order placed",
            "order details",
            "invoice number",
            "order id",
            "invoice date",
            "account id",
            "customer id",
            "date account opened",
            "account name",
            "other account details",
            "production type code",
            "product type description",
            "vat rating",
            "product id",
            "parent product id",
            "production type code",
            "unit price",
            "product name",
            "product color",
            "product size",
            "transaction id",
            "account id",
            "invoice number",
            "transaction type",
            "transaction date",
            "transaction amount",
            "transaction comment",
            "other transaction details",
            "order item id",
            "order id",
            "product id",
            "product quantity",
            "other order item details",
            "order item id",
            "invoice number",
            "product id",
            "product title",
            "product quantity",
            "product price",
            "derived product cost",
            "derived vat payable",
            "derived total cost"
        ],
        "template_feedback": "in step 2 , find invoice date in place of date order placed .",
        "positive_example": "you need to use date of invoice instead of order placed date in step 2 ."
    },
    {
        "db_id": "csu_1",
        "table_names": [
            "campuses",
            "csu fees",
            "degrees",
            "discipline enrollments",
            "enrollments",
            "faculty"
        ],
        "column_names": [
            "id",
            "campus",
            "location",
            "county",
            "year",
            "campus",
            "year",
            "campus fee",
            "year",
            "campus",
            "degrees",
            "campus",
            "discipline",
            "year",
            "undergraduate",
            "graduate",
            "campus",
            "year",
            "totalenrollment ay",
            "fte ay",
            "campus",
            "year",
            "faculty"
        ],
        "template_feedback": "in step 2 , remove the csu fees 's year equals 1996 conditions .",
        "positive_example": "in step 2 , skip the last part ."
    },
    {
        "db_id": "customers_and_invoices",
        "table_names": [
            "customers",
            "orders",
            "invoices",
            "accounts",
            "product categories",
            "products",
            "financial transactions",
            "order items",
            "invoice line items"
        ],
        "column_names": [
            "customer id",
            "customer first name",
            "customer middle initial",
            "customer last name",
            "gender",
            "email address",
            "login name",
            "login password",
            "phone number",
            "town city",
            "state county province",
            "country",
            "order id",
            "customer id",
            "date order placed",
            "order details",
            "invoice number",
            "order id",
            "invoice date",
            "account id",
            "customer id",
            "date account opened",
            "account name",
            "other account details",
            "production type code",
            "product type description",
            "vat rating",
            "product id",
            "parent product id",
            "production type code",
            "unit price",
            "product name",
            "product color",
            "product size",
            "transaction id",
            "account id",
            "invoice number",
            "transaction type",
            "transaction date",
            "transaction amount",
            "transaction comment",
            "other transaction details",
            "order item id",
            "order id",
            "product id",
            "product quantity",
            "other order item details",
            "order item id",
            "invoice number",
            "product id",
            "product title",
            "product quantity",
            "product price",
            "derived product cost",
            "derived vat payable",
            "derived total cost"
        ],
        "template_feedback": "in step 2 , find order details and invoice date in place of date order placed .",
        "positive_example": "looking for the details of order and also , date of invoice instead of date of order placed ."
    },
    {
        "db_id": "movie_1",
        "table_names": [
            "movie",
            "reviewer",
            "rating"
        ],
        "column_names": [
            "movie id",
            "title",
            "year",
            "director",
            "reviewer id",
            "name",
            "reviewer id",
            "movie id",
            "rating stars",
            "rating date"
        ],
        "template_feedback": "in step 1 , remove the rating stars equals 2 conditions .",
        "positive_example": "you need to delete the star ratings that equal 2 ."
    },
    {
        "db_id": "movie_1",
        "table_names": [
            "movie",
            "reviewer",
            "rating"
        ],
        "column_names": [
            "movie id",
            "title",
            "year",
            "director",
            "reviewer id",
            "name",
            "reviewer id",
            "movie id",
            "rating stars",
            "rating date"
        ],
        "template_feedback": "in step 1 , do not use the rating table . in step 2 , consider the name like % mike % conditions in place of the name equals mike conditions .",
        "positive_example": "here in step 2 it should ensure director equals % mike % ."
    },
    {
        "db_id": "behavior_monitoring",
        "table_names": [
            "reference address types",
            "reference detention type",
            "reference incident type",
            "addresses",
            "students",
            "teachers",
            "assessment notes",
            "behavior incident",
            "detention",
            "student addresses",
            "students in detention"
        ],
        "column_names": [
            "address type code",
            "address type description",
            "detention type code",
            "detention type description",
            "incident type code",
            "incident type description",
            "address id",
            "line 1",
            "line 2",
            "line 3",
            "city",
            "zip postcode",
            "state province county",
            "country",
            "other address details",
            "student id",
            "address id",
            "first name",
            "middle name",
            "last name",
            "cell mobile number",
            "email address",
            "date first rental",
            "date left university",
            "other student details",
            "teacher id",
            "address id",
            "first name",
            "middle name",
            "last name",
            "gender",
            "cell mobile number",
            "email address",
            "other details",
            "notes id",
            "student id",
            "teacher id",
            "date of notes",
            "text of notes",
            "other details",
            "incident id",
            "incident type code",
            "student id",
            "date incident start",
            "date incident end",
            "incident summary",
            "recommendations",
            "other details",
            "detention id",
            "detention type code",
            "teacher id",
            "datetime detention start",
            "datetime detention end",
            "detention summary",
            "other details",
            "student id",
            "address id",
            "date address from",
            "date address to",
            "monthly rental",
            "other details",
            "student id",
            "detention id",
            "incident id"
        ],
        "template_feedback": "additionally find date incident end .",
        "positive_example": "you only need to use the date on which the incident ended ."
    },
    {
        "db_id": "apartment_rentals",
        "table_names": [
            "apartment buildings",
            "apartments",
            "apartment facilities",
            "guests",
            "apartment bookings",
            "view unit status"
        ],
        "column_names": [
            "building id",
            "building short name",
            "building full name",
            "building description",
            "building address",
            "building manager",
            "building phone",
            "apartment id",
            "building id",
            "apartment type code",
            "apartment number",
            "bathroom count",
            "bedroom count",
            "room count",
            "apartment id",
            "facility code",
            "guest id",
            "gender code",
            "guest first name",
            "guest last name",
            "date of birth",
            "apartment booking id",
            "apartment id",
            "guest id",
            "booking status code",
            "booking start date",
            "booking end date",
            "apartment id",
            "apartment booking id",
            "status date",
            "available yes or no"
        ],
        "template_feedback": "in step 2 , consider the building short name equals columbus square conditions in place of the building short name equals normandie court and building short name like columbus square conditions . find summation of room count in place of summation of bathroom count .",
        "positive_example": "you should eliminate the short name of building which includes normandie . also , use bedroom count in place of bathroom ."
    },
    {
        "db_id": "apartment_rentals",
        "table_names": [
            "apartment buildings",
            "apartments",
            "apartment facilities",
            "guests",
            "apartment bookings",
            "view unit status"
        ],
        "column_names": [
            "building id",
            "building short name",
            "building full name",
            "building description",
            "building address",
            "building manager",
            "building phone",
            "apartment id",
            "building id",
            "apartment type code",
            "apartment number",
            "bathroom count",
            "bedroom count",
            "room count",
            "apartment id",
            "facility code",
            "guest id",
            "gender code",
            "guest first name",
            "guest last name",
            "date of birth",
            "apartment booking id",
            "apartment id",
            "guest id",
            "booking status code",
            "booking start date",
            "booking end date",
            "apartment id",
            "apartment booking id",
            "status date",
            "available yes or no"
        ],
        "template_feedback": "order the results by room count in place of bathroom count .",
        "positive_example": "supplant count of bathroom with bedroom ."
    },
    {
        "db_id": "apartment_rentals",
        "table_names": [
            "apartment buildings",
            "apartments",
            "apartment facilities",
            "guests",
            "apartment bookings",
            "view unit status"
        ],
        "column_names": [
            "building id",
            "building short name",
            "building full name",
            "building description",
            "building address",
            "building manager",
            "building phone",
            "apartment id",
            "building id",
            "apartment type code",
            "apartment number",
            "bathroom count",
            "bedroom count",
            "room count",
            "apartment id",
            "facility code",
            "guest id",
            "gender code",
            "guest first name",
            "guest last name",
            "date of birth",
            "apartment booking id",
            "apartment id",
            "guest id",
            "booking status code",
            "booking start date",
            "booking end date",
            "apartment id",
            "apartment booking id",
            "status date",
            "available yes or no"
        ],
        "template_feedback": "in step 2 , consider the building short name equals columbus square conditions in place of the building short name equals normandie court and apartment number equals columbus square conditions . find summation of room count in place of number of rows .",
        "positive_example": "i want total of bedroom count of columbus square from step 2 ."
    },
    {
        "db_id": "store_product",
        "table_names": [
            "product",
            "store",
            "district",
            "store product",
            "store district"
        ],
        "column_names": [
            "product id",
            "product",
            "dimensions",
            "dpi",
            "pages per minute color",
            "max page size",
            "interface",
            "store id",
            "store name",
            "type",
            "area size",
            "number of product category",
            "ranking",
            "district id",
            "district name",
            "headquartered city",
            "city population",
            "city area",
            "store id",
            "product id",
            "store id",
            "district id"
        ],
        "template_feedback": "consider the city population greater than 100000 conditions in place of the headquartered city equals attock city conditions .",
        "positive_example": "make sure that city 's population should be greater than 100000 ."
    },
    {
        "db_id": "apartment_rentals",
        "table_names": [
            "apartment buildings",
            "apartments",
            "apartment facilities",
            "guests",
            "apartment bookings",
            "view unit status"
        ],
        "column_names": [
            "building id",
            "building short name",
            "building full name",
            "building description",
            "building address",
            "building manager",
            "building phone",
            "apartment id",
            "building id",
            "apartment type code",
            "apartment number",
            "bathroom count",
            "bedroom count",
            "room count",
            "apartment id",
            "facility code",
            "guest id",
            "gender code",
            "guest first name",
            "guest last name",
            "date of birth",
            "apartment booking id",
            "apartment id",
            "guest id",
            "booking status code",
            "booking start date",
            "booking end date",
            "apartment id",
            "apartment booking id",
            "status date",
            "available yes or no"
        ],
        "template_feedback": "do not find for each value of apartment number . find room count in place of number of rows .",
        "positive_example": "we also need to determine number of rooms ."
    },
    {
        "db_id": "store_product",
        "table_names": [
            "product",
            "store",
            "district",
            "store product",
            "store district"
        ],
        "column_names": [
            "product id",
            "product",
            "dimensions",
            "dpi",
            "pages per minute color",
            "max page size",
            "interface",
            "store id",
            "store name",
            "type",
            "area size",
            "number of product category",
            "ranking",
            "district id",
            "district name",
            "headquartered city",
            "city population",
            "city area",
            "store id",
            "product id",
            "store id",
            "district id"
        ],
        "template_feedback": "in step 1 , find for value of max page size in place of dimensions . in step 2 , find max page size in place of dimensions .",
        "positive_example": "in step 1 , you need to use product in place of measurements ."
    },
    {
        "db_id": "behavior_monitoring",
        "table_names": [
            "reference address types",
            "reference detention type",
            "reference incident type",
            "addresses",
            "students",
            "teachers",
            "assessment notes",
            "behavior incident",
            "detention",
            "student addresses",
            "students in detention"
        ],
        "column_names": [
            "address type code",
            "address type description",
            "detention type code",
            "detention type description",
            "incident type code",
            "incident type description",
            "address id",
            "line 1",
            "line 2",
            "line 3",
            "city",
            "zip postcode",
            "state province county",
            "country",
            "other address details",
            "student id",
            "address id",
            "first name",
            "middle name",
            "last name",
            "cell mobile number",
            "email address",
            "date first rental",
            "date left university",
            "other student details",
            "teacher id",
            "address id",
            "first name",
            "middle name",
            "last name",
            "gender",
            "cell mobile number",
            "email address",
            "other details",
            "notes id",
            "student id",
            "teacher id",
            "date of notes",
            "text of notes",
            "other details",
            "incident id",
            "incident type code",
            "student id",
            "date incident start",
            "date incident end",
            "incident summary",
            "recommendations",
            "other details",
            "detention id",
            "detention type code",
            "teacher id",
            "datetime detention start",
            "datetime detention end",
            "detention summary",
            "other details",
            "student id",
            "address id",
            "date address from",
            "date address to",
            "monthly rental",
            "other details",
            "student id",
            "detention id",
            "incident id"
        ],
        "template_feedback": "in step 2 , find for each value of student addresses 's address id in place of student id . in step 3 , find student addresses 's address id in place of student id .",
        "positive_example": "you only need to calculate the average monthly rental ."
    },
    {
        "db_id": "store_product",
        "table_names": [
            "product",
            "store",
            "district",
            "store product",
            "store district"
        ],
        "column_names": [
            "product id",
            "product",
            "dimensions",
            "dpi",
            "pages per minute color",
            "max page size",
            "interface",
            "store id",
            "store name",
            "type",
            "area size",
            "number of product category",
            "ranking",
            "district id",
            "district name",
            "headquartered city",
            "city population",
            "city area",
            "store id",
            "product id",
            "store id",
            "district id"
        ],
        "template_feedback": "find district name in place of headquartered city .",
        "positive_example": "just give me the name of the district ."
    },
    {
        "db_id": "csu_1",
        "table_names": [
            "campuses",
            "csu fees",
            "degrees",
            "discipline enrollments",
            "enrollments",
            "faculty"
        ],
        "column_names": [
            "id",
            "campus",
            "location",
            "county",
            "year",
            "campus",
            "year",
            "campus fee",
            "year",
            "campus",
            "degrees",
            "campus",
            "discipline",
            "year",
            "undergraduate",
            "graduate",
            "campus",
            "year",
            "totalenrollment ay",
            "fte ay",
            "campus",
            "year",
            "faculty"
        ],
        "template_feedback": "in step 2 , remove the csu fees 's year equals 1996 conditions .",
        "positive_example": "remove the last part of step 2 ."
    }
]