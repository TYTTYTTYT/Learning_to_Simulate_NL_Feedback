[
    {
        "db_id": "small_bank_1",
        "question": "What are the names of customers who have a savings balance lower than their checking balance, and what is the total of their checking and savings balances?",
        "gold_parse": "SELECT T1.name ,  T3.balance + T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  <  T2.balance",
        "predicted_parse": "SELECT T1.name , T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < value",
        "predicted_parse_explanation": [
            "Step 1: for each row in accounts table , find the corresponding rows in savings table",
            "Step 2: find the name and name of the results of step 1 whose balance less than 200000"
        ],
        "feedback": "It should find name whose Savings's balance is less than Checking's balance , and summation of both .",
        "beam": [
            [
                "SELECT T1.name , T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < value",
                -1.532799482345581
            ],
            [
                "SELECT T1.name , T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < value INTERSECT SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < value",
                -1.7967100143432617
            ],
            [
                "SELECT T1.name , Sum ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < value",
                -2.167367458343506
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < value",
                -2.6665258407592773
            ],
            [
                "SELECT T1.name , T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < value INTERSECT SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance > value",
                -2.7260313034057617
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < value INTERSECT SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < value",
                -3.271608829498291
            ],
            [
                "SELECT T1.name , Sum ( * ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < value",
                -3.3603155612945557
            ],
            [
                "SELECT T1.name , T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance < value",
                -3.6514933109283447
            ],
            [
                "SELECT T1.name , T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance < value INTERSECT SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T3 ON T1.custid = T3.custid WHERE T3.balance < value",
                -3.7778701782226562
            ],
            [
                "SELECT T1.name , Sum ( T3.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid WHERE T2.balance < value",
                -3.812743663787842
            ],
            [
                "SELECT T1.name , T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < value INTERSECT SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T3 ON T1.custid = T3.custid WHERE T3.balance < value",
                -3.989625930786133
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < value INTERSECT SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance > value",
                -4.123206615447998
            ],
            [
                "SELECT T1.name , Sum ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid WHERE T3.balance < value",
                -4.157256126403809
            ],
            [
                "SELECT T1.name , T3.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid WHERE T2.balance < value",
                -4.175928592681885
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid WHERE T3.balance < value",
                -4.659512042999268
            ],
            [
                "SELECT T1.name , T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance < value INTERSECT SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T3 ON T1.custid = T3.custid WHERE T3.balance > value",
                -4.721917152404785
            ],
            [
                "SELECT T1.name , * FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < value",
                -4.784926891326904
            ],
            [
                "SELECT T1.name , Sum ( T1.name ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < value",
                -5.166781187057495
            ],
            [
                "SELECT T1.name , Sum ( * ) FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance < value",
                -5.316154718399048
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < value",
                -7.141597270965576
            ]
        ],
        "predicted_parse_with_values": "SELECT T1.name , T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < 200000",
        "template_feedback": "in step 1 , additionally use the information from the checking table . in step 2 , consider the savings 's balance less than checking 's balance conditions in place of the savings 's balance less than 200000 conditions . additionally find savings 's balance plus checking 's balance .",
        "primary_span": [
            [
                4,
                12
            ],
            [
                17,
                27
            ],
            [
                40,
                49
            ]
        ],
        "secondary_span": [
            [
                28,
                39
            ]
        ],
        "edits": [
            "balance plus balance",
            "name",
            "checking",
            "balance less than balance",
            "balance less than 200000"
        ],
        "edits_original": "< select > add balance plus balance </ select > < select > remove name </ select > < from > add checking </ from > < where > add balance less than balance </ where > < where > remove balance less than 200000 </ where >"
    },
    {
        "db_id": "small_bank_1",
        "question": "What are the names of customers who have a savings balance lower than their checking balance, and what is the total of their checking and savings balances?",
        "gold_parse": "SELECT T1.name ,  T3.balance + T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  <  T2.balance",
        "predicted_parse": "SELECT T1.name , T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < value",
        "predicted_parse_explanation": [
            "Step 1: for each row in accounts table , find the corresponding rows in savings table",
            "Step 2: find the name and name of the results of step 1 whose balance less than 200000"
        ],
        "feedback": "you need to find the aggregate of names for savings's and checking's balance.",
        "beam": [
            [
                "SELECT T1.name , T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < value",
                -1.532799482345581
            ],
            [
                "SELECT T1.name , T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < value INTERSECT SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < value",
                -1.7967100143432617
            ],
            [
                "SELECT T1.name , Sum ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < value",
                -2.167367458343506
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < value",
                -2.6665258407592773
            ],
            [
                "SELECT T1.name , T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < value INTERSECT SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance > value",
                -2.7260313034057617
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < value INTERSECT SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < value",
                -3.271608829498291
            ],
            [
                "SELECT T1.name , Sum ( * ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < value",
                -3.3603155612945557
            ],
            [
                "SELECT T1.name , T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance < value",
                -3.6514933109283447
            ],
            [
                "SELECT T1.name , T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance < value INTERSECT SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T3 ON T1.custid = T3.custid WHERE T3.balance < value",
                -3.7778701782226562
            ],
            [
                "SELECT T1.name , Sum ( T3.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid WHERE T2.balance < value",
                -3.812743663787842
            ],
            [
                "SELECT T1.name , T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < value INTERSECT SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T3 ON T1.custid = T3.custid WHERE T3.balance < value",
                -3.989625930786133
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < value INTERSECT SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance > value",
                -4.123206615447998
            ],
            [
                "SELECT T1.name , Sum ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid WHERE T3.balance < value",
                -4.157256126403809
            ],
            [
                "SELECT T1.name , T3.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid WHERE T2.balance < value",
                -4.175928592681885
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid WHERE T3.balance < value",
                -4.659512042999268
            ],
            [
                "SELECT T1.name , T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance < value INTERSECT SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T3 ON T1.custid = T3.custid WHERE T3.balance > value",
                -4.721917152404785
            ],
            [
                "SELECT T1.name , * FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < value",
                -4.784926891326904
            ],
            [
                "SELECT T1.name , Sum ( T1.name ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < value",
                -5.166781187057495
            ],
            [
                "SELECT T1.name , Sum ( * ) FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance < value",
                -5.316154718399048
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < value",
                -7.141597270965576
            ]
        ],
        "predicted_parse_with_values": "SELECT T1.name , T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < 200000",
        "template_feedback": "in step 1 , additionally use the information from the checking table . in step 2 , consider the savings 's balance less than checking 's balance conditions in place of the savings 's balance less than 200000 conditions . additionally find savings 's balance plus checking 's balance .",
        "primary_span": [
            [
                4,
                12
            ],
            [
                17,
                27
            ],
            [
                40,
                49
            ]
        ],
        "secondary_span": [
            [
                28,
                39
            ]
        ],
        "edits": [
            "balance plus balance",
            "name",
            "checking",
            "balance less than balance",
            "balance less than 200000"
        ],
        "edits_original": "< select > add balance plus balance </ select > < select > remove name </ select > < from > add checking </ from > < where > add balance less than balance </ where > < where > remove balance less than 200000 </ where >"
    },
    {
        "db_id": "small_bank_1",
        "question": "Find the name, checking balance and savings balance of all accounts in the bank sorted by their total checking and savings balance in descending order.",
        "gold_parse": "SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance DESC",
        "predicted_parse": "SELECT T1.name , T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Desc",
        "predicted_parse_explanation": [
            "Step 1: for each row in accounts table , find the corresponding rows in savings table",
            "Step 2: find the name , name , balance of the results of step 1 ordered descending by balance"
        ],
        "feedback": "Find balance of saving and checking , make summation of both balance in descending order .",
        "beam": [
            [
                "SELECT T1.name , T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Desc",
                -0.7138476371765137
            ],
            [
                "SELECT T1.name , T1.name , T3.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T2.balance Desc",
                -2.040315628051758
            ],
            [
                "SELECT T1.name , T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T3.balance Desc",
                -2.14914608001709
            ],
            [
                "SELECT T1.name , T2.balance , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Desc",
                -2.3379111289978027
            ],
            [
                "SELECT T1.name , T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Desc",
                -3.474644184112549
            ],
            [
                "SELECT T1.name , T3.balance , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T2.balance Desc",
                -3.475562810897827
            ],
            [
                "SELECT T1.name , T2.balance , T3.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T2.balance Desc",
                -3.7337489128112793
            ],
            [
                "SELECT T1.name , T2.balance , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T3.balance Desc",
                -3.800647258758545
            ],
            [
                "SELECT T1.name , T3.custid , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T2.balance Desc",
                -4.1756744384765625
            ],
            [
                "SELECT T1.name , T3.balance , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T3.balance Desc",
                -4.93957257270813
            ],
            [
                "SELECT T1.name , T3.balance , T3.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T2.balance Desc",
                -4.967139005661011
            ],
            [
                "SELECT T1.name , T2.balance , T3.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T3.balance Desc",
                -5.1940226554870605
            ],
            [
                "SELECT T1.name , T3.custid , T3.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T2.balance Desc",
                -5.603570938110352
            ],
            [
                "SELECT T1.name , T3.custid , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T3.balance Desc",
                -5.6262030601501465
            ],
            [
                "SELECT T1.name , T2.custid , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Desc",
                -5.9625468254089355
            ],
            [
                "SELECT T1.name , T1.name , T3.custid FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T2.balance Desc",
                -6.209115982055664
            ],
            [
                "SELECT T1.name , T2.balance , T2.balance FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Desc",
                -6.428799867630005
            ],
            [
                "SELECT T1.name , T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T1.name Desc",
                -6.508631706237793
            ],
            [
                "SELECT T1.name , T2.custid , T2.balance FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Desc",
                -7.053351879119873
            ],
            [
                "SELECT T1.name , T1.custid , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Desc",
                -7.336599349975586
            ]
        ],
        "predicted_parse_with_values": "SELECT T1.name , T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Desc",
        "template_feedback": "in step 1 , additionally use the information from the checking table . in step 2 , additionally find checking 's balance . order the results by checking 's balance plus savings 's balance in place of savings 's balance .",
        "primary_span": [
            [
                4,
                12
            ],
            [
                17,
                22
            ],
            [
                23,
                33
            ]
        ],
        "secondary_span": [
            [
                34,
                40
            ]
        ],
        "edits": [
            "balance",
            "name",
            "checking",
            "balance plus balance",
            "balance"
        ],
        "edits_original": "< select > add balance </ select > < select > remove name </ select > < from > add checking </ from > < orderBy > add balance plus balance </ orderBy > < orderBy > remove balance </ orderBy >"
    },
    {
        "db_id": "small_bank_1",
        "question": "Find the name, checking balance and saving balance of all accounts in the bank.",
        "gold_parse": "SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid",
        "predicted_parse": "SELECT T1.name , T2.balance , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid",
        "predicted_parse_explanation": [
            "Step 1: for each row in accounts table , find the corresponding rows in savings table",
            "Step 2: find the name , balance , balance of the results of step 1"
        ],
        "feedback": "In step 1 , also correspond checking table . In step 2 , specify balance as savings and checking .",
        "beam": [
            [
                "SELECT T1.name , T2.balance , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid",
                -0.42346715927124023
            ],
            [
                "SELECT T1.name , T3.balance , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid",
                -2.1534366607666016
            ],
            [
                "SELECT T1.name , T2.balance , T3.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid",
                -2.230687141418457
            ],
            [
                "SELECT T1.name , T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid",
                -3.094784736633301
            ],
            [
                "SELECT T1.name , T2.balance , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc",
                -3.8601717948913574
            ],
            [
                "SELECT T1.name , T2.balance , T2.balance FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid",
                -4.000359535217285
            ],
            [
                "SELECT T1.name , T2.balance , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T3.balance Asc",
                -5.267625570297241
            ],
            [
                "SELECT T1.name , T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid",
                -5.324206352233887
            ],
            [
                "SELECT T1.name , T3.balance , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T2.balance Asc",
                -5.574855089187622
            ],
            [
                "SELECT T1.name , T2.balance , T3.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T2.balance Asc",
                -5.6225738525390625
            ],
            [
                "SELECT T1.name , T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc",
                -5.854976654052734
            ],
            [
                "SELECT T1.name , T2.balance , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Desc",
                -5.880861759185791
            ],
            [
                "SELECT T1.name , T1.name , T2.balance , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid",
                -6.382333278656006
            ],
            [
                "SELECT T1.name , T2.balance , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T1.name Asc",
                -6.878535747528076
            ],
            [
                "SELECT T1.name , T3.balance , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T3.balance Asc",
                -6.985957860946655
            ],
            [
                "SELECT T1.name , T2.balance , T3.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T3.balance Asc",
                -7.032120108604431
            ],
            [
                "SELECT T1.name , T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Desc",
                -7.086644649505615
            ],
            [
                "SELECT T1.name , T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T3.balance Asc",
                -7.26748251914978
            ],
            [
                "SELECT T1.name , T2.balance , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T3.balance Desc",
                -7.306802749633789
            ],
            [
                "SELECT T1.name , T3.balance , T3.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T2.balance Asc",
                -7.394030809402466
            ]
        ],
        "predicted_parse_with_values": "SELECT T1.name , T2.balance , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid",
        "template_feedback": "in step 1 , additionally use the information from the checking table . in step 2 , additionally find checking 's balance .",
        "primary_span": [
            [
                4,
                12
            ],
            [
                17,
                22
            ]
        ],
        "secondary_span": [],
        "edits": [
            "checking"
        ],
        "edits_original": "< from > add checking </ from >"
    },
    {
        "db_id": "small_bank_1",
        "question": "Find the name of accounts whose checking balance is higher than corresponding saving balance.",
        "gold_parse": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T2.balance  >  T3.balance",
        "predicted_parse": "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance > value",
        "predicted_parse_explanation": [
            "Step 1: for each row in accounts table , find the corresponding rows in checking table",
            "Step 2: find the name of the results of step 1 whose balance greater than 10000"
        ],
        "feedback": "Add savings table in step 1 , confirm that whose CHECKING's balance greater than SAVINGS's balance .",
        "beam": [
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance > value",
                -0.14377784729003906
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance > value",
                -2.01792049407959
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance > ( SELECT Max ( T2.balance ) FROM CHECKING AS T2 WHERE T2.balance > value )",
                -8.009275913238525
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance > ( SELECT Max ( T3.balance ) FROM CHECKING AS T3 WHERE T3.balance > value )",
                -8.391936779022217
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance > ( SELECT Max ( T3.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T3 ON T3.custid = T1.custid JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance > value )",
                -9.593003273010254
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance > ( SELECT Max ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T3 ON T3.custid = T1.custid JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T3.balance > value )",
                -9.81564998626709
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance > ( SELECT Max ( T3.balance ) FROM CHECKING AS T3 )",
                -9.964354515075684
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance > ( SELECT Max ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T2.custid = T1.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid WHERE T3.balance > value )",
                -9.975387811660767
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance > ( SELECT Max ( T2.balance ) FROM CHECKING AS T2 )",
                -10.009634017944336
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance > ( SELECT Max ( T3.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T2.custid = T1.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid WHERE T2.balance > value )",
                -10.197900295257568
            ],
            [
                "SELECT name FROM ACCOUNTS",
                -11.992015838623047
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid GROUP BY T1.name HAVING Avg ( T2.balance ) > value",
                -12.151044368743896
            ],
            [
                "SELECT name FROM ACCOUNTS WHERE * > value",
                -13.235549926757812
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid GROUP BY T1.name HAVING Sum ( T2.balance ) > value",
                -13.601340293884277
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid GROUP BY T1.name HAVING Avg ( T2.balance ) > value",
                -13.756843566894531
            ],
            [
                "SELECT name FROM ACCOUNTS WHERE name = value",
                -14.329470157623291
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid GROUP BY T1.name HAVING Max ( T2.balance ) > value",
                -14.387378215789795
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance < value",
                -14.650675296783447
            ],
            [
                "SELECT name FROM ACCOUNTS WHERE custid > value",
                -14.771261215209961
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE DISTINCT T2.balance > value",
                -15.047187805175781
            ]
        ],
        "predicted_parse_with_values": "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance > 10000",
        "template_feedback": "in step 1 , additionally use the information from the savings table . in step 2 , consider the checking 's balance greater than savings 's balance conditions in place of the checking 's balance greater than 10000 conditions .",
        "primary_span": [
            [
                4,
                12
            ],
            [
                17,
                27
            ]
        ],
        "secondary_span": [
            [
                28,
                39
            ]
        ],
        "edits": [
            "savings",
            "balance greater than balance",
            "balance greater than 10000"
        ],
        "edits_original": "< from > add savings </ from > < where > add balance greater than balance </ where > < where > remove balance greater than 10000 </ where >"
    },
    {
        "db_id": "small_bank_1",
        "question": "Find the name of accounts whose checking balance is higher than corresponding saving balance.",
        "gold_parse": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T2.balance  >  T3.balance",
        "predicted_parse": "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance > value",
        "predicted_parse_explanation": [
            "Step 1: for each row in accounts table , find the corresponding rows in checking table",
            "Step 2: find the name of the results of step 1 whose balance greater than 10000"
        ],
        "feedback": "in step 1 , you need to use savings table.ensure balance of checking's is more than saving's.",
        "beam": [
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance > value",
                -0.14377784729003906
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance > value",
                -2.01792049407959
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance > ( SELECT Max ( T2.balance ) FROM CHECKING AS T2 WHERE T2.balance > value )",
                -8.009275913238525
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance > ( SELECT Max ( T3.balance ) FROM CHECKING AS T3 WHERE T3.balance > value )",
                -8.391936779022217
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance > ( SELECT Max ( T3.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T3 ON T3.custid = T1.custid JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance > value )",
                -9.593003273010254
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance > ( SELECT Max ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T3 ON T3.custid = T1.custid JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T3.balance > value )",
                -9.81564998626709
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance > ( SELECT Max ( T3.balance ) FROM CHECKING AS T3 )",
                -9.964354515075684
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance > ( SELECT Max ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T2.custid = T1.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid WHERE T3.balance > value )",
                -9.975387811660767
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance > ( SELECT Max ( T2.balance ) FROM CHECKING AS T2 )",
                -10.009634017944336
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance > ( SELECT Max ( T3.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T2.custid = T1.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid WHERE T2.balance > value )",
                -10.197900295257568
            ],
            [
                "SELECT name FROM ACCOUNTS",
                -11.992015838623047
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid GROUP BY T1.name HAVING Avg ( T2.balance ) > value",
                -12.151044368743896
            ],
            [
                "SELECT name FROM ACCOUNTS WHERE * > value",
                -13.235549926757812
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid GROUP BY T1.name HAVING Sum ( T2.balance ) > value",
                -13.601340293884277
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid GROUP BY T1.name HAVING Avg ( T2.balance ) > value",
                -13.756843566894531
            ],
            [
                "SELECT name FROM ACCOUNTS WHERE name = value",
                -14.329470157623291
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid GROUP BY T1.name HAVING Max ( T2.balance ) > value",
                -14.387378215789795
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance < value",
                -14.650675296783447
            ],
            [
                "SELECT name FROM ACCOUNTS WHERE custid > value",
                -14.771261215209961
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE DISTINCT T2.balance > value",
                -15.047187805175781
            ]
        ],
        "predicted_parse_with_values": "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance > 10000",
        "template_feedback": "in step 1 , additionally use the information from the savings table . in step 2 , consider the checking 's balance greater than savings 's balance conditions in place of the checking 's balance greater than 10000 conditions .",
        "primary_span": [
            [
                4,
                12
            ],
            [
                17,
                27
            ]
        ],
        "secondary_span": [
            [
                28,
                39
            ]
        ],
        "edits": [
            "savings",
            "balance greater than balance",
            "balance greater than 10000"
        ],
        "edits_original": "< from > add savings </ from > < where > add balance greater than balance </ where > < where > remove balance greater than 10000 </ where >"
    },
    {
        "db_id": "small_bank_1",
        "question": "What are the names of customers with checking balances lower than the average checking balance?",
        "gold_parse": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM checking)",
        "predicted_parse": "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T2.balance ) FROM SAVINGS AS T2 )",
        "predicted_parse_explanation": [
            "Step 1: for each row in accounts table , find the corresponding rows in savings table",
            "Step 2: find the average balance in savings table",
            "Step 3: find the name of the results of step 1 whose balance less than the results of step 2"
        ],
        "feedback": "Both savings table is to be replaced by checking table .",
        "beam": [
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T2.balance ) FROM SAVINGS AS T2 )",
                -1.2188935279846191
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T3.balance ) FROM CHECKING AS T3 )",
                -1.3124732971191406
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T3.balance ) FROM SAVINGS AS T3 )",
                -1.5264036655426025
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T2.balance ) FROM CHECKING AS T2 )",
                -1.6198904514312744
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 WHERE T1.name < ( SELECT Avg ( T2.balance ) FROM SAVINGS AS T2 )",
                -4.771528720855713
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 WHERE T1.name < ( SELECT Avg ( T2.balance ) FROM CHECKING AS T2 )",
                -4.874200344085693
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T1.name ) FROM ACCOUNTS AS T1 )",
                -6.668666839599609
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T1.name ) FROM ACCOUNTS AS T1 )",
                -6.9771568775177
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 WHERE T1.name < ( SELECT Avg ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name = value )",
                -8.180263996124268
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 WHERE T1.name < ( SELECT Avg ( T2.balance ) FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T1.name = value )",
                -8.28007698059082
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name = value )",
                -8.92970895767212
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T3.balance ) FROM ACCOUNTS AS T1 JOIN CHECKING AS T3 ON T1.custid = T3.custid WHERE T1.name = value )",
                -9.027690887451172
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T3.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T3 ON T1.custid = T3.custid WHERE T1.name = value )",
                -9.225632905960083
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T2.balance ) FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T1.name = value )",
                -9.323596239089966
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid GROUP BY T1.name HAVING Avg ( T2.balance ) < ( SELECT Avg ( T2.balance ) FROM SAVINGS AS T2 )",
                -9.9654541015625
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid GROUP BY T1.name HAVING Avg ( T2.balance ) < ( SELECT Avg ( T3.balance ) FROM CHECKING AS T3 )",
                -10.052696228027344
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid GROUP BY T1.name HAVING Avg ( T2.balance ) < ( SELECT Avg ( T3.balance ) FROM SAVINGS AS T3 )",
                -10.06989860534668
            ],
            [
                "SELECT name FROM ACCOUNTS WHERE name < value",
                -10.10791540145874
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 WHERE T1.name < ( SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid GROUP BY T1.name ORDER BY Avg ( T2.balance ) Desc LIMIT value )",
                -10.83475375175476
            ],
            [
                "SELECT name FROM ACCOUNTS",
                -13.01071834564209
            ]
        ],
        "predicted_parse_with_values": "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T2.balance ) FROM SAVINGS AS T2 )",
        "template_feedback": "in step 1 , use checking table in place of savings table in step 2 , use checking table in place of savings table . find average checking 's balance in place of average savings 's balance . in step 3 , make sure the checking 's balance is less than the results of step 2 the savings 's balance is less than the results of step 2 .",
        "primary_span": [
            [
                4,
                6
            ],
            [
                16,
                18
            ],
            [
                25,
                29
            ],
            [
                42,
                55
            ]
        ],
        "secondary_span": [
            [
                7,
                11
            ],
            [
                19,
                24
            ],
            [
                30,
                37
            ],
            [
                56,
                68
            ]
        ],
        "edits": [
            "checking",
            "savings",
            "checking",
            "savings"
        ],
        "edits_original": "< from > add checking </ from > < from > remove savings </ from > < from > add checking </ from > < from > remove savings </ from >"
    },
    {
        "db_id": "small_bank_1",
        "question": "What are the names of customers with checking balances lower than the average checking balance?",
        "gold_parse": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM checking)",
        "predicted_parse": "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T2.balance ) FROM SAVINGS AS T2 )",
        "predicted_parse_explanation": [
            "Step 1: for each row in accounts table , find the corresponding rows in savings table",
            "Step 2: find the average balance in savings table",
            "Step 3: find the name of the results of step 1 whose balance less than the results of step 2"
        ],
        "feedback": "For both the cases checking table is to be used rather than savings table.",
        "beam": [
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T2.balance ) FROM SAVINGS AS T2 )",
                -1.2188935279846191
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T3.balance ) FROM CHECKING AS T3 )",
                -1.3124732971191406
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T3.balance ) FROM SAVINGS AS T3 )",
                -1.5264036655426025
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T2.balance ) FROM CHECKING AS T2 )",
                -1.6198904514312744
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 WHERE T1.name < ( SELECT Avg ( T2.balance ) FROM SAVINGS AS T2 )",
                -4.771528720855713
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 WHERE T1.name < ( SELECT Avg ( T2.balance ) FROM CHECKING AS T2 )",
                -4.874200344085693
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T1.name ) FROM ACCOUNTS AS T1 )",
                -6.668666839599609
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T1.name ) FROM ACCOUNTS AS T1 )",
                -6.9771568775177
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 WHERE T1.name < ( SELECT Avg ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name = value )",
                -8.180263996124268
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 WHERE T1.name < ( SELECT Avg ( T2.balance ) FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T1.name = value )",
                -8.28007698059082
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name = value )",
                -8.92970895767212
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T3.balance ) FROM ACCOUNTS AS T1 JOIN CHECKING AS T3 ON T1.custid = T3.custid WHERE T1.name = value )",
                -9.027690887451172
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T3.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T3 ON T1.custid = T3.custid WHERE T1.name = value )",
                -9.225632905960083
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T2.balance ) FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T1.name = value )",
                -9.323596239089966
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid GROUP BY T1.name HAVING Avg ( T2.balance ) < ( SELECT Avg ( T2.balance ) FROM SAVINGS AS T2 )",
                -9.9654541015625
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid GROUP BY T1.name HAVING Avg ( T2.balance ) < ( SELECT Avg ( T3.balance ) FROM CHECKING AS T3 )",
                -10.052696228027344
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid GROUP BY T1.name HAVING Avg ( T2.balance ) < ( SELECT Avg ( T3.balance ) FROM SAVINGS AS T3 )",
                -10.06989860534668
            ],
            [
                "SELECT name FROM ACCOUNTS WHERE name < value",
                -10.10791540145874
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 WHERE T1.name < ( SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid GROUP BY T1.name ORDER BY Avg ( T2.balance ) Desc LIMIT value )",
                -10.83475375175476
            ],
            [
                "SELECT name FROM ACCOUNTS",
                -13.01071834564209
            ]
        ],
        "predicted_parse_with_values": "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T2.balance ) FROM SAVINGS AS T2 )",
        "template_feedback": "in step 1 , use checking table in place of savings table in step 2 , use checking table in place of savings table . find average checking 's balance in place of average savings 's balance . in step 3 , make sure the checking 's balance is less than the results of step 2 the savings 's balance is less than the results of step 2 .",
        "primary_span": [
            [
                4,
                6
            ],
            [
                16,
                18
            ],
            [
                25,
                29
            ],
            [
                42,
                55
            ]
        ],
        "secondary_span": [
            [
                7,
                11
            ],
            [
                19,
                24
            ],
            [
                30,
                37
            ],
            [
                56,
                68
            ]
        ],
        "edits": [
            "checking",
            "savings",
            "checking",
            "savings"
        ],
        "edits_original": "< from > add checking </ from > < from > remove savings </ from > < from > add checking </ from > < from > remove savings </ from >"
    },
    {
        "db_id": "small_bank_1",
        "question": "Find the name and id of accounts whose checking balance is below the maximum checking balance.",
        "gold_parse": "SELECT T1.custid ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT max(balance) FROM checking)",
        "predicted_parse": "SELECT T1.name , T1.custid FROM ACCOUNTS AS T1 WHERE T1.custid < ( SELECT Max ( T2.balance ) FROM CHECKING AS T2 )",
        "predicted_parse_explanation": [
            "Step 1: find the maximum balance in checking table",
            "Step 2: find the name and accounts 's customer id in accounts table whose accounts 's customer id less than the results of step 1"
        ],
        "feedback": "Use \"whose CHECKING's balance\" in place of \"whose ACCOUNTS's custid\".",
        "beam": [
            [
                "SELECT T1.name , T1.custid FROM ACCOUNTS AS T1 WHERE T1.custid < ( SELECT Max ( T2.balance ) FROM CHECKING AS T2 )",
                -0.8540582656860352
            ],
            [
                "SELECT T1.name , T1.custid FROM ACCOUNTS AS T1 WHERE T1.custid < ( SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Max ( T2.balance ) FROM CHECKING AS T2 ) INTERSECT SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Max ( T2.balance ) FROM CHECKING AS T2 ) )",
                -2.631870746612549
            ],
            [
                "SELECT T1.name , T1.custid FROM ACCOUNTS AS T1 WHERE T1.custid < ( SELECT Max ( T2.balance ) FROM SAVINGS AS T2 )",
                -2.774991035461426
            ],
            [
                "SELECT T1.name , T1.custid FROM ACCOUNTS AS T1 WHERE T1.custid < ( SELECT T2.balance FROM CHECKING AS T2 ORDER BY T2.balance Desc LIMIT value )",
                -3.408134698867798
            ],
            [
                "SELECT T1.name , T1.custid FROM ACCOUNTS AS T1 WHERE T1.custid < ( SELECT T2.balance FROM CHECKING AS T2 GROUP BY T2.custid ORDER BY T2.balance Desc LIMIT value )",
                -3.493091106414795
            ],
            [
                "SELECT T1.name , T1.custid FROM ACCOUNTS AS T1 WHERE T1.custid < ( SELECT T2.balance FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid ORDER BY T1.custid Desc LIMIT value )",
                -3.570040464401245
            ],
            [
                "SELECT T1.name , T1.custid FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Max ( T2.balance ) FROM CHECKING AS T2 )",
                -3.6409387588500977
            ],
            [
                "SELECT T1.name , T1.custid FROM ACCOUNTS AS T1 WHERE T1.custid < ( SELECT Max ( T2.balance ) FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T1.custid < value )",
                -3.78548002243042
            ],
            [
                "SELECT T1.name , T1.custid FROM ACCOUNTS AS T1 WHERE T1.custid < ( SELECT T2.balance FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid ORDER BY T1.custid Desc )",
                -4.074840784072876
            ],
            [
                "SELECT T1.name , T1.custid FROM ACCOUNTS AS T1 WHERE T1.custid < ( SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Max ( T3.balance ) FROM CHECKING AS T3 ) INTERSECT SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T3 ON T1.custid = T3.custid WHERE T3.balance < ( SELECT Max ( T3.balance ) FROM CHECKING AS T3 ) )",
                -4.428466796875
            ],
            [
                "SELECT T1.name , T1.custid FROM ACCOUNTS AS T1 WHERE T1.custid < ( SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Max ( T3.balance ) FROM SAVINGS AS T3 ) INTERSECT SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Max ( T2.balance ) FROM CHECKING AS T2 ) )",
                -4.503733158111572
            ],
            [
                "SELECT T1.name , T1.custid FROM ACCOUNTS AS T1 WHERE T1.custid < ( SELECT T2.balance FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid GROUP BY T1.custid ORDER BY Max ( T2.balance ) Desc LIMIT value )",
                -4.6284027099609375
            ],
            [
                "SELECT T1.name , T1.custid FROM ACCOUNTS AS T1 WHERE T1.custid < ( SELECT T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T2.custid = T1.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T3.balance Desc LIMIT value )",
                -4.8648529052734375
            ],
            [
                "SELECT T1.name , T1.custid FROM ACCOUNTS AS T1 WHERE T1.custid < ( SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Desc LIMIT value )",
                -4.979501724243164
            ],
            [
                "SELECT T1.name , T1.custid FROM ACCOUNTS AS T1 WHERE T1.custid < ( SELECT T2.balance FROM CHECKING AS T2 GROUP BY T2.custid ORDER BY T2.balance Desc )",
                -5.01536750793457
            ],
            [
                "SELECT T1.name , T1.custid FROM ACCOUNTS AS T1 WHERE T1.custid < ( SELECT T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T2.custid = T1.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid GROUP BY T3.custid ORDER BY T3.balance Desc LIMIT value )",
                -5.1285669803619385
            ],
            [
                "SELECT name , custid FROM ACCOUNTS WHERE custid < value",
                -6.13089656829834
            ],
            [
                "SELECT T1.name , T1.custid FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Desc LIMIT value",
                -6.483415603637695
            ],
            [
                "SELECT T1.name , T1.custid FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Desc LIMIT value",
                -8.578247547149658
            ],
            [
                "SELECT name , custid FROM ACCOUNTS",
                -9.736326217651367
            ]
        ],
        "predicted_parse_with_values": "SELECT T1.name , T1.custid FROM ACCOUNTS AS T1 WHERE T1.custid < ( SELECT Max ( T2.balance ) FROM CHECKING AS T2 )",
        "template_feedback": "in step 2 , additionally use the information from the checking table besides the accounts table . make sure the balance is less than the results of step 1 the accounts 's customer id is less than the results of step 1 .",
        "primary_span": [
            [
                4,
                11
            ],
            [
                17,
                28
            ]
        ],
        "secondary_span": [
            [
                12,
                16
            ],
            [
                29,
                42
            ]
        ],
        "edits": [
            "checking",
            "balance less than SUBS1",
            "customer id less than SUBS1"
        ],
        "edits_original": "< from > add checking </ from > < where > add balance less than SUBS1 </ where > < where > remove customer id less than SUBS1 </ where >"
    },
    {
        "db_id": "small_bank_1",
        "question": "Find the name and id of accounts whose checking balance is below the maximum checking balance.",
        "gold_parse": "SELECT T1.custid ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT max(balance) FROM checking)",
        "predicted_parse": "SELECT T1.name , T1.custid FROM ACCOUNTS AS T1 WHERE T1.custid < ( SELECT Max ( T2.balance ) FROM CHECKING AS T2 )",
        "predicted_parse_explanation": [
            "Step 1: find the maximum balance in checking table",
            "Step 2: find the name and accounts 's customer id in accounts table whose accounts 's customer id less than the results of step 1"
        ],
        "feedback": "the customer id should supersede with balance. ",
        "beam": [
            [
                "SELECT T1.name , T1.custid FROM ACCOUNTS AS T1 WHERE T1.custid < ( SELECT Max ( T2.balance ) FROM CHECKING AS T2 )",
                -0.8540582656860352
            ],
            [
                "SELECT T1.name , T1.custid FROM ACCOUNTS AS T1 WHERE T1.custid < ( SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Max ( T2.balance ) FROM CHECKING AS T2 ) INTERSECT SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Max ( T2.balance ) FROM CHECKING AS T2 ) )",
                -2.631870746612549
            ],
            [
                "SELECT T1.name , T1.custid FROM ACCOUNTS AS T1 WHERE T1.custid < ( SELECT Max ( T2.balance ) FROM SAVINGS AS T2 )",
                -2.774991035461426
            ],
            [
                "SELECT T1.name , T1.custid FROM ACCOUNTS AS T1 WHERE T1.custid < ( SELECT T2.balance FROM CHECKING AS T2 ORDER BY T2.balance Desc LIMIT value )",
                -3.408134698867798
            ],
            [
                "SELECT T1.name , T1.custid FROM ACCOUNTS AS T1 WHERE T1.custid < ( SELECT T2.balance FROM CHECKING AS T2 GROUP BY T2.custid ORDER BY T2.balance Desc LIMIT value )",
                -3.493091106414795
            ],
            [
                "SELECT T1.name , T1.custid FROM ACCOUNTS AS T1 WHERE T1.custid < ( SELECT T2.balance FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid ORDER BY T1.custid Desc LIMIT value )",
                -3.570040464401245
            ],
            [
                "SELECT T1.name , T1.custid FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Max ( T2.balance ) FROM CHECKING AS T2 )",
                -3.6409387588500977
            ],
            [
                "SELECT T1.name , T1.custid FROM ACCOUNTS AS T1 WHERE T1.custid < ( SELECT Max ( T2.balance ) FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T1.custid < value )",
                -3.78548002243042
            ],
            [
                "SELECT T1.name , T1.custid FROM ACCOUNTS AS T1 WHERE T1.custid < ( SELECT T2.balance FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid ORDER BY T1.custid Desc )",
                -4.074840784072876
            ],
            [
                "SELECT T1.name , T1.custid FROM ACCOUNTS AS T1 WHERE T1.custid < ( SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Max ( T3.balance ) FROM CHECKING AS T3 ) INTERSECT SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T3 ON T1.custid = T3.custid WHERE T3.balance < ( SELECT Max ( T3.balance ) FROM CHECKING AS T3 ) )",
                -4.428466796875
            ],
            [
                "SELECT T1.name , T1.custid FROM ACCOUNTS AS T1 WHERE T1.custid < ( SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Max ( T3.balance ) FROM SAVINGS AS T3 ) INTERSECT SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Max ( T2.balance ) FROM CHECKING AS T2 ) )",
                -4.503733158111572
            ],
            [
                "SELECT T1.name , T1.custid FROM ACCOUNTS AS T1 WHERE T1.custid < ( SELECT T2.balance FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid GROUP BY T1.custid ORDER BY Max ( T2.balance ) Desc LIMIT value )",
                -4.6284027099609375
            ],
            [
                "SELECT T1.name , T1.custid FROM ACCOUNTS AS T1 WHERE T1.custid < ( SELECT T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T2.custid = T1.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T3.balance Desc LIMIT value )",
                -4.8648529052734375
            ],
            [
                "SELECT T1.name , T1.custid FROM ACCOUNTS AS T1 WHERE T1.custid < ( SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Desc LIMIT value )",
                -4.979501724243164
            ],
            [
                "SELECT T1.name , T1.custid FROM ACCOUNTS AS T1 WHERE T1.custid < ( SELECT T2.balance FROM CHECKING AS T2 GROUP BY T2.custid ORDER BY T2.balance Desc )",
                -5.01536750793457
            ],
            [
                "SELECT T1.name , T1.custid FROM ACCOUNTS AS T1 WHERE T1.custid < ( SELECT T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T2.custid = T1.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid GROUP BY T3.custid ORDER BY T3.balance Desc LIMIT value )",
                -5.1285669803619385
            ],
            [
                "SELECT name , custid FROM ACCOUNTS WHERE custid < value",
                -6.13089656829834
            ],
            [
                "SELECT T1.name , T1.custid FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Desc LIMIT value",
                -6.483415603637695
            ],
            [
                "SELECT T1.name , T1.custid FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Desc LIMIT value",
                -8.578247547149658
            ],
            [
                "SELECT name , custid FROM ACCOUNTS",
                -9.736326217651367
            ]
        ],
        "predicted_parse_with_values": "SELECT T1.name , T1.custid FROM ACCOUNTS AS T1 WHERE T1.custid < ( SELECT Max ( T2.balance ) FROM CHECKING AS T2 )",
        "template_feedback": "in step 2 , additionally use the information from the checking table besides the accounts table . make sure the balance is less than the results of step 1 the accounts 's customer id is less than the results of step 1 .",
        "primary_span": [
            [
                4,
                11
            ],
            [
                17,
                28
            ]
        ],
        "secondary_span": [
            [
                12,
                16
            ],
            [
                29,
                42
            ]
        ],
        "edits": [
            "checking",
            "balance less than SUBS1",
            "customer id less than SUBS1"
        ],
        "edits_original": "< from > add checking </ from > < where > add balance less than SUBS1 </ where > < where > remove customer id less than SUBS1 </ where >"
    },
    {
        "db_id": "small_bank_1",
        "question": "Find the name of account that has the lowest total checking and saving balance.",
        "gold_parse": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance LIMIT 1",
        "predicted_parse": "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
        "predicted_parse_explanation": [
            "Step 1: for each row in accounts table , find the corresponding rows in savings table",
            "Step 2: find the name of the results of step 1 with smallest value of balance"
        ],
        "feedback": "Correspond checking table in step 1 , Ensure smallest value of total balance of savings and checking step 2.",
        "beam": [
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -0.8290672302246094
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -1.2780756950378418
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -2.362438201904297
            ],
            [
                "SELECT T1.name , T3.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T2.balance Asc LIMIT value",
                -2.3876867294311523
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T3.balance Asc LIMIT value",
                -2.807018756866455
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -3.9170331954956055
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance , * Asc LIMIT value",
                -5.780561447143555
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance - T2.balance Asc LIMIT value",
                -6.071386098861694
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY Sum ( T2.balance ) Asc LIMIT value",
                -6.419213771820068
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance - T1.name Asc LIMIT value",
                -6.744150161743164
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance , T2.balance Asc LIMIT value",
                -6.875396251678467
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T2.balance - T3.balance Asc LIMIT value",
                -7.0570307970047
            ],
            [
                "SELECT T1.name , T3.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY Sum ( T2.balance ) Asc LIMIT value",
                -7.237988471984863
            ],
            [
                "SELECT T1.name , T3.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T2.balance - T2.balance Asc LIMIT value",
                -7.247098207473755
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid ORDER BY T2.balance , * Asc LIMIT value",
                -7.320653438568115
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance , T2.balance Asc LIMIT value",
                -7.446643352508545
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY Sum ( T2.balance ) Asc LIMIT value",
                -10.0339937210083
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid ORDER BY Sum ( T2.balance ) Asc LIMIT value",
                -11.659713745117188
            ],
            [
                "SELECT name FROM ACCOUNTS ORDER BY name Asc LIMIT value",
                -11.75846004486084
            ],
            [
                "SELECT name FROM ACCOUNTS",
                -17.063075065612793
            ]
        ],
        "predicted_parse_with_values": "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT 1",
        "template_feedback": "in step 1 , additionally use the information from the checking table . in step 2 , order the results by checking 's balance plus savings 's balance in place of savings 's balance .",
        "primary_span": [
            [
                4,
                12
            ],
            [
                17,
                27
            ]
        ],
        "secondary_span": [
            [
                28,
                34
            ]
        ],
        "edits": [
            "checking",
            "balance plus balance",
            "balance"
        ],
        "edits_original": "< from > add checking </ from > < orderBy > add balance plus balance </ orderBy > < orderBy > remove balance </ orderBy >"
    },
    {
        "db_id": "small_bank_1",
        "question": "Find the name of account that has the lowest total checking and saving balance.",
        "gold_parse": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance LIMIT 1",
        "predicted_parse": "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
        "predicted_parse_explanation": [
            "Step 1: for each row in accounts table , find the corresponding rows in savings table",
            "Step 2: find the name of the results of step 1 with smallest value of balance"
        ],
        "feedback": "in step 2, you should verify that the smallest value of total balance of savings and checking account is being used and  it should relate to the checking table in step 1.",
        "beam": [
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -0.8290672302246094
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -1.2780756950378418
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -2.362438201904297
            ],
            [
                "SELECT T1.name , T3.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T2.balance Asc LIMIT value",
                -2.3876867294311523
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T3.balance Asc LIMIT value",
                -2.807018756866455
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -3.9170331954956055
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance , * Asc LIMIT value",
                -5.780561447143555
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance - T2.balance Asc LIMIT value",
                -6.071386098861694
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY Sum ( T2.balance ) Asc LIMIT value",
                -6.419213771820068
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance - T1.name Asc LIMIT value",
                -6.744150161743164
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance , T2.balance Asc LIMIT value",
                -6.875396251678467
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T2.balance - T3.balance Asc LIMIT value",
                -7.0570307970047
            ],
            [
                "SELECT T1.name , T3.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY Sum ( T2.balance ) Asc LIMIT value",
                -7.237988471984863
            ],
            [
                "SELECT T1.name , T3.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T2.balance - T2.balance Asc LIMIT value",
                -7.247098207473755
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid ORDER BY T2.balance , * Asc LIMIT value",
                -7.320653438568115
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance , T2.balance Asc LIMIT value",
                -7.446643352508545
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY Sum ( T2.balance ) Asc LIMIT value",
                -10.0339937210083
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid ORDER BY Sum ( T2.balance ) Asc LIMIT value",
                -11.659713745117188
            ],
            [
                "SELECT name FROM ACCOUNTS ORDER BY name Asc LIMIT value",
                -11.75846004486084
            ],
            [
                "SELECT name FROM ACCOUNTS",
                -17.063075065612793
            ]
        ],
        "predicted_parse_with_values": "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT 1",
        "template_feedback": "in step 1 , additionally use the information from the checking table . in step 2 , order the results by checking 's balance plus savings 's balance in place of savings 's balance .",
        "primary_span": [
            [
                4,
                12
            ],
            [
                17,
                27
            ]
        ],
        "secondary_span": [
            [
                28,
                34
            ]
        ],
        "edits": [
            "checking",
            "balance plus balance",
            "balance"
        ],
        "edits_original": "< from > add checking </ from > < orderBy > add balance plus balance </ orderBy > < orderBy > remove balance </ orderBy >"
    },
    {
        "db_id": "small_bank_1",
        "question": "What is the checking balance of the account whose owner's name contains the substring 'ee'?",
        "gold_parse": "SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name LIKE '%ee%'",
        "predicted_parse": "SELECT T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name LIKE value",
        "predicted_parse_explanation": [
            "Step 1: for each row in accounts table , find the corresponding rows in savings table",
            "Step 2: find the balance of the results of step 1 whose name like ee"
        ],
        "feedback": "Put checking table instead of savings table .",
        "beam": [
            [
                "SELECT T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name LIKE value",
                -0.048888206481933594
            ],
            [
                "SELECT T2.balance FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T1.name LIKE value",
                -3.1094274520874023
            ],
            [
                "SELECT name FROM ACCOUNTS WHERE name LIKE value",
                -6.234270095825195
            ],
            [
                "SELECT * FROM ACCOUNTS WHERE name LIKE value",
                -7.023460865020752
            ],
            [
                "SELECT T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name ! = value",
                -11.243002891540527
            ],
            [
                "SELECT T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
                -11.453133583068848
            ],
            [
                "SELECT Sum ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name LIKE value",
                -12.4065580368042
            ],
            [
                "SELECT T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name LIKE value INTERSECT SELECT T1.name FROM ACCOUNTS AS T1 WHERE T1.name LIKE value",
                -12.464187145233154
            ],
            [
                "SELECT T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name LIKE value INTERSECT SELECT T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name LIKE value",
                -13.078246355056763
            ],
            [
                "SELECT T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name < value",
                -13.497413635253906
            ],
            [
                "SELECT T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name LIKE value ORDER BY T1.name Asc",
                -13.762454509735107
            ],
            [
                "SELECT T2.custid FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T1.name LIKE value",
                -13.922202110290527
            ],
            [
                "SELECT Count ( * ) FROM ACCOUNTS WHERE name LIKE value",
                -13.97596549987793
            ],
            [
                "SELECT T2.balance FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T1.name ! = value",
                -14.095490455627441
            ],
            [
                "SELECT Max ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name LIKE value",
                -14.153082847595215
            ],
            [
                "SELECT T2.balance FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
                -14.49873161315918
            ],
            [
                "SELECT T2.custid FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name LIKE value",
                -14.908890724182129
            ],
            [
                "SELECT DISTINCT T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name LIKE value",
                -15.020522117614746
            ],
            [
                "SELECT DISTINCT T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name LIKE value",
                -15.212604522705078
            ],
            [
                "SELECT T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE Max ( T1.name ) LIKE value",
                -15.248734474182129
            ]
        ],
        "predicted_parse_with_values": "SELECT T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name LIKE \"ee\"",
        "template_feedback": "in step 1 , use checking table in place of savings table in step 2 , consider the name like % ee % conditions in place of the name like ee conditions . find checking 's balance in place of savings 's balance .",
        "primary_span": [
            [
                4,
                6
            ],
            [
                16,
                23
            ],
            [
                33,
                36
            ]
        ],
        "secondary_span": [
            [
                7,
                11
            ],
            [
                24,
                32
            ],
            [
                37,
                43
            ]
        ],
        "edits": [
            "checking",
            "savings",
            "name like \"%ee%\"",
            "name like \"ee\""
        ],
        "edits_original": "< from > add checking </ from > < from > remove savings </ from > < where > add name like \" % ee % \" </ where > < where > remove name like \" ee \" </ where >"
    },
    {
        "db_id": "small_bank_1",
        "question": "What is the checking balance of the account whose owner's name contains the substring 'ee'?",
        "gold_parse": "SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name LIKE '%ee%'",
        "predicted_parse": "SELECT T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name LIKE value",
        "predicted_parse_explanation": [
            "Step 1: for each row in accounts table , find the corresponding rows in savings table",
            "Step 2: find the balance of the results of step 1 whose name like ee"
        ],
        "feedback": "You need to add table of savings.",
        "beam": [
            [
                "SELECT T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name LIKE value",
                -0.048888206481933594
            ],
            [
                "SELECT T2.balance FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T1.name LIKE value",
                -3.1094274520874023
            ],
            [
                "SELECT name FROM ACCOUNTS WHERE name LIKE value",
                -6.234270095825195
            ],
            [
                "SELECT * FROM ACCOUNTS WHERE name LIKE value",
                -7.023460865020752
            ],
            [
                "SELECT T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name ! = value",
                -11.243002891540527
            ],
            [
                "SELECT T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
                -11.453133583068848
            ],
            [
                "SELECT Sum ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name LIKE value",
                -12.4065580368042
            ],
            [
                "SELECT T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name LIKE value INTERSECT SELECT T1.name FROM ACCOUNTS AS T1 WHERE T1.name LIKE value",
                -12.464187145233154
            ],
            [
                "SELECT T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name LIKE value INTERSECT SELECT T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name LIKE value",
                -13.078246355056763
            ],
            [
                "SELECT T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name < value",
                -13.497413635253906
            ],
            [
                "SELECT T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name LIKE value ORDER BY T1.name Asc",
                -13.762454509735107
            ],
            [
                "SELECT T2.custid FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T1.name LIKE value",
                -13.922202110290527
            ],
            [
                "SELECT Count ( * ) FROM ACCOUNTS WHERE name LIKE value",
                -13.97596549987793
            ],
            [
                "SELECT T2.balance FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T1.name ! = value",
                -14.095490455627441
            ],
            [
                "SELECT Max ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name LIKE value",
                -14.153082847595215
            ],
            [
                "SELECT T2.balance FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
                -14.49873161315918
            ],
            [
                "SELECT T2.custid FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name LIKE value",
                -14.908890724182129
            ],
            [
                "SELECT DISTINCT T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name LIKE value",
                -15.020522117614746
            ],
            [
                "SELECT DISTINCT T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name LIKE value",
                -15.212604522705078
            ],
            [
                "SELECT T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE Max ( T1.name ) LIKE value",
                -15.248734474182129
            ]
        ],
        "predicted_parse_with_values": "SELECT T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name LIKE \"ee\"",
        "template_feedback": "in step 1 , use checking table in place of savings table in step 2 , consider the name like % ee % conditions in place of the name like ee conditions . find checking 's balance in place of savings 's balance .",
        "primary_span": [
            [
                4,
                6
            ],
            [
                16,
                23
            ],
            [
                33,
                36
            ]
        ],
        "secondary_span": [
            [
                7,
                11
            ],
            [
                24,
                32
            ],
            [
                37,
                43
            ]
        ],
        "edits": [
            "checking",
            "savings",
            "name like \"%ee%\"",
            "name like \"ee\""
        ],
        "edits_original": "< from > add checking </ from > < from > remove savings </ from > < where > add name like \" % ee % \" </ where > < where > remove name like \" ee \" </ where >"
    },
    {
        "db_id": "small_bank_1",
        "question": "Find the checking balance and saving balance in the Brown's account.",
        "gold_parse": "SELECT T2.balance ,  T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T1.name  =  'Brown'",
        "predicted_parse": "SELECT T2.balance , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
        "predicted_parse_explanation": [
            "Step 1: for each row in accounts table , find the corresponding rows in savings table",
            "Step 2: find the balance and balance of the results of step 1 whose name equals Brown"
        ],
        "feedback": "In step 1 Also Add checking table and Ensure to find SAVINGS's balance and CHECKING's balance In Step 2.",
        "beam": [
            [
                "SELECT T2.balance , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
                -0.10887956619262695
            ],
            [
                "SELECT T2.balance , T3.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid WHERE T1.name = value",
                -3.0500283241271973
            ],
            [
                "SELECT T3.balance , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid WHERE T1.name = value",
                -3.3272294998168945
            ],
            [
                "SELECT * , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
                -4.754563331604004
            ],
            [
                "SELECT T2.custid , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
                -5.796220779418945
            ],
            [
                "SELECT T3.custid , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid WHERE T1.name = value",
                -5.823126792907715
            ],
            [
                "SELECT T2.balance , * FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
                -6.6074981689453125
            ],
            [
                "SELECT T2.balance , T2.balance FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
                -6.686522960662842
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
                -6.927996635437012
            ],
            [
                "SELECT T2.balance , T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
                -7.080235481262207
            ],
            [
                "SELECT T1.custid , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
                -8.365421295166016
            ],
            [
                "SELECT T2.balance , Sum ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
                -8.446050643920898
            ],
            [
                "SELECT * , T2.balance FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
                -9.018325805664062
            ],
            [
                "SELECT T2.balance , * FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
                -9.716176986694336
            ],
            [
                "SELECT T2.balance , T2.custid FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
                -9.949006080627441
            ],
            [
                "SELECT T2.custid , T2.balance FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
                -10.470083236694336
            ],
            [
                "SELECT T2.balance , T1.custid FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
                -10.480183601379395
            ],
            [
                "SELECT Max ( T2.balance ) , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
                -10.74380874633789
            ],
            [
                "SELECT T2.custid , T3.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid WHERE T1.name = value",
                -10.883702278137207
            ],
            [
                "SELECT T2.balance , T3.custid FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid WHERE T1.name = value",
                -11.013608932495117
            ]
        ],
        "predicted_parse_with_values": "SELECT T2.balance , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name = \"Brown\"",
        "template_feedback": "in step 1 , additionally use the information from the checking table . in step 2 , additionally find checking 's balance .",
        "primary_span": [
            [
                4,
                12
            ],
            [
                17,
                22
            ]
        ],
        "secondary_span": [],
        "edits": [
            "checking"
        ],
        "edits_original": "< from > add checking </ from >"
    },
    {
        "db_id": "small_bank_1",
        "question": "Find the checking balance and saving balance in the Brown's account.",
        "gold_parse": "SELECT T2.balance ,  T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T1.name  =  'Brown'",
        "predicted_parse": "SELECT T2.balance , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
        "predicted_parse_explanation": [
            "Step 1: for each row in accounts table , find the corresponding rows in savings table",
            "Step 2: find the balance and balance of the results of step 1 whose name equals Brown"
        ],
        "feedback": "include checking table in step 1, and in step 2,  look for the id of customer from savings table and checking table. ",
        "beam": [
            [
                "SELECT T2.balance , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
                -0.10887956619262695
            ],
            [
                "SELECT T2.balance , T3.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid WHERE T1.name = value",
                -3.0500283241271973
            ],
            [
                "SELECT T3.balance , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid WHERE T1.name = value",
                -3.3272294998168945
            ],
            [
                "SELECT * , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
                -4.754563331604004
            ],
            [
                "SELECT T2.custid , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
                -5.796220779418945
            ],
            [
                "SELECT T3.custid , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid WHERE T1.name = value",
                -5.823126792907715
            ],
            [
                "SELECT T2.balance , * FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
                -6.6074981689453125
            ],
            [
                "SELECT T2.balance , T2.balance FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
                -6.686522960662842
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
                -6.927996635437012
            ],
            [
                "SELECT T2.balance , T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
                -7.080235481262207
            ],
            [
                "SELECT T1.custid , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
                -8.365421295166016
            ],
            [
                "SELECT T2.balance , Sum ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
                -8.446050643920898
            ],
            [
                "SELECT * , T2.balance FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
                -9.018325805664062
            ],
            [
                "SELECT T2.balance , * FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
                -9.716176986694336
            ],
            [
                "SELECT T2.balance , T2.custid FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
                -9.949006080627441
            ],
            [
                "SELECT T2.custid , T2.balance FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
                -10.470083236694336
            ],
            [
                "SELECT T2.balance , T1.custid FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
                -10.480183601379395
            ],
            [
                "SELECT Max ( T2.balance ) , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
                -10.74380874633789
            ],
            [
                "SELECT T2.custid , T3.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid WHERE T1.name = value",
                -10.883702278137207
            ],
            [
                "SELECT T2.balance , T3.custid FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid WHERE T1.name = value",
                -11.013608932495117
            ]
        ],
        "predicted_parse_with_values": "SELECT T2.balance , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name = \"Brown\"",
        "template_feedback": "in step 1 , additionally use the information from the checking table . in step 2 , additionally find checking 's balance .",
        "primary_span": [
            [
                4,
                12
            ],
            [
                17,
                22
            ]
        ],
        "secondary_span": [],
        "edits": [
            "checking"
        ],
        "edits_original": "< from > add checking </ from >"
    },
    {
        "db_id": "small_bank_1",
        "question": "Find the checking balance of the accounts whose savings balance is higher than the average savings balance.",
        "gold_parse": "SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name IN (SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM savings))",
        "predicted_parse": "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance > ( SELECT Avg ( T2.balance ) FROM SAVINGS AS T2 )",
        "predicted_parse_explanation": [
            "Step 1: for each row in accounts table , find the corresponding rows in savings table",
            "Step 2: find the average balance in savings table",
            "Step 3: find the name of the results of step 1 whose balance greater than the results of step 2"
        ],
        "feedback": "Step 2 substitute accounts with checking . Step 3 substitute name with checking's balance and balance with saving's balance .",
        "beam": [
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance > ( SELECT Avg ( T2.balance ) FROM SAVINGS AS T2 )",
                -0.0873870849609375
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance > ( SELECT Avg ( T3.balance ) FROM CHECKING AS T3 )",
                -3.4047861099243164
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance > ( SELECT Avg ( T3.balance ) FROM SAVINGS AS T3 )",
                -3.5612449645996094
            ],
            [
                "SELECT * FROM SAVINGS WHERE balance > ( SELECT Avg ( balance ) FROM SAVINGS )",
                -3.9753403663635254
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance > ( SELECT Avg ( T2.balance ) FROM CHECKING AS T2 )",
                -6.880496978759766
            ],
            [
                "SELECT * FROM SAVINGS AS T1 WHERE T1.balance > ( SELECT Avg ( T2.balance ) FROM CHECKING AS T2 )",
                -7.285849094390869
            ],
            [
                "SELECT * FROM CHECKING AS T1 WHERE T1.balance > ( SELECT Avg ( T2.balance ) FROM SAVINGS AS T2 )",
                -7.402627944946289
            ],
            [
                "SELECT balance FROM SAVINGS WHERE balance > ( SELECT Avg ( balance ) FROM SAVINGS )",
                -7.767324447631836
            ],
            [
                "SELECT name FROM ACCOUNTS",
                -9.521910667419434
            ],
            [
                "SELECT T3.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T2.custid = T1.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid WHERE T2.balance > ( SELECT Avg ( T2.balance ) FROM SAVINGS AS T2 )",
                -10.117305755615234
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid GROUP BY T1.name HAVING Avg ( T2.balance ) > ( SELECT Avg ( T2.balance ) FROM SAVINGS AS T2 )",
                -10.247203826904297
            ],
            [
                "SELECT T3.custid FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T2.custid = T1.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid WHERE T2.balance > ( SELECT Avg ( T2.balance ) FROM SAVINGS AS T2 )",
                -10.70852279663086
            ],
            [
                "SELECT * FROM CHECKING WHERE balance > ( SELECT Avg ( balance ) FROM CHECKING )",
                -10.721015930175781
            ],
            [
                "SELECT custid FROM SAVINGS WHERE balance > ( SELECT Avg ( balance ) FROM SAVINGS )",
                -10.766375541687012
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance > ( SELECT T2.balance FROM SAVINGS AS T2 )",
                -10.827916622161865
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance > ( SELECT Avg ( T2.balance ) , Avg ( T2.balance ) FROM SAVINGS AS T2 )",
                -11.01730728149414
            ],
            [
                "SELECT Max ( balance ) FROM SAVINGS",
                -11.155031204223633
            ],
            [
                "SELECT Avg ( balance ) FROM SAVINGS",
                -12.310383796691895
            ],
            [
                "SELECT Count ( * ) FROM ACCOUNTS",
                -13.728158950805664
            ],
            [
                "SELECT Max ( balance ) FROM CHECKING",
                -14.154415607452393
            ]
        ],
        "predicted_parse_with_values": "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance > ( SELECT Avg ( T2.balance ) FROM SAVINGS AS T2 )",
        "template_feedback": "in step 1 , use checking table in place of savings table in step 2 , additionally use the information from the accounts table besides the savings table . additionally make sure that savings 's balance is greater than average savings 's balance savings . find name in place of average savings 's balance . in step 3 , make sure the name is one of the results of step 2 the savings 's balance is greater than the results of step 2 . find savings 's balance in place of name .",
        "primary_span": [
            [
                4,
                6
            ],
            [
                16,
                23
            ],
            [
                29,
                44
            ],
            [
                45,
                46
            ],
            [
                59,
                70
            ],
            [
                84,
                87
            ]
        ],
        "secondary_span": [
            [
                7,
                11
            ],
            [
                24,
                28
            ],
            [
                47,
                54
            ],
            [
                71,
                83
            ],
            [
                88,
                92
            ]
        ],
        "edits": [
            "balance",
            "name",
            "checking",
            "savings",
            "name one of SUBS1",
            "balance greater than SUBS1",
            "name",
            "average balance",
            "accounts",
            "balance greater than SUBS1",
            "average balance",
            "savings"
        ],
        "edits_original": "< select > add balance </ select > < select > remove name </ select > < from > add checking </ from > < from > remove savings </ from > < where > add name one of SUBS1 </ where > < where > remove balance greater than SUBS1 </ where > < select > add name </ select > < select > remove average balance </ select > < from > add accounts </ from > < where > add balance greater than SUBS1 </ where > < select > add average balance </ select > < from > add savings </ from >"
    },
    {
        "db_id": "small_bank_1",
        "question": "What are the names of customers with accounts, and what are the total savings balances for each?",
        "gold_parse": "SELECT sum(T2.balance) ,  T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name",
        "predicted_parse": "SELECT T1.name , Sum ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid GROUP BY T1.custid",
        "predicted_parse_explanation": [
            "Step 1: for each row in accounts table , find the corresponding rows in savings table",
            "Step 2: find each value of accounts 's customer id of the results of step 1 along with the summation of balance and name of the corresponding rows to each value"
        ],
        "feedback": "It should be name instead of customer id .",
        "beam": [
            [
                "SELECT T1.name , Sum ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid GROUP BY T1.custid",
                -0.0022525787353515625
            ],
            [
                "SELECT T1.name , Sum ( T2.balance ) FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid GROUP BY T1.custid",
                -6.870303153991699
            ],
            [
                "SELECT T1.name , Sum ( Sum ( T2.balance ) ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid GROUP BY T1.custid",
                -6.979886054992676
            ],
            [
                "SELECT T1.name , Sum ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid GROUP BY T1.name",
                -9.691627502441406
            ],
            [
                "SELECT T1.name , Sum ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid GROUP BY T2.custid",
                -9.857532501220703
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid GROUP BY T1.custid HAVING Sum ( T2.balance ) > = value",
                -10.028125762939453
            ],
            [
                "SELECT Sum ( balance ) FROM SAVINGS",
                -10.12967300415039
            ],
            [
                "SELECT T1.name , Sum ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid GROUP BY Sum ( T1.custid )",
                -10.908751487731934
            ],
            [
                "SELECT T1.name , Sum ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name = value GROUP BY T1.custid",
                -11.916102409362793
            ],
            [
                "SELECT T1.custid , Sum ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid GROUP BY T1.custid",
                -11.948287010192871
            ],
            [
                "SELECT Sum ( T2.balance ) , T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid",
                -12.37552547454834
            ],
            [
                "SELECT T1.name , Sum ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid GROUP BY T1.custid HAVING Sum ( T2.balance ) > = value",
                -12.941712379455566
            ],
            [
                "SELECT T1.name , Sum ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid GROUP BY T1.custid ORDER BY Sum ( T2.balance ) Asc",
                -13.02159070968628
            ],
            [
                "SELECT Sum ( name ) FROM ACCOUNTS",
                -13.048381805419922
            ],
            [
                "SELECT T1.name , Sum ( T2.balance ) , T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid GROUP BY T1.custid",
                -13.151629447937012
            ],
            [
                "SELECT name FROM ACCOUNTS GROUP BY custid",
                -14.09106731414795
            ],
            [
                "SELECT T1.name , Count ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid GROUP BY T1.custid",
                -14.123098373413086
            ],
            [
                "SELECT T2.custid , Sum ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid GROUP BY T1.custid",
                -14.208287239074707
            ],
            [
                "SELECT Sum ( T1.name ) , Sum ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid",
                -14.935182571411133
            ],
            [
                "SELECT name FROM ACCOUNTS",
                -14.950472831726074
            ]
        ],
        "predicted_parse_with_values": "SELECT T1.name , Sum ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid GROUP BY T1.custid",
        "template_feedback": "in step 2 , find for each value of name in place of accounts 's customer id .",
        "primary_span": [
            [
                4,
                9
            ]
        ],
        "secondary_span": [
            [
                10,
                17
            ]
        ],
        "edits": [
            "name",
            "customer id"
        ],
        "edits_original": "< groupBy > add name </ groupBy > < groupBy > remove customer id </ groupBy >"
    },
    {
        "db_id": "small_bank_1",
        "question": "What are the names of customers with accounts, and what are the total savings balances for each?",
        "gold_parse": "SELECT sum(T2.balance) ,  T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name",
        "predicted_parse": "SELECT T1.name , Sum ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid GROUP BY T1.custid",
        "predicted_parse_explanation": [
            "Step 1: for each row in accounts table , find the corresponding rows in savings table",
            "Step 2: find each value of accounts 's customer id of the results of step 1 along with the summation of balance and name of the corresponding rows to each value"
        ],
        "feedback": "Supersede id of customer with name.",
        "beam": [
            [
                "SELECT T1.name , Sum ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid GROUP BY T1.custid",
                -0.0022525787353515625
            ],
            [
                "SELECT T1.name , Sum ( T2.balance ) FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid GROUP BY T1.custid",
                -6.870303153991699
            ],
            [
                "SELECT T1.name , Sum ( Sum ( T2.balance ) ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid GROUP BY T1.custid",
                -6.979886054992676
            ],
            [
                "SELECT T1.name , Sum ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid GROUP BY T1.name",
                -9.691627502441406
            ],
            [
                "SELECT T1.name , Sum ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid GROUP BY T2.custid",
                -9.857532501220703
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid GROUP BY T1.custid HAVING Sum ( T2.balance ) > = value",
                -10.028125762939453
            ],
            [
                "SELECT Sum ( balance ) FROM SAVINGS",
                -10.12967300415039
            ],
            [
                "SELECT T1.name , Sum ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid GROUP BY Sum ( T1.custid )",
                -10.908751487731934
            ],
            [
                "SELECT T1.name , Sum ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name = value GROUP BY T1.custid",
                -11.916102409362793
            ],
            [
                "SELECT T1.custid , Sum ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid GROUP BY T1.custid",
                -11.948287010192871
            ],
            [
                "SELECT Sum ( T2.balance ) , T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid",
                -12.37552547454834
            ],
            [
                "SELECT T1.name , Sum ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid GROUP BY T1.custid HAVING Sum ( T2.balance ) > = value",
                -12.941712379455566
            ],
            [
                "SELECT T1.name , Sum ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid GROUP BY T1.custid ORDER BY Sum ( T2.balance ) Asc",
                -13.02159070968628
            ],
            [
                "SELECT Sum ( name ) FROM ACCOUNTS",
                -13.048381805419922
            ],
            [
                "SELECT T1.name , Sum ( T2.balance ) , T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid GROUP BY T1.custid",
                -13.151629447937012
            ],
            [
                "SELECT name FROM ACCOUNTS GROUP BY custid",
                -14.09106731414795
            ],
            [
                "SELECT T1.name , Count ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid GROUP BY T1.custid",
                -14.123098373413086
            ],
            [
                "SELECT T2.custid , Sum ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid GROUP BY T1.custid",
                -14.208287239074707
            ],
            [
                "SELECT Sum ( T1.name ) , Sum ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid",
                -14.935182571411133
            ],
            [
                "SELECT name FROM ACCOUNTS",
                -14.950472831726074
            ]
        ],
        "predicted_parse_with_values": "SELECT T1.name , Sum ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid GROUP BY T1.custid",
        "template_feedback": "in step 2 , find for each value of name in place of accounts 's customer id .",
        "primary_span": [
            [
                4,
                9
            ]
        ],
        "secondary_span": [
            [
                10,
                17
            ]
        ],
        "edits": [
            "name",
            "customer id"
        ],
        "edits_original": "< groupBy > add name </ groupBy > < groupBy > remove customer id </ groupBy >"
    },
    {
        "db_id": "small_bank_1",
        "question": "What are the names, checking balances, and savings balances for all customers?",
        "gold_parse": "SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid",
        "predicted_parse": "SELECT T1.name , T2.balance , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid",
        "predicted_parse_explanation": [
            "Step 1: for each row in accounts table , find the corresponding rows in savings table",
            "Step 2: find the name , balance , balance of the results of step 1"
        ],
        "feedback": "In step 1 also find corresponding rows in checking , in step 2 find SAVINGS's balance , CHECKING's balance .",
        "beam": [
            [
                "SELECT T1.name , T2.balance , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid",
                -0.8339529037475586
            ],
            [
                "SELECT T1.name , T3.balance , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid",
                -1.803497076034546
            ],
            [
                "SELECT T1.name , T1.name , T2.balance , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid",
                -2.0469517707824707
            ],
            [
                "SELECT T1.name , T2.custid , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid",
                -2.894218921661377
            ],
            [
                "SELECT T1.name , T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid",
                -3.3573203086853027
            ],
            [
                "SELECT T1.name , T3.custid , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid",
                -3.373119354248047
            ],
            [
                "SELECT T1.name , T1.name , T3.balance , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid",
                -3.5905098915100098
            ],
            [
                "SELECT T1.name , T2.custid , T2.balance , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid",
                -3.62467360496521
            ],
            [
                "SELECT T1.name , T3.custid , T2.balance , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid",
                -4.003436326980591
            ],
            [
                "SELECT T1.name , T2.balance , T3.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid",
                -4.014634132385254
            ],
            [
                "SELECT T1.name , T2.custid , T3.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid",
                -4.814319133758545
            ],
            [
                "SELECT T1.name , T1.name , T2.balance , T3.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid",
                -4.934521198272705
            ],
            [
                "SELECT T1.name , T2.balance , T2.balance FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid",
                -5.026287794113159
            ],
            [
                "SELECT T1.name , T2.custid , T3.balance , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid",
                -5.130765676498413
            ],
            [
                "SELECT T1.name , T2.balance , T2.balance , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid",
                -5.176365852355957
            ],
            [
                "SELECT T1.name , T2.custid , T2.balance FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid",
                -5.314757347106934
            ],
            [
                "SELECT T1.name , T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid",
                -5.31798791885376
            ],
            [
                "SELECT T1.name , T3.custid , T3.balance , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid",
                -5.557636976242065
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid",
                -12.240626335144043
            ],
            [
                "SELECT name FROM ACCOUNTS",
                -15.325977325439453
            ]
        ],
        "predicted_parse_with_values": "SELECT T1.name , T2.balance , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid",
        "template_feedback": "in step 1 , additionally use the information from the checking table . in step 2 , additionally find checking 's balance .",
        "primary_span": [
            [
                4,
                12
            ],
            [
                17,
                22
            ]
        ],
        "secondary_span": [],
        "edits": [
            "checking"
        ],
        "edits_original": "< from > add checking </ from >"
    },
    {
        "db_id": "small_bank_1",
        "question": "What are the names, checking balances, and savings balances for all customers?",
        "gold_parse": "SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid",
        "predicted_parse": "SELECT T1.name , T2.balance , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid",
        "predicted_parse_explanation": [
            "Step 1: for each row in accounts table , find the corresponding rows in savings table",
            "Step 2: find the name , balance , balance of the results of step 1"
        ],
        "feedback": "i only need the balance for saving as well as checking.",
        "beam": [
            [
                "SELECT T1.name , T2.balance , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid",
                -0.8339529037475586
            ],
            [
                "SELECT T1.name , T3.balance , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid",
                -1.803497076034546
            ],
            [
                "SELECT T1.name , T1.name , T2.balance , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid",
                -2.0469517707824707
            ],
            [
                "SELECT T1.name , T2.custid , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid",
                -2.894218921661377
            ],
            [
                "SELECT T1.name , T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid",
                -3.3573203086853027
            ],
            [
                "SELECT T1.name , T3.custid , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid",
                -3.373119354248047
            ],
            [
                "SELECT T1.name , T1.name , T3.balance , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid",
                -3.5905098915100098
            ],
            [
                "SELECT T1.name , T2.custid , T2.balance , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid",
                -3.62467360496521
            ],
            [
                "SELECT T1.name , T3.custid , T2.balance , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid",
                -4.003436326980591
            ],
            [
                "SELECT T1.name , T2.balance , T3.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid",
                -4.014634132385254
            ],
            [
                "SELECT T1.name , T2.custid , T3.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid",
                -4.814319133758545
            ],
            [
                "SELECT T1.name , T1.name , T2.balance , T3.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid",
                -4.934521198272705
            ],
            [
                "SELECT T1.name , T2.balance , T2.balance FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid",
                -5.026287794113159
            ],
            [
                "SELECT T1.name , T2.custid , T3.balance , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid",
                -5.130765676498413
            ],
            [
                "SELECT T1.name , T2.balance , T2.balance , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid",
                -5.176365852355957
            ],
            [
                "SELECT T1.name , T2.custid , T2.balance FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid",
                -5.314757347106934
            ],
            [
                "SELECT T1.name , T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid",
                -5.31798791885376
            ],
            [
                "SELECT T1.name , T3.custid , T3.balance , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid",
                -5.557636976242065
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid",
                -12.240626335144043
            ],
            [
                "SELECT name FROM ACCOUNTS",
                -15.325977325439453
            ]
        ],
        "predicted_parse_with_values": "SELECT T1.name , T2.balance , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid",
        "template_feedback": "in step 1 , additionally use the information from the checking table . in step 2 , additionally find checking 's balance .",
        "primary_span": [
            [
                4,
                12
            ],
            [
                17,
                22
            ]
        ],
        "secondary_span": [],
        "edits": [
            "checking"
        ],
        "edits_original": "< from > add checking </ from >"
    },
    {
        "db_id": "small_bank_1",
        "question": "What are the names and sum of checking and savings balances for accounts with savings balances higher than the average savings balance?",
        "gold_parse": "SELECT T1.name ,  T2.balance + T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  >  (SELECT avg(balance) FROM savings)",
        "predicted_parse": "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance > ( SELECT Avg ( T2.balance ) FROM SAVINGS AS T2 )",
        "predicted_parse_explanation": [
            "Step 1: for each row in accounts table , find the corresponding rows in savings table",
            "Step 2: find the average balance in savings table",
            "Step 3: find the name and balance of the results of step 1 whose balance greater than the results of step 2"
        ],
        "feedback": "In step 2 add checking table , find name , sum of checking and savings balances whose SAVINGS's balance In step 3.",
        "beam": [
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance > ( SELECT Avg ( T2.balance ) FROM SAVINGS AS T2 )",
                -0.3551194667816162
            ],
            [
                "SELECT T1.name , T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance > ( SELECT Avg ( T2.balance ) FROM SAVINGS AS T2 )",
                -2.000382661819458
            ],
            [
                "SELECT T1.name , T3.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid WHERE T2.balance > ( SELECT Avg ( T2.balance ) FROM SAVINGS AS T2 )",
                -2.874207019805908
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance > ( SELECT Avg ( T3.balance ) FROM CHECKING AS T3 )",
                -3.135637044906616
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid WHERE T3.balance > ( SELECT Avg ( T2.balance ) FROM SAVINGS AS T2 )",
                -3.401930570602417
            ],
            [
                "SELECT T1.name , T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance > ( SELECT Avg ( T3.balance ) FROM CHECKING AS T3 )",
                -4.8312437534332275
            ],
            [
                "SELECT T1.name , T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance > ( SELECT Avg ( T3.balance ) FROM SAVINGS AS T3 )",
                -4.993998765945435
            ],
            [
                "SELECT T1.name , T3.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid WHERE T2.balance > ( SELECT Avg ( T3.balance ) FROM CHECKING AS T3 )",
                -5.657203197479248
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance > ( SELECT Avg ( T3.balance ) FROM SAVINGS AS T3 )",
                -5.940701007843018
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid WHERE T3.balance > ( SELECT Avg ( T3.balance ) FROM CHECKING AS T3 )",
                -6.187811613082886
            ],
            [
                "SELECT T1.name , T1.custid FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance > ( SELECT Avg ( T2.balance ) FROM SAVINGS AS T2 )",
                -6.214381217956543
            ],
            [
                "SELECT T1.name , T2.custid FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance > ( SELECT Avg ( T2.balance ) FROM SAVINGS AS T2 )",
                -6.637772083282471
            ],
            [
                "SELECT T1.name , T3.custid FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid WHERE T2.balance > ( SELECT Avg ( T2.balance ) FROM SAVINGS AS T2 )",
                -7.047001838684082
            ],
            [
                "SELECT T1.name , Avg ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance > ( SELECT Avg ( T2.balance ) FROM SAVINGS AS T2 )",
                -7.156614303588867
            ],
            [
                "SELECT T1.name , T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance > ( SELECT Avg ( T2.balance ) FROM CHECKING AS T2 )",
                -7.842934846878052
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid GROUP BY T1.name HAVING Avg ( T2.balance ) > ( SELECT Avg ( T2.balance ) FROM SAVINGS AS T2 )",
                -8.060227394104004
            ],
            [
                "SELECT T1.name , Avg ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid GROUP BY T1.name HAVING Avg ( T2.balance ) > ( SELECT Avg ( T2.balance ) FROM SAVINGS AS T2 )",
                -8.564885139465332
            ],
            [
                "SELECT T1.name , Avg ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid",
                -9.236235618591309
            ],
            [
                "SELECT T1.name , Avg ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid GROUP BY T1.name ORDER BY Avg ( T2.balance ) Desc LIMIT value",
                -9.624497890472412
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid",
                -10.694143295288086
            ]
        ],
        "predicted_parse_with_values": "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance > ( SELECT Avg ( T2.balance ) FROM SAVINGS AS T2 )",
        "template_feedback": "in step 1 , additionally use the information from the checking table . in step 3 , find checking 's balance plus savings 's balance in place of savings 's balance .",
        "primary_span": [
            [
                4,
                12
            ],
            [
                17,
                24
            ]
        ],
        "secondary_span": [
            [
                25,
                31
            ]
        ],
        "edits": [
            "balance plus balance",
            "balance",
            "checking"
        ],
        "edits_original": "< select > add balance plus balance </ select > < select > remove balance </ select > < from > add checking </ from >"
    },
    {
        "db_id": "small_bank_1",
        "question": "What are the names and sum of checking and savings balances for accounts with savings balances higher than the average savings balance?",
        "gold_parse": "SELECT T1.name ,  T2.balance + T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  >  (SELECT avg(balance) FROM savings)",
        "predicted_parse": "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance > ( SELECT Avg ( T2.balance ) FROM SAVINGS AS T2 )",
        "predicted_parse_explanation": [
            "Step 1: for each row in accounts table , find the corresponding rows in savings table",
            "Step 2: find the average balance in savings table",
            "Step 3: find the name and balance of the results of step 1 whose balance greater than the results of step 2"
        ],
        "feedback": "you have to add checking table in step 2 and look for the name, total checking and balance of savings of the one having balance as saving's mentioned in step 3.",
        "beam": [
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance > ( SELECT Avg ( T2.balance ) FROM SAVINGS AS T2 )",
                -0.3551194667816162
            ],
            [
                "SELECT T1.name , T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance > ( SELECT Avg ( T2.balance ) FROM SAVINGS AS T2 )",
                -2.000382661819458
            ],
            [
                "SELECT T1.name , T3.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid WHERE T2.balance > ( SELECT Avg ( T2.balance ) FROM SAVINGS AS T2 )",
                -2.874207019805908
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance > ( SELECT Avg ( T3.balance ) FROM CHECKING AS T3 )",
                -3.135637044906616
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid WHERE T3.balance > ( SELECT Avg ( T2.balance ) FROM SAVINGS AS T2 )",
                -3.401930570602417
            ],
            [
                "SELECT T1.name , T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance > ( SELECT Avg ( T3.balance ) FROM CHECKING AS T3 )",
                -4.8312437534332275
            ],
            [
                "SELECT T1.name , T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance > ( SELECT Avg ( T3.balance ) FROM SAVINGS AS T3 )",
                -4.993998765945435
            ],
            [
                "SELECT T1.name , T3.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid WHERE T2.balance > ( SELECT Avg ( T3.balance ) FROM CHECKING AS T3 )",
                -5.657203197479248
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance > ( SELECT Avg ( T3.balance ) FROM SAVINGS AS T3 )",
                -5.940701007843018
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid WHERE T3.balance > ( SELECT Avg ( T3.balance ) FROM CHECKING AS T3 )",
                -6.187811613082886
            ],
            [
                "SELECT T1.name , T1.custid FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance > ( SELECT Avg ( T2.balance ) FROM SAVINGS AS T2 )",
                -6.214381217956543
            ],
            [
                "SELECT T1.name , T2.custid FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance > ( SELECT Avg ( T2.balance ) FROM SAVINGS AS T2 )",
                -6.637772083282471
            ],
            [
                "SELECT T1.name , T3.custid FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid WHERE T2.balance > ( SELECT Avg ( T2.balance ) FROM SAVINGS AS T2 )",
                -7.047001838684082
            ],
            [
                "SELECT T1.name , Avg ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance > ( SELECT Avg ( T2.balance ) FROM SAVINGS AS T2 )",
                -7.156614303588867
            ],
            [
                "SELECT T1.name , T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance > ( SELECT Avg ( T2.balance ) FROM CHECKING AS T2 )",
                -7.842934846878052
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid GROUP BY T1.name HAVING Avg ( T2.balance ) > ( SELECT Avg ( T2.balance ) FROM SAVINGS AS T2 )",
                -8.060227394104004
            ],
            [
                "SELECT T1.name , Avg ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid GROUP BY T1.name HAVING Avg ( T2.balance ) > ( SELECT Avg ( T2.balance ) FROM SAVINGS AS T2 )",
                -8.564885139465332
            ],
            [
                "SELECT T1.name , Avg ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid",
                -9.236235618591309
            ],
            [
                "SELECT T1.name , Avg ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid GROUP BY T1.name ORDER BY Avg ( T2.balance ) Desc LIMIT value",
                -9.624497890472412
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid",
                -10.694143295288086
            ]
        ],
        "predicted_parse_with_values": "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance > ( SELECT Avg ( T2.balance ) FROM SAVINGS AS T2 )",
        "template_feedback": "in step 1 , additionally use the information from the checking table . in step 3 , find checking 's balance plus savings 's balance in place of savings 's balance .",
        "primary_span": [
            [
                4,
                12
            ],
            [
                17,
                24
            ]
        ],
        "secondary_span": [
            [
                25,
                31
            ]
        ],
        "edits": [
            "balance plus balance",
            "balance",
            "checking"
        ],
        "edits_original": "< select > add balance plus balance </ select > < select > remove balance </ select > < from > add checking </ from >"
    },
    {
        "db_id": "small_bank_1",
        "question": "What is the total checking balance in all accounts?",
        "gold_parse": "SELECT sum(balance) FROM checking",
        "predicted_parse": "SELECT Sum ( balance ) FROM SAVINGS",
        "predicted_parse_explanation": [
            "find the summation of balance in savings table"
        ],
        "feedback": "Find summation of balance in checking table .",
        "beam": [
            [
                "SELECT Sum ( balance ) FROM SAVINGS",
                -0.3327913284301758
            ],
            [
                "SELECT Sum ( balance ) FROM CHECKING",
                -1.262674331665039
            ],
            [
                "SELECT Sum ( * ) FROM ACCOUNTS",
                -8.673551559448242
            ],
            [
                "SELECT Count ( * ) FROM ACCOUNTS",
                -11.95970630645752
            ],
            [
                "SELECT Sum ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
                -13.417099952697754
            ],
            [
                "SELECT Sum ( name ) FROM ACCOUNTS",
                -14.035321712493896
            ],
            [
                "SELECT Sum ( T2.balance ) FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
                -14.36821174621582
            ],
            [
                "SELECT Avg ( balance ) FROM SAVINGS",
                -14.795886993408203
            ],
            [
                "SELECT Max ( balance ) FROM SAVINGS",
                -15.266740798950195
            ],
            [
                "SELECT Sum ( balance ) FROM SAVINGS INTERSECT SELECT Sum ( balance ) FROM SAVINGS",
                -15.279361724853516
            ],
            [
                "SELECT Sum ( Sum ( balance ) ) FROM SAVINGS",
                -15.290389060974121
            ],
            [
                "SELECT Sum ( T1.balance ) FROM SAVINGS AS T1 INTERSECT SELECT Sum ( T2.balance ) FROM CHECKING AS T2",
                -15.632372856140137
            ],
            [
                "SELECT Sum ( DISTINCT balance ) FROM SAVINGS",
                -15.752392768859863
            ],
            [
                "SELECT Avg ( balance ) FROM CHECKING",
                -15.758912086486816
            ],
            [
                "SELECT Sum ( balance ) FROM SAVINGS ORDER BY balance Desc",
                -15.863627195358276
            ],
            [
                "SELECT DISTINCT Sum ( balance ) FROM SAVINGS",
                -15.86649227142334
            ],
            [
                "SELECT Sum ( DISTINCT name ) FROM ACCOUNTS",
                -15.978234052658081
            ],
            [
                "SELECT Sum ( balance ) FROM SAVINGS LIMIT value",
                -16.07196044921875
            ],
            [
                "SELECT Sum ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T2.custid = T1.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T3.balance Desc",
                -16.17972159385681
            ],
            [
                "SELECT Max ( balance ) FROM CHECKING",
                -16.21964168548584
            ]
        ],
        "predicted_parse_with_values": "SELECT Sum ( balance ) FROM SAVINGS",
        "template_feedback": "use checking table in place of savings table . find summation of checking 's balance in place of summation of savings 's balance .",
        "primary_span": [
            [
                0,
                2
            ],
            [
                9,
                14
            ]
        ],
        "secondary_span": [
            [
                3,
                8
            ],
            [
                15,
                23
            ]
        ],
        "edits": [
            "checking",
            "savings"
        ],
        "edits_original": "< from > add checking </ from > < from > remove savings </ from >"
    },
    {
        "db_id": "small_bank_1",
        "question": "What is the name and checking balance of the account which has the lowest savings balance?",
        "gold_parse": "SELECT T2.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1",
        "predicted_parse": "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
        "predicted_parse_explanation": [
            "Step 1: for each row in accounts table , find the corresponding rows in savings table",
            "Step 2: find the name and balance of the results of step 1 with smallest value of balance"
        ],
        "feedback": "In step 1 also find correspondence in checking table , in step 2 ensure checking's balance(first ) , saving's balance(second ).",
        "beam": [
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -0.07717084884643555
            ],
            [
                "SELECT T1.name , T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -3.4668314456939697
            ],
            [
                "SELECT T1.name , T2.custid FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -4.164472579956055
            ],
            [
                "SELECT T1.name , T3.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T2.balance Asc LIMIT value",
                -4.505229473114014
            ],
            [
                "SELECT T1.name , T3.custid FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T2.balance Asc LIMIT value",
                -4.845592498779297
            ],
            [
                "SELECT T1.name , T1.custid FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -5.127775192260742
            ],
            [
                "SELECT T1.name , * FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -6.44346809387207
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T3.balance Asc LIMIT value",
                -7.110856533050537
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance - T2.balance Asc LIMIT value",
                -10.052211284637451
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -10.177724838256836
            ],
            [
                "SELECT T1.name , T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -10.547588586807251
            ],
            [
                "SELECT T1.name , T2.custid FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T3.balance Asc LIMIT value",
                -11.278423309326172
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -11.529940128326416
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Desc LIMIT value",
                -11.662756443023682
            ],
            [
                "SELECT T1.name , T2.custid FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -11.9725980758667
            ],
            [
                "SELECT T1.name , T1.custid FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -12.256274223327637
            ],
            [
                "SELECT T1.name , T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -12.55994439125061
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance = ( SELECT Min ( T2.balance ) FROM SAVINGS AS T2 ) ORDER BY T2.balance Asc LIMIT value",
                -12.913067102432251
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY DISTINCT T2.balance Asc LIMIT value",
                -13.387479305267334
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid",
                -14.992910861968994
            ]
        ],
        "predicted_parse_with_values": "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT 1",
        "template_feedback": "in step 1 , additionally use the information from the checking table . in step 2 , find checking 's balance in place of savings 's balance .",
        "primary_span": [
            [
                4,
                12
            ],
            [
                17,
                20
            ]
        ],
        "secondary_span": [
            [
                21,
                27
            ]
        ],
        "edits": [
            "checking"
        ],
        "edits_original": "< from > add checking </ from >"
    },
    {
        "db_id": "small_bank_1",
        "question": "What is the name and checking balance of the account which has the lowest savings balance?",
        "gold_parse": "SELECT T2.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1",
        "predicted_parse": "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
        "predicted_parse_explanation": [
            "Step 1: for each row in accounts table , find the corresponding rows in savings table",
            "Step 2: find the name and balance of the results of step 1 with smallest value of balance"
        ],
        "feedback": "Need to search relative in checking table in step 1 and be sure to checking's balance(first) and saving's balance (second) in step 2.",
        "beam": [
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -0.07717084884643555
            ],
            [
                "SELECT T1.name , T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -3.4668314456939697
            ],
            [
                "SELECT T1.name , T2.custid FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -4.164472579956055
            ],
            [
                "SELECT T1.name , T3.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T2.balance Asc LIMIT value",
                -4.505229473114014
            ],
            [
                "SELECT T1.name , T3.custid FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T2.balance Asc LIMIT value",
                -4.845592498779297
            ],
            [
                "SELECT T1.name , T1.custid FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -5.127775192260742
            ],
            [
                "SELECT T1.name , * FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -6.44346809387207
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T3.balance Asc LIMIT value",
                -7.110856533050537
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance - T2.balance Asc LIMIT value",
                -10.052211284637451
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -10.177724838256836
            ],
            [
                "SELECT T1.name , T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -10.547588586807251
            ],
            [
                "SELECT T1.name , T2.custid FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T3.balance Asc LIMIT value",
                -11.278423309326172
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -11.529940128326416
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Desc LIMIT value",
                -11.662756443023682
            ],
            [
                "SELECT T1.name , T2.custid FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -11.9725980758667
            ],
            [
                "SELECT T1.name , T1.custid FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -12.256274223327637
            ],
            [
                "SELECT T1.name , T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -12.55994439125061
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance = ( SELECT Min ( T2.balance ) FROM SAVINGS AS T2 ) ORDER BY T2.balance Asc LIMIT value",
                -12.913067102432251
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY DISTINCT T2.balance Asc LIMIT value",
                -13.387479305267334
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid",
                -14.992910861968994
            ]
        ],
        "predicted_parse_with_values": "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT 1",
        "template_feedback": "in step 1 , additionally use the information from the checking table . in step 2 , find checking 's balance in place of savings 's balance .",
        "primary_span": [
            [
                4,
                12
            ],
            [
                17,
                20
            ]
        ],
        "secondary_span": [
            [
                21,
                27
            ]
        ],
        "edits": [
            "checking"
        ],
        "edits_original": "< from > add checking </ from >"
    },
    {
        "db_id": "small_bank_1",
        "question": "Find the saving balance of the account with the highest checking balance.",
        "gold_parse": "SELECT T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance DESC LIMIT 1",
        "predicted_parse": "SELECT balance FROM SAVINGS ORDER BY balance Desc LIMIT value",
        "predicted_parse_explanation": [
            "find the balance in savings table with largest value of balance"
        ],
        "feedback": "Confirm that 2nd balance must be of checking .",
        "beam": [
            [
                "SELECT balance FROM SAVINGS ORDER BY balance Desc LIMIT value",
                -0.014913082122802734
            ],
            [
                "SELECT T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T1.name Desc LIMIT value",
                -4.688093185424805
            ],
            [
                "SELECT T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T2.custid = T1.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T3.balance Desc LIMIT value",
                -5.324444770812988
            ],
            [
                "SELECT T3.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T2.custid = T1.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T2.balance Desc LIMIT value",
                -7.294303894042969
            ],
            [
                "SELECT T2.balance FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid ORDER BY T1.name Desc LIMIT value",
                -11.82564401626587
            ],
            [
                "SELECT balance FROM SAVINGS ORDER BY * Desc LIMIT value",
                -12.444290161132812
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Desc LIMIT value",
                -12.447617530822754
            ],
            [
                "SELECT balance FROM CHECKING ORDER BY balance Desc LIMIT value",
                -12.604343891143799
            ],
            [
                "SELECT Max ( balance ) FROM SAVINGS",
                -12.740167617797852
            ],
            [
                "SELECT balance FROM SAVINGS ORDER BY balance Asc LIMIT value",
                -12.916377544403076
            ],
            [
                "SELECT T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T2.custid = T1.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T3.custid Desc LIMIT value",
                -12.951529502868652
            ],
            [
                "SELECT balance FROM SAVINGS ORDER BY custid Desc LIMIT value",
                -13.044342041015625
            ],
            [
                "SELECT balance FROM SAVINGS ORDER BY balance Desc",
                -13.546478748321533
            ],
            [
                "SELECT T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name = ( SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Desc LIMIT value )",
                -13.646799802780151
            ],
            [
                "SELECT Max ( balance ) FROM SAVINGS ORDER BY balance Desc LIMIT value",
                -14.09057331085205
            ],
            [
                "SELECT balance FROM SAVINGS ORDER BY Count ( * ) Desc LIMIT value",
                -14.122358322143555
            ],
            [
                "SELECT T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T1.name Desc",
                -14.211843490600586
            ],
            [
                "SELECT T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid GROUP BY T1.name ORDER BY Count ( * ) Desc LIMIT value",
                -14.349944591522217
            ],
            [
                "SELECT T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name = ( SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Desc LIMIT value ) ORDER BY T2.balance Desc LIMIT value",
                -14.385754585266113
            ],
            [
                "SELECT T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T1.custid Desc LIMIT value",
                -15.277265548706055
            ]
        ],
        "predicted_parse_with_values": "SELECT balance FROM SAVINGS ORDER BY balance Desc LIMIT 1",
        "template_feedback": "additionally use the information from the accounts table and checking table besides the savings table . order the results by checking 's balance in place of savings 's balance .",
        "primary_span": [
            [
                0,
                10
            ],
            [
                16,
                22
            ]
        ],
        "secondary_span": [
            [
                11,
                15
            ],
            [
                23,
                29
            ]
        ],
        "edits": [
            "accounts",
            "checking"
        ],
        "edits_original": "< from > add accounts </ from > < from > add checking </ from >"
    },
    {
        "db_id": "small_bank_1",
        "question": "Find the saving balance of the account with the highest checking balance.",
        "gold_parse": "SELECT T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance DESC LIMIT 1",
        "predicted_parse": "SELECT balance FROM SAVINGS ORDER BY balance Desc LIMIT value",
        "predicted_parse_explanation": [
            "find the balance in savings table with largest value of balance"
        ],
        "feedback": "you need to ascertain that the 2nd balance should be from checking account only.",
        "beam": [
            [
                "SELECT balance FROM SAVINGS ORDER BY balance Desc LIMIT value",
                -0.014913082122802734
            ],
            [
                "SELECT T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T1.name Desc LIMIT value",
                -4.688093185424805
            ],
            [
                "SELECT T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T2.custid = T1.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T3.balance Desc LIMIT value",
                -5.324444770812988
            ],
            [
                "SELECT T3.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T2.custid = T1.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T2.balance Desc LIMIT value",
                -7.294303894042969
            ],
            [
                "SELECT T2.balance FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid ORDER BY T1.name Desc LIMIT value",
                -11.82564401626587
            ],
            [
                "SELECT balance FROM SAVINGS ORDER BY * Desc LIMIT value",
                -12.444290161132812
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Desc LIMIT value",
                -12.447617530822754
            ],
            [
                "SELECT balance FROM CHECKING ORDER BY balance Desc LIMIT value",
                -12.604343891143799
            ],
            [
                "SELECT Max ( balance ) FROM SAVINGS",
                -12.740167617797852
            ],
            [
                "SELECT balance FROM SAVINGS ORDER BY balance Asc LIMIT value",
                -12.916377544403076
            ],
            [
                "SELECT T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T2.custid = T1.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T3.custid Desc LIMIT value",
                -12.951529502868652
            ],
            [
                "SELECT balance FROM SAVINGS ORDER BY custid Desc LIMIT value",
                -13.044342041015625
            ],
            [
                "SELECT balance FROM SAVINGS ORDER BY balance Desc",
                -13.546478748321533
            ],
            [
                "SELECT T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name = ( SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Desc LIMIT value )",
                -13.646799802780151
            ],
            [
                "SELECT Max ( balance ) FROM SAVINGS ORDER BY balance Desc LIMIT value",
                -14.09057331085205
            ],
            [
                "SELECT balance FROM SAVINGS ORDER BY Count ( * ) Desc LIMIT value",
                -14.122358322143555
            ],
            [
                "SELECT T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T1.name Desc",
                -14.211843490600586
            ],
            [
                "SELECT T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid GROUP BY T1.name ORDER BY Count ( * ) Desc LIMIT value",
                -14.349944591522217
            ],
            [
                "SELECT T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name = ( SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Desc LIMIT value ) ORDER BY T2.balance Desc LIMIT value",
                -14.385754585266113
            ],
            [
                "SELECT T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T1.custid Desc LIMIT value",
                -15.277265548706055
            ]
        ],
        "predicted_parse_with_values": "SELECT balance FROM SAVINGS ORDER BY balance Desc LIMIT 1",
        "template_feedback": "additionally use the information from the accounts table and checking table besides the savings table . order the results by checking 's balance in place of savings 's balance .",
        "primary_span": [
            [
                0,
                10
            ],
            [
                16,
                22
            ]
        ],
        "secondary_span": [
            [
                11,
                15
            ],
            [
                23,
                29
            ]
        ],
        "edits": [
            "accounts",
            "checking"
        ],
        "edits_original": "< from > add accounts </ from > < from > add checking </ from >"
    },
    {
        "db_id": "flight_1",
        "question": "What is the salaray and name of the employee that is certified to fly the most planes?",
        "gold_parse": "SELECT T1.name ,  T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse": "SELECT name , name FROM employee GROUP BY eid ORDER BY Count ( * ) Desc LIMIT value",
        "predicted_parse_explanation": [
            "Step 1: find the number of rows of each value of employee id in employee table",
            "Step 2: find the name and name in employee table with largest value in the results of step 1"
        ],
        "feedback": "In step 1 use certificate instead of employee , in step 2 exchange second \"name\" with \"salary\".",
        "beam": [
            [
                "SELECT name , name FROM employee GROUP BY eid ORDER BY Count ( * ) Desc LIMIT value",
                -0.08535623550415039
            ],
            [
                "SELECT salary , name FROM employee GROUP BY eid ORDER BY Count ( * ) Desc LIMIT value",
                -2.8890538215637207
            ],
            [
                "SELECT T2.name , T1.name FROM aircraft AS T1 JOIN employee AS T2 JOIN certificate AS T3 ON T1.aid = T3.aid AND T3.eid = T2.eid GROUP BY T2.eid ORDER BY Count ( * ) Desc LIMIT value",
                -4.600619316101074
            ],
            [
                "SELECT eid , name FROM employee GROUP BY eid ORDER BY Count ( * ) Desc LIMIT value",
                -4.7390360832214355
            ],
            [
                "SELECT T1.distance , T3.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid JOIN employee AS T3 JOIN certificate AS T4 ON T2.aid = T4.aid AND T4.eid = T3.eid GROUP BY T3.eid ORDER BY Count ( * ) Desc LIMIT value",
                -5.212530136108398
            ],
            [
                "SELECT T1.distance , T2.name FROM aircraft AS T1 JOIN employee AS T2 JOIN certificate AS T3 ON T1.aid = T3.aid AND T3.eid = T2.eid GROUP BY T2.eid ORDER BY Count ( * ) Desc LIMIT value",
                -7.46206521987915
            ],
            [
                "SELECT T2.eid , T1.name FROM employee AS T1 JOIN certificate AS T2 ON T1.eid = T2.eid GROUP BY T1.eid ORDER BY Count ( * ) Desc LIMIT value",
                -8.08331298828125
            ],
            [
                "SELECT * , name FROM employee GROUP BY eid ORDER BY Count ( * ) Desc LIMIT value",
                -8.091043472290039
            ],
            [
                "SELECT T1.departure_date , T3.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid JOIN employee AS T3 JOIN certificate AS T4 ON T2.aid = T4.aid AND T4.eid = T3.eid GROUP BY T3.eid ORDER BY Count ( * ) Desc LIMIT value",
                -8.52961540222168
            ],
            [
                "SELECT T1.arrival_date , T3.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid JOIN employee AS T3 JOIN certificate AS T4 ON T2.aid = T4.aid AND T4.eid = T3.eid GROUP BY T3.eid ORDER BY Count ( * ) Desc LIMIT value",
                -9.349654197692871
            ],
            [
                "SELECT name , name FROM employee GROUP BY name ORDER BY Count ( * ) Desc LIMIT value",
                -9.518005847930908
            ],
            [
                "SELECT T1.flno , T3.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid JOIN employee AS T3 JOIN certificate AS T4 ON T2.aid = T4.aid AND T4.eid = T3.eid GROUP BY T3.eid ORDER BY Count ( * ) Desc LIMIT value",
                -9.90933609008789
            ],
            [
                "SELECT name , eid FROM employee GROUP BY eid ORDER BY Count ( * ) Desc LIMIT value",
                -9.924675464630127
            ],
            [
                "SELECT T1.price , T3.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid JOIN employee AS T3 JOIN certificate AS T4 ON T2.aid = T4.aid AND T4.eid = T3.eid GROUP BY T3.eid ORDER BY Count ( * ) Desc LIMIT value",
                -9.990326881408691
            ],
            [
                "SELECT T3.name , T3.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid JOIN employee AS T3 JOIN certificate AS T4 ON T2.aid = T4.aid AND T4.eid = T3.eid ORDER BY T1.distance Desc LIMIT value",
                -10.44804859161377
            ],
            [
                "SELECT T1.name , T1.name FROM employee AS T1 JOIN certificate AS T2 ON T1.eid = T2.eid GROUP BY T2.eid ORDER BY Count ( * ) Desc LIMIT value",
                -10.624664783477783
            ],
            [
                "SELECT name , name FROM employee ORDER BY salary Desc LIMIT value",
                -11.004211068153381
            ],
            [
                "SELECT name , name FROM employee ORDER BY * Desc LIMIT value",
                -11.11897337436676
            ],
            [
                "SELECT T3.salary , T3.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid JOIN employee AS T3 JOIN certificate AS T4 ON T2.aid = T4.aid AND T4.eid = T3.eid ORDER BY T1.distance Desc LIMIT value",
                -11.153854846954346
            ],
            [
                "SELECT T1.destination , T3.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid JOIN employee AS T3 JOIN certificate AS T4 ON T2.aid = T4.aid AND T4.eid = T3.eid GROUP BY T3.eid ORDER BY Count ( * ) Desc LIMIT value",
                -11.2289457321167
            ]
        ],
        "predicted_parse_with_values": "SELECT name , name FROM employee GROUP BY eid ORDER BY Count ( * ) Desc LIMIT 1",
        "template_feedback": "in step 1 , additionally use the information from the certificate table besides the employee table . in step 2 , additionally find salary .",
        "primary_span": [
            [
                4,
                11
            ],
            [
                21,
                24
            ]
        ],
        "secondary_span": [
            [
                12,
                16
            ]
        ],
        "edits": [
            "salary",
            "name",
            "certificate"
        ],
        "edits_original": "< select > add salary </ select > < select > remove name </ select > < from > add certificate </ from >"
    },
    {
        "db_id": "flight_1",
        "question": "What is the salaray and name of the employee that is certified to fly the most planes?",
        "gold_parse": "SELECT T1.name ,  T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse": "SELECT name , name FROM employee GROUP BY eid ORDER BY Count ( * ) Desc LIMIT value",
        "predicted_parse_explanation": [
            "Step 1: find the number of rows of each value of employee id in employee table",
            "Step 2: find the name and name in employee table with largest value in the results of step 1"
        ],
        "feedback": "In step 1, I want Employee in place of Certificate and also In step 2, I want 'salary' which is to be replaced by 'name'. ",
        "beam": [
            [
                "SELECT name , name FROM employee GROUP BY eid ORDER BY Count ( * ) Desc LIMIT value",
                -0.08535623550415039
            ],
            [
                "SELECT salary , name FROM employee GROUP BY eid ORDER BY Count ( * ) Desc LIMIT value",
                -2.8890538215637207
            ],
            [
                "SELECT T2.name , T1.name FROM aircraft AS T1 JOIN employee AS T2 JOIN certificate AS T3 ON T1.aid = T3.aid AND T3.eid = T2.eid GROUP BY T2.eid ORDER BY Count ( * ) Desc LIMIT value",
                -4.600619316101074
            ],
            [
                "SELECT eid , name FROM employee GROUP BY eid ORDER BY Count ( * ) Desc LIMIT value",
                -4.7390360832214355
            ],
            [
                "SELECT T1.distance , T3.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid JOIN employee AS T3 JOIN certificate AS T4 ON T2.aid = T4.aid AND T4.eid = T3.eid GROUP BY T3.eid ORDER BY Count ( * ) Desc LIMIT value",
                -5.212530136108398
            ],
            [
                "SELECT T1.distance , T2.name FROM aircraft AS T1 JOIN employee AS T2 JOIN certificate AS T3 ON T1.aid = T3.aid AND T3.eid = T2.eid GROUP BY T2.eid ORDER BY Count ( * ) Desc LIMIT value",
                -7.46206521987915
            ],
            [
                "SELECT T2.eid , T1.name FROM employee AS T1 JOIN certificate AS T2 ON T1.eid = T2.eid GROUP BY T1.eid ORDER BY Count ( * ) Desc LIMIT value",
                -8.08331298828125
            ],
            [
                "SELECT * , name FROM employee GROUP BY eid ORDER BY Count ( * ) Desc LIMIT value",
                -8.091043472290039
            ],
            [
                "SELECT T1.departure_date , T3.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid JOIN employee AS T3 JOIN certificate AS T4 ON T2.aid = T4.aid AND T4.eid = T3.eid GROUP BY T3.eid ORDER BY Count ( * ) Desc LIMIT value",
                -8.52961540222168
            ],
            [
                "SELECT T1.arrival_date , T3.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid JOIN employee AS T3 JOIN certificate AS T4 ON T2.aid = T4.aid AND T4.eid = T3.eid GROUP BY T3.eid ORDER BY Count ( * ) Desc LIMIT value",
                -9.349654197692871
            ],
            [
                "SELECT name , name FROM employee GROUP BY name ORDER BY Count ( * ) Desc LIMIT value",
                -9.518005847930908
            ],
            [
                "SELECT T1.flno , T3.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid JOIN employee AS T3 JOIN certificate AS T4 ON T2.aid = T4.aid AND T4.eid = T3.eid GROUP BY T3.eid ORDER BY Count ( * ) Desc LIMIT value",
                -9.90933609008789
            ],
            [
                "SELECT name , eid FROM employee GROUP BY eid ORDER BY Count ( * ) Desc LIMIT value",
                -9.924675464630127
            ],
            [
                "SELECT T1.price , T3.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid JOIN employee AS T3 JOIN certificate AS T4 ON T2.aid = T4.aid AND T4.eid = T3.eid GROUP BY T3.eid ORDER BY Count ( * ) Desc LIMIT value",
                -9.990326881408691
            ],
            [
                "SELECT T3.name , T3.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid JOIN employee AS T3 JOIN certificate AS T4 ON T2.aid = T4.aid AND T4.eid = T3.eid ORDER BY T1.distance Desc LIMIT value",
                -10.44804859161377
            ],
            [
                "SELECT T1.name , T1.name FROM employee AS T1 JOIN certificate AS T2 ON T1.eid = T2.eid GROUP BY T2.eid ORDER BY Count ( * ) Desc LIMIT value",
                -10.624664783477783
            ],
            [
                "SELECT name , name FROM employee ORDER BY salary Desc LIMIT value",
                -11.004211068153381
            ],
            [
                "SELECT name , name FROM employee ORDER BY * Desc LIMIT value",
                -11.11897337436676
            ],
            [
                "SELECT T3.salary , T3.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid JOIN employee AS T3 JOIN certificate AS T4 ON T2.aid = T4.aid AND T4.eid = T3.eid ORDER BY T1.distance Desc LIMIT value",
                -11.153854846954346
            ],
            [
                "SELECT T1.destination , T3.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid JOIN employee AS T3 JOIN certificate AS T4 ON T2.aid = T4.aid AND T4.eid = T3.eid GROUP BY T3.eid ORDER BY Count ( * ) Desc LIMIT value",
                -11.2289457321167
            ]
        ],
        "predicted_parse_with_values": "SELECT name , name FROM employee GROUP BY eid ORDER BY Count ( * ) Desc LIMIT 1",
        "template_feedback": "in step 1 , additionally use the information from the certificate table besides the employee table . in step 2 , additionally find salary .",
        "primary_span": [
            [
                4,
                11
            ],
            [
                21,
                24
            ]
        ],
        "secondary_span": [
            [
                12,
                16
            ]
        ],
        "edits": [
            "salary",
            "name",
            "certificate"
        ],
        "edits_original": "< select > add salary </ select > < select > remove name </ select > < from > add certificate </ from >"
    },
    {
        "db_id": "formula_1",
        "question": "What is the first and last name of all the German drivers?",
        "gold_parse": "SELECT forename ,  surname FROM drivers WHERE nationality = \"German\"",
        "predicted_parse": "SELECT T2.positionText , T1.url FROM races AS T1 JOIN constructorStandings AS T2 ON T1.raceId = T2.raceId",
        "predicted_parse_explanation": [
            "Step 1: for each row in races table , find the corresponding rows in constructor standings table",
            "Step 2: find the position text and url of the results of step 1"
        ],
        "feedback": "Show all drivers' forename and surname for which nationality equals German .",
        "beam": [
            [
                "SELECT T2.positionText , T1.url FROM races AS T1 JOIN constructorStandings AS T2 ON T1.raceId = T2.raceId",
                -0.681419312953949
            ],
            [
                "SELECT T2.positionText , T1.driverRef FROM drivers AS T1 JOIN constructorStandings AS T2 ON T1.driverId = T2.driverId",
                -1.8626799583435059
            ],
            [
                "SELECT T3.positionText , T1.url FROM races AS T1 JOIN drivers AS T2 JOIN constructorStandings AS T3 ON T1.raceId = T3.raceId AND T3.driverId = T2.driverId AND T1.raceId = T3.raceId WHERE T2.driverRef = value",
                -2.609066367149353
            ],
            [
                "SELECT positionText , constructorStandingsId FROM constructorStandings",
                -3.147580623626709
            ],
            [
                "SELECT positionText , number FROM constructorStandings",
                -3.4886858463287354
            ],
            [
                "SELECT T1.positionText , T2.time FROM constructorStandings AS T1 JOIN results AS T2",
                -3.580362319946289
            ],
            [
                "SELECT positionText , positionText FROM constructorStandings",
                -3.7689931392669678
            ],
            [
                "SELECT T2.rank , T1.url FROM races AS T1 JOIN results AS T2",
                -4.419626474380493
            ],
            [
                "SELECT T2.positionText , T3.positionText FROM races AS T1 JOIN constructorStandings AS T2 ON T2.raceId = T1.raceId JOIN constructorResults AS T3 ON T1.raceId = T3.raceId",
                -4.582517147064209
            ],
            [
                "SELECT T2.positionText , T1.driverRef FROM drivers AS T1 JOIN constructorStandings AS T2 ON T1.driverId = T2.driverId WHERE T1.driverRef = value",
                -4.589821815490723
            ],
            [
                "SELECT T2.positionText , T2.positionText FROM drivers AS T1 JOIN constructorStandings AS T2 ON T1.driverId = T2.driverId WHERE T1.driverRef = value",
                -4.607102394104004
            ],
            [
                "SELECT T2.positionText , T1.name FROM races AS T1 JOIN constructorStandings AS T2 ON T1.raceId = T2.raceId",
                -4.747883319854736
            ],
            [
                "SELECT T2.positionText , T2.constructorStandingsId FROM drivers AS T1 JOIN constructorStandings AS T2 ON T1.driverId = T2.driverId WHERE T1.driverRef = value",
                -4.8783793449401855
            ],
            [
                "SELECT T2.positionText , T3.time FROM drivers AS T1 JOIN constructorStandings AS T2 ON T1.driverId = T2.driverId JOIN results AS T3 WHERE T1.driverRef = value",
                -5.196824073791504
            ],
            [
                "SELECT positionText , * FROM constructorStandings",
                -5.279661178588867
            ],
            [
                "SELECT T2.positionText , T2.number FROM drivers AS T1 JOIN constructorStandings AS T2 ON T1.driverId = T2.driverId WHERE T1.driverRef = value",
                -5.31606912612915
            ],
            [
                "SELECT T2.rank , T1.driverRef FROM drivers AS T1 JOIN results AS T2",
                -5.520409464836121
            ],
            [
                "SELECT positionText , grid FROM constructorStandings",
                -5.924431324005127
            ],
            [
                "SELECT T2.constructorRef , T1.url FROM races AS T1 JOIN constructors AS T2 JOIN constructorStandings AS T3 ON T1.raceId = T3.raceId AND T3.constructorId = T2.constructorId",
                -5.949838876724243
            ],
            [
                "SELECT T1.positionText , T2.rank FROM constructorStandings AS T1 JOIN results AS T2",
                -5.9784369468688965
            ]
        ],
        "predicted_parse_with_values": "SELECT T2.positionText , T1.url FROM races AS T1 JOIN constructorStandings AS T2 ON T1.raceId = T2.raceId",
        "template_feedback": "in step 1 , use drivers table in place of constructor standings table and races table in step 2 , additionally make sure that nationality equals German . find forename and surname in place of races 's url and position text .",
        "primary_span": [
            [
                4,
                6
            ],
            [
                20,
                27
            ],
            [
                28,
                31
            ]
        ],
        "secondary_span": [
            [
                7,
                15
            ],
            [
                32,
                41
            ]
        ],
        "edits": [
            "forename",
            "surname",
            "position text",
            "url",
            "drivers",
            "races",
            "constructor standings",
            "nationality equals \"German\""
        ],
        "edits_original": "< select > add forename </ select > < select > add surname </ select > < select > remove position text </ select > < select > remove url </ select > < from > add drivers </ from > < from > remove races </ from > < from > remove constructor standings </ from > < where > add nationality equals \" German \" </ where >"
    },
    {
        "db_id": "formula_1",
        "question": "What is the first and last name of all the German drivers?",
        "gold_parse": "SELECT forename ,  surname FROM drivers WHERE nationality = \"German\"",
        "predicted_parse": "SELECT T2.positionText , T1.url FROM races AS T1 JOIN constructorStandings AS T2 ON T1.raceId = T2.raceId",
        "predicted_parse_explanation": [
            "Step 1: for each row in races table , find the corresponding rows in constructor standings table",
            "Step 2: find the position text and url of the results of step 1"
        ],
        "feedback": "You should return the first and last names of all German drivers.",
        "beam": [
            [
                "SELECT T2.positionText , T1.url FROM races AS T1 JOIN constructorStandings AS T2 ON T1.raceId = T2.raceId",
                -0.681419312953949
            ],
            [
                "SELECT T2.positionText , T1.driverRef FROM drivers AS T1 JOIN constructorStandings AS T2 ON T1.driverId = T2.driverId",
                -1.8626799583435059
            ],
            [
                "SELECT T3.positionText , T1.url FROM races AS T1 JOIN drivers AS T2 JOIN constructorStandings AS T3 ON T1.raceId = T3.raceId AND T3.driverId = T2.driverId AND T1.raceId = T3.raceId WHERE T2.driverRef = value",
                -2.609066367149353
            ],
            [
                "SELECT positionText , constructorStandingsId FROM constructorStandings",
                -3.147580623626709
            ],
            [
                "SELECT positionText , number FROM constructorStandings",
                -3.4886858463287354
            ],
            [
                "SELECT T1.positionText , T2.time FROM constructorStandings AS T1 JOIN results AS T2",
                -3.580362319946289
            ],
            [
                "SELECT positionText , positionText FROM constructorStandings",
                -3.7689931392669678
            ],
            [
                "SELECT T2.rank , T1.url FROM races AS T1 JOIN results AS T2",
                -4.419626474380493
            ],
            [
                "SELECT T2.positionText , T3.positionText FROM races AS T1 JOIN constructorStandings AS T2 ON T2.raceId = T1.raceId JOIN constructorResults AS T3 ON T1.raceId = T3.raceId",
                -4.582517147064209
            ],
            [
                "SELECT T2.positionText , T1.driverRef FROM drivers AS T1 JOIN constructorStandings AS T2 ON T1.driverId = T2.driverId WHERE T1.driverRef = value",
                -4.589821815490723
            ],
            [
                "SELECT T2.positionText , T2.positionText FROM drivers AS T1 JOIN constructorStandings AS T2 ON T1.driverId = T2.driverId WHERE T1.driverRef = value",
                -4.607102394104004
            ],
            [
                "SELECT T2.positionText , T1.name FROM races AS T1 JOIN constructorStandings AS T2 ON T1.raceId = T2.raceId",
                -4.747883319854736
            ],
            [
                "SELECT T2.positionText , T2.constructorStandingsId FROM drivers AS T1 JOIN constructorStandings AS T2 ON T1.driverId = T2.driverId WHERE T1.driverRef = value",
                -4.8783793449401855
            ],
            [
                "SELECT T2.positionText , T3.time FROM drivers AS T1 JOIN constructorStandings AS T2 ON T1.driverId = T2.driverId JOIN results AS T3 WHERE T1.driverRef = value",
                -5.196824073791504
            ],
            [
                "SELECT positionText , * FROM constructorStandings",
                -5.279661178588867
            ],
            [
                "SELECT T2.positionText , T2.number FROM drivers AS T1 JOIN constructorStandings AS T2 ON T1.driverId = T2.driverId WHERE T1.driverRef = value",
                -5.31606912612915
            ],
            [
                "SELECT T2.rank , T1.driverRef FROM drivers AS T1 JOIN results AS T2",
                -5.520409464836121
            ],
            [
                "SELECT positionText , grid FROM constructorStandings",
                -5.924431324005127
            ],
            [
                "SELECT T2.constructorRef , T1.url FROM races AS T1 JOIN constructors AS T2 JOIN constructorStandings AS T3 ON T1.raceId = T3.raceId AND T3.constructorId = T2.constructorId",
                -5.949838876724243
            ],
            [
                "SELECT T1.positionText , T2.rank FROM constructorStandings AS T1 JOIN results AS T2",
                -5.9784369468688965
            ]
        ],
        "predicted_parse_with_values": "SELECT T2.positionText , T1.url FROM races AS T1 JOIN constructorStandings AS T2 ON T1.raceId = T2.raceId",
        "template_feedback": "in step 1 , use drivers table in place of constructor standings table and races table in step 2 , additionally make sure that nationality equals German . find forename and surname in place of races 's url and position text .",
        "primary_span": [
            [
                4,
                6
            ],
            [
                20,
                27
            ],
            [
                28,
                31
            ]
        ],
        "secondary_span": [
            [
                7,
                15
            ],
            [
                32,
                41
            ]
        ],
        "edits": [
            "forename",
            "surname",
            "position text",
            "url",
            "drivers",
            "races",
            "constructor standings",
            "nationality equals \"German\""
        ],
        "edits_original": "< select > add forename </ select > < select > add surname </ select > < select > remove position text </ select > < select > remove url </ select > < from > add drivers </ from > < from > remove races </ from > < from > remove constructor standings </ from > < where > add nationality equals \" German \" </ where >"
    },
    {
        "db_id": "formula_1",
        "question": "Find the names of Japanese constructors that have once earned more than 5 points?",
        "gold_parse": "SELECT T1.name FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5",
        "predicted_parse": "SELECT * FROM results WHERE milliseconds > value",
        "predicted_parse_explanation": [
            "find the rows in results table whose milliseconds greater than 5"
        ],
        "feedback": "Find constructors's name whose nationality equals Japanese and points greater than 5.",
        "beam": [
            [
                "SELECT * FROM results WHERE milliseconds > value",
                -0.6626772880554199
            ],
            [
                "SELECT T1.name FROM races AS T1 JOIN results AS T2 WHERE T2.milliseconds > value",
                -1.444960117340088
            ],
            [
                "SELECT T1.dob FROM seasons AS T1 JOIN results AS T2 WHERE T2.milliseconds > value",
                -2.487362861633301
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN results AS T2 WHERE T2.milliseconds > value",
                -2.9801108837127686
            ],
            [
                "SELECT * FROM results WHERE milliseconds > value AND milliseconds > value",
                -3.355541706085205
            ],
            [
                "SELECT T1.name FROM races AS T1 JOIN constructorResults AS T2 ON T1.raceId = T2.raceId GROUP BY T2.positionText HAVING Count ( * ) > value",
                -4.360834121704102
            ],
            [
                "SELECT * FROM constructorStandings WHERE resultId > value",
                -4.574010372161865
            ],
            [
                "SELECT T1.name FROM races AS T1 JOIN constructorStandings AS T2 ON T1.raceId = T2.raceId WHERE T2.resultId > value",
                -5.4936699867248535
            ],
            [
                "SELECT * FROM driverStandings WHERE raceId > value",
                -5.663074016571045
            ],
            [
                "SELECT T1.name FROM races AS T1 JOIN constructorResults AS T2 ON T1.raceId = T2.raceId GROUP BY T2.position HAVING Count ( * ) > value",
                -5.692271709442139
            ],
            [
                "SELECT T1.name FROM races AS T1 JOIN constructorStandings AS T2 ON T1.raceId = T2.raceId GROUP BY T2.positionText HAVING Count ( * ) > value",
                -5.79958438873291
            ],
            [
                "SELECT T1.dob FROM seasons AS T1 JOIN constructorResults AS T2 GROUP BY T2.positionText HAVING Count ( * ) > value",
                -5.825610160827637
            ],
            [
                "SELECT * FROM constructorStandings AS T1 JOIN results AS T2 WHERE T1.resultId > value AND T2.milliseconds > value",
                -6.074367046356201
            ],
            [
                "SELECT T1.positionText FROM constructorStandings AS T1 JOIN results AS T2 WHERE T2.milliseconds > value",
                -6.092894077301025
            ],
            [
                "SELECT T1.name FROM races AS T1 JOIN driverStandings AS T2 ON T1.raceId = T2.raceId GROUP BY T2.driverId HAVING Count ( * ) > value",
                -6.360995054244995
            ],
            [
                "SELECT T1.name FROM races AS T1 JOIN driverStandings AS T2 ON T1.raceId = T2.raceId GROUP BY T2.statusId HAVING Count ( * ) > value",
                -6.434389591217041
            ],
            [
                "SELECT T1.name FROM races AS T1 JOIN results AS T2 GROUP BY T2.laps HAVING Count ( * ) > value",
                -6.511698484420776
            ],
            [
                "SELECT T1.dob FROM seasons AS T1 JOIN constructorStandings AS T2 WHERE T2.resultId > value",
                -6.528539657592773
            ],
            [
                "SELECT T1.name FROM races AS T1 JOIN results AS T2 GROUP BY T2.time HAVING Count ( * ) > value",
                -6.585407495498657
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN constructorResults AS T3 ON T2.raceId = T3.raceId GROUP BY T3.positionText HAVING Count ( * ) > value",
                -6.660029411315918
            ]
        ],
        "predicted_parse_with_values": "SELECT * FROM results WHERE milliseconds > 5",
        "template_feedback": "use constructors table and constructor standings table in place of results table . consider the nationality equals Japanese and constructor standings 's points greater than 5 conditions in place of the milliseconds greater than 5 conditions . find name in place of rows .",
        "primary_span": [
            [
                0,
                6
            ],
            [
                13,
                26
            ],
            [
                37,
                38
            ]
        ],
        "secondary_span": [
            [
                7,
                12
            ],
            [
                27,
                36
            ],
            [
                39,
                43
            ]
        ],
        "edits": [
            "name",
            "rows",
            "constructors",
            "constructor standings",
            "results",
            "nationality equals \"Japanese\"",
            "points greater than 5",
            "milliseconds greater than 5"
        ],
        "edits_original": "< select > add name </ select > < select > remove rows </ select > < from > add constructors </ from > < from > add constructor standings </ from > < from > remove results </ from > < where > add nationality equals \" Japanese \" </ where > < where > add points greater than 5 </ where > < where > remove milliseconds greater than 5 </ where >"
    },
    {
        "db_id": "formula_1",
        "question": "Find the names of Japanese constructors that have once earned more than 5 points?",
        "gold_parse": "SELECT T1.name FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5",
        "predicted_parse": "SELECT * FROM results WHERE milliseconds > value",
        "predicted_parse_explanation": [
            "find the rows in results table whose milliseconds greater than 5"
        ],
        "feedback": "Look for the name of constructors who have more than 5 points and are of Japanese nationality.",
        "beam": [
            [
                "SELECT * FROM results WHERE milliseconds > value",
                -0.6626772880554199
            ],
            [
                "SELECT T1.name FROM races AS T1 JOIN results AS T2 WHERE T2.milliseconds > value",
                -1.444960117340088
            ],
            [
                "SELECT T1.dob FROM seasons AS T1 JOIN results AS T2 WHERE T2.milliseconds > value",
                -2.487362861633301
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN results AS T2 WHERE T2.milliseconds > value",
                -2.9801108837127686
            ],
            [
                "SELECT * FROM results WHERE milliseconds > value AND milliseconds > value",
                -3.355541706085205
            ],
            [
                "SELECT T1.name FROM races AS T1 JOIN constructorResults AS T2 ON T1.raceId = T2.raceId GROUP BY T2.positionText HAVING Count ( * ) > value",
                -4.360834121704102
            ],
            [
                "SELECT * FROM constructorStandings WHERE resultId > value",
                -4.574010372161865
            ],
            [
                "SELECT T1.name FROM races AS T1 JOIN constructorStandings AS T2 ON T1.raceId = T2.raceId WHERE T2.resultId > value",
                -5.4936699867248535
            ],
            [
                "SELECT * FROM driverStandings WHERE raceId > value",
                -5.663074016571045
            ],
            [
                "SELECT T1.name FROM races AS T1 JOIN constructorResults AS T2 ON T1.raceId = T2.raceId GROUP BY T2.position HAVING Count ( * ) > value",
                -5.692271709442139
            ],
            [
                "SELECT T1.name FROM races AS T1 JOIN constructorStandings AS T2 ON T1.raceId = T2.raceId GROUP BY T2.positionText HAVING Count ( * ) > value",
                -5.79958438873291
            ],
            [
                "SELECT T1.dob FROM seasons AS T1 JOIN constructorResults AS T2 GROUP BY T2.positionText HAVING Count ( * ) > value",
                -5.825610160827637
            ],
            [
                "SELECT * FROM constructorStandings AS T1 JOIN results AS T2 WHERE T1.resultId > value AND T2.milliseconds > value",
                -6.074367046356201
            ],
            [
                "SELECT T1.positionText FROM constructorStandings AS T1 JOIN results AS T2 WHERE T2.milliseconds > value",
                -6.092894077301025
            ],
            [
                "SELECT T1.name FROM races AS T1 JOIN driverStandings AS T2 ON T1.raceId = T2.raceId GROUP BY T2.driverId HAVING Count ( * ) > value",
                -6.360995054244995
            ],
            [
                "SELECT T1.name FROM races AS T1 JOIN driverStandings AS T2 ON T1.raceId = T2.raceId GROUP BY T2.statusId HAVING Count ( * ) > value",
                -6.434389591217041
            ],
            [
                "SELECT T1.name FROM races AS T1 JOIN results AS T2 GROUP BY T2.laps HAVING Count ( * ) > value",
                -6.511698484420776
            ],
            [
                "SELECT T1.dob FROM seasons AS T1 JOIN constructorStandings AS T2 WHERE T2.resultId > value",
                -6.528539657592773
            ],
            [
                "SELECT T1.name FROM races AS T1 JOIN results AS T2 GROUP BY T2.time HAVING Count ( * ) > value",
                -6.585407495498657
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN constructorResults AS T3 ON T2.raceId = T3.raceId GROUP BY T3.positionText HAVING Count ( * ) > value",
                -6.660029411315918
            ]
        ],
        "predicted_parse_with_values": "SELECT * FROM results WHERE milliseconds > 5",
        "template_feedback": "use constructors table and constructor standings table in place of results table . consider the nationality equals Japanese and constructor standings 's points greater than 5 conditions in place of the milliseconds greater than 5 conditions . find name in place of rows .",
        "primary_span": [
            [
                0,
                6
            ],
            [
                13,
                26
            ],
            [
                37,
                38
            ]
        ],
        "secondary_span": [
            [
                7,
                12
            ],
            [
                27,
                36
            ],
            [
                39,
                43
            ]
        ],
        "edits": [
            "name",
            "rows",
            "constructors",
            "constructor standings",
            "results",
            "nationality equals \"Japanese\"",
            "points greater than 5",
            "milliseconds greater than 5"
        ],
        "edits_original": "< select > add name </ select > < select > remove rows </ select > < from > add constructors </ from > < from > add constructor standings </ from > < from > remove results </ from > < where > add nationality equals \" Japanese \" </ where > < where > add points greater than 5 </ where > < where > remove milliseconds greater than 5 </ where >"
    },
    {
        "db_id": "flight_1",
        "question": "What is the origin and destination for all flights whose price is higher than 300?",
        "gold_parse": "SELECT origin ,  destination FROM Flight WHERE price  >  300",
        "predicted_parse": "SELECT T1.origin , T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.price > value",
        "predicted_parse_explanation": [
            "Step 1: for each row in flight table , find the corresponding rows in aircraft table",
            "Step 2: find the origin and name of the results of step 1 whose price greater than 300"
        ],
        "feedback": "distance of aircraft is to be replaced by arrival date .",
        "beam": [
            [
                "SELECT T1.origin , T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.price > value",
                -0.0817728042602539
            ],
            [
                "SELECT origin , destination FROM flight WHERE price > value",
                -2.8673086166381836
            ],
            [
                "SELECT origin , origin FROM flight WHERE price > value",
                -3.8492488861083984
            ],
            [
                "SELECT origin , departure_date FROM flight WHERE price > value",
                -9.026020050048828
            ],
            [
                "SELECT origin , price FROM flight WHERE price > value",
                -9.271025657653809
            ],
            [
                "SELECT origin , arrival_date FROM flight WHERE price > value",
                -9.475381851196289
            ],
            [
                "SELECT origin , flno FROM flight WHERE price > value",
                -10.68924617767334
            ],
            [
                "SELECT origin , distance FROM flight WHERE price > value",
                -11.22511100769043
            ],
            [
                "SELECT origin , * FROM flight WHERE price > value",
                -11.7545747756958
            ],
            [
                "SELECT origin FROM flight WHERE price > value",
                -11.960114479064941
            ],
            [
                "SELECT T1.destination , T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.price > value",
                -12.125877380371094
            ],
            [
                "SELECT T1.origin , T3.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid JOIN employee AS T3 JOIN certificate AS T4 ON T2.aid = T4.aid AND T4.eid = T3.eid WHERE T1.price > value",
                -12.57812213897705
            ],
            [
                "SELECT T1.origin , T2.name , T1.price FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.price > value",
                -12.656511306762695
            ],
            [
                "SELECT T1.arrival_date , T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.price > value",
                -12.734415054321289
            ],
            [
                "SELECT DISTINCT T1.origin , T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.price > value",
                -12.770575523376465
            ],
            [
                "SELECT origin , aid FROM flight WHERE price > value",
                -12.918542861938477
            ],
            [
                "SELECT T1.origin , T2.distance FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.price > value",
                -13.20279598236084
            ],
            [
                "SELECT T1.departure_date , T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.price > value",
                -13.49177074432373
            ],
            [
                "SELECT T1.origin , T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.distance > value",
                -13.909207344055176
            ],
            [
                "SELECT T1.origin , T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.price < value",
                -13.993908882141113
            ]
        ],
        "predicted_parse_with_values": "SELECT T1.origin , T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.price > 300",
        "template_feedback": "in step 1 , do not use the aircraft table . in step 2 , find destination in place of name .",
        "primary_span": [
            [
                4,
                10
            ],
            [
                15,
                16
            ]
        ],
        "secondary_span": [
            [
                4,
                10
            ],
            [
                17,
                21
            ]
        ],
        "edits": [
            "destination",
            "name",
            "aircraft"
        ],
        "edits_original": "< select > add destination </ select > < select > remove name </ select > < from > remove aircraft </ from >"
    },
    {
        "db_id": "flight_1",
        "question": "What is the origin and destination for all flights whose price is higher than 300?",
        "gold_parse": "SELECT origin ,  destination FROM Flight WHERE price  >  300",
        "predicted_parse": "SELECT T1.origin , T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.price > value",
        "predicted_parse_explanation": [
            "Step 1: for each row in flight table , find the corresponding rows in aircraft table",
            "Step 2: find the origin and name of the results of step 1 whose price greater than 300"
        ],
        "feedback": "I want the destination in-place of aircraft name.",
        "beam": [
            [
                "SELECT T1.origin , T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.price > value",
                -0.0817728042602539
            ],
            [
                "SELECT origin , destination FROM flight WHERE price > value",
                -2.8673086166381836
            ],
            [
                "SELECT origin , origin FROM flight WHERE price > value",
                -3.8492488861083984
            ],
            [
                "SELECT origin , departure_date FROM flight WHERE price > value",
                -9.026020050048828
            ],
            [
                "SELECT origin , price FROM flight WHERE price > value",
                -9.271025657653809
            ],
            [
                "SELECT origin , arrival_date FROM flight WHERE price > value",
                -9.475381851196289
            ],
            [
                "SELECT origin , flno FROM flight WHERE price > value",
                -10.68924617767334
            ],
            [
                "SELECT origin , distance FROM flight WHERE price > value",
                -11.22511100769043
            ],
            [
                "SELECT origin , * FROM flight WHERE price > value",
                -11.7545747756958
            ],
            [
                "SELECT origin FROM flight WHERE price > value",
                -11.960114479064941
            ],
            [
                "SELECT T1.destination , T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.price > value",
                -12.125877380371094
            ],
            [
                "SELECT T1.origin , T3.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid JOIN employee AS T3 JOIN certificate AS T4 ON T2.aid = T4.aid AND T4.eid = T3.eid WHERE T1.price > value",
                -12.57812213897705
            ],
            [
                "SELECT T1.origin , T2.name , T1.price FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.price > value",
                -12.656511306762695
            ],
            [
                "SELECT T1.arrival_date , T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.price > value",
                -12.734415054321289
            ],
            [
                "SELECT DISTINCT T1.origin , T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.price > value",
                -12.770575523376465
            ],
            [
                "SELECT origin , aid FROM flight WHERE price > value",
                -12.918542861938477
            ],
            [
                "SELECT T1.origin , T2.distance FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.price > value",
                -13.20279598236084
            ],
            [
                "SELECT T1.departure_date , T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.price > value",
                -13.49177074432373
            ],
            [
                "SELECT T1.origin , T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.distance > value",
                -13.909207344055176
            ],
            [
                "SELECT T1.origin , T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.price < value",
                -13.993908882141113
            ]
        ],
        "predicted_parse_with_values": "SELECT T1.origin , T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.price > 300",
        "template_feedback": "in step 1 , do not use the aircraft table . in step 2 , find destination in place of name .",
        "primary_span": [
            [
                4,
                10
            ],
            [
                15,
                16
            ]
        ],
        "secondary_span": [
            [
                4,
                10
            ],
            [
                17,
                21
            ]
        ],
        "edits": [
            "destination",
            "name",
            "aircraft"
        ],
        "edits_original": "< select > add destination </ select > < select > remove name </ select > < from > remove aircraft </ from >"
    },
    {
        "db_id": "formula_1",
        "question": "What are the names and years of all races that had a driver with the last name Lewis?",
        "gold_parse": "SELECT T2.name ,  T2.year FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T1.driverid = T3.driverid WHERE T3.forename = \"Lewis\"",
        "predicted_parse": "SELECT T1.country , T1.circuitRef FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = value",
        "predicted_parse_explanation": [
            "Step 1: for each row in circuits table , find the corresponding rows in races table",
            "Step 2: find the country and circuit reference of the results of step 1 whose races 's name equals Lewis"
        ],
        "feedback": "Replace circuits with drivers in step 1 , Change country , circuit reference with races' name , year whose drivers' last name equals Lewis .",
        "beam": [
            [
                "SELECT T1.country , T1.circuitRef FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = value",
                -0.4370079040527344
            ],
            [
                "SELECT T1.country , T1.circuitRef FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T2.url = value",
                -1.057474136352539
            ],
            [
                "SELECT T1.country , T1.circuitRef FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN constructorResults AS T3 ON T2.raceId = T3.raceId WHERE T3.positionText = value",
                -5.410648822784424
            ],
            [
                "SELECT country , circuitRef FROM circuits WHERE country = value",
                -6.268033981323242
            ],
            [
                "SELECT T1.country , T1.circuitRef FROM circuits AS T1 JOIN results AS T2 WHERE T2.time = value",
                -8.409443855285645
            ],
            [
                "SELECT T1.country , T1.circuitRef FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T2.url = value",
                -9.756414413452148
            ],
            [
                "SELECT country , circuitRef FROM circuits",
                -11.639303207397461
            ],
            [
                "SELECT DISTINCT T1.country , T1.circuitRef FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = value",
                -12.093032836914062
            ],
            [
                "SELECT T1.country , T1.circuitRef FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T2.date = value",
                -12.17857837677002
            ],
            [
                "SELECT country , circuitRef FROM circuits WHERE * = value",
                -12.504090309143066
            ],
            [
                "SELECT DISTINCT T1.country , T1.circuitRef FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T2.url = value",
                -12.716619491577148
            ],
            [
                "SELECT T1.country , T1.circuitRef FROM circuits AS T1 JOIN status AS T2 WHERE T2.code = value",
                -12.86297607421875
            ],
            [
                "SELECT T1.country , T1.circuitRef FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T2.circuitId = value",
                -12.932222366333008
            ],
            [
                "SELECT T1.country , T1.circuitRef FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN drivers AS T3 JOIN constructorStandings AS T4 ON T2.raceId = T4.raceId AND T4.driverId = T3.driverId WHERE T3.driverRef = value",
                -12.948603630065918
            ],
            [
                "SELECT T1.country , T1.circuitRef FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN constructorResults AS T3 ON T2.raceId = T3.raceId WHERE T3.position = value",
                -13.064827919006348
            ],
            [
                "SELECT T1.country , T1.circuitRef FROM circuits AS T1 JOIN results AS T2 WHERE T2.points = value",
                -13.157312393188477
            ],
            [
                "SELECT T1.country , T1.circuitRef FROM circuits AS T1 JOIN results AS T2 WHERE T2.laps = value",
                -13.35579776763916
            ],
            [
                "SELECT T1.country , T1.circuitRef , T1.circuitRef FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T2.url = value",
                -13.65041732788086
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = value",
                -14.982134819030762
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T2.url = value",
                -17.898799896240234
            ]
        ],
        "predicted_parse_with_values": "SELECT T1.country , T1.circuitRef FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = \"Lewis\"",
        "template_feedback": "in step 1 , use results table and drivers table in place of circuits table in step 2 , consider the forename equals Lewis conditions in place of the races 's name equals Lewis conditions . find races 's name and year in place of country and circuit reference .",
        "primary_span": [
            [
                4,
                9
            ],
            [
                19,
                24
            ],
            [
                36,
                41
            ]
        ],
        "secondary_span": [
            [
                10,
                14
            ],
            [
                25,
                35
            ],
            [
                42,
                49
            ]
        ],
        "edits": [
            "name",
            "year",
            "country",
            "circuit reference",
            "results",
            "drivers",
            "circuits",
            "forename equals \"Lewis\"",
            "name equals \"Lewis\""
        ],
        "edits_original": "< select > add name </ select > < select > add year </ select > < select > remove country </ select > < select > remove circuit reference </ select > < from > add results </ from > < from > add drivers </ from > < from > remove circuits </ from > < where > add forename equals \" Lewis \" </ where > < where > remove name equals \" Lewis \" </ where >"
    },
    {
        "db_id": "formula_1",
        "question": "What are the names and years of all races that had a driver with the last name Lewis?",
        "gold_parse": "SELECT T2.name ,  T2.year FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T1.driverid = T3.driverid WHERE T3.forename = \"Lewis\"",
        "predicted_parse": "SELECT T1.country , T1.circuitRef FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = value",
        "predicted_parse_explanation": [
            "Step 1: for each row in circuits table , find the corresponding rows in races table",
            "Step 2: find the country and circuit reference of the results of step 1 whose races 's name equals Lewis"
        ],
        "feedback": "I want  drivers instead of circuits in step 1  and return eace name amnd year",
        "beam": [
            [
                "SELECT T1.country , T1.circuitRef FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = value",
                -0.4370079040527344
            ],
            [
                "SELECT T1.country , T1.circuitRef FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T2.url = value",
                -1.057474136352539
            ],
            [
                "SELECT T1.country , T1.circuitRef FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN constructorResults AS T3 ON T2.raceId = T3.raceId WHERE T3.positionText = value",
                -5.410648822784424
            ],
            [
                "SELECT country , circuitRef FROM circuits WHERE country = value",
                -6.268033981323242
            ],
            [
                "SELECT T1.country , T1.circuitRef FROM circuits AS T1 JOIN results AS T2 WHERE T2.time = value",
                -8.409443855285645
            ],
            [
                "SELECT T1.country , T1.circuitRef FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T2.url = value",
                -9.756414413452148
            ],
            [
                "SELECT country , circuitRef FROM circuits",
                -11.639303207397461
            ],
            [
                "SELECT DISTINCT T1.country , T1.circuitRef FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = value",
                -12.093032836914062
            ],
            [
                "SELECT T1.country , T1.circuitRef FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T2.date = value",
                -12.17857837677002
            ],
            [
                "SELECT country , circuitRef FROM circuits WHERE * = value",
                -12.504090309143066
            ],
            [
                "SELECT DISTINCT T1.country , T1.circuitRef FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T2.url = value",
                -12.716619491577148
            ],
            [
                "SELECT T1.country , T1.circuitRef FROM circuits AS T1 JOIN status AS T2 WHERE T2.code = value",
                -12.86297607421875
            ],
            [
                "SELECT T1.country , T1.circuitRef FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T2.circuitId = value",
                -12.932222366333008
            ],
            [
                "SELECT T1.country , T1.circuitRef FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN drivers AS T3 JOIN constructorStandings AS T4 ON T2.raceId = T4.raceId AND T4.driverId = T3.driverId WHERE T3.driverRef = value",
                -12.948603630065918
            ],
            [
                "SELECT T1.country , T1.circuitRef FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN constructorResults AS T3 ON T2.raceId = T3.raceId WHERE T3.position = value",
                -13.064827919006348
            ],
            [
                "SELECT T1.country , T1.circuitRef FROM circuits AS T1 JOIN results AS T2 WHERE T2.points = value",
                -13.157312393188477
            ],
            [
                "SELECT T1.country , T1.circuitRef FROM circuits AS T1 JOIN results AS T2 WHERE T2.laps = value",
                -13.35579776763916
            ],
            [
                "SELECT T1.country , T1.circuitRef , T1.circuitRef FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T2.url = value",
                -13.65041732788086
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = value",
                -14.982134819030762
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T2.url = value",
                -17.898799896240234
            ]
        ],
        "predicted_parse_with_values": "SELECT T1.country , T1.circuitRef FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = \"Lewis\"",
        "template_feedback": "in step 1 , use results table and drivers table in place of circuits table in step 2 , consider the forename equals Lewis conditions in place of the races 's name equals Lewis conditions . find races 's name and year in place of country and circuit reference .",
        "primary_span": [
            [
                4,
                9
            ],
            [
                19,
                24
            ],
            [
                36,
                41
            ]
        ],
        "secondary_span": [
            [
                10,
                14
            ],
            [
                25,
                35
            ],
            [
                42,
                49
            ]
        ],
        "edits": [
            "name",
            "year",
            "country",
            "circuit reference",
            "results",
            "drivers",
            "circuits",
            "forename equals \"Lewis\"",
            "name equals \"Lewis\""
        ],
        "edits_original": "< select > add name </ select > < select > add year </ select > < select > remove country </ select > < select > remove circuit reference </ select > < from > add results </ from > < from > add drivers </ from > < from > remove circuits </ from > < where > add forename equals \" Lewis \" </ where > < where > remove name equals \" Lewis \" </ where >"
    },
    {
        "db_id": "formula_1",
        "question": "What are the names of all races held between 2009 and 2011?",
        "gold_parse": "SELECT name FROM races WHERE YEAR BETWEEN 2009 AND 2011",
        "predicted_parse": "SELECT country FROM circuits WHERE lat BETWEEN value AND value",
        "predicted_parse_explanation": [
            "find the country in circuits table whose latitude between 2011 and 2009"
        ],
        "feedback": "Replace country , circuits table and \"lat equals or\" with name , races table and year respectively .",
        "beam": [
            [
                "SELECT country FROM circuits WHERE lat BETWEEN value AND value",
                -0.0046482086181640625
            ],
            [
                "SELECT country FROM circuits WHERE circuitRef BETWEEN value AND value",
                -5.939040184020996
            ],
            [
                "SELECT country FROM circuits WHERE lng BETWEEN value AND value",
                -6.673943519592285
            ],
            [
                "SELECT country FROM circuits WHERE lat > = value AND lat < = value",
                -7.734795570373535
            ],
            [
                "SELECT country FROM circuits WHERE circuitRef = value AND lat BETWEEN value AND value",
                -8.759930610656738
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN lapTimes AS T3 ON T2.raceId = T3.raceId WHERE T3.milliseconds BETWEEN value AND value",
                -9.683985710144043
            ],
            [
                "SELECT country FROM circuits WHERE lat < value AND lat < = value",
                -11.612405776977539
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN pitStops AS T3 ON T2.raceId = T3.raceId WHERE T3.milliseconds BETWEEN value AND value",
                -11.67949104309082
            ],
            [
                "SELECT country FROM circuits WHERE lat > = value AND circuitRef < = value",
                -11.818463325500488
            ],
            [
                "SELECT country FROM circuits",
                -11.939311981201172
            ],
            [
                "SELECT country FROM circuits WHERE lat < value AND circuitRef = value AND circuitRef = value",
                -12.291436195373535
            ],
            [
                "SELECT country FROM circuits GROUP BY country HAVING Count ( * ) BETWEEN value AND value",
                -12.54551362991333
            ],
            [
                "SELECT country FROM circuits WHERE circuitRef > = value AND lat < = value",
                -12.62339973449707
            ],
            [
                "SELECT country FROM circuits WHERE lat BETWEEN value AND value AND lat BETWEEN value AND value",
                -12.83116340637207
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN status AS T2 WHERE T2.number BETWEEN value AND value",
                -12.837482452392578
            ],
            [
                "SELECT country FROM circuits WHERE lat < value",
                -12.893514633178711
            ],
            [
                "SELECT country FROM circuits WHERE lng > = value AND lat < = value",
                -13.254626274108887
            ],
            [
                "SELECT country FROM circuits WHERE lat < value AND circuitRef = value OR circuitRef = value",
                -13.350231170654297
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN pitStops AS T3 ON T2.raceId = T3.raceId WHERE T3.stop BETWEEN value AND value",
                -13.746626853942871
            ],
            [
                "SELECT country FROM circuits WHERE circuitRef LIKE value",
                -14.677159309387207
            ]
        ],
        "predicted_parse_with_values": "SELECT country FROM circuits WHERE lat BETWEEN 2011 AND 2009",
        "template_feedback": "use races table in place of circuits table . consider the year between 2009 and 2011 conditions in place of the latitude between 2011 and 2009 conditions . find races 's name in place of country .",
        "primary_span": [
            [
                0,
                2
            ],
            [
                9,
                16
            ],
            [
                28,
                31
            ]
        ],
        "secondary_span": [
            [
                3,
                8
            ],
            [
                17,
                27
            ],
            [
                32,
                36
            ]
        ],
        "edits": [
            "name",
            "country",
            "races",
            "circuits",
            "year between 2009 and 2011",
            "latitude between 2011 and 2009"
        ],
        "edits_original": "< select > add name </ select > < select > remove country </ select > < from > add races </ from > < from > remove circuits </ from > < where > add year between 2009 and 2011 </ where > < where > remove latitude between 2011 and 2009 </ where >"
    },
    {
        "db_id": "formula_1",
        "question": "What are the names of all races held between 2009 and 2011?",
        "gold_parse": "SELECT name FROM races WHERE YEAR BETWEEN 2009 AND 2011",
        "predicted_parse": "SELECT country FROM circuits WHERE lat BETWEEN value AND value",
        "predicted_parse_explanation": [
            "find the country in circuits table whose latitude between 2011 and 2009"
        ],
        "feedback": "You should use name , races table and year",
        "beam": [
            [
                "SELECT country FROM circuits WHERE lat BETWEEN value AND value",
                -0.0046482086181640625
            ],
            [
                "SELECT country FROM circuits WHERE circuitRef BETWEEN value AND value",
                -5.939040184020996
            ],
            [
                "SELECT country FROM circuits WHERE lng BETWEEN value AND value",
                -6.673943519592285
            ],
            [
                "SELECT country FROM circuits WHERE lat > = value AND lat < = value",
                -7.734795570373535
            ],
            [
                "SELECT country FROM circuits WHERE circuitRef = value AND lat BETWEEN value AND value",
                -8.759930610656738
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN lapTimes AS T3 ON T2.raceId = T3.raceId WHERE T3.milliseconds BETWEEN value AND value",
                -9.683985710144043
            ],
            [
                "SELECT country FROM circuits WHERE lat < value AND lat < = value",
                -11.612405776977539
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN pitStops AS T3 ON T2.raceId = T3.raceId WHERE T3.milliseconds BETWEEN value AND value",
                -11.67949104309082
            ],
            [
                "SELECT country FROM circuits WHERE lat > = value AND circuitRef < = value",
                -11.818463325500488
            ],
            [
                "SELECT country FROM circuits",
                -11.939311981201172
            ],
            [
                "SELECT country FROM circuits WHERE lat < value AND circuitRef = value AND circuitRef = value",
                -12.291436195373535
            ],
            [
                "SELECT country FROM circuits GROUP BY country HAVING Count ( * ) BETWEEN value AND value",
                -12.54551362991333
            ],
            [
                "SELECT country FROM circuits WHERE circuitRef > = value AND lat < = value",
                -12.62339973449707
            ],
            [
                "SELECT country FROM circuits WHERE lat BETWEEN value AND value AND lat BETWEEN value AND value",
                -12.83116340637207
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN status AS T2 WHERE T2.number BETWEEN value AND value",
                -12.837482452392578
            ],
            [
                "SELECT country FROM circuits WHERE lat < value",
                -12.893514633178711
            ],
            [
                "SELECT country FROM circuits WHERE lng > = value AND lat < = value",
                -13.254626274108887
            ],
            [
                "SELECT country FROM circuits WHERE lat < value AND circuitRef = value OR circuitRef = value",
                -13.350231170654297
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN pitStops AS T3 ON T2.raceId = T3.raceId WHERE T3.stop BETWEEN value AND value",
                -13.746626853942871
            ],
            [
                "SELECT country FROM circuits WHERE circuitRef LIKE value",
                -14.677159309387207
            ]
        ],
        "predicted_parse_with_values": "SELECT country FROM circuits WHERE lat BETWEEN 2011 AND 2009",
        "template_feedback": "use races table in place of circuits table . consider the year between 2009 and 2011 conditions in place of the latitude between 2011 and 2009 conditions . find races 's name in place of country .",
        "primary_span": [
            [
                0,
                2
            ],
            [
                9,
                16
            ],
            [
                28,
                31
            ]
        ],
        "secondary_span": [
            [
                3,
                8
            ],
            [
                17,
                27
            ],
            [
                32,
                36
            ]
        ],
        "edits": [
            "name",
            "country",
            "races",
            "circuits",
            "year between 2009 and 2011",
            "latitude between 2011 and 2009"
        ],
        "edits_original": "< select > add name </ select > < select > remove country </ select > < from > add races </ from > < from > remove circuits </ from > < where > add year between 2009 and 2011 </ where > < where > remove latitude between 2011 and 2009 </ where >"
    },
    {
        "db_id": "formula_1",
        "question": "What are the names of races held after 12:00:00 or before 09:00:00?",
        "gold_parse": "SELECT name FROM races WHERE TIME > \"12:00:00\" OR TIME < \"09:00:00\"",
        "predicted_parse": "SELECT country FROM circuits WHERE lat > value OR lat < value",
        "predicted_parse_explanation": [
            "find the country in circuits table whose latitude greater than 09:00:00 or latitude less than 12:00:00"
        ],
        "feedback": "Substitute altitude with status , circuits with races , both \"lat\" with \"time\".",
        "beam": [
            [
                "SELECT country FROM circuits WHERE lat > value OR lat < value",
                -0.8886308670043945
            ],
            [
                "SELECT country FROM circuits WHERE lat > value OR circuitRef < value",
                -1.0067358016967773
            ],
            [
                "SELECT country FROM circuits WHERE lng > value OR lat < value",
                -2.781802177429199
            ],
            [
                "SELECT country FROM circuits WHERE lng > value OR circuitRef < value",
                -2.832134246826172
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN status AS T2 WHERE T1.lat > value OR T2.number < value",
                -3.4182329177856445
            ],
            [
                "SELECT country FROM circuits WHERE lat > value OR lng < value",
                -3.7286081314086914
            ],
            [
                "SELECT country FROM circuits WHERE circuitRef > value OR lat < value",
                -4.743012428283691
            ],
            [
                "SELECT country FROM circuits GROUP BY country HAVING Count ( * ) > value OR Count ( * ) < value",
                -4.743223190307617
            ],
            [
                "SELECT country FROM circuits WHERE circuitRef > value OR circuitRef < value",
                -4.885398864746094
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN status AS T2 WHERE T1.lng > value OR T2.number < value",
                -5.185941696166992
            ],
            [
                "SELECT country FROM circuits WHERE lng > value OR lng < value",
                -5.664210319519043
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN lapTimes AS T3 ON T2.raceId = T3.raceId WHERE T1.lat > value OR T3.milliseconds < value",
                -6.212527275085449
            ],
            [
                "SELECT country FROM circuits GROUP BY country HAVING Count ( * ) > value OR lat < value",
                -6.938852310180664
            ],
            [
                "SELECT country FROM circuits GROUP BY country HAVING Count ( * ) > value OR Min ( lat ) < value",
                -7.155909538269043
            ],
            [
                "SELECT country FROM circuits GROUP BY country HAVING Count ( * ) > = value",
                -7.181158065795898
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN status AS T2 WHERE T1.circuitRef > value OR T2.number < value",
                -7.189248085021973
            ],
            [
                "SELECT country FROM circuits WHERE lat > = value",
                -7.577215194702148
            ],
            [
                "SELECT country FROM circuits WHERE circuitRef > = value",
                -7.7845659255981445
            ],
            [
                "SELECT country FROM circuits WHERE lng > = value",
                -10.145404815673828
            ],
            [
                "SELECT country FROM circuits",
                -11.011958122253418
            ]
        ],
        "predicted_parse_with_values": "SELECT country FROM circuits WHERE lat > \"09:00:00\" OR lat < \"12:00:00\"",
        "template_feedback": "use races table in place of circuits table . consider the time less than 09:00:00 or time greater than 12:00:00 conditions in place of the latitude less than 12:00:00 or latitude greater than 09:00:00 conditions . find races 's name in place of country .",
        "primary_span": [
            [
                0,
                2
            ],
            [
                9,
                20
            ],
            [
                36,
                39
            ]
        ],
        "secondary_span": [
            [
                3,
                8
            ],
            [
                21,
                35
            ],
            [
                40,
                44
            ]
        ],
        "edits": [
            "name",
            "country",
            "races",
            "circuits",
            "time greater than \"12:00:00\" or time less than \"09:00:00\"",
            "latitude greater than \"09:00:00\" or latitude less than \"12:00:00\""
        ],
        "edits_original": "< select > add name </ select > < select > remove country </ select > < from > add races </ from > < from > remove circuits </ from > < where > add time greater than \" 12:00:00 \" or time less than \" 09:00:00 \" </ where > < where > remove latitude greater than \" 09:00:00 \" or latitude less than \" 12:00:00 \" </ where >"
    },
    {
        "db_id": "formula_1",
        "question": "What are the names of races held after 12:00:00 or before 09:00:00?",
        "gold_parse": "SELECT name FROM races WHERE TIME > \"12:00:00\" OR TIME < \"09:00:00\"",
        "predicted_parse": "SELECT country FROM circuits WHERE lat > value OR lat < value",
        "predicted_parse_explanation": [
            "find the country in circuits table whose latitude greater than 09:00:00 or latitude less than 12:00:00"
        ],
        "feedback": "I want status, races and time.",
        "beam": [
            [
                "SELECT country FROM circuits WHERE lat > value OR lat < value",
                -0.8886308670043945
            ],
            [
                "SELECT country FROM circuits WHERE lat > value OR circuitRef < value",
                -1.0067358016967773
            ],
            [
                "SELECT country FROM circuits WHERE lng > value OR lat < value",
                -2.781802177429199
            ],
            [
                "SELECT country FROM circuits WHERE lng > value OR circuitRef < value",
                -2.832134246826172
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN status AS T2 WHERE T1.lat > value OR T2.number < value",
                -3.4182329177856445
            ],
            [
                "SELECT country FROM circuits WHERE lat > value OR lng < value",
                -3.7286081314086914
            ],
            [
                "SELECT country FROM circuits WHERE circuitRef > value OR lat < value",
                -4.743012428283691
            ],
            [
                "SELECT country FROM circuits GROUP BY country HAVING Count ( * ) > value OR Count ( * ) < value",
                -4.743223190307617
            ],
            [
                "SELECT country FROM circuits WHERE circuitRef > value OR circuitRef < value",
                -4.885398864746094
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN status AS T2 WHERE T1.lng > value OR T2.number < value",
                -5.185941696166992
            ],
            [
                "SELECT country FROM circuits WHERE lng > value OR lng < value",
                -5.664210319519043
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN lapTimes AS T3 ON T2.raceId = T3.raceId WHERE T1.lat > value OR T3.milliseconds < value",
                -6.212527275085449
            ],
            [
                "SELECT country FROM circuits GROUP BY country HAVING Count ( * ) > value OR lat < value",
                -6.938852310180664
            ],
            [
                "SELECT country FROM circuits GROUP BY country HAVING Count ( * ) > value OR Min ( lat ) < value",
                -7.155909538269043
            ],
            [
                "SELECT country FROM circuits GROUP BY country HAVING Count ( * ) > = value",
                -7.181158065795898
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN status AS T2 WHERE T1.circuitRef > value OR T2.number < value",
                -7.189248085021973
            ],
            [
                "SELECT country FROM circuits WHERE lat > = value",
                -7.577215194702148
            ],
            [
                "SELECT country FROM circuits WHERE circuitRef > = value",
                -7.7845659255981445
            ],
            [
                "SELECT country FROM circuits WHERE lng > = value",
                -10.145404815673828
            ],
            [
                "SELECT country FROM circuits",
                -11.011958122253418
            ]
        ],
        "predicted_parse_with_values": "SELECT country FROM circuits WHERE lat > \"09:00:00\" OR lat < \"12:00:00\"",
        "template_feedback": "use races table in place of circuits table . consider the time less than 09:00:00 or time greater than 12:00:00 conditions in place of the latitude less than 12:00:00 or latitude greater than 09:00:00 conditions . find races 's name in place of country .",
        "primary_span": [
            [
                0,
                2
            ],
            [
                9,
                20
            ],
            [
                36,
                39
            ]
        ],
        "secondary_span": [
            [
                3,
                8
            ],
            [
                21,
                35
            ],
            [
                40,
                44
            ]
        ],
        "edits": [
            "name",
            "country",
            "races",
            "circuits",
            "time greater than \"12:00:00\" or time less than \"09:00:00\"",
            "latitude greater than \"09:00:00\" or latitude less than \"12:00:00\""
        ],
        "edits_original": "< select > add name </ select > < select > remove country </ select > < from > add races </ from > < from > remove circuits </ from > < where > add time greater than \" 12:00:00 \" or time less than \" 09:00:00 \" </ where > < where > remove latitude greater than \" 09:00:00 \" or latitude less than \" 12:00:00 \" </ where >"
    },
    {
        "db_id": "flight_1",
        "question": "How many employees have certificate.",
        "gold_parse": "SELECT count(DISTINCT eid) FROM Certificate",
        "predicted_parse": "SELECT Count ( * ) FROM flight",
        "predicted_parse_explanation": [
            "find the number of rows in flight table"
        ],
        "feedback": "Find number of rows of distinct price in certificate table .",
        "beam": [
            [
                "SELECT Count ( * ) FROM flight",
                -8.58306884765625e-06
            ],
            [
                "SELECT Sum ( * ) FROM flight",
                -14.133795261383057
            ],
            [
                "SELECT Count ( * ) FROM flight WHERE origin = value",
                -14.241616249084473
            ],
            [
                "SELECT Count ( DISTINCT * ) FROM flight",
                -14.3698091506958
            ],
            [
                "SELECT Count ( * ) FROM employee WHERE name = value",
                -14.415841579437256
            ],
            [
                "SELECT DISTINCT Count ( * ) FROM flight",
                -14.667848587036133
            ],
            [
                "SELECT Count ( * ) FROM certificate WHERE aid = value",
                -14.981145858764648
            ],
            [
                "SELECT Count ( DISTINCT eid ) FROM certificate",
                -15.031638622283936
            ],
            [
                "SELECT Count ( * ) , name FROM employee",
                -15.088809221982956
            ],
            [
                "SELECT Count ( * ) FROM flight LIMIT value",
                -15.206656455993652
            ],
            [
                "SELECT Count ( Count ( * ) ) FROM flight",
                -15.29341983795166
            ],
            [
                "SELECT Count ( * ) FROM employee WHERE salary = value",
                -15.4252769947052
            ],
            [
                "SELECT * FROM flight",
                -16.04217219352722
            ],
            [
                "SELECT Sum ( salary ) FROM employee",
                -16.463313341140747
            ],
            [
                "SELECT Count ( eid ) FROM certificate",
                -16.76671266555786
            ],
            [
                "SELECT Count ( DISTINCT name ) FROM employee",
                -16.7816743850708
            ],
            [
                "SELECT Count ( * ) , T1.name FROM employee AS T1 JOIN certificate AS T2 ON T1.eid = T2.eid GROUP BY T2.eid",
                -16.82226723432541
            ],
            [
                "SELECT Sum ( name ) FROM employee",
                -16.86614227294922
            ],
            [
                "SELECT Count ( salary ) FROM employee",
                -17.258623600006104
            ],
            [
                "SELECT Count ( eid ) FROM employee",
                -17.487355709075928
            ]
        ],
        "predicted_parse_with_values": "SELECT Count ( * ) FROM flight",
        "template_feedback": "use certificate table in place of flight table . find number of different employee id in place of number of rows .",
        "primary_span": [
            [
                0,
                2
            ],
            [
                9,
                14
            ]
        ],
        "secondary_span": [
            [
                3,
                8
            ],
            [
                15,
                21
            ]
        ],
        "edits": [
            "number of distinct employee id",
            "number of rows",
            "certificate",
            "flight"
        ],
        "edits_original": "< select > add number of distinct employee id </ select > < select > remove number of rows </ select > < from > add certificate </ from > < from > remove flight </ from >"
    },
    {
        "db_id": "flight_1",
        "question": "How many employees have certificate.",
        "gold_parse": "SELECT count(DISTINCT eid) FROM Certificate",
        "predicted_parse": "SELECT Count ( * ) FROM flight",
        "predicted_parse_explanation": [
            "find the number of rows in flight table"
        ],
        "feedback": "In certificate table ,calculate the value of rows of different employee ids.",
        "beam": [
            [
                "SELECT Count ( * ) FROM flight",
                -8.58306884765625e-06
            ],
            [
                "SELECT Sum ( * ) FROM flight",
                -14.133795261383057
            ],
            [
                "SELECT Count ( * ) FROM flight WHERE origin = value",
                -14.241616249084473
            ],
            [
                "SELECT Count ( DISTINCT * ) FROM flight",
                -14.3698091506958
            ],
            [
                "SELECT Count ( * ) FROM employee WHERE name = value",
                -14.415841579437256
            ],
            [
                "SELECT DISTINCT Count ( * ) FROM flight",
                -14.667848587036133
            ],
            [
                "SELECT Count ( * ) FROM certificate WHERE aid = value",
                -14.981145858764648
            ],
            [
                "SELECT Count ( DISTINCT eid ) FROM certificate",
                -15.031638622283936
            ],
            [
                "SELECT Count ( * ) , name FROM employee",
                -15.088809221982956
            ],
            [
                "SELECT Count ( * ) FROM flight LIMIT value",
                -15.206656455993652
            ],
            [
                "SELECT Count ( Count ( * ) ) FROM flight",
                -15.29341983795166
            ],
            [
                "SELECT Count ( * ) FROM employee WHERE salary = value",
                -15.4252769947052
            ],
            [
                "SELECT * FROM flight",
                -16.04217219352722
            ],
            [
                "SELECT Sum ( salary ) FROM employee",
                -16.463313341140747
            ],
            [
                "SELECT Count ( eid ) FROM certificate",
                -16.76671266555786
            ],
            [
                "SELECT Count ( DISTINCT name ) FROM employee",
                -16.7816743850708
            ],
            [
                "SELECT Count ( * ) , T1.name FROM employee AS T1 JOIN certificate AS T2 ON T1.eid = T2.eid GROUP BY T2.eid",
                -16.82226723432541
            ],
            [
                "SELECT Sum ( name ) FROM employee",
                -16.86614227294922
            ],
            [
                "SELECT Count ( salary ) FROM employee",
                -17.258623600006104
            ],
            [
                "SELECT Count ( eid ) FROM employee",
                -17.487355709075928
            ]
        ],
        "predicted_parse_with_values": "SELECT Count ( * ) FROM flight",
        "template_feedback": "use certificate table in place of flight table . find number of different employee id in place of number of rows .",
        "primary_span": [
            [
                0,
                2
            ],
            [
                9,
                14
            ]
        ],
        "secondary_span": [
            [
                3,
                8
            ],
            [
                15,
                21
            ]
        ],
        "edits": [
            "number of distinct employee id",
            "number of rows",
            "certificate",
            "flight"
        ],
        "edits_original": "< select > add number of distinct employee id </ select > < select > remove number of rows </ select > < from > add certificate </ from > < from > remove flight </ from >"
    },
    {
        "db_id": "flight_1",
        "question": "What is the average distance and average price for flights from Los Angeles.",
        "gold_parse": "SELECT avg(distance) ,  avg(price) FROM Flight WHERE origin  =  \"Los Angeles\"",
        "predicted_parse": "SELECT Avg ( distance ) , Avg ( price ) FROM flight",
        "predicted_parse_explanation": [
            "find the average distance and average price in flight table"
        ],
        "feedback": "Confirming that origin equals Los Angeles .",
        "beam": [
            [
                "SELECT Avg ( distance ) , Avg ( price ) FROM flight",
                -0.9190549850463867
            ],
            [
                "SELECT Avg ( distance ) , Avg ( price ) FROM flight WHERE destination = value",
                -1.4374210834503174
            ],
            [
                "SELECT Avg ( T1.distance ) , Avg ( T1.price ) FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T2.name = value",
                -2.296171188354492
            ],
            [
                "SELECT Avg ( distance ) , Avg ( price ) FROM flight WHERE * = value",
                -2.7541615962982178
            ],
            [
                "SELECT Avg ( distance ) , Avg ( price ) FROM flight WHERE price = ( SELECT Avg ( price ) FROM flight )",
                -3.076481819152832
            ],
            [
                "SELECT Avg ( price ) , Avg ( price ) FROM flight",
                -3.2814884185791016
            ],
            [
                "SELECT Avg ( price ) , Avg ( price ) FROM flight WHERE destination = value",
                -3.977630376815796
            ],
            [
                "SELECT Avg ( price ) , Max ( price ) FROM flight",
                -4.079071998596191
            ],
            [
                "SELECT Avg ( distance ) , Avg ( price ) FROM flight WHERE flno = value",
                -4.122147083282471
            ],
            [
                "SELECT Avg ( price ) , Sum ( price ) FROM flight",
                -4.387560844421387
            ],
            [
                "SELECT Avg ( T1.price ) , Avg ( T1.price ) FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T2.name = value",
                -4.825418829917908
            ],
            [
                "SELECT Avg ( price ) , Sum ( price ) FROM flight WHERE destination = value",
                -5.076610445976257
            ],
            [
                "SELECT Avg ( distance ) , Avg ( price ) FROM flight WHERE origin = value",
                -5.293862342834473
            ],
            [
                "SELECT Avg ( price ) , Avg ( price ) FROM flight WHERE * = value",
                -5.505126476287842
            ],
            [
                "SELECT Avg ( price ) , Max ( price ) FROM flight WHERE destination = value",
                -5.6866819858551025
            ],
            [
                "SELECT Avg ( distance ) , Sum ( price ) FROM flight",
                -6.656745910644531
            ],
            [
                "SELECT Avg ( T2.distance ) , Avg ( T1.price ) FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid",
                -7.006929397583008
            ],
            [
                "SELECT Avg ( T3.salary ) , Avg ( T1.price ) FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid JOIN employee AS T3 JOIN certificate AS T4 ON T2.aid = T4.aid AND T4.eid = T3.eid",
                -8.95326566696167
            ],
            [
                "SELECT Avg ( price ) , Min ( price ) FROM flight",
                -9.592724800109863
            ],
            [
                "SELECT Avg ( T3.salary ) , Sum ( T1.price ) FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid JOIN employee AS T3 JOIN certificate AS T4 ON T2.aid = T4.aid AND T4.eid = T3.eid",
                -10.105522632598877
            ]
        ],
        "predicted_parse_with_values": "SELECT Avg ( distance ) , Avg ( price ) FROM flight",
        "template_feedback": "additionally make sure that origin equals Los Angeles .",
        "primary_span": [
            [
                0,
                8
            ]
        ],
        "secondary_span": [],
        "edits": [
            "origin equals \"Los Angeles\""
        ],
        "edits_original": "< where > add origin equals \" Los Angeles \" </ where >"
    },
    {
        "db_id": "flight_1",
        "question": "What is the average distance and average price for flights from Los Angeles.",
        "gold_parse": "SELECT avg(distance) ,  avg(price) FROM Flight WHERE origin  =  \"Los Angeles\"",
        "predicted_parse": "SELECT Avg ( distance ) , Avg ( price ) FROM flight",
        "predicted_parse_explanation": [
            "find the average distance and average price in flight table"
        ],
        "feedback": "Ascertain that origin is Los Angeles.",
        "beam": [
            [
                "SELECT Avg ( distance ) , Avg ( price ) FROM flight",
                -0.9190549850463867
            ],
            [
                "SELECT Avg ( distance ) , Avg ( price ) FROM flight WHERE destination = value",
                -1.4374210834503174
            ],
            [
                "SELECT Avg ( T1.distance ) , Avg ( T1.price ) FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T2.name = value",
                -2.296171188354492
            ],
            [
                "SELECT Avg ( distance ) , Avg ( price ) FROM flight WHERE * = value",
                -2.7541615962982178
            ],
            [
                "SELECT Avg ( distance ) , Avg ( price ) FROM flight WHERE price = ( SELECT Avg ( price ) FROM flight )",
                -3.076481819152832
            ],
            [
                "SELECT Avg ( price ) , Avg ( price ) FROM flight",
                -3.2814884185791016
            ],
            [
                "SELECT Avg ( price ) , Avg ( price ) FROM flight WHERE destination = value",
                -3.977630376815796
            ],
            [
                "SELECT Avg ( price ) , Max ( price ) FROM flight",
                -4.079071998596191
            ],
            [
                "SELECT Avg ( distance ) , Avg ( price ) FROM flight WHERE flno = value",
                -4.122147083282471
            ],
            [
                "SELECT Avg ( price ) , Sum ( price ) FROM flight",
                -4.387560844421387
            ],
            [
                "SELECT Avg ( T1.price ) , Avg ( T1.price ) FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T2.name = value",
                -4.825418829917908
            ],
            [
                "SELECT Avg ( price ) , Sum ( price ) FROM flight WHERE destination = value",
                -5.076610445976257
            ],
            [
                "SELECT Avg ( distance ) , Avg ( price ) FROM flight WHERE origin = value",
                -5.293862342834473
            ],
            [
                "SELECT Avg ( price ) , Avg ( price ) FROM flight WHERE * = value",
                -5.505126476287842
            ],
            [
                "SELECT Avg ( price ) , Max ( price ) FROM flight WHERE destination = value",
                -5.6866819858551025
            ],
            [
                "SELECT Avg ( distance ) , Sum ( price ) FROM flight",
                -6.656745910644531
            ],
            [
                "SELECT Avg ( T2.distance ) , Avg ( T1.price ) FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid",
                -7.006929397583008
            ],
            [
                "SELECT Avg ( T3.salary ) , Avg ( T1.price ) FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid JOIN employee AS T3 JOIN certificate AS T4 ON T2.aid = T4.aid AND T4.eid = T3.eid",
                -8.95326566696167
            ],
            [
                "SELECT Avg ( price ) , Min ( price ) FROM flight",
                -9.592724800109863
            ],
            [
                "SELECT Avg ( T3.salary ) , Sum ( T1.price ) FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid JOIN employee AS T3 JOIN certificate AS T4 ON T2.aid = T4.aid AND T4.eid = T3.eid",
                -10.105522632598877
            ]
        ],
        "predicted_parse_with_values": "SELECT Avg ( distance ) , Avg ( price ) FROM flight",
        "template_feedback": "additionally make sure that origin equals Los Angeles .",
        "primary_span": [
            [
                0,
                8
            ]
        ],
        "secondary_span": [],
        "edits": [
            "origin equals \"Los Angeles\""
        ],
        "edits_original": "< where > add origin equals \" Los Angeles \" </ where >"
    },
    {
        "db_id": "flight_1",
        "question": "Show aircraft names and number of flights for each aircraft.",
        "gold_parse": "SELECT T2.name ,  count(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid",
        "predicted_parse": "SELECT name , Count ( * ) FROM aircraft GROUP BY name",
        "predicted_parse_explanation": [
            "find each value of name in aircraft table along with the number of the corresponding rows to each value"
        ],
        "feedback": "It should display number of corresponding rows for each airline id in flight table .",
        "beam": [
            [
                "SELECT name , Count ( * ) FROM aircraft GROUP BY name",
                -0.0003108978271484375
            ],
            [
                "SELECT T2.name , Count ( * ) FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.destination",
                -8.413261413574219
            ],
            [
                "SELECT name , Sum ( * ) FROM aircraft GROUP BY name",
                -9.8419508934021
            ],
            [
                "SELECT T2.name , Count ( * ) FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.aid",
                -11.98897933959961
            ],
            [
                "SELECT name , Count ( * ) FROM aircraft",
                -12.569435119628906
            ],
            [
                "SELECT T2.name , Count ( * ) FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.origin",
                -12.628076553344727
            ],
            [
                "SELECT name , Count ( * ) FROM aircraft GROUP BY name ORDER BY Count ( * ) Desc",
                -13.144928932189941
            ],
            [
                "SELECT name , Count ( * ) FROM aircraft GROUP BY name HAVING Count ( * ) < value",
                -13.232757568359375
            ],
            [
                "SELECT name , Count ( * ) FROM aircraft GROUP BY aid",
                -13.334695816040039
            ],
            [
                "SELECT T2.name , Count ( * ) FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.origin = value GROUP BY T2.name",
                -13.347492456436157
            ],
            [
                "SELECT name , Count ( * ) FROM aircraft WHERE name = value GROUP BY name",
                -13.428789377212524
            ],
            [
                "SELECT name , Count ( * ) FROM aircraft GROUP BY *",
                -13.694746017456055
            ],
            [
                "SELECT T1.name , Count ( * ) FROM aircraft AS T1 JOIN employee AS T2 JOIN certificate AS T3 ON T1.aid = T3.aid AND T3.eid = T2.eid GROUP BY T2.name",
                -13.81022834777832
            ],
            [
                "SELECT T2.name , Count ( * ) FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.flno",
                -13.995434761047363
            ],
            [
                "SELECT name , name FROM aircraft GROUP BY name",
                -14.057671546936035
            ],
            [
                "SELECT T2.name , Count ( * ) FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.departure_date",
                -14.124885559082031
            ],
            [
                "SELECT name , Count ( * ) , name FROM aircraft GROUP BY name",
                -14.13214123249054
            ],
            [
                "SELECT T2.name , Count ( * ) FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.price",
                -14.344009399414062
            ],
            [
                "SELECT name , Count ( * ) FROM aircraft GROUP BY name , name",
                -14.67972457408905
            ],
            [
                "SELECT name FROM aircraft GROUP BY name",
                -15.214237213134766
            ]
        ],
        "predicted_parse_with_values": "SELECT name , Count ( * ) FROM aircraft GROUP BY name",
        "template_feedback": "additionally use the information from the flight table besides the aircraft table . find for each value of flight 's airline id in place of name .",
        "primary_span": [
            [
                0,
                7
            ],
            [
                13,
                21
            ]
        ],
        "secondary_span": [
            [
                8,
                12
            ],
            [
                22,
                26
            ]
        ],
        "edits": [
            "flight",
            "airline id",
            "name"
        ],
        "edits_original": "< from > add flight </ from > < groupBy > add airline id </ groupBy > < groupBy > remove name </ groupBy >"
    },
    {
        "db_id": "flight_1",
        "question": "Show aircraft names and number of flights for each aircraft.",
        "gold_parse": "SELECT T2.name ,  count(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid",
        "predicted_parse": "SELECT name , Count ( * ) FROM aircraft GROUP BY name",
        "predicted_parse_explanation": [
            "find each value of name in aircraft table along with the number of the corresponding rows to each value"
        ],
        "feedback": "make sure to show the value of similar rows for all airline id from flight table.",
        "beam": [
            [
                "SELECT name , Count ( * ) FROM aircraft GROUP BY name",
                -0.0003108978271484375
            ],
            [
                "SELECT T2.name , Count ( * ) FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.destination",
                -8.413261413574219
            ],
            [
                "SELECT name , Sum ( * ) FROM aircraft GROUP BY name",
                -9.8419508934021
            ],
            [
                "SELECT T2.name , Count ( * ) FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.aid",
                -11.98897933959961
            ],
            [
                "SELECT name , Count ( * ) FROM aircraft",
                -12.569435119628906
            ],
            [
                "SELECT T2.name , Count ( * ) FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.origin",
                -12.628076553344727
            ],
            [
                "SELECT name , Count ( * ) FROM aircraft GROUP BY name ORDER BY Count ( * ) Desc",
                -13.144928932189941
            ],
            [
                "SELECT name , Count ( * ) FROM aircraft GROUP BY name HAVING Count ( * ) < value",
                -13.232757568359375
            ],
            [
                "SELECT name , Count ( * ) FROM aircraft GROUP BY aid",
                -13.334695816040039
            ],
            [
                "SELECT T2.name , Count ( * ) FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.origin = value GROUP BY T2.name",
                -13.347492456436157
            ],
            [
                "SELECT name , Count ( * ) FROM aircraft WHERE name = value GROUP BY name",
                -13.428789377212524
            ],
            [
                "SELECT name , Count ( * ) FROM aircraft GROUP BY *",
                -13.694746017456055
            ],
            [
                "SELECT T1.name , Count ( * ) FROM aircraft AS T1 JOIN employee AS T2 JOIN certificate AS T3 ON T1.aid = T3.aid AND T3.eid = T2.eid GROUP BY T2.name",
                -13.81022834777832
            ],
            [
                "SELECT T2.name , Count ( * ) FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.flno",
                -13.995434761047363
            ],
            [
                "SELECT name , name FROM aircraft GROUP BY name",
                -14.057671546936035
            ],
            [
                "SELECT T2.name , Count ( * ) FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.departure_date",
                -14.124885559082031
            ],
            [
                "SELECT name , Count ( * ) , name FROM aircraft GROUP BY name",
                -14.13214123249054
            ],
            [
                "SELECT T2.name , Count ( * ) FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.price",
                -14.344009399414062
            ],
            [
                "SELECT name , Count ( * ) FROM aircraft GROUP BY name , name",
                -14.67972457408905
            ],
            [
                "SELECT name FROM aircraft GROUP BY name",
                -15.214237213134766
            ]
        ],
        "predicted_parse_with_values": "SELECT name , Count ( * ) FROM aircraft GROUP BY name",
        "template_feedback": "additionally use the information from the flight table besides the aircraft table . find for each value of flight 's airline id in place of name .",
        "primary_span": [
            [
                0,
                7
            ],
            [
                13,
                21
            ]
        ],
        "secondary_span": [
            [
                8,
                12
            ],
            [
                22,
                26
            ]
        ],
        "edits": [
            "flight",
            "airline id",
            "name"
        ],
        "edits_original": "< from > add flight </ from > < groupBy > add airline id </ groupBy > < groupBy > remove name </ groupBy >"
    },
    {
        "db_id": "flight_1",
        "question": "Show the id and salary of Mark Young.",
        "gold_parse": "SELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'",
        "predicted_parse": "SELECT eid , salary FROM employee",
        "predicted_parse_explanation": [
            "find the employee id and salary in employee table"
        ],
        "feedback": "Be certain name equals Mark Young .",
        "beam": [
            [
                "SELECT eid , salary FROM employee",
                -0.014224052429199219
            ],
            [
                "SELECT eid , name FROM employee",
                -4.639618873596191
            ],
            [
                "SELECT eid , salary FROM employee WHERE name = value",
                -5.436184883117676
            ],
            [
                "SELECT T3.eid , T1.price FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid JOIN employee AS T3 JOIN certificate AS T4 ON T2.aid = T4.aid AND T4.eid = T3.eid",
                -9.925983428955078
            ],
            [
                "SELECT eid , salary FROM employee GROUP BY eid",
                -10.362671852111816
            ],
            [
                "SELECT eid , name FROM employee WHERE name = value",
                -11.473344802856445
            ],
            [
                "SELECT eid , salary , name FROM employee",
                -12.747518539428711
            ],
            [
                "SELECT eid , name , salary FROM employee",
                -12.749862670898438
            ],
            [
                "SELECT eid , salary FROM employee ORDER BY salary Asc LIMIT value",
                -12.760298728942871
            ],
            [
                "SELECT DISTINCT eid , salary FROM employee",
                -13.48023796081543
            ],
            [
                "SELECT eid , salary FROM employee WHERE salary < ( SELECT Min ( salary ) FROM employee )",
                -14.003799438476562
            ],
            [
                "SELECT eid , salary FROM employee WHERE name < value",
                -14.051480293273926
            ],
            [
                "SELECT eid FROM employee",
                -14.402678489685059
            ],
            [
                "SELECT eid , salary FROM employee GROUP BY eid HAVING Count ( * ) = value",
                -14.669298648834229
            ],
            [
                "SELECT eid , salary FROM employee GROUP BY eid HAVING name = value",
                -14.733292579650879
            ],
            [
                "SELECT T3.eid , T1.departure_date FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid JOIN employee AS T3 JOIN certificate AS T4 ON T2.aid = T4.aid AND T4.eid = T3.eid",
                -15.125484466552734
            ],
            [
                "SELECT eid , salary FROM employee LIMIT value",
                -15.16726016998291
            ],
            [
                "SELECT DISTINCT eid , salary FROM employee",
                -15.222259521484375
            ],
            [
                "SELECT T2.eid , T1.name FROM aircraft AS T1 JOIN employee AS T2 JOIN certificate AS T3 ON T1.aid = T3.aid AND T3.eid = T2.eid",
                -15.332335472106934
            ],
            [
                "SELECT eid , DISTINCT salary FROM employee",
                -15.382568359375
            ]
        ],
        "predicted_parse_with_values": "SELECT eid , salary FROM employee",
        "template_feedback": "additionally make sure that name equals Mark Young .",
        "primary_span": [
            [
                0,
                8
            ]
        ],
        "secondary_span": [],
        "edits": [
            "name equals \"Mark Young\""
        ],
        "edits_original": "< where > add name equals \" Mark Young \" </ where >"
    },
    {
        "db_id": "flight_1",
        "question": "Show the id and salary of Mark Young.",
        "gold_parse": "SELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'",
        "predicted_parse": "SELECT eid , salary FROM employee",
        "predicted_parse_explanation": [
            "find the employee id and salary in employee table"
        ],
        "feedback": "certain name must be equivalent to mark young.",
        "beam": [
            [
                "SELECT eid , salary FROM employee",
                -0.014224052429199219
            ],
            [
                "SELECT eid , name FROM employee",
                -4.639618873596191
            ],
            [
                "SELECT eid , salary FROM employee WHERE name = value",
                -5.436184883117676
            ],
            [
                "SELECT T3.eid , T1.price FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid JOIN employee AS T3 JOIN certificate AS T4 ON T2.aid = T4.aid AND T4.eid = T3.eid",
                -9.925983428955078
            ],
            [
                "SELECT eid , salary FROM employee GROUP BY eid",
                -10.362671852111816
            ],
            [
                "SELECT eid , name FROM employee WHERE name = value",
                -11.473344802856445
            ],
            [
                "SELECT eid , salary , name FROM employee",
                -12.747518539428711
            ],
            [
                "SELECT eid , name , salary FROM employee",
                -12.749862670898438
            ],
            [
                "SELECT eid , salary FROM employee ORDER BY salary Asc LIMIT value",
                -12.760298728942871
            ],
            [
                "SELECT DISTINCT eid , salary FROM employee",
                -13.48023796081543
            ],
            [
                "SELECT eid , salary FROM employee WHERE salary < ( SELECT Min ( salary ) FROM employee )",
                -14.003799438476562
            ],
            [
                "SELECT eid , salary FROM employee WHERE name < value",
                -14.051480293273926
            ],
            [
                "SELECT eid FROM employee",
                -14.402678489685059
            ],
            [
                "SELECT eid , salary FROM employee GROUP BY eid HAVING Count ( * ) = value",
                -14.669298648834229
            ],
            [
                "SELECT eid , salary FROM employee GROUP BY eid HAVING name = value",
                -14.733292579650879
            ],
            [
                "SELECT T3.eid , T1.departure_date FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid JOIN employee AS T3 JOIN certificate AS T4 ON T2.aid = T4.aid AND T4.eid = T3.eid",
                -15.125484466552734
            ],
            [
                "SELECT eid , salary FROM employee LIMIT value",
                -15.16726016998291
            ],
            [
                "SELECT DISTINCT eid , salary FROM employee",
                -15.222259521484375
            ],
            [
                "SELECT T2.eid , T1.name FROM aircraft AS T1 JOIN employee AS T2 JOIN certificate AS T3 ON T1.aid = T3.aid AND T3.eid = T2.eid",
                -15.332335472106934
            ],
            [
                "SELECT eid , DISTINCT salary FROM employee",
                -15.382568359375
            ]
        ],
        "predicted_parse_with_values": "SELECT eid , salary FROM employee",
        "template_feedback": "additionally make sure that name equals Mark Young .",
        "primary_span": [
            [
                0,
                8
            ]
        ],
        "secondary_span": [],
        "edits": [
            "name equals \"Mark Young\""
        ],
        "edits_original": "< where > add name equals \" Mark Young \" </ where >"
    },
    {
        "db_id": "flight_1",
        "question": "Show the name and distance of the aircrafts with more than 5000 distance and which at least 5 people have its certificate.",
        "gold_parse": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid WHERE T2.distance  >  5000 GROUP BY T1.aid ORDER BY count(*)  >=  5",
        "predicted_parse": "SELECT name , distance FROM aircraft WHERE distance BETWEEN value AND value",
        "predicted_parse_explanation": [
            "find the name and distance in aircraft table whose distance between 8430 and 5000"
        ],
        "feedback": "Ensure count of airline id in certificate table is minimum 5 , find all whose distance above 5000.",
        "beam": [
            [
                "SELECT name , distance FROM aircraft WHERE distance BETWEEN value AND value",
                -0.6618881225585938
            ],
            [
                "SELECT name , distance FROM aircraft WHERE distance < value",
                -1.147608757019043
            ],
            [
                "SELECT name , distance FROM aircraft WHERE distance > value OR distance < value",
                -2.3574953079223633
            ],
            [
                "SELECT name , distance FROM aircraft WHERE distance > = value",
                -3.4613542556762695
            ],
            [
                "SELECT name , distance FROM aircraft WHERE distance > value AND distance < value",
                -3.982004165649414
            ],
            [
                "SELECT name , distance FROM aircraft WHERE distance > value AND distance = value",
                -5.145231246948242
            ],
            [
                "SELECT T2.name , T2.distance FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T2.distance > value AND T1.origin = value",
                -5.40552830696106
            ],
            [
                "SELECT name , distance FROM aircraft WHERE distance > value",
                -6.1402363777160645
            ],
            [
                "SELECT name , distance FROM aircraft WHERE * IN ( SELECT name FROM aircraft WHERE distance < value )",
                -6.831906318664551
            ],
            [
                "SELECT T2.name , T2.distance FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T2.distance > value AND T1.destination = value",
                -7.321591854095459
            ],
            [
                "SELECT name , distance - distance FROM aircraft WHERE distance < value",
                -7.819393157958984
            ],
            [
                "SELECT name , distance - distance FROM aircraft WHERE distance > = value",
                -8.229434967041016
            ],
            [
                "SELECT name , distance FROM aircraft WHERE distance LIKE value",
                -8.239006042480469
            ],
            [
                "SELECT name , distance / distance FROM aircraft WHERE distance > = value",
                -8.468875408172607
            ],
            [
                "SELECT T2.name , T2.distance FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T2.distance > value AND T1.price = value",
                -8.514975547790527
            ],
            [
                "SELECT name , distance FROM aircraft WHERE distance > value AND * = value",
                -8.518856048583984
            ],
            [
                "SELECT name , distance / distance FROM aircraft WHERE distance < value",
                -8.53766393661499
            ],
            [
                "SELECT name , distance + distance FROM aircraft WHERE distance > = value",
                -8.68332576751709
            ],
            [
                "SELECT T2.name , T2.distance FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T2.distance > value AND T2.distance > value AND T1.origin = value",
                -8.904156267642975
            ],
            [
                "SELECT name , distance FROM aircraft WHERE distance - distance > value",
                -9.100916385650635
            ]
        ],
        "predicted_parse_with_values": "SELECT name , distance FROM aircraft WHERE distance BETWEEN 8430 AND 5000",
        "template_feedback": "additionally use the information from the certificate table besides the aircraft table . consider the distance greater than 5000 conditions in place of the distance between 8430 and 5000 conditions . find for each value of certificate 's airline id . do not return distance . order the results ascending by number of rows .",
        "primary_span": [
            [
                0,
                7
            ],
            [
                13,
                19
            ],
            [
                31,
                40
            ],
            [
                41,
                45
            ],
            [
                46,
                54
            ]
        ],
        "secondary_span": [
            [
                8,
                12
            ],
            [
                20,
                30
            ]
        ],
        "edits": [
            "distance",
            "certificate",
            "distance greater than 5000",
            "distance between 8430 and 5000",
            "airline id",
            "number of rows"
        ],
        "edits_original": "< select > remove distance </ select > < from > add certificate </ from > < where > add distance greater than 5000 </ where > < where > remove distance between 8430 and 5000 </ where > < groupBy > add airline id </ groupBy > < orderBy > add number of rows </ orderBy >"
    },
    {
        "db_id": "flight_1",
        "question": "Show the name and distance of the aircrafts with more than 5000 distance and which at least 5 people have its certificate.",
        "gold_parse": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid WHERE T2.distance  >  5000 GROUP BY T1.aid ORDER BY count(*)  >=  5",
        "predicted_parse": "SELECT name , distance FROM aircraft WHERE distance BETWEEN value AND value",
        "predicted_parse_explanation": [
            "find the name and distance in aircraft table whose distance between 8430 and 5000"
        ],
        "feedback": "you need to verify that the count of airline id should be minimum 5 in the certificate's table and also find the distances that are above 5,000.",
        "beam": [
            [
                "SELECT name , distance FROM aircraft WHERE distance BETWEEN value AND value",
                -0.6618881225585938
            ],
            [
                "SELECT name , distance FROM aircraft WHERE distance < value",
                -1.147608757019043
            ],
            [
                "SELECT name , distance FROM aircraft WHERE distance > value OR distance < value",
                -2.3574953079223633
            ],
            [
                "SELECT name , distance FROM aircraft WHERE distance > = value",
                -3.4613542556762695
            ],
            [
                "SELECT name , distance FROM aircraft WHERE distance > value AND distance < value",
                -3.982004165649414
            ],
            [
                "SELECT name , distance FROM aircraft WHERE distance > value AND distance = value",
                -5.145231246948242
            ],
            [
                "SELECT T2.name , T2.distance FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T2.distance > value AND T1.origin = value",
                -5.40552830696106
            ],
            [
                "SELECT name , distance FROM aircraft WHERE distance > value",
                -6.1402363777160645
            ],
            [
                "SELECT name , distance FROM aircraft WHERE * IN ( SELECT name FROM aircraft WHERE distance < value )",
                -6.831906318664551
            ],
            [
                "SELECT T2.name , T2.distance FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T2.distance > value AND T1.destination = value",
                -7.321591854095459
            ],
            [
                "SELECT name , distance - distance FROM aircraft WHERE distance < value",
                -7.819393157958984
            ],
            [
                "SELECT name , distance - distance FROM aircraft WHERE distance > = value",
                -8.229434967041016
            ],
            [
                "SELECT name , distance FROM aircraft WHERE distance LIKE value",
                -8.239006042480469
            ],
            [
                "SELECT name , distance / distance FROM aircraft WHERE distance > = value",
                -8.468875408172607
            ],
            [
                "SELECT T2.name , T2.distance FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T2.distance > value AND T1.price = value",
                -8.514975547790527
            ],
            [
                "SELECT name , distance FROM aircraft WHERE distance > value AND * = value",
                -8.518856048583984
            ],
            [
                "SELECT name , distance / distance FROM aircraft WHERE distance < value",
                -8.53766393661499
            ],
            [
                "SELECT name , distance + distance FROM aircraft WHERE distance > = value",
                -8.68332576751709
            ],
            [
                "SELECT T2.name , T2.distance FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T2.distance > value AND T2.distance > value AND T1.origin = value",
                -8.904156267642975
            ],
            [
                "SELECT name , distance FROM aircraft WHERE distance - distance > value",
                -9.100916385650635
            ]
        ],
        "predicted_parse_with_values": "SELECT name , distance FROM aircraft WHERE distance BETWEEN 8430 AND 5000",
        "template_feedback": "additionally use the information from the certificate table besides the aircraft table . consider the distance greater than 5000 conditions in place of the distance between 8430 and 5000 conditions . find for each value of certificate 's airline id . do not return distance . order the results ascending by number of rows .",
        "primary_span": [
            [
                0,
                7
            ],
            [
                13,
                19
            ],
            [
                31,
                40
            ],
            [
                41,
                45
            ],
            [
                46,
                54
            ]
        ],
        "secondary_span": [
            [
                8,
                12
            ],
            [
                20,
                30
            ]
        ],
        "edits": [
            "distance",
            "certificate",
            "distance greater than 5000",
            "distance between 8430 and 5000",
            "airline id",
            "number of rows"
        ],
        "edits_original": "< select > remove distance </ select > < from > add certificate </ from > < where > add distance greater than 5000 </ where > < where > remove distance between 8430 and 5000 </ where > < groupBy > add airline id </ groupBy > < orderBy > add number of rows </ orderBy >"
    },
    {
        "db_id": "flight_1",
        "question": "What is the aircraft name for the flight with number 99",
        "gold_parse": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T1.flno  =  99",
        "predicted_parse": "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.flno LIKE value",
        "predicted_parse_explanation": [
            "Step 1: for each row in flight table , find the corresponding rows in aircraft table",
            "Step 2: find the name of the results of step 1 whose flight number like 99"
        ],
        "feedback": "Confirm that flight number equals 99 not flight number contains 99.",
        "beam": [
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.flno LIKE value",
                -0.9508168697357178
            ],
            [
                "SELECT name FROM aircraft WHERE name LIKE value",
                -1.3292386531829834
            ],
            [
                "SELECT name FROM aircraft WHERE distance LIKE value",
                -2.155926465988159
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.distance LIKE value",
                -2.274968147277832
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.price LIKE value",
                -2.355952262878418
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.origin LIKE value",
                -4.444389343261719
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.destination LIKE value",
                -4.685557842254639
            ],
            [
                "SELECT name FROM aircraft WHERE distance < value",
                -5.6893744468688965
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.arrival_date LIKE value",
                -5.833626747131348
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.flno < value",
                -6.162762403488159
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.price < value",
                -6.502349853515625
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.departure_date LIKE value",
                -6.559803009033203
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.distance < value",
                -7.177235841751099
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.flno = value",
                -7.754368305206299
            ],
            [
                "SELECT name FROM aircraft WHERE * LIKE value",
                -7.815722465515137
            ],
            [
                "SELECT name FROM aircraft WHERE distance = value",
                -8.238147735595703
            ],
            [
                "SELECT T1.name FROM aircraft AS T1 JOIN employee AS T2 JOIN certificate AS T3 ON T1.aid = T3.aid AND T3.eid = T2.eid WHERE T2.salary LIKE value",
                -8.374778747558594
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.arrival_date < value",
                -8.87449598312378
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.aid LIKE value",
                -9.048652648925781
            ],
            [
                "SELECT name FROM aircraft",
                -12.28316593170166
            ]
        ],
        "predicted_parse_with_values": "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.flno LIKE 99",
        "template_feedback": "in step 2 , consider the flight number equals 99 conditions in place of the flight number like 99 conditions .",
        "primary_span": [
            [
                4,
                10
            ]
        ],
        "secondary_span": [
            [
                11,
                20
            ]
        ],
        "edits": [
            "flight number equals 99",
            "flight number like 99"
        ],
        "edits_original": "< where > add flight number equals 99 </ where > < where > remove flight number like 99 </ where >"
    },
    {
        "db_id": "flight_1",
        "question": "How many aircrafts exist in the database?",
        "gold_parse": "SELECT count(*) FROM Aircraft",
        "predicted_parse": "SELECT Count ( * ) FROM flight",
        "predicted_parse_explanation": [
            "find the number of rows in flight table"
        ],
        "feedback": "Use aircraft table on behalf of flight table .",
        "beam": [
            [
                "SELECT Count ( * ) FROM flight",
                -1.9073486328125e-05
            ],
            [
                "SELECT Count ( DISTINCT name ) FROM aircraft",
                -12.298081398010254
            ],
            [
                "SELECT Count ( DISTINCT origin ) FROM flight",
                -12.416497230529785
            ],
            [
                "SELECT Count ( * ) FROM aircraft WHERE name = value",
                -12.896190881729126
            ],
            [
                "SELECT Count ( DISTINCT destination ) FROM flight",
                -14.354475975036621
            ],
            [
                "SELECT Sum ( * ) FROM flight",
                -14.449301719665527
            ],
            [
                "SELECT Count ( * ) , Count ( * ) FROM flight",
                -14.725353240966797
            ],
            [
                "SELECT Count ( DISTINCT * ) FROM flight",
                -14.863869667053223
            ],
            [
                "SELECT Count ( * ) FROM flight WHERE destination = value",
                -14.954384326934814
            ],
            [
                "SELECT Count ( * ) FROM flight WHERE origin = value",
                -14.956113338470459
            ],
            [
                "SELECT Count ( * ) FROM flight LIMIT value",
                -15.201837539672852
            ],
            [
                "SELECT DISTINCT Count ( * ) FROM flight",
                -15.375980377197266
            ],
            [
                "SELECT Sum ( name ) FROM aircraft",
                -15.390323758125305
            ],
            [
                "SELECT Count ( Count ( * ) ) FROM flight",
                -15.747532844543457
            ],
            [
                "SELECT Count ( distance ) FROM aircraft",
                -15.866191864013672
            ],
            [
                "SELECT Count ( eid ) FROM certificate",
                -15.952459812164307
            ],
            [
                "SELECT Count ( DISTINCT distance ) FROM aircraft",
                -16.25519037246704
            ],
            [
                "SELECT * FROM flight",
                -16.566707372665405
            ],
            [
                "SELECT Sum ( destination ) FROM flight",
                -16.637593746185303
            ],
            [
                "SELECT Count ( * ) , T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.origin",
                -17.446518540382385
            ]
        ],
        "predicted_parse_with_values": "SELECT Count ( * ) FROM flight",
        "template_feedback": "use aircraft table in place of flight table .",
        "primary_span": [
            [
                0,
                2
            ]
        ],
        "secondary_span": [
            [
                3,
                8
            ]
        ],
        "edits": [
            "aircraft",
            "flight"
        ],
        "edits_original": "< from > add aircraft </ from > < from > remove flight </ from >"
    },
    {
        "db_id": "flight_1",
        "question": "How many aircrafts exist in the database?",
        "gold_parse": "SELECT count(*) FROM Aircraft",
        "predicted_parse": "SELECT Count ( * ) FROM flight",
        "predicted_parse_explanation": [
            "find the number of rows in flight table"
        ],
        "feedback": "Flight table must be used instead the table of aircraft.",
        "beam": [
            [
                "SELECT Count ( * ) FROM flight",
                -1.9073486328125e-05
            ],
            [
                "SELECT Count ( DISTINCT name ) FROM aircraft",
                -12.298081398010254
            ],
            [
                "SELECT Count ( DISTINCT origin ) FROM flight",
                -12.416497230529785
            ],
            [
                "SELECT Count ( * ) FROM aircraft WHERE name = value",
                -12.896190881729126
            ],
            [
                "SELECT Count ( DISTINCT destination ) FROM flight",
                -14.354475975036621
            ],
            [
                "SELECT Sum ( * ) FROM flight",
                -14.449301719665527
            ],
            [
                "SELECT Count ( * ) , Count ( * ) FROM flight",
                -14.725353240966797
            ],
            [
                "SELECT Count ( DISTINCT * ) FROM flight",
                -14.863869667053223
            ],
            [
                "SELECT Count ( * ) FROM flight WHERE destination = value",
                -14.954384326934814
            ],
            [
                "SELECT Count ( * ) FROM flight WHERE origin = value",
                -14.956113338470459
            ],
            [
                "SELECT Count ( * ) FROM flight LIMIT value",
                -15.201837539672852
            ],
            [
                "SELECT DISTINCT Count ( * ) FROM flight",
                -15.375980377197266
            ],
            [
                "SELECT Sum ( name ) FROM aircraft",
                -15.390323758125305
            ],
            [
                "SELECT Count ( Count ( * ) ) FROM flight",
                -15.747532844543457
            ],
            [
                "SELECT Count ( distance ) FROM aircraft",
                -15.866191864013672
            ],
            [
                "SELECT Count ( eid ) FROM certificate",
                -15.952459812164307
            ],
            [
                "SELECT Count ( DISTINCT distance ) FROM aircraft",
                -16.25519037246704
            ],
            [
                "SELECT * FROM flight",
                -16.566707372665405
            ],
            [
                "SELECT Sum ( destination ) FROM flight",
                -16.637593746185303
            ],
            [
                "SELECT Count ( * ) , T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.origin",
                -17.446518540382385
            ]
        ],
        "predicted_parse_with_values": "SELECT Count ( * ) FROM flight",
        "template_feedback": "use aircraft table in place of flight table .",
        "primary_span": [
            [
                0,
                2
            ]
        ],
        "secondary_span": [
            [
                3,
                8
            ]
        ],
        "edits": [
            "aircraft",
            "flight"
        ],
        "edits_original": "< from > add aircraft </ from > < from > remove flight </ from >"
    },
    {
        "db_id": "flight_1",
        "question": "What are the names of all aircrafts that John Williams have certificates to be able to fly?",
        "gold_parse": "SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T1.name  =  \"John Williams\"",
        "predicted_parse": "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.origin = value",
        "predicted_parse_explanation": [
            "Step 1: for each row in flight table , find the corresponding rows in aircraft table",
            "Step 2: find the name of the results of step 1 whose origin equals John Williams"
        ],
        "feedback": "Add employee table in step 1 , interchange origin with employee's name , ensure employee's employee id present in certificate table .",
        "beam": [
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.origin = value",
                -0.02437281608581543
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.destination = value",
                -4.951364517211914
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.departure_date = value",
                -5.599318504333496
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.arrival_date = value",
                -5.630937576293945
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.flno = value",
                -5.773911476135254
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.price = value",
                -6.086134910583496
            ],
            [
                "SELECT name FROM aircraft WHERE name = value",
                -6.250355243682861
            ],
            [
                "SELECT T1.name FROM aircraft AS T1 JOIN certificate AS T2 ON T1.aid = T2.aid WHERE T2.eid = value",
                -6.499007225036621
            ],
            [
                "SELECT name FROM aircraft WHERE * = value",
                -8.60925579071045
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.origin ! = value",
                -8.628182888031006
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.distance = value",
                -8.643413543701172
            ],
            [
                "SELECT name FROM aircraft WHERE distance = value",
                -8.914051055908203
            ],
            [
                "SELECT T1.name FROM aircraft AS T1 JOIN employee AS T2 JOIN certificate AS T3 ON T1.aid = T3.aid AND T3.eid = T2.eid WHERE T2.salary = value",
                -9.742362022399902
            ],
            [
                "SELECT T1.name FROM aircraft AS T1 JOIN employee AS T2 JOIN certificate AS T3 ON T1.aid = T3.aid AND T3.eid = T2.eid WHERE T2.name = value",
                -10.071232795715332
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.aid = value",
                -10.103036880493164
            ],
            [
                "SELECT name FROM aircraft WHERE aid = value",
                -10.632183074951172
            ],
            [
                "SELECT T1.name FROM aircraft AS T1 JOIN certificate AS T2 ON T1.aid = T2.aid WHERE T2.aid = value",
                -11.210464477539062
            ],
            [
                "SELECT name FROM aircraft",
                -11.24358081817627
            ],
            [
                "SELECT T1.name FROM aircraft AS T1 JOIN employee AS T2 JOIN certificate AS T3 ON T1.aid = T3.aid AND T3.eid = T2.eid WHERE T2.eid = value",
                -11.291746139526367
            ],
            [
                "SELECT DISTINCT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.origin = value",
                -12.070048570632935
            ]
        ],
        "predicted_parse_with_values": "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.origin = \"John Williams\"",
        "template_feedback": "in step 1 , use employee table and certificate table in place of flight table in step 2 , consider the employee 's name equals John Williams conditions in place of the origin equals John Williams conditions .",
        "primary_span": [
            [
                4,
                9
            ],
            [
                19,
                27
            ]
        ],
        "secondary_span": [
            [
                10,
                14
            ],
            [
                28,
                37
            ]
        ],
        "edits": [
            "employee",
            "certificate",
            "flight",
            "name equals \"John Williams\"",
            "origin equals \"John Williams\""
        ],
        "edits_original": "< from > add employee </ from > < from > add certificate </ from > < from > remove flight </ from > < where > add name equals \" John Williams \" </ where > < where > remove origin equals \" John Williams \" </ where >"
    },
    {
        "db_id": "flight_1",
        "question": "What are the names of all aircrafts that John Williams have certificates to be able to fly?",
        "gold_parse": "SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T1.name  =  \"John Williams\"",
        "predicted_parse": "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.origin = value",
        "predicted_parse_explanation": [
            "Step 1: for each row in flight table , find the corresponding rows in aircraft table",
            "Step 2: find the name of the results of step 1 whose origin equals John Williams"
        ],
        "feedback": "you need to swap origin with employee's name by confirming that employee id of employee's exist in certificate table and make sure to add employee table in step 1.",
        "beam": [
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.origin = value",
                -0.02437281608581543
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.destination = value",
                -4.951364517211914
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.departure_date = value",
                -5.599318504333496
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.arrival_date = value",
                -5.630937576293945
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.flno = value",
                -5.773911476135254
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.price = value",
                -6.086134910583496
            ],
            [
                "SELECT name FROM aircraft WHERE name = value",
                -6.250355243682861
            ],
            [
                "SELECT T1.name FROM aircraft AS T1 JOIN certificate AS T2 ON T1.aid = T2.aid WHERE T2.eid = value",
                -6.499007225036621
            ],
            [
                "SELECT name FROM aircraft WHERE * = value",
                -8.60925579071045
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.origin ! = value",
                -8.628182888031006
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.distance = value",
                -8.643413543701172
            ],
            [
                "SELECT name FROM aircraft WHERE distance = value",
                -8.914051055908203
            ],
            [
                "SELECT T1.name FROM aircraft AS T1 JOIN employee AS T2 JOIN certificate AS T3 ON T1.aid = T3.aid AND T3.eid = T2.eid WHERE T2.salary = value",
                -9.742362022399902
            ],
            [
                "SELECT T1.name FROM aircraft AS T1 JOIN employee AS T2 JOIN certificate AS T3 ON T1.aid = T3.aid AND T3.eid = T2.eid WHERE T2.name = value",
                -10.071232795715332
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.aid = value",
                -10.103036880493164
            ],
            [
                "SELECT name FROM aircraft WHERE aid = value",
                -10.632183074951172
            ],
            [
                "SELECT T1.name FROM aircraft AS T1 JOIN certificate AS T2 ON T1.aid = T2.aid WHERE T2.aid = value",
                -11.210464477539062
            ],
            [
                "SELECT name FROM aircraft",
                -11.24358081817627
            ],
            [
                "SELECT T1.name FROM aircraft AS T1 JOIN employee AS T2 JOIN certificate AS T3 ON T1.aid = T3.aid AND T3.eid = T2.eid WHERE T2.eid = value",
                -11.291746139526367
            ],
            [
                "SELECT DISTINCT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.origin = value",
                -12.070048570632935
            ]
        ],
        "predicted_parse_with_values": "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.origin = \"John Williams\"",
        "template_feedback": "in step 1 , use employee table and certificate table in place of flight table in step 2 , consider the employee 's name equals John Williams conditions in place of the origin equals John Williams conditions .",
        "primary_span": [
            [
                4,
                9
            ],
            [
                19,
                27
            ]
        ],
        "secondary_span": [
            [
                10,
                14
            ],
            [
                28,
                37
            ]
        ],
        "edits": [
            "employee",
            "certificate",
            "flight",
            "name equals \"John Williams\"",
            "origin equals \"John Williams\""
        ],
        "edits_original": "< from > add employee </ from > < from > add certificate </ from > < from > remove flight </ from > < where > add name equals \" John Williams \" </ where > < where > remove origin equals \" John Williams \" </ where >"
    },
    {
        "db_id": "flight_1",
        "question": "What is the salaray and name of the employee with the most certificates to fly planes more than 5000?",
        "gold_parse": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.distance  >  5000 GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse": "SELECT name , name FROM employee WHERE salary > value GROUP BY name ORDER BY Count ( * ) Desc LIMIT value",
        "predicted_parse_explanation": [
            "Step 1: find rows in employee table whose salary greater than 5000",
            "Step 2: find the number of rows of each value of name the results of step 1",
            "Step 3: find the name and name the results of step 1 with largest value in the results of step 2"
        ],
        "feedback": "Change salary with distance and name , name with name , salary , find number of rows that correspond of certificate .",
        "beam": [
            [
                "SELECT name , name FROM employee WHERE salary > value GROUP BY name ORDER BY Count ( * ) Desc LIMIT value",
                -0.4511141777038574
            ],
            [
                "SELECT name , name FROM employee GROUP BY name ORDER BY Count ( * ) Desc LIMIT value",
                -1.2785701751708984
            ],
            [
                "SELECT name , name FROM employee GROUP BY eid ORDER BY Count ( * ) Desc LIMIT value",
                -3.956880569458008
            ],
            [
                "SELECT T1.distance , T3.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid JOIN employee AS T3 JOIN certificate AS T4 ON T2.aid = T4.aid AND T4.eid = T3.eid WHERE T3.salary > value GROUP BY T3.name ORDER BY Count ( * ) Desc LIMIT value",
                -3.9681975841522217
            ],
            [
                "SELECT T3.name , T3.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid JOIN employee AS T3 JOIN certificate AS T4 ON T2.aid = T4.aid AND T4.eid = T3.eid WHERE T1.price > value GROUP BY T3.name ORDER BY Count ( * ) Desc LIMIT value",
                -4.638520240783691
            ],
            [
                "SELECT T1.name , T1.name FROM employee AS T1 JOIN certificate AS T2 ON T1.eid = T2.eid GROUP BY T2.eid ORDER BY Count ( * ) Desc LIMIT value",
                -4.973222732543945
            ],
            [
                "SELECT T1.distance , T3.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid JOIN employee AS T3 JOIN certificate AS T4 ON T2.aid = T4.aid AND T4.eid = T3.eid GROUP BY T3.name ORDER BY Count ( * ) Desc LIMIT value",
                -5.20132303237915
            ],
            [
                "SELECT T3.name , T3.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid JOIN employee AS T3 JOIN certificate AS T4 ON T2.aid = T4.aid AND T4.eid = T3.eid WHERE T1.distance > value GROUP BY T3.name ORDER BY Count ( * ) Desc LIMIT value",
                -5.250449180603027
            ],
            [
                "SELECT T2.name , T1.name FROM aircraft AS T1 JOIN employee AS T2 JOIN certificate AS T3 ON T1.aid = T3.aid AND T3.eid = T2.eid WHERE T2.salary > value GROUP BY T2.name ORDER BY Count ( * ) Desc LIMIT value",
                -5.38218879699707
            ],
            [
                "SELECT T2.name , T1.name FROM aircraft AS T1 JOIN employee AS T2 JOIN certificate AS T3 ON T1.aid = T3.aid AND T3.eid = T2.eid GROUP BY T2.name ORDER BY Count ( * ) Desc LIMIT value",
                -6.3171586990356445
            ],
            [
                "SELECT name , name FROM employee WHERE salary > value GROUP BY eid ORDER BY Count ( * ) Desc LIMIT value",
                -6.516512870788574
            ],
            [
                "SELECT name , name FROM employee GROUP BY name HAVING Count ( * ) > value",
                -6.953979969024658
            ],
            [
                "SELECT T3.name , T3.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid JOIN employee AS T3 JOIN certificate AS T4 ON T2.aid = T4.aid AND T4.eid = T3.eid WHERE T1.flno > value GROUP BY T3.name ORDER BY Count ( * ) Desc LIMIT value",
                -6.98761510848999
            ],
            [
                "SELECT T1.distance , T2.name FROM aircraft AS T1 JOIN employee AS T2 JOIN certificate AS T3 ON T1.aid = T3.aid AND T3.eid = T2.eid WHERE T2.salary > value GROUP BY T2.name ORDER BY Count ( * ) Desc LIMIT value",
                -7.011948108673096
            ],
            [
                "SELECT T3.name , T3.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid JOIN employee AS T3 JOIN certificate AS T4 ON T2.aid = T4.aid AND T4.eid = T3.eid WHERE T1.origin > value GROUP BY T3.name ORDER BY Count ( * ) Desc LIMIT value",
                -7.08430814743042
            ],
            [
                "SELECT T1.name , T1.name FROM employee AS T1 JOIN certificate AS T2 ON T1.eid = T2.eid WHERE T1.salary > value GROUP BY T2.eid ORDER BY Count ( * ) Desc LIMIT value",
                -7.126033306121826
            ],
            [
                "SELECT T2.name , T2.name FROM aircraft AS T1 JOIN employee AS T2 JOIN certificate AS T3 ON T1.aid = T3.aid AND T3.eid = T2.eid WHERE T1.distance > value GROUP BY T2.name ORDER BY Count ( * ) Desc LIMIT value",
                -7.18546199798584
            ],
            [
                "SELECT salary , name FROM employee WHERE salary > value GROUP BY name ORDER BY Count ( * ) Desc LIMIT value",
                -7.963109493255615
            ],
            [
                "SELECT name , name FROM employee WHERE salary > value",
                -8.044209003448486
            ],
            [
                "SELECT T1.distance , T3.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid JOIN employee AS T3 JOIN certificate AS T4 ON T2.aid = T4.aid AND T4.eid = T3.eid WHERE T1.price > value GROUP BY T3.name ORDER BY Count ( * ) Desc LIMIT value",
                -8.049535036087036
            ]
        ],
        "predicted_parse_with_values": "SELECT name , name FROM employee WHERE salary > 5000 GROUP BY name ORDER BY Count ( * ) Desc LIMIT 1",
        "template_feedback": "in step 1 , additionally use the information from the aircraft table and certificate table besides the employee table . consider the distance greater than 5000 conditions in place of the salary greater than 5000 conditions . in step 2 , find for each value of employee 's employee id in place of employee 's name .",
        "primary_span": [
            [
                4,
                14
            ],
            [
                20,
                26
            ],
            [
                41,
                49
            ]
        ],
        "secondary_span": [
            [
                15,
                19
            ],
            [
                27,
                36
            ],
            [
                50,
                56
            ]
        ],
        "edits": [
            "name",
            "certificate",
            "aircraft",
            "distance greater than 5000",
            "salary greater than 5000",
            "employee id",
            "name"
        ],
        "edits_original": "< select > remove name </ select > < from > add certificate </ from > < from > add aircraft </ from > < where > add distance greater than 5000 </ where > < where > remove salary greater than 5000 </ where > < groupBy > add employee id </ groupBy > < groupBy > remove name </ groupBy >"
    },
    {
        "db_id": "flight_1",
        "question": "What is the salaray and name of the employee with the most certificates to fly planes more than 5000?",
        "gold_parse": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.distance  >  5000 GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse": "SELECT name , name FROM employee WHERE salary > value GROUP BY name ORDER BY Count ( * ) Desc LIMIT value",
        "predicted_parse_explanation": [
            "Step 1: find rows in employee table whose salary greater than 5000",
            "Step 2: find the number of rows of each value of name the results of step 1",
            "Step 3: find the name and name the results of step 1 with largest value in the results of step 2"
        ],
        "feedback": "you should use name and name in place of salary. also you need to find the number of row relating to certificate.",
        "beam": [
            [
                "SELECT name , name FROM employee WHERE salary > value GROUP BY name ORDER BY Count ( * ) Desc LIMIT value",
                -0.4511141777038574
            ],
            [
                "SELECT name , name FROM employee GROUP BY name ORDER BY Count ( * ) Desc LIMIT value",
                -1.2785701751708984
            ],
            [
                "SELECT name , name FROM employee GROUP BY eid ORDER BY Count ( * ) Desc LIMIT value",
                -3.956880569458008
            ],
            [
                "SELECT T1.distance , T3.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid JOIN employee AS T3 JOIN certificate AS T4 ON T2.aid = T4.aid AND T4.eid = T3.eid WHERE T3.salary > value GROUP BY T3.name ORDER BY Count ( * ) Desc LIMIT value",
                -3.9681975841522217
            ],
            [
                "SELECT T3.name , T3.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid JOIN employee AS T3 JOIN certificate AS T4 ON T2.aid = T4.aid AND T4.eid = T3.eid WHERE T1.price > value GROUP BY T3.name ORDER BY Count ( * ) Desc LIMIT value",
                -4.638520240783691
            ],
            [
                "SELECT T1.name , T1.name FROM employee AS T1 JOIN certificate AS T2 ON T1.eid = T2.eid GROUP BY T2.eid ORDER BY Count ( * ) Desc LIMIT value",
                -4.973222732543945
            ],
            [
                "SELECT T1.distance , T3.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid JOIN employee AS T3 JOIN certificate AS T4 ON T2.aid = T4.aid AND T4.eid = T3.eid GROUP BY T3.name ORDER BY Count ( * ) Desc LIMIT value",
                -5.20132303237915
            ],
            [
                "SELECT T3.name , T3.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid JOIN employee AS T3 JOIN certificate AS T4 ON T2.aid = T4.aid AND T4.eid = T3.eid WHERE T1.distance > value GROUP BY T3.name ORDER BY Count ( * ) Desc LIMIT value",
                -5.250449180603027
            ],
            [
                "SELECT T2.name , T1.name FROM aircraft AS T1 JOIN employee AS T2 JOIN certificate AS T3 ON T1.aid = T3.aid AND T3.eid = T2.eid WHERE T2.salary > value GROUP BY T2.name ORDER BY Count ( * ) Desc LIMIT value",
                -5.38218879699707
            ],
            [
                "SELECT T2.name , T1.name FROM aircraft AS T1 JOIN employee AS T2 JOIN certificate AS T3 ON T1.aid = T3.aid AND T3.eid = T2.eid GROUP BY T2.name ORDER BY Count ( * ) Desc LIMIT value",
                -6.3171586990356445
            ],
            [
                "SELECT name , name FROM employee WHERE salary > value GROUP BY eid ORDER BY Count ( * ) Desc LIMIT value",
                -6.516512870788574
            ],
            [
                "SELECT name , name FROM employee GROUP BY name HAVING Count ( * ) > value",
                -6.953979969024658
            ],
            [
                "SELECT T3.name , T3.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid JOIN employee AS T3 JOIN certificate AS T4 ON T2.aid = T4.aid AND T4.eid = T3.eid WHERE T1.flno > value GROUP BY T3.name ORDER BY Count ( * ) Desc LIMIT value",
                -6.98761510848999
            ],
            [
                "SELECT T1.distance , T2.name FROM aircraft AS T1 JOIN employee AS T2 JOIN certificate AS T3 ON T1.aid = T3.aid AND T3.eid = T2.eid WHERE T2.salary > value GROUP BY T2.name ORDER BY Count ( * ) Desc LIMIT value",
                -7.011948108673096
            ],
            [
                "SELECT T3.name , T3.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid JOIN employee AS T3 JOIN certificate AS T4 ON T2.aid = T4.aid AND T4.eid = T3.eid WHERE T1.origin > value GROUP BY T3.name ORDER BY Count ( * ) Desc LIMIT value",
                -7.08430814743042
            ],
            [
                "SELECT T1.name , T1.name FROM employee AS T1 JOIN certificate AS T2 ON T1.eid = T2.eid WHERE T1.salary > value GROUP BY T2.eid ORDER BY Count ( * ) Desc LIMIT value",
                -7.126033306121826
            ],
            [
                "SELECT T2.name , T2.name FROM aircraft AS T1 JOIN employee AS T2 JOIN certificate AS T3 ON T1.aid = T3.aid AND T3.eid = T2.eid WHERE T1.distance > value GROUP BY T2.name ORDER BY Count ( * ) Desc LIMIT value",
                -7.18546199798584
            ],
            [
                "SELECT salary , name FROM employee WHERE salary > value GROUP BY name ORDER BY Count ( * ) Desc LIMIT value",
                -7.963109493255615
            ],
            [
                "SELECT name , name FROM employee WHERE salary > value",
                -8.044209003448486
            ],
            [
                "SELECT T1.distance , T3.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid JOIN employee AS T3 JOIN certificate AS T4 ON T2.aid = T4.aid AND T4.eid = T3.eid WHERE T1.price > value GROUP BY T3.name ORDER BY Count ( * ) Desc LIMIT value",
                -8.049535036087036
            ]
        ],
        "predicted_parse_with_values": "SELECT name , name FROM employee WHERE salary > 5000 GROUP BY name ORDER BY Count ( * ) Desc LIMIT 1",
        "template_feedback": "in step 1 , additionally use the information from the aircraft table and certificate table besides the employee table . consider the distance greater than 5000 conditions in place of the salary greater than 5000 conditions . in step 2 , find for each value of employee 's employee id in place of employee 's name .",
        "primary_span": [
            [
                4,
                14
            ],
            [
                20,
                26
            ],
            [
                41,
                49
            ]
        ],
        "secondary_span": [
            [
                15,
                19
            ],
            [
                27,
                36
            ],
            [
                50,
                56
            ]
        ],
        "edits": [
            "name",
            "certificate",
            "aircraft",
            "distance greater than 5000",
            "salary greater than 5000",
            "employee id",
            "name"
        ],
        "edits_original": "< select > remove name </ select > < from > add certificate </ from > < from > add aircraft </ from > < where > add distance greater than 5000 </ where > < where > remove salary greater than 5000 </ where > < groupBy > add employee id </ groupBy > < groupBy > remove name </ groupBy >"
    },
    {
        "db_id": "flight_1",
        "question": "What are the numbers of all flights that can cover a distance of more than 2000?",
        "gold_parse": "SELECT flno FROM Flight WHERE distance  >  2000",
        "predicted_parse": "SELECT Count ( * ) FROM flight WHERE distance > value",
        "predicted_parse_explanation": [
            "find the number of rows in flight table whose distance greater than 2000"
        ],
        "feedback": "There should be flight number to be found not the number of rows of table .",
        "beam": [
            [
                "SELECT Count ( * ) FROM flight WHERE distance > value",
                -0.45313549041748047
            ],
            [
                "SELECT Count ( * ) FROM aircraft WHERE distance > value",
                -1.0095996856689453
            ],
            [
                "SELECT Count ( * ) FROM flight WHERE price > value",
                -14.1622314453125
            ],
            [
                "SELECT Count ( * ) FROM employee WHERE salary > value",
                -14.92052173614502
            ],
            [
                "SELECT * FROM flight WHERE distance > value",
                -15.291421890258789
            ],
            [
                "SELECT DISTINCT Count ( * ) FROM flight WHERE distance > value",
                -15.564830780029297
            ],
            [
                "SELECT Count ( * ) FROM flight WHERE DISTINCT distance > value",
                -15.609845161437988
            ],
            [
                "SELECT Count ( * ) FROM flight WHERE distance > value LIMIT value",
                -15.689775466918945
            ],
            [
                "SELECT Count ( DISTINCT * ) FROM flight WHERE distance > value",
                -15.70319652557373
            ],
            [
                "SELECT * FROM aircraft WHERE distance > value",
                -15.818511962890625
            ],
            [
                "SELECT Count ( * ) FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.distance > value AND T2.distance > value",
                -15.976941108703613
            ],
            [
                "SELECT DISTINCT Count ( * ) FROM aircraft WHERE distance > value",
                -16.102330207824707
            ],
            [
                "SELECT Count ( DISTINCT * ) FROM aircraft WHERE distance > value",
                -16.138357162475586
            ],
            [
                "SELECT Count ( * ) FROM aircraft WHERE DISTINCT distance > value",
                -16.152453422546387
            ],
            [
                "SELECT Count ( * ) FROM aircraft WHERE distance > value LIMIT value",
                -16.240407943725586
            ],
            [
                "SELECT Sum ( distance ) FROM flight WHERE distance > value",
                -16.257869720458984
            ],
            [
                "SELECT Count ( * ) FROM flight WHERE distance > value AND distance > value",
                -16.276408195495605
            ],
            [
                "SELECT Count ( * ) FROM flight",
                -16.3878173828125
            ],
            [
                "SELECT Count ( * ) FROM aircraft AS T1 WHERE T1.distance > ( SELECT Max ( T2.distance ) FROM flight AS T2 JOIN aircraft AS T1 ON T2.aid = T1.aid WHERE T1.distance < value )",
                -16.5792818069458
            ],
            [
                "SELECT Count ( * ) FROM flight AS T1 WHERE T1.distance > ( SELECT T1.distance FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T2.distance < value )",
                -16.81403923034668
            ]
        ],
        "predicted_parse_with_values": "SELECT Count ( * ) FROM flight WHERE distance > 2000",
        "template_feedback": "find flight number in place of number of rows .",
        "primary_span": [
            [
                0,
                2
            ]
        ],
        "secondary_span": [
            [
                3,
                9
            ]
        ],
        "edits": [
            "flight number",
            "number of rows"
        ],
        "edits_original": "< select > add flight number </ select > < select > remove number of rows </ select >"
    },
    {
        "db_id": "flight_1",
        "question": "What are the numbers of all flights that can cover a distance of more than 2000?",
        "gold_parse": "SELECT flno FROM Flight WHERE distance  >  2000",
        "predicted_parse": "SELECT Count ( * ) FROM flight WHERE distance > value",
        "predicted_parse_explanation": [
            "find the number of rows in flight table whose distance greater than 2000"
        ],
        "feedback": "you need to find flight number.",
        "beam": [
            [
                "SELECT Count ( * ) FROM flight WHERE distance > value",
                -0.45313549041748047
            ],
            [
                "SELECT Count ( * ) FROM aircraft WHERE distance > value",
                -1.0095996856689453
            ],
            [
                "SELECT Count ( * ) FROM flight WHERE price > value",
                -14.1622314453125
            ],
            [
                "SELECT Count ( * ) FROM employee WHERE salary > value",
                -14.92052173614502
            ],
            [
                "SELECT * FROM flight WHERE distance > value",
                -15.291421890258789
            ],
            [
                "SELECT DISTINCT Count ( * ) FROM flight WHERE distance > value",
                -15.564830780029297
            ],
            [
                "SELECT Count ( * ) FROM flight WHERE DISTINCT distance > value",
                -15.609845161437988
            ],
            [
                "SELECT Count ( * ) FROM flight WHERE distance > value LIMIT value",
                -15.689775466918945
            ],
            [
                "SELECT Count ( DISTINCT * ) FROM flight WHERE distance > value",
                -15.70319652557373
            ],
            [
                "SELECT * FROM aircraft WHERE distance > value",
                -15.818511962890625
            ],
            [
                "SELECT Count ( * ) FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.distance > value AND T2.distance > value",
                -15.976941108703613
            ],
            [
                "SELECT DISTINCT Count ( * ) FROM aircraft WHERE distance > value",
                -16.102330207824707
            ],
            [
                "SELECT Count ( DISTINCT * ) FROM aircraft WHERE distance > value",
                -16.138357162475586
            ],
            [
                "SELECT Count ( * ) FROM aircraft WHERE DISTINCT distance > value",
                -16.152453422546387
            ],
            [
                "SELECT Count ( * ) FROM aircraft WHERE distance > value LIMIT value",
                -16.240407943725586
            ],
            [
                "SELECT Sum ( distance ) FROM flight WHERE distance > value",
                -16.257869720458984
            ],
            [
                "SELECT Count ( * ) FROM flight WHERE distance > value AND distance > value",
                -16.276408195495605
            ],
            [
                "SELECT Count ( * ) FROM flight",
                -16.3878173828125
            ],
            [
                "SELECT Count ( * ) FROM aircraft AS T1 WHERE T1.distance > ( SELECT Max ( T2.distance ) FROM flight AS T2 JOIN aircraft AS T1 ON T2.aid = T1.aid WHERE T1.distance < value )",
                -16.5792818069458
            ],
            [
                "SELECT Count ( * ) FROM flight AS T1 WHERE T1.distance > ( SELECT T1.distance FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T2.distance < value )",
                -16.81403923034668
            ]
        ],
        "predicted_parse_with_values": "SELECT Count ( * ) FROM flight WHERE distance > 2000",
        "template_feedback": "find flight number in place of number of rows .",
        "primary_span": [
            [
                0,
                2
            ]
        ],
        "secondary_span": [
            [
                3,
                9
            ]
        ],
        "edits": [
            "flight number",
            "number of rows"
        ],
        "edits_original": "< select > add flight number </ select > < select > remove number of rows </ select >"
    },
    {
        "db_id": "formula_1",
        "question": "What is the average fastest lap speed in race named 'Monaco Grand Prix' in 2008 ?",
        "gold_parse": "SELECT avg(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = \"Monaco Grand Prix\"",
        "predicted_parse": "SELECT Avg ( T3.lap ) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN lapTimes AS T3 ON T2.raceId = T3.raceId WHERE T1.country = value AND T1.country = value",
        "predicted_parse_explanation": [
            "Step 1: for each row in circuits table , find the corresponding rows in races table and in lap times table",
            "Step 2: find the average lap of the results of step 1 whose country equals 2008 and country equals Monaco Grand Prix"
        ],
        "feedback": "Add results table , Interchange lap with fastest lap speed , 1st country with races's name and 2nd country with year .",
        "beam": [
            [
                "SELECT Avg ( T3.lap ) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN lapTimes AS T3 ON T2.raceId = T3.raceId WHERE T1.country = value AND T1.country = value",
                -0.07252693176269531
            ],
            [
                "SELECT Avg ( T3.positionText ) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN constructorStandings AS T3 ON T2.raceId = T3.raceId WHERE T1.country = value AND T1.country = value",
                -3.985200881958008
            ],
            [
                "SELECT Avg ( T3.lap ) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN lapTimes AS T3 ON T2.raceId = T3.raceId WHERE T1.circuitRef = value AND T1.country = value",
                -4.21617317199707
            ],
            [
                "SELECT Avg ( T4.lap ) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId AND T1.circuitId = T2.circuitId JOIN constructorResults AS T3 ON T2.raceId = T3.raceId JOIN lapTimes AS T4 ON T2.raceId = T4.raceId WHERE T3.positionText = value AND T1.country = value",
                -4.2262864112854
            ],
            [
                "SELECT Avg ( T3.lap ) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN lapTimes AS T3 ON T2.raceId = T3.raceId WHERE T1.country = value",
                -4.969119071960449
            ],
            [
                "SELECT Avg ( T3.lap ) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN lapTimes AS T3 ON T2.raceId = T3.raceId WHERE T1.country = value AND T1.circuitRef = value",
                -5.312546730041504
            ],
            [
                "SELECT Avg ( T3.lap ) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN lapTimes AS T3 ON T2.raceId = T3.raceId WHERE T1.country = value AND T3.lap = value",
                -5.816868782043457
            ],
            [
                "SELECT Avg ( T3.lap ) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN lapTimes AS T3 ON T2.raceId = T3.raceId WHERE T3.time = value AND T1.country = value",
                -6.224710464477539
            ],
            [
                "SELECT Avg ( T4.lap ) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN status AS T3 JOIN lapTimes AS T4 ON T2.raceId = T4.raceId WHERE T3.number = value AND T1.country = value",
                -6.566676616668701
            ],
            [
                "SELECT Avg ( T4.lap ) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId AND T1.circuitId = T2.circuitId JOIN pitStops AS T3 ON T2.raceId = T3.raceId JOIN lapTimes AS T4 ON T2.raceId = T4.raceId WHERE T3.time = value AND T1.country = value",
                -7.775687217712402
            ],
            [
                "SELECT Avg ( T3.lap ) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN pitStops AS T3 ON T2.raceId = T3.raceId WHERE T1.country = value AND T1.country = value",
                -7.892494201660156
            ],
            [
                "SELECT Avg ( T3.positionText ) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN constructorStandings AS T3 ON T2.raceId = T3.raceId WHERE T1.circuitRef = value AND T1.country = value",
                -8.157169818878174
            ],
            [
                "SELECT Avg ( T3.positionText ) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId AND T1.circuitId = T2.circuitId JOIN constructorStandings AS T3 ON T2.raceId = T3.raceId JOIN constructorResults AS T4 ON T2.raceId = T4.raceId WHERE T4.positionText = value AND T1.country = value",
                -8.17561674118042
            ],
            [
                "SELECT Avg ( T3.lap ) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN lapTimes AS T3 ON T2.raceId = T3.raceId WHERE T1.name = value AND T1.country = value",
                -8.262968063354492
            ],
            [
                "SELECT Avg ( T4.lap ) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId AND T1.circuitId = T2.circuitId JOIN constructorStandings AS T3 ON T2.raceId = T3.raceId JOIN lapTimes AS T4 ON T2.raceId = T4.raceId WHERE T1.country = value AND T3.number = value",
                -8.313614845275879
            ],
            [
                "SELECT Avg ( T4.lap ) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId AND T1.circuitId = T2.circuitId JOIN constructorResults AS T3 ON T2.raceId = T3.raceId JOIN lapTimes AS T4 ON T2.raceId = T4.raceId WHERE T1.country = value AND T3.positionText = value",
                -8.314910888671875
            ],
            [
                "SELECT Avg ( T3.lap ) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN lapTimes AS T3 ON T2.raceId = T3.raceId WHERE T1.country = value AND T3.lap = ( SELECT Min ( T3.lap ) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN lapTimes AS T3 ON T2.raceId = T3.raceId WHERE T1.country = value )",
                -8.326309204101562
            ],
            [
                "SELECT Avg ( T3.lap - T3.lap ) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN lapTimes AS T3 ON T2.raceId = T3.raceId WHERE T1.country = value",
                -9.45842170715332
            ],
            [
                "SELECT Avg ( T3.lap ) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN lapTimes AS T3 ON T2.raceId = T3.raceId WHERE T1.circuitRef = value",
                -9.93384313583374
            ],
            [
                "SELECT Avg ( lap ) FROM lapTimes",
                -13.330435752868652
            ]
        ],
        "predicted_parse_with_values": "SELECT Avg ( T3.lap ) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN lapTimes AS T3 ON T2.raceId = T3.raceId WHERE T1.country = 2008 AND T1.country = \"Monaco Grand Prix\"",
        "template_feedback": "in step 1 , use results table in place of circuits table and lap times table in step 2 , consider the races 's name equals Monaco Grand Prix and year equals 2008 conditions in place of the country equals Monaco Grand Prix and country equals 2008 conditions . find average fastest lap speed in place of average lap .",
        "primary_span": [
            [
                4,
                6
            ],
            [
                20,
                33
            ],
            [
                49,
                53
            ]
        ],
        "secondary_span": [
            [
                7,
                15
            ],
            [
                34,
                48
            ],
            [
                54,
                59
            ]
        ],
        "edits": [
            "average fastest lap speed",
            "average lap",
            "results",
            "circuits",
            "lap times",
            "year equals 2008",
            "name equals \"Monaco Grand Prix\"",
            "country equals 2008",
            "country equals \"Monaco Grand Prix\""
        ],
        "edits_original": "< select > add average fastest lap speed </ select > < select > remove average lap </ select > < from > add results </ from > < from > remove circuits </ from > < from > remove lap times </ from > < where > add year equals 2008 </ where > < where > add name equals \" Monaco Grand Prix \" </ where > < where > remove country equals 2008 </ where > < where > remove country equals \" Monaco Grand Prix \" </ where >"
    },
    {
        "db_id": "formula_1",
        "question": "What is the average fastest lap speed in race named 'Monaco Grand Prix' in 2008 ?",
        "gold_parse": "SELECT avg(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = \"Monaco Grand Prix\"",
        "predicted_parse": "SELECT Avg ( T3.lap ) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN lapTimes AS T3 ON T2.raceId = T3.raceId WHERE T1.country = value AND T1.country = value",
        "predicted_parse_explanation": [
            "Step 1: for each row in circuits table , find the corresponding rows in races table and in lap times table",
            "Step 2: find the average lap of the results of step 1 whose country equals 2008 and country equals Monaco Grand Prix"
        ],
        "feedback": "You need to swap the lap with fastest lap speed, I also want the name of races's and year and add the results table.",
        "beam": [
            [
                "SELECT Avg ( T3.lap ) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN lapTimes AS T3 ON T2.raceId = T3.raceId WHERE T1.country = value AND T1.country = value",
                -0.07252693176269531
            ],
            [
                "SELECT Avg ( T3.positionText ) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN constructorStandings AS T3 ON T2.raceId = T3.raceId WHERE T1.country = value AND T1.country = value",
                -3.985200881958008
            ],
            [
                "SELECT Avg ( T3.lap ) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN lapTimes AS T3 ON T2.raceId = T3.raceId WHERE T1.circuitRef = value AND T1.country = value",
                -4.21617317199707
            ],
            [
                "SELECT Avg ( T4.lap ) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId AND T1.circuitId = T2.circuitId JOIN constructorResults AS T3 ON T2.raceId = T3.raceId JOIN lapTimes AS T4 ON T2.raceId = T4.raceId WHERE T3.positionText = value AND T1.country = value",
                -4.2262864112854
            ],
            [
                "SELECT Avg ( T3.lap ) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN lapTimes AS T3 ON T2.raceId = T3.raceId WHERE T1.country = value",
                -4.969119071960449
            ],
            [
                "SELECT Avg ( T3.lap ) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN lapTimes AS T3 ON T2.raceId = T3.raceId WHERE T1.country = value AND T1.circuitRef = value",
                -5.312546730041504
            ],
            [
                "SELECT Avg ( T3.lap ) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN lapTimes AS T3 ON T2.raceId = T3.raceId WHERE T1.country = value AND T3.lap = value",
                -5.816868782043457
            ],
            [
                "SELECT Avg ( T3.lap ) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN lapTimes AS T3 ON T2.raceId = T3.raceId WHERE T3.time = value AND T1.country = value",
                -6.224710464477539
            ],
            [
                "SELECT Avg ( T4.lap ) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN status AS T3 JOIN lapTimes AS T4 ON T2.raceId = T4.raceId WHERE T3.number = value AND T1.country = value",
                -6.566676616668701
            ],
            [
                "SELECT Avg ( T4.lap ) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId AND T1.circuitId = T2.circuitId JOIN pitStops AS T3 ON T2.raceId = T3.raceId JOIN lapTimes AS T4 ON T2.raceId = T4.raceId WHERE T3.time = value AND T1.country = value",
                -7.775687217712402
            ],
            [
                "SELECT Avg ( T3.lap ) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN pitStops AS T3 ON T2.raceId = T3.raceId WHERE T1.country = value AND T1.country = value",
                -7.892494201660156
            ],
            [
                "SELECT Avg ( T3.positionText ) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN constructorStandings AS T3 ON T2.raceId = T3.raceId WHERE T1.circuitRef = value AND T1.country = value",
                -8.157169818878174
            ],
            [
                "SELECT Avg ( T3.positionText ) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId AND T1.circuitId = T2.circuitId JOIN constructorStandings AS T3 ON T2.raceId = T3.raceId JOIN constructorResults AS T4 ON T2.raceId = T4.raceId WHERE T4.positionText = value AND T1.country = value",
                -8.17561674118042
            ],
            [
                "SELECT Avg ( T3.lap ) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN lapTimes AS T3 ON T2.raceId = T3.raceId WHERE T1.name = value AND T1.country = value",
                -8.262968063354492
            ],
            [
                "SELECT Avg ( T4.lap ) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId AND T1.circuitId = T2.circuitId JOIN constructorStandings AS T3 ON T2.raceId = T3.raceId JOIN lapTimes AS T4 ON T2.raceId = T4.raceId WHERE T1.country = value AND T3.number = value",
                -8.313614845275879
            ],
            [
                "SELECT Avg ( T4.lap ) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId AND T1.circuitId = T2.circuitId JOIN constructorResults AS T3 ON T2.raceId = T3.raceId JOIN lapTimes AS T4 ON T2.raceId = T4.raceId WHERE T1.country = value AND T3.positionText = value",
                -8.314910888671875
            ],
            [
                "SELECT Avg ( T3.lap ) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN lapTimes AS T3 ON T2.raceId = T3.raceId WHERE T1.country = value AND T3.lap = ( SELECT Min ( T3.lap ) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN lapTimes AS T3 ON T2.raceId = T3.raceId WHERE T1.country = value )",
                -8.326309204101562
            ],
            [
                "SELECT Avg ( T3.lap - T3.lap ) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN lapTimes AS T3 ON T2.raceId = T3.raceId WHERE T1.country = value",
                -9.45842170715332
            ],
            [
                "SELECT Avg ( T3.lap ) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN lapTimes AS T3 ON T2.raceId = T3.raceId WHERE T1.circuitRef = value",
                -9.93384313583374
            ],
            [
                "SELECT Avg ( lap ) FROM lapTimes",
                -13.330435752868652
            ]
        ],
        "predicted_parse_with_values": "SELECT Avg ( T3.lap ) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN lapTimes AS T3 ON T2.raceId = T3.raceId WHERE T1.country = 2008 AND T1.country = \"Monaco Grand Prix\"",
        "template_feedback": "in step 1 , use results table in place of circuits table and lap times table in step 2 , consider the races 's name equals Monaco Grand Prix and year equals 2008 conditions in place of the country equals Monaco Grand Prix and country equals 2008 conditions . find average fastest lap speed in place of average lap .",
        "primary_span": [
            [
                4,
                6
            ],
            [
                20,
                33
            ],
            [
                49,
                53
            ]
        ],
        "secondary_span": [
            [
                7,
                15
            ],
            [
                34,
                48
            ],
            [
                54,
                59
            ]
        ],
        "edits": [
            "average fastest lap speed",
            "average lap",
            "results",
            "circuits",
            "lap times",
            "year equals 2008",
            "name equals \"Monaco Grand Prix\"",
            "country equals 2008",
            "country equals \"Monaco Grand Prix\""
        ],
        "edits_original": "< select > add average fastest lap speed </ select > < select > remove average lap </ select > < from > add results </ from > < from > remove circuits </ from > < from > remove lap times </ from > < where > add year equals 2008 </ where > < where > add name equals \" Monaco Grand Prix \" </ where > < where > remove country equals 2008 </ where > < where > remove country equals \" Monaco Grand Prix \" </ where >"
    },
    {
        "db_id": "small_bank_1",
        "question": "Find the name and checking balance of the account with the lowest savings balance.",
        "gold_parse": "SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1",
        "predicted_parse": "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
        "predicted_parse_explanation": [
            "Step 1: for each row in accounts table , find the corresponding rows in savings table",
            "Step 2: find the name and balance of the results of step 1 with smallest value of balance"
        ],
        "feedback": "in step 1 , it should be checking instead of savings",
        "beam": [
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -0.11910098791122437
            ],
            [
                "SELECT T1.name , T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -2.6503334045410156
            ],
            [
                "SELECT T1.name , T2.custid FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -4.018779277801514
            ],
            [
                "SELECT T1.name , T3.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T2.balance Asc LIMIT value",
                -4.5131144523620605
            ],
            [
                "SELECT T1.name , T3.custid FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T2.balance Asc LIMIT value",
                -4.834827899932861
            ],
            [
                "SELECT T1.name , * FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -6.164170265197754
            ],
            [
                "SELECT T1.name , T1.custid FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -6.177028179168701
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T3.balance Asc LIMIT value",
                -8.396460950374603
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance - T2.balance Asc LIMIT value",
                -8.837689816951752
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -9.333139419555664
            ],
            [
                "SELECT T1.name , T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -11.0878267288208
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Desc LIMIT value",
                -11.688338696956635
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance = ( SELECT Min ( T2.balance ) FROM SAVINGS AS T2 ) ORDER BY T2.balance Asc LIMIT value",
                -12.375180661678314
            ],
            [
                "SELECT T1.name , T2.custid FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T3.balance Asc LIMIT value",
                -12.51116418838501
            ],
            [
                "SELECT T1.name , T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -12.531626760959625
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -12.769625186920166
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T2.balance - T3.balance Asc LIMIT value",
                -13.277627885341644
            ],
            [
                "SELECT T1.name , T2.custid FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -13.341652393341064
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance = ( SELECT Min ( T2.balance ) FROM SAVINGS AS T2 )",
                -13.760503232479095
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid",
                -15.146601915359497
            ]
        ],
        "predicted_parse_with_values": "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT 1",
        "template_feedback": "in step 1 , additionally use the information from the checking table . in step 2 , find checking 's balance in place of savings 's balance .",
        "primary_span": [
            [
                4,
                12
            ],
            [
                17,
                20
            ]
        ],
        "secondary_span": [
            [
                21,
                27
            ]
        ],
        "edits": [
            "checking"
        ],
        "edits_original": "< from > add checking </ from >"
    },
    {
        "db_id": "small_bank_1",
        "question": "Find the name and checking balance of the account with the lowest savings balance.",
        "gold_parse": "SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1",
        "predicted_parse": "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
        "predicted_parse_explanation": [
            "Step 1: for each row in accounts table , find the corresponding rows in savings table",
            "Step 2: find the name and balance of the results of step 1 with smallest value of balance"
        ],
        "feedback": "You should use checking in step 1, omit savings.",
        "beam": [
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -0.11910098791122437
            ],
            [
                "SELECT T1.name , T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -2.6503334045410156
            ],
            [
                "SELECT T1.name , T2.custid FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -4.018779277801514
            ],
            [
                "SELECT T1.name , T3.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T2.balance Asc LIMIT value",
                -4.5131144523620605
            ],
            [
                "SELECT T1.name , T3.custid FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T2.balance Asc LIMIT value",
                -4.834827899932861
            ],
            [
                "SELECT T1.name , * FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -6.164170265197754
            ],
            [
                "SELECT T1.name , T1.custid FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -6.177028179168701
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T3.balance Asc LIMIT value",
                -8.396460950374603
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance - T2.balance Asc LIMIT value",
                -8.837689816951752
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -9.333139419555664
            ],
            [
                "SELECT T1.name , T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -11.0878267288208
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Desc LIMIT value",
                -11.688338696956635
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance = ( SELECT Min ( T2.balance ) FROM SAVINGS AS T2 ) ORDER BY T2.balance Asc LIMIT value",
                -12.375180661678314
            ],
            [
                "SELECT T1.name , T2.custid FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T3.balance Asc LIMIT value",
                -12.51116418838501
            ],
            [
                "SELECT T1.name , T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -12.531626760959625
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -12.769625186920166
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T2.balance - T3.balance Asc LIMIT value",
                -13.277627885341644
            ],
            [
                "SELECT T1.name , T2.custid FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -13.341652393341064
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance = ( SELECT Min ( T2.balance ) FROM SAVINGS AS T2 )",
                -13.760503232479095
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid",
                -15.146601915359497
            ]
        ],
        "predicted_parse_with_values": "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT 1",
        "template_feedback": "in step 1 , additionally use the information from the checking table . in step 2 , find checking 's balance in place of savings 's balance .",
        "primary_span": [
            [
                4,
                12
            ],
            [
                17,
                20
            ]
        ],
        "secondary_span": [
            [
                21,
                27
            ]
        ],
        "edits": [
            "checking"
        ],
        "edits_original": "< from > add checking </ from >"
    },
    {
        "db_id": "small_bank_1",
        "question": "Find the name and checking balance of the account with the lowest saving balance.",
        "gold_parse": "SELECT T2.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1",
        "predicted_parse": "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
        "predicted_parse_explanation": [
            "Step 1: for each row in accounts table , find the corresponding rows in savings table",
            "Step 2: find the name and balance of the results of step 1 with smallest value of balance"
        ],
        "feedback": "Make sure to find CHECKING's balance .",
        "beam": [
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -0.7699496150016785
            ],
            [
                "SELECT T1.name , T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -0.8665919899940491
            ],
            [
                "SELECT T1.name , T3.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T2.balance Asc LIMIT value",
                -2.814028263092041
            ],
            [
                "SELECT T1.name , T2.custid FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -3.8062310218811035
            ],
            [
                "SELECT T1.name , T3.custid FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T2.balance Asc LIMIT value",
                -4.357814788818359
            ],
            [
                "SELECT T1.name , * FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -4.661055088043213
            ],
            [
                "SELECT T1.name , T1.custid FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -5.2793869972229
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance - T2.balance Asc LIMIT value",
                -5.500629127025604
            ],
            [
                "SELECT T1.name , T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -7.353182375431061
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T3.balance Asc LIMIT value",
                -7.452217757701874
            ],
            [
                "SELECT T1.name , T3.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T2.balance - T2.balance Asc LIMIT value",
                -7.541317462921143
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T2.balance - T3.balance Asc LIMIT value",
                -8.129480302333832
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -8.428079605102539
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -9.503812313079834
            ],
            [
                "SELECT T1.name , T3.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T2.balance - T3.balance Asc LIMIT value",
                -10.126943588256836
            ],
            [
                "SELECT T1.name , T2.custid FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T3.balance Asc LIMIT value",
                -10.424316883087158
            ],
            [
                "SELECT T1.name , * FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -10.94274091720581
            ],
            [
                "SELECT T1.name , T2.custid FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -10.99621868133545
            ],
            [
                "SELECT T1.name , T1.custid FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -11.897584438323975
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -14.416523933410645
            ]
        ],
        "predicted_parse_with_values": "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT 1",
        "template_feedback": "in step 1 , additionally use the information from the checking table . in step 2 , find checking 's balance in place of savings 's balance .",
        "primary_span": [
            [
                4,
                12
            ],
            [
                17,
                20
            ]
        ],
        "secondary_span": [
            [
                21,
                27
            ]
        ],
        "edits": [
            "checking"
        ],
        "edits_original": "< from > add checking </ from >"
    },
    {
        "db_id": "small_bank_1",
        "question": "Find the name and checking balance of the account with the lowest saving balance.",
        "gold_parse": "SELECT T2.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1",
        "predicted_parse": "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
        "predicted_parse_explanation": [
            "Step 1: for each row in accounts table , find the corresponding rows in savings table",
            "Step 2: find the name and balance of the results of step 1 with smallest value of balance"
        ],
        "feedback": "you should find balance of checking.",
        "beam": [
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -0.7699496150016785
            ],
            [
                "SELECT T1.name , T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -0.8665919899940491
            ],
            [
                "SELECT T1.name , T3.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T2.balance Asc LIMIT value",
                -2.814028263092041
            ],
            [
                "SELECT T1.name , T2.custid FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -3.8062310218811035
            ],
            [
                "SELECT T1.name , T3.custid FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T2.balance Asc LIMIT value",
                -4.357814788818359
            ],
            [
                "SELECT T1.name , * FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -4.661055088043213
            ],
            [
                "SELECT T1.name , T1.custid FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -5.2793869972229
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance - T2.balance Asc LIMIT value",
                -5.500629127025604
            ],
            [
                "SELECT T1.name , T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -7.353182375431061
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T3.balance Asc LIMIT value",
                -7.452217757701874
            ],
            [
                "SELECT T1.name , T3.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T2.balance - T2.balance Asc LIMIT value",
                -7.541317462921143
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T2.balance - T3.balance Asc LIMIT value",
                -8.129480302333832
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -8.428079605102539
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -9.503812313079834
            ],
            [
                "SELECT T1.name , T3.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T2.balance - T3.balance Asc LIMIT value",
                -10.126943588256836
            ],
            [
                "SELECT T1.name , T2.custid FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T3.balance Asc LIMIT value",
                -10.424316883087158
            ],
            [
                "SELECT T1.name , * FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -10.94274091720581
            ],
            [
                "SELECT T1.name , T2.custid FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -10.99621868133545
            ],
            [
                "SELECT T1.name , T1.custid FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -11.897584438323975
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -14.416523933410645
            ]
        ],
        "predicted_parse_with_values": "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT 1",
        "template_feedback": "in step 1 , additionally use the information from the checking table . in step 2 , find checking 's balance in place of savings 's balance .",
        "primary_span": [
            [
                4,
                12
            ],
            [
                17,
                20
            ]
        ],
        "secondary_span": [
            [
                21,
                27
            ]
        ],
        "edits": [
            "checking"
        ],
        "edits_original": "< from > add checking </ from >"
    },
    {
        "db_id": "small_bank_1",
        "question": "What are the names of customers with accounts, and how many checking accounts do each of them have?",
        "gold_parse": "SELECT count(*) ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name",
        "predicted_parse": "SELECT name , Count ( * ) FROM ACCOUNTS GROUP BY custid",
        "predicted_parse_explanation": [
            "find each value of customer id in accounts table along with the number of the corresponding rows to each value"
        ],
        "feedback": "Replace customer id with name , also need to find corresponding checking accounts from checking table .",
        "beam": [
            [
                "SELECT name , Count ( * ) FROM ACCOUNTS GROUP BY custid",
                -0.00022125244140625
            ],
            [
                "SELECT name , Count ( * ) FROM ACCOUNTS",
                -9.184342384338379
            ],
            [
                "SELECT name , Sum ( name ) FROM ACCOUNTS GROUP BY custid",
                -9.71978211402893
            ],
            [
                "SELECT custid , Count ( * ) FROM ACCOUNTS GROUP BY custid",
                -10.577980041503906
            ],
            [
                "SELECT name , Sum ( * ) FROM ACCOUNTS GROUP BY custid",
                -11.04632019996643
            ],
            [
                "SELECT name , name FROM ACCOUNTS GROUP BY custid",
                -13.132000923156738
            ],
            [
                "SELECT name , Count ( * ) FROM ACCOUNTS WHERE name = value GROUP BY custid",
                -13.395331382751465
            ],
            [
                "SELECT T1.name , Sum ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid GROUP BY T1.custid",
                -13.446643829345703
            ],
            [
                "SELECT name , Count ( * ) , name FROM ACCOUNTS GROUP BY custid",
                -13.509350776672363
            ],
            [
                "SELECT name , Count ( * ) FROM ACCOUNTS GROUP BY custid HAVING Count ( * ) = value",
                -13.939796447753906
            ],
            [
                "SELECT name FROM ACCOUNTS",
                -14.011000633239746
            ],
            [
                "SELECT T1.name , Sum ( T2.balance ) FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid GROUP BY T1.custid",
                -14.03538179397583
            ],
            [
                "SELECT name , Count ( * ) FROM ACCOUNTS GROUP BY custid ORDER BY Count ( * ) Asc",
                -14.23376750946045
            ],
            [
                "SELECT name , Count ( * ) FROM ACCOUNTS GROUP BY DISTINCT custid",
                -15.080252647399902
            ],
            [
                "SELECT T2.custid , Count ( * ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid GROUP BY T1.custid",
                -15.08607006072998
            ],
            [
                "SELECT name , Count ( * ) FROM ACCOUNTS GROUP BY custid LIMIT value",
                -15.179404258728027
            ],
            [
                "SELECT DISTINCT name , Count ( * ) FROM ACCOUNTS GROUP BY custid",
                -15.22390365600586
            ],
            [
                "SELECT Count ( * ) , name FROM ACCOUNTS GROUP BY custid",
                -15.252755165100098
            ],
            [
                "SELECT name , Count ( * ) FROM ACCOUNTS GROUP BY custid HAVING Count ( * ) > = value",
                -15.291280746459961
            ],
            [
                "SELECT name , name FROM ACCOUNTS",
                -15.79356575012207
            ]
        ],
        "predicted_parse_with_values": "SELECT name , Count ( * ) FROM ACCOUNTS GROUP BY custid",
        "template_feedback": "additionally use the information from the checking table besides the accounts table . find for each value of name in place of accounts 's customer id .",
        "primary_span": [
            [
                0,
                7
            ],
            [
                13,
                18
            ]
        ],
        "secondary_span": [
            [
                8,
                12
            ],
            [
                19,
                26
            ]
        ],
        "edits": [
            "checking",
            "name",
            "customer id"
        ],
        "edits_original": "< from > add checking </ from > < groupBy > add name </ groupBy > < groupBy > remove customer id </ groupBy >"
    },
    {
        "db_id": "small_bank_1",
        "question": "What are the names of customers with accounts, and how many checking accounts do each of them have?",
        "gold_parse": "SELECT count(*) ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name",
        "predicted_parse": "SELECT name , Count ( * ) FROM ACCOUNTS GROUP BY custid",
        "predicted_parse_explanation": [
            "find each value of customer id in accounts table along with the number of the corresponding rows to each value"
        ],
        "feedback": "From checking table, I need the name of customer and their checking accounts.",
        "beam": [
            [
                "SELECT name , Count ( * ) FROM ACCOUNTS GROUP BY custid",
                -0.00022125244140625
            ],
            [
                "SELECT name , Count ( * ) FROM ACCOUNTS",
                -9.184342384338379
            ],
            [
                "SELECT name , Sum ( name ) FROM ACCOUNTS GROUP BY custid",
                -9.71978211402893
            ],
            [
                "SELECT custid , Count ( * ) FROM ACCOUNTS GROUP BY custid",
                -10.577980041503906
            ],
            [
                "SELECT name , Sum ( * ) FROM ACCOUNTS GROUP BY custid",
                -11.04632019996643
            ],
            [
                "SELECT name , name FROM ACCOUNTS GROUP BY custid",
                -13.132000923156738
            ],
            [
                "SELECT name , Count ( * ) FROM ACCOUNTS WHERE name = value GROUP BY custid",
                -13.395331382751465
            ],
            [
                "SELECT T1.name , Sum ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid GROUP BY T1.custid",
                -13.446643829345703
            ],
            [
                "SELECT name , Count ( * ) , name FROM ACCOUNTS GROUP BY custid",
                -13.509350776672363
            ],
            [
                "SELECT name , Count ( * ) FROM ACCOUNTS GROUP BY custid HAVING Count ( * ) = value",
                -13.939796447753906
            ],
            [
                "SELECT name FROM ACCOUNTS",
                -14.011000633239746
            ],
            [
                "SELECT T1.name , Sum ( T2.balance ) FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid GROUP BY T1.custid",
                -14.03538179397583
            ],
            [
                "SELECT name , Count ( * ) FROM ACCOUNTS GROUP BY custid ORDER BY Count ( * ) Asc",
                -14.23376750946045
            ],
            [
                "SELECT name , Count ( * ) FROM ACCOUNTS GROUP BY DISTINCT custid",
                -15.080252647399902
            ],
            [
                "SELECT T2.custid , Count ( * ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid GROUP BY T1.custid",
                -15.08607006072998
            ],
            [
                "SELECT name , Count ( * ) FROM ACCOUNTS GROUP BY custid LIMIT value",
                -15.179404258728027
            ],
            [
                "SELECT DISTINCT name , Count ( * ) FROM ACCOUNTS GROUP BY custid",
                -15.22390365600586
            ],
            [
                "SELECT Count ( * ) , name FROM ACCOUNTS GROUP BY custid",
                -15.252755165100098
            ],
            [
                "SELECT name , Count ( * ) FROM ACCOUNTS GROUP BY custid HAVING Count ( * ) > = value",
                -15.291280746459961
            ],
            [
                "SELECT name , name FROM ACCOUNTS",
                -15.79356575012207
            ]
        ],
        "predicted_parse_with_values": "SELECT name , Count ( * ) FROM ACCOUNTS GROUP BY custid",
        "template_feedback": "additionally use the information from the checking table besides the accounts table . find for each value of name in place of accounts 's customer id .",
        "primary_span": [
            [
                0,
                7
            ],
            [
                13,
                18
            ]
        ],
        "secondary_span": [
            [
                8,
                12
            ],
            [
                19,
                26
            ]
        ],
        "edits": [
            "checking",
            "name",
            "customer id"
        ],
        "edits_original": "< from > add checking </ from > < groupBy > add name </ groupBy > < groupBy > remove customer id </ groupBy >"
    },
    {
        "db_id": "small_bank_1",
        "question": "What are the names of customers with a higher checking balance than savings balance?",
        "gold_parse": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T2.balance  >  T3.balance",
        "predicted_parse": "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance > value",
        "predicted_parse_explanation": [
            "Step 1: for each row in accounts table , find the corresponding rows in savings table",
            "Step 2: find the name of the results of step 1 whose balance greater than 200000"
        ],
        "feedback": "make sure checking customer id greater than savings customer id .",
        "beam": [
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance > value",
                -0.4161953926086426
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance > value",
                -1.0776457786560059
            ],
            [
                "SELECT name FROM ACCOUNTS WHERE name > value",
                -11.29930305480957
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < value",
                -11.847841739654541
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance < value",
                -12.444907188415527
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.custid > value",
                -12.903894424438477
            ],
            [
                "SELECT name FROM ACCOUNTS WHERE name = value",
                -12.908990144729614
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.custid > value",
                -12.921297073364258
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance > ( SELECT Max ( T2.balance ) FROM SAVINGS AS T2 WHERE T2.balance > value )",
                -12.972207069396973
            ],
            [
                "SELECT name FROM ACCOUNTS WHERE custid > value",
                -13.17287826538086
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance > ( SELECT Max ( T3.balance ) FROM SAVINGS AS T3 WHERE T3.balance > value )",
                -13.529645442962646
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance > ( SELECT Max ( T3.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T2.custid = T1.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid WHERE T2.balance > value )",
                -13.65921401977539
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance > ( SELECT Max ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T2.custid = T1.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid WHERE T3.balance > value )",
                -13.771419525146484
            ],
            [
                "SELECT name FROM ACCOUNTS",
                -14.026660919189453
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance > ( SELECT Max ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T3 ON T3.custid = T1.custid JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T3.balance > value )",
                -14.216731071472168
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.custid > ( SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T3 ON T1.custid = T3.custid WHERE T3.balance < value )",
                -14.23984670639038
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance > ( SELECT Max ( T3.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T3 ON T3.custid = T1.custid JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance > value )",
                -14.32909631729126
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.custid > ( SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < value )",
                -14.352109909057617
            ],
            [
                "SELECT name FROM ACCOUNTS WHERE * > value",
                -14.429498672485352
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.custid > ( SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T3 ON T1.custid = T3.custid WHERE T3.balance > value )",
                -14.45363998413086
            ]
        ],
        "predicted_parse_with_values": "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance > 200000",
        "template_feedback": "in step 1 , additionally use the information from the checking table . in step 2 , consider the checking 's balance greater than savings 's balance conditions in place of the savings 's balance greater than 200000 conditions .",
        "primary_span": [
            [
                4,
                12
            ],
            [
                17,
                27
            ]
        ],
        "secondary_span": [
            [
                28,
                39
            ]
        ],
        "edits": [
            "checking",
            "balance greater than balance",
            "balance greater than 200000"
        ],
        "edits_original": "< from > add checking </ from > < where > add balance greater than balance </ where > < where > remove balance greater than 200000 </ where >"
    },
    {
        "db_id": "small_bank_1",
        "question": "What are the names of customers with a higher checking balance than savings balance?",
        "gold_parse": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T2.balance  >  T3.balance",
        "predicted_parse": "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance > value",
        "predicted_parse_explanation": [
            "Step 1: for each row in accounts table , find the corresponding rows in savings table",
            "Step 2: find the name of the results of step 1 whose balance greater than 200000"
        ],
        "feedback": "You should confirm that the checking balance is highest.",
        "beam": [
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance > value",
                -0.4161953926086426
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance > value",
                -1.0776457786560059
            ],
            [
                "SELECT name FROM ACCOUNTS WHERE name > value",
                -11.29930305480957
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < value",
                -11.847841739654541
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance < value",
                -12.444907188415527
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.custid > value",
                -12.903894424438477
            ],
            [
                "SELECT name FROM ACCOUNTS WHERE name = value",
                -12.908990144729614
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.custid > value",
                -12.921297073364258
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance > ( SELECT Max ( T2.balance ) FROM SAVINGS AS T2 WHERE T2.balance > value )",
                -12.972207069396973
            ],
            [
                "SELECT name FROM ACCOUNTS WHERE custid > value",
                -13.17287826538086
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance > ( SELECT Max ( T3.balance ) FROM SAVINGS AS T3 WHERE T3.balance > value )",
                -13.529645442962646
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance > ( SELECT Max ( T3.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T2.custid = T1.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid WHERE T2.balance > value )",
                -13.65921401977539
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance > ( SELECT Max ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T2.custid = T1.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid WHERE T3.balance > value )",
                -13.771419525146484
            ],
            [
                "SELECT name FROM ACCOUNTS",
                -14.026660919189453
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance > ( SELECT Max ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T3 ON T3.custid = T1.custid JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T3.balance > value )",
                -14.216731071472168
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.custid > ( SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T3 ON T1.custid = T3.custid WHERE T3.balance < value )",
                -14.23984670639038
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance > ( SELECT Max ( T3.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T3 ON T3.custid = T1.custid JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance > value )",
                -14.32909631729126
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.custid > ( SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < value )",
                -14.352109909057617
            ],
            [
                "SELECT name FROM ACCOUNTS WHERE * > value",
                -14.429498672485352
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.custid > ( SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T3 ON T1.custid = T3.custid WHERE T3.balance > value )",
                -14.45363998413086
            ]
        ],
        "predicted_parse_with_values": "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance > 200000",
        "template_feedback": "in step 1 , additionally use the information from the checking table . in step 2 , consider the checking 's balance greater than savings 's balance conditions in place of the savings 's balance greater than 200000 conditions .",
        "primary_span": [
            [
                4,
                12
            ],
            [
                17,
                27
            ]
        ],
        "secondary_span": [
            [
                28,
                39
            ]
        ],
        "edits": [
            "checking",
            "balance greater than balance",
            "balance greater than 200000"
        ],
        "edits_original": "< from > add checking </ from > < where > add balance greater than balance </ where > < where > remove balance greater than 200000 </ where >"
    },
    {
        "db_id": "small_bank_1",
        "question": "What are the balances of checking accounts belonging to people with savings balances greater than the average savings balance?",
        "gold_parse": "SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name IN (SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM savings))",
        "predicted_parse": "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance > ( SELECT Avg ( T2.balance ) FROM SAVINGS AS T2 )",
        "predicted_parse_explanation": [
            "Step 1: for each row in accounts table , find the corresponding rows in savings table",
            "Step 2: find the average balance in savings table",
            "Step 3: find the name of the results of step 1 whose balance greater than the results of step 2"
        ],
        "feedback": "step 2 , checking table instead of savings table . Step 3 , balance of checking table instead of name .",
        "beam": [
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance > ( SELECT Avg ( T2.balance ) FROM SAVINGS AS T2 )",
                -0.21308231353759766
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance > ( SELECT Avg ( T3.balance ) FROM SAVINGS AS T3 )",
                -2.304305076599121
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance > ( SELECT Avg ( T3.balance ) FROM CHECKING AS T3 )",
                -2.513181686401367
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance > ( SELECT Avg ( T2.balance ) FROM CHECKING AS T2 )",
                -4.608489036560059
            ],
            [
                "SELECT balance FROM SAVINGS WHERE balance > ( SELECT Avg ( balance ) FROM SAVINGS )",
                -7.710208892822266
            ],
            [
                "SELECT T3.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T2.custid = T1.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid WHERE T2.balance > ( SELECT Avg ( T2.balance ) FROM SAVINGS AS T2 )",
                -8.890779495239258
            ],
            [
                "SELECT T3.custid FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T2.custid = T1.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid WHERE T2.balance > ( SELECT Avg ( T2.balance ) FROM SAVINGS AS T2 )",
                -9.661072731018066
            ],
            [
                "SELECT T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T2.custid = T1.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid WHERE T3.balance > ( SELECT Avg ( T2.balance ) FROM SAVINGS AS T2 )",
                -9.859664916992188
            ],
            [
                "SELECT T1.balance FROM SAVINGS AS T1 WHERE T1.balance > ( SELECT Avg ( T2.balance ) FROM CHECKING AS T2 )",
                -10.00293254852295
            ],
            [
                "SELECT custid FROM SAVINGS WHERE balance > ( SELECT Avg ( balance ) FROM SAVINGS )",
                -10.274576187133789
            ],
            [
                "SELECT T1.custid FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance > ( SELECT Avg ( T2.balance ) FROM SAVINGS AS T2 )",
                -10.319096565246582
            ],
            [
                "SELECT * FROM SAVINGS WHERE balance > ( SELECT Avg ( balance ) FROM SAVINGS )",
                -10.684242248535156
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance > ( SELECT Avg ( T2.balance ) , Avg ( T2.balance ) FROM SAVINGS AS T2 )",
                -10.817083358764648
            ],
            [
                "SELECT Max ( balance ) FROM SAVINGS",
                -10.898796558380127
            ],
            [
                "SELECT T1.balance FROM CHECKING AS T1 WHERE T1.balance > ( SELECT Avg ( T2.balance ) FROM SAVINGS AS T2 )",
                -11.036445617675781
            ],
            [
                "SELECT T3.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T2.custid = T1.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid WHERE T2.balance > ( SELECT Avg ( T3.balance ) FROM CHECKING AS T3 )",
                -11.182945251464844
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance > ( SELECT T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid GROUP BY T1.name ORDER BY Avg ( T2.balance ) Desc LIMIT value )",
                -11.476923942565918
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid GROUP BY T1.name HAVING Avg ( T2.balance ) > ( SELECT Avg ( T2.balance ) FROM SAVINGS AS T2 )",
                -11.599337577819824
            ],
            [
                "SELECT Max ( balance ) FROM CHECKING",
                -12.70387601852417
            ],
            [
                "SELECT name FROM ACCOUNTS",
                -15.13523006439209
            ]
        ],
        "predicted_parse_with_values": "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance > ( SELECT Avg ( T2.balance ) FROM SAVINGS AS T2 )",
        "template_feedback": "in step 1 , use checking table in place of savings table in step 2 , additionally use the information from the accounts table besides the savings table . additionally make sure that savings 's balance is greater than average savings 's balance savings . find name in place of average savings 's balance . in step 3 , make sure the name is one of the results of step 2 the savings 's balance is greater than the results of step 2 . find savings 's balance in place of name .",
        "primary_span": [
            [
                4,
                6
            ],
            [
                16,
                23
            ],
            [
                29,
                44
            ],
            [
                45,
                46
            ],
            [
                59,
                70
            ],
            [
                84,
                87
            ]
        ],
        "secondary_span": [
            [
                7,
                11
            ],
            [
                24,
                28
            ],
            [
                47,
                54
            ],
            [
                71,
                83
            ],
            [
                88,
                92
            ]
        ],
        "edits": [
            "balance",
            "name",
            "checking",
            "savings",
            "name one of SUBS1",
            "balance greater than SUBS1",
            "name",
            "average balance",
            "accounts",
            "balance greater than SUBS1",
            "average balance",
            "savings"
        ],
        "edits_original": "< select > add balance </ select > < select > remove name </ select > < from > add checking </ from > < from > remove savings </ from > < where > add name one of SUBS1 </ where > < where > remove balance greater than SUBS1 </ where > < select > add name </ select > < select > remove average balance </ select > < from > add accounts </ from > < where > add balance greater than SUBS1 </ where > < select > add average balance </ select > < from > add savings </ from >"
    },
    {
        "db_id": "small_bank_1",
        "question": "What are the balances of checking accounts belonging to people with savings balances greater than the average savings balance?",
        "gold_parse": "SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name IN (SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM savings))",
        "predicted_parse": "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance > ( SELECT Avg ( T2.balance ) FROM SAVINGS AS T2 )",
        "predicted_parse_explanation": [
            "Step 1: for each row in accounts table , find the corresponding rows in savings table",
            "Step 2: find the average balance in savings table",
            "Step 3: find the name of the results of step 1 whose balance greater than the results of step 2"
        ],
        "feedback": "you should use checking table in place of savings table and balance in place of name of checking table in step 2 and 3 respectively.",
        "beam": [
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance > ( SELECT Avg ( T2.balance ) FROM SAVINGS AS T2 )",
                -0.21308231353759766
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance > ( SELECT Avg ( T3.balance ) FROM SAVINGS AS T3 )",
                -2.304305076599121
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance > ( SELECT Avg ( T3.balance ) FROM CHECKING AS T3 )",
                -2.513181686401367
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance > ( SELECT Avg ( T2.balance ) FROM CHECKING AS T2 )",
                -4.608489036560059
            ],
            [
                "SELECT balance FROM SAVINGS WHERE balance > ( SELECT Avg ( balance ) FROM SAVINGS )",
                -7.710208892822266
            ],
            [
                "SELECT T3.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T2.custid = T1.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid WHERE T2.balance > ( SELECT Avg ( T2.balance ) FROM SAVINGS AS T2 )",
                -8.890779495239258
            ],
            [
                "SELECT T3.custid FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T2.custid = T1.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid WHERE T2.balance > ( SELECT Avg ( T2.balance ) FROM SAVINGS AS T2 )",
                -9.661072731018066
            ],
            [
                "SELECT T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T2.custid = T1.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid WHERE T3.balance > ( SELECT Avg ( T2.balance ) FROM SAVINGS AS T2 )",
                -9.859664916992188
            ],
            [
                "SELECT T1.balance FROM SAVINGS AS T1 WHERE T1.balance > ( SELECT Avg ( T2.balance ) FROM CHECKING AS T2 )",
                -10.00293254852295
            ],
            [
                "SELECT custid FROM SAVINGS WHERE balance > ( SELECT Avg ( balance ) FROM SAVINGS )",
                -10.274576187133789
            ],
            [
                "SELECT T1.custid FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance > ( SELECT Avg ( T2.balance ) FROM SAVINGS AS T2 )",
                -10.319096565246582
            ],
            [
                "SELECT * FROM SAVINGS WHERE balance > ( SELECT Avg ( balance ) FROM SAVINGS )",
                -10.684242248535156
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance > ( SELECT Avg ( T2.balance ) , Avg ( T2.balance ) FROM SAVINGS AS T2 )",
                -10.817083358764648
            ],
            [
                "SELECT Max ( balance ) FROM SAVINGS",
                -10.898796558380127
            ],
            [
                "SELECT T1.balance FROM CHECKING AS T1 WHERE T1.balance > ( SELECT Avg ( T2.balance ) FROM SAVINGS AS T2 )",
                -11.036445617675781
            ],
            [
                "SELECT T3.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T2.custid = T1.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid WHERE T2.balance > ( SELECT Avg ( T3.balance ) FROM CHECKING AS T3 )",
                -11.182945251464844
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance > ( SELECT T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid GROUP BY T1.name ORDER BY Avg ( T2.balance ) Desc LIMIT value )",
                -11.476923942565918
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid GROUP BY T1.name HAVING Avg ( T2.balance ) > ( SELECT Avg ( T2.balance ) FROM SAVINGS AS T2 )",
                -11.599337577819824
            ],
            [
                "SELECT Max ( balance ) FROM CHECKING",
                -12.70387601852417
            ],
            [
                "SELECT name FROM ACCOUNTS",
                -15.13523006439209
            ]
        ],
        "predicted_parse_with_values": "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance > ( SELECT Avg ( T2.balance ) FROM SAVINGS AS T2 )",
        "template_feedback": "in step 1 , use checking table in place of savings table in step 2 , additionally use the information from the accounts table besides the savings table . additionally make sure that savings 's balance is greater than average savings 's balance savings . find name in place of average savings 's balance . in step 3 , make sure the name is one of the results of step 2 the savings 's balance is greater than the results of step 2 . find savings 's balance in place of name .",
        "primary_span": [
            [
                4,
                6
            ],
            [
                16,
                23
            ],
            [
                29,
                44
            ],
            [
                45,
                46
            ],
            [
                59,
                70
            ],
            [
                84,
                87
            ]
        ],
        "secondary_span": [
            [
                7,
                11
            ],
            [
                24,
                28
            ],
            [
                47,
                54
            ],
            [
                71,
                83
            ],
            [
                88,
                92
            ]
        ],
        "edits": [
            "balance",
            "name",
            "checking",
            "savings",
            "name one of SUBS1",
            "balance greater than SUBS1",
            "name",
            "average balance",
            "accounts",
            "balance greater than SUBS1",
            "average balance",
            "savings"
        ],
        "edits_original": "< select > add balance </ select > < select > remove name </ select > < from > add checking </ from > < from > remove savings </ from > < where > add name one of SUBS1 </ where > < where > remove balance greater than SUBS1 </ where > < select > add name </ select > < select > remove average balance </ select > < from > add accounts </ from > < where > add balance greater than SUBS1 </ where > < select > add average balance </ select > < from > add savings </ from >"
    },
    {
        "db_id": "small_bank_1",
        "question": "What are the customer id and name corresponding to accounts with a checking balance less than the largest checking balance?",
        "gold_parse": "SELECT T1.custid ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT max(balance) FROM checking)",
        "predicted_parse": "SELECT custid , name FROM ACCOUNTS WHERE name < value",
        "predicted_parse_explanation": [
            "find the customer id and name in accounts table whose name less than Brown"
        ],
        "feedback": "Remove last part . and make sure customer checking balance is not more than highest checking balance .",
        "beam": [
            [
                "SELECT custid , name FROM ACCOUNTS WHERE name < value",
                -0.6011896133422852
            ],
            [
                "SELECT T1.custid , T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Max ( T2.balance ) FROM CHECKING AS T2 )",
                -1.0835676193237305
            ],
            [
                "SELECT T1.custid , T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Max ( T3.balance ) FROM SAVINGS AS T3 )",
                -2.8608322143554688
            ],
            [
                "SELECT T1.custid , T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Max ( T3.balance ) FROM CHECKING AS T3 )",
                -3.2929811477661133
            ],
            [
                "SELECT T1.custid , T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Max ( T2.balance ) FROM SAVINGS AS T2 )",
                -5.07258415222168
            ],
            [
                "SELECT T1.custid , T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Max ( T2.balance ) FROM CHECKING AS T2 GROUP BY T2.custid ORDER BY Avg ( T2.balance ) Desc LIMIT value )",
                -5.9627885818481445
            ],
            [
                "SELECT T1.custid , T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Max ( T2.balance ) FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid GROUP BY T1.custid ORDER BY Avg ( T2.balance ) Desc LIMIT value )",
                -6.669614791870117
            ],
            [
                "SELECT T1.custid , T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Max ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T3 ON T3.custid = T1.custid JOIN CHECKING AS T2 ON T1.custid = T2.custid GROUP BY T3.custid ORDER BY Avg ( T2.balance ) Desc LIMIT value )",
                -6.937324523925781
            ],
            [
                "SELECT T1.custid , T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Max ( T2.balance ) FROM CHECKING AS T2 GROUP BY T2.custid ORDER BY Count ( * ) Desc LIMIT value )",
                -7.246160507202148
            ],
            [
                "SELECT T1.custid , T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Max ( T3.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T3 ON T3.custid = T1.custid JOIN CHECKING AS T2 ON T1.custid = T2.custid GROUP BY T2.custid ORDER BY Avg ( T2.balance ) Desc LIMIT value )",
                -7.337954044342041
            ],
            [
                "SELECT T1.custid , T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance < T1.custid",
                -7.55607795715332
            ],
            [
                "SELECT T1.custid , T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Max ( T3.balance ) FROM CHECKING AS T3 GROUP BY T3.custid ORDER BY Avg ( T3.balance ) Desc LIMIT value )",
                -7.6938700675964355
            ],
            [
                "SELECT T1.custid , T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Max ( T2.balance ) FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid GROUP BY T1.custid ORDER BY Count ( * ) Desc LIMIT value )",
                -7.769623756408691
            ],
            [
                "SELECT T1.custid , T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Max ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T3 ON T3.custid = T1.custid JOIN CHECKING AS T2 ON T1.custid = T2.custid GROUP BY T2.custid ORDER BY Avg ( T3.balance ) Desc LIMIT value )",
                -7.945181846618652
            ],
            [
                "SELECT T2.custid , T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T1.name < value",
                -8.028169631958008
            ],
            [
                "SELECT T1.custid , T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance < value",
                -9.233964920043945
            ],
            [
                "SELECT T1.custid , T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < T1.custid",
                -9.327146530151367
            ],
            [
                "SELECT T2.custid , T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name < value",
                -10.384123802185059
            ],
            [
                "SELECT custid , name FROM ACCOUNTS",
                -12.691492080688477
            ],
            [
                "SELECT custid FROM ACCOUNTS WHERE name < value",
                -14.986223220825195
            ]
        ],
        "predicted_parse_with_values": "SELECT custid , name FROM ACCOUNTS WHERE name < \"Brown\"",
        "template_feedback": "additionally use the information from the checking table besides the accounts table . consider the balance is less than maximum balance checking conditions in place of the name less than Brown conditions .",
        "primary_span": [
            [
                0,
                7
            ],
            [
                13,
                22
            ]
        ],
        "secondary_span": [
            [
                8,
                12
            ],
            [
                23,
                32
            ]
        ],
        "edits": [
            "checking",
            "balance less than SUBS1",
            "name less than \"Brown\"",
            "maximum balance",
            "checking"
        ],
        "edits_original": "< from > add checking </ from > < where > add balance less than SUBS1 </ where > < where > remove name less than \" Brown \" </ where > < select > add maximum balance </ select > < from > add checking </ from >"
    },
    {
        "db_id": "small_bank_1",
        "question": "What are the customer id and name corresponding to accounts with a checking balance less than the largest checking balance?",
        "gold_parse": "SELECT T1.custid ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT max(balance) FROM checking)",
        "predicted_parse": "SELECT custid , name FROM ACCOUNTS WHERE name < value",
        "predicted_parse_explanation": [
            "find the customer id and name in accounts table whose name less than Brown"
        ],
        "feedback": "you should apply the condition that the checking balance is less than the greatest checking balance and also drop last part.",
        "beam": [
            [
                "SELECT custid , name FROM ACCOUNTS WHERE name < value",
                -0.6011896133422852
            ],
            [
                "SELECT T1.custid , T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Max ( T2.balance ) FROM CHECKING AS T2 )",
                -1.0835676193237305
            ],
            [
                "SELECT T1.custid , T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Max ( T3.balance ) FROM SAVINGS AS T3 )",
                -2.8608322143554688
            ],
            [
                "SELECT T1.custid , T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Max ( T3.balance ) FROM CHECKING AS T3 )",
                -3.2929811477661133
            ],
            [
                "SELECT T1.custid , T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Max ( T2.balance ) FROM SAVINGS AS T2 )",
                -5.07258415222168
            ],
            [
                "SELECT T1.custid , T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Max ( T2.balance ) FROM CHECKING AS T2 GROUP BY T2.custid ORDER BY Avg ( T2.balance ) Desc LIMIT value )",
                -5.9627885818481445
            ],
            [
                "SELECT T1.custid , T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Max ( T2.balance ) FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid GROUP BY T1.custid ORDER BY Avg ( T2.balance ) Desc LIMIT value )",
                -6.669614791870117
            ],
            [
                "SELECT T1.custid , T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Max ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T3 ON T3.custid = T1.custid JOIN CHECKING AS T2 ON T1.custid = T2.custid GROUP BY T3.custid ORDER BY Avg ( T2.balance ) Desc LIMIT value )",
                -6.937324523925781
            ],
            [
                "SELECT T1.custid , T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Max ( T2.balance ) FROM CHECKING AS T2 GROUP BY T2.custid ORDER BY Count ( * ) Desc LIMIT value )",
                -7.246160507202148
            ],
            [
                "SELECT T1.custid , T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Max ( T3.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T3 ON T3.custid = T1.custid JOIN CHECKING AS T2 ON T1.custid = T2.custid GROUP BY T2.custid ORDER BY Avg ( T2.balance ) Desc LIMIT value )",
                -7.337954044342041
            ],
            [
                "SELECT T1.custid , T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance < T1.custid",
                -7.55607795715332
            ],
            [
                "SELECT T1.custid , T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Max ( T3.balance ) FROM CHECKING AS T3 GROUP BY T3.custid ORDER BY Avg ( T3.balance ) Desc LIMIT value )",
                -7.6938700675964355
            ],
            [
                "SELECT T1.custid , T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Max ( T2.balance ) FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid GROUP BY T1.custid ORDER BY Count ( * ) Desc LIMIT value )",
                -7.769623756408691
            ],
            [
                "SELECT T1.custid , T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Max ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T3 ON T3.custid = T1.custid JOIN CHECKING AS T2 ON T1.custid = T2.custid GROUP BY T2.custid ORDER BY Avg ( T3.balance ) Desc LIMIT value )",
                -7.945181846618652
            ],
            [
                "SELECT T2.custid , T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T1.name < value",
                -8.028169631958008
            ],
            [
                "SELECT T1.custid , T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance < value",
                -9.233964920043945
            ],
            [
                "SELECT T1.custid , T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < T1.custid",
                -9.327146530151367
            ],
            [
                "SELECT T2.custid , T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name < value",
                -10.384123802185059
            ],
            [
                "SELECT custid , name FROM ACCOUNTS",
                -12.691492080688477
            ],
            [
                "SELECT custid FROM ACCOUNTS WHERE name < value",
                -14.986223220825195
            ]
        ],
        "predicted_parse_with_values": "SELECT custid , name FROM ACCOUNTS WHERE name < \"Brown\"",
        "template_feedback": "additionally use the information from the checking table besides the accounts table . consider the balance is less than maximum balance checking conditions in place of the name less than Brown conditions .",
        "primary_span": [
            [
                0,
                7
            ],
            [
                13,
                22
            ]
        ],
        "secondary_span": [
            [
                8,
                12
            ],
            [
                23,
                32
            ]
        ],
        "edits": [
            "checking",
            "balance less than SUBS1",
            "name less than \"Brown\"",
            "maximum balance",
            "checking"
        ],
        "edits_original": "< from > add checking </ from > < where > add balance less than SUBS1 </ where > < where > remove name less than \" Brown \" </ where > < select > add maximum balance </ select > < from > add checking </ from >"
    },
    {
        "db_id": "small_bank_1",
        "question": "Find the number of checking accounts for each account name.",
        "gold_parse": "SELECT count(*) ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name",
        "predicted_parse": "SELECT Count ( * ) FROM ACCOUNTS",
        "predicted_parse_explanation": [
            "find the number of rows in accounts table"
        ],
        "feedback": "There should be checking table instead of accounts table .",
        "beam": [
            [
                "SELECT Count ( * ) FROM ACCOUNTS",
                -0.002040863037109375
            ],
            [
                "SELECT Count ( * ) , name FROM ACCOUNTS GROUP BY name",
                -6.967874526977539
            ],
            [
                "SELECT Count ( * ) FROM ACCOUNTS GROUP BY name",
                -7.0114850997924805
            ],
            [
                "SELECT Count ( DISTINCT name ) FROM ACCOUNTS",
                -9.131893157958984
            ],
            [
                "SELECT name , Count ( * ) FROM ACCOUNTS GROUP BY name",
                -10.198246955871582
            ],
            [
                "SELECT Sum ( name ) FROM ACCOUNTS",
                -11.013705253601074
            ],
            [
                "SELECT Count ( * ) FROM ACCOUNTS WHERE name = value",
                -11.902125358581543
            ],
            [
                "SELECT Count ( * ) FROM ACCOUNTS GROUP BY name HAVING name = value",
                -12.780008792877197
            ],
            [
                "SELECT Count ( * ) FROM ACCOUNTS WHERE name = value GROUP BY name",
                -12.977907180786133
            ],
            [
                "SELECT name FROM ACCOUNTS GROUP BY name",
                -13.657883644104004
            ],
            [
                "SELECT Count ( * ) FROM ACCOUNTS ORDER BY name Asc",
                -13.820220947265625
            ],
            [
                "SELECT name FROM ACCOUNTS GROUP BY name HAVING Count ( * ) = value",
                -14.020001411437988
            ],
            [
                "SELECT name FROM ACCOUNTS",
                -14.075249671936035
            ],
            [
                "SELECT Sum ( name ) , name FROM ACCOUNTS GROUP BY name",
                -14.323942184448242
            ],
            [
                "SELECT Count ( * ) FROM ACCOUNTS GROUP BY name HAVING Count ( * ) = value",
                -14.62617015838623
            ],
            [
                "SELECT DISTINCT Count ( * ) FROM ACCOUNTS",
                -14.7362699508667
            ],
            [
                "SELECT Count ( * ) FROM ACCOUNTS GROUP BY name ORDER BY Count ( * ) Asc",
                -15.364945411682129
            ],
            [
                "SELECT Count ( DISTINCT * ) FROM ACCOUNTS",
                -15.588500022888184
            ],
            [
                "SELECT Count ( * ) , name FROM ACCOUNTS",
                -15.670694351196289
            ],
            [
                "SELECT Count ( * ) FROM ACCOUNTS LIMIT value",
                -15.787361145019531
            ]
        ],
        "predicted_parse_with_values": "SELECT Count ( * ) FROM ACCOUNTS",
        "template_feedback": "additionally use the information from the checking table besides the accounts table . find for each value of name . additionally find name .",
        "primary_span": [
            [
                0,
                7
            ],
            [
                13,
                19
            ],
            [
                20,
                23
            ]
        ],
        "secondary_span": [
            [
                8,
                12
            ]
        ],
        "edits": [
            "name",
            "checking",
            "name"
        ],
        "edits_original": "< select > add name </ select > < from > add checking </ from > < groupBy > add name </ groupBy >"
    },
    {
        "db_id": "small_bank_1",
        "question": "Find the number of checking accounts for each account name.",
        "gold_parse": "SELECT count(*) ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name",
        "predicted_parse": "SELECT Count ( * ) FROM ACCOUNTS",
        "predicted_parse_explanation": [
            "find the number of rows in accounts table"
        ],
        "feedback": "You must use table of checking in place of table of accounts.",
        "beam": [
            [
                "SELECT Count ( * ) FROM ACCOUNTS",
                -0.002040863037109375
            ],
            [
                "SELECT Count ( * ) , name FROM ACCOUNTS GROUP BY name",
                -6.967874526977539
            ],
            [
                "SELECT Count ( * ) FROM ACCOUNTS GROUP BY name",
                -7.0114850997924805
            ],
            [
                "SELECT Count ( DISTINCT name ) FROM ACCOUNTS",
                -9.131893157958984
            ],
            [
                "SELECT name , Count ( * ) FROM ACCOUNTS GROUP BY name",
                -10.198246955871582
            ],
            [
                "SELECT Sum ( name ) FROM ACCOUNTS",
                -11.013705253601074
            ],
            [
                "SELECT Count ( * ) FROM ACCOUNTS WHERE name = value",
                -11.902125358581543
            ],
            [
                "SELECT Count ( * ) FROM ACCOUNTS GROUP BY name HAVING name = value",
                -12.780008792877197
            ],
            [
                "SELECT Count ( * ) FROM ACCOUNTS WHERE name = value GROUP BY name",
                -12.977907180786133
            ],
            [
                "SELECT name FROM ACCOUNTS GROUP BY name",
                -13.657883644104004
            ],
            [
                "SELECT Count ( * ) FROM ACCOUNTS ORDER BY name Asc",
                -13.820220947265625
            ],
            [
                "SELECT name FROM ACCOUNTS GROUP BY name HAVING Count ( * ) = value",
                -14.020001411437988
            ],
            [
                "SELECT name FROM ACCOUNTS",
                -14.075249671936035
            ],
            [
                "SELECT Sum ( name ) , name FROM ACCOUNTS GROUP BY name",
                -14.323942184448242
            ],
            [
                "SELECT Count ( * ) FROM ACCOUNTS GROUP BY name HAVING Count ( * ) = value",
                -14.62617015838623
            ],
            [
                "SELECT DISTINCT Count ( * ) FROM ACCOUNTS",
                -14.7362699508667
            ],
            [
                "SELECT Count ( * ) FROM ACCOUNTS GROUP BY name ORDER BY Count ( * ) Asc",
                -15.364945411682129
            ],
            [
                "SELECT Count ( DISTINCT * ) FROM ACCOUNTS",
                -15.588500022888184
            ],
            [
                "SELECT Count ( * ) , name FROM ACCOUNTS",
                -15.670694351196289
            ],
            [
                "SELECT Count ( * ) FROM ACCOUNTS LIMIT value",
                -15.787361145019531
            ]
        ],
        "predicted_parse_with_values": "SELECT Count ( * ) FROM ACCOUNTS",
        "template_feedback": "additionally use the information from the checking table besides the accounts table . find for each value of name . additionally find name .",
        "primary_span": [
            [
                0,
                7
            ],
            [
                13,
                19
            ],
            [
                20,
                23
            ]
        ],
        "secondary_span": [
            [
                8,
                12
            ]
        ],
        "edits": [
            "name",
            "checking",
            "name"
        ],
        "edits_original": "< select > add name </ select > < from > add checking </ from > < groupBy > add name </ groupBy >"
    },
    {
        "db_id": "small_bank_1",
        "question": "Find the name and savings balance of the top 3 accounts with the highest saving balance sorted by savings balance in descending order.",
        "gold_parse": "SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid ORDER BY T2.balance DESC LIMIT 3",
        "predicted_parse": "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Desc",
        "predicted_parse_explanation": [
            "Step 1: for each row in accounts table , find the corresponding rows in savings table",
            "Step 2: find the name and balance of the results of step 1 ordered descending by balance"
        ],
        "feedback": "Make sure only top 3 accounts are needed .",
        "beam": [
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Desc",
                -0.09141325950622559
            ],
            [
                "SELECT T1.name , T3.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T2.balance Desc",
                -3.1604816913604736
            ],
            [
                "SELECT T1.name , T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Desc",
                -4.356148719787598
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T3.balance Desc",
                -4.611201047897339
            ],
            [
                "SELECT T1.name , T3.custid FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T2.balance Desc",
                -4.702602386474609
            ],
            [
                "SELECT T1.name , T2.custid FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Desc",
                -5.03753137588501
            ],
            [
                "SELECT T1.name , T1.custid FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Desc",
                -5.351662635803223
            ],
            [
                "SELECT T1.name , * FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Desc",
                -6.8516645431518555
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Desc",
                -7.695110082626343
            ],
            [
                "SELECT T1.name , T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Desc",
                -9.096985816955566
            ],
            [
                "SELECT T1.name , T2.custid FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Desc",
                -9.480705261230469
            ],
            [
                "SELECT T1.name , T2.custid FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T3.balance Desc",
                -9.825417041778564
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T1.name Desc",
                -10.067270040512085
            ],
            [
                "SELECT T1.name , T1.custid FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Desc",
                -10.140053749084473
            ],
            [
                "SELECT T1.name , * FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Desc",
                -11.612003326416016
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Desc",
                -11.659104347229004
            ],
            [
                "SELECT T1.name , T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Desc",
                -12.113584041595459
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc",
                -12.243911504745483
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance , T2.balance Desc",
                -12.49084734916687
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid",
                -14.545898914337158
            ]
        ],
        "predicted_parse_with_values": "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Desc",
        "template_feedback": "in step 2 , only show me the first 3 results .",
        "primary_span": [
            [
                4,
                11
            ]
        ],
        "secondary_span": [],
        "edits": [
            "3"
        ],
        "edits_original": "< limit > add 3 </ limit >"
    },
    {
        "db_id": "small_bank_1",
        "question": "Find the name and savings balance of the top 3 accounts with the highest saving balance sorted by savings balance in descending order.",
        "gold_parse": "SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid ORDER BY T2.balance DESC LIMIT 3",
        "predicted_parse": "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Desc",
        "predicted_parse_explanation": [
            "Step 1: for each row in accounts table , find the corresponding rows in savings table",
            "Step 2: find the name and balance of the results of step 1 ordered descending by balance"
        ],
        "feedback": "Confirm need is of just most 3 accounts.",
        "beam": [
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Desc",
                -0.09141325950622559
            ],
            [
                "SELECT T1.name , T3.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T2.balance Desc",
                -3.1604816913604736
            ],
            [
                "SELECT T1.name , T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Desc",
                -4.356148719787598
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T3.balance Desc",
                -4.611201047897339
            ],
            [
                "SELECT T1.name , T3.custid FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T2.balance Desc",
                -4.702602386474609
            ],
            [
                "SELECT T1.name , T2.custid FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Desc",
                -5.03753137588501
            ],
            [
                "SELECT T1.name , T1.custid FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Desc",
                -5.351662635803223
            ],
            [
                "SELECT T1.name , * FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Desc",
                -6.8516645431518555
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Desc",
                -7.695110082626343
            ],
            [
                "SELECT T1.name , T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Desc",
                -9.096985816955566
            ],
            [
                "SELECT T1.name , T2.custid FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Desc",
                -9.480705261230469
            ],
            [
                "SELECT T1.name , T2.custid FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T3.balance Desc",
                -9.825417041778564
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T1.name Desc",
                -10.067270040512085
            ],
            [
                "SELECT T1.name , T1.custid FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Desc",
                -10.140053749084473
            ],
            [
                "SELECT T1.name , * FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Desc",
                -11.612003326416016
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Desc",
                -11.659104347229004
            ],
            [
                "SELECT T1.name , T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Desc",
                -12.113584041595459
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc",
                -12.243911504745483
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance , T2.balance Desc",
                -12.49084734916687
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid",
                -14.545898914337158
            ]
        ],
        "predicted_parse_with_values": "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Desc",
        "template_feedback": "in step 2 , only show me the first 3 results .",
        "primary_span": [
            [
                4,
                11
            ]
        ],
        "secondary_span": [],
        "edits": [
            "3"
        ],
        "edits_original": "< limit > add 3 </ limit >"
    },
    {
        "db_id": "small_bank_1",
        "question": "What are the names, checking balances, and savings balances of customers, ordered by the total of checking and savings balances descending?",
        "gold_parse": "SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance DESC",
        "predicted_parse": "SELECT T1.name , T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Desc",
        "predicted_parse_explanation": [
            "Step 1: for each row in accounts table , find the corresponding rows in savings table",
            "Step 2: find the name , name , balance of the results of step 1 ordered descending by balance"
        ],
        "feedback": "Show balance of saving and checking . Order descending with summation of checking and savings balances",
        "beam": [
            [
                "SELECT T1.name , T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Desc",
                -0.6802141666412354
            ],
            [
                "SELECT T1.name , T1.name , T3.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T2.balance Desc",
                -1.8407714366912842
            ],
            [
                "SELECT T1.name , T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T3.balance Desc",
                -2.3918306827545166
            ],
            [
                "SELECT T1.name , T2.balance , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Desc",
                -2.485330581665039
            ],
            [
                "SELECT T1.name , T3.balance , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T2.balance Desc",
                -3.438661813735962
            ],
            [
                "SELECT T1.name , T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Desc",
                -3.553025960922241
            ],
            [
                "SELECT T1.name , T3.custid , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T2.balance Desc",
                -3.7195420265197754
            ],
            [
                "SELECT T1.name , T2.balance , T3.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T2.balance Desc",
                -4.094022750854492
            ],
            [
                "SELECT T1.name , T2.balance , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T3.balance Desc",
                -4.2073516845703125
            ],
            [
                "SELECT T1.name , T2.custid , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Desc",
                -4.806893348693848
            ],
            [
                "SELECT T1.name , T3.custid , T3.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T2.balance Desc",
                -4.953092575073242
            ],
            [
                "SELECT T1.name , T3.balance , T3.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T2.balance Desc",
                -5.077471971511841
            ],
            [
                "SELECT T1.name , T3.balance , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T3.balance Desc",
                -5.1627514362335205
            ],
            [
                "SELECT T1.name , T3.custid , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T3.balance Desc",
                -5.44209623336792
            ],
            [
                "SELECT T1.name , T2.balance , T3.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T3.balance Desc",
                -5.819089889526367
            ],
            [
                "SELECT T1.name , T2.custid , T3.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T2.balance Desc",
                -6.021956443786621
            ],
            [
                "SELECT T1.name , T2.custid , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T3.balance Desc",
                -6.523215293884277
            ],
            [
                "SELECT T1.name , T2.custid , T2.balance FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Desc",
                -6.677599906921387
            ],
            [
                "SELECT T1.name , T2.balance , T2.balance FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Desc",
                -6.805418252944946
            ],
            [
                "SELECT T1.name , T2.custid , T3.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T3.balance Desc",
                -7.739971160888672
            ]
        ],
        "predicted_parse_with_values": "SELECT T1.name , T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Desc",
        "template_feedback": "in step 1 , additionally use the information from the checking table . in step 2 , additionally find checking 's balance . order the results by checking 's balance plus savings 's balance in place of savings 's balance .",
        "primary_span": [
            [
                4,
                12
            ],
            [
                17,
                22
            ],
            [
                23,
                33
            ]
        ],
        "secondary_span": [
            [
                34,
                40
            ]
        ],
        "edits": [
            "balance",
            "name",
            "checking",
            "balance plus balance",
            "balance"
        ],
        "edits_original": "< select > add balance </ select > < select > remove name </ select > < from > add checking </ from > < orderBy > add balance plus balance </ orderBy > < orderBy > remove balance </ orderBy >"
    },
    {
        "db_id": "small_bank_1",
        "question": "What are the names, checking balances, and savings balances of customers, ordered by the total of checking and savings balances descending?",
        "gold_parse": "SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance DESC",
        "predicted_parse": "SELECT T1.name , T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Desc",
        "predicted_parse_explanation": [
            "Step 1: for each row in accounts table , find the corresponding rows in savings table",
            "Step 2: find the name , name , balance of the results of step 1 ordered descending by balance"
        ],
        "feedback": "the total of checking and savings balances should be in downward form and display the balance of saving and checking.",
        "beam": [
            [
                "SELECT T1.name , T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Desc",
                -0.6802141666412354
            ],
            [
                "SELECT T1.name , T1.name , T3.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T2.balance Desc",
                -1.8407714366912842
            ],
            [
                "SELECT T1.name , T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T3.balance Desc",
                -2.3918306827545166
            ],
            [
                "SELECT T1.name , T2.balance , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Desc",
                -2.485330581665039
            ],
            [
                "SELECT T1.name , T3.balance , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T2.balance Desc",
                -3.438661813735962
            ],
            [
                "SELECT T1.name , T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Desc",
                -3.553025960922241
            ],
            [
                "SELECT T1.name , T3.custid , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T2.balance Desc",
                -3.7195420265197754
            ],
            [
                "SELECT T1.name , T2.balance , T3.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T2.balance Desc",
                -4.094022750854492
            ],
            [
                "SELECT T1.name , T2.balance , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T3.balance Desc",
                -4.2073516845703125
            ],
            [
                "SELECT T1.name , T2.custid , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Desc",
                -4.806893348693848
            ],
            [
                "SELECT T1.name , T3.custid , T3.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T2.balance Desc",
                -4.953092575073242
            ],
            [
                "SELECT T1.name , T3.balance , T3.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T2.balance Desc",
                -5.077471971511841
            ],
            [
                "SELECT T1.name , T3.balance , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T3.balance Desc",
                -5.1627514362335205
            ],
            [
                "SELECT T1.name , T3.custid , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T3.balance Desc",
                -5.44209623336792
            ],
            [
                "SELECT T1.name , T2.balance , T3.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T3.balance Desc",
                -5.819089889526367
            ],
            [
                "SELECT T1.name , T2.custid , T3.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T2.balance Desc",
                -6.021956443786621
            ],
            [
                "SELECT T1.name , T2.custid , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T3.balance Desc",
                -6.523215293884277
            ],
            [
                "SELECT T1.name , T2.custid , T2.balance FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Desc",
                -6.677599906921387
            ],
            [
                "SELECT T1.name , T2.balance , T2.balance FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Desc",
                -6.805418252944946
            ],
            [
                "SELECT T1.name , T2.custid , T3.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T3.balance Desc",
                -7.739971160888672
            ]
        ],
        "predicted_parse_with_values": "SELECT T1.name , T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Desc",
        "template_feedback": "in step 1 , additionally use the information from the checking table . in step 2 , additionally find checking 's balance . order the results by checking 's balance plus savings 's balance in place of savings 's balance .",
        "primary_span": [
            [
                4,
                12
            ],
            [
                17,
                22
            ],
            [
                23,
                33
            ]
        ],
        "secondary_span": [
            [
                34,
                40
            ]
        ],
        "edits": [
            "balance",
            "name",
            "checking",
            "balance plus balance",
            "balance"
        ],
        "edits_original": "< select > add balance </ select > < select > remove name </ select > < from > add checking </ from > < orderBy > add balance plus balance </ orderBy > < orderBy > remove balance </ orderBy >"
    },
    {
        "db_id": "small_bank_1",
        "question": "What are the checking and savings balances in accounts belonging to Brown?",
        "gold_parse": "SELECT T2.balance ,  T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T1.name  =  'Brown'",
        "predicted_parse": "SELECT * , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
        "predicted_parse_explanation": [
            "Step 1: for each row in accounts table , find the corresponding rows in savings table",
            "Step 2: find the rows and balance of the results of step 1 whose name equals Brown"
        ],
        "feedback": "Also need to add checking table with savings .",
        "beam": [
            [
                "SELECT * , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
                -0.5630106925964355
            ],
            [
                "SELECT T2.balance , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
                -1.0830988883972168
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
                -3.593477249145508
            ],
            [
                "SELECT T3.balance , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid WHERE T1.name = value",
                -4.051864147186279
            ],
            [
                "SELECT T3.custid , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid WHERE T1.name = value",
                -4.266865253448486
            ],
            [
                "SELECT T2.custid , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
                -4.428754806518555
            ],
            [
                "SELECT T2.balance , T3.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid WHERE T1.name = value",
                -4.546908140182495
            ],
            [
                "SELECT * , T2.balance FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
                -5.291868686676025
            ],
            [
                "SELECT T2.balance , * FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
                -5.883729457855225
            ],
            [
                "SELECT T1.custid , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
                -6.56727409362793
            ],
            [
                "SELECT T2.balance , T2.balance FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
                -7.681679725646973
            ],
            [
                "SELECT T2.balance , T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
                -8.276154518127441
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
                -8.509546279907227
            ],
            [
                "SELECT T2.custid , T2.balance FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
                -8.994930744171143
            ],
            [
                "SELECT T2.custid , T3.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid WHERE T1.name = value",
                -9.265176773071289
            ],
            [
                "SELECT T2.balance , * FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
                -9.615010738372803
            ],
            [
                "SELECT * , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name LIKE value",
                -10.85827112197876
            ],
            [
                "SELECT T2.balance , T2.custid FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
                -11.268925189971924
            ],
            [
                "SELECT T2.balance , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name LIKE value",
                -11.295438289642334
            ],
            [
                "SELECT T1.custid , T2.balance FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
                -11.44747543334961
            ]
        ],
        "predicted_parse_with_values": "SELECT * , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name = \"Brown\"",
        "template_feedback": "in step 1 , additionally use the information from the checking table . in step 2 , find checking 's balance in place of rows .",
        "primary_span": [
            [
                4,
                12
            ],
            [
                17,
                20
            ]
        ],
        "secondary_span": [
            [
                21,
                25
            ]
        ],
        "edits": [
            "balance",
            "rows",
            "checking"
        ],
        "edits_original": "< select > add balance </ select > < select > remove rows </ select > < from > add checking </ from >"
    },
    {
        "db_id": "small_bank_1",
        "question": "What are the checking and savings balances in accounts belonging to Brown?",
        "gold_parse": "SELECT T2.balance ,  T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T1.name  =  'Brown'",
        "predicted_parse": "SELECT * , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
        "predicted_parse_explanation": [
            "Step 1: for each row in accounts table , find the corresponding rows in savings table",
            "Step 2: find the rows and balance of the results of step 1 whose name equals Brown"
        ],
        "feedback": "Additionally, You should include checking table along with savings.",
        "beam": [
            [
                "SELECT * , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
                -0.5630106925964355
            ],
            [
                "SELECT T2.balance , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
                -1.0830988883972168
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
                -3.593477249145508
            ],
            [
                "SELECT T3.balance , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid WHERE T1.name = value",
                -4.051864147186279
            ],
            [
                "SELECT T3.custid , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid WHERE T1.name = value",
                -4.266865253448486
            ],
            [
                "SELECT T2.custid , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
                -4.428754806518555
            ],
            [
                "SELECT T2.balance , T3.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid WHERE T1.name = value",
                -4.546908140182495
            ],
            [
                "SELECT * , T2.balance FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
                -5.291868686676025
            ],
            [
                "SELECT T2.balance , * FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
                -5.883729457855225
            ],
            [
                "SELECT T1.custid , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
                -6.56727409362793
            ],
            [
                "SELECT T2.balance , T2.balance FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
                -7.681679725646973
            ],
            [
                "SELECT T2.balance , T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
                -8.276154518127441
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
                -8.509546279907227
            ],
            [
                "SELECT T2.custid , T2.balance FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
                -8.994930744171143
            ],
            [
                "SELECT T2.custid , T3.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid WHERE T1.name = value",
                -9.265176773071289
            ],
            [
                "SELECT T2.balance , * FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
                -9.615010738372803
            ],
            [
                "SELECT * , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name LIKE value",
                -10.85827112197876
            ],
            [
                "SELECT T2.balance , T2.custid FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
                -11.268925189971924
            ],
            [
                "SELECT T2.balance , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name LIKE value",
                -11.295438289642334
            ],
            [
                "SELECT T1.custid , T2.balance FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
                -11.44747543334961
            ]
        ],
        "predicted_parse_with_values": "SELECT * , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name = \"Brown\"",
        "template_feedback": "in step 1 , additionally use the information from the checking table . in step 2 , find checking 's balance in place of rows .",
        "primary_span": [
            [
                4,
                12
            ],
            [
                17,
                20
            ]
        ],
        "secondary_span": [
            [
                21,
                25
            ]
        ],
        "edits": [
            "balance",
            "rows",
            "checking"
        ],
        "edits_original": "< select > add balance </ select > < select > remove rows </ select > < from > add checking </ from >"
    },
    {
        "db_id": "small_bank_1",
        "question": "What is the savings balance of the account belonging to the customer with the highest checking balance?",
        "gold_parse": "SELECT T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance DESC LIMIT 1",
        "predicted_parse": "SELECT balance FROM SAVINGS ORDER BY balance Desc LIMIT value",
        "predicted_parse_explanation": [
            "find the balance in savings table with largest value of balance"
        ],
        "feedback": "Make sure the highest balance should be of checking table .",
        "beam": [
            [
                "SELECT balance FROM SAVINGS ORDER BY balance Desc LIMIT value",
                -0.033463478088378906
            ],
            [
                "SELECT T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T2.custid = T1.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T3.balance Desc LIMIT value",
                -3.925680160522461
            ],
            [
                "SELECT T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T1.name Desc LIMIT value",
                -4.375313758850098
            ],
            [
                "SELECT T3.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T2.custid = T1.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T2.balance Desc LIMIT value",
                -7.725469589233398
            ],
            [
                "SELECT T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T2.custid = T1.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T3.custid Desc LIMIT value",
                -9.817934036254883
            ],
            [
                "SELECT balance FROM SAVINGS ORDER BY custid Desc LIMIT value",
                -9.878002166748047
            ],
            [
                "SELECT balance FROM CHECKING ORDER BY balance Desc LIMIT value",
                -11.59392762184143
            ],
            [
                "SELECT T2.balance FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid ORDER BY T1.name Desc LIMIT value",
                -11.772818088531494
            ],
            [
                "SELECT T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T1.custid Desc LIMIT value",
                -11.898445129394531
            ],
            [
                "SELECT T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name = ( SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Desc LIMIT value )",
                -12.082273960113525
            ],
            [
                "SELECT Max ( balance ) FROM SAVINGS",
                -12.648956298828125
            ],
            [
                "SELECT T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T1.name Desc",
                -12.833977699279785
            ],
            [
                "SELECT T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name = ( SELECT T1.name FROM ACCOUNTS AS T1 ORDER BY T1.name Desc LIMIT value )",
                -13.048497200012207
            ],
            [
                "SELECT balance FROM SAVINGS ORDER BY * Desc LIMIT value",
                -13.15104866027832
            ],
            [
                "SELECT balance FROM SAVINGS ORDER BY balance Desc",
                -13.46739673614502
            ],
            [
                "SELECT balance FROM SAVINGS ORDER BY balance Asc LIMIT value",
                -13.484461784362793
            ],
            [
                "SELECT T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid GROUP BY T1.custid ORDER BY Count ( * ) Desc LIMIT value",
                -14.35217571258545
            ],
            [
                "SELECT T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name = ( SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Desc LIMIT value ) ORDER BY T2.balance Desc LIMIT value",
                -14.411264419555664
            ],
            [
                "SELECT balance FROM SAVINGS ORDER BY DISTINCT balance Desc LIMIT value",
                -15.311739921569824
            ],
            [
                "SELECT balance FROM SAVINGS",
                -18.831364631652832
            ]
        ],
        "predicted_parse_with_values": "SELECT balance FROM SAVINGS ORDER BY balance Desc LIMIT 1",
        "template_feedback": "additionally use the information from the accounts table and checking table besides the savings table . order the results by checking 's balance in place of savings 's balance .",
        "primary_span": [
            [
                0,
                10
            ],
            [
                16,
                22
            ]
        ],
        "secondary_span": [
            [
                11,
                15
            ],
            [
                23,
                29
            ]
        ],
        "edits": [
            "accounts",
            "checking"
        ],
        "edits_original": "< from > add accounts </ from > < from > add checking </ from >"
    },
    {
        "db_id": "small_bank_1",
        "question": "What is the name corresponding to the accoung with the lowest sum of checking and savings balances?",
        "gold_parse": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance LIMIT 1",
        "predicted_parse": "SELECT T1.name , T3.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T2.balance Asc LIMIT value",
        "predicted_parse_explanation": [
            "Step 1: for each row in accounts table , find the corresponding rows in savings table and in checking table",
            "Step 2: find the name and checking 's balance of the results of step 1 with smallest value of savings 's balance"
        ],
        "feedback": "Remove CHECKING's customer id and make sure to find addition of SAVING's and CHECKING's customer id .",
        "beam": [
            [
                "SELECT T1.name , T3.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T2.balance Asc LIMIT value",
                -1.2986602783203125
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -1.337946891784668
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -1.562671184539795
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T3.balance Asc LIMIT value",
                -1.6015591621398926
            ],
            [
                "SELECT T1.name , T3.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T2.balance - T3.balance Asc LIMIT value",
                -5.142330169677734
            ],
            [
                "SELECT T1.name , T3.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T2.balance - T2.balance Asc LIMIT value",
                -5.169656753540039
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid ORDER BY T2.balance - T2.balance Asc LIMIT value",
                -5.3035359382629395
            ],
            [
                "SELECT T1.name , T3.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T3.balance - T2.balance Asc LIMIT value",
                -5.334062576293945
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T2.balance - T3.balance Asc LIMIT value",
                -5.351236343383789
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance - T2.balance Asc LIMIT value",
                -5.378769397735596
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T3.balance - T3.balance Asc LIMIT value",
                -5.512337684631348
            ],
            [
                "SELECT T1.name , T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -5.716294765472412
            ],
            [
                "SELECT T1.name , T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -5.718495845794678
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -5.968747138977051
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -5.99397087097168
            ],
            [
                "SELECT T1.name , * FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -8.44060754776001
            ],
            [
                "SELECT T1.name , * FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -8.496473789215088
            ],
            [
                "SELECT T1.name , T3.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY Sum ( T2.balance ) Asc LIMIT value",
                -9.239612579345703
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid ORDER BY Sum ( T2.balance ) Asc LIMIT value",
                -9.28592586517334
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY Sum ( T2.balance ) Asc LIMIT value",
                -9.54362440109253
            ]
        ],
        "predicted_parse_with_values": "SELECT T1.name , T3.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T2.balance Asc LIMIT 1",
        "template_feedback": "in step 2 , do not return checking 's balance . order the results by checking 's balance plus savings 's balance in place of savings 's balance .",
        "primary_span": [
            [
                4,
                10
            ],
            [
                11,
                21
            ]
        ],
        "secondary_span": [
            [
                22,
                28
            ]
        ],
        "edits": [
            "balance",
            "balance plus balance",
            "balance"
        ],
        "edits_original": "< select > remove balance </ select > < orderBy > add balance plus balance </ orderBy > < orderBy > remove balance </ orderBy >"
    },
    {
        "db_id": "small_bank_1",
        "question": "What is the name corresponding to the accoung with the lowest sum of checking and savings balances?",
        "gold_parse": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance LIMIT 1",
        "predicted_parse": "SELECT T1.name , T3.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T2.balance Asc LIMIT value",
        "predicted_parse_explanation": [
            "Step 1: for each row in accounts table , find the corresponding rows in savings table and in checking table",
            "Step 2: find the name and checking 's balance of the results of step 1 with smallest value of savings 's balance"
        ],
        "feedback": "I want summation of balances of SAVINGS table and CHECKING table.",
        "beam": [
            [
                "SELECT T1.name , T3.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T2.balance Asc LIMIT value",
                -1.2986602783203125
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -1.337946891784668
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -1.562671184539795
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T3.balance Asc LIMIT value",
                -1.6015591621398926
            ],
            [
                "SELECT T1.name , T3.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T2.balance - T3.balance Asc LIMIT value",
                -5.142330169677734
            ],
            [
                "SELECT T1.name , T3.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T2.balance - T2.balance Asc LIMIT value",
                -5.169656753540039
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid ORDER BY T2.balance - T2.balance Asc LIMIT value",
                -5.3035359382629395
            ],
            [
                "SELECT T1.name , T3.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T3.balance - T2.balance Asc LIMIT value",
                -5.334062576293945
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T2.balance - T3.balance Asc LIMIT value",
                -5.351236343383789
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance - T2.balance Asc LIMIT value",
                -5.378769397735596
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T3.balance - T3.balance Asc LIMIT value",
                -5.512337684631348
            ],
            [
                "SELECT T1.name , T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -5.716294765472412
            ],
            [
                "SELECT T1.name , T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -5.718495845794678
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -5.968747138977051
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -5.99397087097168
            ],
            [
                "SELECT T1.name , * FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -8.44060754776001
            ],
            [
                "SELECT T1.name , * FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -8.496473789215088
            ],
            [
                "SELECT T1.name , T3.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY Sum ( T2.balance ) Asc LIMIT value",
                -9.239612579345703
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid ORDER BY Sum ( T2.balance ) Asc LIMIT value",
                -9.28592586517334
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY Sum ( T2.balance ) Asc LIMIT value",
                -9.54362440109253
            ]
        ],
        "predicted_parse_with_values": "SELECT T1.name , T3.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T2.balance Asc LIMIT 1",
        "template_feedback": "in step 2 , do not return checking 's balance . order the results by checking 's balance plus savings 's balance in place of savings 's balance .",
        "primary_span": [
            [
                4,
                10
            ],
            [
                11,
                21
            ]
        ],
        "secondary_span": [
            [
                22,
                28
            ]
        ],
        "edits": [
            "balance",
            "balance plus balance",
            "balance"
        ],
        "edits_original": "< select > remove balance </ select > < orderBy > add balance plus balance </ orderBy > < orderBy > remove balance </ orderBy >"
    },
    {
        "db_id": "small_bank_1",
        "question": "What are the names and balances of checking accounts belonging to the customer with the lowest savings balance?",
        "gold_parse": "SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1",
        "predicted_parse": "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
        "predicted_parse_explanation": [
            "Step 1: for each row in accounts table , find the corresponding rows in savings table",
            "Step 2: find the name and balance of the results of step 1 with smallest value of balance"
        ],
        "feedback": "Make sure name and balance are of customers having checking account .",
        "beam": [
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -0.6884740591049194
            ],
            [
                "SELECT T1.name , T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -1.4701650142669678
            ],
            [
                "SELECT T1.name , T3.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T2.balance Asc LIMIT value",
                -2.059298515319824
            ],
            [
                "SELECT T1.name , T2.custid FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -2.5714519023895264
            ],
            [
                "SELECT T1.name , T3.custid FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T2.balance Asc LIMIT value",
                -3.33135724067688
            ],
            [
                "SELECT T1.name , T1.custid FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -4.431324005126953
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T3.balance Asc LIMIT value",
                -4.890782713890076
            ],
            [
                "SELECT T1.name , T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -5.717388868331909
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -6.258565902709961
            ],
            [
                "SELECT T1.name , * FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -6.686026573181152
            ],
            [
                "SELECT T1.name , T2.custid FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T3.balance Asc LIMIT value",
                -6.755659818649292
            ],
            [
                "SELECT T1.name , T2.custid FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -7.533242464065552
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -8.537806510925293
            ],
            [
                "SELECT T1.name , T1.custid FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -8.6064453125
            ],
            [
                "SELECT T1.name , * FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -10.79817008972168
            ],
            [
                "SELECT T1.name , T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -12.204498767852783
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -12.651464462280273
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Desc LIMIT value",
                -12.66496217250824
            ],
            [
                "SELECT T1.name , T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Desc LIMIT value",
                -13.508841276168823
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance = ( SELECT Min ( T2.balance ) FROM SAVINGS AS T2 ) ORDER BY T2.balance Asc LIMIT value",
                -13.5130033493042
            ]
        ],
        "predicted_parse_with_values": "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT 1",
        "template_feedback": "in step 1 , additionally use the information from the checking table . in step 2 , find checking 's balance in place of savings 's balance .",
        "primary_span": [
            [
                4,
                12
            ],
            [
                17,
                20
            ]
        ],
        "secondary_span": [
            [
                21,
                27
            ]
        ],
        "edits": [
            "checking"
        ],
        "edits_original": "< from > add checking </ from >"
    },
    {
        "db_id": "flight_1",
        "question": "Show all flight number from Los Angeles.",
        "gold_parse": "SELECT flno FROM Flight WHERE origin  =  \"Los Angeles\"",
        "predicted_parse": "SELECT Count ( * ) FROM flight WHERE destination = value",
        "predicted_parse_explanation": [
            "find the number of rows in flight table whose destination equals Los Angeles"
        ],
        "feedback": "Replace destination with origin and find flight number instead of the number of rows",
        "beam": [
            [
                "SELECT Count ( * ) FROM flight WHERE destination = value",
                -0.4733371138572693
            ],
            [
                "SELECT Count ( * ) FROM aircraft WHERE name = value",
                -1.8517310619354248
            ],
            [
                "SELECT Count ( * ) FROM flight WHERE origin = value",
                -2.48272442817688
            ],
            [
                "SELECT Count ( * ) FROM flight WHERE price = value",
                -3.2229628562927246
            ],
            [
                "SELECT Count ( * ) FROM flight WHERE * = value",
                -3.770634651184082
            ],
            [
                "SELECT Count ( * ) FROM flight WHERE distance = value",
                -3.803393602371216
            ],
            [
                "SELECT Count ( * ) FROM flight WHERE flno = value",
                -4.188615798950195
            ],
            [
                "SELECT Count ( * ) FROM aircraft WHERE distance = value",
                -4.421855926513672
            ],
            [
                "SELECT Count ( * ) FROM flight WHERE arrival_date = value",
                -4.568452835083008
            ],
            [
                "SELECT Count ( * ) FROM flight WHERE departure_date = value",
                -5.017809867858887
            ],
            [
                "SELECT Count ( * ) FROM employee WHERE salary = value",
                -5.51859188079834
            ],
            [
                "SELECT Count ( * ) FROM flight",
                -6.339664459228516
            ],
            [
                "SELECT Count ( * ) FROM employee WHERE name = value",
                -6.877396583557129
            ],
            [
                "SELECT Count ( * ) FROM flight WHERE aid = value",
                -8.501594543457031
            ],
            [
                "SELECT * FROM flight WHERE destination = value",
                -9.550471663475037
            ],
            [
                "SELECT Count ( * ) FROM employee WHERE eid = value",
                -10.068565368652344
            ],
            [
                "SELECT Count ( * ) FROM aircraft WHERE aid = value",
                -10.261252403259277
            ],
            [
                "SELECT Count ( * ) FROM certificate WHERE eid = value",
                -10.610225677490234
            ],
            [
                "SELECT Count ( * ) FROM certificate WHERE aid = value",
                -11.069592475891113
            ],
            [
                "SELECT * FROM flight",
                -14.993602275848389
            ]
        ],
        "predicted_parse_with_values": "SELECT Count ( * ) FROM flight WHERE destination = \"Los Angeles\"",
        "template_feedback": "consider the origin equals Los Angeles conditions in place of the destination equals Los Angeles conditions . find flight number in place of number of rows .",
        "primary_span": [
            [
                0,
                6
            ],
            [
                17,
                19
            ]
        ],
        "secondary_span": [
            [
                7,
                16
            ],
            [
                20,
                26
            ]
        ],
        "edits": [
            "flight number",
            "number of rows",
            "origin equals \"Los Angeles\"",
            "destination equals \"Los Angeles\""
        ],
        "edits_original": "< select > add flight number </ select > < select > remove number of rows </ select > < where > add origin equals \" Los Angeles \" </ where > < where > remove destination equals \" Los Angeles \" </ where >"
    },
    {
        "db_id": "flight_1",
        "question": "What are the numbers of the shortest flights?",
        "gold_parse": "SELECT flno FROM Flight ORDER BY distance ASC LIMIT 3",
        "predicted_parse": "SELECT distance FROM flight ORDER BY distance Asc LIMIT value",
        "predicted_parse_explanation": [
            "Step 1: find the distance in flight table ordered ascending by distance",
            "Step 2: only show the first 3 rows of the results"
        ],
        "feedback": "Replace First \"distance\" word with airline id and remove \" 3\" in step 2.",
        "beam": [
            [
                "SELECT distance FROM flight ORDER BY distance Asc LIMIT value",
                -0.5463123321533203
            ],
            [
                "SELECT * FROM flight ORDER BY distance Asc LIMIT value",
                -1.527064323425293
            ],
            [
                "SELECT flno FROM flight ORDER BY distance Asc LIMIT value",
                -1.8380014896392822
            ],
            [
                "SELECT Min ( distance ) FROM flight ORDER BY distance Asc LIMIT value",
                -4.4073052406311035
            ],
            [
                "SELECT Min ( * ) FROM flight ORDER BY distance Asc LIMIT value",
                -4.570472240447998
            ],
            [
                "SELECT T2.distance FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.distance Asc LIMIT value",
                -5.630025386810303
            ],
            [
                "SELECT arrival_date FROM flight ORDER BY distance Asc LIMIT value",
                -5.701517581939697
            ],
            [
                "SELECT departure_date FROM flight ORDER BY distance Asc LIMIT value",
                -5.8357462882995605
            ],
            [
                "SELECT T1.distance FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T2.distance Asc LIMIT value",
                -6.481452941894531
            ],
            [
                "SELECT distance FROM flight GROUP BY * ORDER BY Count ( * ) Asc LIMIT value",
                -6.767007350921631
            ],
            [
                "SELECT * FROM flight GROUP BY * ORDER BY Count ( * ) Asc LIMIT value",
                -7.0919129848480225
            ],
            [
                "SELECT price FROM flight ORDER BY distance Asc LIMIT value",
                -7.259274005889893
            ],
            [
                "SELECT * FROM aircraft ORDER BY distance Asc LIMIT value",
                -7.43792724609375
            ],
            [
                "SELECT flno FROM flight GROUP BY * ORDER BY Count ( * ) Asc LIMIT value",
                -7.574268817901611
            ],
            [
                "SELECT distance FROM flight GROUP BY origin ORDER BY Count ( * ) Asc LIMIT value",
                -7.739360928535461
            ],
            [
                "SELECT T1.flno FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T2.distance Asc LIMIT value",
                -7.7793052196502686
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.distance Asc LIMIT value",
                -7.901440620422363
            ],
            [
                "SELECT * FROM flight GROUP BY origin ORDER BY Count ( * ) Asc LIMIT value",
                -8.176668405532837
            ],
            [
                "SELECT distance FROM flight GROUP BY arrival_date ORDER BY Count ( * ) Asc LIMIT value",
                -8.222890615463257
            ],
            [
                "SELECT Min ( distance ) FROM flight",
                -8.521584033966064
            ]
        ],
        "predicted_parse_with_values": "SELECT distance FROM flight ORDER BY distance Asc LIMIT 3",
        "template_feedback": "in step 1 , find flight number in place of distance .",
        "primary_span": [
            [
                4,
                6
            ]
        ],
        "secondary_span": [
            [
                7,
                11
            ]
        ],
        "edits": [
            "flight number",
            "distance"
        ],
        "edits_original": "< select > add flight number </ select > < select > remove distance </ select >"
    },
    {
        "db_id": "flight_1",
        "question": "What are the numbers of the shortest flights?",
        "gold_parse": "SELECT flno FROM Flight ORDER BY distance ASC LIMIT 3",
        "predicted_parse": "SELECT distance FROM flight ORDER BY distance Asc LIMIT value",
        "predicted_parse_explanation": [
            "Step 1: find the distance in flight table ordered ascending by distance",
            "Step 2: only show the first 3 rows of the results"
        ],
        "feedback": "Delete \"3\" from step 2 and use flight number as a substitute of distance. ",
        "beam": [
            [
                "SELECT distance FROM flight ORDER BY distance Asc LIMIT value",
                -0.5463123321533203
            ],
            [
                "SELECT * FROM flight ORDER BY distance Asc LIMIT value",
                -1.527064323425293
            ],
            [
                "SELECT flno FROM flight ORDER BY distance Asc LIMIT value",
                -1.8380014896392822
            ],
            [
                "SELECT Min ( distance ) FROM flight ORDER BY distance Asc LIMIT value",
                -4.4073052406311035
            ],
            [
                "SELECT Min ( * ) FROM flight ORDER BY distance Asc LIMIT value",
                -4.570472240447998
            ],
            [
                "SELECT T2.distance FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.distance Asc LIMIT value",
                -5.630025386810303
            ],
            [
                "SELECT arrival_date FROM flight ORDER BY distance Asc LIMIT value",
                -5.701517581939697
            ],
            [
                "SELECT departure_date FROM flight ORDER BY distance Asc LIMIT value",
                -5.8357462882995605
            ],
            [
                "SELECT T1.distance FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T2.distance Asc LIMIT value",
                -6.481452941894531
            ],
            [
                "SELECT distance FROM flight GROUP BY * ORDER BY Count ( * ) Asc LIMIT value",
                -6.767007350921631
            ],
            [
                "SELECT * FROM flight GROUP BY * ORDER BY Count ( * ) Asc LIMIT value",
                -7.0919129848480225
            ],
            [
                "SELECT price FROM flight ORDER BY distance Asc LIMIT value",
                -7.259274005889893
            ],
            [
                "SELECT * FROM aircraft ORDER BY distance Asc LIMIT value",
                -7.43792724609375
            ],
            [
                "SELECT flno FROM flight GROUP BY * ORDER BY Count ( * ) Asc LIMIT value",
                -7.574268817901611
            ],
            [
                "SELECT distance FROM flight GROUP BY origin ORDER BY Count ( * ) Asc LIMIT value",
                -7.739360928535461
            ],
            [
                "SELECT T1.flno FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T2.distance Asc LIMIT value",
                -7.7793052196502686
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.distance Asc LIMIT value",
                -7.901440620422363
            ],
            [
                "SELECT * FROM flight GROUP BY origin ORDER BY Count ( * ) Asc LIMIT value",
                -8.176668405532837
            ],
            [
                "SELECT distance FROM flight GROUP BY arrival_date ORDER BY Count ( * ) Asc LIMIT value",
                -8.222890615463257
            ],
            [
                "SELECT Min ( distance ) FROM flight",
                -8.521584033966064
            ]
        ],
        "predicted_parse_with_values": "SELECT distance FROM flight ORDER BY distance Asc LIMIT 3",
        "template_feedback": "in step 1 , find flight number in place of distance .",
        "primary_span": [
            [
                4,
                6
            ]
        ],
        "secondary_span": [
            [
                7,
                11
            ]
        ],
        "edits": [
            "flight number",
            "distance"
        ],
        "edits_original": "< select > add flight number </ select > < select > remove distance </ select >"
    },
    {
        "db_id": "flight_1",
        "question": "Show the id and name of the employee with maximum salary.",
        "gold_parse": "SELECT eid ,  name FROM Employee ORDER BY salary DESC LIMIT 1",
        "predicted_parse": "SELECT eid , name FROM employee",
        "predicted_parse_explanation": [
            "find the employee id and name in employee table"
        ],
        "feedback": "Make sure salary of employee is largest .",
        "beam": [
            [
                "SELECT eid , name FROM employee",
                -0.5261116027832031
            ],
            [
                "SELECT eid , name FROM employee WHERE salary = ( SELECT Max ( salary ) FROM employee )",
                -1.3050518035888672
            ],
            [
                "SELECT eid , name FROM employee ORDER BY salary Desc LIMIT value",
                -2.019820213317871
            ],
            [
                "SELECT eid , name FROM employee ORDER BY salary Asc LIMIT value",
                -5.348886489868164
            ],
            [
                "SELECT eid , name FROM employee GROUP BY eid ORDER BY Max ( salary ) Desc LIMIT value",
                -8.094315528869629
            ],
            [
                "SELECT eid , name FROM employee GROUP BY eid ORDER BY salary Desc LIMIT value",
                -10.76223373413086
            ],
            [
                "SELECT eid , name FROM employee UNION SELECT Max ( salary ) FROM employee",
                -10.830148696899414
            ],
            [
                "SELECT eid , salary FROM employee",
                -10.986076354980469
            ],
            [
                "SELECT eid , name FROM employee GROUP BY eid",
                -11.271698951721191
            ],
            [
                "SELECT DISTINCT eid , name FROM employee",
                -11.523569107055664
            ],
            [
                "SELECT eid , salary FROM employee WHERE salary = ( SELECT Max ( salary ) FROM employee )",
                -11.779512405395508
            ],
            [
                "SELECT eid , name FROM employee EXCEPT SELECT eid , name FROM employee WHERE salary = ( SELECT Max ( salary ) FROM employee )",
                -11.924620628356934
            ],
            [
                "SELECT eid , name FROM employee UNION SELECT salary FROM employee WHERE salary = ( SELECT Max ( salary ) FROM employee )",
                -12.020320892333984
            ],
            [
                "SELECT eid , salary FROM employee ORDER BY salary Desc LIMIT value",
                -12.075813293457031
            ],
            [
                "SELECT eid , name FROM employee GROUP BY eid HAVING Max ( salary ) > value",
                -12.531081199645996
            ],
            [
                "SELECT eid , name FROM employee WHERE salary = ( SELECT Min ( salary ) FROM employee )",
                -12.55242919921875
            ],
            [
                "SELECT eid , name , salary FROM employee",
                -13.228652000427246
            ],
            [
                "SELECT eid , name FROM employee GROUP BY eid HAVING salary = ( SELECT Max ( salary ) FROM employee )",
                -13.503464698791504
            ],
            [
                "SELECT eid , name FROM employee ORDER BY salary Desc",
                -14.21844482421875
            ],
            [
                "SELECT eid FROM employee",
                -14.882207870483398
            ]
        ],
        "predicted_parse_with_values": "SELECT eid , name FROM employee",
        "template_feedback": "find the result with the largest salary .",
        "primary_span": [
            [
                0,
                7
            ]
        ],
        "secondary_span": [],
        "edits": [
            "salary",
            "descending",
            "1"
        ],
        "edits_original": "< orderBy > add salary </ orderBy > < orderBy > add descending </ orderBy > < limit > add 1 </ limit >"
    },
    {
        "db_id": "flight_1",
        "question": "Show names for all employees who do not have certificate of Boeing 737-800.",
        "gold_parse": "SELECT name FROM Employee EXCEPT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Boeing 737-800\"",
        "predicted_parse": "SELECT name FROM employee EXCEPT SELECT name FROM employee",
        "predicted_parse_explanation": [
            "Step 1: find the name in employee table",
            "Step 2: find the name in employee table",
            "Step 3: show the rows that are in the results of step 1 but not in the results of step 2"
        ],
        "feedback": "Need to make sure employees does not have certificate for aircraft's distance equals Boeing 737 800.",
        "beam": [
            [
                "SELECT name FROM employee EXCEPT SELECT name FROM employee",
                -0.007708549499511719
            ],
            [
                "SELECT T3.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid JOIN employee AS T3 JOIN certificate AS T4 ON T2.aid = T4.aid AND T4.eid = T3.eid WHERE T1.origin = value EXCEPT SELECT T3.name FROM employee AS T3",
                -5.050298690795898
            ],
            [
                "SELECT T1.name FROM employee AS T1 WHERE T1.eid NOT IN ( SELECT T2.eid FROM certificate AS T2 )",
                -6.9810285568237305
            ],
            [
                "SELECT T1.name FROM employee AS T1 EXCEPT SELECT T1.name FROM flight AS T2 JOIN aircraft AS T3 ON T2.aid = T3.aid JOIN employee AS T1 JOIN certificate AS T4 ON T3.aid = T4.aid AND T4.eid = T1.eid WHERE T2.origin = value",
                -8.468496322631836
            ],
            [
                "SELECT T1.name FROM employee AS T1 WHERE T1.eid NOT IN ( SELECT T2.aid FROM flight AS T2 )",
                -10.538405418395996
            ],
            [
                "SELECT T3.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid JOIN employee AS T3 JOIN certificate AS T4 ON T2.aid = T4.aid AND T4.eid = T3.eid WHERE T1.origin = value EXCEPT SELECT T3.name FROM employee AS T3 JOIN certificate AS T4 ON T3.eid = T4.eid GROUP BY T4.eid HAVING Count ( * ) = value",
                -11.002507209777832
            ],
            [
                "SELECT T1.name FROM employee AS T1 EXCEPT SELECT T2.name FROM aircraft AS T2",
                -11.446393013000488
            ],
            [
                "SELECT T1.name FROM employee AS T1 WHERE T1.eid NOT IN ( SELECT T2.eid FROM certificate AS T2 ) EXCEPT SELECT T1.name FROM employee AS T1",
                -11.467814445495605
            ],
            [
                "SELECT T1.name FROM employee AS T1 WHERE T1.eid IN ( SELECT T2.eid FROM certificate AS T2 ) EXCEPT SELECT T1.name FROM employee AS T1",
                -11.740407943725586
            ],
            [
                "SELECT T1.name FROM employee AS T1 WHERE T1.eid NOT IN ( SELECT T4.eid FROM flight AS T2 JOIN aircraft AS T3 ON T2.aid = T3.aid JOIN certificate AS T4 ON T3.aid = T4.aid WHERE T2.origin = value )",
                -11.885214805603027
            ],
            [
                "SELECT T3.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid JOIN employee AS T3 JOIN certificate AS T4 ON T2.aid = T4.aid AND T4.eid = T3.eid WHERE T1.origin = value EXCEPT SELECT T3.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid JOIN employee AS T3 JOIN certificate AS T4 ON T2.aid = T4.aid AND T4.eid = T3.eid WHERE T1.origin = value",
                -12.123921394348145
            ],
            [
                "SELECT T1.name FROM employee AS T1 INTERSECT SELECT T2.name FROM aircraft AS T2",
                -12.618821144104004
            ],
            [
                "SELECT T1.name FROM employee AS T1 UNION SELECT T2.name FROM aircraft AS T2",
                -12.855131149291992
            ],
            [
                "SELECT T3.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid JOIN employee AS T3 JOIN certificate AS T4 ON T2.aid = T4.aid AND T4.eid = T3.eid WHERE T1.origin = value EXCEPT SELECT T2.name FROM aircraft AS T2",
                -13.51063346862793
            ],
            [
                "SELECT T3.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid JOIN employee AS T3 JOIN certificate AS T4 ON T2.aid = T4.aid AND T4.eid = T3.eid WHERE T1.origin = value EXCEPT SELECT T3.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid JOIN employee AS T3 JOIN certificate AS T4 ON T2.aid = T4.aid AND T4.eid = T3.eid GROUP BY T1.aid HAVING Count ( * ) = value",
                -13.692869186401367
            ],
            [
                "SELECT T1.name FROM employee AS T1 UNION SELECT T2.origin FROM flight AS T2",
                -13.704336643218994
            ],
            [
                "SELECT name FROM employee EXCEPT SELECT name FROM employee EXCEPT SELECT name FROM employee",
                -13.762541770935059
            ],
            [
                "SELECT name FROM employee EXCEPT SELECT DISTINCT name FROM employee",
                -13.8417329788208
            ],
            [
                "SELECT T1.name FROM employee AS T1 EXCEPT SELECT T1.name FROM flight AS T2 JOIN aircraft AS T3 ON T2.aid = T3.aid JOIN employee AS T1 JOIN certificate AS T4 ON T3.aid = T4.aid AND T4.eid = T1.eid ORDER BY T2.origin Desc LIMIT value",
                -13.866971850395203
            ],
            [
                "SELECT name FROM employee",
                -17.492237091064453
            ]
        ],
        "predicted_parse_with_values": "SELECT name FROM employee EXCEPT SELECT name FROM employee",
        "template_feedback": "in step 2 , additionally use the information from the aircraft table and certificate table besides the employee table . additionally make sure that aircraft 's name equals Boeing 737-800 .",
        "primary_span": [
            [
                4,
                14
            ],
            [
                20,
                30
            ]
        ],
        "secondary_span": [
            [
                15,
                19
            ]
        ],
        "edits": [
            "certificate",
            "aircraft",
            "name equals \"Boeing 737-800\""
        ],
        "edits_original": "< from > add certificate </ from > < from > add aircraft </ from > < where > add name equals \" Boeing 737-800 \" </ where >"
    },
    {
        "db_id": "flight_1",
        "question": "Show names for all employees who do not have certificate of Boeing 737-800.",
        "gold_parse": "SELECT name FROM Employee EXCEPT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Boeing 737-800\"",
        "predicted_parse": "SELECT name FROM employee EXCEPT SELECT name FROM employee",
        "predicted_parse_explanation": [
            "Step 1: find the name in employee table",
            "Step 2: find the name in employee table",
            "Step 3: show the rows that are in the results of step 1 but not in the results of step 2"
        ],
        "feedback": "Distance is equivalent to Boeing 737 800 and also ensure that aircraft's certificate is not owned by employees.",
        "beam": [
            [
                "SELECT name FROM employee EXCEPT SELECT name FROM employee",
                -0.007708549499511719
            ],
            [
                "SELECT T3.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid JOIN employee AS T3 JOIN certificate AS T4 ON T2.aid = T4.aid AND T4.eid = T3.eid WHERE T1.origin = value EXCEPT SELECT T3.name FROM employee AS T3",
                -5.050298690795898
            ],
            [
                "SELECT T1.name FROM employee AS T1 WHERE T1.eid NOT IN ( SELECT T2.eid FROM certificate AS T2 )",
                -6.9810285568237305
            ],
            [
                "SELECT T1.name FROM employee AS T1 EXCEPT SELECT T1.name FROM flight AS T2 JOIN aircraft AS T3 ON T2.aid = T3.aid JOIN employee AS T1 JOIN certificate AS T4 ON T3.aid = T4.aid AND T4.eid = T1.eid WHERE T2.origin = value",
                -8.468496322631836
            ],
            [
                "SELECT T1.name FROM employee AS T1 WHERE T1.eid NOT IN ( SELECT T2.aid FROM flight AS T2 )",
                -10.538405418395996
            ],
            [
                "SELECT T3.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid JOIN employee AS T3 JOIN certificate AS T4 ON T2.aid = T4.aid AND T4.eid = T3.eid WHERE T1.origin = value EXCEPT SELECT T3.name FROM employee AS T3 JOIN certificate AS T4 ON T3.eid = T4.eid GROUP BY T4.eid HAVING Count ( * ) = value",
                -11.002507209777832
            ],
            [
                "SELECT T1.name FROM employee AS T1 EXCEPT SELECT T2.name FROM aircraft AS T2",
                -11.446393013000488
            ],
            [
                "SELECT T1.name FROM employee AS T1 WHERE T1.eid NOT IN ( SELECT T2.eid FROM certificate AS T2 ) EXCEPT SELECT T1.name FROM employee AS T1",
                -11.467814445495605
            ],
            [
                "SELECT T1.name FROM employee AS T1 WHERE T1.eid IN ( SELECT T2.eid FROM certificate AS T2 ) EXCEPT SELECT T1.name FROM employee AS T1",
                -11.740407943725586
            ],
            [
                "SELECT T1.name FROM employee AS T1 WHERE T1.eid NOT IN ( SELECT T4.eid FROM flight AS T2 JOIN aircraft AS T3 ON T2.aid = T3.aid JOIN certificate AS T4 ON T3.aid = T4.aid WHERE T2.origin = value )",
                -11.885214805603027
            ],
            [
                "SELECT T3.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid JOIN employee AS T3 JOIN certificate AS T4 ON T2.aid = T4.aid AND T4.eid = T3.eid WHERE T1.origin = value EXCEPT SELECT T3.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid JOIN employee AS T3 JOIN certificate AS T4 ON T2.aid = T4.aid AND T4.eid = T3.eid WHERE T1.origin = value",
                -12.123921394348145
            ],
            [
                "SELECT T1.name FROM employee AS T1 INTERSECT SELECT T2.name FROM aircraft AS T2",
                -12.618821144104004
            ],
            [
                "SELECT T1.name FROM employee AS T1 UNION SELECT T2.name FROM aircraft AS T2",
                -12.855131149291992
            ],
            [
                "SELECT T3.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid JOIN employee AS T3 JOIN certificate AS T4 ON T2.aid = T4.aid AND T4.eid = T3.eid WHERE T1.origin = value EXCEPT SELECT T2.name FROM aircraft AS T2",
                -13.51063346862793
            ],
            [
                "SELECT T3.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid JOIN employee AS T3 JOIN certificate AS T4 ON T2.aid = T4.aid AND T4.eid = T3.eid WHERE T1.origin = value EXCEPT SELECT T3.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid JOIN employee AS T3 JOIN certificate AS T4 ON T2.aid = T4.aid AND T4.eid = T3.eid GROUP BY T1.aid HAVING Count ( * ) = value",
                -13.692869186401367
            ],
            [
                "SELECT T1.name FROM employee AS T1 UNION SELECT T2.origin FROM flight AS T2",
                -13.704336643218994
            ],
            [
                "SELECT name FROM employee EXCEPT SELECT name FROM employee EXCEPT SELECT name FROM employee",
                -13.762541770935059
            ],
            [
                "SELECT name FROM employee EXCEPT SELECT DISTINCT name FROM employee",
                -13.8417329788208
            ],
            [
                "SELECT T1.name FROM employee AS T1 EXCEPT SELECT T1.name FROM flight AS T2 JOIN aircraft AS T3 ON T2.aid = T3.aid JOIN employee AS T1 JOIN certificate AS T4 ON T3.aid = T4.aid AND T4.eid = T1.eid ORDER BY T2.origin Desc LIMIT value",
                -13.866971850395203
            ],
            [
                "SELECT name FROM employee",
                -17.492237091064453
            ]
        ],
        "predicted_parse_with_values": "SELECT name FROM employee EXCEPT SELECT name FROM employee",
        "template_feedback": "in step 2 , additionally use the information from the aircraft table and certificate table besides the employee table . additionally make sure that aircraft 's name equals Boeing 737-800 .",
        "primary_span": [
            [
                4,
                14
            ],
            [
                20,
                30
            ]
        ],
        "secondary_span": [
            [
                15,
                19
            ]
        ],
        "edits": [
            "certificate",
            "aircraft",
            "name equals \"Boeing 737-800\""
        ],
        "edits_original": "< from > add certificate </ from > < from > add aircraft </ from > < where > add name equals \" Boeing 737-800 \" </ where >"
    },
    {
        "db_id": "flight_1",
        "question": "Show names for all aircraft with at least two flights.",
        "gold_parse": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid HAVING count(*)  >= 2",
        "predicted_parse": "SELECT name FROM aircraft GROUP BY name HAVING Count ( * ) > = value",
        "predicted_parse_explanation": [
            "Step 1: find the number of rows of each value of name in aircraft table",
            "Step 2: find the name in aircraft table whose corresponding value in step 1 is greater than or equals 2"
        ],
        "feedback": "Replace distance with airline id in step 1 , aircraft table with flight table in step 1.",
        "beam": [
            [
                "SELECT name FROM aircraft GROUP BY name HAVING Count ( * ) > = value",
                -4.291534423828125e-05
            ],
            [
                "SELECT name FROM aircraft GROUP BY aid HAVING Count ( * ) > = value",
                -11.740368843078613
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.aid HAVING Count ( * ) > = value",
                -11.9407320022583
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.origin HAVING Count ( * ) > = value",
                -12.40528678894043
            ],
            [
                "SELECT name FROM aircraft GROUP BY * HAVING Count ( * ) > = value",
                -12.589448928833008
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.arrival_date HAVING Count ( * ) > = value",
                -12.755666732788086
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.departure_date HAVING Count ( * ) > = value",
                -12.828434944152832
            ],
            [
                "SELECT name FROM aircraft GROUP BY distance HAVING Count ( * ) > = value",
                -13.356415748596191
            ],
            [
                "SELECT T1.name FROM aircraft AS T1 JOIN certificate AS T2 ON T1.aid = T2.aid GROUP BY T2.aid HAVING Count ( * ) > = value",
                -13.588011741638184
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.destination HAVING Count ( * ) > = value",
                -13.681204795837402
            ],
            [
                "SELECT name FROM aircraft GROUP BY Count ( * ) HAVING Count ( * ) > = value",
                -13.694446563720703
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.flno HAVING Count ( * ) > = value",
                -13.926620483398438
            ],
            [
                "SELECT name FROM aircraft GROUP BY name HAVING Sum ( * ) > = value",
                -14.016172885894775
            ],
            [
                "SELECT name , Count ( * ) FROM aircraft GROUP BY name HAVING Count ( * ) > = value",
                -14.190916061401367
            ],
            [
                "SELECT name FROM aircraft GROUP BY name ORDER BY Count ( * ) Asc LIMIT value",
                -14.35918664932251
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.distance HAVING Count ( * ) > = value",
                -14.519767761230469
            ],
            [
                "SELECT DISTINCT name FROM aircraft GROUP BY name HAVING Count ( * ) > = value",
                -14.716665267944336
            ],
            [
                "SELECT DISTINCT name FROM aircraft GROUP BY name HAVING Count ( * ) > = value",
                -14.75951099395752
            ],
            [
                "SELECT T1.name FROM aircraft AS T1 JOIN employee AS T2 JOIN certificate AS T3 ON T1.aid = T3.aid AND T3.eid = T2.eid GROUP BY T2.name HAVING Count ( * ) > = value",
                -14.777758598327637
            ],
            [
                "SELECT name FROM aircraft",
                -16.495646476745605
            ]
        ],
        "predicted_parse_with_values": "SELECT name FROM aircraft GROUP BY name HAVING Count ( * ) > = 2",
        "template_feedback": "in step 1 , additionally use the information from the flight table besides the aircraft table . find for value of flight 's airline id in place of name .",
        "primary_span": [
            [
                4,
                11
            ],
            [
                17,
                24
            ]
        ],
        "secondary_span": [
            [
                12,
                16
            ],
            [
                25,
                29
            ]
        ],
        "edits": [
            "flight",
            "airline id",
            "name"
        ],
        "edits_original": "< from > add flight </ from > < groupBy > add airline id </ groupBy > < groupBy > remove name </ groupBy >"
    },
    {
        "db_id": "flight_1",
        "question": "Show names for all aircraft with at least two flights.",
        "gold_parse": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid HAVING count(*)  >= 2",
        "predicted_parse": "SELECT name FROM aircraft GROUP BY name HAVING Count ( * ) > = value",
        "predicted_parse_explanation": [
            "Step 1: find the number of rows of each value of name in aircraft table",
            "Step 2: find the name in aircraft table whose corresponding value in step 1 is greater than or equals 2"
        ],
        "feedback": "In step 1, use flight number and flight table in place of name and aircraft table respectively.",
        "beam": [
            [
                "SELECT name FROM aircraft GROUP BY name HAVING Count ( * ) > = value",
                -4.291534423828125e-05
            ],
            [
                "SELECT name FROM aircraft GROUP BY aid HAVING Count ( * ) > = value",
                -11.740368843078613
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.aid HAVING Count ( * ) > = value",
                -11.9407320022583
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.origin HAVING Count ( * ) > = value",
                -12.40528678894043
            ],
            [
                "SELECT name FROM aircraft GROUP BY * HAVING Count ( * ) > = value",
                -12.589448928833008
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.arrival_date HAVING Count ( * ) > = value",
                -12.755666732788086
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.departure_date HAVING Count ( * ) > = value",
                -12.828434944152832
            ],
            [
                "SELECT name FROM aircraft GROUP BY distance HAVING Count ( * ) > = value",
                -13.356415748596191
            ],
            [
                "SELECT T1.name FROM aircraft AS T1 JOIN certificate AS T2 ON T1.aid = T2.aid GROUP BY T2.aid HAVING Count ( * ) > = value",
                -13.588011741638184
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.destination HAVING Count ( * ) > = value",
                -13.681204795837402
            ],
            [
                "SELECT name FROM aircraft GROUP BY Count ( * ) HAVING Count ( * ) > = value",
                -13.694446563720703
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.flno HAVING Count ( * ) > = value",
                -13.926620483398438
            ],
            [
                "SELECT name FROM aircraft GROUP BY name HAVING Sum ( * ) > = value",
                -14.016172885894775
            ],
            [
                "SELECT name , Count ( * ) FROM aircraft GROUP BY name HAVING Count ( * ) > = value",
                -14.190916061401367
            ],
            [
                "SELECT name FROM aircraft GROUP BY name ORDER BY Count ( * ) Asc LIMIT value",
                -14.35918664932251
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.distance HAVING Count ( * ) > = value",
                -14.519767761230469
            ],
            [
                "SELECT DISTINCT name FROM aircraft GROUP BY name HAVING Count ( * ) > = value",
                -14.716665267944336
            ],
            [
                "SELECT DISTINCT name FROM aircraft GROUP BY name HAVING Count ( * ) > = value",
                -14.75951099395752
            ],
            [
                "SELECT T1.name FROM aircraft AS T1 JOIN employee AS T2 JOIN certificate AS T3 ON T1.aid = T3.aid AND T3.eid = T2.eid GROUP BY T2.name HAVING Count ( * ) > = value",
                -14.777758598327637
            ],
            [
                "SELECT name FROM aircraft",
                -16.495646476745605
            ]
        ],
        "predicted_parse_with_values": "SELECT name FROM aircraft GROUP BY name HAVING Count ( * ) > = 2",
        "template_feedback": "in step 1 , additionally use the information from the flight table besides the aircraft table . find for value of flight 's airline id in place of name .",
        "primary_span": [
            [
                4,
                11
            ],
            [
                17,
                24
            ]
        ],
        "secondary_span": [
            [
                12,
                16
            ],
            [
                25,
                29
            ]
        ],
        "edits": [
            "flight",
            "airline id",
            "name"
        ],
        "edits_original": "< from > add flight </ from > < groupBy > add airline id </ groupBy > < groupBy > remove name </ groupBy >"
    },
    {
        "db_id": "flight_1",
        "question": "What is the average price for flights from LA to Honolulu?",
        "gold_parse": "SELECT avg(price) FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\"",
        "predicted_parse": "SELECT Avg ( price ) FROM flight WHERE destination = value",
        "predicted_parse_explanation": [
            "find the average price in flight table whose destination equals Los Angeles"
        ],
        "feedback": "Make sure whose employee id equals LA , arrival date equals Honolulu instead of Los Angeles .",
        "beam": [
            [
                "SELECT Avg ( price ) FROM flight WHERE destination = value",
                -0.001125335693359375
            ],
            [
                "SELECT Avg ( T1.price ) FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T2.name = value",
                -6.798214912414551
            ],
            [
                "SELECT Avg ( price ) FROM flight WHERE destination = value AND price = ( SELECT Avg ( price ) FROM flight WHERE destination = value )",
                -12.957104206085205
            ],
            [
                "SELECT Avg ( price ) FROM flight WHERE * = value",
                -13.345163345336914
            ],
            [
                "SELECT Avg ( price ) FROM flight WHERE destination = value AND price = ( SELECT Min ( price ) FROM flight WHERE destination = value )",
                -13.717368602752686
            ],
            [
                "SELECT Avg ( price ) FROM flight WHERE destination = value AND destination = value",
                -13.918083667755127
            ],
            [
                "SELECT Avg ( price ) FROM flight WHERE destination IN ( SELECT destination FROM flight WHERE destination = value )",
                -14.476795196533203
            ],
            [
                "SELECT Avg ( price ) FROM flight WHERE destination IN ( SELECT price FROM flight WHERE destination = value )",
                -14.486526131629944
            ],
            [
                "SELECT Avg ( price ) FROM flight WHERE DISTINCT destination = value",
                -15.160414695739746
            ],
            [
                "SELECT DISTINCT Avg ( price ) FROM flight WHERE destination = value",
                -15.185479164123535
            ],
            [
                "SELECT Avg ( DISTINCT price ) FROM flight WHERE destination = value",
                -15.24871826171875
            ],
            [
                "SELECT Avg ( price ) FROM flight WHERE destination = value LIMIT value",
                -15.307180404663086
            ],
            [
                "SELECT Avg ( price ) , price FROM flight WHERE destination = value",
                -15.35831069946289
            ],
            [
                "SELECT Avg ( Count ( price ) ) FROM flight WHERE destination = value",
                -15.511885643005371
            ],
            [
                "SELECT Sum ( price ) FROM flight WHERE destination = value",
                -15.678976058959961
            ],
            [
                "SELECT Avg ( price ) FROM flight WHERE Count ( * ) = value",
                -15.995712280273438
            ],
            [
                "SELECT Avg ( price ) FROM flight",
                -16.31131362915039
            ],
            [
                "SELECT Avg ( price ) , Sum ( price ) FROM flight WHERE destination = value",
                -16.78185749053955
            ],
            [
                "SELECT Avg ( T1.price ) FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid JOIN employee AS T3 JOIN certificate AS T4 ON T2.aid = T4.aid AND T4.eid = T3.eid WHERE T3.name = value",
                -16.794418334960938
            ],
            [
                "SELECT Min ( price ) FROM flight WHERE destination = value",
                -16.98719024658203
            ]
        ],
        "predicted_parse_with_values": "SELECT Avg ( price ) FROM flight WHERE destination = \"Los Angeles\"",
        "template_feedback": "consider the origin equals Los Angeles and destination equals Honolulu conditions in place of the destination equals Los Angeles conditions .",
        "primary_span": [
            [
                0,
                10
            ]
        ],
        "secondary_span": [
            [
                11,
                20
            ]
        ],
        "edits": [
            "origin equals \"Los Angeles\"",
            "destination equals \"Honolulu\"",
            "destination equals \"Los Angeles\""
        ],
        "edits_original": "< where > add origin equals \" Los Angeles \" </ where > < where > add destination equals \" Honolulu \" </ where > < where > remove destination equals \" Los Angeles \" </ where >"
    },
    {
        "db_id": "flight_1",
        "question": "What is the average price for flights from LA to Honolulu?",
        "gold_parse": "SELECT avg(price) FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\"",
        "predicted_parse": "SELECT Avg ( price ) FROM flight WHERE destination = value",
        "predicted_parse_explanation": [
            "find the average price in flight table whose destination equals Los Angeles"
        ],
        "feedback": "Rather than Los Angeles, the destination should be equivalent to Honolulu. In addition, you need to double check which origin is equal with LA. ",
        "beam": [
            [
                "SELECT Avg ( price ) FROM flight WHERE destination = value",
                -0.001125335693359375
            ],
            [
                "SELECT Avg ( T1.price ) FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T2.name = value",
                -6.798214912414551
            ],
            [
                "SELECT Avg ( price ) FROM flight WHERE destination = value AND price = ( SELECT Avg ( price ) FROM flight WHERE destination = value )",
                -12.957104206085205
            ],
            [
                "SELECT Avg ( price ) FROM flight WHERE * = value",
                -13.345163345336914
            ],
            [
                "SELECT Avg ( price ) FROM flight WHERE destination = value AND price = ( SELECT Min ( price ) FROM flight WHERE destination = value )",
                -13.717368602752686
            ],
            [
                "SELECT Avg ( price ) FROM flight WHERE destination = value AND destination = value",
                -13.918083667755127
            ],
            [
                "SELECT Avg ( price ) FROM flight WHERE destination IN ( SELECT destination FROM flight WHERE destination = value )",
                -14.476795196533203
            ],
            [
                "SELECT Avg ( price ) FROM flight WHERE destination IN ( SELECT price FROM flight WHERE destination = value )",
                -14.486526131629944
            ],
            [
                "SELECT Avg ( price ) FROM flight WHERE DISTINCT destination = value",
                -15.160414695739746
            ],
            [
                "SELECT DISTINCT Avg ( price ) FROM flight WHERE destination = value",
                -15.185479164123535
            ],
            [
                "SELECT Avg ( DISTINCT price ) FROM flight WHERE destination = value",
                -15.24871826171875
            ],
            [
                "SELECT Avg ( price ) FROM flight WHERE destination = value LIMIT value",
                -15.307180404663086
            ],
            [
                "SELECT Avg ( price ) , price FROM flight WHERE destination = value",
                -15.35831069946289
            ],
            [
                "SELECT Avg ( Count ( price ) ) FROM flight WHERE destination = value",
                -15.511885643005371
            ],
            [
                "SELECT Sum ( price ) FROM flight WHERE destination = value",
                -15.678976058959961
            ],
            [
                "SELECT Avg ( price ) FROM flight WHERE Count ( * ) = value",
                -15.995712280273438
            ],
            [
                "SELECT Avg ( price ) FROM flight",
                -16.31131362915039
            ],
            [
                "SELECT Avg ( price ) , Sum ( price ) FROM flight WHERE destination = value",
                -16.78185749053955
            ],
            [
                "SELECT Avg ( T1.price ) FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid JOIN employee AS T3 JOIN certificate AS T4 ON T2.aid = T4.aid AND T4.eid = T3.eid WHERE T3.name = value",
                -16.794418334960938
            ],
            [
                "SELECT Min ( price ) FROM flight WHERE destination = value",
                -16.98719024658203
            ]
        ],
        "predicted_parse_with_values": "SELECT Avg ( price ) FROM flight WHERE destination = \"Los Angeles\"",
        "template_feedback": "consider the origin equals Los Angeles and destination equals Honolulu conditions in place of the destination equals Los Angeles conditions .",
        "primary_span": [
            [
                0,
                10
            ]
        ],
        "secondary_span": [
            [
                11,
                20
            ]
        ],
        "edits": [
            "origin equals \"Los Angeles\"",
            "destination equals \"Honolulu\"",
            "destination equals \"Los Angeles\""
        ],
        "edits_original": "< where > add origin equals \" Los Angeles \" </ where > < where > add destination equals \" Honolulu \" </ where > < where > remove destination equals \" Los Angeles \" </ where >"
    },
    {
        "db_id": "flight_1",
        "question": "Which destination has least number of flights?",
        "gold_parse": "SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT 1",
        "predicted_parse": "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.destination ORDER BY Count ( * ) Asc LIMIT value",
        "predicted_parse_explanation": [
            "Step 1: for each row in flight table , find the corresponding rows in aircraft table",
            "Step 2: find the number of rows of each value of destination of the results of step 1",
            "Step 3: find the name of the results of step 1 with smallest value in the results of step 2"
        ],
        "feedback": "replace name with destination . only use flight table",
        "beam": [
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.destination ORDER BY Count ( * ) Asc LIMIT value",
                -0.21574783325195312
            ],
            [
                "SELECT destination FROM flight GROUP BY destination ORDER BY Count ( * ) Asc LIMIT value",
                -1.8838119506835938
            ],
            [
                "SELECT name FROM aircraft GROUP BY name ORDER BY Count ( * ) Asc LIMIT value",
                -3.624116897583008
            ],
            [
                "SELECT T1.destination FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T2.name ORDER BY Count ( * ) Asc LIMIT value",
                -5.317752838134766
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.origin ORDER BY Count ( * ) Asc LIMIT value",
                -5.65341329574585
            ],
            [
                "SELECT * FROM flight GROUP BY destination ORDER BY Count ( * ) Asc LIMIT value",
                -6.481817722320557
            ],
            [
                "SELECT T3.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid JOIN employee AS T3 JOIN certificate AS T4 ON T2.aid = T4.aid AND T4.eid = T3.eid GROUP BY T1.destination ORDER BY Count ( * ) Asc LIMIT value",
                -6.631735801696777
            ],
            [
                "SELECT origin FROM flight GROUP BY destination ORDER BY Count ( * ) Asc LIMIT value",
                -6.944693565368652
            ],
            [
                "SELECT destination FROM flight GROUP BY origin ORDER BY Count ( * ) Asc LIMIT value",
                -7.347254276275635
            ],
            [
                "SELECT arrival_date FROM flight GROUP BY destination ORDER BY Count ( * ) Asc LIMIT value",
                -8.178575038909912
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.arrival_date ORDER BY Count ( * ) Asc LIMIT value",
                -8.273755073547363
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.aid ORDER BY Count ( * ) Asc LIMIT value",
                -8.283832550048828
            ],
            [
                "SELECT name FROM aircraft GROUP BY * ORDER BY Count ( * ) Asc LIMIT value",
                -8.661636352539062
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.departure_date ORDER BY Count ( * ) Asc LIMIT value",
                -8.709028244018555
            ],
            [
                "SELECT departure_date FROM flight GROUP BY destination ORDER BY Count ( * ) Asc LIMIT value",
                -8.722493648529053
            ],
            [
                "SELECT T1.name FROM aircraft AS T1 JOIN employee AS T2 JOIN certificate AS T3 ON T1.aid = T3.aid AND T3.eid = T2.eid GROUP BY T2.name ORDER BY Count ( * ) Asc LIMIT value",
                -8.923492431640625
            ],
            [
                "SELECT distance FROM flight GROUP BY destination ORDER BY Count ( * ) Asc LIMIT value",
                -8.971953392028809
            ],
            [
                "SELECT aid FROM flight GROUP BY destination ORDER BY Count ( * ) Asc LIMIT value",
                -8.976326942443848
            ],
            [
                "SELECT T2.aid FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.destination ORDER BY Count ( * ) Asc LIMIT value",
                -9.550204753875732
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.flno ORDER BY Count ( * ) Asc LIMIT value",
                -9.778050422668457
            ]
        ],
        "predicted_parse_with_values": "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.destination ORDER BY Count ( * ) Asc LIMIT 1",
        "template_feedback": "in step 1 , do not use the aircraft table . in step 3 , find destination in place of name .",
        "primary_span": [
            [
                4,
                10
            ],
            [
                15,
                16
            ]
        ],
        "secondary_span": [
            [
                4,
                10
            ],
            [
                17,
                21
            ]
        ],
        "edits": [
            "destination",
            "name",
            "aircraft"
        ],
        "edits_original": "< select > add destination </ select > < select > remove name </ select > < from > remove aircraft </ from >"
    },
    {
        "db_id": "flight_1",
        "question": "Which destination has least number of flights?",
        "gold_parse": "SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT 1",
        "predicted_parse": "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.destination ORDER BY Count ( * ) Asc LIMIT value",
        "predicted_parse_explanation": [
            "Step 1: for each row in flight table , find the corresponding rows in aircraft table",
            "Step 2: find the number of rows of each value of destination of the results of step 1",
            "Step 3: find the name of the results of step 1 with smallest value in the results of step 2"
        ],
        "feedback": "i want the destination from the flight table.",
        "beam": [
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.destination ORDER BY Count ( * ) Asc LIMIT value",
                -0.21574783325195312
            ],
            [
                "SELECT destination FROM flight GROUP BY destination ORDER BY Count ( * ) Asc LIMIT value",
                -1.8838119506835938
            ],
            [
                "SELECT name FROM aircraft GROUP BY name ORDER BY Count ( * ) Asc LIMIT value",
                -3.624116897583008
            ],
            [
                "SELECT T1.destination FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T2.name ORDER BY Count ( * ) Asc LIMIT value",
                -5.317752838134766
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.origin ORDER BY Count ( * ) Asc LIMIT value",
                -5.65341329574585
            ],
            [
                "SELECT * FROM flight GROUP BY destination ORDER BY Count ( * ) Asc LIMIT value",
                -6.481817722320557
            ],
            [
                "SELECT T3.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid JOIN employee AS T3 JOIN certificate AS T4 ON T2.aid = T4.aid AND T4.eid = T3.eid GROUP BY T1.destination ORDER BY Count ( * ) Asc LIMIT value",
                -6.631735801696777
            ],
            [
                "SELECT origin FROM flight GROUP BY destination ORDER BY Count ( * ) Asc LIMIT value",
                -6.944693565368652
            ],
            [
                "SELECT destination FROM flight GROUP BY origin ORDER BY Count ( * ) Asc LIMIT value",
                -7.347254276275635
            ],
            [
                "SELECT arrival_date FROM flight GROUP BY destination ORDER BY Count ( * ) Asc LIMIT value",
                -8.178575038909912
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.arrival_date ORDER BY Count ( * ) Asc LIMIT value",
                -8.273755073547363
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.aid ORDER BY Count ( * ) Asc LIMIT value",
                -8.283832550048828
            ],
            [
                "SELECT name FROM aircraft GROUP BY * ORDER BY Count ( * ) Asc LIMIT value",
                -8.661636352539062
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.departure_date ORDER BY Count ( * ) Asc LIMIT value",
                -8.709028244018555
            ],
            [
                "SELECT departure_date FROM flight GROUP BY destination ORDER BY Count ( * ) Asc LIMIT value",
                -8.722493648529053
            ],
            [
                "SELECT T1.name FROM aircraft AS T1 JOIN employee AS T2 JOIN certificate AS T3 ON T1.aid = T3.aid AND T3.eid = T2.eid GROUP BY T2.name ORDER BY Count ( * ) Asc LIMIT value",
                -8.923492431640625
            ],
            [
                "SELECT distance FROM flight GROUP BY destination ORDER BY Count ( * ) Asc LIMIT value",
                -8.971953392028809
            ],
            [
                "SELECT aid FROM flight GROUP BY destination ORDER BY Count ( * ) Asc LIMIT value",
                -8.976326942443848
            ],
            [
                "SELECT T2.aid FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.destination ORDER BY Count ( * ) Asc LIMIT value",
                -9.550204753875732
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.flno ORDER BY Count ( * ) Asc LIMIT value",
                -9.778050422668457
            ]
        ],
        "predicted_parse_with_values": "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.destination ORDER BY Count ( * ) Asc LIMIT 1",
        "template_feedback": "in step 1 , do not use the aircraft table . in step 3 , find destination in place of name .",
        "primary_span": [
            [
                4,
                10
            ],
            [
                15,
                16
            ]
        ],
        "secondary_span": [
            [
                4,
                10
            ],
            [
                17,
                21
            ]
        ],
        "edits": [
            "destination",
            "name",
            "aircraft"
        ],
        "edits_original": "< select > add destination </ select > < select > remove name </ select > < from > remove aircraft </ from >"
    },
    {
        "db_id": "flight_1",
        "question": "Show me the departure date and arrival date for all flights from Los Angeles to Honolulu.",
        "gold_parse": "SELECT departure_date ,  arrival_date FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\"",
        "predicted_parse": "SELECT T1.arrival_date , T1.departure_date FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T2.name = value",
        "predicted_parse_explanation": [
            "Step 1: for each row in flight table , find the corresponding rows in aircraft table",
            "Step 2: find the arrival date and departure date of the results of step 1 whose name equals Los Angeles"
        ],
        "feedback": "Replace name with origin , also make sure destination equals Honolulu .",
        "beam": [
            [
                "SELECT T1.arrival_date , T1.departure_date FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T2.name = value",
                -0.010271072387695312
            ],
            [
                "SELECT T1.arrival_date , T1.arrival_date FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T2.name = value",
                -5.427640914916992
            ],
            [
                "SELECT arrival_date , departure_date FROM flight WHERE destination = value",
                -5.677624702453613
            ],
            [
                "SELECT T1.departure_date , T1.departure_date FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T2.name = value",
                -6.597326278686523
            ],
            [
                "SELECT T1.arrival_date , T1.flno FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T2.name = value",
                -6.968267440795898
            ],
            [
                "SELECT T1.destination , T1.departure_date FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T2.name = value",
                -10.570063591003418
            ],
            [
                "SELECT arrival_date , arrival_date FROM flight WHERE destination = value",
                -11.217738151550293
            ],
            [
                "SELECT arrival_date , departure_date FROM flight WHERE origin = value",
                -11.944439888000488
            ],
            [
                "SELECT T1.departure_date , T1.arrival_date FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T2.name = value",
                -12.003259658813477
            ],
            [
                "SELECT T1.arrival_date , T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T2.name = value",
                -12.206454277038574
            ],
            [
                "SELECT departure_date , departure_date FROM flight WHERE destination = value",
                -12.268515586853027
            ],
            [
                "SELECT T1.arrival_date , T1.departure_date , T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T2.name = value",
                -12.379307508468628
            ],
            [
                "SELECT T1.arrival_date FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T2.name = value",
                -12.4030122756958
            ],
            [
                "SELECT T1.arrival_date , T1.departure_date FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T2.name = ( SELECT T2.name FROM aircraft AS T2 WHERE T2.name = value )",
                -12.470509052276611
            ],
            [
                "SELECT arrival_date , flno FROM flight WHERE destination = value",
                -12.801990985870361
            ],
            [
                "SELECT T1.arrival_date , T1.departure_date FROM flight AS T1 WHERE * = ( SELECT T2.name FROM aircraft AS T2 WHERE T2.name = value )",
                -13.069823503494263
            ],
            [
                "SELECT arrival_date , departure_date FROM flight WHERE * = value",
                -13.072145462036133
            ],
            [
                "SELECT arrival_date , departure_date FROM flight",
                -13.24152946472168
            ],
            [
                "SELECT arrival_date , departure_date FROM flight WHERE flno = value",
                -13.353506088256836
            ],
            [
                "SELECT T1.arrival_date , T1.departure_date FROM flight AS T1 WHERE T1.departure_date = ( SELECT T2.name FROM aircraft AS T2 WHERE T2.name = value )",
                -14.254402160644531
            ]
        ],
        "predicted_parse_with_values": "SELECT T1.arrival_date , T1.departure_date FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T2.name = \"Los Angeles\"",
        "template_feedback": "in step 1 , do not use the aircraft table . in step 2 , consider the origin equals Los Angeles and destination equals Honolulu conditions in place of the name equals Los Angeles conditions .",
        "primary_span": [
            [
                4,
                10
            ],
            [
                15,
                25
            ]
        ],
        "secondary_span": [
            [
                4,
                10
            ],
            [
                26,
                35
            ]
        ],
        "edits": [
            "aircraft",
            "origin equals \"Los Angeles\"",
            "destination equals \"Honolulu\"",
            "name equals \"Los Angeles\""
        ],
        "edits_original": "< from > remove aircraft </ from > < where > add origin equals \" Los Angeles \" </ where > < where > add destination equals \" Honolulu \" </ where > < where > remove name equals \" Los Angeles \" </ where >"
    },
    {
        "db_id": "flight_1",
        "question": "What is the flight number and its distance for the one with the maximum price?",
        "gold_parse": "SELECT flno ,  distance FROM Flight ORDER BY price DESC LIMIT 1",
        "predicted_parse": "SELECT price , distance FROM flight ORDER BY price Desc LIMIT value",
        "predicted_parse_explanation": [
            "find the price and distance in flight table with largest value of price"
        ],
        "feedback": "Replace airline id with airline id .",
        "beam": [
            [
                "SELECT price , distance FROM flight ORDER BY price Desc LIMIT value",
                -0.7273273468017578
            ],
            [
                "SELECT distance , distance FROM flight ORDER BY price Desc LIMIT value",
                -1.682492733001709
            ],
            [
                "SELECT flno , distance FROM flight ORDER BY price Desc LIMIT value",
                -2.3751888275146484
            ],
            [
                "SELECT price , distance FROM flight WHERE price = ( SELECT Max ( price ) FROM flight )",
                -2.3884220123291016
            ],
            [
                "SELECT distance , distance FROM flight WHERE price = ( SELECT Max ( price ) FROM flight )",
                -3.6289186477661133
            ],
            [
                "SELECT T1.price , T2.distance FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.price Desc LIMIT value",
                -4.401507377624512
            ],
            [
                "SELECT Max ( price ) , distance FROM flight",
                -4.675710678100586
            ],
            [
                "SELECT T1.price , T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.price Desc LIMIT value",
                -4.676173210144043
            ],
            [
                "SELECT price , flno FROM flight ORDER BY price Desc LIMIT value",
                -4.698393821716309
            ],
            [
                "SELECT price , price FROM flight ORDER BY price Desc LIMIT value",
                -4.746071815490723
            ],
            [
                "SELECT flno , distance FROM flight WHERE price = ( SELECT Max ( price ) FROM flight )",
                -5.057252883911133
            ],
            [
                "SELECT T1.distance , T2.distance FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.price Desc LIMIT value",
                -5.318330764770508
            ],
            [
                "SELECT price , origin FROM flight ORDER BY price Desc LIMIT value",
                -5.52316427230835
            ],
            [
                "SELECT arrival_date , distance FROM flight ORDER BY price Desc LIMIT value",
                -5.534542083740234
            ],
            [
                "SELECT price , departure_date FROM flight ORDER BY price Desc LIMIT value",
                -5.594666004180908
            ],
            [
                "SELECT Max ( price ) , Min ( distance ) FROM flight",
                -5.706340789794922
            ],
            [
                "SELECT Max ( price ) , Min ( price ) FROM flight",
                -5.743265151977539
            ],
            [
                "SELECT distance , price FROM flight ORDER BY price Desc LIMIT value",
                -5.816667556762695
            ],
            [
                "SELECT departure_date , distance FROM flight ORDER BY price Desc LIMIT value",
                -5.81710147857666
            ],
            [
                "SELECT price , * FROM flight ORDER BY price Desc LIMIT value",
                -5.850395679473877
            ]
        ],
        "predicted_parse_with_values": "SELECT price , distance FROM flight ORDER BY price Desc LIMIT 1",
        "template_feedback": "find flight number in place of price .",
        "primary_span": [
            [
                0,
                2
            ]
        ],
        "secondary_span": [
            [
                3,
                7
            ]
        ],
        "edits": [
            "flight number",
            "price"
        ],
        "edits_original": "< select > add flight number </ select > < select > remove price </ select >"
    },
    {
        "db_id": "flight_1",
        "question": "What is the flight number and its distance for the one with the maximum price?",
        "gold_parse": "SELECT flno ,  distance FROM Flight ORDER BY price DESC LIMIT 1",
        "predicted_parse": "SELECT price , distance FROM flight ORDER BY price Desc LIMIT value",
        "predicted_parse_explanation": [
            "find the price and distance in flight table with largest value of price"
        ],
        "feedback": "Substitute the price with flight number.",
        "beam": [
            [
                "SELECT price , distance FROM flight ORDER BY price Desc LIMIT value",
                -0.7273273468017578
            ],
            [
                "SELECT distance , distance FROM flight ORDER BY price Desc LIMIT value",
                -1.682492733001709
            ],
            [
                "SELECT flno , distance FROM flight ORDER BY price Desc LIMIT value",
                -2.3751888275146484
            ],
            [
                "SELECT price , distance FROM flight WHERE price = ( SELECT Max ( price ) FROM flight )",
                -2.3884220123291016
            ],
            [
                "SELECT distance , distance FROM flight WHERE price = ( SELECT Max ( price ) FROM flight )",
                -3.6289186477661133
            ],
            [
                "SELECT T1.price , T2.distance FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.price Desc LIMIT value",
                -4.401507377624512
            ],
            [
                "SELECT Max ( price ) , distance FROM flight",
                -4.675710678100586
            ],
            [
                "SELECT T1.price , T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.price Desc LIMIT value",
                -4.676173210144043
            ],
            [
                "SELECT price , flno FROM flight ORDER BY price Desc LIMIT value",
                -4.698393821716309
            ],
            [
                "SELECT price , price FROM flight ORDER BY price Desc LIMIT value",
                -4.746071815490723
            ],
            [
                "SELECT flno , distance FROM flight WHERE price = ( SELECT Max ( price ) FROM flight )",
                -5.057252883911133
            ],
            [
                "SELECT T1.distance , T2.distance FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.price Desc LIMIT value",
                -5.318330764770508
            ],
            [
                "SELECT price , origin FROM flight ORDER BY price Desc LIMIT value",
                -5.52316427230835
            ],
            [
                "SELECT arrival_date , distance FROM flight ORDER BY price Desc LIMIT value",
                -5.534542083740234
            ],
            [
                "SELECT price , departure_date FROM flight ORDER BY price Desc LIMIT value",
                -5.594666004180908
            ],
            [
                "SELECT Max ( price ) , Min ( distance ) FROM flight",
                -5.706340789794922
            ],
            [
                "SELECT Max ( price ) , Min ( price ) FROM flight",
                -5.743265151977539
            ],
            [
                "SELECT distance , price FROM flight ORDER BY price Desc LIMIT value",
                -5.816667556762695
            ],
            [
                "SELECT departure_date , distance FROM flight ORDER BY price Desc LIMIT value",
                -5.81710147857666
            ],
            [
                "SELECT price , * FROM flight ORDER BY price Desc LIMIT value",
                -5.850395679473877
            ]
        ],
        "predicted_parse_with_values": "SELECT price , distance FROM flight ORDER BY price Desc LIMIT 1",
        "template_feedback": "find flight number in place of price .",
        "primary_span": [
            [
                0,
                2
            ]
        ],
        "secondary_span": [
            [
                3,
                7
            ]
        ],
        "edits": [
            "flight number",
            "price"
        ],
        "edits_original": "< select > add flight number </ select > < select > remove price </ select >"
    },
    {
        "db_id": "flight_1",
        "question": "What is the id and name of the aircraft that can cover the maximum distance?",
        "gold_parse": "SELECT aid ,  name FROM Aircraft ORDER BY distance DESC LIMIT 1",
        "predicted_parse": "SELECT aid , name FROM aircraft",
        "predicted_parse_explanation": [
            "find the airline id and name in aircraft table"
        ],
        "feedback": "Make sure aircraft should correspond to maximum distance .",
        "beam": [
            [
                "SELECT aid , name FROM aircraft",
                -0.6842403411865234
            ],
            [
                "SELECT aid , name FROM aircraft WHERE distance = ( SELECT Max ( distance ) FROM aircraft )",
                -0.7241888046264648
            ],
            [
                "SELECT T1.aid , T1.name FROM aircraft AS T1 WHERE T1.distance = ( SELECT Max ( T2.distance ) FROM flight AS T2 )",
                -5.327287673950195
            ],
            [
                "SELECT aid , name FROM aircraft ORDER BY distance Desc LIMIT value",
                -5.779178619384766
            ],
            [
                "SELECT T2.aid , T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.distance = ( SELECT Max ( T2.distance ) FROM aircraft AS T2 )",
                -5.966742515563965
            ],
            [
                "SELECT T2.aid , T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.aid ORDER BY T2.distance Desc LIMIT value",
                -8.913890838623047
            ],
            [
                "SELECT T1.aid , T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid",
                -9.73653507232666
            ],
            [
                "SELECT aid , distance FROM aircraft WHERE distance = ( SELECT Max ( distance ) FROM aircraft )",
                -10.833477973937988
            ],
            [
                "SELECT T2.aid , T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.distance = ( SELECT Max ( T1.distance ) FROM flight AS T1 )",
                -10.8635835647583
            ],
            [
                "SELECT T2.aid , T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.aid HAVING T2.distance = ( SELECT Max ( T2.distance ) FROM aircraft AS T2 )",
                -11.77857494354248
            ],
            [
                "SELECT T1.aid , T1.name FROM aircraft AS T1 EXCEPT SELECT T2.aid , T1.name FROM flight AS T2 JOIN aircraft AS T1 ON T2.aid = T1.aid WHERE T1.distance = ( SELECT Max ( T1.distance ) FROM aircraft AS T1 )",
                -11.806726455688477
            ],
            [
                "SELECT aid , name FROM aircraft EXCEPT SELECT aid , name FROM aircraft WHERE distance = ( SELECT Max ( distance ) FROM aircraft )",
                -12.37454605102539
            ],
            [
                "SELECT T2.aid , T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.aid",
                -12.877114295959473
            ],
            [
                "SELECT aid , name FROM aircraft WHERE distance = ( SELECT Min ( distance ) FROM aircraft )",
                -13.241657257080078
            ],
            [
                "SELECT aid , distance FROM aircraft",
                -13.66938591003418
            ],
            [
                "SELECT DISTINCT aid , name FROM aircraft",
                -13.74899673461914
            ],
            [
                "SELECT aid , name , distance FROM aircraft",
                -14.003125190734863
            ],
            [
                "SELECT T2.aid , T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.distance Desc LIMIT value",
                -14.099516868591309
            ],
            [
                "SELECT Count ( aid ) , name FROM aircraft",
                -14.158100128173828
            ],
            [
                "SELECT Max ( aid ) , name FROM aircraft",
                -14.271607398986816
            ]
        ],
        "predicted_parse_with_values": "SELECT aid , name FROM aircraft",
        "template_feedback": "find the result with the largest distance .",
        "primary_span": [
            [
                0,
                7
            ]
        ],
        "secondary_span": [],
        "edits": [
            "distance",
            "descending",
            "1"
        ],
        "edits_original": "< orderBy > add distance </ orderBy > < orderBy > add descending </ orderBy > < limit > add 1 </ limit >"
    },
    {
        "db_id": "flight_1",
        "question": "What is the id and name of the aircraft that can cover the maximum distance?",
        "gold_parse": "SELECT aid ,  name FROM Aircraft ORDER BY distance DESC LIMIT 1",
        "predicted_parse": "SELECT aid , name FROM aircraft",
        "predicted_parse_explanation": [
            "find the airline id and name in aircraft table"
        ],
        "feedback": "be certain that aircraft should have the maximum distance.",
        "beam": [
            [
                "SELECT aid , name FROM aircraft",
                -0.6842403411865234
            ],
            [
                "SELECT aid , name FROM aircraft WHERE distance = ( SELECT Max ( distance ) FROM aircraft )",
                -0.7241888046264648
            ],
            [
                "SELECT T1.aid , T1.name FROM aircraft AS T1 WHERE T1.distance = ( SELECT Max ( T2.distance ) FROM flight AS T2 )",
                -5.327287673950195
            ],
            [
                "SELECT aid , name FROM aircraft ORDER BY distance Desc LIMIT value",
                -5.779178619384766
            ],
            [
                "SELECT T2.aid , T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.distance = ( SELECT Max ( T2.distance ) FROM aircraft AS T2 )",
                -5.966742515563965
            ],
            [
                "SELECT T2.aid , T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.aid ORDER BY T2.distance Desc LIMIT value",
                -8.913890838623047
            ],
            [
                "SELECT T1.aid , T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid",
                -9.73653507232666
            ],
            [
                "SELECT aid , distance FROM aircraft WHERE distance = ( SELECT Max ( distance ) FROM aircraft )",
                -10.833477973937988
            ],
            [
                "SELECT T2.aid , T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.distance = ( SELECT Max ( T1.distance ) FROM flight AS T1 )",
                -10.8635835647583
            ],
            [
                "SELECT T2.aid , T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.aid HAVING T2.distance = ( SELECT Max ( T2.distance ) FROM aircraft AS T2 )",
                -11.77857494354248
            ],
            [
                "SELECT T1.aid , T1.name FROM aircraft AS T1 EXCEPT SELECT T2.aid , T1.name FROM flight AS T2 JOIN aircraft AS T1 ON T2.aid = T1.aid WHERE T1.distance = ( SELECT Max ( T1.distance ) FROM aircraft AS T1 )",
                -11.806726455688477
            ],
            [
                "SELECT aid , name FROM aircraft EXCEPT SELECT aid , name FROM aircraft WHERE distance = ( SELECT Max ( distance ) FROM aircraft )",
                -12.37454605102539
            ],
            [
                "SELECT T2.aid , T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.aid",
                -12.877114295959473
            ],
            [
                "SELECT aid , name FROM aircraft WHERE distance = ( SELECT Min ( distance ) FROM aircraft )",
                -13.241657257080078
            ],
            [
                "SELECT aid , distance FROM aircraft",
                -13.66938591003418
            ],
            [
                "SELECT DISTINCT aid , name FROM aircraft",
                -13.74899673461914
            ],
            [
                "SELECT aid , name , distance FROM aircraft",
                -14.003125190734863
            ],
            [
                "SELECT T2.aid , T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.distance Desc LIMIT value",
                -14.099516868591309
            ],
            [
                "SELECT Count ( aid ) , name FROM aircraft",
                -14.158100128173828
            ],
            [
                "SELECT Max ( aid ) , name FROM aircraft",
                -14.271607398986816
            ]
        ],
        "predicted_parse_with_values": "SELECT aid , name FROM aircraft",
        "template_feedback": "find the result with the largest distance .",
        "primary_span": [
            [
                0,
                7
            ]
        ],
        "secondary_span": [],
        "edits": [
            "distance",
            "descending",
            "1"
        ],
        "edits_original": "< orderBy > add distance </ orderBy > < orderBy > add descending </ orderBy > < limit > add 1 </ limit >"
    },
    {
        "db_id": "flight_1",
        "question": "What are the numbers of all flights coming from Los Angeles?",
        "gold_parse": "SELECT flno FROM Flight WHERE origin  =  \"Los Angeles\"",
        "predicted_parse": "SELECT Count ( * ) FROM flight WHERE destination = value",
        "predicted_parse_explanation": [
            "find the number of rows in flight table whose destination equals Los Angeles"
        ],
        "feedback": "Replace destination with origin .",
        "beam": [
            [
                "SELECT Count ( * ) FROM flight WHERE destination = value",
                -0.07470083236694336
            ],
            [
                "SELECT Count ( * ) FROM aircraft WHERE name = value",
                -2.6427597999572754
            ],
            [
                "SELECT Count ( * ) FROM flight WHERE origin = value",
                -7.7647504806518555
            ],
            [
                "SELECT Count ( * ) FROM flight WHERE arrival_date = value",
                -9.182971000671387
            ],
            [
                "SELECT Count ( * ) FROM flight WHERE departure_date = value",
                -9.512842178344727
            ],
            [
                "SELECT Count ( * ) FROM flight WHERE * = value",
                -9.777438163757324
            ],
            [
                "SELECT Count ( * ) FROM flight WHERE distance = value",
                -10.244829177856445
            ],
            [
                "SELECT Count ( * ) FROM flight WHERE price = value",
                -10.396904945373535
            ],
            [
                "SELECT Count ( * ) FROM flight WHERE flno = value",
                -10.635843276977539
            ],
            [
                "SELECT Count ( * ) FROM flight",
                -10.65219783782959
            ],
            [
                "SELECT Count ( * ) FROM employee WHERE name = value",
                -10.864250183105469
            ],
            [
                "SELECT * FROM flight WHERE destination = value",
                -12.482911109924316
            ],
            [
                "SELECT Count ( * ) FROM aircraft WHERE distance = value",
                -12.541269302368164
            ],
            [
                "SELECT Count ( * ) FROM employee WHERE salary = value",
                -12.55739688873291
            ],
            [
                "SELECT flno FROM flight WHERE destination = value",
                -12.886770248413086
            ],
            [
                "SELECT Count ( * ) FROM flight WHERE destination = value AND destination = value",
                -13.051817178726196
            ],
            [
                "SELECT distance FROM flight WHERE destination = value",
                -13.765485525131226
            ],
            [
                "SELECT Count ( distance ) FROM flight WHERE destination = value",
                -13.817548751831055
            ],
            [
                "SELECT Count ( * ) FROM flight WHERE DISTINCT destination = value",
                -13.871259212493896
            ],
            [
                "SELECT Count ( * ) FROM flight GROUP BY destination HAVING destination = value",
                -14.447502613067627
            ]
        ],
        "predicted_parse_with_values": "SELECT Count ( * ) FROM flight WHERE destination = \"Los Angeles\"",
        "template_feedback": "consider the origin equals Los Angeles conditions in place of the destination equals Los Angeles conditions . find flight number in place of number of rows .",
        "primary_span": [
            [
                0,
                6
            ],
            [
                17,
                19
            ]
        ],
        "secondary_span": [
            [
                7,
                16
            ],
            [
                20,
                26
            ]
        ],
        "edits": [
            "flight number",
            "number of rows",
            "origin equals \"Los Angeles\"",
            "destination equals \"Los Angeles\""
        ],
        "edits_original": "< select > add flight number </ select > < select > remove number of rows </ select > < where > add origin equals \" Los Angeles \" </ where > < where > remove destination equals \" Los Angeles \" </ where >"
    },
    {
        "db_id": "flight_1",
        "question": "What is the count of distinct employees with certificates?",
        "gold_parse": "SELECT count(DISTINCT eid) FROM Certificate",
        "predicted_parse": "SELECT Count ( * ) FROM flight",
        "predicted_parse_explanation": [
            "find the number of rows in flight table"
        ],
        "feedback": "Make sure to find total number of different employees who have certificate .",
        "beam": [
            [
                "SELECT Count ( * ) FROM flight",
                -0.0007648468017578125
            ],
            [
                "SELECT Count ( DISTINCT aid ) FROM certificate",
                -7.973519325256348
            ],
            [
                "SELECT Count ( DISTINCT eid ) FROM certificate",
                -8.950014114379883
            ],
            [
                "SELECT Count ( DISTINCT name ) FROM employee",
                -9.148487091064453
            ],
            [
                "SELECT Count ( eid ) FROM certificate",
                -10.396807670593262
            ],
            [
                "SELECT Count ( DISTINCT aid ) FROM flight",
                -10.521467208862305
            ],
            [
                "SELECT DISTINCT Count ( * ) FROM flight",
                -10.815481185913086
            ],
            [
                "SELECT Count ( DISTINCT salary ) FROM employee",
                -10.932676792144775
            ],
            [
                "SELECT Count ( DISTINCT origin ) FROM flight",
                -11.171402931213379
            ],
            [
                "SELECT Count ( salary ) FROM employee",
                -11.285861015319824
            ],
            [
                "SELECT Count ( DISTINCT destination ) FROM flight",
                -11.331311225891113
            ],
            [
                "SELECT Count ( eid ) FROM employee",
                -11.659060001373291
            ],
            [
                "SELECT Count ( DISTINCT distance ) FROM aircraft",
                -11.944699764251709
            ],
            [
                "SELECT Count ( DISTINCT name ) FROM aircraft",
                -12.10830307006836
            ],
            [
                "SELECT Count ( DISTINCT distance ) FROM flight",
                -12.262584686279297
            ],
            [
                "SELECT Count ( DISTINCT aid ) FROM aircraft",
                -12.3159818649292
            ],
            [
                "SELECT Count ( DISTINCT arrival_date ) FROM flight",
                -12.527092456817627
            ],
            [
                "SELECT Count ( DISTINCT departure_date ) FROM flight",
                -12.871668338775635
            ],
            [
                "SELECT Count ( DISTINCT flno ) FROM flight",
                -13.090124130249023
            ],
            [
                "SELECT Count ( * ) FROM employee WHERE salary = value",
                -13.457785069942474
            ]
        ],
        "predicted_parse_with_values": "SELECT Count ( * ) FROM flight",
        "template_feedback": "use certificate table in place of flight table . find number of different employee id in place of number of rows .",
        "primary_span": [
            [
                0,
                2
            ],
            [
                9,
                14
            ]
        ],
        "secondary_span": [
            [
                3,
                8
            ],
            [
                15,
                21
            ]
        ],
        "edits": [
            "number of distinct employee id",
            "number of rows",
            "certificate",
            "flight"
        ],
        "edits_original": "< select > add number of distinct employee id </ select > < select > remove number of rows </ select > < from > add certificate </ from > < from > remove flight </ from >"
    },
    {
        "db_id": "flight_1",
        "question": "What is the count of distinct employees with certificates?",
        "gold_parse": "SELECT count(DISTINCT eid) FROM Certificate",
        "predicted_parse": "SELECT Count ( * ) FROM flight",
        "predicted_parse_explanation": [
            "find the number of rows in flight table"
        ],
        "feedback": "Count the number of employees who have certificate.",
        "beam": [
            [
                "SELECT Count ( * ) FROM flight",
                -0.0007648468017578125
            ],
            [
                "SELECT Count ( DISTINCT aid ) FROM certificate",
                -7.973519325256348
            ],
            [
                "SELECT Count ( DISTINCT eid ) FROM certificate",
                -8.950014114379883
            ],
            [
                "SELECT Count ( DISTINCT name ) FROM employee",
                -9.148487091064453
            ],
            [
                "SELECT Count ( eid ) FROM certificate",
                -10.396807670593262
            ],
            [
                "SELECT Count ( DISTINCT aid ) FROM flight",
                -10.521467208862305
            ],
            [
                "SELECT DISTINCT Count ( * ) FROM flight",
                -10.815481185913086
            ],
            [
                "SELECT Count ( DISTINCT salary ) FROM employee",
                -10.932676792144775
            ],
            [
                "SELECT Count ( DISTINCT origin ) FROM flight",
                -11.171402931213379
            ],
            [
                "SELECT Count ( salary ) FROM employee",
                -11.285861015319824
            ],
            [
                "SELECT Count ( DISTINCT destination ) FROM flight",
                -11.331311225891113
            ],
            [
                "SELECT Count ( eid ) FROM employee",
                -11.659060001373291
            ],
            [
                "SELECT Count ( DISTINCT distance ) FROM aircraft",
                -11.944699764251709
            ],
            [
                "SELECT Count ( DISTINCT name ) FROM aircraft",
                -12.10830307006836
            ],
            [
                "SELECT Count ( DISTINCT distance ) FROM flight",
                -12.262584686279297
            ],
            [
                "SELECT Count ( DISTINCT aid ) FROM aircraft",
                -12.3159818649292
            ],
            [
                "SELECT Count ( DISTINCT arrival_date ) FROM flight",
                -12.527092456817627
            ],
            [
                "SELECT Count ( DISTINCT departure_date ) FROM flight",
                -12.871668338775635
            ],
            [
                "SELECT Count ( DISTINCT flno ) FROM flight",
                -13.090124130249023
            ],
            [
                "SELECT Count ( * ) FROM employee WHERE salary = value",
                -13.457785069942474
            ]
        ],
        "predicted_parse_with_values": "SELECT Count ( * ) FROM flight",
        "template_feedback": "use certificate table in place of flight table . find number of different employee id in place of number of rows .",
        "primary_span": [
            [
                0,
                2
            ],
            [
                9,
                14
            ]
        ],
        "secondary_span": [
            [
                3,
                8
            ],
            [
                15,
                21
            ]
        ],
        "edits": [
            "number of distinct employee id",
            "number of rows",
            "certificate",
            "flight"
        ],
        "edits_original": "< select > add number of distinct employee id </ select > < select > remove number of rows </ select > < from > add certificate </ from > < from > remove flight </ from >"
    },
    {
        "db_id": "flight_1",
        "question": "What are the names of the aircraft that the least people are certified to fly?",
        "gold_parse": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid GROUP BY T1.aid ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse": "SELECT name FROM aircraft GROUP BY name ORDER BY Count ( * ) Asc LIMIT value",
        "predicted_parse_explanation": [
            "Step 1: find the number of rows of each value of name in aircraft table",
            "Step 2: find the name in aircraft table with smallest value in the results of step 1"
        ],
        "feedback": "Replace name in aircraft table with employee id in certificate table .",
        "beam": [
            [
                "SELECT name FROM aircraft GROUP BY name ORDER BY Count ( * ) Asc LIMIT value",
                -0.003116607666015625
            ],
            [
                "SELECT T1.name FROM aircraft AS T1 JOIN employee AS T2 JOIN certificate AS T3 ON T1.aid = T3.aid AND T3.eid = T2.eid GROUP BY T2.name ORDER BY Count ( * ) Asc LIMIT value",
                -6.934049606323242
            ],
            [
                "SELECT name FROM aircraft GROUP BY * ORDER BY Count ( * ) Asc LIMIT value",
                -6.982980251312256
            ],
            [
                "SELECT name FROM aircraft ORDER BY name Asc LIMIT value",
                -7.359344482421875
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.origin ORDER BY Count ( * ) Asc LIMIT value",
                -8.2911958694458
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.aid ORDER BY Count ( * ) Asc LIMIT value",
                -10.1895751953125
            ],
            [
                "SELECT name FROM aircraft ORDER BY * Asc LIMIT value",
                -10.618749380111694
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.destination ORDER BY Count ( * ) Asc LIMIT value",
                -10.73101806640625
            ],
            [
                "SELECT T1.name FROM aircraft AS T1 JOIN employee AS T2 JOIN certificate AS T3 ON T1.aid = T3.aid AND T3.eid = T2.eid WHERE T2.name = value GROUP BY T1.name ORDER BY Count ( * ) Asc LIMIT value",
                -10.925360918045044
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.distance ORDER BY Count ( * ) Asc LIMIT value",
                -10.971095085144043
            ],
            [
                "SELECT name FROM aircraft WHERE * = value",
                -11.044078826904297
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.departure_date ORDER BY Count ( * ) Asc LIMIT value",
                -11.088345527648926
            ],
            [
                "SELECT name FROM aircraft GROUP BY distance ORDER BY Count ( * ) Asc LIMIT value",
                -11.10120677947998
            ],
            [
                "SELECT name FROM aircraft WHERE * = value GROUP BY name ORDER BY Count ( * ) Asc LIMIT value",
                -11.156915426254272
            ],
            [
                "SELECT name FROM aircraft GROUP BY name ORDER BY Count ( * ) Asc LIMIT value INTERSECT SELECT name FROM aircraft GROUP BY name ORDER BY Count ( * ) Asc LIMIT value",
                -11.359183311462402
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.arrival_date ORDER BY Count ( * ) Asc LIMIT value",
                -11.404550552368164
            ],
            [
                "SELECT T1.name FROM aircraft AS T1 JOIN employee AS T2 JOIN certificate AS T3 ON T1.aid = T3.aid AND T3.eid = T2.eid ORDER BY T2.name Asc LIMIT value",
                -11.623920440673828
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.price Asc LIMIT value",
                -11.703881740570068
            ],
            [
                "SELECT name FROM aircraft GROUP BY name ORDER BY name Asc LIMIT value",
                -11.72713041305542
            ],
            [
                "SELECT name FROM aircraft",
                -18.028447151184082
            ]
        ],
        "predicted_parse_with_values": "SELECT name FROM aircraft GROUP BY name ORDER BY Count ( * ) Asc LIMIT 1",
        "template_feedback": "in step 1 , additionally use the information from the certificate table besides the aircraft table . find for each value of certificate 's airline id in place of name . in step 2 , use the largest in place of smallest .",
        "primary_span": [
            [
                4,
                11
            ],
            [
                17,
                25
            ],
            [
                35,
                37
            ]
        ],
        "secondary_span": [
            [
                12,
                16
            ],
            [
                26,
                30
            ],
            [
                38,
                42
            ]
        ],
        "edits": [
            "certificate",
            "airline id",
            "name",
            "descending"
        ],
        "edits_original": "< from > add certificate </ from > < groupBy > add airline id </ groupBy > < groupBy > remove name </ groupBy > < orderBy > add descending </ orderBy >"
    },
    {
        "db_id": "flight_1",
        "question": "What are the names of the aircraft that the least people are certified to fly?",
        "gold_parse": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid GROUP BY T1.aid ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse": "SELECT name FROM aircraft GROUP BY name ORDER BY Count ( * ) Asc LIMIT value",
        "predicted_parse_explanation": [
            "Step 1: find the number of rows of each value of name in aircraft table",
            "Step 2: find the name in aircraft table with smallest value in the results of step 1"
        ],
        "feedback": "i need employee id in certificate table rather than name in aircraft table.",
        "beam": [
            [
                "SELECT name FROM aircraft GROUP BY name ORDER BY Count ( * ) Asc LIMIT value",
                -0.003116607666015625
            ],
            [
                "SELECT T1.name FROM aircraft AS T1 JOIN employee AS T2 JOIN certificate AS T3 ON T1.aid = T3.aid AND T3.eid = T2.eid GROUP BY T2.name ORDER BY Count ( * ) Asc LIMIT value",
                -6.934049606323242
            ],
            [
                "SELECT name FROM aircraft GROUP BY * ORDER BY Count ( * ) Asc LIMIT value",
                -6.982980251312256
            ],
            [
                "SELECT name FROM aircraft ORDER BY name Asc LIMIT value",
                -7.359344482421875
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.origin ORDER BY Count ( * ) Asc LIMIT value",
                -8.2911958694458
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.aid ORDER BY Count ( * ) Asc LIMIT value",
                -10.1895751953125
            ],
            [
                "SELECT name FROM aircraft ORDER BY * Asc LIMIT value",
                -10.618749380111694
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.destination ORDER BY Count ( * ) Asc LIMIT value",
                -10.73101806640625
            ],
            [
                "SELECT T1.name FROM aircraft AS T1 JOIN employee AS T2 JOIN certificate AS T3 ON T1.aid = T3.aid AND T3.eid = T2.eid WHERE T2.name = value GROUP BY T1.name ORDER BY Count ( * ) Asc LIMIT value",
                -10.925360918045044
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.distance ORDER BY Count ( * ) Asc LIMIT value",
                -10.971095085144043
            ],
            [
                "SELECT name FROM aircraft WHERE * = value",
                -11.044078826904297
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.departure_date ORDER BY Count ( * ) Asc LIMIT value",
                -11.088345527648926
            ],
            [
                "SELECT name FROM aircraft GROUP BY distance ORDER BY Count ( * ) Asc LIMIT value",
                -11.10120677947998
            ],
            [
                "SELECT name FROM aircraft WHERE * = value GROUP BY name ORDER BY Count ( * ) Asc LIMIT value",
                -11.156915426254272
            ],
            [
                "SELECT name FROM aircraft GROUP BY name ORDER BY Count ( * ) Asc LIMIT value INTERSECT SELECT name FROM aircraft GROUP BY name ORDER BY Count ( * ) Asc LIMIT value",
                -11.359183311462402
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.arrival_date ORDER BY Count ( * ) Asc LIMIT value",
                -11.404550552368164
            ],
            [
                "SELECT T1.name FROM aircraft AS T1 JOIN employee AS T2 JOIN certificate AS T3 ON T1.aid = T3.aid AND T3.eid = T2.eid ORDER BY T2.name Asc LIMIT value",
                -11.623920440673828
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.price Asc LIMIT value",
                -11.703881740570068
            ],
            [
                "SELECT name FROM aircraft GROUP BY name ORDER BY name Asc LIMIT value",
                -11.72713041305542
            ],
            [
                "SELECT name FROM aircraft",
                -18.028447151184082
            ]
        ],
        "predicted_parse_with_values": "SELECT name FROM aircraft GROUP BY name ORDER BY Count ( * ) Asc LIMIT 1",
        "template_feedback": "in step 1 , additionally use the information from the certificate table besides the aircraft table . find for each value of certificate 's airline id in place of name . in step 2 , use the largest in place of smallest .",
        "primary_span": [
            [
                4,
                11
            ],
            [
                17,
                25
            ],
            [
                35,
                37
            ]
        ],
        "secondary_span": [
            [
                12,
                16
            ],
            [
                26,
                30
            ],
            [
                38,
                42
            ]
        ],
        "edits": [
            "certificate",
            "airline id",
            "name",
            "descending"
        ],
        "edits_original": "< from > add certificate </ from > < groupBy > add airline id </ groupBy > < groupBy > remove name </ groupBy > < orderBy > add descending </ orderBy >"
    },
    {
        "db_id": "flight_1",
        "question": "Show flight number for all flights with more than 2000 distance.",
        "gold_parse": "SELECT flno FROM Flight WHERE distance  >  2000",
        "predicted_parse": "SELECT Count ( * ) FROM aircraft WHERE distance > value",
        "predicted_parse_explanation": [
            "find the number of rows in aircraft table whose distance greater than 2000"
        ],
        "feedback": "Need to find flight's flight number .",
        "beam": [
            [
                "SELECT Count ( * ) FROM aircraft WHERE distance > value",
                -0.004229545593261719
            ],
            [
                "SELECT Count ( * ) FROM flight WHERE distance > value",
                -5.799407958984375
            ],
            [
                "SELECT name FROM aircraft WHERE distance > value",
                -6.997611045837402
            ],
            [
                "SELECT * FROM aircraft WHERE distance > value",
                -9.28959321975708
            ],
            [
                "SELECT Count ( * ) FROM employee WHERE salary > value",
                -9.691764831542969
            ],
            [
                "SELECT T1.flno FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T2.distance > value",
                -10.052317380905151
            ],
            [
                "SELECT T1.price FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T2.distance > value",
                -10.082994937896729
            ],
            [
                "SELECT Max ( * ) FROM aircraft WHERE distance > value",
                -11.084799766540527
            ],
            [
                "SELECT Count ( * ) FROM flight WHERE departure_date > value",
                -12.538690567016602
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.distance > value",
                -12.608760356903076
            ],
            [
                "SELECT Count ( * ) FROM flight WHERE price > value",
                -13.457199096679688
            ],
            [
                "SELECT Count ( * ) , name FROM aircraft WHERE distance > value GROUP BY name",
                -13.874079704284668
            ],
            [
                "SELECT Count ( * ) FROM flight WHERE arrival_date > value",
                -13.889413833618164
            ],
            [
                "SELECT T1.distance FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T2.distance > value",
                -14.236324787139893
            ],
            [
                "SELECT T1.arrival_date FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T2.distance > value",
                -14.365271091461182
            ],
            [
                "SELECT Count ( * ) FROM aircraft WHERE distance = value",
                -14.496479749679565
            ],
            [
                "SELECT Sum ( * ) FROM aircraft WHERE distance > value",
                -14.52505874633789
            ],
            [
                "SELECT Count ( DISTINCT name ) FROM aircraft WHERE distance > value",
                -14.610421657562256
            ],
            [
                "SELECT Count ( * ) , name FROM aircraft WHERE distance > value",
                -14.618286609649658
            ],
            [
                "SELECT Count ( * ) FROM flight",
                -14.92757797241211
            ]
        ],
        "predicted_parse_with_values": "SELECT Count ( * ) FROM aircraft WHERE distance > 2000",
        "template_feedback": "use flight table in place of aircraft table . consider the flight 's distance greater than 2000 conditions in place of the aircraft 's distance greater than 2000 conditions . find flight number in place of number of rows .",
        "primary_span": [
            [
                0,
                2
            ],
            [
                9,
                17
            ],
            [
                30,
                32
            ]
        ],
        "secondary_span": [
            [
                3,
                8
            ],
            [
                18,
                29
            ],
            [
                33,
                39
            ]
        ],
        "edits": [
            "flight number",
            "number of rows",
            "flight",
            "aircraft"
        ],
        "edits_original": "< select > add flight number </ select > < select > remove number of rows </ select > < from > add flight </ from > < from > remove aircraft </ from >"
    },
    {
        "db_id": "flight_1",
        "question": "Show flight number for all flights with more than 2000 distance.",
        "gold_parse": "SELECT flno FROM Flight WHERE distance  >  2000",
        "predicted_parse": "SELECT Count ( * ) FROM aircraft WHERE distance > value",
        "predicted_parse_explanation": [
            "find the number of rows in aircraft table whose distance greater than 2000"
        ],
        "feedback": "you should search for flight's flight number.",
        "beam": [
            [
                "SELECT Count ( * ) FROM aircraft WHERE distance > value",
                -0.004229545593261719
            ],
            [
                "SELECT Count ( * ) FROM flight WHERE distance > value",
                -5.799407958984375
            ],
            [
                "SELECT name FROM aircraft WHERE distance > value",
                -6.997611045837402
            ],
            [
                "SELECT * FROM aircraft WHERE distance > value",
                -9.28959321975708
            ],
            [
                "SELECT Count ( * ) FROM employee WHERE salary > value",
                -9.691764831542969
            ],
            [
                "SELECT T1.flno FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T2.distance > value",
                -10.052317380905151
            ],
            [
                "SELECT T1.price FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T2.distance > value",
                -10.082994937896729
            ],
            [
                "SELECT Max ( * ) FROM aircraft WHERE distance > value",
                -11.084799766540527
            ],
            [
                "SELECT Count ( * ) FROM flight WHERE departure_date > value",
                -12.538690567016602
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.distance > value",
                -12.608760356903076
            ],
            [
                "SELECT Count ( * ) FROM flight WHERE price > value",
                -13.457199096679688
            ],
            [
                "SELECT Count ( * ) , name FROM aircraft WHERE distance > value GROUP BY name",
                -13.874079704284668
            ],
            [
                "SELECT Count ( * ) FROM flight WHERE arrival_date > value",
                -13.889413833618164
            ],
            [
                "SELECT T1.distance FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T2.distance > value",
                -14.236324787139893
            ],
            [
                "SELECT T1.arrival_date FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T2.distance > value",
                -14.365271091461182
            ],
            [
                "SELECT Count ( * ) FROM aircraft WHERE distance = value",
                -14.496479749679565
            ],
            [
                "SELECT Sum ( * ) FROM aircraft WHERE distance > value",
                -14.52505874633789
            ],
            [
                "SELECT Count ( DISTINCT name ) FROM aircraft WHERE distance > value",
                -14.610421657562256
            ],
            [
                "SELECT Count ( * ) , name FROM aircraft WHERE distance > value",
                -14.618286609649658
            ],
            [
                "SELECT Count ( * ) FROM flight",
                -14.92757797241211
            ]
        ],
        "predicted_parse_with_values": "SELECT Count ( * ) FROM aircraft WHERE distance > 2000",
        "template_feedback": "use flight table in place of aircraft table . consider the flight 's distance greater than 2000 conditions in place of the aircraft 's distance greater than 2000 conditions . find flight number in place of number of rows .",
        "primary_span": [
            [
                0,
                2
            ],
            [
                9,
                17
            ],
            [
                30,
                32
            ]
        ],
        "secondary_span": [
            [
                3,
                8
            ],
            [
                18,
                29
            ],
            [
                33,
                39
            ]
        ],
        "edits": [
            "flight number",
            "number of rows",
            "flight",
            "aircraft"
        ],
        "edits_original": "< select > add flight number </ select > < select > remove number of rows </ select > < from > add flight </ from > < from > remove aircraft </ from >"
    },
    {
        "db_id": "flight_1",
        "question": "What is the flight number, origin, and destination for all flights in alphabetical order by departure cities?",
        "gold_parse": "SELECT flno ,  origin ,  destination FROM Flight ORDER BY origin",
        "predicted_parse": "SELECT T1.flno , T1.origin , T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.destination Asc",
        "predicted_parse_explanation": [
            "Step 1: for each row in flight table , find the corresponding rows in aircraft table",
            "Step 2: find the flight number , origin , name of the results of step 1 ordered ascending by destination"
        ],
        "feedback": "Replace name with destination , replace destination with origin .",
        "beam": [
            [
                "SELECT T1.flno , T1.origin , T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.destination Asc",
                -0.0944833755493164
            ],
            [
                "SELECT flno , origin , destination FROM flight ORDER BY destination Asc",
                -2.4521913528442383
            ],
            [
                "SELECT flno , origin , origin FROM flight ORDER BY destination Asc",
                -7.2695817947387695
            ],
            [
                "SELECT T1.flno , T1.origin , T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T2.name ORDER BY T1.destination Asc",
                -7.272627830505371
            ],
            [
                "SELECT T1.flno , T1.origin , T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T2.name Asc",
                -7.31948709487915
            ],
            [
                "SELECT T1.destination , T1.origin , T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.destination Asc",
                -7.350920677185059
            ],
            [
                "SELECT T1.arrival_date , T1.origin , T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.destination Asc",
                -8.284454345703125
            ],
            [
                "SELECT flno , origin , departure_date FROM flight ORDER BY destination Asc",
                -8.38076400756836
            ],
            [
                "SELECT T1.flno , T1.origin , T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.flno Asc",
                -9.13542652130127
            ],
            [
                "SELECT T1.flno , T1.origin , T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.destination ORDER BY T1.destination Asc",
                -9.257585525512695
            ],
            [
                "SELECT T1.flno , T1.origin , T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.departure_date Asc",
                -9.463757514953613
            ],
            [
                "SELECT T1.departure_date , T1.origin , T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.destination Asc",
                -9.64960765838623
            ],
            [
                "SELECT destination , origin , destination FROM flight ORDER BY destination Asc",
                -9.791446685791016
            ],
            [
                "SELECT T1.flno , T1.origin , T1.destination FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T2.name Asc",
                -9.840347290039062
            ],
            [
                "SELECT T1.flno , T1.origin , T2.name , T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.destination Asc",
                -9.849408149719238
            ],
            [
                "SELECT T1.flno , T1.origin , T1.destination FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T2.name ORDER BY T1.destination Asc",
                -9.928099632263184
            ],
            [
                "SELECT T1.aid , T1.origin , T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.destination Asc",
                -9.933023452758789
            ],
            [
                "SELECT flno , origin , arrival_date FROM flight ORDER BY destination Asc",
                -10.064732551574707
            ],
            [
                "SELECT arrival_date , origin , destination FROM flight ORDER BY destination Asc",
                -10.709797859191895
            ],
            [
                "SELECT T1.flno , T1.origin , T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.arrival_date Asc",
                -10.729767799377441
            ]
        ],
        "predicted_parse_with_values": "SELECT T1.flno , T1.origin , T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.destination Asc",
        "template_feedback": "in step 1 , do not use the aircraft table . in step 2 , find destination in place of name . order the results by origin in place of destination .",
        "primary_span": [
            [
                4,
                10
            ],
            [
                15,
                16
            ],
            [
                22,
                26
            ]
        ],
        "secondary_span": [
            [
                4,
                10
            ],
            [
                17,
                21
            ],
            [
                27,
                31
            ]
        ],
        "edits": [
            "destination",
            "name",
            "aircraft",
            "origin",
            "destination"
        ],
        "edits_original": "< select > add destination </ select > < select > remove name </ select > < from > remove aircraft </ from > < orderBy > add origin </ orderBy > < orderBy > remove destination </ orderBy >"
    },
    {
        "db_id": "flight_1",
        "question": "What is the name and distance of every aircraft that can cover a distance of more than 5000 and which at least 5 people can fly?",
        "gold_parse": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid WHERE T2.distance  >  5000 GROUP BY T1.aid ORDER BY count(*)  >=  5",
        "predicted_parse": "SELECT name , distance FROM aircraft WHERE distance BETWEEN value AND value",
        "predicted_parse_explanation": [
            "find the name and distance in aircraft table whose distance between 8430 and 5000"
        ],
        "feedback": "Make sure distance is more than 5000 and minimum 5 people can fly .",
        "beam": [
            [
                "SELECT name , distance FROM aircraft WHERE distance BETWEEN value AND value",
                -0.47944068908691406
            ],
            [
                "SELECT name , distance FROM aircraft WHERE distance < value",
                -2.177548408508301
            ],
            [
                "SELECT name , distance FROM aircraft WHERE distance > value OR distance < value",
                -2.192781448364258
            ],
            [
                "SELECT name , distance FROM aircraft WHERE distance > = value",
                -2.554539680480957
            ],
            [
                "SELECT T2.name , T2.distance FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.distance > value OR T2.distance < value",
                -3.6745662689208984
            ],
            [
                "SELECT T2.name , T2.distance FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.distance BETWEEN value AND value",
                -4.516020774841309
            ],
            [
                "SELECT T2.name , T2.distance FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.distance > = value",
                -4.867217063903809
            ],
            [
                "SELECT T1.name , T1.distance FROM aircraft AS T1 WHERE * IN ( SELECT T2.distance FROM flight AS T2 JOIN aircraft AS T1 ON T2.aid = T1.aid WHERE T1.distance < value )",
                -5.297904968261719
            ],
            [
                "SELECT name , distance FROM aircraft WHERE distance > value OR distance > value",
                -5.540431976318359
            ],
            [
                "SELECT name , distance FROM aircraft WHERE distance > value AND distance < value",
                -5.7013959884643555
            ],
            [
                "SELECT T2.name , T2.distance FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.distance < value",
                -5.945707321166992
            ],
            [
                "SELECT name , distance FROM aircraft WHERE distance > value AND distance = value",
                -6.12086033821106
            ],
            [
                "SELECT T2.name , T2.distance FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.distance > value AND T2.distance < value",
                -6.625223159790039
            ],
            [
                "SELECT name , distance FROM aircraft WHERE distance > value OR distance = value",
                -6.815774202346802
            ],
            [
                "SELECT name , distance FROM aircraft WHERE distance > value",
                -6.931863784790039
            ],
            [
                "SELECT T2.name , T2.distance FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.distance > value OR T2.distance > value",
                -6.957430839538574
            ],
            [
                "SELECT name , distance FROM aircraft WHERE distance > value AND distance > value",
                -7.191557884216309
            ],
            [
                "SELECT name , distance FROM aircraft WHERE * IN ( SELECT distance FROM aircraft WHERE distance < value )",
                -7.649640798568726
            ],
            [
                "SELECT T2.name , T1.distance FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T2.distance BETWEEN value AND value",
                -7.677212715148926
            ],
            [
                "SELECT name , distance FROM aircraft WHERE * IN ( SELECT name FROM aircraft WHERE distance < value )",
                -7.8048999309539795
            ]
        ],
        "predicted_parse_with_values": "SELECT name , distance FROM aircraft WHERE distance BETWEEN 8430 AND 5000",
        "template_feedback": "additionally use the information from the certificate table besides the aircraft table . consider the distance greater than 5000 conditions in place of the distance between 8430 and 5000 conditions . find for each value of certificate 's airline id . do not return distance . order the results ascending by number of rows .",
        "primary_span": [
            [
                0,
                7
            ],
            [
                13,
                19
            ],
            [
                31,
                40
            ],
            [
                41,
                45
            ],
            [
                46,
                54
            ]
        ],
        "secondary_span": [
            [
                8,
                12
            ],
            [
                20,
                30
            ]
        ],
        "edits": [
            "distance",
            "certificate",
            "distance greater than 5000",
            "distance between 8430 and 5000",
            "airline id",
            "number of rows"
        ],
        "edits_original": "< select > remove distance </ select > < from > add certificate </ from > < where > add distance greater than 5000 </ where > < where > remove distance between 8430 and 5000 </ where > < groupBy > add airline id </ groupBy > < orderBy > add number of rows </ orderBy >"
    },
    {
        "db_id": "flight_1",
        "question": "Show flight number, origin, destination of all flights in the alphabetical order of the departure cities.",
        "gold_parse": "SELECT flno ,  origin ,  destination FROM Flight ORDER BY origin",
        "predicted_parse": "SELECT T1.flno , T1.origin , T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.destination Asc",
        "predicted_parse_explanation": [
            "Step 1: for each row in flight table , find the corresponding rows in aircraft table",
            "Step 2: find the flight number , origin , name of the results of step 1 ordered ascending by destination"
        ],
        "feedback": "Replace name with destination , and destination with origin .",
        "beam": [
            [
                "SELECT T1.flno , T1.origin , T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.destination Asc",
                -0.7207479476928711
            ],
            [
                "SELECT T1.destination , T1.origin , T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.destination Asc",
                -1.8880071640014648
            ],
            [
                "SELECT T1.price , T1.origin , T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.destination Asc",
                -2.7393579483032227
            ],
            [
                "SELECT flno , origin , destination FROM flight ORDER BY destination Asc",
                -2.8663830757141113
            ],
            [
                "SELECT T2.name , T1.origin , T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.destination Asc",
                -2.91787052154541
            ],
            [
                "SELECT T1.flno , T1.origin , T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.departure_date Asc",
                -3.232372283935547
            ],
            [
                "SELECT T1.flno , T1.origin , T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T2.name Asc",
                -3.8444108963012695
            ],
            [
                "SELECT destination , origin , destination FROM flight ORDER BY destination Asc",
                -4.07664680480957
            ],
            [
                "SELECT T1.arrival_date , T1.origin , T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.destination Asc",
                -4.1554765701293945
            ],
            [
                "SELECT T1.destination , T1.origin , T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.departure_date Asc",
                -4.397949695587158
            ],
            [
                "SELECT T1.aid , T1.origin , T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.destination Asc",
                -4.4365434646606445
            ],
            [
                "SELECT price , origin , destination FROM flight ORDER BY destination Asc",
                -4.881155967712402
            ],
            [
                "SELECT T1.destination , T1.origin , T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T2.name Asc",
                -5.011775970458984
            ],
            [
                "SELECT T2.name , T1.origin , T1.destination FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.destination Asc",
                -5.108473300933838
            ],
            [
                "SELECT T1.price , T1.origin , T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.departure_date Asc",
                -5.2479729652404785
            ],
            [
                "SELECT flno , origin , destination FROM flight ORDER BY departure_date Asc",
                -5.387091159820557
            ],
            [
                "SELECT T2.name , T1.origin , T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.departure_date Asc",
                -5.418642997741699
            ],
            [
                "SELECT T1.flno , T1.origin , T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T2.name ORDER BY T1.destination Asc",
                -5.797342300415039
            ],
            [
                "SELECT T1.price , T1.origin , T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T2.name Asc",
                -5.8696160316467285
            ],
            [
                "SELECT T1.flno , T1.origin , T1.destination FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T2.name Asc",
                -5.927517890930176
            ]
        ],
        "predicted_parse_with_values": "SELECT T1.flno , T1.origin , T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.destination Asc",
        "template_feedback": "in step 1 , do not use the aircraft table . in step 2 , find destination in place of name . order the results by origin in place of destination .",
        "primary_span": [
            [
                4,
                10
            ],
            [
                15,
                16
            ],
            [
                22,
                26
            ]
        ],
        "secondary_span": [
            [
                4,
                10
            ],
            [
                17,
                21
            ],
            [
                27,
                31
            ]
        ],
        "edits": [
            "destination",
            "name",
            "aircraft",
            "origin",
            "destination"
        ],
        "edits_original": "< select > add destination </ select > < select > remove name </ select > < from > remove aircraft </ from > < orderBy > add origin </ orderBy > < orderBy > remove destination </ orderBy >"
    },
    {
        "db_id": "flight_1",
        "question": "How many aircrafts do we have?",
        "gold_parse": "SELECT count(*) FROM Aircraft",
        "predicted_parse": "SELECT Count ( * ) FROM flight",
        "predicted_parse_explanation": [
            "find the number of rows in flight table"
        ],
        "feedback": "Replace flight table with aircraft table . Make sure aircraft are distinct .",
        "beam": [
            [
                "SELECT Count ( * ) FROM flight",
                -1.33514404296875e-05
            ],
            [
                "SELECT Count ( * ) FROM aircraft WHERE name = value",
                -12.998073995113373
            ],
            [
                "SELECT Count ( DISTINCT name ) FROM aircraft",
                -13.318445205688477
            ],
            [
                "SELECT Count ( * ) , name FROM aircraft",
                -14.091572523117065
            ],
            [
                "SELECT Count ( DISTINCT * ) FROM flight",
                -14.615238189697266
            ],
            [
                "SELECT Sum ( * ) FROM flight",
                -14.997158408164978
            ],
            [
                "SELECT Count ( * ) FROM flight LIMIT value",
                -15.06982707977295
            ],
            [
                "SELECT Count ( Count ( * ) ) FROM flight",
                -15.071414947509766
            ],
            [
                "SELECT DISTINCT Count ( * ) FROM flight",
                -15.37782096862793
            ],
            [
                "SELECT Count ( * ) FROM flight WHERE origin = value",
                -15.40857458114624
            ],
            [
                "SELECT * FROM flight",
                -15.808548927307129
            ],
            [
                "SELECT Count ( * ) FROM aircraft WHERE distance = value",
                -15.908208847045898
            ],
            [
                "SELECT Count ( * ) FROM flight WHERE destination = value",
                -16.3114972114563
            ],
            [
                "SELECT Count ( * ) FROM flight WHERE * = value",
                -16.366448402404785
            ],
            [
                "SELECT Sum ( name ) FROM aircraft",
                -16.517534732818604
            ],
            [
                "SELECT Count ( * ) , name FROM aircraft GROUP BY name",
                -17.208736658096313
            ],
            [
                "SELECT name FROM aircraft",
                -17.23565649986267
            ],
            [
                "SELECT Count ( DISTINCT aid ) FROM certificate",
                -17.788474082946777
            ],
            [
                "SELECT Count ( DISTINCT destination ) FROM flight",
                -17.80594825744629
            ],
            [
                "SELECT Count ( DISTINCT name ) FROM employee",
                -17.886324882507324
            ]
        ],
        "predicted_parse_with_values": "SELECT Count ( * ) FROM flight",
        "template_feedback": "use aircraft table in place of flight table .",
        "primary_span": [
            [
                0,
                2
            ]
        ],
        "secondary_span": [
            [
                3,
                8
            ]
        ],
        "edits": [
            "aircraft",
            "flight"
        ],
        "edits_original": "< from > add aircraft </ from > < from > remove flight </ from >"
    },
    {
        "db_id": "flight_1",
        "question": "How many aircrafts do we have?",
        "gold_parse": "SELECT count(*) FROM Aircraft",
        "predicted_parse": "SELECT Count ( * ) FROM flight",
        "predicted_parse_explanation": [
            "find the number of rows in flight table"
        ],
        "feedback": "Use aircraft table instead of flight table and ensure that aircraft has unique values.",
        "beam": [
            [
                "SELECT Count ( * ) FROM flight",
                -1.33514404296875e-05
            ],
            [
                "SELECT Count ( * ) FROM aircraft WHERE name = value",
                -12.998073995113373
            ],
            [
                "SELECT Count ( DISTINCT name ) FROM aircraft",
                -13.318445205688477
            ],
            [
                "SELECT Count ( * ) , name FROM aircraft",
                -14.091572523117065
            ],
            [
                "SELECT Count ( DISTINCT * ) FROM flight",
                -14.615238189697266
            ],
            [
                "SELECT Sum ( * ) FROM flight",
                -14.997158408164978
            ],
            [
                "SELECT Count ( * ) FROM flight LIMIT value",
                -15.06982707977295
            ],
            [
                "SELECT Count ( Count ( * ) ) FROM flight",
                -15.071414947509766
            ],
            [
                "SELECT DISTINCT Count ( * ) FROM flight",
                -15.37782096862793
            ],
            [
                "SELECT Count ( * ) FROM flight WHERE origin = value",
                -15.40857458114624
            ],
            [
                "SELECT * FROM flight",
                -15.808548927307129
            ],
            [
                "SELECT Count ( * ) FROM aircraft WHERE distance = value",
                -15.908208847045898
            ],
            [
                "SELECT Count ( * ) FROM flight WHERE destination = value",
                -16.3114972114563
            ],
            [
                "SELECT Count ( * ) FROM flight WHERE * = value",
                -16.366448402404785
            ],
            [
                "SELECT Sum ( name ) FROM aircraft",
                -16.517534732818604
            ],
            [
                "SELECT Count ( * ) , name FROM aircraft GROUP BY name",
                -17.208736658096313
            ],
            [
                "SELECT name FROM aircraft",
                -17.23565649986267
            ],
            [
                "SELECT Count ( DISTINCT aid ) FROM certificate",
                -17.788474082946777
            ],
            [
                "SELECT Count ( DISTINCT destination ) FROM flight",
                -17.80594825744629
            ],
            [
                "SELECT Count ( DISTINCT name ) FROM employee",
                -17.886324882507324
            ]
        ],
        "predicted_parse_with_values": "SELECT Count ( * ) FROM flight",
        "template_feedback": "use aircraft table in place of flight table .",
        "primary_span": [
            [
                0,
                2
            ]
        ],
        "secondary_span": [
            [
                3,
                8
            ]
        ],
        "edits": [
            "aircraft",
            "flight"
        ],
        "edits_original": "< from > add aircraft </ from > < from > remove flight </ from >"
    },
    {
        "db_id": "flight_1",
        "question": "Show the name of aircrafts with top three lowest distances.",
        "gold_parse": "SELECT name FROM Aircraft ORDER BY distance LIMIT 3",
        "predicted_parse": "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.price Desc LIMIT value",
        "predicted_parse_explanation": [
            "Step 1: for each row in flight table , find the corresponding rows in aircraft table",
            "Step 2: find the name of the results of step 1 ordered descending by price",
            "Step 3: only show the first 3 rows of the results"
        ],
        "feedback": "Replace \"descending by price\" with \"ascending by distance\".",
        "beam": [
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.price Desc LIMIT value",
                -0.597442626953125
            ],
            [
                "SELECT name FROM aircraft ORDER BY distance Desc LIMIT value",
                -1.1303529739379883
            ],
            [
                "SELECT name FROM aircraft GROUP BY name ORDER BY Count ( * ) Desc LIMIT value",
                -2.5002965927124023
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.distance Desc LIMIT value",
                -3.1861228942871094
            ],
            [
                "SELECT T1.name FROM aircraft AS T1 JOIN employee AS T2 JOIN certificate AS T3 ON T1.aid = T3.aid AND T3.eid = T2.eid ORDER BY T2.salary Desc LIMIT value",
                -6.8189592361450195
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.aid ORDER BY Count ( * ) Desc LIMIT value",
                -8.069037437438965
            ],
            [
                "SELECT name FROM aircraft GROUP BY name ORDER BY Count ( * ) Desc LIMIT value INTERSECT SELECT name FROM aircraft GROUP BY name ORDER BY Count ( * ) Desc LIMIT value",
                -8.39297866821289
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.origin ORDER BY Count ( * ) Desc LIMIT value",
                -10.18651294708252
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.departure_date Desc LIMIT value",
                -10.408890724182129
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.arrival_date Desc LIMIT value",
                -10.457656860351562
            ],
            [
                "SELECT name FROM aircraft ORDER BY * Desc LIMIT value",
                -11.063863754272461
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.price Asc LIMIT value",
                -11.737374782562256
            ],
            [
                "SELECT name FROM aircraft GROUP BY name",
                -11.813870429992676
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.destination ORDER BY Count ( * ) Desc LIMIT value",
                -11.945808410644531
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.destination Desc LIMIT value",
                -12.062359809875488
            ],
            [
                "SELECT T1.name FROM aircraft AS T1 UNION SELECT Min ( T2.price ) FROM flight AS T2",
                -12.353968620300293
            ],
            [
                "SELECT name FROM aircraft ORDER BY distance Asc LIMIT value",
                -12.508324146270752
            ],
            [
                "SELECT name FROM aircraft UNION SELECT Min ( distance ) FROM aircraft",
                -12.528708934783936
            ],
            [
                "SELECT T1.name FROM aircraft AS T1 GROUP BY T1.name ORDER BY Count ( * ) Desc LIMIT value INTERSECT SELECT T1.name FROM flight AS T2 JOIN aircraft AS T1 ON T2.aid = T1.aid GROUP BY T2.aid ORDER BY Count ( * ) Desc LIMIT value",
                -12.79325532913208
            ],
            [
                "SELECT name FROM aircraft",
                -15.960500717163086
            ]
        ],
        "predicted_parse_with_values": "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.price Desc LIMIT 3",
        "template_feedback": "in step 1 , do not use the flight table . in step 2 , order the results ascending by aircraft 's distance in place of ordering descending by price .",
        "primary_span": [
            [
                4,
                10
            ],
            [
                15,
                22
            ]
        ],
        "secondary_span": [
            [
                4,
                10
            ],
            [
                23,
                30
            ]
        ],
        "edits": [
            "flight",
            "distance",
            "price",
            "descending"
        ],
        "edits_original": "< from > remove flight </ from > < orderBy > add distance </ orderBy > < orderBy > remove price </ orderBy > < orderBy > remove descending </ orderBy >"
    },
    {
        "db_id": "flight_1",
        "question": "Show the name of aircrafts with top three lowest distances.",
        "gold_parse": "SELECT name FROM Aircraft ORDER BY distance LIMIT 3",
        "predicted_parse": "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.price Desc LIMIT value",
        "predicted_parse_explanation": [
            "Step 1: for each row in flight table , find the corresponding rows in aircraft table",
            "Step 2: find the name of the results of step 1 ordered descending by price",
            "Step 3: only show the first 3 rows of the results"
        ],
        "feedback": "I am looking for ascending by distance.",
        "beam": [
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.price Desc LIMIT value",
                -0.597442626953125
            ],
            [
                "SELECT name FROM aircraft ORDER BY distance Desc LIMIT value",
                -1.1303529739379883
            ],
            [
                "SELECT name FROM aircraft GROUP BY name ORDER BY Count ( * ) Desc LIMIT value",
                -2.5002965927124023
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.distance Desc LIMIT value",
                -3.1861228942871094
            ],
            [
                "SELECT T1.name FROM aircraft AS T1 JOIN employee AS T2 JOIN certificate AS T3 ON T1.aid = T3.aid AND T3.eid = T2.eid ORDER BY T2.salary Desc LIMIT value",
                -6.8189592361450195
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.aid ORDER BY Count ( * ) Desc LIMIT value",
                -8.069037437438965
            ],
            [
                "SELECT name FROM aircraft GROUP BY name ORDER BY Count ( * ) Desc LIMIT value INTERSECT SELECT name FROM aircraft GROUP BY name ORDER BY Count ( * ) Desc LIMIT value",
                -8.39297866821289
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.origin ORDER BY Count ( * ) Desc LIMIT value",
                -10.18651294708252
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.departure_date Desc LIMIT value",
                -10.408890724182129
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.arrival_date Desc LIMIT value",
                -10.457656860351562
            ],
            [
                "SELECT name FROM aircraft ORDER BY * Desc LIMIT value",
                -11.063863754272461
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.price Asc LIMIT value",
                -11.737374782562256
            ],
            [
                "SELECT name FROM aircraft GROUP BY name",
                -11.813870429992676
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.destination ORDER BY Count ( * ) Desc LIMIT value",
                -11.945808410644531
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.destination Desc LIMIT value",
                -12.062359809875488
            ],
            [
                "SELECT T1.name FROM aircraft AS T1 UNION SELECT Min ( T2.price ) FROM flight AS T2",
                -12.353968620300293
            ],
            [
                "SELECT name FROM aircraft ORDER BY distance Asc LIMIT value",
                -12.508324146270752
            ],
            [
                "SELECT name FROM aircraft UNION SELECT Min ( distance ) FROM aircraft",
                -12.528708934783936
            ],
            [
                "SELECT T1.name FROM aircraft AS T1 GROUP BY T1.name ORDER BY Count ( * ) Desc LIMIT value INTERSECT SELECT T1.name FROM flight AS T2 JOIN aircraft AS T1 ON T2.aid = T1.aid GROUP BY T2.aid ORDER BY Count ( * ) Desc LIMIT value",
                -12.79325532913208
            ],
            [
                "SELECT name FROM aircraft",
                -15.960500717163086
            ]
        ],
        "predicted_parse_with_values": "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.price Desc LIMIT 3",
        "template_feedback": "in step 1 , do not use the flight table . in step 2 , order the results ascending by aircraft 's distance in place of ordering descending by price .",
        "primary_span": [
            [
                4,
                10
            ],
            [
                15,
                22
            ]
        ],
        "secondary_span": [
            [
                4,
                10
            ],
            [
                23,
                30
            ]
        ],
        "edits": [
            "flight",
            "distance",
            "price",
            "descending"
        ],
        "edits_original": "< from > remove flight </ from > < orderBy > add distance </ orderBy > < orderBy > remove price </ orderBy > < orderBy > remove descending </ orderBy >"
    },
    {
        "db_id": "flight_1",
        "question": "What is the average price for flights from Los Angeles to Honolulu.",
        "gold_parse": "SELECT avg(price) FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\"",
        "predicted_parse": "SELECT Avg ( price ) FROM flight WHERE destination = value",
        "predicted_parse_explanation": [
            "find the average price in flight table whose destination equals Los Angeles"
        ],
        "feedback": "Replace destination with origin , and also add destination equals Honolulu .",
        "beam": [
            [
                "SELECT Avg ( price ) FROM flight WHERE destination = value",
                -0.0021390914916992188
            ],
            [
                "SELECT Avg ( price ) FROM flight WHERE * = value",
                -6.623498916625977
            ],
            [
                "SELECT Avg ( T1.price ) FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T2.name = value",
                -7.178142547607422
            ],
            [
                "SELECT Avg ( price ) FROM flight WHERE destination = value AND price = ( SELECT Avg ( price ) FROM flight )",
                -11.46865701675415
            ],
            [
                "SELECT Avg ( T1.price ) FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid JOIN employee AS T3 JOIN certificate AS T4 ON T2.aid = T4.aid AND T4.eid = T3.eid WHERE T3.name = value",
                -11.523004531860352
            ],
            [
                "SELECT Avg ( price ) FROM flight WHERE origin = value",
                -11.818340301513672
            ],
            [
                "SELECT Avg ( price ) FROM flight WHERE price = ( SELECT Avg ( price ) FROM flight )",
                -12.464977264404297
            ],
            [
                "SELECT Avg ( price ) FROM flight WHERE arrival_date = value",
                -13.065664291381836
            ],
            [
                "SELECT Avg ( price ) FROM flight WHERE destination = value AND price = ( SELECT Avg ( price ) FROM flight WHERE destination = value )",
                -13.23299264907837
            ],
            [
                "SELECT Avg ( price ) FROM flight WHERE * = ( SELECT Avg ( price ) FROM flight )",
                -13.271219253540039
            ],
            [
                "SELECT Avg ( price ) FROM flight WHERE flno = value",
                -13.45962142944336
            ],
            [
                "SELECT Avg ( price ) FROM flight WHERE * = value AND destination = value",
                -13.595698833465576
            ],
            [
                "SELECT Avg ( price ) FROM flight WHERE departure_date = value",
                -14.164356231689453
            ],
            [
                "SELECT Avg ( price ) FROM flight",
                -14.568854331970215
            ],
            [
                "SELECT Avg ( price ) FROM flight WHERE destination IN ( SELECT price FROM flight WHERE destination = value )",
                -14.832902789115906
            ],
            [
                "SELECT Avg ( price ) FROM flight WHERE DISTINCT destination = value",
                -15.023332595825195
            ],
            [
                "SELECT DISTINCT Avg ( price ) FROM flight WHERE destination = value",
                -15.148398399353027
            ],
            [
                "SELECT Avg ( DISTINCT price ) FROM flight WHERE destination = value",
                -15.271471977233887
            ],
            [
                "SELECT Avg ( price ) FROM flight WHERE destination = value LIMIT value",
                -15.281949996948242
            ],
            [
                "SELECT Avg ( price ) FROM flight WHERE distance = value",
                -15.318938255310059
            ]
        ],
        "predicted_parse_with_values": "SELECT Avg ( price ) FROM flight WHERE destination = \"Los Angeles\"",
        "template_feedback": "consider the origin equals Los Angeles and destination equals Honolulu conditions in place of the destination equals Los Angeles conditions .",
        "primary_span": [
            [
                0,
                10
            ]
        ],
        "secondary_span": [
            [
                11,
                20
            ]
        ],
        "edits": [
            "origin equals \"Los Angeles\"",
            "destination equals \"Honolulu\"",
            "destination equals \"Los Angeles\""
        ],
        "edits_original": "< where > add origin equals \" Los Angeles \" </ where > < where > add destination equals \" Honolulu \" </ where > < where > remove destination equals \" Los Angeles \" </ where >"
    },
    {
        "db_id": "flight_1",
        "question": "What are the aircrafts with top 3 shortest lengthes? List their names.",
        "gold_parse": "SELECT name FROM Aircraft ORDER BY distance LIMIT 3",
        "predicted_parse": "SELECT name FROM aircraft ORDER BY distance Desc LIMIT value",
        "predicted_parse_explanation": [
            "Step 1: find the name in aircraft table ordered descending by distance",
            "Step 2: only show the first 3 rows of the results"
        ],
        "feedback": "There should be ordered Ascending by distance instead of descending by distance .",
        "beam": [
            [
                "SELECT name FROM aircraft ORDER BY distance Desc LIMIT value",
                -0.037017822265625
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.distance Desc LIMIT value",
                -3.6485137939453125
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.departure_date Desc LIMIT value",
                -4.648041725158691
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.arrival_date Desc LIMIT value",
                -7.420340061187744
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.price Desc LIMIT value",
                -9.449604034423828
            ],
            [
                "SELECT name FROM aircraft ORDER BY name Desc LIMIT value",
                -11.17171859741211
            ],
            [
                "SELECT name FROM aircraft ORDER BY distance Desc",
                -12.066810607910156
            ],
            [
                "SELECT name FROM aircraft WHERE distance > value ORDER BY distance Desc LIMIT value",
                -12.114533424377441
            ],
            [
                "SELECT name FROM aircraft WHERE distance > value",
                -12.84221363067627
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.aid ORDER BY Count ( * ) Desc LIMIT value",
                -13.069839000701904
            ],
            [
                "SELECT name FROM aircraft GROUP BY name ORDER BY Count ( * ) Desc LIMIT value",
                -13.151178359985352
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.departure_date ORDER BY Count ( * ) Desc LIMIT value",
                -13.485180377960205
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.destination Desc LIMIT value",
                -13.799381256103516
            ],
            [
                "SELECT name FROM aircraft ORDER BY distance Asc LIMIT value",
                -14.160731315612793
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.departure_date Desc",
                -14.182904243469238
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.arrival_date ORDER BY Count ( * ) Desc LIMIT value",
                -14.328816175460815
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.distance Desc",
                -14.457620620727539
            ],
            [
                "SELECT T1.name FROM aircraft AS T1 JOIN employee AS T2 JOIN certificate AS T3 ON T1.aid = T3.aid AND T3.eid = T2.eid ORDER BY T2.salary Desc LIMIT value",
                -14.572641372680664
            ],
            [
                "SELECT name FROM aircraft WHERE distance = ( SELECT Max ( distance ) FROM aircraft ) ORDER BY distance Asc LIMIT value",
                -14.79375171661377
            ],
            [
                "SELECT name FROM aircraft",
                -17.806476593017578
            ]
        ],
        "predicted_parse_with_values": "SELECT name FROM aircraft ORDER BY distance Desc LIMIT 3",
        "template_feedback": "in step 1 , order the results ascending .",
        "primary_span": [
            [
                4,
                8
            ]
        ],
        "secondary_span": [],
        "edits": [
            "descending"
        ],
        "edits_original": "< orderBy > remove descending </ orderBy >"
    },
    {
        "db_id": "flight_1",
        "question": "What are the aircrafts with top 3 shortest lengthes? List their names.",
        "gold_parse": "SELECT name FROM Aircraft ORDER BY distance LIMIT 3",
        "predicted_parse": "SELECT name FROM aircraft ORDER BY distance Desc LIMIT value",
        "predicted_parse_explanation": [
            "Step 1: find the name in aircraft table ordered descending by distance",
            "Step 2: only show the first 3 rows of the results"
        ],
        "feedback": "you have to arrange distance in move up order.",
        "beam": [
            [
                "SELECT name FROM aircraft ORDER BY distance Desc LIMIT value",
                -0.037017822265625
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.distance Desc LIMIT value",
                -3.6485137939453125
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.departure_date Desc LIMIT value",
                -4.648041725158691
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.arrival_date Desc LIMIT value",
                -7.420340061187744
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.price Desc LIMIT value",
                -9.449604034423828
            ],
            [
                "SELECT name FROM aircraft ORDER BY name Desc LIMIT value",
                -11.17171859741211
            ],
            [
                "SELECT name FROM aircraft ORDER BY distance Desc",
                -12.066810607910156
            ],
            [
                "SELECT name FROM aircraft WHERE distance > value ORDER BY distance Desc LIMIT value",
                -12.114533424377441
            ],
            [
                "SELECT name FROM aircraft WHERE distance > value",
                -12.84221363067627
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.aid ORDER BY Count ( * ) Desc LIMIT value",
                -13.069839000701904
            ],
            [
                "SELECT name FROM aircraft GROUP BY name ORDER BY Count ( * ) Desc LIMIT value",
                -13.151178359985352
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.departure_date ORDER BY Count ( * ) Desc LIMIT value",
                -13.485180377960205
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.destination Desc LIMIT value",
                -13.799381256103516
            ],
            [
                "SELECT name FROM aircraft ORDER BY distance Asc LIMIT value",
                -14.160731315612793
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.departure_date Desc",
                -14.182904243469238
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.arrival_date ORDER BY Count ( * ) Desc LIMIT value",
                -14.328816175460815
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.distance Desc",
                -14.457620620727539
            ],
            [
                "SELECT T1.name FROM aircraft AS T1 JOIN employee AS T2 JOIN certificate AS T3 ON T1.aid = T3.aid AND T3.eid = T2.eid ORDER BY T2.salary Desc LIMIT value",
                -14.572641372680664
            ],
            [
                "SELECT name FROM aircraft WHERE distance = ( SELECT Max ( distance ) FROM aircraft ) ORDER BY distance Asc LIMIT value",
                -14.79375171661377
            ],
            [
                "SELECT name FROM aircraft",
                -17.806476593017578
            ]
        ],
        "predicted_parse_with_values": "SELECT name FROM aircraft ORDER BY distance Desc LIMIT 3",
        "template_feedback": "in step 1 , order the results ascending .",
        "primary_span": [
            [
                4,
                8
            ]
        ],
        "secondary_span": [],
        "edits": [
            "descending"
        ],
        "edits_original": "< orderBy > remove descending </ orderBy >"
    },
    {
        "db_id": "flight_1",
        "question": "How many employees do we have?",
        "gold_parse": "SELECT count(*) FROM Employee",
        "predicted_parse": "SELECT Count ( * ) FROM flight",
        "predicted_parse_explanation": [
            "find the number of rows in flight table"
        ],
        "feedback": "Replace flight table with employee table .",
        "beam": [
            [
                "SELECT Count ( * ) FROM flight",
                -1.33514404296875e-05
            ],
            [
                "SELECT Count ( * ) FROM employee WHERE name = value",
                -13.054996609687805
            ],
            [
                "SELECT Count ( * ) , name FROM employee",
                -14.388481974601746
            ],
            [
                "SELECT Count ( DISTINCT * ) FROM flight",
                -14.771316528320312
            ],
            [
                "SELECT Sum ( * ) FROM flight",
                -14.903332591056824
            ],
            [
                "SELECT DISTINCT Count ( * ) FROM flight",
                -15.155462265014648
            ],
            [
                "SELECT Count ( * ) FROM flight LIMIT value",
                -15.15980339050293
            ],
            [
                "SELECT Count ( Count ( * ) ) FROM flight",
                -15.222729682922363
            ],
            [
                "SELECT * FROM flight",
                -15.830969095230103
            ],
            [
                "SELECT Count ( DISTINCT name ) FROM employee",
                -15.9298734664917
            ],
            [
                "SELECT Count ( * ) FROM employee WHERE salary = value",
                -16.837170600891113
            ],
            [
                "SELECT Sum ( name ) FROM employee",
                -16.95554518699646
            ],
            [
                "SELECT Count ( * ) FROM flight WHERE * = value",
                -17.23012685775757
            ],
            [
                "SELECT Count ( * ) FROM flight WHERE origin = value",
                -17.331321716308594
            ],
            [
                "SELECT Count ( * ) , T1.name FROM employee AS T1 JOIN certificate AS T2 ON T1.eid = T2.eid GROUP BY T2.eid",
                -17.366883873939514
            ],
            [
                "SELECT Sum ( salary ) FROM employee",
                -17.391894817352295
            ],
            [
                "SELECT Count ( salary ) FROM employee",
                -17.690174102783203
            ],
            [
                "SELECT Max ( * ) FROM flight",
                -18.11698865890503
            ],
            [
                "SELECT Count ( DISTINCT eid ) FROM certificate",
                -18.164345264434814
            ],
            [
                "SELECT Count ( * ) FROM employee ORDER BY name Asc",
                -18.179530203342438
            ]
        ],
        "predicted_parse_with_values": "SELECT Count ( * ) FROM flight",
        "template_feedback": "use employee table in place of flight table .",
        "primary_span": [
            [
                0,
                2
            ]
        ],
        "secondary_span": [
            [
                3,
                8
            ]
        ],
        "edits": [
            "employee",
            "flight"
        ],
        "edits_original": "< from > add employee </ from > < from > remove flight </ from >"
    },
    {
        "db_id": "flight_1",
        "question": "How many employees do we have?",
        "gold_parse": "SELECT count(*) FROM Employee",
        "predicted_parse": "SELECT Count ( * ) FROM flight",
        "predicted_parse_explanation": [
            "find the number of rows in flight table"
        ],
        "feedback": "I want table of workers.",
        "beam": [
            [
                "SELECT Count ( * ) FROM flight",
                -1.33514404296875e-05
            ],
            [
                "SELECT Count ( * ) FROM employee WHERE name = value",
                -13.054996609687805
            ],
            [
                "SELECT Count ( * ) , name FROM employee",
                -14.388481974601746
            ],
            [
                "SELECT Count ( DISTINCT * ) FROM flight",
                -14.771316528320312
            ],
            [
                "SELECT Sum ( * ) FROM flight",
                -14.903332591056824
            ],
            [
                "SELECT DISTINCT Count ( * ) FROM flight",
                -15.155462265014648
            ],
            [
                "SELECT Count ( * ) FROM flight LIMIT value",
                -15.15980339050293
            ],
            [
                "SELECT Count ( Count ( * ) ) FROM flight",
                -15.222729682922363
            ],
            [
                "SELECT * FROM flight",
                -15.830969095230103
            ],
            [
                "SELECT Count ( DISTINCT name ) FROM employee",
                -15.9298734664917
            ],
            [
                "SELECT Count ( * ) FROM employee WHERE salary = value",
                -16.837170600891113
            ],
            [
                "SELECT Sum ( name ) FROM employee",
                -16.95554518699646
            ],
            [
                "SELECT Count ( * ) FROM flight WHERE * = value",
                -17.23012685775757
            ],
            [
                "SELECT Count ( * ) FROM flight WHERE origin = value",
                -17.331321716308594
            ],
            [
                "SELECT Count ( * ) , T1.name FROM employee AS T1 JOIN certificate AS T2 ON T1.eid = T2.eid GROUP BY T2.eid",
                -17.366883873939514
            ],
            [
                "SELECT Sum ( salary ) FROM employee",
                -17.391894817352295
            ],
            [
                "SELECT Count ( salary ) FROM employee",
                -17.690174102783203
            ],
            [
                "SELECT Max ( * ) FROM flight",
                -18.11698865890503
            ],
            [
                "SELECT Count ( DISTINCT eid ) FROM certificate",
                -18.164345264434814
            ],
            [
                "SELECT Count ( * ) FROM employee ORDER BY name Asc",
                -18.179530203342438
            ]
        ],
        "predicted_parse_with_values": "SELECT Count ( * ) FROM flight",
        "template_feedback": "use employee table in place of flight table .",
        "primary_span": [
            [
                0,
                2
            ]
        ],
        "secondary_span": [
            [
                3,
                8
            ]
        ],
        "edits": [
            "employee",
            "flight"
        ],
        "edits_original": "< from > add employee </ from > < from > remove flight </ from >"
    },
    {
        "db_id": "flight_1",
        "question": "How many employees do we have?",
        "gold_parse": "SELECT count(*) FROM Employee",
        "predicted_parse": "SELECT Count ( * ) FROM flight",
        "predicted_parse_explanation": [
            "find the number of rows in flight table"
        ],
        "feedback": "You need to use table of employee instead of table of flight.",
        "beam": [
            [
                "SELECT Count ( * ) FROM flight",
                -1.33514404296875e-05
            ],
            [
                "SELECT Count ( * ) FROM employee WHERE name = value",
                -13.054996609687805
            ],
            [
                "SELECT Count ( * ) , name FROM employee",
                -14.388481974601746
            ],
            [
                "SELECT Count ( DISTINCT * ) FROM flight",
                -14.771316528320312
            ],
            [
                "SELECT Sum ( * ) FROM flight",
                -14.903332591056824
            ],
            [
                "SELECT DISTINCT Count ( * ) FROM flight",
                -15.155462265014648
            ],
            [
                "SELECT Count ( * ) FROM flight LIMIT value",
                -15.15980339050293
            ],
            [
                "SELECT Count ( Count ( * ) ) FROM flight",
                -15.222729682922363
            ],
            [
                "SELECT * FROM flight",
                -15.830969095230103
            ],
            [
                "SELECT Count ( DISTINCT name ) FROM employee",
                -15.9298734664917
            ],
            [
                "SELECT Count ( * ) FROM employee WHERE salary = value",
                -16.837170600891113
            ],
            [
                "SELECT Sum ( name ) FROM employee",
                -16.95554518699646
            ],
            [
                "SELECT Count ( * ) FROM flight WHERE * = value",
                -17.23012685775757
            ],
            [
                "SELECT Count ( * ) FROM flight WHERE origin = value",
                -17.331321716308594
            ],
            [
                "SELECT Count ( * ) , T1.name FROM employee AS T1 JOIN certificate AS T2 ON T1.eid = T2.eid GROUP BY T2.eid",
                -17.366883873939514
            ],
            [
                "SELECT Sum ( salary ) FROM employee",
                -17.391894817352295
            ],
            [
                "SELECT Count ( salary ) FROM employee",
                -17.690174102783203
            ],
            [
                "SELECT Max ( * ) FROM flight",
                -18.11698865890503
            ],
            [
                "SELECT Count ( DISTINCT eid ) FROM certificate",
                -18.164345264434814
            ],
            [
                "SELECT Count ( * ) FROM employee ORDER BY name Asc",
                -18.179530203342438
            ]
        ],
        "predicted_parse_with_values": "SELECT Count ( * ) FROM flight",
        "template_feedback": "use employee table in place of flight table .",
        "primary_span": [
            [
                0,
                2
            ]
        ],
        "secondary_span": [
            [
                3,
                8
            ]
        ],
        "edits": [
            "employee",
            "flight"
        ],
        "edits_original": "< from > add employee </ from > < from > remove flight </ from >"
    },
    {
        "db_id": "flight_1",
        "question": "What is the number of employees?",
        "gold_parse": "SELECT count(*) FROM Employee",
        "predicted_parse": "SELECT Count ( * ) FROM flight",
        "predicted_parse_explanation": [
            "find the number of rows in flight table"
        ],
        "feedback": "Replace flight table with employee table .",
        "beam": [
            [
                "SELECT Count ( * ) FROM flight",
                -7.62939453125e-06
            ],
            [
                "SELECT Count ( * ) FROM employee WHERE name = value",
                -13.63002297282219
            ],
            [
                "SELECT Sum ( * ) FROM flight",
                -14.295121431350708
            ],
            [
                "SELECT Count ( DISTINCT * ) FROM flight",
                -14.78451156616211
            ],
            [
                "SELECT Count ( * ) , name FROM employee",
                -14.944729030132294
            ],
            [
                "SELECT Count ( * ) FROM employee WHERE salary = value",
                -15.060879230499268
            ],
            [
                "SELECT DISTINCT Count ( * ) FROM flight",
                -15.069604873657227
            ],
            [
                "SELECT Count ( Count ( * ) ) FROM flight",
                -15.217123985290527
            ],
            [
                "SELECT Count ( * ) FROM flight LIMIT value",
                -15.276107788085938
            ],
            [
                "SELECT Count ( * ) FROM employee WHERE eid = value",
                -15.88482403755188
            ],
            [
                "SELECT Sum ( salary ) FROM employee",
                -16.01352894306183
            ],
            [
                "SELECT Count ( eid ) FROM certificate",
                -16.180610179901123
            ],
            [
                "SELECT Count ( * ) FROM flight WHERE * = value",
                -16.345538854599
            ],
            [
                "SELECT * FROM flight",
                -16.356483697891235
            ],
            [
                "SELECT Sum ( name ) FROM employee",
                -16.930749893188477
            ],
            [
                "SELECT Count ( * ) , name FROM employee GROUP BY name",
                -17.048052310943604
            ],
            [
                "SELECT Count ( salary ) FROM employee",
                -17.13187265396118
            ],
            [
                "SELECT Count ( DISTINCT name ) FROM employee",
                -17.497597694396973
            ],
            [
                "SELECT Count ( eid ) FROM employee",
                -17.77900981903076
            ],
            [
                "SELECT Avg ( * ) FROM flight",
                -18.158607482910156
            ]
        ],
        "predicted_parse_with_values": "SELECT Count ( * ) FROM flight",
        "template_feedback": "use employee table in place of flight table .",
        "primary_span": [
            [
                0,
                2
            ]
        ],
        "secondary_span": [
            [
                3,
                8
            ]
        ],
        "edits": [
            "employee",
            "flight"
        ],
        "edits_original": "< from > add employee </ from > < from > remove flight </ from >"
    },
    {
        "db_id": "flight_1",
        "question": "What is the number of employees?",
        "gold_parse": "SELECT count(*) FROM Employee",
        "predicted_parse": "SELECT Count ( * ) FROM flight",
        "predicted_parse_explanation": [
            "find the number of rows in flight table"
        ],
        "feedback": "I want table of workers.",
        "beam": [
            [
                "SELECT Count ( * ) FROM flight",
                -7.62939453125e-06
            ],
            [
                "SELECT Count ( * ) FROM employee WHERE name = value",
                -13.63002297282219
            ],
            [
                "SELECT Sum ( * ) FROM flight",
                -14.295121431350708
            ],
            [
                "SELECT Count ( DISTINCT * ) FROM flight",
                -14.78451156616211
            ],
            [
                "SELECT Count ( * ) , name FROM employee",
                -14.944729030132294
            ],
            [
                "SELECT Count ( * ) FROM employee WHERE salary = value",
                -15.060879230499268
            ],
            [
                "SELECT DISTINCT Count ( * ) FROM flight",
                -15.069604873657227
            ],
            [
                "SELECT Count ( Count ( * ) ) FROM flight",
                -15.217123985290527
            ],
            [
                "SELECT Count ( * ) FROM flight LIMIT value",
                -15.276107788085938
            ],
            [
                "SELECT Count ( * ) FROM employee WHERE eid = value",
                -15.88482403755188
            ],
            [
                "SELECT Sum ( salary ) FROM employee",
                -16.01352894306183
            ],
            [
                "SELECT Count ( eid ) FROM certificate",
                -16.180610179901123
            ],
            [
                "SELECT Count ( * ) FROM flight WHERE * = value",
                -16.345538854599
            ],
            [
                "SELECT * FROM flight",
                -16.356483697891235
            ],
            [
                "SELECT Sum ( name ) FROM employee",
                -16.930749893188477
            ],
            [
                "SELECT Count ( * ) , name FROM employee GROUP BY name",
                -17.048052310943604
            ],
            [
                "SELECT Count ( salary ) FROM employee",
                -17.13187265396118
            ],
            [
                "SELECT Count ( DISTINCT name ) FROM employee",
                -17.497597694396973
            ],
            [
                "SELECT Count ( eid ) FROM employee",
                -17.77900981903076
            ],
            [
                "SELECT Avg ( * ) FROM flight",
                -18.158607482910156
            ]
        ],
        "predicted_parse_with_values": "SELECT Count ( * ) FROM flight",
        "template_feedback": "use employee table in place of flight table .",
        "primary_span": [
            [
                0,
                2
            ]
        ],
        "secondary_span": [
            [
                3,
                8
            ]
        ],
        "edits": [
            "employee",
            "flight"
        ],
        "edits_original": "< from > add employee </ from > < from > remove flight </ from >"
    },
    {
        "db_id": "flight_1",
        "question": "What is the number of employees?",
        "gold_parse": "SELECT count(*) FROM Employee",
        "predicted_parse": "SELECT Count ( * ) FROM flight",
        "predicted_parse_explanation": [
            "find the number of rows in flight table"
        ],
        "feedback": "You need to use table of employee instead of table of flight.",
        "beam": [
            [
                "SELECT Count ( * ) FROM flight",
                -7.62939453125e-06
            ],
            [
                "SELECT Count ( * ) FROM employee WHERE name = value",
                -13.63002297282219
            ],
            [
                "SELECT Sum ( * ) FROM flight",
                -14.295121431350708
            ],
            [
                "SELECT Count ( DISTINCT * ) FROM flight",
                -14.78451156616211
            ],
            [
                "SELECT Count ( * ) , name FROM employee",
                -14.944729030132294
            ],
            [
                "SELECT Count ( * ) FROM employee WHERE salary = value",
                -15.060879230499268
            ],
            [
                "SELECT DISTINCT Count ( * ) FROM flight",
                -15.069604873657227
            ],
            [
                "SELECT Count ( Count ( * ) ) FROM flight",
                -15.217123985290527
            ],
            [
                "SELECT Count ( * ) FROM flight LIMIT value",
                -15.276107788085938
            ],
            [
                "SELECT Count ( * ) FROM employee WHERE eid = value",
                -15.88482403755188
            ],
            [
                "SELECT Sum ( salary ) FROM employee",
                -16.01352894306183
            ],
            [
                "SELECT Count ( eid ) FROM certificate",
                -16.180610179901123
            ],
            [
                "SELECT Count ( * ) FROM flight WHERE * = value",
                -16.345538854599
            ],
            [
                "SELECT * FROM flight",
                -16.356483697891235
            ],
            [
                "SELECT Sum ( name ) FROM employee",
                -16.930749893188477
            ],
            [
                "SELECT Count ( * ) , name FROM employee GROUP BY name",
                -17.048052310943604
            ],
            [
                "SELECT Count ( salary ) FROM employee",
                -17.13187265396118
            ],
            [
                "SELECT Count ( DISTINCT name ) FROM employee",
                -17.497597694396973
            ],
            [
                "SELECT Count ( eid ) FROM employee",
                -17.77900981903076
            ],
            [
                "SELECT Avg ( * ) FROM flight",
                -18.158607482910156
            ]
        ],
        "predicted_parse_with_values": "SELECT Count ( * ) FROM flight",
        "template_feedback": "use employee table in place of flight table .",
        "primary_span": [
            [
                0,
                2
            ]
        ],
        "secondary_span": [
            [
                3,
                8
            ]
        ],
        "edits": [
            "employee",
            "flight"
        ],
        "edits_original": "< from > add employee </ from > < from > remove flight </ from >"
    },
    {
        "db_id": "flight_1",
        "question": "What place has the most flights coming from there?",
        "gold_parse": "SELECT origin FROM Flight GROUP BY origin ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse": "SELECT destination FROM flight GROUP BY destination ORDER BY Count ( * ) Desc LIMIT value",
        "predicted_parse_explanation": [
            "Step 1: find the number of rows of each value of destination in flight table",
            "Step 2: find the destination in flight table with largest value in the results of step 1"
        ],
        "feedback": "Replace both destination with origin .",
        "beam": [
            [
                "SELECT destination FROM flight GROUP BY destination ORDER BY Count ( * ) Desc LIMIT value",
                -0.05014610290527344
            ],
            [
                "SELECT arrival_date FROM flight GROUP BY destination ORDER BY Count ( * ) Desc LIMIT value",
                -3.166842460632324
            ],
            [
                "SELECT departure_date FROM flight GROUP BY destination ORDER BY Count ( * ) Desc LIMIT value",
                -5.24887752532959
            ],
            [
                "SELECT destination FROM flight GROUP BY origin ORDER BY Count ( * ) Desc LIMIT value",
                -7.342543601989746
            ],
            [
                "SELECT destination FROM flight GROUP BY arrival_date ORDER BY Count ( * ) Desc LIMIT value",
                -7.9094767570495605
            ],
            [
                "SELECT destination FROM flight GROUP BY departure_date ORDER BY Count ( * ) Desc LIMIT value",
                -8.08016300201416
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.destination ORDER BY Count ( * ) Desc LIMIT value",
                -9.844200134277344
            ],
            [
                "SELECT arrival_date FROM flight GROUP BY origin ORDER BY Count ( * ) Desc LIMIT value",
                -10.41610860824585
            ],
            [
                "SELECT arrival_date FROM flight GROUP BY arrival_date ORDER BY Count ( * ) Desc LIMIT value",
                -11.100777626037598
            ],
            [
                "SELECT arrival_date FROM flight GROUP BY departure_date ORDER BY Count ( * ) Desc LIMIT value",
                -11.244169235229492
            ],
            [
                "SELECT * FROM flight GROUP BY destination ORDER BY Count ( * ) Desc LIMIT value",
                -11.418523788452148
            ],
            [
                "SELECT destination FROM flight GROUP BY destination ORDER BY arrival_date Desc LIMIT value",
                -11.685649871826172
            ],
            [
                "SELECT origin FROM flight GROUP BY destination ORDER BY Count ( * ) Desc LIMIT value",
                -11.86909008026123
            ],
            [
                "SELECT aid FROM flight GROUP BY destination ORDER BY Count ( * ) Desc LIMIT value",
                -12.203932762145996
            ],
            [
                "SELECT destination FROM flight GROUP BY destination ORDER BY Sum ( arrival_date ) Desc LIMIT value",
                -12.208125114440918
            ],
            [
                "SELECT destination FROM flight ORDER BY arrival_date Desc LIMIT value",
                -12.282428741455078
            ],
            [
                "SELECT flno FROM flight GROUP BY destination ORDER BY Count ( * ) Desc LIMIT value",
                -12.357600212097168
            ],
            [
                "SELECT destination FROM flight GROUP BY destination ORDER BY departure_date Desc LIMIT value",
                -12.544135093688965
            ],
            [
                "SELECT departure_date FROM flight GROUP BY origin ORDER BY Count ( * ) Desc LIMIT value",
                -12.559947490692139
            ],
            [
                "SELECT destination FROM flight GROUP BY destination",
                -12.892471313476562
            ]
        ],
        "predicted_parse_with_values": "SELECT destination FROM flight GROUP BY destination ORDER BY Count ( * ) Desc LIMIT 1",
        "template_feedback": "in step 1 , find for each value of origin in place of destination . in step 2 , find origin in place of destination .",
        "primary_span": [
            [
                4,
                9
            ],
            [
                19,
                20
            ]
        ],
        "secondary_span": [
            [
                10,
                14
            ],
            [
                21,
                25
            ]
        ],
        "edits": [
            "origin",
            "destination",
            "origin",
            "destination"
        ],
        "edits_original": "< select > add origin </ select > < select > remove destination </ select > < groupBy > add origin </ groupBy > < groupBy > remove destination </ groupBy >"
    },
    {
        "db_id": "flight_1",
        "question": "What place has the most flights coming from there?",
        "gold_parse": "SELECT origin FROM Flight GROUP BY origin ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse": "SELECT destination FROM flight GROUP BY destination ORDER BY Count ( * ) Desc LIMIT value",
        "predicted_parse_explanation": [
            "Step 1: find the number of rows of each value of destination in flight table",
            "Step 2: find the destination in flight table with largest value in the results of step 1"
        ],
        "feedback": "Use origin in place of both destination.",
        "beam": [
            [
                "SELECT destination FROM flight GROUP BY destination ORDER BY Count ( * ) Desc LIMIT value",
                -0.05014610290527344
            ],
            [
                "SELECT arrival_date FROM flight GROUP BY destination ORDER BY Count ( * ) Desc LIMIT value",
                -3.166842460632324
            ],
            [
                "SELECT departure_date FROM flight GROUP BY destination ORDER BY Count ( * ) Desc LIMIT value",
                -5.24887752532959
            ],
            [
                "SELECT destination FROM flight GROUP BY origin ORDER BY Count ( * ) Desc LIMIT value",
                -7.342543601989746
            ],
            [
                "SELECT destination FROM flight GROUP BY arrival_date ORDER BY Count ( * ) Desc LIMIT value",
                -7.9094767570495605
            ],
            [
                "SELECT destination FROM flight GROUP BY departure_date ORDER BY Count ( * ) Desc LIMIT value",
                -8.08016300201416
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.destination ORDER BY Count ( * ) Desc LIMIT value",
                -9.844200134277344
            ],
            [
                "SELECT arrival_date FROM flight GROUP BY origin ORDER BY Count ( * ) Desc LIMIT value",
                -10.41610860824585
            ],
            [
                "SELECT arrival_date FROM flight GROUP BY arrival_date ORDER BY Count ( * ) Desc LIMIT value",
                -11.100777626037598
            ],
            [
                "SELECT arrival_date FROM flight GROUP BY departure_date ORDER BY Count ( * ) Desc LIMIT value",
                -11.244169235229492
            ],
            [
                "SELECT * FROM flight GROUP BY destination ORDER BY Count ( * ) Desc LIMIT value",
                -11.418523788452148
            ],
            [
                "SELECT destination FROM flight GROUP BY destination ORDER BY arrival_date Desc LIMIT value",
                -11.685649871826172
            ],
            [
                "SELECT origin FROM flight GROUP BY destination ORDER BY Count ( * ) Desc LIMIT value",
                -11.86909008026123
            ],
            [
                "SELECT aid FROM flight GROUP BY destination ORDER BY Count ( * ) Desc LIMIT value",
                -12.203932762145996
            ],
            [
                "SELECT destination FROM flight GROUP BY destination ORDER BY Sum ( arrival_date ) Desc LIMIT value",
                -12.208125114440918
            ],
            [
                "SELECT destination FROM flight ORDER BY arrival_date Desc LIMIT value",
                -12.282428741455078
            ],
            [
                "SELECT flno FROM flight GROUP BY destination ORDER BY Count ( * ) Desc LIMIT value",
                -12.357600212097168
            ],
            [
                "SELECT destination FROM flight GROUP BY destination ORDER BY departure_date Desc LIMIT value",
                -12.544135093688965
            ],
            [
                "SELECT departure_date FROM flight GROUP BY origin ORDER BY Count ( * ) Desc LIMIT value",
                -12.559947490692139
            ],
            [
                "SELECT destination FROM flight GROUP BY destination",
                -12.892471313476562
            ]
        ],
        "predicted_parse_with_values": "SELECT destination FROM flight GROUP BY destination ORDER BY Count ( * ) Desc LIMIT 1",
        "template_feedback": "in step 1 , find for each value of origin in place of destination . in step 2 , find origin in place of destination .",
        "primary_span": [
            [
                4,
                9
            ],
            [
                19,
                20
            ]
        ],
        "secondary_span": [
            [
                10,
                14
            ],
            [
                21,
                25
            ]
        ],
        "edits": [
            "origin",
            "destination",
            "origin",
            "destination"
        ],
        "edits_original": "< select > add origin </ select > < select > remove destination </ select > < groupBy > add origin </ groupBy > < groupBy > remove destination </ groupBy >"
    },
    {
        "db_id": "flight_1",
        "question": "Show the name of aircraft which fewest people have its certificate.",
        "gold_parse": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid GROUP BY T1.aid ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse": "SELECT name FROM aircraft GROUP BY name ORDER BY Count ( * ) Asc LIMIT value",
        "predicted_parse_explanation": [
            "Step 1: find the number of rows of each value of name in aircraft table",
            "Step 2: find the name in aircraft table with smallest value in the results of step 1"
        ],
        "feedback": "Replace name in aircraft table with airline id in certificate in step 1.",
        "beam": [
            [
                "SELECT name FROM aircraft GROUP BY name ORDER BY Count ( * ) Asc LIMIT value",
                -0.0004892349243164062
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.origin ORDER BY Count ( * ) Asc LIMIT value",
                -8.059015274047852
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.aid ORDER BY Count ( * ) Asc LIMIT value",
                -9.45695686340332
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.destination ORDER BY Count ( * ) Asc LIMIT value",
                -10.576875686645508
            ],
            [
                "SELECT name FROM aircraft ORDER BY name Asc LIMIT value",
                -12.11223840713501
            ],
            [
                "SELECT name FROM aircraft GROUP BY name ORDER BY name Asc LIMIT value",
                -12.558872818946838
            ],
            [
                "SELECT name FROM aircraft GROUP BY * ORDER BY Count ( * ) Asc LIMIT value",
                -12.807387351989746
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.origin = value GROUP BY T2.name ORDER BY Count ( * ) Asc LIMIT value",
                -12.852668285369873
            ],
            [
                "SELECT name FROM aircraft GROUP BY name ORDER BY Count ( * ) Asc",
                -13.121275901794434
            ],
            [
                "SELECT name FROM aircraft GROUP BY name ORDER BY Sum ( * ) Asc LIMIT value",
                -13.215396404266357
            ],
            [
                "SELECT name FROM aircraft GROUP BY name HAVING Count ( * ) = value",
                -13.3140869140625
            ],
            [
                "SELECT name FROM aircraft GROUP BY name ORDER BY * Asc LIMIT value",
                -13.319865703582764
            ],
            [
                "SELECT T1.name FROM aircraft AS T1 JOIN certificate AS T2 ON T1.aid = T2.aid GROUP BY T2.aid ORDER BY Count ( * ) Asc LIMIT value",
                -13.823997497558594
            ],
            [
                "SELECT name , name FROM aircraft GROUP BY name ORDER BY Count ( * ) Asc LIMIT value",
                -13.849793434143066
            ],
            [
                "SELECT name FROM aircraft GROUP BY name",
                -13.935466766357422
            ],
            [
                "SELECT name FROM aircraft GROUP BY name ORDER BY Count ( * ) Asc LIMIT value INTERSECT SELECT name FROM aircraft GROUP BY name ORDER BY Count ( * ) Asc LIMIT value",
                -14.386761665344238
            ],
            [
                "SELECT name FROM aircraft GROUP BY aid ORDER BY Count ( * ) Asc LIMIT value",
                -14.409954071044922
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T2.name ORDER BY T1.price Asc LIMIT value",
                -14.539958477020264
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.origin = value",
                -14.97150731086731
            ],
            [
                "SELECT name FROM aircraft",
                -18.396830558776855
            ]
        ],
        "predicted_parse_with_values": "SELECT name FROM aircraft GROUP BY name ORDER BY Count ( * ) Asc LIMIT 1",
        "template_feedback": "in step 1 , additionally use the information from the certificate table besides the aircraft table . find for each value of certificate 's airline id in place of name . in step 2 , use the largest in place of smallest .",
        "primary_span": [
            [
                4,
                11
            ],
            [
                17,
                25
            ],
            [
                35,
                37
            ]
        ],
        "secondary_span": [
            [
                12,
                16
            ],
            [
                26,
                30
            ],
            [
                38,
                42
            ]
        ],
        "edits": [
            "certificate",
            "airline id",
            "name",
            "descending"
        ],
        "edits_original": "< from > add certificate </ from > < groupBy > add airline id </ groupBy > < groupBy > remove name </ groupBy > < orderBy > add descending </ orderBy >"
    },
    {
        "db_id": "flight_1",
        "question": "Show the name of aircraft which fewest people have its certificate.",
        "gold_parse": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid GROUP BY T1.aid ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse": "SELECT name FROM aircraft GROUP BY name ORDER BY Count ( * ) Asc LIMIT value",
        "predicted_parse_explanation": [
            "Step 1: find the number of rows of each value of name in aircraft table",
            "Step 2: find the name in aircraft table with smallest value in the results of step 1"
        ],
        "feedback": "in step 1, you need to use airline id in certificate.",
        "beam": [
            [
                "SELECT name FROM aircraft GROUP BY name ORDER BY Count ( * ) Asc LIMIT value",
                -0.0004892349243164062
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.origin ORDER BY Count ( * ) Asc LIMIT value",
                -8.059015274047852
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.aid ORDER BY Count ( * ) Asc LIMIT value",
                -9.45695686340332
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.destination ORDER BY Count ( * ) Asc LIMIT value",
                -10.576875686645508
            ],
            [
                "SELECT name FROM aircraft ORDER BY name Asc LIMIT value",
                -12.11223840713501
            ],
            [
                "SELECT name FROM aircraft GROUP BY name ORDER BY name Asc LIMIT value",
                -12.558872818946838
            ],
            [
                "SELECT name FROM aircraft GROUP BY * ORDER BY Count ( * ) Asc LIMIT value",
                -12.807387351989746
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.origin = value GROUP BY T2.name ORDER BY Count ( * ) Asc LIMIT value",
                -12.852668285369873
            ],
            [
                "SELECT name FROM aircraft GROUP BY name ORDER BY Count ( * ) Asc",
                -13.121275901794434
            ],
            [
                "SELECT name FROM aircraft GROUP BY name ORDER BY Sum ( * ) Asc LIMIT value",
                -13.215396404266357
            ],
            [
                "SELECT name FROM aircraft GROUP BY name HAVING Count ( * ) = value",
                -13.3140869140625
            ],
            [
                "SELECT name FROM aircraft GROUP BY name ORDER BY * Asc LIMIT value",
                -13.319865703582764
            ],
            [
                "SELECT T1.name FROM aircraft AS T1 JOIN certificate AS T2 ON T1.aid = T2.aid GROUP BY T2.aid ORDER BY Count ( * ) Asc LIMIT value",
                -13.823997497558594
            ],
            [
                "SELECT name , name FROM aircraft GROUP BY name ORDER BY Count ( * ) Asc LIMIT value",
                -13.849793434143066
            ],
            [
                "SELECT name FROM aircraft GROUP BY name",
                -13.935466766357422
            ],
            [
                "SELECT name FROM aircraft GROUP BY name ORDER BY Count ( * ) Asc LIMIT value INTERSECT SELECT name FROM aircraft GROUP BY name ORDER BY Count ( * ) Asc LIMIT value",
                -14.386761665344238
            ],
            [
                "SELECT name FROM aircraft GROUP BY aid ORDER BY Count ( * ) Asc LIMIT value",
                -14.409954071044922
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T2.name ORDER BY T1.price Asc LIMIT value",
                -14.539958477020264
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.origin = value",
                -14.97150731086731
            ],
            [
                "SELECT name FROM aircraft",
                -18.396830558776855
            ]
        ],
        "predicted_parse_with_values": "SELECT name FROM aircraft GROUP BY name ORDER BY Count ( * ) Asc LIMIT 1",
        "template_feedback": "in step 1 , additionally use the information from the certificate table besides the aircraft table . find for each value of certificate 's airline id in place of name . in step 2 , use the largest in place of smallest .",
        "primary_span": [
            [
                4,
                11
            ],
            [
                17,
                25
            ],
            [
                35,
                37
            ]
        ],
        "secondary_span": [
            [
                12,
                16
            ],
            [
                26,
                30
            ],
            [
                38,
                42
            ]
        ],
        "edits": [
            "certificate",
            "airline id",
            "name",
            "descending"
        ],
        "edits_original": "< from > add certificate </ from > < groupBy > add airline id </ groupBy > < groupBy > remove name </ groupBy > < orderBy > add descending </ orderBy >"
    },
    {
        "db_id": "flight_1",
        "question": "What are the names for all aircrafts with at least 2 flights?",
        "gold_parse": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid HAVING count(*)  >= 2",
        "predicted_parse": "SELECT name FROM aircraft GROUP BY name HAVING Count ( * ) > = value",
        "predicted_parse_explanation": [
            "Step 1: find the number of rows of each value of name in aircraft table",
            "Step 2: find the name in aircraft table whose corresponding value in step 1 is greater than or equals 2"
        ],
        "feedback": "Should make sure aircraft has minimum 2 flights .",
        "beam": [
            [
                "SELECT name FROM aircraft GROUP BY name HAVING Count ( * ) > = value",
                -0.0036449432373046875
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.aid HAVING Count ( * ) > = value",
                -5.975996017456055
            ],
            [
                "SELECT T1.name FROM aircraft AS T1 JOIN certificate AS T2 ON T1.aid = T2.aid GROUP BY T2.aid HAVING Count ( * ) > = value",
                -7.619594573974609
            ],
            [
                "SELECT name FROM aircraft GROUP BY aid HAVING Count ( * ) > = value",
                -7.843992233276367
            ],
            [
                "SELECT name FROM aircraft GROUP BY * HAVING Count ( * ) > = value",
                -9.42137622833252
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.origin HAVING Count ( * ) > = value",
                -10.038015365600586
            ],
            [
                "SELECT name FROM aircraft GROUP BY distance HAVING Count ( * ) > = value",
                -10.386741638183594
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.arrival_date HAVING Count ( * ) > = value",
                -11.180710792541504
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.departure_date HAVING Count ( * ) > = value",
                -11.224432945251465
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.flno HAVING Count ( * ) > = value",
                -12.14066219329834
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.destination HAVING Count ( * ) > = value",
                -12.38204574584961
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.distance HAVING Count ( * ) > = value",
                -12.395658493041992
            ],
            [
                "SELECT T1.name FROM aircraft AS T1 JOIN certificate AS T2 ON T1.aid = T2.aid GROUP BY T2.eid HAVING Count ( * ) > = value",
                -12.685667037963867
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.price HAVING Count ( * ) > = value",
                -12.81606388092041
            ],
            [
                "SELECT T1.name FROM aircraft AS T1 JOIN employee AS T2 JOIN certificate AS T3 ON T1.aid = T3.aid AND T3.eid = T2.eid GROUP BY T2.name HAVING Count ( * ) > = value",
                -13.202858924865723
            ],
            [
                "SELECT name FROM aircraft GROUP BY name HAVING Sum ( * ) > = value",
                -13.20359754562378
            ],
            [
                "SELECT name FROM aircraft WHERE * > = value GROUP BY name HAVING Count ( * ) > = value",
                -13.73974609375
            ],
            [
                "SELECT name FROM aircraft GROUP BY name HAVING Count ( * ) BETWEEN value AND value",
                -14.168416976928711
            ],
            [
                "SELECT T1.name FROM aircraft AS T1 JOIN employee AS T2 JOIN certificate AS T3 ON T1.aid = T3.aid AND T3.eid = T2.eid GROUP BY T2.salary HAVING Count ( * ) > = value",
                -14.190072059631348
            ],
            [
                "SELECT name FROM aircraft",
                -17.72383689880371
            ]
        ],
        "predicted_parse_with_values": "SELECT name FROM aircraft GROUP BY name HAVING Count ( * ) > = 2",
        "template_feedback": "in step 1 , additionally use the information from the flight table besides the aircraft table . find for value of flight 's airline id in place of name .",
        "primary_span": [
            [
                4,
                11
            ],
            [
                17,
                24
            ]
        ],
        "secondary_span": [
            [
                12,
                16
            ],
            [
                25,
                29
            ]
        ],
        "edits": [
            "flight",
            "airline id",
            "name"
        ],
        "edits_original": "< from > add flight </ from > < groupBy > add airline id </ groupBy > < groupBy > remove name </ groupBy >"
    },
    {
        "db_id": "flight_1",
        "question": "What are the names for all aircrafts with at least 2 flights?",
        "gold_parse": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid HAVING count(*)  >= 2",
        "predicted_parse": "SELECT name FROM aircraft GROUP BY name HAVING Count ( * ) > = value",
        "predicted_parse_explanation": [
            "Step 1: find the number of rows of each value of name in aircraft table",
            "Step 2: find the name in aircraft table whose corresponding value in step 1 is greater than or equals 2"
        ],
        "feedback": "You have to ensure that aircraft at least have 2 flights.",
        "beam": [
            [
                "SELECT name FROM aircraft GROUP BY name HAVING Count ( * ) > = value",
                -0.0036449432373046875
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.aid HAVING Count ( * ) > = value",
                -5.975996017456055
            ],
            [
                "SELECT T1.name FROM aircraft AS T1 JOIN certificate AS T2 ON T1.aid = T2.aid GROUP BY T2.aid HAVING Count ( * ) > = value",
                -7.619594573974609
            ],
            [
                "SELECT name FROM aircraft GROUP BY aid HAVING Count ( * ) > = value",
                -7.843992233276367
            ],
            [
                "SELECT name FROM aircraft GROUP BY * HAVING Count ( * ) > = value",
                -9.42137622833252
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.origin HAVING Count ( * ) > = value",
                -10.038015365600586
            ],
            [
                "SELECT name FROM aircraft GROUP BY distance HAVING Count ( * ) > = value",
                -10.386741638183594
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.arrival_date HAVING Count ( * ) > = value",
                -11.180710792541504
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.departure_date HAVING Count ( * ) > = value",
                -11.224432945251465
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.flno HAVING Count ( * ) > = value",
                -12.14066219329834
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.destination HAVING Count ( * ) > = value",
                -12.38204574584961
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.distance HAVING Count ( * ) > = value",
                -12.395658493041992
            ],
            [
                "SELECT T1.name FROM aircraft AS T1 JOIN certificate AS T2 ON T1.aid = T2.aid GROUP BY T2.eid HAVING Count ( * ) > = value",
                -12.685667037963867
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.price HAVING Count ( * ) > = value",
                -12.81606388092041
            ],
            [
                "SELECT T1.name FROM aircraft AS T1 JOIN employee AS T2 JOIN certificate AS T3 ON T1.aid = T3.aid AND T3.eid = T2.eid GROUP BY T2.name HAVING Count ( * ) > = value",
                -13.202858924865723
            ],
            [
                "SELECT name FROM aircraft GROUP BY name HAVING Sum ( * ) > = value",
                -13.20359754562378
            ],
            [
                "SELECT name FROM aircraft WHERE * > = value GROUP BY name HAVING Count ( * ) > = value",
                -13.73974609375
            ],
            [
                "SELECT name FROM aircraft GROUP BY name HAVING Count ( * ) BETWEEN value AND value",
                -14.168416976928711
            ],
            [
                "SELECT T1.name FROM aircraft AS T1 JOIN employee AS T2 JOIN certificate AS T3 ON T1.aid = T3.aid AND T3.eid = T2.eid GROUP BY T2.salary HAVING Count ( * ) > = value",
                -14.190072059631348
            ],
            [
                "SELECT name FROM aircraft",
                -17.72383689880371
            ]
        ],
        "predicted_parse_with_values": "SELECT name FROM aircraft GROUP BY name HAVING Count ( * ) > = 2",
        "template_feedback": "in step 1 , additionally use the information from the flight table besides the aircraft table . find for value of flight 's airline id in place of name .",
        "primary_span": [
            [
                4,
                11
            ],
            [
                17,
                24
            ]
        ],
        "secondary_span": [
            [
                12,
                16
            ],
            [
                25,
                29
            ]
        ],
        "edits": [
            "flight",
            "airline id",
            "name"
        ],
        "edits_original": "< from > add flight </ from > < groupBy > add airline id </ groupBy > < groupBy > remove name </ groupBy >"
    },
    {
        "db_id": "flight_1",
        "question": "What are the departure and arrival dates of all flights from LA to Honolulu?",
        "gold_parse": "SELECT departure_date ,  arrival_date FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\"",
        "predicted_parse": "SELECT T1.arrival_date , T1.departure_date FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T2.name = value",
        "predicted_parse_explanation": [
            "Step 1: for each row in flight table , find the corresponding rows in aircraft table",
            "Step 2: find the arrival date and departure date of the results of step 1 whose name equals Los Angeles"
        ],
        "feedback": "Make sure find flights from origin equals Los Angeles to destination equals Honolulu .",
        "beam": [
            [
                "SELECT T1.arrival_date , T1.departure_date FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T2.name = value",
                -0.008358955383300781
            ],
            [
                "SELECT T1.destination , T1.departure_date FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T2.name = value",
                -5.040289878845215
            ],
            [
                "SELECT T1.arrival_date , T1.arrival_date FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T2.name = value",
                -6.673973083496094
            ],
            [
                "SELECT T1.departure_date , T1.departure_date FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T2.name = value",
                -7.580092430114746
            ],
            [
                "SELECT T1.arrival_date , T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T2.name = value",
                -10.268589973449707
            ],
            [
                "SELECT arrival_date , departure_date FROM flight WHERE destination = value",
                -10.809687614440918
            ],
            [
                "SELECT T1.destination , T1.arrival_date FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T2.name = value",
                -12.245976448059082
            ],
            [
                "SELECT T1.arrival_date FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T2.name = value",
                -12.33389663696289
            ],
            [
                "SELECT T1.arrival_date , T1.departure_date , T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T2.name = value",
                -12.434592723846436
            ],
            [
                "SELECT T1.arrival_date , T1.flno FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T2.name = value",
                -12.499995231628418
            ],
            [
                "SELECT T1.arrival_date , T1.departure_date FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T2.name = value AND T2.name = value",
                -13.928881645202637
            ],
            [
                "SELECT DISTINCT T1.arrival_date , T1.departure_date FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T2.name = value",
                -14.271279335021973
            ],
            [
                "SELECT T1.arrival_date , T1.destination FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T2.name = value",
                -14.585741996765137
            ],
            [
                "SELECT T1.departure_date , T1.arrival_date FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T2.name = value",
                -14.59146499633789
            ],
            [
                "SELECT T1.arrival_date , T1.departure_date FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T2.name = ( SELECT T2.name FROM aircraft AS T2 WHERE T2.name = value )",
                -14.851773262023926
            ],
            [
                "SELECT T1.arrival_date , T1.departure_date FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE DISTINCT T2.name = value",
                -15.129947662353516
            ],
            [
                "SELECT DISTINCT T1.arrival_date , T1.departure_date FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T2.name = value",
                -15.227259635925293
            ],
            [
                "SELECT T1.arrival_date , DISTINCT T1.departure_date FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T2.name = value",
                -15.247700691223145
            ],
            [
                "SELECT T1.arrival_date , T1.departure_date FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T2.name = value LIMIT value",
                -15.35883617401123
            ],
            [
                "SELECT arrival_date , departure_date FROM flight",
                -15.727190017700195
            ]
        ],
        "predicted_parse_with_values": "SELECT T1.arrival_date , T1.departure_date FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T2.name = \"Los Angeles\"",
        "template_feedback": "in step 1 , do not use the aircraft table . in step 2 , consider the origin equals Los Angeles and destination equals Honolulu conditions in place of the name equals Los Angeles conditions .",
        "primary_span": [
            [
                4,
                10
            ],
            [
                15,
                25
            ]
        ],
        "secondary_span": [
            [
                4,
                10
            ],
            [
                26,
                35
            ]
        ],
        "edits": [
            "aircraft",
            "origin equals \"Los Angeles\"",
            "destination equals \"Honolulu\"",
            "name equals \"Los Angeles\""
        ],
        "edits_original": "< from > remove aircraft </ from > < where > add origin equals \" Los Angeles \" </ where > < where > add destination equals \" Honolulu \" </ where > < where > remove name equals \" Los Angeles \" </ where >"
    },
    {
        "db_id": "flight_1",
        "question": "What is the name of each aircraft and how many flights does each one complete?",
        "gold_parse": "SELECT T2.name ,  count(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid",
        "predicted_parse": "SELECT name , Count ( * ) FROM aircraft GROUP BY name",
        "predicted_parse_explanation": [
            "find each value of name in aircraft table along with the number of the corresponding rows to each value"
        ],
        "feedback": "Also need to find all the rows of flight table .",
        "beam": [
            [
                "SELECT name , Count ( * ) FROM aircraft GROUP BY name",
                -0.00013446807861328125
            ],
            [
                "SELECT T2.name , Count ( * ) FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.destination",
                -9.825296401977539
            ],
            [
                "SELECT T2.name , Count ( * ) FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.origin",
                -10.028634071350098
            ],
            [
                "SELECT name , Count ( * ) FROM aircraft WHERE name = value GROUP BY name",
                -11.731478214263916
            ],
            [
                "SELECT name , Count ( * ) FROM aircraft GROUP BY name HAVING Count ( * ) < value",
                -11.9226655960083
            ],
            [
                "SELECT name , Count ( * ) FROM aircraft GROUP BY name ORDER BY Count ( * ) Asc",
                -12.00216007232666
            ],
            [
                "SELECT name , Sum ( * ) FROM aircraft GROUP BY name",
                -12.708951473236084
            ],
            [
                "SELECT name , Count ( * ) FROM aircraft GROUP BY name ORDER BY Count ( * ) Desc",
                -13.459436893463135
            ],
            [
                "SELECT T2.name , Count ( * ) FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.aid",
                -13.643963813781738
            ],
            [
                "SELECT T2.name , Count ( * ) FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.origin = value GROUP BY T2.name",
                -13.684688568115234
            ],
            [
                "SELECT Count ( * ) , name FROM aircraft GROUP BY name",
                -13.761494636535645
            ],
            [
                "SELECT name , Count ( * ) FROM aircraft",
                -14.171576499938965
            ],
            [
                "SELECT name , Count ( * ) , name FROM aircraft GROUP BY name",
                -14.23456859588623
            ],
            [
                "SELECT name , Count ( Count ( * ) ) FROM aircraft GROUP BY name",
                -14.501124382019043
            ],
            [
                "SELECT Count ( name ) , Count ( * ) FROM aircraft GROUP BY name",
                -14.6052885055542
            ],
            [
                "SELECT name , Count ( * ) FROM aircraft GROUP BY aid",
                -14.631442070007324
            ],
            [
                "SELECT name , Count ( * ) FROM aircraft GROUP BY name HAVING Count ( * ) > = value",
                -14.667851448059082
            ],
            [
                "SELECT name FROM aircraft GROUP BY name",
                -14.970795631408691
            ],
            [
                "SELECT name , Count ( * ) FROM aircraft GROUP BY DISTINCT name",
                -15.078734397888184
            ],
            [
                "SELECT name , Count ( DISTINCT * ) FROM aircraft GROUP BY name",
                -15.15278148651123
            ]
        ],
        "predicted_parse_with_values": "SELECT name , Count ( * ) FROM aircraft GROUP BY name",
        "template_feedback": "additionally use the information from the flight table besides the aircraft table . find for each value of flight 's airline id in place of name .",
        "primary_span": [
            [
                0,
                7
            ],
            [
                13,
                21
            ]
        ],
        "secondary_span": [
            [
                8,
                12
            ],
            [
                22,
                26
            ]
        ],
        "edits": [
            "flight",
            "airline id",
            "name"
        ],
        "edits_original": "< from > add flight </ from > < groupBy > add airline id </ groupBy > < groupBy > remove name </ groupBy >"
    },
    {
        "db_id": "flight_1",
        "question": "What is the name of each aircraft and how many flights does each one complete?",
        "gold_parse": "SELECT T2.name ,  count(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid",
        "predicted_parse": "SELECT name , Count ( * ) FROM aircraft GROUP BY name",
        "predicted_parse_explanation": [
            "find each value of name in aircraft table along with the number of the corresponding rows to each value"
        ],
        "feedback": "I need total number of rows for flight table.",
        "beam": [
            [
                "SELECT name , Count ( * ) FROM aircraft GROUP BY name",
                -0.00013446807861328125
            ],
            [
                "SELECT T2.name , Count ( * ) FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.destination",
                -9.825296401977539
            ],
            [
                "SELECT T2.name , Count ( * ) FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.origin",
                -10.028634071350098
            ],
            [
                "SELECT name , Count ( * ) FROM aircraft WHERE name = value GROUP BY name",
                -11.731478214263916
            ],
            [
                "SELECT name , Count ( * ) FROM aircraft GROUP BY name HAVING Count ( * ) < value",
                -11.9226655960083
            ],
            [
                "SELECT name , Count ( * ) FROM aircraft GROUP BY name ORDER BY Count ( * ) Asc",
                -12.00216007232666
            ],
            [
                "SELECT name , Sum ( * ) FROM aircraft GROUP BY name",
                -12.708951473236084
            ],
            [
                "SELECT name , Count ( * ) FROM aircraft GROUP BY name ORDER BY Count ( * ) Desc",
                -13.459436893463135
            ],
            [
                "SELECT T2.name , Count ( * ) FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.aid",
                -13.643963813781738
            ],
            [
                "SELECT T2.name , Count ( * ) FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.origin = value GROUP BY T2.name",
                -13.684688568115234
            ],
            [
                "SELECT Count ( * ) , name FROM aircraft GROUP BY name",
                -13.761494636535645
            ],
            [
                "SELECT name , Count ( * ) FROM aircraft",
                -14.171576499938965
            ],
            [
                "SELECT name , Count ( * ) , name FROM aircraft GROUP BY name",
                -14.23456859588623
            ],
            [
                "SELECT name , Count ( Count ( * ) ) FROM aircraft GROUP BY name",
                -14.501124382019043
            ],
            [
                "SELECT Count ( name ) , Count ( * ) FROM aircraft GROUP BY name",
                -14.6052885055542
            ],
            [
                "SELECT name , Count ( * ) FROM aircraft GROUP BY aid",
                -14.631442070007324
            ],
            [
                "SELECT name , Count ( * ) FROM aircraft GROUP BY name HAVING Count ( * ) > = value",
                -14.667851448059082
            ],
            [
                "SELECT name FROM aircraft GROUP BY name",
                -14.970795631408691
            ],
            [
                "SELECT name , Count ( * ) FROM aircraft GROUP BY DISTINCT name",
                -15.078734397888184
            ],
            [
                "SELECT name , Count ( DISTINCT * ) FROM aircraft GROUP BY name",
                -15.15278148651123
            ]
        ],
        "predicted_parse_with_values": "SELECT name , Count ( * ) FROM aircraft GROUP BY name",
        "template_feedback": "additionally use the information from the flight table besides the aircraft table . find for each value of flight 's airline id in place of name .",
        "primary_span": [
            [
                0,
                7
            ],
            [
                13,
                21
            ]
        ],
        "secondary_span": [
            [
                8,
                12
            ],
            [
                22,
                26
            ]
        ],
        "edits": [
            "flight",
            "airline id",
            "name"
        ],
        "edits_original": "< from > add flight </ from > < groupBy > add airline id </ groupBy > < groupBy > remove name </ groupBy >"
    },
    {
        "db_id": "flight_1",
        "question": "Show names for all aircrafts of which John Williams has certificates.",
        "gold_parse": "SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T1.name  =  \"John Williams\"",
        "predicted_parse": "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.origin = value",
        "predicted_parse_explanation": [
            "Step 1: for each row in flight table , find the corresponding rows in aircraft table",
            "Step 2: find the name of the results of step 1 whose origin equals John Williams"
        ],
        "feedback": "Replace flight and origin with employee and name of employee and he should have certificate .",
        "beam": [
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.origin = value",
                -0.12643647193908691
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.destination = value",
                -2.334195375442505
            ],
            [
                "SELECT name FROM aircraft WHERE name = value",
                -4.795753479003906
            ],
            [
                "SELECT T1.name FROM aircraft AS T1 JOIN certificate AS T2 ON T1.aid = T2.aid WHERE T2.eid = value",
                -5.262874603271484
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.departure_date = value",
                -6.306950569152832
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.arrival_date = value",
                -6.715485095977783
            ],
            [
                "SELECT T1.name FROM aircraft AS T1 JOIN employee AS T2 JOIN certificate AS T3 ON T1.aid = T3.aid AND T3.eid = T2.eid WHERE T2.name = value",
                -6.727557182312012
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.flno = value",
                -6.735258102416992
            ],
            [
                "SELECT name FROM aircraft",
                -6.875658988952637
            ],
            [
                "SELECT name FROM aircraft WHERE * = value",
                -7.610130310058594
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.aid = value",
                -7.740204334259033
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.price = value",
                -8.035754203796387
            ],
            [
                "SELECT name FROM aircraft WHERE aid = value",
                -8.078649520874023
            ],
            [
                "SELECT T1.name FROM aircraft AS T1 JOIN certificate AS T2 ON T1.aid = T2.aid WHERE T2.aid = value",
                -8.899855613708496
            ],
            [
                "SELECT T1.name FROM aircraft AS T1 JOIN employee AS T2 JOIN certificate AS T3 ON T1.aid = T3.aid AND T3.eid = T2.eid WHERE T2.eid = value",
                -9.07821273803711
            ],
            [
                "SELECT T1.name FROM aircraft AS T1 JOIN employee AS T2 JOIN certificate AS T3 ON T1.aid = T3.aid AND T3.eid = T2.eid WHERE T2.salary = value",
                -9.366876602172852
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.distance = value",
                -10.03951358795166
            ],
            [
                "SELECT name FROM aircraft WHERE distance = value",
                -10.478466033935547
            ],
            [
                "SELECT name FROM aircraft GROUP BY name HAVING Count ( * ) = value",
                -12.400059700012207
            ],
            [
                "SELECT T1.name FROM aircraft AS T1 EXCEPT SELECT T1.name FROM flight AS T2 JOIN aircraft AS T1 ON T2.aid = T1.aid WHERE T2.origin = value",
                -13.25260329246521
            ]
        ],
        "predicted_parse_with_values": "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.origin = \"John Williams\"",
        "template_feedback": "in step 1 , use employee table and certificate table in place of flight table in step 2 , consider the employee 's name equals John Williams conditions in place of the origin equals John Williams conditions .",
        "primary_span": [
            [
                4,
                9
            ],
            [
                19,
                27
            ]
        ],
        "secondary_span": [
            [
                10,
                14
            ],
            [
                28,
                37
            ]
        ],
        "edits": [
            "employee",
            "certificate",
            "flight",
            "name equals \"John Williams\"",
            "origin equals \"John Williams\""
        ],
        "edits_original": "< from > add employee </ from > < from > add certificate </ from > < from > remove flight </ from > < where > add name equals \" John Williams \" </ where > < where > remove origin equals \" John Williams \" </ where >"
    },
    {
        "db_id": "flight_1",
        "question": "Show names for all aircrafts of which John Williams has certificates.",
        "gold_parse": "SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T1.name  =  \"John Williams\"",
        "predicted_parse": "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.origin = value",
        "predicted_parse_explanation": [
            "Step 1: for each row in flight table , find the corresponding rows in aircraft table",
            "Step 2: find the name of the results of step 1 whose origin equals John Williams"
        ],
        "feedback": "need to use name of employee and employee and also owns the certificates.",
        "beam": [
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.origin = value",
                -0.12643647193908691
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.destination = value",
                -2.334195375442505
            ],
            [
                "SELECT name FROM aircraft WHERE name = value",
                -4.795753479003906
            ],
            [
                "SELECT T1.name FROM aircraft AS T1 JOIN certificate AS T2 ON T1.aid = T2.aid WHERE T2.eid = value",
                -5.262874603271484
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.departure_date = value",
                -6.306950569152832
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.arrival_date = value",
                -6.715485095977783
            ],
            [
                "SELECT T1.name FROM aircraft AS T1 JOIN employee AS T2 JOIN certificate AS T3 ON T1.aid = T3.aid AND T3.eid = T2.eid WHERE T2.name = value",
                -6.727557182312012
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.flno = value",
                -6.735258102416992
            ],
            [
                "SELECT name FROM aircraft",
                -6.875658988952637
            ],
            [
                "SELECT name FROM aircraft WHERE * = value",
                -7.610130310058594
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.aid = value",
                -7.740204334259033
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.price = value",
                -8.035754203796387
            ],
            [
                "SELECT name FROM aircraft WHERE aid = value",
                -8.078649520874023
            ],
            [
                "SELECT T1.name FROM aircraft AS T1 JOIN certificate AS T2 ON T1.aid = T2.aid WHERE T2.aid = value",
                -8.899855613708496
            ],
            [
                "SELECT T1.name FROM aircraft AS T1 JOIN employee AS T2 JOIN certificate AS T3 ON T1.aid = T3.aid AND T3.eid = T2.eid WHERE T2.eid = value",
                -9.07821273803711
            ],
            [
                "SELECT T1.name FROM aircraft AS T1 JOIN employee AS T2 JOIN certificate AS T3 ON T1.aid = T3.aid AND T3.eid = T2.eid WHERE T2.salary = value",
                -9.366876602172852
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.distance = value",
                -10.03951358795166
            ],
            [
                "SELECT name FROM aircraft WHERE distance = value",
                -10.478466033935547
            ],
            [
                "SELECT name FROM aircraft GROUP BY name HAVING Count ( * ) = value",
                -12.400059700012207
            ],
            [
                "SELECT T1.name FROM aircraft AS T1 EXCEPT SELECT T1.name FROM flight AS T2 JOIN aircraft AS T1 ON T2.aid = T1.aid WHERE T2.origin = value",
                -13.25260329246521
            ]
        ],
        "predicted_parse_with_values": "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.origin = \"John Williams\"",
        "template_feedback": "in step 1 , use employee table and certificate table in place of flight table in step 2 , consider the employee 's name equals John Williams conditions in place of the origin equals John Williams conditions .",
        "primary_span": [
            [
                4,
                9
            ],
            [
                19,
                27
            ]
        ],
        "secondary_span": [
            [
                10,
                14
            ],
            [
                28,
                37
            ]
        ],
        "edits": [
            "employee",
            "certificate",
            "flight",
            "name equals \"John Williams\"",
            "origin equals \"John Williams\""
        ],
        "edits_original": "< from > add employee </ from > < from > add certificate </ from > < from > remove flight </ from > < where > add name equals \" John Williams \" </ where > < where > remove origin equals \" John Williams \" </ where >"
    },
    {
        "db_id": "formula_1",
        "question": "What is the maximum fastest lap speed in race named 'Monaco Grand Prix' in 2008 ?",
        "gold_parse": "SELECT max(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = \"Monaco Grand Prix\"",
        "predicted_parse": "SELECT Max ( T3.positionText ) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN constructorStandings AS T3 ON T2.raceId = T3.raceId WHERE T1.country = value",
        "predicted_parse_explanation": [
            "Step 1: for each row in circuits table , find the corresponding rows in races table and in constructor standings table",
            "Step 2: find the maximum position text of the results of step 1 whose country equals Monaco Grand Prix"
        ],
        "feedback": "Replace circuits table with results table(in step 1) , position text with fastest Lap Speed , country with name of races for year equals 2008 .",
        "beam": [
            [
                "SELECT Max ( T3.positionText ) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN constructorStandings AS T3 ON T2.raceId = T3.raceId WHERE T1.country = value",
                -0.5713262557983398
            ],
            [
                "SELECT Max ( T2.positionText ) FROM status AS T1 JOIN constructorStandings AS T2 WHERE T1.number = value",
                -1.341660499572754
            ],
            [
                "SELECT Max ( T3.positionText ) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN constructorStandings AS T3 ON T2.raceId = T3.raceId WHERE T1.country = value ORDER BY T3.positionText Desc LIMIT value",
                -3.1669654846191406
            ],
            [
                "SELECT Max ( T3.positionText ) , T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN constructorStandings AS T3 ON T2.raceId = T3.raceId WHERE T1.country = value GROUP BY T3.positionText ORDER BY T3.positionText Desc LIMIT value",
                -3.5472583770751953
            ],
            [
                "SELECT Max ( T4.positionText ) , T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN status AS T3 JOIN constructorStandings AS T4 ON T2.raceId = T4.raceId WHERE T3.number = value GROUP BY T4.positionText ORDER BY T4.positionText Desc LIMIT value",
                -3.8325133323669434
            ],
            [
                "SELECT Max ( T2.positionText ) FROM status AS T1 JOIN constructorStandings AS T2 WHERE T1.number = value ORDER BY T2.positionText Desc LIMIT value",
                -4.0678510665893555
            ],
            [
                "SELECT Max ( T3.positionText ) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN constructorStandings AS T3 ON T2.raceId = T3.raceId WHERE T1.circuitRef = value",
                -4.4688520431518555
            ],
            [
                "SELECT Max ( T4.positionText ) , T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN status AS T3 JOIN constructorStandings AS T4 ON T2.raceId = T4.raceId WHERE T3.number = value GROUP BY T1.country ORDER BY T4.positionText Desc LIMIT value",
                -4.634240627288818
            ],
            [
                "SELECT Max ( T4.positionText ) , T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN status AS T3 JOIN constructorStandings AS T4 ON T2.raceId = T4.raceId WHERE T3.number = value GROUP BY T4.positionText ORDER BY Count ( * ) Desc LIMIT value",
                -5.346127033233643
            ],
            [
                "SELECT Max ( T3.positionText ) , T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN constructorStandings AS T3 ON T2.raceId = T3.raceId WHERE T1.country = value GROUP BY T1.country ORDER BY T3.positionText Desc LIMIT value",
                -5.560305595397949
            ],
            [
                "SELECT Max ( T3.positionText ) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN constructorStandings AS T3 ON T2.raceId = T3.raceId WHERE T1.country = value ORDER BY T3.positionText Asc LIMIT value",
                -5.780391693115234
            ],
            [
                "SELECT Max ( T3.positionText ) , T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN constructorStandings AS T3 ON T2.raceId = T3.raceId WHERE T1.country = value GROUP BY T3.positionText ORDER BY Count ( * ) Desc LIMIT value",
                -5.799554824829102
            ],
            [
                "SELECT Max ( T4.positionText ) , T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN status AS T3 JOIN constructorStandings AS T4 ON T2.raceId = T4.raceId WHERE T3.number = value GROUP BY T1.country ORDER BY Count ( * ) Desc LIMIT value",
                -6.226083278656006
            ],
            [
                "SELECT Max ( T3.positionText ) , T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN constructorStandings AS T3 ON T2.raceId = T3.raceId WHERE T1.circuitRef = value GROUP BY T1.country ORDER BY T3.positionText Desc LIMIT value",
                -6.26854133605957
            ],
            [
                "SELECT Max ( T3.positionText ) , T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN constructorStandings AS T3 ON T2.raceId = T3.raceId WHERE T1.circuitRef = value GROUP BY T3.positionText ORDER BY T3.positionText Desc LIMIT value",
                -6.423901081085205
            ],
            [
                "SELECT Max ( T3.positionText ) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId AND T1.circuitId = T2.circuitId JOIN constructorStandings AS T3 ON T2.raceId = T3.raceId JOIN lapTimes AS T4 ON T2.raceId = T4.raceId WHERE T1.country = value ORDER BY T4.lap Desc LIMIT value",
                -6.773154258728027
            ],
            [
                "SELECT Max ( T3.positionText ) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN constructorStandings AS T3 ON T2.raceId = T3.raceId WHERE T1.circuitRef = value ORDER BY T3.positionText Desc LIMIT value",
                -7.016938209533691
            ],
            [
                "SELECT Max ( T2.positionText ) FROM races AS T1 JOIN constructorStandings AS T2 ON T2.raceId = T1.raceId JOIN constructorResults AS T3 ON T1.raceId = T3.raceId WHERE T3.positionText = value",
                -7.430216312408447
            ],
            [
                "SELECT Max ( T2.positionText ) FROM status AS T1 JOIN constructorStandings AS T2 WHERE T1.number = value ORDER BY T2.positionText Asc LIMIT value",
                -7.830842971801758
            ],
            [
                "SELECT Max ( T2.positionText ) FROM drivers AS T1 JOIN constructorStandings AS T2 ON T2.driverId = T1.driverId JOIN lapTimes AS T3 ON T1.driverId = T3.driverId WHERE T3.lap = value",
                -8.645785331726074
            ]
        ],
        "predicted_parse_with_values": "SELECT Max ( T3.positionText ) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN constructorStandings AS T3 ON T2.raceId = T3.raceId WHERE T1.country = \"Monaco Grand Prix\"",
        "template_feedback": "in step 1 , use results table in place of circuits table and constructor standings table in step 2 , consider the races 's name equals Monaco Grand Prix and year equals 2008 conditions in place of the country equals Monaco Grand Prix conditions . find maximum fastest lap speed in place of maximum constructor standings 's position text .",
        "primary_span": [
            [
                4,
                6
            ],
            [
                20,
                33
            ],
            [
                45,
                49
            ]
        ],
        "secondary_span": [
            [
                7,
                15
            ],
            [
                34,
                44
            ],
            [
                50,
                59
            ]
        ],
        "edits": [
            "maximum fastest lap speed",
            "maximum position text",
            "results",
            "circuits",
            "constructor standings",
            "year equals 2008",
            "name equals \"Monaco Grand Prix\"",
            "country equals \"Monaco Grand Prix\""
        ],
        "edits_original": "< select > add maximum fastest lap speed </ select > < select > remove maximum position text </ select > < from > add results </ from > < from > remove circuits </ from > < from > remove constructor standings </ from > < where > add year equals 2008 </ where > < where > add name equals \" Monaco Grand Prix \" </ where > < where > remove country equals \" Monaco Grand Prix \" </ where >"
    },
    {
        "db_id": "formula_1",
        "question": "What is the maximum fastest lap speed in race named 'Monaco Grand Prix' in 2008 ?",
        "gold_parse": "SELECT max(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = \"Monaco Grand Prix\"",
        "predicted_parse": "SELECT Max ( T3.positionText ) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN constructorStandings AS T3 ON T2.raceId = T3.raceId WHERE T1.country = value",
        "predicted_parse_explanation": [
            "Step 1: for each row in circuits table , find the corresponding rows in races table and in constructor standings table",
            "Step 2: find the maximum position text of the results of step 1 whose country equals Monaco Grand Prix"
        ],
        "feedback": "You should use results table , fastest lap speed ,  name of races whose year is corresponds to 2008.",
        "beam": [
            [
                "SELECT Max ( T3.positionText ) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN constructorStandings AS T3 ON T2.raceId = T3.raceId WHERE T1.country = value",
                -0.5713262557983398
            ],
            [
                "SELECT Max ( T2.positionText ) FROM status AS T1 JOIN constructorStandings AS T2 WHERE T1.number = value",
                -1.341660499572754
            ],
            [
                "SELECT Max ( T3.positionText ) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN constructorStandings AS T3 ON T2.raceId = T3.raceId WHERE T1.country = value ORDER BY T3.positionText Desc LIMIT value",
                -3.1669654846191406
            ],
            [
                "SELECT Max ( T3.positionText ) , T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN constructorStandings AS T3 ON T2.raceId = T3.raceId WHERE T1.country = value GROUP BY T3.positionText ORDER BY T3.positionText Desc LIMIT value",
                -3.5472583770751953
            ],
            [
                "SELECT Max ( T4.positionText ) , T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN status AS T3 JOIN constructorStandings AS T4 ON T2.raceId = T4.raceId WHERE T3.number = value GROUP BY T4.positionText ORDER BY T4.positionText Desc LIMIT value",
                -3.8325133323669434
            ],
            [
                "SELECT Max ( T2.positionText ) FROM status AS T1 JOIN constructorStandings AS T2 WHERE T1.number = value ORDER BY T2.positionText Desc LIMIT value",
                -4.0678510665893555
            ],
            [
                "SELECT Max ( T3.positionText ) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN constructorStandings AS T3 ON T2.raceId = T3.raceId WHERE T1.circuitRef = value",
                -4.4688520431518555
            ],
            [
                "SELECT Max ( T4.positionText ) , T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN status AS T3 JOIN constructorStandings AS T4 ON T2.raceId = T4.raceId WHERE T3.number = value GROUP BY T1.country ORDER BY T4.positionText Desc LIMIT value",
                -4.634240627288818
            ],
            [
                "SELECT Max ( T4.positionText ) , T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN status AS T3 JOIN constructorStandings AS T4 ON T2.raceId = T4.raceId WHERE T3.number = value GROUP BY T4.positionText ORDER BY Count ( * ) Desc LIMIT value",
                -5.346127033233643
            ],
            [
                "SELECT Max ( T3.positionText ) , T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN constructorStandings AS T3 ON T2.raceId = T3.raceId WHERE T1.country = value GROUP BY T1.country ORDER BY T3.positionText Desc LIMIT value",
                -5.560305595397949
            ],
            [
                "SELECT Max ( T3.positionText ) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN constructorStandings AS T3 ON T2.raceId = T3.raceId WHERE T1.country = value ORDER BY T3.positionText Asc LIMIT value",
                -5.780391693115234
            ],
            [
                "SELECT Max ( T3.positionText ) , T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN constructorStandings AS T3 ON T2.raceId = T3.raceId WHERE T1.country = value GROUP BY T3.positionText ORDER BY Count ( * ) Desc LIMIT value",
                -5.799554824829102
            ],
            [
                "SELECT Max ( T4.positionText ) , T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN status AS T3 JOIN constructorStandings AS T4 ON T2.raceId = T4.raceId WHERE T3.number = value GROUP BY T1.country ORDER BY Count ( * ) Desc LIMIT value",
                -6.226083278656006
            ],
            [
                "SELECT Max ( T3.positionText ) , T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN constructorStandings AS T3 ON T2.raceId = T3.raceId WHERE T1.circuitRef = value GROUP BY T1.country ORDER BY T3.positionText Desc LIMIT value",
                -6.26854133605957
            ],
            [
                "SELECT Max ( T3.positionText ) , T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN constructorStandings AS T3 ON T2.raceId = T3.raceId WHERE T1.circuitRef = value GROUP BY T3.positionText ORDER BY T3.positionText Desc LIMIT value",
                -6.423901081085205
            ],
            [
                "SELECT Max ( T3.positionText ) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId AND T1.circuitId = T2.circuitId JOIN constructorStandings AS T3 ON T2.raceId = T3.raceId JOIN lapTimes AS T4 ON T2.raceId = T4.raceId WHERE T1.country = value ORDER BY T4.lap Desc LIMIT value",
                -6.773154258728027
            ],
            [
                "SELECT Max ( T3.positionText ) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN constructorStandings AS T3 ON T2.raceId = T3.raceId WHERE T1.circuitRef = value ORDER BY T3.positionText Desc LIMIT value",
                -7.016938209533691
            ],
            [
                "SELECT Max ( T2.positionText ) FROM races AS T1 JOIN constructorStandings AS T2 ON T2.raceId = T1.raceId JOIN constructorResults AS T3 ON T1.raceId = T3.raceId WHERE T3.positionText = value",
                -7.430216312408447
            ],
            [
                "SELECT Max ( T2.positionText ) FROM status AS T1 JOIN constructorStandings AS T2 WHERE T1.number = value ORDER BY T2.positionText Asc LIMIT value",
                -7.830842971801758
            ],
            [
                "SELECT Max ( T2.positionText ) FROM drivers AS T1 JOIN constructorStandings AS T2 ON T2.driverId = T1.driverId JOIN lapTimes AS T3 ON T1.driverId = T3.driverId WHERE T3.lap = value",
                -8.645785331726074
            ]
        ],
        "predicted_parse_with_values": "SELECT Max ( T3.positionText ) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN constructorStandings AS T3 ON T2.raceId = T3.raceId WHERE T1.country = \"Monaco Grand Prix\"",
        "template_feedback": "in step 1 , use results table in place of circuits table and constructor standings table in step 2 , consider the races 's name equals Monaco Grand Prix and year equals 2008 conditions in place of the country equals Monaco Grand Prix conditions . find maximum fastest lap speed in place of maximum constructor standings 's position text .",
        "primary_span": [
            [
                4,
                6
            ],
            [
                20,
                33
            ],
            [
                45,
                49
            ]
        ],
        "secondary_span": [
            [
                7,
                15
            ],
            [
                34,
                44
            ],
            [
                50,
                59
            ]
        ],
        "edits": [
            "maximum fastest lap speed",
            "maximum position text",
            "results",
            "circuits",
            "constructor standings",
            "year equals 2008",
            "name equals \"Monaco Grand Prix\"",
            "country equals \"Monaco Grand Prix\""
        ],
        "edits_original": "< select > add maximum fastest lap speed </ select > < select > remove maximum position text </ select > < from > add results </ from > < from > remove circuits </ from > < from > remove constructor standings </ from > < where > add year equals 2008 </ where > < where > add name equals \" Monaco Grand Prix \" </ where > < where > remove country equals \" Monaco Grand Prix \" </ where >"
    },
    {
        "db_id": "formula_1",
        "question": "What are the different names of all the races in reverse alphabetical order?",
        "gold_parse": "SELECT DISTINCT name FROM races ORDER BY name DESC",
        "predicted_parse": "SELECT country FROM circuits ORDER BY country Asc",
        "predicted_parse_explanation": [
            "find the country in circuits table ordered ascending by country"
        ],
        "feedback": "Substitute country of circuits table with name of races table , and order descending by name .",
        "beam": [
            [
                "SELECT country FROM circuits ORDER BY country Asc",
                -0.548194408416748
            ],
            [
                "SELECT DISTINCT country FROM circuits ORDER BY country Asc",
                -0.8820638656616211
            ],
            [
                "SELECT DISTINCT T2.name FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId ORDER BY T1.country Asc",
                -5.797573089599609
            ],
            [
                "SELECT T2.name FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId ORDER BY T1.country Asc",
                -5.826405048370361
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId ORDER BY T2.name Asc",
                -6.776788711547852
            ],
            [
                "SELECT DISTINCT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId ORDER BY T2.name Asc",
                -7.235841751098633
            ],
            [
                "SELECT DISTINCT T2.dob FROM circuits AS T1 JOIN seasons AS T2 ORDER BY T1.country Asc",
                -9.455188751220703
            ],
            [
                "SELECT T2.dob FROM circuits AS T1 JOIN seasons AS T2 ORDER BY T1.country Asc",
                -9.515255451202393
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN seasons AS T2 ORDER BY T2.dob Asc",
                -10.434537410736084
            ],
            [
                "SELECT DISTINCT T1.country FROM circuits AS T1 JOIN seasons AS T2 ORDER BY T2.dob Asc",
                -10.822339057922363
            ],
            [
                "SELECT name FROM races ORDER BY name Asc",
                -12.043723583221436
            ],
            [
                "SELECT DISTINCT name FROM races ORDER BY name Asc",
                -12.13737154006958
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN drivers AS T3 JOIN constructorStandings AS T4 ON T2.raceId = T4.raceId AND T4.driverId = T3.driverId ORDER BY T3.driverRef Asc",
                -12.905128955841064
            ],
            [
                "SELECT DISTINCT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN drivers AS T3 JOIN constructorStandings AS T4 ON T2.raceId = T4.raceId AND T4.driverId = T3.driverId ORDER BY T3.driverRef Asc",
                -13.153375625610352
            ],
            [
                "SELECT DISTINCT country FROM circuits",
                -13.232805252075195
            ],
            [
                "SELECT country FROM circuits ORDER BY country Desc",
                -13.419848918914795
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId ORDER BY T2.url Asc",
                -13.627452373504639
            ],
            [
                "SELECT DISTINCT country FROM circuits ORDER BY country Desc",
                -13.855772018432617
            ],
            [
                "SELECT country FROM circuits GROUP BY country ORDER BY Count ( * ) Asc",
                -13.94263744354248
            ],
            [
                "SELECT DISTINCT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId ORDER BY T2.url Asc",
                -13.960454940795898
            ]
        ],
        "predicted_parse_with_values": "SELECT country FROM circuits ORDER BY country Asc",
        "template_feedback": "use races table in place of circuits table . find races 's name in place of country . make sure no repetition in the results . order the results descending by races 's name in place of ordering ascending by country .",
        "primary_span": [
            [
                0,
                2
            ],
            [
                9,
                12
            ],
            [
                18,
                25
            ],
            [
                26,
                33
            ]
        ],
        "secondary_span": [
            [
                3,
                8
            ],
            [
                13,
                17
            ],
            [
                34,
                41
            ]
        ],
        "edits": [
            "distinct",
            "name",
            "country",
            "races",
            "circuits",
            "name",
            "descending",
            "country"
        ],
        "edits_original": "< select > add distinct </ select > < select > add name </ select > < select > remove country </ select > < from > add races </ from > < from > remove circuits </ from > < orderBy > add name </ orderBy > < orderBy > add descending </ orderBy > < orderBy > remove country </ orderBy >"
    },
    {
        "db_id": "formula_1",
        "question": "What are the different names of all the races in reverse alphabetical order?",
        "gold_parse": "SELECT DISTINCT name FROM races ORDER BY name DESC",
        "predicted_parse": "SELECT country FROM circuits ORDER BY country Asc",
        "predicted_parse_explanation": [
            "find the country in circuits table ordered ascending by country"
        ],
        "feedback": "You need to return  name of races table instead of country of circuits table in descending order with respect to name.",
        "beam": [
            [
                "SELECT country FROM circuits ORDER BY country Asc",
                -0.548194408416748
            ],
            [
                "SELECT DISTINCT country FROM circuits ORDER BY country Asc",
                -0.8820638656616211
            ],
            [
                "SELECT DISTINCT T2.name FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId ORDER BY T1.country Asc",
                -5.797573089599609
            ],
            [
                "SELECT T2.name FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId ORDER BY T1.country Asc",
                -5.826405048370361
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId ORDER BY T2.name Asc",
                -6.776788711547852
            ],
            [
                "SELECT DISTINCT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId ORDER BY T2.name Asc",
                -7.235841751098633
            ],
            [
                "SELECT DISTINCT T2.dob FROM circuits AS T1 JOIN seasons AS T2 ORDER BY T1.country Asc",
                -9.455188751220703
            ],
            [
                "SELECT T2.dob FROM circuits AS T1 JOIN seasons AS T2 ORDER BY T1.country Asc",
                -9.515255451202393
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN seasons AS T2 ORDER BY T2.dob Asc",
                -10.434537410736084
            ],
            [
                "SELECT DISTINCT T1.country FROM circuits AS T1 JOIN seasons AS T2 ORDER BY T2.dob Asc",
                -10.822339057922363
            ],
            [
                "SELECT name FROM races ORDER BY name Asc",
                -12.043723583221436
            ],
            [
                "SELECT DISTINCT name FROM races ORDER BY name Asc",
                -12.13737154006958
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN drivers AS T3 JOIN constructorStandings AS T4 ON T2.raceId = T4.raceId AND T4.driverId = T3.driverId ORDER BY T3.driverRef Asc",
                -12.905128955841064
            ],
            [
                "SELECT DISTINCT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN drivers AS T3 JOIN constructorStandings AS T4 ON T2.raceId = T4.raceId AND T4.driverId = T3.driverId ORDER BY T3.driverRef Asc",
                -13.153375625610352
            ],
            [
                "SELECT DISTINCT country FROM circuits",
                -13.232805252075195
            ],
            [
                "SELECT country FROM circuits ORDER BY country Desc",
                -13.419848918914795
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId ORDER BY T2.url Asc",
                -13.627452373504639
            ],
            [
                "SELECT DISTINCT country FROM circuits ORDER BY country Desc",
                -13.855772018432617
            ],
            [
                "SELECT country FROM circuits GROUP BY country ORDER BY Count ( * ) Asc",
                -13.94263744354248
            ],
            [
                "SELECT DISTINCT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId ORDER BY T2.url Asc",
                -13.960454940795898
            ]
        ],
        "predicted_parse_with_values": "SELECT country FROM circuits ORDER BY country Asc",
        "template_feedback": "use races table in place of circuits table . find races 's name in place of country . make sure no repetition in the results . order the results descending by races 's name in place of ordering ascending by country .",
        "primary_span": [
            [
                0,
                2
            ],
            [
                9,
                12
            ],
            [
                18,
                25
            ],
            [
                26,
                33
            ]
        ],
        "secondary_span": [
            [
                3,
                8
            ],
            [
                13,
                17
            ],
            [
                34,
                41
            ]
        ],
        "edits": [
            "distinct",
            "name",
            "country",
            "races",
            "circuits",
            "name",
            "descending",
            "country"
        ],
        "edits_original": "< select > add distinct </ select > < select > add name </ select > < select > remove country </ select > < from > add races </ from > < from > remove circuits </ from > < orderBy > add name </ orderBy > < orderBy > add descending </ orderBy > < orderBy > remove country </ orderBy >"
    },
    {
        "db_id": "formula_1",
        "question": "What is the id and last name of the driver with the longest laptime?",
        "gold_parse": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds DESC LIMIT 1",
        "predicted_parse": "SELECT constructorStandingsId , constructorId FROM constructorStandings ORDER BY constructorId Desc LIMIT value",
        "predicted_parse_explanation": [
            "find the constructor standings id and constructor id in constructor standings table with largest value of constructor id"
        ],
        "feedback": "Replace constructor standings id with driver id , driver reference with duration , constructor standings id table with drivers table , 2nd constructor id with lap times in milliseconds .",
        "beam": [
            [
                "SELECT constructorStandingsId , constructorId FROM constructorStandings ORDER BY constructorId Desc LIMIT value",
                -0.5908793210983276
            ],
            [
                "SELECT constructorStandingsId , constructorStandingsId FROM constructorStandings ORDER BY constructorId Desc LIMIT value",
                -1.9723920822143555
            ],
            [
                "SELECT constructorStandingsId , positionText FROM constructorStandings ORDER BY constructorId Desc LIMIT value",
                -2.8820080757141113
            ],
            [
                "SELECT T2.constructorStandingsId , T3.milliseconds FROM drivers AS T1 JOIN constructorStandings AS T2 ON T2.driverId = T1.driverId JOIN lapTimes AS T3 ON T1.driverId = T3.driverId ORDER BY T2.constructorId Desc LIMIT value",
                -3.2086844444274902
            ],
            [
                "SELECT T2.constructorStandingsId , T3.positionText FROM races AS T1 JOIN constructorStandings AS T2 ON T2.raceId = T1.raceId JOIN constructorResults AS T3 ON T1.raceId = T3.raceId ORDER BY T2.constructorId Desc LIMIT value",
                -3.3084278106689453
            ],
            [
                "SELECT T2.constructorStandingsId , T3.milliseconds FROM drivers AS T1 JOIN constructorStandings AS T2 ON T2.driverId = T1.driverId JOIN pitStops AS T3 ON T1.driverId = T3.driverId ORDER BY T2.constructorId Desc LIMIT value",
                -3.7033262252807617
            ],
            [
                "SELECT constructorStandingsId , raceId FROM constructorStandings ORDER BY constructorId Desc LIMIT value",
                -3.724762439727783
            ],
            [
                "SELECT constructorStandingsId , positionOrder FROM constructorStandings ORDER BY constructorId Desc LIMIT value",
                -4.111904144287109
            ],
            [
                "SELECT T1.constructorStandingsId , T2.time FROM constructorStandings AS T1 JOIN results AS T2 ORDER BY T1.constructorId Desc LIMIT value",
                -4.482462406158447
            ],
            [
                "SELECT T1.constructorStandingsId , T2.rank FROM constructorStandings AS T1 JOIN results AS T2 ORDER BY T1.constructorId Desc LIMIT value",
                -4.520471096038818
            ],
            [
                "SELECT T2.constructorStandingsId , T2.constructorId FROM drivers AS T1 JOIN constructorStandings AS T2 ON T2.driverId = T1.driverId JOIN lapTimes AS T3 ON T1.driverId = T3.driverId ORDER BY T3.milliseconds Desc LIMIT value",
                -4.67335307598114
            ],
            [
                "SELECT constructorStandingsId , number FROM constructorStandings ORDER BY constructorId Desc LIMIT value",
                -5.199938774108887
            ],
            [
                "SELECT T2.constructorStandingsId , T1.constructorRef FROM constructors AS T1 JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId ORDER BY T2.constructorId Desc LIMIT value",
                -5.310351371765137
            ],
            [
                "SELECT T2.constructorStandingsId , T3.driverId FROM drivers AS T1 JOIN constructorStandings AS T2 ON T2.driverId = T1.driverId JOIN lapTimes AS T3 ON T1.driverId = T3.driverId ORDER BY T2.constructorId Desc LIMIT value",
                -5.417489051818848
            ],
            [
                "SELECT T2.constructorStandingsId , T3.lap FROM drivers AS T1 JOIN constructorStandings AS T2 ON T2.driverId = T1.driverId JOIN lapTimes AS T3 ON T1.driverId = T3.driverId ORDER BY T2.constructorId Desc LIMIT value",
                -5.478405952453613
            ],
            [
                "SELECT T1.constructorStandingsId , T2.points FROM constructorStandings AS T1 JOIN results AS T2 ORDER BY T1.constructorId Desc LIMIT value",
                -5.556711196899414
            ],
            [
                "SELECT constructorStandingsId , position FROM constructorStandings ORDER BY constructorId Desc LIMIT value",
                -5.785552501678467
            ],
            [
                "SELECT T2.constructorStandingsId , T3.lap FROM drivers AS T1 JOIN constructorStandings AS T2 ON T2.driverId = T1.driverId JOIN pitStops AS T3 ON T1.driverId = T3.driverId ORDER BY T2.constructorId Desc LIMIT value",
                -5.7919816970825195
            ],
            [
                "SELECT T2.constructorStandingsId , T3.driverId FROM drivers AS T1 JOIN constructorStandings AS T2 ON T2.driverId = T1.driverId JOIN pitStops AS T3 ON T1.driverId = T3.driverId ORDER BY T2.constructorId Desc LIMIT value",
                -5.856197357177734
            ],
            [
                "SELECT T2.constructorStandingsId , T2.constructorStandingsId FROM drivers AS T1 JOIN constructorStandings AS T2 ON T2.driverId = T1.driverId JOIN lapTimes AS T3 ON T1.driverId = T3.driverId ORDER BY T3.milliseconds Desc LIMIT value",
                -6.024555206298828
            ]
        ],
        "predicted_parse_with_values": "SELECT constructorStandingsId , constructorId FROM constructorStandings ORDER BY constructorId Desc LIMIT 1",
        "template_feedback": "use lap times table and drivers table in place of constructor standings table . find drivers 's driver id and surname in place of constructor standings id and constructor id . order the results by milliseconds in place of constructor id .",
        "primary_span": [
            [
                0,
                6
            ],
            [
                14,
                20
            ],
            [
                31,
                35
            ]
        ],
        "secondary_span": [
            [
                7,
                13
            ],
            [
                21,
                30
            ],
            [
                36,
                41
            ]
        ],
        "edits": [
            "driver id",
            "surname",
            "constructor standings id",
            "constructor id",
            "drivers",
            "lap times",
            "constructor standings",
            "milliseconds",
            "constructor id"
        ],
        "edits_original": "< select > add driver id </ select > < select > add surname </ select > < select > remove constructor standings id </ select > < select > remove constructor id </ select > < from > add drivers </ from > < from > add lap times </ from > < from > remove constructor standings </ from > < orderBy > add milliseconds </ orderBy > < orderBy > remove constructor id </ orderBy >"
    },
    {
        "db_id": "formula_1",
        "question": "What is the id and last name of the driver with the longest laptime?",
        "gold_parse": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds DESC LIMIT 1",
        "predicted_parse": "SELECT constructorStandingsId , constructorId FROM constructorStandings ORDER BY constructorId Desc LIMIT value",
        "predicted_parse_explanation": [
            "find the constructor standings id and constructor id in constructor standings table with largest value of constructor id"
        ],
        "feedback": "You have to use id of driver, duration, drivers table, lap times in milliseconds instead of constructor standings id, driver reference, constructor standings id, 2nd constructor id .",
        "beam": [
            [
                "SELECT constructorStandingsId , constructorId FROM constructorStandings ORDER BY constructorId Desc LIMIT value",
                -0.5908793210983276
            ],
            [
                "SELECT constructorStandingsId , constructorStandingsId FROM constructorStandings ORDER BY constructorId Desc LIMIT value",
                -1.9723920822143555
            ],
            [
                "SELECT constructorStandingsId , positionText FROM constructorStandings ORDER BY constructorId Desc LIMIT value",
                -2.8820080757141113
            ],
            [
                "SELECT T2.constructorStandingsId , T3.milliseconds FROM drivers AS T1 JOIN constructorStandings AS T2 ON T2.driverId = T1.driverId JOIN lapTimes AS T3 ON T1.driverId = T3.driverId ORDER BY T2.constructorId Desc LIMIT value",
                -3.2086844444274902
            ],
            [
                "SELECT T2.constructorStandingsId , T3.positionText FROM races AS T1 JOIN constructorStandings AS T2 ON T2.raceId = T1.raceId JOIN constructorResults AS T3 ON T1.raceId = T3.raceId ORDER BY T2.constructorId Desc LIMIT value",
                -3.3084278106689453
            ],
            [
                "SELECT T2.constructorStandingsId , T3.milliseconds FROM drivers AS T1 JOIN constructorStandings AS T2 ON T2.driverId = T1.driverId JOIN pitStops AS T3 ON T1.driverId = T3.driverId ORDER BY T2.constructorId Desc LIMIT value",
                -3.7033262252807617
            ],
            [
                "SELECT constructorStandingsId , raceId FROM constructorStandings ORDER BY constructorId Desc LIMIT value",
                -3.724762439727783
            ],
            [
                "SELECT constructorStandingsId , positionOrder FROM constructorStandings ORDER BY constructorId Desc LIMIT value",
                -4.111904144287109
            ],
            [
                "SELECT T1.constructorStandingsId , T2.time FROM constructorStandings AS T1 JOIN results AS T2 ORDER BY T1.constructorId Desc LIMIT value",
                -4.482462406158447
            ],
            [
                "SELECT T1.constructorStandingsId , T2.rank FROM constructorStandings AS T1 JOIN results AS T2 ORDER BY T1.constructorId Desc LIMIT value",
                -4.520471096038818
            ],
            [
                "SELECT T2.constructorStandingsId , T2.constructorId FROM drivers AS T1 JOIN constructorStandings AS T2 ON T2.driverId = T1.driverId JOIN lapTimes AS T3 ON T1.driverId = T3.driverId ORDER BY T3.milliseconds Desc LIMIT value",
                -4.67335307598114
            ],
            [
                "SELECT constructorStandingsId , number FROM constructorStandings ORDER BY constructorId Desc LIMIT value",
                -5.199938774108887
            ],
            [
                "SELECT T2.constructorStandingsId , T1.constructorRef FROM constructors AS T1 JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId ORDER BY T2.constructorId Desc LIMIT value",
                -5.310351371765137
            ],
            [
                "SELECT T2.constructorStandingsId , T3.driverId FROM drivers AS T1 JOIN constructorStandings AS T2 ON T2.driverId = T1.driverId JOIN lapTimes AS T3 ON T1.driverId = T3.driverId ORDER BY T2.constructorId Desc LIMIT value",
                -5.417489051818848
            ],
            [
                "SELECT T2.constructorStandingsId , T3.lap FROM drivers AS T1 JOIN constructorStandings AS T2 ON T2.driverId = T1.driverId JOIN lapTimes AS T3 ON T1.driverId = T3.driverId ORDER BY T2.constructorId Desc LIMIT value",
                -5.478405952453613
            ],
            [
                "SELECT T1.constructorStandingsId , T2.points FROM constructorStandings AS T1 JOIN results AS T2 ORDER BY T1.constructorId Desc LIMIT value",
                -5.556711196899414
            ],
            [
                "SELECT constructorStandingsId , position FROM constructorStandings ORDER BY constructorId Desc LIMIT value",
                -5.785552501678467
            ],
            [
                "SELECT T2.constructorStandingsId , T3.lap FROM drivers AS T1 JOIN constructorStandings AS T2 ON T2.driverId = T1.driverId JOIN pitStops AS T3 ON T1.driverId = T3.driverId ORDER BY T2.constructorId Desc LIMIT value",
                -5.7919816970825195
            ],
            [
                "SELECT T2.constructorStandingsId , T3.driverId FROM drivers AS T1 JOIN constructorStandings AS T2 ON T2.driverId = T1.driverId JOIN pitStops AS T3 ON T1.driverId = T3.driverId ORDER BY T2.constructorId Desc LIMIT value",
                -5.856197357177734
            ],
            [
                "SELECT T2.constructorStandingsId , T2.constructorStandingsId FROM drivers AS T1 JOIN constructorStandings AS T2 ON T2.driverId = T1.driverId JOIN lapTimes AS T3 ON T1.driverId = T3.driverId ORDER BY T3.milliseconds Desc LIMIT value",
                -6.024555206298828
            ]
        ],
        "predicted_parse_with_values": "SELECT constructorStandingsId , constructorId FROM constructorStandings ORDER BY constructorId Desc LIMIT 1",
        "template_feedback": "use lap times table and drivers table in place of constructor standings table . find drivers 's driver id and surname in place of constructor standings id and constructor id . order the results by milliseconds in place of constructor id .",
        "primary_span": [
            [
                0,
                6
            ],
            [
                14,
                20
            ],
            [
                31,
                35
            ]
        ],
        "secondary_span": [
            [
                7,
                13
            ],
            [
                21,
                30
            ],
            [
                36,
                41
            ]
        ],
        "edits": [
            "driver id",
            "surname",
            "constructor standings id",
            "constructor id",
            "drivers",
            "lap times",
            "constructor standings",
            "milliseconds",
            "constructor id"
        ],
        "edits_original": "< select > add driver id </ select > < select > add surname </ select > < select > remove constructor standings id </ select > < select > remove constructor id </ select > < from > add drivers </ from > < from > add lap times </ from > < from > remove constructor standings </ from > < orderBy > add milliseconds </ orderBy > < orderBy > remove constructor id </ orderBy >"
    },
    {
        "db_id": "formula_1",
        "question": "Find the distinct names of all races held between 2014 and 2017?",
        "gold_parse": "SELECT DISTINCT name FROM races WHERE YEAR BETWEEN 2014 AND 2017",
        "predicted_parse": "SELECT DISTINCT country FROM circuits WHERE circuitRef BETWEEN value AND value",
        "predicted_parse_explanation": [
            "find without repetition country in circuits table whose circuit reference between 2017 and 2014"
        ],
        "feedback": "Exchange country of circuits table with name of races table , circuit Reference with year from races table .",
        "beam": [
            [
                "SELECT DISTINCT country FROM circuits WHERE circuitRef BETWEEN value AND value",
                -0.1755352020263672
            ],
            [
                "SELECT DISTINCT country FROM circuits WHERE lat BETWEEN value AND value",
                -1.9739885330200195
            ],
            [
                "SELECT country FROM circuits WHERE circuitRef BETWEEN value AND value",
                -4.416120529174805
            ],
            [
                "SELECT DISTINCT country FROM circuits WHERE lng BETWEEN value AND value",
                -5.450544357299805
            ],
            [
                "SELECT country FROM circuits WHERE lat BETWEEN value AND value",
                -5.503298759460449
            ],
            [
                "SELECT DISTINCT country FROM circuits WHERE circuitRef = value AND circuitRef BETWEEN value AND value",
                -6.8184309005737305
            ],
            [
                "SELECT DISTINCT T1.country FROM circuits AS T1 JOIN status AS T2 WHERE T2.number BETWEEN value AND value",
                -8.61021900177002
            ],
            [
                "SELECT country FROM circuits WHERE lng BETWEEN value AND value",
                -8.920527458190918
            ],
            [
                "SELECT DISTINCT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN lapTimes AS T3 ON T2.raceId = T3.raceId WHERE T3.milliseconds BETWEEN value AND value",
                -9.708171844482422
            ],
            [
                "SELECT DISTINCT country FROM circuits WHERE circuitRef = value AND lat BETWEEN value AND value",
                -10.449724197387695
            ],
            [
                "SELECT DISTINCT country FROM circuits WHERE circuitRef < value",
                -10.777596473693848
            ],
            [
                "SELECT DISTINCT country FROM circuits WHERE lat > = value AND circuitRef < = value",
                -10.80542278289795
            ],
            [
                "SELECT country FROM circuits WHERE circuitRef = value AND circuitRef BETWEEN value AND value",
                -11.162034034729004
            ],
            [
                "SELECT DISTINCT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN pitStops AS T3 ON T2.raceId = T3.raceId WHERE T3.stop BETWEEN value AND value",
                -11.431803703308105
            ],
            [
                "SELECT DISTINCT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN pitStops AS T3 ON T2.raceId = T3.raceId WHERE T3.milliseconds BETWEEN value AND value",
                -12.151711463928223
            ],
            [
                "SELECT country FROM circuits WHERE circuitRef = value INTERSECT SELECT country FROM circuits WHERE circuitRef = value",
                -12.303854942321777
            ],
            [
                "SELECT DISTINCT country FROM circuits WHERE circuitRef = value AND circuitRef LIKE value",
                -12.352477073669434
            ],
            [
                "SELECT DISTINCT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN constructorResults AS T3 ON T2.raceId = T3.raceId WHERE T3.points BETWEEN value AND value",
                -12.745161056518555
            ],
            [
                "SELECT DISTINCT country FROM circuits WHERE circuitRef LIKE value",
                -12.896613121032715
            ],
            [
                "SELECT DISTINCT country FROM circuits",
                -13.865174293518066
            ]
        ],
        "predicted_parse_with_values": "SELECT DISTINCT country FROM circuits WHERE circuitRef BETWEEN 2017 AND 2014",
        "template_feedback": "use races table in place of circuits table . consider the year between 2014 and 2017 conditions in place of the circuit reference between 2017 and 2014 conditions . find races 's name in place of country .",
        "primary_span": [
            [
                0,
                2
            ],
            [
                9,
                16
            ],
            [
                29,
                32
            ]
        ],
        "secondary_span": [
            [
                3,
                8
            ],
            [
                17,
                28
            ],
            [
                33,
                37
            ]
        ],
        "edits": [
            "name",
            "country",
            "races",
            "circuits",
            "year between 2014 and 2017",
            "circuit reference between 2017 and 2014"
        ],
        "edits_original": "< select > add name </ select > < select > remove country </ select > < from > add races </ from > < from > remove circuits </ from > < where > add year between 2014 and 2017 </ where > < where > remove circuit reference between 2017 and 2014 </ where >"
    },
    {
        "db_id": "formula_1",
        "question": "Find the distinct names of all races held between 2014 and 2017?",
        "gold_parse": "SELECT DISTINCT name FROM races WHERE YEAR BETWEEN 2014 AND 2017",
        "predicted_parse": "SELECT DISTINCT country FROM circuits WHERE circuitRef BETWEEN value AND value",
        "predicted_parse_explanation": [
            "find without repetition country in circuits table whose circuit reference between 2017 and 2014"
        ],
        "feedback": "You should use name of race table, year instead of country of circuits table, circuit refernece respectively.",
        "beam": [
            [
                "SELECT DISTINCT country FROM circuits WHERE circuitRef BETWEEN value AND value",
                -0.1755352020263672
            ],
            [
                "SELECT DISTINCT country FROM circuits WHERE lat BETWEEN value AND value",
                -1.9739885330200195
            ],
            [
                "SELECT country FROM circuits WHERE circuitRef BETWEEN value AND value",
                -4.416120529174805
            ],
            [
                "SELECT DISTINCT country FROM circuits WHERE lng BETWEEN value AND value",
                -5.450544357299805
            ],
            [
                "SELECT country FROM circuits WHERE lat BETWEEN value AND value",
                -5.503298759460449
            ],
            [
                "SELECT DISTINCT country FROM circuits WHERE circuitRef = value AND circuitRef BETWEEN value AND value",
                -6.8184309005737305
            ],
            [
                "SELECT DISTINCT T1.country FROM circuits AS T1 JOIN status AS T2 WHERE T2.number BETWEEN value AND value",
                -8.61021900177002
            ],
            [
                "SELECT country FROM circuits WHERE lng BETWEEN value AND value",
                -8.920527458190918
            ],
            [
                "SELECT DISTINCT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN lapTimes AS T3 ON T2.raceId = T3.raceId WHERE T3.milliseconds BETWEEN value AND value",
                -9.708171844482422
            ],
            [
                "SELECT DISTINCT country FROM circuits WHERE circuitRef = value AND lat BETWEEN value AND value",
                -10.449724197387695
            ],
            [
                "SELECT DISTINCT country FROM circuits WHERE circuitRef < value",
                -10.777596473693848
            ],
            [
                "SELECT DISTINCT country FROM circuits WHERE lat > = value AND circuitRef < = value",
                -10.80542278289795
            ],
            [
                "SELECT country FROM circuits WHERE circuitRef = value AND circuitRef BETWEEN value AND value",
                -11.162034034729004
            ],
            [
                "SELECT DISTINCT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN pitStops AS T3 ON T2.raceId = T3.raceId WHERE T3.stop BETWEEN value AND value",
                -11.431803703308105
            ],
            [
                "SELECT DISTINCT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN pitStops AS T3 ON T2.raceId = T3.raceId WHERE T3.milliseconds BETWEEN value AND value",
                -12.151711463928223
            ],
            [
                "SELECT country FROM circuits WHERE circuitRef = value INTERSECT SELECT country FROM circuits WHERE circuitRef = value",
                -12.303854942321777
            ],
            [
                "SELECT DISTINCT country FROM circuits WHERE circuitRef = value AND circuitRef LIKE value",
                -12.352477073669434
            ],
            [
                "SELECT DISTINCT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN constructorResults AS T3 ON T2.raceId = T3.raceId WHERE T3.points BETWEEN value AND value",
                -12.745161056518555
            ],
            [
                "SELECT DISTINCT country FROM circuits WHERE circuitRef LIKE value",
                -12.896613121032715
            ],
            [
                "SELECT DISTINCT country FROM circuits",
                -13.865174293518066
            ]
        ],
        "predicted_parse_with_values": "SELECT DISTINCT country FROM circuits WHERE circuitRef BETWEEN 2017 AND 2014",
        "template_feedback": "use races table in place of circuits table . consider the year between 2014 and 2017 conditions in place of the circuit reference between 2017 and 2014 conditions . find races 's name in place of country .",
        "primary_span": [
            [
                0,
                2
            ],
            [
                9,
                16
            ],
            [
                29,
                32
            ]
        ],
        "secondary_span": [
            [
                3,
                8
            ],
            [
                17,
                28
            ],
            [
                33,
                37
            ]
        ],
        "edits": [
            "name",
            "country",
            "races",
            "circuits",
            "year between 2014 and 2017",
            "circuit reference between 2017 and 2014"
        ],
        "edits_original": "< select > add name </ select > < select > remove country </ select > < from > add races </ from > < from > remove circuits </ from > < where > add year between 2014 and 2017 </ where > < where > remove circuit reference between 2017 and 2014 </ where >"
    },
    {
        "db_id": "formula_1",
        "question": "What are the names of races that were held after 2017 and the circuits were in the country of Spain?",
        "gold_parse": "SELECT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \"Spain\" AND T1.year > 2017",
        "predicted_parse": "SELECT country FROM circuits WHERE lat > value AND circuitRef = value",
        "predicted_parse_explanation": [
            "find the country in circuits table whose latitude greater than 2017 and circuit reference equals Spain"
        ],
        "feedback": "Replace country with name ,  circuits with races table , latitude with year ,  circuit reference with country .",
        "beam": [
            [
                "SELECT country FROM circuits WHERE lat > value AND circuitRef = value",
                -0.3809518814086914
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN status AS T2 WHERE T2.number > value AND T1.circuitRef = value",
                -2.3417768478393555
            ],
            [
                "SELECT country FROM circuits WHERE lng > value AND circuitRef = value",
                -2.4225072860717773
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN seasons AS T2 WHERE T1.lat > value AND T2.nationality = value",
                -2.55499267578125
            ],
            [
                "SELECT country FROM circuits WHERE circuitRef = value AND circuitRef > value",
                -3.9273605346679688
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN seasons AS T2 WHERE T1.lng > value AND T2.nationality = value",
                -4.65968132019043
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN status AS T2 WHERE T1.circuitRef = value AND T2.number > value",
                -5.2809553146362305
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN status AS T2 JOIN seasons AS T3 WHERE T2.number > value AND T3.nationality = value",
                -5.523504257202148
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T1.lat > value AND T2.time = value",
                -5.576179504394531
            ],
            [
                "SELECT country FROM circuits WHERE circuitRef > value AND circuitRef = value",
                -6.191014289855957
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN constructorStandings AS T3 ON T2.raceId = T3.raceId WHERE T3.position > value AND T1.circuitRef = value",
                -6.545623779296875
            ],
            [
                "SELECT T3.driverId FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN qualifying AS T3 ON T2.raceId = T3.raceId WHERE T1.lat > value AND T1.circuitRef = value",
                -6.998284339904785
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN pitStops AS T3 ON T2.raceId = T3.raceId WHERE T3.stop > value AND T1.circuitRef = value",
                -7.171130180358887
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN status AS T2 WHERE T2.number = value AND T1.circuitRef > value",
                -7.380336284637451
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN constructorStandings AS T3 ON T2.raceId = T3.raceId WHERE T3.resultId > value AND T1.circuitRef = value",
                -7.467512130737305
            ],
            [
                "SELECT country FROM circuits WHERE lat > value AND circuitRef < value",
                -7.569756507873535
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN results AS T2 WHERE T2.milliseconds > value AND T1.circuitRef = value",
                -7.5756402015686035
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T1.lng > value AND T2.time = value",
                -7.684787750244141
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN constructorStandings AS T3 ON T2.raceId = T3.raceId WHERE T3.driverId > value AND T1.circuitRef = value",
                -7.7063164710998535
            ],
            [
                "SELECT country FROM circuits",
                -14.093644142150879
            ]
        ],
        "predicted_parse_with_values": "SELECT country FROM circuits WHERE lat > 2017 AND circuitRef = \"Spain\"",
        "template_feedback": "additionally use the information from the races table besides the circuits table . consider the year greater than 2017 and country equals Spain conditions in place of the latitude greater than 2017 and circuit reference equals Spain conditions . find races 's name in place of country .",
        "primary_span": [
            [
                0,
                7
            ],
            [
                13,
                23
            ],
            [
                39,
                42
            ]
        ],
        "secondary_span": [
            [
                8,
                12
            ],
            [
                24,
                38
            ],
            [
                43,
                47
            ]
        ],
        "edits": [
            "name",
            "country",
            "races",
            "country equals \"Spain\"",
            "year greater than 2017",
            "latitude greater than 2017",
            "circuit reference equals \"Spain\""
        ],
        "edits_original": "< select > add name </ select > < select > remove country </ select > < from > add races </ from > < where > add country equals \" Spain \" </ where > < where > add year greater than 2017 </ where > < where > remove latitude greater than 2017 </ where > < where > remove circuit reference equals \" Spain \" </ where >"
    },
    {
        "db_id": "formula_1",
        "question": "What are the names of races that were held after 2017 and the circuits were in the country of Spain?",
        "gold_parse": "SELECT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \"Spain\" AND T1.year > 2017",
        "predicted_parse": "SELECT country FROM circuits WHERE lat > value AND circuitRef = value",
        "predicted_parse_explanation": [
            "find the country in circuits table whose latitude greater than 2017 and circuit reference equals Spain"
        ],
        "feedback": "You need to use name, table of races, year and country rather than name, circuits, latitude and circuit reference respectively.",
        "beam": [
            [
                "SELECT country FROM circuits WHERE lat > value AND circuitRef = value",
                -0.3809518814086914
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN status AS T2 WHERE T2.number > value AND T1.circuitRef = value",
                -2.3417768478393555
            ],
            [
                "SELECT country FROM circuits WHERE lng > value AND circuitRef = value",
                -2.4225072860717773
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN seasons AS T2 WHERE T1.lat > value AND T2.nationality = value",
                -2.55499267578125
            ],
            [
                "SELECT country FROM circuits WHERE circuitRef = value AND circuitRef > value",
                -3.9273605346679688
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN seasons AS T2 WHERE T1.lng > value AND T2.nationality = value",
                -4.65968132019043
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN status AS T2 WHERE T1.circuitRef = value AND T2.number > value",
                -5.2809553146362305
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN status AS T2 JOIN seasons AS T3 WHERE T2.number > value AND T3.nationality = value",
                -5.523504257202148
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T1.lat > value AND T2.time = value",
                -5.576179504394531
            ],
            [
                "SELECT country FROM circuits WHERE circuitRef > value AND circuitRef = value",
                -6.191014289855957
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN constructorStandings AS T3 ON T2.raceId = T3.raceId WHERE T3.position > value AND T1.circuitRef = value",
                -6.545623779296875
            ],
            [
                "SELECT T3.driverId FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN qualifying AS T3 ON T2.raceId = T3.raceId WHERE T1.lat > value AND T1.circuitRef = value",
                -6.998284339904785
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN pitStops AS T3 ON T2.raceId = T3.raceId WHERE T3.stop > value AND T1.circuitRef = value",
                -7.171130180358887
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN status AS T2 WHERE T2.number = value AND T1.circuitRef > value",
                -7.380336284637451
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN constructorStandings AS T3 ON T2.raceId = T3.raceId WHERE T3.resultId > value AND T1.circuitRef = value",
                -7.467512130737305
            ],
            [
                "SELECT country FROM circuits WHERE lat > value AND circuitRef < value",
                -7.569756507873535
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN results AS T2 WHERE T2.milliseconds > value AND T1.circuitRef = value",
                -7.5756402015686035
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T1.lng > value AND T2.time = value",
                -7.684787750244141
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN constructorStandings AS T3 ON T2.raceId = T3.raceId WHERE T3.driverId > value AND T1.circuitRef = value",
                -7.7063164710998535
            ],
            [
                "SELECT country FROM circuits",
                -14.093644142150879
            ]
        ],
        "predicted_parse_with_values": "SELECT country FROM circuits WHERE lat > 2017 AND circuitRef = \"Spain\"",
        "template_feedback": "additionally use the information from the races table besides the circuits table . consider the year greater than 2017 and country equals Spain conditions in place of the latitude greater than 2017 and circuit reference equals Spain conditions . find races 's name in place of country .",
        "primary_span": [
            [
                0,
                7
            ],
            [
                13,
                23
            ],
            [
                39,
                42
            ]
        ],
        "secondary_span": [
            [
                8,
                12
            ],
            [
                24,
                38
            ],
            [
                43,
                47
            ]
        ],
        "edits": [
            "name",
            "country",
            "races",
            "country equals \"Spain\"",
            "year greater than 2017",
            "latitude greater than 2017",
            "circuit reference equals \"Spain\""
        ],
        "edits_original": "< select > add name </ select > < select > remove country </ select > < from > add races </ from > < where > add country equals \" Spain \" </ where > < where > add year greater than 2017 </ where > < where > remove latitude greater than 2017 </ where > < where > remove circuit reference equals \" Spain \" </ where >"
    },
    {
        "db_id": "coffee_shop",
        "question": "What is the membership card held by both members living in Hartford and ones living in Waterbury address?",
        "gold_parse": "SELECT membership_card FROM member WHERE address  =  'Hartford' INTERSECT SELECT membership_card FROM member WHERE address  =  'Waterbury'",
        "predicted_parse": "SELECT T1.Membership_card FROM member AS T1 WHERE T1.Address = value INTERSECT SELECT T1.Membership_card FROM shop AS T2 JOIN member AS T1 WHERE T2.Address = value",
        "predicted_parse_explanation": [
            "Step 1: find the membership card in member table whose member 's address equals Hartford",
            "Step 2: for each row in shop table , find the corresponding rows in member table",
            "Step 3: find the membership card of the results of step 2 whose shop 's address equals Waterbury",
            "Step 4: show the rows that are in both the results of step 1 and step 3"
        ],
        "feedback": "Use member in place of shop in step 3.",
        "beam": [
            [
                "SELECT T1.Membership_card FROM member AS T1 WHERE T1.Address = value INTERSECT SELECT T1.Membership_card FROM shop AS T2 JOIN member AS T1 WHERE T2.Address = value",
                -0.5039377212524414
            ],
            [
                "SELECT Membership_card FROM member WHERE Address = value INTERSECT SELECT Membership_card FROM member WHERE Address = value",
                -1.2436647415161133
            ],
            [
                "SELECT T1.Membership_card FROM member AS T1 WHERE T1.Address = value INTERSECT SELECT T1.Membership_card FROM shop AS T2 JOIN member AS T1 WHERE T1.Address = value AND T2.Address = value",
                -2.455916404724121
            ],
            [
                "SELECT T2.Membership_card FROM shop AS T1 JOIN member AS T2 WHERE T1.Address = value INTERSECT SELECT T2.Membership_card FROM shop AS T1 JOIN member AS T2 WHERE T1.Address = value",
                -4.566654205322266
            ],
            [
                "SELECT T2.Membership_card FROM shop AS T1 JOIN member AS T2 WHERE T1.Address = value INTERSECT SELECT T2.Membership_card FROM member AS T2 WHERE T2.Address = value",
                -5.312170028686523
            ],
            [
                "SELECT T1.Membership_card FROM member AS T1 WHERE T1.Address = value INTERSECT SELECT T1.Membership_card FROM shop AS T2 JOIN member AS T1 WHERE T2.Address = value AND T2.Address = value",
                -5.377432823181152
            ],
            [
                "SELECT T2.Membership_card FROM shop AS T1 JOIN member AS T2 WHERE T1.Address = value INTERSECT SELECT T2.Membership_card FROM shop AS T1 JOIN member AS T2 WHERE T2.Address = value AND T1.Address = value",
                -6.522008895874023
            ],
            [
                "SELECT T2.Membership_card FROM shop AS T1 JOIN member AS T2 WHERE T1.Address = value INTERSECT SELECT T2.Membership_card FROM shop AS T1 JOIN member AS T2 WHERE T1.Address = value AND T1.Address = value",
                -9.47107219696045
            ],
            [
                "SELECT T2.Membership_card FROM shop AS T1 JOIN member AS T2 WHERE T2.Address = value AND T1.Address = value INTERSECT SELECT T2.Membership_card FROM shop AS T1 JOIN member AS T2 WHERE T1.Address = value",
                -9.651288032531738
            ],
            [
                "SELECT Membership_card FROM member WHERE Address = value INTERSECT SELECT Membership_card FROM member WHERE Address = value AND Address = value",
                -9.972256660461426
            ],
            [
                "SELECT T2.Membership_card FROM shop AS T1 JOIN member AS T2 WHERE T2.Address = value AND T1.Address = value INTERSECT SELECT T2.Membership_card FROM member AS T2 WHERE T2.Address = value",
                -10.398530006408691
            ],
            [
                "SELECT Membership_card FROM member WHERE Address = value INTERSECT SELECT Membership_card FROM member WHERE Level_of_membership > value",
                -12.111020565032959
            ],
            [
                "SELECT T1.Membership_card FROM member AS T1 WHERE T1.Address = value INTERSECT SELECT T1.Membership_card FROM shop AS T2 JOIN member AS T1 WHERE T2.Open_Year = value",
                -12.212398529052734
            ],
            [
                "SELECT T1.Membership_card FROM member AS T1 WHERE T1.Address = value INTERSECT SELECT T1.Level_of_membership FROM shop AS T2 JOIN member AS T1 WHERE T2.Address = value",
                -12.323258399963379
            ],
            [
                "SELECT Membership_card FROM member WHERE Address = value INTERSECT SELECT Membership_card FROM member WHERE Address LIKE value",
                -12.378649711608887
            ],
            [
                "SELECT T2.Membership_card FROM shop AS T1 JOIN member AS T2 WHERE T2.Address = value AND T1.Address = value",
                -12.42834758758545
            ],
            [
                "SELECT T1.Membership_card FROM member AS T1 WHERE T1.Address = value INTERSECT SELECT T1.Membership_card FROM shop AS T2 JOIN member AS T1 WHERE T2.Address > value",
                -12.550305843353271
            ],
            [
                "SELECT T1.Membership_card FROM member AS T1 WHERE T1.Address = value INTERSECT SELECT T1.Membership_card FROM shop AS T2 JOIN member AS T1 WHERE T2.Address LIKE value",
                -12.906718254089355
            ],
            [
                "SELECT Membership_card FROM member WHERE Address = value INTERSECT SELECT Level_of_membership FROM member WHERE Address = value",
                -12.948180198669434
            ],
            [
                "SELECT Membership_card FROM member WHERE Address = value ORDER BY Level_of_membership Asc",
                -14.912163734436035
            ]
        ],
        "predicted_parse_with_values": "SELECT T1.Membership_card FROM member AS T1 WHERE T1.Address = \"Hartford\" INTERSECT SELECT T1.Membership_card FROM shop AS T2 JOIN member AS T1 WHERE T2.Address = \"Waterbury\"",
        "template_feedback": "in step 2 , do not use the shop table . in step 3 , consider the address equals Waterbury conditions in place of the shop 's address equals Waterbury conditions .",
        "primary_span": [
            [
                4,
                10
            ],
            [
                15,
                20
            ]
        ],
        "secondary_span": [
            [
                4,
                10
            ],
            [
                21,
                31
            ]
        ],
        "edits": [
            "shop"
        ],
        "edits_original": "< from > remove shop </ from >"
    },
    {
        "db_id": "coffee_shop",
        "question": "What is the membership card held by both members living in Hartford and ones living in Waterbury address?",
        "gold_parse": "SELECT membership_card FROM member WHERE address  =  'Hartford' INTERSECT SELECT membership_card FROM member WHERE address  =  'Waterbury'",
        "predicted_parse": "SELECT T1.Membership_card FROM member AS T1 WHERE T1.Address = value INTERSECT SELECT T1.Membership_card FROM shop AS T2 JOIN member AS T1 WHERE T2.Address = value",
        "predicted_parse_explanation": [
            "Step 1: find the membership card in member table whose member 's address equals Hartford",
            "Step 2: for each row in shop table , find the corresponding rows in member table",
            "Step 3: find the membership card of the results of step 2 whose shop 's address equals Waterbury",
            "Step 4: show the rows that are in both the results of step 1 and step 3"
        ],
        "feedback": "In step 3,You need to use member and omit shop.",
        "beam": [
            [
                "SELECT T1.Membership_card FROM member AS T1 WHERE T1.Address = value INTERSECT SELECT T1.Membership_card FROM shop AS T2 JOIN member AS T1 WHERE T2.Address = value",
                -0.5039377212524414
            ],
            [
                "SELECT Membership_card FROM member WHERE Address = value INTERSECT SELECT Membership_card FROM member WHERE Address = value",
                -1.2436647415161133
            ],
            [
                "SELECT T1.Membership_card FROM member AS T1 WHERE T1.Address = value INTERSECT SELECT T1.Membership_card FROM shop AS T2 JOIN member AS T1 WHERE T1.Address = value AND T2.Address = value",
                -2.455916404724121
            ],
            [
                "SELECT T2.Membership_card FROM shop AS T1 JOIN member AS T2 WHERE T1.Address = value INTERSECT SELECT T2.Membership_card FROM shop AS T1 JOIN member AS T2 WHERE T1.Address = value",
                -4.566654205322266
            ],
            [
                "SELECT T2.Membership_card FROM shop AS T1 JOIN member AS T2 WHERE T1.Address = value INTERSECT SELECT T2.Membership_card FROM member AS T2 WHERE T2.Address = value",
                -5.312170028686523
            ],
            [
                "SELECT T1.Membership_card FROM member AS T1 WHERE T1.Address = value INTERSECT SELECT T1.Membership_card FROM shop AS T2 JOIN member AS T1 WHERE T2.Address = value AND T2.Address = value",
                -5.377432823181152
            ],
            [
                "SELECT T2.Membership_card FROM shop AS T1 JOIN member AS T2 WHERE T1.Address = value INTERSECT SELECT T2.Membership_card FROM shop AS T1 JOIN member AS T2 WHERE T2.Address = value AND T1.Address = value",
                -6.522008895874023
            ],
            [
                "SELECT T2.Membership_card FROM shop AS T1 JOIN member AS T2 WHERE T1.Address = value INTERSECT SELECT T2.Membership_card FROM shop AS T1 JOIN member AS T2 WHERE T1.Address = value AND T1.Address = value",
                -9.47107219696045
            ],
            [
                "SELECT T2.Membership_card FROM shop AS T1 JOIN member AS T2 WHERE T2.Address = value AND T1.Address = value INTERSECT SELECT T2.Membership_card FROM shop AS T1 JOIN member AS T2 WHERE T1.Address = value",
                -9.651288032531738
            ],
            [
                "SELECT Membership_card FROM member WHERE Address = value INTERSECT SELECT Membership_card FROM member WHERE Address = value AND Address = value",
                -9.972256660461426
            ],
            [
                "SELECT T2.Membership_card FROM shop AS T1 JOIN member AS T2 WHERE T2.Address = value AND T1.Address = value INTERSECT SELECT T2.Membership_card FROM member AS T2 WHERE T2.Address = value",
                -10.398530006408691
            ],
            [
                "SELECT Membership_card FROM member WHERE Address = value INTERSECT SELECT Membership_card FROM member WHERE Level_of_membership > value",
                -12.111020565032959
            ],
            [
                "SELECT T1.Membership_card FROM member AS T1 WHERE T1.Address = value INTERSECT SELECT T1.Membership_card FROM shop AS T2 JOIN member AS T1 WHERE T2.Open_Year = value",
                -12.212398529052734
            ],
            [
                "SELECT T1.Membership_card FROM member AS T1 WHERE T1.Address = value INTERSECT SELECT T1.Level_of_membership FROM shop AS T2 JOIN member AS T1 WHERE T2.Address = value",
                -12.323258399963379
            ],
            [
                "SELECT Membership_card FROM member WHERE Address = value INTERSECT SELECT Membership_card FROM member WHERE Address LIKE value",
                -12.378649711608887
            ],
            [
                "SELECT T2.Membership_card FROM shop AS T1 JOIN member AS T2 WHERE T2.Address = value AND T1.Address = value",
                -12.42834758758545
            ],
            [
                "SELECT T1.Membership_card FROM member AS T1 WHERE T1.Address = value INTERSECT SELECT T1.Membership_card FROM shop AS T2 JOIN member AS T1 WHERE T2.Address > value",
                -12.550305843353271
            ],
            [
                "SELECT T1.Membership_card FROM member AS T1 WHERE T1.Address = value INTERSECT SELECT T1.Membership_card FROM shop AS T2 JOIN member AS T1 WHERE T2.Address LIKE value",
                -12.906718254089355
            ],
            [
                "SELECT Membership_card FROM member WHERE Address = value INTERSECT SELECT Level_of_membership FROM member WHERE Address = value",
                -12.948180198669434
            ],
            [
                "SELECT Membership_card FROM member WHERE Address = value ORDER BY Level_of_membership Asc",
                -14.912163734436035
            ]
        ],
        "predicted_parse_with_values": "SELECT T1.Membership_card FROM member AS T1 WHERE T1.Address = \"Hartford\" INTERSECT SELECT T1.Membership_card FROM shop AS T2 JOIN member AS T1 WHERE T2.Address = \"Waterbury\"",
        "template_feedback": "in step 2 , do not use the shop table . in step 3 , consider the address equals Waterbury conditions in place of the shop 's address equals Waterbury conditions .",
        "primary_span": [
            [
                4,
                10
            ],
            [
                15,
                20
            ]
        ],
        "secondary_span": [
            [
                4,
                10
            ],
            [
                21,
                31
            ]
        ],
        "edits": [
            "shop"
        ],
        "edits_original": "< from > remove shop </ from >"
    },
    {
        "db_id": "formula_1",
        "question": "What are the numbers of races for each constructor id?",
        "gold_parse": "SELECT count(*) ,  constructorid FROM constructorStandings GROUP BY constructorid",
        "predicted_parse": "SELECT qualifyId , Count ( * ) FROM qualifying GROUP BY qualifyId",
        "predicted_parse_explanation": [
            "find each value of qualify id in qualifying table along with the number of the corresponding rows to each value"
        ],
        "feedback": "Replace qualify id in qualifying table with constructor Standings table's constructor id , and find corresponding rows to each value of race id .",
        "beam": [
            [
                "SELECT qualifyId , Count ( * ) FROM qualifying GROUP BY qualifyId",
                -0.023244380950927734
            ],
            [
                "SELECT T2.qualifyId , Count ( * ) FROM constructors AS T1 JOIN qualifying AS T2 ON T1.constructorId = T2.constructorId GROUP BY T1.year",
                -4.742204189300537
            ],
            [
                "SELECT T1.year , Count ( * ) FROM constructors AS T1 JOIN qualifying AS T2 ON T1.constructorId = T2.constructorId GROUP BY T2.qualifyId",
                -5.227935791015625
            ],
            [
                "SELECT * , qualifyId FROM qualifying GROUP BY qualifyId",
                -5.959683418273926
            ],
            [
                "SELECT T3.stop , Count ( * ) FROM drivers AS T1 JOIN qualifying AS T2 ON T2.driverId = T1.driverId JOIN pitStops AS T3 ON T1.driverId = T3.driverId GROUP BY T2.qualifyId",
                -6.486411094665527
            ],
            [
                "SELECT Count ( * ) FROM circuits",
                -6.542793273925781
            ],
            [
                "SELECT T3.qualifyId , Count ( * ) FROM drivers AS T1 JOIN constructorStandings AS T2 ON T2.driverId = T1.driverId JOIN qualifying AS T3 ON T1.driverId = T3.driverId GROUP BY T2.raceId",
                -7.2123703956604
            ],
            [
                "SELECT T1.statusId , Count ( * ) FROM constructors AS T1 JOIN qualifying AS T2 ON T1.constructorId = T2.constructorId GROUP BY T2.qualifyId",
                -7.4296464920043945
            ],
            [
                "SELECT T2.qualifyId , Count ( * ) FROM drivers AS T1 JOIN qualifying AS T2 ON T2.driverId = T1.driverId JOIN pitStops AS T3 ON T1.driverId = T3.driverId GROUP BY T3.stop",
                -8.556657314300537
            ],
            [
                "SELECT T2.raceId , Count ( * ) FROM drivers AS T1 JOIN constructorStandings AS T2 ON T2.driverId = T1.driverId JOIN qualifying AS T3 ON T1.driverId = T3.driverId GROUP BY T3.qualifyId",
                -8.575366020202637
            ],
            [
                "SELECT T1.country , Count ( * ) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN qualifying AS T3 ON T2.raceId = T3.raceId GROUP BY T3.qualifyId",
                -8.771438598632812
            ],
            [
                "SELECT T2.wins , Count ( * ) FROM races AS T1 JOIN constructorResults AS T2 ON T2.raceId = T1.raceId JOIN qualifying AS T3 ON T1.raceId = T3.raceId GROUP BY T3.qualifyId",
                -8.834451675415039
            ],
            [
                "SELECT T3.qualifyId , Count ( * ) FROM races AS T1 JOIN constructorResults AS T2 ON T2.raceId = T1.raceId JOIN qualifying AS T3 ON T1.raceId = T3.raceId GROUP BY T2.wins",
                -9.282463550567627
            ],
            [
                "SELECT q3 , Count ( * ) FROM qualifying GROUP BY qualifyId",
                -9.324776649475098
            ],
            [
                "SELECT * , T1.year FROM constructors AS T1 JOIN qualifying AS T2 ON T1.constructorId = T2.constructorId GROUP BY T2.qualifyId",
                -9.60158896446228
            ],
            [
                "SELECT Count ( * ) , qualifyId FROM qualifying GROUP BY qualifyId",
                -9.717787742614746
            ],
            [
                "SELECT T2.constructorStandingsId , Count ( * ) FROM drivers AS T1 JOIN constructorStandings AS T2 ON T2.driverId = T1.driverId JOIN qualifying AS T3 ON T1.driverId = T3.driverId GROUP BY T3.qualifyId",
                -9.787849426269531
            ],
            [
                "SELECT T1.alt , Count ( * ) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN qualifying AS T3 ON T2.raceId = T3.raceId GROUP BY T3.qualifyId",
                -9.906684875488281
            ],
            [
                "SELECT year , Count ( * ) FROM constructors GROUP BY year",
                -9.947234630584717
            ],
            [
                "SELECT qualifyId FROM qualifying",
                -10.932374000549316
            ]
        ],
        "predicted_parse_with_values": "SELECT qualifyId , Count ( * ) FROM qualifying GROUP BY qualifyId",
        "template_feedback": "use constructor standings table in place of qualifying table . find for each value of constructor standings 's constructor id in place of qualify id . find constructor standings 's constructor id in place of qualify id .",
        "primary_span": [
            [
                0,
                3
            ],
            [
                10,
                19
            ],
            [
                26,
                31
            ]
        ],
        "secondary_span": [
            [
                4,
                9
            ],
            [
                20,
                25
            ],
            [
                32,
                37
            ]
        ],
        "edits": [
            "constructor id",
            "qualify id",
            "constructor standings",
            "qualifying",
            "constructor id",
            "qualify id"
        ],
        "edits_original": "< select > add constructor id </ select > < select > remove qualify id </ select > < from > add constructor standings </ from > < from > remove qualifying </ from > < groupBy > add constructor id </ groupBy > < groupBy > remove qualify id </ groupBy >"
    },
    {
        "db_id": "formula_1",
        "question": "What are the numbers of races for each constructor id?",
        "gold_parse": "SELECT count(*) ,  constructorid FROM constructorStandings GROUP BY constructorid",
        "predicted_parse": "SELECT qualifyId , Count ( * ) FROM qualifying GROUP BY qualifyId",
        "predicted_parse_explanation": [
            "find each value of qualify id in qualifying table along with the number of the corresponding rows to each value"
        ],
        "feedback": "You should use constructor id of constructor Standings table instead of qualify id and also find number of records corresponding to each race.",
        "beam": [
            [
                "SELECT qualifyId , Count ( * ) FROM qualifying GROUP BY qualifyId",
                -0.023244380950927734
            ],
            [
                "SELECT T2.qualifyId , Count ( * ) FROM constructors AS T1 JOIN qualifying AS T2 ON T1.constructorId = T2.constructorId GROUP BY T1.year",
                -4.742204189300537
            ],
            [
                "SELECT T1.year , Count ( * ) FROM constructors AS T1 JOIN qualifying AS T2 ON T1.constructorId = T2.constructorId GROUP BY T2.qualifyId",
                -5.227935791015625
            ],
            [
                "SELECT * , qualifyId FROM qualifying GROUP BY qualifyId",
                -5.959683418273926
            ],
            [
                "SELECT T3.stop , Count ( * ) FROM drivers AS T1 JOIN qualifying AS T2 ON T2.driverId = T1.driverId JOIN pitStops AS T3 ON T1.driverId = T3.driverId GROUP BY T2.qualifyId",
                -6.486411094665527
            ],
            [
                "SELECT Count ( * ) FROM circuits",
                -6.542793273925781
            ],
            [
                "SELECT T3.qualifyId , Count ( * ) FROM drivers AS T1 JOIN constructorStandings AS T2 ON T2.driverId = T1.driverId JOIN qualifying AS T3 ON T1.driverId = T3.driverId GROUP BY T2.raceId",
                -7.2123703956604
            ],
            [
                "SELECT T1.statusId , Count ( * ) FROM constructors AS T1 JOIN qualifying AS T2 ON T1.constructorId = T2.constructorId GROUP BY T2.qualifyId",
                -7.4296464920043945
            ],
            [
                "SELECT T2.qualifyId , Count ( * ) FROM drivers AS T1 JOIN qualifying AS T2 ON T2.driverId = T1.driverId JOIN pitStops AS T3 ON T1.driverId = T3.driverId GROUP BY T3.stop",
                -8.556657314300537
            ],
            [
                "SELECT T2.raceId , Count ( * ) FROM drivers AS T1 JOIN constructorStandings AS T2 ON T2.driverId = T1.driverId JOIN qualifying AS T3 ON T1.driverId = T3.driverId GROUP BY T3.qualifyId",
                -8.575366020202637
            ],
            [
                "SELECT T1.country , Count ( * ) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN qualifying AS T3 ON T2.raceId = T3.raceId GROUP BY T3.qualifyId",
                -8.771438598632812
            ],
            [
                "SELECT T2.wins , Count ( * ) FROM races AS T1 JOIN constructorResults AS T2 ON T2.raceId = T1.raceId JOIN qualifying AS T3 ON T1.raceId = T3.raceId GROUP BY T3.qualifyId",
                -8.834451675415039
            ],
            [
                "SELECT T3.qualifyId , Count ( * ) FROM races AS T1 JOIN constructorResults AS T2 ON T2.raceId = T1.raceId JOIN qualifying AS T3 ON T1.raceId = T3.raceId GROUP BY T2.wins",
                -9.282463550567627
            ],
            [
                "SELECT q3 , Count ( * ) FROM qualifying GROUP BY qualifyId",
                -9.324776649475098
            ],
            [
                "SELECT * , T1.year FROM constructors AS T1 JOIN qualifying AS T2 ON T1.constructorId = T2.constructorId GROUP BY T2.qualifyId",
                -9.60158896446228
            ],
            [
                "SELECT Count ( * ) , qualifyId FROM qualifying GROUP BY qualifyId",
                -9.717787742614746
            ],
            [
                "SELECT T2.constructorStandingsId , Count ( * ) FROM drivers AS T1 JOIN constructorStandings AS T2 ON T2.driverId = T1.driverId JOIN qualifying AS T3 ON T1.driverId = T3.driverId GROUP BY T3.qualifyId",
                -9.787849426269531
            ],
            [
                "SELECT T1.alt , Count ( * ) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN qualifying AS T3 ON T2.raceId = T3.raceId GROUP BY T3.qualifyId",
                -9.906684875488281
            ],
            [
                "SELECT year , Count ( * ) FROM constructors GROUP BY year",
                -9.947234630584717
            ],
            [
                "SELECT qualifyId FROM qualifying",
                -10.932374000549316
            ]
        ],
        "predicted_parse_with_values": "SELECT qualifyId , Count ( * ) FROM qualifying GROUP BY qualifyId",
        "template_feedback": "use constructor standings table in place of qualifying table . find for each value of constructor standings 's constructor id in place of qualify id . find constructor standings 's constructor id in place of qualify id .",
        "primary_span": [
            [
                0,
                3
            ],
            [
                10,
                19
            ],
            [
                26,
                31
            ]
        ],
        "secondary_span": [
            [
                4,
                9
            ],
            [
                20,
                25
            ],
            [
                32,
                37
            ]
        ],
        "edits": [
            "constructor id",
            "qualify id",
            "constructor standings",
            "qualifying",
            "constructor id",
            "qualify id"
        ],
        "edits_original": "< select > add constructor id </ select > < select > remove qualify id </ select > < from > add constructor standings </ from > < from > remove qualifying </ from > < groupBy > add constructor id </ groupBy > < groupBy > remove qualify id </ groupBy >"
    },
    {
        "db_id": "formula_1",
        "question": "What are the unique names of all race held between 2014 and 2017?",
        "gold_parse": "SELECT DISTINCT name FROM races WHERE YEAR BETWEEN 2014 AND 2017",
        "predicted_parse": "SELECT country FROM circuits WHERE circuitRef BETWEEN value AND value",
        "predicted_parse_explanation": [
            "find the country in circuits table whose circuit reference between 2017 and 2014"
        ],
        "feedback": "Find distinct name in races table for which year is between 2014 and 2017",
        "beam": [
            [
                "SELECT country FROM circuits WHERE circuitRef BETWEEN value AND value",
                -0.28317832946777344
            ],
            [
                "SELECT country FROM circuits WHERE lat BETWEEN value AND value",
                -1.4586763381958008
            ],
            [
                "SELECT country FROM circuits WHERE lng BETWEEN value AND value",
                -5.438736438751221
            ],
            [
                "SELECT country FROM circuits WHERE circuitRef = value AND circuitRef BETWEEN value AND value",
                -5.696632385253906
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN lapTimes AS T3 ON T2.raceId = T3.raceId WHERE T3.milliseconds BETWEEN value AND value",
                -6.181718826293945
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN status AS T2 WHERE T2.number BETWEEN value AND value",
                -6.524085998535156
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN lapTimes AS T3 ON T2.raceId = T3.raceId WHERE T3.lap BETWEEN value AND value",
                -6.745944023132324
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN pitStops AS T3 ON T2.raceId = T3.raceId WHERE T3.stop BETWEEN value AND value",
                -6.9482598304748535
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN pitStops AS T3 ON T2.raceId = T3.raceId WHERE T3.lap BETWEEN value AND value",
                -8.490561485290527
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN pitStops AS T3 ON T2.raceId = T3.raceId WHERE T3.milliseconds BETWEEN value AND value",
                -8.645487785339355
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN lapTimes AS T3 ON T2.raceId = T3.raceId WHERE T3.position BETWEEN value AND value",
                -9.781062126159668
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN constructorResults AS T3 ON T2.raceId = T3.raceId WHERE T3.points BETWEEN value AND value",
                -10.319284439086914
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN lapTimes AS T3 ON T2.raceId = T3.raceId WHERE T3.time BETWEEN value AND value",
                -10.39621353149414
            ],
            [
                "SELECT country FROM circuits WHERE circuitRef < value",
                -10.799552917480469
            ],
            [
                "SELECT country FROM circuits WHERE circuitRef = value AND lat BETWEEN value AND value",
                -10.825482368469238
            ],
            [
                "SELECT country FROM circuits WHERE lat > = value AND circuitRef < = value",
                -11.088839530944824
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN constructorResults AS T3 ON T2.raceId = T3.raceId WHERE T3.status BETWEEN value AND value",
                -11.213221549987793
            ],
            [
                "SELECT country FROM circuits WHERE circuitRef = value AND circuitRef LIKE value",
                -11.308728218078613
            ],
            [
                "SELECT country FROM circuits WHERE circuitRef = value AND circuitRef < = value",
                -11.313239097595215
            ],
            [
                "SELECT country FROM circuits",
                -13.404687881469727
            ]
        ],
        "predicted_parse_with_values": "SELECT country FROM circuits WHERE circuitRef BETWEEN 2017 AND 2014",
        "template_feedback": "use races table in place of circuits table . consider the year between 2014 and 2017 conditions in place of the circuit reference between 2017 and 2014 conditions . find races 's name in place of country . make sure no repetition in the results .",
        "primary_span": [
            [
                0,
                2
            ],
            [
                9,
                16
            ],
            [
                29,
                32
            ],
            [
                38,
                45
            ]
        ],
        "secondary_span": [
            [
                3,
                8
            ],
            [
                17,
                28
            ],
            [
                33,
                37
            ]
        ],
        "edits": [
            "distinct",
            "name",
            "country",
            "races",
            "circuits",
            "year between 2014 and 2017",
            "circuit reference between 2017 and 2014"
        ],
        "edits_original": "< select > add distinct </ select > < select > add name </ select > < select > remove country </ select > < from > add races </ from > < from > remove circuits </ from > < where > add year between 2014 and 2017 </ where > < where > remove circuit reference between 2017 and 2014 </ where >"
    },
    {
        "db_id": "formula_1",
        "question": "What are the unique names of all race held between 2014 and 2017?",
        "gold_parse": "SELECT DISTINCT name FROM races WHERE YEAR BETWEEN 2014 AND 2017",
        "predicted_parse": "SELECT country FROM circuits WHERE circuitRef BETWEEN value AND value",
        "predicted_parse_explanation": [
            "find the country in circuits table whose circuit reference between 2017 and 2014"
        ],
        "feedback": "Look for names whose year value is between 2014 and 2017. ",
        "beam": [
            [
                "SELECT country FROM circuits WHERE circuitRef BETWEEN value AND value",
                -0.28317832946777344
            ],
            [
                "SELECT country FROM circuits WHERE lat BETWEEN value AND value",
                -1.4586763381958008
            ],
            [
                "SELECT country FROM circuits WHERE lng BETWEEN value AND value",
                -5.438736438751221
            ],
            [
                "SELECT country FROM circuits WHERE circuitRef = value AND circuitRef BETWEEN value AND value",
                -5.696632385253906
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN lapTimes AS T3 ON T2.raceId = T3.raceId WHERE T3.milliseconds BETWEEN value AND value",
                -6.181718826293945
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN status AS T2 WHERE T2.number BETWEEN value AND value",
                -6.524085998535156
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN lapTimes AS T3 ON T2.raceId = T3.raceId WHERE T3.lap BETWEEN value AND value",
                -6.745944023132324
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN pitStops AS T3 ON T2.raceId = T3.raceId WHERE T3.stop BETWEEN value AND value",
                -6.9482598304748535
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN pitStops AS T3 ON T2.raceId = T3.raceId WHERE T3.lap BETWEEN value AND value",
                -8.490561485290527
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN pitStops AS T3 ON T2.raceId = T3.raceId WHERE T3.milliseconds BETWEEN value AND value",
                -8.645487785339355
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN lapTimes AS T3 ON T2.raceId = T3.raceId WHERE T3.position BETWEEN value AND value",
                -9.781062126159668
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN constructorResults AS T3 ON T2.raceId = T3.raceId WHERE T3.points BETWEEN value AND value",
                -10.319284439086914
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN lapTimes AS T3 ON T2.raceId = T3.raceId WHERE T3.time BETWEEN value AND value",
                -10.39621353149414
            ],
            [
                "SELECT country FROM circuits WHERE circuitRef < value",
                -10.799552917480469
            ],
            [
                "SELECT country FROM circuits WHERE circuitRef = value AND lat BETWEEN value AND value",
                -10.825482368469238
            ],
            [
                "SELECT country FROM circuits WHERE lat > = value AND circuitRef < = value",
                -11.088839530944824
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN constructorResults AS T3 ON T2.raceId = T3.raceId WHERE T3.status BETWEEN value AND value",
                -11.213221549987793
            ],
            [
                "SELECT country FROM circuits WHERE circuitRef = value AND circuitRef LIKE value",
                -11.308728218078613
            ],
            [
                "SELECT country FROM circuits WHERE circuitRef = value AND circuitRef < = value",
                -11.313239097595215
            ],
            [
                "SELECT country FROM circuits",
                -13.404687881469727
            ]
        ],
        "predicted_parse_with_values": "SELECT country FROM circuits WHERE circuitRef BETWEEN 2017 AND 2014",
        "template_feedback": "use races table in place of circuits table . consider the year between 2014 and 2017 conditions in place of the circuit reference between 2017 and 2014 conditions . find races 's name in place of country . make sure no repetition in the results .",
        "primary_span": [
            [
                0,
                2
            ],
            [
                9,
                16
            ],
            [
                29,
                32
            ],
            [
                38,
                45
            ]
        ],
        "secondary_span": [
            [
                3,
                8
            ],
            [
                17,
                28
            ],
            [
                33,
                37
            ]
        ],
        "edits": [
            "distinct",
            "name",
            "country",
            "races",
            "circuits",
            "year between 2014 and 2017",
            "circuit reference between 2017 and 2014"
        ],
        "edits_original": "< select > add distinct </ select > < select > add name </ select > < select > remove country </ select > < from > add races </ from > < from > remove circuits </ from > < where > add year between 2014 and 2017 </ where > < where > remove circuit reference between 2017 and 2014 </ where >"
    },
    {
        "db_id": "formula_1",
        "question": "For each nationality, how many different constructors are there?",
        "gold_parse": "SELECT count(*) ,  nationality FROM constructors GROUP BY nationality",
        "predicted_parse": "SELECT driverRef , Count ( * ) FROM drivers GROUP BY driverRef",
        "predicted_parse_explanation": [
            "find each value of driver reference in drivers table along with the number of the corresponding rows to each value"
        ],
        "feedback": "Find the number of rows of each distinct value of nationality in constructors table .",
        "beam": [
            [
                "SELECT driverRef , Count ( * ) FROM drivers GROUP BY driverRef",
                -0.0008993148803710938
            ],
            [
                "SELECT Count ( DISTINCT driverRef ) FROM drivers",
                -7.090733528137207
            ],
            [
                "SELECT Count ( DISTINCT driverRef ) , Count ( * ) FROM drivers GROUP BY driverRef",
                -10.701931953430176
            ],
            [
                "SELECT driverRef , Count ( DISTINCT driverRef ) FROM drivers GROUP BY driverRef",
                -11.44500732421875
            ],
            [
                "SELECT driverRef , Count ( driverId ) FROM drivers GROUP BY driverRef",
                -12.179211616516113
            ],
            [
                "SELECT driverRef , Count ( DISTINCT driverId ) FROM drivers GROUP BY driverRef",
                -12.18400526046753
            ],
            [
                "SELECT driverRef , Count ( * ) FROM drivers GROUP BY driverRef ORDER BY Count ( * ) Asc LIMIT value",
                -12.958752632141113
            ],
            [
                "SELECT DISTINCT driverRef , Count ( * ) FROM drivers GROUP BY driverRef",
                -13.865464210510254
            ],
            [
                "SELECT driverRef , Count ( * ) FROM drivers GROUP BY driverRef LIMIT value",
                -13.983283996582031
            ],
            [
                "SELECT driverRef , Count ( * ) , driverRef FROM drivers GROUP BY driverRef",
                -14.012763023376465
            ],
            [
                "SELECT driverRef , Count ( DISTINCT * ) FROM drivers GROUP BY driverRef",
                -14.025941848754883
            ],
            [
                "SELECT driverRef , Count ( * ) FROM drivers",
                -14.146124839782715
            ],
            [
                "SELECT driverRef FROM drivers GROUP BY driverRef",
                -14.162862777709961
            ],
            [
                "SELECT driverRef , Count ( * ) FROM drivers GROUP BY driverRef HAVING Count ( * ) = value",
                -14.202413558959961
            ],
            [
                "SELECT driverRef , Count ( * ) FROM drivers GROUP BY DISTINCT driverRef",
                -14.350175857543945
            ],
            [
                "SELECT driverRef , Count ( * ) , Count ( * ) FROM drivers GROUP BY driverRef",
                -14.413457870483398
            ],
            [
                "SELECT driverRef , driverRef FROM drivers GROUP BY driverRef",
                -14.503752708435059
            ],
            [
                "SELECT driverRef , Count ( * ) FROM drivers ORDER BY driverRef Asc",
                -14.599547028541565
            ],
            [
                "SELECT Count ( DISTINCT driverRef ) , Count ( * ) FROM drivers",
                -14.642843246459961
            ],
            [
                "SELECT Count ( * ) FROM circuits",
                -17.536654472351074
            ]
        ],
        "predicted_parse_with_values": "SELECT driverRef , Count ( * ) FROM drivers GROUP BY driverRef",
        "template_feedback": "use constructors table in place of drivers table . find for each value of constructors 's nationality in place of driver reference . find constructors 's nationality in place of driver reference .",
        "primary_span": [
            [
                0,
                2
            ],
            [
                9,
                16
            ],
            [
                23,
                26
            ]
        ],
        "secondary_span": [
            [
                3,
                8
            ],
            [
                17,
                22
            ],
            [
                27,
                32
            ]
        ],
        "edits": [
            "nationality",
            "driver reference",
            "constructors",
            "drivers",
            "nationality",
            "driver reference"
        ],
        "edits_original": "< select > add nationality </ select > < select > remove driver reference </ select > < from > add constructors </ from > < from > remove drivers </ from > < groupBy > add nationality </ groupBy > < groupBy > remove driver reference </ groupBy >"
    },
    {
        "db_id": "formula_1",
        "question": "For each nationality, how many different constructors are there?",
        "gold_parse": "SELECT count(*) ,  nationality FROM constructors GROUP BY nationality",
        "predicted_parse": "SELECT driverRef , Count ( * ) FROM drivers GROUP BY driverRef",
        "predicted_parse_explanation": [
            "find each value of driver reference in drivers table along with the number of the corresponding rows to each value"
        ],
        "feedback": "Need to count rows of unique value of nationality from constructors table.",
        "beam": [
            [
                "SELECT driverRef , Count ( * ) FROM drivers GROUP BY driverRef",
                -0.0008993148803710938
            ],
            [
                "SELECT Count ( DISTINCT driverRef ) FROM drivers",
                -7.090733528137207
            ],
            [
                "SELECT Count ( DISTINCT driverRef ) , Count ( * ) FROM drivers GROUP BY driverRef",
                -10.701931953430176
            ],
            [
                "SELECT driverRef , Count ( DISTINCT driverRef ) FROM drivers GROUP BY driverRef",
                -11.44500732421875
            ],
            [
                "SELECT driverRef , Count ( driverId ) FROM drivers GROUP BY driverRef",
                -12.179211616516113
            ],
            [
                "SELECT driverRef , Count ( DISTINCT driverId ) FROM drivers GROUP BY driverRef",
                -12.18400526046753
            ],
            [
                "SELECT driverRef , Count ( * ) FROM drivers GROUP BY driverRef ORDER BY Count ( * ) Asc LIMIT value",
                -12.958752632141113
            ],
            [
                "SELECT DISTINCT driverRef , Count ( * ) FROM drivers GROUP BY driverRef",
                -13.865464210510254
            ],
            [
                "SELECT driverRef , Count ( * ) FROM drivers GROUP BY driverRef LIMIT value",
                -13.983283996582031
            ],
            [
                "SELECT driverRef , Count ( * ) , driverRef FROM drivers GROUP BY driverRef",
                -14.012763023376465
            ],
            [
                "SELECT driverRef , Count ( DISTINCT * ) FROM drivers GROUP BY driverRef",
                -14.025941848754883
            ],
            [
                "SELECT driverRef , Count ( * ) FROM drivers",
                -14.146124839782715
            ],
            [
                "SELECT driverRef FROM drivers GROUP BY driverRef",
                -14.162862777709961
            ],
            [
                "SELECT driverRef , Count ( * ) FROM drivers GROUP BY driverRef HAVING Count ( * ) = value",
                -14.202413558959961
            ],
            [
                "SELECT driverRef , Count ( * ) FROM drivers GROUP BY DISTINCT driverRef",
                -14.350175857543945
            ],
            [
                "SELECT driverRef , Count ( * ) , Count ( * ) FROM drivers GROUP BY driverRef",
                -14.413457870483398
            ],
            [
                "SELECT driverRef , driverRef FROM drivers GROUP BY driverRef",
                -14.503752708435059
            ],
            [
                "SELECT driverRef , Count ( * ) FROM drivers ORDER BY driverRef Asc",
                -14.599547028541565
            ],
            [
                "SELECT Count ( DISTINCT driverRef ) , Count ( * ) FROM drivers",
                -14.642843246459961
            ],
            [
                "SELECT Count ( * ) FROM circuits",
                -17.536654472351074
            ]
        ],
        "predicted_parse_with_values": "SELECT driverRef , Count ( * ) FROM drivers GROUP BY driverRef",
        "template_feedback": "use constructors table in place of drivers table . find for each value of constructors 's nationality in place of driver reference . find constructors 's nationality in place of driver reference .",
        "primary_span": [
            [
                0,
                2
            ],
            [
                9,
                16
            ],
            [
                23,
                26
            ]
        ],
        "secondary_span": [
            [
                3,
                8
            ],
            [
                17,
                22
            ],
            [
                27,
                32
            ]
        ],
        "edits": [
            "nationality",
            "driver reference",
            "constructors",
            "drivers",
            "nationality",
            "driver reference"
        ],
        "edits_original": "< select > add nationality </ select > < select > remove driver reference </ select > < from > add constructors </ from > < from > remove drivers </ from > < groupBy > add nationality </ groupBy > < groupBy > remove driver reference </ groupBy >"
    },
    {
        "db_id": "formula_1",
        "question": "What is the name of the race that occurred most recently?",
        "gold_parse": "SELECT name FROM races ORDER BY date DESC LIMIT 1",
        "predicted_parse": "SELECT country FROM circuits ORDER BY lat Desc LIMIT value",
        "predicted_parse_explanation": [
            "find the country in circuits table with largest value of latitude"
        ],
        "feedback": "Replace country , circuits table and latitude with name , races table and date respectively .",
        "beam": [
            [
                "SELECT country FROM circuits ORDER BY lat Desc LIMIT value",
                -0.04837608337402344
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN pitStops AS T3 ON T2.raceId = T3.raceId ORDER BY T3.milliseconds Desc LIMIT value",
                -3.054597854614258
            ],
            [
                "SELECT country FROM circuits ORDER BY circuitRef Desc LIMIT value",
                -10.187674522399902
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN pitStops AS T3 ON T2.raceId = T3.raceId ORDER BY T3.stop Desc LIMIT value",
                -11.119993209838867
            ],
            [
                "SELECT country FROM circuits GROUP BY country ORDER BY Count ( * ) Desc LIMIT value",
                -12.521040916442871
            ],
            [
                "SELECT country FROM circuits ORDER BY lat Desc",
                -12.66208267211914
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN status AS T2 ORDER BY T2.number Desc LIMIT value",
                -12.817882537841797
            ],
            [
                "SELECT country FROM circuits ORDER BY lat Asc LIMIT value",
                -13.110640525817871
            ],
            [
                "SELECT country FROM circuits ORDER BY lng Desc LIMIT value",
                -13.166253089904785
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN lapTimes AS T3 ON T2.raceId = T3.raceId ORDER BY T3.milliseconds Desc LIMIT value",
                -13.807968139648438
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN pitStops AS T3 ON T2.raceId = T3.raceId WHERE T3.milliseconds = ( SELECT Max ( T1.lat ) FROM circuits AS T1 )",
                -14.08242154121399
            ],
            [
                "SELECT country FROM circuits ORDER BY country Desc LIMIT value",
                -14.108146667480469
            ],
            [
                "SELECT T1.country , T3.milliseconds FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN pitStops AS T3 ON T2.raceId = T3.raceId ORDER BY T1.lat Desc LIMIT value",
                -14.292904376983643
            ],
            [
                "SELECT DISTINCT country FROM circuits ORDER BY lat Desc LIMIT value",
                -14.76066780090332
            ],
            [
                "SELECT country FROM circuits ORDER BY DISTINCT lat Desc LIMIT value",
                -14.80896282196045
            ],
            [
                "SELECT DISTINCT country FROM circuits ORDER BY lat Desc LIMIT value",
                -14.855712890625
            ],
            [
                "SELECT country FROM circuits WHERE lat = ( SELECT Max ( lat ) FROM circuits )",
                -15.100378036499023
            ],
            [
                "SELECT T1.country FROM circuits AS T1 EXCEPT SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN pitStops AS T3 ON T2.raceId = T3.raceId WHERE T3.milliseconds = ( SELECT Max ( T1.lat ) FROM circuits AS T1 )",
                -15.337161779403687
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN pitStops AS T3 ON T2.raceId = T3.raceId WHERE T3.milliseconds = ( SELECT Max ( T1.lat ) FROM circuits AS T1 ) ORDER BY T1.lat Desc LIMIT value",
                -15.357848644256592
            ],
            [
                "SELECT country FROM circuits",
                -16.235268592834473
            ]
        ],
        "predicted_parse_with_values": "SELECT country FROM circuits ORDER BY lat Desc LIMIT 1",
        "template_feedback": "use races table in place of circuits table . find races 's name in place of country . order the results by date in place of latitude .",
        "primary_span": [
            [
                0,
                2
            ],
            [
                9,
                12
            ],
            [
                18,
                22
            ]
        ],
        "secondary_span": [
            [
                3,
                8
            ],
            [
                13,
                17
            ],
            [
                23,
                27
            ]
        ],
        "edits": [
            "name",
            "country",
            "races",
            "circuits",
            "date",
            "latitude"
        ],
        "edits_original": "< select > add name </ select > < select > remove country </ select > < from > add races </ from > < from > remove circuits </ from > < orderBy > add date </ orderBy > < orderBy > remove latitude </ orderBy >"
    },
    {
        "db_id": "formula_1",
        "question": "What is the name of the race that occurred most recently?",
        "gold_parse": "SELECT name FROM races ORDER BY date DESC LIMIT 1",
        "predicted_parse": "SELECT country FROM circuits ORDER BY lat Desc LIMIT value",
        "predicted_parse_explanation": [
            "find the country in circuits table with largest value of latitude"
        ],
        "feedback": "You have to use name in place of country , races table i n place of circuits table and date in place of latitude.",
        "beam": [
            [
                "SELECT country FROM circuits ORDER BY lat Desc LIMIT value",
                -0.04837608337402344
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN pitStops AS T3 ON T2.raceId = T3.raceId ORDER BY T3.milliseconds Desc LIMIT value",
                -3.054597854614258
            ],
            [
                "SELECT country FROM circuits ORDER BY circuitRef Desc LIMIT value",
                -10.187674522399902
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN pitStops AS T3 ON T2.raceId = T3.raceId ORDER BY T3.stop Desc LIMIT value",
                -11.119993209838867
            ],
            [
                "SELECT country FROM circuits GROUP BY country ORDER BY Count ( * ) Desc LIMIT value",
                -12.521040916442871
            ],
            [
                "SELECT country FROM circuits ORDER BY lat Desc",
                -12.66208267211914
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN status AS T2 ORDER BY T2.number Desc LIMIT value",
                -12.817882537841797
            ],
            [
                "SELECT country FROM circuits ORDER BY lat Asc LIMIT value",
                -13.110640525817871
            ],
            [
                "SELECT country FROM circuits ORDER BY lng Desc LIMIT value",
                -13.166253089904785
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN lapTimes AS T3 ON T2.raceId = T3.raceId ORDER BY T3.milliseconds Desc LIMIT value",
                -13.807968139648438
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN pitStops AS T3 ON T2.raceId = T3.raceId WHERE T3.milliseconds = ( SELECT Max ( T1.lat ) FROM circuits AS T1 )",
                -14.08242154121399
            ],
            [
                "SELECT country FROM circuits ORDER BY country Desc LIMIT value",
                -14.108146667480469
            ],
            [
                "SELECT T1.country , T3.milliseconds FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN pitStops AS T3 ON T2.raceId = T3.raceId ORDER BY T1.lat Desc LIMIT value",
                -14.292904376983643
            ],
            [
                "SELECT DISTINCT country FROM circuits ORDER BY lat Desc LIMIT value",
                -14.76066780090332
            ],
            [
                "SELECT country FROM circuits ORDER BY DISTINCT lat Desc LIMIT value",
                -14.80896282196045
            ],
            [
                "SELECT DISTINCT country FROM circuits ORDER BY lat Desc LIMIT value",
                -14.855712890625
            ],
            [
                "SELECT country FROM circuits WHERE lat = ( SELECT Max ( lat ) FROM circuits )",
                -15.100378036499023
            ],
            [
                "SELECT T1.country FROM circuits AS T1 EXCEPT SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN pitStops AS T3 ON T2.raceId = T3.raceId WHERE T3.milliseconds = ( SELECT Max ( T1.lat ) FROM circuits AS T1 )",
                -15.337161779403687
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN pitStops AS T3 ON T2.raceId = T3.raceId WHERE T3.milliseconds = ( SELECT Max ( T1.lat ) FROM circuits AS T1 ) ORDER BY T1.lat Desc LIMIT value",
                -15.357848644256592
            ],
            [
                "SELECT country FROM circuits",
                -16.235268592834473
            ]
        ],
        "predicted_parse_with_values": "SELECT country FROM circuits ORDER BY lat Desc LIMIT 1",
        "template_feedback": "use races table in place of circuits table . find races 's name in place of country . order the results by date in place of latitude .",
        "primary_span": [
            [
                0,
                2
            ],
            [
                9,
                12
            ],
            [
                18,
                22
            ]
        ],
        "secondary_span": [
            [
                3,
                8
            ],
            [
                13,
                17
            ],
            [
                23,
                27
            ]
        ],
        "edits": [
            "name",
            "country",
            "races",
            "circuits",
            "date",
            "latitude"
        ],
        "edits_original": "< select > add name </ select > < select > remove country </ select > < from > add races </ from > < from > remove circuits </ from > < orderBy > add date </ orderBy > < orderBy > remove latitude </ orderBy >"
    },
    {
        "db_id": "formula_1",
        "question": "How many drivers were in the Australian Grand Prix held in 2009?",
        "gold_parse": "SELECT count(*) FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid WHERE T2.name = \"Australian Grand Prix\" AND YEAR = 2009",
        "predicted_parse": "SELECT Count ( * ) FROM circuits WHERE circuitRef = value AND circuitRef = value",
        "predicted_parse_explanation": [
            "find the number of rows in circuits table whose circuit reference equals 2009 and circuit reference equals Australian Grand Prix"
        ],
        "feedback": "Replace circuits table with results table , circuit reference(first ) with races's name , circuit reference(second ) with races's year .",
        "beam": [
            [
                "SELECT Count ( * ) FROM circuits WHERE circuitRef = value AND circuitRef = value",
                -0.30382633209228516
            ],
            [
                "SELECT Count ( * ) FROM circuits WHERE country = value AND circuitRef = value",
                -1.54925537109375
            ],
            [
                "SELECT Count ( * ) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T2.time = value AND T1.circuitRef = value",
                -4.210268020629883
            ],
            [
                "SELECT Count ( * ) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN constructorResults AS T3 ON T2.raceId = T3.raceId WHERE T3.positionText = value AND T1.circuitRef = value",
                -4.74927282333374
            ],
            [
                "SELECT Count ( * ) FROM circuits WHERE circuitRef = value AND country = value",
                -4.793123245239258
            ],
            [
                "SELECT Count ( * ) FROM circuits AS T1 JOIN status AS T2 WHERE T2.number = value AND T1.circuitRef = value",
                -4.919764995574951
            ],
            [
                "SELECT Count ( * ) FROM circuits WHERE lat = value AND circuitRef = value",
                -5.682809829711914
            ],
            [
                "SELECT Count ( * ) FROM circuits AS T1 JOIN seasons AS T2 WHERE T2.nationality = value AND T1.circuitRef = value",
                -6.142859935760498
            ],
            [
                "SELECT Count ( * ) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN drivers AS T3 JOIN constructorStandings AS T4 ON T2.raceId = T4.raceId AND T4.driverId = T3.driverId WHERE T3.driverRef = value AND T1.circuitRef = value",
                -6.251530170440674
            ],
            [
                "SELECT Count ( * ) FROM circuits WHERE country = value AND country = value",
                -7.579730033874512
            ],
            [
                "SELECT Count ( * ) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN constructorResults AS T3 ON T2.raceId = T3.raceId WHERE T1.circuitRef = value AND T3.positionText = value",
                -7.623260974884033
            ],
            [
                "SELECT Count ( * ) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN lapTimes AS T3 ON T2.raceId = T3.raceId WHERE T3.time = value AND T1.circuitRef = value",
                -7.767520904541016
            ],
            [
                "SELECT Count ( * ) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN constructorResults AS T3 ON T2.raceId = T3.raceId WHERE T3.position = value AND T1.circuitRef = value",
                -8.343307495117188
            ],
            [
                "SELECT Count ( * ) FROM circuits AS T1 JOIN status AS T2 WHERE T2.number = value AND T1.country = value",
                -8.429274082183838
            ],
            [
                "SELECT Count ( * ) FROM circuits WHERE lat = value AND country = value",
                -9.420647621154785
            ],
            [
                "SELECT Count ( * ) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN constructorResults AS T3 ON T2.raceId = T3.raceId WHERE T1.country = value AND T3.positionText = value",
                -9.461867332458496
            ],
            [
                "SELECT Count ( * ) FROM circuits WHERE name = value AND circuitRef = value",
                -9.584449768066406
            ],
            [
                "SELECT Count ( * ) FROM circuits WHERE circuitRef = value AND name = value",
                -9.633450508117676
            ],
            [
                "SELECT Count ( * ) FROM circuits AS T1 JOIN status AS T2 WHERE T2.code = value AND T1.circuitRef = value",
                -9.75469970703125
            ],
            [
                "SELECT Count ( * ) FROM circuits",
                -14.966938972473145
            ]
        ],
        "predicted_parse_with_values": "SELECT Count ( * ) FROM circuits WHERE circuitRef = 2009 AND circuitRef = \"Australian Grand Prix\"",
        "template_feedback": "use results table and races table in place of circuits table . consider the races 's name equals Australian Grand Prix and year equals 2009 conditions in place of the circuit reference equals Australian Grand Prix and circuit reference equals 2009 conditions .",
        "primary_span": [
            [
                0,
                5
            ],
            [
                12,
                25
            ]
        ],
        "secondary_span": [
            [
                6,
                11
            ],
            [
                26,
                42
            ]
        ],
        "edits": [
            "results",
            "races",
            "circuits",
            "name equals \"Australian Grand Prix\"",
            "year equals 2009",
            "circuit reference equals 2009",
            "circuit reference equals \"Australian Grand Prix\""
        ],
        "edits_original": "< from > add results </ from > < from > add races </ from > < from > remove circuits </ from > < where > add name equals \" Australian Grand Prix \" </ where > < where > add year equals 2009 </ where > < where > remove circuit reference equals 2009 </ where > < where > remove circuit reference equals \" Australian Grand Prix \" </ where >"
    },
    {
        "db_id": "formula_1",
        "question": "How many drivers were in the Australian Grand Prix held in 2009?",
        "gold_parse": "SELECT count(*) FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid WHERE T2.name = \"Australian Grand Prix\" AND YEAR = 2009",
        "predicted_parse": "SELECT Count ( * ) FROM circuits WHERE circuitRef = value AND circuitRef = value",
        "predicted_parse_explanation": [
            "find the number of rows in circuits table whose circuit reference equals 2009 and circuit reference equals Australian Grand Prix"
        ],
        "feedback": "You have to use results table instead of circuits table.Additionally, use the name and year of races's in place of first and second circuit reference respectively.",
        "beam": [
            [
                "SELECT Count ( * ) FROM circuits WHERE circuitRef = value AND circuitRef = value",
                -0.30382633209228516
            ],
            [
                "SELECT Count ( * ) FROM circuits WHERE country = value AND circuitRef = value",
                -1.54925537109375
            ],
            [
                "SELECT Count ( * ) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T2.time = value AND T1.circuitRef = value",
                -4.210268020629883
            ],
            [
                "SELECT Count ( * ) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN constructorResults AS T3 ON T2.raceId = T3.raceId WHERE T3.positionText = value AND T1.circuitRef = value",
                -4.74927282333374
            ],
            [
                "SELECT Count ( * ) FROM circuits WHERE circuitRef = value AND country = value",
                -4.793123245239258
            ],
            [
                "SELECT Count ( * ) FROM circuits AS T1 JOIN status AS T2 WHERE T2.number = value AND T1.circuitRef = value",
                -4.919764995574951
            ],
            [
                "SELECT Count ( * ) FROM circuits WHERE lat = value AND circuitRef = value",
                -5.682809829711914
            ],
            [
                "SELECT Count ( * ) FROM circuits AS T1 JOIN seasons AS T2 WHERE T2.nationality = value AND T1.circuitRef = value",
                -6.142859935760498
            ],
            [
                "SELECT Count ( * ) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN drivers AS T3 JOIN constructorStandings AS T4 ON T2.raceId = T4.raceId AND T4.driverId = T3.driverId WHERE T3.driverRef = value AND T1.circuitRef = value",
                -6.251530170440674
            ],
            [
                "SELECT Count ( * ) FROM circuits WHERE country = value AND country = value",
                -7.579730033874512
            ],
            [
                "SELECT Count ( * ) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN constructorResults AS T3 ON T2.raceId = T3.raceId WHERE T1.circuitRef = value AND T3.positionText = value",
                -7.623260974884033
            ],
            [
                "SELECT Count ( * ) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN lapTimes AS T3 ON T2.raceId = T3.raceId WHERE T3.time = value AND T1.circuitRef = value",
                -7.767520904541016
            ],
            [
                "SELECT Count ( * ) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN constructorResults AS T3 ON T2.raceId = T3.raceId WHERE T3.position = value AND T1.circuitRef = value",
                -8.343307495117188
            ],
            [
                "SELECT Count ( * ) FROM circuits AS T1 JOIN status AS T2 WHERE T2.number = value AND T1.country = value",
                -8.429274082183838
            ],
            [
                "SELECT Count ( * ) FROM circuits WHERE lat = value AND country = value",
                -9.420647621154785
            ],
            [
                "SELECT Count ( * ) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN constructorResults AS T3 ON T2.raceId = T3.raceId WHERE T1.country = value AND T3.positionText = value",
                -9.461867332458496
            ],
            [
                "SELECT Count ( * ) FROM circuits WHERE name = value AND circuitRef = value",
                -9.584449768066406
            ],
            [
                "SELECT Count ( * ) FROM circuits WHERE circuitRef = value AND name = value",
                -9.633450508117676
            ],
            [
                "SELECT Count ( * ) FROM circuits AS T1 JOIN status AS T2 WHERE T2.code = value AND T1.circuitRef = value",
                -9.75469970703125
            ],
            [
                "SELECT Count ( * ) FROM circuits",
                -14.966938972473145
            ]
        ],
        "predicted_parse_with_values": "SELECT Count ( * ) FROM circuits WHERE circuitRef = 2009 AND circuitRef = \"Australian Grand Prix\"",
        "template_feedback": "use results table and races table in place of circuits table . consider the races 's name equals Australian Grand Prix and year equals 2009 conditions in place of the circuit reference equals Australian Grand Prix and circuit reference equals 2009 conditions .",
        "primary_span": [
            [
                0,
                5
            ],
            [
                12,
                25
            ]
        ],
        "secondary_span": [
            [
                6,
                11
            ],
            [
                26,
                42
            ]
        ],
        "edits": [
            "results",
            "races",
            "circuits",
            "name equals \"Australian Grand Prix\"",
            "year equals 2009",
            "circuit reference equals 2009",
            "circuit reference equals \"Australian Grand Prix\""
        ],
        "edits_original": "< from > add results </ from > < from > add races </ from > < from > remove circuits </ from > < where > add name equals \" Australian Grand Prix \" </ where > < where > add year equals 2009 </ where > < where > remove circuit reference equals 2009 </ where > < where > remove circuit reference equals \" Australian Grand Prix \" </ where >"
    },
    {
        "db_id": "formula_1",
        "question": "Find the names of all races held in 2017.",
        "gold_parse": "SELECT name FROM races WHERE YEAR = 2017",
        "predicted_parse": "SELECT country FROM circuits WHERE circuitRef = value",
        "predicted_parse_explanation": [
            "find the country in circuits table whose circuit reference equals 2017"
        ],
        "feedback": "Need to replace country with name ,  circuits table with races table ,  circuit reference with year .",
        "beam": [
            [
                "SELECT country FROM circuits WHERE circuitRef = value",
                -1.9073486328125e-06
            ],
            [
                "SELECT country , country FROM circuits WHERE circuitRef = value",
                -13.69365930557251
            ],
            [
                "SELECT country FROM circuits",
                -13.87700366973877
            ],
            [
                "SELECT country FROM circuits WHERE circuitRef = value LIMIT value",
                -14.725994110107422
            ],
            [
                "SELECT DISTINCT country FROM circuits WHERE circuitRef = value",
                -14.778815269470215
            ],
            [
                "SELECT country FROM circuits WHERE DISTINCT circuitRef = value",
                -14.787941932678223
            ],
            [
                "SELECT DISTINCT country FROM circuits WHERE circuitRef = value",
                -14.970212936401367
            ],
            [
                "SELECT country FROM circuits WHERE circuitRef = value AND circuitRef = value",
                -15.127110481262207
            ],
            [
                "SELECT country FROM circuits WHERE circuitRef LIKE value",
                -16.21603012084961
            ],
            [
                "SELECT country , circuitRef FROM circuits WHERE circuitRef = value",
                -16.70301914215088
            ],
            [
                "SELECT country FROM circuits WHERE circuitRef = value",
                -17.119651794433594
            ],
            [
                "SELECT country FROM circuits WHERE circuitRef = value ORDER BY country Asc",
                -17.237761974334717
            ],
            [
                "SELECT country FROM circuits WHERE circuitRef > value",
                -17.552306175231934
            ],
            [
                "SELECT country FROM circuits GROUP BY country HAVING Count ( * ) = value",
                -17.747498512268066
            ],
            [
                "SELECT country FROM circuits WHERE circuitRef = value INTERSECT SELECT country FROM circuits WHERE circuitRef = value",
                -18.02914047241211
            ],
            [
                "SELECT country FROM circuits WHERE circuitRef < value",
                -18.099685668945312
            ],
            [
                "SELECT country FROM circuits WHERE circuitRef = value",
                -18.13536262512207
            ],
            [
                "SELECT country FROM circuits WHERE circuitRef = value ORDER BY country Asc LIMIT value",
                -18.589863300323486
            ],
            [
                "SELECT country FROM circuits WHERE circuitRef = value",
                -18.725505828857422
            ],
            [
                "SELECT country FROM circuits WHERE circuitRef = ( SELECT circuitRef FROM circuits WHERE circuitRef = value )",
                -18.995030879974365
            ]
        ],
        "predicted_parse_with_values": "SELECT country FROM circuits WHERE circuitRef = 2017",
        "template_feedback": "use races table in place of circuits table . consider the year equals 2017 conditions in place of the circuit reference equals 2017 conditions . find races 's name in place of country .",
        "primary_span": [
            [
                0,
                2
            ],
            [
                9,
                14
            ],
            [
                25,
                28
            ]
        ],
        "secondary_span": [
            [
                3,
                8
            ],
            [
                15,
                24
            ],
            [
                29,
                33
            ]
        ],
        "edits": [
            "name",
            "country",
            "races",
            "circuits",
            "year equals 2017",
            "circuit reference equals 2017"
        ],
        "edits_original": "< select > add name </ select > < select > remove country </ select > < from > add races </ from > < from > remove circuits </ from > < where > add year equals 2017 </ where > < where > remove circuit reference equals 2017 </ where >"
    },
    {
        "db_id": "formula_1",
        "question": "Find the names of all races held in 2017.",
        "gold_parse": "SELECT name FROM races WHERE YEAR = 2017",
        "predicted_parse": "SELECT country FROM circuits WHERE circuitRef = value",
        "predicted_parse_explanation": [
            "find the country in circuits table whose circuit reference equals 2017"
        ],
        "feedback": "You need to substitute name, race table and year in place of country, circuits table and circuit refenerce respectively.",
        "beam": [
            [
                "SELECT country FROM circuits WHERE circuitRef = value",
                -1.9073486328125e-06
            ],
            [
                "SELECT country , country FROM circuits WHERE circuitRef = value",
                -13.69365930557251
            ],
            [
                "SELECT country FROM circuits",
                -13.87700366973877
            ],
            [
                "SELECT country FROM circuits WHERE circuitRef = value LIMIT value",
                -14.725994110107422
            ],
            [
                "SELECT DISTINCT country FROM circuits WHERE circuitRef = value",
                -14.778815269470215
            ],
            [
                "SELECT country FROM circuits WHERE DISTINCT circuitRef = value",
                -14.787941932678223
            ],
            [
                "SELECT DISTINCT country FROM circuits WHERE circuitRef = value",
                -14.970212936401367
            ],
            [
                "SELECT country FROM circuits WHERE circuitRef = value AND circuitRef = value",
                -15.127110481262207
            ],
            [
                "SELECT country FROM circuits WHERE circuitRef LIKE value",
                -16.21603012084961
            ],
            [
                "SELECT country , circuitRef FROM circuits WHERE circuitRef = value",
                -16.70301914215088
            ],
            [
                "SELECT country FROM circuits WHERE circuitRef = value",
                -17.119651794433594
            ],
            [
                "SELECT country FROM circuits WHERE circuitRef = value ORDER BY country Asc",
                -17.237761974334717
            ],
            [
                "SELECT country FROM circuits WHERE circuitRef > value",
                -17.552306175231934
            ],
            [
                "SELECT country FROM circuits GROUP BY country HAVING Count ( * ) = value",
                -17.747498512268066
            ],
            [
                "SELECT country FROM circuits WHERE circuitRef = value INTERSECT SELECT country FROM circuits WHERE circuitRef = value",
                -18.02914047241211
            ],
            [
                "SELECT country FROM circuits WHERE circuitRef < value",
                -18.099685668945312
            ],
            [
                "SELECT country FROM circuits WHERE circuitRef = value",
                -18.13536262512207
            ],
            [
                "SELECT country FROM circuits WHERE circuitRef = value ORDER BY country Asc LIMIT value",
                -18.589863300323486
            ],
            [
                "SELECT country FROM circuits WHERE circuitRef = value",
                -18.725505828857422
            ],
            [
                "SELECT country FROM circuits WHERE circuitRef = ( SELECT circuitRef FROM circuits WHERE circuitRef = value )",
                -18.995030879974365
            ]
        ],
        "predicted_parse_with_values": "SELECT country FROM circuits WHERE circuitRef = 2017",
        "template_feedback": "use races table in place of circuits table . consider the year equals 2017 conditions in place of the circuit reference equals 2017 conditions . find races 's name in place of country .",
        "primary_span": [
            [
                0,
                2
            ],
            [
                9,
                14
            ],
            [
                25,
                28
            ]
        ],
        "secondary_span": [
            [
                3,
                8
            ],
            [
                15,
                24
            ],
            [
                29,
                33
            ]
        ],
        "edits": [
            "name",
            "country",
            "races",
            "circuits",
            "year equals 2017",
            "circuit reference equals 2017"
        ],
        "edits_original": "< select > add name </ select > < select > remove country </ select > < from > add races </ from > < from > remove circuits </ from > < where > add year equals 2017 </ where > < where > remove circuit reference equals 2017 </ where >"
    },
    {
        "db_id": "coffee_shop",
        "question": "Which membership card has more than 5 members?",
        "gold_parse": "SELECT Membership_card FROM member GROUP BY Membership_card HAVING count(*)  >  5",
        "predicted_parse": "SELECT Membership_card FROM member WHERE Membership_card > value",
        "predicted_parse_explanation": [
            "find the membership card in member table whose membership card greater than 5"
        ],
        "feedback": "Need to make sure more than 5 members have that membership card .",
        "beam": [
            [
                "SELECT Membership_card FROM member WHERE Membership_card > value",
                -0.12732696533203125
            ],
            [
                "SELECT Membership_card FROM member GROUP BY Membership_card HAVING Count ( * ) > value",
                -2.2487850189208984
            ],
            [
                "SELECT * FROM member WHERE Membership_card > value",
                -5.379893779754639
            ],
            [
                "SELECT Membership_card FROM member WHERE Level_of_membership > value",
                -5.435695648193359
            ],
            [
                "SELECT Name FROM member WHERE Membership_card > value",
                -5.952882289886475
            ],
            [
                "SELECT Level_of_membership FROM member WHERE Membership_card > value",
                -7.130972862243652
            ],
            [
                "SELECT Membership_card FROM member GROUP BY Membership_card HAVING Count ( Member_ID ) > value",
                -7.325115203857422
            ],
            [
                "SELECT Membership_card FROM member WHERE Membership_card > value GROUP BY Membership_card HAVING Count ( * ) > value",
                -8.411651611328125
            ],
            [
                "SELECT Level_of_membership FROM member GROUP BY Membership_card HAVING Count ( * ) > value",
                -9.54228162765503
            ],
            [
                "SELECT Membership_card FROM member GROUP BY Level_of_membership HAVING Count ( * ) > value",
                -9.687803268432617
            ],
            [
                "SELECT Membership_card FROM member",
                -9.700160503387451
            ],
            [
                "SELECT Name FROM member GROUP BY Membership_card HAVING Count ( * ) > value",
                -10.295124530792236
            ],
            [
                "SELECT Membership_card FROM member WHERE Membership_card > value GROUP BY Membership_card ORDER BY Count ( * ) Asc LIMIT value",
                -10.472754001617432
            ],
            [
                "SELECT * FROM member WHERE Level_of_membership > value",
                -10.753892421722412
            ],
            [
                "SELECT Membership_card FROM member EXCEPT SELECT Membership_card FROM member WHERE Membership_card > value",
                -10.792970180511475
            ],
            [
                "SELECT Name FROM member WHERE Level_of_membership > value",
                -11.108537197113037
            ],
            [
                "SELECT Membership_card FROM member GROUP BY Membership_card HAVING Count ( Level_of_membership ) > value",
                -11.451050758361816
            ],
            [
                "SELECT Membership_card FROM member EXCEPT SELECT Membership_card FROM member WHERE Level_of_membership > value",
                -11.783592700958252
            ],
            [
                "SELECT Membership_card FROM member GROUP BY * HAVING Count ( * ) > value",
                -11.934407234191895
            ],
            [
                "SELECT Level_of_membership FROM member WHERE Level_of_membership > value",
                -12.426289558410645
            ]
        ],
        "predicted_parse_with_values": "SELECT Membership_card FROM member WHERE Membership_card > 5",
        "template_feedback": "remove the membership card greater than 5 conditions . find for each value of membership card whose number of rows greater than 5 .",
        "primary_span": [
            [
                0,
                8
            ],
            [
                9,
                23
            ]
        ],
        "secondary_span": [],
        "edits": [
            "membership card greater than 5",
            "membership card",
            "number of rows greater than 5"
        ],
        "edits_original": "< where > remove membership card greater than 5 </ where > < groupBy > add membership card </ groupBy > < having > add number of rows greater than 5 </ having >"
    },
    {
        "db_id": "coffee_shop",
        "question": "Which membership card has more than 5 members?",
        "gold_parse": "SELECT Membership_card FROM member GROUP BY Membership_card HAVING count(*)  >  5",
        "predicted_parse": "SELECT Membership_card FROM member WHERE Membership_card > value",
        "predicted_parse_explanation": [
            "find the membership card in member table whose membership card greater than 5"
        ],
        "feedback": "The condition is that the membersip card must be possessed by greater than 5 members.",
        "beam": [
            [
                "SELECT Membership_card FROM member WHERE Membership_card > value",
                -0.12732696533203125
            ],
            [
                "SELECT Membership_card FROM member GROUP BY Membership_card HAVING Count ( * ) > value",
                -2.2487850189208984
            ],
            [
                "SELECT * FROM member WHERE Membership_card > value",
                -5.379893779754639
            ],
            [
                "SELECT Membership_card FROM member WHERE Level_of_membership > value",
                -5.435695648193359
            ],
            [
                "SELECT Name FROM member WHERE Membership_card > value",
                -5.952882289886475
            ],
            [
                "SELECT Level_of_membership FROM member WHERE Membership_card > value",
                -7.130972862243652
            ],
            [
                "SELECT Membership_card FROM member GROUP BY Membership_card HAVING Count ( Member_ID ) > value",
                -7.325115203857422
            ],
            [
                "SELECT Membership_card FROM member WHERE Membership_card > value GROUP BY Membership_card HAVING Count ( * ) > value",
                -8.411651611328125
            ],
            [
                "SELECT Level_of_membership FROM member GROUP BY Membership_card HAVING Count ( * ) > value",
                -9.54228162765503
            ],
            [
                "SELECT Membership_card FROM member GROUP BY Level_of_membership HAVING Count ( * ) > value",
                -9.687803268432617
            ],
            [
                "SELECT Membership_card FROM member",
                -9.700160503387451
            ],
            [
                "SELECT Name FROM member GROUP BY Membership_card HAVING Count ( * ) > value",
                -10.295124530792236
            ],
            [
                "SELECT Membership_card FROM member WHERE Membership_card > value GROUP BY Membership_card ORDER BY Count ( * ) Asc LIMIT value",
                -10.472754001617432
            ],
            [
                "SELECT * FROM member WHERE Level_of_membership > value",
                -10.753892421722412
            ],
            [
                "SELECT Membership_card FROM member EXCEPT SELECT Membership_card FROM member WHERE Membership_card > value",
                -10.792970180511475
            ],
            [
                "SELECT Name FROM member WHERE Level_of_membership > value",
                -11.108537197113037
            ],
            [
                "SELECT Membership_card FROM member GROUP BY Membership_card HAVING Count ( Level_of_membership ) > value",
                -11.451050758361816
            ],
            [
                "SELECT Membership_card FROM member EXCEPT SELECT Membership_card FROM member WHERE Level_of_membership > value",
                -11.783592700958252
            ],
            [
                "SELECT Membership_card FROM member GROUP BY * HAVING Count ( * ) > value",
                -11.934407234191895
            ],
            [
                "SELECT Level_of_membership FROM member WHERE Level_of_membership > value",
                -12.426289558410645
            ]
        ],
        "predicted_parse_with_values": "SELECT Membership_card FROM member WHERE Membership_card > 5",
        "template_feedback": "remove the membership card greater than 5 conditions . find for each value of membership card whose number of rows greater than 5 .",
        "primary_span": [
            [
                0,
                8
            ],
            [
                9,
                23
            ]
        ],
        "secondary_span": [],
        "edits": [
            "membership card greater than 5",
            "membership card",
            "number of rows greater than 5"
        ],
        "edits_original": "< where > remove membership card greater than 5 </ where > < groupBy > add membership card </ groupBy > < having > add number of rows greater than 5 </ having >"
    },
    {
        "db_id": "formula_1",
        "question": "How many drivers participated in the race Australian Grand Prix held in 2009?",
        "gold_parse": "SELECT count(*) FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid WHERE T2.name = \"Australian Grand Prix\" AND YEAR = 2009",
        "predicted_parse": "SELECT Count ( * ) FROM circuits WHERE circuitRef = value AND circuitRef = value",
        "predicted_parse_explanation": [
            "find the number of rows in circuits table whose circuit reference equals 2009 and circuit reference equals Australian Grand Prix"
        ],
        "feedback": "Find number of drivers for races's name equals Australian Grand Prix and year equals 2009.",
        "beam": [
            [
                "SELECT Count ( * ) FROM circuits WHERE circuitRef = value AND circuitRef = value",
                -0.04574108123779297
            ],
            [
                "SELECT Count ( * ) FROM circuits WHERE country = value AND circuitRef = value",
                -3.432978630065918
            ],
            [
                "SELECT Count ( * ) FROM circuits WHERE circuitRef = value AND country = value",
                -4.912299156188965
            ],
            [
                "SELECT Count ( * ) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN constructorResults AS T3 ON T2.raceId = T3.raceId WHERE T3.positionText = value AND T1.circuitRef = value",
                -6.717731475830078
            ],
            [
                "SELECT Count ( * ) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN constructorResults AS T3 ON T2.raceId = T3.raceId WHERE T3.position = value AND T1.circuitRef = value",
                -7.169708251953125
            ],
            [
                "SELECT Count ( * ) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN drivers AS T3 JOIN constructorStandings AS T4 ON T2.raceId = T4.raceId AND T4.driverId = T3.driverId WHERE T3.driverRef = value AND T1.circuitRef = value",
                -7.201351165771484
            ],
            [
                "SELECT Count ( * ) FROM circuits WHERE circuitRef = value AND name = value",
                -7.560896873474121
            ],
            [
                "SELECT Count ( * ) FROM circuits WHERE lat = value AND circuitRef = value",
                -7.78834342956543
            ],
            [
                "SELECT Count ( * ) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T2.time = value AND T1.circuitRef = value",
                -8.468420028686523
            ],
            [
                "SELECT Count ( * ) FROM circuits AS T1 JOIN status AS T2 WHERE T2.number = value AND T1.circuitRef = value",
                -8.59271240234375
            ],
            [
                "SELECT Count ( * ) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN constructorResults AS T3 ON T2.raceId = T3.raceId WHERE T1.circuitRef = value AND T3.positionText = value",
                -8.594117164611816
            ],
            [
                "SELECT Count ( * ) FROM circuits WHERE circuitRef = value AND circuitRef > value",
                -8.684192657470703
            ],
            [
                "SELECT Count ( * ) FROM circuits WHERE name = value AND circuitRef = value",
                -9.00957202911377
            ],
            [
                "SELECT Count ( * ) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN lapTimes AS T3 ON T2.raceId = T3.raceId WHERE T3.time = value AND T1.circuitRef = value",
                -9.595766067504883
            ],
            [
                "SELECT Count ( * ) FROM circuits WHERE circuitRef = value AND lat > value",
                -9.850591659545898
            ],
            [
                "SELECT Count ( * ) FROM circuits WHERE country = value AND country = value",
                -9.938815116882324
            ],
            [
                "SELECT Count ( * ) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN constructorStandings AS T3 ON T2.raceId = T3.raceId WHERE T3.url = value AND T1.circuitRef = value",
                -10.175544738769531
            ],
            [
                "SELECT Count ( * ) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN pitStops AS T3 ON T2.raceId = T3.raceId WHERE T3.time = value AND T1.circuitRef = value",
                -10.237896919250488
            ],
            [
                "SELECT Count ( * ) FROM circuits AS T1 JOIN seasons AS T2 WHERE T2.nationality = value AND T1.circuitRef = value",
                -10.361254692077637
            ],
            [
                "SELECT Count ( * ) FROM circuits",
                -15.003767013549805
            ]
        ],
        "predicted_parse_with_values": "SELECT Count ( * ) FROM circuits WHERE circuitRef = 2009 AND circuitRef = \"Australian Grand Prix\"",
        "template_feedback": "use results table and races table in place of circuits table . consider the races 's name equals Australian Grand Prix and year equals 2009 conditions in place of the circuit reference equals Australian Grand Prix and circuit reference equals 2009 conditions .",
        "primary_span": [
            [
                0,
                5
            ],
            [
                12,
                25
            ]
        ],
        "secondary_span": [
            [
                6,
                11
            ],
            [
                26,
                42
            ]
        ],
        "edits": [
            "results",
            "races",
            "circuits",
            "name equals \"Australian Grand Prix\"",
            "year equals 2009",
            "circuit reference equals 2009",
            "circuit reference equals \"Australian Grand Prix\""
        ],
        "edits_original": "< from > add results </ from > < from > add races </ from > < from > remove circuits </ from > < where > add name equals \" Australian Grand Prix \" </ where > < where > add year equals 2009 </ where > < where > remove circuit reference equals 2009 </ where > < where > remove circuit reference equals \" Australian Grand Prix \" </ where >"
    },
    {
        "db_id": "formula_1",
        "question": "How many drivers participated in the race Australian Grand Prix held in 2009?",
        "gold_parse": "SELECT count(*) FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid WHERE T2.name = \"Australian Grand Prix\" AND YEAR = 2009",
        "predicted_parse": "SELECT Count ( * ) FROM circuits WHERE circuitRef = value AND circuitRef = value",
        "predicted_parse_explanation": [
            "find the number of rows in circuits table whose circuit reference equals 2009 and circuit reference equals Australian Grand Prix"
        ],
        "feedback": "You have to provide me the number of drivers for Australian Grand Prix held in 2009.",
        "beam": [
            [
                "SELECT Count ( * ) FROM circuits WHERE circuitRef = value AND circuitRef = value",
                -0.04574108123779297
            ],
            [
                "SELECT Count ( * ) FROM circuits WHERE country = value AND circuitRef = value",
                -3.432978630065918
            ],
            [
                "SELECT Count ( * ) FROM circuits WHERE circuitRef = value AND country = value",
                -4.912299156188965
            ],
            [
                "SELECT Count ( * ) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN constructorResults AS T3 ON T2.raceId = T3.raceId WHERE T3.positionText = value AND T1.circuitRef = value",
                -6.717731475830078
            ],
            [
                "SELECT Count ( * ) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN constructorResults AS T3 ON T2.raceId = T3.raceId WHERE T3.position = value AND T1.circuitRef = value",
                -7.169708251953125
            ],
            [
                "SELECT Count ( * ) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN drivers AS T3 JOIN constructorStandings AS T4 ON T2.raceId = T4.raceId AND T4.driverId = T3.driverId WHERE T3.driverRef = value AND T1.circuitRef = value",
                -7.201351165771484
            ],
            [
                "SELECT Count ( * ) FROM circuits WHERE circuitRef = value AND name = value",
                -7.560896873474121
            ],
            [
                "SELECT Count ( * ) FROM circuits WHERE lat = value AND circuitRef = value",
                -7.78834342956543
            ],
            [
                "SELECT Count ( * ) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T2.time = value AND T1.circuitRef = value",
                -8.468420028686523
            ],
            [
                "SELECT Count ( * ) FROM circuits AS T1 JOIN status AS T2 WHERE T2.number = value AND T1.circuitRef = value",
                -8.59271240234375
            ],
            [
                "SELECT Count ( * ) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN constructorResults AS T3 ON T2.raceId = T3.raceId WHERE T1.circuitRef = value AND T3.positionText = value",
                -8.594117164611816
            ],
            [
                "SELECT Count ( * ) FROM circuits WHERE circuitRef = value AND circuitRef > value",
                -8.684192657470703
            ],
            [
                "SELECT Count ( * ) FROM circuits WHERE name = value AND circuitRef = value",
                -9.00957202911377
            ],
            [
                "SELECT Count ( * ) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN lapTimes AS T3 ON T2.raceId = T3.raceId WHERE T3.time = value AND T1.circuitRef = value",
                -9.595766067504883
            ],
            [
                "SELECT Count ( * ) FROM circuits WHERE circuitRef = value AND lat > value",
                -9.850591659545898
            ],
            [
                "SELECT Count ( * ) FROM circuits WHERE country = value AND country = value",
                -9.938815116882324
            ],
            [
                "SELECT Count ( * ) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN constructorStandings AS T3 ON T2.raceId = T3.raceId WHERE T3.url = value AND T1.circuitRef = value",
                -10.175544738769531
            ],
            [
                "SELECT Count ( * ) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN pitStops AS T3 ON T2.raceId = T3.raceId WHERE T3.time = value AND T1.circuitRef = value",
                -10.237896919250488
            ],
            [
                "SELECT Count ( * ) FROM circuits AS T1 JOIN seasons AS T2 WHERE T2.nationality = value AND T1.circuitRef = value",
                -10.361254692077637
            ],
            [
                "SELECT Count ( * ) FROM circuits",
                -15.003767013549805
            ]
        ],
        "predicted_parse_with_values": "SELECT Count ( * ) FROM circuits WHERE circuitRef = 2009 AND circuitRef = \"Australian Grand Prix\"",
        "template_feedback": "use results table and races table in place of circuits table . consider the races 's name equals Australian Grand Prix and year equals 2009 conditions in place of the circuit reference equals Australian Grand Prix and circuit reference equals 2009 conditions .",
        "primary_span": [
            [
                0,
                5
            ],
            [
                12,
                25
            ]
        ],
        "secondary_span": [
            [
                6,
                11
            ],
            [
                26,
                42
            ]
        ],
        "edits": [
            "results",
            "races",
            "circuits",
            "name equals \"Australian Grand Prix\"",
            "year equals 2009",
            "circuit reference equals 2009",
            "circuit reference equals \"Australian Grand Prix\""
        ],
        "edits_original": "< from > add results </ from > < from > add races </ from > < from > remove circuits </ from > < where > add name equals \" Australian Grand Prix \" </ where > < where > add year equals 2009 </ where > < where > remove circuit reference equals 2009 </ where > < where > remove circuit reference equals \" Australian Grand Prix \" </ where >"
    },
    {
        "db_id": "formula_1",
        "question": "Find all the forenames of distinct drivers who won in position 1 as driver standing and had more than 20 points?",
        "gold_parse": "SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1 AND T2.points > 20",
        "predicted_parse": "SELECT T1.positionText FROM constructorStandings AS T1 JOIN results AS T2 WHERE T1.position = value AND T2.milliseconds > value",
        "predicted_parse_explanation": [
            "Step 1: for each row in constructor standings table , find the corresponding rows in results table",
            "Step 2: find the constructor standings 's position text of the results of step 1 whose constructor standings 's position equals 1 and milliseconds greater than 1"
        ],
        "feedback": "Find distinct status 's constructor id whose constructor results 's position equals 1 and q2 greater than 20",
        "beam": [
            [
                "SELECT T1.positionText FROM constructorStandings AS T1 JOIN results AS T2 WHERE T1.position = value AND T2.milliseconds > value",
                -1.2692041397094727
            ],
            [
                "SELECT T1.positionText FROM constructorStandings AS T1 JOIN results AS T2 WHERE T2.fastestLap = value AND T2.milliseconds > value",
                -1.4716224670410156
            ],
            [
                "SELECT positionText FROM constructorStandings WHERE position = value AND resultId > value",
                -3.158431053161621
            ],
            [
                "SELECT T1.driverRef FROM drivers AS T1 JOIN constructorStandings AS T2 ON T1.driverId = T2.driverId JOIN results AS T3 WHERE T2.position = value AND T3.milliseconds > value",
                -3.2618978023529053
            ],
            [
                "SELECT T1.positionOrder FROM constructorStandings AS T1 JOIN results AS T2 WHERE T1.position = value AND T2.milliseconds > value",
                -3.318514585494995
            ],
            [
                "SELECT T1.positionText FROM constructorStandings AS T1 JOIN results AS T2 WHERE T2.fastestLap = value AND T1.resultId > value",
                -3.3654441833496094
            ],
            [
                "SELECT T1.driverRef FROM drivers AS T1 JOIN results AS T2 WHERE T2.fastestLap = value AND T2.milliseconds > value",
                -3.4240825176239014
            ],
            [
                "SELECT T1.positionOrder FROM constructorStandings AS T1 JOIN results AS T2 WHERE T2.fastestLap = value AND T2.milliseconds > value",
                -3.611999273300171
            ],
            [
                "SELECT T2.positionText FROM races AS T1 JOIN constructorStandings AS T2 ON T2.raceId = T1.raceId JOIN results AS T3 JOIN constructorResults AS T4 ON T1.raceId = T4.raceId WHERE T4.raceId = value AND T3.milliseconds > value",
                -4.140761375427246
            ],
            [
                "SELECT T4.driverId FROM drivers AS T1 JOIN constructorStandings AS T2 ON T2.driverId = T1.driverId JOIN results AS T3 JOIN lapTimes AS T4 ON T1.driverId = T4.driverId WHERE T2.position = value AND T3.milliseconds > value",
                -4.249278545379639
            ],
            [
                "SELECT T1.constructorRef FROM constructors AS T1 JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId JOIN results AS T3 WHERE T2.position = value AND T3.milliseconds > value",
                -4.27006983757019
            ],
            [
                "SELECT T2.positionText FROM drivers AS T1 JOIN constructorStandings AS T2 ON T2.driverId = T1.driverId JOIN results AS T3 JOIN lapTimes AS T4 ON T1.driverId = T4.driverId WHERE T4.position = value AND T3.milliseconds > value",
                -4.382779121398926
            ],
            [
                "SELECT T1.constructorStandingsId FROM constructorStandings AS T1 JOIN results AS T2 WHERE T1.position = value AND T2.milliseconds > value",
                -4.383919715881348
            ],
            [
                "SELECT T1.constructorRef FROM constructors AS T1 JOIN results AS T2 WHERE T2.fastestLap = value AND T2.milliseconds > value",
                -4.524332761764526
            ],
            [
                "SELECT T2.driverId FROM results AS T1 JOIN lapTimes AS T2 WHERE T1.fastestLap = value AND T1.milliseconds > value",
                -4.566641330718994
            ],
            [
                "SELECT T1.constructorStandingsId FROM constructorStandings AS T1 JOIN results AS T2 WHERE T2.fastestLap = value AND T2.milliseconds > value",
                -4.681626319885254
            ],
            [
                "SELECT * FROM constructorStandings AS T1 JOIN results AS T2 WHERE T1.position = value AND T2.milliseconds > value",
                -4.764034748077393
            ],
            [
                "SELECT T4.points FROM races AS T1 JOIN constructorStandings AS T2 ON T2.raceId = T1.raceId JOIN results AS T3 JOIN constructorResults AS T4 ON T1.raceId = T4.raceId WHERE T2.position = value AND T3.milliseconds > value",
                -4.785538673400879
            ],
            [
                "SELECT DISTINCT T1.positionText FROM constructorStandings AS T1 JOIN results AS T2 WHERE T2.fastestLap = value AND T2.milliseconds > value",
                -4.795469760894775
            ],
            [
                "SELECT DISTINCT T1.positionText FROM constructorStandings AS T1 JOIN results AS T2 WHERE T1.position = value AND T2.milliseconds > value",
                -4.821074962615967
            ]
        ],
        "predicted_parse_with_values": "SELECT T1.positionText FROM constructorStandings AS T1 JOIN results AS T2 WHERE T1.position = 1 AND T2.milliseconds > 1",
        "template_feedback": "in step 1 , use driver standings table and drivers table in place of results table and constructor standings table in step 2 , consider the driver standings 's wins equals 1 and driver standings 's position equals 1 and driver standings 's points greater than 20 conditions in place of the milliseconds greater than 1 and constructor standings 's position equals 1 conditions . find forename in place of constructor standings 's position text . make sure no repetition in the results .",
        "primary_span": [
            [
                4,
                10
            ],
            [
                24,
                47
            ],
            [
                65,
                66
            ],
            [
                76,
                83
            ]
        ],
        "secondary_span": [
            [
                11,
                19
            ],
            [
                48,
                64
            ],
            [
                67,
                75
            ]
        ],
        "edits": [
            "distinct",
            "forename",
            "position text",
            "drivers",
            "driver standings",
            "constructor standings",
            "results",
            "wins equals 1",
            "points greater than 20",
            "milliseconds greater than 1"
        ],
        "edits_original": "< select > add distinct </ select > < select > add forename </ select > < select > remove position text </ select > < from > add drivers </ from > < from > add driver standings </ from > < from > remove constructor standings </ from > < from > remove results </ from > < where > add wins equals 1 </ where > < where > add points greater than 20 </ where > < where > remove milliseconds greater than 1 </ where >"
    },
    {
        "db_id": "formula_1",
        "question": "Find all the forenames of distinct drivers who won in position 1 as driver standing and had more than 20 points?",
        "gold_parse": "SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1 AND T2.points > 20",
        "predicted_parse": "SELECT T1.positionText FROM constructorStandings AS T1 JOIN results AS T2 WHERE T1.position = value AND T2.milliseconds > value",
        "predicted_parse_explanation": [
            "Step 1: for each row in constructor standings table , find the corresponding rows in results table",
            "Step 2: find the constructor standings 's position text of the results of step 1 whose constructor standings 's position equals 1 and milliseconds greater than 1"
        ],
        "feedback": "Determine the unique status constructor id whose constructor results's position equals 1 and q2 is greater than 20.",
        "beam": [
            [
                "SELECT T1.positionText FROM constructorStandings AS T1 JOIN results AS T2 WHERE T1.position = value AND T2.milliseconds > value",
                -1.2692041397094727
            ],
            [
                "SELECT T1.positionText FROM constructorStandings AS T1 JOIN results AS T2 WHERE T2.fastestLap = value AND T2.milliseconds > value",
                -1.4716224670410156
            ],
            [
                "SELECT positionText FROM constructorStandings WHERE position = value AND resultId > value",
                -3.158431053161621
            ],
            [
                "SELECT T1.driverRef FROM drivers AS T1 JOIN constructorStandings AS T2 ON T1.driverId = T2.driverId JOIN results AS T3 WHERE T2.position = value AND T3.milliseconds > value",
                -3.2618978023529053
            ],
            [
                "SELECT T1.positionOrder FROM constructorStandings AS T1 JOIN results AS T2 WHERE T1.position = value AND T2.milliseconds > value",
                -3.318514585494995
            ],
            [
                "SELECT T1.positionText FROM constructorStandings AS T1 JOIN results AS T2 WHERE T2.fastestLap = value AND T1.resultId > value",
                -3.3654441833496094
            ],
            [
                "SELECT T1.driverRef FROM drivers AS T1 JOIN results AS T2 WHERE T2.fastestLap = value AND T2.milliseconds > value",
                -3.4240825176239014
            ],
            [
                "SELECT T1.positionOrder FROM constructorStandings AS T1 JOIN results AS T2 WHERE T2.fastestLap = value AND T2.milliseconds > value",
                -3.611999273300171
            ],
            [
                "SELECT T2.positionText FROM races AS T1 JOIN constructorStandings AS T2 ON T2.raceId = T1.raceId JOIN results AS T3 JOIN constructorResults AS T4 ON T1.raceId = T4.raceId WHERE T4.raceId = value AND T3.milliseconds > value",
                -4.140761375427246
            ],
            [
                "SELECT T4.driverId FROM drivers AS T1 JOIN constructorStandings AS T2 ON T2.driverId = T1.driverId JOIN results AS T3 JOIN lapTimes AS T4 ON T1.driverId = T4.driverId WHERE T2.position = value AND T3.milliseconds > value",
                -4.249278545379639
            ],
            [
                "SELECT T1.constructorRef FROM constructors AS T1 JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId JOIN results AS T3 WHERE T2.position = value AND T3.milliseconds > value",
                -4.27006983757019
            ],
            [
                "SELECT T2.positionText FROM drivers AS T1 JOIN constructorStandings AS T2 ON T2.driverId = T1.driverId JOIN results AS T3 JOIN lapTimes AS T4 ON T1.driverId = T4.driverId WHERE T4.position = value AND T3.milliseconds > value",
                -4.382779121398926
            ],
            [
                "SELECT T1.constructorStandingsId FROM constructorStandings AS T1 JOIN results AS T2 WHERE T1.position = value AND T2.milliseconds > value",
                -4.383919715881348
            ],
            [
                "SELECT T1.constructorRef FROM constructors AS T1 JOIN results AS T2 WHERE T2.fastestLap = value AND T2.milliseconds > value",
                -4.524332761764526
            ],
            [
                "SELECT T2.driverId FROM results AS T1 JOIN lapTimes AS T2 WHERE T1.fastestLap = value AND T1.milliseconds > value",
                -4.566641330718994
            ],
            [
                "SELECT T1.constructorStandingsId FROM constructorStandings AS T1 JOIN results AS T2 WHERE T2.fastestLap = value AND T2.milliseconds > value",
                -4.681626319885254
            ],
            [
                "SELECT * FROM constructorStandings AS T1 JOIN results AS T2 WHERE T1.position = value AND T2.milliseconds > value",
                -4.764034748077393
            ],
            [
                "SELECT T4.points FROM races AS T1 JOIN constructorStandings AS T2 ON T2.raceId = T1.raceId JOIN results AS T3 JOIN constructorResults AS T4 ON T1.raceId = T4.raceId WHERE T2.position = value AND T3.milliseconds > value",
                -4.785538673400879
            ],
            [
                "SELECT DISTINCT T1.positionText FROM constructorStandings AS T1 JOIN results AS T2 WHERE T2.fastestLap = value AND T2.milliseconds > value",
                -4.795469760894775
            ],
            [
                "SELECT DISTINCT T1.positionText FROM constructorStandings AS T1 JOIN results AS T2 WHERE T1.position = value AND T2.milliseconds > value",
                -4.821074962615967
            ]
        ],
        "predicted_parse_with_values": "SELECT T1.positionText FROM constructorStandings AS T1 JOIN results AS T2 WHERE T1.position = 1 AND T2.milliseconds > 1",
        "template_feedback": "in step 1 , use driver standings table and drivers table in place of results table and constructor standings table in step 2 , consider the driver standings 's wins equals 1 and driver standings 's position equals 1 and driver standings 's points greater than 20 conditions in place of the milliseconds greater than 1 and constructor standings 's position equals 1 conditions . find forename in place of constructor standings 's position text . make sure no repetition in the results .",
        "primary_span": [
            [
                4,
                10
            ],
            [
                24,
                47
            ],
            [
                65,
                66
            ],
            [
                76,
                83
            ]
        ],
        "secondary_span": [
            [
                11,
                19
            ],
            [
                48,
                64
            ],
            [
                67,
                75
            ]
        ],
        "edits": [
            "distinct",
            "forename",
            "position text",
            "drivers",
            "driver standings",
            "constructor standings",
            "results",
            "wins equals 1",
            "points greater than 20",
            "milliseconds greater than 1"
        ],
        "edits_original": "< select > add distinct </ select > < select > add forename </ select > < select > remove position text </ select > < from > add drivers </ from > < from > add driver standings </ from > < from > remove constructor standings </ from > < from > remove results </ from > < where > add wins equals 1 </ where > < where > add points greater than 20 </ where > < where > remove milliseconds greater than 1 </ where >"
    },
    {
        "db_id": "formula_1",
        "question": "What are the unique names of races that held after 2000 and the circuits were in Spain?",
        "gold_parse": "SELECT DISTINCT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \"Spain\" AND T1.year > 2000",
        "predicted_parse": "SELECT country FROM circuits WHERE lat > value AND circuitRef = value",
        "predicted_parse_explanation": [
            "find the country in circuits table whose latitude greater than 2000 and circuit reference equals Spain"
        ],
        "feedback": "Replace country of circuits , latitude and circuit reference with different name of races , year and country of circuits .",
        "beam": [
            [
                "SELECT country FROM circuits WHERE lat > value AND circuitRef = value",
                -1.2163114547729492
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN status AS T2 WHERE T2.number > value AND T1.circuitRef = value",
                -1.9851694107055664
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN seasons AS T2 WHERE T1.lat > value AND T2.nationality = value",
                -2.158094882965088
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN qualifying AS T3 ON T2.raceId = T3.raceId WHERE T1.lat > value AND T3.driverId = value",
                -2.633695125579834
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN status AS T2 WHERE T1.lat > value AND T2.number > value",
                -2.776524543762207
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN status AS T2 JOIN seasons AS T3 WHERE T2.number > value AND T3.nationality = value",
                -3.0668325424194336
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN status AS T3 JOIN qualifying AS T4 ON T2.raceId = T4.raceId WHERE T3.number > value AND T4.driverId = value",
                -3.485945224761963
            ],
            [
                "SELECT country FROM circuits WHERE lng > value AND circuitRef = value",
                -3.611323356628418
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN status AS T2 WHERE T2.number > value AND T2.number > value",
                -3.640347480773926
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN qualifying AS T3 ON T2.raceId = T3.raceId WHERE T1.lat > value AND T3.number = value",
                -3.936110019683838
            ],
            [
                "SELECT country FROM circuits WHERE lat > value AND country = value",
                -3.9786877632141113
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN qualifying AS T3 ON T2.raceId = T3.raceId WHERE T1.lat > value AND T3.qualifyId = value",
                -4.010767936706543
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN status AS T2 WHERE T1.lng > value AND T2.number > value",
                -4.356523513793945
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN seasons AS T2 WHERE T1.lng > value AND T2.nationality = value",
                -4.64967679977417
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN status AS T3 JOIN qualifying AS T4 ON T2.raceId = T4.raceId WHERE T3.number > value AND T4.number = value",
                -4.663671493530273
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN status AS T3 JOIN qualifying AS T4 ON T2.raceId = T4.raceId WHERE T3.number > value AND T4.qualifyId = value",
                -4.825380325317383
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN status AS T2 WHERE T1.lat > value AND T2.number = value",
                -4.876585006713867
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN status AS T2 WHERE T2.number > value AND T1.country = value",
                -4.939558506011963
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T1.lat > value AND T2.time = value",
                -5.005368709564209
            ],
            [
                "SELECT country FROM circuits",
                -13.776161193847656
            ]
        ],
        "predicted_parse_with_values": "SELECT country FROM circuits WHERE lat > 2000 AND circuitRef = \"Spain\"",
        "template_feedback": "additionally use the information from the races table besides the circuits table . consider the year greater than 2000 and country equals Spain conditions in place of the circuit reference equals Spain and latitude greater than 2000 conditions . find races 's name in place of country . make sure no repetition in the results .",
        "primary_span": [
            [
                0,
                7
            ],
            [
                13,
                23
            ],
            [
                39,
                42
            ],
            [
                48,
                55
            ]
        ],
        "secondary_span": [
            [
                8,
                12
            ],
            [
                24,
                38
            ],
            [
                43,
                47
            ]
        ],
        "edits": [
            "distinct",
            "name",
            "country",
            "races",
            "country equals \"Spain\"",
            "year greater than 2000",
            "latitude greater than 2000",
            "circuit reference equals \"Spain\""
        ],
        "edits_original": "< select > add distinct </ select > < select > add name </ select > < select > remove country </ select > < from > add races </ from > < where > add country equals \" Spain \" </ where > < where > add year greater than 2000 </ where > < where > remove latitude greater than 2000 </ where > < where > remove circuit reference equals \" Spain \" </ where >"
    },
    {
        "db_id": "formula_1",
        "question": "What are the unique names of races that held after 2000 and the circuits were in Spain?",
        "gold_parse": "SELECT DISTINCT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \"Spain\" AND T1.year > 2000",
        "predicted_parse": "SELECT country FROM circuits WHERE lat > value AND circuitRef = value",
        "predicted_parse_explanation": [
            "find the country in circuits table whose latitude greater than 2000 and circuit reference equals Spain"
        ],
        "feedback": "Use name of races , year and country of circuits  in place of country of circuits , latitude and circuit reference.",
        "beam": [
            [
                "SELECT country FROM circuits WHERE lat > value AND circuitRef = value",
                -1.2163114547729492
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN status AS T2 WHERE T2.number > value AND T1.circuitRef = value",
                -1.9851694107055664
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN seasons AS T2 WHERE T1.lat > value AND T2.nationality = value",
                -2.158094882965088
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN qualifying AS T3 ON T2.raceId = T3.raceId WHERE T1.lat > value AND T3.driverId = value",
                -2.633695125579834
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN status AS T2 WHERE T1.lat > value AND T2.number > value",
                -2.776524543762207
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN status AS T2 JOIN seasons AS T3 WHERE T2.number > value AND T3.nationality = value",
                -3.0668325424194336
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN status AS T3 JOIN qualifying AS T4 ON T2.raceId = T4.raceId WHERE T3.number > value AND T4.driverId = value",
                -3.485945224761963
            ],
            [
                "SELECT country FROM circuits WHERE lng > value AND circuitRef = value",
                -3.611323356628418
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN status AS T2 WHERE T2.number > value AND T2.number > value",
                -3.640347480773926
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN qualifying AS T3 ON T2.raceId = T3.raceId WHERE T1.lat > value AND T3.number = value",
                -3.936110019683838
            ],
            [
                "SELECT country FROM circuits WHERE lat > value AND country = value",
                -3.9786877632141113
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN qualifying AS T3 ON T2.raceId = T3.raceId WHERE T1.lat > value AND T3.qualifyId = value",
                -4.010767936706543
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN status AS T2 WHERE T1.lng > value AND T2.number > value",
                -4.356523513793945
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN seasons AS T2 WHERE T1.lng > value AND T2.nationality = value",
                -4.64967679977417
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN status AS T3 JOIN qualifying AS T4 ON T2.raceId = T4.raceId WHERE T3.number > value AND T4.number = value",
                -4.663671493530273
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN status AS T3 JOIN qualifying AS T4 ON T2.raceId = T4.raceId WHERE T3.number > value AND T4.qualifyId = value",
                -4.825380325317383
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN status AS T2 WHERE T1.lat > value AND T2.number = value",
                -4.876585006713867
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN status AS T2 WHERE T2.number > value AND T1.country = value",
                -4.939558506011963
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T1.lat > value AND T2.time = value",
                -5.005368709564209
            ],
            [
                "SELECT country FROM circuits",
                -13.776161193847656
            ]
        ],
        "predicted_parse_with_values": "SELECT country FROM circuits WHERE lat > 2000 AND circuitRef = \"Spain\"",
        "template_feedback": "additionally use the information from the races table besides the circuits table . consider the year greater than 2000 and country equals Spain conditions in place of the circuit reference equals Spain and latitude greater than 2000 conditions . find races 's name in place of country . make sure no repetition in the results .",
        "primary_span": [
            [
                0,
                7
            ],
            [
                13,
                23
            ],
            [
                39,
                42
            ],
            [
                48,
                55
            ]
        ],
        "secondary_span": [
            [
                8,
                12
            ],
            [
                24,
                38
            ],
            [
                43,
                47
            ]
        ],
        "edits": [
            "distinct",
            "name",
            "country",
            "races",
            "country equals \"Spain\"",
            "year greater than 2000",
            "latitude greater than 2000",
            "circuit reference equals \"Spain\""
        ],
        "edits_original": "< select > add distinct </ select > < select > add name </ select > < select > remove country </ select > < from > add races </ from > < where > add country equals \" Spain \" </ where > < where > add year greater than 2000 </ where > < where > remove latitude greater than 2000 </ where > < where > remove circuit reference equals \" Spain \" </ where >"
    },
    {
        "db_id": "formula_1",
        "question": "What are the names of all the races that occurred in the year 2017?",
        "gold_parse": "SELECT name FROM races WHERE YEAR = 2017",
        "predicted_parse": "SELECT country FROM circuits WHERE circuitRef = value",
        "predicted_parse_explanation": [
            "find the country in circuits table whose circuit reference equals 2017"
        ],
        "feedback": "There should be name of races and year instead of country of circuits and circuit refernce respectively .",
        "beam": [
            [
                "SELECT country FROM circuits WHERE circuitRef = value",
                -1.9073486328125e-06
            ],
            [
                "SELECT country , country FROM circuits WHERE circuitRef = value",
                -13.794861316680908
            ],
            [
                "SELECT country FROM circuits WHERE circuitRef = value LIMIT value",
                -14.719953536987305
            ],
            [
                "SELECT DISTINCT country FROM circuits WHERE circuitRef = value",
                -14.787759780883789
            ],
            [
                "SELECT country FROM circuits WHERE DISTINCT circuitRef = value",
                -14.796504020690918
            ],
            [
                "SELECT country FROM circuits WHERE circuitRef = value AND circuitRef = value",
                -14.84465217590332
            ],
            [
                "SELECT DISTINCT country FROM circuits WHERE circuitRef = value",
                -14.897130966186523
            ],
            [
                "SELECT country FROM circuits",
                -15.049981117248535
            ],
            [
                "SELECT country , lat FROM circuits WHERE circuitRef = value",
                -16.486227989196777
            ],
            [
                "SELECT country FROM circuits WHERE circuitRef LIKE value",
                -16.71009063720703
            ],
            [
                "SELECT country , circuitRef FROM circuits WHERE circuitRef = value",
                -16.890904903411865
            ],
            [
                "SELECT country FROM circuits WHERE circuitRef > value",
                -17.135632514953613
            ],
            [
                "SELECT country FROM circuits WHERE circuitRef = value",
                -17.209604263305664
            ],
            [
                "SELECT country FROM circuits WHERE circuitRef = value",
                -17.619964599609375
            ],
            [
                "SELECT country FROM circuits WHERE circuitRef = value ORDER BY lat Asc LIMIT value",
                -17.66264772415161
            ],
            [
                "SELECT country FROM circuits WHERE circuitRef = value INTERSECT SELECT country FROM circuits WHERE circuitRef = value",
                -17.682239532470703
            ],
            [
                "SELECT country FROM circuits WHERE circuitRef = value ORDER BY country Asc",
                -18.038965225219727
            ],
            [
                "SELECT country FROM circuits WHERE circuitRef < value",
                -18.322754859924316
            ],
            [
                "SELECT country FROM circuits WHERE circuitRef = ( SELECT circuitRef FROM circuits WHERE circuitRef = value )",
                -18.34023952484131
            ],
            [
                "SELECT country FROM circuits WHERE circuitRef = value",
                -18.71167755126953
            ]
        ],
        "predicted_parse_with_values": "SELECT country FROM circuits WHERE circuitRef = 2017",
        "template_feedback": "use races table in place of circuits table . consider the year equals 2017 conditions in place of the circuit reference equals 2017 conditions . find races 's name in place of country .",
        "primary_span": [
            [
                0,
                2
            ],
            [
                9,
                14
            ],
            [
                25,
                28
            ]
        ],
        "secondary_span": [
            [
                3,
                8
            ],
            [
                15,
                24
            ],
            [
                29,
                33
            ]
        ],
        "edits": [
            "name",
            "country",
            "races",
            "circuits",
            "year equals 2017",
            "circuit reference equals 2017"
        ],
        "edits_original": "< select > add name </ select > < select > remove country </ select > < from > add races </ from > < from > remove circuits </ from > < where > add year equals 2017 </ where > < where > remove circuit reference equals 2017 </ where >"
    },
    {
        "db_id": "formula_1",
        "question": "What are the names of all the races that occurred in the year 2017?",
        "gold_parse": "SELECT name FROM races WHERE YEAR = 2017",
        "predicted_parse": "SELECT country FROM circuits WHERE circuitRef = value",
        "predicted_parse_explanation": [
            "find the country in circuits table whose circuit reference equals 2017"
        ],
        "feedback": "Use name of races in place of country of circuits and replace circuite reference with year.",
        "beam": [
            [
                "SELECT country FROM circuits WHERE circuitRef = value",
                -1.9073486328125e-06
            ],
            [
                "SELECT country , country FROM circuits WHERE circuitRef = value",
                -13.794861316680908
            ],
            [
                "SELECT country FROM circuits WHERE circuitRef = value LIMIT value",
                -14.719953536987305
            ],
            [
                "SELECT DISTINCT country FROM circuits WHERE circuitRef = value",
                -14.787759780883789
            ],
            [
                "SELECT country FROM circuits WHERE DISTINCT circuitRef = value",
                -14.796504020690918
            ],
            [
                "SELECT country FROM circuits WHERE circuitRef = value AND circuitRef = value",
                -14.84465217590332
            ],
            [
                "SELECT DISTINCT country FROM circuits WHERE circuitRef = value",
                -14.897130966186523
            ],
            [
                "SELECT country FROM circuits",
                -15.049981117248535
            ],
            [
                "SELECT country , lat FROM circuits WHERE circuitRef = value",
                -16.486227989196777
            ],
            [
                "SELECT country FROM circuits WHERE circuitRef LIKE value",
                -16.71009063720703
            ],
            [
                "SELECT country , circuitRef FROM circuits WHERE circuitRef = value",
                -16.890904903411865
            ],
            [
                "SELECT country FROM circuits WHERE circuitRef > value",
                -17.135632514953613
            ],
            [
                "SELECT country FROM circuits WHERE circuitRef = value",
                -17.209604263305664
            ],
            [
                "SELECT country FROM circuits WHERE circuitRef = value",
                -17.619964599609375
            ],
            [
                "SELECT country FROM circuits WHERE circuitRef = value ORDER BY lat Asc LIMIT value",
                -17.66264772415161
            ],
            [
                "SELECT country FROM circuits WHERE circuitRef = value INTERSECT SELECT country FROM circuits WHERE circuitRef = value",
                -17.682239532470703
            ],
            [
                "SELECT country FROM circuits WHERE circuitRef = value ORDER BY country Asc",
                -18.038965225219727
            ],
            [
                "SELECT country FROM circuits WHERE circuitRef < value",
                -18.322754859924316
            ],
            [
                "SELECT country FROM circuits WHERE circuitRef = ( SELECT circuitRef FROM circuits WHERE circuitRef = value )",
                -18.34023952484131
            ],
            [
                "SELECT country FROM circuits WHERE circuitRef = value",
                -18.71167755126953
            ]
        ],
        "predicted_parse_with_values": "SELECT country FROM circuits WHERE circuitRef = 2017",
        "template_feedback": "use races table in place of circuits table . consider the year equals 2017 conditions in place of the circuit reference equals 2017 conditions . find races 's name in place of country .",
        "primary_span": [
            [
                0,
                2
            ],
            [
                9,
                14
            ],
            [
                25,
                28
            ]
        ],
        "secondary_span": [
            [
                3,
                8
            ],
            [
                15,
                24
            ],
            [
                29,
                33
            ]
        ],
        "edits": [
            "name",
            "country",
            "races",
            "circuits",
            "year equals 2017",
            "circuit reference equals 2017"
        ],
        "edits_original": "< select > add name </ select > < select > remove country </ select > < from > add races </ from > < from > remove circuits </ from > < where > add year equals 2017 </ where > < where > remove circuit reference equals 2017 </ where >"
    },
    {
        "db_id": "formula_1",
        "question": "List the forename and surname of all distinct drivers who once had laptime less than 93000 milliseconds?",
        "gold_parse": "SELECT DISTINCT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds < 93000",
        "predicted_parse": "SELECT T2.positionText , T1.name FROM races AS T1 JOIN constructorStandings AS T2 ON T1.raceId = T2.raceId JOIN lapTimes AS T3 ON T1.raceId = T3.raceId WHERE T3.milliseconds < value",
        "predicted_parse_explanation": [
            "Step 1: for each row in races table , find the corresponding rows in constructor standings table and in lap times table",
            "Step 2: find the position text and name of the results of step 1 whose milliseconds less than 93000"
        ],
        "feedback": "Find distinct drivers's forename ,  surname whose lap times in milliseconds less than 93000.",
        "beam": [
            [
                "SELECT T2.positionText , T1.name FROM races AS T1 JOIN constructorStandings AS T2 ON T1.raceId = T2.raceId JOIN lapTimes AS T3 ON T1.raceId = T3.raceId WHERE T3.milliseconds < value",
                -0.42368268966674805
            ],
            [
                "SELECT T2.positionText , T1.name FROM races AS T1 JOIN constructorStandings AS T2 ON T1.raceId = T2.raceId WHERE T2.constructorId < value",
                -1.4271979331970215
            ],
            [
                "SELECT T2.positionText , T1.name FROM races AS T1 JOIN constructorResults AS T2 ON T1.raceId = T2.raceId JOIN lapTimes AS T3 ON T1.raceId = T3.raceId WHERE T3.milliseconds < value",
                -3.1449646949768066
            ],
            [
                "SELECT T3.positionText , T1.name FROM races AS T1 JOIN constructorStandings AS T2 ON T1.raceId = T2.raceId JOIN constructorResults AS T3 ON T1.raceId = T3.raceId WHERE T2.constructorId < value",
                -4.1337361335754395
            ],
            [
                "SELECT T2.driverRef , T1.name FROM races AS T1 JOIN drivers AS T2 JOIN constructorStandings AS T3 ON T1.raceId = T3.raceId AND T3.driverId = T2.driverId JOIN lapTimes AS T4 ON T1.raceId = T4.raceId WHERE T4.milliseconds < value",
                -4.306405544281006
            ],
            [
                "SELECT T2.driverRef , T1.name FROM races AS T1 JOIN drivers AS T2 JOIN constructorStandings AS T3 ON T1.raceId = T3.raceId AND T3.driverId = T2.driverId AND T1.raceId = T3.raceId WHERE T3.constructorId < value",
                -5.3051228523254395
            ],
            [
                "SELECT T1.name , T1.name FROM races AS T1 JOIN lapTimes AS T2 ON T1.raceId = T2.raceId WHERE T2.milliseconds < value",
                -5.559446334838867
            ],
            [
                "SELECT T2.constructorRef , T1.name FROM races AS T1 JOIN constructors AS T2 JOIN constructorStandings AS T3 ON T1.raceId = T3.raceId AND T3.constructorId = T2.constructorId JOIN lapTimes AS T4 ON T1.raceId = T4.raceId WHERE T4.milliseconds < value",
                -5.608139514923096
            ],
            [
                "SELECT T1.url , T1.name FROM races AS T1 JOIN lapTimes AS T2 ON T1.raceId = T2.raceId WHERE T2.milliseconds < value",
                -5.943994998931885
            ],
            [
                "SELECT T1.circuitId , T1.name FROM races AS T1 JOIN lapTimes AS T2 ON T1.raceId = T2.raceId WHERE T2.milliseconds < value",
                -6.296594619750977
            ],
            [
                "SELECT T1.date , T1.name FROM races AS T1 JOIN lapTimes AS T2 ON T1.raceId = T2.raceId WHERE T2.milliseconds < value",
                -6.3269853591918945
            ],
            [
                "SELECT T1.url , T1.name FROM races AS T1 JOIN lapTimes AS T2 ON T1.raceId = T2.raceId WHERE T2.milliseconds < value",
                -6.48971700668335
            ],
            [
                "SELECT T1.name , T1.name FROM races AS T1 JOIN constructorStandings AS T2 ON T1.raceId = T2.raceId WHERE T2.constructorId < value",
                -6.583282470703125
            ],
            [
                "SELECT T2.constructorRef , T1.name FROM races AS T1 JOIN constructors AS T2 JOIN constructorStandings AS T3 ON T1.raceId = T3.raceId AND T3.constructorId = T2.constructorId AND T1.raceId = T3.raceId WHERE T3.constructorId < value",
                -6.607082843780518
            ],
            [
                "SELECT T1.url , T1.name FROM races AS T1 JOIN constructorStandings AS T2 ON T1.raceId = T2.raceId WHERE T2.constructorId < value",
                -6.91577672958374
            ],
            [
                "SELECT T1.circuitId , T1.name FROM races AS T1 JOIN constructorStandings AS T2 ON T1.raceId = T2.raceId WHERE T2.constructorId < value",
                -7.252139091491699
            ],
            [
                "SELECT T2.positionText , T1.name FROM races AS T1 JOIN constructorStandings AS T2 ON T1.raceId = T2.raceId JOIN pitStops AS T3 ON T1.raceId = T3.raceId WHERE T3.milliseconds < value",
                -7.290162086486816
            ],
            [
                "SELECT T1.date , T1.name FROM races AS T1 JOIN constructorStandings AS T2 ON T1.raceId = T2.raceId WHERE T2.constructorId < value",
                -7.309332847595215
            ],
            [
                "SELECT T2.time , T1.name FROM races AS T1 JOIN results AS T2 JOIN lapTimes AS T3 ON T1.raceId = T3.raceId WHERE T3.milliseconds < value",
                -7.388671875
            ],
            [
                "SELECT T1.url , T1.name FROM races AS T1 JOIN constructorStandings AS T2 ON T1.raceId = T2.raceId WHERE T2.constructorId < value",
                -7.4648919105529785
            ]
        ],
        "predicted_parse_with_values": "SELECT T2.positionText , T1.name FROM races AS T1 JOIN constructorStandings AS T2 ON T1.raceId = T2.raceId JOIN lapTimes AS T3 ON T1.raceId = T3.raceId WHERE T3.milliseconds < 93000",
        "template_feedback": "in step 1 , use drivers table in place of constructor standings table and races table in step 2 , find forename and surname in place of name and position text . make sure no repetition in the results .",
        "primary_span": [
            [
                4,
                6
            ],
            [
                20,
                23
            ],
            [
                32,
                39
            ]
        ],
        "secondary_span": [
            [
                7,
                15
            ],
            [
                24,
                31
            ]
        ],
        "edits": [
            "distinct",
            "forename",
            "surname",
            "position text",
            "name",
            "drivers",
            "races",
            "constructor standings"
        ],
        "edits_original": "< select > add distinct </ select > < select > add forename </ select > < select > add surname </ select > < select > remove position text </ select > < select > remove name </ select > < from > add drivers </ from > < from > remove races </ from > < from > remove constructor standings </ from >"
    },
    {
        "db_id": "formula_1",
        "question": "List the forename and surname of all distinct drivers who once had laptime less than 93000 milliseconds?",
        "gold_parse": "SELECT DISTINCT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds < 93000",
        "predicted_parse": "SELECT T2.positionText , T1.name FROM races AS T1 JOIN constructorStandings AS T2 ON T1.raceId = T2.raceId JOIN lapTimes AS T3 ON T1.raceId = T3.raceId WHERE T3.milliseconds < value",
        "predicted_parse_explanation": [
            "Step 1: for each row in races table , find the corresponding rows in constructor standings table and in lap times table",
            "Step 2: find the position text and name of the results of step 1 whose milliseconds less than 93000"
        ],
        "feedback": "I want the first and last name of drivers whose lapp times is under 93000 milliseconds.",
        "beam": [
            [
                "SELECT T2.positionText , T1.name FROM races AS T1 JOIN constructorStandings AS T2 ON T1.raceId = T2.raceId JOIN lapTimes AS T3 ON T1.raceId = T3.raceId WHERE T3.milliseconds < value",
                -0.42368268966674805
            ],
            [
                "SELECT T2.positionText , T1.name FROM races AS T1 JOIN constructorStandings AS T2 ON T1.raceId = T2.raceId WHERE T2.constructorId < value",
                -1.4271979331970215
            ],
            [
                "SELECT T2.positionText , T1.name FROM races AS T1 JOIN constructorResults AS T2 ON T1.raceId = T2.raceId JOIN lapTimes AS T3 ON T1.raceId = T3.raceId WHERE T3.milliseconds < value",
                -3.1449646949768066
            ],
            [
                "SELECT T3.positionText , T1.name FROM races AS T1 JOIN constructorStandings AS T2 ON T1.raceId = T2.raceId JOIN constructorResults AS T3 ON T1.raceId = T3.raceId WHERE T2.constructorId < value",
                -4.1337361335754395
            ],
            [
                "SELECT T2.driverRef , T1.name FROM races AS T1 JOIN drivers AS T2 JOIN constructorStandings AS T3 ON T1.raceId = T3.raceId AND T3.driverId = T2.driverId JOIN lapTimes AS T4 ON T1.raceId = T4.raceId WHERE T4.milliseconds < value",
                -4.306405544281006
            ],
            [
                "SELECT T2.driverRef , T1.name FROM races AS T1 JOIN drivers AS T2 JOIN constructorStandings AS T3 ON T1.raceId = T3.raceId AND T3.driverId = T2.driverId AND T1.raceId = T3.raceId WHERE T3.constructorId < value",
                -5.3051228523254395
            ],
            [
                "SELECT T1.name , T1.name FROM races AS T1 JOIN lapTimes AS T2 ON T1.raceId = T2.raceId WHERE T2.milliseconds < value",
                -5.559446334838867
            ],
            [
                "SELECT T2.constructorRef , T1.name FROM races AS T1 JOIN constructors AS T2 JOIN constructorStandings AS T3 ON T1.raceId = T3.raceId AND T3.constructorId = T2.constructorId JOIN lapTimes AS T4 ON T1.raceId = T4.raceId WHERE T4.milliseconds < value",
                -5.608139514923096
            ],
            [
                "SELECT T1.url , T1.name FROM races AS T1 JOIN lapTimes AS T2 ON T1.raceId = T2.raceId WHERE T2.milliseconds < value",
                -5.943994998931885
            ],
            [
                "SELECT T1.circuitId , T1.name FROM races AS T1 JOIN lapTimes AS T2 ON T1.raceId = T2.raceId WHERE T2.milliseconds < value",
                -6.296594619750977
            ],
            [
                "SELECT T1.date , T1.name FROM races AS T1 JOIN lapTimes AS T2 ON T1.raceId = T2.raceId WHERE T2.milliseconds < value",
                -6.3269853591918945
            ],
            [
                "SELECT T1.url , T1.name FROM races AS T1 JOIN lapTimes AS T2 ON T1.raceId = T2.raceId WHERE T2.milliseconds < value",
                -6.48971700668335
            ],
            [
                "SELECT T1.name , T1.name FROM races AS T1 JOIN constructorStandings AS T2 ON T1.raceId = T2.raceId WHERE T2.constructorId < value",
                -6.583282470703125
            ],
            [
                "SELECT T2.constructorRef , T1.name FROM races AS T1 JOIN constructors AS T2 JOIN constructorStandings AS T3 ON T1.raceId = T3.raceId AND T3.constructorId = T2.constructorId AND T1.raceId = T3.raceId WHERE T3.constructorId < value",
                -6.607082843780518
            ],
            [
                "SELECT T1.url , T1.name FROM races AS T1 JOIN constructorStandings AS T2 ON T1.raceId = T2.raceId WHERE T2.constructorId < value",
                -6.91577672958374
            ],
            [
                "SELECT T1.circuitId , T1.name FROM races AS T1 JOIN constructorStandings AS T2 ON T1.raceId = T2.raceId WHERE T2.constructorId < value",
                -7.252139091491699
            ],
            [
                "SELECT T2.positionText , T1.name FROM races AS T1 JOIN constructorStandings AS T2 ON T1.raceId = T2.raceId JOIN pitStops AS T3 ON T1.raceId = T3.raceId WHERE T3.milliseconds < value",
                -7.290162086486816
            ],
            [
                "SELECT T1.date , T1.name FROM races AS T1 JOIN constructorStandings AS T2 ON T1.raceId = T2.raceId WHERE T2.constructorId < value",
                -7.309332847595215
            ],
            [
                "SELECT T2.time , T1.name FROM races AS T1 JOIN results AS T2 JOIN lapTimes AS T3 ON T1.raceId = T3.raceId WHERE T3.milliseconds < value",
                -7.388671875
            ],
            [
                "SELECT T1.url , T1.name FROM races AS T1 JOIN constructorStandings AS T2 ON T1.raceId = T2.raceId WHERE T2.constructorId < value",
                -7.4648919105529785
            ]
        ],
        "predicted_parse_with_values": "SELECT T2.positionText , T1.name FROM races AS T1 JOIN constructorStandings AS T2 ON T1.raceId = T2.raceId JOIN lapTimes AS T3 ON T1.raceId = T3.raceId WHERE T3.milliseconds < 93000",
        "template_feedback": "in step 1 , use drivers table in place of constructor standings table and races table in step 2 , find forename and surname in place of name and position text . make sure no repetition in the results .",
        "primary_span": [
            [
                4,
                6
            ],
            [
                20,
                23
            ],
            [
                32,
                39
            ]
        ],
        "secondary_span": [
            [
                7,
                15
            ],
            [
                24,
                31
            ]
        ],
        "edits": [
            "distinct",
            "forename",
            "surname",
            "position text",
            "name",
            "drivers",
            "races",
            "constructor standings"
        ],
        "edits_original": "< select > add distinct </ select > < select > add forename </ select > < select > add surname </ select > < select > remove position text </ select > < select > remove name </ select > < from > add drivers </ from > < from > remove races </ from > < from > remove constructor standings </ from >"
    },
    {
        "db_id": "formula_1",
        "question": "What are the different driver ids and nationalities of all drivers who had a laptime of more than 100000 milliseconds?",
        "gold_parse": "SELECT DISTINCT T1.driverid ,  T1.nationality FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds >  100000",
        "predicted_parse": "SELECT T1.url , T1.time FROM races AS T1 JOIN lapTimes AS T2 ON T1.raceId = T2.raceId WHERE T2.milliseconds > value",
        "predicted_parse_explanation": [
            "Step 1: for each row in races table , find the corresponding rows in lap times table",
            "Step 2: find the url and races 's time of the results of step 1 whose milliseconds greater than 100000"
        ],
        "feedback": "Need to find distinct driver id , nationality of drivers table whose lap times in millisecond is greater than 100000.",
        "beam": [
            [
                "SELECT T1.url , T1.time FROM races AS T1 JOIN lapTimes AS T2 ON T1.raceId = T2.raceId WHERE T2.milliseconds > value",
                -0.04613494873046875
            ],
            [
                "SELECT T1.url , T1.time FROM races AS T1 JOIN pitStops AS T2 ON T1.raceId = T2.raceId WHERE T2.milliseconds > value",
                -3.8257455825805664
            ],
            [
                "SELECT T1.url , T1.time FROM races AS T1 JOIN constructorStandings AS T2 ON T1.raceId = T2.raceId WHERE T2.constructorId > value",
                -3.9415788650512695
            ],
            [
                "SELECT url , time FROM races GROUP BY url HAVING Count ( * ) > value",
                -6.301801681518555
            ],
            [
                "SELECT T1.url , T1.time FROM races AS T1 JOIN lapTimes AS T2 ON T1.raceId = T2.raceId GROUP BY T2.driverId HAVING Count ( * ) > value",
                -7.386531829833984
            ],
            [
                "SELECT DISTINCT T1.url , T1.time FROM races AS T1 JOIN lapTimes AS T2 ON T1.raceId = T2.raceId WHERE T2.milliseconds > value",
                -7.518751621246338
            ],
            [
                "SELECT T1.url , T1.time FROM races AS T1 JOIN lapTimes AS T2 ON T1.raceId = T2.raceId GROUP BY T2.driverId HAVING Avg ( T2.milliseconds ) > value",
                -8.24333667755127
            ],
            [
                "SELECT T1.url , T1.time FROM races AS T1 JOIN lapTimes AS T2 ON T1.raceId = T2.raceId GROUP BY T1.url HAVING Avg ( T2.milliseconds ) > value",
                -8.322789192199707
            ],
            [
                "SELECT T1.url , T1.date FROM races AS T1 JOIN lapTimes AS T2 ON T1.raceId = T2.raceId WHERE T2.milliseconds > value",
                -9.690534591674805
            ],
            [
                "SELECT T1.url , T1.time FROM races AS T1 JOIN constructorStandings AS T2 ON T1.raceId = T2.raceId GROUP BY T2.constructorStandingsId HAVING Count ( * ) > value",
                -9.833131313323975
            ],
            [
                "SELECT T1.url , T1.time FROM races AS T1 JOIN lapTimes AS T2 ON T1.raceId = T2.raceId WHERE T2.milliseconds > value GROUP BY T1.url HAVING Count ( * ) > value",
                -10.377896308898926
            ],
            [
                "SELECT T1.url , T1.time FROM races AS T1 JOIN pitStops AS T2 ON T1.raceId = T2.raceId WHERE T2.duration > value",
                -10.525542259216309
            ],
            [
                "SELECT T1.url , T1.time FROM races AS T1 JOIN pitStops AS T2 ON T1.raceId = T2.raceId GROUP BY T2.driverId HAVING Count ( * ) > value",
                -10.73291301727295
            ],
            [
                "SELECT T1.url , T1.time FROM races AS T1 JOIN constructorStandings AS T2 ON T1.raceId = T2.raceId JOIN lapTimes AS T3 ON T1.raceId = T3.raceId GROUP BY T2.constructorStandingsId HAVING Avg ( T3.milliseconds ) > value",
                -10.905210971832275
            ],
            [
                "SELECT T1.url , T1.time FROM races AS T1 JOIN pitStops AS T2 ON T1.raceId = T2.raceId JOIN lapTimes AS T3 ON T1.raceId = T3.raceId GROUP BY T3.driverId HAVING Avg ( T2.milliseconds ) > value",
                -11.075785636901855
            ],
            [
                "SELECT DISTINCT T1.url , T1.time FROM races AS T1 JOIN pitStops AS T2 ON T1.raceId = T2.raceId WHERE T2.milliseconds > value",
                -11.305510997772217
            ],
            [
                "SELECT DISTINCT T1.url , T1.time FROM races AS T1 JOIN constructorStandings AS T2 ON T1.raceId = T2.raceId WHERE T2.constructorId > value",
                -11.413983821868896
            ],
            [
                "SELECT T1.url , T1.time FROM races AS T1 JOIN results AS T2 WHERE T2.milliseconds > value",
                -12.093250274658203
            ],
            [
                "SELECT url , time FROM races",
                -13.141108512878418
            ],
            [
                "SELECT T1.url FROM races AS T1 JOIN lapTimes AS T2 ON T1.raceId = T2.raceId WHERE T2.milliseconds > value",
                -14.9463472366333
            ]
        ],
        "predicted_parse_with_values": "SELECT T1.url , T1.time FROM races AS T1 JOIN lapTimes AS T2 ON T1.raceId = T2.raceId WHERE T2.milliseconds > 100000",
        "template_feedback": "in step 1 , use drivers table in place of races table in step 2 , find nationality and drivers 's driver id in place of races 's time and races 's url . make sure no repetition in the results .",
        "primary_span": [
            [
                4,
                6
            ],
            [
                16,
                22
            ],
            [
                34,
                41
            ]
        ],
        "secondary_span": [
            [
                7,
                11
            ],
            [
                23,
                33
            ]
        ],
        "edits": [
            "distinct",
            "driver id",
            "nationality",
            "url",
            "time",
            "drivers",
            "races"
        ],
        "edits_original": "< select > add distinct </ select > < select > add driver id </ select > < select > add nationality </ select > < select > remove url </ select > < select > remove time </ select > < from > add drivers </ from > < from > remove races </ from >"
    },
    {
        "db_id": "formula_1",
        "question": "What are the different driver ids and nationalities of all drivers who had a laptime of more than 100000 milliseconds?",
        "gold_parse": "SELECT DISTINCT T1.driverid ,  T1.nationality FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds >  100000",
        "predicted_parse": "SELECT T1.url , T1.time FROM races AS T1 JOIN lapTimes AS T2 ON T1.raceId = T2.raceId WHERE T2.milliseconds > value",
        "predicted_parse_explanation": [
            "Step 1: for each row in races table , find the corresponding rows in lap times table",
            "Step 2: find the url and races 's time of the results of step 1 whose milliseconds greater than 100000"
        ],
        "feedback": "You have to look for unique driver id, nationality from drivers table having t lap times larger than 100000 millisecond.",
        "beam": [
            [
                "SELECT T1.url , T1.time FROM races AS T1 JOIN lapTimes AS T2 ON T1.raceId = T2.raceId WHERE T2.milliseconds > value",
                -0.04613494873046875
            ],
            [
                "SELECT T1.url , T1.time FROM races AS T1 JOIN pitStops AS T2 ON T1.raceId = T2.raceId WHERE T2.milliseconds > value",
                -3.8257455825805664
            ],
            [
                "SELECT T1.url , T1.time FROM races AS T1 JOIN constructorStandings AS T2 ON T1.raceId = T2.raceId WHERE T2.constructorId > value",
                -3.9415788650512695
            ],
            [
                "SELECT url , time FROM races GROUP BY url HAVING Count ( * ) > value",
                -6.301801681518555
            ],
            [
                "SELECT T1.url , T1.time FROM races AS T1 JOIN lapTimes AS T2 ON T1.raceId = T2.raceId GROUP BY T2.driverId HAVING Count ( * ) > value",
                -7.386531829833984
            ],
            [
                "SELECT DISTINCT T1.url , T1.time FROM races AS T1 JOIN lapTimes AS T2 ON T1.raceId = T2.raceId WHERE T2.milliseconds > value",
                -7.518751621246338
            ],
            [
                "SELECT T1.url , T1.time FROM races AS T1 JOIN lapTimes AS T2 ON T1.raceId = T2.raceId GROUP BY T2.driverId HAVING Avg ( T2.milliseconds ) > value",
                -8.24333667755127
            ],
            [
                "SELECT T1.url , T1.time FROM races AS T1 JOIN lapTimes AS T2 ON T1.raceId = T2.raceId GROUP BY T1.url HAVING Avg ( T2.milliseconds ) > value",
                -8.322789192199707
            ],
            [
                "SELECT T1.url , T1.date FROM races AS T1 JOIN lapTimes AS T2 ON T1.raceId = T2.raceId WHERE T2.milliseconds > value",
                -9.690534591674805
            ],
            [
                "SELECT T1.url , T1.time FROM races AS T1 JOIN constructorStandings AS T2 ON T1.raceId = T2.raceId GROUP BY T2.constructorStandingsId HAVING Count ( * ) > value",
                -9.833131313323975
            ],
            [
                "SELECT T1.url , T1.time FROM races AS T1 JOIN lapTimes AS T2 ON T1.raceId = T2.raceId WHERE T2.milliseconds > value GROUP BY T1.url HAVING Count ( * ) > value",
                -10.377896308898926
            ],
            [
                "SELECT T1.url , T1.time FROM races AS T1 JOIN pitStops AS T2 ON T1.raceId = T2.raceId WHERE T2.duration > value",
                -10.525542259216309
            ],
            [
                "SELECT T1.url , T1.time FROM races AS T1 JOIN pitStops AS T2 ON T1.raceId = T2.raceId GROUP BY T2.driverId HAVING Count ( * ) > value",
                -10.73291301727295
            ],
            [
                "SELECT T1.url , T1.time FROM races AS T1 JOIN constructorStandings AS T2 ON T1.raceId = T2.raceId JOIN lapTimes AS T3 ON T1.raceId = T3.raceId GROUP BY T2.constructorStandingsId HAVING Avg ( T3.milliseconds ) > value",
                -10.905210971832275
            ],
            [
                "SELECT T1.url , T1.time FROM races AS T1 JOIN pitStops AS T2 ON T1.raceId = T2.raceId JOIN lapTimes AS T3 ON T1.raceId = T3.raceId GROUP BY T3.driverId HAVING Avg ( T2.milliseconds ) > value",
                -11.075785636901855
            ],
            [
                "SELECT DISTINCT T1.url , T1.time FROM races AS T1 JOIN pitStops AS T2 ON T1.raceId = T2.raceId WHERE T2.milliseconds > value",
                -11.305510997772217
            ],
            [
                "SELECT DISTINCT T1.url , T1.time FROM races AS T1 JOIN constructorStandings AS T2 ON T1.raceId = T2.raceId WHERE T2.constructorId > value",
                -11.413983821868896
            ],
            [
                "SELECT T1.url , T1.time FROM races AS T1 JOIN results AS T2 WHERE T2.milliseconds > value",
                -12.093250274658203
            ],
            [
                "SELECT url , time FROM races",
                -13.141108512878418
            ],
            [
                "SELECT T1.url FROM races AS T1 JOIN lapTimes AS T2 ON T1.raceId = T2.raceId WHERE T2.milliseconds > value",
                -14.9463472366333
            ]
        ],
        "predicted_parse_with_values": "SELECT T1.url , T1.time FROM races AS T1 JOIN lapTimes AS T2 ON T1.raceId = T2.raceId WHERE T2.milliseconds > 100000",
        "template_feedback": "in step 1 , use drivers table in place of races table in step 2 , find nationality and drivers 's driver id in place of races 's time and races 's url . make sure no repetition in the results .",
        "primary_span": [
            [
                4,
                6
            ],
            [
                16,
                22
            ],
            [
                34,
                41
            ]
        ],
        "secondary_span": [
            [
                7,
                11
            ],
            [
                23,
                33
            ]
        ],
        "edits": [
            "distinct",
            "driver id",
            "nationality",
            "url",
            "time",
            "drivers",
            "races"
        ],
        "edits_original": "< select > add distinct </ select > < select > add driver id </ select > < select > add nationality </ select > < select > remove url </ select > < select > remove time </ select > < from > add drivers </ from > < from > remove races </ from >"
    },
    {
        "db_id": "formula_1",
        "question": "For each constructor id, how many races are there?",
        "gold_parse": "SELECT count(*) ,  constructorid FROM constructorStandings GROUP BY constructorid",
        "predicted_parse": "SELECT qualifyId , Count ( * ) FROM qualifying GROUP BY qualifyId",
        "predicted_parse_explanation": [
            "find each value of qualify id in qualifying table along with the number of the corresponding rows to each value"
        ],
        "feedback": "Replace qualify Id in qualifying with constructor Id of constructor Standings , find number of rows corresponding to each constructor Id .",
        "beam": [
            [
                "SELECT qualifyId , Count ( * ) FROM qualifying GROUP BY qualifyId",
                -0.16155529022216797
            ],
            [
                "SELECT T1.country , Count ( * ) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN qualifying AS T3 ON T2.raceId = T3.raceId GROUP BY T3.qualifyId",
                -2.4848318099975586
            ],
            [
                "SELECT T2.qualifyId , Count ( * ) FROM constructors AS T1 JOIN qualifying AS T2 ON T1.constructorId = T2.constructorId GROUP BY T1.year",
                -4.766894340515137
            ],
            [
                "SELECT T3.qualifyId , Count ( * ) FROM races AS T1 JOIN constructorResults AS T2 ON T2.raceId = T1.raceId JOIN qualifying AS T3 ON T1.raceId = T3.raceId GROUP BY T2.wins",
                -4.926154136657715
            ],
            [
                "SELECT T3.qualifyId , Count ( * ) FROM drivers AS T1 JOIN constructorStandings AS T2 ON T2.driverId = T1.driverId JOIN qualifying AS T3 ON T1.driverId = T3.driverId GROUP BY T2.constructorStandingsId",
                -5.176935195922852
            ],
            [
                "SELECT T2.wins , Count ( * ) FROM races AS T1 JOIN constructorResults AS T2 ON T2.raceId = T1.raceId JOIN qualifying AS T3 ON T1.raceId = T3.raceId GROUP BY T3.qualifyId",
                -5.428895950317383
            ],
            [
                "SELECT T1.year , Count ( * ) FROM constructors AS T1 JOIN qualifying AS T2 ON T1.constructorId = T2.constructorId GROUP BY T2.qualifyId",
                -5.563226222991943
            ],
            [
                "SELECT T3.qualifyId , Count ( * ) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN qualifying AS T3 ON T2.raceId = T3.raceId GROUP BY T1.location",
                -5.855887413024902
            ],
            [
                "SELECT T3.qualifyId , Count ( * ) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN qualifying AS T3 ON T2.raceId = T3.raceId GROUP BY T1.country",
                -5.927663803100586
            ],
            [
                "SELECT T3.qualifyId , Count ( * ) FROM drivers AS T1 JOIN constructorStandings AS T2 ON T2.driverId = T1.driverId JOIN qualifying AS T3 ON T1.driverId = T3.driverId GROUP BY T2.raceId",
                -5.928987979888916
            ],
            [
                "SELECT T2.constructorStandingsId , Count ( * ) FROM drivers AS T1 JOIN constructorStandings AS T2 ON T2.driverId = T1.driverId JOIN qualifying AS T3 ON T1.driverId = T3.driverId GROUP BY T3.qualifyId",
                -5.942322731018066
            ],
            [
                "SELECT q3 , Count ( * ) FROM qualifying GROUP BY qualifyId",
                -6.426854610443115
            ],
            [
                "SELECT T1.location , Count ( * ) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN qualifying AS T3 ON T2.raceId = T3.raceId GROUP BY T3.qualifyId",
                -6.586300373077393
            ],
            [
                "SELECT T2.qualifyId , Count ( * ) FROM constructors AS T1 JOIN qualifying AS T2 ON T1.constructorId = T2.constructorId GROUP BY T1.statusId",
                -6.791818141937256
            ],
            [
                "SELECT * , Count ( * ) FROM qualifying GROUP BY qualifyId",
                -6.814497470855713
            ],
            [
                "SELECT T2.qualifyId , Count ( * ) FROM drivers AS T1 JOIN qualifying AS T2 ON T2.driverId = T1.driverId JOIN pitStops AS T3 ON T1.driverId = T3.driverId GROUP BY T3.driverId",
                -6.827977657318115
            ],
            [
                "SELECT T3.stop , Count ( * ) FROM drivers AS T1 JOIN qualifying AS T2 ON T2.driverId = T1.driverId JOIN pitStops AS T3 ON T1.driverId = T3.driverId GROUP BY T2.qualifyId",
                -7.0836310386657715
            ],
            [
                "SELECT T1.country , Count ( * ) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN constructors AS T3 JOIN constructorStandings AS T4 ON T2.raceId = T4.raceId AND T4.constructorId = T3.constructorId GROUP BY T3.year",
                -7.120800495147705
            ],
            [
                "SELECT T1.statusId , Count ( * ) FROM constructors AS T1 JOIN qualifying AS T2 ON T1.constructorId = T2.constructorId GROUP BY T2.qualifyId",
                -7.195771217346191
            ],
            [
                "SELECT T1.country , Count ( * ) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN constructorResults AS T3 ON T2.raceId = T3.raceId GROUP BY T3.wins",
                -7.282135486602783
            ]
        ],
        "predicted_parse_with_values": "SELECT qualifyId , Count ( * ) FROM qualifying GROUP BY qualifyId",
        "template_feedback": "use constructor standings table in place of qualifying table . find for each value of constructor standings 's constructor id in place of qualify id . find constructor standings 's constructor id in place of qualify id .",
        "primary_span": [
            [
                0,
                3
            ],
            [
                10,
                19
            ],
            [
                26,
                31
            ]
        ],
        "secondary_span": [
            [
                4,
                9
            ],
            [
                20,
                25
            ],
            [
                32,
                37
            ]
        ],
        "edits": [
            "constructor id",
            "qualify id",
            "constructor standings",
            "qualifying",
            "constructor id",
            "qualify id"
        ],
        "edits_original": "< select > add constructor id </ select > < select > remove qualify id </ select > < from > add constructor standings </ from > < from > remove qualifying </ from > < groupBy > add constructor id </ groupBy > < groupBy > remove qualify id </ groupBy >"
    },
    {
        "db_id": "formula_1",
        "question": "For each constructor id, how many races are there?",
        "gold_parse": "SELECT count(*) ,  constructorid FROM constructorStandings GROUP BY constructorid",
        "predicted_parse": "SELECT qualifyId , Count ( * ) FROM qualifying GROUP BY qualifyId",
        "predicted_parse_explanation": [
            "find each value of qualify id in qualifying table along with the number of the corresponding rows to each value"
        ],
        "feedback": "I need the constructor id and number of rows corresponding to each constructor Id .",
        "beam": [
            [
                "SELECT qualifyId , Count ( * ) FROM qualifying GROUP BY qualifyId",
                -0.16155529022216797
            ],
            [
                "SELECT T1.country , Count ( * ) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN qualifying AS T3 ON T2.raceId = T3.raceId GROUP BY T3.qualifyId",
                -2.4848318099975586
            ],
            [
                "SELECT T2.qualifyId , Count ( * ) FROM constructors AS T1 JOIN qualifying AS T2 ON T1.constructorId = T2.constructorId GROUP BY T1.year",
                -4.766894340515137
            ],
            [
                "SELECT T3.qualifyId , Count ( * ) FROM races AS T1 JOIN constructorResults AS T2 ON T2.raceId = T1.raceId JOIN qualifying AS T3 ON T1.raceId = T3.raceId GROUP BY T2.wins",
                -4.926154136657715
            ],
            [
                "SELECT T3.qualifyId , Count ( * ) FROM drivers AS T1 JOIN constructorStandings AS T2 ON T2.driverId = T1.driverId JOIN qualifying AS T3 ON T1.driverId = T3.driverId GROUP BY T2.constructorStandingsId",
                -5.176935195922852
            ],
            [
                "SELECT T2.wins , Count ( * ) FROM races AS T1 JOIN constructorResults AS T2 ON T2.raceId = T1.raceId JOIN qualifying AS T3 ON T1.raceId = T3.raceId GROUP BY T3.qualifyId",
                -5.428895950317383
            ],
            [
                "SELECT T1.year , Count ( * ) FROM constructors AS T1 JOIN qualifying AS T2 ON T1.constructorId = T2.constructorId GROUP BY T2.qualifyId",
                -5.563226222991943
            ],
            [
                "SELECT T3.qualifyId , Count ( * ) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN qualifying AS T3 ON T2.raceId = T3.raceId GROUP BY T1.location",
                -5.855887413024902
            ],
            [
                "SELECT T3.qualifyId , Count ( * ) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN qualifying AS T3 ON T2.raceId = T3.raceId GROUP BY T1.country",
                -5.927663803100586
            ],
            [
                "SELECT T3.qualifyId , Count ( * ) FROM drivers AS T1 JOIN constructorStandings AS T2 ON T2.driverId = T1.driverId JOIN qualifying AS T3 ON T1.driverId = T3.driverId GROUP BY T2.raceId",
                -5.928987979888916
            ],
            [
                "SELECT T2.constructorStandingsId , Count ( * ) FROM drivers AS T1 JOIN constructorStandings AS T2 ON T2.driverId = T1.driverId JOIN qualifying AS T3 ON T1.driverId = T3.driverId GROUP BY T3.qualifyId",
                -5.942322731018066
            ],
            [
                "SELECT q3 , Count ( * ) FROM qualifying GROUP BY qualifyId",
                -6.426854610443115
            ],
            [
                "SELECT T1.location , Count ( * ) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN qualifying AS T3 ON T2.raceId = T3.raceId GROUP BY T3.qualifyId",
                -6.586300373077393
            ],
            [
                "SELECT T2.qualifyId , Count ( * ) FROM constructors AS T1 JOIN qualifying AS T2 ON T1.constructorId = T2.constructorId GROUP BY T1.statusId",
                -6.791818141937256
            ],
            [
                "SELECT * , Count ( * ) FROM qualifying GROUP BY qualifyId",
                -6.814497470855713
            ],
            [
                "SELECT T2.qualifyId , Count ( * ) FROM drivers AS T1 JOIN qualifying AS T2 ON T2.driverId = T1.driverId JOIN pitStops AS T3 ON T1.driverId = T3.driverId GROUP BY T3.driverId",
                -6.827977657318115
            ],
            [
                "SELECT T3.stop , Count ( * ) FROM drivers AS T1 JOIN qualifying AS T2 ON T2.driverId = T1.driverId JOIN pitStops AS T3 ON T1.driverId = T3.driverId GROUP BY T2.qualifyId",
                -7.0836310386657715
            ],
            [
                "SELECT T1.country , Count ( * ) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN constructors AS T3 JOIN constructorStandings AS T4 ON T2.raceId = T4.raceId AND T4.constructorId = T3.constructorId GROUP BY T3.year",
                -7.120800495147705
            ],
            [
                "SELECT T1.statusId , Count ( * ) FROM constructors AS T1 JOIN qualifying AS T2 ON T1.constructorId = T2.constructorId GROUP BY T2.qualifyId",
                -7.195771217346191
            ],
            [
                "SELECT T1.country , Count ( * ) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN constructorResults AS T3 ON T2.raceId = T3.raceId GROUP BY T3.wins",
                -7.282135486602783
            ]
        ],
        "predicted_parse_with_values": "SELECT qualifyId , Count ( * ) FROM qualifying GROUP BY qualifyId",
        "template_feedback": "use constructor standings table in place of qualifying table . find for each value of constructor standings 's constructor id in place of qualify id . find constructor standings 's constructor id in place of qualify id .",
        "primary_span": [
            [
                0,
                3
            ],
            [
                10,
                19
            ],
            [
                26,
                31
            ]
        ],
        "secondary_span": [
            [
                4,
                9
            ],
            [
                20,
                25
            ],
            [
                32,
                37
            ]
        ],
        "edits": [
            "constructor id",
            "qualify id",
            "constructor standings",
            "qualifying",
            "constructor id",
            "qualify id"
        ],
        "edits_original": "< select > add constructor id </ select > < select > remove qualify id </ select > < from > add constructor standings </ from > < from > remove qualifying </ from > < groupBy > add constructor id </ groupBy > < groupBy > remove qualify id </ groupBy >"
    },
    {
        "db_id": "formula_1",
        "question": "What is the name and date of the race that occurred most recently?",
        "gold_parse": "SELECT name ,  date FROM races ORDER BY date DESC LIMIT 1",
        "predicted_parse": "SELECT T1.country , T1.lat FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN pitStops AS T3 ON T2.raceId = T3.raceId ORDER BY T3.milliseconds Desc LIMIT value",
        "predicted_parse_explanation": [
            "Step 1: for each row in circuits table , find the corresponding rows in races table and in pit stops table",
            "Step 2: find the country and latitude of the results of step 1 with largest value of milliseconds"
        ],
        "feedback": "In step 2 replace country with name ,  latitude with date ,  milliseconds with date .",
        "beam": [
            [
                "SELECT T1.country , T1.lat FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN pitStops AS T3 ON T2.raceId = T3.raceId ORDER BY T3.milliseconds Desc LIMIT value",
                -0.4469013214111328
            ],
            [
                "SELECT country , lat FROM circuits ORDER BY lat Desc LIMIT value",
                -1.0892086029052734
            ],
            [
                "SELECT T1.country , T3.milliseconds FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN pitStops AS T3 ON T2.raceId = T3.raceId ORDER BY T3.milliseconds Desc LIMIT value",
                -4.5222883224487305
            ],
            [
                "SELECT T1.country , T3.milliseconds FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN pitStops AS T3 ON T2.raceId = T3.raceId ORDER BY T1.lat Desc LIMIT value",
                -5.1226091384887695
            ],
            [
                "SELECT country , lat FROM circuits ORDER BY circuitRef Desc LIMIT value",
                -5.6569929122924805
            ],
            [
                "SELECT T1.country , T1.lat FROM circuits AS T1 JOIN status AS T2 ORDER BY T2.number Desc LIMIT value",
                -5.78555965423584
            ],
            [
                "SELECT T1.country , T1.lat FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN pitStops AS T3 ON T2.raceId = T3.raceId ORDER BY T3.stop Desc LIMIT value",
                -7.996852397918701
            ],
            [
                "SELECT T1.country , T3.milliseconds FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN pitStops AS T3 ON T2.raceId = T3.raceId ORDER BY T1.circuitRef Desc LIMIT value",
                -9.768253803253174
            ],
            [
                "SELECT T1.country , T4.milliseconds FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN status AS T3 JOIN pitStops AS T4 ON T2.raceId = T4.raceId ORDER BY T3.number Desc LIMIT value",
                -9.91021728515625
            ],
            [
                "SELECT country , lat FROM circuits ORDER BY lng Desc LIMIT value",
                -10.756842613220215
            ],
            [
                "SELECT T1.country , T3.milliseconds FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN pitStops AS T3 ON T2.raceId = T3.raceId ORDER BY T3.stop Desc LIMIT value",
                -12.111438751220703
            ],
            [
                "SELECT T1.country , T1.lat FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN lapTimes AS T3 ON T2.raceId = T3.raceId ORDER BY T3.milliseconds Desc LIMIT value",
                -12.320393562316895
            ],
            [
                "SELECT country , lat FROM circuits ORDER BY country Desc LIMIT value",
                -12.337963104248047
            ],
            [
                "SELECT T1.country , T1.lat FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN pitStops AS T3 ON T2.raceId = T3.raceId ORDER BY T3.milliseconds Desc",
                -12.748952865600586
            ],
            [
                "SELECT country FROM circuits ORDER BY lat Desc LIMIT value",
                -12.778647422790527
            ],
            [
                "SELECT T1.country , T1.lat FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN pitStops AS T3 ON T2.raceId = T3.raceId ORDER BY T3.milliseconds Asc LIMIT value",
                -13.053034782409668
            ],
            [
                "SELECT T1.country , T1.circuitRef FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN pitStops AS T3 ON T2.raceId = T3.raceId ORDER BY T3.milliseconds Desc LIMIT value",
                -13.235942840576172
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN pitStops AS T3 ON T2.raceId = T3.raceId ORDER BY T3.milliseconds Desc LIMIT value",
                -13.248790740966797
            ],
            [
                "SELECT country , lat FROM circuits ORDER BY lat Desc",
                -13.377750396728516
            ],
            [
                "SELECT T1.country , T3.stop FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN pitStops AS T3 ON T2.raceId = T3.raceId ORDER BY T3.milliseconds Desc LIMIT value",
                -13.474390983581543
            ]
        ],
        "predicted_parse_with_values": "SELECT T1.country , T1.lat FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN pitStops AS T3 ON T2.raceId = T3.raceId ORDER BY T3.milliseconds Desc LIMIT 1",
        "template_feedback": "in step 1 , do not use the circuits table and pit stops table . in step 2 , find races 's name and date in place of latitude and country . order the results by date in place of milliseconds .",
        "primary_span": [
            [
                4,
                14
            ],
            [
                19,
                24
            ],
            [
                32,
                36
            ]
        ],
        "secondary_span": [
            [
                4,
                14
            ],
            [
                25,
                31
            ],
            [
                37,
                41
            ]
        ],
        "edits": [
            "name",
            "date",
            "country",
            "latitude",
            "circuits",
            "pit stops",
            "date",
            "milliseconds"
        ],
        "edits_original": "< select > add name </ select > < select > add date </ select > < select > remove country </ select > < select > remove latitude </ select > < from > remove circuits </ from > < from > remove pit stops </ from > < orderBy > add date </ orderBy > < orderBy > remove milliseconds </ orderBy >"
    },
    {
        "db_id": "formula_1",
        "question": "What is the name and date of the race that occurred most recently?",
        "gold_parse": "SELECT name ,  date FROM races ORDER BY date DESC LIMIT 1",
        "predicted_parse": "SELECT T1.country , T1.lat FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN pitStops AS T3 ON T2.raceId = T3.raceId ORDER BY T3.milliseconds Desc LIMIT value",
        "predicted_parse_explanation": [
            "Step 1: for each row in circuits table , find the corresponding rows in races table and in pit stops table",
            "Step 2: find the country and latitude of the results of step 1 with largest value of milliseconds"
        ],
        "feedback": "In step 2 get name and date instead of country and latitude and filter by the the most recent date .",
        "beam": [
            [
                "SELECT T1.country , T1.lat FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN pitStops AS T3 ON T2.raceId = T3.raceId ORDER BY T3.milliseconds Desc LIMIT value",
                -0.4469013214111328
            ],
            [
                "SELECT country , lat FROM circuits ORDER BY lat Desc LIMIT value",
                -1.0892086029052734
            ],
            [
                "SELECT T1.country , T3.milliseconds FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN pitStops AS T3 ON T2.raceId = T3.raceId ORDER BY T3.milliseconds Desc LIMIT value",
                -4.5222883224487305
            ],
            [
                "SELECT T1.country , T3.milliseconds FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN pitStops AS T3 ON T2.raceId = T3.raceId ORDER BY T1.lat Desc LIMIT value",
                -5.1226091384887695
            ],
            [
                "SELECT country , lat FROM circuits ORDER BY circuitRef Desc LIMIT value",
                -5.6569929122924805
            ],
            [
                "SELECT T1.country , T1.lat FROM circuits AS T1 JOIN status AS T2 ORDER BY T2.number Desc LIMIT value",
                -5.78555965423584
            ],
            [
                "SELECT T1.country , T1.lat FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN pitStops AS T3 ON T2.raceId = T3.raceId ORDER BY T3.stop Desc LIMIT value",
                -7.996852397918701
            ],
            [
                "SELECT T1.country , T3.milliseconds FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN pitStops AS T3 ON T2.raceId = T3.raceId ORDER BY T1.circuitRef Desc LIMIT value",
                -9.768253803253174
            ],
            [
                "SELECT T1.country , T4.milliseconds FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN status AS T3 JOIN pitStops AS T4 ON T2.raceId = T4.raceId ORDER BY T3.number Desc LIMIT value",
                -9.91021728515625
            ],
            [
                "SELECT country , lat FROM circuits ORDER BY lng Desc LIMIT value",
                -10.756842613220215
            ],
            [
                "SELECT T1.country , T3.milliseconds FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN pitStops AS T3 ON T2.raceId = T3.raceId ORDER BY T3.stop Desc LIMIT value",
                -12.111438751220703
            ],
            [
                "SELECT T1.country , T1.lat FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN lapTimes AS T3 ON T2.raceId = T3.raceId ORDER BY T3.milliseconds Desc LIMIT value",
                -12.320393562316895
            ],
            [
                "SELECT country , lat FROM circuits ORDER BY country Desc LIMIT value",
                -12.337963104248047
            ],
            [
                "SELECT T1.country , T1.lat FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN pitStops AS T3 ON T2.raceId = T3.raceId ORDER BY T3.milliseconds Desc",
                -12.748952865600586
            ],
            [
                "SELECT country FROM circuits ORDER BY lat Desc LIMIT value",
                -12.778647422790527
            ],
            [
                "SELECT T1.country , T1.lat FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN pitStops AS T3 ON T2.raceId = T3.raceId ORDER BY T3.milliseconds Asc LIMIT value",
                -13.053034782409668
            ],
            [
                "SELECT T1.country , T1.circuitRef FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN pitStops AS T3 ON T2.raceId = T3.raceId ORDER BY T3.milliseconds Desc LIMIT value",
                -13.235942840576172
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN pitStops AS T3 ON T2.raceId = T3.raceId ORDER BY T3.milliseconds Desc LIMIT value",
                -13.248790740966797
            ],
            [
                "SELECT country , lat FROM circuits ORDER BY lat Desc",
                -13.377750396728516
            ],
            [
                "SELECT T1.country , T3.stop FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN pitStops AS T3 ON T2.raceId = T3.raceId ORDER BY T3.milliseconds Desc LIMIT value",
                -13.474390983581543
            ]
        ],
        "predicted_parse_with_values": "SELECT T1.country , T1.lat FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN pitStops AS T3 ON T2.raceId = T3.raceId ORDER BY T3.milliseconds Desc LIMIT 1",
        "template_feedback": "in step 1 , do not use the circuits table and pit stops table . in step 2 , find races 's name and date in place of latitude and country . order the results by date in place of milliseconds .",
        "primary_span": [
            [
                4,
                14
            ],
            [
                19,
                24
            ],
            [
                32,
                36
            ]
        ],
        "secondary_span": [
            [
                4,
                14
            ],
            [
                25,
                31
            ],
            [
                37,
                41
            ]
        ],
        "edits": [
            "name",
            "date",
            "country",
            "latitude",
            "circuits",
            "pit stops",
            "date",
            "milliseconds"
        ],
        "edits_original": "< select > add name </ select > < select > add date </ select > < select > remove country </ select > < select > remove latitude </ select > < from > remove circuits </ from > < from > remove pit stops </ from > < orderBy > add date </ orderBy > < orderBy > remove milliseconds </ orderBy >"
    },
    {
        "db_id": "formula_1",
        "question": "What are the ids and locations of all circuits in France or Belgium?",
        "gold_parse": "SELECT circuitid ,  LOCATION FROM circuits WHERE country = \"France\" OR country = \"Belgium\"",
        "predicted_parse": "SELECT qualifyId , constructorId FROM qualifying WHERE number = value OR number = value",
        "predicted_parse_explanation": [
            "find the qualify id and constructor id in qualifying table whose number equals Belgium or number equals France"
        ],
        "feedback": "Replace qualify Id ,  constructor Id ,  both \"number\" and qualifying table with circuit Id , location , country and circuits table respectively .",
        "beam": [
            [
                "SELECT qualifyId , constructorId FROM qualifying WHERE number = value OR number = value",
                -0.25829505920410156
            ],
            [
                "SELECT T2.qualifyId , T2.constructorId FROM seasons AS T1 JOIN qualifying AS T2 WHERE T1.nationality = value OR T2.number = value",
                -2.136418342590332
            ],
            [
                "SELECT T2.qualifyId , T2.constructorId FROM seasons AS T1 JOIN qualifying AS T2 WHERE T2.number = value OR T1.nationality = value",
                -3.1485862731933594
            ],
            [
                "SELECT T2.qualifyId , T2.constructorId FROM races AS T1 JOIN qualifying AS T2 ON T1.raceId = T2.raceId WHERE T1.time = value OR T2.number = value",
                -3.2762999534606934
            ],
            [
                "SELECT T2.qualifyId , T2.constructorId FROM races AS T1 JOIN qualifying AS T2 ON T1.raceId = T2.raceId WHERE T2.number = value OR T1.time = value",
                -4.387242317199707
            ],
            [
                "SELECT T2.qualifyId , T2.constructorId FROM seasons AS T1 JOIN qualifying AS T2 WHERE T1.nationality = value OR T1.nationality = value",
                -5.014257431030273
            ],
            [
                "SELECT T3.qualifyId , T3.constructorId FROM races AS T1 JOIN seasons AS T2 JOIN qualifying AS T3 ON T1.raceId = T3.raceId WHERE T1.time = value OR T2.nationality = value",
                -6.139031887054443
            ],
            [
                "SELECT T3.qualifyId , T3.constructorId FROM races AS T1 JOIN seasons AS T2 JOIN qualifying AS T3 ON T1.raceId = T3.raceId WHERE T2.nationality = value OR T1.time = value",
                -6.246273994445801
            ],
            [
                "SELECT qualifyId , constructorId FROM qualifying WHERE qualifyId = value OR number = value",
                -7.146796703338623
            ],
            [
                "SELECT T2.qualifyId , T2.constructorId FROM races AS T1 JOIN qualifying AS T2 ON T1.raceId = T2.raceId WHERE T1.time = value OR T1.time = value",
                -7.384640216827393
            ],
            [
                "SELECT qualifyId , constructorId FROM qualifying WHERE number = value OR q1 = value",
                -7.596867561340332
            ],
            [
                "SELECT qualifyId , constructorId FROM qualifying WHERE q3 = value OR number = value",
                -7.6828742027282715
            ],
            [
                "SELECT qualifyId , raceId FROM qualifying WHERE number = value OR number = value",
                -7.698805809020996
            ],
            [
                "SELECT qualifyId , constructorId FROM qualifying WHERE raceId = value OR number = value",
                -8.222400665283203
            ],
            [
                "SELECT qualifyId , constructorId FROM qualifying WHERE q1 = value OR number = value",
                -8.420560836791992
            ],
            [
                "SELECT qualifyId , constructorId FROM qualifying WHERE number = value OR raceId = value",
                -8.515558242797852
            ],
            [
                "SELECT qualifyId , number FROM qualifying WHERE number = value OR number = value",
                -8.610668182373047
            ],
            [
                "SELECT T3.qualifyId , T3.constructorId FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN qualifying AS T3 ON T2.raceId = T3.raceId WHERE T3.number = value OR T1.country = value",
                -8.836992263793945
            ],
            [
                "SELECT T3.qualifyId , T3.constructorId FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN qualifying AS T3 ON T2.raceId = T3.raceId WHERE T1.circuitRef = value OR T3.number = value",
                -9.259968757629395
            ],
            [
                "SELECT qualifyId , constructorId FROM qualifying",
                -12.297205924987793
            ]
        ],
        "predicted_parse_with_values": "SELECT qualifyId , constructorId FROM qualifying WHERE number = \"Belgium\" OR number = \"France\"",
        "template_feedback": "use circuits table in place of qualifying table . consider the country equals Belgium or country equals France conditions in place of the number equals France or number equals Belgium conditions . find circuit id and location in place of constructor id and qualify id .",
        "primary_span": [
            [
                0,
                2
            ],
            [
                9,
                18
            ],
            [
                32,
                36
            ]
        ],
        "secondary_span": [
            [
                3,
                8
            ],
            [
                19,
                31
            ],
            [
                37,
                45
            ]
        ],
        "edits": [
            "circuit id",
            "location",
            "qualify id",
            "constructor id",
            "circuits",
            "qualifying",
            "country equals \"France\" or country equals \"Belgium\"",
            "number equals \"Belgium\" or number equals \"France\""
        ],
        "edits_original": "< select > add circuit id </ select > < select > add location </ select > < select > remove qualify id </ select > < select > remove constructor id </ select > < from > add circuits </ from > < from > remove qualifying </ from > < where > add country equals \" France \" or country equals \" Belgium \" </ where > < where > remove number equals \" Belgium \" or number equals \" France \" </ where >"
    },
    {
        "db_id": "formula_1",
        "question": "What are the ids and locations of all circuits in France or Belgium?",
        "gold_parse": "SELECT circuitid ,  LOCATION FROM circuits WHERE country = \"France\" OR country = \"Belgium\"",
        "predicted_parse": "SELECT qualifyId , constructorId FROM qualifying WHERE number = value OR number = value",
        "predicted_parse_explanation": [
            "find the qualify id and constructor id in qualifying table whose number equals Belgium or number equals France"
        ],
        "feedback": "I want circuit Id , location , country from circuits table instead of qualify Id ,  constructor Id ,   both number fro qualifying table.",
        "beam": [
            [
                "SELECT qualifyId , constructorId FROM qualifying WHERE number = value OR number = value",
                -0.25829505920410156
            ],
            [
                "SELECT T2.qualifyId , T2.constructorId FROM seasons AS T1 JOIN qualifying AS T2 WHERE T1.nationality = value OR T2.number = value",
                -2.136418342590332
            ],
            [
                "SELECT T2.qualifyId , T2.constructorId FROM seasons AS T1 JOIN qualifying AS T2 WHERE T2.number = value OR T1.nationality = value",
                -3.1485862731933594
            ],
            [
                "SELECT T2.qualifyId , T2.constructorId FROM races AS T1 JOIN qualifying AS T2 ON T1.raceId = T2.raceId WHERE T1.time = value OR T2.number = value",
                -3.2762999534606934
            ],
            [
                "SELECT T2.qualifyId , T2.constructorId FROM races AS T1 JOIN qualifying AS T2 ON T1.raceId = T2.raceId WHERE T2.number = value OR T1.time = value",
                -4.387242317199707
            ],
            [
                "SELECT T2.qualifyId , T2.constructorId FROM seasons AS T1 JOIN qualifying AS T2 WHERE T1.nationality = value OR T1.nationality = value",
                -5.014257431030273
            ],
            [
                "SELECT T3.qualifyId , T3.constructorId FROM races AS T1 JOIN seasons AS T2 JOIN qualifying AS T3 ON T1.raceId = T3.raceId WHERE T1.time = value OR T2.nationality = value",
                -6.139031887054443
            ],
            [
                "SELECT T3.qualifyId , T3.constructorId FROM races AS T1 JOIN seasons AS T2 JOIN qualifying AS T3 ON T1.raceId = T3.raceId WHERE T2.nationality = value OR T1.time = value",
                -6.246273994445801
            ],
            [
                "SELECT qualifyId , constructorId FROM qualifying WHERE qualifyId = value OR number = value",
                -7.146796703338623
            ],
            [
                "SELECT T2.qualifyId , T2.constructorId FROM races AS T1 JOIN qualifying AS T2 ON T1.raceId = T2.raceId WHERE T1.time = value OR T1.time = value",
                -7.384640216827393
            ],
            [
                "SELECT qualifyId , constructorId FROM qualifying WHERE number = value OR q1 = value",
                -7.596867561340332
            ],
            [
                "SELECT qualifyId , constructorId FROM qualifying WHERE q3 = value OR number = value",
                -7.6828742027282715
            ],
            [
                "SELECT qualifyId , raceId FROM qualifying WHERE number = value OR number = value",
                -7.698805809020996
            ],
            [
                "SELECT qualifyId , constructorId FROM qualifying WHERE raceId = value OR number = value",
                -8.222400665283203
            ],
            [
                "SELECT qualifyId , constructorId FROM qualifying WHERE q1 = value OR number = value",
                -8.420560836791992
            ],
            [
                "SELECT qualifyId , constructorId FROM qualifying WHERE number = value OR raceId = value",
                -8.515558242797852
            ],
            [
                "SELECT qualifyId , number FROM qualifying WHERE number = value OR number = value",
                -8.610668182373047
            ],
            [
                "SELECT T3.qualifyId , T3.constructorId FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN qualifying AS T3 ON T2.raceId = T3.raceId WHERE T3.number = value OR T1.country = value",
                -8.836992263793945
            ],
            [
                "SELECT T3.qualifyId , T3.constructorId FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN qualifying AS T3 ON T2.raceId = T3.raceId WHERE T1.circuitRef = value OR T3.number = value",
                -9.259968757629395
            ],
            [
                "SELECT qualifyId , constructorId FROM qualifying",
                -12.297205924987793
            ]
        ],
        "predicted_parse_with_values": "SELECT qualifyId , constructorId FROM qualifying WHERE number = \"Belgium\" OR number = \"France\"",
        "template_feedback": "use circuits table in place of qualifying table . consider the country equals Belgium or country equals France conditions in place of the number equals France or number equals Belgium conditions . find circuit id and location in place of constructor id and qualify id .",
        "primary_span": [
            [
                0,
                2
            ],
            [
                9,
                18
            ],
            [
                32,
                36
            ]
        ],
        "secondary_span": [
            [
                3,
                8
            ],
            [
                19,
                31
            ],
            [
                37,
                45
            ]
        ],
        "edits": [
            "circuit id",
            "location",
            "qualify id",
            "constructor id",
            "circuits",
            "qualifying",
            "country equals \"France\" or country equals \"Belgium\"",
            "number equals \"Belgium\" or number equals \"France\""
        ],
        "edits_original": "< select > add circuit id </ select > < select > add location </ select > < select > remove qualify id </ select > < select > remove constructor id </ select > < from > add circuits </ from > < from > remove qualifying </ from > < where > add country equals \" France \" or country equals \" Belgium \" </ where > < where > remove number equals \" Belgium \" or number equals \" France \" </ where >"
    },
    {
        "db_id": "formula_1",
        "question": "What are the names of races held between 2009 and 2011?",
        "gold_parse": "SELECT name FROM races WHERE YEAR BETWEEN 2009 AND 2011",
        "predicted_parse": "SELECT country FROM circuits WHERE lat BETWEEN value AND value",
        "predicted_parse_explanation": [
            "find the country in circuits table whose latitude between 2011 and 2009"
        ],
        "feedback": "Change country of circuits table with races' name and \"lat equals or\" with \"races' year is\".",
        "beam": [
            [
                "SELECT country FROM circuits WHERE lat BETWEEN value AND value",
                -0.0020046234130859375
            ],
            [
                "SELECT country FROM circuits WHERE lng BETWEEN value AND value",
                -7.108824729919434
            ],
            [
                "SELECT country FROM circuits WHERE circuitRef BETWEEN value AND value",
                -7.352494239807129
            ],
            [
                "SELECT country FROM circuits WHERE lat > = value AND lat < = value",
                -7.755459785461426
            ],
            [
                "SELECT country FROM circuits WHERE circuitRef = value AND lat BETWEEN value AND value",
                -9.798221588134766
            ],
            [
                "SELECT country FROM circuits",
                -11.458548545837402
            ],
            [
                "SELECT country FROM circuits WHERE lat < value AND lat < = value",
                -11.593982696533203
            ],
            [
                "SELECT country FROM circuits WHERE lat < value",
                -12.66934585571289
            ],
            [
                "SELECT country FROM circuits GROUP BY country HAVING Count ( * ) BETWEEN value AND value",
                -12.819234848022461
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN lapTimes AS T3 ON T2.raceId = T3.raceId WHERE T3.milliseconds BETWEEN value AND value",
                -12.974987030029297
            ],
            [
                "SELECT country FROM circuits WHERE lat < value AND circuitRef = value AND circuitRef = value",
                -13.009632110595703
            ],
            [
                "SELECT country FROM circuits WHERE lat BETWEEN value AND value AND lat BETWEEN value AND value",
                -13.105083465576172
            ],
            [
                "SELECT country FROM circuits WHERE lat > = value AND circuitRef < = value",
                -13.450337409973145
            ],
            [
                "SELECT country FROM circuits WHERE lng > = value AND lat < = value",
                -13.579694747924805
            ],
            [
                "SELECT country FROM circuits WHERE lat < value AND circuitRef = value",
                -13.730719566345215
            ],
            [
                "SELECT country FROM circuits WHERE circuitRef > = value AND lat < = value",
                -13.74431324005127
            ],
            [
                "SELECT country , lat FROM circuits WHERE lat BETWEEN value AND value",
                -13.775607109069824
            ],
            [
                "SELECT country FROM circuits WHERE lat < value AND circuitRef = value OR circuitRef = value",
                -13.948535919189453
            ],
            [
                "SELECT country FROM circuits WHERE lat > = value AND lat BETWEEN value AND value",
                -14.314711570739746
            ],
            [
                "SELECT DISTINCT country FROM circuits WHERE lat BETWEEN value AND value",
                -14.611388206481934
            ]
        ],
        "predicted_parse_with_values": "SELECT country FROM circuits WHERE lat BETWEEN 2011 AND 2009",
        "template_feedback": "use races table in place of circuits table . consider the year between 2009 and 2011 conditions in place of the latitude between 2011 and 2009 conditions . find races 's name in place of country .",
        "primary_span": [
            [
                0,
                2
            ],
            [
                9,
                16
            ],
            [
                28,
                31
            ]
        ],
        "secondary_span": [
            [
                3,
                8
            ],
            [
                17,
                27
            ],
            [
                32,
                36
            ]
        ],
        "edits": [
            "name",
            "country",
            "races",
            "circuits",
            "year between 2009 and 2011",
            "latitude between 2011 and 2009"
        ],
        "edits_original": "< select > add name </ select > < select > remove country </ select > < from > add races </ from > < from > remove circuits </ from > < where > add year between 2009 and 2011 </ where > < where > remove latitude between 2011 and 2009 </ where >"
    },
    {
        "db_id": "formula_1",
        "question": "What are the names of races held between 2009 and 2011?",
        "gold_parse": "SELECT name FROM races WHERE YEAR BETWEEN 2009 AND 2011",
        "predicted_parse": "SELECT country FROM circuits WHERE lat BETWEEN value AND value",
        "predicted_parse_explanation": [
            "find the country in circuits table whose latitude between 2011 and 2009"
        ],
        "feedback": "You need to use \"name of races\" and \" races year\".",
        "beam": [
            [
                "SELECT country FROM circuits WHERE lat BETWEEN value AND value",
                -0.0020046234130859375
            ],
            [
                "SELECT country FROM circuits WHERE lng BETWEEN value AND value",
                -7.108824729919434
            ],
            [
                "SELECT country FROM circuits WHERE circuitRef BETWEEN value AND value",
                -7.352494239807129
            ],
            [
                "SELECT country FROM circuits WHERE lat > = value AND lat < = value",
                -7.755459785461426
            ],
            [
                "SELECT country FROM circuits WHERE circuitRef = value AND lat BETWEEN value AND value",
                -9.798221588134766
            ],
            [
                "SELECT country FROM circuits",
                -11.458548545837402
            ],
            [
                "SELECT country FROM circuits WHERE lat < value AND lat < = value",
                -11.593982696533203
            ],
            [
                "SELECT country FROM circuits WHERE lat < value",
                -12.66934585571289
            ],
            [
                "SELECT country FROM circuits GROUP BY country HAVING Count ( * ) BETWEEN value AND value",
                -12.819234848022461
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN lapTimes AS T3 ON T2.raceId = T3.raceId WHERE T3.milliseconds BETWEEN value AND value",
                -12.974987030029297
            ],
            [
                "SELECT country FROM circuits WHERE lat < value AND circuitRef = value AND circuitRef = value",
                -13.009632110595703
            ],
            [
                "SELECT country FROM circuits WHERE lat BETWEEN value AND value AND lat BETWEEN value AND value",
                -13.105083465576172
            ],
            [
                "SELECT country FROM circuits WHERE lat > = value AND circuitRef < = value",
                -13.450337409973145
            ],
            [
                "SELECT country FROM circuits WHERE lng > = value AND lat < = value",
                -13.579694747924805
            ],
            [
                "SELECT country FROM circuits WHERE lat < value AND circuitRef = value",
                -13.730719566345215
            ],
            [
                "SELECT country FROM circuits WHERE circuitRef > = value AND lat < = value",
                -13.74431324005127
            ],
            [
                "SELECT country , lat FROM circuits WHERE lat BETWEEN value AND value",
                -13.775607109069824
            ],
            [
                "SELECT country FROM circuits WHERE lat < value AND circuitRef = value OR circuitRef = value",
                -13.948535919189453
            ],
            [
                "SELECT country FROM circuits WHERE lat > = value AND lat BETWEEN value AND value",
                -14.314711570739746
            ],
            [
                "SELECT DISTINCT country FROM circuits WHERE lat BETWEEN value AND value",
                -14.611388206481934
            ]
        ],
        "predicted_parse_with_values": "SELECT country FROM circuits WHERE lat BETWEEN 2011 AND 2009",
        "template_feedback": "use races table in place of circuits table . consider the year between 2009 and 2011 conditions in place of the latitude between 2011 and 2009 conditions . find races 's name in place of country .",
        "primary_span": [
            [
                0,
                2
            ],
            [
                9,
                16
            ],
            [
                28,
                31
            ]
        ],
        "secondary_span": [
            [
                3,
                8
            ],
            [
                17,
                27
            ],
            [
                32,
                36
            ]
        ],
        "edits": [
            "name",
            "country",
            "races",
            "circuits",
            "year between 2009 and 2011",
            "latitude between 2011 and 2009"
        ],
        "edits_original": "< select > add name </ select > < select > remove country </ select > < from > add races </ from > < from > remove circuits </ from > < where > add year between 2009 and 2011 </ where > < where > remove latitude between 2011 and 2009 </ where >"
    },
    {
        "db_id": "formula_1",
        "question": "List the names of all distinct races in reversed  lexicographic order?",
        "gold_parse": "SELECT DISTINCT name FROM races ORDER BY name DESC",
        "predicted_parse": "SELECT country FROM circuits ORDER BY country Asc",
        "predicted_parse_explanation": [
            "find the country in circuits table ordered ascending by country"
        ],
        "feedback": "Replace country of circuits with different name of races\" and order is descending by name .",
        "beam": [
            [
                "SELECT country FROM circuits ORDER BY country Asc",
                -0.0005931854248046875
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId ORDER BY T2.name Asc",
                -7.972528457641602
            ],
            [
                "SELECT T2.name FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId ORDER BY T1.country Asc",
                -8.5760498046875
            ],
            [
                "SELECT DISTINCT country FROM circuits ORDER BY country Asc",
                -10.456299781799316
            ],
            [
                "SELECT country FROM circuits ORDER BY country Desc",
                -12.293166160583496
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN seasons AS T2 ORDER BY T2.dob Asc",
                -12.589179039001465
            ],
            [
                "SELECT T2.dob FROM circuits AS T1 JOIN seasons AS T2 ORDER BY T1.country Asc",
                -13.077869415283203
            ],
            [
                "SELECT country FROM circuits",
                -13.377126216888428
            ],
            [
                "SELECT DISTINCT country FROM circuits",
                -13.404533863067627
            ],
            [
                "SELECT country FROM circuits GROUP BY country ORDER BY Count ( * ) Asc",
                -13.908336162567139
            ],
            [
                "SELECT country FROM circuits ORDER BY country Asc LIMIT value",
                -13.982250213623047
            ],
            [
                "SELECT country FROM circuits EXCEPT SELECT country FROM circuits",
                -14.104073524475098
            ],
            [
                "SELECT country , country FROM circuits ORDER BY country Asc",
                -14.263242244720459
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN drivers AS T3 JOIN constructorStandings AS T4 ON T2.raceId = T4.raceId AND T4.driverId = T3.driverId ORDER BY T3.driverRef Asc",
                -14.526857376098633
            ],
            [
                "SELECT T1.country , T2.name FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId ORDER BY T1.country Asc",
                -14.58977746963501
            ],
            [
                "SELECT country FROM circuits ORDER BY DISTINCT country Asc",
                -14.62583065032959
            ],
            [
                "SELECT DISTINCT country FROM circuits ORDER BY country Asc",
                -14.70891284942627
            ],
            [
                "SELECT country FROM circuits UNION SELECT country FROM circuits",
                -14.848925590515137
            ],
            [
                "SELECT country FROM circuits WHERE country = value",
                -14.904103755950928
            ],
            [
                "SELECT country FROM circuits ORDER BY name Asc",
                -15.1301908493042
            ]
        ],
        "predicted_parse_with_values": "SELECT country FROM circuits ORDER BY country Asc",
        "template_feedback": "use races table in place of circuits table . find races 's name in place of country . make sure no repetition in the results . order the results descending by races 's name in place of ordering ascending by country .",
        "primary_span": [
            [
                0,
                2
            ],
            [
                9,
                12
            ],
            [
                18,
                25
            ],
            [
                26,
                33
            ]
        ],
        "secondary_span": [
            [
                3,
                8
            ],
            [
                13,
                17
            ],
            [
                34,
                41
            ]
        ],
        "edits": [
            "distinct",
            "name",
            "country",
            "races",
            "circuits",
            "name",
            "descending",
            "country"
        ],
        "edits_original": "< select > add distinct </ select > < select > add name </ select > < select > remove country </ select > < from > add races </ from > < from > remove circuits </ from > < orderBy > add name </ orderBy > < orderBy > add descending </ orderBy > < orderBy > remove country </ orderBy >"
    },
    {
        "db_id": "formula_1",
        "question": "List the names of all distinct races in reversed  lexicographic order?",
        "gold_parse": "SELECT DISTINCT name FROM races ORDER BY name DESC",
        "predicted_parse": "SELECT country FROM circuits ORDER BY country Asc",
        "predicted_parse_explanation": [
            "find the country in circuits table ordered ascending by country"
        ],
        "feedback": "You should use different names of races and also order should be in decline order. ",
        "beam": [
            [
                "SELECT country FROM circuits ORDER BY country Asc",
                -0.0005931854248046875
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId ORDER BY T2.name Asc",
                -7.972528457641602
            ],
            [
                "SELECT T2.name FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId ORDER BY T1.country Asc",
                -8.5760498046875
            ],
            [
                "SELECT DISTINCT country FROM circuits ORDER BY country Asc",
                -10.456299781799316
            ],
            [
                "SELECT country FROM circuits ORDER BY country Desc",
                -12.293166160583496
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN seasons AS T2 ORDER BY T2.dob Asc",
                -12.589179039001465
            ],
            [
                "SELECT T2.dob FROM circuits AS T1 JOIN seasons AS T2 ORDER BY T1.country Asc",
                -13.077869415283203
            ],
            [
                "SELECT country FROM circuits",
                -13.377126216888428
            ],
            [
                "SELECT DISTINCT country FROM circuits",
                -13.404533863067627
            ],
            [
                "SELECT country FROM circuits GROUP BY country ORDER BY Count ( * ) Asc",
                -13.908336162567139
            ],
            [
                "SELECT country FROM circuits ORDER BY country Asc LIMIT value",
                -13.982250213623047
            ],
            [
                "SELECT country FROM circuits EXCEPT SELECT country FROM circuits",
                -14.104073524475098
            ],
            [
                "SELECT country , country FROM circuits ORDER BY country Asc",
                -14.263242244720459
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN drivers AS T3 JOIN constructorStandings AS T4 ON T2.raceId = T4.raceId AND T4.driverId = T3.driverId ORDER BY T3.driverRef Asc",
                -14.526857376098633
            ],
            [
                "SELECT T1.country , T2.name FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId ORDER BY T1.country Asc",
                -14.58977746963501
            ],
            [
                "SELECT country FROM circuits ORDER BY DISTINCT country Asc",
                -14.62583065032959
            ],
            [
                "SELECT DISTINCT country FROM circuits ORDER BY country Asc",
                -14.70891284942627
            ],
            [
                "SELECT country FROM circuits UNION SELECT country FROM circuits",
                -14.848925590515137
            ],
            [
                "SELECT country FROM circuits WHERE country = value",
                -14.904103755950928
            ],
            [
                "SELECT country FROM circuits ORDER BY name Asc",
                -15.1301908493042
            ]
        ],
        "predicted_parse_with_values": "SELECT country FROM circuits ORDER BY country Asc",
        "template_feedback": "use races table in place of circuits table . find races 's name in place of country . make sure no repetition in the results . order the results descending by races 's name in place of ordering ascending by country .",
        "primary_span": [
            [
                0,
                2
            ],
            [
                9,
                12
            ],
            [
                18,
                25
            ],
            [
                26,
                33
            ]
        ],
        "secondary_span": [
            [
                3,
                8
            ],
            [
                13,
                17
            ],
            [
                34,
                41
            ]
        ],
        "edits": [
            "distinct",
            "name",
            "country",
            "races",
            "circuits",
            "name",
            "descending",
            "country"
        ],
        "edits_original": "< select > add distinct </ select > < select > add name </ select > < select > remove country </ select > < from > add races </ from > < from > remove circuits </ from > < orderBy > add name </ orderBy > < orderBy > add descending </ orderBy > < orderBy > remove country </ orderBy >"
    },
    {
        "db_id": "formula_1",
        "question": "What are the first names of all the different drivers in alphabetical order?",
        "gold_parse": "SELECT DISTINCT forename FROM drivers ORDER BY forename ASC",
        "predicted_parse": "SELECT name FROM races ORDER BY name Asc",
        "predicted_parse_explanation": [
            "find the name in races table ordered ascending by name"
        ],
        "feedback": "Replace name with forename and races table with drivers table .",
        "beam": [
            [
                "SELECT name FROM races ORDER BY name Asc",
                -0.12821555137634277
            ],
            [
                "SELECT T2.positionText FROM races AS T1 JOIN constructorStandings AS T2 ON T1.raceId = T2.raceId ORDER BY T1.name Asc",
                -2.374375820159912
            ],
            [
                "SELECT DISTINCT name FROM races ORDER BY name Asc",
                -5.127776384353638
            ],
            [
                "SELECT T2.dob FROM races AS T1 JOIN seasons AS T2 ORDER BY T1.name Asc",
                -5.390883922576904
            ],
            [
                "SELECT T1.name FROM races AS T1 JOIN constructorStandings AS T2 ON T1.raceId = T2.raceId ORDER BY T2.positionText Asc",
                -5.474671840667725
            ],
            [
                "SELECT name FROM races ORDER BY url Asc",
                -5.6985087394714355
            ],
            [
                "SELECT name FROM races ORDER BY url Asc",
                -6.376438140869141
            ],
            [
                "SELECT T1.name FROM races AS T1 JOIN results AS T2 ORDER BY T2.rank Asc",
                -6.884855270385742
            ],
            [
                "SELECT T2.rank FROM races AS T1 JOIN results AS T2 ORDER BY T1.name Asc",
                -7.119285583496094
            ],
            [
                "SELECT T1.name FROM races AS T1 JOIN seasons AS T2 ORDER BY T2.dob Asc",
                -7.136955261230469
            ],
            [
                "SELECT T2.constructorRef FROM races AS T1 JOIN constructors AS T2 JOIN constructorStandings AS T3 ON T1.raceId = T3.raceId AND T3.constructorId = T2.constructorId ORDER BY T1.name Asc",
                -7.277915716171265
            ],
            [
                "SELECT DISTINCT T2.positionText FROM races AS T1 JOIN constructorStandings AS T2 ON T1.raceId = T2.raceId ORDER BY T1.name Asc",
                -7.410344123840332
            ],
            [
                "SELECT positionText FROM constructorStandings ORDER BY positionText Asc",
                -7.722113609313965
            ],
            [
                "SELECT T2.positionText FROM races AS T1 JOIN constructorStandings AS T2 ON T1.raceId = T2.raceId ORDER BY T1.url Asc",
                -7.932654857635498
            ],
            [
                "SELECT T1.name FROM races AS T1 JOIN constructors AS T2 JOIN constructorStandings AS T3 ON T1.raceId = T3.raceId AND T3.constructorId = T2.constructorId ORDER BY T2.constructorRef Asc",
                -8.106245994567871
            ],
            [
                "SELECT * FROM races ORDER BY name Asc",
                -8.343422412872314
            ],
            [
                "SELECT name FROM races ORDER BY * Asc",
                -8.514790534973145
            ],
            [
                "SELECT T2.positionText FROM races AS T1 JOIN constructorStandings AS T2 ON T1.raceId = T2.raceId ORDER BY T1.url Asc",
                -8.620784282684326
            ],
            [
                "SELECT T1.name FROM races AS T1 JOIN drivers AS T2 JOIN constructorStandings AS T3 ON T1.raceId = T3.raceId AND T3.driverId = T2.driverId ORDER BY T2.driverRef Asc",
                -8.874963760375977
            ],
            [
                "SELECT DISTINCT name FROM races",
                -11.486089706420898
            ]
        ],
        "predicted_parse_with_values": "SELECT name FROM races ORDER BY name Asc",
        "template_feedback": "use drivers table in place of races table . find forename in place of name . make sure no repetition in the results . order the results by forename in place of name .",
        "primary_span": [
            [
                0,
                2
            ],
            [
                9,
                10
            ],
            [
                16,
                23
            ],
            [
                24,
                28
            ]
        ],
        "secondary_span": [
            [
                3,
                8
            ],
            [
                11,
                15
            ],
            [
                29,
                33
            ]
        ],
        "edits": [
            "distinct",
            "forename",
            "name",
            "drivers",
            "races",
            "forename",
            "name"
        ],
        "edits_original": "< select > add distinct </ select > < select > add forename </ select > < select > remove name </ select > < from > add drivers </ from > < from > remove races </ from > < orderBy > add forename </ orderBy > < orderBy > remove name </ orderBy >"
    },
    {
        "db_id": "formula_1",
        "question": "What are the first names of all the different drivers in alphabetical order?",
        "gold_parse": "SELECT DISTINCT forename FROM drivers ORDER BY forename ASC",
        "predicted_parse": "SELECT name FROM races ORDER BY name Asc",
        "predicted_parse_explanation": [
            "find the name in races table ordered ascending by name"
        ],
        "feedback": "Use drivers table in place of races table and return forename.",
        "beam": [
            [
                "SELECT name FROM races ORDER BY name Asc",
                -0.12821555137634277
            ],
            [
                "SELECT T2.positionText FROM races AS T1 JOIN constructorStandings AS T2 ON T1.raceId = T2.raceId ORDER BY T1.name Asc",
                -2.374375820159912
            ],
            [
                "SELECT DISTINCT name FROM races ORDER BY name Asc",
                -5.127776384353638
            ],
            [
                "SELECT T2.dob FROM races AS T1 JOIN seasons AS T2 ORDER BY T1.name Asc",
                -5.390883922576904
            ],
            [
                "SELECT T1.name FROM races AS T1 JOIN constructorStandings AS T2 ON T1.raceId = T2.raceId ORDER BY T2.positionText Asc",
                -5.474671840667725
            ],
            [
                "SELECT name FROM races ORDER BY url Asc",
                -5.6985087394714355
            ],
            [
                "SELECT name FROM races ORDER BY url Asc",
                -6.376438140869141
            ],
            [
                "SELECT T1.name FROM races AS T1 JOIN results AS T2 ORDER BY T2.rank Asc",
                -6.884855270385742
            ],
            [
                "SELECT T2.rank FROM races AS T1 JOIN results AS T2 ORDER BY T1.name Asc",
                -7.119285583496094
            ],
            [
                "SELECT T1.name FROM races AS T1 JOIN seasons AS T2 ORDER BY T2.dob Asc",
                -7.136955261230469
            ],
            [
                "SELECT T2.constructorRef FROM races AS T1 JOIN constructors AS T2 JOIN constructorStandings AS T3 ON T1.raceId = T3.raceId AND T3.constructorId = T2.constructorId ORDER BY T1.name Asc",
                -7.277915716171265
            ],
            [
                "SELECT DISTINCT T2.positionText FROM races AS T1 JOIN constructorStandings AS T2 ON T1.raceId = T2.raceId ORDER BY T1.name Asc",
                -7.410344123840332
            ],
            [
                "SELECT positionText FROM constructorStandings ORDER BY positionText Asc",
                -7.722113609313965
            ],
            [
                "SELECT T2.positionText FROM races AS T1 JOIN constructorStandings AS T2 ON T1.raceId = T2.raceId ORDER BY T1.url Asc",
                -7.932654857635498
            ],
            [
                "SELECT T1.name FROM races AS T1 JOIN constructors AS T2 JOIN constructorStandings AS T3 ON T1.raceId = T3.raceId AND T3.constructorId = T2.constructorId ORDER BY T2.constructorRef Asc",
                -8.106245994567871
            ],
            [
                "SELECT * FROM races ORDER BY name Asc",
                -8.343422412872314
            ],
            [
                "SELECT name FROM races ORDER BY * Asc",
                -8.514790534973145
            ],
            [
                "SELECT T2.positionText FROM races AS T1 JOIN constructorStandings AS T2 ON T1.raceId = T2.raceId ORDER BY T1.url Asc",
                -8.620784282684326
            ],
            [
                "SELECT T1.name FROM races AS T1 JOIN drivers AS T2 JOIN constructorStandings AS T3 ON T1.raceId = T3.raceId AND T3.driverId = T2.driverId ORDER BY T2.driverRef Asc",
                -8.874963760375977
            ],
            [
                "SELECT DISTINCT name FROM races",
                -11.486089706420898
            ]
        ],
        "predicted_parse_with_values": "SELECT name FROM races ORDER BY name Asc",
        "template_feedback": "use drivers table in place of races table . find forename in place of name . make sure no repetition in the results . order the results by forename in place of name .",
        "primary_span": [
            [
                0,
                2
            ],
            [
                9,
                10
            ],
            [
                16,
                23
            ],
            [
                24,
                28
            ]
        ],
        "secondary_span": [
            [
                3,
                8
            ],
            [
                11,
                15
            ],
            [
                29,
                33
            ]
        ],
        "edits": [
            "distinct",
            "forename",
            "name",
            "drivers",
            "races",
            "forename",
            "name"
        ],
        "edits_original": "< select > add distinct </ select > < select > add forename </ select > < select > remove name </ select > < from > add drivers </ from > < from > remove races </ from > < orderBy > add forename </ orderBy > < orderBy > remove name </ orderBy >"
    },
    {
        "db_id": "formula_1",
        "question": "How many drivers did not participate in the races held in 2009?",
        "gold_parse": "SELECT count(DISTINCT driverId) FROM results WHERE raceId NOT IN( SELECT raceId FROM races WHERE YEAR != 2009 )",
        "predicted_parse": "SELECT Count ( * ) FROM circuits WHERE * NOT IN ( SELECT * FROM circuits WHERE circuitRef = value )",
        "predicted_parse_explanation": [
            "Step 1: find the rows in circuits table whose circuit reference equals 2009",
            "Step 2: find the number of rows in circuits table whose rows not one of the results of step 1"
        ],
        "feedback": "In step 1 use races table instead of circuits table and year instead of circuit reference .",
        "beam": [
            [
                "SELECT Count ( * ) FROM circuits WHERE * NOT IN ( SELECT * FROM circuits WHERE circuitRef = value )",
                -0.5700488090515137
            ],
            [
                "SELECT Count ( * ) FROM drivers AS T1 WHERE T1.driverId NOT IN ( SELECT * FROM circuits AS T2 WHERE T2.circuitRef = value )",
                -2.724992275238037
            ],
            [
                "SELECT Count ( * ) FROM circuits WHERE alt NOT IN ( SELECT * FROM circuits WHERE circuitRef = value )",
                -2.991147994995117
            ],
            [
                "SELECT Count ( * ) FROM circuits WHERE country NOT IN ( SELECT * FROM circuits WHERE circuitRef = value )",
                -3.1080427169799805
            ],
            [
                "SELECT Count ( * ) FROM circuits WHERE * NOT IN ( SELECT country FROM circuits WHERE circuitRef = value )",
                -3.519495964050293
            ],
            [
                "SELECT Count ( * ) FROM circuits WHERE lat NOT IN ( SELECT * FROM circuits WHERE circuitRef = value )",
                -3.5226569175720215
            ],
            [
                "SELECT Count ( * ) FROM circuits WHERE circuitId NOT IN ( SELECT * FROM circuits WHERE circuitRef = value )",
                -3.9280762672424316
            ],
            [
                "SELECT Count ( * ) FROM circuits AS T1 WHERE * NOT IN ( SELECT T3.driverId FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN lapTimes AS T3 ON T2.raceId = T3.raceId WHERE T1.circuitRef = value )",
                -4.221163988113403
            ],
            [
                "SELECT Count ( * ) FROM circuits WHERE circuitRef ! = value",
                -5.013670921325684
            ],
            [
                "SELECT Count ( * ) FROM circuits WHERE name NOT IN ( SELECT * FROM circuits WHERE circuitRef = value )",
                -5.120687961578369
            ],
            [
                "SELECT Count ( * ) FROM driverStandings AS T1 WHERE T1.driverId NOT IN ( SELECT * FROM circuits AS T2 WHERE T2.circuitRef = value )",
                -5.169489860534668
            ],
            [
                "SELECT Count ( * ) FROM drivers AS T1 WHERE T1.driverId NOT IN ( SELECT T2.country FROM circuits AS T2 WHERE T2.circuitRef = value )",
                -5.180325984954834
            ],
            [
                "SELECT Count ( * ) FROM constructors AS T1 WHERE T1.constructorId NOT IN ( SELECT * FROM circuits AS T2 WHERE T2.circuitRef = value )",
                -5.315487861633301
            ],
            [
                "SELECT Count ( * ) FROM circuits WHERE lat NOT IN ( SELECT country FROM circuits WHERE circuitRef = value )",
                -5.3248631954193115
            ],
            [
                "SELECT Count ( * ) FROM circuits WHERE country NOT IN ( SELECT country FROM circuits WHERE circuitRef = value )",
                -5.332993507385254
            ],
            [
                "SELECT Count ( * ) FROM pitStops AS T1 WHERE T1.stop NOT IN ( SELECT * FROM circuits AS T2 WHERE T2.circuitRef = value )",
                -5.411670207977295
            ],
            [
                "SELECT Count ( * ) FROM constructorResults AS T1 WHERE T1.wins NOT IN ( SELECT * FROM circuits AS T2 WHERE T2.circuitRef = value )",
                -5.668911933898926
            ],
            [
                "SELECT Count ( * ) FROM status AS T1 WHERE T1.code NOT IN ( SELECT * FROM circuits AS T2 WHERE T2.circuitRef = value )",
                -5.790262699127197
            ],
            [
                "SELECT Count ( * ) FROM results AS T1 WHERE T1.rank NOT IN ( SELECT * FROM circuits AS T2 WHERE T2.circuitRef = value )",
                -5.7929368019104
            ],
            [
                "SELECT Count ( * ) FROM circuits",
                -14.304889678955078
            ]
        ],
        "predicted_parse_with_values": "SELECT Count ( * ) FROM circuits WHERE * NOT IN ( SELECT * FROM circuits WHERE circuitRef = 2009 )",
        "template_feedback": "in step 1 , use races table in place of circuits table . consider the year not equals 2009 conditions in place of the circuit reference equals 2009 conditions . find races 's race id in place of rows . in step 2 , use results table in place of circuits table . make sure the race id is not one of the results of step 1 the rows is not one of the results of step 1 . find number of different driver id in place of number of rows .",
        "primary_span": [
            [
                4,
                6
            ],
            [
                13,
                19
            ],
            [
                30,
                34
            ],
            [
                44,
                46
            ],
            [
                53,
                66
            ],
            [
                79,
                84
            ]
        ],
        "secondary_span": [
            [
                7,
                12
            ],
            [
                20,
                29
            ],
            [
                35,
                39
            ],
            [
                47,
                52
            ],
            [
                67,
                78
            ],
            [
                85,
                91
            ]
        ],
        "edits": [
            "number of distinct driver id",
            "number of rows",
            "results",
            "circuits",
            "race id not one of SUBS1",
            "rows not one of SUBS1",
            "race id",
            "rows",
            "races",
            "circuits",
            "year not equals to 2009",
            "circuit reference equals 2009"
        ],
        "edits_original": "< select > add number of distinct driver id </ select > < select > remove number of rows </ select > < from > add results </ from > < from > remove circuits </ from > < where > add race id not one of SUBS1 </ where > < where > remove rows not one of SUBS1 </ where > < select > add race id </ select > < select > remove rows </ select > < from > add races </ from > < from > remove circuits </ from > < where > add year not equals to 2009 </ where > < where > remove circuit reference equals 2009 </ where >"
    },
    {
        "db_id": "formula_1",
        "question": "How many drivers did not participate in the races held in 2009?",
        "gold_parse": "SELECT count(DISTINCT driverId) FROM results WHERE raceId NOT IN( SELECT raceId FROM races WHERE YEAR != 2009 )",
        "predicted_parse": "SELECT Count ( * ) FROM circuits WHERE * NOT IN ( SELECT * FROM circuits WHERE circuitRef = value )",
        "predicted_parse_explanation": [
            "Step 1: find the rows in circuits table whose circuit reference equals 2009",
            "Step 2: find the number of rows in circuits table whose rows not one of the results of step 1"
        ],
        "feedback": "You should use races and year in step 1 and ignore circuits table and circuit refernece.",
        "beam": [
            [
                "SELECT Count ( * ) FROM circuits WHERE * NOT IN ( SELECT * FROM circuits WHERE circuitRef = value )",
                -0.5700488090515137
            ],
            [
                "SELECT Count ( * ) FROM drivers AS T1 WHERE T1.driverId NOT IN ( SELECT * FROM circuits AS T2 WHERE T2.circuitRef = value )",
                -2.724992275238037
            ],
            [
                "SELECT Count ( * ) FROM circuits WHERE alt NOT IN ( SELECT * FROM circuits WHERE circuitRef = value )",
                -2.991147994995117
            ],
            [
                "SELECT Count ( * ) FROM circuits WHERE country NOT IN ( SELECT * FROM circuits WHERE circuitRef = value )",
                -3.1080427169799805
            ],
            [
                "SELECT Count ( * ) FROM circuits WHERE * NOT IN ( SELECT country FROM circuits WHERE circuitRef = value )",
                -3.519495964050293
            ],
            [
                "SELECT Count ( * ) FROM circuits WHERE lat NOT IN ( SELECT * FROM circuits WHERE circuitRef = value )",
                -3.5226569175720215
            ],
            [
                "SELECT Count ( * ) FROM circuits WHERE circuitId NOT IN ( SELECT * FROM circuits WHERE circuitRef = value )",
                -3.9280762672424316
            ],
            [
                "SELECT Count ( * ) FROM circuits AS T1 WHERE * NOT IN ( SELECT T3.driverId FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN lapTimes AS T3 ON T2.raceId = T3.raceId WHERE T1.circuitRef = value )",
                -4.221163988113403
            ],
            [
                "SELECT Count ( * ) FROM circuits WHERE circuitRef ! = value",
                -5.013670921325684
            ],
            [
                "SELECT Count ( * ) FROM circuits WHERE name NOT IN ( SELECT * FROM circuits WHERE circuitRef = value )",
                -5.120687961578369
            ],
            [
                "SELECT Count ( * ) FROM driverStandings AS T1 WHERE T1.driverId NOT IN ( SELECT * FROM circuits AS T2 WHERE T2.circuitRef = value )",
                -5.169489860534668
            ],
            [
                "SELECT Count ( * ) FROM drivers AS T1 WHERE T1.driverId NOT IN ( SELECT T2.country FROM circuits AS T2 WHERE T2.circuitRef = value )",
                -5.180325984954834
            ],
            [
                "SELECT Count ( * ) FROM constructors AS T1 WHERE T1.constructorId NOT IN ( SELECT * FROM circuits AS T2 WHERE T2.circuitRef = value )",
                -5.315487861633301
            ],
            [
                "SELECT Count ( * ) FROM circuits WHERE lat NOT IN ( SELECT country FROM circuits WHERE circuitRef = value )",
                -5.3248631954193115
            ],
            [
                "SELECT Count ( * ) FROM circuits WHERE country NOT IN ( SELECT country FROM circuits WHERE circuitRef = value )",
                -5.332993507385254
            ],
            [
                "SELECT Count ( * ) FROM pitStops AS T1 WHERE T1.stop NOT IN ( SELECT * FROM circuits AS T2 WHERE T2.circuitRef = value )",
                -5.411670207977295
            ],
            [
                "SELECT Count ( * ) FROM constructorResults AS T1 WHERE T1.wins NOT IN ( SELECT * FROM circuits AS T2 WHERE T2.circuitRef = value )",
                -5.668911933898926
            ],
            [
                "SELECT Count ( * ) FROM status AS T1 WHERE T1.code NOT IN ( SELECT * FROM circuits AS T2 WHERE T2.circuitRef = value )",
                -5.790262699127197
            ],
            [
                "SELECT Count ( * ) FROM results AS T1 WHERE T1.rank NOT IN ( SELECT * FROM circuits AS T2 WHERE T2.circuitRef = value )",
                -5.7929368019104
            ],
            [
                "SELECT Count ( * ) FROM circuits",
                -14.304889678955078
            ]
        ],
        "predicted_parse_with_values": "SELECT Count ( * ) FROM circuits WHERE * NOT IN ( SELECT * FROM circuits WHERE circuitRef = 2009 )",
        "template_feedback": "in step 1 , use races table in place of circuits table . consider the year not equals 2009 conditions in place of the circuit reference equals 2009 conditions . find races 's race id in place of rows . in step 2 , use results table in place of circuits table . make sure the race id is not one of the results of step 1 the rows is not one of the results of step 1 . find number of different driver id in place of number of rows .",
        "primary_span": [
            [
                4,
                6
            ],
            [
                13,
                19
            ],
            [
                30,
                34
            ],
            [
                44,
                46
            ],
            [
                53,
                66
            ],
            [
                79,
                84
            ]
        ],
        "secondary_span": [
            [
                7,
                12
            ],
            [
                20,
                29
            ],
            [
                35,
                39
            ],
            [
                47,
                52
            ],
            [
                67,
                78
            ],
            [
                85,
                91
            ]
        ],
        "edits": [
            "number of distinct driver id",
            "number of rows",
            "results",
            "circuits",
            "race id not one of SUBS1",
            "rows not one of SUBS1",
            "race id",
            "rows",
            "races",
            "circuits",
            "year not equals to 2009",
            "circuit reference equals 2009"
        ],
        "edits_original": "< select > add number of distinct driver id </ select > < select > remove number of rows </ select > < from > add results </ from > < from > remove circuits </ from > < where > add race id not one of SUBS1 </ where > < where > remove rows not one of SUBS1 </ where > < select > add race id </ select > < select > remove rows </ select > < from > add races </ from > < from > remove circuits </ from > < where > add year not equals to 2009 </ where > < where > remove circuit reference equals 2009 </ where >"
    },
    {
        "db_id": "formula_1",
        "question": "Give me a list of names and years of races that had any driver whose forename is Lewis?",
        "gold_parse": "SELECT T2.name ,  T2.year FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T1.driverid = T3.driverid WHERE T3.forename = \"Lewis\"",
        "predicted_parse": "SELECT T1.country , T1.circuitRef FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = value",
        "predicted_parse_explanation": [
            "Step 1: for each row in circuits table , find the corresponding rows in races table",
            "Step 2: find the country and circuit reference of the results of step 1 whose races 's name equals Lewis"
        ],
        "feedback": "Replace circuits table , country , circuit Reference and races's name with drivers table , races's name ,  year and drivers' forename respectively .",
        "beam": [
            [
                "SELECT T1.country , T1.circuitRef FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = value",
                -0.06219196319580078
            ],
            [
                "SELECT T1.country , T1.circuitRef FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T2.url = value",
                -2.9693431854248047
            ],
            [
                "SELECT T1.country , T1.circuitRef FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T2.url = value",
                -5.133143901824951
            ],
            [
                "SELECT country , circuitRef FROM circuits WHERE country = value",
                -6.0930633544921875
            ],
            [
                "SELECT T1.country , T1.circuitRef FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN constructorResults AS T3 ON T2.raceId = T3.raceId WHERE T3.positionText = value",
                -7.599612236022949
            ],
            [
                "SELECT T1.country , T1.circuitRef FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T2.date = value",
                -8.909180641174316
            ],
            [
                "SELECT country , circuitRef FROM circuits WHERE alt = value",
                -9.650297164916992
            ],
            [
                "SELECT country , circuitRef FROM circuits WHERE circuitRef = value",
                -10.758898735046387
            ],
            [
                "SELECT T1.country , T1.circuitRef FROM circuits AS T1 JOIN results AS T2 WHERE T2.time = value",
                -11.070178031921387
            ],
            [
                "SELECT country , circuitRef FROM circuits",
                -11.136744499206543
            ],
            [
                "SELECT T1.country , T1.circuitRef FROM circuits AS T1 JOIN status AS T2 WHERE T2.code = value",
                -11.272653579711914
            ],
            [
                "SELECT T1.country , T1.circuitRef FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN drivers AS T3 JOIN constructorStandings AS T4 ON T2.raceId = T4.raceId AND T4.driverId = T3.driverId WHERE T3.driverRef = value",
                -12.047981262207031
            ],
            [
                "SELECT T1.country , T1.circuitRef FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T2.time = value",
                -12.5423002243042
            ],
            [
                "SELECT T1.country , T1.circuitRef FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId GROUP BY T2.url HAVING Count ( * ) = value",
                -12.70241403579712
            ],
            [
                "SELECT country , circuitRef FROM circuits GROUP BY country HAVING Count ( * ) = value",
                -12.734364986419678
            ],
            [
                "SELECT country , circuitRef FROM circuits WHERE name = value",
                -12.935205459594727
            ],
            [
                "SELECT T1.country , T1.circuitRef , T1.circuitRef FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = value",
                -13.167710304260254
            ],
            [
                "SELECT T1.country , T1.circuitRef FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN qualifying AS T3 ON T2.raceId = T3.raceId WHERE T3.q3 = value",
                -13.535026550292969
            ],
            [
                "SELECT DISTINCT T1.country , T1.circuitRef FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = value",
                -13.548025131225586
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = value",
                -15.07594108581543
            ]
        ],
        "predicted_parse_with_values": "SELECT T1.country , T1.circuitRef FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = \"Lewis\"",
        "template_feedback": "in step 1 , use results table and drivers table in place of circuits table in step 2 , consider the forename equals Lewis conditions in place of the races 's name equals Lewis conditions . find races 's name and year in place of country and circuit reference .",
        "primary_span": [
            [
                4,
                9
            ],
            [
                19,
                24
            ],
            [
                36,
                41
            ]
        ],
        "secondary_span": [
            [
                10,
                14
            ],
            [
                25,
                35
            ],
            [
                42,
                49
            ]
        ],
        "edits": [
            "name",
            "year",
            "country",
            "circuit reference",
            "results",
            "drivers",
            "circuits",
            "forename equals \"Lewis\"",
            "name equals \"Lewis\""
        ],
        "edits_original": "< select > add name </ select > < select > add year </ select > < select > remove country </ select > < select > remove circuit reference </ select > < from > add results </ from > < from > add drivers </ from > < from > remove circuits </ from > < where > add forename equals \" Lewis \" </ where > < where > remove name equals \" Lewis \" </ where >"
    },
    {
        "db_id": "formula_1",
        "question": "Give me a list of names and years of races that had any driver whose forename is Lewis?",
        "gold_parse": "SELECT T2.name ,  T2.year FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T1.driverid = T3.driverid WHERE T3.forename = \"Lewis\"",
        "predicted_parse": "SELECT T1.country , T1.circuitRef FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = value",
        "predicted_parse_explanation": [
            "Step 1: for each row in circuits table , find the corresponding rows in races table",
            "Step 2: find the country and circuit reference of the results of step 1 whose races 's name equals Lewis"
        ],
        "feedback": "I need drivers table , races's name ,  year and drivers' forename.",
        "beam": [
            [
                "SELECT T1.country , T1.circuitRef FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = value",
                -0.06219196319580078
            ],
            [
                "SELECT T1.country , T1.circuitRef FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T2.url = value",
                -2.9693431854248047
            ],
            [
                "SELECT T1.country , T1.circuitRef FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T2.url = value",
                -5.133143901824951
            ],
            [
                "SELECT country , circuitRef FROM circuits WHERE country = value",
                -6.0930633544921875
            ],
            [
                "SELECT T1.country , T1.circuitRef FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN constructorResults AS T3 ON T2.raceId = T3.raceId WHERE T3.positionText = value",
                -7.599612236022949
            ],
            [
                "SELECT T1.country , T1.circuitRef FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T2.date = value",
                -8.909180641174316
            ],
            [
                "SELECT country , circuitRef FROM circuits WHERE alt = value",
                -9.650297164916992
            ],
            [
                "SELECT country , circuitRef FROM circuits WHERE circuitRef = value",
                -10.758898735046387
            ],
            [
                "SELECT T1.country , T1.circuitRef FROM circuits AS T1 JOIN results AS T2 WHERE T2.time = value",
                -11.070178031921387
            ],
            [
                "SELECT country , circuitRef FROM circuits",
                -11.136744499206543
            ],
            [
                "SELECT T1.country , T1.circuitRef FROM circuits AS T1 JOIN status AS T2 WHERE T2.code = value",
                -11.272653579711914
            ],
            [
                "SELECT T1.country , T1.circuitRef FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN drivers AS T3 JOIN constructorStandings AS T4 ON T2.raceId = T4.raceId AND T4.driverId = T3.driverId WHERE T3.driverRef = value",
                -12.047981262207031
            ],
            [
                "SELECT T1.country , T1.circuitRef FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T2.time = value",
                -12.5423002243042
            ],
            [
                "SELECT T1.country , T1.circuitRef FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId GROUP BY T2.url HAVING Count ( * ) = value",
                -12.70241403579712
            ],
            [
                "SELECT country , circuitRef FROM circuits GROUP BY country HAVING Count ( * ) = value",
                -12.734364986419678
            ],
            [
                "SELECT country , circuitRef FROM circuits WHERE name = value",
                -12.935205459594727
            ],
            [
                "SELECT T1.country , T1.circuitRef , T1.circuitRef FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = value",
                -13.167710304260254
            ],
            [
                "SELECT T1.country , T1.circuitRef FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN qualifying AS T3 ON T2.raceId = T3.raceId WHERE T3.q3 = value",
                -13.535026550292969
            ],
            [
                "SELECT DISTINCT T1.country , T1.circuitRef FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = value",
                -13.548025131225586
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = value",
                -15.07594108581543
            ]
        ],
        "predicted_parse_with_values": "SELECT T1.country , T1.circuitRef FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = \"Lewis\"",
        "template_feedback": "in step 1 , use results table and drivers table in place of circuits table in step 2 , consider the forename equals Lewis conditions in place of the races 's name equals Lewis conditions . find races 's name and year in place of country and circuit reference .",
        "primary_span": [
            [
                4,
                9
            ],
            [
                19,
                24
            ],
            [
                36,
                41
            ]
        ],
        "secondary_span": [
            [
                10,
                14
            ],
            [
                25,
                35
            ],
            [
                42,
                49
            ]
        ],
        "edits": [
            "name",
            "year",
            "country",
            "circuit reference",
            "results",
            "drivers",
            "circuits",
            "forename equals \"Lewis\"",
            "name equals \"Lewis\""
        ],
        "edits_original": "< select > add name </ select > < select > add year </ select > < select > remove country </ select > < select > remove circuit reference </ select > < from > add results </ from > < from > add drivers </ from > < from > remove circuits </ from > < where > add forename equals \" Lewis \" </ where > < where > remove name equals \" Lewis \" </ where >"
    },
    {
        "db_id": "formula_1",
        "question": "What is the name of the race held most recently?",
        "gold_parse": "SELECT name FROM races ORDER BY date DESC LIMIT 1",
        "predicted_parse": "SELECT country FROM circuits ORDER BY lat Desc LIMIT value",
        "predicted_parse_explanation": [
            "find the country in circuits table with largest value of latitude"
        ],
        "feedback": "Need to Find name of races with largest value of year instead of given step .",
        "beam": [
            [
                "SELECT country FROM circuits ORDER BY lat Desc LIMIT value",
                -0.10656929016113281
            ],
            [
                "SELECT country FROM circuits ORDER BY circuitRef Desc LIMIT value",
                -2.404414653778076
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN status AS T2 ORDER BY T2.number Desc LIMIT value",
                -4.591784477233887
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN pitStops AS T3 ON T2.raceId = T3.raceId ORDER BY T3.stop Desc LIMIT value",
                -8.181741714477539
            ],
            [
                "SELECT country FROM circuits ORDER BY country Desc LIMIT value",
                -8.609689712524414
            ],
            [
                "SELECT country FROM circuits ORDER BY lng Desc LIMIT value",
                -9.170257568359375
            ],
            [
                "SELECT country FROM circuits GROUP BY country ORDER BY Count ( * ) Desc LIMIT value",
                -11.215405464172363
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN pitStops AS T3 ON T2.raceId = T3.raceId ORDER BY T3.milliseconds Desc LIMIT value",
                -11.762341499328613
            ],
            [
                "SELECT country FROM circuits ORDER BY location Desc LIMIT value",
                -11.979477882385254
            ],
            [
                "SELECT country FROM circuits ORDER BY lat Desc",
                -12.665818214416504
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN pitStops AS T3 ON T2.raceId = T3.raceId ORDER BY T3.time Desc LIMIT value",
                -12.705777168273926
            ],
            [
                "SELECT country FROM circuits ORDER BY alt Desc LIMIT value",
                -12.728630065917969
            ],
            [
                "SELECT country FROM circuits ORDER BY * Desc LIMIT value",
                -13.401150703430176
            ],
            [
                "SELECT country FROM circuits ORDER BY name Desc LIMIT value",
                -13.419206619262695
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN lapTimes AS T3 ON T2.raceId = T3.raceId ORDER BY T3.milliseconds Desc LIMIT value",
                -13.551377296447754
            ],
            [
                "SELECT country FROM circuits ORDER BY lat Asc LIMIT value",
                -13.633036613464355
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN constructorStandings AS T3 ON T2.raceId = T3.raceId ORDER BY T3.raceId Desc LIMIT value",
                -13.724122047424316
            ],
            [
                "SELECT country FROM circuits WHERE circuitRef = ( SELECT Max ( lat ) FROM circuits )",
                -13.849133968353271
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN lapTimes AS T3 ON T2.raceId = T3.raceId ORDER BY T3.time Desc LIMIT value",
                -14.079781532287598
            ],
            [
                "SELECT country FROM circuits",
                -15.642447471618652
            ]
        ],
        "predicted_parse_with_values": "SELECT country FROM circuits ORDER BY lat Desc LIMIT 1",
        "template_feedback": "use races table in place of circuits table . find races 's name in place of country . order the results by date in place of latitude .",
        "primary_span": [
            [
                0,
                2
            ],
            [
                9,
                12
            ],
            [
                18,
                22
            ]
        ],
        "secondary_span": [
            [
                3,
                8
            ],
            [
                13,
                17
            ],
            [
                23,
                27
            ]
        ],
        "edits": [
            "name",
            "country",
            "races",
            "circuits",
            "date",
            "latitude"
        ],
        "edits_original": "< select > add name </ select > < select > remove country </ select > < from > add races </ from > < from > remove circuits </ from > < orderBy > add date </ orderBy > < orderBy > remove latitude </ orderBy >"
    },
    {
        "db_id": "formula_1",
        "question": "What is the name of the race held most recently?",
        "gold_parse": "SELECT name FROM races ORDER BY date DESC LIMIT 1",
        "predicted_parse": "SELECT country FROM circuits ORDER BY lat Desc LIMIT value",
        "predicted_parse_explanation": [
            "find the country in circuits table with largest value of latitude"
        ],
        "feedback": "Look for name of races which have highest value of the year.",
        "beam": [
            [
                "SELECT country FROM circuits ORDER BY lat Desc LIMIT value",
                -0.10656929016113281
            ],
            [
                "SELECT country FROM circuits ORDER BY circuitRef Desc LIMIT value",
                -2.404414653778076
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN status AS T2 ORDER BY T2.number Desc LIMIT value",
                -4.591784477233887
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN pitStops AS T3 ON T2.raceId = T3.raceId ORDER BY T3.stop Desc LIMIT value",
                -8.181741714477539
            ],
            [
                "SELECT country FROM circuits ORDER BY country Desc LIMIT value",
                -8.609689712524414
            ],
            [
                "SELECT country FROM circuits ORDER BY lng Desc LIMIT value",
                -9.170257568359375
            ],
            [
                "SELECT country FROM circuits GROUP BY country ORDER BY Count ( * ) Desc LIMIT value",
                -11.215405464172363
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN pitStops AS T3 ON T2.raceId = T3.raceId ORDER BY T3.milliseconds Desc LIMIT value",
                -11.762341499328613
            ],
            [
                "SELECT country FROM circuits ORDER BY location Desc LIMIT value",
                -11.979477882385254
            ],
            [
                "SELECT country FROM circuits ORDER BY lat Desc",
                -12.665818214416504
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN pitStops AS T3 ON T2.raceId = T3.raceId ORDER BY T3.time Desc LIMIT value",
                -12.705777168273926
            ],
            [
                "SELECT country FROM circuits ORDER BY alt Desc LIMIT value",
                -12.728630065917969
            ],
            [
                "SELECT country FROM circuits ORDER BY * Desc LIMIT value",
                -13.401150703430176
            ],
            [
                "SELECT country FROM circuits ORDER BY name Desc LIMIT value",
                -13.419206619262695
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN lapTimes AS T3 ON T2.raceId = T3.raceId ORDER BY T3.milliseconds Desc LIMIT value",
                -13.551377296447754
            ],
            [
                "SELECT country FROM circuits ORDER BY lat Asc LIMIT value",
                -13.633036613464355
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN constructorStandings AS T3 ON T2.raceId = T3.raceId ORDER BY T3.raceId Desc LIMIT value",
                -13.724122047424316
            ],
            [
                "SELECT country FROM circuits WHERE circuitRef = ( SELECT Max ( lat ) FROM circuits )",
                -13.849133968353271
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN lapTimes AS T3 ON T2.raceId = T3.raceId ORDER BY T3.time Desc LIMIT value",
                -14.079781532287598
            ],
            [
                "SELECT country FROM circuits",
                -15.642447471618652
            ]
        ],
        "predicted_parse_with_values": "SELECT country FROM circuits ORDER BY lat Desc LIMIT 1",
        "template_feedback": "use races table in place of circuits table . find races 's name in place of country . order the results by date in place of latitude .",
        "primary_span": [
            [
                0,
                2
            ],
            [
                9,
                12
            ],
            [
                18,
                22
            ]
        ],
        "secondary_span": [
            [
                3,
                8
            ],
            [
                13,
                17
            ],
            [
                23,
                27
            ]
        ],
        "edits": [
            "name",
            "country",
            "races",
            "circuits",
            "date",
            "latitude"
        ],
        "edits_original": "< select > add name </ select > < select > remove country </ select > < from > add races </ from > < from > remove circuits </ from > < orderBy > add date </ orderBy > < orderBy > remove latitude </ orderBy >"
    },
    {
        "db_id": "formula_1",
        "question": "Find all the distinct id and nationality of drivers who have had laptime more than 100000 milliseconds?",
        "gold_parse": "SELECT DISTINCT T1.driverid ,  T1.nationality FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds >  100000",
        "predicted_parse": "SELECT DISTINCT T1.driverId , T1.driverRef FROM drivers AS T1 JOIN lapTimes AS T2 ON T1.driverId = T2.driverId WHERE T2.milliseconds > value",
        "predicted_parse_explanation": [
            "Step 1: for each row in drivers table , find the corresponding rows in lap times table",
            "Step 2: find without repetition drivers 's driver id and driver reference of the results of step 1 whose milliseconds greater than 100000"
        ],
        "feedback": "Replace driver Reference with nationality .",
        "beam": [
            [
                "SELECT DISTINCT T1.driverId , T1.driverRef FROM drivers AS T1 JOIN lapTimes AS T2 ON T1.driverId = T2.driverId WHERE T2.milliseconds > value",
                -0.23173046112060547
            ],
            [
                "SELECT DISTINCT T1.driverId , T1.driverRef FROM drivers AS T1 JOIN constructorStandings AS T2 ON T1.driverId = T2.driverId WHERE T2.constructorId > value",
                -1.8242549896240234
            ],
            [
                "SELECT DISTINCT T1.driverId , T1.driverRef FROM drivers AS T1 JOIN pitStops AS T2 ON T1.driverId = T2.driverId WHERE T2.milliseconds > value",
                -3.7035350799560547
            ],
            [
                "SELECT DISTINCT driverId , driverRef FROM drivers GROUP BY driverId HAVING Count ( * ) > value",
                -4.038058280944824
            ],
            [
                "SELECT DISTINCT T1.driverId , T1.driverRef FROM drivers AS T1 JOIN lapTimes AS T2 ON T1.driverId = T2.driverId GROUP BY T1.driverId HAVING Avg ( T2.milliseconds ) > value",
                -6.525397300720215
            ],
            [
                "SELECT DISTINCT T1.driverId , T1.driverRef FROM drivers AS T1 JOIN constructorStandings AS T2 ON T1.driverId = T2.driverId GROUP BY T1.driverId HAVING Avg ( T2.constructorId ) > value",
                -7.708003044128418
            ],
            [
                "SELECT DISTINCT T1.driverId , T1.driverRef FROM drivers AS T1 JOIN driverStandings AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId > value",
                -8.149882316589355
            ],
            [
                "SELECT DISTINCT T1.driverId , T1.driverRef FROM drivers AS T1 JOIN constructorStandings AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId > value",
                -8.47484016418457
            ],
            [
                "SELECT DISTINCT T1.driverId , T1.driverRef FROM drivers AS T1 JOIN pitStops AS T2 ON T1.driverId = T2.driverId WHERE T2.duration > value",
                -8.533954620361328
            ],
            [
                "SELECT DISTINCT T1.driverId , T1.driverRef FROM drivers AS T1 JOIN lapTimes AS T2 ON T1.driverId = T2.driverId GROUP BY T2.driverId HAVING Count ( * ) > value",
                -8.691887855529785
            ],
            [
                "SELECT DISTINCT T1.driverId , T1.driverRef FROM drivers AS T1 JOIN constructorStandings AS T2 ON T1.driverId = T2.driverId WHERE T2.resultId > value",
                -9.150372505187988
            ],
            [
                "SELECT DISTINCT T1.driverId , T1.driverRef FROM drivers AS T1 JOIN pitStops AS T2 ON T1.driverId = T2.driverId GROUP BY T1.driverId HAVING Avg ( T2.milliseconds ) > value",
                -9.25027084350586
            ],
            [
                "SELECT DISTINCT T1.driverId , T1.driverRef FROM drivers AS T1 JOIN results AS T2 WHERE T2.milliseconds > value",
                -9.791807174682617
            ],
            [
                "SELECT DISTINCT driverId , driverRef FROM drivers",
                -10.634299278259277
            ],
            [
                "SELECT DISTINCT T1.driverId , T1.driverRef FROM drivers AS T1 JOIN lapTimes AS T2 ON T1.driverId = T2.driverId GROUP BY T1.driverId HAVING Max ( T2.milliseconds ) > value",
                -10.745085716247559
            ],
            [
                "SELECT DISTINCT T1.driverId , T1.driverRef FROM drivers AS T1 JOIN lapTimes AS T2 ON T1.driverId = T2.driverId WHERE T2.milliseconds > value GROUP BY T1.driverId HAVING Count ( * ) > value",
                -10.766019821166992
            ],
            [
                "SELECT DISTINCT T1.driverId , T1.driverRef FROM drivers AS T1 JOIN driverStandings AS T2 ON T1.driverId = T2.driverId GROUP BY T1.driverId HAVING Avg ( T2.raceId ) > value",
                -11.507588386535645
            ],
            [
                "SELECT DISTINCT T1.driverId , T1.driverRef FROM drivers AS T1 JOIN lapTimes AS T2 ON T1.driverId = T2.driverId WHERE T2.milliseconds > value GROUP BY T1.driverId",
                -11.685403823852539
            ],
            [
                "SELECT T1.driverId , T1.driverRef FROM drivers AS T1 JOIN lapTimes AS T2 ON T1.driverId = T2.driverId WHERE T2.milliseconds > value",
                -11.767117500305176
            ],
            [
                "SELECT DISTINCT T2.driverId , T2.driverRef FROM races AS T1 JOIN drivers AS T2 JOIN constructorStandings AS T3 ON T1.raceId = T3.raceId AND T3.driverId = T2.driverId WHERE T1.year > value",
                -11.989503860473633
            ]
        ],
        "predicted_parse_with_values": "SELECT DISTINCT T1.driverId , T1.driverRef FROM drivers AS T1 JOIN lapTimes AS T2 ON T1.driverId = T2.driverId WHERE T2.milliseconds > 100000",
        "template_feedback": "in step 2 , find nationality in place of driver reference .",
        "primary_span": [
            [
                4,
                5
            ]
        ],
        "secondary_span": [
            [
                6,
                11
            ]
        ],
        "edits": [
            "nationality",
            "driver reference"
        ],
        "edits_original": "< select > add nationality </ select > < select > remove driver reference </ select >"
    },
    {
        "db_id": "formula_1",
        "question": "Find all the distinct id and nationality of drivers who have had laptime more than 100000 milliseconds?",
        "gold_parse": "SELECT DISTINCT T1.driverid ,  T1.nationality FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds >  100000",
        "predicted_parse": "SELECT DISTINCT T1.driverId , T1.driverRef FROM drivers AS T1 JOIN lapTimes AS T2 ON T1.driverId = T2.driverId WHERE T2.milliseconds > value",
        "predicted_parse_explanation": [
            "Step 1: for each row in drivers table , find the corresponding rows in lap times table",
            "Step 2: find without repetition drivers 's driver id and driver reference of the results of step 1 whose milliseconds greater than 100000"
        ],
        "feedback": "You have to substitute nationality in place of driver reference.",
        "beam": [
            [
                "SELECT DISTINCT T1.driverId , T1.driverRef FROM drivers AS T1 JOIN lapTimes AS T2 ON T1.driverId = T2.driverId WHERE T2.milliseconds > value",
                -0.23173046112060547
            ],
            [
                "SELECT DISTINCT T1.driverId , T1.driverRef FROM drivers AS T1 JOIN constructorStandings AS T2 ON T1.driverId = T2.driverId WHERE T2.constructorId > value",
                -1.8242549896240234
            ],
            [
                "SELECT DISTINCT T1.driverId , T1.driverRef FROM drivers AS T1 JOIN pitStops AS T2 ON T1.driverId = T2.driverId WHERE T2.milliseconds > value",
                -3.7035350799560547
            ],
            [
                "SELECT DISTINCT driverId , driverRef FROM drivers GROUP BY driverId HAVING Count ( * ) > value",
                -4.038058280944824
            ],
            [
                "SELECT DISTINCT T1.driverId , T1.driverRef FROM drivers AS T1 JOIN lapTimes AS T2 ON T1.driverId = T2.driverId GROUP BY T1.driverId HAVING Avg ( T2.milliseconds ) > value",
                -6.525397300720215
            ],
            [
                "SELECT DISTINCT T1.driverId , T1.driverRef FROM drivers AS T1 JOIN constructorStandings AS T2 ON T1.driverId = T2.driverId GROUP BY T1.driverId HAVING Avg ( T2.constructorId ) > value",
                -7.708003044128418
            ],
            [
                "SELECT DISTINCT T1.driverId , T1.driverRef FROM drivers AS T1 JOIN driverStandings AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId > value",
                -8.149882316589355
            ],
            [
                "SELECT DISTINCT T1.driverId , T1.driverRef FROM drivers AS T1 JOIN constructorStandings AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId > value",
                -8.47484016418457
            ],
            [
                "SELECT DISTINCT T1.driverId , T1.driverRef FROM drivers AS T1 JOIN pitStops AS T2 ON T1.driverId = T2.driverId WHERE T2.duration > value",
                -8.533954620361328
            ],
            [
                "SELECT DISTINCT T1.driverId , T1.driverRef FROM drivers AS T1 JOIN lapTimes AS T2 ON T1.driverId = T2.driverId GROUP BY T2.driverId HAVING Count ( * ) > value",
                -8.691887855529785
            ],
            [
                "SELECT DISTINCT T1.driverId , T1.driverRef FROM drivers AS T1 JOIN constructorStandings AS T2 ON T1.driverId = T2.driverId WHERE T2.resultId > value",
                -9.150372505187988
            ],
            [
                "SELECT DISTINCT T1.driverId , T1.driverRef FROM drivers AS T1 JOIN pitStops AS T2 ON T1.driverId = T2.driverId GROUP BY T1.driverId HAVING Avg ( T2.milliseconds ) > value",
                -9.25027084350586
            ],
            [
                "SELECT DISTINCT T1.driverId , T1.driverRef FROM drivers AS T1 JOIN results AS T2 WHERE T2.milliseconds > value",
                -9.791807174682617
            ],
            [
                "SELECT DISTINCT driverId , driverRef FROM drivers",
                -10.634299278259277
            ],
            [
                "SELECT DISTINCT T1.driverId , T1.driverRef FROM drivers AS T1 JOIN lapTimes AS T2 ON T1.driverId = T2.driverId GROUP BY T1.driverId HAVING Max ( T2.milliseconds ) > value",
                -10.745085716247559
            ],
            [
                "SELECT DISTINCT T1.driverId , T1.driverRef FROM drivers AS T1 JOIN lapTimes AS T2 ON T1.driverId = T2.driverId WHERE T2.milliseconds > value GROUP BY T1.driverId HAVING Count ( * ) > value",
                -10.766019821166992
            ],
            [
                "SELECT DISTINCT T1.driverId , T1.driverRef FROM drivers AS T1 JOIN driverStandings AS T2 ON T1.driverId = T2.driverId GROUP BY T1.driverId HAVING Avg ( T2.raceId ) > value",
                -11.507588386535645
            ],
            [
                "SELECT DISTINCT T1.driverId , T1.driverRef FROM drivers AS T1 JOIN lapTimes AS T2 ON T1.driverId = T2.driverId WHERE T2.milliseconds > value GROUP BY T1.driverId",
                -11.685403823852539
            ],
            [
                "SELECT T1.driverId , T1.driverRef FROM drivers AS T1 JOIN lapTimes AS T2 ON T1.driverId = T2.driverId WHERE T2.milliseconds > value",
                -11.767117500305176
            ],
            [
                "SELECT DISTINCT T2.driverId , T2.driverRef FROM races AS T1 JOIN drivers AS T2 JOIN constructorStandings AS T3 ON T1.raceId = T3.raceId AND T3.driverId = T2.driverId WHERE T1.year > value",
                -11.989503860473633
            ]
        ],
        "predicted_parse_with_values": "SELECT DISTINCT T1.driverId , T1.driverRef FROM drivers AS T1 JOIN lapTimes AS T2 ON T1.driverId = T2.driverId WHERE T2.milliseconds > 100000",
        "template_feedback": "in step 2 , find nationality in place of driver reference .",
        "primary_span": [
            [
                4,
                5
            ]
        ],
        "secondary_span": [
            [
                6,
                11
            ]
        ],
        "edits": [
            "nationality",
            "driver reference"
        ],
        "edits_original": "< select > add nationality </ select > < select > remove driver reference </ select >"
    },
    {
        "db_id": "formula_1",
        "question": "What are the forename and surname of the driver who has the smallest laptime?",
        "gold_parse": "SELECT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds LIMIT 1",
        "predicted_parse": "SELECT circuitId , name FROM races GROUP BY url ORDER BY Count ( * ) Asc LIMIT value",
        "predicted_parse_explanation": [
            "Step 1: find the number of rows of each value of url in races table",
            "Step 2: find the circuit id and name in races table with smallest value in the results of step 1"
        ],
        "feedback": "Replace url in races , circuit Id , name , races table with lap times in milliseconds , forename , surname and drivers table respectively .",
        "beam": [
            [
                "SELECT circuitId , name FROM races GROUP BY url ORDER BY Count ( * ) Asc LIMIT value",
                -0.7868461608886719
            ],
            [
                "SELECT name , name FROM races GROUP BY url ORDER BY Count ( * ) Asc LIMIT value",
                -0.9563694000244141
            ],
            [
                "SELECT circuitId , name FROM races ORDER BY name Asc LIMIT value",
                -3.5360395908355713
            ],
            [
                "SELECT T1.circuitId , T1.name FROM races AS T1 JOIN constructorResults AS T2 ON T1.raceId = T2.raceId GROUP BY T2.positionText ORDER BY Count ( * ) Asc LIMIT value",
                -4.101469993591309
            ],
            [
                "SELECT name , name FROM races ORDER BY name Asc LIMIT value",
                -4.134820222854614
            ],
            [
                "SELECT url , name FROM races GROUP BY url ORDER BY Count ( * ) Asc LIMIT value",
                -4.160310745239258
            ],
            [
                "SELECT T1.name , T1.name FROM races AS T1 JOIN constructorResults AS T2 ON T1.raceId = T2.raceId GROUP BY T2.positionText ORDER BY Count ( * ) Asc LIMIT value",
                -4.294106483459473
            ],
            [
                "SELECT T1.circuitId , T1.name FROM races AS T1 JOIN lapTimes AS T2 ON T1.raceId = T2.raceId GROUP BY T2.driverId ORDER BY Count ( * ) Asc LIMIT value",
                -4.393362045288086
            ],
            [
                "SELECT T1.name , T1.name FROM races AS T1 JOIN lapTimes AS T2 ON T1.raceId = T2.raceId GROUP BY T2.driverId ORDER BY Count ( * ) Asc LIMIT value",
                -4.578038215637207
            ],
            [
                "SELECT T2.positionText , T1.name FROM races AS T1 JOIN constructorStandings AS T2 ON T1.raceId = T2.raceId GROUP BY T1.url ORDER BY Count ( * ) Asc LIMIT value",
                -5.106278419494629
            ],
            [
                "SELECT T1.circuitId , T1.name FROM races AS T1 JOIN seasons AS T2 GROUP BY T2.dob ORDER BY Count ( * ) Asc LIMIT value",
                -5.460251808166504
            ],
            [
                "SELECT circuitId , name FROM races ORDER BY url Asc LIMIT value",
                -5.5670318603515625
            ],
            [
                "SELECT T1.name , T1.name FROM races AS T1 JOIN seasons AS T2 GROUP BY T2.dob ORDER BY Count ( * ) Asc LIMIT value",
                -5.644664287567139
            ],
            [
                "SELECT date , name FROM races GROUP BY url ORDER BY Count ( * ) Asc LIMIT value",
                -5.873100280761719
            ],
            [
                "SELECT T1.circuitId , T1.name FROM races AS T1 JOIN results AS T2 GROUP BY T2.time ORDER BY Count ( * ) Asc LIMIT value",
                -5.969090461730957
            ],
            [
                "SELECT T1.circuitId , T1.name FROM races AS T1 JOIN drivers AS T2 JOIN constructorStandings AS T3 ON T1.raceId = T3.raceId AND T3.driverId = T2.driverId GROUP BY T2.driverId ORDER BY Count ( * ) Asc LIMIT value",
                -6.069528579711914
            ],
            [
                "SELECT T1.name , T1.name FROM races AS T1 JOIN results AS T2 GROUP BY T2.time ORDER BY Count ( * ) Asc LIMIT value",
                -6.153672218322754
            ],
            [
                "SELECT name , name FROM races ORDER BY url Asc LIMIT value",
                -6.153916358947754
            ],
            [
                "SELECT T1.name , T1.name FROM races AS T1 JOIN drivers AS T2 JOIN constructorStandings AS T3 ON T1.raceId = T3.raceId AND T3.driverId = T2.driverId GROUP BY T2.driverId ORDER BY Count ( * ) Asc LIMIT value",
                -6.214679718017578
            ],
            [
                "SELECT T2.rank , T1.name FROM races AS T1 JOIN results AS T2 GROUP BY T1.url ORDER BY Count ( * ) Asc LIMIT value",
                -6.29001522064209
            ]
        ],
        "predicted_parse_with_values": "SELECT circuitId , name FROM races GROUP BY url ORDER BY Count ( * ) Asc LIMIT 1",
        "template_feedback": "in step 1 , use lap times table and drivers table in place of races table . do not find for each value of races 's url . in step 2 , find forename and surname in place of name and circuit id . order the results by milliseconds in place of number of rows .",
        "primary_span": [
            [
                4,
                10
            ],
            [
                17,
                27
            ],
            [
                32,
                35
            ],
            [
                44,
                48
            ]
        ],
        "secondary_span": [
            [
                11,
                16
            ],
            [
                36,
                43
            ],
            [
                49,
                55
            ]
        ],
        "edits": [
            "forename",
            "surname",
            "circuit id",
            "name",
            "drivers",
            "lap times",
            "races",
            "url",
            "milliseconds",
            "number of rows"
        ],
        "edits_original": "< select > add forename </ select > < select > add surname </ select > < select > remove circuit id </ select > < select > remove name </ select > < from > add drivers </ from > < from > add lap times </ from > < from > remove races </ from > < groupBy > remove url </ groupBy > < orderBy > add milliseconds </ orderBy > < orderBy > remove number of rows </ orderBy >"
    },
    {
        "db_id": "formula_1",
        "question": "What are the forename and surname of the driver who has the smallest laptime?",
        "gold_parse": "SELECT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds LIMIT 1",
        "predicted_parse": "SELECT circuitId , name FROM races GROUP BY url ORDER BY Count ( * ) Asc LIMIT value",
        "predicted_parse_explanation": [
            "Step 1: find the number of rows of each value of url in races table",
            "Step 2: find the circuit id and name in races table with smallest value in the results of step 1"
        ],
        "feedback": "I want lap times in milliseconds , forename , surname from drivers table.",
        "beam": [
            [
                "SELECT circuitId , name FROM races GROUP BY url ORDER BY Count ( * ) Asc LIMIT value",
                -0.7868461608886719
            ],
            [
                "SELECT name , name FROM races GROUP BY url ORDER BY Count ( * ) Asc LIMIT value",
                -0.9563694000244141
            ],
            [
                "SELECT circuitId , name FROM races ORDER BY name Asc LIMIT value",
                -3.5360395908355713
            ],
            [
                "SELECT T1.circuitId , T1.name FROM races AS T1 JOIN constructorResults AS T2 ON T1.raceId = T2.raceId GROUP BY T2.positionText ORDER BY Count ( * ) Asc LIMIT value",
                -4.101469993591309
            ],
            [
                "SELECT name , name FROM races ORDER BY name Asc LIMIT value",
                -4.134820222854614
            ],
            [
                "SELECT url , name FROM races GROUP BY url ORDER BY Count ( * ) Asc LIMIT value",
                -4.160310745239258
            ],
            [
                "SELECT T1.name , T1.name FROM races AS T1 JOIN constructorResults AS T2 ON T1.raceId = T2.raceId GROUP BY T2.positionText ORDER BY Count ( * ) Asc LIMIT value",
                -4.294106483459473
            ],
            [
                "SELECT T1.circuitId , T1.name FROM races AS T1 JOIN lapTimes AS T2 ON T1.raceId = T2.raceId GROUP BY T2.driverId ORDER BY Count ( * ) Asc LIMIT value",
                -4.393362045288086
            ],
            [
                "SELECT T1.name , T1.name FROM races AS T1 JOIN lapTimes AS T2 ON T1.raceId = T2.raceId GROUP BY T2.driverId ORDER BY Count ( * ) Asc LIMIT value",
                -4.578038215637207
            ],
            [
                "SELECT T2.positionText , T1.name FROM races AS T1 JOIN constructorStandings AS T2 ON T1.raceId = T2.raceId GROUP BY T1.url ORDER BY Count ( * ) Asc LIMIT value",
                -5.106278419494629
            ],
            [
                "SELECT T1.circuitId , T1.name FROM races AS T1 JOIN seasons AS T2 GROUP BY T2.dob ORDER BY Count ( * ) Asc LIMIT value",
                -5.460251808166504
            ],
            [
                "SELECT circuitId , name FROM races ORDER BY url Asc LIMIT value",
                -5.5670318603515625
            ],
            [
                "SELECT T1.name , T1.name FROM races AS T1 JOIN seasons AS T2 GROUP BY T2.dob ORDER BY Count ( * ) Asc LIMIT value",
                -5.644664287567139
            ],
            [
                "SELECT date , name FROM races GROUP BY url ORDER BY Count ( * ) Asc LIMIT value",
                -5.873100280761719
            ],
            [
                "SELECT T1.circuitId , T1.name FROM races AS T1 JOIN results AS T2 GROUP BY T2.time ORDER BY Count ( * ) Asc LIMIT value",
                -5.969090461730957
            ],
            [
                "SELECT T1.circuitId , T1.name FROM races AS T1 JOIN drivers AS T2 JOIN constructorStandings AS T3 ON T1.raceId = T3.raceId AND T3.driverId = T2.driverId GROUP BY T2.driverId ORDER BY Count ( * ) Asc LIMIT value",
                -6.069528579711914
            ],
            [
                "SELECT T1.name , T1.name FROM races AS T1 JOIN results AS T2 GROUP BY T2.time ORDER BY Count ( * ) Asc LIMIT value",
                -6.153672218322754
            ],
            [
                "SELECT name , name FROM races ORDER BY url Asc LIMIT value",
                -6.153916358947754
            ],
            [
                "SELECT T1.name , T1.name FROM races AS T1 JOIN drivers AS T2 JOIN constructorStandings AS T3 ON T1.raceId = T3.raceId AND T3.driverId = T2.driverId GROUP BY T2.driverId ORDER BY Count ( * ) Asc LIMIT value",
                -6.214679718017578
            ],
            [
                "SELECT T2.rank , T1.name FROM races AS T1 JOIN results AS T2 GROUP BY T1.url ORDER BY Count ( * ) Asc LIMIT value",
                -6.29001522064209
            ]
        ],
        "predicted_parse_with_values": "SELECT circuitId , name FROM races GROUP BY url ORDER BY Count ( * ) Asc LIMIT 1",
        "template_feedback": "in step 1 , use lap times table and drivers table in place of races table . do not find for each value of races 's url . in step 2 , find forename and surname in place of name and circuit id . order the results by milliseconds in place of number of rows .",
        "primary_span": [
            [
                4,
                10
            ],
            [
                17,
                27
            ],
            [
                32,
                35
            ],
            [
                44,
                48
            ]
        ],
        "secondary_span": [
            [
                11,
                16
            ],
            [
                36,
                43
            ],
            [
                49,
                55
            ]
        ],
        "edits": [
            "forename",
            "surname",
            "circuit id",
            "name",
            "drivers",
            "lap times",
            "races",
            "url",
            "milliseconds",
            "number of rows"
        ],
        "edits_original": "< select > add forename </ select > < select > add surname </ select > < select > remove circuit id </ select > < select > remove name </ select > < from > add drivers </ from > < from > add lap times </ from > < from > remove races </ from > < groupBy > remove url </ groupBy > < orderBy > add milliseconds </ orderBy > < orderBy > remove number of rows </ orderBy >"
    },
    {
        "db_id": "formula_1",
        "question": "What are the names of all races held after 2000 in Spain?",
        "gold_parse": "SELECT DISTINCT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \"Spain\" AND T1.year > 2000",
        "predicted_parse": "SELECT country FROM circuits WHERE lat > value AND circuitRef > value",
        "predicted_parse_explanation": [
            "find the country in circuits table whose latitude greater than 2000 and circuit reference greater than Spain"
        ],
        "feedback": "Replace country , circuits table , latitude and circuit reference with name , races table , year and country ,  Replace greater than with Equals .",
        "beam": [
            [
                "SELECT country FROM circuits WHERE lat > value AND circuitRef > value",
                -1.208420753479004
            ],
            [
                "SELECT country FROM circuits WHERE lat > value AND lat > value",
                -1.3628807067871094
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN status AS T2 WHERE T1.lat > value AND T2.number > value",
                -1.3922815322875977
            ],
            [
                "SELECT country FROM circuits WHERE lat > value AND circuitRef = value",
                -1.8852081298828125
            ],
            [
                "SELECT country FROM circuits WHERE circuitRef = value AND lat > value",
                -3.6641788482666016
            ],
            [
                "SELECT country FROM circuits WHERE lat > value",
                -5.420957565307617
            ],
            [
                "SELECT country FROM circuits WHERE lng > value AND circuitRef > value",
                -5.468936443328857
            ],
            [
                "SELECT country FROM circuits WHERE lng > value AND lat > value",
                -5.590874195098877
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN status AS T2 WHERE T1.lng > value AND T2.number > value",
                -5.686431407928467
            ],
            [
                "SELECT country FROM circuits WHERE lat > value AND lng > value",
                -6.774005889892578
            ],
            [
                "SELECT country FROM circuits WHERE lng > value AND circuitRef = value",
                -7.502566814422607
            ],
            [
                "SELECT country FROM circuits WHERE lat > value AND circuitRef < value",
                -8.185795783996582
            ],
            [
                "SELECT country FROM circuits WHERE circuitRef = value AND circuitRef > value",
                -8.270676612854004
            ],
            [
                "SELECT country FROM circuits WHERE circuitRef > value",
                -8.795004844665527
            ],
            [
                "SELECT country FROM circuits WHERE circuitRef > value AND circuitRef > value",
                -8.887151718139648
            ],
            [
                "SELECT country FROM circuits GROUP BY country HAVING Count ( * ) > value",
                -9.72330617904663
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN status AS T2 WHERE T2.number > value",
                -10.59250259399414
            ],
            [
                "SELECT country FROM circuits WHERE circuitRef = value",
                -11.330488204956055
            ],
            [
                "SELECT country FROM circuits WHERE lng > value",
                -11.627354621887207
            ],
            [
                "SELECT country FROM circuits",
                -13.4032621383667
            ]
        ],
        "predicted_parse_with_values": "SELECT country FROM circuits WHERE lat > 2000 AND circuitRef > \"Spain\"",
        "template_feedback": "additionally use the information from the races table besides the circuits table . consider the year greater than 2000 and country equals Spain conditions in place of the circuit reference greater than Spain and latitude greater than 2000 conditions . find races 's name in place of country . make sure no repetition in the results .",
        "primary_span": [
            [
                0,
                7
            ],
            [
                13,
                23
            ],
            [
                40,
                43
            ],
            [
                49,
                56
            ]
        ],
        "secondary_span": [
            [
                8,
                12
            ],
            [
                24,
                39
            ],
            [
                44,
                48
            ]
        ],
        "edits": [
            "distinct",
            "name",
            "country",
            "races",
            "country equals \"Spain\"",
            "year greater than 2000",
            "latitude greater than 2000",
            "circuit reference greater than \"Spain\""
        ],
        "edits_original": "< select > add distinct </ select > < select > add name </ select > < select > remove country </ select > < from > add races </ from > < where > add country equals \" Spain \" </ where > < where > add year greater than 2000 </ where > < where > remove latitude greater than 2000 </ where > < where > remove circuit reference greater than \" Spain \" </ where >"
    },
    {
        "db_id": "formula_1",
        "question": "What are the names of all races held after 2000 in Spain?",
        "gold_parse": "SELECT DISTINCT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \"Spain\" AND T1.year > 2000",
        "predicted_parse": "SELECT country FROM circuits WHERE lat > value AND circuitRef > value",
        "predicted_parse_explanation": [
            "find the country in circuits table whose latitude greater than 2000 and circuit reference greater than Spain"
        ],
        "feedback": "I want  name , year and country from races table and use equals instead of greater than.",
        "beam": [
            [
                "SELECT country FROM circuits WHERE lat > value AND circuitRef > value",
                -1.208420753479004
            ],
            [
                "SELECT country FROM circuits WHERE lat > value AND lat > value",
                -1.3628807067871094
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN status AS T2 WHERE T1.lat > value AND T2.number > value",
                -1.3922815322875977
            ],
            [
                "SELECT country FROM circuits WHERE lat > value AND circuitRef = value",
                -1.8852081298828125
            ],
            [
                "SELECT country FROM circuits WHERE circuitRef = value AND lat > value",
                -3.6641788482666016
            ],
            [
                "SELECT country FROM circuits WHERE lat > value",
                -5.420957565307617
            ],
            [
                "SELECT country FROM circuits WHERE lng > value AND circuitRef > value",
                -5.468936443328857
            ],
            [
                "SELECT country FROM circuits WHERE lng > value AND lat > value",
                -5.590874195098877
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN status AS T2 WHERE T1.lng > value AND T2.number > value",
                -5.686431407928467
            ],
            [
                "SELECT country FROM circuits WHERE lat > value AND lng > value",
                -6.774005889892578
            ],
            [
                "SELECT country FROM circuits WHERE lng > value AND circuitRef = value",
                -7.502566814422607
            ],
            [
                "SELECT country FROM circuits WHERE lat > value AND circuitRef < value",
                -8.185795783996582
            ],
            [
                "SELECT country FROM circuits WHERE circuitRef = value AND circuitRef > value",
                -8.270676612854004
            ],
            [
                "SELECT country FROM circuits WHERE circuitRef > value",
                -8.795004844665527
            ],
            [
                "SELECT country FROM circuits WHERE circuitRef > value AND circuitRef > value",
                -8.887151718139648
            ],
            [
                "SELECT country FROM circuits GROUP BY country HAVING Count ( * ) > value",
                -9.72330617904663
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN status AS T2 WHERE T2.number > value",
                -10.59250259399414
            ],
            [
                "SELECT country FROM circuits WHERE circuitRef = value",
                -11.330488204956055
            ],
            [
                "SELECT country FROM circuits WHERE lng > value",
                -11.627354621887207
            ],
            [
                "SELECT country FROM circuits",
                -13.4032621383667
            ]
        ],
        "predicted_parse_with_values": "SELECT country FROM circuits WHERE lat > 2000 AND circuitRef > \"Spain\"",
        "template_feedback": "additionally use the information from the races table besides the circuits table . consider the year greater than 2000 and country equals Spain conditions in place of the circuit reference greater than Spain and latitude greater than 2000 conditions . find races 's name in place of country . make sure no repetition in the results .",
        "primary_span": [
            [
                0,
                7
            ],
            [
                13,
                23
            ],
            [
                40,
                43
            ],
            [
                49,
                56
            ]
        ],
        "secondary_span": [
            [
                8,
                12
            ],
            [
                24,
                39
            ],
            [
                44,
                48
            ]
        ],
        "edits": [
            "distinct",
            "name",
            "country",
            "races",
            "country equals \"Spain\"",
            "year greater than 2000",
            "latitude greater than 2000",
            "circuit reference greater than \"Spain\""
        ],
        "edits_original": "< select > add distinct </ select > < select > add name </ select > < select > remove country </ select > < from > add races </ from > < where > add country equals \" Spain \" </ where > < where > add year greater than 2000 </ where > < where > remove latitude greater than 2000 </ where > < where > remove circuit reference greater than \" Spain \" </ where >"
    },
    {
        "db_id": "formula_1",
        "question": "What are the names of all races that occurred after 12:00:00 or before 09:00:00?",
        "gold_parse": "SELECT name FROM races WHERE TIME > \"12:00:00\" OR TIME < \"09:00:00\"",
        "predicted_parse": "SELECT country FROM circuits WHERE lat > value OR lat < value",
        "predicted_parse_explanation": [
            "find the country in circuits table whose latitude greater than 09:00:00 or latitude less than 12:00:00"
        ],
        "feedback": "Replace country , circuits table and latitiude with name , races table and time .",
        "beam": [
            [
                "SELECT country FROM circuits WHERE lat > value OR lat < value",
                -1.3102197647094727
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN lapTimes AS T3 ON T2.raceId = T3.raceId WHERE T3.milliseconds > value OR T1.lat < value",
                -1.732731819152832
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN lapTimes AS T3 ON T2.raceId = T3.raceId WHERE T1.lat > value OR T3.milliseconds < value",
                -1.878911018371582
            ],
            [
                "SELECT country FROM circuits WHERE lat > value OR circuitRef < value",
                -2.070110321044922
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN lapTimes AS T3 ON T2.raceId = T3.raceId WHERE T3.milliseconds > value OR T3.milliseconds < value",
                -2.1786985397338867
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN lapTimes AS T3 ON T2.raceId = T3.raceId WHERE T3.milliseconds > value OR T1.circuitRef < value",
                -2.4728193283081055
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN pitStops AS T3 ON T2.raceId = T3.raceId WHERE T3.milliseconds > value OR T1.lat < value",
                -3.9055585861206055
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId AND T1.circuitId = T2.circuitId JOIN pitStops AS T3 ON T2.raceId = T3.raceId JOIN lapTimes AS T4 ON T2.raceId = T4.raceId WHERE T3.milliseconds > value OR T4.milliseconds < value",
                -4.332701683044434
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN pitStops AS T3 ON T2.raceId = T3.raceId WHERE T3.milliseconds > value OR T1.circuitRef < value",
                -4.589239120483398
            ],
            [
                "SELECT country FROM circuits WHERE lng > value OR lat < value",
                -5.064492225646973
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN status AS T2 WHERE T1.lat > value OR T2.number < value",
                -5.193568229675293
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN lapTimes AS T3 ON T2.raceId = T3.raceId WHERE T1.lng > value OR T3.milliseconds < value",
                -5.488483428955078
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN status AS T3 JOIN lapTimes AS T4 ON T2.raceId = T4.raceId WHERE T4.milliseconds > value OR T3.number < value",
                -5.532358169555664
            ],
            [
                "SELECT country FROM circuits WHERE lng > value OR circuitRef < value",
                -5.535933494567871
            ],
            [
                "SELECT country FROM circuits WHERE lat > value OR lng < value",
                -5.594632148742676
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN lapTimes AS T3 ON T2.raceId = T3.raceId WHERE T3.milliseconds > value OR T1.lng < value",
                -6.218173980712891
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN pitStops AS T3 ON T2.raceId = T3.raceId WHERE T1.lat > value OR T3.milliseconds < value",
                -7.455517768859863
            ],
            [
                "SELECT country FROM circuits WHERE lat > = value",
                -10.494550704956055
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN lapTimes AS T3 ON T2.raceId = T3.raceId WHERE T3.milliseconds > = value",
                -10.826631546020508
            ],
            [
                "SELECT country FROM circuits",
                -13.882953643798828
            ]
        ],
        "predicted_parse_with_values": "SELECT country FROM circuits WHERE lat > \"09:00:00\" OR lat < \"12:00:00\"",
        "template_feedback": "use races table in place of circuits table . consider the time less than 09:00:00 or time greater than 12:00:00 conditions in place of the latitude less than 12:00:00 or latitude greater than 09:00:00 conditions . find races 's name in place of country .",
        "primary_span": [
            [
                0,
                2
            ],
            [
                9,
                20
            ],
            [
                36,
                39
            ]
        ],
        "secondary_span": [
            [
                3,
                8
            ],
            [
                21,
                35
            ],
            [
                40,
                44
            ]
        ],
        "edits": [
            "name",
            "country",
            "races",
            "circuits",
            "time greater than \"12:00:00\" or time less than \"09:00:00\"",
            "latitude greater than \"09:00:00\" or latitude less than \"12:00:00\""
        ],
        "edits_original": "< select > add name </ select > < select > remove country </ select > < from > add races </ from > < from > remove circuits </ from > < where > add time greater than \" 12:00:00 \" or time less than \" 09:00:00 \" </ where > < where > remove latitude greater than \" 09:00:00 \" or latitude less than \" 12:00:00 \" </ where >"
    },
    {
        "db_id": "formula_1",
        "question": "What are the names of all races that occurred after 12:00:00 or before 09:00:00?",
        "gold_parse": "SELECT name FROM races WHERE TIME > \"12:00:00\" OR TIME < \"09:00:00\"",
        "predicted_parse": "SELECT country FROM circuits WHERE lat > value OR lat < value",
        "predicted_parse_explanation": [
            "find the country in circuits table whose latitude greater than 09:00:00 or latitude less than 12:00:00"
        ],
        "feedback": "There should be name, races table and time in place of country, circuits table and latitude.",
        "beam": [
            [
                "SELECT country FROM circuits WHERE lat > value OR lat < value",
                -1.3102197647094727
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN lapTimes AS T3 ON T2.raceId = T3.raceId WHERE T3.milliseconds > value OR T1.lat < value",
                -1.732731819152832
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN lapTimes AS T3 ON T2.raceId = T3.raceId WHERE T1.lat > value OR T3.milliseconds < value",
                -1.878911018371582
            ],
            [
                "SELECT country FROM circuits WHERE lat > value OR circuitRef < value",
                -2.070110321044922
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN lapTimes AS T3 ON T2.raceId = T3.raceId WHERE T3.milliseconds > value OR T3.milliseconds < value",
                -2.1786985397338867
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN lapTimes AS T3 ON T2.raceId = T3.raceId WHERE T3.milliseconds > value OR T1.circuitRef < value",
                -2.4728193283081055
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN pitStops AS T3 ON T2.raceId = T3.raceId WHERE T3.milliseconds > value OR T1.lat < value",
                -3.9055585861206055
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId AND T1.circuitId = T2.circuitId JOIN pitStops AS T3 ON T2.raceId = T3.raceId JOIN lapTimes AS T4 ON T2.raceId = T4.raceId WHERE T3.milliseconds > value OR T4.milliseconds < value",
                -4.332701683044434
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN pitStops AS T3 ON T2.raceId = T3.raceId WHERE T3.milliseconds > value OR T1.circuitRef < value",
                -4.589239120483398
            ],
            [
                "SELECT country FROM circuits WHERE lng > value OR lat < value",
                -5.064492225646973
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN status AS T2 WHERE T1.lat > value OR T2.number < value",
                -5.193568229675293
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN lapTimes AS T3 ON T2.raceId = T3.raceId WHERE T1.lng > value OR T3.milliseconds < value",
                -5.488483428955078
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN status AS T3 JOIN lapTimes AS T4 ON T2.raceId = T4.raceId WHERE T4.milliseconds > value OR T3.number < value",
                -5.532358169555664
            ],
            [
                "SELECT country FROM circuits WHERE lng > value OR circuitRef < value",
                -5.535933494567871
            ],
            [
                "SELECT country FROM circuits WHERE lat > value OR lng < value",
                -5.594632148742676
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN lapTimes AS T3 ON T2.raceId = T3.raceId WHERE T3.milliseconds > value OR T1.lng < value",
                -6.218173980712891
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN pitStops AS T3 ON T2.raceId = T3.raceId WHERE T1.lat > value OR T3.milliseconds < value",
                -7.455517768859863
            ],
            [
                "SELECT country FROM circuits WHERE lat > = value",
                -10.494550704956055
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN lapTimes AS T3 ON T2.raceId = T3.raceId WHERE T3.milliseconds > = value",
                -10.826631546020508
            ],
            [
                "SELECT country FROM circuits",
                -13.882953643798828
            ]
        ],
        "predicted_parse_with_values": "SELECT country FROM circuits WHERE lat > \"09:00:00\" OR lat < \"12:00:00\"",
        "template_feedback": "use races table in place of circuits table . consider the time less than 09:00:00 or time greater than 12:00:00 conditions in place of the latitude less than 12:00:00 or latitude greater than 09:00:00 conditions . find races 's name in place of country .",
        "primary_span": [
            [
                0,
                2
            ],
            [
                9,
                20
            ],
            [
                36,
                39
            ]
        ],
        "secondary_span": [
            [
                3,
                8
            ],
            [
                21,
                35
            ],
            [
                40,
                44
            ]
        ],
        "edits": [
            "name",
            "country",
            "races",
            "circuits",
            "time greater than \"12:00:00\" or time less than \"09:00:00\"",
            "latitude greater than \"09:00:00\" or latitude less than \"12:00:00\""
        ],
        "edits_original": "< select > add name </ select > < select > remove country </ select > < from > add races </ from > < from > remove circuits </ from > < where > add time greater than \" 12:00:00 \" or time less than \" 09:00:00 \" </ where > < where > remove latitude greater than \" 09:00:00 \" or latitude less than \" 12:00:00 \" </ where >"
    },
    {
        "db_id": "formula_1",
        "question": "What is the id and family name of the driver who has the longest laptime?",
        "gold_parse": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds DESC LIMIT 1",
        "predicted_parse": "SELECT T2.constructorStandingsId , T1.name FROM races AS T1 JOIN constructorStandings AS T2 ON T1.raceId = T2.raceId ORDER BY T2.constructorId Desc LIMIT value",
        "predicted_parse_explanation": [
            "Step 1: for each row in races table , find the corresponding rows in constructor standings table",
            "Step 2: find the constructor standings id and name of the results of step 1 with largest value of constructor id"
        ],
        "feedback": "Replace constructor standings id , name , constructor id with driver id , driver ref , milliseconds and races table and constructor standings table with drivers and lap times table .",
        "beam": [
            [
                "SELECT T2.constructorStandingsId , T1.name FROM races AS T1 JOIN constructorStandings AS T2 ON T1.raceId = T2.raceId ORDER BY T2.constructorId Desc LIMIT value",
                -0.23754262924194336
            ],
            [
                "SELECT T2.constructorStandingsId , T3.positionText FROM races AS T1 JOIN constructorStandings AS T2 ON T2.raceId = T1.raceId JOIN constructorResults AS T3 ON T1.raceId = T3.raceId ORDER BY T2.constructorId Desc LIMIT value",
                -2.8801770210266113
            ],
            [
                "SELECT constructorStandingsId , positionOrder FROM constructorStandings ORDER BY constructorId Desc LIMIT value",
                -3.1139869689941406
            ],
            [
                "SELECT constructorStandingsId , constructorId FROM constructorStandings ORDER BY constructorId Desc LIMIT value",
                -3.1751928329467773
            ],
            [
                "SELECT constructorStandingsId , constructorStandingsId FROM constructorStandings ORDER BY constructorId Desc LIMIT value",
                -4.062357425689697
            ],
            [
                "SELECT T2.positionOrder , T1.name FROM races AS T1 JOIN constructorStandings AS T2 ON T1.raceId = T2.raceId ORDER BY T2.constructorId Desc LIMIT value",
                -4.420041561126709
            ],
            [
                "SELECT T2.constructorStandingsId , T3.points FROM races AS T1 JOIN constructorStandings AS T2 ON T2.raceId = T1.raceId JOIN constructorResults AS T3 ON T1.raceId = T3.raceId ORDER BY T2.constructorId Desc LIMIT value",
                -4.955637454986572
            ],
            [
                "SELECT T2.constructorStandingsId , T1.url FROM races AS T1 JOIN constructorStandings AS T2 ON T1.raceId = T2.raceId ORDER BY T2.constructorId Desc LIMIT value",
                -5.125632286071777
            ],
            [
                "SELECT T1.constructorStandingsId , T2.time FROM constructorStandings AS T1 JOIN results AS T2 ORDER BY T1.constructorId Desc LIMIT value",
                -5.5582733154296875
            ],
            [
                "SELECT T2.constructorStandingsId , T1.dob FROM seasons AS T1 JOIN constructorStandings AS T2 ORDER BY T2.constructorId Desc LIMIT value",
                -6.113714218139648
            ],
            [
                "SELECT T2.constructorStandingsId , T3.milliseconds FROM drivers AS T1 JOIN constructorStandings AS T2 ON T2.driverId = T1.driverId JOIN lapTimes AS T3 ON T1.driverId = T3.driverId ORDER BY T2.constructorId Desc LIMIT value",
                -6.14726448059082
            ],
            [
                "SELECT T2.constructorStandingsId , T1.name FROM races AS T1 JOIN constructorStandings AS T2 ON T1.raceId = T2.raceId JOIN lapTimes AS T3 ON T1.raceId = T3.raceId ORDER BY T3.milliseconds Desc LIMIT value",
                -6.275730609893799
            ],
            [
                "SELECT T1.constructorStandingsId , T2.points FROM constructorStandings AS T1 JOIN results AS T2 ORDER BY T1.constructorId Desc LIMIT value",
                -6.630555629730225
            ],
            [
                "SELECT T2.constructorStandingsId , T1.driverRef FROM drivers AS T1 JOIN constructorStandings AS T2 ON T1.driverId = T2.driverId ORDER BY T2.constructorId Desc LIMIT value",
                -6.634395599365234
            ],
            [
                "SELECT constructorStandingsId , raceId FROM constructorStandings ORDER BY constructorId Desc LIMIT value",
                -7.037639617919922
            ],
            [
                "SELECT T2.constructorStandingsId , T1.circuitId FROM races AS T1 JOIN constructorStandings AS T2 ON T1.raceId = T2.raceId ORDER BY T2.constructorId Desc LIMIT value",
                -7.098115921020508
            ],
            [
                "SELECT positionOrder , constructorId FROM constructorStandings ORDER BY constructorId Desc LIMIT value",
                -7.138366222381592
            ],
            [
                "SELECT T2.positionOrder , T3.positionText FROM races AS T1 JOIN constructorStandings AS T2 ON T2.raceId = T1.raceId JOIN constructorResults AS T3 ON T1.raceId = T3.raceId ORDER BY T2.constructorId Desc LIMIT value",
                -7.150193214416504
            ],
            [
                "SELECT T2.constructorStandingsId , T3.milliseconds FROM drivers AS T1 JOIN constructorStandings AS T2 ON T2.driverId = T1.driverId JOIN pitStops AS T3 ON T1.driverId = T3.driverId ORDER BY T2.constructorId Desc LIMIT value",
                -7.22761344909668
            ],
            [
                "SELECT constructorStandingsId , positionText FROM constructorStandings ORDER BY constructorId Desc LIMIT value",
                -7.256617546081543
            ]
        ],
        "predicted_parse_with_values": "SELECT T2.constructorStandingsId , T1.name FROM races AS T1 JOIN constructorStandings AS T2 ON T1.raceId = T2.raceId ORDER BY T2.constructorId Desc LIMIT 1",
        "template_feedback": "in step 1 , use lap times table and drivers table in place of constructor standings table and races table in step 2 , find drivers 's driver id and surname in place of name and constructor standings id . order the results by milliseconds in place of constructor id .",
        "primary_span": [
            [
                4,
                10
            ],
            [
                24,
                30
            ],
            [
                40,
                44
            ]
        ],
        "secondary_span": [
            [
                11,
                19
            ],
            [
                31,
                39
            ],
            [
                45,
                50
            ]
        ],
        "edits": [
            "driver id",
            "surname",
            "constructor standings id",
            "name",
            "drivers",
            "lap times",
            "races",
            "constructor standings",
            "milliseconds",
            "constructor id"
        ],
        "edits_original": "< select > add driver id </ select > < select > add surname </ select > < select > remove constructor standings id </ select > < select > remove name </ select > < from > add drivers </ from > < from > add lap times </ from > < from > remove races </ from > < from > remove constructor standings </ from > < orderBy > add milliseconds </ orderBy > < orderBy > remove constructor id </ orderBy >"
    },
    {
        "db_id": "formula_1",
        "question": "What is the id and family name of the driver who has the longest laptime?",
        "gold_parse": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds DESC LIMIT 1",
        "predicted_parse": "SELECT T2.constructorStandingsId , T1.name FROM races AS T1 JOIN constructorStandings AS T2 ON T1.raceId = T2.raceId ORDER BY T2.constructorId Desc LIMIT value",
        "predicted_parse_explanation": [
            "Step 1: for each row in races table , find the corresponding rows in constructor standings table",
            "Step 2: find the constructor standings id and name of the results of step 1 with largest value of constructor id"
        ],
        "feedback": "Replace races table and constructor standings table with drivers and lap times table and return driver id , driver ref , milliseconds .",
        "beam": [
            [
                "SELECT T2.constructorStandingsId , T1.name FROM races AS T1 JOIN constructorStandings AS T2 ON T1.raceId = T2.raceId ORDER BY T2.constructorId Desc LIMIT value",
                -0.23754262924194336
            ],
            [
                "SELECT T2.constructorStandingsId , T3.positionText FROM races AS T1 JOIN constructorStandings AS T2 ON T2.raceId = T1.raceId JOIN constructorResults AS T3 ON T1.raceId = T3.raceId ORDER BY T2.constructorId Desc LIMIT value",
                -2.8801770210266113
            ],
            [
                "SELECT constructorStandingsId , positionOrder FROM constructorStandings ORDER BY constructorId Desc LIMIT value",
                -3.1139869689941406
            ],
            [
                "SELECT constructorStandingsId , constructorId FROM constructorStandings ORDER BY constructorId Desc LIMIT value",
                -3.1751928329467773
            ],
            [
                "SELECT constructorStandingsId , constructorStandingsId FROM constructorStandings ORDER BY constructorId Desc LIMIT value",
                -4.062357425689697
            ],
            [
                "SELECT T2.positionOrder , T1.name FROM races AS T1 JOIN constructorStandings AS T2 ON T1.raceId = T2.raceId ORDER BY T2.constructorId Desc LIMIT value",
                -4.420041561126709
            ],
            [
                "SELECT T2.constructorStandingsId , T3.points FROM races AS T1 JOIN constructorStandings AS T2 ON T2.raceId = T1.raceId JOIN constructorResults AS T3 ON T1.raceId = T3.raceId ORDER BY T2.constructorId Desc LIMIT value",
                -4.955637454986572
            ],
            [
                "SELECT T2.constructorStandingsId , T1.url FROM races AS T1 JOIN constructorStandings AS T2 ON T1.raceId = T2.raceId ORDER BY T2.constructorId Desc LIMIT value",
                -5.125632286071777
            ],
            [
                "SELECT T1.constructorStandingsId , T2.time FROM constructorStandings AS T1 JOIN results AS T2 ORDER BY T1.constructorId Desc LIMIT value",
                -5.5582733154296875
            ],
            [
                "SELECT T2.constructorStandingsId , T1.dob FROM seasons AS T1 JOIN constructorStandings AS T2 ORDER BY T2.constructorId Desc LIMIT value",
                -6.113714218139648
            ],
            [
                "SELECT T2.constructorStandingsId , T3.milliseconds FROM drivers AS T1 JOIN constructorStandings AS T2 ON T2.driverId = T1.driverId JOIN lapTimes AS T3 ON T1.driverId = T3.driverId ORDER BY T2.constructorId Desc LIMIT value",
                -6.14726448059082
            ],
            [
                "SELECT T2.constructorStandingsId , T1.name FROM races AS T1 JOIN constructorStandings AS T2 ON T1.raceId = T2.raceId JOIN lapTimes AS T3 ON T1.raceId = T3.raceId ORDER BY T3.milliseconds Desc LIMIT value",
                -6.275730609893799
            ],
            [
                "SELECT T1.constructorStandingsId , T2.points FROM constructorStandings AS T1 JOIN results AS T2 ORDER BY T1.constructorId Desc LIMIT value",
                -6.630555629730225
            ],
            [
                "SELECT T2.constructorStandingsId , T1.driverRef FROM drivers AS T1 JOIN constructorStandings AS T2 ON T1.driverId = T2.driverId ORDER BY T2.constructorId Desc LIMIT value",
                -6.634395599365234
            ],
            [
                "SELECT constructorStandingsId , raceId FROM constructorStandings ORDER BY constructorId Desc LIMIT value",
                -7.037639617919922
            ],
            [
                "SELECT T2.constructorStandingsId , T1.circuitId FROM races AS T1 JOIN constructorStandings AS T2 ON T1.raceId = T2.raceId ORDER BY T2.constructorId Desc LIMIT value",
                -7.098115921020508
            ],
            [
                "SELECT positionOrder , constructorId FROM constructorStandings ORDER BY constructorId Desc LIMIT value",
                -7.138366222381592
            ],
            [
                "SELECT T2.positionOrder , T3.positionText FROM races AS T1 JOIN constructorStandings AS T2 ON T2.raceId = T1.raceId JOIN constructorResults AS T3 ON T1.raceId = T3.raceId ORDER BY T2.constructorId Desc LIMIT value",
                -7.150193214416504
            ],
            [
                "SELECT T2.constructorStandingsId , T3.milliseconds FROM drivers AS T1 JOIN constructorStandings AS T2 ON T2.driverId = T1.driverId JOIN pitStops AS T3 ON T1.driverId = T3.driverId ORDER BY T2.constructorId Desc LIMIT value",
                -7.22761344909668
            ],
            [
                "SELECT constructorStandingsId , positionText FROM constructorStandings ORDER BY constructorId Desc LIMIT value",
                -7.256617546081543
            ]
        ],
        "predicted_parse_with_values": "SELECT T2.constructorStandingsId , T1.name FROM races AS T1 JOIN constructorStandings AS T2 ON T1.raceId = T2.raceId ORDER BY T2.constructorId Desc LIMIT 1",
        "template_feedback": "in step 1 , use lap times table and drivers table in place of constructor standings table and races table in step 2 , find drivers 's driver id and surname in place of name and constructor standings id . order the results by milliseconds in place of constructor id .",
        "primary_span": [
            [
                4,
                10
            ],
            [
                24,
                30
            ],
            [
                40,
                44
            ]
        ],
        "secondary_span": [
            [
                11,
                19
            ],
            [
                31,
                39
            ],
            [
                45,
                50
            ]
        ],
        "edits": [
            "driver id",
            "surname",
            "constructor standings id",
            "name",
            "drivers",
            "lap times",
            "races",
            "constructor standings",
            "milliseconds",
            "constructor id"
        ],
        "edits_original": "< select > add driver id </ select > < select > add surname </ select > < select > remove constructor standings id </ select > < select > remove name </ select > < from > add drivers </ from > < from > add lap times </ from > < from > remove races </ from > < from > remove constructor standings </ from > < orderBy > add milliseconds </ orderBy > < orderBy > remove constructor id </ orderBy >"
    },
    {
        "db_id": "formula_1",
        "question": "List the forenames of all distinct drivers in alphabetical order?",
        "gold_parse": "SELECT DISTINCT forename FROM drivers ORDER BY forename ASC",
        "predicted_parse": "SELECT DISTINCT name FROM races ORDER BY name Asc",
        "predicted_parse_explanation": [
            "find without repetition name in races table ordered ascending by name"
        ],
        "feedback": "Make sure to find forename for different drivers and replace name by forename .",
        "beam": [
            [
                "SELECT DISTINCT name FROM races ORDER BY name Asc",
                -0.06659269332885742
            ],
            [
                "SELECT DISTINCT T1.name FROM races AS T1 JOIN drivers AS T2 JOIN constructorStandings AS T3 ON T1.raceId = T3.raceId AND T3.driverId = T2.driverId ORDER BY T2.driverRef Asc",
                -3.3282220363616943
            ],
            [
                "SELECT DISTINCT T2.driverRef FROM races AS T1 JOIN drivers AS T2 JOIN constructorStandings AS T3 ON T1.raceId = T3.raceId AND T3.driverId = T2.driverId ORDER BY T1.name Asc",
                -3.814628839492798
            ],
            [
                "SELECT name FROM races ORDER BY name Asc",
                -6.074529647827148
            ],
            [
                "SELECT DISTINCT T2.positionText FROM races AS T1 JOIN constructorStandings AS T2 ON T1.raceId = T2.raceId ORDER BY T1.name Asc",
                -6.788549900054932
            ],
            [
                "SELECT DISTINCT driverRef FROM drivers ORDER BY driverRef Asc",
                -7.0415239334106445
            ],
            [
                "SELECT DISTINCT name FROM races ORDER BY url Asc",
                -7.186188697814941
            ],
            [
                "SELECT DISTINCT name FROM races ORDER BY url Asc",
                -8.78378963470459
            ],
            [
                "SELECT DISTINCT name FROM races ORDER BY * Asc",
                -8.989466667175293
            ],
            [
                "SELECT DISTINCT T1.name FROM races AS T1 JOIN constructorStandings AS T2 ON T1.raceId = T2.raceId ORDER BY T2.positionText Asc",
                -9.06551456451416
            ],
            [
                "SELECT T1.name FROM races AS T1 JOIN drivers AS T2 JOIN constructorStandings AS T3 ON T1.raceId = T3.raceId AND T3.driverId = T2.driverId ORDER BY T2.driverRef Asc",
                -9.420737266540527
            ],
            [
                "SELECT DISTINCT name FROM races ORDER BY date Asc",
                -9.466447830200195
            ],
            [
                "SELECT DISTINCT T1.name FROM races AS T1 JOIN results AS T2 ORDER BY T2.rank Asc",
                -9.492508888244629
            ],
            [
                "SELECT DISTINCT T2.constructorRef FROM races AS T1 JOIN constructors AS T2 JOIN constructorStandings AS T3 ON T1.raceId = T3.raceId AND T3.constructorId = T2.constructorId ORDER BY T1.name Asc",
                -9.846757411956787
            ],
            [
                "SELECT T2.driverRef FROM races AS T1 JOIN drivers AS T2 JOIN constructorStandings AS T3 ON T1.raceId = T3.raceId AND T3.driverId = T2.driverId ORDER BY T1.name Asc",
                -9.931530714035034
            ],
            [
                "SELECT DISTINCT T2.positionText FROM drivers AS T1 JOIN constructorStandings AS T2 ON T1.driverId = T2.driverId ORDER BY T1.driverRef Asc",
                -10.040844678878784
            ],
            [
                "SELECT DISTINCT T1.name FROM races AS T1 JOIN constructors AS T2 JOIN constructorStandings AS T3 ON T1.raceId = T3.raceId AND T3.constructorId = T2.constructorId ORDER BY T2.constructorRef Asc",
                -10.282756805419922
            ],
            [
                "SELECT DISTINCT name FROM races ORDER BY circuitId Asc",
                -10.31375503540039
            ],
            [
                "SELECT DISTINCT name FROM races ORDER BY year Asc",
                -10.446063041687012
            ],
            [
                "SELECT DISTINCT name FROM races",
                -10.643048286437988
            ]
        ],
        "predicted_parse_with_values": "SELECT DISTINCT name FROM races ORDER BY name Asc",
        "template_feedback": "use drivers table in place of races table . find forename in place of name . order the results by forename in place of name .",
        "primary_span": [
            [
                0,
                2
            ],
            [
                9,
                10
            ],
            [
                16,
                20
            ]
        ],
        "secondary_span": [
            [
                3,
                8
            ],
            [
                11,
                15
            ],
            [
                21,
                25
            ]
        ],
        "edits": [
            "forename",
            "name",
            "drivers",
            "races",
            "forename",
            "name"
        ],
        "edits_original": "< select > add forename </ select > < select > remove name </ select > < from > add drivers </ from > < from > remove races </ from > < orderBy > add forename </ orderBy > < orderBy > remove name </ orderBy >"
    },
    {
        "db_id": "formula_1",
        "question": "List the forenames of all distinct drivers in alphabetical order?",
        "gold_parse": "SELECT DISTINCT forename FROM drivers ORDER BY forename ASC",
        "predicted_parse": "SELECT DISTINCT name FROM races ORDER BY name Asc",
        "predicted_parse_explanation": [
            "find without repetition name in races table ordered ascending by name"
        ],
        "feedback": "Ensure that you return non-identical drivers fornames.",
        "beam": [
            [
                "SELECT DISTINCT name FROM races ORDER BY name Asc",
                -0.06659269332885742
            ],
            [
                "SELECT DISTINCT T1.name FROM races AS T1 JOIN drivers AS T2 JOIN constructorStandings AS T3 ON T1.raceId = T3.raceId AND T3.driverId = T2.driverId ORDER BY T2.driverRef Asc",
                -3.3282220363616943
            ],
            [
                "SELECT DISTINCT T2.driverRef FROM races AS T1 JOIN drivers AS T2 JOIN constructorStandings AS T3 ON T1.raceId = T3.raceId AND T3.driverId = T2.driverId ORDER BY T1.name Asc",
                -3.814628839492798
            ],
            [
                "SELECT name FROM races ORDER BY name Asc",
                -6.074529647827148
            ],
            [
                "SELECT DISTINCT T2.positionText FROM races AS T1 JOIN constructorStandings AS T2 ON T1.raceId = T2.raceId ORDER BY T1.name Asc",
                -6.788549900054932
            ],
            [
                "SELECT DISTINCT driverRef FROM drivers ORDER BY driverRef Asc",
                -7.0415239334106445
            ],
            [
                "SELECT DISTINCT name FROM races ORDER BY url Asc",
                -7.186188697814941
            ],
            [
                "SELECT DISTINCT name FROM races ORDER BY url Asc",
                -8.78378963470459
            ],
            [
                "SELECT DISTINCT name FROM races ORDER BY * Asc",
                -8.989466667175293
            ],
            [
                "SELECT DISTINCT T1.name FROM races AS T1 JOIN constructorStandings AS T2 ON T1.raceId = T2.raceId ORDER BY T2.positionText Asc",
                -9.06551456451416
            ],
            [
                "SELECT T1.name FROM races AS T1 JOIN drivers AS T2 JOIN constructorStandings AS T3 ON T1.raceId = T3.raceId AND T3.driverId = T2.driverId ORDER BY T2.driverRef Asc",
                -9.420737266540527
            ],
            [
                "SELECT DISTINCT name FROM races ORDER BY date Asc",
                -9.466447830200195
            ],
            [
                "SELECT DISTINCT T1.name FROM races AS T1 JOIN results AS T2 ORDER BY T2.rank Asc",
                -9.492508888244629
            ],
            [
                "SELECT DISTINCT T2.constructorRef FROM races AS T1 JOIN constructors AS T2 JOIN constructorStandings AS T3 ON T1.raceId = T3.raceId AND T3.constructorId = T2.constructorId ORDER BY T1.name Asc",
                -9.846757411956787
            ],
            [
                "SELECT T2.driverRef FROM races AS T1 JOIN drivers AS T2 JOIN constructorStandings AS T3 ON T1.raceId = T3.raceId AND T3.driverId = T2.driverId ORDER BY T1.name Asc",
                -9.931530714035034
            ],
            [
                "SELECT DISTINCT T2.positionText FROM drivers AS T1 JOIN constructorStandings AS T2 ON T1.driverId = T2.driverId ORDER BY T1.driverRef Asc",
                -10.040844678878784
            ],
            [
                "SELECT DISTINCT T1.name FROM races AS T1 JOIN constructors AS T2 JOIN constructorStandings AS T3 ON T1.raceId = T3.raceId AND T3.constructorId = T2.constructorId ORDER BY T2.constructorRef Asc",
                -10.282756805419922
            ],
            [
                "SELECT DISTINCT name FROM races ORDER BY circuitId Asc",
                -10.31375503540039
            ],
            [
                "SELECT DISTINCT name FROM races ORDER BY year Asc",
                -10.446063041687012
            ],
            [
                "SELECT DISTINCT name FROM races",
                -10.643048286437988
            ]
        ],
        "predicted_parse_with_values": "SELECT DISTINCT name FROM races ORDER BY name Asc",
        "template_feedback": "use drivers table in place of races table . find forename in place of name . order the results by forename in place of name .",
        "primary_span": [
            [
                0,
                2
            ],
            [
                9,
                10
            ],
            [
                16,
                20
            ]
        ],
        "secondary_span": [
            [
                3,
                8
            ],
            [
                11,
                15
            ],
            [
                21,
                25
            ]
        ],
        "edits": [
            "forename",
            "name",
            "drivers",
            "races",
            "forename",
            "name"
        ],
        "edits_original": "< select > add forename </ select > < select > remove name </ select > < from > add drivers </ from > < from > remove races </ from > < orderBy > add forename </ orderBy > < orderBy > remove name </ orderBy >"
    },
    {
        "db_id": "coffee_shop",
        "question": "Find the purchase time, age and address of each member, and show the results in the order of purchase time.",
        "gold_parse": "SELECT Time_of_purchase ,  age ,  address FROM member ORDER BY Time_of_purchase",
        "predicted_parse": "SELECT Membership_card , Age , Address FROM member ORDER BY Time_of_purchase Asc",
        "predicted_parse_explanation": [
            "find the membership card , age , address in member table ordered ascending by time of purchase"
        ],
        "feedback": "Replace membership card with time of purchase .",
        "beam": [
            [
                "SELECT Membership_card , Age , Address FROM member ORDER BY Time_of_purchase Asc",
                -0.2189178466796875
            ],
            [
                "SELECT Name , Age , Address FROM member ORDER BY Time_of_purchase Asc",
                -1.705897331237793
            ],
            [
                "SELECT Time_of_purchase , Age , Address FROM member ORDER BY Time_of_purchase Asc",
                -4.905989646911621
            ],
            [
                "SELECT Membership_card , Age , Address FROM member ORDER BY Age Asc",
                -5.5302276611328125
            ],
            [
                "SELECT Age , Age , Address FROM member ORDER BY Time_of_purchase Asc",
                -6.066353797912598
            ],
            [
                "SELECT Name , Age , Address FROM member ORDER BY Age Asc",
                -7.017502784729004
            ],
            [
                "SELECT Member_ID , Age , Address FROM member ORDER BY Time_of_purchase Asc",
                -9.009056091308594
            ],
            [
                "SELECT T1.Membership_card , T1.Age , T1.Address FROM member AS T1 JOIN happy_hour AS T2 ORDER BY T2.Month Asc",
                -9.020476341247559
            ],
            [
                "SELECT Level_of_membership , Age , Address FROM member ORDER BY Time_of_purchase Asc",
                -9.594951629638672
            ],
            [
                "SELECT Time_of_purchase , Age , Address FROM member ORDER BY Age Asc",
                -10.124467849731445
            ],
            [
                "SELECT T1.Name , T1.Age , T1.Address FROM member AS T1 JOIN happy_hour AS T2 ORDER BY T2.Month Asc",
                -10.50590705871582
            ],
            [
                "SELECT Age , Age , Address FROM member ORDER BY Age Asc",
                -11.28307056427002
            ],
            [
                "SELECT Membership_card , Age , Address FROM member ORDER BY Time_of_purchase Desc",
                -12.978243827819824
            ],
            [
                "SELECT Age , Address FROM member ORDER BY Time_of_purchase Asc",
                -13.276707649230957
            ],
            [
                "SELECT Membership_card , Age , Address FROM member WHERE Address = value ORDER BY Time_of_purchase Asc",
                -13.287052154541016
            ],
            [
                "SELECT Membership_card , Age , DISTINCT Address FROM member ORDER BY Time_of_purchase Asc",
                -13.3599853515625
            ],
            [
                "SELECT Membership_card , Age , Address FROM member GROUP BY Member_ID ORDER BY Time_of_purchase Asc",
                -13.526461601257324
            ],
            [
                "SELECT T1.Time_of_purchase , T1.Age , T1.Address FROM member AS T1 JOIN happy_hour AS T2 ORDER BY T2.Month Asc",
                -13.66182804107666
            ],
            [
                "SELECT T2.Membership_card , T2.Age , T1.Address FROM shop AS T1 JOIN member AS T2 ORDER BY T2.Time_of_purchase Asc",
                -13.689261436462402
            ],
            [
                "SELECT T2.Month , T1.Age , T1.Address FROM member AS T1 JOIN happy_hour AS T2 ORDER BY T1.Time_of_purchase Asc",
                -13.86606502532959
            ]
        ],
        "predicted_parse_with_values": "SELECT Membership_card , Age , Address FROM member ORDER BY Time_of_purchase Asc",
        "template_feedback": "find time of purchase in place of membership card .",
        "primary_span": [
            [
                0,
                3
            ]
        ],
        "secondary_span": [
            [
                4,
                9
            ]
        ],
        "edits": [
            "time of purchase",
            "membership card"
        ],
        "edits_original": "< select > add time of purchase </ select > < select > remove membership card </ select >"
    },
    {
        "db_id": "coffee_shop",
        "question": "Find the purchase time, age and address of each member, and show the results in the order of purchase time.",
        "gold_parse": "SELECT Time_of_purchase ,  age ,  address FROM member ORDER BY Time_of_purchase",
        "predicted_parse": "SELECT Membership_card , Age , Address FROM member ORDER BY Time_of_purchase Asc",
        "predicted_parse_explanation": [
            "find the membership card , age , address in member table ordered ascending by time of purchase"
        ],
        "feedback": "You should use purchased time instead of membership card.",
        "beam": [
            [
                "SELECT Membership_card , Age , Address FROM member ORDER BY Time_of_purchase Asc",
                -0.2189178466796875
            ],
            [
                "SELECT Name , Age , Address FROM member ORDER BY Time_of_purchase Asc",
                -1.705897331237793
            ],
            [
                "SELECT Time_of_purchase , Age , Address FROM member ORDER BY Time_of_purchase Asc",
                -4.905989646911621
            ],
            [
                "SELECT Membership_card , Age , Address FROM member ORDER BY Age Asc",
                -5.5302276611328125
            ],
            [
                "SELECT Age , Age , Address FROM member ORDER BY Time_of_purchase Asc",
                -6.066353797912598
            ],
            [
                "SELECT Name , Age , Address FROM member ORDER BY Age Asc",
                -7.017502784729004
            ],
            [
                "SELECT Member_ID , Age , Address FROM member ORDER BY Time_of_purchase Asc",
                -9.009056091308594
            ],
            [
                "SELECT T1.Membership_card , T1.Age , T1.Address FROM member AS T1 JOIN happy_hour AS T2 ORDER BY T2.Month Asc",
                -9.020476341247559
            ],
            [
                "SELECT Level_of_membership , Age , Address FROM member ORDER BY Time_of_purchase Asc",
                -9.594951629638672
            ],
            [
                "SELECT Time_of_purchase , Age , Address FROM member ORDER BY Age Asc",
                -10.124467849731445
            ],
            [
                "SELECT T1.Name , T1.Age , T1.Address FROM member AS T1 JOIN happy_hour AS T2 ORDER BY T2.Month Asc",
                -10.50590705871582
            ],
            [
                "SELECT Age , Age , Address FROM member ORDER BY Age Asc",
                -11.28307056427002
            ],
            [
                "SELECT Membership_card , Age , Address FROM member ORDER BY Time_of_purchase Desc",
                -12.978243827819824
            ],
            [
                "SELECT Age , Address FROM member ORDER BY Time_of_purchase Asc",
                -13.276707649230957
            ],
            [
                "SELECT Membership_card , Age , Address FROM member WHERE Address = value ORDER BY Time_of_purchase Asc",
                -13.287052154541016
            ],
            [
                "SELECT Membership_card , Age , DISTINCT Address FROM member ORDER BY Time_of_purchase Asc",
                -13.3599853515625
            ],
            [
                "SELECT Membership_card , Age , Address FROM member GROUP BY Member_ID ORDER BY Time_of_purchase Asc",
                -13.526461601257324
            ],
            [
                "SELECT T1.Time_of_purchase , T1.Age , T1.Address FROM member AS T1 JOIN happy_hour AS T2 ORDER BY T2.Month Asc",
                -13.66182804107666
            ],
            [
                "SELECT T2.Membership_card , T2.Age , T1.Address FROM shop AS T1 JOIN member AS T2 ORDER BY T2.Time_of_purchase Asc",
                -13.689261436462402
            ],
            [
                "SELECT T2.Month , T1.Age , T1.Address FROM member AS T1 JOIN happy_hour AS T2 ORDER BY T1.Time_of_purchase Asc",
                -13.86606502532959
            ]
        ],
        "predicted_parse_with_values": "SELECT Membership_card , Age , Address FROM member ORDER BY Time_of_purchase Asc",
        "template_feedback": "find time of purchase in place of membership card .",
        "primary_span": [
            [
                0,
                3
            ]
        ],
        "secondary_span": [
            [
                4,
                9
            ]
        ],
        "edits": [
            "time of purchase",
            "membership card"
        ],
        "edits_original": "< select > add time of purchase </ select > < select > remove membership card </ select >"
    },
    {
        "db_id": "formula_1",
        "question": "What are all the different first names of the drivers who are in position as standing and won?",
        "gold_parse": "SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1",
        "predicted_parse": "SELECT DISTINCT T2.positionText FROM races AS T1 JOIN constructorStandings AS T2 ON T2.raceId = T1.raceId JOIN constructorResults AS T3 ON T1.raceId = T3.raceId WHERE T3.raceId = value",
        "predicted_parse_explanation": [
            "Step 1: for each row in races table , find the corresponding rows in constructor standings table and in constructor results table",
            "Step 2: find without repetition position text of the results of step 1 whose constructor results 's race id equals 1"
        ],
        "feedback": "Replace constructor results with driver standings , position text with forename , race id with wins , also make sure position equals standing .",
        "beam": [
            [
                "SELECT DISTINCT T2.positionText FROM races AS T1 JOIN constructorStandings AS T2 ON T2.raceId = T1.raceId JOIN constructorResults AS T3 ON T1.raceId = T3.raceId WHERE T3.raceId = value",
                -1.518139362335205
            ],
            [
                "SELECT DISTINCT T1.positionText FROM constructorStandings AS T1 JOIN results AS T2 WHERE T2.fastestLap = value",
                -1.6807589530944824
            ],
            [
                "SELECT DISTINCT positionText FROM constructorStandings WHERE position = value",
                -1.7257580757141113
            ],
            [
                "SELECT DISTINCT T1.rank FROM results AS T1 JOIN constructorResults AS T2 WHERE T2.raceId = value",
                -2.4102087020874023
            ],
            [
                "SELECT DISTINCT rank FROM results WHERE fastestLap = value",
                -2.4263105392456055
            ],
            [
                "SELECT DISTINCT T2.rank FROM constructorStandings AS T1 JOIN results AS T2 WHERE T1.position = value",
                -2.5612993240356445
            ],
            [
                "SELECT DISTINCT T1.constructorRef FROM constructors AS T1 JOIN results AS T2 WHERE T2.fastestLap = value",
                -3.1668648719787598
            ],
            [
                "SELECT DISTINCT T1.constructorRef FROM constructors AS T1 JOIN constructorResults AS T2 ON T1.constructorId = T2.constructorId WHERE T2.raceId = value",
                -3.1940865516662598
            ],
            [
                "SELECT DISTINCT T1.constructorRef FROM constructors AS T1 JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId WHERE T2.position = value",
                -3.373352527618408
            ],
            [
                "SELECT DISTINCT T1.position FROM constructorStandings AS T1 JOIN results AS T2 WHERE T2.fastestLap = value",
                -4.853535175323486
            ],
            [
                "SELECT DISTINCT T2.position FROM races AS T1 JOIN constructorStandings AS T2 ON T2.raceId = T1.raceId JOIN constructorResults AS T3 ON T1.raceId = T3.raceId WHERE T3.raceId = value",
                -4.9100661277771
            ],
            [
                "SELECT DISTINCT fastestLap FROM results WHERE fastestLap = value",
                -5.396515369415283
            ],
            [
                "SELECT DISTINCT T1.fastestLap FROM results AS T1 JOIN constructorResults AS T2 WHERE T2.raceId = value",
                -5.410009860992432
            ],
            [
                "SELECT DISTINCT position FROM constructorStandings WHERE position = value",
                -5.468222141265869
            ],
            [
                "SELECT DISTINCT T2.fastestLap FROM constructorStandings AS T1 JOIN results AS T2 WHERE T1.position = value",
                -6.02156400680542
            ],
            [
                "SELECT DISTINCT T2.positionText FROM drivers AS T1 JOIN constructorStandings AS T2 ON T2.driverId = T1.driverId JOIN lapTimes AS T3 ON T1.driverId = T3.driverId WHERE T3.position = value",
                -6.829857349395752
            ],
            [
                "SELECT DISTINCT * FROM constructorResults WHERE raceId = value",
                -6.9089884757995605
            ],
            [
                "SELECT DISTINCT T1.positionText FROM constructorStandings AS T1 JOIN results AS T2 WHERE T1.position = value AND T2.fastestLap = value",
                -7.118942737579346
            ],
            [
                "SELECT DISTINCT positionText FROM constructorStandings",
                -8.402451515197754
            ],
            [
                "SELECT DISTINCT rank FROM results",
                -9.091641426086426
            ]
        ],
        "predicted_parse_with_values": "SELECT DISTINCT T2.positionText FROM races AS T1 JOIN constructorStandings AS T2 ON T2.raceId = T1.raceId JOIN constructorResults AS T3 ON T1.raceId = T3.raceId WHERE T3.raceId = 1",
        "template_feedback": "in step 1 , use driver standings table and drivers table in place of constructor results table , constructor standings table , and races table in step 2 , consider the driver standings 's wins equals 1 and driver standings 's position equals 1 conditions in place of the constructor results 's race id equals 1 conditions . find forename in place of constructor standings 's position text .",
        "primary_span": [
            [
                4,
                10
            ],
            [
                29,
                44
            ],
            [
                58,
                59
            ]
        ],
        "secondary_span": [
            [
                11,
                24
            ],
            [
                45,
                57
            ],
            [
                60,
                68
            ]
        ],
        "edits": [
            "forename",
            "position text",
            "drivers",
            "driver standings",
            "races",
            "constructor standings",
            "constructor results",
            "position equals 1",
            "wins equals 1",
            "race id equals 1"
        ],
        "edits_original": "< select > add forename </ select > < select > remove position text </ select > < from > add drivers </ from > < from > add driver standings </ from > < from > remove races </ from > < from > remove constructor standings </ from > < from > remove constructor results </ from > < where > add position equals 1 </ where > < where > add wins equals 1 </ where > < where > remove race id equals 1 </ where >"
    },
    {
        "db_id": "formula_1",
        "question": "What are all the different first names of the drivers who are in position as standing and won?",
        "gold_parse": "SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1",
        "predicted_parse": "SELECT DISTINCT T2.positionText FROM races AS T1 JOIN constructorStandings AS T2 ON T2.raceId = T1.raceId JOIN constructorResults AS T3 ON T1.raceId = T3.raceId WHERE T3.raceId = value",
        "predicted_parse_explanation": [
            "Step 1: for each row in races table , find the corresponding rows in constructor standings table and in constructor results table",
            "Step 2: find without repetition position text of the results of step 1 whose constructor results 's race id equals 1"
        ],
        "feedback": "You should use the driver standaing table and return dirver name and wins for drivers whose position is standing",
        "beam": [
            [
                "SELECT DISTINCT T2.positionText FROM races AS T1 JOIN constructorStandings AS T2 ON T2.raceId = T1.raceId JOIN constructorResults AS T3 ON T1.raceId = T3.raceId WHERE T3.raceId = value",
                -1.518139362335205
            ],
            [
                "SELECT DISTINCT T1.positionText FROM constructorStandings AS T1 JOIN results AS T2 WHERE T2.fastestLap = value",
                -1.6807589530944824
            ],
            [
                "SELECT DISTINCT positionText FROM constructorStandings WHERE position = value",
                -1.7257580757141113
            ],
            [
                "SELECT DISTINCT T1.rank FROM results AS T1 JOIN constructorResults AS T2 WHERE T2.raceId = value",
                -2.4102087020874023
            ],
            [
                "SELECT DISTINCT rank FROM results WHERE fastestLap = value",
                -2.4263105392456055
            ],
            [
                "SELECT DISTINCT T2.rank FROM constructorStandings AS T1 JOIN results AS T2 WHERE T1.position = value",
                -2.5612993240356445
            ],
            [
                "SELECT DISTINCT T1.constructorRef FROM constructors AS T1 JOIN results AS T2 WHERE T2.fastestLap = value",
                -3.1668648719787598
            ],
            [
                "SELECT DISTINCT T1.constructorRef FROM constructors AS T1 JOIN constructorResults AS T2 ON T1.constructorId = T2.constructorId WHERE T2.raceId = value",
                -3.1940865516662598
            ],
            [
                "SELECT DISTINCT T1.constructorRef FROM constructors AS T1 JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId WHERE T2.position = value",
                -3.373352527618408
            ],
            [
                "SELECT DISTINCT T1.position FROM constructorStandings AS T1 JOIN results AS T2 WHERE T2.fastestLap = value",
                -4.853535175323486
            ],
            [
                "SELECT DISTINCT T2.position FROM races AS T1 JOIN constructorStandings AS T2 ON T2.raceId = T1.raceId JOIN constructorResults AS T3 ON T1.raceId = T3.raceId WHERE T3.raceId = value",
                -4.9100661277771
            ],
            [
                "SELECT DISTINCT fastestLap FROM results WHERE fastestLap = value",
                -5.396515369415283
            ],
            [
                "SELECT DISTINCT T1.fastestLap FROM results AS T1 JOIN constructorResults AS T2 WHERE T2.raceId = value",
                -5.410009860992432
            ],
            [
                "SELECT DISTINCT position FROM constructorStandings WHERE position = value",
                -5.468222141265869
            ],
            [
                "SELECT DISTINCT T2.fastestLap FROM constructorStandings AS T1 JOIN results AS T2 WHERE T1.position = value",
                -6.02156400680542
            ],
            [
                "SELECT DISTINCT T2.positionText FROM drivers AS T1 JOIN constructorStandings AS T2 ON T2.driverId = T1.driverId JOIN lapTimes AS T3 ON T1.driverId = T3.driverId WHERE T3.position = value",
                -6.829857349395752
            ],
            [
                "SELECT DISTINCT * FROM constructorResults WHERE raceId = value",
                -6.9089884757995605
            ],
            [
                "SELECT DISTINCT T1.positionText FROM constructorStandings AS T1 JOIN results AS T2 WHERE T1.position = value AND T2.fastestLap = value",
                -7.118942737579346
            ],
            [
                "SELECT DISTINCT positionText FROM constructorStandings",
                -8.402451515197754
            ],
            [
                "SELECT DISTINCT rank FROM results",
                -9.091641426086426
            ]
        ],
        "predicted_parse_with_values": "SELECT DISTINCT T2.positionText FROM races AS T1 JOIN constructorStandings AS T2 ON T2.raceId = T1.raceId JOIN constructorResults AS T3 ON T1.raceId = T3.raceId WHERE T3.raceId = 1",
        "template_feedback": "in step 1 , use driver standings table and drivers table in place of constructor results table , constructor standings table , and races table in step 2 , consider the driver standings 's wins equals 1 and driver standings 's position equals 1 conditions in place of the constructor results 's race id equals 1 conditions . find forename in place of constructor standings 's position text .",
        "primary_span": [
            [
                4,
                10
            ],
            [
                29,
                44
            ],
            [
                58,
                59
            ]
        ],
        "secondary_span": [
            [
                11,
                24
            ],
            [
                45,
                57
            ],
            [
                60,
                68
            ]
        ],
        "edits": [
            "forename",
            "position text",
            "drivers",
            "driver standings",
            "races",
            "constructor standings",
            "constructor results",
            "position equals 1",
            "wins equals 1",
            "race id equals 1"
        ],
        "edits_original": "< select > add forename </ select > < select > remove position text </ select > < from > add drivers </ from > < from > add driver standings </ from > < from > remove races </ from > < from > remove constructor standings </ from > < from > remove constructor results </ from > < where > add position equals 1 </ where > < where > add wins equals 1 </ where > < where > remove race id equals 1 </ where >"
    },
    {
        "db_id": "formula_1",
        "question": "What are the first names of the different drivers who won in position 1 as driver standing and had more than 20 points?",
        "gold_parse": "SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1 AND T2.points > 20",
        "predicted_parse": "SELECT T1.positionText FROM constructorStandings AS T1 JOIN results AS T2 WHERE T2.fastestLap = value AND T2.milliseconds > value",
        "predicted_parse_explanation": [
            "Step 1: for each row in constructor standings table , find the corresponding rows in results table",
            "Step 2: find the constructor standings 's position text of the results of step 1 whose fastest lap equals 1 and milliseconds greater than 1"
        ],
        "feedback": "Replace constructor Standings with drivers , results with driver Standings ,  position Text with fore name ,  fastest Lap with position ,  \"milliseconds greater than 1\" with \"points greater than 20\".",
        "beam": [
            [
                "SELECT T1.positionText FROM constructorStandings AS T1 JOIN results AS T2 WHERE T2.fastestLap = value AND T2.milliseconds > value",
                -0.9099836349487305
            ],
            [
                "SELECT T1.positionText FROM constructorStandings AS T1 JOIN results AS T2 WHERE T1.position = value AND T2.milliseconds > value",
                -1.509415626525879
            ],
            [
                "SELECT T2.positionText FROM results AS T1 JOIN constructorResults AS T2 WHERE T1.fastestLap = value AND T1.milliseconds > value",
                -2.302326202392578
            ],
            [
                "SELECT T4.positionText FROM races AS T1 JOIN constructorStandings AS T2 ON T2.raceId = T1.raceId JOIN results AS T3 JOIN constructorResults AS T4 ON T1.raceId = T4.raceId WHERE T2.position = value AND T3.milliseconds > value",
                -2.7688074111938477
            ],
            [
                "SELECT T1.positionText FROM constructorStandings AS T1 JOIN results AS T2 WHERE T2.fastestLap = value AND T1.resultId > value",
                -3.1372804641723633
            ],
            [
                "SELECT positionText FROM constructorStandings WHERE position = value AND resultId > value",
                -3.7369985580444336
            ],
            [
                "SELECT T2.positionText FROM races AS T1 JOIN constructorStandings AS T2 ON T2.raceId = T1.raceId JOIN results AS T3 JOIN constructorResults AS T4 ON T1.raceId = T4.raceId WHERE T4.raceId = value AND T3.milliseconds > value",
                -3.80246639251709
            ],
            [
                "SELECT T1.constructorStandingsId FROM constructorStandings AS T1 JOIN results AS T2 WHERE T2.fastestLap = value AND T2.milliseconds > value",
                -4.05419921875
            ],
            [
                "SELECT T4.positionText FROM races AS T1 JOIN constructorStandings AS T2 ON T2.raceId = T1.raceId JOIN results AS T3 JOIN constructorResults AS T4 ON T1.raceId = T4.raceId WHERE T3.fastestLap = value AND T2.resultId > value",
                -4.528293609619141
            ],
            [
                "SELECT T1.constructorStandingsId FROM constructorStandings AS T1 JOIN results AS T2 WHERE T1.position = value AND T2.milliseconds > value",
                -4.565195083618164
            ],
            [
                "SELECT time FROM results WHERE fastestLap = value AND milliseconds > value",
                -4.581640243530273
            ],
            [
                "SELECT T2.positionText FROM drivers AS T1 JOIN constructorStandings AS T2 ON T2.driverId = T1.driverId JOIN results AS T3 JOIN lapTimes AS T4 ON T1.driverId = T4.driverId WHERE T4.position = value AND T3.milliseconds > value",
                -4.6349382400512695
            ],
            [
                "SELECT T3.positionText FROM races AS T1 JOIN constructorStandings AS T2 ON T2.raceId = T1.raceId JOIN constructorResults AS T3 ON T1.raceId = T3.raceId WHERE T2.position = value AND T2.resultId > value",
                -4.993411064147949
            ],
            [
                "SELECT T2.time FROM constructorStandings AS T1 JOIN results AS T2 WHERE T1.position = value AND T2.milliseconds > value",
                -5.059414863586426
            ],
            [
                "SELECT T2.positionText FROM results AS T1 JOIN constructorResults AS T2 WHERE T2.raceId = value AND T1.milliseconds > value",
                -5.194760322570801
            ],
            [
                "SELECT T1.constructorRef FROM constructors AS T1 JOIN results AS T2 WHERE T2.fastestLap = value AND T2.milliseconds > value",
                -5.371580600738525
            ],
            [
                "SELECT T1.positionText FROM constructorStandings AS T1 JOIN results AS T2 WHERE T1.number = value AND T2.milliseconds > value",
                -5.655007839202881
            ],
            [
                "SELECT T2.positionText FROM results AS T1 JOIN constructorResults AS T2 JOIN lapTimes AS T3 WHERE T3.position = value AND T1.milliseconds > value",
                -5.826892852783203
            ],
            [
                "SELECT T1.constructorRef FROM constructors AS T1 JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId JOIN results AS T3 WHERE T2.position = value AND T3.milliseconds > value",
                -5.9977898597717285
            ],
            [
                "SELECT T1.positionText FROM constructorStandings AS T1 JOIN results AS T2 WHERE T2.fastestLap = value AND T2.milliseconds > value INTERSECT SELECT T3.positionText FROM results AS T2 JOIN constructorResults AS T3 WHERE T2.fastestLap = value",
                -6.473825454711914
            ]
        ],
        "predicted_parse_with_values": "SELECT T1.positionText FROM constructorStandings AS T1 JOIN results AS T2 WHERE T2.fastestLap = 1 AND T2.milliseconds > 1",
        "template_feedback": "in step 1 , use driver standings table and drivers table in place of results table and constructor standings table in step 2 , consider the driver standings 's wins equals 1 and driver standings 's position equals 1 and driver standings 's points greater than 20 conditions in place of the milliseconds greater than 1 and fastest lap equals 1 conditions . find forename in place of constructor standings 's position text . make sure no repetition in the results .",
        "primary_span": [
            [
                4,
                10
            ],
            [
                24,
                47
            ],
            [
                63,
                64
            ],
            [
                74,
                81
            ]
        ],
        "secondary_span": [
            [
                11,
                19
            ],
            [
                48,
                62
            ],
            [
                65,
                73
            ]
        ],
        "edits": [
            "distinct",
            "forename",
            "position text",
            "drivers",
            "driver standings",
            "constructor standings",
            "results",
            "position equals 1",
            "wins equals 1",
            "points greater than 20",
            "fastest lap equals 1",
            "milliseconds greater than 1"
        ],
        "edits_original": "< select > add distinct </ select > < select > add forename </ select > < select > remove position text </ select > < from > add drivers </ from > < from > add driver standings </ from > < from > remove constructor standings </ from > < from > remove results </ from > < where > add position equals 1 </ where > < where > add wins equals 1 </ where > < where > add points greater than 20 </ where > < where > remove fastest lap equals 1 </ where > < where > remove milliseconds greater than 1 </ where >"
    },
    {
        "db_id": "formula_1",
        "question": "What are the first names of the different drivers who won in position 1 as driver standing and had more than 20 points?",
        "gold_parse": "SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1 AND T2.points > 20",
        "predicted_parse": "SELECT T1.positionText FROM constructorStandings AS T1 JOIN results AS T2 WHERE T2.fastestLap = value AND T2.milliseconds > value",
        "predicted_parse_explanation": [
            "Step 1: for each row in constructor standings table , find the corresponding rows in results table",
            "Step 2: find the constructor standings 's position text of the results of step 1 whose fastest lap equals 1 and milliseconds greater than 1"
        ],
        "feedback": "You have to find drivers and their standings and position text. Besides this, ensure that points are larger than 20.",
        "beam": [
            [
                "SELECT T1.positionText FROM constructorStandings AS T1 JOIN results AS T2 WHERE T2.fastestLap = value AND T2.milliseconds > value",
                -0.9099836349487305
            ],
            [
                "SELECT T1.positionText FROM constructorStandings AS T1 JOIN results AS T2 WHERE T1.position = value AND T2.milliseconds > value",
                -1.509415626525879
            ],
            [
                "SELECT T2.positionText FROM results AS T1 JOIN constructorResults AS T2 WHERE T1.fastestLap = value AND T1.milliseconds > value",
                -2.302326202392578
            ],
            [
                "SELECT T4.positionText FROM races AS T1 JOIN constructorStandings AS T2 ON T2.raceId = T1.raceId JOIN results AS T3 JOIN constructorResults AS T4 ON T1.raceId = T4.raceId WHERE T2.position = value AND T3.milliseconds > value",
                -2.7688074111938477
            ],
            [
                "SELECT T1.positionText FROM constructorStandings AS T1 JOIN results AS T2 WHERE T2.fastestLap = value AND T1.resultId > value",
                -3.1372804641723633
            ],
            [
                "SELECT positionText FROM constructorStandings WHERE position = value AND resultId > value",
                -3.7369985580444336
            ],
            [
                "SELECT T2.positionText FROM races AS T1 JOIN constructorStandings AS T2 ON T2.raceId = T1.raceId JOIN results AS T3 JOIN constructorResults AS T4 ON T1.raceId = T4.raceId WHERE T4.raceId = value AND T3.milliseconds > value",
                -3.80246639251709
            ],
            [
                "SELECT T1.constructorStandingsId FROM constructorStandings AS T1 JOIN results AS T2 WHERE T2.fastestLap = value AND T2.milliseconds > value",
                -4.05419921875
            ],
            [
                "SELECT T4.positionText FROM races AS T1 JOIN constructorStandings AS T2 ON T2.raceId = T1.raceId JOIN results AS T3 JOIN constructorResults AS T4 ON T1.raceId = T4.raceId WHERE T3.fastestLap = value AND T2.resultId > value",
                -4.528293609619141
            ],
            [
                "SELECT T1.constructorStandingsId FROM constructorStandings AS T1 JOIN results AS T2 WHERE T1.position = value AND T2.milliseconds > value",
                -4.565195083618164
            ],
            [
                "SELECT time FROM results WHERE fastestLap = value AND milliseconds > value",
                -4.581640243530273
            ],
            [
                "SELECT T2.positionText FROM drivers AS T1 JOIN constructorStandings AS T2 ON T2.driverId = T1.driverId JOIN results AS T3 JOIN lapTimes AS T4 ON T1.driverId = T4.driverId WHERE T4.position = value AND T3.milliseconds > value",
                -4.6349382400512695
            ],
            [
                "SELECT T3.positionText FROM races AS T1 JOIN constructorStandings AS T2 ON T2.raceId = T1.raceId JOIN constructorResults AS T3 ON T1.raceId = T3.raceId WHERE T2.position = value AND T2.resultId > value",
                -4.993411064147949
            ],
            [
                "SELECT T2.time FROM constructorStandings AS T1 JOIN results AS T2 WHERE T1.position = value AND T2.milliseconds > value",
                -5.059414863586426
            ],
            [
                "SELECT T2.positionText FROM results AS T1 JOIN constructorResults AS T2 WHERE T2.raceId = value AND T1.milliseconds > value",
                -5.194760322570801
            ],
            [
                "SELECT T1.constructorRef FROM constructors AS T1 JOIN results AS T2 WHERE T2.fastestLap = value AND T2.milliseconds > value",
                -5.371580600738525
            ],
            [
                "SELECT T1.positionText FROM constructorStandings AS T1 JOIN results AS T2 WHERE T1.number = value AND T2.milliseconds > value",
                -5.655007839202881
            ],
            [
                "SELECT T2.positionText FROM results AS T1 JOIN constructorResults AS T2 JOIN lapTimes AS T3 WHERE T3.position = value AND T1.milliseconds > value",
                -5.826892852783203
            ],
            [
                "SELECT T1.constructorRef FROM constructors AS T1 JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId JOIN results AS T3 WHERE T2.position = value AND T3.milliseconds > value",
                -5.9977898597717285
            ],
            [
                "SELECT T1.positionText FROM constructorStandings AS T1 JOIN results AS T2 WHERE T2.fastestLap = value AND T2.milliseconds > value INTERSECT SELECT T3.positionText FROM results AS T2 JOIN constructorResults AS T3 WHERE T2.fastestLap = value",
                -6.473825454711914
            ]
        ],
        "predicted_parse_with_values": "SELECT T1.positionText FROM constructorStandings AS T1 JOIN results AS T2 WHERE T2.fastestLap = 1 AND T2.milliseconds > 1",
        "template_feedback": "in step 1 , use driver standings table and drivers table in place of results table and constructor standings table in step 2 , consider the driver standings 's wins equals 1 and driver standings 's position equals 1 and driver standings 's points greater than 20 conditions in place of the milliseconds greater than 1 and fastest lap equals 1 conditions . find forename in place of constructor standings 's position text . make sure no repetition in the results .",
        "primary_span": [
            [
                4,
                10
            ],
            [
                24,
                47
            ],
            [
                63,
                64
            ],
            [
                74,
                81
            ]
        ],
        "secondary_span": [
            [
                11,
                19
            ],
            [
                48,
                62
            ],
            [
                65,
                73
            ]
        ],
        "edits": [
            "distinct",
            "forename",
            "position text",
            "drivers",
            "driver standings",
            "constructor standings",
            "results",
            "position equals 1",
            "wins equals 1",
            "points greater than 20",
            "fastest lap equals 1",
            "milliseconds greater than 1"
        ],
        "edits_original": "< select > add distinct </ select > < select > add forename </ select > < select > remove position text </ select > < from > add drivers </ from > < from > add driver standings </ from > < from > remove constructor standings </ from > < from > remove results </ from > < where > add position equals 1 </ where > < where > add wins equals 1 </ where > < where > add points greater than 20 </ where > < where > remove fastest lap equals 1 </ where > < where > remove milliseconds greater than 1 </ where >"
    },
    {
        "db_id": "formula_1",
        "question": "Find the id and surname of the driver who participated the most number of races?",
        "gold_parse": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse": "SELECT T2.url , T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId GROUP BY T1.country ORDER BY Count ( * ) Desc LIMIT value",
        "predicted_parse_explanation": [
            "Step 1: for each row in circuits table , find the corresponding rows in races table",
            "Step 2: find the number of rows of each value of country of the results of step 1",
            "Step 3: find the races 's url and country of the results of step 1 with largest value in the results of step 2"
        ],
        "feedback": "Find driver id and constructor reference of status table who has participates in largest country of drivers .",
        "beam": [
            [
                "SELECT T2.url , T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId GROUP BY T1.country ORDER BY Count ( * ) Desc LIMIT value",
                -1.7224376201629639
            ],
            [
                "SELECT T3.positionText , T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN constructorResults AS T3 ON T2.raceId = T3.raceId GROUP BY T1.country ORDER BY Count ( * ) Desc LIMIT value",
                -1.9143059253692627
            ],
            [
                "SELECT T2.url , T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId AND T1.circuitId = T2.circuitId JOIN constructorResults AS T3 ON T2.raceId = T3.raceId GROUP BY T3.positionText ORDER BY Count ( * ) Desc LIMIT value",
                -2.8118038177490234
            ],
            [
                "SELECT circuitId , country FROM circuits GROUP BY country ORDER BY Count ( * ) Desc LIMIT value",
                -2.9409496784210205
            ],
            [
                "SELECT T3.positionText , T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN constructorResults AS T3 ON T2.raceId = T3.raceId GROUP BY T3.positionText ORDER BY Count ( * ) Desc LIMIT value",
                -3.003657102584839
            ],
            [
                "SELECT T2.url , T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId GROUP BY T2.url ORDER BY Count ( * ) Desc LIMIT value",
                -3.0542774200439453
            ],
            [
                "SELECT T2.url , T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId GROUP BY T1.circuitId ORDER BY Count ( * ) Desc LIMIT value",
                -3.2426257133483887
            ],
            [
                "SELECT T3.positionText , T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId AND T1.circuitId = T2.circuitId JOIN constructorResults AS T3 ON T2.raceId = T3.raceId GROUP BY T2.url ORDER BY Count ( * ) Desc LIMIT value",
                -3.2461330890655518
            ],
            [
                "SELECT T3.positionText , T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN constructorResults AS T3 ON T2.raceId = T3.raceId GROUP BY T1.circuitId ORDER BY Count ( * ) Desc LIMIT value",
                -3.4436564445495605
            ],
            [
                "SELECT T2.url , T2.name FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId GROUP BY T1.country ORDER BY Count ( * ) Desc LIMIT value",
                -3.6075282096862793
            ],
            [
                "SELECT T3.positionText , T2.name FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId AND T1.circuitId = T2.circuitId JOIN constructorResults AS T3 ON T2.raceId = T3.raceId GROUP BY T1.country ORDER BY Count ( * ) Desc LIMIT value",
                -3.7943499088287354
            ],
            [
                "SELECT T2.points , T1.country FROM circuits AS T1 JOIN results AS T2 GROUP BY T1.country ORDER BY Count ( * ) Desc LIMIT value",
                -4.082136869430542
            ],
            [
                "SELECT T1.circuitId , T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN constructorResults AS T3 ON T2.raceId = T3.raceId GROUP BY T3.positionText ORDER BY Count ( * ) Desc LIMIT value",
                -4.110371351242065
            ],
            [
                "SELECT T2.url , T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId GROUP BY * ORDER BY Count ( * ) Desc LIMIT value",
                -4.261638641357422
            ],
            [
                "SELECT T3.constructorStandingsId , T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN constructorStandings AS T3 ON T2.raceId = T3.raceId GROUP BY T1.country ORDER BY Count ( * ) Desc LIMIT value",
                -4.276551246643066
            ],
            [
                "SELECT T1.circuitId , T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId GROUP BY T2.url ORDER BY Count ( * ) Desc LIMIT value",
                -4.352885723114014
            ],
            [
                "SELECT T1.url , T1.name FROM races AS T1 JOIN constructorResults AS T2 ON T1.raceId = T2.raceId GROUP BY T2.positionText ORDER BY Count ( * ) Desc LIMIT value",
                -4.413637161254883
            ],
            [
                "SELECT T3.positionText , T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN constructorResults AS T3 ON T2.raceId = T3.raceId GROUP BY * ORDER BY Count ( * ) Desc LIMIT value",
                -4.4716174602508545
            ],
            [
                "SELECT circuitId , country FROM circuits GROUP BY circuitId ORDER BY Count ( * ) Desc LIMIT value",
                -4.5052056312561035
            ],
            [
                "SELECT T2.positionText , T1.name FROM races AS T1 JOIN constructorResults AS T2 ON T1.raceId = T2.raceId GROUP BY T2.positionText ORDER BY Count ( * ) Desc LIMIT value",
                -4.57981014251709
            ]
        ],
        "predicted_parse_with_values": "SELECT T2.url , T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId GROUP BY T1.country ORDER BY Count ( * ) Desc LIMIT 1",
        "template_feedback": "in step 1 , use results table and drivers table in place of circuits table in step 2 , find for each value of drivers 's driver id in place of country . in step 3 , find drivers 's driver id and surname in place of country and races 's url .",
        "primary_span": [
            [
                4,
                9
            ],
            [
                19,
                27
            ],
            [
                37,
                43
            ]
        ],
        "secondary_span": [
            [
                10,
                14
            ],
            [
                28,
                32
            ],
            [
                44,
                52
            ]
        ],
        "edits": [
            "driver id",
            "surname",
            "url",
            "country",
            "drivers",
            "results",
            "circuits",
            "driver id",
            "country"
        ],
        "edits_original": "< select > add driver id </ select > < select > add surname </ select > < select > remove url </ select > < select > remove country </ select > < from > add drivers </ from > < from > add results </ from > < from > remove circuits </ from > < groupBy > add driver id </ groupBy > < groupBy > remove country </ groupBy >"
    },
    {
        "db_id": "formula_1",
        "question": "Find the id and surname of the driver who participated the most number of races?",
        "gold_parse": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse": "SELECT T2.url , T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId GROUP BY T1.country ORDER BY Count ( * ) Desc LIMIT value",
        "predicted_parse_explanation": [
            "Step 1: for each row in circuits table , find the corresponding rows in races table",
            "Step 2: find the number of rows of each value of country of the results of step 1",
            "Step 3: find the races 's url and country of the results of step 1 with largest value in the results of step 2"
        ],
        "feedback": "Looking for the id of driver and reference of constructor who had taken part in the biggest country of drivers. ",
        "beam": [
            [
                "SELECT T2.url , T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId GROUP BY T1.country ORDER BY Count ( * ) Desc LIMIT value",
                -1.7224376201629639
            ],
            [
                "SELECT T3.positionText , T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN constructorResults AS T3 ON T2.raceId = T3.raceId GROUP BY T1.country ORDER BY Count ( * ) Desc LIMIT value",
                -1.9143059253692627
            ],
            [
                "SELECT T2.url , T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId AND T1.circuitId = T2.circuitId JOIN constructorResults AS T3 ON T2.raceId = T3.raceId GROUP BY T3.positionText ORDER BY Count ( * ) Desc LIMIT value",
                -2.8118038177490234
            ],
            [
                "SELECT circuitId , country FROM circuits GROUP BY country ORDER BY Count ( * ) Desc LIMIT value",
                -2.9409496784210205
            ],
            [
                "SELECT T3.positionText , T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN constructorResults AS T3 ON T2.raceId = T3.raceId GROUP BY T3.positionText ORDER BY Count ( * ) Desc LIMIT value",
                -3.003657102584839
            ],
            [
                "SELECT T2.url , T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId GROUP BY T2.url ORDER BY Count ( * ) Desc LIMIT value",
                -3.0542774200439453
            ],
            [
                "SELECT T2.url , T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId GROUP BY T1.circuitId ORDER BY Count ( * ) Desc LIMIT value",
                -3.2426257133483887
            ],
            [
                "SELECT T3.positionText , T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId AND T1.circuitId = T2.circuitId JOIN constructorResults AS T3 ON T2.raceId = T3.raceId GROUP BY T2.url ORDER BY Count ( * ) Desc LIMIT value",
                -3.2461330890655518
            ],
            [
                "SELECT T3.positionText , T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN constructorResults AS T3 ON T2.raceId = T3.raceId GROUP BY T1.circuitId ORDER BY Count ( * ) Desc LIMIT value",
                -3.4436564445495605
            ],
            [
                "SELECT T2.url , T2.name FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId GROUP BY T1.country ORDER BY Count ( * ) Desc LIMIT value",
                -3.6075282096862793
            ],
            [
                "SELECT T3.positionText , T2.name FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId AND T1.circuitId = T2.circuitId JOIN constructorResults AS T3 ON T2.raceId = T3.raceId GROUP BY T1.country ORDER BY Count ( * ) Desc LIMIT value",
                -3.7943499088287354
            ],
            [
                "SELECT T2.points , T1.country FROM circuits AS T1 JOIN results AS T2 GROUP BY T1.country ORDER BY Count ( * ) Desc LIMIT value",
                -4.082136869430542
            ],
            [
                "SELECT T1.circuitId , T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN constructorResults AS T3 ON T2.raceId = T3.raceId GROUP BY T3.positionText ORDER BY Count ( * ) Desc LIMIT value",
                -4.110371351242065
            ],
            [
                "SELECT T2.url , T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId GROUP BY * ORDER BY Count ( * ) Desc LIMIT value",
                -4.261638641357422
            ],
            [
                "SELECT T3.constructorStandingsId , T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN constructorStandings AS T3 ON T2.raceId = T3.raceId GROUP BY T1.country ORDER BY Count ( * ) Desc LIMIT value",
                -4.276551246643066
            ],
            [
                "SELECT T1.circuitId , T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId GROUP BY T2.url ORDER BY Count ( * ) Desc LIMIT value",
                -4.352885723114014
            ],
            [
                "SELECT T1.url , T1.name FROM races AS T1 JOIN constructorResults AS T2 ON T1.raceId = T2.raceId GROUP BY T2.positionText ORDER BY Count ( * ) Desc LIMIT value",
                -4.413637161254883
            ],
            [
                "SELECT T3.positionText , T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN constructorResults AS T3 ON T2.raceId = T3.raceId GROUP BY * ORDER BY Count ( * ) Desc LIMIT value",
                -4.4716174602508545
            ],
            [
                "SELECT circuitId , country FROM circuits GROUP BY circuitId ORDER BY Count ( * ) Desc LIMIT value",
                -4.5052056312561035
            ],
            [
                "SELECT T2.positionText , T1.name FROM races AS T1 JOIN constructorResults AS T2 ON T1.raceId = T2.raceId GROUP BY T2.positionText ORDER BY Count ( * ) Desc LIMIT value",
                -4.57981014251709
            ]
        ],
        "predicted_parse_with_values": "SELECT T2.url , T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId GROUP BY T1.country ORDER BY Count ( * ) Desc LIMIT 1",
        "template_feedback": "in step 1 , use results table and drivers table in place of circuits table in step 2 , find for each value of drivers 's driver id in place of country . in step 3 , find drivers 's driver id and surname in place of country and races 's url .",
        "primary_span": [
            [
                4,
                9
            ],
            [
                19,
                27
            ],
            [
                37,
                43
            ]
        ],
        "secondary_span": [
            [
                10,
                14
            ],
            [
                28,
                32
            ],
            [
                44,
                52
            ]
        ],
        "edits": [
            "driver id",
            "surname",
            "url",
            "country",
            "drivers",
            "results",
            "circuits",
            "driver id",
            "country"
        ],
        "edits_original": "< select > add driver id </ select > < select > add surname </ select > < select > remove url </ select > < select > remove country </ select > < from > add drivers </ from > < from > add results </ from > < from > remove circuits </ from > < groupBy > add driver id </ groupBy > < groupBy > remove country </ groupBy >"
    },
    {
        "db_id": "formula_1",
        "question": "What is the forename and surname of the driver with the shortest laptime?",
        "gold_parse": "SELECT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds LIMIT 1",
        "predicted_parse": "SELECT name , name FROM races ORDER BY url Asc LIMIT value",
        "predicted_parse_explanation": [
            "find the name and name in races table with smallest value of url"
        ],
        "feedback": "Replace name , name , races table , url with forename , surname , drivers table , milliseconds respectively .",
        "beam": [
            [
                "SELECT name , name FROM races ORDER BY url Asc LIMIT value",
                -0.7786657810211182
            ],
            [
                "SELECT T1.name , T1.name FROM races AS T1 JOIN lapTimes AS T2 ON T1.raceId = T2.raceId ORDER BY T2.milliseconds Asc LIMIT value",
                -1.5220215320587158
            ],
            [
                "SELECT T2.positionText , T1.name FROM races AS T1 JOIN constructorStandings AS T2 ON T1.raceId = T2.raceId ORDER BY T1.url Asc LIMIT value",
                -2.778224468231201
            ],
            [
                "SELECT T2.positionText , T1.name FROM races AS T1 JOIN constructorStandings AS T2 ON T1.raceId = T2.raceId JOIN lapTimes AS T3 ON T1.raceId = T3.raceId ORDER BY T3.milliseconds Asc LIMIT value",
                -3.5123167037963867
            ],
            [
                "SELECT name , name FROM races ORDER BY name Asc LIMIT value",
                -3.5992350578308105
            ],
            [
                "SELECT circuitId , name FROM races ORDER BY url Asc LIMIT value",
                -3.680485486984253
            ],
            [
                "SELECT T1.name , T1.name FROM races AS T1 JOIN constructorStandings AS T2 ON T1.raceId = T2.raceId ORDER BY T2.constructorId Asc LIMIT value",
                -3.8978137969970703
            ],
            [
                "SELECT T1.name , T1.name FROM races AS T1 JOIN pitStops AS T2 ON T1.raceId = T2.raceId ORDER BY T2.milliseconds Asc LIMIT value",
                -4.094861030578613
            ],
            [
                "SELECT T1.name , T1.name FROM races AS T1 JOIN results AS T2 ORDER BY T2.time Asc LIMIT value",
                -4.300915241241455
            ],
            [
                "SELECT T1.circuitId , T1.name FROM races AS T1 JOIN lapTimes AS T2 ON T1.raceId = T2.raceId ORDER BY T2.milliseconds Asc LIMIT value",
                -4.424177646636963
            ],
            [
                "SELECT name , url FROM races ORDER BY url Asc LIMIT value",
                -4.578019380569458
            ],
            [
                "SELECT T2.rank , T1.name FROM races AS T1 JOIN results AS T2 ORDER BY T1.url Asc LIMIT value",
                -4.799567222595215
            ],
            [
                "SELECT T1.name , T1.url FROM races AS T1 JOIN lapTimes AS T2 ON T1.raceId = T2.raceId ORDER BY T2.milliseconds Asc LIMIT value",
                -4.875205755233765
            ],
            [
                "SELECT date , name FROM races ORDER BY url Asc LIMIT value",
                -4.976091146469116
            ],
            [
                "SELECT T1.name , T1.name FROM races AS T1 JOIN seasons AS T2 ORDER BY T2.dob Asc LIMIT value",
                -5.29580545425415
            ],
            [
                "SELECT T1.name , T1.name FROM races AS T1 JOIN results AS T2 ORDER BY T2.milliseconds Asc LIMIT value",
                -5.344821929931641
            ],
            [
                "SELECT T1.name , T1.name FROM races AS T1 JOIN constructorResults AS T2 ON T1.raceId = T2.raceId ORDER BY T2.positionText Asc LIMIT value",
                -5.392975807189941
            ],
            [
                "SELECT T2.rank , T1.name FROM races AS T1 JOIN results AS T2 JOIN lapTimes AS T3 ON T1.raceId = T3.raceId ORDER BY T3.milliseconds Asc LIMIT value",
                -5.531581163406372
            ],
            [
                "SELECT T2.positionText , T1.name FROM races AS T1 JOIN constructorStandings AS T2 ON T1.raceId = T2.raceId ORDER BY T1.name Asc LIMIT value",
                -5.602130651473999
            ],
            [
                "SELECT T1.date , T1.name FROM races AS T1 JOIN lapTimes AS T2 ON T1.raceId = T2.raceId ORDER BY T2.milliseconds Asc LIMIT value",
                -5.7544145584106445
            ]
        ],
        "predicted_parse_with_values": "SELECT name , name FROM races ORDER BY url Asc LIMIT 1",
        "template_feedback": "use lap times table and drivers table in place of races table . find forename and surname in place of name . order the results by milliseconds in place of races 's url .",
        "primary_span": [
            [
                0,
                6
            ],
            [
                13,
                16
            ],
            [
                22,
                26
            ]
        ],
        "secondary_span": [
            [
                7,
                12
            ],
            [
                17,
                21
            ],
            [
                27,
                33
            ]
        ],
        "edits": [
            "forename",
            "surname",
            "name",
            "drivers",
            "lap times",
            "races",
            "milliseconds",
            "url"
        ],
        "edits_original": "< select > add forename </ select > < select > add surname </ select > < select > remove name </ select > < from > add drivers </ from > < from > add lap times </ from > < from > remove races </ from > < orderBy > add milliseconds </ orderBy > < orderBy > remove url </ orderBy >"
    },
    {
        "db_id": "formula_1",
        "question": "What is the forename and surname of the driver with the shortest laptime?",
        "gold_parse": "SELECT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds LIMIT 1",
        "predicted_parse": "SELECT name , name FROM races ORDER BY url Asc LIMIT value",
        "predicted_parse_explanation": [
            "find the name and name in races table with smallest value of url"
        ],
        "feedback": "You should return the forename, surname from the driver's table and the smallest value of milliseconds instead of url",
        "beam": [
            [
                "SELECT name , name FROM races ORDER BY url Asc LIMIT value",
                -0.7786657810211182
            ],
            [
                "SELECT T1.name , T1.name FROM races AS T1 JOIN lapTimes AS T2 ON T1.raceId = T2.raceId ORDER BY T2.milliseconds Asc LIMIT value",
                -1.5220215320587158
            ],
            [
                "SELECT T2.positionText , T1.name FROM races AS T1 JOIN constructorStandings AS T2 ON T1.raceId = T2.raceId ORDER BY T1.url Asc LIMIT value",
                -2.778224468231201
            ],
            [
                "SELECT T2.positionText , T1.name FROM races AS T1 JOIN constructorStandings AS T2 ON T1.raceId = T2.raceId JOIN lapTimes AS T3 ON T1.raceId = T3.raceId ORDER BY T3.milliseconds Asc LIMIT value",
                -3.5123167037963867
            ],
            [
                "SELECT name , name FROM races ORDER BY name Asc LIMIT value",
                -3.5992350578308105
            ],
            [
                "SELECT circuitId , name FROM races ORDER BY url Asc LIMIT value",
                -3.680485486984253
            ],
            [
                "SELECT T1.name , T1.name FROM races AS T1 JOIN constructorStandings AS T2 ON T1.raceId = T2.raceId ORDER BY T2.constructorId Asc LIMIT value",
                -3.8978137969970703
            ],
            [
                "SELECT T1.name , T1.name FROM races AS T1 JOIN pitStops AS T2 ON T1.raceId = T2.raceId ORDER BY T2.milliseconds Asc LIMIT value",
                -4.094861030578613
            ],
            [
                "SELECT T1.name , T1.name FROM races AS T1 JOIN results AS T2 ORDER BY T2.time Asc LIMIT value",
                -4.300915241241455
            ],
            [
                "SELECT T1.circuitId , T1.name FROM races AS T1 JOIN lapTimes AS T2 ON T1.raceId = T2.raceId ORDER BY T2.milliseconds Asc LIMIT value",
                -4.424177646636963
            ],
            [
                "SELECT name , url FROM races ORDER BY url Asc LIMIT value",
                -4.578019380569458
            ],
            [
                "SELECT T2.rank , T1.name FROM races AS T1 JOIN results AS T2 ORDER BY T1.url Asc LIMIT value",
                -4.799567222595215
            ],
            [
                "SELECT T1.name , T1.url FROM races AS T1 JOIN lapTimes AS T2 ON T1.raceId = T2.raceId ORDER BY T2.milliseconds Asc LIMIT value",
                -4.875205755233765
            ],
            [
                "SELECT date , name FROM races ORDER BY url Asc LIMIT value",
                -4.976091146469116
            ],
            [
                "SELECT T1.name , T1.name FROM races AS T1 JOIN seasons AS T2 ORDER BY T2.dob Asc LIMIT value",
                -5.29580545425415
            ],
            [
                "SELECT T1.name , T1.name FROM races AS T1 JOIN results AS T2 ORDER BY T2.milliseconds Asc LIMIT value",
                -5.344821929931641
            ],
            [
                "SELECT T1.name , T1.name FROM races AS T1 JOIN constructorResults AS T2 ON T1.raceId = T2.raceId ORDER BY T2.positionText Asc LIMIT value",
                -5.392975807189941
            ],
            [
                "SELECT T2.rank , T1.name FROM races AS T1 JOIN results AS T2 JOIN lapTimes AS T3 ON T1.raceId = T3.raceId ORDER BY T3.milliseconds Asc LIMIT value",
                -5.531581163406372
            ],
            [
                "SELECT T2.positionText , T1.name FROM races AS T1 JOIN constructorStandings AS T2 ON T1.raceId = T2.raceId ORDER BY T1.name Asc LIMIT value",
                -5.602130651473999
            ],
            [
                "SELECT T1.date , T1.name FROM races AS T1 JOIN lapTimes AS T2 ON T1.raceId = T2.raceId ORDER BY T2.milliseconds Asc LIMIT value",
                -5.7544145584106445
            ]
        ],
        "predicted_parse_with_values": "SELECT name , name FROM races ORDER BY url Asc LIMIT 1",
        "template_feedback": "use lap times table and drivers table in place of races table . find forename and surname in place of name . order the results by milliseconds in place of races 's url .",
        "primary_span": [
            [
                0,
                6
            ],
            [
                13,
                16
            ],
            [
                22,
                26
            ]
        ],
        "secondary_span": [
            [
                7,
                12
            ],
            [
                17,
                21
            ],
            [
                27,
                33
            ]
        ],
        "edits": [
            "forename",
            "surname",
            "name",
            "drivers",
            "lap times",
            "races",
            "milliseconds",
            "url"
        ],
        "edits_original": "< select > add forename </ select > < select > add surname </ select > < select > remove name </ select > < from > add drivers </ from > < from > add lap times </ from > < from > remove races </ from > < orderBy > add milliseconds </ orderBy > < orderBy > remove url </ orderBy >"
    },
    {
        "db_id": "formula_1",
        "question": "What are the forenames and surnames of all unique drivers who had a lap time of less than 93000 milliseconds?",
        "gold_parse": "SELECT DISTINCT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds < 93000",
        "predicted_parse": "SELECT T1.driverRef , T1.driverRef FROM drivers AS T1 JOIN lapTimes AS T2 ON T1.driverId = T2.driverId WHERE T2.milliseconds < value",
        "predicted_parse_explanation": [
            "Step 1: for each row in drivers table , find the corresponding rows in lap times table",
            "Step 2: find the driver reference and driver reference of the results of step 1 whose milliseconds less than 93000"
        ],
        "feedback": "Replace driver reference  with forename ,  surname .",
        "beam": [
            [
                "SELECT T1.driverRef , T1.driverRef FROM drivers AS T1 JOIN lapTimes AS T2 ON T1.driverId = T2.driverId WHERE T2.milliseconds < value",
                -0.0177001953125
            ],
            [
                "SELECT T1.driverRef , T1.driverRef FROM drivers AS T1 JOIN constructorStandings AS T2 ON T1.driverId = T2.driverId WHERE T2.constructorId < value",
                -5.564949035644531
            ],
            [
                "SELECT T1.driverRef , T2.milliseconds FROM drivers AS T1 JOIN lapTimes AS T2 ON T1.driverId = T2.driverId WHERE T2.milliseconds < value",
                -5.930925369262695
            ],
            [
                "SELECT T1.driverRef , T2.lap FROM drivers AS T1 JOIN lapTimes AS T2 ON T1.driverId = T2.driverId WHERE T2.milliseconds < value",
                -6.1210832595825195
            ],
            [
                "SELECT T2.positionText , T1.driverRef FROM drivers AS T1 JOIN constructorStandings AS T2 ON T1.driverId = T2.driverId JOIN lapTimes AS T3 ON T1.driverId = T3.driverId WHERE T3.milliseconds < value",
                -6.514518737792969
            ],
            [
                "SELECT T2.driverRef , T4.positionText FROM races AS T1 JOIN drivers AS T2 JOIN constructorStandings AS T3 ON T2.driverId = T3.driverId AND T3.raceId = T1.raceId JOIN constructorResults AS T4 ON T1.raceId = T4.raceId JOIN lapTimes AS T5 ON T2.driverId = T5.driverId WHERE T5.milliseconds < value",
                -6.721044540405273
            ],
            [
                "SELECT T1.driverRef , T1.driverRef FROM drivers AS T1 JOIN lapTimes AS T2 ON T1.driverId = T2.driverId WHERE T2.lap < value",
                -6.88951301574707
            ],
            [
                "SELECT T1.driverRef , T2.positionOrder FROM drivers AS T1 JOIN constructorStandings AS T2 ON T1.driverId = T2.driverId JOIN lapTimes AS T3 ON T1.driverId = T3.driverId WHERE T3.milliseconds < value",
                -7.420926570892334
            ],
            [
                "SELECT T1.name , T2.driverRef FROM races AS T1 JOIN drivers AS T2 JOIN constructorStandings AS T3 ON T1.raceId = T3.raceId AND T3.driverId = T2.driverId JOIN lapTimes AS T4 ON T1.raceId = T4.raceId WHERE T4.milliseconds < value",
                -7.780158519744873
            ],
            [
                "SELECT T4.positionText , T2.driverRef FROM races AS T1 JOIN drivers AS T2 JOIN constructorStandings AS T3 ON T2.driverId = T3.driverId AND T3.raceId = T1.raceId JOIN constructorResults AS T4 ON T1.raceId = T4.raceId JOIN lapTimes AS T5 ON T2.driverId = T5.driverId WHERE T5.milliseconds < value",
                -7.820469379425049
            ],
            [
                "SELECT T1.country , T3.driverRef FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId AND T1.circuitId = T2.circuitId JOIN drivers AS T3 JOIN constructorStandings AS T4 ON T2.raceId = T4.raceId AND T4.driverId = T3.driverId JOIN lapTimes AS T5 ON T2.raceId = T5.raceId WHERE T5.milliseconds < value",
                -7.892613410949707
            ],
            [
                "SELECT T1.driverRef , T2.driverId FROM drivers AS T1 JOIN constructorStandings AS T2 ON T1.driverId = T2.driverId JOIN lapTimes AS T3 ON T1.driverId = T3.driverId WHERE T3.milliseconds < value",
                -8.217598915100098
            ],
            [
                "SELECT T1.driverRef , T2.positionText FROM drivers AS T1 JOIN constructorStandings AS T2 ON T1.driverId = T2.driverId JOIN lapTimes AS T3 ON T1.driverId = T3.driverId WHERE T3.milliseconds < value",
                -8.44173526763916
            ],
            [
                "SELECT T2.driverRef , T1.date FROM races AS T1 JOIN drivers AS T2 JOIN constructorStandings AS T3 ON T1.raceId = T3.raceId AND T3.driverId = T2.driverId JOIN lapTimes AS T4 ON T1.raceId = T4.raceId WHERE T4.milliseconds < value",
                -8.449877738952637
            ],
            [
                "SELECT T2.driverId , T1.driverRef FROM drivers AS T1 JOIN lapTimes AS T2 ON T1.driverId = T2.driverId WHERE T2.milliseconds < value",
                -8.474875450134277
            ],
            [
                "SELECT T2.driverRef , T1.name FROM races AS T1 JOIN drivers AS T2 JOIN constructorStandings AS T3 ON T1.raceId = T3.raceId AND T3.driverId = T2.driverId JOIN lapTimes AS T4 ON T1.raceId = T4.raceId WHERE T4.milliseconds < value",
                -8.66566276550293
            ],
            [
                "SELECT T1.date , T2.driverRef FROM races AS T1 JOIN drivers AS T2 JOIN constructorStandings AS T3 ON T1.raceId = T3.raceId AND T3.driverId = T2.driverId JOIN lapTimes AS T4 ON T1.raceId = T4.raceId WHERE T4.milliseconds < value",
                -8.676886558532715
            ],
            [
                "SELECT T2.constructorStandingsId , T1.driverRef FROM drivers AS T1 JOIN constructorStandings AS T2 ON T1.driverId = T2.driverId JOIN lapTimes AS T3 ON T1.driverId = T3.driverId WHERE T3.milliseconds < value",
                -8.785801887512207
            ],
            [
                "SELECT T2.driverRef , T1.time FROM races AS T1 JOIN drivers AS T2 JOIN constructorStandings AS T3 ON T1.raceId = T3.raceId AND T3.driverId = T2.driverId JOIN lapTimes AS T4 ON T1.raceId = T4.raceId WHERE T4.milliseconds < value",
                -8.820812225341797
            ],
            [
                "SELECT T2.dob , T1.driverRef FROM drivers AS T1 JOIN seasons AS T2 JOIN lapTimes AS T3 ON T1.driverId = T3.driverId WHERE T3.milliseconds < value",
                -8.908905982971191
            ]
        ],
        "predicted_parse_with_values": "SELECT T1.driverRef , T1.driverRef FROM drivers AS T1 JOIN lapTimes AS T2 ON T1.driverId = T2.driverId WHERE T2.milliseconds < 93000",
        "template_feedback": "in step 2 , find forename and surname in place of driver reference . make sure no repetition in the results .",
        "primary_span": [
            [
                4,
                7
            ],
            [
                14,
                21
            ]
        ],
        "secondary_span": [
            [
                8,
                13
            ]
        ],
        "edits": [
            "distinct",
            "forename",
            "surname",
            "driver reference"
        ],
        "edits_original": "< select > add distinct </ select > < select > add forename </ select > < select > add surname </ select > < select > remove driver reference </ select >"
    },
    {
        "db_id": "formula_1",
        "question": "What are the forenames and surnames of all unique drivers who had a lap time of less than 93000 milliseconds?",
        "gold_parse": "SELECT DISTINCT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds < 93000",
        "predicted_parse": "SELECT T1.driverRef , T1.driverRef FROM drivers AS T1 JOIN lapTimes AS T2 ON T1.driverId = T2.driverId WHERE T2.milliseconds < value",
        "predicted_parse_explanation": [
            "Step 1: for each row in drivers table , find the corresponding rows in lap times table",
            "Step 2: find the driver reference and driver reference of the results of step 1 whose milliseconds less than 93000"
        ],
        "feedback": "You need to find the first and last names instead of the driver reference",
        "beam": [
            [
                "SELECT T1.driverRef , T1.driverRef FROM drivers AS T1 JOIN lapTimes AS T2 ON T1.driverId = T2.driverId WHERE T2.milliseconds < value",
                -0.0177001953125
            ],
            [
                "SELECT T1.driverRef , T1.driverRef FROM drivers AS T1 JOIN constructorStandings AS T2 ON T1.driverId = T2.driverId WHERE T2.constructorId < value",
                -5.564949035644531
            ],
            [
                "SELECT T1.driverRef , T2.milliseconds FROM drivers AS T1 JOIN lapTimes AS T2 ON T1.driverId = T2.driverId WHERE T2.milliseconds < value",
                -5.930925369262695
            ],
            [
                "SELECT T1.driverRef , T2.lap FROM drivers AS T1 JOIN lapTimes AS T2 ON T1.driverId = T2.driverId WHERE T2.milliseconds < value",
                -6.1210832595825195
            ],
            [
                "SELECT T2.positionText , T1.driverRef FROM drivers AS T1 JOIN constructorStandings AS T2 ON T1.driverId = T2.driverId JOIN lapTimes AS T3 ON T1.driverId = T3.driverId WHERE T3.milliseconds < value",
                -6.514518737792969
            ],
            [
                "SELECT T2.driverRef , T4.positionText FROM races AS T1 JOIN drivers AS T2 JOIN constructorStandings AS T3 ON T2.driverId = T3.driverId AND T3.raceId = T1.raceId JOIN constructorResults AS T4 ON T1.raceId = T4.raceId JOIN lapTimes AS T5 ON T2.driverId = T5.driverId WHERE T5.milliseconds < value",
                -6.721044540405273
            ],
            [
                "SELECT T1.driverRef , T1.driverRef FROM drivers AS T1 JOIN lapTimes AS T2 ON T1.driverId = T2.driverId WHERE T2.lap < value",
                -6.88951301574707
            ],
            [
                "SELECT T1.driverRef , T2.positionOrder FROM drivers AS T1 JOIN constructorStandings AS T2 ON T1.driverId = T2.driverId JOIN lapTimes AS T3 ON T1.driverId = T3.driverId WHERE T3.milliseconds < value",
                -7.420926570892334
            ],
            [
                "SELECT T1.name , T2.driverRef FROM races AS T1 JOIN drivers AS T2 JOIN constructorStandings AS T3 ON T1.raceId = T3.raceId AND T3.driverId = T2.driverId JOIN lapTimes AS T4 ON T1.raceId = T4.raceId WHERE T4.milliseconds < value",
                -7.780158519744873
            ],
            [
                "SELECT T4.positionText , T2.driverRef FROM races AS T1 JOIN drivers AS T2 JOIN constructorStandings AS T3 ON T2.driverId = T3.driverId AND T3.raceId = T1.raceId JOIN constructorResults AS T4 ON T1.raceId = T4.raceId JOIN lapTimes AS T5 ON T2.driverId = T5.driverId WHERE T5.milliseconds < value",
                -7.820469379425049
            ],
            [
                "SELECT T1.country , T3.driverRef FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId AND T1.circuitId = T2.circuitId JOIN drivers AS T3 JOIN constructorStandings AS T4 ON T2.raceId = T4.raceId AND T4.driverId = T3.driverId JOIN lapTimes AS T5 ON T2.raceId = T5.raceId WHERE T5.milliseconds < value",
                -7.892613410949707
            ],
            [
                "SELECT T1.driverRef , T2.driverId FROM drivers AS T1 JOIN constructorStandings AS T2 ON T1.driverId = T2.driverId JOIN lapTimes AS T3 ON T1.driverId = T3.driverId WHERE T3.milliseconds < value",
                -8.217598915100098
            ],
            [
                "SELECT T1.driverRef , T2.positionText FROM drivers AS T1 JOIN constructorStandings AS T2 ON T1.driverId = T2.driverId JOIN lapTimes AS T3 ON T1.driverId = T3.driverId WHERE T3.milliseconds < value",
                -8.44173526763916
            ],
            [
                "SELECT T2.driverRef , T1.date FROM races AS T1 JOIN drivers AS T2 JOIN constructorStandings AS T3 ON T1.raceId = T3.raceId AND T3.driverId = T2.driverId JOIN lapTimes AS T4 ON T1.raceId = T4.raceId WHERE T4.milliseconds < value",
                -8.449877738952637
            ],
            [
                "SELECT T2.driverId , T1.driverRef FROM drivers AS T1 JOIN lapTimes AS T2 ON T1.driverId = T2.driverId WHERE T2.milliseconds < value",
                -8.474875450134277
            ],
            [
                "SELECT T2.driverRef , T1.name FROM races AS T1 JOIN drivers AS T2 JOIN constructorStandings AS T3 ON T1.raceId = T3.raceId AND T3.driverId = T2.driverId JOIN lapTimes AS T4 ON T1.raceId = T4.raceId WHERE T4.milliseconds < value",
                -8.66566276550293
            ],
            [
                "SELECT T1.date , T2.driverRef FROM races AS T1 JOIN drivers AS T2 JOIN constructorStandings AS T3 ON T1.raceId = T3.raceId AND T3.driverId = T2.driverId JOIN lapTimes AS T4 ON T1.raceId = T4.raceId WHERE T4.milliseconds < value",
                -8.676886558532715
            ],
            [
                "SELECT T2.constructorStandingsId , T1.driverRef FROM drivers AS T1 JOIN constructorStandings AS T2 ON T1.driverId = T2.driverId JOIN lapTimes AS T3 ON T1.driverId = T3.driverId WHERE T3.milliseconds < value",
                -8.785801887512207
            ],
            [
                "SELECT T2.driverRef , T1.time FROM races AS T1 JOIN drivers AS T2 JOIN constructorStandings AS T3 ON T1.raceId = T3.raceId AND T3.driverId = T2.driverId JOIN lapTimes AS T4 ON T1.raceId = T4.raceId WHERE T4.milliseconds < value",
                -8.820812225341797
            ],
            [
                "SELECT T2.dob , T1.driverRef FROM drivers AS T1 JOIN seasons AS T2 JOIN lapTimes AS T3 ON T1.driverId = T3.driverId WHERE T3.milliseconds < value",
                -8.908905982971191
            ]
        ],
        "predicted_parse_with_values": "SELECT T1.driverRef , T1.driverRef FROM drivers AS T1 JOIN lapTimes AS T2 ON T1.driverId = T2.driverId WHERE T2.milliseconds < 93000",
        "template_feedback": "in step 2 , find forename and surname in place of driver reference . make sure no repetition in the results .",
        "primary_span": [
            [
                4,
                7
            ],
            [
                14,
                21
            ]
        ],
        "secondary_span": [
            [
                8,
                13
            ]
        ],
        "edits": [
            "distinct",
            "forename",
            "surname",
            "driver reference"
        ],
        "edits_original": "< select > add distinct </ select > < select > add forename </ select > < select > add surname </ select > < select > remove driver reference </ select >"
    },
    {
        "db_id": "formula_1",
        "question": "What are the names of the races held after 2017 in Spain?",
        "gold_parse": "SELECT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \"Spain\" AND T1.year > 2017",
        "predicted_parse": "SELECT country FROM circuits WHERE circuitRef > value",
        "predicted_parse_explanation": [
            "find the country in circuits table whose circuit reference greater than Spain"
        ],
        "feedback": "Find name of races table , year greater than 2017 and make sure country equals Spain .",
        "beam": [
            [
                "SELECT country FROM circuits WHERE circuitRef > value",
                -0.1299610137939453
            ],
            [
                "SELECT country FROM circuits WHERE lat > value",
                -2.2770261764526367
            ],
            [
                "SELECT country FROM circuits WHERE lat > value AND circuitRef = value",
                -4.030794143676758
            ],
            [
                "SELECT country FROM circuits WHERE lng > value",
                -7.236413955688477
            ],
            [
                "SELECT country FROM circuits WHERE lng > value AND circuitRef = value",
                -7.715425491333008
            ],
            [
                "SELECT country FROM circuits WHERE circuitRef = value",
                -9.009442329406738
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN status AS T2 WHERE T2.number > value",
                -9.158731460571289
            ],
            [
                "SELECT country FROM circuits WHERE circuitRef = value AND circuitRef > value",
                -9.292671203613281
            ],
            [
                "SELECT country FROM circuits WHERE circuitRef < value",
                -12.250483512878418
            ],
            [
                "SELECT country FROM circuits WHERE circuitRef = value AND lat > value",
                -12.720442771911621
            ],
            [
                "SELECT country FROM circuits WHERE circuitRef > value AND circuitRef = value",
                -13.187972068786621
            ],
            [
                "SELECT country FROM circuits WHERE circuitRef = value OR circuitRef > value",
                -13.544698715209961
            ],
            [
                "SELECT country FROM circuits WHERE lat > value AND circuitRef < value",
                -13.546137809753418
            ],
            [
                "SELECT country FROM circuits GROUP BY country HAVING Count ( * ) > value",
                -13.86767864227295
            ],
            [
                "SELECT country FROM circuits WHERE circuitRef > = value",
                -14.094274520874023
            ],
            [
                "SELECT country , country FROM circuits WHERE circuitRef > value",
                -14.133233070373535
            ],
            [
                "SELECT DISTINCT country FROM circuits WHERE circuitRef > value",
                -14.874580383300781
            ],
            [
                "SELECT country FROM circuits WHERE DISTINCT circuitRef > value",
                -14.942353248596191
            ],
            [
                "SELECT country FROM circuits WHERE circuitRef > value LIMIT value",
                -15.003548622131348
            ],
            [
                "SELECT country FROM circuits",
                -15.36165714263916
            ]
        ],
        "predicted_parse_with_values": "SELECT country FROM circuits WHERE circuitRef > \"Spain\"",
        "template_feedback": "additionally use the information from the races table besides the circuits table . consider the year greater than 2017 and country equals Spain conditions in place of the circuit reference greater than Spain conditions . find races 's name in place of country .",
        "primary_span": [
            [
                0,
                7
            ],
            [
                13,
                23
            ],
            [
                35,
                38
            ]
        ],
        "secondary_span": [
            [
                8,
                12
            ],
            [
                24,
                34
            ],
            [
                39,
                43
            ]
        ],
        "edits": [
            "name",
            "country",
            "races",
            "country equals \"Spain\"",
            "year greater than 2017",
            "circuit reference greater than \"Spain\""
        ],
        "edits_original": "< select > add name </ select > < select > remove country </ select > < from > add races </ from > < where > add country equals \" Spain \" </ where > < where > add year greater than 2017 </ where > < where > remove circuit reference greater than \" Spain \" </ where >"
    },
    {
        "db_id": "formula_1",
        "question": "What are the names of the races held after 2017 in Spain?",
        "gold_parse": "SELECT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \"Spain\" AND T1.year > 2017",
        "predicted_parse": "SELECT country FROM circuits WHERE circuitRef > value",
        "predicted_parse_explanation": [
            "find the country in circuits table whose circuit reference greater than Spain"
        ],
        "feedback": "You need to find name of races whose year should be more than 2017 and happened in Spain.",
        "beam": [
            [
                "SELECT country FROM circuits WHERE circuitRef > value",
                -0.1299610137939453
            ],
            [
                "SELECT country FROM circuits WHERE lat > value",
                -2.2770261764526367
            ],
            [
                "SELECT country FROM circuits WHERE lat > value AND circuitRef = value",
                -4.030794143676758
            ],
            [
                "SELECT country FROM circuits WHERE lng > value",
                -7.236413955688477
            ],
            [
                "SELECT country FROM circuits WHERE lng > value AND circuitRef = value",
                -7.715425491333008
            ],
            [
                "SELECT country FROM circuits WHERE circuitRef = value",
                -9.009442329406738
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN status AS T2 WHERE T2.number > value",
                -9.158731460571289
            ],
            [
                "SELECT country FROM circuits WHERE circuitRef = value AND circuitRef > value",
                -9.292671203613281
            ],
            [
                "SELECT country FROM circuits WHERE circuitRef < value",
                -12.250483512878418
            ],
            [
                "SELECT country FROM circuits WHERE circuitRef = value AND lat > value",
                -12.720442771911621
            ],
            [
                "SELECT country FROM circuits WHERE circuitRef > value AND circuitRef = value",
                -13.187972068786621
            ],
            [
                "SELECT country FROM circuits WHERE circuitRef = value OR circuitRef > value",
                -13.544698715209961
            ],
            [
                "SELECT country FROM circuits WHERE lat > value AND circuitRef < value",
                -13.546137809753418
            ],
            [
                "SELECT country FROM circuits GROUP BY country HAVING Count ( * ) > value",
                -13.86767864227295
            ],
            [
                "SELECT country FROM circuits WHERE circuitRef > = value",
                -14.094274520874023
            ],
            [
                "SELECT country , country FROM circuits WHERE circuitRef > value",
                -14.133233070373535
            ],
            [
                "SELECT DISTINCT country FROM circuits WHERE circuitRef > value",
                -14.874580383300781
            ],
            [
                "SELECT country FROM circuits WHERE DISTINCT circuitRef > value",
                -14.942353248596191
            ],
            [
                "SELECT country FROM circuits WHERE circuitRef > value LIMIT value",
                -15.003548622131348
            ],
            [
                "SELECT country FROM circuits",
                -15.36165714263916
            ]
        ],
        "predicted_parse_with_values": "SELECT country FROM circuits WHERE circuitRef > \"Spain\"",
        "template_feedback": "additionally use the information from the races table besides the circuits table . consider the year greater than 2017 and country equals Spain conditions in place of the circuit reference greater than Spain conditions . find races 's name in place of country .",
        "primary_span": [
            [
                0,
                7
            ],
            [
                13,
                23
            ],
            [
                35,
                38
            ]
        ],
        "secondary_span": [
            [
                8,
                12
            ],
            [
                24,
                34
            ],
            [
                39,
                43
            ]
        ],
        "edits": [
            "name",
            "country",
            "races",
            "country equals \"Spain\"",
            "year greater than 2017",
            "circuit reference greater than \"Spain\""
        ],
        "edits_original": "< select > add name </ select > < select > remove country </ select > < from > add races </ from > < where > add country equals \" Spain \" </ where > < where > add year greater than 2017 </ where > < where > remove circuit reference greater than \" Spain \" </ where >"
    },
    {
        "db_id": "company_employee",
        "question": "Show names of companies and that of employees in descending order of number of years working for that employee.",
        "gold_parse": "SELECT T3.Name ,  T2.Name FROM employment AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID JOIN company AS T3 ON T1.Company_ID  =  T3.Company_ID ORDER BY T1.Year_working",
        "predicted_parse": "SELECT T1.Name , T2.Year_working FROM company AS T1 JOIN employment AS T2 ON T1.Company_ID = T2.Company_ID ORDER BY T2.Year_working Desc",
        "predicted_parse_explanation": [
            "Step 1: for each row in company table , find the corresponding rows in employment table",
            "Step 2: find the name and year working of the results of step 1 ordered descending by year working"
        ],
        "feedback": "Add people table in step 1 , put people's name whose people id be in employment not first year working in step 2.",
        "beam": [
            [
                "SELECT T1.Name , T2.Year_working FROM company AS T1 JOIN employment AS T2 ON T1.Company_ID = T2.Company_ID ORDER BY T2.Year_working Desc",
                -0.0011472702026367188
            ],
            [
                "SELECT T1.Name , T1.Name FROM company AS T1 JOIN employment AS T2 ON T1.Company_ID = T2.Company_ID ORDER BY T2.Year_working Desc",
                -7.473999977111816
            ],
            [
                "SELECT T2.Name , T1.Name FROM people AS T1 JOIN company AS T2 JOIN employment AS T3 ON T1.People_ID = T3.People_ID AND T3.Company_ID = T2.Company_ID AND T1.People_ID = T3.People_ID ORDER BY T3.Year_working Desc",
                -7.511402130126953
            ],
            [
                "SELECT T1.Name , Max ( T2.Year_working ) FROM company AS T1 JOIN employment AS T2 ON T1.Company_ID = T2.Company_ID ORDER BY T2.Year_working Desc",
                -12.01823616027832
            ],
            [
                "SELECT T1.Name , T2.Year_working FROM company AS T1 JOIN employment AS T2 ON T1.Company_ID = T2.Company_ID GROUP BY T2.Company_ID ORDER BY Max ( T2.Year_working ) Desc",
                -12.059128761291504
            ],
            [
                "SELECT T1.Name , T1.Sales_in_Billion FROM company AS T1 JOIN employment AS T2 ON T1.Company_ID = T2.Company_ID ORDER BY T2.Year_working Desc",
                -12.560290336608887
            ],
            [
                "SELECT T1.Name , T2.Year_working FROM company AS T1 JOIN employment AS T2 ON T1.Company_ID = T2.Company_ID ORDER BY T2.Year_working Desc LIMIT value",
                -12.629090309143066
            ],
            [
                "SELECT T1.Name , T1.Headquarters FROM company AS T1 JOIN employment AS T2 ON T1.Company_ID = T2.Company_ID ORDER BY T2.Year_working Desc",
                -12.900904655456543
            ],
            [
                "SELECT T1.Name , T1.Profits_in_Billion FROM company AS T1 JOIN employment AS T2 ON T1.Company_ID = T2.Company_ID ORDER BY T2.Year_working Desc",
                -12.955657958984375
            ],
            [
                "SELECT T1.Name FROM company AS T1 JOIN employment AS T2 ON T1.Company_ID = T2.Company_ID ORDER BY T2.Year_working Desc",
                -13.30805778503418
            ],
            [
                "SELECT T1.Name , T2.Company_ID FROM company AS T1 JOIN employment AS T2 ON T1.Company_ID = T2.Company_ID ORDER BY T2.Year_working Desc",
                -14.173561096191406
            ],
            [
                "SELECT T1.Name , T2.Year_working FROM company AS T1 JOIN employment AS T2 ON T1.Company_ID = T2.Company_ID ORDER BY T2.Year_working Asc",
                -14.249185562133789
            ],
            [
                "SELECT T1.Name , T2.Year_working FROM company AS T1 JOIN employment AS T2 ON T1.Company_ID = T2.Company_ID GROUP BY T2.Company_ID ORDER BY Sum ( T2.Year_working ) Desc",
                -14.315669059753418
            ],
            [
                "SELECT T2.Name , T3.Year_working FROM people AS T1 JOIN company AS T2 JOIN employment AS T3 ON T1.People_ID = T3.People_ID AND T3.Company_ID = T2.Company_ID AND T1.People_ID = T3.People_ID WHERE T1.Name = value ORDER BY T3.Year_working Desc",
                -14.39550495147705
            ],
            [
                "SELECT DISTINCT T1.Name , T2.Year_working FROM company AS T1 JOIN employment AS T2 ON T1.Company_ID = T2.Company_ID ORDER BY T2.Year_working Desc",
                -14.470974922180176
            ],
            [
                "SELECT T2.Name , T3.Year_working FROM people AS T1 JOIN company AS T2 JOIN employment AS T3 ON T1.People_ID = T3.People_ID AND T3.Company_ID = T2.Company_ID AND T1.People_ID = T3.People_ID WHERE T1.Name = value",
                -14.53504753112793
            ],
            [
                "SELECT T1.Name , T1.Company_ID FROM company AS T1 JOIN employment AS T2 ON T1.Company_ID = T2.Company_ID ORDER BY T2.Year_working Desc",
                -14.637035369873047
            ],
            [
                "SELECT DISTINCT T1.Name , T2.Year_working FROM company AS T1 JOIN employment AS T2 ON T1.Company_ID = T2.Company_ID ORDER BY T2.Year_working Desc",
                -14.782852172851562
            ],
            [
                "SELECT T1.Name , Sum ( T2.Year_working ) FROM company AS T1 JOIN employment AS T2 ON T1.Company_ID = T2.Company_ID ORDER BY T2.Year_working Desc",
                -14.799559593200684
            ],
            [
                "SELECT T1.Name , T2.Year_working FROM company AS T1 JOIN employment AS T2 ON T1.Company_ID = T2.Company_ID ORDER BY DISTINCT T2.Year_working Desc",
                -14.867789268493652
            ]
        ],
        "predicted_parse_with_values": "SELECT T1.Name , T2.Year_working FROM company AS T1 JOIN employment AS T2 ON T1.Company_ID = T2.Company_ID ORDER BY T2.Year_working Desc",
        "template_feedback": "in step 1 , additionally use the information from the people table . in step 2 , find people 's name in place of year working . order the results ascending .",
        "primary_span": [
            [
                4,
                12
            ],
            [
                17,
                20
            ],
            [
                27,
                31
            ]
        ],
        "secondary_span": [
            [
                21,
                26
            ]
        ],
        "edits": [
            "name",
            "year working",
            "people",
            "descending"
        ],
        "edits_original": "< select > add name </ select > < select > remove year working </ select > < from > add people </ from > < orderBy > remove descending </ orderBy >"
    },
    {
        "db_id": "company_employee",
        "question": "Show names of companies and that of employees in descending order of number of years working for that employee.",
        "gold_parse": "SELECT T3.Name ,  T2.Name FROM employment AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID JOIN company AS T3 ON T1.Company_ID  =  T3.Company_ID ORDER BY T1.Year_working",
        "predicted_parse": "SELECT T1.Name , T2.Year_working FROM company AS T1 JOIN employment AS T2 ON T1.Company_ID = T2.Company_ID ORDER BY T2.Year_working Desc",
        "predicted_parse_explanation": [
            "Step 1: for each row in company table , find the corresponding rows in employment table",
            "Step 2: find the name and year working of the results of step 1 ordered descending by year working"
        ],
        "feedback": "You need to use the people's table in step 1 and in step 2, include people's name whose Id's are present in employment table but have not worked in the first year.",
        "beam": [
            [
                "SELECT T1.Name , T2.Year_working FROM company AS T1 JOIN employment AS T2 ON T1.Company_ID = T2.Company_ID ORDER BY T2.Year_working Desc",
                -0.0011472702026367188
            ],
            [
                "SELECT T1.Name , T1.Name FROM company AS T1 JOIN employment AS T2 ON T1.Company_ID = T2.Company_ID ORDER BY T2.Year_working Desc",
                -7.473999977111816
            ],
            [
                "SELECT T2.Name , T1.Name FROM people AS T1 JOIN company AS T2 JOIN employment AS T3 ON T1.People_ID = T3.People_ID AND T3.Company_ID = T2.Company_ID AND T1.People_ID = T3.People_ID ORDER BY T3.Year_working Desc",
                -7.511402130126953
            ],
            [
                "SELECT T1.Name , Max ( T2.Year_working ) FROM company AS T1 JOIN employment AS T2 ON T1.Company_ID = T2.Company_ID ORDER BY T2.Year_working Desc",
                -12.01823616027832
            ],
            [
                "SELECT T1.Name , T2.Year_working FROM company AS T1 JOIN employment AS T2 ON T1.Company_ID = T2.Company_ID GROUP BY T2.Company_ID ORDER BY Max ( T2.Year_working ) Desc",
                -12.059128761291504
            ],
            [
                "SELECT T1.Name , T1.Sales_in_Billion FROM company AS T1 JOIN employment AS T2 ON T1.Company_ID = T2.Company_ID ORDER BY T2.Year_working Desc",
                -12.560290336608887
            ],
            [
                "SELECT T1.Name , T2.Year_working FROM company AS T1 JOIN employment AS T2 ON T1.Company_ID = T2.Company_ID ORDER BY T2.Year_working Desc LIMIT value",
                -12.629090309143066
            ],
            [
                "SELECT T1.Name , T1.Headquarters FROM company AS T1 JOIN employment AS T2 ON T1.Company_ID = T2.Company_ID ORDER BY T2.Year_working Desc",
                -12.900904655456543
            ],
            [
                "SELECT T1.Name , T1.Profits_in_Billion FROM company AS T1 JOIN employment AS T2 ON T1.Company_ID = T2.Company_ID ORDER BY T2.Year_working Desc",
                -12.955657958984375
            ],
            [
                "SELECT T1.Name FROM company AS T1 JOIN employment AS T2 ON T1.Company_ID = T2.Company_ID ORDER BY T2.Year_working Desc",
                -13.30805778503418
            ],
            [
                "SELECT T1.Name , T2.Company_ID FROM company AS T1 JOIN employment AS T2 ON T1.Company_ID = T2.Company_ID ORDER BY T2.Year_working Desc",
                -14.173561096191406
            ],
            [
                "SELECT T1.Name , T2.Year_working FROM company AS T1 JOIN employment AS T2 ON T1.Company_ID = T2.Company_ID ORDER BY T2.Year_working Asc",
                -14.249185562133789
            ],
            [
                "SELECT T1.Name , T2.Year_working FROM company AS T1 JOIN employment AS T2 ON T1.Company_ID = T2.Company_ID GROUP BY T2.Company_ID ORDER BY Sum ( T2.Year_working ) Desc",
                -14.315669059753418
            ],
            [
                "SELECT T2.Name , T3.Year_working FROM people AS T1 JOIN company AS T2 JOIN employment AS T3 ON T1.People_ID = T3.People_ID AND T3.Company_ID = T2.Company_ID AND T1.People_ID = T3.People_ID WHERE T1.Name = value ORDER BY T3.Year_working Desc",
                -14.39550495147705
            ],
            [
                "SELECT DISTINCT T1.Name , T2.Year_working FROM company AS T1 JOIN employment AS T2 ON T1.Company_ID = T2.Company_ID ORDER BY T2.Year_working Desc",
                -14.470974922180176
            ],
            [
                "SELECT T2.Name , T3.Year_working FROM people AS T1 JOIN company AS T2 JOIN employment AS T3 ON T1.People_ID = T3.People_ID AND T3.Company_ID = T2.Company_ID AND T1.People_ID = T3.People_ID WHERE T1.Name = value",
                -14.53504753112793
            ],
            [
                "SELECT T1.Name , T1.Company_ID FROM company AS T1 JOIN employment AS T2 ON T1.Company_ID = T2.Company_ID ORDER BY T2.Year_working Desc",
                -14.637035369873047
            ],
            [
                "SELECT DISTINCT T1.Name , T2.Year_working FROM company AS T1 JOIN employment AS T2 ON T1.Company_ID = T2.Company_ID ORDER BY T2.Year_working Desc",
                -14.782852172851562
            ],
            [
                "SELECT T1.Name , Sum ( T2.Year_working ) FROM company AS T1 JOIN employment AS T2 ON T1.Company_ID = T2.Company_ID ORDER BY T2.Year_working Desc",
                -14.799559593200684
            ],
            [
                "SELECT T1.Name , T2.Year_working FROM company AS T1 JOIN employment AS T2 ON T1.Company_ID = T2.Company_ID ORDER BY DISTINCT T2.Year_working Desc",
                -14.867789268493652
            ]
        ],
        "predicted_parse_with_values": "SELECT T1.Name , T2.Year_working FROM company AS T1 JOIN employment AS T2 ON T1.Company_ID = T2.Company_ID ORDER BY T2.Year_working Desc",
        "template_feedback": "in step 1 , additionally use the information from the people table . in step 2 , find people 's name in place of year working . order the results ascending .",
        "primary_span": [
            [
                4,
                12
            ],
            [
                17,
                20
            ],
            [
                27,
                31
            ]
        ],
        "secondary_span": [
            [
                21,
                26
            ]
        ],
        "edits": [
            "name",
            "year working",
            "people",
            "descending"
        ],
        "edits_original": "< select > add name </ select > < select > remove year working </ select > < from > add people </ from > < orderBy > remove descending </ orderBy >"
    },
    {
        "db_id": "company_employee",
        "question": "Show the names of employees that work for companies with sales bigger than 200.",
        "gold_parse": "SELECT T2.Name FROM employment AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID JOIN company AS T3 ON T1.Company_ID  =  T3.Company_ID WHERE T3.Sales_in_Billion  >  200",
        "predicted_parse": "SELECT Name FROM company WHERE Sales_in_Billion > value",
        "predicted_parse_explanation": [
            "find the name in company table whose sales in billion greater than 200"
        ],
        "feedback": "We should find name from people table as opposed to name of company table .",
        "beam": [
            [
                "SELECT Name FROM company WHERE Sales_in_Billion > value",
                -0.0008640289306640625
            ],
            [
                "SELECT T1.Name FROM people AS T1 JOIN company AS T2 JOIN employment AS T3 ON T1.People_ID = T3.People_ID AND T3.Company_ID = T2.Company_ID WHERE T2.Sales_in_Billion > value",
                -7.077859878540039
            ],
            [
                "SELECT T1.Name FROM company AS T1 JOIN employment AS T2 ON T1.Company_ID = T2.Company_ID WHERE T2.Year_working > value",
                -11.89766788482666
            ],
            [
                "SELECT Name , Name FROM company WHERE Sales_in_Billion > value",
                -12.946273803710938
            ],
            [
                "SELECT Name FROM company WHERE Profits_in_Billion > value",
                -13.08161449432373
            ],
            [
                "SELECT DISTINCT Name FROM company WHERE Sales_in_Billion > value",
                -13.339694023132324
            ],
            [
                "SELECT Name FROM company WHERE Sales_in_Billion < value",
                -13.492709159851074
            ],
            [
                "SELECT Name FROM company GROUP BY Name HAVING Count ( * ) > value",
                -13.569442749023438
            ],
            [
                "SELECT Name FROM company EXCEPT SELECT Name FROM company WHERE Sales_in_Billion > value",
                -13.66203784942627
            ],
            [
                "SELECT Name FROM company",
                -14.397324562072754
            ],
            [
                "SELECT Name FROM company WHERE Sales_in_Billion > value LIMIT value",
                -14.718317985534668
            ],
            [
                "SELECT DISTINCT Name FROM company WHERE Sales_in_Billion > value",
                -14.747557640075684
            ],
            [
                "SELECT Name FROM company WHERE DISTINCT Sales_in_Billion > value",
                -14.762218475341797
            ],
            [
                "SELECT Name FROM company WHERE Sales_in_Billion > value INTERSECT SELECT Name FROM company WHERE Sales_in_Billion > value",
                -14.941672325134277
            ],
            [
                "SELECT Name FROM company WHERE Market_Value_in_Billion > value",
                -15.21586799621582
            ],
            [
                "SELECT Name FROM company GROUP BY Company_ID HAVING Count ( * ) > value",
                -15.623834133148193
            ],
            [
                "SELECT Name FROM company WHERE Sales_in_Billion < = value",
                -15.884191513061523
            ],
            [
                "SELECT Name , Sales_in_Billion FROM company WHERE Sales_in_Billion > value",
                -16.07822823524475
            ],
            [
                "SELECT Name FROM company WHERE Sales_in_Billion = value",
                -16.29419994354248
            ],
            [
                "SELECT Name FROM company WHERE Sales_in_Billion > = value",
                -16.39742088317871
            ]
        ],
        "predicted_parse_with_values": "SELECT Name FROM company WHERE Sales_in_Billion > 200",
        "template_feedback": "additionally use the information from the people table and employment table besides the company table . find people 's name in place of company 's name .",
        "primary_span": [
            [
                0,
                10
            ],
            [
                16,
                19
            ]
        ],
        "secondary_span": [
            [
                11,
                15
            ],
            [
                20,
                26
            ]
        ],
        "edits": [
            "employment",
            "people"
        ],
        "edits_original": "< from > add employment </ from > < from > add people </ from >"
    },
    {
        "db_id": "company_employee",
        "question": "Show the names of employees that work for companies with sales bigger than 200.",
        "gold_parse": "SELECT T2.Name FROM employment AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID JOIN company AS T3 ON T1.Company_ID  =  T3.Company_ID WHERE T3.Sales_in_Billion  >  200",
        "predicted_parse": "SELECT Name FROM company WHERE Sales_in_Billion > value",
        "predicted_parse_explanation": [
            "find the name in company table whose sales in billion greater than 200"
        ],
        "feedback": "Against name  from company table, I want you to look for name of people table.",
        "beam": [
            [
                "SELECT Name FROM company WHERE Sales_in_Billion > value",
                -0.0008640289306640625
            ],
            [
                "SELECT T1.Name FROM people AS T1 JOIN company AS T2 JOIN employment AS T3 ON T1.People_ID = T3.People_ID AND T3.Company_ID = T2.Company_ID WHERE T2.Sales_in_Billion > value",
                -7.077859878540039
            ],
            [
                "SELECT T1.Name FROM company AS T1 JOIN employment AS T2 ON T1.Company_ID = T2.Company_ID WHERE T2.Year_working > value",
                -11.89766788482666
            ],
            [
                "SELECT Name , Name FROM company WHERE Sales_in_Billion > value",
                -12.946273803710938
            ],
            [
                "SELECT Name FROM company WHERE Profits_in_Billion > value",
                -13.08161449432373
            ],
            [
                "SELECT DISTINCT Name FROM company WHERE Sales_in_Billion > value",
                -13.339694023132324
            ],
            [
                "SELECT Name FROM company WHERE Sales_in_Billion < value",
                -13.492709159851074
            ],
            [
                "SELECT Name FROM company GROUP BY Name HAVING Count ( * ) > value",
                -13.569442749023438
            ],
            [
                "SELECT Name FROM company EXCEPT SELECT Name FROM company WHERE Sales_in_Billion > value",
                -13.66203784942627
            ],
            [
                "SELECT Name FROM company",
                -14.397324562072754
            ],
            [
                "SELECT Name FROM company WHERE Sales_in_Billion > value LIMIT value",
                -14.718317985534668
            ],
            [
                "SELECT DISTINCT Name FROM company WHERE Sales_in_Billion > value",
                -14.747557640075684
            ],
            [
                "SELECT Name FROM company WHERE DISTINCT Sales_in_Billion > value",
                -14.762218475341797
            ],
            [
                "SELECT Name FROM company WHERE Sales_in_Billion > value INTERSECT SELECT Name FROM company WHERE Sales_in_Billion > value",
                -14.941672325134277
            ],
            [
                "SELECT Name FROM company WHERE Market_Value_in_Billion > value",
                -15.21586799621582
            ],
            [
                "SELECT Name FROM company GROUP BY Company_ID HAVING Count ( * ) > value",
                -15.623834133148193
            ],
            [
                "SELECT Name FROM company WHERE Sales_in_Billion < = value",
                -15.884191513061523
            ],
            [
                "SELECT Name , Sales_in_Billion FROM company WHERE Sales_in_Billion > value",
                -16.07822823524475
            ],
            [
                "SELECT Name FROM company WHERE Sales_in_Billion = value",
                -16.29419994354248
            ],
            [
                "SELECT Name FROM company WHERE Sales_in_Billion > = value",
                -16.39742088317871
            ]
        ],
        "predicted_parse_with_values": "SELECT Name FROM company WHERE Sales_in_Billion > 200",
        "template_feedback": "additionally use the information from the people table and employment table besides the company table . find people 's name in place of company 's name .",
        "primary_span": [
            [
                0,
                10
            ],
            [
                16,
                19
            ]
        ],
        "secondary_span": [
            [
                11,
                15
            ],
            [
                20,
                26
            ]
        ],
        "edits": [
            "employment",
            "people"
        ],
        "edits_original": "< from > add employment </ from > < from > add people </ from >"
    },
    {
        "db_id": "company_employee",
        "question": "Show the names of companies and the number of employees they have",
        "gold_parse": "SELECT T3.Name ,  COUNT(*) FROM employment AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID JOIN company AS T3 ON T1.Company_ID  =  T3.Company_ID GROUP BY T3.Name",
        "predicted_parse": "SELECT T1.Name , Count ( * ) FROM company AS T1 JOIN employment AS T2 ON T1.Company_ID = T2.Company_ID GROUP BY T2.Company_ID",
        "predicted_parse_explanation": [
            "Step 1: for each row in company table , find the corresponding rows in employment table",
            "Step 2: find each value of employment 's company id of the results of step 1 along with the number of the corresponding rows to each value"
        ],
        "feedback": "In step 2 find company's name along with number of corresponding rows of each value of company id in employment table .",
        "beam": [
            [
                "SELECT T1.Name , Count ( * ) FROM company AS T1 JOIN employment AS T2 ON T1.Company_ID = T2.Company_ID GROUP BY T2.Company_ID",
                -0.058135032653808594
            ],
            [
                "SELECT Name , Count ( * ) FROM company GROUP BY Name",
                -2.8945536613464355
            ],
            [
                "SELECT Name , Count ( * ) FROM company GROUP BY Company_ID",
                -6.794116497039795
            ],
            [
                "SELECT Count ( DISTINCT T1.Name ) , Count ( * ) FROM company AS T1 JOIN employment AS T2 ON T1.Company_ID = T2.Company_ID GROUP BY T2.Company_ID",
                -11.28439998626709
            ],
            [
                "SELECT Name , Count ( * ) FROM company",
                -11.80084228515625
            ],
            [
                "SELECT T1.Name , Count ( * ) , T2.Company_ID FROM company AS T1 JOIN employment AS T2 ON T1.Company_ID = T2.Company_ID GROUP BY T2.Company_ID",
                -12.673723936080933
            ],
            [
                "SELECT T1.Name , Count ( * ) FROM company AS T1 JOIN employment AS T2 ON T1.Company_ID = T2.Company_ID GROUP BY T2.Company_ID ORDER BY Count ( * ) Asc LIMIT value",
                -13.658001899719238
            ],
            [
                "SELECT T1.Name , Count ( * ) FROM company AS T1 JOIN employment AS T2 ON T1.Company_ID = T2.Company_ID GROUP BY T2.Company_ID LIMIT value",
                -13.973800659179688
            ],
            [
                "SELECT DISTINCT T1.Name , Count ( * ) FROM company AS T1 JOIN employment AS T2 ON T1.Company_ID = T2.Company_ID GROUP BY T2.Company_ID",
                -14.0581636428833
            ],
            [
                "SELECT T1.Name , Count ( * ) , Count ( * ) FROM company AS T1 JOIN employment AS T2 ON T1.Company_ID = T2.Company_ID GROUP BY T2.Company_ID",
                -14.431123733520508
            ],
            [
                "SELECT T1.Name , Count ( * ) FROM company AS T1 JOIN employment AS T2 ON T1.Company_ID = T2.Company_ID GROUP BY DISTINCT T2.Company_ID",
                -14.693469047546387
            ],
            [
                "SELECT Count ( DISTINCT Name ) , Count ( * ) FROM company GROUP BY Name",
                -14.702317237854004
            ],
            [
                "SELECT T1.Name , Count ( DISTINCT * ) FROM company AS T1 JOIN employment AS T2 ON T1.Company_ID = T2.Company_ID GROUP BY T2.Company_ID",
                -14.927114486694336
            ],
            [
                "SELECT Name , Count ( * ) FROM company GROUP BY Industry",
                -15.152677536010742
            ],
            [
                "SELECT T1.Name , Sum ( * ) FROM company AS T1 JOIN employment AS T2 ON T1.Company_ID = T2.Company_ID GROUP BY T2.Company_ID",
                -15.221651077270508
            ],
            [
                "SELECT DISTINCT T1.Name , Count ( * ) FROM company AS T1 JOIN employment AS T2 ON T1.Company_ID = T2.Company_ID GROUP BY T2.Company_ID",
                -15.254508972167969
            ],
            [
                "SELECT T2.Name , Count ( * ) FROM people AS T1 JOIN company AS T2 JOIN employment AS T3 ON T1.People_ID = T3.People_ID AND T3.Company_ID = T2.Company_ID GROUP BY T1.People_ID",
                -15.346866607666016
            ],
            [
                "SELECT T1.Name , T1.Name FROM company AS T1 JOIN employment AS T2 ON T1.Company_ID = T2.Company_ID GROUP BY T2.Company_ID",
                -15.368252635002136
            ],
            [
                "SELECT T1.Name FROM company AS T1 JOIN employment AS T2 ON T1.Company_ID = T2.Company_ID GROUP BY T2.Company_ID",
                -15.670232772827148
            ],
            [
                "SELECT Name FROM company GROUP BY Name",
                -17.479291915893555
            ]
        ],
        "predicted_parse_with_values": "SELECT T1.Name , Count ( * ) FROM company AS T1 JOIN employment AS T2 ON T1.Company_ID = T2.Company_ID GROUP BY T2.Company_ID",
        "template_feedback": "in step 1 , additionally use the information from the people table . in step 2 , find for each value of company 's name in place of employment 's company id .",
        "primary_span": [
            [
                4,
                12
            ],
            [
                17,
                24
            ]
        ],
        "secondary_span": [
            [
                25,
                32
            ]
        ],
        "edits": [
            "people",
            "name",
            "company id"
        ],
        "edits_original": "< from > add people </ from > < groupBy > add name </ groupBy > < groupBy > remove company id </ groupBy >"
    },
    {
        "db_id": "company_employee",
        "question": "Show the names of companies and the number of employees they have",
        "gold_parse": "SELECT T3.Name ,  COUNT(*) FROM employment AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID JOIN company AS T3 ON T1.Company_ID  =  T3.Company_ID GROUP BY T3.Name",
        "predicted_parse": "SELECT T1.Name , Count ( * ) FROM company AS T1 JOIN employment AS T2 ON T1.Company_ID = T2.Company_ID GROUP BY T2.Company_ID",
        "predicted_parse_explanation": [
            "Step 1: for each row in company table , find the corresponding rows in employment table",
            "Step 2: find each value of employment 's company id of the results of step 1 along with the number of the corresponding rows to each value"
        ],
        "feedback": "You should find company name and number of rows of company id of employment table in step 2.",
        "beam": [
            [
                "SELECT T1.Name , Count ( * ) FROM company AS T1 JOIN employment AS T2 ON T1.Company_ID = T2.Company_ID GROUP BY T2.Company_ID",
                -0.058135032653808594
            ],
            [
                "SELECT Name , Count ( * ) FROM company GROUP BY Name",
                -2.8945536613464355
            ],
            [
                "SELECT Name , Count ( * ) FROM company GROUP BY Company_ID",
                -6.794116497039795
            ],
            [
                "SELECT Count ( DISTINCT T1.Name ) , Count ( * ) FROM company AS T1 JOIN employment AS T2 ON T1.Company_ID = T2.Company_ID GROUP BY T2.Company_ID",
                -11.28439998626709
            ],
            [
                "SELECT Name , Count ( * ) FROM company",
                -11.80084228515625
            ],
            [
                "SELECT T1.Name , Count ( * ) , T2.Company_ID FROM company AS T1 JOIN employment AS T2 ON T1.Company_ID = T2.Company_ID GROUP BY T2.Company_ID",
                -12.673723936080933
            ],
            [
                "SELECT T1.Name , Count ( * ) FROM company AS T1 JOIN employment AS T2 ON T1.Company_ID = T2.Company_ID GROUP BY T2.Company_ID ORDER BY Count ( * ) Asc LIMIT value",
                -13.658001899719238
            ],
            [
                "SELECT T1.Name , Count ( * ) FROM company AS T1 JOIN employment AS T2 ON T1.Company_ID = T2.Company_ID GROUP BY T2.Company_ID LIMIT value",
                -13.973800659179688
            ],
            [
                "SELECT DISTINCT T1.Name , Count ( * ) FROM company AS T1 JOIN employment AS T2 ON T1.Company_ID = T2.Company_ID GROUP BY T2.Company_ID",
                -14.0581636428833
            ],
            [
                "SELECT T1.Name , Count ( * ) , Count ( * ) FROM company AS T1 JOIN employment AS T2 ON T1.Company_ID = T2.Company_ID GROUP BY T2.Company_ID",
                -14.431123733520508
            ],
            [
                "SELECT T1.Name , Count ( * ) FROM company AS T1 JOIN employment AS T2 ON T1.Company_ID = T2.Company_ID GROUP BY DISTINCT T2.Company_ID",
                -14.693469047546387
            ],
            [
                "SELECT Count ( DISTINCT Name ) , Count ( * ) FROM company GROUP BY Name",
                -14.702317237854004
            ],
            [
                "SELECT T1.Name , Count ( DISTINCT * ) FROM company AS T1 JOIN employment AS T2 ON T1.Company_ID = T2.Company_ID GROUP BY T2.Company_ID",
                -14.927114486694336
            ],
            [
                "SELECT Name , Count ( * ) FROM company GROUP BY Industry",
                -15.152677536010742
            ],
            [
                "SELECT T1.Name , Sum ( * ) FROM company AS T1 JOIN employment AS T2 ON T1.Company_ID = T2.Company_ID GROUP BY T2.Company_ID",
                -15.221651077270508
            ],
            [
                "SELECT DISTINCT T1.Name , Count ( * ) FROM company AS T1 JOIN employment AS T2 ON T1.Company_ID = T2.Company_ID GROUP BY T2.Company_ID",
                -15.254508972167969
            ],
            [
                "SELECT T2.Name , Count ( * ) FROM people AS T1 JOIN company AS T2 JOIN employment AS T3 ON T1.People_ID = T3.People_ID AND T3.Company_ID = T2.Company_ID GROUP BY T1.People_ID",
                -15.346866607666016
            ],
            [
                "SELECT T1.Name , T1.Name FROM company AS T1 JOIN employment AS T2 ON T1.Company_ID = T2.Company_ID GROUP BY T2.Company_ID",
                -15.368252635002136
            ],
            [
                "SELECT T1.Name FROM company AS T1 JOIN employment AS T2 ON T1.Company_ID = T2.Company_ID GROUP BY T2.Company_ID",
                -15.670232772827148
            ],
            [
                "SELECT Name FROM company GROUP BY Name",
                -17.479291915893555
            ]
        ],
        "predicted_parse_with_values": "SELECT T1.Name , Count ( * ) FROM company AS T1 JOIN employment AS T2 ON T1.Company_ID = T2.Company_ID GROUP BY T2.Company_ID",
        "template_feedback": "in step 1 , additionally use the information from the people table . in step 2 , find for each value of company 's name in place of employment 's company id .",
        "primary_span": [
            [
                4,
                12
            ],
            [
                17,
                24
            ]
        ],
        "secondary_span": [
            [
                25,
                32
            ]
        ],
        "edits": [
            "people",
            "name",
            "company id"
        ],
        "edits_original": "< from > add people </ from > < groupBy > add name </ groupBy > < groupBy > remove company id </ groupBy >"
    },
    {
        "db_id": "company_employee",
        "question": "list the names of the companies with more than 200 sales in the descending order of sales and profits.",
        "gold_parse": "SELECT name FROM company WHERE Sales_in_Billion  >  200 ORDER BY Sales_in_Billion ,  Profits_in_Billion DESC",
        "predicted_parse": "SELECT Name FROM company WHERE Profits_in_Billion > value ORDER BY Sales_in_Billion Desc",
        "predicted_parse_explanation": [
            "find the name in company table whose profits in billion greater than 200 ordered descending by sales in billion"
        ],
        "feedback": "Also should order descending by profits in billion and put sales in billion instead profits in billion .",
        "beam": [
            [
                "SELECT Name FROM company WHERE Profits_in_Billion > value ORDER BY Sales_in_Billion Desc",
                -0.5325441360473633
            ],
            [
                "SELECT Name FROM company WHERE Sales_in_Billion > value ORDER BY Sales_in_Billion Desc",
                -0.9169797897338867
            ],
            [
                "SELECT Name FROM company WHERE Profits_in_Billion > value ORDER BY Profits_in_Billion Desc",
                -4.915060043334961
            ],
            [
                "SELECT Name FROM company WHERE Sales_in_Billion > value ORDER BY Profits_in_Billion Desc",
                -5.243867874145508
            ],
            [
                "SELECT Name FROM company WHERE Sales_in_Billion > value ORDER BY Name Desc",
                -8.2699556350708
            ],
            [
                "SELECT Name FROM company WHERE Profits_in_Billion > value ORDER BY Name Desc",
                -8.775556564331055
            ],
            [
                "SELECT Name FROM company WHERE Profits_in_Billion < = value ORDER BY Sales_in_Billion Desc",
                -9.297229766845703
            ],
            [
                "SELECT Name FROM company WHERE Profits_in_Billion > value GROUP BY Company_ID ORDER BY Max ( Sales_in_Billion ) Desc",
                -12.002899169921875
            ],
            [
                "SELECT Name FROM company WHERE Profits_in_Billion > value GROUP BY Company_ID ORDER BY Sales_in_Billion Desc",
                -12.164485931396484
            ],
            [
                "SELECT Name FROM company WHERE Profits_in_Billion > value GROUP BY Name ORDER BY Max ( Sales_in_Billion ) Desc",
                -12.756586074829102
            ],
            [
                "SELECT Name FROM company ORDER BY Sales_in_Billion Desc",
                -12.788116455078125
            ],
            [
                "SELECT Name FROM company WHERE Sales_in_Billion > value INTERSECT SELECT Name FROM company WHERE Profits_in_Billion < value",
                -12.84052848815918
            ],
            [
                "SELECT Name FROM company WHERE Sales_in_Billion > value ORDER BY Sales_in_Billion Asc",
                -13.104990005493164
            ],
            [
                "SELECT Name FROM company WHERE Profits_in_Billion < = value ORDER BY Profits_in_Billion Desc",
                -13.503839492797852
            ],
            [
                "SELECT Name FROM company WHERE Profits_in_Billion > value GROUP BY Name ORDER BY Sales_in_Billion Desc",
                -13.559098243713379
            ],
            [
                "SELECT Name FROM company WHERE Profits_in_Billion > value ORDER BY Sales_in_Billion Asc",
                -13.570467948913574
            ],
            [
                "SELECT Name FROM company WHERE Sales_in_Billion > value GROUP BY Company_ID ORDER BY Sales_in_Billion Desc",
                -13.650615692138672
            ],
            [
                "SELECT Name , Profits_in_Billion FROM company WHERE Profits_in_Billion > value ORDER BY Sales_in_Billion Desc",
                -13.731741905212402
            ],
            [
                "SELECT Name FROM company WHERE Sales_in_Billion > value AND Profits_in_Billion = value",
                -13.792275428771973
            ],
            [
                "SELECT Name FROM company WHERE Profits_in_Billion = value ORDER BY Sales_in_Billion Desc",
                -13.967918395996094
            ]
        ],
        "predicted_parse_with_values": "SELECT Name FROM company WHERE Profits_in_Billion > 200 ORDER BY Sales_in_Billion Desc",
        "template_feedback": "consider the sales in billion greater than 200 conditions in place of the profits in billion greater than 200 conditions . additionally order the results by profits in billion .",
        "primary_span": [
            [
                0,
                8
            ],
            [
                21,
                29
            ]
        ],
        "secondary_span": [
            [
                9,
                20
            ]
        ],
        "edits": [
            "sales in billion greater than 200",
            "profits in billion greater than 200",
            "profits in billion"
        ],
        "edits_original": "< where > add sales in billion greater than 200 </ where > < where > remove profits in billion greater than 200 </ where > < orderBy > add profits in billion </ orderBy >"
    },
    {
        "db_id": "company_employee",
        "question": "list the names of the companies with more than 200 sales in the descending order of sales and profits.",
        "gold_parse": "SELECT name FROM company WHERE Sales_in_Billion  >  200 ORDER BY Sales_in_Billion ,  Profits_in_Billion DESC",
        "predicted_parse": "SELECT Name FROM company WHERE Profits_in_Billion > value ORDER BY Sales_in_Billion Desc",
        "predicted_parse_explanation": [
            "find the name in company table whose profits in billion greater than 200 ordered descending by sales in billion"
        ],
        "feedback": "You need to substitute sales in billion in place of profit in billion, also make sure that profit in billion is ordered in descending order.",
        "beam": [
            [
                "SELECT Name FROM company WHERE Profits_in_Billion > value ORDER BY Sales_in_Billion Desc",
                -0.5325441360473633
            ],
            [
                "SELECT Name FROM company WHERE Sales_in_Billion > value ORDER BY Sales_in_Billion Desc",
                -0.9169797897338867
            ],
            [
                "SELECT Name FROM company WHERE Profits_in_Billion > value ORDER BY Profits_in_Billion Desc",
                -4.915060043334961
            ],
            [
                "SELECT Name FROM company WHERE Sales_in_Billion > value ORDER BY Profits_in_Billion Desc",
                -5.243867874145508
            ],
            [
                "SELECT Name FROM company WHERE Sales_in_Billion > value ORDER BY Name Desc",
                -8.2699556350708
            ],
            [
                "SELECT Name FROM company WHERE Profits_in_Billion > value ORDER BY Name Desc",
                -8.775556564331055
            ],
            [
                "SELECT Name FROM company WHERE Profits_in_Billion < = value ORDER BY Sales_in_Billion Desc",
                -9.297229766845703
            ],
            [
                "SELECT Name FROM company WHERE Profits_in_Billion > value GROUP BY Company_ID ORDER BY Max ( Sales_in_Billion ) Desc",
                -12.002899169921875
            ],
            [
                "SELECT Name FROM company WHERE Profits_in_Billion > value GROUP BY Company_ID ORDER BY Sales_in_Billion Desc",
                -12.164485931396484
            ],
            [
                "SELECT Name FROM company WHERE Profits_in_Billion > value GROUP BY Name ORDER BY Max ( Sales_in_Billion ) Desc",
                -12.756586074829102
            ],
            [
                "SELECT Name FROM company ORDER BY Sales_in_Billion Desc",
                -12.788116455078125
            ],
            [
                "SELECT Name FROM company WHERE Sales_in_Billion > value INTERSECT SELECT Name FROM company WHERE Profits_in_Billion < value",
                -12.84052848815918
            ],
            [
                "SELECT Name FROM company WHERE Sales_in_Billion > value ORDER BY Sales_in_Billion Asc",
                -13.104990005493164
            ],
            [
                "SELECT Name FROM company WHERE Profits_in_Billion < = value ORDER BY Profits_in_Billion Desc",
                -13.503839492797852
            ],
            [
                "SELECT Name FROM company WHERE Profits_in_Billion > value GROUP BY Name ORDER BY Sales_in_Billion Desc",
                -13.559098243713379
            ],
            [
                "SELECT Name FROM company WHERE Profits_in_Billion > value ORDER BY Sales_in_Billion Asc",
                -13.570467948913574
            ],
            [
                "SELECT Name FROM company WHERE Sales_in_Billion > value GROUP BY Company_ID ORDER BY Sales_in_Billion Desc",
                -13.650615692138672
            ],
            [
                "SELECT Name , Profits_in_Billion FROM company WHERE Profits_in_Billion > value ORDER BY Sales_in_Billion Desc",
                -13.731741905212402
            ],
            [
                "SELECT Name FROM company WHERE Sales_in_Billion > value AND Profits_in_Billion = value",
                -13.792275428771973
            ],
            [
                "SELECT Name FROM company WHERE Profits_in_Billion = value ORDER BY Sales_in_Billion Desc",
                -13.967918395996094
            ]
        ],
        "predicted_parse_with_values": "SELECT Name FROM company WHERE Profits_in_Billion > 200 ORDER BY Sales_in_Billion Desc",
        "template_feedback": "consider the sales in billion greater than 200 conditions in place of the profits in billion greater than 200 conditions . additionally order the results by profits in billion .",
        "primary_span": [
            [
                0,
                8
            ],
            [
                21,
                29
            ]
        ],
        "secondary_span": [
            [
                9,
                20
            ]
        ],
        "edits": [
            "sales in billion greater than 200",
            "profits in billion greater than 200",
            "profits in billion"
        ],
        "edits_original": "< where > add sales in billion greater than 200 </ where > < where > remove profits in billion greater than 200 </ where > < orderBy > add profits in billion </ orderBy >"
    },
    {
        "db_id": "small_bank_1",
        "question": "What are the names of customers with checking balances lower than the average checking balance?",
        "gold_parse": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM checking)",
        "predicted_parse": "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T3.balance ) FROM CHECKING AS T3 )",
        "predicted_parse_explanation": [
            "Step 1: for each row in accounts table , find the corresponding rows in savings table",
            "Step 2: find the average checking 's balance in checking table",
            "Step 3: find the name of the results of step 1 whose savings 's balance less than the results of step 2"
        ],
        "feedback": "In step 2 Switch savings with checking . In step 3 Switch savings balance with checking balance .",
        "beam": [
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T2.balance ) FROM SAVINGS AS T2 )",
                -1.2188935279846191
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T3.balance ) FROM CHECKING AS T3 )",
                -1.3124732971191406
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T3.balance ) FROM SAVINGS AS T3 )",
                -1.5264036655426025
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T2.balance ) FROM CHECKING AS T2 )",
                -1.6198904514312744
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 WHERE T1.name < ( SELECT Avg ( T2.balance ) FROM SAVINGS AS T2 )",
                -4.771528720855713
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 WHERE T1.name < ( SELECT Avg ( T2.balance ) FROM CHECKING AS T2 )",
                -4.874200344085693
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T1.name ) FROM ACCOUNTS AS T1 )",
                -6.668666839599609
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T1.name ) FROM ACCOUNTS AS T1 )",
                -6.9771568775177
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 WHERE T1.name < ( SELECT Avg ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name = value )",
                -8.180263996124268
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 WHERE T1.name < ( SELECT Avg ( T2.balance ) FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T1.name = value )",
                -8.28007698059082
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name = value )",
                -8.92970895767212
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T3.balance ) FROM ACCOUNTS AS T1 JOIN CHECKING AS T3 ON T1.custid = T3.custid WHERE T1.name = value )",
                -9.027690887451172
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T3.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T3 ON T1.custid = T3.custid WHERE T1.name = value )",
                -9.225632905960083
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T2.balance ) FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T1.name = value )",
                -9.323596239089966
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid GROUP BY T1.name HAVING Avg ( T2.balance ) < ( SELECT Avg ( T2.balance ) FROM SAVINGS AS T2 )",
                -9.9654541015625
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid GROUP BY T1.name HAVING Avg ( T2.balance ) < ( SELECT Avg ( T3.balance ) FROM CHECKING AS T3 )",
                -10.052696228027344
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid GROUP BY T1.name HAVING Avg ( T2.balance ) < ( SELECT Avg ( T3.balance ) FROM SAVINGS AS T3 )",
                -10.06989860534668
            ],
            [
                "SELECT name FROM ACCOUNTS WHERE name < value",
                -10.10791540145874
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 WHERE T1.name < ( SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid GROUP BY T1.name ORDER BY Avg ( T2.balance ) Desc LIMIT value )",
                -10.83475375175476
            ],
            [
                "SELECT name FROM ACCOUNTS",
                -13.01071834564209
            ]
        ],
        "predicted_parse_with_values": "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T3.balance ) FROM CHECKING AS T3 )",
        "template_feedback": "in step 1 , use checking table in place of savings table in step 3 , make sure the checking 's balance is less than the results of step 2 the savings 's balance is less than the results of step 2 .",
        "primary_span": [
            [
                4,
                6
            ],
            [
                16,
                29
            ]
        ],
        "secondary_span": [
            [
                7,
                11
            ],
            [
                30,
                42
            ]
        ],
        "edits": [
            "checking",
            "savings"
        ],
        "edits_original": "< from > add checking </ from > < from > remove savings </ from >"
    },
    {
        "db_id": "small_bank_1",
        "question": "What are the names of customers with checking balances lower than the average checking balance?",
        "gold_parse": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM checking)",
        "predicted_parse": "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T3.balance ) FROM CHECKING AS T3 )",
        "predicted_parse_explanation": [
            "Step 1: for each row in accounts table , find the corresponding rows in savings table",
            "Step 2: find the average checking 's balance in checking table",
            "Step 3: find the name of the results of step 1 whose savings 's balance less than the results of step 2"
        ],
        "feedback": "In step 2 and 3, swap between savings and checking, balance of savings and balance of checking.",
        "beam": [
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T2.balance ) FROM SAVINGS AS T2 )",
                -1.2188935279846191
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T3.balance ) FROM CHECKING AS T3 )",
                -1.3124732971191406
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T3.balance ) FROM SAVINGS AS T3 )",
                -1.5264036655426025
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T2.balance ) FROM CHECKING AS T2 )",
                -1.6198904514312744
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 WHERE T1.name < ( SELECT Avg ( T2.balance ) FROM SAVINGS AS T2 )",
                -4.771528720855713
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 WHERE T1.name < ( SELECT Avg ( T2.balance ) FROM CHECKING AS T2 )",
                -4.874200344085693
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T1.name ) FROM ACCOUNTS AS T1 )",
                -6.668666839599609
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T1.name ) FROM ACCOUNTS AS T1 )",
                -6.9771568775177
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 WHERE T1.name < ( SELECT Avg ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name = value )",
                -8.180263996124268
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 WHERE T1.name < ( SELECT Avg ( T2.balance ) FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T1.name = value )",
                -8.28007698059082
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name = value )",
                -8.92970895767212
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T3.balance ) FROM ACCOUNTS AS T1 JOIN CHECKING AS T3 ON T1.custid = T3.custid WHERE T1.name = value )",
                -9.027690887451172
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T3.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T3 ON T1.custid = T3.custid WHERE T1.name = value )",
                -9.225632905960083
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T2.balance ) FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T1.name = value )",
                -9.323596239089966
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid GROUP BY T1.name HAVING Avg ( T2.balance ) < ( SELECT Avg ( T2.balance ) FROM SAVINGS AS T2 )",
                -9.9654541015625
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid GROUP BY T1.name HAVING Avg ( T2.balance ) < ( SELECT Avg ( T3.balance ) FROM CHECKING AS T3 )",
                -10.052696228027344
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid GROUP BY T1.name HAVING Avg ( T2.balance ) < ( SELECT Avg ( T3.balance ) FROM SAVINGS AS T3 )",
                -10.06989860534668
            ],
            [
                "SELECT name FROM ACCOUNTS WHERE name < value",
                -10.10791540145874
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 WHERE T1.name < ( SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid GROUP BY T1.name ORDER BY Avg ( T2.balance ) Desc LIMIT value )",
                -10.83475375175476
            ],
            [
                "SELECT name FROM ACCOUNTS",
                -13.01071834564209
            ]
        ],
        "predicted_parse_with_values": "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T3.balance ) FROM CHECKING AS T3 )",
        "template_feedback": "in step 1 , use checking table in place of savings table in step 3 , make sure the checking 's balance is less than the results of step 2 the savings 's balance is less than the results of step 2 .",
        "primary_span": [
            [
                4,
                6
            ],
            [
                16,
                29
            ]
        ],
        "secondary_span": [
            [
                7,
                11
            ],
            [
                30,
                42
            ]
        ],
        "edits": [
            "checking",
            "savings"
        ],
        "edits_original": "< from > add checking </ from > < from > remove savings </ from >"
    },
    {
        "db_id": "small_bank_1",
        "question": "What are the names of customers with checking balances lower than the average checking balance?",
        "gold_parse": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM checking)",
        "predicted_parse": "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T3.balance ) FROM CHECKING AS T3 )",
        "predicted_parse_explanation": [
            "Step 1: for each row in accounts table , find the corresponding rows in savings table",
            "Step 2: find the average checking 's balance in checking table",
            "Step 3: find the name of the results of step 1 whose savings 's balance less than the results of step 2"
        ],
        "feedback": "In step 2 Switch savings with checking . In step 3 Switch savings 's balance with checking 's balance .",
        "beam": [
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T2.balance ) FROM SAVINGS AS T2 )",
                -1.2188935279846191
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T3.balance ) FROM CHECKING AS T3 )",
                -1.3124732971191406
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T3.balance ) FROM SAVINGS AS T3 )",
                -1.5264036655426025
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T2.balance ) FROM CHECKING AS T2 )",
                -1.6198904514312744
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 WHERE T1.name < ( SELECT Avg ( T2.balance ) FROM SAVINGS AS T2 )",
                -4.771528720855713
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 WHERE T1.name < ( SELECT Avg ( T2.balance ) FROM CHECKING AS T2 )",
                -4.874200344085693
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T1.name ) FROM ACCOUNTS AS T1 )",
                -6.668666839599609
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T1.name ) FROM ACCOUNTS AS T1 )",
                -6.9771568775177
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 WHERE T1.name < ( SELECT Avg ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name = value )",
                -8.180263996124268
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 WHERE T1.name < ( SELECT Avg ( T2.balance ) FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T1.name = value )",
                -8.28007698059082
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name = value )",
                -8.92970895767212
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T3.balance ) FROM ACCOUNTS AS T1 JOIN CHECKING AS T3 ON T1.custid = T3.custid WHERE T1.name = value )",
                -9.027690887451172
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T3.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T3 ON T1.custid = T3.custid WHERE T1.name = value )",
                -9.225632905960083
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T2.balance ) FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T1.name = value )",
                -9.323596239089966
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid GROUP BY T1.name HAVING Avg ( T2.balance ) < ( SELECT Avg ( T2.balance ) FROM SAVINGS AS T2 )",
                -9.9654541015625
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid GROUP BY T1.name HAVING Avg ( T2.balance ) < ( SELECT Avg ( T3.balance ) FROM CHECKING AS T3 )",
                -10.052696228027344
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid GROUP BY T1.name HAVING Avg ( T2.balance ) < ( SELECT Avg ( T3.balance ) FROM SAVINGS AS T3 )",
                -10.06989860534668
            ],
            [
                "SELECT name FROM ACCOUNTS WHERE name < value",
                -10.10791540145874
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 WHERE T1.name < ( SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid GROUP BY T1.name ORDER BY Avg ( T2.balance ) Desc LIMIT value )",
                -10.83475375175476
            ],
            [
                "SELECT name FROM ACCOUNTS",
                -13.01071834564209
            ]
        ],
        "predicted_parse_with_values": "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T3.balance ) FROM CHECKING AS T3 )",
        "template_feedback": "in step 1 , use checking table in place of savings table in step 3 , make sure the checking 's balance is less than the results of step 2 the savings 's balance is less than the results of step 2 .",
        "primary_span": [
            [
                4,
                6
            ],
            [
                16,
                29
            ]
        ],
        "secondary_span": [
            [
                7,
                11
            ],
            [
                30,
                42
            ]
        ],
        "edits": [
            "checking",
            "savings"
        ],
        "edits_original": "< from > add checking </ from > < from > remove savings </ from >"
    },
    {
        "db_id": "small_bank_1",
        "question": "What are the names of customers with checking balances lower than the average checking balance?",
        "gold_parse": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM checking)",
        "predicted_parse": "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T3.balance ) FROM CHECKING AS T3 )",
        "predicted_parse_explanation": [
            "Step 1: for each row in accounts table , find the corresponding rows in savings table",
            "Step 2: find the average checking 's balance in checking table",
            "Step 3: find the name of the results of step 1 whose savings 's balance less than the results of step 2"
        ],
        "feedback": "Find the checking and balance from checking table by swapping them with savings, savings table in step 2 and 3 respectively.",
        "beam": [
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T2.balance ) FROM SAVINGS AS T2 )",
                -1.2188935279846191
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T3.balance ) FROM CHECKING AS T3 )",
                -1.3124732971191406
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T3.balance ) FROM SAVINGS AS T3 )",
                -1.5264036655426025
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T2.balance ) FROM CHECKING AS T2 )",
                -1.6198904514312744
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 WHERE T1.name < ( SELECT Avg ( T2.balance ) FROM SAVINGS AS T2 )",
                -4.771528720855713
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 WHERE T1.name < ( SELECT Avg ( T2.balance ) FROM CHECKING AS T2 )",
                -4.874200344085693
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T1.name ) FROM ACCOUNTS AS T1 )",
                -6.668666839599609
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T1.name ) FROM ACCOUNTS AS T1 )",
                -6.9771568775177
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 WHERE T1.name < ( SELECT Avg ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name = value )",
                -8.180263996124268
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 WHERE T1.name < ( SELECT Avg ( T2.balance ) FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T1.name = value )",
                -8.28007698059082
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name = value )",
                -8.92970895767212
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T3.balance ) FROM ACCOUNTS AS T1 JOIN CHECKING AS T3 ON T1.custid = T3.custid WHERE T1.name = value )",
                -9.027690887451172
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T3.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T3 ON T1.custid = T3.custid WHERE T1.name = value )",
                -9.225632905960083
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T2.balance ) FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T1.name = value )",
                -9.323596239089966
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid GROUP BY T1.name HAVING Avg ( T2.balance ) < ( SELECT Avg ( T2.balance ) FROM SAVINGS AS T2 )",
                -9.9654541015625
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid GROUP BY T1.name HAVING Avg ( T2.balance ) < ( SELECT Avg ( T3.balance ) FROM CHECKING AS T3 )",
                -10.052696228027344
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid GROUP BY T1.name HAVING Avg ( T2.balance ) < ( SELECT Avg ( T3.balance ) FROM SAVINGS AS T3 )",
                -10.06989860534668
            ],
            [
                "SELECT name FROM ACCOUNTS WHERE name < value",
                -10.10791540145874
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 WHERE T1.name < ( SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid GROUP BY T1.name ORDER BY Avg ( T2.balance ) Desc LIMIT value )",
                -10.83475375175476
            ],
            [
                "SELECT name FROM ACCOUNTS",
                -13.01071834564209
            ]
        ],
        "predicted_parse_with_values": "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T3.balance ) FROM CHECKING AS T3 )",
        "template_feedback": "in step 1 , use checking table in place of savings table in step 3 , make sure the checking 's balance is less than the results of step 2 the savings 's balance is less than the results of step 2 .",
        "primary_span": [
            [
                4,
                6
            ],
            [
                16,
                29
            ]
        ],
        "secondary_span": [
            [
                7,
                11
            ],
            [
                30,
                42
            ]
        ],
        "edits": [
            "checking",
            "savings"
        ],
        "edits_original": "< from > add checking </ from > < from > remove savings </ from >"
    },
    {
        "db_id": "formula_1",
        "question": "What are all the different first names of the drivers who are in position as standing and won?",
        "gold_parse": "SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1",
        "predicted_parse": "SELECT DISTINCT rank FROM results",
        "predicted_parse_explanation": [
            "find without repetition rank in results table"
        ],
        "feedback": "Find status  's constructor id whose position equals standing and constructor id equals 1.",
        "beam": [
            [
                "SELECT DISTINCT T2.positionText FROM races AS T1 JOIN constructorStandings AS T2 ON T2.raceId = T1.raceId JOIN constructorResults AS T3 ON T1.raceId = T3.raceId WHERE T3.raceId = value",
                -1.518139362335205
            ],
            [
                "SELECT DISTINCT T1.positionText FROM constructorStandings AS T1 JOIN results AS T2 WHERE T2.fastestLap = value",
                -1.6807589530944824
            ],
            [
                "SELECT DISTINCT positionText FROM constructorStandings WHERE position = value",
                -1.7257580757141113
            ],
            [
                "SELECT DISTINCT T1.rank FROM results AS T1 JOIN constructorResults AS T2 WHERE T2.raceId = value",
                -2.4102087020874023
            ],
            [
                "SELECT DISTINCT rank FROM results WHERE fastestLap = value",
                -2.4263105392456055
            ],
            [
                "SELECT DISTINCT T2.rank FROM constructorStandings AS T1 JOIN results AS T2 WHERE T1.position = value",
                -2.5612993240356445
            ],
            [
                "SELECT DISTINCT T1.constructorRef FROM constructors AS T1 JOIN results AS T2 WHERE T2.fastestLap = value",
                -3.1668648719787598
            ],
            [
                "SELECT DISTINCT T1.constructorRef FROM constructors AS T1 JOIN constructorResults AS T2 ON T1.constructorId = T2.constructorId WHERE T2.raceId = value",
                -3.1940865516662598
            ],
            [
                "SELECT DISTINCT T1.constructorRef FROM constructors AS T1 JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId WHERE T2.position = value",
                -3.373352527618408
            ],
            [
                "SELECT DISTINCT T1.position FROM constructorStandings AS T1 JOIN results AS T2 WHERE T2.fastestLap = value",
                -4.853535175323486
            ],
            [
                "SELECT DISTINCT T2.position FROM races AS T1 JOIN constructorStandings AS T2 ON T2.raceId = T1.raceId JOIN constructorResults AS T3 ON T1.raceId = T3.raceId WHERE T3.raceId = value",
                -4.9100661277771
            ],
            [
                "SELECT DISTINCT fastestLap FROM results WHERE fastestLap = value",
                -5.396515369415283
            ],
            [
                "SELECT DISTINCT T1.fastestLap FROM results AS T1 JOIN constructorResults AS T2 WHERE T2.raceId = value",
                -5.410009860992432
            ],
            [
                "SELECT DISTINCT position FROM constructorStandings WHERE position = value",
                -5.468222141265869
            ],
            [
                "SELECT DISTINCT T2.fastestLap FROM constructorStandings AS T1 JOIN results AS T2 WHERE T1.position = value",
                -6.02156400680542
            ],
            [
                "SELECT DISTINCT T2.positionText FROM drivers AS T1 JOIN constructorStandings AS T2 ON T2.driverId = T1.driverId JOIN lapTimes AS T3 ON T1.driverId = T3.driverId WHERE T3.position = value",
                -6.829857349395752
            ],
            [
                "SELECT DISTINCT * FROM constructorResults WHERE raceId = value",
                -6.9089884757995605
            ],
            [
                "SELECT DISTINCT T1.positionText FROM constructorStandings AS T1 JOIN results AS T2 WHERE T1.position = value AND T2.fastestLap = value",
                -7.118942737579346
            ],
            [
                "SELECT DISTINCT positionText FROM constructorStandings",
                -8.402451515197754
            ],
            [
                "SELECT DISTINCT rank FROM results",
                -9.091641426086426
            ]
        ],
        "predicted_parse_with_values": "SELECT DISTINCT rank FROM results",
        "template_feedback": "use driver standings table and drivers table in place of results table . additionally make sure that driver standings 's position equals 1 and wins equals 1 . find forename in place of rank .",
        "primary_span": [
            [
                0,
                6
            ],
            [
                13,
                27
            ],
            [
                28,
                29
            ]
        ],
        "secondary_span": [
            [
                7,
                12
            ],
            [
                30,
                34
            ]
        ],
        "edits": [
            "forename",
            "rank",
            "drivers",
            "driver standings",
            "results",
            "position equals 1",
            "wins equals 1"
        ],
        "edits_original": "< select > add forename </ select > < select > remove rank </ select > < from > add drivers </ from > < from > add driver standings </ from > < from > remove results </ from > < where > add position equals 1 </ where > < where > add wins equals 1 </ where >"
    },
    {
        "db_id": "formula_1",
        "question": "What are all the different first names of the drivers who are in position as standing and won?",
        "gold_parse": "SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1",
        "predicted_parse": "SELECT DISTINCT rank FROM results",
        "predicted_parse_explanation": [
            "find without repetition rank in results table"
        ],
        "feedback": "You should search for those constructor id which is equivalent to 1 and has standing position.",
        "beam": [
            [
                "SELECT DISTINCT T2.positionText FROM races AS T1 JOIN constructorStandings AS T2 ON T2.raceId = T1.raceId JOIN constructorResults AS T3 ON T1.raceId = T3.raceId WHERE T3.raceId = value",
                -1.518139362335205
            ],
            [
                "SELECT DISTINCT T1.positionText FROM constructorStandings AS T1 JOIN results AS T2 WHERE T2.fastestLap = value",
                -1.6807589530944824
            ],
            [
                "SELECT DISTINCT positionText FROM constructorStandings WHERE position = value",
                -1.7257580757141113
            ],
            [
                "SELECT DISTINCT T1.rank FROM results AS T1 JOIN constructorResults AS T2 WHERE T2.raceId = value",
                -2.4102087020874023
            ],
            [
                "SELECT DISTINCT rank FROM results WHERE fastestLap = value",
                -2.4263105392456055
            ],
            [
                "SELECT DISTINCT T2.rank FROM constructorStandings AS T1 JOIN results AS T2 WHERE T1.position = value",
                -2.5612993240356445
            ],
            [
                "SELECT DISTINCT T1.constructorRef FROM constructors AS T1 JOIN results AS T2 WHERE T2.fastestLap = value",
                -3.1668648719787598
            ],
            [
                "SELECT DISTINCT T1.constructorRef FROM constructors AS T1 JOIN constructorResults AS T2 ON T1.constructorId = T2.constructorId WHERE T2.raceId = value",
                -3.1940865516662598
            ],
            [
                "SELECT DISTINCT T1.constructorRef FROM constructors AS T1 JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId WHERE T2.position = value",
                -3.373352527618408
            ],
            [
                "SELECT DISTINCT T1.position FROM constructorStandings AS T1 JOIN results AS T2 WHERE T2.fastestLap = value",
                -4.853535175323486
            ],
            [
                "SELECT DISTINCT T2.position FROM races AS T1 JOIN constructorStandings AS T2 ON T2.raceId = T1.raceId JOIN constructorResults AS T3 ON T1.raceId = T3.raceId WHERE T3.raceId = value",
                -4.9100661277771
            ],
            [
                "SELECT DISTINCT fastestLap FROM results WHERE fastestLap = value",
                -5.396515369415283
            ],
            [
                "SELECT DISTINCT T1.fastestLap FROM results AS T1 JOIN constructorResults AS T2 WHERE T2.raceId = value",
                -5.410009860992432
            ],
            [
                "SELECT DISTINCT position FROM constructorStandings WHERE position = value",
                -5.468222141265869
            ],
            [
                "SELECT DISTINCT T2.fastestLap FROM constructorStandings AS T1 JOIN results AS T2 WHERE T1.position = value",
                -6.02156400680542
            ],
            [
                "SELECT DISTINCT T2.positionText FROM drivers AS T1 JOIN constructorStandings AS T2 ON T2.driverId = T1.driverId JOIN lapTimes AS T3 ON T1.driverId = T3.driverId WHERE T3.position = value",
                -6.829857349395752
            ],
            [
                "SELECT DISTINCT * FROM constructorResults WHERE raceId = value",
                -6.9089884757995605
            ],
            [
                "SELECT DISTINCT T1.positionText FROM constructorStandings AS T1 JOIN results AS T2 WHERE T1.position = value AND T2.fastestLap = value",
                -7.118942737579346
            ],
            [
                "SELECT DISTINCT positionText FROM constructorStandings",
                -8.402451515197754
            ],
            [
                "SELECT DISTINCT rank FROM results",
                -9.091641426086426
            ]
        ],
        "predicted_parse_with_values": "SELECT DISTINCT rank FROM results",
        "template_feedback": "use driver standings table and drivers table in place of results table . additionally make sure that driver standings 's position equals 1 and wins equals 1 . find forename in place of rank .",
        "primary_span": [
            [
                0,
                6
            ],
            [
                13,
                27
            ],
            [
                28,
                29
            ]
        ],
        "secondary_span": [
            [
                7,
                12
            ],
            [
                30,
                34
            ]
        ],
        "edits": [
            "forename",
            "rank",
            "drivers",
            "driver standings",
            "results",
            "position equals 1",
            "wins equals 1"
        ],
        "edits_original": "< select > add forename </ select > < select > remove rank </ select > < from > add drivers </ from > < from > add driver standings </ from > < from > remove results </ from > < where > add position equals 1 </ where > < where > add wins equals 1 </ where >"
    },
    {
        "db_id": "flight_1",
        "question": "What is the average distance and average price for flights from Los Angeles.",
        "gold_parse": "SELECT avg(distance) ,  avg(price) FROM Flight WHERE origin  =  \"Los Angeles\"",
        "predicted_parse": "SELECT Avg ( distance ) , Avg ( price ) FROM flight WHERE destination = value",
        "predicted_parse_explanation": [
            "find the average distance and average price in flight table whose destination equals Los Angeles"
        ],
        "feedback": "Exchange destination with origin .",
        "beam": [
            [
                "SELECT Avg ( distance ) , Avg ( price ) FROM flight",
                -0.9190549850463867
            ],
            [
                "SELECT Avg ( distance ) , Avg ( price ) FROM flight WHERE destination = value",
                -1.4374210834503174
            ],
            [
                "SELECT Avg ( T1.distance ) , Avg ( T1.price ) FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T2.name = value",
                -2.296171188354492
            ],
            [
                "SELECT Avg ( distance ) , Avg ( price ) FROM flight WHERE * = value",
                -2.7541615962982178
            ],
            [
                "SELECT Avg ( distance ) , Avg ( price ) FROM flight WHERE price = ( SELECT Avg ( price ) FROM flight )",
                -3.076481819152832
            ],
            [
                "SELECT Avg ( price ) , Avg ( price ) FROM flight",
                -3.2814884185791016
            ],
            [
                "SELECT Avg ( price ) , Avg ( price ) FROM flight WHERE destination = value",
                -3.977630376815796
            ],
            [
                "SELECT Avg ( price ) , Max ( price ) FROM flight",
                -4.079071998596191
            ],
            [
                "SELECT Avg ( distance ) , Avg ( price ) FROM flight WHERE flno = value",
                -4.122147083282471
            ],
            [
                "SELECT Avg ( price ) , Sum ( price ) FROM flight",
                -4.387560844421387
            ],
            [
                "SELECT Avg ( T1.price ) , Avg ( T1.price ) FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T2.name = value",
                -4.825418829917908
            ],
            [
                "SELECT Avg ( price ) , Sum ( price ) FROM flight WHERE destination = value",
                -5.076610445976257
            ],
            [
                "SELECT Avg ( distance ) , Avg ( price ) FROM flight WHERE origin = value",
                -5.293862342834473
            ],
            [
                "SELECT Avg ( price ) , Avg ( price ) FROM flight WHERE * = value",
                -5.505126476287842
            ],
            [
                "SELECT Avg ( price ) , Max ( price ) FROM flight WHERE destination = value",
                -5.6866819858551025
            ],
            [
                "SELECT Avg ( distance ) , Sum ( price ) FROM flight",
                -6.656745910644531
            ],
            [
                "SELECT Avg ( T2.distance ) , Avg ( T1.price ) FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid",
                -7.006929397583008
            ],
            [
                "SELECT Avg ( T3.salary ) , Avg ( T1.price ) FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid JOIN employee AS T3 JOIN certificate AS T4 ON T2.aid = T4.aid AND T4.eid = T3.eid",
                -8.95326566696167
            ],
            [
                "SELECT Avg ( price ) , Min ( price ) FROM flight",
                -9.592724800109863
            ],
            [
                "SELECT Avg ( T3.salary ) , Sum ( T1.price ) FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid JOIN employee AS T3 JOIN certificate AS T4 ON T2.aid = T4.aid AND T4.eid = T3.eid",
                -10.105522632598877
            ]
        ],
        "predicted_parse_with_values": "SELECT Avg ( distance ) , Avg ( price ) FROM flight WHERE destination = \"Los Angeles\"",
        "template_feedback": "consider the origin equals Los Angeles conditions in place of the destination equals Los Angeles conditions .",
        "primary_span": [
            [
                0,
                6
            ]
        ],
        "secondary_span": [
            [
                7,
                16
            ]
        ],
        "edits": [
            "origin equals \"Los Angeles\"",
            "destination equals \"Los Angeles\""
        ],
        "edits_original": "< where > add origin equals \" Los Angeles \" </ where > < where > remove destination equals \" Los Angeles \" </ where >"
    },
    {
        "db_id": "flight_1",
        "question": "What is the average distance and average price for flights from Los Angeles.",
        "gold_parse": "SELECT avg(distance) ,  avg(price) FROM Flight WHERE origin  =  \"Los Angeles\"",
        "predicted_parse": "SELECT Avg ( distance ) , Avg ( price ) FROM flight WHERE destination = value",
        "predicted_parse_explanation": [
            "find the average distance and average price in flight table whose destination equals Los Angeles"
        ],
        "feedback": "You should use origin in place of destination.",
        "beam": [
            [
                "SELECT Avg ( distance ) , Avg ( price ) FROM flight",
                -0.9190549850463867
            ],
            [
                "SELECT Avg ( distance ) , Avg ( price ) FROM flight WHERE destination = value",
                -1.4374210834503174
            ],
            [
                "SELECT Avg ( T1.distance ) , Avg ( T1.price ) FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T2.name = value",
                -2.296171188354492
            ],
            [
                "SELECT Avg ( distance ) , Avg ( price ) FROM flight WHERE * = value",
                -2.7541615962982178
            ],
            [
                "SELECT Avg ( distance ) , Avg ( price ) FROM flight WHERE price = ( SELECT Avg ( price ) FROM flight )",
                -3.076481819152832
            ],
            [
                "SELECT Avg ( price ) , Avg ( price ) FROM flight",
                -3.2814884185791016
            ],
            [
                "SELECT Avg ( price ) , Avg ( price ) FROM flight WHERE destination = value",
                -3.977630376815796
            ],
            [
                "SELECT Avg ( price ) , Max ( price ) FROM flight",
                -4.079071998596191
            ],
            [
                "SELECT Avg ( distance ) , Avg ( price ) FROM flight WHERE flno = value",
                -4.122147083282471
            ],
            [
                "SELECT Avg ( price ) , Sum ( price ) FROM flight",
                -4.387560844421387
            ],
            [
                "SELECT Avg ( T1.price ) , Avg ( T1.price ) FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T2.name = value",
                -4.825418829917908
            ],
            [
                "SELECT Avg ( price ) , Sum ( price ) FROM flight WHERE destination = value",
                -5.076610445976257
            ],
            [
                "SELECT Avg ( distance ) , Avg ( price ) FROM flight WHERE origin = value",
                -5.293862342834473
            ],
            [
                "SELECT Avg ( price ) , Avg ( price ) FROM flight WHERE * = value",
                -5.505126476287842
            ],
            [
                "SELECT Avg ( price ) , Max ( price ) FROM flight WHERE destination = value",
                -5.6866819858551025
            ],
            [
                "SELECT Avg ( distance ) , Sum ( price ) FROM flight",
                -6.656745910644531
            ],
            [
                "SELECT Avg ( T2.distance ) , Avg ( T1.price ) FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid",
                -7.006929397583008
            ],
            [
                "SELECT Avg ( T3.salary ) , Avg ( T1.price ) FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid JOIN employee AS T3 JOIN certificate AS T4 ON T2.aid = T4.aid AND T4.eid = T3.eid",
                -8.95326566696167
            ],
            [
                "SELECT Avg ( price ) , Min ( price ) FROM flight",
                -9.592724800109863
            ],
            [
                "SELECT Avg ( T3.salary ) , Sum ( T1.price ) FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid JOIN employee AS T3 JOIN certificate AS T4 ON T2.aid = T4.aid AND T4.eid = T3.eid",
                -10.105522632598877
            ]
        ],
        "predicted_parse_with_values": "SELECT Avg ( distance ) , Avg ( price ) FROM flight WHERE destination = \"Los Angeles\"",
        "template_feedback": "consider the origin equals Los Angeles conditions in place of the destination equals Los Angeles conditions .",
        "primary_span": [
            [
                0,
                6
            ]
        ],
        "secondary_span": [
            [
                7,
                16
            ]
        ],
        "edits": [
            "origin equals \"Los Angeles\"",
            "destination equals \"Los Angeles\""
        ],
        "edits_original": "< where > add origin equals \" Los Angeles \" </ where > < where > remove destination equals \" Los Angeles \" </ where >"
    },
    {
        "db_id": "flight_1",
        "question": "Show the flight number and distance of the flight with maximum price.",
        "gold_parse": "SELECT flno ,  distance FROM Flight ORDER BY price DESC LIMIT 1",
        "predicted_parse": "SELECT distance , distance FROM flight ORDER BY price Desc LIMIT value",
        "predicted_parse_explanation": [
            "find the distance and distance in flight table with largest value of price"
        ],
        "feedback": "Rather than 1st distance , use flight number in place of that .",
        "beam": [
            [
                "SELECT flno , distance FROM flight ORDER BY price Desc LIMIT value",
                -0.8049678802490234
            ],
            [
                "SELECT distance , distance FROM flight ORDER BY price Desc LIMIT value",
                -1.3692054748535156
            ],
            [
                "SELECT price , distance FROM flight ORDER BY price Desc LIMIT value",
                -2.4866912364959717
            ],
            [
                "SELECT flno , distance FROM flight WHERE price = ( SELECT Max ( price ) FROM flight )",
                -2.889143466949463
            ],
            [
                "SELECT distance , distance FROM flight WHERE price = ( SELECT Max ( price ) FROM flight )",
                -3.16689395904541
            ],
            [
                "SELECT arrival_date , distance FROM flight ORDER BY price Desc LIMIT value",
                -3.689390182495117
            ],
            [
                "SELECT departure_date , distance FROM flight ORDER BY price Desc LIMIT value",
                -3.707505226135254
            ],
            [
                "SELECT price , distance FROM flight WHERE price = ( SELECT Max ( price ) FROM flight )",
                -3.973285675048828
            ],
            [
                "SELECT flno , distance FROM flight",
                -5.244288921356201
            ],
            [
                "SELECT destination , distance FROM flight ORDER BY price Desc LIMIT value",
                -5.386051654815674
            ],
            [
                "SELECT T1.distance , T2.distance FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.price Desc LIMIT value",
                -5.410259246826172
            ],
            [
                "SELECT T1.flno , T2.distance FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.price Desc LIMIT value",
                -5.4561357498168945
            ],
            [
                "SELECT T1.distance , T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.price Desc LIMIT value",
                -5.802151203155518
            ],
            [
                "SELECT T2.name , T1.distance FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.price Desc LIMIT value",
                -5.889318466186523
            ],
            [
                "SELECT distance , distance FROM flight",
                -6.025526523590088
            ],
            [
                "SELECT arrival_date , distance FROM flight WHERE price = ( SELECT Max ( price ) FROM flight )",
                -6.099323272705078
            ],
            [
                "SELECT departure_date , distance FROM flight WHERE price = ( SELECT Max ( price ) FROM flight )",
                -6.171595096588135
            ],
            [
                "SELECT price , distance FROM flight",
                -6.439292907714844
            ],
            [
                "SELECT T1.price , T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.price Desc LIMIT value",
                -6.477187871932983
            ],
            [
                "SELECT T1.price , T2.distance FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.price Desc LIMIT value",
                -6.5085389614105225
            ]
        ],
        "predicted_parse_with_values": "SELECT distance , distance FROM flight ORDER BY price Desc LIMIT 1",
        "template_feedback": "additionally find flight number .",
        "primary_span": [
            [
                0,
                4
            ]
        ],
        "secondary_span": [],
        "edits": [
            "flight number",
            "distance"
        ],
        "edits_original": "< select > add flight number </ select > < select > remove distance </ select >"
    },
    {
        "db_id": "flight_1",
        "question": "Show the flight number and distance of the flight with maximum price.",
        "gold_parse": "SELECT flno ,  distance FROM Flight ORDER BY price DESC LIMIT 1",
        "predicted_parse": "SELECT distance , distance FROM flight ORDER BY price Desc LIMIT value",
        "predicted_parse_explanation": [
            "find the distance and distance in flight table with largest value of price"
        ],
        "feedback": "You need to utilize number of flight instead of 1st distance.",
        "beam": [
            [
                "SELECT flno , distance FROM flight ORDER BY price Desc LIMIT value",
                -0.8049678802490234
            ],
            [
                "SELECT distance , distance FROM flight ORDER BY price Desc LIMIT value",
                -1.3692054748535156
            ],
            [
                "SELECT price , distance FROM flight ORDER BY price Desc LIMIT value",
                -2.4866912364959717
            ],
            [
                "SELECT flno , distance FROM flight WHERE price = ( SELECT Max ( price ) FROM flight )",
                -2.889143466949463
            ],
            [
                "SELECT distance , distance FROM flight WHERE price = ( SELECT Max ( price ) FROM flight )",
                -3.16689395904541
            ],
            [
                "SELECT arrival_date , distance FROM flight ORDER BY price Desc LIMIT value",
                -3.689390182495117
            ],
            [
                "SELECT departure_date , distance FROM flight ORDER BY price Desc LIMIT value",
                -3.707505226135254
            ],
            [
                "SELECT price , distance FROM flight WHERE price = ( SELECT Max ( price ) FROM flight )",
                -3.973285675048828
            ],
            [
                "SELECT flno , distance FROM flight",
                -5.244288921356201
            ],
            [
                "SELECT destination , distance FROM flight ORDER BY price Desc LIMIT value",
                -5.386051654815674
            ],
            [
                "SELECT T1.distance , T2.distance FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.price Desc LIMIT value",
                -5.410259246826172
            ],
            [
                "SELECT T1.flno , T2.distance FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.price Desc LIMIT value",
                -5.4561357498168945
            ],
            [
                "SELECT T1.distance , T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.price Desc LIMIT value",
                -5.802151203155518
            ],
            [
                "SELECT T2.name , T1.distance FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.price Desc LIMIT value",
                -5.889318466186523
            ],
            [
                "SELECT distance , distance FROM flight",
                -6.025526523590088
            ],
            [
                "SELECT arrival_date , distance FROM flight WHERE price = ( SELECT Max ( price ) FROM flight )",
                -6.099323272705078
            ],
            [
                "SELECT departure_date , distance FROM flight WHERE price = ( SELECT Max ( price ) FROM flight )",
                -6.171595096588135
            ],
            [
                "SELECT price , distance FROM flight",
                -6.439292907714844
            ],
            [
                "SELECT T1.price , T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.price Desc LIMIT value",
                -6.477187871932983
            ],
            [
                "SELECT T1.price , T2.distance FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.price Desc LIMIT value",
                -6.5085389614105225
            ]
        ],
        "predicted_parse_with_values": "SELECT distance , distance FROM flight ORDER BY price Desc LIMIT 1",
        "template_feedback": "additionally find flight number .",
        "primary_span": [
            [
                0,
                4
            ]
        ],
        "secondary_span": [],
        "edits": [
            "flight number",
            "distance"
        ],
        "edits_original": "< select > add flight number </ select > < select > remove distance </ select >"
    },
    {
        "db_id": "flight_1",
        "question": "Show the flight number and distance of the flight with maximum price.",
        "gold_parse": "SELECT flno ,  distance FROM Flight ORDER BY price DESC LIMIT 1",
        "predicted_parse": "SELECT distance , distance FROM flight ORDER BY price Desc LIMIT value",
        "predicted_parse_explanation": [
            "find the distance and distance in flight table with largest value of price"
        ],
        "feedback": "I want to find flight number and not the 1st distance.",
        "beam": [
            [
                "SELECT flno , distance FROM flight ORDER BY price Desc LIMIT value",
                -0.8049678802490234
            ],
            [
                "SELECT distance , distance FROM flight ORDER BY price Desc LIMIT value",
                -1.3692054748535156
            ],
            [
                "SELECT price , distance FROM flight ORDER BY price Desc LIMIT value",
                -2.4866912364959717
            ],
            [
                "SELECT flno , distance FROM flight WHERE price = ( SELECT Max ( price ) FROM flight )",
                -2.889143466949463
            ],
            [
                "SELECT distance , distance FROM flight WHERE price = ( SELECT Max ( price ) FROM flight )",
                -3.16689395904541
            ],
            [
                "SELECT arrival_date , distance FROM flight ORDER BY price Desc LIMIT value",
                -3.689390182495117
            ],
            [
                "SELECT departure_date , distance FROM flight ORDER BY price Desc LIMIT value",
                -3.707505226135254
            ],
            [
                "SELECT price , distance FROM flight WHERE price = ( SELECT Max ( price ) FROM flight )",
                -3.973285675048828
            ],
            [
                "SELECT flno , distance FROM flight",
                -5.244288921356201
            ],
            [
                "SELECT destination , distance FROM flight ORDER BY price Desc LIMIT value",
                -5.386051654815674
            ],
            [
                "SELECT T1.distance , T2.distance FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.price Desc LIMIT value",
                -5.410259246826172
            ],
            [
                "SELECT T1.flno , T2.distance FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.price Desc LIMIT value",
                -5.4561357498168945
            ],
            [
                "SELECT T1.distance , T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.price Desc LIMIT value",
                -5.802151203155518
            ],
            [
                "SELECT T2.name , T1.distance FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.price Desc LIMIT value",
                -5.889318466186523
            ],
            [
                "SELECT distance , distance FROM flight",
                -6.025526523590088
            ],
            [
                "SELECT arrival_date , distance FROM flight WHERE price = ( SELECT Max ( price ) FROM flight )",
                -6.099323272705078
            ],
            [
                "SELECT departure_date , distance FROM flight WHERE price = ( SELECT Max ( price ) FROM flight )",
                -6.171595096588135
            ],
            [
                "SELECT price , distance FROM flight",
                -6.439292907714844
            ],
            [
                "SELECT T1.price , T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.price Desc LIMIT value",
                -6.477187871932983
            ],
            [
                "SELECT T1.price , T2.distance FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.price Desc LIMIT value",
                -6.5085389614105225
            ]
        ],
        "predicted_parse_with_values": "SELECT distance , distance FROM flight ORDER BY price Desc LIMIT 1",
        "template_feedback": "additionally find flight number .",
        "primary_span": [
            [
                0,
                4
            ]
        ],
        "secondary_span": [],
        "edits": [
            "flight number",
            "distance"
        ],
        "edits_original": "< select > add flight number </ select > < select > remove distance </ select >"
    },
    {
        "db_id": "company_employee",
        "question": "list the names of the companies with more than 200 sales in the descending order of sales and profits.",
        "gold_parse": "SELECT name FROM company WHERE Sales_in_Billion  >  200 ORDER BY Sales_in_Billion ,  Profits_in_Billion DESC",
        "predicted_parse": "SELECT Name FROM company WHERE Sales_in_Billion > value ORDER BY Sales_in_Billion Desc",
        "predicted_parse_explanation": [
            "find the name in company table whose sales in billion greater than 200 ordered descending by sales in billion"
        ],
        "feedback": "Swap Last sales in billion with profits in billion .",
        "beam": [
            [
                "SELECT Name FROM company WHERE Profits_in_Billion > value ORDER BY Sales_in_Billion Desc",
                -0.5325441360473633
            ],
            [
                "SELECT Name FROM company WHERE Sales_in_Billion > value ORDER BY Sales_in_Billion Desc",
                -0.9169797897338867
            ],
            [
                "SELECT Name FROM company WHERE Profits_in_Billion > value ORDER BY Profits_in_Billion Desc",
                -4.915060043334961
            ],
            [
                "SELECT Name FROM company WHERE Sales_in_Billion > value ORDER BY Profits_in_Billion Desc",
                -5.243867874145508
            ],
            [
                "SELECT Name FROM company WHERE Sales_in_Billion > value ORDER BY Name Desc",
                -8.2699556350708
            ],
            [
                "SELECT Name FROM company WHERE Profits_in_Billion > value ORDER BY Name Desc",
                -8.775556564331055
            ],
            [
                "SELECT Name FROM company WHERE Profits_in_Billion < = value ORDER BY Sales_in_Billion Desc",
                -9.297229766845703
            ],
            [
                "SELECT Name FROM company WHERE Profits_in_Billion > value GROUP BY Company_ID ORDER BY Max ( Sales_in_Billion ) Desc",
                -12.002899169921875
            ],
            [
                "SELECT Name FROM company WHERE Profits_in_Billion > value GROUP BY Company_ID ORDER BY Sales_in_Billion Desc",
                -12.164485931396484
            ],
            [
                "SELECT Name FROM company WHERE Profits_in_Billion > value GROUP BY Name ORDER BY Max ( Sales_in_Billion ) Desc",
                -12.756586074829102
            ],
            [
                "SELECT Name FROM company ORDER BY Sales_in_Billion Desc",
                -12.788116455078125
            ],
            [
                "SELECT Name FROM company WHERE Sales_in_Billion > value INTERSECT SELECT Name FROM company WHERE Profits_in_Billion < value",
                -12.84052848815918
            ],
            [
                "SELECT Name FROM company WHERE Sales_in_Billion > value ORDER BY Sales_in_Billion Asc",
                -13.104990005493164
            ],
            [
                "SELECT Name FROM company WHERE Profits_in_Billion < = value ORDER BY Profits_in_Billion Desc",
                -13.503839492797852
            ],
            [
                "SELECT Name FROM company WHERE Profits_in_Billion > value GROUP BY Name ORDER BY Sales_in_Billion Desc",
                -13.559098243713379
            ],
            [
                "SELECT Name FROM company WHERE Profits_in_Billion > value ORDER BY Sales_in_Billion Asc",
                -13.570467948913574
            ],
            [
                "SELECT Name FROM company WHERE Sales_in_Billion > value GROUP BY Company_ID ORDER BY Sales_in_Billion Desc",
                -13.650615692138672
            ],
            [
                "SELECT Name , Profits_in_Billion FROM company WHERE Profits_in_Billion > value ORDER BY Sales_in_Billion Desc",
                -13.731741905212402
            ],
            [
                "SELECT Name FROM company WHERE Sales_in_Billion > value AND Profits_in_Billion = value",
                -13.792275428771973
            ],
            [
                "SELECT Name FROM company WHERE Profits_in_Billion = value ORDER BY Sales_in_Billion Desc",
                -13.967918395996094
            ]
        ],
        "predicted_parse_with_values": "SELECT Name FROM company WHERE Sales_in_Billion > 200 ORDER BY Sales_in_Billion Desc",
        "template_feedback": "additionally order the results by profits in billion .",
        "primary_span": [
            [
                0,
                8
            ]
        ],
        "secondary_span": [],
        "edits": [
            "profits in billion"
        ],
        "edits_original": "< orderBy > add profits in billion </ orderBy >"
    },
    {
        "db_id": "company_employee",
        "question": "list the names of the companies with more than 200 sales in the descending order of sales and profits.",
        "gold_parse": "SELECT name FROM company WHERE Sales_in_Billion  >  200 ORDER BY Sales_in_Billion ,  Profits_in_Billion DESC",
        "predicted_parse": "SELECT Name FROM company WHERE Sales_in_Billion > value ORDER BY Sales_in_Billion Desc",
        "predicted_parse_explanation": [
            "find the name in company table whose sales in billion greater than 200 ordered descending by sales in billion"
        ],
        "feedback": "I want profits in billion.",
        "beam": [
            [
                "SELECT Name FROM company WHERE Profits_in_Billion > value ORDER BY Sales_in_Billion Desc",
                -0.5325441360473633
            ],
            [
                "SELECT Name FROM company WHERE Sales_in_Billion > value ORDER BY Sales_in_Billion Desc",
                -0.9169797897338867
            ],
            [
                "SELECT Name FROM company WHERE Profits_in_Billion > value ORDER BY Profits_in_Billion Desc",
                -4.915060043334961
            ],
            [
                "SELECT Name FROM company WHERE Sales_in_Billion > value ORDER BY Profits_in_Billion Desc",
                -5.243867874145508
            ],
            [
                "SELECT Name FROM company WHERE Sales_in_Billion > value ORDER BY Name Desc",
                -8.2699556350708
            ],
            [
                "SELECT Name FROM company WHERE Profits_in_Billion > value ORDER BY Name Desc",
                -8.775556564331055
            ],
            [
                "SELECT Name FROM company WHERE Profits_in_Billion < = value ORDER BY Sales_in_Billion Desc",
                -9.297229766845703
            ],
            [
                "SELECT Name FROM company WHERE Profits_in_Billion > value GROUP BY Company_ID ORDER BY Max ( Sales_in_Billion ) Desc",
                -12.002899169921875
            ],
            [
                "SELECT Name FROM company WHERE Profits_in_Billion > value GROUP BY Company_ID ORDER BY Sales_in_Billion Desc",
                -12.164485931396484
            ],
            [
                "SELECT Name FROM company WHERE Profits_in_Billion > value GROUP BY Name ORDER BY Max ( Sales_in_Billion ) Desc",
                -12.756586074829102
            ],
            [
                "SELECT Name FROM company ORDER BY Sales_in_Billion Desc",
                -12.788116455078125
            ],
            [
                "SELECT Name FROM company WHERE Sales_in_Billion > value INTERSECT SELECT Name FROM company WHERE Profits_in_Billion < value",
                -12.84052848815918
            ],
            [
                "SELECT Name FROM company WHERE Sales_in_Billion > value ORDER BY Sales_in_Billion Asc",
                -13.104990005493164
            ],
            [
                "SELECT Name FROM company WHERE Profits_in_Billion < = value ORDER BY Profits_in_Billion Desc",
                -13.503839492797852
            ],
            [
                "SELECT Name FROM company WHERE Profits_in_Billion > value GROUP BY Name ORDER BY Sales_in_Billion Desc",
                -13.559098243713379
            ],
            [
                "SELECT Name FROM company WHERE Profits_in_Billion > value ORDER BY Sales_in_Billion Asc",
                -13.570467948913574
            ],
            [
                "SELECT Name FROM company WHERE Sales_in_Billion > value GROUP BY Company_ID ORDER BY Sales_in_Billion Desc",
                -13.650615692138672
            ],
            [
                "SELECT Name , Profits_in_Billion FROM company WHERE Profits_in_Billion > value ORDER BY Sales_in_Billion Desc",
                -13.731741905212402
            ],
            [
                "SELECT Name FROM company WHERE Sales_in_Billion > value AND Profits_in_Billion = value",
                -13.792275428771973
            ],
            [
                "SELECT Name FROM company WHERE Profits_in_Billion = value ORDER BY Sales_in_Billion Desc",
                -13.967918395996094
            ]
        ],
        "predicted_parse_with_values": "SELECT Name FROM company WHERE Sales_in_Billion > 200 ORDER BY Sales_in_Billion Desc",
        "template_feedback": "additionally order the results by profits in billion .",
        "primary_span": [
            [
                0,
                8
            ]
        ],
        "secondary_span": [],
        "edits": [
            "profits in billion"
        ],
        "edits_original": "< orderBy > add profits in billion </ orderBy >"
    },
    {
        "db_id": "company_employee",
        "question": "list the names of the companies with more than 200 sales in the descending order of sales and profits.",
        "gold_parse": "SELECT name FROM company WHERE Sales_in_Billion  >  200 ORDER BY Sales_in_Billion ,  Profits_in_Billion DESC",
        "predicted_parse": "SELECT Name FROM company WHERE Sales_in_Billion > value ORDER BY Sales_in_Billion Desc",
        "predicted_parse_explanation": [
            "find the name in company table whose sales in billion greater than 200 ordered descending by sales in billion"
        ],
        "feedback": "I want profits in billion instead of last sales in billion.",
        "beam": [
            [
                "SELECT Name FROM company WHERE Profits_in_Billion > value ORDER BY Sales_in_Billion Desc",
                -0.5325441360473633
            ],
            [
                "SELECT Name FROM company WHERE Sales_in_Billion > value ORDER BY Sales_in_Billion Desc",
                -0.9169797897338867
            ],
            [
                "SELECT Name FROM company WHERE Profits_in_Billion > value ORDER BY Profits_in_Billion Desc",
                -4.915060043334961
            ],
            [
                "SELECT Name FROM company WHERE Sales_in_Billion > value ORDER BY Profits_in_Billion Desc",
                -5.243867874145508
            ],
            [
                "SELECT Name FROM company WHERE Sales_in_Billion > value ORDER BY Name Desc",
                -8.2699556350708
            ],
            [
                "SELECT Name FROM company WHERE Profits_in_Billion > value ORDER BY Name Desc",
                -8.775556564331055
            ],
            [
                "SELECT Name FROM company WHERE Profits_in_Billion < = value ORDER BY Sales_in_Billion Desc",
                -9.297229766845703
            ],
            [
                "SELECT Name FROM company WHERE Profits_in_Billion > value GROUP BY Company_ID ORDER BY Max ( Sales_in_Billion ) Desc",
                -12.002899169921875
            ],
            [
                "SELECT Name FROM company WHERE Profits_in_Billion > value GROUP BY Company_ID ORDER BY Sales_in_Billion Desc",
                -12.164485931396484
            ],
            [
                "SELECT Name FROM company WHERE Profits_in_Billion > value GROUP BY Name ORDER BY Max ( Sales_in_Billion ) Desc",
                -12.756586074829102
            ],
            [
                "SELECT Name FROM company ORDER BY Sales_in_Billion Desc",
                -12.788116455078125
            ],
            [
                "SELECT Name FROM company WHERE Sales_in_Billion > value INTERSECT SELECT Name FROM company WHERE Profits_in_Billion < value",
                -12.84052848815918
            ],
            [
                "SELECT Name FROM company WHERE Sales_in_Billion > value ORDER BY Sales_in_Billion Asc",
                -13.104990005493164
            ],
            [
                "SELECT Name FROM company WHERE Profits_in_Billion < = value ORDER BY Profits_in_Billion Desc",
                -13.503839492797852
            ],
            [
                "SELECT Name FROM company WHERE Profits_in_Billion > value GROUP BY Name ORDER BY Sales_in_Billion Desc",
                -13.559098243713379
            ],
            [
                "SELECT Name FROM company WHERE Profits_in_Billion > value ORDER BY Sales_in_Billion Asc",
                -13.570467948913574
            ],
            [
                "SELECT Name FROM company WHERE Sales_in_Billion > value GROUP BY Company_ID ORDER BY Sales_in_Billion Desc",
                -13.650615692138672
            ],
            [
                "SELECT Name , Profits_in_Billion FROM company WHERE Profits_in_Billion > value ORDER BY Sales_in_Billion Desc",
                -13.731741905212402
            ],
            [
                "SELECT Name FROM company WHERE Sales_in_Billion > value AND Profits_in_Billion = value",
                -13.792275428771973
            ],
            [
                "SELECT Name FROM company WHERE Profits_in_Billion = value ORDER BY Sales_in_Billion Desc",
                -13.967918395996094
            ]
        ],
        "predicted_parse_with_values": "SELECT Name FROM company WHERE Sales_in_Billion > 200 ORDER BY Sales_in_Billion Desc",
        "template_feedback": "additionally order the results by profits in billion .",
        "primary_span": [
            [
                0,
                8
            ]
        ],
        "secondary_span": [],
        "edits": [
            "profits in billion"
        ],
        "edits_original": "< orderBy > add profits in billion </ orderBy >"
    },
    {
        "db_id": "flight_1",
        "question": "What is the id of every employee who has at least a salary of  100000?",
        "gold_parse": "SELECT eid FROM Employee WHERE salary  >  100000",
        "predicted_parse": "SELECT T2.eid FROM employee AS T1 JOIN certificate AS T2 ON T1.eid = T2.eid WHERE T1.salary > value",
        "predicted_parse_explanation": [
            "Step 1: for each row in employee table , find the corresponding rows in certificate table",
            "Step 2: find the certificate 's employee id of the results of step 1 whose salary greater than 100000"
        ],
        "feedback": "It should be \"equals or greater than\" instead of \"greater than\" in step 2.",
        "beam": [
            [
                "SELECT eid FROM employee WHERE salary > value",
                -1.1377744674682617
            ],
            [
                "SELECT T2.eid FROM employee AS T1 JOIN certificate AS T2 ON T1.eid = T2.eid WHERE T1.salary > value",
                -1.2957849502563477
            ],
            [
                "SELECT eid FROM employee WHERE salary > ( SELECT Avg ( salary ) FROM employee )",
                -1.7332439422607422
            ],
            [
                "SELECT T2.eid FROM employee AS T1 JOIN certificate AS T2 ON T1.eid = T2.eid WHERE T1.salary > ( SELECT Avg ( T1.salary ) FROM employee AS T1 )",
                -1.8742923736572266
            ],
            [
                "SELECT T2.eid FROM employee AS T1 JOIN certificate AS T2 ON T1.eid = T2.eid WHERE T1.salary > = value",
                -3.9896440505981445
            ],
            [
                "SELECT eid FROM employee WHERE salary > = value",
                -4.030016899108887
            ],
            [
                "SELECT eid FROM employee WHERE salary > ( SELECT Max ( salary ) FROM employee )",
                -4.400247573852539
            ],
            [
                "SELECT T2.eid FROM employee AS T1 JOIN certificate AS T2 ON T1.eid = T2.eid WHERE T1.salary > ( SELECT Max ( T1.salary ) FROM employee AS T1 )",
                -4.540825843811035
            ],
            [
                "SELECT eid FROM employee WHERE salary > ( SELECT Min ( salary ) FROM employee )",
                -5.246771812438965
            ],
            [
                "SELECT T2.eid FROM employee AS T1 JOIN certificate AS T2 ON T1.eid = T2.eid WHERE T1.salary > ( SELECT Min ( T1.salary ) FROM employee AS T1 )",
                -5.359920501708984
            ],
            [
                "SELECT T2.eid FROM employee AS T1 JOIN certificate AS T2 ON T1.eid = T2.eid WHERE T1.salary > ( SELECT T1.salary FROM employee AS T1 )",
                -6.088665962219238
            ],
            [
                "SELECT eid FROM employee WHERE salary > ( SELECT salary FROM employee )",
                -6.291328430175781
            ],
            [
                "SELECT T2.eid FROM employee AS T1 JOIN certificate AS T2 ON T1.eid = T2.eid WHERE T1.salary > ( SELECT Sum ( T1.salary ) FROM employee AS T1 )",
                -7.170161247253418
            ],
            [
                "SELECT eid FROM employee WHERE salary > ( SELECT Sum ( salary ) FROM employee )",
                -7.206393241882324
            ],
            [
                "SELECT T2.eid FROM employee AS T1 JOIN certificate AS T2 ON T1.eid = T2.eid WHERE T1.salary > T1.salary",
                -9.19142770767212
            ],
            [
                "SELECT eid FROM employee WHERE salary > salary",
                -9.211156368255615
            ],
            [
                "SELECT T2.eid FROM employee AS T1 JOIN certificate AS T2 ON T1.eid = T2.eid WHERE T1.salary < value",
                -11.702807426452637
            ],
            [
                "SELECT eid FROM employee WHERE salary < value",
                -11.839981079101562
            ],
            [
                "SELECT eid FROM certificate",
                -13.059638023376465
            ],
            [
                "SELECT eid FROM employee",
                -13.468146324157715
            ]
        ],
        "predicted_parse_with_values": "SELECT T2.eid FROM employee AS T1 JOIN certificate AS T2 ON T1.eid = T2.eid WHERE T1.salary > 100000",
        "template_feedback": "in step 1 , do not use the certificate table .",
        "primary_span": [
            [
                4,
                10
            ]
        ],
        "secondary_span": [
            [
                4,
                10
            ]
        ],
        "edits": [
            "certificate"
        ],
        "edits_original": "< from > remove certificate </ from >"
    },
    {
        "db_id": "flight_1",
        "question": "What is the id of every employee who has at least a salary of  100000?",
        "gold_parse": "SELECT eid FROM Employee WHERE salary  >  100000",
        "predicted_parse": "SELECT T2.eid FROM employee AS T1 JOIN certificate AS T2 ON T1.eid = T2.eid WHERE T1.salary > value",
        "predicted_parse_explanation": [
            "Step 1: for each row in employee table , find the corresponding rows in certificate table",
            "Step 2: find the certificate 's employee id of the results of step 1 whose salary greater than 100000"
        ],
        "feedback": "In step 2, I want equivalent or higher than value and not only greater than.",
        "beam": [
            [
                "SELECT eid FROM employee WHERE salary > value",
                -1.1377744674682617
            ],
            [
                "SELECT T2.eid FROM employee AS T1 JOIN certificate AS T2 ON T1.eid = T2.eid WHERE T1.salary > value",
                -1.2957849502563477
            ],
            [
                "SELECT eid FROM employee WHERE salary > ( SELECT Avg ( salary ) FROM employee )",
                -1.7332439422607422
            ],
            [
                "SELECT T2.eid FROM employee AS T1 JOIN certificate AS T2 ON T1.eid = T2.eid WHERE T1.salary > ( SELECT Avg ( T1.salary ) FROM employee AS T1 )",
                -1.8742923736572266
            ],
            [
                "SELECT T2.eid FROM employee AS T1 JOIN certificate AS T2 ON T1.eid = T2.eid WHERE T1.salary > = value",
                -3.9896440505981445
            ],
            [
                "SELECT eid FROM employee WHERE salary > = value",
                -4.030016899108887
            ],
            [
                "SELECT eid FROM employee WHERE salary > ( SELECT Max ( salary ) FROM employee )",
                -4.400247573852539
            ],
            [
                "SELECT T2.eid FROM employee AS T1 JOIN certificate AS T2 ON T1.eid = T2.eid WHERE T1.salary > ( SELECT Max ( T1.salary ) FROM employee AS T1 )",
                -4.540825843811035
            ],
            [
                "SELECT eid FROM employee WHERE salary > ( SELECT Min ( salary ) FROM employee )",
                -5.246771812438965
            ],
            [
                "SELECT T2.eid FROM employee AS T1 JOIN certificate AS T2 ON T1.eid = T2.eid WHERE T1.salary > ( SELECT Min ( T1.salary ) FROM employee AS T1 )",
                -5.359920501708984
            ],
            [
                "SELECT T2.eid FROM employee AS T1 JOIN certificate AS T2 ON T1.eid = T2.eid WHERE T1.salary > ( SELECT T1.salary FROM employee AS T1 )",
                -6.088665962219238
            ],
            [
                "SELECT eid FROM employee WHERE salary > ( SELECT salary FROM employee )",
                -6.291328430175781
            ],
            [
                "SELECT T2.eid FROM employee AS T1 JOIN certificate AS T2 ON T1.eid = T2.eid WHERE T1.salary > ( SELECT Sum ( T1.salary ) FROM employee AS T1 )",
                -7.170161247253418
            ],
            [
                "SELECT eid FROM employee WHERE salary > ( SELECT Sum ( salary ) FROM employee )",
                -7.206393241882324
            ],
            [
                "SELECT T2.eid FROM employee AS T1 JOIN certificate AS T2 ON T1.eid = T2.eid WHERE T1.salary > T1.salary",
                -9.19142770767212
            ],
            [
                "SELECT eid FROM employee WHERE salary > salary",
                -9.211156368255615
            ],
            [
                "SELECT T2.eid FROM employee AS T1 JOIN certificate AS T2 ON T1.eid = T2.eid WHERE T1.salary < value",
                -11.702807426452637
            ],
            [
                "SELECT eid FROM employee WHERE salary < value",
                -11.839981079101562
            ],
            [
                "SELECT eid FROM certificate",
                -13.059638023376465
            ],
            [
                "SELECT eid FROM employee",
                -13.468146324157715
            ]
        ],
        "predicted_parse_with_values": "SELECT T2.eid FROM employee AS T1 JOIN certificate AS T2 ON T1.eid = T2.eid WHERE T1.salary > 100000",
        "template_feedback": "in step 1 , do not use the certificate table .",
        "primary_span": [
            [
                4,
                10
            ]
        ],
        "secondary_span": [
            [
                4,
                10
            ]
        ],
        "edits": [
            "certificate"
        ],
        "edits_original": "< from > remove certificate </ from >"
    },
    {
        "db_id": "flight_1",
        "question": "Show the flight number of flights with three lowest distances.",
        "gold_parse": "SELECT flno FROM Flight ORDER BY distance ASC LIMIT 3",
        "predicted_parse": "SELECT flno FROM flight ORDER BY price Asc LIMIT value",
        "predicted_parse_explanation": [
            "Step 1: find the flight number in flight table ordered ascending by price",
            "Step 2: only show the first 3 rows of the results"
        ],
        "feedback": "distance should be use in place of price .",
        "beam": [
            [
                "SELECT flno FROM flight ORDER BY distance Asc LIMIT value",
                -0.8826847076416016
            ],
            [
                "SELECT flno FROM flight ORDER BY price Asc LIMIT value",
                -1.4854223728179932
            ],
            [
                "SELECT price FROM flight ORDER BY distance Asc LIMIT value",
                -2.53161883354187
            ],
            [
                "SELECT arrival_date FROM flight ORDER BY distance Asc LIMIT value",
                -2.992811441421509
            ],
            [
                "SELECT price FROM flight ORDER BY price Asc LIMIT value",
                -3.11388099193573
            ],
            [
                "SELECT departure_date FROM flight ORDER BY distance Asc LIMIT value",
                -3.465498685836792
            ],
            [
                "SELECT arrival_date FROM flight ORDER BY price Asc LIMIT value",
                -3.5963497161865234
            ],
            [
                "SELECT departure_date FROM flight ORDER BY price Asc LIMIT value",
                -4.062143802642822
            ],
            [
                "SELECT flno FROM flight ORDER BY arrival_date Asc LIMIT value",
                -4.204582452774048
            ],
            [
                "SELECT flno FROM flight ORDER BY departure_date Asc LIMIT value",
                -4.332311391830444
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.distance Asc LIMIT value",
                -4.652891159057617
            ],
            [
                "SELECT flno FROM flight ORDER BY destination Asc LIMIT value",
                -5.2228920459747314
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.price Asc LIMIT value",
                -5.262217044830322
            ],
            [
                "SELECT aid FROM flight ORDER BY distance Asc LIMIT value",
                -5.391274690628052
            ],
            [
                "SELECT destination FROM flight ORDER BY distance Asc LIMIT value",
                -5.481851816177368
            ],
            [
                "SELECT T1.flno FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T2.distance Asc LIMIT value",
                -5.759037256240845
            ],
            [
                "SELECT price FROM flight ORDER BY arrival_date Asc LIMIT value",
                -5.834373712539673
            ],
            [
                "SELECT flno FROM flight GROUP BY flno ORDER BY Count ( * ) Asc LIMIT value",
                -5.874345541000366
            ],
            [
                "SELECT price FROM flight ORDER BY departure_date Asc LIMIT value",
                -5.96783447265625
            ],
            [
                "SELECT aid FROM flight ORDER BY price Asc LIMIT value",
                -5.981778025627136
            ]
        ],
        "predicted_parse_with_values": "SELECT flno FROM flight ORDER BY price Asc LIMIT 3",
        "template_feedback": "in step 1 , order the results by distance in place of price .",
        "primary_span": [
            [
                4,
                8
            ]
        ],
        "secondary_span": [
            [
                9,
                13
            ]
        ],
        "edits": [
            "distance",
            "price"
        ],
        "edits_original": "< orderBy > add distance </ orderBy > < orderBy > remove price </ orderBy >"
    },
    {
        "db_id": "flight_1",
        "question": "Show the flight number of flights with three lowest distances.",
        "gold_parse": "SELECT flno FROM Flight ORDER BY distance ASC LIMIT 3",
        "predicted_parse": "SELECT flno FROM flight ORDER BY price Asc LIMIT value",
        "predicted_parse_explanation": [
            "Step 1: find the flight number in flight table ordered ascending by price",
            "Step 2: only show the first 3 rows of the results"
        ],
        "feedback": "You should use distance instead of price.",
        "beam": [
            [
                "SELECT flno FROM flight ORDER BY distance Asc LIMIT value",
                -0.8826847076416016
            ],
            [
                "SELECT flno FROM flight ORDER BY price Asc LIMIT value",
                -1.4854223728179932
            ],
            [
                "SELECT price FROM flight ORDER BY distance Asc LIMIT value",
                -2.53161883354187
            ],
            [
                "SELECT arrival_date FROM flight ORDER BY distance Asc LIMIT value",
                -2.992811441421509
            ],
            [
                "SELECT price FROM flight ORDER BY price Asc LIMIT value",
                -3.11388099193573
            ],
            [
                "SELECT departure_date FROM flight ORDER BY distance Asc LIMIT value",
                -3.465498685836792
            ],
            [
                "SELECT arrival_date FROM flight ORDER BY price Asc LIMIT value",
                -3.5963497161865234
            ],
            [
                "SELECT departure_date FROM flight ORDER BY price Asc LIMIT value",
                -4.062143802642822
            ],
            [
                "SELECT flno FROM flight ORDER BY arrival_date Asc LIMIT value",
                -4.204582452774048
            ],
            [
                "SELECT flno FROM flight ORDER BY departure_date Asc LIMIT value",
                -4.332311391830444
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.distance Asc LIMIT value",
                -4.652891159057617
            ],
            [
                "SELECT flno FROM flight ORDER BY destination Asc LIMIT value",
                -5.2228920459747314
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.price Asc LIMIT value",
                -5.262217044830322
            ],
            [
                "SELECT aid FROM flight ORDER BY distance Asc LIMIT value",
                -5.391274690628052
            ],
            [
                "SELECT destination FROM flight ORDER BY distance Asc LIMIT value",
                -5.481851816177368
            ],
            [
                "SELECT T1.flno FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T2.distance Asc LIMIT value",
                -5.759037256240845
            ],
            [
                "SELECT price FROM flight ORDER BY arrival_date Asc LIMIT value",
                -5.834373712539673
            ],
            [
                "SELECT flno FROM flight GROUP BY flno ORDER BY Count ( * ) Asc LIMIT value",
                -5.874345541000366
            ],
            [
                "SELECT price FROM flight ORDER BY departure_date Asc LIMIT value",
                -5.96783447265625
            ],
            [
                "SELECT aid FROM flight ORDER BY price Asc LIMIT value",
                -5.981778025627136
            ]
        ],
        "predicted_parse_with_values": "SELECT flno FROM flight ORDER BY price Asc LIMIT 3",
        "template_feedback": "in step 1 , order the results by distance in place of price .",
        "primary_span": [
            [
                4,
                8
            ]
        ],
        "secondary_span": [
            [
                9,
                13
            ]
        ],
        "edits": [
            "distance",
            "price"
        ],
        "edits_original": "< orderBy > add distance </ orderBy > < orderBy > remove price </ orderBy >"
    },
    {
        "db_id": "small_bank_1",
        "question": "What are the names of customers who have a savings balance lower than their checking balance, and what is the total of their checking and savings balances?",
        "gold_parse": "SELECT T1.name ,  T3.balance + T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  <  T2.balance",
        "predicted_parse": "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < value",
        "predicted_parse_explanation": [
            "Step 1: for each row in accounts table , find the corresponding rows in savings table",
            "Step 2: find the name and balance of the results of step 1 whose balance less than 200000"
        ],
        "feedback": "Replace balance with summation of savings ' and checking 's balance , mention savings balance less than checking .",
        "beam": [
            [
                "SELECT T1.name , T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < value",
                -1.532799482345581
            ],
            [
                "SELECT T1.name , T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < value INTERSECT SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < value",
                -1.7967100143432617
            ],
            [
                "SELECT T1.name , Sum ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < value",
                -2.167367458343506
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < value",
                -2.6665258407592773
            ],
            [
                "SELECT T1.name , T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < value INTERSECT SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance > value",
                -2.7260313034057617
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < value INTERSECT SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < value",
                -3.271608829498291
            ],
            [
                "SELECT T1.name , Sum ( * ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < value",
                -3.3603155612945557
            ],
            [
                "SELECT T1.name , T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance < value",
                -3.6514933109283447
            ],
            [
                "SELECT T1.name , T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance < value INTERSECT SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T3 ON T1.custid = T3.custid WHERE T3.balance < value",
                -3.7778701782226562
            ],
            [
                "SELECT T1.name , Sum ( T3.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid WHERE T2.balance < value",
                -3.812743663787842
            ],
            [
                "SELECT T1.name , T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < value INTERSECT SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T3 ON T1.custid = T3.custid WHERE T3.balance < value",
                -3.989625930786133
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < value INTERSECT SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance > value",
                -4.123206615447998
            ],
            [
                "SELECT T1.name , Sum ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid WHERE T3.balance < value",
                -4.157256126403809
            ],
            [
                "SELECT T1.name , T3.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid WHERE T2.balance < value",
                -4.175928592681885
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid WHERE T3.balance < value",
                -4.659512042999268
            ],
            [
                "SELECT T1.name , T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance < value INTERSECT SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T3 ON T1.custid = T3.custid WHERE T3.balance > value",
                -4.721917152404785
            ],
            [
                "SELECT T1.name , * FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < value",
                -4.784926891326904
            ],
            [
                "SELECT T1.name , Sum ( T1.name ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < value",
                -5.166781187057495
            ],
            [
                "SELECT T1.name , Sum ( * ) FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance < value",
                -5.316154718399048
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < value",
                -7.141597270965576
            ]
        ],
        "predicted_parse_with_values": "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < 200000",
        "template_feedback": "in step 1 , additionally use the information from the checking table . in step 2 , consider the savings 's balance less than checking 's balance conditions in place of the savings 's balance less than 200000 conditions . find savings 's balance plus checking 's balance in place of savings 's balance .",
        "primary_span": [
            [
                4,
                12
            ],
            [
                17,
                27
            ],
            [
                40,
                47
            ]
        ],
        "secondary_span": [
            [
                28,
                39
            ],
            [
                48,
                54
            ]
        ],
        "edits": [
            "balance plus balance",
            "balance",
            "checking",
            "balance less than balance",
            "balance less than 200000"
        ],
        "edits_original": "< select > add balance plus balance </ select > < select > remove balance </ select > < from > add checking </ from > < where > add balance less than balance </ where > < where > remove balance less than 200000 </ where >"
    },
    {
        "db_id": "small_bank_1",
        "question": "What are the names of customers who have a savings balance lower than their checking balance, and what is the total of their checking and savings balances?",
        "gold_parse": "SELECT T1.name ,  T3.balance + T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  <  T2.balance",
        "predicted_parse": "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < value",
        "predicted_parse_explanation": [
            "Step 1: for each row in accounts table , find the corresponding rows in savings table",
            "Step 2: find the name and balance of the results of step 1 whose balance less than 200000"
        ],
        "feedback": "you need to use addition of savings and checking balance in place of balance and acknowledge savings balance is less than checking.",
        "beam": [
            [
                "SELECT T1.name , T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < value",
                -1.532799482345581
            ],
            [
                "SELECT T1.name , T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < value INTERSECT SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < value",
                -1.7967100143432617
            ],
            [
                "SELECT T1.name , Sum ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < value",
                -2.167367458343506
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < value",
                -2.6665258407592773
            ],
            [
                "SELECT T1.name , T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < value INTERSECT SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance > value",
                -2.7260313034057617
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < value INTERSECT SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < value",
                -3.271608829498291
            ],
            [
                "SELECT T1.name , Sum ( * ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < value",
                -3.3603155612945557
            ],
            [
                "SELECT T1.name , T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance < value",
                -3.6514933109283447
            ],
            [
                "SELECT T1.name , T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance < value INTERSECT SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T3 ON T1.custid = T3.custid WHERE T3.balance < value",
                -3.7778701782226562
            ],
            [
                "SELECT T1.name , Sum ( T3.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid WHERE T2.balance < value",
                -3.812743663787842
            ],
            [
                "SELECT T1.name , T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < value INTERSECT SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T3 ON T1.custid = T3.custid WHERE T3.balance < value",
                -3.989625930786133
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < value INTERSECT SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance > value",
                -4.123206615447998
            ],
            [
                "SELECT T1.name , Sum ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid WHERE T3.balance < value",
                -4.157256126403809
            ],
            [
                "SELECT T1.name , T3.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid WHERE T2.balance < value",
                -4.175928592681885
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid WHERE T3.balance < value",
                -4.659512042999268
            ],
            [
                "SELECT T1.name , T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance < value INTERSECT SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T3 ON T1.custid = T3.custid WHERE T3.balance > value",
                -4.721917152404785
            ],
            [
                "SELECT T1.name , * FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < value",
                -4.784926891326904
            ],
            [
                "SELECT T1.name , Sum ( T1.name ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < value",
                -5.166781187057495
            ],
            [
                "SELECT T1.name , Sum ( * ) FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance < value",
                -5.316154718399048
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < value",
                -7.141597270965576
            ]
        ],
        "predicted_parse_with_values": "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < 200000",
        "template_feedback": "in step 1 , additionally use the information from the checking table . in step 2 , consider the savings 's balance less than checking 's balance conditions in place of the savings 's balance less than 200000 conditions . find savings 's balance plus checking 's balance in place of savings 's balance .",
        "primary_span": [
            [
                4,
                12
            ],
            [
                17,
                27
            ],
            [
                40,
                47
            ]
        ],
        "secondary_span": [
            [
                28,
                39
            ],
            [
                48,
                54
            ]
        ],
        "edits": [
            "balance plus balance",
            "balance",
            "checking",
            "balance less than balance",
            "balance less than 200000"
        ],
        "edits_original": "< select > add balance plus balance </ select > < select > remove balance </ select > < from > add checking </ from > < where > add balance less than balance </ where > < where > remove balance less than 200000 </ where >"
    },
    {
        "db_id": "small_bank_1",
        "question": "What are the names of customers who have a savings balance lower than their checking balance, and what is the total of their checking and savings balances?",
        "gold_parse": "SELECT T1.name ,  T3.balance + T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  <  T2.balance",
        "predicted_parse": "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < value",
        "predicted_parse_explanation": [
            "Step 1: for each row in accounts table , find the corresponding rows in savings table",
            "Step 2: find the name of the results of step 1 whose balance less than 200000"
        ],
        "feedback": "In step 2 , condition should be savings balance less than checking , additionally , calculate total balance of checking and savings .",
        "beam": [
            [
                "SELECT T1.name , T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < value",
                -1.532799482345581
            ],
            [
                "SELECT T1.name , T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < value INTERSECT SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < value",
                -1.7967100143432617
            ],
            [
                "SELECT T1.name , Sum ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < value",
                -2.167367458343506
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < value",
                -2.6665258407592773
            ],
            [
                "SELECT T1.name , T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < value INTERSECT SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance > value",
                -2.7260313034057617
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < value INTERSECT SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < value",
                -3.271608829498291
            ],
            [
                "SELECT T1.name , Sum ( * ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < value",
                -3.3603155612945557
            ],
            [
                "SELECT T1.name , T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance < value",
                -3.6514933109283447
            ],
            [
                "SELECT T1.name , T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance < value INTERSECT SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T3 ON T1.custid = T3.custid WHERE T3.balance < value",
                -3.7778701782226562
            ],
            [
                "SELECT T1.name , Sum ( T3.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid WHERE T2.balance < value",
                -3.812743663787842
            ],
            [
                "SELECT T1.name , T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < value INTERSECT SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T3 ON T1.custid = T3.custid WHERE T3.balance < value",
                -3.989625930786133
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < value INTERSECT SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance > value",
                -4.123206615447998
            ],
            [
                "SELECT T1.name , Sum ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid WHERE T3.balance < value",
                -4.157256126403809
            ],
            [
                "SELECT T1.name , T3.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid WHERE T2.balance < value",
                -4.175928592681885
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid WHERE T3.balance < value",
                -4.659512042999268
            ],
            [
                "SELECT T1.name , T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance < value INTERSECT SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T3 ON T1.custid = T3.custid WHERE T3.balance > value",
                -4.721917152404785
            ],
            [
                "SELECT T1.name , * FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < value",
                -4.784926891326904
            ],
            [
                "SELECT T1.name , Sum ( T1.name ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < value",
                -5.166781187057495
            ],
            [
                "SELECT T1.name , Sum ( * ) FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance < value",
                -5.316154718399048
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < value",
                -7.141597270965576
            ]
        ],
        "predicted_parse_with_values": "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < 200000",
        "template_feedback": "in step 1 , additionally use the information from the checking table . in step 2 , consider the savings 's balance less than checking 's balance conditions in place of the savings 's balance less than 200000 conditions . additionally find savings 's balance plus checking 's balance .",
        "primary_span": [
            [
                4,
                12
            ],
            [
                17,
                27
            ],
            [
                40,
                49
            ]
        ],
        "secondary_span": [
            [
                28,
                39
            ]
        ],
        "edits": [
            "balance plus balance",
            "checking",
            "balance less than balance",
            "balance less than 200000"
        ],
        "edits_original": "< select > add balance plus balance </ select > < from > add checking </ from > < where > add balance less than balance </ where > < where > remove balance less than 200000 </ where >"
    },
    {
        "db_id": "small_bank_1",
        "question": "What are the names of customers who have a savings balance lower than their checking balance, and what is the total of their checking and savings balances?",
        "gold_parse": "SELECT T1.name ,  T3.balance + T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  <  T2.balance",
        "predicted_parse": "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < value",
        "predicted_parse_explanation": [
            "Step 1: for each row in accounts table , find the corresponding rows in savings table",
            "Step 2: find the name of the results of step 1 whose balance less than 200000"
        ],
        "feedback": "In step 2, satisfy the condition that savings balance is lower than checking. Also, count whole amount of checking and savings.",
        "beam": [
            [
                "SELECT T1.name , T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < value",
                -1.532799482345581
            ],
            [
                "SELECT T1.name , T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < value INTERSECT SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < value",
                -1.7967100143432617
            ],
            [
                "SELECT T1.name , Sum ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < value",
                -2.167367458343506
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < value",
                -2.6665258407592773
            ],
            [
                "SELECT T1.name , T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < value INTERSECT SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance > value",
                -2.7260313034057617
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < value INTERSECT SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < value",
                -3.271608829498291
            ],
            [
                "SELECT T1.name , Sum ( * ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < value",
                -3.3603155612945557
            ],
            [
                "SELECT T1.name , T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance < value",
                -3.6514933109283447
            ],
            [
                "SELECT T1.name , T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance < value INTERSECT SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T3 ON T1.custid = T3.custid WHERE T3.balance < value",
                -3.7778701782226562
            ],
            [
                "SELECT T1.name , Sum ( T3.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid WHERE T2.balance < value",
                -3.812743663787842
            ],
            [
                "SELECT T1.name , T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < value INTERSECT SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T3 ON T1.custid = T3.custid WHERE T3.balance < value",
                -3.989625930786133
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < value INTERSECT SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance > value",
                -4.123206615447998
            ],
            [
                "SELECT T1.name , Sum ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid WHERE T3.balance < value",
                -4.157256126403809
            ],
            [
                "SELECT T1.name , T3.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid WHERE T2.balance < value",
                -4.175928592681885
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid WHERE T3.balance < value",
                -4.659512042999268
            ],
            [
                "SELECT T1.name , T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance < value INTERSECT SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T3 ON T1.custid = T3.custid WHERE T3.balance > value",
                -4.721917152404785
            ],
            [
                "SELECT T1.name , * FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < value",
                -4.784926891326904
            ],
            [
                "SELECT T1.name , Sum ( T1.name ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < value",
                -5.166781187057495
            ],
            [
                "SELECT T1.name , Sum ( * ) FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance < value",
                -5.316154718399048
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < value",
                -7.141597270965576
            ]
        ],
        "predicted_parse_with_values": "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < 200000",
        "template_feedback": "in step 1 , additionally use the information from the checking table . in step 2 , consider the savings 's balance less than checking 's balance conditions in place of the savings 's balance less than 200000 conditions . additionally find savings 's balance plus checking 's balance .",
        "primary_span": [
            [
                4,
                12
            ],
            [
                17,
                27
            ],
            [
                40,
                49
            ]
        ],
        "secondary_span": [
            [
                28,
                39
            ]
        ],
        "edits": [
            "balance plus balance",
            "checking",
            "balance less than balance",
            "balance less than 200000"
        ],
        "edits_original": "< select > add balance plus balance </ select > < from > add checking </ from > < where > add balance less than balance </ where > < where > remove balance less than 200000 </ where >"
    },
    {
        "db_id": "small_bank_1",
        "question": "What are the checking and savings balances in accounts belonging to Brown?",
        "gold_parse": "SELECT T2.balance ,  T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T1.name  =  'Brown'",
        "predicted_parse": "SELECT T2.balance , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
        "predicted_parse_explanation": [
            "Step 1: for each row in accounts table , find the corresponding rows in savings table",
            "Step 2: find the balance and balance of the results of step 1 whose name equals Brown"
        ],
        "feedback": "Also find correspondence with checking table in step 1 , should be savings 's balance , checking 's balance in step 2.",
        "beam": [
            [
                "SELECT * , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
                -0.5630106925964355
            ],
            [
                "SELECT T2.balance , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
                -1.0830988883972168
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
                -3.593477249145508
            ],
            [
                "SELECT T3.balance , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid WHERE T1.name = value",
                -4.051864147186279
            ],
            [
                "SELECT T3.custid , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid WHERE T1.name = value",
                -4.266865253448486
            ],
            [
                "SELECT T2.custid , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
                -4.428754806518555
            ],
            [
                "SELECT T2.balance , T3.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid WHERE T1.name = value",
                -4.546908140182495
            ],
            [
                "SELECT * , T2.balance FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
                -5.291868686676025
            ],
            [
                "SELECT T2.balance , * FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
                -5.883729457855225
            ],
            [
                "SELECT T1.custid , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
                -6.56727409362793
            ],
            [
                "SELECT T2.balance , T2.balance FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
                -7.681679725646973
            ],
            [
                "SELECT T2.balance , T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
                -8.276154518127441
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
                -8.509546279907227
            ],
            [
                "SELECT T2.custid , T2.balance FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
                -8.994930744171143
            ],
            [
                "SELECT T2.custid , T3.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid WHERE T1.name = value",
                -9.265176773071289
            ],
            [
                "SELECT T2.balance , * FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
                -9.615010738372803
            ],
            [
                "SELECT * , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name LIKE value",
                -10.85827112197876
            ],
            [
                "SELECT T2.balance , T2.custid FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
                -11.268925189971924
            ],
            [
                "SELECT T2.balance , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name LIKE value",
                -11.295438289642334
            ],
            [
                "SELECT T1.custid , T2.balance FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
                -11.44747543334961
            ]
        ],
        "predicted_parse_with_values": "SELECT T2.balance , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name = \"Brown\"",
        "template_feedback": "in step 1 , additionally use the information from the checking table . in step 2 , additionally find checking 's balance .",
        "primary_span": [
            [
                4,
                12
            ],
            [
                17,
                22
            ]
        ],
        "secondary_span": [],
        "edits": [
            "checking"
        ],
        "edits_original": "< from > add checking </ from >"
    },
    {
        "db_id": "small_bank_1",
        "question": "What are the checking and savings balances in accounts belonging to Brown?",
        "gold_parse": "SELECT T2.balance ,  T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T1.name  =  'Brown'",
        "predicted_parse": "SELECT T2.balance , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
        "predicted_parse_explanation": [
            "Step 1: for each row in accounts table , find the corresponding rows in savings table",
            "Step 2: find the balance and balance of the results of step 1 whose name equals Brown"
        ],
        "feedback": "You need to make sure that balance of saving and checking of step 2 are equivalent to those of checking table in step 1.",
        "beam": [
            [
                "SELECT * , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
                -0.5630106925964355
            ],
            [
                "SELECT T2.balance , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
                -1.0830988883972168
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
                -3.593477249145508
            ],
            [
                "SELECT T3.balance , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid WHERE T1.name = value",
                -4.051864147186279
            ],
            [
                "SELECT T3.custid , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid WHERE T1.name = value",
                -4.266865253448486
            ],
            [
                "SELECT T2.custid , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
                -4.428754806518555
            ],
            [
                "SELECT T2.balance , T3.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid WHERE T1.name = value",
                -4.546908140182495
            ],
            [
                "SELECT * , T2.balance FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
                -5.291868686676025
            ],
            [
                "SELECT T2.balance , * FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
                -5.883729457855225
            ],
            [
                "SELECT T1.custid , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
                -6.56727409362793
            ],
            [
                "SELECT T2.balance , T2.balance FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
                -7.681679725646973
            ],
            [
                "SELECT T2.balance , T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
                -8.276154518127441
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
                -8.509546279907227
            ],
            [
                "SELECT T2.custid , T2.balance FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
                -8.994930744171143
            ],
            [
                "SELECT T2.custid , T3.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid WHERE T1.name = value",
                -9.265176773071289
            ],
            [
                "SELECT T2.balance , * FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
                -9.615010738372803
            ],
            [
                "SELECT * , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name LIKE value",
                -10.85827112197876
            ],
            [
                "SELECT T2.balance , T2.custid FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
                -11.268925189971924
            ],
            [
                "SELECT T2.balance , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name LIKE value",
                -11.295438289642334
            ],
            [
                "SELECT T1.custid , T2.balance FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
                -11.44747543334961
            ]
        ],
        "predicted_parse_with_values": "SELECT T2.balance , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name = \"Brown\"",
        "template_feedback": "in step 1 , additionally use the information from the checking table . in step 2 , additionally find checking 's balance .",
        "primary_span": [
            [
                4,
                12
            ],
            [
                17,
                22
            ]
        ],
        "secondary_span": [],
        "edits": [
            "checking"
        ],
        "edits_original": "< from > add checking </ from >"
    },
    {
        "db_id": "formula_1",
        "question": "What are the different names of all the races in reverse alphabetical order?",
        "gold_parse": "SELECT DISTINCT name FROM races ORDER BY name DESC",
        "predicted_parse": "SELECT DISTINCT country FROM circuits ORDER BY country Asc",
        "predicted_parse_explanation": [
            "find without repetition country in circuits table ordered ascending by country"
        ],
        "feedback": "Supersede name of races with wins of drivers and order descending by wins of races\".",
        "beam": [
            [
                "SELECT country FROM circuits ORDER BY country Asc",
                -0.548194408416748
            ],
            [
                "SELECT DISTINCT country FROM circuits ORDER BY country Asc",
                -0.8820638656616211
            ],
            [
                "SELECT DISTINCT T2.name FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId ORDER BY T1.country Asc",
                -5.797573089599609
            ],
            [
                "SELECT T2.name FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId ORDER BY T1.country Asc",
                -5.826405048370361
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId ORDER BY T2.name Asc",
                -6.776788711547852
            ],
            [
                "SELECT DISTINCT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId ORDER BY T2.name Asc",
                -7.235841751098633
            ],
            [
                "SELECT DISTINCT T2.dob FROM circuits AS T1 JOIN seasons AS T2 ORDER BY T1.country Asc",
                -9.455188751220703
            ],
            [
                "SELECT T2.dob FROM circuits AS T1 JOIN seasons AS T2 ORDER BY T1.country Asc",
                -9.515255451202393
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN seasons AS T2 ORDER BY T2.dob Asc",
                -10.434537410736084
            ],
            [
                "SELECT DISTINCT T1.country FROM circuits AS T1 JOIN seasons AS T2 ORDER BY T2.dob Asc",
                -10.822339057922363
            ],
            [
                "SELECT name FROM races ORDER BY name Asc",
                -12.043723583221436
            ],
            [
                "SELECT DISTINCT name FROM races ORDER BY name Asc",
                -12.13737154006958
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN drivers AS T3 JOIN constructorStandings AS T4 ON T2.raceId = T4.raceId AND T4.driverId = T3.driverId ORDER BY T3.driverRef Asc",
                -12.905128955841064
            ],
            [
                "SELECT DISTINCT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN drivers AS T3 JOIN constructorStandings AS T4 ON T2.raceId = T4.raceId AND T4.driverId = T3.driverId ORDER BY T3.driverRef Asc",
                -13.153375625610352
            ],
            [
                "SELECT DISTINCT country FROM circuits",
                -13.232805252075195
            ],
            [
                "SELECT country FROM circuits ORDER BY country Desc",
                -13.419848918914795
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId ORDER BY T2.url Asc",
                -13.627452373504639
            ],
            [
                "SELECT DISTINCT country FROM circuits ORDER BY country Desc",
                -13.855772018432617
            ],
            [
                "SELECT country FROM circuits GROUP BY country ORDER BY Count ( * ) Asc",
                -13.94263744354248
            ],
            [
                "SELECT DISTINCT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId ORDER BY T2.url Asc",
                -13.960454940795898
            ]
        ],
        "predicted_parse_with_values": "SELECT DISTINCT country FROM circuits ORDER BY country Asc",
        "template_feedback": "use races table in place of circuits table . find races 's name in place of country . order the results descending by races 's name in place of ordering ascending by country .",
        "primary_span": [
            [
                0,
                2
            ],
            [
                9,
                12
            ],
            [
                18,
                25
            ]
        ],
        "secondary_span": [
            [
                3,
                8
            ],
            [
                13,
                17
            ],
            [
                26,
                33
            ]
        ],
        "edits": [
            "name",
            "country",
            "races",
            "circuits",
            "name",
            "descending",
            "country"
        ],
        "edits_original": "< select > add name </ select > < select > remove country </ select > < from > add races </ from > < from > remove circuits </ from > < orderBy > add name </ orderBy > < orderBy > add descending </ orderBy > < orderBy > remove country </ orderBy >"
    },
    {
        "db_id": "formula_1",
        "question": "What are the different names of all the races in reverse alphabetical order?",
        "gold_parse": "SELECT DISTINCT name FROM races ORDER BY name DESC",
        "predicted_parse": "SELECT DISTINCT country FROM circuits ORDER BY country Asc",
        "predicted_parse_explanation": [
            "find without repetition country in circuits table ordered ascending by country"
        ],
        "feedback": "You should use wins of driver in place of names of races and arrange them in descending order of races won.",
        "beam": [
            [
                "SELECT country FROM circuits ORDER BY country Asc",
                -0.548194408416748
            ],
            [
                "SELECT DISTINCT country FROM circuits ORDER BY country Asc",
                -0.8820638656616211
            ],
            [
                "SELECT DISTINCT T2.name FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId ORDER BY T1.country Asc",
                -5.797573089599609
            ],
            [
                "SELECT T2.name FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId ORDER BY T1.country Asc",
                -5.826405048370361
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId ORDER BY T2.name Asc",
                -6.776788711547852
            ],
            [
                "SELECT DISTINCT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId ORDER BY T2.name Asc",
                -7.235841751098633
            ],
            [
                "SELECT DISTINCT T2.dob FROM circuits AS T1 JOIN seasons AS T2 ORDER BY T1.country Asc",
                -9.455188751220703
            ],
            [
                "SELECT T2.dob FROM circuits AS T1 JOIN seasons AS T2 ORDER BY T1.country Asc",
                -9.515255451202393
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN seasons AS T2 ORDER BY T2.dob Asc",
                -10.434537410736084
            ],
            [
                "SELECT DISTINCT T1.country FROM circuits AS T1 JOIN seasons AS T2 ORDER BY T2.dob Asc",
                -10.822339057922363
            ],
            [
                "SELECT name FROM races ORDER BY name Asc",
                -12.043723583221436
            ],
            [
                "SELECT DISTINCT name FROM races ORDER BY name Asc",
                -12.13737154006958
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN drivers AS T3 JOIN constructorStandings AS T4 ON T2.raceId = T4.raceId AND T4.driverId = T3.driverId ORDER BY T3.driverRef Asc",
                -12.905128955841064
            ],
            [
                "SELECT DISTINCT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN drivers AS T3 JOIN constructorStandings AS T4 ON T2.raceId = T4.raceId AND T4.driverId = T3.driverId ORDER BY T3.driverRef Asc",
                -13.153375625610352
            ],
            [
                "SELECT DISTINCT country FROM circuits",
                -13.232805252075195
            ],
            [
                "SELECT country FROM circuits ORDER BY country Desc",
                -13.419848918914795
            ],
            [
                "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId ORDER BY T2.url Asc",
                -13.627452373504639
            ],
            [
                "SELECT DISTINCT country FROM circuits ORDER BY country Desc",
                -13.855772018432617
            ],
            [
                "SELECT country FROM circuits GROUP BY country ORDER BY Count ( * ) Asc",
                -13.94263744354248
            ],
            [
                "SELECT DISTINCT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId ORDER BY T2.url Asc",
                -13.960454940795898
            ]
        ],
        "predicted_parse_with_values": "SELECT DISTINCT country FROM circuits ORDER BY country Asc",
        "template_feedback": "use races table in place of circuits table . find races 's name in place of country . order the results descending by races 's name in place of ordering ascending by country .",
        "primary_span": [
            [
                0,
                2
            ],
            [
                9,
                12
            ],
            [
                18,
                25
            ]
        ],
        "secondary_span": [
            [
                3,
                8
            ],
            [
                13,
                17
            ],
            [
                26,
                33
            ]
        ],
        "edits": [
            "name",
            "country",
            "races",
            "circuits",
            "name",
            "descending",
            "country"
        ],
        "edits_original": "< select > add name </ select > < select > remove country </ select > < from > add races </ from > < from > remove circuits </ from > < orderBy > add name </ orderBy > < orderBy > add descending </ orderBy > < orderBy > remove country </ orderBy >"
    },
    {
        "db_id": "small_bank_1",
        "question": "What is the average balance in checking accounts?",
        "gold_parse": "SELECT avg(balance) FROM checking",
        "predicted_parse": "SELECT Avg ( balance ) FROM SAVINGS",
        "predicted_parse_explanation": [
            "find the average balance in savings table"
        ],
        "feedback": "Supersede savings table with checking table",
        "beam": [
            [
                "SELECT Avg ( balance ) FROM CHECKING",
                -0.6656513214111328
            ],
            [
                "SELECT Avg ( balance ) FROM SAVINGS",
                -0.7215099334716797
            ],
            [
                "SELECT Avg ( T2.balance ) FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
                -10.971726894378662
            ],
            [
                "SELECT Avg ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
                -11.021107196807861
            ],
            [
                "SELECT Sum ( balance ) FROM CHECKING",
                -13.767261505126953
            ],
            [
                "SELECT Sum ( balance ) FROM SAVINGS",
                -13.825078010559082
            ],
            [
                "SELECT Avg ( * ) FROM ACCOUNTS",
                -14.486080169677734
            ],
            [
                "SELECT Avg ( DISTINCT balance ) FROM CHECKING",
                -14.772141456604004
            ],
            [
                "SELECT Avg ( DISTINCT balance ) FROM SAVINGS",
                -14.875513076782227
            ],
            [
                "SELECT Min ( balance ) FROM CHECKING",
                -15.32279109954834
            ],
            [
                "SELECT Min ( balance ) FROM SAVINGS",
                -15.395402908325195
            ],
            [
                "SELECT Avg ( balance ) , Avg ( balance ) FROM CHECKING",
                -15.589224338531494
            ],
            [
                "SELECT Avg ( T2.balance ) , Avg ( T3.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T2.custid = T1.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid",
                -15.685717105865479
            ],
            [
                "SELECT Avg ( T3.balance ) , Avg ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T2.custid = T1.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid",
                -15.997259616851807
            ],
            [
                "SELECT Avg ( balance ) , Avg ( balance ) FROM SAVINGS",
                -16.093858242034912
            ],
            [
                "SELECT Avg ( balance ) FROM CHECKING LIMIT value",
                -16.154813766479492
            ],
            [
                "SELECT Avg ( balance ) FROM SAVINGS LIMIT value",
                -16.217205047607422
            ],
            [
                "SELECT DISTINCT Avg ( balance ) FROM CHECKING",
                -16.34370708465576
            ],
            [
                "SELECT DISTINCT Avg ( balance ) FROM SAVINGS",
                -16.404836654663086
            ],
            [
                "SELECT Max ( balance ) FROM CHECKING",
                -17.114255905151367
            ]
        ],
        "predicted_parse_with_values": "SELECT Avg ( balance ) FROM SAVINGS",
        "template_feedback": "use checking table in place of savings table . find average checking 's balance in place of average savings 's balance .",
        "primary_span": [
            [
                0,
                2
            ],
            [
                9,
                13
            ]
        ],
        "secondary_span": [
            [
                3,
                8
            ],
            [
                14,
                21
            ]
        ],
        "edits": [
            "checking",
            "savings"
        ],
        "edits_original": "< from > add checking </ from > < from > remove savings </ from >"
    },
    {
        "db_id": "small_bank_1",
        "question": "What is the average balance in checking accounts?",
        "gold_parse": "SELECT avg(balance) FROM checking",
        "predicted_parse": "SELECT Avg ( balance ) FROM SAVINGS",
        "predicted_parse_explanation": [
            "find the average balance in savings table"
        ],
        "feedback": "I want the checking table.",
        "beam": [
            [
                "SELECT Avg ( balance ) FROM CHECKING",
                -0.6656513214111328
            ],
            [
                "SELECT Avg ( balance ) FROM SAVINGS",
                -0.7215099334716797
            ],
            [
                "SELECT Avg ( T2.balance ) FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
                -10.971726894378662
            ],
            [
                "SELECT Avg ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
                -11.021107196807861
            ],
            [
                "SELECT Sum ( balance ) FROM CHECKING",
                -13.767261505126953
            ],
            [
                "SELECT Sum ( balance ) FROM SAVINGS",
                -13.825078010559082
            ],
            [
                "SELECT Avg ( * ) FROM ACCOUNTS",
                -14.486080169677734
            ],
            [
                "SELECT Avg ( DISTINCT balance ) FROM CHECKING",
                -14.772141456604004
            ],
            [
                "SELECT Avg ( DISTINCT balance ) FROM SAVINGS",
                -14.875513076782227
            ],
            [
                "SELECT Min ( balance ) FROM CHECKING",
                -15.32279109954834
            ],
            [
                "SELECT Min ( balance ) FROM SAVINGS",
                -15.395402908325195
            ],
            [
                "SELECT Avg ( balance ) , Avg ( balance ) FROM CHECKING",
                -15.589224338531494
            ],
            [
                "SELECT Avg ( T2.balance ) , Avg ( T3.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T2.custid = T1.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid",
                -15.685717105865479
            ],
            [
                "SELECT Avg ( T3.balance ) , Avg ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T2.custid = T1.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid",
                -15.997259616851807
            ],
            [
                "SELECT Avg ( balance ) , Avg ( balance ) FROM SAVINGS",
                -16.093858242034912
            ],
            [
                "SELECT Avg ( balance ) FROM CHECKING LIMIT value",
                -16.154813766479492
            ],
            [
                "SELECT Avg ( balance ) FROM SAVINGS LIMIT value",
                -16.217205047607422
            ],
            [
                "SELECT DISTINCT Avg ( balance ) FROM CHECKING",
                -16.34370708465576
            ],
            [
                "SELECT DISTINCT Avg ( balance ) FROM SAVINGS",
                -16.404836654663086
            ],
            [
                "SELECT Max ( balance ) FROM CHECKING",
                -17.114255905151367
            ]
        ],
        "predicted_parse_with_values": "SELECT Avg ( balance ) FROM SAVINGS",
        "template_feedback": "use checking table in place of savings table . find average checking 's balance in place of average savings 's balance .",
        "primary_span": [
            [
                0,
                2
            ],
            [
                9,
                13
            ]
        ],
        "secondary_span": [
            [
                3,
                8
            ],
            [
                14,
                21
            ]
        ],
        "edits": [
            "checking",
            "savings"
        ],
        "edits_original": "< from > add checking </ from > < from > remove savings </ from >"
    },
    {
        "db_id": "small_bank_1",
        "question": "What are the names of customers with checking balances lower than the average checking balance?",
        "gold_parse": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM checking)",
        "predicted_parse": "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T3.balance ) FROM SAVINGS AS T3 )",
        "predicted_parse_explanation": [
            "Step 1: for each row in accounts table , find the corresponding rows in checking table",
            "Step 2: find the average savings 's balance in savings table",
            "Step 3: find the name of the results of step 1 whose checking 's balance less than the results of step 2"
        ],
        "feedback": "It should be checking 's balance , checking table , not savings 's balance , savings table in step 1.",
        "beam": [
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T2.balance ) FROM SAVINGS AS T2 )",
                -1.2188935279846191
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T3.balance ) FROM CHECKING AS T3 )",
                -1.3124732971191406
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T3.balance ) FROM SAVINGS AS T3 )",
                -1.5264036655426025
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T2.balance ) FROM CHECKING AS T2 )",
                -1.6198904514312744
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 WHERE T1.name < ( SELECT Avg ( T2.balance ) FROM SAVINGS AS T2 )",
                -4.771528720855713
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 WHERE T1.name < ( SELECT Avg ( T2.balance ) FROM CHECKING AS T2 )",
                -4.874200344085693
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T1.name ) FROM ACCOUNTS AS T1 )",
                -6.668666839599609
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T1.name ) FROM ACCOUNTS AS T1 )",
                -6.9771568775177
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 WHERE T1.name < ( SELECT Avg ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name = value )",
                -8.180263996124268
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 WHERE T1.name < ( SELECT Avg ( T2.balance ) FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T1.name = value )",
                -8.28007698059082
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name = value )",
                -8.92970895767212
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T3.balance ) FROM ACCOUNTS AS T1 JOIN CHECKING AS T3 ON T1.custid = T3.custid WHERE T1.name = value )",
                -9.027690887451172
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T3.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T3 ON T1.custid = T3.custid WHERE T1.name = value )",
                -9.225632905960083
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T2.balance ) FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T1.name = value )",
                -9.323596239089966
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid GROUP BY T1.name HAVING Avg ( T2.balance ) < ( SELECT Avg ( T2.balance ) FROM SAVINGS AS T2 )",
                -9.9654541015625
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid GROUP BY T1.name HAVING Avg ( T2.balance ) < ( SELECT Avg ( T3.balance ) FROM CHECKING AS T3 )",
                -10.052696228027344
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid GROUP BY T1.name HAVING Avg ( T2.balance ) < ( SELECT Avg ( T3.balance ) FROM SAVINGS AS T3 )",
                -10.06989860534668
            ],
            [
                "SELECT name FROM ACCOUNTS WHERE name < value",
                -10.10791540145874
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 WHERE T1.name < ( SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid GROUP BY T1.name ORDER BY Avg ( T2.balance ) Desc LIMIT value )",
                -10.83475375175476
            ],
            [
                "SELECT name FROM ACCOUNTS",
                -13.01071834564209
            ]
        ],
        "predicted_parse_with_values": "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T3.balance ) FROM SAVINGS AS T3 )",
        "template_feedback": "in step 2 , use checking table in place of savings table . find average balance in place of average savings 's balance .",
        "primary_span": [
            [
                4,
                6
            ],
            [
                13,
                15
            ]
        ],
        "secondary_span": [
            [
                7,
                12
            ],
            [
                16,
                23
            ]
        ],
        "edits": [
            "checking",
            "savings"
        ],
        "edits_original": "< from > add checking </ from > < from > remove savings </ from >"
    },
    {
        "db_id": "small_bank_1",
        "question": "What are the names of customers with checking balances lower than the average checking balance?",
        "gold_parse": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM checking)",
        "predicted_parse": "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T3.balance ) FROM SAVINGS AS T3 )",
        "predicted_parse_explanation": [
            "Step 1: for each row in accounts table , find the corresponding rows in checking table",
            "Step 2: find the average savings 's balance in savings table",
            "Step 3: find the name of the results of step 1 whose checking 's balance less than the results of step 2"
        ],
        "feedback": "In step 2, use checking's balance, checking table instead of savings's balance, savings table respectively.",
        "beam": [
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T2.balance ) FROM SAVINGS AS T2 )",
                -1.2188935279846191
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T3.balance ) FROM CHECKING AS T3 )",
                -1.3124732971191406
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T3.balance ) FROM SAVINGS AS T3 )",
                -1.5264036655426025
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T2.balance ) FROM CHECKING AS T2 )",
                -1.6198904514312744
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 WHERE T1.name < ( SELECT Avg ( T2.balance ) FROM SAVINGS AS T2 )",
                -4.771528720855713
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 WHERE T1.name < ( SELECT Avg ( T2.balance ) FROM CHECKING AS T2 )",
                -4.874200344085693
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T1.name ) FROM ACCOUNTS AS T1 )",
                -6.668666839599609
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T1.name ) FROM ACCOUNTS AS T1 )",
                -6.9771568775177
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 WHERE T1.name < ( SELECT Avg ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name = value )",
                -8.180263996124268
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 WHERE T1.name < ( SELECT Avg ( T2.balance ) FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T1.name = value )",
                -8.28007698059082
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name = value )",
                -8.92970895767212
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T3.balance ) FROM ACCOUNTS AS T1 JOIN CHECKING AS T3 ON T1.custid = T3.custid WHERE T1.name = value )",
                -9.027690887451172
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T3.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T3 ON T1.custid = T3.custid WHERE T1.name = value )",
                -9.225632905960083
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T2.balance ) FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T1.name = value )",
                -9.323596239089966
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid GROUP BY T1.name HAVING Avg ( T2.balance ) < ( SELECT Avg ( T2.balance ) FROM SAVINGS AS T2 )",
                -9.9654541015625
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid GROUP BY T1.name HAVING Avg ( T2.balance ) < ( SELECT Avg ( T3.balance ) FROM CHECKING AS T3 )",
                -10.052696228027344
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid GROUP BY T1.name HAVING Avg ( T2.balance ) < ( SELECT Avg ( T3.balance ) FROM SAVINGS AS T3 )",
                -10.06989860534668
            ],
            [
                "SELECT name FROM ACCOUNTS WHERE name < value",
                -10.10791540145874
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 WHERE T1.name < ( SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid GROUP BY T1.name ORDER BY Avg ( T2.balance ) Desc LIMIT value )",
                -10.83475375175476
            ],
            [
                "SELECT name FROM ACCOUNTS",
                -13.01071834564209
            ]
        ],
        "predicted_parse_with_values": "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T3.balance ) FROM SAVINGS AS T3 )",
        "template_feedback": "in step 2 , use checking table in place of savings table . find average balance in place of average savings 's balance .",
        "primary_span": [
            [
                4,
                6
            ],
            [
                13,
                15
            ]
        ],
        "secondary_span": [
            [
                7,
                12
            ],
            [
                16,
                23
            ]
        ],
        "edits": [
            "checking",
            "savings"
        ],
        "edits_original": "< from > add checking </ from > < from > remove savings </ from >"
    },
    {
        "db_id": "flight_1",
        "question": "Show the name of aircrafts with top three lowest distances.",
        "gold_parse": "SELECT name FROM Aircraft ORDER BY distance LIMIT 3",
        "predicted_parse": "SELECT name FROM aircraft ORDER BY distance Desc LIMIT value",
        "predicted_parse_explanation": [
            "Step 1: find the name in aircraft table ordered descending by distance",
            "Step 2: only show the first 3 rows of the results"
        ],
        "feedback": "Use \"ascending by distance , not \"descending by distance in step 1.",
        "beam": [
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.price Desc LIMIT value",
                -0.597442626953125
            ],
            [
                "SELECT name FROM aircraft ORDER BY distance Desc LIMIT value",
                -1.1303529739379883
            ],
            [
                "SELECT name FROM aircraft GROUP BY name ORDER BY Count ( * ) Desc LIMIT value",
                -2.5002965927124023
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.distance Desc LIMIT value",
                -3.1861228942871094
            ],
            [
                "SELECT T1.name FROM aircraft AS T1 JOIN employee AS T2 JOIN certificate AS T3 ON T1.aid = T3.aid AND T3.eid = T2.eid ORDER BY T2.salary Desc LIMIT value",
                -6.8189592361450195
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.aid ORDER BY Count ( * ) Desc LIMIT value",
                -8.069037437438965
            ],
            [
                "SELECT name FROM aircraft GROUP BY name ORDER BY Count ( * ) Desc LIMIT value INTERSECT SELECT name FROM aircraft GROUP BY name ORDER BY Count ( * ) Desc LIMIT value",
                -8.39297866821289
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.origin ORDER BY Count ( * ) Desc LIMIT value",
                -10.18651294708252
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.departure_date Desc LIMIT value",
                -10.408890724182129
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.arrival_date Desc LIMIT value",
                -10.457656860351562
            ],
            [
                "SELECT name FROM aircraft ORDER BY * Desc LIMIT value",
                -11.063863754272461
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.price Asc LIMIT value",
                -11.737374782562256
            ],
            [
                "SELECT name FROM aircraft GROUP BY name",
                -11.813870429992676
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.destination ORDER BY Count ( * ) Desc LIMIT value",
                -11.945808410644531
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.destination Desc LIMIT value",
                -12.062359809875488
            ],
            [
                "SELECT T1.name FROM aircraft AS T1 UNION SELECT Min ( T2.price ) FROM flight AS T2",
                -12.353968620300293
            ],
            [
                "SELECT name FROM aircraft ORDER BY distance Asc LIMIT value",
                -12.508324146270752
            ],
            [
                "SELECT name FROM aircraft UNION SELECT Min ( distance ) FROM aircraft",
                -12.528708934783936
            ],
            [
                "SELECT T1.name FROM aircraft AS T1 GROUP BY T1.name ORDER BY Count ( * ) Desc LIMIT value INTERSECT SELECT T1.name FROM flight AS T2 JOIN aircraft AS T1 ON T2.aid = T1.aid GROUP BY T2.aid ORDER BY Count ( * ) Desc LIMIT value",
                -12.79325532913208
            ],
            [
                "SELECT name FROM aircraft",
                -15.960500717163086
            ]
        ],
        "predicted_parse_with_values": "SELECT name FROM aircraft ORDER BY distance Desc LIMIT 3",
        "template_feedback": "in step 1 , order the results ascending .",
        "primary_span": [
            [
                4,
                8
            ]
        ],
        "secondary_span": [],
        "edits": [
            "descending"
        ],
        "edits_original": "< orderBy > remove descending </ orderBy >"
    },
    {
        "db_id": "flight_1",
        "question": "Show the name of aircrafts with top three lowest distances.",
        "gold_parse": "SELECT name FROM Aircraft ORDER BY distance LIMIT 3",
        "predicted_parse": "SELECT name FROM aircraft ORDER BY distance Desc LIMIT value",
        "predicted_parse_explanation": [
            "Step 1: find the name in aircraft table ordered descending by distance",
            "Step 2: only show the first 3 rows of the results"
        ],
        "feedback": "In step 1, replace \"descending by distance\" with \"ascending by distance\".",
        "beam": [
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.price Desc LIMIT value",
                -0.597442626953125
            ],
            [
                "SELECT name FROM aircraft ORDER BY distance Desc LIMIT value",
                -1.1303529739379883
            ],
            [
                "SELECT name FROM aircraft GROUP BY name ORDER BY Count ( * ) Desc LIMIT value",
                -2.5002965927124023
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.distance Desc LIMIT value",
                -3.1861228942871094
            ],
            [
                "SELECT T1.name FROM aircraft AS T1 JOIN employee AS T2 JOIN certificate AS T3 ON T1.aid = T3.aid AND T3.eid = T2.eid ORDER BY T2.salary Desc LIMIT value",
                -6.8189592361450195
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.aid ORDER BY Count ( * ) Desc LIMIT value",
                -8.069037437438965
            ],
            [
                "SELECT name FROM aircraft GROUP BY name ORDER BY Count ( * ) Desc LIMIT value INTERSECT SELECT name FROM aircraft GROUP BY name ORDER BY Count ( * ) Desc LIMIT value",
                -8.39297866821289
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.origin ORDER BY Count ( * ) Desc LIMIT value",
                -10.18651294708252
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.departure_date Desc LIMIT value",
                -10.408890724182129
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.arrival_date Desc LIMIT value",
                -10.457656860351562
            ],
            [
                "SELECT name FROM aircraft ORDER BY * Desc LIMIT value",
                -11.063863754272461
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.price Asc LIMIT value",
                -11.737374782562256
            ],
            [
                "SELECT name FROM aircraft GROUP BY name",
                -11.813870429992676
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.destination ORDER BY Count ( * ) Desc LIMIT value",
                -11.945808410644531
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.destination Desc LIMIT value",
                -12.062359809875488
            ],
            [
                "SELECT T1.name FROM aircraft AS T1 UNION SELECT Min ( T2.price ) FROM flight AS T2",
                -12.353968620300293
            ],
            [
                "SELECT name FROM aircraft ORDER BY distance Asc LIMIT value",
                -12.508324146270752
            ],
            [
                "SELECT name FROM aircraft UNION SELECT Min ( distance ) FROM aircraft",
                -12.528708934783936
            ],
            [
                "SELECT T1.name FROM aircraft AS T1 GROUP BY T1.name ORDER BY Count ( * ) Desc LIMIT value INTERSECT SELECT T1.name FROM flight AS T2 JOIN aircraft AS T1 ON T2.aid = T1.aid GROUP BY T2.aid ORDER BY Count ( * ) Desc LIMIT value",
                -12.79325532913208
            ],
            [
                "SELECT name FROM aircraft",
                -15.960500717163086
            ]
        ],
        "predicted_parse_with_values": "SELECT name FROM aircraft ORDER BY distance Desc LIMIT 3",
        "template_feedback": "in step 1 , order the results ascending .",
        "primary_span": [
            [
                4,
                8
            ]
        ],
        "secondary_span": [],
        "edits": [
            "descending"
        ],
        "edits_original": "< orderBy > remove descending </ orderBy >"
    },
    {
        "db_id": "small_bank_1",
        "question": "Find the name and total checking and savings balance of the accounts whose savings balance is lower than corresponding checking balance.",
        "gold_parse": "SELECT T1.name ,  T3.balance + T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  <  T2.balance",
        "predicted_parse": "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < value",
        "predicted_parse_explanation": [
            "Step 1: for each row in accounts table , find the corresponding rows in savings table",
            "Step 2: find the name and balance of the results of step 1 whose balance less than 200000"
        ],
        "feedback": "Step 2 Find name , savings 's balance , checking 's balance whose savings 's balance is Less than checking 's balance .",
        "beam": [
            [
                "SELECT T1.name , Sum ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < value",
                -0.8280749320983887
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < value",
                -1.3360633850097656
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < T2.balance",
                -3.1530089378356934
            ],
            [
                "SELECT T1.name , Sum ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < T2.balance",
                -3.315017819404602
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Max ( T2.balance ) FROM SAVINGS AS T2 )",
                -3.8776493072509766
            ],
            [
                "SELECT T1.name , Sum ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Max ( T2.balance ) FROM SAVINGS AS T2 )",
                -3.978059768676758
            ],
            [
                "SELECT T1.name , Sum ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid WHERE T3.balance < value",
                -4.136084318161011
            ],
            [
                "SELECT T1.name , Sum ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid GROUP BY T1.name HAVING Sum ( T2.balance ) < value",
                -4.2145795822143555
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid GROUP BY T1.name HAVING Sum ( T2.balance ) < value",
                -4.414379596710205
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid WHERE T3.balance < value",
                -4.668881416320801
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < T1.name",
                -4.753195285797119
            ],
            [
                "SELECT T1.name , Sum ( T3.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid WHERE T2.balance < value",
                -4.7724504470825195
            ],
            [
                "SELECT T1.name , Sum ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < T1.name",
                -4.901649236679077
            ],
            [
                "SELECT T1.name , T3.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid WHERE T2.balance < value",
                -4.999507427215576
            ],
            [
                "SELECT T1.name , Sum ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < T1.custid",
                -5.293547630310059
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < T1.custid",
                -5.3630900382995605
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid WHERE T2.balance < T3.balance",
                -5.544937610626221
            ],
            [
                "SELECT T1.name , Sum ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid WHERE T2.balance < T3.balance",
                -5.6738433837890625
            ],
            [
                "SELECT T1.name , Sum ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid GROUP BY T1.custid HAVING Sum ( T2.balance ) < value",
                -5.753920078277588
            ],
            [
                "SELECT T1.name , Sum ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid",
                -12.06220531463623
            ]
        ],
        "predicted_parse_with_values": "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < 200000",
        "template_feedback": "in step 1 , additionally use the information from the checking table . in step 2 , consider the savings 's balance less than checking 's balance conditions in place of the savings 's balance less than 200000 conditions . find savings 's balance plus checking 's balance in place of savings 's balance .",
        "primary_span": [
            [
                4,
                12
            ],
            [
                17,
                27
            ],
            [
                40,
                47
            ]
        ],
        "secondary_span": [
            [
                28,
                39
            ],
            [
                48,
                54
            ]
        ],
        "edits": [
            "balance plus balance",
            "balance",
            "checking",
            "balance less than balance",
            "balance less than 200000"
        ],
        "edits_original": "< select > add balance plus balance </ select > < select > remove balance </ select > < from > add checking </ from > < where > add balance less than balance </ where > < where > remove balance less than 200000 </ where >"
    },
    {
        "db_id": "small_bank_1",
        "question": "Find the name and total checking and savings balance of the accounts whose savings balance is lower than corresponding checking balance.",
        "gold_parse": "SELECT T1.name ,  T3.balance + T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  <  T2.balance",
        "predicted_parse": "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < value",
        "predicted_parse_explanation": [
            "Step 1: for each row in accounts table , find the corresponding rows in savings table",
            "Step 2: find the name and balance of the results of step 1 whose balance less than 200000"
        ],
        "feedback": "In step 2, you should determine the name, savings balance and checking balance where savings balance is less than checking balance.",
        "beam": [
            [
                "SELECT T1.name , Sum ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < value",
                -0.8280749320983887
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < value",
                -1.3360633850097656
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < T2.balance",
                -3.1530089378356934
            ],
            [
                "SELECT T1.name , Sum ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < T2.balance",
                -3.315017819404602
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Max ( T2.balance ) FROM SAVINGS AS T2 )",
                -3.8776493072509766
            ],
            [
                "SELECT T1.name , Sum ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Max ( T2.balance ) FROM SAVINGS AS T2 )",
                -3.978059768676758
            ],
            [
                "SELECT T1.name , Sum ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid WHERE T3.balance < value",
                -4.136084318161011
            ],
            [
                "SELECT T1.name , Sum ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid GROUP BY T1.name HAVING Sum ( T2.balance ) < value",
                -4.2145795822143555
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid GROUP BY T1.name HAVING Sum ( T2.balance ) < value",
                -4.414379596710205
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid WHERE T3.balance < value",
                -4.668881416320801
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < T1.name",
                -4.753195285797119
            ],
            [
                "SELECT T1.name , Sum ( T3.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid WHERE T2.balance < value",
                -4.7724504470825195
            ],
            [
                "SELECT T1.name , Sum ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < T1.name",
                -4.901649236679077
            ],
            [
                "SELECT T1.name , T3.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid WHERE T2.balance < value",
                -4.999507427215576
            ],
            [
                "SELECT T1.name , Sum ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < T1.custid",
                -5.293547630310059
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < T1.custid",
                -5.3630900382995605
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid WHERE T2.balance < T3.balance",
                -5.544937610626221
            ],
            [
                "SELECT T1.name , Sum ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid WHERE T2.balance < T3.balance",
                -5.6738433837890625
            ],
            [
                "SELECT T1.name , Sum ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid GROUP BY T1.custid HAVING Sum ( T2.balance ) < value",
                -5.753920078277588
            ],
            [
                "SELECT T1.name , Sum ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid",
                -12.06220531463623
            ]
        ],
        "predicted_parse_with_values": "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < 200000",
        "template_feedback": "in step 1 , additionally use the information from the checking table . in step 2 , consider the savings 's balance less than checking 's balance conditions in place of the savings 's balance less than 200000 conditions . find savings 's balance plus checking 's balance in place of savings 's balance .",
        "primary_span": [
            [
                4,
                12
            ],
            [
                17,
                27
            ],
            [
                40,
                47
            ]
        ],
        "secondary_span": [
            [
                28,
                39
            ],
            [
                48,
                54
            ]
        ],
        "edits": [
            "balance plus balance",
            "balance",
            "checking",
            "balance less than balance",
            "balance less than 200000"
        ],
        "edits_original": "< select > add balance plus balance </ select > < select > remove balance </ select > < from > add checking </ from > < where > add balance less than balance </ where > < where > remove balance less than 200000 </ where >"
    },
    {
        "db_id": "small_bank_1",
        "question": "Find the name and checking balance of the account with the lowest saving balance.",
        "gold_parse": "SELECT T2.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1",
        "predicted_parse": "SELECT T1.name , T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
        "predicted_parse_explanation": [
            "Step 1: for each row in accounts table , find the corresponding rows in savings table",
            "Step 2: find the name and name of the results of step 1 with smallest value of balance"
        ],
        "feedback": "Include checking table , replace balance with savings 's balance , change one of the name with checking 's balance .",
        "beam": [
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -0.7699496150016785
            ],
            [
                "SELECT T1.name , T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -0.8665919899940491
            ],
            [
                "SELECT T1.name , T3.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T2.balance Asc LIMIT value",
                -2.814028263092041
            ],
            [
                "SELECT T1.name , T2.custid FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -3.8062310218811035
            ],
            [
                "SELECT T1.name , T3.custid FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T2.balance Asc LIMIT value",
                -4.357814788818359
            ],
            [
                "SELECT T1.name , * FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -4.661055088043213
            ],
            [
                "SELECT T1.name , T1.custid FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -5.2793869972229
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance - T2.balance Asc LIMIT value",
                -5.500629127025604
            ],
            [
                "SELECT T1.name , T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -7.353182375431061
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T3.balance Asc LIMIT value",
                -7.452217757701874
            ],
            [
                "SELECT T1.name , T3.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T2.balance - T2.balance Asc LIMIT value",
                -7.541317462921143
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T2.balance - T3.balance Asc LIMIT value",
                -8.129480302333832
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -8.428079605102539
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -9.503812313079834
            ],
            [
                "SELECT T1.name , T3.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T2.balance - T3.balance Asc LIMIT value",
                -10.126943588256836
            ],
            [
                "SELECT T1.name , T2.custid FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T3.balance Asc LIMIT value",
                -10.424316883087158
            ],
            [
                "SELECT T1.name , * FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -10.94274091720581
            ],
            [
                "SELECT T1.name , T2.custid FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -10.99621868133545
            ],
            [
                "SELECT T1.name , T1.custid FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -11.897584438323975
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -14.416523933410645
            ]
        ],
        "predicted_parse_with_values": "SELECT T1.name , T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT 1",
        "template_feedback": "in step 1 , additionally use the information from the checking table . in step 2 , additionally find checking 's balance .",
        "primary_span": [
            [
                4,
                12
            ],
            [
                17,
                22
            ]
        ],
        "secondary_span": [],
        "edits": [
            "balance",
            "name",
            "checking"
        ],
        "edits_original": "< select > add balance </ select > < select > remove name </ select > < from > add checking </ from >"
    },
    {
        "db_id": "small_bank_1",
        "question": "Find the name and checking balance of the account with the lowest saving balance.",
        "gold_parse": "SELECT T2.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1",
        "predicted_parse": "SELECT T1.name , T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
        "predicted_parse_explanation": [
            "Step 1: for each row in accounts table , find the corresponding rows in savings table",
            "Step 2: find the name and name of the results of step 1 with smallest value of balance"
        ],
        "feedback": "Supplant name, balance with saving and checking balance respectively also consider checking table.",
        "beam": [
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -0.7699496150016785
            ],
            [
                "SELECT T1.name , T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -0.8665919899940491
            ],
            [
                "SELECT T1.name , T3.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T2.balance Asc LIMIT value",
                -2.814028263092041
            ],
            [
                "SELECT T1.name , T2.custid FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -3.8062310218811035
            ],
            [
                "SELECT T1.name , T3.custid FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T2.balance Asc LIMIT value",
                -4.357814788818359
            ],
            [
                "SELECT T1.name , * FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -4.661055088043213
            ],
            [
                "SELECT T1.name , T1.custid FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -5.2793869972229
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance - T2.balance Asc LIMIT value",
                -5.500629127025604
            ],
            [
                "SELECT T1.name , T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -7.353182375431061
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T3.balance Asc LIMIT value",
                -7.452217757701874
            ],
            [
                "SELECT T1.name , T3.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T2.balance - T2.balance Asc LIMIT value",
                -7.541317462921143
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T2.balance - T3.balance Asc LIMIT value",
                -8.129480302333832
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -8.428079605102539
            ],
            [
                "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -9.503812313079834
            ],
            [
                "SELECT T1.name , T3.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T2.balance - T3.balance Asc LIMIT value",
                -10.126943588256836
            ],
            [
                "SELECT T1.name , T2.custid FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T3.balance Asc LIMIT value",
                -10.424316883087158
            ],
            [
                "SELECT T1.name , * FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -10.94274091720581
            ],
            [
                "SELECT T1.name , T2.custid FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -10.99621868133545
            ],
            [
                "SELECT T1.name , T1.custid FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -11.897584438323975
            ],
            [
                "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
                -14.416523933410645
            ]
        ],
        "predicted_parse_with_values": "SELECT T1.name , T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT 1",
        "template_feedback": "in step 1 , additionally use the information from the checking table . in step 2 , additionally find checking 's balance .",
        "primary_span": [
            [
                4,
                12
            ],
            [
                17,
                22
            ]
        ],
        "secondary_span": [],
        "edits": [
            "balance",
            "name",
            "checking"
        ],
        "edits_original": "< select > add balance </ select > < select > remove name </ select > < from > add checking </ from >"
    },
    {
        "db_id": "formula_1",
        "question": "What are all the different first names of the drivers who are in position as standing and won?",
        "gold_parse": "SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1",
        "predicted_parse": "SELECT DISTINCT positionText FROM constructorStandings",
        "predicted_parse_explanation": [
            "find without repetition position text in constructor standings table"
        ],
        "feedback": "Find distinct constructor id of status whose status 's driver id present in constructor results and constructor id equals 1.",
        "beam": [
            [
                "SELECT DISTINCT T2.positionText FROM races AS T1 JOIN constructorStandings AS T2 ON T2.raceId = T1.raceId JOIN constructorResults AS T3 ON T1.raceId = T3.raceId WHERE T3.raceId = value",
                -1.518139362335205
            ],
            [
                "SELECT DISTINCT T1.positionText FROM constructorStandings AS T1 JOIN results AS T2 WHERE T2.fastestLap = value",
                -1.6807589530944824
            ],
            [
                "SELECT DISTINCT positionText FROM constructorStandings WHERE position = value",
                -1.7257580757141113
            ],
            [
                "SELECT DISTINCT T1.rank FROM results AS T1 JOIN constructorResults AS T2 WHERE T2.raceId = value",
                -2.4102087020874023
            ],
            [
                "SELECT DISTINCT rank FROM results WHERE fastestLap = value",
                -2.4263105392456055
            ],
            [
                "SELECT DISTINCT T2.rank FROM constructorStandings AS T1 JOIN results AS T2 WHERE T1.position = value",
                -2.5612993240356445
            ],
            [
                "SELECT DISTINCT T1.constructorRef FROM constructors AS T1 JOIN results AS T2 WHERE T2.fastestLap = value",
                -3.1668648719787598
            ],
            [
                "SELECT DISTINCT T1.constructorRef FROM constructors AS T1 JOIN constructorResults AS T2 ON T1.constructorId = T2.constructorId WHERE T2.raceId = value",
                -3.1940865516662598
            ],
            [
                "SELECT DISTINCT T1.constructorRef FROM constructors AS T1 JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId WHERE T2.position = value",
                -3.373352527618408
            ],
            [
                "SELECT DISTINCT T1.position FROM constructorStandings AS T1 JOIN results AS T2 WHERE T2.fastestLap = value",
                -4.853535175323486
            ],
            [
                "SELECT DISTINCT T2.position FROM races AS T1 JOIN constructorStandings AS T2 ON T2.raceId = T1.raceId JOIN constructorResults AS T3 ON T1.raceId = T3.raceId WHERE T3.raceId = value",
                -4.9100661277771
            ],
            [
                "SELECT DISTINCT fastestLap FROM results WHERE fastestLap = value",
                -5.396515369415283
            ],
            [
                "SELECT DISTINCT T1.fastestLap FROM results AS T1 JOIN constructorResults AS T2 WHERE T2.raceId = value",
                -5.410009860992432
            ],
            [
                "SELECT DISTINCT position FROM constructorStandings WHERE position = value",
                -5.468222141265869
            ],
            [
                "SELECT DISTINCT T2.fastestLap FROM constructorStandings AS T1 JOIN results AS T2 WHERE T1.position = value",
                -6.02156400680542
            ],
            [
                "SELECT DISTINCT T2.positionText FROM drivers AS T1 JOIN constructorStandings AS T2 ON T2.driverId = T1.driverId JOIN lapTimes AS T3 ON T1.driverId = T3.driverId WHERE T3.position = value",
                -6.829857349395752
            ],
            [
                "SELECT DISTINCT * FROM constructorResults WHERE raceId = value",
                -6.9089884757995605
            ],
            [
                "SELECT DISTINCT T1.positionText FROM constructorStandings AS T1 JOIN results AS T2 WHERE T1.position = value AND T2.fastestLap = value",
                -7.118942737579346
            ],
            [
                "SELECT DISTINCT positionText FROM constructorStandings",
                -8.402451515197754
            ],
            [
                "SELECT DISTINCT rank FROM results",
                -9.091641426086426
            ]
        ],
        "predicted_parse_with_values": "SELECT DISTINCT positionText FROM constructorStandings",
        "template_feedback": "use driver standings table and drivers table in place of constructor standings table . additionally make sure that driver standings 's wins equals 1 and driver standings 's position equals 1 . find forename in place of constructor standings 's position text .",
        "primary_span": [
            [
                0,
                6
            ],
            [
                14,
                31
            ],
            [
                32,
                33
            ]
        ],
        "secondary_span": [
            [
                7,
                13
            ],
            [
                34,
                42
            ]
        ],
        "edits": [
            "forename",
            "position text",
            "drivers",
            "driver standings",
            "constructor standings",
            "position equals 1",
            "wins equals 1"
        ],
        "edits_original": "< select > add forename </ select > < select > remove position text </ select > < from > add drivers </ from > < from > add driver standings </ from > < from > remove constructor standings </ from > < where > add position equals 1 </ where > < where > add wins equals 1 </ where >"
    },
    {
        "db_id": "formula_1",
        "question": "What are all the different first names of the drivers who are in position as standing and won?",
        "gold_parse": "SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1",
        "predicted_parse": "SELECT DISTINCT positionText FROM constructorStandings",
        "predicted_parse_explanation": [
            "find without repetition position text in constructor standings table"
        ],
        "feedback": "List the unique constructor id of status where constructor id is 1 and status id is from constructor result.",
        "beam": [
            [
                "SELECT DISTINCT T2.positionText FROM races AS T1 JOIN constructorStandings AS T2 ON T2.raceId = T1.raceId JOIN constructorResults AS T3 ON T1.raceId = T3.raceId WHERE T3.raceId = value",
                -1.518139362335205
            ],
            [
                "SELECT DISTINCT T1.positionText FROM constructorStandings AS T1 JOIN results AS T2 WHERE T2.fastestLap = value",
                -1.6807589530944824
            ],
            [
                "SELECT DISTINCT positionText FROM constructorStandings WHERE position = value",
                -1.7257580757141113
            ],
            [
                "SELECT DISTINCT T1.rank FROM results AS T1 JOIN constructorResults AS T2 WHERE T2.raceId = value",
                -2.4102087020874023
            ],
            [
                "SELECT DISTINCT rank FROM results WHERE fastestLap = value",
                -2.4263105392456055
            ],
            [
                "SELECT DISTINCT T2.rank FROM constructorStandings AS T1 JOIN results AS T2 WHERE T1.position = value",
                -2.5612993240356445
            ],
            [
                "SELECT DISTINCT T1.constructorRef FROM constructors AS T1 JOIN results AS T2 WHERE T2.fastestLap = value",
                -3.1668648719787598
            ],
            [
                "SELECT DISTINCT T1.constructorRef FROM constructors AS T1 JOIN constructorResults AS T2 ON T1.constructorId = T2.constructorId WHERE T2.raceId = value",
                -3.1940865516662598
            ],
            [
                "SELECT DISTINCT T1.constructorRef FROM constructors AS T1 JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId WHERE T2.position = value",
                -3.373352527618408
            ],
            [
                "SELECT DISTINCT T1.position FROM constructorStandings AS T1 JOIN results AS T2 WHERE T2.fastestLap = value",
                -4.853535175323486
            ],
            [
                "SELECT DISTINCT T2.position FROM races AS T1 JOIN constructorStandings AS T2 ON T2.raceId = T1.raceId JOIN constructorResults AS T3 ON T1.raceId = T3.raceId WHERE T3.raceId = value",
                -4.9100661277771
            ],
            [
                "SELECT DISTINCT fastestLap FROM results WHERE fastestLap = value",
                -5.396515369415283
            ],
            [
                "SELECT DISTINCT T1.fastestLap FROM results AS T1 JOIN constructorResults AS T2 WHERE T2.raceId = value",
                -5.410009860992432
            ],
            [
                "SELECT DISTINCT position FROM constructorStandings WHERE position = value",
                -5.468222141265869
            ],
            [
                "SELECT DISTINCT T2.fastestLap FROM constructorStandings AS T1 JOIN results AS T2 WHERE T1.position = value",
                -6.02156400680542
            ],
            [
                "SELECT DISTINCT T2.positionText FROM drivers AS T1 JOIN constructorStandings AS T2 ON T2.driverId = T1.driverId JOIN lapTimes AS T3 ON T1.driverId = T3.driverId WHERE T3.position = value",
                -6.829857349395752
            ],
            [
                "SELECT DISTINCT * FROM constructorResults WHERE raceId = value",
                -6.9089884757995605
            ],
            [
                "SELECT DISTINCT T1.positionText FROM constructorStandings AS T1 JOIN results AS T2 WHERE T1.position = value AND T2.fastestLap = value",
                -7.118942737579346
            ],
            [
                "SELECT DISTINCT positionText FROM constructorStandings",
                -8.402451515197754
            ],
            [
                "SELECT DISTINCT rank FROM results",
                -9.091641426086426
            ]
        ],
        "predicted_parse_with_values": "SELECT DISTINCT positionText FROM constructorStandings",
        "template_feedback": "use driver standings table and drivers table in place of constructor standings table . additionally make sure that driver standings 's wins equals 1 and driver standings 's position equals 1 . find forename in place of constructor standings 's position text .",
        "primary_span": [
            [
                0,
                6
            ],
            [
                14,
                31
            ],
            [
                32,
                33
            ]
        ],
        "secondary_span": [
            [
                7,
                13
            ],
            [
                34,
                42
            ]
        ],
        "edits": [
            "forename",
            "position text",
            "drivers",
            "driver standings",
            "constructor standings",
            "position equals 1",
            "wins equals 1"
        ],
        "edits_original": "< select > add forename </ select > < select > remove position text </ select > < from > add drivers </ from > < from > add driver standings </ from > < from > remove constructor standings </ from > < where > add position equals 1 </ where > < where > add wins equals 1 </ where >"
    },
    {
        "db_id": "flight_1",
        "question": "What is the aircraft name for the flight with number 99",
        "gold_parse": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T1.flno  =  99",
        "predicted_parse": "SELECT name FROM aircraft WHERE name LIKE value",
        "predicted_parse_explanation": [
            "find the name in aircraft table whose name like 99"
        ],
        "feedback": "Swap name contains 99\" with \"corresponding flight 's flight number equals 99\".",
        "beam": [
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.flno LIKE value",
                -0.9508168697357178
            ],
            [
                "SELECT name FROM aircraft WHERE name LIKE value",
                -1.3292386531829834
            ],
            [
                "SELECT name FROM aircraft WHERE distance LIKE value",
                -2.155926465988159
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.distance LIKE value",
                -2.274968147277832
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.price LIKE value",
                -2.355952262878418
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.origin LIKE value",
                -4.444389343261719
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.destination LIKE value",
                -4.685557842254639
            ],
            [
                "SELECT name FROM aircraft WHERE distance < value",
                -5.6893744468688965
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.arrival_date LIKE value",
                -5.833626747131348
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.flno < value",
                -6.162762403488159
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.price < value",
                -6.502349853515625
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.departure_date LIKE value",
                -6.559803009033203
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.distance < value",
                -7.177235841751099
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.flno = value",
                -7.754368305206299
            ],
            [
                "SELECT name FROM aircraft WHERE * LIKE value",
                -7.815722465515137
            ],
            [
                "SELECT name FROM aircraft WHERE distance = value",
                -8.238147735595703
            ],
            [
                "SELECT T1.name FROM aircraft AS T1 JOIN employee AS T2 JOIN certificate AS T3 ON T1.aid = T3.aid AND T3.eid = T2.eid WHERE T2.salary LIKE value",
                -8.374778747558594
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.arrival_date < value",
                -8.87449598312378
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.aid LIKE value",
                -9.048652648925781
            ],
            [
                "SELECT name FROM aircraft",
                -12.28316593170166
            ]
        ],
        "predicted_parse_with_values": "SELECT name FROM aircraft WHERE name LIKE 99",
        "template_feedback": "additionally use the information from the flight table besides the aircraft table . consider the flight number equals 99 conditions in place of the name like 99 conditions .",
        "primary_span": [
            [
                0,
                7
            ],
            [
                13,
                19
            ]
        ],
        "secondary_span": [
            [
                8,
                12
            ],
            [
                20,
                28
            ]
        ],
        "edits": [
            "flight",
            "flight number equals 99",
            "name like 99"
        ],
        "edits_original": "< from > add flight </ from > < where > add flight number equals 99 </ where > < where > remove name like 99 </ where >"
    },
    {
        "db_id": "flight_1",
        "question": "What is the aircraft name for the flight with number 99",
        "gold_parse": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T1.flno  =  99",
        "predicted_parse": "SELECT name FROM aircraft WHERE name LIKE value",
        "predicted_parse_explanation": [
            "find the name in aircraft table whose name like 99"
        ],
        "feedback": "You should use number of flight equivalent to 99 by swapping it with name which includes 99.",
        "beam": [
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.flno LIKE value",
                -0.9508168697357178
            ],
            [
                "SELECT name FROM aircraft WHERE name LIKE value",
                -1.3292386531829834
            ],
            [
                "SELECT name FROM aircraft WHERE distance LIKE value",
                -2.155926465988159
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.distance LIKE value",
                -2.274968147277832
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.price LIKE value",
                -2.355952262878418
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.origin LIKE value",
                -4.444389343261719
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.destination LIKE value",
                -4.685557842254639
            ],
            [
                "SELECT name FROM aircraft WHERE distance < value",
                -5.6893744468688965
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.arrival_date LIKE value",
                -5.833626747131348
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.flno < value",
                -6.162762403488159
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.price < value",
                -6.502349853515625
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.departure_date LIKE value",
                -6.559803009033203
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.distance < value",
                -7.177235841751099
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.flno = value",
                -7.754368305206299
            ],
            [
                "SELECT name FROM aircraft WHERE * LIKE value",
                -7.815722465515137
            ],
            [
                "SELECT name FROM aircraft WHERE distance = value",
                -8.238147735595703
            ],
            [
                "SELECT T1.name FROM aircraft AS T1 JOIN employee AS T2 JOIN certificate AS T3 ON T1.aid = T3.aid AND T3.eid = T2.eid WHERE T2.salary LIKE value",
                -8.374778747558594
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.arrival_date < value",
                -8.87449598312378
            ],
            [
                "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.aid LIKE value",
                -9.048652648925781
            ],
            [
                "SELECT name FROM aircraft",
                -12.28316593170166
            ]
        ],
        "predicted_parse_with_values": "SELECT name FROM aircraft WHERE name LIKE 99",
        "template_feedback": "additionally use the information from the flight table besides the aircraft table . consider the flight number equals 99 conditions in place of the name like 99 conditions .",
        "primary_span": [
            [
                0,
                7
            ],
            [
                13,
                19
            ]
        ],
        "secondary_span": [
            [
                8,
                12
            ],
            [
                20,
                28
            ]
        ],
        "edits": [
            "flight",
            "flight number equals 99",
            "name like 99"
        ],
        "edits_original": "< from > add flight </ from > < where > add flight number equals 99 </ where > < where > remove name like 99 </ where >"
    }
]