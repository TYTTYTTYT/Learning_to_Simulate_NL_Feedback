[
    {
        "question": "Which parties did not have any delegates in elections ?",
        "db_id": "election",
        "gold_parse": "SELECT Party FROM party WHERE Party_ID NOT IN (SELECT Party FROM election)",
        "predicted_parse_with_values": "select Party from party where Party_ID not in ( select Party_ID from party )"
    },
    {
        "question": "what are the states that border the state with the greatest population",
        "db_id": "geo",
        "gold_parse": "SELECT border FROM border_info WHERE state_name  =  ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state ) )",
        "predicted_parse_with_values": "select T1.border from border_info as T1 join state as T2 on T1.border = T2.state_name order by T2.population desc limit 1"
    },
    {
        "question": "How many female actors were born in \" New York City \" after 1980 ?",
        "db_id": "imdb",
        "gold_parse": "SELECT COUNT ( DISTINCT name  ) FROM actor WHERE birth_city  =  \"New York City\" AND birth_year  >  1980 AND gender  =  \"female\"",
        "predicted_parse_with_values": "select count ( * ) from actor where birth_city = \"dummy value\" and birth_year > \"dummy value\""
    },
    {
        "question": "what is the smallest city in alaska",
        "db_id": "geo",
        "gold_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MIN ( population ) FROM city WHERE state_name  =  \"alaska\" ) AND state_name  =  \"alaska\"",
        "predicted_parse_with_values": "select city_name from city where state_name = \"dummy value\" order by population limit 1"
    },
    {
        "question": "how many cities are there in usa",
        "db_id": "geo",
        "gold_parse": "SELECT COUNT ( city_name ) FROM city",
        "predicted_parse_with_values": "select count ( * ) from city as T1 join state as T2 on T1.state_name = T2.state_name where T2.country_name = \"dummy value\""
    },
    {
        "question": "What is the first name of the student whose last name starts with the letter S and is taking ACCT-211 ?",
        "db_id": "college_1",
        "gold_parse": "SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code WHERE T3.crs_code  =  'ACCT-211' AND T1.stu_lname LIKE 'S%'",
        "predicted_parse_with_values": "select STU_FNAME from STUDENT where STU_LNAME like \"Brewer\" and STU_NUM = ( select max ( STU_NUM ) from STUDENT where STU_LNAME like \"Robertson\" )"
    },
    {
        "question": "what is the adjacent state of kentucky",
        "db_id": "geo",
        "gold_parse": "SELECT border FROM border_info WHERE state_name  =  \"kentucky\"",
        "predicted_parse_with_values": "select area from state where area = \"dummy value\""
    },
    {
        "question": "What are the minimum and maximum membership amounts for all branches that either opened in 2011 or are located in London ?",
        "db_id": "shop_membership",
        "gold_parse": "SELECT min(membership_amount) ,  max(membership_amount) FROM branch WHERE open_year  =  2011 OR city  =  'London'",
        "predicted_parse_with_values": "select min ( membership_amount ) , max ( membership_amount ) from branch where City = \"Oxford\" or Address_road = \"Concord Road\""
    },
    {
        "question": "Find the busiest source airport that runs most number of routes in China .",
        "db_id": "flight_4",
        "gold_parse": "SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid WHERE T1.country  =  'China' GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select T2.src_ap from airports as T1 join routes as T2 on T1.apid = T2.src_apid where T1.country = \"Germany\" group by T2.src_ap order by count ( * ) desc limit 1"
    },
    {
        "question": "What are the first names of student who only took one course ?",
        "db_id": "college_1",
        "gold_parse": "SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num GROUP BY T2.stu_num HAVING count(*)  =  1",
        "predicted_parse_with_values": "select STU_FNAME from STUDENT"
    },
    {
        "question": "What is the payment method of the customer that has purchased the least quantity of items ?",
        "db_id": "customers_and_addresses",
        "gold_parse": "SELECT t1.payment_method FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) LIMIT 1",
        "predicted_parse_with_values": "select T3.payment_method from Order_Items as T1 join Customer_Orders as T2 on T1.order_id = T2.order_id join Customers as T3 on T2.customer_id = T3.customer_id group by T3.payment_method order by sum ( T1.order_quantity ) desc limit 1"
    },
    {
        "question": "what is the biggest state in continental us",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state )",
        "predicted_parse_with_values": "select state_name from state where country_name = \"dummy value\" order by density desc limit 1"
    },
    {
        "question": "Count the number of products with the 'hot ' charactersitic .",
        "db_id": "products_gen_characteristics",
        "gold_parse": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t3.characteristic_name  =  \"hot\"",
        "predicted_parse_with_values": "select count ( * ) from Characteristics as T1 join Product_Characteristics as T2 on T1.characteristic_id = T2.characteristic_id join Products as T3 on T2.product_id = T3.product_id where T1.characteristic_name = \"error\""
    },
    {
        "question": "Show the member names which are in both the party with id 3 and the party with id 1 .",
        "db_id": "party_people",
        "gold_parse": "SELECT member_name FROM member WHERE party_id  =  3 INTERSECT SELECT member_name FROM member WHERE party_id  =  1",
        "predicted_parse_with_values": "select T2.Member_Name from party as T1 join member as T2 on T1.Party_ID = T2.Party_ID where T1.Party_ID = 4 intersect select Member_Name from member where Party_ID = 1"
    },
    {
        "question": "What are the hometowns that are shared by at least two gymnasts ?",
        "db_id": "gymnast",
        "gold_parse": "SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown HAVING COUNT(*)  >=  2",
        "predicted_parse_with_values": "select T2.Hometown from gymnast as T1 join people as T2 on T1.Gymnast_ID = T2.People_ID group by T2.Hometown having count ( * ) >= 1"
    },
    {
        "question": "what is the combined population of all 50 states",
        "db_id": "geo",
        "gold_parse": "SELECT SUM ( population ) FROM state",
        "predicted_parse_with_values": "select sum ( T2.population ) from city as T1 join state as T2 on T1.state_name = T2.state_name where T1.country_name = \"dummy value\""
    },
    {
        "question": "Show me the departure date and arrival date for all flights from Los Angeles to Honolulu .",
        "db_id": "flight_1",
        "gold_parse": "SELECT departure_date ,  arrival_date FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\"",
        "predicted_parse_with_values": "select departure_date , arrival_date from flight where destination = \"Los Angeles\" and destination = \"New York\""
    },
    {
        "question": "which us city has the highest population density",
        "db_id": "geo",
        "gold_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city )",
        "predicted_parse_with_values": "select T1.city_name from city as T1 join state as T2 on T1.state_name = T2.state_name where T2.country_name = \"dummy value\" order by T2.density desc limit 1"
    },
    {
        "question": "How many exhibitions has each artist had ?",
        "db_id": "theme_gallery",
        "gold_parse": "SELECT T2.name ,  count(*) FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id GROUP BY T1.artist_id",
        "predicted_parse_with_values": "select count ( * ) , Name from artist group by Name"
    },
    {
        "question": "Count the number of clubs for which the student named \" Eric Tai \" is a member .",
        "db_id": "club_1",
        "gold_parse": "SELECT count(DISTINCT t1.clubname) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Eric\" AND t3.lname  =  \"Tai\"",
        "predicted_parse_with_values": "select count ( * ) from Student where Fname = \"Sarah\""
    },
    {
        "question": "Give the building that the instructor who teaches the greatest number of courses lives in .",
        "db_id": "college_3",
        "gold_parse": "SELECT T2.Building FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select Building from Faculty group by Building order by count ( * ) desc limit 1"
    },
    {
        "question": "How many dorms are there and what is the total capacity for each gender ?",
        "db_id": "dorm_1",
        "gold_parse": "SELECT count(*) ,  sum(student_capacity) ,  gender FROM dorm GROUP BY gender",
        "predicted_parse_with_values": "select gender , sum ( student_capacity ) from Dorm group by gender"
    },
    {
        "question": "What is the project id and detail for the project with at least two documents ?",
        "db_id": "cre_Docs_and_Epenses",
        "gold_parse": "SELECT T1.project_id ,  T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id HAVING count(*)  >  2",
        "predicted_parse_with_values": "select Project_ID , Project_Details from Projects group by Project_ID having count ( * ) >= 1"
    },
    {
        "question": "What is the id , name and nationality of the architect who built most mills ?",
        "db_id": "architecture",
        "gold_parse": "SELECT T1.id ,  T1.name ,  T1.nationality FROM architect AS T1 JOIN mill AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select T2.id , T1.name , T1.nationality from architect as T1 join mill as T2 on T1.id = T2.architect_id group by T2.id order by count ( * ) desc limit 1"
    },
    {
        "question": "What is the average price range of five star hotels that allow pets ?",
        "db_id": "cre_Theme_park",
        "gold_parse": "SELECT avg(price_range) FROM HOTELS WHERE star_rating_code  =  \"5\" AND pets_allowed_yn  =  1",
        "predicted_parse_with_values": "select avg ( price_range ) from Hotels where pets_allowed_yn = 1"
    },
    {
        "question": "What are the title and maximum price of each film ?",
        "db_id": "cinema",
        "gold_parse": "SELECT T2.title ,  max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id",
        "predicted_parse_with_values": "select T2.Title , T1.Price , max ( T1.Price ) from schedule as T1 join film as T2 on T1.Film_ID = T2.Film_ID group by T2.Film_ID"
    },
    {
        "question": "what is the density of wyoming",
        "db_id": "geo",
        "gold_parse": "SELECT density FROM state WHERE state_name  =  \"wyoming\"",
        "predicted_parse_with_values": "select density from state where area = \"dummy value\""
    },
    {
        "question": "return me the conferences , which have more than 10 papers by \" H. V. Jagadish \" .",
        "db_id": "academic",
        "gold_parse": "SELECT t2.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" GROUP BY t2.name HAVING COUNT ( DISTINCT t4.title )  >  10",
        "predicted_parse_with_values": "select T1.name from conference as T1 join publication as T2 on T1.cid = T2.cid join writes as T3 on T2.pid = T3.pid join author as T4 on T3.aid = T4.aid where T4.name = \"dummy value\" group by T1.name having count ( * ) > 1"
    },
    {
        "question": "Find all the films longer than 100 minutes , or rated PG , except those who cost more than 200 for replacement . List the titles .",
        "db_id": "sakila_1",
        "gold_parse": "SELECT title FROM film WHERE LENGTH  >  100 OR rating  =  'PG' EXCEPT SELECT title FROM film WHERE replacement_cost  >  200",
        "predicted_parse_with_values": "select title from film where replacement_cost > 29.99 except select title from film where rating > \"G\""
    },
    {
        "question": "What is the number of airports per country , ordered from most to least ?",
        "db_id": "flight_4",
        "gold_parse": "SELECT count(*) ,  country FROM airports GROUP BY country ORDER BY count(*) DESC",
        "predicted_parse_with_values": "select country from airports order by country asc"
    },
    {
        "question": "return me the papers by \" H. V. Jagadish \" on VLDB conference .",
        "db_id": "academic",
        "gold_parse": "SELECT t4.title FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" AND t2.name  =  \"VLDB\"",
        "predicted_parse_with_values": "select T2.title from conference as T1 join publication as T2 on T1.cid = T2.cid join writes as T3 on T2.pid = T3.pid join author as T4 on T3.aid = T4.aid where T1.name = \"dummy value\" and T4.name = \"dummy value\""
    },
    {
        "question": "rivers in illinois",
        "db_id": "geo",
        "gold_parse": "SELECT river_name FROM river WHERE traverse  =  \"illinois\"",
        "predicted_parse_with_values": "select T1.river_name from river as T1 join state as T2 on T1.traverse = T2.state_name join city as T3 on T2.state_name = T3.state_name where T3.state_name = \"dummy value\""
    },
    {
        "question": "Sort the each workshop in alphabetical order of the venue . Return the date and venue of each workshop .",
        "db_id": "workshop_paper",
        "gold_parse": "SELECT Date ,  Venue FROM workshop ORDER BY Venue",
        "predicted_parse_with_values": "select Date , Venue from workshop order by Date"
    },
    {
        "question": "through which states does the ohio flow",
        "db_id": "geo",
        "gold_parse": "SELECT traverse FROM river WHERE river_name  =  \"ohio\"",
        "predicted_parse_with_values": "select T2.state_name from river as T1 join state as T2 on T1.traverse = T2.state_name where T1.river_name = \"dummy value\""
    },
    {
        "question": "How many companies operates airlines in each airport ?",
        "db_id": "flight_company",
        "gold_parse": "SELECT T3.id ,  count(*) FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id JOIN airport AS T3 ON T2.airport_id  =  T3.id GROUP BY T3.id",
        "predicted_parse_with_values": "select count ( * ) , name from operate_company group by name"
    },
    {
        "question": "Show the players from college UCLA .",
        "db_id": "match_season",
        "gold_parse": "SELECT Player FROM match_season WHERE College  =  \"UCLA\"",
        "predicted_parse_with_values": "select T3.Player from match_season as T1 join team as T2 on T1.Team = T2.Team_id join player as T3 on T2.Team_id = T3.Team where T1.College = \"Furman\""
    },
    {
        "question": "What are the different names for each station that has ever had 7 bikes available ?",
        "db_id": "bike_1",
        "gold_parse": "SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  7",
        "predicted_parse_with_values": "select T1.name from station as T1 join status as T2 on T1.id = T2.station_id group by T2.station_id having count ( * ) >= 1"
    },
    {
        "question": "Sort all captain names by their ages from old to young .",
        "db_id": "ship_1",
        "gold_parse": "SELECT name FROM captain ORDER BY age DESC",
        "predicted_parse_with_values": "select Name from captain order by age asc"
    },
    {
        "question": "What is the total number of students enrolled in schools without any goalies ?",
        "db_id": "soccer_2",
        "gold_parse": "SELECT sum(enr) FROM college WHERE cName NOT IN (SELECT cName FROM tryout WHERE pPos  =  \"goalie\")",
        "predicted_parse_with_values": "select sum ( enr ) from College where enr < 12000"
    },
    {
        "question": "return me the journals , which have papers by \" H. V. Jagadish \" .",
        "db_id": "academic",
        "gold_parse": "SELECT t2.name FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\"",
        "predicted_parse_with_values": "select T1.name from journal as T1 join publication as T2 on T1.jid = T2.jid join writes as T3 on T2.pid = T3.pid join author as T4 on T3.aid = T4.aid where T4.name = \"dummy value\""
    },
    {
        "question": "what is the smallest state that the mississippi river runs through",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" ) ) AND state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" )",
        "predicted_parse_with_values": "select min ( T2.density ) from river as T1 join state as T2 on T1.traverse = T2.state_name where T1.river_name = \"dummy value\""
    },
    {
        "question": "what states have a city named springfield",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM city WHERE city_name  =  \"springfield\"",
        "predicted_parse_with_values": "select T2.state_name from city as T1 join state as T2 on T1.state_name = T2.state_name where T1.city_name = \"dummy value\""
    },
    {
        "question": "what state has the city with the most population",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city )",
        "predicted_parse_with_values": "select state_name from city order by population desc limit 1"
    },
    {
        "question": "Find all movies featuring \" Jason Robards \" and \" Woody Strode \"",
        "db_id": "imdb",
        "gold_parse": "SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid  =  t1.aid JOIN movie AS t4 ON t4.mid  =  t5.msid JOIN CAST AS t3 ON t4.mid  =  t3.msid JOIN actor AS t2 ON t3.aid  =  t2.aid WHERE t1.name  =  \"Woody Strode\" AND t2.name  =  \"Jason Robards\"",
        "predicted_parse_with_values": "select T2.title from actor as T1 join movie as T2 where T1.name = \"dummy value\" intersect select T4.title from actor as T3 join movie as T4 where T3.name = \"dummy value\""
    },
    {
        "question": "How much amount in total were claimed in the most recently created document ?",
        "db_id": "insurance_and_eClaims",
        "gold_parse": "SELECT sum(t1.amount_claimed) FROM claim_headers AS t1 JOIN claims_documents AS t2 ON t1.claim_header_id  =  t2.claim_id WHERE t2.created_date  =  (SELECT created_date FROM claims_documents ORDER BY created_date LIMIT 1)",
        "predicted_parse_with_values": "select sum ( Created_Date ) from Claims_Documents order by Created_Date desc limit 1"
    },
    {
        "question": "What student id corresponds to the oldest student ?",
        "db_id": "allergy_1",
        "gold_parse": "SELECT StuID FROM Student WHERE age  =  (SELECT max(age) FROM Student)",
        "predicted_parse_with_values": "select LName from Student order by Age desc limit 1"
    },
    {
        "question": "How many budget types do we have ?",
        "db_id": "cre_Docs_and_Epenses",
        "gold_parse": "SELECT count(*) FROM Ref_budget_codes",
        "predicted_parse_with_values": "select count ( Budget_Type_Code ) from Ref_Budget_Codes"
    },
    {
        "question": "What is the nationality of \" Kevin Spacey \" ?",
        "db_id": "imdb",
        "gold_parse": "SELECT nationality FROM director WHERE name  =  \"director_name0\"",
        "predicted_parse_with_values": "select nationality from actor where name = \"dummy value\""
    },
    {
        "question": "Find the name of the ship that is steered by the youngest captain .",
        "db_id": "ship_1",
        "gold_parse": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id ORDER BY t2.age LIMIT 1",
        "predicted_parse_with_values": "select T1.Name from Ship as T1 join captain as T2 on T1.Ship_ID = T2.Ship_ID order by T2.age desc limit 1"
    },
    {
        "question": "Which customer made the largest amount of claim in a single claim ? Return the customer details .",
        "db_id": "insurance_and_eClaims",
        "gold_parse": "SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_claimed  =  (SELECT max(amount_claimed) FROM claim_headers)",
        "predicted_parse_with_values": "select Customer_Details from Customers order by Customer_Details desc limit 1"
    },
    {
        "question": "return me the number of papers published on PVLDB before 2000 .",
        "db_id": "academic",
        "gold_parse": "SELECT COUNT ( DISTINCT t2.title ) FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" AND t2.year  <  2000",
        "predicted_parse_with_values": "select count ( T1.oid ) from organization as T1 join publication as T2 where T2.year < \"dummy value\" and T2.year < \"dummy value\""
    },
    {
        "question": "What are the names of the tourist attractions and the dates when the tourists named Vincent or Vivian visited there ?",
        "db_id": "cre_Theme_park",
        "gold_parse": "SELECT T1.Name ,  T3.Visit_Date FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Vincent\" OR T2.Tourist_Details  =  \"Vivian\"",
        "predicted_parse_with_values": "select T3.Name , T2.Visit_Date from Visitors as T1 join Visits as T2 on T1.Tourist_ID = T2.Tourist_ID join Tourist_Attractions as T3 on T2.Tourist_Attraction_ID = T3.Tourist_Attraction_ID where T1.Tourist_ID = 189 or T2.Visit_Date = \"1990-11-12 00:54:50\""
    },
    {
        "question": "Find the name and flag of ships that are not steered by any captain with Midshipman rank .",
        "db_id": "ship_1",
        "gold_parse": "SELECT name ,  flag FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain WHERE rank  =  'Midshipman')",
        "predicted_parse_with_values": "select Name , Flag from Ship except select T1.Name , T1.Flag from Ship as T1 join captain as T2 on T1.Ship_ID = T2.Ship_ID where T2.Rank = \"Midshipman\""
    },
    {
        "question": "What are the names of tourist attractions that can be reached by bus or is at address 254 Ottilie Junction ?",
        "db_id": "cre_Theme_park",
        "gold_parse": "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID  =  T2.Location_ID WHERE T1.Address  =  \"254 Ottilie Junction\" OR T2.How_to_Get_There  =  \"bus\"",
        "predicted_parse_with_values": "select T2.Name from Locations as T1 join Tourist_Attractions as T2 on T1.Location_ID = T2.Location_ID where T1.Address = \"959 Feest Glen Suite 523\" or T1.Address = \"770 Edd Lane Apt. 098\""
    },
    {
        "question": "Find the name and active date of the customer that use email as the contact channel .",
        "db_id": "customers_and_addresses",
        "gold_parse": "SELECT t1.customer_name ,  t2.active_from_date FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.channel_code  =  'Email'",
        "predicted_parse_with_values": "select T2.customer_name , T1.active_to_date from Customer_Contact_Channels as T1 join Customers as T2 on T1.customer_id = T2.customer_id where T1.channel_code like \"Fax\""
    },
    {
        "question": "return me the number of papers on PVLDB .",
        "db_id": "academic",
        "gold_parse": "SELECT COUNT ( DISTINCT t2.title ) FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\"",
        "predicted_parse_with_values": "select count ( T2.pid ) from organization as T1 join publication as T2 where T1.name = \"dummy value\""
    },
    {
        "question": "return me the papers written by \" H. V. Jagadish \" and \" Divesh Srivastava \" with the most number of citations .",
        "db_id": "academic",
        "gold_parse": "SELECT t5.title FROM writes AS t3 JOIN author AS t2 ON t3.aid  =  t2.aid JOIN publication AS t5 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t2.name  =  \"Divesh Srivastava\" AND t1.name  =  \"H. V. Jagadish\" ORDER BY t5.citation_num DESC LIMIT 1",
        "predicted_parse_with_values": "select T5.keyword , count ( T3.citation_num ) from author as T1 join writes as T2 on T1.aid = T2.aid join publication as T3 on T2.pid = T3.pid join publication_keyword as T4 on T3.pid = T4.pid join keyword as T5 on T4.kid = T5.kid join cite as T6 on T3.pid = T6.citing where T1.name = \"dummy value\" and T6.cited = \"dummy value\" group by T3.jid order by count ( * ) desc limit 1"
    },
    {
        "question": "What are the names of companies with revenue less than the lowest revenue of any manufacturer in Austin ?",
        "db_id": "manufactory_1",
        "gold_parse": "SELECT name FROM manufacturers WHERE revenue  <  (SELECT min(revenue) FROM manufacturers WHERE headquarter  =  'Austin')",
        "predicted_parse_with_values": "select T2.Name from Manufacturers as T1 join Products as T2 on T1.Code = T2.Manufacturer where T1.Revenue < ( select min ( Revenue ) from Manufacturers where Founder = \"James\" ) and Headquarter = \"Beijing\""
    },
    {
        "question": "return me the paper after 2000 with more than 200 citations .",
        "db_id": "academic",
        "gold_parse": "SELECT title FROM publication WHERE citation_num  >  200 AND YEAR  >  2000",
        "predicted_parse_with_values": "select title from publication where year > \"dummy value\" group by title"
    },
    {
        "question": "Tell me the first and last name of the student who has the most activities .",
        "db_id": "activity_1",
        "gold_parse": "SELECT T1.fname ,  T1.lname FROM Student AS T1 JOIN Participates_in AS T2 ON T1.StuID  =  T2.StuID GROUP BY T1.StuID ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select T2.Fname , T2.LName from Participates_in as T1 join Student as T2 on T1.stuid = T2.StuID group by T1.stuid order by count ( * ) desc limit 1"
    },
    {
        "question": "Find the unit of measurement and product category code of product named \" chervil \" .",
        "db_id": "products_gen_characteristics",
        "gold_parse": "SELECT t2.unit_of_measure ,  t2.product_category_code FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code WHERE t1.product_name  =  \"chervil\"",
        "predicted_parse_with_values": "select T1.unit_of_measure , T2.product_category_code from Ref_Product_Categories as T1 join Products as T2 on T1.product_category_code = T2.product_category_code where T2.product_name = \"chervil\""
    },
    {
        "question": "Who was the director of the movie Joy from 2015 ?",
        "db_id": "imdb",
        "gold_parse": "SELECT t2.name FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t3.release_year  =  2015 AND t3.title  =  \"Joy\"",
        "predicted_parse_with_values": "select name from director where birth_year = \"dummy value\" and birth_year = \"dummy value\""
    },
    {
        "question": "For each city , list their names in decreasing order by their highest station latitude .",
        "db_id": "bike_1",
        "gold_parse": "SELECT city FROM station GROUP BY city ORDER BY max(lat) DESC",
        "predicted_parse_with_values": "select city , order by lat desc from station"
    },
    {
        "question": "What is first names of the top 5 staff who have handled the greatest number of complaints ?",
        "db_id": "customer_complaints",
        "gold_parse": "SELECT t1.first_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id  =  t2.staff_id GROUP BY t2.staff_id ORDER BY count(*) LIMIT 5",
        "predicted_parse_with_values": "select T2.first_name from Complaints as T1 join Staff as T2 on T1.staff_id = T2.staff_id group by T1.staff_id order by count ( * ) desc limit 1"
    },
    {
        "question": "Find the name of the tryout players who are from the college with largest size .",
        "db_id": "soccer_2",
        "gold_parse": "SELECT T2.pName FROM  tryout AS T1 JOIN player AS T2 ON T1.pID  =  T2.pID WHERE T1.cName  =  (SELECT cName FROM college ORDER BY enr DESC LIMIT 1)",
        "predicted_parse_with_values": "select T3.pName from College as T1 join Tryout as T2 on T1.cName = T2.cName join Player as T3 on T2.pID = T3.pID order by T1.enr desc limit 1"
    },
    {
        "question": "List name , dates active , and number of deaths for all storms with at least 1 death .",
        "db_id": "storm_record",
        "gold_parse": "SELECT name ,  dates_active ,  number_deaths FROM storm WHERE number_deaths  >=  1",
        "predicted_parse_with_values": "select Name , Dates_active , Number_Deaths from storm"
    },
    {
        "question": "return me the number of papers written by \" H. V. Jagadish \" in each year .",
        "db_id": "academic",
        "gold_parse": "SELECT COUNT ( DISTINCT t3.title )  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.aid  =  t1.aid JOIN publication AS t3 ON t2.pid  =  t3.pid WHERE t1.name  =  \"H. V. Jagadish\" GROUP BY t3.year",
        "predicted_parse_with_values": "select count ( T1.year ) , T1.year from publication as T1 join cite as T2 on T1.pid = T2.citing where T2.cited = \"dummy value\" group by T1.year"
    },
    {
        "question": "what are the populations of states through which the mississippi runs",
        "db_id": "geo",
        "gold_parse": "SELECT population FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" )",
        "predicted_parse_with_values": "select T2.population from river as T1 join state as T2 on T1.traverse = T2.state_name where T1.river_name = \"dummy value\""
    },
    {
        "question": "List the date the claim was made , the date it was settled and the amount settled for all the claims which had exactly one settlement .",
        "db_id": "insurance_policies",
        "gold_parse": "SELECT T1.claim_id ,  T1.date_claim_made ,  T1.Date_Claim_Settled FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id GROUP BY T1.claim_id HAVING count(*)  =  1",
        "predicted_parse_with_values": "select Date_Claim_Made , Date_Claim_Settled from Claims group by Claim_ID having count ( * ) = 1"
    },
    {
        "question": "What are the country names , area and population which has both roller coasters with speed higher",
        "db_id": "roller_coaster",
        "gold_parse": "SELECT T1.name ,  T1.area ,  T1.population FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID WHERE T2.speed  >  60 INTERSECT SELECT T1.name ,  T1.area ,  T1.population FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID WHERE T2.speed  <  55",
        "predicted_parse_with_values": "select T1.Name , T1.Area , T1.Population from country as T1 join roller_coaster as T2 on T1.Country_ID = T2.Country_ID where T2.Speed > 57 intersect select Name , Population from country"
    },
    {
        "question": "Show the names of people and the number of times they have been on the affirmative side of debates .",
        "db_id": "debate",
        "gold_parse": "SELECT T2.Name ,  COUNT(*) FROM debate_people AS T1 JOIN people AS T2 ON T1.Affirmative  =  T2.People_ID GROUP BY T2.Name",
        "predicted_parse_with_values": "select T1.Name , count ( * ) from people as T1 join debate_people as T2 on T1.People_ID = T2.Negative where debate_T1.Affirmative = 1 group by T1.Name"
    },
    {
        "question": "what is the largest state in the us",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state )",
        "predicted_parse_with_values": "select T2.state_name from city as T1 join state as T2 on T1.state_name = T2.state_name where T1.country_name = \"dummy value\" order by T2.density desc limit 1"
    },
    {
        "question": "Which claim processing stage has the most claims ? Show the claim status name .",
        "db_id": "insurance_and_eClaims",
        "gold_parse": "SELECT t2.claim_status_name FROM claims_processing AS t1 JOIN claims_processing_stages AS t2 ON t1.claim_stage_id  =  t2.claim_stage_id GROUP BY t1.claim_stage_id ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select Claim_Status_Name from Claims_Processing_Stages group by Claim_Status_Name order by count ( * ) desc limit 1"
    },
    {
        "question": "Return the phone numbers for all customers and suppliers .",
        "db_id": "department_store",
        "gold_parse": "SELECT customer_phone FROM customers UNION SELECT supplier_phone FROM suppliers",
        "predicted_parse_with_values": "select customer_phone from Customers union select supplier_name from Suppliers"
    },
    {
        "question": "Find the number of routes that have destination John F Kennedy International Airport .",
        "db_id": "flight_4",
        "gold_parse": "SELECT count(*) FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE T1.name  =  'John F Kennedy International Airport'",
        "predicted_parse_with_values": "select count ( rid ) from routes where dst_ap = \"A\""
    },
    {
        "question": "How many clubs does \" Linda Smith \" belong to ?",
        "db_id": "club_1",
        "gold_parse": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Linda\" AND t3.lname  =  \"Smith\"",
        "predicted_parse_with_values": "select count ( * ) from Student where Fname = \"Dinesh\""
    },
    {
        "question": "What is the name of the youngest editor ?",
        "db_id": "journal_committee",
        "gold_parse": "SELECT Name FROM editor ORDER BY Age ASC LIMIT 1",
        "predicted_parse_with_values": "select Name from editor order by Age limit 1"
    },
    {
        "question": "Find the number of members living in each address .",
        "db_id": "coffee_shop",
        "gold_parse": "SELECT count(*) ,  address FROM member GROUP BY address",
        "predicted_parse_with_values": "select Address , count ( * ) from member group by Address"
    },
    {
        "question": "How many papers have \" Atsushi Ohori \" published ?",
        "db_id": "icfp_1",
        "gold_parse": "SELECT count(*) FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Atsushi\" AND t1.lname  =  \"Ohori\"",
        "predicted_parse_with_values": "select count ( * ) from Authors as T1 join Authorship as T2 on T1.authID = T2.authID join Papers as T3 on T2.paperID = T3.paperID where T1.fname = \"Ralf\""
    },
    {
        "question": "What is the name of the activity that has the most faculty members involved in ?",
        "db_id": "activity_1",
        "gold_parse": "SELECT T1.activity_name FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select activity_name from Activity group by activity_name order by count ( * ) desc limit 1"
    },
    {
        "question": "List players ' first name and last name who have weight greater than 220 or height shorter than 75 .",
        "db_id": "baseball_1",
        "gold_parse": "SELECT name_first ,  name_last FROM player WHERE weight  >  220 OR height  <  75",
        "predicted_parse_with_values": "select name_first , name_last from player group by name_first having count ( * ) > 1 or count ( * ) > 1 or count ( * ) > 1"
    },
    {
        "question": "how long is the rio grande river in miles",
        "db_id": "geo",
        "gold_parse": "SELECT LENGTH FROM river WHERE river_name  =  \"rio grande\"",
        "predicted_parse_with_values": "select T1.length from river as T1 join lake as T2 where T1.river_name = \"dummy value\" and T2.area = \"dummy value\""
    },
    {
        "question": "Find the name , checking balance and saving balance of all accounts in the bank .",
        "db_id": "small_bank_1",
        "gold_parse": "SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid",
        "predicted_parse_with_values": "select T2.name , T1.balance , T3.balance from SAVINGS as T1 join ACCOUNTS as T2 on T1.custid = T2.custid join CHECKING as T3 on T2.custid = T3.custid"
    },
    {
        "question": "Show ids of students who play video game and play sports .",
        "db_id": "game_1",
        "gold_parse": "SELECT StuID FROM Sportsinfo INTERSECT SELECT StuID FROM Plays_games",
        "predicted_parse_with_values": "select StuID from Plays_Games intersect select StuID from Plays_Games"
    },
    {
        "question": "For each college , return the college name and the count of authors with submissions from that college .",
        "db_id": "workshop_paper",
        "gold_parse": "SELECT College ,  COUNT(*) FROM submission GROUP BY College",
        "predicted_parse_with_values": "select College , count ( * ) from submission group by College"
    },
    {
        "question": "what are the neighboring states for kentucky",
        "db_id": "geo",
        "gold_parse": "SELECT border FROM border_info WHERE state_name  =  \"kentucky\"",
        "predicted_parse_with_values": "select T1.state_name from border_info as T1 join state as T2 on T1.border = T2.state_name where T2.area like \"dummy value\""
    },
    {
        "question": "Show total hours per week and number of games played for student David Shieber .",
        "db_id": "game_1",
        "gold_parse": "SELECT sum(hoursperweek) ,  sum(gamesplayed) FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.Fname  =  \"David\" AND T2.Lname  =  \"Shieber\"",
        "predicted_parse_with_values": "select sum ( T2.Hours_Played ) , sum ( T2.Hours_Played ) from Student as T1 join Plays_Games as T2 on T1.StuID = T2.StuID where T1.Fname = \"David\" and T1.LName = \"Apap\""
    },
    {
        "question": "what is the area of new mexico in square kilometers",
        "db_id": "geo",
        "gold_parse": "SELECT area FROM state WHERE state_name  =  \"new mexico\"",
        "predicted_parse_with_values": "select T2.area from border_info as T1 join state as T2 on T1.border = T2.state_name where T1.state_name = \"dummy value\" and T2.density = \"dummy value\""
    },
    {
        "question": "return me the authors who have papers in VLDB conference before 2002 .",
        "db_id": "academic",
        "gold_parse": "SELECT t1.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"VLDB\" AND t4.year  <  2002",
        "predicted_parse_with_values": "select T3.pid from conference as T1 join publication as T2 on T1.cid = T2.cid join writes as T3 on T2.pid = T3.pid where T1.name = \"dummy value\" and T2.year < \"dummy value\""
    },
    {
        "question": "Find the average age and number of male students ( with sex M ) from each city .",
        "db_id": "dorm_1",
        "gold_parse": "SELECT count(*) ,  avg(age) ,  city_code FROM student WHERE sex  =  'M' GROUP BY city_code",
        "predicted_parse_with_values": "select avg ( Age ) , city_code from Student where Sex = \"F\" group by city_code"
    },
    {
        "question": "return me the paper in VLDB conference with more than 200 citations .",
        "db_id": "academic",
        "gold_parse": "SELECT t2.title FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" AND t2.citation_num  >  200",
        "predicted_parse_with_values": "select T2.jid from conference as T1 join publication as T2 on T1.cid = T2.cid where T1.name = \"dummy value\" group by T2.jid having count ( T1.name ) > 1"
    },
    {
        "question": "Find the names of products that were bought by at least two distinct customers .",
        "db_id": "department_store",
        "gold_parse": "SELECT DISTINCT T3.product_name FROM customer_orders AS T1 JOIN order_items AS T2 ON T1.order_id  =  T2.order_id JOIN products AS T3 ON T2.product_id  =  T3.product_id GROUP BY T3.product_id HAVING COUNT (DISTINCT T1.customer_id)  >=  2",
        "predicted_parse_with_values": "select T1.product_name from Products as T1 join Order_Items as T2 on T1.product_id = T2.product_id group by T2.product_id having count ( * ) >= 1"
    },
    {
        "question": "Return the average and minimum age of captains in each class .",
        "db_id": "ship_1",
        "gold_parse": "SELECT avg(age) ,  min(age) ,  CLASS FROM captain GROUP BY CLASS",
        "predicted_parse_with_values": "select Class , avg ( age ) , min ( age ) from captain group by Class"
    },
    {
        "question": "which state has the highest elevation",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM highlow WHERE highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow )",
        "predicted_parse_with_values": "select T1.state_name from state as T1 join highlow as T2 on T1.state_name = T2.state_name order by T2.highest_elevation desc limit 1"
    },
    {
        "question": "What are the statement id and statement detail for the statement that has the most corresponding accounts ?",
        "db_id": "cre_Docs_and_Epenses",
        "gold_parse": "SELECT T1.statement_id ,  T2.statement_details FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id  =  T2.statement_id GROUP BY T1.statement_id ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select Statement_ID , Statement_Details from Statements group by Statement_ID order by count ( * ) desc limit 1"
    },
    {
        "question": "Find the number of activities Mark Giuliano is involved in .",
        "db_id": "activity_1",
        "gold_parse": "SELECT count(*) FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID WHERE T1.fname  =  \"Mark\" AND T1.lname  =  \"Giuliano\"",
        "predicted_parse_with_values": "select count ( * ) from Student where Fname = \"Arthur\" and LName = \"Simms\""
    },
    {
        "question": "Return the channel code and contact number of the customer contact channel whose active duration was the longest .",
        "db_id": "customers_and_addresses",
        "gold_parse": "SELECT channel_code ,  contact_number FROM customer_contact_channels WHERE active_to_date - active_from_date  =  (SELECT active_to_date - active_from_date FROM customer_contact_channels ORDER BY (active_to_date - active_from_date) DESC LIMIT 1)",
        "predicted_parse_with_values": "select channel_code , contact_number from Customer_Contact_Channels order by active_from_date desc limit 1"
    },
    {
        "question": "how many states border on the state whose capital is boston",
        "db_id": "geo",
        "gold_parse": "SELECT COUNT ( border ) FROM border_info WHERE state_name  =  ( SELECT state_name FROM state WHERE capital  =  \"boston\" )",
        "predicted_parse_with_values": "select count ( * ) from state where capital = \"dummy value\""
    },
    {
        "question": "What are the ids of all songs that are available on mp4 or have a higher resolution than 720 ?",
        "db_id": "music_1",
        "gold_parse": "SELECT f_id FROM files WHERE formats  =  \"mp4\" UNION SELECT f_id FROM song WHERE resolution  >  720",
        "predicted_parse_with_values": "select f_id from song where resolution = 720 or resolution > 320"
    },
    {
        "question": "Find the checking balance of the accounts whose savings balance is higher than the average savings balance .",
        "db_id": "small_bank_1",
        "gold_parse": "SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name IN (SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM savings))",
        "predicted_parse_with_values": "select T1.balance from SAVINGS as T1 join ACCOUNTS as T2 on T1.custid = T2.custid join CHECKING as T3 on T2.custid = T3.custid where T3.balance > ( select avg ( balance ) from CHECKING )"
    },
    {
        "question": "What are the names of different tracks , and how many races has each had ?",
        "db_id": "race_track",
        "gold_parse": "SELECT T2.name ,  count(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id",
        "predicted_parse_with_values": "select Name , count ( * ) from track group by Name"
    },
    {
        "question": "Who is the person that has no friend ?",
        "db_id": "network_2",
        "gold_parse": "SELECT name FROM person EXCEPT SELECT name FROM PersonFriend",
        "predicted_parse_with_values": "select name from Person where name not in ( select name from PersonFriend )"
    },
    {
        "question": "How many students are enrolled in some classes that are taught by an accounting professor ?",
        "db_id": "college_1",
        "gold_parse": "SELECT count(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN department AS T4 ON T3.dept_code  =  T4.dept_code WHERE T4.dept_name  =  'Accounting'",
        "predicted_parse_with_values": "select count ( * ) from PROFESSOR where PROF_EXTENSION = 8665"
    },
    {
        "question": "return me the papers on PVLDB after 2000 .",
        "db_id": "academic",
        "gold_parse": "SELECT t2.title FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" AND t2.year  >  2000",
        "predicted_parse_with_values": "select T2.title from organization as T1 join publication as T2 where T1.name = \"dummy value\" and T2.year > \"dummy value\""
    },
    {
        "question": "What are the ranks of captains that are both in the Cutter and Armed schooner classes ?",
        "db_id": "ship_1",
        "gold_parse": "SELECT rank FROM captain WHERE CLASS  =  'Cutter' INTERSECT SELECT rank FROM captain WHERE CLASS  =  'Armed schooner'",
        "predicted_parse_with_values": "select T2.Rank from Ship as T1 join captain as T2 on T1.Ship_ID = T2.Ship_ID where T1.Type = \"Panamax\" intersect select T4.Rank from Ship as T3 join captain as T4 on T3.Ship_ID = T4.Ship_ID where T3.Type = \"Panamax\""
    },
    {
        "question": "List the names of all left-footed players who have overall rating between 85 and 90 .",
        "db_id": "soccer_1",
        "gold_parse": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.preferred_foot  =  \"left\" AND T2.overall_rating  >=  85 AND T2.overall_rating  <=  90",
        "predicted_parse_with_values": "select T1.player_name from Player as T1 join Player_Attributes as T2 on T1.player_api_id = T2.player_api_id where T2.overall_rating between 93 and value"
    },
    {
        "question": "how many cities does the usa have",
        "db_id": "geo",
        "gold_parse": "SELECT COUNT ( city_name ) FROM city",
        "predicted_parse_with_values": "select count ( * ) from city as T1 join state as T2 on T1.state_name = T2.state_name where T2.country_name = \"dummy value\""
    },
    {
        "question": "what is the shortest river in the united states",
        "db_id": "geo",
        "gold_parse": "SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MIN ( LENGTH ) FROM river )",
        "predicted_parse_with_values": "select river_name from river where length = \"dummy value\" order by length limit 1"
    },
    {
        "question": "Find the id of routes whose source and destination airports are in the United States .",
        "db_id": "flight_4",
        "gold_parse": "SELECT rid FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'United States') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')",
        "predicted_parse_with_values": "select rid , dst_apid from routes where src_ap = \"TTQ\""
    },
    {
        "question": "what are the populations of the states through which the mississippi river runs",
        "db_id": "geo",
        "gold_parse": "SELECT population FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" )",
        "predicted_parse_with_values": "select T2.population from river as T1 join state as T2 on T1.traverse = T2.state_name where T1.river_name = \"dummy value\""
    },
    {
        "question": "What are the days that had the smallest temperature range , and what was that range ?",
        "db_id": "bike_1",
        "gold_parse": "SELECT date ,  max_temperature_f - min_temperature_f FROM weather ORDER BY max_temperature_f - min_temperature_f LIMIT 1",
        "predicted_parse_with_values": "select T2.time , T1.mean_temperature_f from weather as T1 join status as T2 order by T1.mean_temperature_f limit 1"
    },
    {
        "question": "what rivers flow through states that alabama borders",
        "db_id": "geo",
        "gold_parse": "SELECT river_name FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name  =  \"alabama\" )",
        "predicted_parse_with_values": "select T1.river_name from river as T1 join state as T2 on T1.traverse = T2.state_name join border_info as T3 on T2.state_name = T3.border where T3.border = \"dummy value\""
    },
    {
        "question": "What are the cities that have a branch that opened in 2001 and a branch with more than 100 members ?",
        "db_id": "shop_membership",
        "gold_parse": "SELECT city FROM branch WHERE open_year  =  2001 AND membership_amount  >  100",
        "predicted_parse_with_values": "select City from branch where Open_year = 2014 and Open_year > 2001"
    },
    {
        "question": "What is the salaray and name of the employee that is certified to fly the most planes ?",
        "db_id": "flight_1",
        "gold_parse": "SELECT T1.name ,  T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select T2.name , T2.name from certificate as T1 join employee as T2 on T1.eid = T2.eid group by T1.eid order by count ( * ) desc limit 1"
    },
    {
        "question": "Who is the advisor of student with ID 1004 ?",
        "db_id": "allergy_1",
        "gold_parse": "SELECT Advisor FROM Student WHERE StuID  =  1004",
        "predicted_parse_with_values": "select Advisor from Student where city_code = \"NAR\""
    },
    {
        "question": "what city in the united states has the highest population density",
        "db_id": "geo",
        "gold_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city )",
        "predicted_parse_with_values": "select T1.city_name from city as T1 join state as T2 on T1.state_name = T2.state_name where T1.state_name = \"dummy value\" order by T2.density desc limit 1"
    },
    {
        "question": "What are the names , checking balances , and savings balances for all customers ?",
        "db_id": "small_bank_1",
        "gold_parse": "SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid",
        "predicted_parse_with_values": "select T2.name , T1.balance , T1.balance from SAVINGS as T1 join ACCOUNTS as T2 on T1.custid = T2.custid"
    },
    {
        "question": "Which contact channel has been used by the customer with name \" Tillman Ernser \" ?",
        "db_id": "customers_and_addresses",
        "gold_parse": "SELECT DISTINCT channel_code FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Tillman Ernser\"",
        "predicted_parse_with_values": "select T1.channel_code from Customer_Contact_Channels as T1 join Customers as T2 on T1.customer_id = T2.customer_id where T2.customer_name = \"Alexane Kilback\""
    },
    {
        "question": "How many female Professors do we have ?",
        "db_id": "activity_1",
        "gold_parse": "SELECT count(*) FROM Faculty WHERE Sex  =  'F' AND Rank  =  \"Professor\"",
        "predicted_parse_with_values": "select count ( * ) from Faculty where Sex = \"M\" and Lname = \"Kosaraju\""
    },
    {
        "question": "What are the names of all the clubs starting with the oldest ?",
        "db_id": "sports_competition",
        "gold_parse": "SELECT name FROM club ORDER BY Start_year ASC",
        "predicted_parse_with_values": "select name from club order by Start_year desc limit 1"
    },
    {
        "question": "What is the maximum training hours for the students whose training hours is greater than 1000 in different positions ?",
        "db_id": "soccer_2",
        "gold_parse": "SELECT max(T1.HS) ,  pPos FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T1.HS  >  1000 GROUP BY T2.pPos",
        "predicted_parse_with_values": "select max ( T2.HS ) , T1.pPos from Tryout as T1 join Player as T2 on T1.pID = T2.pID group by T1.pPos having sum ( T2.HS ) > 1"
    },
    {
        "question": "Return the hometown that is most common among gymnasts .",
        "db_id": "gymnast",
        "gold_parse": "SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown ORDER BY COUNT(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select T2.Hometown from gymnast as T1 join people as T2 on T1.Gymnast_ID = T2.People_ID group by T2.Hometown order by count ( * ) desc limit 1"
    },
    {
        "question": "return me the number of papers written by \" H. V. Jagadish \" and \" Divesh Srivastava \" before 2000 .",
        "db_id": "academic",
        "gold_parse": "SELECT COUNT ( DISTINCT t5.title ) FROM writes AS t3 JOIN author AS t2 ON t3.aid  =  t2.aid JOIN publication AS t5 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t2.name  =  \"H. V. Jagadish\" AND t1.name  =  \"Divesh Srivastava\" AND t5.year  <  2000",
        "predicted_parse_with_values": "select count ( T1.pid ) from writes as T1 join publication as T2 on T1.pid = T2.pid join cite as T3 on T2.pid = T3.citing where T3.cited = \"dummy value\" and T2.year < \"dummy value\""
    },
    {
        "question": "Show institution types , along with the number of institutions and total enrollment for each type .",
        "db_id": "protein_institute",
        "gold_parse": "SELECT TYPE ,  count(*) ,  sum(enrollment) FROM institution GROUP BY TYPE",
        "predicted_parse_with_values": "select Type , count ( * ) from Institution group by Type"
    },
    {
        "question": "What are the names of customers who have not taken a Mortage loan ?",
        "db_id": "loan_1",
        "gold_parse": "SELECT cust_name FROM customer EXCEPT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE T2.loan_type  =  'Mortgages'",
        "predicted_parse_with_values": "select cust_name from customer except select cust_name from customer where no_of_loans = 0"
    },
    {
        "question": "What is the first name of the professor who is teaching CIS-220 and QM-261 ?",
        "db_id": "college_1",
        "gold_parse": "SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num  =  T2.prof_num WHERE crs_code  =  'CIS-220' INTERSECT SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num  =  T2.prof_num WHERE crs_code  =  'QM-261'",
        "predicted_parse_with_values": "select DEPT_CODE from PROFESSOR where DEPT_CODE = \"ACCT\" intersect select T1.EMP_FNAME from EMPLOYEE as T1 join PROFESSOR as T2 on T1.EMP_NUM = T2.EMP_NUM where T2.DEPT_CODE = \"MATH\""
    },
    {
        "question": "Show the names for all females from Canada having a wedding in year 2016 .",
        "db_id": "wedding",
        "gold_parse": "SELECT T2.name FROM wedding AS T1 JOIN people AS T2 ON T1.female_id  =  T2.people_id WHERE T1.year  =  2016 AND T2.is_male  =  'F' AND T2.country  =  'Canada'",
        "predicted_parse_with_values": "select T1.Name from people as T1 join wedding as T2 on T1.People_ID = T2.Female_ID where T2.Year = 2015 and T2.Year = 2014"
    },
    {
        "question": "How many customers have at least one order with status \" Cancelled \" ?",
        "db_id": "customers_and_addresses",
        "gold_parse": "SELECT count(DISTINCT customer_id) FROM customer_orders WHERE order_status  =  \"Cancelled\"",
        "predicted_parse_with_values": "select count ( * ) from Customer_Orders as T1 join Customers as T2 on T1.customer_id = T2.customer_id where T1.order_status = \"Delivered\""
    },
    {
        "question": "For how many clubs is \" Tracy Kim \" a member ?",
        "db_id": "club_1",
        "gold_parse": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Tracy\" AND t3.lname  =  \"Kim\"",
        "predicted_parse_with_values": "select count ( * ) from Club where ClubName = \"Bootup Baltimore\""
    },
    {
        "question": "How many routes does American Airlines operate ?",
        "db_id": "flight_4",
        "gold_parse": "SELECT count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid WHERE T1.name  =  'American Airlines'",
        "predicted_parse_with_values": "select count ( * ) from routes where airline = \"BJ\""
    },
    {
        "question": "Find names of all students who took some course and the course description .",
        "db_id": "college_1",
        "gold_parse": "SELECT T1.stu_fname ,  T1.stu_lname ,  T4.crs_description FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code",
        "predicted_parse_with_values": "select T1.STU_FNAME , T3.CRS_DESCRIPTION from STUDENT as T1 join DEPARTMENT as T2 on T1.DEPT_CODE = T2.DEPT_CODE join COURSE as T3 on T2.DEPT_CODE = T3.DEPT_CODE"
    },
    {
        "question": "What are the first names of all students taking accoutning and Computer Information Systems classes ?",
        "db_id": "college_1",
        "gold_parse": "SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code JOIN department AS T5 ON T5.dept_code  =  T4.dept_code WHERE T5.dept_name  =  'Accounting' INTERSECT SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code JOIN department AS T5 ON T5.dept_code  =  T4.dept_code WHERE T5.dept_name  =  'Computer Info. Systems'",
        "predicted_parse_with_values": "select STU_FNAME from STUDENT where STU_CLASS = \"Sr\" intersect select STU_FNAME from STUDENT where STU_CLASS = \"Jr\""
    },
    {
        "question": "Find the name of companies whose revenue is smaller than the revenue of all companies based in Austin .",
        "db_id": "manufactory_1",
        "gold_parse": "SELECT name FROM manufacturers WHERE revenue  <  (SELECT min(revenue) FROM manufacturers WHERE headquarter  =  'Austin')",
        "predicted_parse_with_values": "select Name from Manufacturers where Revenue < ( select min ( Revenue ) from Manufacturers where Founder = \"Andy\" ) and Founder = \"Andy\""
    },
    {
        "question": "Find the first name and last name of the instructor of course that has course name",
        "db_id": "college_3",
        "gold_parse": "SELECT T2.Fname ,  T2.Lname FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID WHERE T1.CName  =  \"COMPUTER LITERACY\"",
        "predicted_parse_with_values": "select T1.Fname , T2.Instructor from Faculty as T1 join Course as T2 on T1.FacID = T2.Instructor"
    },
    {
        "question": "What are the different positions of players from UCLA or Duke colleges ?",
        "db_id": "match_season",
        "gold_parse": "SELECT DISTINCT POSITION FROM match_season WHERE College  =  \"UCLA\" OR College  =  \"Duke\"",
        "predicted_parse_with_values": "select T1.Position from match_season as T1 join team as T2 on T1.Team = T2.Team_id where T2.Name = \"Miami Fusion\" or T1.College = \"Concordia College\""
    },
    {
        "question": "What are the different names and ages of every friend of either Dan or alice ?",
        "db_id": "network_2",
        "gold_parse": "SELECT DISTINCT T1.name ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Dan' OR T2.friend  =  'Alice'",
        "predicted_parse_with_values": "select T2.name , T2.age from PersonFriend as T1 join Person as T2 on T1.friend = T2.name where T1.name = \"Zach\" or T1.name = \"Bob\""
    },
    {
        "question": "what is the river that cross over illinois",
        "db_id": "geo",
        "gold_parse": "SELECT river_name FROM river WHERE traverse  =  \"illinois\"",
        "predicted_parse_with_values": "select T1.river_name from river as T1 join state as T2 on T1.traverse = T2.state_name join border_info as T3 on T2.state_name = T3.border where T3.border = \"dummy value\""
    },
    {
        "question": "What is the customer id with most number of cards , and how many does he have ?",
        "db_id": "customers_card_transactions",
        "gold_parse": "SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select customer_id , count ( * ) from Customers_Cards group by customer_id order by count ( * ) desc limit 1"
    },
    {
        "question": "What is the first names of the professors from the history department who do not teach a class .",
        "db_id": "college_1",
        "gold_parse": "SELECT T1.emp_fname FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T2.dept_code  =  T3.dept_code WHERE T3.dept_name  =  'History' EXCEPT SELECT T4.emp_fname FROM employee AS T4 JOIN CLASS AS T5 ON T4.emp_num  =  T5.prof_num",
        "predicted_parse_with_values": "select T1.EMP_FNAME from EMPLOYEE as T1 join DEPARTMENT as T2 on T1.EMP_NUM = T2.EMP_NUM where T2.DEPT_NAME = \"Mathematics\" except select T3.EMP_FNAME from EMPLOYEE as T3 join DEPARTMENT as T4 on T3.EMP_NUM = T4.EMP_NUM where T4.DEPT_NAME = \"Accounting\""
    },
    {
        "question": "what are the cities in states through which the mississippi runs",
        "db_id": "geo",
        "gold_parse": "SELECT city_name FROM city WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" )",
        "predicted_parse_with_values": "select T2.capital from river as T1 join state as T2 on T1.traverse = T2.state_name where T1.river_name = \"dummy value\""
    },
    {
        "question": "For each headquarter , what are the headquarter and how many companies are centered there ?",
        "db_id": "gas_company",
        "gold_parse": "SELECT headquarters ,  count(*) FROM company GROUP BY headquarters",
        "predicted_parse_with_values": "select count ( * ) , Headquarters from company group by Headquarters"
    },
    {
        "question": "What are the papers published under the institution \" Indiana University \" ?",
        "db_id": "icfp_1",
        "gold_parse": "SELECT DISTINCT t1.title FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Indiana University\"",
        "predicted_parse_with_values": "select T3.paperID from Inst as T1 join Authorship as T2 on T1.instID = T2.instID join Papers as T3 on T2.paperID = T3.paperID where T1.name = \"Indiana University\""
    },
    {
        "question": "For each zip code , find the ids of all trips that have a higher average mean temperature above 60 ?",
        "db_id": "bike_1",
        "gold_parse": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60",
        "predicted_parse_with_values": "select T1.zip_code from trip as T1 join weather as T2 group by T2.zip_code having avg ( T2.mean_humidity ) > ( select avg ( mean_humidity ) from weather )"
    },
    {
        "question": "What countries are the female artists who sung in the language Bangla from ?",
        "db_id": "music_1",
        "gold_parse": "SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T1.gender  =  \"Female\" AND T2.languages  =  \"bangla\"",
        "predicted_parse_with_values": "select T1.country from song as T1 join artist as T2 on T1.artist_name = T2.artist_name where T2.gender = \"Male\""
    },
    {
        "question": "return me the papers after 2000 .",
        "db_id": "academic",
        "gold_parse": "SELECT title FROM publication WHERE YEAR  >  2000",
        "predicted_parse_with_values": "select title from publication where year > \"dummy value\""
    },
    {
        "question": "Find the papers which have \" Olin Shivers \" as an author .",
        "db_id": "icfp_1",
        "gold_parse": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t1.fname  =  \"Olin\" AND t1.lname  =  \"Shivers\"",
        "predicted_parse_with_values": "select T3.paperID from Authors as T1 join Authorship as T2 on T1.authID = T2.authID join Papers as T3 on T2.paperID = T3.paperID where T1.fname = \"Jeremy\""
    },
    {
        "question": "return me the number of papers in \" University of Michigan \" in Databases area .",
        "db_id": "academic",
        "gold_parse": "SELECT COUNT ( DISTINCT t4.title ) FROM domain_author AS t6 JOIN author AS t1 ON t6.aid  =  t1.aid JOIN DOMAIN AS t3 ON t3.did  =  t6.did JOIN domain_publication AS t2 ON t3.did  =  t2.did JOIN organization AS t5 ON t5.oid  =  t1.oid JOIN publication AS t4 ON t4.pid  =  t2.pid WHERE t3.name  =  \"Databases\" AND t5.name  =  \"University of Michigan\"",
        "predicted_parse_with_values": "select count ( oid ) from organization where name = \"dummy value\" and name = \"dummy value\""
    },
    {
        "question": "What are the different budget type codes , and how many documents are there for each ?",
        "db_id": "cre_Docs_and_Epenses",
        "gold_parse": "SELECT budget_type_code ,  count(*) FROM Documents_with_expenses GROUP BY budget_type_code",
        "predicted_parse_with_values": "select count ( * ) , Budget_Type_Code from Ref_Budget_Codes group by Budget_Type_Code"
    },
    {
        "question": "How many universities have a location that contains NY ?",
        "db_id": "university_basketball",
        "gold_parse": "SELECT count(*) FROM university WHERE LOCATION LIKE \"%NY%\"",
        "predicted_parse_with_values": "select count ( Location ) from university where Location like \"Kingston , RI\""
    },
    {
        "question": "Who advises student 1004 ?",
        "db_id": "allergy_1",
        "gold_parse": "SELECT Advisor FROM Student WHERE StuID  =  1004",
        "predicted_parse_with_values": "select Advisor from Student where city_code = \"PEK\""
    },
    {
        "question": "List the name of staff who has been assigned multiple jobs .",
        "db_id": "department_store",
        "gold_parse": "SELECT T1.staff_name FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id GROUP BY T2.staff_id HAVING COUNT (*)  >  1",
        "predicted_parse_with_values": "select staff_name from Staff group by staff_name having count ( * ) = 1"
    },
    {
        "question": "Show ids , customer ids , card type codes , card numbers for all cards .",
        "db_id": "customers_card_transactions",
        "gold_parse": "SELECT card_id ,  customer_id ,  card_type_code ,  card_number FROM Customers_cards",
        "predicted_parse_with_values": "select card_id , card_type_code , card_number , card_number from Customers_Cards"
    },
    {
        "question": "Return the id of the project that has the fewest corresponding documents .",
        "db_id": "cre_Docs_and_Epenses",
        "gold_parse": "SELECT project_id FROM Documents GROUP BY project_id ORDER BY count(*) ASC LIMIT 1",
        "predicted_parse_with_values": "select T2.Project_ID from Documents as T1 join Projects as T2 on T1.Project_ID = T2.Project_ID group by T1.Project_ID order by count ( * ) limit 1"
    },
    {
        "question": "return me the number of citations of \" Making database systems usable \" .",
        "db_id": "academic",
        "gold_parse": "SELECT citation_num FROM publication WHERE title  =  \"Making database systems usable\"",
        "predicted_parse_with_values": "select count ( T1.jid ) from publication as T1 join writes as T2 on T1.pid = T2.pid join author as T3 on T2.aid = T3.aid join domain_author as T4 on T3.aid = T4.aid join domain as T5 on T4.did = T5.did join domain_keyword as T6 on T5.did = T6.did join keyword as T7 on T6.kid = T7.kid where T7.keyword = \"dummy value\""
    },
    {
        "question": "what is the highest point of the state with the largest area",
        "db_id": "geo",
        "gold_parse": "SELECT t2.highest_point FROM state AS t1 JOIN highlow AS t2 ON t1.state_name  =  t2.state_name WHERE t1.state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) )",
        "predicted_parse_with_values": "select max ( T2.highest_point ) from state as T1 join highlow as T2 on T1.state_name = T2.state_name where T1.area = ( select max ( area ) from state ) order by area desc limit 1"
    },
    {
        "question": "what is the length of the colorado river in texas",
        "db_id": "geo",
        "gold_parse": "SELECT LENGTH FROM river WHERE river_name  =  \"colorado\" AND traverse  =  \"texas\"",
        "predicted_parse_with_values": "select length from river where river_name = \"dummy value\" and river_name = \"dummy value\""
    },
    {
        "question": "In how many cities are there airports in the country of Greenland ?",
        "db_id": "flight_4",
        "gold_parse": "SELECT count(DISTINCT city) FROM airports WHERE country  =  'Greenland'",
        "predicted_parse_with_values": "select count ( * ) from airports where country = \"Kuwait\""
    },
    {
        "question": "What is the last name of every student who is either female or living in a city with the code BAL or male and under 20 ?",
        "db_id": "dorm_1",
        "gold_parse": "SELECT lname FROM student WHERE sex  =  'F' AND city_code  =  'BAL' UNION SELECT lname FROM student WHERE sex  =  'M' AND age  <  20",
        "predicted_parse_with_values": "select T1.LName from Student as T1 join Lives_in as T2 on T1.StuID = T2.stuid join Dorm as T3 on T2.dormid = T3.dormid where T3.gender = \"F\" or T1.city_code = \"HKG\" except select LName from Student where city_code = \"CHI\""
    },
    {
        "question": "return me the references of \" Making database systems usable \" .",
        "db_id": "academic",
        "gold_parse": "SELECT reference_num FROM publication WHERE title  =  \"Making database systems usable\"",
        "predicted_parse_with_values": "select keyword from keyword where keyword = \"dummy value\""
    },
    {
        "question": "Find the movie which is classified in the most number of genres",
        "db_id": "imdb",
        "gold_parse": "SELECT t3.title FROM genre AS t2 JOIN classification AS t1 ON t2.gid  =  t1.gid JOIN movie AS t3 ON t3.mid  =  t1.msid GROUP BY t3.title ORDER BY COUNT ( DISTINCT t2.genre  ) DESC LIMIT 1",
        "predicted_parse_with_values": "select T2.title from genre as T1 join movie as T2 group by T1.genre order by count ( * ) desc limit 1"
    },
    {
        "question": "Count the number of different official languages corresponding to countries that players who play Defender are from .",
        "db_id": "match_season",
        "gold_parse": "SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"",
        "predicted_parse_with_values": "select count ( T3.Official_native_language ) from team as T1 join match_season as T2 on T1.Team_id = T2.Team join country as T3 on T2.Country = T3.Country_id where T1.Name = \"Enrique Osinski\""
    },
    {
        "question": "Find all the rooms that have a price higher than 160 and can accommodate more than 2 people . Report room names and ids .",
        "db_id": "inn_1",
        "gold_parse": "SELECT roomName ,  RoomId FROM Rooms WHERE basePrice  >  160 AND maxOccupancy  >  2",
        "predicted_parse_with_values": "select roomName , RoomId from Rooms where basePrice > 175 and basePrice < 175"
    },
    {
        "question": "Give me the zip code where the average mean humidity is below 70 and at least 100 trips took place .",
        "db_id": "bike_1",
        "gold_parse": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_humidity)  <  70 INTERSECT SELECT zip_code FROM trip GROUP BY zip_code HAVING count(*)  >=  100",
        "predicted_parse_with_values": "select T1.zip_code from trip as T1 join weather as T2 group by T2.zip_code having avg ( T2.mean_humidity ) >= 1"
    },
    {
        "question": "What are the manager 's first name , last name and id who won the most manager award ?",
        "db_id": "baseball_1",
        "gold_parse": "SELECT T1.name_first ,  T1.name_last ,  T2.player_id FROM player AS T1 JOIN manager_award AS T2 ON T1.player_id  =  T2.player_id GROUP BY T2.player_id ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select T2.name_first , T2.name_last , T2.name_last from manager_award_vote as T1 join player as T2 group by T1.award_id order by count ( * ) desc limit 1"
    },
    {
        "question": "Which team had the least number of attendances in home games in 1980 ?",
        "db_id": "baseball_1",
        "gold_parse": "SELECT T2.name FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T1.year = 1980 ORDER BY T1.attendance ASC LIMIT 1",
        "predicted_parse_with_values": "select T2.name from home_game as T1 join team as T2 on T1.team_id = T2.team_id where T2.year = 2011 order by T1.attendance limit 1"
    },
    {
        "question": "What are the names and ids of the different categories , and how many films are in each ?",
        "db_id": "sakila_1",
        "gold_parse": "SELECT T2.name ,  T1.category_id ,  count(*) FROM film_category AS T1 JOIN category AS T2 ON T1.category_id  =  T2.category_id GROUP BY T1.category_id",
        "predicted_parse_with_values": "select T1.title , T2.category_id , count ( * ) from film_text as T1 join film_category as T2 group by T2.category_id"
    },
    {
        "question": "What are the ids of stations that are located in San Francisco and have average bike availability above 10 .",
        "db_id": "bike_1",
        "gold_parse": "SELECT id FROM station WHERE city  =  \"San Francisco\" INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING avg(bikes_available)  >  10",
        "predicted_parse_with_values": "select T1.id from station as T1 join status as T2 on T1.id = T2.station_id where T1.city = \"San Francisco\" and T2.bikes_available > 2"
    },
    {
        "question": "Which college has any student who is a goalie and succeeded in the tryout .",
        "db_id": "soccer_2",
        "gold_parse": "SELECT cName FROM  tryout WHERE decision  =  'yes' AND pPos  =  'goalie'",
        "predicted_parse_with_values": "select T2.cName from Tryout as T1 join College as T2 on T1.cName = T2.cName where T1.pPos = \"goalie\" intersect select T4.cName from Tryout as T3 join College as T4 on T3.cName = T4.cName where T3.pPos = \"striker\""
    },
    {
        "question": "Find the code of city where most of students are living in .",
        "db_id": "dorm_1",
        "gold_parse": "SELECT city_code FROM student GROUP BY city_code ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select T1.city_code from Student as T1 join Lives_in as T2 on T1.StuID = T2.stuid group by T1.city_code order by count ( * ) desc limit 1"
    },
    {
        "question": "List the names of all the customers in alphabetical order .",
        "db_id": "insurance_and_eClaims",
        "gold_parse": "SELECT customer_details FROM customers ORDER BY customer_details",
        "predicted_parse_with_values": "select Customer_ID from Customers order by Customer_Details"
    },
    {
        "question": "List the names and decor of rooms that have a king bed . Sort the list by their price .",
        "db_id": "inn_1",
        "gold_parse": "SELECT roomName ,  decor FROM Rooms WHERE bedtype  =  'King' ORDER BY basePrice",
        "predicted_parse_with_values": "select roomName , decor from Rooms where beds = 2 order by basePrice"
    },
    {
        "question": "What is the average price of clothes ?",
        "db_id": "department_store",
        "gold_parse": "SELECT avg(product_price) FROM products WHERE product_type_code  =  'Clothes'",
        "predicted_parse_with_values": "select avg ( product_price ) from Products"
    },
    {
        "question": "List the name , nationality and id of all male architects ordered by their names lexicographically .",
        "db_id": "architecture",
        "gold_parse": "SELECT name ,  nationality ,  id FROM architect WHERE gender  =  'male' ORDER BY name",
        "predicted_parse_with_values": "select name , nationality , gender from architect where gender = \"female\" order by nationality"
    },
    {
        "question": "Which event names were used more than twice for party events ?",
        "db_id": "party_people",
        "gold_parse": "SELECT event_name FROM party_events GROUP BY event_name HAVING count(*)  >  2",
        "predicted_parse_with_values": "select Event_Name from party_events group by Event_ID having count ( * ) > 1"
    },
    {
        "question": "what rivers run through the state with the lowest point in the usa",
        "db_id": "geo",
        "gold_parse": "SELECT river_name FROM river WHERE traverse IN ( SELECT state_name FROM highlow WHERE lowest_elevation  =  ( SELECT MIN ( lowest_elevation ) FROM highlow ) )",
        "predicted_parse_with_values": "select T1.river_name from river as T1 join state as T2 on T1.traverse = T2.state_name join highlow as T3 on T2.state_name = T3.state_name where T3.lowest_point != \"dummy value\" order by T3.lowest_point limit 1"
    },
    {
        "question": "How many games were played in city Atlanta in 2000 ?",
        "db_id": "baseball_1",
        "gold_parse": "SELECT count(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year  =  2000 AND T2.city  =  'Atlanta'",
        "predicted_parse_with_values": "select count ( T1.team_id ) from home_game as T1 join park as T2 on T1.park_id = T2.park_id where T2.city = \"Springfield\" and T1.year = 1997"
    },
    {
        "question": "Who has friends that are older than the average age ? Print their friends and their ages as well",
        "db_id": "network_2",
        "gold_parse": "SELECT DISTINCT T2.name ,  T2.friend ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.age  >  (SELECT avg(age) FROM person)",
        "predicted_parse_with_values": "select T2.friend , T2.year from Person as T1 join PersonFriend as T2 on T1.name = T2.friend where T1.age > ( select avg ( age ) from Person )"
    },
    {
        "question": "Find the first name of the band mate that has performed in most songs .",
        "db_id": "music_2",
        "gold_parse": "SELECT t2.firstname FROM Performance AS t1 JOIN Band AS t2 ON t1.bandmate  =  t2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId GROUP BY firstname ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select T1.Firstname from Band as T1 join Performance as T2 on T1.Id = T2.Bandmate group by T2.Bandmate order by count ( * ) desc limit 1"
    },
    {
        "question": "How many different colleges are there ?",
        "db_id": "soccer_2",
        "gold_parse": "SELECT count(*) FROM College",
        "predicted_parse_with_values": "select count ( cName ) from College"
    },
    {
        "question": "which state has the smallest area that borders texas",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"texas\" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"texas\" )",
        "predicted_parse_with_values": "select T1.state_name from border_info as T1 join state as T2 on T1.border = T2.state_name where T1.border != \"dummy value\" order by T2.area asc limit 1"
    },
    {
        "question": "How many people in total can stay in the modern rooms of this inn ?",
        "db_id": "inn_1",
        "gold_parse": "SELECT sum(maxOccupancy) FROM Rooms WHERE decor  =  'modern'",
        "predicted_parse_with_values": "select sum ( T2.Rate ) from Rooms as T1 join Reservations as T2 on T1.RoomId = T2.Room where T1.bedType = \"Queen\""
    },
    {
        "question": "Show the names and ids of tourist attractions that are visited at least two times .",
        "db_id": "cre_Theme_park",
        "gold_parse": "SELECT T1.Name ,  T2.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*)  >=  2",
        "predicted_parse_with_values": "select Name , Tourist_Attraction_ID from Tourist_Attractions group by Tourist_Attraction_ID having count ( * ) >= 1"
    },
    {
        "question": "What are the names and prices of products that cost at least 180 , sorted by price decreasing and name ascending ?",
        "db_id": "manufactory_1",
        "gold_parse": "SELECT name ,  price FROM products WHERE price  >=  180 ORDER BY price DESC ,  name ASC",
        "predicted_parse_with_values": "select Name , Price from Products where Price >= 66 order by Price"
    },
    {
        "question": "kentucky borders how many states",
        "db_id": "geo",
        "gold_parse": "SELECT COUNT ( border ) FROM border_info WHERE state_name  =  \"kentucky\"",
        "predicted_parse_with_values": "select count ( * ) from state where area = \"dummy value\""
    },
    {
        "question": "What is the total number of games played ?",
        "db_id": "game_1",
        "gold_parse": "SELECT sum(gamesplayed) FROM Sportsinfo",
        "predicted_parse_with_values": "select count ( * ) from Video_Games"
    },
    {
        "question": "find the event names that have more than 2 records .",
        "db_id": "party_people",
        "gold_parse": "SELECT event_name FROM party_events GROUP BY event_name HAVING count(*)  >  2",
        "predicted_parse_with_values": "select Event_Name from party_events group by Event_ID having count ( * ) > 1"
    },
    {
        "question": "Find the average height and weight for all males ( sex is M ) .",
        "db_id": "candidate_poll",
        "gold_parse": "SELECT avg(height) ,  avg(weight) FROM people WHERE sex  =  'M'",
        "predicted_parse_with_values": "select avg ( Height ) , Weight from people where Sex = \"F\""
    },
    {
        "question": "Which department offers the most credits all together ?",
        "db_id": "college_1",
        "gold_parse": "SELECT T3.dept_name FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code  =  T2.crs_code JOIN department AS T3 ON T1.dept_code  =  T3.dept_code GROUP BY T1.dept_code ORDER BY sum(T1.crs_credit) DESC LIMIT 1",
        "predicted_parse_with_values": "select T1.DEPT_NAME , sum ( T2.CRS_CREDIT ) from DEPARTMENT as T1 join COURSE as T2 on T1.DEPT_CODE = T2.DEPT_CODE group by T1.DEPT_NAME order by sum ( T2.CRS_CREDIT ) desc limit 1"
    },
    {
        "question": "what are the major lakes in united states",
        "db_id": "geo",
        "gold_parse": "SELECT lake_name FROM lake WHERE area  >  750",
        "predicted_parse_with_values": "select T3.lake_name from river as T1 join state as T2 on T1.traverse = T2.state_name join lake as T3 where T2.country_name = \"dummy value\" and T1.country_name = \"dummy value\""
    },
    {
        "question": "Which clubs have one or more members from the city with code \" HOU \" ? Give me the names of the clubs .",
        "db_id": "club_1",
        "gold_parse": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.city_code  =  \"HOU\"",
        "predicted_parse_with_values": "select ClubName from Club where ClubLocation = \"HHH\""
    },
    {
        "question": "return me the authors who have the most number of papers in PVLDB .",
        "db_id": "academic",
        "gold_parse": "SELECT t1.name FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"PVLDB\" GROUP BY t1.name ORDER BY COUNT ( DISTINCT t4.title ) DESC LIMIT 1",
        "predicted_parse_with_values": "select count ( T2.jid ) from organization as T1 join publication as T2 where T1.name = \"dummy value\""
    },
    {
        "question": "Which cities have served as host cities more than once ? Return me their GDP and population .",
        "db_id": "city_record",
        "gold_parse": "SELECT t1.gdp ,  t1.Regional_Population FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id  =  T2.host_city GROUP BY t2.Host_City HAVING count(*)  >  1",
        "predicted_parse_with_values": "select T1.City , hosting_T1.Host_City from city as T1 join hosting_city as T2 on T1.City_ID = T2.Host_City group by hosting_T1.Host_City having count ( * ) > 1"
    },
    {
        "question": "what is the biggest city in the usa",
        "db_id": "geo",
        "gold_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city )",
        "predicted_parse_with_values": "select T1.city_name from city as T1 join state as T2 on T1.state_name = T2.state_name where T2.country_name = \"dummy value\" order by T1.population desc limit 1"
    },
    {
        "question": "Which game type has least number of games ?",
        "db_id": "game_1",
        "gold_parse": "SELECT gtype FROM Video_games GROUP BY gtype ORDER BY count(*) LIMIT 1",
        "predicted_parse_with_values": "select GType from Video_Games group by GType order by count ( * ) asc limit 1"
    },
    {
        "question": "how many major cities are in texas",
        "db_id": "geo",
        "gold_parse": "SELECT COUNT ( city_name ) FROM city WHERE population  >  150000 AND state_name  =  \"texas\"",
        "predicted_parse_with_values": "select count ( * ) from city where state_name = \"dummy value\""
    },
    {
        "question": "Report the total number of students for each fourth-grade classroom .",
        "db_id": "student_1",
        "gold_parse": "SELECT classroom ,  count(*) FROM list WHERE grade  =  \"4\" GROUP BY classroom",
        "predicted_parse_with_values": "select count ( * ) , Classroom from list where Grade = 6 group by Classroom"
    },
    {
        "question": "Find the address of all customers that live in Germany and have invoice .",
        "db_id": "chinook_1",
        "gold_parse": "SELECT DISTINCT T1.Address FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  \"Germany\"",
        "predicted_parse_with_values": "select T1.Address from Customer as T1 join Invoice as T2 on T1.CustomerId = T2.CustomerId where T2.BillingCountry = \"Argentina\" intersect select T3.Address from Customer as T3 join Invoice as T4 on T3.CustomerId = T4.CustomerId where T4.BillingCountry = \"Chile\""
    },
    {
        "question": "What are the total purchases for members rated at level 6 ?",
        "db_id": "shop_membership",
        "gold_parse": "SELECT count(*) FROM purchase AS T1 JOIN member AS T2 ON T1.member_id  =  T2.member_id WHERE T2.level  =  6",
        "predicted_parse_with_values": "select sum ( T1.Total_pounds ) from purchase as T1 join member as T2 on T1.Member_ID = T2.Member_ID where T2.Level = 2"
    },
    {
        "question": "List players ' first name and last name who received salary from team Washington Nationals in both 2005 and 2007 .",
        "db_id": "baseball_1",
        "gold_parse": "SELECT T2.name_first ,  T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = 2005 AND T3.name = 'Washington Nationals' INTERSECT SELECT T2.name_first , T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = 2007 AND T3.name = 'Washington Nationals'",
        "predicted_parse_with_values": "select T2.name_first , T2.name_last from salary as T1 join player as T2 where T1.year = 1993 intersect select T4.name_first , T4.name_last from salary as T3 join player as T4 where T3.year = 1989"
    },
    {
        "question": "What is the membership level with the most people ?",
        "db_id": "shop_membership",
        "gold_parse": "SELECT LEVEL FROM member GROUP BY LEVEL ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select T2.Level from membership_register_branch as T1 join member as T2 on T1.Member_ID = T2.Member_ID group by T2.Level order by count ( * ) desc limit 1"
    },
    {
        "question": "what is the highest elevation in delaware",
        "db_id": "geo",
        "gold_parse": "SELECT highest_elevation FROM highlow WHERE state_name  =  \"delaware\"",
        "predicted_parse_with_values": "select max ( highest_elevation ) from highlow where state_name = \"dummy value\""
    },
    {
        "question": "what is the longest river that flows through a state that borders tennessee",
        "db_id": "geo",
        "gold_parse": "SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name  =  \"tennessee\" ) ) AND traverse IN ( SELECT border FROM border_info WHERE state_name  =  \"tennessee\" )",
        "predicted_parse_with_values": "select T1.river_name from river as T1 join state as T2 on T1.traverse = T2.state_name join border_info as T3 on T2.state_name = T3.border where T3.border = \"dummy value\" order by T1.length desc limit 1"
    },
    {
        "question": "return me the number of the organizations .",
        "db_id": "academic",
        "gold_parse": "SELECT COUNT ( DISTINCT name ) FROM organization",
        "predicted_parse_with_values": "select count ( * ) from organization"
    },
    {
        "question": "How many different locations does each school have ?",
        "db_id": "college_1",
        "gold_parse": "SELECT count(DISTINCT dept_address) ,  school_code FROM department GROUP BY school_code",
        "predicted_parse_with_values": "select count ( DEPT_ADDRESS ) , count ( SCHOOL_CODE ) from DEPARTMENT"
    },
    {
        "question": "return me the papers by \" H. V. Jagadish \" .",
        "db_id": "academic",
        "gold_parse": "SELECT t3.title FROM writes AS t2 JOIN author AS t1 ON t2.aid  =  t1.aid JOIN publication AS t3 ON t2.pid  =  t3.pid WHERE t1.name  =  \"H. V. Jagadish\"",
        "predicted_parse_with_values": "select T1.title from publication as T1 join writes as T2 on T1.pid = T2.pid join author as T3 on T2.aid = T3.aid where T3.name = \"dummy value\""
    },
    {
        "question": "What is the name of the department with the most students enrolled ?",
        "db_id": "college_1",
        "gold_parse": "SELECT T4.dept_name FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN department AS T4 ON T3.dept_code  =  T4.dept_code GROUP BY T3.dept_code ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select DEPT_NAME from DEPARTMENT group by DEPT_NAME order by count ( * ) desc limit 1"
    },
    {
        "question": "How many gymnasts are from each hometown ?",
        "db_id": "gymnast",
        "gold_parse": "SELECT T2.Hometown ,  COUNT(*) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown",
        "predicted_parse_with_values": "select T2.Hometown , count ( * ) from gymnast as T1 join people as T2 on T1.Gymnast_ID = T2.People_ID group by T2.Hometown"
    },
    {
        "question": "What are the distinct majors that students with treasurer votes are studying ?",
        "db_id": "voter_2",
        "gold_parse": "SELECT DISTINCT T1.Major FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Treasurer_Vote",
        "predicted_parse_with_values": "select T2.Major from Voting_record as T1 join Student as T2 on T1.Class_Senator_Vote = T2.StuID where T1.Secretary_Vote = 1020"
    },
    {
        "question": "How many male ( sex is M ) students have class senator votes in the fall election cycle ?",
        "db_id": "voter_2",
        "gold_parse": "SELECT count(*) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  Class_Senator_Vote WHERE T1.Sex  =  \"M\" AND T2.Election_Cycle  =  \"Fall\"",
        "predicted_parse_with_values": "select count ( * ) from Voting_record as T1 join Student as T2 on T1.Class_Senator_Vote = T2.StuID where T1.Class_Senator_Vote = 1028 and T2.Sex = \"F\""
    },
    {
        "question": "What is average age of male for different job title ?",
        "db_id": "network_2",
        "gold_parse": "SELECT avg(age) ,  job FROM Person WHERE gender  =  'male' GROUP BY job",
        "predicted_parse_with_values": "select avg ( age ) , job from Person group by job"
    },
    {
        "question": "How many students enrolled in class ACCT-211 ?",
        "db_id": "college_1",
        "gold_parse": "SELECT count(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code WHERE T1.crs_code  =  'ACCT-211'",
        "predicted_parse_with_values": "select count ( * ) from STUDENT as T1 join ENROLL as T2 on T1.STU_NUM = T2.STU_NUM where T2.CLASS_CODE = 10014"
    },
    {
        "question": "what is the biggest state in the usa",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state )",
        "predicted_parse_with_values": "select state_name from state where country_name = \"dummy value\" order by density desc limit 1"
    },
    {
        "question": "which states lie on the largest river in the united states",
        "db_id": "geo",
        "gold_parse": "SELECT traverse FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river )",
        "predicted_parse_with_values": "select T3.state_name from river as T1 join state as T2 on T1.traverse = T2.state_name join border_info as T3 on T2.state_name = T3.border where T1.country_name = \"dummy value\" order by T2.density desc limit 1"
    },
    {
        "question": "What are the ids , names and genders of the architects who built two bridges or one mill ?",
        "db_id": "architecture",
        "gold_parse": "SELECT T1.id ,  T1.name ,  T1.gender FROM architect AS T1 JOIN bridge AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  =  2 UNION SELECT T1.id ,  T1.name ,  T1.gender FROM architect AS T1 JOIN mill AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  =  1",
        "predicted_parse_with_values": "select T1.id , T1.name , T1.gender from architect as T1 join bridge as T2 on T1.id = T2.architect_id group by T2.id having count ( * ) = 1 intersect select T3.id , T3.name from architect as T3 join bridge as T4 on T3.id = T4.architect_id group by T4.id having count ( * ) >= 1"
    },
    {
        "question": "Find the founded year of the newest non public school .",
        "db_id": "university_basketball",
        "gold_parse": "SELECT founded FROM university WHERE affiliation != 'Public' ORDER BY founded DESC LIMIT 1",
        "predicted_parse_with_values": "select Founded from university order by School desc limit 1"
    },
    {
        "question": "where is the ohio river",
        "db_id": "geo",
        "gold_parse": "SELECT traverse FROM river WHERE river_name  =  \"ohio\"",
        "predicted_parse_with_values": "select T2.area from river as T1 join state as T2 on T1.traverse = T2.state_name where T1.river_name = \"dummy value\""
    },
    {
        "question": "Who are the friends of Alice that are doctors ?",
        "db_id": "network_2",
        "gold_parse": "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name  =  'Alice' AND T1.gender  =  'male' AND T1.job  =  'doctor'",
        "predicted_parse_with_values": "select T2.friend from Person as T1 join PersonFriend as T2 on T1.name = T2.friend where T1.name = \"Zach\" and T1.name = \"Zach\""
    },
    {
        "question": "What is the total home game attendance of team Boston Red Stockings from 2000 to 2010 ?",
        "db_id": "baseball_1",
        "gold_parse": "SELECT sum(T1.attendance) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' AND T1.year BETWEEN 2000 AND 2010",
        "predicted_parse_with_values": "select sum ( T1.attendance ) from home_game as T1 join team as T2 on T1.team_id = T2.team_id where T2.name = \"Atlanta Braves\" and T2.year = 1981"
    },
    {
        "question": "Find the names and total checking and savings balances of accounts whose savings balance is higher than the average savings balance .",
        "db_id": "small_bank_1",
        "gold_parse": "SELECT T1.name ,  T2.balance + T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  >  (SELECT avg(balance) FROM savings)",
        "predicted_parse_with_values": "select T2.name , sum ( T1.balance ) from CHECKING as T1 join ACCOUNTS as T2 on T1.custid = T2.custid where T1.balance > ( select avg ( balance ) from CHECKING )"
    },
    {
        "question": "Which sport has most number of students on scholarship ?",
        "db_id": "game_1",
        "gold_parse": "SELECT sportname FROM Sportsinfo WHERE onscholarship  =  'Y' GROUP BY sportname ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select SportName from SportsInfo group by SportName order by count ( * ) desc limit 1"
    },
    {
        "question": "how many states border the mississippi river",
        "db_id": "geo",
        "gold_parse": "SELECT COUNT ( DISTINCT border ) FROM border_info WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" )",
        "predicted_parse_with_values": "select count ( * ) from river as T1 join state as T2 on T1.traverse = T2.state_name where T1.river_name = \"dummy value\""
    },
    {
        "question": "which rivers run through states bordering alabama",
        "db_id": "geo",
        "gold_parse": "SELECT river_name FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name  =  \"alabama\" )",
        "predicted_parse_with_values": "select T1.river_name from river as T1 join state as T2 on T1.traverse = T2.state_name join border_info as T3 on T2.state_name = T3.border where T3.border = \"dummy value\""
    },
    {
        "question": "What is the temperature of \" Shanghai \" city in January ?",
        "db_id": "city_record",
        "gold_parse": "SELECT T2.Jan FROM city AS T1 JOIN temperature AS T2 ON T1.city_id = T2.city_id WHERE T1.city = \"Shanghai\"",
        "predicted_parse_with_values": "select T1.Aug from temperature as T1 join city as T2 on T1.City_ID = T2.City_ID where T2.City = \"Changzhou ( Jiangsu ) \" and T1.Nov = 27.2"
    },
    {
        "question": "Find the names of either colleges in LA with greater than 15000 size or in state AZ with less than 13000 enrollment .",
        "db_id": "soccer_2",
        "gold_parse": "SELECT cName FROM College WHERE enr  <  13000 AND state = \"AZ\" UNION SELECT cName FROM College WHERE enr  >  15000 AND state = \"LA\"",
        "predicted_parse_with_values": "select cName from College where enr > 18000 union select cName from College where state = \"AZ\" and state = \"OK\""
    },
    {
        "question": "What are the id of songs whose format is mp3 .",
        "db_id": "music_1",
        "gold_parse": "SELECT f_id FROM files WHERE formats  =  \"mp3\"",
        "predicted_parse_with_values": "select T1.f_id from song as T1 join files as T2 on T1.f_id = T2.f_id where T2.formats = \"mp3\""
    },
    {
        "question": "return me the papers written by \" H. V. Jagadish \" and \" Divesh Srivastava \" with more than 200 citations .",
        "db_id": "academic",
        "gold_parse": "SELECT t5.title FROM writes AS t3 JOIN author AS t2 ON t3.aid  =  t2.aid JOIN publication AS t5 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t2.name  =  \"H. V. Jagadish\" AND t1.name  =  \"Divesh Srivastava\" AND t5.citation_num  >  200",
        "predicted_parse_with_values": "select T1.jid , T4.cited from publication as T1 join writes as T2 on T1.pid = T2.pid join author as T3 on T2.aid = T3.aid join cite as T4 on T1.pid = T4.citing where T4.cited > \"dummy value\" and T3.name = \"dummy value\""
    },
    {
        "question": "Which students are unaffected by allergies ?",
        "db_id": "allergy_1",
        "gold_parse": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy",
        "predicted_parse_with_values": "select LName from Student"
    },
    {
        "question": "List the date , theme and sales of the journal which did not have any of the listed editors serving on committee .",
        "db_id": "journal_committee",
        "gold_parse": "SELECT date ,  theme ,  sales FROM journal EXCEPT SELECT T1.date ,  T1.theme ,  T1.sales FROM journal AS T1 JOIN journal_committee AS T2 ON T1.journal_ID  =  T2.journal_ID",
        "predicted_parse_with_values": "select Date , Theme , Sales from journal where Journal_ID not in ( select Journal_ID from journal )"
    },
    {
        "question": "name all the rivers in illinois",
        "db_id": "geo",
        "gold_parse": "SELECT river_name FROM river WHERE traverse  =  \"illinois\"",
        "predicted_parse_with_values": "select T1.river_name from river as T1 join lake as T2 where T2.state_name = \"dummy value\""
    },
    {
        "question": "List the name and gender for all artists who released songs in March .",
        "db_id": "music_1",
        "gold_parse": "SELECT T1.artist_name ,  T1.gender FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.releasedate LIKE \"%Mar%\"",
        "predicted_parse_with_values": "select T2.artist_name , T2.gender from song as T1 join artist as T2 on T1.artist_name = T2.artist_name where T1.releasedate = \"27-MAR-2004\""
    },
    {
        "question": "How many times in total did the team Boston Red Stockings participate in postseason games ?",
        "db_id": "baseball_1",
        "gold_parse": "SELECT count(*) FROM ( SELECT * FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' UNION SELECT * FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_loser  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' )",
        "predicted_parse_with_values": "select count ( name ) from team where name = \"Buffalo Bisons\" and name = \"Cleveland Naps\""
    },
    {
        "question": "return me the organization \" H. V. Jagadish \" is in .",
        "db_id": "academic",
        "gold_parse": "SELECT t2.name FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid WHERE t1.name  =  \"H. V. Jagadish\"",
        "predicted_parse_with_values": "select name from organization where name = \"dummy value\""
    },
    {
        "question": "what states border states which the mississippi runs through",
        "db_id": "geo",
        "gold_parse": "SELECT border FROM border_info WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" )",
        "predicted_parse_with_values": "select T3.border from river as T1 join state as T2 on T1.traverse = T2.state_name join border_info as T3 on T2.state_name = T3.border where T1.river_name = \"dummy value\""
    },
    {
        "question": "What is the average distance and average price for flights from Los Angeles .",
        "db_id": "flight_1",
        "gold_parse": "SELECT avg(distance) ,  avg(price) FROM Flight WHERE origin  =  \"Los Angeles\"",
        "predicted_parse_with_values": "select avg ( distance ) , avg ( price ) from flight where destination = \"Sydney\""
    },
    {
        "question": "which state capital has the smallest population",
        "db_id": "geo",
        "gold_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MIN ( t1.population ) FROM state AS t2 JOIN city AS t1 ON t2.capital  =  t1.city_name )",
        "predicted_parse_with_values": "select capital from state order by population limit 1"
    },
    {
        "question": "return me the authors who have papers in PVLDB 2010 .",
        "db_id": "academic",
        "gold_parse": "SELECT t1.name FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"PVLDB\" AND t4.year  =  2010",
        "predicted_parse_with_values": "select T1.pid from writes as T1 join publication as T2 on T1.pid = T2.pid where T2.year = \"dummy value\" and T2.year = \"dummy value\""
    },
    {
        "question": "what is the capital of texas",
        "db_id": "geo",
        "gold_parse": "SELECT capital FROM state WHERE state_name  =  \"texas\"",
        "predicted_parse_with_values": "select T2.capital from city as T1 join state as T2 on T1.state_name = T2.state_name where T1.state_name = \"dummy value\""
    },
    {
        "question": "what are the high points of states surrounding mississippi",
        "db_id": "geo",
        "gold_parse": "SELECT highest_point FROM highlow WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"mississippi\" )",
        "predicted_parse_with_values": "select T2.highest_point from state as T1 join highlow as T2 on T1.state_name = T2.state_name where T1.area = \"dummy value\""
    },
    {
        "question": "return me the number of papers on PVLDB after 2000 .",
        "db_id": "academic",
        "gold_parse": "SELECT COUNT ( DISTINCT t2.title ) FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" AND t2.year  >  2000",
        "predicted_parse_with_values": "select count ( T1.oid ) from organization as T1 join publication as T2 where T1.name = \"dummy value\" and T2.year > \"dummy value\""
    },
    {
        "question": "how many capitals does rhode island have",
        "db_id": "geo",
        "gold_parse": "SELECT COUNT ( capital ) FROM state WHERE state_name  =  \"rhode island\"",
        "predicted_parse_with_values": "select count ( * ) from city where state_name = \"dummy value\""
    },
    {
        "question": "Find the first names of the faculty members who participate in Canoeing and Kayaking .",
        "db_id": "activity_1",
        "gold_parse": "SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' INTERSECT SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Kayaking'",
        "predicted_parse_with_values": "select T3.Fname from Activity as T1 join Faculty_Participates_in as T2 on T1.actid = T2.actid join Faculty as T3 on T2.FacID = T3.FacID where T1.activity_name = \"Mountain Climbing\" intersect select T6.Fname from Activity as T4 join Faculty_Participates_in as T5 on T4.actid = T5.actid join Faculty as T6 on T5.FacID = T6.FacID where T4.activity_name = \"Accordion Ensemble\""
    },
    {
        "question": "How old are the students with allergies to food and animal types on average ?",
        "db_id": "allergy_1",
        "gold_parse": "SELECT avg(age) FROM Student WHERE StuID IN ( SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\" INTERSECT SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"animal\")",
        "predicted_parse_with_values": "select avg ( T3.Age ) from Allergy_Type as T1 join Has_Allergy as T2 on T1.Allergy = T2.Allergy join Student as T3 on T2.StuID = T3.StuID where T1.Allergytype = \"food\" and T1.Allergytype = \"animal\""
    },
    {
        "question": "How many different songs have shared vocals ?",
        "db_id": "music_2",
        "gold_parse": "SELECT count(DISTINCT title) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE TYPE  =  \"shared\"",
        "predicted_parse_with_values": "select count ( SongId ) from Vocals"
    },
    {
        "question": "What are the first names of the professors who do not teach a class .",
        "db_id": "college_1",
        "gold_parse": "SELECT emp_fname FROM employee WHERE emp_jobcode  =  'PROF' EXCEPT SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num  =  T2.prof_num",
        "predicted_parse_with_values": "select PROF_OFFICE from PROFESSOR except select EMP_FNAME from EMPLOYEE"
    },
    {
        "question": "Show minimum and maximum amount of memberships for all branches opened in 2011 or located at city London .",
        "db_id": "shop_membership",
        "gold_parse": "SELECT min(membership_amount) ,  max(membership_amount) FROM branch WHERE open_year  =  2011 OR city  =  'London'",
        "predicted_parse_with_values": "select min ( membership_amount ) , max ( membership_amount ) from branch where Open_year = 2014 or Address_road = \"Cecilia Avenue\""
    },
    {
        "question": "what states surround kentucky",
        "db_id": "geo",
        "gold_parse": "SELECT border FROM border_info WHERE state_name  =  \"kentucky\"",
        "predicted_parse_with_values": "select state_name from state where area = \"dummy value\""
    },
    {
        "question": "What are the details of all products ?",
        "db_id": "customers_and_addresses",
        "gold_parse": "SELECT DISTINCT product_details FROM products",
        "predicted_parse_with_values": "select product_details from Products"
    },
    {
        "question": "What country is the artist who made the fewest songs from ?",
        "db_id": "music_1",
        "gold_parse": "SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name GROUP BY T2.artist_name ORDER BY count(*) LIMIT 1",
        "predicted_parse_with_values": "select T2.country from song as T1 join artist as T2 on T1.artist_name = T2.artist_name group by T1.country order by count ( * ) desc limit 1"
    },
    {
        "question": "Which park had most attendances in 2008 ?",
        "db_id": "baseball_1",
        "gold_parse": "SELECT T2.park_name FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year = 2008 ORDER BY T1.attendance DESC LIMIT 1",
        "predicted_parse_with_values": "select T4.park_name from appearances as T1 join team as T2 on T1.team_id = T2.team_id join home_game as T3 on T2.team_id = T3.team_id join park as T4 on T3.park_id = T4.park_id where T1.year = 1972 order by T2.attendance desc limit 1"
    },
    {
        "question": "Return the names of products that have had complaints filed by the customer who has filed the fewest complaints .",
        "db_id": "customer_complaints",
        "gold_parse": "SELECT DISTINCT t1.product_name FROM products AS t1 JOIN complaints AS t2 ON t1.product_id  =  t2.product_id JOIN customers AS t3 GROUP BY t3.customer_id ORDER BY count(*) LIMIT 1",
        "predicted_parse_with_values": "select product_name from Products group by product_name order by count ( * ) limit 1"
    },
    {
        "question": "Find the last name of the staff member who processed the complaint of the cheapest product .",
        "db_id": "customer_complaints",
        "gold_parse": "SELECT t1.last_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id  =  t2.staff_id JOIN products AS t3 ON t2.product_id  =  t3.product_id ORDER BY t3.product_price LIMIT 1",
        "predicted_parse_with_values": "select T3.last_name from Products as T1 join Complaints as T2 on T1.product_id = T2.product_id join Staff as T3 on T2.staff_id = T3.staff_id order by T1.product_price asc limit 1"
    },
    {
        "question": "How many students received a yes from tryouts ?",
        "db_id": "soccer_2",
        "gold_parse": "SELECT count(*) FROM tryout WHERE decision  =  'yes'",
        "predicted_parse_with_values": "select count ( enr ) from College"
    },
    {
        "question": "What is the average base price of different bed type ? List bed type and average base price .",
        "db_id": "inn_1",
        "gold_parse": "SELECT bedType ,  avg(basePrice) FROM Rooms GROUP BY bedType",
        "predicted_parse_with_values": "select avg ( basePrice ) , bedType from Rooms group by bedType"
    },
    {
        "question": "What are the full names of students minoring in department 140 ?",
        "db_id": "college_3",
        "gold_parse": "SELECT T2.Fname ,  T2.Lname FROM MINOR_IN AS T1 JOIN STUDENT AS T2 ON T1.StuID  =  T2.StuID WHERE T1.DNO  =  140",
        "predicted_parse_with_values": "select T1.Fname , T1.LName from Student as T1 join Enrolled_in as T2 on T1.StuID = T2.StuID join Course as T3 on T2.CID = T3.CID join Department as T4 on T3.DNO = T4.DNO where T4.DName = \"Physics and Astronomy\""
    },
    {
        "question": "how tall is guadalupe peak",
        "db_id": "geo",
        "gold_parse": "SELECT highest_elevation FROM highlow WHERE highest_point  =  \"guadalupe peak\"",
        "predicted_parse_with_values": "select mountain_altitude from mountain where mountain_name = \"dummy value\""
    },
    {
        "question": "what is largest capital",
        "db_id": "geo",
        "gold_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( t1.population ) FROM state AS t2 JOIN city AS t1 ON t2.capital  =  t1.city_name )",
        "predicted_parse_with_values": "select T2.capital from city as T1 join state as T2 on T1.state_name = T2.state_name order by T1.population desc limit 1"
    },
    {
        "question": "What is the number of artists for each gender ?",
        "db_id": "music_1",
        "gold_parse": "SELECT count(*) ,  gender FROM artist GROUP BY gender",
        "predicted_parse_with_values": "select gender , count ( * ) from artist group by gender"
    },
    {
        "question": "whats the largest city",
        "db_id": "geo",
        "gold_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city )",
        "predicted_parse_with_values": "select city_name from city order by population desc limit 1"
    },
    {
        "question": "Of all the claims , what was the earliest date when any claim was made ?",
        "db_id": "insurance_policies",
        "gold_parse": "SELECT Date_Claim_Made FROM Claims ORDER BY Date_Claim_Made ASC LIMIT 1",
        "predicted_parse_with_values": "select Date_Claim_Made from Claims order by Date_Claim_Made limit 1"
    },
    {
        "question": "What is the name of the oldest student ?",
        "db_id": "network_2",
        "gold_parse": "SELECT name FROM Person WHERE job  =  'student' AND age  =  (SELECT max(age) FROM person WHERE job  =  'student' )",
        "predicted_parse_with_values": "select name from Person order by age desc limit 1"
    },
    {
        "question": "what is the capital of states that have cities named durham",
        "db_id": "geo",
        "gold_parse": "SELECT t2.capital FROM state AS t2 JOIN city AS t1 ON t2.state_name  =  t1.state_name WHERE t1.city_name  =  \"durham\"",
        "predicted_parse_with_values": "select T2.capital from city as T1 join state as T2 on T1.state_name = T2.state_name where T1.city_name = \"dummy value\""
    },
    {
        "question": "how many big cities are in texas",
        "db_id": "geo",
        "gold_parse": "SELECT COUNT ( city_name ) FROM city WHERE population  >  150000 AND state_name  =  \"texas\"",
        "predicted_parse_with_values": "select count ( * ) from city where state_name = \"dummy value\""
    },
    {
        "question": "return me the paper in Databases area with more than 200 citations .",
        "db_id": "academic",
        "gold_parse": "SELECT t3.title FROM DOMAIN AS t2 JOIN domain_publication AS t1 ON t2.did  =  t1.did JOIN publication AS t3 ON t3.pid  =  t1.pid WHERE t2.name  =  \"Databases\" AND t3.citation_num  >  200",
        "predicted_parse_with_values": "select jid from publication where citation_num = \"dummy value\" group by jid having count ( jid ) > 1"
    },
    {
        "question": "what are the major cities in kansas",
        "db_id": "geo",
        "gold_parse": "SELECT city_name FROM city WHERE population  >  150000 AND state_name  =  \"kansas\"",
        "predicted_parse_with_values": "select city_name from city where state_name = \"dummy value\""
    },
    {
        "question": "which states have points that are higher than the highest point in colorado",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM highlow WHERE highest_elevation  >  ( SELECT highest_elevation FROM highlow WHERE state_name  =  \"colorado\" )",
        "predicted_parse_with_values": "select T1.state_name from border_info as T1 join state as T2 on T1.border = T2.state_name join highlow as T3 on T2.state_name = T3.state_name where T3.highest_point > ( select max ( highest_point ) from highlow where highest_elevation = \"dummy value\" )"
    },
    {
        "question": "What are the names of the activities Mark Giuliano is involved in",
        "db_id": "activity_1",
        "gold_parse": "SELECT T3.activity_name FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN Activity AS T3 ON T3.actid  =  T2.actid WHERE T1.fname  =  \"Mark\" AND T1.lname  =  \"Giuliano\"",
        "predicted_parse_with_values": "select T1.activity_name from Activity as T1 join Participates_in as T2 on T1.actid = T2.actid join Student as T3 on T2.stuid = T3.StuID where T3.Fname = \"Stacy\" and T3.LName = \"Smith\""
    },
    {
        "question": "How many Annual Meeting events happened in the United Kingdom region ?",
        "db_id": "party_people",
        "gold_parse": "SELECT count(*) FROM region AS t1 JOIN party AS t2 ON t1.region_id  =  t2.region_id JOIN party_events AS t3 ON t2.party_id  =  t3.party_id WHERE t1.region_name  =  \"United Kingdom\" AND t3.Event_Name  =  \"Annaual Meeting\"",
        "predicted_parse_with_values": "select count ( * ) from party_events as T1 join party as T2 on T1.Party_ID = T2.Party_ID join region as T3 on T2.Region_ID = T3.Region_ID where T3.Region_name = \"United Kingdom\""
    },
    {
        "question": "What are the names , color descriptions , and product descriptions for products in the 'Herbs ' category ?",
        "db_id": "products_gen_characteristics",
        "gold_parse": "SELECT T1.product_name ,  T2.color_description ,  T1.product_description FROM products AS T1 JOIN Ref_colors AS T2 ON T1.color_code  =  T2.color_code WHERE product_category_code  =  \"Herbs\"",
        "predicted_parse_with_values": "select T1.product_name , T2.color_description , T2.color_description from Products as T1 join Ref_Colors as T2 on T1.color_code = T2.color_code where T1.product_name = \"sesame\""
    },
    {
        "question": "What is the total number of products that are in orders with status \" Cancelled \" ?",
        "db_id": "customers_and_addresses",
        "gold_parse": "SELECT sum(t2.order_quantity) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id  =  t2.order_id WHERE t1.order_status  =  \"Cancelled\"",
        "predicted_parse_with_values": "select count ( * ) from Customer_Orders as T1 join Order_Items as T2 on T1.order_id = T2.order_id where T1.order_status = \"Delivered\""
    },
    {
        "question": "What is the payment method that were used the least often ?",
        "db_id": "insurance_policies",
        "gold_parse": "SELECT Payment_Method_Code FROM Payments GROUP BY Payment_Method_Code ORDER BY count(*) ASC LIMIT 1",
        "predicted_parse_with_values": "select Payment_Method_Code from Payments group by Payment_Method_Code order by count ( * ) limit 1"
    },
    {
        "question": "What is the total number of all football games played by scholarship students ?",
        "db_id": "game_1",
        "gold_parse": "SELECT sum(gamesplayed) FROM Sportsinfo WHERE sportname  =  \"Football\" AND onscholarship  =  'Y'",
        "predicted_parse_with_values": "select count ( * ) from SportsInfo where OnScholarship = \"N\""
    },
    {
        "question": "List the main industry with highest total market value and its number of companies .",
        "db_id": "gas_company",
        "gold_parse": "SELECT main_industry ,  count(*) FROM company GROUP BY main_industry ORDER BY sum(market_value) DESC LIMIT 1",
        "predicted_parse_with_values": "select Main_Industry , count ( * ) from company group by Main_Industry order by count ( * ) desc limit 1"
    },
    {
        "question": "Find the number of products with category \" Spices \" and typically sold above 1000 .",
        "db_id": "products_gen_characteristics",
        "gold_parse": "SELECT count(*) FROM products WHERE product_category_code  =  \"Spices\" AND typical_buying_price  >  1000",
        "predicted_parse_with_values": "select count ( * ) from Characteristics as T1 join Product_Characteristics as T2 on T1.characteristic_id = T2.characteristic_id join Products as T3 on T2.product_id = T3.product_id where T1.characteristic_name = \"warm\" and T3.product_category_code = \"Herbs\""
    },
    {
        "question": "which states border the ohio river",
        "db_id": "geo",
        "gold_parse": "SELECT traverse FROM river WHERE river_name  =  \"ohio\"",
        "predicted_parse_with_values": "select T3.border from river as T1 join state as T2 on T1.traverse = T2.state_name join border_info as T3 on T2.state_name = T3.border where T1.river_name = \"dummy value\""
    },
    {
        "question": "What are the maximum duration and resolution of songs grouped and ordered by languages ?",
        "db_id": "music_1",
        "gold_parse": "SELECT max(T1.duration) ,  max(T2.resolution) ,  T2.languages FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id GROUP BY T2.languages ORDER BY T2.languages",
        "predicted_parse_with_values": "select max ( resolution ) , languages from song group by languages order by resolution"
    },
    {
        "question": "Show all student IDs who have at least two allergies .",
        "db_id": "allergy_1",
        "gold_parse": "SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  2",
        "predicted_parse_with_values": "select T2.Fname from Has_Allergy as T1 join Student as T2 on T1.StuID = T2.StuID group by T1.StuID having count ( * ) >= 1"
    },
    {
        "question": "Find all the players ' first name and last name who have empty death record .",
        "db_id": "baseball_1",
        "gold_parse": "SELECT name_first ,  name_last FROM player WHERE death_year = ''",
        "predicted_parse_with_values": "select name_first , name_last from player order by name_first , name_first"
    },
    {
        "question": "How many cities are there that have more than 3 airports ?",
        "db_id": "flight_4",
        "gold_parse": "SELECT count(*) FROM (SELECT city FROM airports GROUP BY city HAVING count(*)  >  3)",
        "predicted_parse_with_values": "select count ( city ) from airports group by city having count ( * ) > 1"
    },
    {
        "question": "what state is springfield located in",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM city WHERE city_name  =  \"springfield\"",
        "predicted_parse_with_values": "select state_name from state where area = \"dummy value\""
    },
    {
        "question": "return me all the organizations in Databases area located in \" North America \" .",
        "db_id": "academic",
        "gold_parse": "SELECT t2.name FROM domain_author AS t4 JOIN author AS t1 ON t4.aid  =  t1.aid JOIN DOMAIN AS t3 ON t3.did  =  t4.did JOIN organization AS t2 ON t2.oid  =  t1.oid WHERE t3.name  =  \"Databases\" AND t2.continent  =  \"North America\"",
        "predicted_parse_with_values": "select name from organization where continent = \"dummy value\""
    },
    {
        "question": "Which major has between 2 and 30 number of students ? List major and the number of students .",
        "db_id": "restaurant_1",
        "gold_parse": "SELECT Major ,  count(*) FROM Student GROUP BY Major HAVING count(Major) BETWEEN 2 AND 30",
        "predicted_parse_with_values": "select Major , count ( * ) from Student group by Major having count ( * ) >= 1 intersect select Major , count ( * ) from Student group by Major having count ( * ) >= 1"
    },
    {
        "question": "how many states does kentucky border",
        "db_id": "geo",
        "gold_parse": "SELECT COUNT ( border ) FROM border_info WHERE state_name  =  \"kentucky\"",
        "predicted_parse_with_values": "select count ( * ) from border_info as T1 join state as T2 on T1.border = T2.state_name where T1.border = \"dummy value\""
    },
    {
        "question": "What is the number of days that had an average humity above 50 and an average visibility above 8 ?",
        "db_id": "bike_1",
        "gold_parse": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8",
        "predicted_parse_with_values": "select avg ( time ) from status where intersect select T1.mean_dew_point_f from weather as T1 join status as T2 group by T1.mean_dew_point_f having avg ( T2.time ) > 1"
    },
    {
        "question": "How many employees have certificate .",
        "db_id": "flight_1",
        "gold_parse": "SELECT count(DISTINCT eid) FROM Certificate",
        "predicted_parse_with_values": "select count ( * ) from employee"
    },
    {
        "question": "Find the average and maximum hours for the students whose tryout decision is yes .",
        "db_id": "soccer_2",
        "gold_parse": "SELECT avg(T1.HS) ,  max(T1.HS) FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'",
        "predicted_parse_with_values": "select avg ( enr ) , max ( enr ) from College"
    },
    {
        "question": "Find the first names of professors who are teaching more than one class .",
        "db_id": "college_1",
        "gold_parse": "SELECT T2.emp_fname FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num GROUP BY T1.prof_num HAVING count(*)  >  1",
        "predicted_parse_with_values": "select ( PROF_EXTENSION ) from PROFESSOR group by ( PROF_OFFICE ) having count ( * ) > 1"
    },
    {
        "question": "Which products has been complained by the customer who has filed least amount of complaints ?",
        "db_id": "customer_complaints",
        "gold_parse": "SELECT DISTINCT t1.product_name FROM products AS t1 JOIN complaints AS t2 ON t1.product_id  =  t2.product_id JOIN customers AS t3 GROUP BY t3.customer_id ORDER BY count(*) LIMIT 1",
        "predicted_parse_with_values": "select T1.product_name from Products as T1 join Complaints as T2 on T1.product_id = T2.product_id group by T2.product_id order by count ( * ) asc limit 1"
    },
    {
        "question": "what is the capital of the largest state",
        "db_id": "geo",
        "gold_parse": "SELECT capital FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state )",
        "predicted_parse_with_values": "select capital from state order by density desc limit 1"
    },
    {
        "question": "What are the account details with the largest value or with value having char ' 5 ' in it ?",
        "db_id": "cre_Docs_and_Epenses",
        "gold_parse": "SELECT max(Account_details) FROM Accounts UNION SELECT Account_details FROM Accounts WHERE Account_details LIKE \"%5%\"",
        "predicted_parse_with_values": "select Account_Details from Accounts where Account_Details like \"11130.23\" or Account_ID = ( select max ( Account_Details ) from Accounts where Account_ID like 61 )"
    },
    {
        "question": "where is mount whitney located",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM mountain WHERE mountain_name  =  \"whitney\"",
        "predicted_parse_with_values": "select T2.area from mountain as T1 join state as T2 on T1.state_name = T2.state_name where T1.mountain_name = \"dummy value\""
    },
    {
        "question": "What is all the product data , as well as each product 's manufacturer ?",
        "db_id": "manufactory_1",
        "gold_parse": "SELECT * FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code",
        "predicted_parse_with_values": "select * , Manufacturer from Products"
    },
    {
        "question": "What are the full names of actors who had roles in more than 30 films ?",
        "db_id": "sakila_1",
        "gold_parse": "SELECT T2.first_name ,  T2.last_name FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id  =  T2.actor_id GROUP BY T2.actor_id HAVING count(*)  >  30",
        "predicted_parse_with_values": "select T2.first_name , T2.last_name from film_actor as T1 join actor as T2 on T1.actor_id = T2.actor_id group by T1.actor_id having count ( * ) > 1"
    },
    {
        "question": "Find all movies directed by \" Steven Spielberg \" after 2006",
        "db_id": "imdb",
        "gold_parse": "SELECT t3.title FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.name  =  \"Steven Spielberg\" AND t3.release_year  >  2006",
        "predicted_parse_with_values": "select T6.title from director as T1 join directed_by as T2 on T1.did = T2.did join copyright as T3 on T2.msid = T3.msid join cast as T4 on T3.msid = T4.msid join actor as T5 on T4.aid = T5.aid join movie as T6 where T1.name = \"dummy value\" and T5.birth_year > \"dummy value\""
    },
    {
        "question": "Show the transportation method most people choose to get to tourist attractions .",
        "db_id": "cre_Theme_park",
        "gold_parse": "SELECT How_to_Get_There FROM Tourist_Attractions GROUP BY How_to_Get_There ORDER BY COUNT(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select How_to_Get_There from Tourist_Attractions group by ( How_to_Get_There ) order by count ( * ) desc limit 1"
    },
    {
        "question": "What are the distinct name , location and products of the enzymes which has any 'inhibitor ' interaction ?",
        "db_id": "medicine_enzyme_interaction",
        "gold_parse": "SELECT DISTINCT T1.name ,  T1.location ,  T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id  =  T1.id WHERE T2.interaction_type  =  'inhibitor'",
        "predicted_parse_with_values": "select name , Location , Product from enzyme where name = \"Protoporphyrinogen oxidase\""
    },
    {
        "question": "Find the names of courses that have either 3 credits or 1 credit but 4 hours .",
        "db_id": "college_3",
        "gold_parse": "SELECT CName FROM COURSE WHERE Credits  =  3 UNION SELECT CName FROM COURSE WHERE Credits  =  1 AND Hours  =  4",
        "predicted_parse_with_values": "select CName from Course where Hours > \"1-4\" or Credits < 3"
    },
    {
        "question": "Show the name of colleges that have at least two players in descending alphabetical order .",
        "db_id": "match_season",
        "gold_parse": "SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2 ORDER BY College DESC",
        "predicted_parse_with_values": "select T1.College from match_season as T1 join team as T2 on T1.Team = T2.Team_id join player as T3 on T2.Team_id = T3.Team group by T1.College having count ( * ) >= 1 order by sum ( T3.Singles_WL ) desc"
    },
    {
        "question": "Which institution does \" Katsuhiro Ueno \" belong to ?",
        "db_id": "icfp_1",
        "gold_parse": "SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  \"Katsuhiro\" AND t1.lname  =  \"Ueno\"",
        "predicted_parse_with_values": "select name from Inst where country = \"France\""
    },
    {
        "question": "what is the elevation of death valley",
        "db_id": "geo",
        "gold_parse": "SELECT lowest_elevation FROM highlow WHERE lowest_point  =  \"death valley\"",
        "predicted_parse_with_values": "select mountain_altitude from mountain where mountain_name = \"dummy value\""
    },
    {
        "question": "Which department has the highest average student GPA , and what is the average gpa ?",
        "db_id": "college_1",
        "gold_parse": "SELECT T2.dept_name ,  avg(T1.stu_gpa) FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY avg(T1.stu_gpa) DESC LIMIT 1",
        "predicted_parse_with_values": "select T1.DEPT_NAME , avg ( T2.STU_NUM ) from DEPARTMENT as T1 join STUDENT as T2 on T1.DEPT_CODE = T2.DEPT_CODE group by T1.DEPT_NAME order by avg ( T2.STU_GPA ) desc limit 1"
    },
    {
        "question": "What are the names of all male British artists ?",
        "db_id": "music_1",
        "gold_parse": "SELECT artist_name FROM artist WHERE country  =  \"UK\" AND gender  =  \"Male\"",
        "predicted_parse_with_values": "select artist_name from artist where gender = \"Female\" and country = \"USA\""
    },
    {
        "question": "What is the first and last name of the student participating in the most activities ?",
        "db_id": "activity_1",
        "gold_parse": "SELECT T1.fname ,  T1.lname FROM Student AS T1 JOIN Participates_in AS T2 ON T1.StuID  =  T2.StuID GROUP BY T1.StuID ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select T2.Fname , T2.LName from Participates_in as T1 join Student as T2 on T1.stuid = T2.StuID group by T1.stuid order by count ( * ) desc limit 1"
    },
    {
        "question": "How many players have more than 1000 hours of training ?",
        "db_id": "soccer_2",
        "gold_parse": "SELECT count(*) FROM Player WHERE HS  >  1000",
        "predicted_parse_with_values": "select count ( count ( * ) from Player where HS > ) value"
    },
    {
        "question": "what is the population of the largest state that borders texas",
        "db_id": "geo",
        "gold_parse": "SELECT population FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"texas\" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"texas\" )",
        "predicted_parse_with_values": "select T2.population from border_info as T1 join state as T2 on T1.border = T2.state_name where T1.border = \"dummy value\" order by T2.population desc limit 1"
    },
    {
        "question": "return me the paper by \" H. V. Jagadish \" with more than 200 citations .",
        "db_id": "academic",
        "gold_parse": "SELECT t3.title FROM writes AS t2 JOIN author AS t1 ON t2.aid  =  t1.aid JOIN publication AS t3 ON t2.pid  =  t3.pid WHERE t1.name  =  \"H. V. Jagadish\" AND t3.citation_num  >  200",
        "predicted_parse_with_values": "select T1.jid from publication as T1 join cite as T2 on T1.pid = T2.citing where T2.cited = \"dummy value\" group by T1.jid having count ( T2.cited ) > 1"
    },
    {
        "question": "Which is the email of the party that has used the services the most number of times ?",
        "db_id": "e_government",
        "gold_parse": "SELECT t1.party_email FROM parties AS t1 JOIN party_services AS t2 ON t1.party_id  =  t2.customer_id GROUP BY t1.party_email ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select party_email from Parties group by party_id order by count ( * ) desc limit 1"
    },
    {
        "question": "What are the main industries of the companies without gas stations and what are the companies ?",
        "db_id": "gas_company",
        "gold_parse": "SELECT company ,  main_industry FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company)",
        "predicted_parse_with_values": "select Main_Industry , Main_Industry from company where Company_ID not in ( select Company_ID from station_company )"
    },
    {
        "question": "salem is the capital of which state",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM state WHERE capital  =  \"salem\"",
        "predicted_parse_with_values": "select T2.capital from city as T1 join state as T2 on T1.state_name = T2.state_name where T1.state_name = \"dummy value\""
    },
    {
        "question": "What is the storm name and max speed which affected the greatest number of regions ?",
        "db_id": "storm_record",
        "gold_parse": "SELECT T1.name ,  T1.max_speed FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select Name , Max_speed from storm group by Name order by count ( * ) desc limit 1"
    },
    {
        "question": "What is the id and name of the enzyme that can interact with the most medicines as an activator ?",
        "db_id": "medicine_enzyme_interaction",
        "gold_parse": "SELECT T1.id ,  T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id WHERE T2.interaction_type  =  'activitor' GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select id , name from enzyme group by id order by count ( * ) desc limit 1"
    },
    {
        "question": "What are the id and name of the stations that have ever had more than 12 bikes available ?",
        "db_id": "bike_1",
        "gold_parse": "SELECT DISTINCT T1.id ,  T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  >  12",
        "predicted_parse_with_values": "select T1.id , T1.name from station as T1 join status as T2 on T1.id = T2.station_id group by T2.station_id having count ( * ) > 1"
    },
    {
        "question": "Find the full name and id of the college that has the most baseball players .",
        "db_id": "baseball_1",
        "gold_parse": "SELECT T1.name_full ,  T1.college_id FROM college AS T1 JOIN player_college AS T2 ON T1.college_id  =  T2.college_id GROUP BY T1.college_id ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select name_full , name_full , college_id from college group by college_id order by count ( * ) desc limit 1"
    },
    {
        "question": "How many actors are in the movie \" Saving Private Ryan \" ?",
        "db_id": "imdb",
        "gold_parse": "SELECT COUNT ( DISTINCT t1.name  ) FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t3.title  =  \"Saving Private Ryan\"",
        "predicted_parse_with_values": "select count ( * ) from movie where title = \"dummy value\""
    },
    {
        "question": "What are the names of customers who never made an order .",
        "db_id": "customers_and_addresses",
        "gold_parse": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id",
        "predicted_parse_with_values": "select customer_name from Customers where customer_id not in ( select customer_id from Customer_Orders )"
    },
    {
        "question": "What are the distinct names of customers with an order status of Pending , sorted by customer id ?",
        "db_id": "department_store",
        "gold_parse": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"Pending\" ORDER BY T2.customer_id",
        "predicted_parse_with_values": "select T1.customer_name from Customers as T1 join Customer_Orders as T2 on T1.customer_id = T2.customer_id where T2.order_status_code = \"New\" order by T1.customer_name"
    },
    {
        "question": "return me the number of authors who have papers containing keyword \" Relational Database \" .",
        "db_id": "academic",
        "gold_parse": "SELECT COUNT ( DISTINCT t2.name ) FROM publication_keyword AS t5 JOIN keyword AS t1 ON t5.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t3.pid JOIN author AS t2 ON t4.aid  =  t2.aid WHERE t1.keyword  =  \"Relational Database\"",
        "predicted_parse_with_values": "select count ( T1.pid ) from writes as T1 join publication as T2 on T1.pid = T2.pid join publication_keyword as T3 on T2.pid = T3.pid join keyword as T4 on T3.kid = T4.kid where T4.keyword like \"dummy value\""
    },
    {
        "question": "Find the distinct first names of the students who have class senator votes .",
        "db_id": "voter_2",
        "gold_parse": "SELECT DISTINCT T1.Fname FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.CLASS_Senator_VOTE",
        "predicted_parse_with_values": "select T2.Fname from Voting_record as T1 join Student as T2 on T1.Class_Senator_Vote = T2.StuID where T1.Class_Senator_Vote = 1028"
    },
    {
        "question": "Find the full names of faculties who are members of department with department number 520 .",
        "db_id": "college_3",
        "gold_parse": "SELECT T1.Fname ,  T1.Lname FROM FACULTY AS T1 JOIN MEMBER_OF AS T2 ON T1.FacID  =  T2.FacID WHERE T2.DNO  =  520",
        "predicted_parse_with_values": "select T1.Fname , T1.Lname from Faculty as T1 join Course as T2 on T1.FacID = T2.Instructor join Enrolled_in as T3 on T2.CID = T3.CID join Student as T4 on T3.StuID = T4.StuID join Minor_in as T5 on T4.StuID = T5.StuID where T5.DNO = 50"
    },
    {
        "question": "How many settlements were made on the claim with the most recent claim settlement date ? List the number and the claim id .",
        "db_id": "insurance_policies",
        "gold_parse": "SELECT count(*) ,  T1.claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id  =  T2.claim_id GROUP BY T1.claim_id ORDER BY T1.Date_Claim_Settled DESC LIMIT 1",
        "predicted_parse_with_values": "select T1.Date_Claim_Made , T2.Settlement_ID from Claims as T1 join Settlements as T2 on T1.Claim_ID = T2.Claim_ID where T1.Date_Claim_Made = ( select max ( Date_Claim_Made ) from Claims )"
    },
    {
        "question": "Find the state which has the most number of customers .",
        "db_id": "loan_1",
        "gold_parse": "SELECT state FROM bank GROUP BY state ORDER BY sum(no_of_customers) DESC LIMIT 1",
        "predicted_parse_with_values": "select state from customer group by state order by count ( * ) desc limit 1"
    },
    {
        "question": "What are the last names and ages of the students who are allergic to milk and cat ?",
        "db_id": "allergy_1",
        "gold_parse": "SELECT lname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Milk\" INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Cat\")",
        "predicted_parse_with_values": "select T3.LName , T3.Age from Allergy_Type as T1 join Has_Allergy as T2 on T1.Allergy = T2.Allergy join Student as T3 on T2.StuID = T3.StuID where T1.Allergytype = \"environmental\" intersect select T6.LName , T6.Age from Allergy_Type as T4 join Has_Allergy as T5 on T4.Allergy = T5.Allergy join Student as T6 on T5.StuID = T6.StuID where T4.Allergytype = \"food\""
    },
    {
        "question": "What is the velocity of the pilot named 'Thompson ' ?",
        "db_id": "flight_company",
        "gold_parse": "SELECT avg(velocity) FROM flight WHERE pilot  =  'Thompson'",
        "predicted_parse_with_values": "select Velocity from flight where Pilot = \"Thompson\""
    },
    {
        "question": "How much was the budget of \" Finding Nemo \"",
        "db_id": "imdb",
        "gold_parse": "SELECT budget FROM movie WHERE title  =  \"Finding Nemo\"",
        "predicted_parse_with_values": "select T2.budget from director as T1 join movie as T2 where T1.name = \"dummy value\""
    },
    {
        "question": "What is the name of each aircraft and how many flights does each one complete ?",
        "db_id": "flight_1",
        "gold_parse": "SELECT T2.name ,  count(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid",
        "predicted_parse_with_values": "select name , count ( * ) from aircraft group by name"
    },
    {
        "question": "Who is the president of the club \" Bootup Baltimore \" ? Give me the first and last name .",
        "db_id": "club_1",
        "gold_parse": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t2.position  =  \"President\"",
        "predicted_parse_with_values": "select T1.Fname , T1.LName from Student as T1 join Member_of_club as T2 on T1.StuID = T2.StuID join Club as T3 on T2.ClubID = T3.ClubID where T3.ClubName = \"Pen and Paper Gaming\" and T3.ClubName = \"Pen and Paper Gaming\""
    },
    {
        "question": "What are the dates with a maximum temperature higher than 85 ?",
        "db_id": "bike_1",
        "gold_parse": "SELECT date FROM weather WHERE max_temperature_f  >  85",
        "predicted_parse_with_values": "select date from weather where max_temperature_f > 44 order by max_temperature_f desc limit 1"
    },
    {
        "question": "Find the first names and last names of the authors whose institution affiliation is \" Google \" .",
        "db_id": "icfp_1",
        "gold_parse": "SELECT DISTINCT t1.fname ,  t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Google\"",
        "predicted_parse_with_values": "select T1.fname , T1.lname from Authors as T1 join Authorship as T2 on T1.authID = T2.authID join Inst as T3 on T2.instID = T3.instID where T3.name = \"Tohoku University\""
    },
    {
        "question": "return me the abstract of \" Making database systems usable \" .",
        "db_id": "academic",
        "gold_parse": "SELECT abstract FROM publication WHERE title  =  \"Making database systems usable\"",
        "predicted_parse_with_values": "select T1.abstract from publication as T1 join writes as T2 on T1.pid = T2.pid join author as T3 on T2.aid = T3.aid join domain_author as T4 on T3.aid = T4.aid join domain as T5 on T4.did = T5.did join domain_keyword as T6 on T5.did = T6.did join keyword as T7 on T6.kid = T7.kid where T7.keyword = \"dummy value\""
    },
    {
        "question": "what is the biggest state",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state )",
        "predicted_parse_with_values": "select state_name from state order by density desc limit 1"
    },
    {
        "question": "Which counties have two or more delegates ? Give me the county names .",
        "db_id": "election",
        "gold_parse": "SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id HAVING COUNT(*)  >=  2",
        "predicted_parse_with_values": "select County_name from county group by County_name having count ( * ) >= 1"
    },
    {
        "question": "what rivers do not run through tennessee",
        "db_id": "geo",
        "gold_parse": "SELECT river_name FROM river WHERE river_name NOT IN ( SELECT river_name FROM river WHERE traverse  =  \"tennessee\" )",
        "predicted_parse_with_values": "select river_name from river where river_name not in ( select state_name from state where area = \"dummy value\" )"
    },
    {
        "question": "return me the paper in PVLDB with more than 200 citations .",
        "db_id": "academic",
        "gold_parse": "SELECT t2.title FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" AND t2.citation_num  >  200",
        "predicted_parse_with_values": "select T1.jid from publication as T1 join writes as T2 on T1.pid = T2.pid join author as T3 on T2.aid = T3.aid where T3.name = \"dummy value\" group by T1.jid having count ( T1.jid ) > 1"
    },
    {
        "question": "Find the number of students that have at least one grade \" B \" .",
        "db_id": "college_3",
        "gold_parse": "SELECT COUNT(DISTINCT StuID) FROM ENROLLED_IN WHERE Grade  =  \"B\"",
        "predicted_parse_with_values": "select count ( * ) from Student as T1 join Enrolled_in as T2 on T1.StuID = T2.StuID where T2.Grade = \"D+\""
    },
    {
        "question": "Show the names of journalists and the names of the events they reported in ascending order",
        "db_id": "news_report",
        "gold_parse": "SELECT T3.Name ,  T2.Name FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID  =  T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID  =  T3.journalist_ID ORDER BY T2.Event_Attendance ASC",
        "predicted_parse_with_values": "select T3.Name , T1.Name from event as T1 join news_report as T2 on T1.Event_ID = T2.Event_ID join journalist as T3 on T2.journalist_ID = T3.journalist_ID order by T3.Name asc"
    },
    {
        "question": "Find all the female actors born in \" New York City \" after 1980",
        "db_id": "imdb",
        "gold_parse": "SELECT name FROM actor WHERE birth_city  =  \"New York City\" AND birth_year  >  1980 AND gender  =  \"female\"",
        "predicted_parse_with_values": "select name from actor where birth_city = \"dummy value\" and birth_year > \"dummy value\""
    },
    {
        "question": "What are the details of the shops that can be accessed by walk ?",
        "db_id": "cre_Theme_park",
        "gold_parse": "SELECT T1.Shop_Details FROM SHOPS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Shop_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  \"walk\"",
        "predicted_parse_with_values": "select Shop_Details from Shops"
    },
    {
        "question": "Find the names of all the product characteristics .",
        "db_id": "products_gen_characteristics",
        "gold_parse": "SELECT DISTINCT characteristic_name FROM CHARACTERISTICS",
        "predicted_parse_with_values": "select characteristic_name from Characteristics"
    },
    {
        "question": "List the distinct hometowns that are not associated with any gymnast .",
        "db_id": "gymnast",
        "gold_parse": "SELECT DISTINCT Hometown FROM people EXCEPT SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID",
        "predicted_parse_with_values": "select Hometown from people where Hometown not in ( select Gymnast_ID from gymnast )"
    },
    {
        "question": "Return the number of customers who have at least one order with \" Cancelled \" status .",
        "db_id": "customers_and_addresses",
        "gold_parse": "SELECT count(DISTINCT customer_id) FROM customer_orders WHERE order_status  =  \"Cancelled\"",
        "predicted_parse_with_values": "select count ( * ) from Customer_Orders as T1 join Customers as T2 on T1.customer_id = T2.customer_id where T1.order_status = \"Delivered\""
    },
    {
        "question": "give me all the states of usa",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM state",
        "predicted_parse_with_values": "select state_name from state where country_name = \"dummy value\""
    },
    {
        "question": "Which store has most the customers ?",
        "db_id": "sakila_1",
        "gold_parse": "SELECT store_id FROM customer GROUP BY store_id ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select store_id from store group by store_id order by count ( * ) desc limit 1"
    },
    {
        "question": "return me the journal , which has the most number of papers containing keyword \" Relational Database \" .",
        "db_id": "academic",
        "gold_parse": "SELECT t3.name FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t2 ON t2.pid  =  t4.pid JOIN journal AS t3 ON t2.jid  =  t3.jid WHERE t1.keyword  =  \"Relational Database\" GROUP BY t3.name ORDER BY COUNT ( DISTINCT t2.title ) DESC LIMIT 1",
        "predicted_parse_with_values": "select T1.name , count ( * ) from journal as T1 join publication as T2 on T1.jid = T2.jid join writes as T3 on T2.pid = T3.pid join author as T4 on T3.aid = T4.aid join domain_author as T5 on T4.aid = T5.aid join domain as T6 on T5.did = T6.did join domain_keyword as T7 on T6.did = T7.did join keyword as T8 on T7.kid = T8.kid where T8.keyword = \"dummy value\" group by T1.name order by count ( * ) desc limit 1"
    },
    {
        "question": "Find the name and city of the airport which is the destination of the most number of routes .",
        "db_id": "flight_4",
        "gold_parse": "SELECT T1.name ,  T1.city ,  T2.dst_apid FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid GROUP BY T2.dst_apid ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select T2.name , T2.city from routes as T1 join airports as T2 on T1.src_apid = T2.apid group by T1.dst_apid order by count ( * ) desc limit 1"
    },
    {
        "question": "What are the amenities in alphabetical order that Anonymous Donor Hall has ?",
        "db_id": "dorm_1",
        "gold_parse": "SELECT T1.amenity_name FROM dorm_amenity AS T1 JOIN has_amenity AS T2 ON T2.amenid  =  T1.amenid JOIN dorm AS T3 ON T2.dormid  =  T3.dormid WHERE T3.dorm_name  =  'Anonymous Donor Hall' ORDER BY T1.amenity_name",
        "predicted_parse_with_values": "select T1.dorm_name from Dorm as T1 join Has_amenity as T2 on T1.dormid = T2.dormid join Dorm_amenity as T3 on T2.amenid = T3.amenid where T1.dorm_name = \"Dorm-plex 2000\" order by T3.amenity_name"
    },
    {
        "question": "List the 3 highest salaries of the players in 2001 ?",
        "db_id": "baseball_1",
        "gold_parse": "SELECT salary FROM salary WHERE YEAR  =  2001 ORDER BY salary DESC LIMIT 3",
        "predicted_parse_with_values": "select salary from salary where year = ( select max ( salary ) from salary where year = 1999 )"
    },
    {
        "question": "how high is the highest point in the largest state",
        "db_id": "geo",
        "gold_parse": "SELECT t2.highest_elevation FROM highlow AS t2 JOIN state AS t1 ON t1.state_name  =  t2.state_name WHERE t1.area  =  ( SELECT MAX ( area ) FROM state )",
        "predicted_parse_with_values": "select max ( highest_point ) from highlow where highest_elevation = ( select max ( highest_elevation ) from highlow )"
    },
    {
        "question": "List the first names of all the students in room 107 .",
        "db_id": "student_1",
        "gold_parse": "SELECT DISTINCT firstname FROM list WHERE classroom  =  107",
        "predicted_parse_with_values": "select FirstName from list where Classroom = 109"
    },
    {
        "question": "What are all the labels ?",
        "db_id": "music_2",
        "gold_parse": "SELECT DISTINCT label FROM Albums",
        "predicted_parse_with_values": "select Label from Albums"
    },
    {
        "question": "What are the payment dates for any payments that have an amount greater than 10 or were handled by a staff member with the first name Elsa ?",
        "db_id": "sakila_1",
        "gold_parse": "SELECT payment_date FROM payment WHERE amount  >  10 UNION SELECT T1.payment_date FROM payment AS T1 JOIN staff AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.first_name  =  'Elsa'",
        "predicted_parse_with_values": "select payment_date from payment where amount > 10.99 union select T1.payment_date from payment as T1 join staff as T2 on T1.staff_id = T2.staff_id where T2.first_name = \"dummy value\" and T2.last_name = \"dummy value\""
    },
    {
        "question": "return me the conference , which has the most number of papers containing keyword \" Relational Database \" .",
        "db_id": "academic",
        "gold_parse": "SELECT t2.name FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t4.pid JOIN conference AS t2 ON t3.cid  =  t2.cid WHERE t1.keyword  =  \"Relational Database\" GROUP BY t2.name ORDER BY COUNT ( DISTINCT t3.title ) DESC LIMIT 1",
        "predicted_parse_with_values": "select T1.name from conference as T1 join publication as T2 on T1.cid = T2.cid join writes as T3 on T2.pid = T3.pid join author as T4 on T3.aid = T4.aid join domain_author as T5 on T4.aid = T5.aid join domain as T6 on T5.did = T6.did join domain_keyword as T7 on T6.did = T7.did join keyword as T8 on T7.kid = T8.kid where T8.keyword = \"dummy value\" group by T1.name order by count ( * ) desc limit 1"
    },
    {
        "question": "List the name and assets of each company in ascending order of company name .",
        "db_id": "company_office",
        "gold_parse": "SELECT name ,  Assets_billion FROM Companies ORDER BY name ASC",
        "predicted_parse_with_values": "select name , Assets_billion from Companies order by Assets_billion"
    },
    {
        "question": "Which transportation method is used the most often to get to tourist attractions ?",
        "db_id": "cre_Theme_park",
        "gold_parse": "SELECT How_to_Get_There FROM Tourist_Attractions GROUP BY How_to_Get_There ORDER BY COUNT(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select How_to_Get_There from Tourist_Attractions group by Attraction_Type_Code order by count ( * ) desc limit 1"
    },
    {
        "question": "What are the names of the artists who sang the shortest song ?",
        "db_id": "music_1",
        "gold_parse": "SELECT T1.artist_name FROM song AS T1 JOIN files AS T2 ON T1.f_id  =  T2.f_id ORDER BY T2.duration LIMIT 1",
        "predicted_parse_with_values": "select artist_name from song order by song_name limit 1"
    },
    {
        "question": "how many people live in california",
        "db_id": "geo",
        "gold_parse": "SELECT population FROM state WHERE state_name  =  \"california\"",
        "predicted_parse_with_values": "select sum ( population ) from state where area = \"dummy value\""
    },
    {
        "question": "Return the types of film market estimations in 1995 .",
        "db_id": "film_rank",
        "gold_parse": "SELECT TYPE FROM film_market_estimation WHERE YEAR  =  1995",
        "predicted_parse_with_values": "select Type from film_market_estimation where Year = 1978"
    },
    {
        "question": "what is the lowest point in iowa in meters",
        "db_id": "geo",
        "gold_parse": "SELECT lowest_point FROM highlow WHERE state_name  =  \"iowa\"",
        "predicted_parse_with_values": "select min ( T3.lowest_point ) from mountain as T1 join state as T2 on T1.state_name = T2.state_name join highlow as T3 on T2.state_name = T3.state_name where T1.state_name = \"dummy value\""
    },
    {
        "question": "Please list the name and id of all artists that have at least 3 albums in alphabetical order .",
        "db_id": "chinook_1",
        "gold_parse": "SELECT T2.Name ,  T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistID GROUP BY T1.ArtistId HAVING COUNT(*)  >=  3 ORDER BY T2.Name",
        "predicted_parse_with_values": "select T1.Name , T2.ArtistId from Artist as T1 join Album as T2 on T1.ArtistId = T2.ArtistId group by T2.ArtistId having count ( * ) >= 1 order by T2.ArtistId , T1.Name"
    },
    {
        "question": "How many documents are with document type code BK for each product id ?",
        "db_id": "cre_Docs_and_Epenses",
        "gold_parse": "SELECT count(*) ,  project_id FROM Documents WHERE document_type_code  =  \"BK\" GROUP BY project_id",
        "predicted_parse_with_values": "select count ( * ) , Document_Type_Code from Documents where Document_Type_Code = \"BK\" group by Document_ID"
    },
    {
        "question": "what is the name of the country that participated in the most tournament competitions ?",
        "db_id": "sports_competition",
        "gold_parse": "SELECT country FROM competition WHERE competition_type  =  'Tournament' GROUP BY country ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select Country from competition group by Country order by count ( * ) desc limit 1"
    },
    {
        "question": "return me the number of papers by \" H. V. Jagadish \" on PVLDB .",
        "db_id": "academic",
        "gold_parse": "SELECT COUNT ( DISTINCT t4.title ) FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" AND t2.name  =  \"PVLDB\"",
        "predicted_parse_with_values": "select count ( T1.pid ) from publication as T1 join writes as T2 on T1.pid = T2.pid join author as T3 on T2.aid = T3.aid join cite as T4 on T1.pid = T4.citing where T4.cited = \"dummy value\" and T3.name = \"dummy value\""
    },
    {
        "question": "what is the area of the new mexico state",
        "db_id": "geo",
        "gold_parse": "SELECT area FROM state WHERE state_name  =  \"new mexico\"",
        "predicted_parse_with_values": "select T2.area from border_info as T1 join state as T2 on T1.border = T2.state_name join lake as T3 where T1.state_name = \"dummy value\" and T3.state_name = \"dummy value\""
    },
    {
        "question": "how high is the highest point in delaware",
        "db_id": "geo",
        "gold_parse": "SELECT highest_elevation FROM highlow WHERE state_name  =  \"delaware\"",
        "predicted_parse_with_values": "select max ( highest_point ) from highlow where state_name = \"dummy value\""
    },
    {
        "question": "What is the first name of each student enrolled in class ACCT-211 ?",
        "db_id": "college_1",
        "gold_parse": "SELECT T3.stu_fname FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T2.stu_num  =  T3.stu_num WHERE T1.crs_code  =  'ACCT-211'",
        "predicted_parse_with_values": "select STU_FNAME from STUDENT where STU_CLASS = \"Jr\""
    },
    {
        "question": "How many male students ( sex is 'M ' ) are allergic to any type of food ?",
        "db_id": "allergy_1",
        "gold_parse": "SELECT count(*) FROM Student WHERE sex  =  \"M\" AND StuID IN (SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\")",
        "predicted_parse_with_values": "select count ( * ) from Allergy_Type as T1 join Has_Allergy as T2 on T1.Allergy = T2.Allergy join Student as T3 on T2.StuID = T3.StuID where T3.Sex = \"F\" and T1.Allergytype = \"animal\""
    },
    {
        "question": "What is the average rating for right-footed players and left-footed players ?",
        "db_id": "soccer_1",
        "gold_parse": "SELECT preferred_foot ,  avg(overall_rating) FROM Player_Attributes GROUP BY preferred_foot",
        "predicted_parse_with_values": "select avg ( overall_rating ) from Player_Attributes intersect select preferred_foot from Player_Attributes where strength = 65"
    },
    {
        "question": "Find the names and opening hours of the tourist attractions that we get to by bus or walk .",
        "db_id": "cre_Theme_park",
        "gold_parse": "SELECT Name ,  Opening_Hours FROM TOURIST_ATTRACTIONS WHERE How_to_Get_There  =  \"bus\" OR How_to_Get_There  =  \"walk\"",
        "predicted_parse_with_values": "select Name , Opening_Hours from Tourist_Attractions where Tourist_Attraction_ID in ( select Tourist_Attraction_ID from Tourist_Attractions where How_to_Get_There = \"bus\" or How_to_Get_There = \"walk\" )"
    },
    {
        "question": "What are the names and decor of rooms with a king bed ? Sort them by their price",
        "db_id": "inn_1",
        "gold_parse": "SELECT roomName ,  decor FROM Rooms WHERE bedtype  =  'King' ORDER BY basePrice",
        "predicted_parse_with_values": "select roomName , decor from Rooms where beds = 1 order by basePrice"
    },
    {
        "question": "List the names and phone numbers of all the distinct suppliers who supply red jeans .",
        "db_id": "department_store",
        "gold_parse": "SELECT DISTINCT T1.supplier_name ,  T1.supplier_phone FROM suppliers AS T1 JOIN product_suppliers AS T2 ON T1.supplier_id  =  T2.supplier_id JOIN products AS T3 ON T2.product_id  =  T3.product_id WHERE T3.product_name  =  \"red jeans\"",
        "predicted_parse_with_values": "select supplier_name , supplier_phone from Suppliers where supplier_name = \"Lidl\""
    },
    {
        "question": "Give me the start station and end station for the trips with the three oldest id .",
        "db_id": "bike_1",
        "gold_parse": "SELECT start_station_name ,  end_station_name FROM trip ORDER BY id LIMIT 3",
        "predicted_parse_with_values": "select start_station_name , end_station_id from trip order by id desc limit 1"
    },
    {
        "question": "How many distinct characteristic names does the product \" cumin \" have ?",
        "db_id": "products_gen_characteristics",
        "gold_parse": "SELECT count(DISTINCT t3.characteristic_name) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"sesame\"",
        "predicted_parse_with_values": "select count ( product_Characteristics.characteristic_id ) from Products as T1 join Product_Characteristics as T2 on T1.product_id = T2.product_id where T1.product_name = \"caraway\""
    },
    {
        "question": "What is the name of the country with the most number of home airlines ?",
        "db_id": "flight_4",
        "gold_parse": "SELECT country FROM airlines GROUP BY country ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select country from airlines group by name order by count ( * ) desc limit 1"
    },
    {
        "question": "return me the conferences , which have papers by \" H. V. Jagadish \" .",
        "db_id": "academic",
        "gold_parse": "SELECT t2.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\"",
        "predicted_parse_with_values": "select T1.name from conference as T1 join publication as T2 on T1.cid = T2.cid join writes as T3 on T2.pid = T3.pid join author as T4 on T3.aid = T4.aid where T4.name = \"dummy value\""
    },
    {
        "question": "number of states bordering kentucky",
        "db_id": "geo",
        "gold_parse": "SELECT COUNT ( border ) FROM border_info WHERE state_name  =  \"kentucky\"",
        "predicted_parse_with_values": "select count ( * ) from border_info as T1 join state as T2 on T1.border = T2.state_name where T1.border = \"dummy value\""
    },
    {
        "question": "which rivers do not run through tennessee",
        "db_id": "geo",
        "gold_parse": "SELECT river_name FROM river WHERE river_name NOT IN ( SELECT river_name FROM river WHERE traverse  =  \"tennessee\" )",
        "predicted_parse_with_values": "select river_name from river where river_name != \"dummy value\""
    },
    {
        "question": "What are the ids and names of all start stations that were the beginning of at least 200 trips ?",
        "db_id": "bike_1",
        "gold_parse": "SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  200",
        "predicted_parse_with_values": "select T1.id , T2.start_station_name from station as T1 join trip as T2 group by T2.start_station_id having count ( * ) >= 1"
    },
    {
        "question": "What are the names of the aircraft that the least people are certified to fly ?",
        "db_id": "flight_1",
        "gold_parse": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid GROUP BY T1.aid ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select T2.name from certificate as T1 join aircraft as T2 on T1.aid = T2.aid group by T1.aid order by count ( * ) limit 1"
    },
    {
        "question": "Show the name of each party and the corresponding number of delegates from that party .",
        "db_id": "election",
        "gold_parse": "SELECT T2.Party ,  COUNT(*) FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID GROUP BY T1.Party",
        "predicted_parse_with_values": "select Party , count ( * ) from party group by Party"
    },
    {
        "question": "Find the ids and names of members who are under age 30 or with black membership card .",
        "db_id": "coffee_shop",
        "gold_parse": "SELECT name ,  member_id FROM member WHERE Membership_card  =  'Black' OR age  <  30",
        "predicted_parse_with_values": "select Member_ID , Name from member where Age < 35 or Membership_card = \"Black\""
    },
    {
        "question": "Which product 's detail contains the word \" Latte \" or \" Americano \" ? Return the full detail .",
        "db_id": "customers_and_addresses",
        "gold_parse": "SELECT product_details FROM products WHERE product_details LIKE \"%Latte%\" OR product_details LIKE \"%Americano%\"",
        "predicted_parse_with_values": "select product_details , product_details from Products where product_details like \"Latte\" or product_details like \"Dove Chocolate\""
    },
    {
        "question": "What is the founded year of the non public school that was founded most recently ?",
        "db_id": "university_basketball",
        "gold_parse": "SELECT founded FROM university WHERE affiliation != 'Public' ORDER BY founded DESC LIMIT 1",
        "predicted_parse_with_values": "select Founded from university where School = ( select max ( Enrollment ) from university where Founded = 1892.0 ) order by Founded desc limit 1"
    },
    {
        "question": "How many companies are headquartered in the US ?",
        "db_id": "company_employee",
        "gold_parse": "SELECT count(*) FROM company WHERE Headquarters  =  'USA'",
        "predicted_parse_with_values": "select count ( * ) from company where Headquarters = \"USA\""
    },
    {
        "question": "What is the id of the product that was ordered the most often ?",
        "db_id": "department_store",
        "gold_parse": "SELECT product_id FROM order_items GROUP BY product_id ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select product_id from Order_Items group by product_id order by count ( * ) desc limit 1"
    },
    {
        "question": "return me all the researchers in \" University of Michigan \" .",
        "db_id": "academic",
        "gold_parse": "SELECT t1.name FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid WHERE t2.name  =  \"University of Michigan\"",
        "predicted_parse_with_values": "select name from organization where name = \"dummy value\""
    },
    {
        "question": "Show all sport name and the number of students .",
        "db_id": "game_1",
        "gold_parse": "SELECT sportname ,  count(*) FROM Sportsinfo GROUP BY sportname",
        "predicted_parse_with_values": "select T1.SportName , count ( * ) from SportsInfo as T1 join Student as T2 on T1.StuID = T2.StuID group by T1.SportName"
    },
    {
        "question": "return me the authors who have more than 10 papers in PVLDB .",
        "db_id": "academic",
        "gold_parse": "SELECT t1.name FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"PVLDB\" GROUP BY t1.name HAVING COUNT ( DISTINCT t4.title )  >  10",
        "predicted_parse_with_values": "select T3.name from organization as T1 join publication as T2 join author as T3 where T1.name = \"dummy value\" group by T3.name having count ( T2.jid ) > 1"
    },
    {
        "question": "List the names of all the distinct customers who bought a keyboard .",
        "db_id": "department_store",
        "gold_parse": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T2.order_id  =  T3.order_id JOIN products AS T4 ON T3.product_id  =  T4.product_id WHERE T4.product_name  =  \"keyboard\"",
        "predicted_parse_with_values": "select T1.customer_name from Customers as T1 join Customer_Orders as T2 on T1.customer_id = T2.customer_id join Order_Items as T3 on T2.order_id = T3.order_id join Products as T4 on T3.product_id = T4.product_id where T4.product_price = 803.74"
    },
    {
        "question": "How many students are affected by food related allergies ?",
        "db_id": "allergy_1",
        "gold_parse": "SELECT count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy WHERE T2.allergytype  =  \"food\"",
        "predicted_parse_with_values": "select count ( * ) from Allergy_Type as T1 join Has_Allergy as T2 on T1.Allergy = T2.Allergy join Student as T3 on T2.StuID = T3.StuID where T1.Allergytype = \"animal\""
    },
    {
        "question": "population of boulder",
        "db_id": "geo",
        "gold_parse": "SELECT population FROM city WHERE city_name  =  \"boulder\"",
        "predicted_parse_with_values": "select T1.population from city as T1 join state as T2 on T1.state_name = T2.state_name join mountain as T3 on T2.state_name = T3.state_name where T3.mountain_name = \"dummy value\""
    },
    {
        "question": "What are the maximum duration and resolution of all songs , for each language , ordered alphabetically by language ?",
        "db_id": "music_1",
        "gold_parse": "SELECT max(T1.duration) ,  max(T2.resolution) ,  T2.languages FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id GROUP BY T2.languages ORDER BY T2.languages",
        "predicted_parse_with_values": "select max ( resolution ) , languages from song group by languages order by languages"
    },
    {
        "question": "Which movies have 'Deleted Scenes ' as a substring in the special feature ?",
        "db_id": "sakila_1",
        "gold_parse": "SELECT title FROM film WHERE special_features LIKE '%Deleted Scenes%'",
        "predicted_parse_with_values": "select title from film where special_features like \"Trailers , Deleted Scenes , Behind the Scenes\" and special_features like \"Behind the Scenes\""
    },
    {
        "question": "Who are Bob 's friends ?",
        "db_id": "network_2",
        "gold_parse": "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T1.name  =  'Bob'",
        "predicted_parse_with_values": "select name from PersonFriend where name = \"Alice\""
    },
    {
        "question": "What are the ages of all of Zach 's friends who are in the longest relationship ?",
        "db_id": "network_2",
        "gold_parse": "SELECT T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name =  'Zach' AND T2.year  =  (SELECT max(YEAR) FROM PersonFriend WHERE name =  'Zach')",
        "predicted_parse_with_values": "select T2.age from PersonFriend as T1 join Person as T2 on T1.friend = T2.name where T1.year = ( select max ( year ) from PersonFriend )"
    },
    {
        "question": "What are the names and average prices of products for manufacturers whose products cost on average 150 or more ?",
        "db_id": "manufactory_1",
        "gold_parse": "SELECT avg(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name HAVING avg(T1.price) >= 150",
        "predicted_parse_with_values": "select Name , avg ( Price ) from Products where Price > 150 group by Name"
    },
    {
        "question": "What are the checking and savings balances in accounts belonging to Brown ?",
        "db_id": "small_bank_1",
        "gold_parse": "SELECT T2.balance ,  T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T1.name  =  'Brown'",
        "predicted_parse_with_values": "select * , T1.balance from SAVINGS as T1 join ACCOUNTS as T2 on T1.custid = T2.custid where T2.name = \"Granger\""
    },
    {
        "question": "How many songs have used the instrument \" drums \" ?",
        "db_id": "music_2",
        "gold_parse": "SELECT count(*) FROM instruments WHERE instrument  =  \"drums\"",
        "predicted_parse_with_values": "select count ( * ) from Instruments where Instrument = \"dummy value\""
    },
    {
        "question": "Show the country where people older than 30 and younger than 25 are from .",
        "db_id": "wedding",
        "gold_parse": "SELECT country FROM people WHERE age  <  25 INTERSECT SELECT country FROM people WHERE age  >  30",
        "predicted_parse_with_values": "select Country from people where Age > 27 and Age < 34"
    },
    {
        "question": "return me the number of papers on VLDB conference after 2000 .",
        "db_id": "academic",
        "gold_parse": "SELECT COUNT ( DISTINCT t2.title ) FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" AND t2.year  >  2000",
        "predicted_parse_with_values": "select count ( T2.jid ) from conference as T1 join publication as T2 on T1.cid = T2.cid where T1.name = \"dummy value\" and T2.year > \"dummy value\""
    },
    {
        "question": "What are the different names , locations , and products of the enzymes that are capable inhibitor interactions ?",
        "db_id": "medicine_enzyme_interaction",
        "gold_parse": "SELECT DISTINCT T1.name ,  T1.location ,  T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id  =  T1.id WHERE T2.interaction_type  =  'inhibitor'",
        "predicted_parse_with_values": "select name , Location , Product from enzyme"
    },
    {
        "question": "Find the number of tied games ( the value of \" ties \" is ' 1 ' ) in 1885 postseason .",
        "db_id": "baseball_1",
        "gold_parse": "SELECT count(*) FROM postseason WHERE YEAR  =  1885 AND ties  =  1",
        "predicted_parse_with_values": "select count ( * ) from home_game as T1 join postseason as T2 join team as T3 on T1.team_id = T3.team_id join batting_postseason as T4 on T3.team_id = T4.team_id join player as T5 on T4.player_id = T5.player_id join batting as T6 on T5.player_id = T6.player_id where T6.year = 1927 and T2.ties = 1"
    },
    {
        "question": "What is the id and name of the staff who has been assigned for the least amount of time ?",
        "db_id": "department_store",
        "gold_parse": "SELECT T1.staff_id ,  T1.staff_name FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id ORDER BY date_assigned_to - date_assigned_from LIMIT 1",
        "predicted_parse_with_values": "select T2.staff_id , T2.staff_name from Staff_Department_Assignments as T1 join Staff as T2 on T1.staff_id = T2.staff_id order by T1.date_assigned_to limit 1"
    },
    {
        "question": "What are the first names of all students in course ACCT-211 ?",
        "db_id": "college_1",
        "gold_parse": "SELECT T3.stu_fname FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T2.stu_num  =  T3.stu_num WHERE T1.crs_code  =  'ACCT-211'",
        "predicted_parse_with_values": "select T1.STU_FNAME from STUDENT as T1 join DEPARTMENT as T2 on T1.DEPT_CODE = T2.DEPT_CODE join COURSE as T3 on T2.DEPT_CODE = T3.DEPT_CODE where T3.CRS_CODE = \"ACCT-212\""
    },
    {
        "question": "Return the first names of customers who did not rented a film after the date '2005-08-23 02:06:01 ' .",
        "db_id": "sakila_1",
        "gold_parse": "SELECT first_name FROM customer WHERE customer_id NOT IN( SELECT customer_id FROM rental WHERE rental_date  >  '2005-08-23 02:06:01' )",
        "predicted_parse_with_values": "select first_name from customer where customer_id not in ( select customer_id from rental where return_date > \"2005-08-30 12:31:17\" )"
    },
    {
        "question": "which state is springfield in",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM city WHERE city_name  =  \"springfield\"",
        "predicted_parse_with_values": "select T2.state_name from city as T1 join state as T2 on T1.state_name = T2.state_name where T1.city_name = \"dummy value\""
    },
    {
        "question": "Of all players with an overall rating greater than 80 , how many are right-footed and left-footed ?",
        "db_id": "soccer_1",
        "gold_parse": "SELECT preferred_foot ,  count(*) FROM Player_Attributes WHERE overall_rating  >  80 GROUP BY preferred_foot",
        "predicted_parse_with_values": "select T1.player_name from Player as T1 join Player_Attributes as T2 on T1.player_api_id = T2.player_api_id where T2.overall_rating > 58 intersect select T3.player_name from Player as T3 join Player_Attributes as T4 on T3.player_api_id = T4.player_api_id where T4.overall_rating = 63"
    },
    {
        "question": "What is the average price of the products for each category ?",
        "db_id": "customer_complaints",
        "gold_parse": "SELECT avg(product_price) ,  product_category_code FROM products GROUP BY product_category_code",
        "predicted_parse_with_values": "select product_category_code , avg ( product_price ) from Products group by product_category_code"
    },
    {
        "question": "What is the id of every employee who has at least a salary of 100000 ?",
        "db_id": "flight_1",
        "gold_parse": "SELECT eid FROM Employee WHERE salary  >  100000",
        "predicted_parse_with_values": "select eid from employee where salary >= 256481"
    },
    {
        "question": "How many films are there in each category ? List the genre name , genre id and the count .",
        "db_id": "sakila_1",
        "gold_parse": "SELECT T2.name ,  T1.category_id ,  count(*) FROM film_category AS T1 JOIN category AS T2 ON T1.category_id  =  T2.category_id GROUP BY T1.category_id",
        "predicted_parse_with_values": "select T2.title , T1.film_id , count ( * ) from film_category as T1 join film as T2 on T1.film_id = T2.film_id group by T1.category_id"
    },
    {
        "question": "what is capital of texas",
        "db_id": "geo",
        "gold_parse": "SELECT capital FROM state WHERE state_name  =  \"texas\"",
        "predicted_parse_with_values": "select T2.capital from city as T1 join state as T2 on T1.state_name = T2.state_name where T1.state_name = \"dummy value\""
    },
    {
        "question": "What is the id of the store that has the most items in inventory ?",
        "db_id": "sakila_1",
        "gold_parse": "SELECT store_id FROM inventory GROUP BY store_id ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select T2.store_id from store as T1 join inventory as T2 on T1.store_id = T2.store_id group by T2.store_id order by count ( * ) desc limit 1"
    },
    {
        "question": "What are the names of regions that were affected by the storm in which the most people died ?",
        "db_id": "storm_record",
        "gold_parse": "SELECT T2.region_name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id ORDER BY T3.Number_Deaths DESC LIMIT 1",
        "predicted_parse_with_values": "select T1.Region_name from region as T1 join affected_region as T2 on T1.Region_id = T2.Region_id join storm as T3 on T2.Storm_ID = T3.Storm_ID group by T3.Name order by sum ( T3.Number_Deaths ) desc limit 1"
    },
    {
        "question": "List the type of bed and name of all traditional rooms .",
        "db_id": "inn_1",
        "gold_parse": "SELECT roomName ,  bedType FROM Rooms WHERE decor = \"traditional\"",
        "predicted_parse_with_values": "select bedType , roomName from Rooms where decor = \"traditional\""
    },
    {
        "question": "Count the number of players who enter hall of fame for each year .",
        "db_id": "baseball_1",
        "gold_parse": "SELECT yearid ,  count(*) FROM hall_of_fame GROUP BY yearid",
        "predicted_parse_with_values": "select count ( * ) , yearid from hall_of_fame group by inducted"
    },
    {
        "question": "Show the authors who have submissions to more than one workshop .",
        "db_id": "workshop_paper",
        "gold_parse": "SELECT T2.Author FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID GROUP BY T2.Author HAVING COUNT(DISTINCT T1.workshop_id)  >  1",
        "predicted_parse_with_values": "select Author from submission group by Author having count ( * ) > 1"
    },
    {
        "question": "return me the conferences , which have more than 60 papers containing keyword \" Relational Database \" .",
        "db_id": "academic",
        "gold_parse": "SELECT t2.name FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t4.pid JOIN conference AS t2 ON t3.cid  =  t2.cid WHERE t1.keyword  =  \"Relational Database\" GROUP BY t2.name HAVING COUNT ( DISTINCT t3.title )  >  60",
        "predicted_parse_with_values": "select T1.name from conference as T1 join publication as T2 on T1.cid = T2.cid join writes as T3 on T2.pid = T3.pid join author as T4 on T3.aid = T4.aid join domain_author as T5 on T4.aid = T5.aid join domain as T6 on T5.did = T6.did join domain_keyword as T7 on T6.did = T7.did join keyword as T8 on T7.kid = T8.kid where T8.keyword = \"dummy value\" group by T1.name having count ( * ) > 1"
    },
    {
        "question": "List the name of the colleges whose enrollment is greater 18000 sorted by the college 's name .",
        "db_id": "soccer_2",
        "gold_parse": "SELECT cName FROM College WHERE enr  >  18000 ORDER BY cName",
        "predicted_parse_with_values": "select cName from College order by enr desc"
    },
    {
        "question": "Find the \" date became customers \" of the customers whose ID is between 10 and 20 .",
        "db_id": "customers_and_addresses",
        "gold_parse": "SELECT date_became_customer FROM customers WHERE customer_id BETWEEN 10 AND 20",
        "predicted_parse_with_values": "select date_became_customer from Customers where customer_id = 11 and customer_id between 2 and value"
    },
    {
        "question": "What are the type come , name , and description of the document that has either the name 'Noel CV ' or 'King Book ' ?",
        "db_id": "cre_Docs_and_Epenses",
        "gold_parse": "SELECT document_type_code ,  document_name ,  document_description FROM Documents WHERE document_name  =  'Noel CV' OR document_name  =  'King Book'",
        "predicted_parse_with_values": "select T2.Document_Type_Name , T2.Document_Type_Name , T1.Document_Description from Documents as T1 join Ref_Document_Types as T2 on T1.Document_Type_Code = T2.Document_Type_Code where T1.Document_Name = \"Review on French files\" or T1.Document_Description = \"None\""
    },
    {
        "question": "Return the type name , type description , and date of creation for each document .",
        "db_id": "cre_Docs_and_Epenses",
        "gold_parse": "SELECT T1.document_type_name ,  T1.document_type_description ,  T2.Document_date FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code  =  T2.document_type_code",
        "predicted_parse_with_values": "select T1.Document_Name , T2.Document_Type_Description , T1.Document_Description from Documents as T1 join Ref_Document_Types as T2 on T1.Document_Type_Code = T2.Document_Type_Code"
    },
    {
        "question": "What is the largest and smallest customer codes ?",
        "db_id": "department_store",
        "gold_parse": "SELECT max(customer_code) ,  min(customer_code) FROM Customers",
        "predicted_parse_with_values": "select customer_code , max ( from Customers limit 1 ) group by customer_code order by sum ( limit 1 ) limit 1"
    },
    {
        "question": "Find the emails of parties with the most popular party form .",
        "db_id": "e_government",
        "gold_parse": "SELECT t1.party_email FROM parties AS t1 JOIN party_forms AS t2 ON t1.party_id  =  t2.party_id WHERE t2.form_id  =  (SELECT form_id FROM party_forms GROUP BY form_id ORDER BY count(*) DESC LIMIT 1)",
        "predicted_parse_with_values": "select party_email from Parties group by party_email order by count ( * ) desc limit 1"
    },
    {
        "question": "Find the name of customer who has the highest amount of loans .",
        "db_id": "loan_1",
        "gold_parse": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount) DESC LIMIT 1",
        "predicted_parse_with_values": "select T3.cust_name from loan as T1 join bank as T2 on T1.branch_ID = T2.branch_ID join customer as T3 on T2.branch_ID = T3.branch_ID order by T1.amount desc limit 1"
    },
    {
        "question": "Find the names of customers who never ordered product Latte .",
        "db_id": "customers_and_addresses",
        "gold_parse": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Latte'",
        "predicted_parse_with_values": "select customer_name from Customers where customer_id not in ( select customer_id from Customer_Orders where order_date = \"2018-03-08 15:30:24\" )"
    },
    {
        "question": "What is the count of cities with more than 3 airports ?",
        "db_id": "flight_4",
        "gold_parse": "SELECT count(*) FROM (SELECT city FROM airports GROUP BY city HAVING count(*)  >  3)",
        "predicted_parse_with_values": "select count ( * ) from airports group by city having count ( * ) > 1"
    },
    {
        "question": "Show the ids for projects with at least 2 documents .",
        "db_id": "cre_Docs_and_Epenses",
        "gold_parse": "SELECT project_id FROM Documents GROUP BY project_id HAVING count(*)  >=  2",
        "predicted_parse_with_values": "select T2.Project_ID from Documents as T1 join Projects as T2 on T1.Project_ID = T2.Project_ID group by T1.Project_ID having count ( * ) >= 1"
    },
    {
        "question": "What are the maximum and minimum product prices for each product type ?",
        "db_id": "department_store",
        "gold_parse": "SELECT product_type_code ,  max(product_price) ,  min(product_price) FROM products GROUP BY product_type_code",
        "predicted_parse_with_values": "select max ( product_price ) , min ( product_price ) , product_type_code from Products group by product_type_code"
    },
    {
        "question": "IN which year did city \" Taizhou ( Zhejiang ) \" serve as a host city ?",
        "db_id": "city_record",
        "gold_parse": "SELECT T2.year FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id  =  T2.host_city WHERE T1.city  =  \"Taizhou ( Zhejiang )\"",
        "predicted_parse_with_values": "select hosting_T1.Year from city as T1 join hosting_city as T2 on T1.City_ID = T2.Host_City where T1.City = \"Jiaxing ( Zhejiang ) \" and T1.Hanyu_Pinyin = \"Y\u00e1ngzh\u014du\""
    },
    {
        "question": "return me the keywords , which have been contained by more than 100 papers in PVLDB .",
        "db_id": "academic",
        "gold_parse": "SELECT t1.keyword FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t2 ON t2.pid  =  t4.pid JOIN journal AS t3 ON t2.jid  =  t3.jid WHERE t3.name  =  \"PVLDB\" GROUP BY t1.keyword HAVING COUNT ( DISTINCT t2.title )  >  100",
        "predicted_parse_with_values": "select T1.keyword from keyword as T1 join publication_keyword as T2 on T1.kid = T2.kid join publication as T3 on T2.pid = T3.pid join writes as T4 on T3.pid = T4.pid join author as T5 on T4.aid = T5.aid join domain_author as T6 on T5.aid = T6.aid join domain as T7 on T6.did = T7.did where T7.name = \"dummy value\" group by T1.keyword having count ( * ) > 1"
    },
    {
        "question": "return me the authors who have papers in the VLDB conference .",
        "db_id": "academic",
        "gold_parse": "SELECT t1.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"VLDB\"",
        "predicted_parse_with_values": "select T4.name from conference as T1 join publication as T2 on T1.cid = T2.cid join writes as T3 on T2.pid = T3.pid join author as T4 on T3.aid = T4.aid where T1.name = \"dummy value\""
    },
    {
        "question": "what are the rivers in illinois",
        "db_id": "geo",
        "gold_parse": "SELECT river_name FROM river WHERE traverse  =  \"illinois\"",
        "predicted_parse_with_values": "select T1.river_name from river as T1 join lake as T2 where T2.state_name = \"dummy value\""
    },
    {
        "question": "Which tourist attractions does the visitor with detail 'Vincent ' visit ?",
        "db_id": "cre_Theme_park",
        "gold_parse": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID JOIN VISITORS AS T3 ON T2.Tourist_ID  =  T3.Tourist_ID WHERE T3.Tourist_Details  =  \"Vincent\"",
        "predicted_parse_with_values": "select T1.Name from Tourist_Attractions as T1 join Visits as T2 on T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID where T2.Visit_Details = \"\""
    },
    {
        "question": "What are the ids of stations that have latitude above 37.4 and never had bike availability below 7 ?",
        "db_id": "bike_1",
        "gold_parse": "SELECT id FROM station WHERE lat  >  37.4 EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available)  <  7",
        "predicted_parse_with_values": "select id from station where lat > 37.771058000000004 except select T1.id from station as T1 join status as T2 on T1.id = T2.station_id where T2.bikes_available < 15"
    },
    {
        "question": "What are the average prices of hotels grouped by their pet policy .",
        "db_id": "cre_Theme_park",
        "gold_parse": "SELECT pets_allowed_yn ,  avg(price_range) FROM HOTELS GROUP BY pets_allowed_yn",
        "predicted_parse_with_values": "select avg ( price_range ) , avg ( price_range ) from Hotels"
    },
    {
        "question": "What are the most common types of interactions between enzymes and medicine , and how many types are there ?",
        "db_id": "medicine_enzyme_interaction",
        "gold_parse": "SELECT interaction_type ,  count(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select count ( * ) , interaction_type from medicine_enzyme_interaction group by interaction_type order by count ( * ) desc limit 1"
    },
    {
        "question": "What are the first names , office locations of all lecturers who have taught some course ?",
        "db_id": "college_1",
        "gold_parse": "SELECT T2.emp_fname ,  T4.prof_office ,  T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN professor AS T4 ON T2.emp_num  =  T4.emp_num",
        "predicted_parse_with_values": "select T1.EMP_FNAME , T4.PROF_OFFICE from EMPLOYEE as T1 join DEPARTMENT as T2 on T1.EMP_NUM = T2.EMP_NUM join COURSE as T3 on T2.DEPT_CODE = T3.DEPT_CODE join PROFESSOR as T4 on T1.EMP_NUM = T4.EMP_NUM where T3.CRS_DESCRIPTION = \"Statistical Applications\""
    },
    {
        "question": "Find the actors who played in the latest movie by \" Quentin Tarantino \"",
        "db_id": "imdb",
        "gold_parse": "SELECT t1.name FROM CAST AS t4 JOIN actor AS t1 ON t4.aid  =  t1.aid JOIN movie AS t5 ON t5.mid  =  t4.msid JOIN directed_by AS t2 ON t5.mid  =  t2.msid JOIN director AS t3 ON t3.did  =  t2.did WHERE t3.name  =  \"Quentin Tarantino\" ORDER BY t5.release_year DESC LIMIT 1",
        "predicted_parse_with_values": "select T1.name from actor as T1 join cast as T2 on T1.aid = T2.aid join copyright as T3 on T2.msid = T3.msid join directed_by as T4 on T3.msid = T4.msid join director as T5 on T4.did = T5.did where T5.name = \"dummy value\" order by T1.birth_year desc limit 1"
    },
    {
        "question": "Find the female friends of Alice .",
        "db_id": "network_2",
        "gold_parse": "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name  =  'Alice' AND T1.gender  =  'female'",
        "predicted_parse_with_values": "select T2.friend from Person as T1 join PersonFriend as T2 on T1.name = T2.friend where T1.gender = \"male\" and T1.gender = \"female\""
    },
    {
        "question": "return me the authors of \" Making database systems usable \" .",
        "db_id": "academic",
        "gold_parse": "SELECT t1.name FROM writes AS t2 JOIN author AS t1 ON t2.aid  =  t1.aid JOIN publication AS t3 ON t2.pid  =  t3.pid WHERE t3.title  =  \"Making database systems usable\"",
        "predicted_parse_with_values": "select T5.name from keyword as T1 join publication_keyword as T2 on T1.kid = T2.kid join publication as T3 on T2.pid = T3.pid join writes as T4 on T3.pid = T4.pid join author as T5 on T4.aid = T5.aid where T1.keyword = \"dummy value\""
    },
    {
        "question": "How many routes go from the United States to Canada ?",
        "db_id": "flight_4",
        "gold_parse": "SELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')",
        "predicted_parse_with_values": "select count ( * ) from routes where dst_ap = \"CCC\" and dst_ap = \"BBK\""
    },
    {
        "question": "What are the hometowns of gymnasts and the corresponding number of gymnasts ?",
        "db_id": "gymnast",
        "gold_parse": "SELECT T2.Hometown ,  COUNT(*) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown",
        "predicted_parse_with_values": "select T2.Hometown , count ( * ) from gymnast as T1 join people as T2 on T1.Gymnast_ID = T2.People_ID group by T2.Hometown"
    },
    {
        "question": "Count the number of different parties .",
        "db_id": "party_people",
        "gold_parse": "SELECT count(DISTINCT party_name) FROM party",
        "predicted_parse_with_values": "select count ( * ) from party"
    },
    {
        "question": "Find the locations that have more than one movie theater with capacity above 300 .",
        "db_id": "cinema",
        "gold_parse": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >  1",
        "predicted_parse_with_values": "select Location from cinema where Capacity > 208 group by Location having count ( Capacity ) > 1"
    },
    {
        "question": "What are the first names and office of the professors who are in the history department and have a Ph.D ?",
        "db_id": "college_1",
        "gold_parse": "SELECT T1.emp_fname ,  T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T3.dept_code  =  T2.dept_code WHERE T3.dept_name  =  'History' AND T2.prof_high_degree  =  'Ph.D.'",
        "predicted_parse_with_values": "select DEPT_CODE , PROF_OFFICE from PROFESSOR where DEPT_CODE = \"HIST\" intersect select T2.PROF_OFFICE , T2.PROF_OFFICE from DEPARTMENT as T1 join PROFESSOR as T2 on T1.DEPT_CODE = T2.DEPT_CODE where T1.DEPT_NAME = \"Economics/Finance\""
    },
    {
        "question": "Show the people that have been governor the most times .",
        "db_id": "election",
        "gold_parse": "SELECT Governor FROM party GROUP BY Governor ORDER BY COUNT(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select Governor from party group by Governor order by count ( * ) desc limit 1"
    },
    {
        "question": "What is the description of the color used by least products ?",
        "db_id": "products_gen_characteristics",
        "gold_parse": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code GROUP BY t2.color_description ORDER BY count(*) ASC LIMIT 1",
        "predicted_parse_with_values": "select T2.color_description from Products as T1 join Ref_Colors as T2 on T1.color_code = T2.color_code group by T1.color_code order by count ( * ) asc limit 1"
    },
    {
        "question": "What are the different locations of the school with the code BUS ?",
        "db_id": "college_1",
        "gold_parse": "SELECT count(DISTINCT dept_address) FROM department WHERE school_code  =  'BUS'",
        "predicted_parse_with_values": "select T4.DEPT_ADDRESS from CLASS as T1 join ENROLL as T2 on T1.CLASS_CODE = T2.CLASS_CODE join STUDENT as T3 on T2.STU_NUM = T3.STU_NUM join DEPARTMENT as T4 on T3.DEPT_CODE = T4.DEPT_CODE where T1.CLASS_CODE = 10016"
    },
    {
        "question": "Which student 's age is older than 18 and is majoring in 600 ? List each student 's first and last name .",
        "db_id": "restaurant_1",
        "gold_parse": "SELECT Fname , Lname FROM Student WHERE Age  >  18 AND Major = 600",
        "predicted_parse_with_values": "select Fname , LName from Student where Age > 20 intersect select Fname , LName from Student where Major = 100"
    },
    {
        "question": "Show different tourist attractions ' names , ids , and the corresponding number of visits .",
        "db_id": "cre_Theme_park",
        "gold_parse": "SELECT T1.Name ,  T2.Tourist_Attraction_ID ,   COUNT(*) FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID",
        "predicted_parse_with_values": "select Name , Tourist_Attraction_ID , count ( * ) from Tourist_Attractions group by Tourist_Attraction_ID"
    },
    {
        "question": "Find all students taught by MARROTTE KIRK . Output first and last names of students .",
        "db_id": "student_1",
        "gold_parse": "SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"MARROTTE\" AND T2.lastname  =  \"KIRK\"",
        "predicted_parse_with_values": "select T2.FirstName , T1.LastName from teachers as T1 join list as T2 where T1.FirstName = \" ALFREDA\" and T1.LastName = \"KRIENER\""
    },
    {
        "question": "What is the savings balance of the account belonging to the customer with the highest checking balance ?",
        "db_id": "small_bank_1",
        "gold_parse": "SELECT T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance DESC LIMIT 1",
        "predicted_parse_with_values": "select balance from SAVINGS order by balance desc limit 1"
    },
    {
        "question": "What is the name and country for the artist with most number of exhibitions ?",
        "db_id": "theme_gallery",
        "gold_parse": "SELECT T2.name , T2.country FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id GROUP BY T1.artist_id ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select Name , Country from artist group by Name order by count ( * ) desc limit 1"
    },
    {
        "question": "Find the name , age , and job title of persons who are friends with Alice for the longest years .",
        "db_id": "network_2",
        "gold_parse": "SELECT T1.name ,  T1.age ,  T1.job FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend =  'Alice' AND T2.year  =  (SELECT max(YEAR) FROM PersonFriend WHERE friend =  'Alice')",
        "predicted_parse_with_values": "select T2.name , T2.age , T2.job from PersonFriend as T1 join Person as T2 on T1.friend = T2.name where T1.year = ( select max ( T4.year ) from Person as T3 join PersonFriend as T4 on T3.name = T4.friend where T3.job = \"student\" )"
    },
    {
        "question": "Count the number of cities in Australia .",
        "db_id": "sakila_1",
        "gold_parse": "SELECT count(*) FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id WHERE T2.country  =  'Australia'",
        "predicted_parse_with_values": "select count ( * ) from city as T1 join country as T2 on T1.country_id = T2.country_id where T2.country = \"Brunei\""
    },
    {
        "question": "What is the latitude , longitude , and city of the station from which the trip with smallest duration started ?",
        "db_id": "bike_1",
        "gold_parse": "SELECT T1.lat ,  T1.long ,  T1.city FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id ORDER BY T2.duration LIMIT 1",
        "predicted_parse_with_values": "select T1.long , T1.lat , T1.city from station as T1 join trip as T2 order by T2.duration limit 1"
    },
    {
        "question": "Where does the customer with the first name Linda live ? And what is her email ?",
        "db_id": "sakila_1",
        "gold_parse": "SELECT T2.address ,  T1.email FROM customer AS T1 JOIN address AS T2 ON T2.address_id  =  T1.address_id WHERE T1.first_name  =  'LINDA'",
        "predicted_parse_with_values": "select email , last_name from customer where first_name = \"MINNIE\""
    },
    {
        "question": "For each grade 0 classroom , report the total number of students .",
        "db_id": "student_1",
        "gold_parse": "SELECT classroom ,  count(*) FROM list WHERE grade  =  \"0\" GROUP BY classroom",
        "predicted_parse_with_values": "select count ( * ) , Grade from list where Classroom = 111 group by Grade"
    },
    {
        "question": "through which states does the longest river in texas run",
        "db_id": "geo",
        "gold_parse": "SELECT traverse FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river WHERE traverse  =  \"texas\" )",
        "predicted_parse_with_values": "select T3.state_name from river as T1 join state as T2 on T1.traverse = T2.state_name join border_info as T3 on T2.state_name = T3.border where T1.length = \"dummy value\" order by T1.length desc limit 1"
    },
    {
        "question": "What is the flight number , origin , and destination for all flights in alphabetical order by departure cities ?",
        "db_id": "flight_1",
        "gold_parse": "SELECT flno ,  origin ,  destination FROM Flight ORDER BY origin",
        "predicted_parse_with_values": "select flno , origin , destination from flight order by destination"
    },
    {
        "question": "How many manufacturers have headquarters in either Tokyo or Beijing ?",
        "db_id": "manufactory_1",
        "gold_parse": "SELECT count(*) FROM manufacturers WHERE headquarter  =  'Tokyo' OR headquarter  =  'Beijing'",
        "predicted_parse_with_values": "select count ( * ) from Manufacturers where Headquarter = \"Taiwan\" or Founder = \"Andy\""
    },
    {
        "question": "How many actors were born in \" Los Angeles \" after 2000 ?",
        "db_id": "imdb",
        "gold_parse": "SELECT COUNT ( DISTINCT name  ) FROM actor WHERE birth_city  =  \"Los Angeles\" AND birth_year  >  2000",
        "predicted_parse_with_values": "select count ( * ) from actor where birth_city = \"dummy value\" and birth_year > \"dummy value\""
    },
    {
        "question": "Give the ids of documents with expenses that have the budget code 'SF ' .",
        "db_id": "cre_Docs_and_Epenses",
        "gold_parse": "SELECT document_id FROM Documents_with_expenses WHERE budget_type_code  =  'SF'",
        "predicted_parse_with_values": "select T2.Document_ID from Documents_with_Expenses as T1 join Documents as T2 on T1.Document_ID = T2.Document_ID where T1.Budget_Type_Code = \"SF\""
    },
    {
        "question": "What are the name and id of the three highest priced rooms ?",
        "db_id": "inn_1",
        "gold_parse": "SELECT RoomId ,  roomName FROM Rooms ORDER BY basePrice DESC LIMIT 3",
        "predicted_parse_with_values": "select roomName , RoomId from Rooms order by basePrice desc limit 1"
    },
    {
        "question": "Find the number of people whose age is greater than all engineers .",
        "db_id": "network_2",
        "gold_parse": "SELECT count(*) FROM Person WHERE age  >  (SELECT max(age) FROM person WHERE job  =  'engineer')",
        "predicted_parse_with_values": "select count ( * ) from Person where age > ( select min ( age ) from Person )"
    },
    {
        "question": "return me the papers on VLDB conference .",
        "db_id": "academic",
        "gold_parse": "SELECT t2.title FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\"",
        "predicted_parse_with_values": "select homepage from conference where name = \"dummy value\""
    },
    {
        "question": "What is the name of the airport that is the destination of the most number of routes that start in China ?",
        "db_id": "flight_4",
        "gold_parse": "SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE T1.country  =  'China' GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select T2.name from routes as T1 join airports as T2 on T1.src_apid = T2.apid join airlines as T3 on T1.alid = T3.alid where T3.country = \"Guinea\" group by T1.dst_ap order by count ( * ) desc limit 1"
    },
    {
        "question": "how many states does usa have",
        "db_id": "geo",
        "gold_parse": "SELECT COUNT ( state_name ) FROM state",
        "predicted_parse_with_values": "select count ( * ) from state where country_name = \"dummy value\""
    },
    {
        "question": "How many professors do have a Ph.D. degree ?",
        "db_id": "college_1",
        "gold_parse": "SELECT count(*) FROM professor WHERE prof_high_degree  =  'Ph.D.'",
        "predicted_parse_with_values": "select count ( PROF_HIGH_DEGREE ) from PROFESSOR where PROF_HIGH_DEGREE = \"DBA\""
    },
    {
        "question": "What is the total number of clubs that have less than 10 medals in total ?",
        "db_id": "sports_competition",
        "gold_parse": "SELECT count(*) FROM club_rank WHERE Total  <  10",
        "predicted_parse_with_values": "select count ( * ) from club_rank as T1 join club as T2 on T1.Club_ID = T2.Club_ID join competition_result as T3 on T2.Club_ID = T3.Club_ID_2 join competition as T4 on T3.Competition_ID = T4.Competition_ID where T1.Gold < 2.0"
    },
    {
        "question": "Show all the ranks and the number of male and female faculty for each rank .",
        "db_id": "activity_1",
        "gold_parse": "SELECT rank ,  sex ,  count(*) FROM Faculty GROUP BY rank ,  sex",
        "predicted_parse_with_values": "select Rank , count ( * ) , Sex from Faculty group by Sex"
    },
    {
        "question": "Which room has the highest rate ? List the room 's full name , rate , check in and check out date .",
        "db_id": "inn_1",
        "gold_parse": "SELECT T2.roomName ,  T1.Rate ,  T1.CheckIn ,  T1.CheckOut FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY T1.Rate DESC LIMIT 1",
        "predicted_parse_with_values": "select T1.roomName , T2.CheckIn , T2.Rate , max ( T2.Rate ) from Rooms as T1 join Reservations as T2 on T1.RoomId = T2.Room group by T1.RoomId"
    },
    {
        "question": "How many rooms cost more than 120 , for each different decor ?",
        "db_id": "inn_1",
        "gold_parse": "SELECT decor , count(*) FROM Rooms WHERE basePrice  >  120 GROUP BY decor",
        "predicted_parse_with_values": "select decor , count ( * ) from Rooms where basePrice > 150 group by decor"
    },
    {
        "question": "What is the salary and name of the employee who has the most number of certificates on aircrafts with distance more than 5000 ?",
        "db_id": "flight_1",
        "gold_parse": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.distance  >  5000 GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select T1.salary , T1.name from employee as T1 join certificate as T2 on T1.eid = T2.eid join aircraft as T3 on T2.aid = T3.aid join flight as T4 on T3.aid = T4.aid where T4.distance > 5478 group by T1.eid order by count ( * ) desc limit 1"
    },
    {
        "question": "Find the number of classes in each school .",
        "db_id": "college_1",
        "gold_parse": "SELECT count(*) ,  T3.school_code FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code  =  T2.crs_code JOIN department AS T3 ON T2.dept_code  =  T3.dept_code GROUP BY T3.school_code",
        "predicted_parse_with_values": "select count ( * ) , count ( * ) , CLASS_ROOM from CLASS group by CLASS_ROOM"
    },
    {
        "question": "Who is the oldest person ?",
        "db_id": "network_2",
        "gold_parse": "SELECT name FROM Person WHERE age  =  (SELECT max(age) FROM person)",
        "predicted_parse_with_values": "select name from Person order by age desc limit 1"
    },
    {
        "question": "what is the total population of the states that border texas",
        "db_id": "geo",
        "gold_parse": "SELECT SUM ( t2.population ) FROM state AS t2 JOIN border_info AS t1 ON t2.state_name  =  t1.border WHERE t1.state_name  =  \"texas\"",
        "predicted_parse_with_values": "select sum ( T2.population ) from border_info as T1 join state as T2 on T1.border = T2.state_name where T1.border = \"dummy value\""
    },
    {
        "question": "What are the names of customers who have a savings balance lower than their checking balance , and what is the total of their checking and savings balances ?",
        "db_id": "small_bank_1",
        "gold_parse": "SELECT T1.name ,  T3.balance + T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  <  T2.balance",
        "predicted_parse_with_values": "select T2.name , sum ( T1.balance ) from CHECKING as T1 join ACCOUNTS as T2 on T1.custid = T2.custid where T1.balance < ( select min ( balance ) from CHECKING )"
    },
    {
        "question": "Find the first names and offices of all instructors who have taught some course and the course description and the department name .",
        "db_id": "college_1",
        "gold_parse": "SELECT T2.emp_fname ,  T4.prof_office ,  T3.crs_description ,  T5.dept_name FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN professor AS T4 ON T2.emp_num  =  T4.emp_num JOIN department AS T5 ON T4.dept_code  =  T5.dept_code",
        "predicted_parse_with_values": "select T1.EMP_FNAME , T3.CRS_DESCRIPTION , T2.DEPT_NAME from EMPLOYEE as T1 join DEPARTMENT as T2 on T1.EMP_NUM = T2.EMP_NUM join COURSE as T3 on T2.DEPT_CODE = T3.DEPT_CODE where T3.CRS_CODE = \"ACCT-212\""
    },
    {
        "question": "Find the number of classes offered for all class rooms that held at least 2 classes .",
        "db_id": "college_1",
        "gold_parse": "SELECT count(*) ,  class_room FROM CLASS GROUP BY class_room HAVING count(*)  >=  2",
        "predicted_parse_with_values": "select count ( * ) from CLASS group by CLASS_ROOM having count ( * ) >= 1"
    },
    {
        "question": "Count the number of female Professors we have .",
        "db_id": "activity_1",
        "gold_parse": "SELECT count(*) FROM Faculty WHERE Sex  =  'F' AND Rank  =  \"Professor\"",
        "predicted_parse_with_values": "select count ( * ) from Faculty where Sex = \"F\""
    },
    {
        "question": "Which rank has the smallest number of faculty members ?",
        "db_id": "activity_1",
        "gold_parse": "SELECT rank FROM Faculty GROUP BY rank ORDER BY count(*) ASC LIMIT 1",
        "predicted_parse_with_values": "select Rank from Faculty group by Rank order by count ( * ) limit 1"
    },
    {
        "question": "Find the the name of the customers who have a loan with amount more than 3000 .",
        "db_id": "loan_1",
        "gold_parse": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE amount  >  3000",
        "predicted_parse_with_values": "select T3.cust_name from loan as T1 join bank as T2 on T1.branch_ID = T2.branch_ID join customer as T3 on T2.branch_ID = T3.branch_ID where T1.amount > 2050"
    },
    {
        "question": "what is the highest point in the smallest state",
        "db_id": "geo",
        "gold_parse": "SELECT t2.highest_point FROM highlow AS t2 JOIN state AS t1 ON t1.state_name  =  t2.state_name WHERE t1.area  =  ( SELECT MIN ( area ) FROM state )",
        "predicted_parse_with_values": "select max ( T3.highest_point ) from mountain as T1 join state as T2 on T1.state_name = T2.state_name join highlow as T3 on T2.state_name = T3.state_name where T1.state_name = ( select T4.state_name from state as T4 join highlow as T5 on T4.state_name = T5.state_name order by T5.lowest_point limit 1 )"
    },
    {
        "question": "What are the names of all cities and states ?",
        "db_id": "e_government",
        "gold_parse": "SELECT town_city FROM addresses UNION SELECT state_province_county FROM addresses",
        "predicted_parse_with_values": "select town_city , state_province_county from Addresses"
    },
    {
        "question": "how many states are there",
        "db_id": "geo",
        "gold_parse": "SELECT COUNT ( state_name ) FROM state",
        "predicted_parse_with_values": "select count ( * ) from state"
    },
    {
        "question": "what state has the highest elevation",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM highlow WHERE highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow )",
        "predicted_parse_with_values": "select T1.state_name from state as T1 join highlow as T2 on T1.state_name = T2.state_name order by T2.highest_elevation desc limit 1"
    },
    {
        "question": "List all company names with a book published by Alyson .",
        "db_id": "culture_company",
        "gold_parse": "SELECT T1.company_name FROM culture_company AS T1 JOIN book_club AS T2 ON T1.book_club_id  =  T2.book_club_id WHERE T2.publisher  =  'Alyson'",
        "predicted_parse_with_values": "select T1.Company_name from culture_company as T1 join book_club as T2 on T1.book_club_id = T2.book_club_id where T2.Book_Title = \"Obedience\""
    },
    {
        "question": "Which member names are shared among members in the party with the id 3 and the party with the id 1 ?",
        "db_id": "party_people",
        "gold_parse": "SELECT member_name FROM member WHERE party_id  =  3 INTERSECT SELECT member_name FROM member WHERE party_id  =  1",
        "predicted_parse_with_values": "select T2.Member_Name from party as T1 join member as T2 on T1.Party_ID = T2.Party_ID where T1.Party_ID = 4 intersect select T4.Member_Name from party as T3 join member as T4 on T3.Party_ID = T4.Party_ID where T3.Party_name = 3"
    },
    {
        "question": "What are the three colleges from which the most players are from ?",
        "db_id": "match_season",
        "gold_parse": "SELECT College FROM match_season GROUP BY College ORDER BY count(*) DESC LIMIT 3",
        "predicted_parse_with_values": "select T1.College from match_season as T1 join team as T2 on T1.Team = T2.Team_id join player as T3 on T2.Team_id = T3.Team group by T1.College order by count ( * ) desc limit 1"
    },
    {
        "question": "return me the keywords , which have been contained by more than 10 papers of \" H. V. Jagadish \" .",
        "db_id": "academic",
        "gold_parse": "SELECT t1.keyword FROM publication_keyword AS t5 JOIN keyword AS t1 ON t5.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t3.pid JOIN author AS t2 ON t4.aid  =  t2.aid WHERE t2.name  =  \"H. V. Jagadish\" GROUP BY t1.keyword HAVING COUNT ( DISTINCT t3.title )  >  10",
        "predicted_parse_with_values": "select T5.keyword from author as T1 join writes as T2 on T1.aid = T2.aid join publication as T3 on T2.pid = T3.pid join publication_keyword as T4 on T3.pid = T4.pid join keyword as T5 on T4.kid = T5.kid where T1.name = \"dummy value\" group by T5.keyword having count ( * ) > 1"
    },
    {
        "question": "how many cities does texas have",
        "db_id": "geo",
        "gold_parse": "SELECT COUNT ( city_name ) FROM city WHERE state_name  =  \"texas\"",
        "predicted_parse_with_values": "select count ( * ) from city where state_name = \"dummy value\""
    },
    {
        "question": "how many people live in the capital of texas",
        "db_id": "geo",
        "gold_parse": "SELECT population FROM city WHERE city_name  =  ( SELECT capital FROM state WHERE state_name  =  \"texas\" )",
        "predicted_parse_with_values": "select count ( * ) from state where capital = \"dummy value\""
    },
    {
        "question": "Find the name of songs that does not have a back vocal .",
        "db_id": "music_2",
        "gold_parse": "SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  \"back\"",
        "predicted_parse_with_values": "select Title from Songs where SongId not in ( select SongId from Vocals where Type = \"dummy value\" )"
    },
    {
        "question": "What is the number of movies directed by \" Woody Allen \" per year ?",
        "db_id": "imdb",
        "gold_parse": "SELECT COUNT ( DISTINCT t3.title  )  ,  t3.release_year FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.name  =  \"Woody Allen\" GROUP BY t3.release_year",
        "predicted_parse_with_values": "select count ( * ) , T5.name from actor as T1 join cast as T2 on T1.aid = T2.aid join copyright as T3 on T2.msid = T3.msid join directed_by as T4 on T3.msid = T4.msid join director as T5 on T4.did = T5.did where T1.name = \"dummy value\" group by T5.birth_year"
    },
    {
        "question": "Which position is most popular among players in the tryout ?",
        "db_id": "soccer_2",
        "gold_parse": "SELECT pPos FROM tryout GROUP BY pPos ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select T1.pPos from Tryout as T1 join Player as T2 on T1.pID = T2.pID group by T1.pPos order by count ( * ) desc limit 1"
    },
    {
        "question": "Find the names of the artists who are from Bangladesh and have never received rating higher than 7 .",
        "db_id": "music_1",
        "gold_parse": "SELECT DISTINCT artist_name FROM artist WHERE country  =  \"Bangladesh\" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating  >  7",
        "predicted_parse_with_values": "select T2.artist_name from song as T1 join artist as T2 on T1.artist_name = T2.artist_name where T2.country = \"India\" and T1.rating > 8"
    },
    {
        "question": "which states have a major city named austin",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM city WHERE city_name  =  \"austin\" AND population  >  150000",
        "predicted_parse_with_values": "select T1.state_name from border_info as T1 join state as T2 on T1.border = T2.state_name join city as T3 on T2.state_name = T3.state_name where T3.city_name = \"dummy value\""
    },
    {
        "question": "Show names of pilots that have more than one record .",
        "db_id": "pilot_record",
        "gold_parse": "SELECT T2.Pilot_name ,  COUNT(*) FROM pilot_record AS T1 JOIN pilot AS T2 ON T1.pilot_ID  =  T2.pilot_ID GROUP BY T2.Pilot_name HAVING COUNT(*)  >  1",
        "predicted_parse_with_values": "select Pilot_name from pilot group by Pilot_name having count ( * ) > 1"
    },
    {
        "question": "What is the name and country of origin of the artist who released a song that has \" love \" in its title ?",
        "db_id": "music_1",
        "gold_parse": "SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.song_name LIKE \"%love%\"",
        "predicted_parse_with_values": "select T2.artist_name , T1.country from song as T1 join artist as T2 on T1.artist_name = T2.artist_name where T1.song_name like \"Aj ei akash\""
    },
    {
        "question": "what is the population of the largest state",
        "db_id": "geo",
        "gold_parse": "SELECT population FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state )",
        "predicted_parse_with_values": "select population from state order by density desc limit 1"
    },
    {
        "question": "Find the first name and age of students who are living in the dorms that do not have amenity TV Lounge .",
        "db_id": "dorm_1",
        "gold_parse": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid NOT IN (SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid  =  T4.amenid WHERE T4.amenity_name  =  'TV Lounge')",
        "predicted_parse_with_values": "select Fname , Age from Student except select T1.Fname , T1.Age from Student as T1 join Lives_in as T2 on T1.StuID = T2.stuid join Dorm as T3 on T2.dormid = T3.dormid join Has_amenity as T4 on T3.dormid = T4.dormid join Dorm_amenity as T5 on T4.amenid = T5.amenid where T5.amenity_name = \"Air Conditioning\""
    },
    {
        "question": "Return the ids of the two department store chains with the most department stores .",
        "db_id": "department_store",
        "gold_parse": "SELECT dept_store_chain_id FROM department_stores GROUP BY dept_store_chain_id ORDER BY count(*) DESC LIMIT 2",
        "predicted_parse_with_values": "select T1.dept_store_chain_id from Department_Store_Chain as T1 join Department_Stores as T2 on T1.dept_store_chain_id = T2.dept_store_chain_id group by T2.dept_store_chain_id order by count ( * ) desc limit 1"
    },
    {
        "question": "Which ministers are not a part of the Progress Party ?",
        "db_id": "party_people",
        "gold_parse": "SELECT minister FROM party WHERE party_name != 'Progress Party'",
        "predicted_parse_with_values": "select Minister from party except select Minister from party where Party_name = 3"
    },
    {
        "question": "Find the claims that led to more than two settlements or have the maximum claim value . For each of them , return the date the claim was made and the id of the claim .",
        "db_id": "insurance_policies",
        "gold_parse": "SELECT T1.Date_Claim_Made ,  T1.Claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id GROUP BY T1.Claim_id HAVING count(*)  >  2 UNION SELECT T1.Date_Claim_Made ,  T1.Claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id WHERE T1.Amount_Claimed  =  ( SELECT max(Amount_Claimed) FROM Claims )",
        "predicted_parse_with_values": "select Date_Claim_Made , Claim_ID from Claims group by Claim_ID having count ( * ) > 1 union select Date_Claim_Made , Claim_ID from Claims group by Claim_ID having count ( * ) > 1"
    },
    {
        "question": "Which customer is associated with the latest policy ?",
        "db_id": "insurance_and_eClaims",
        "gold_parse": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.start_date  =  (SELECT max(start_date) FROM policies)",
        "predicted_parse_with_values": "select T1.Customer_Details from Customers as T1 join Policies as T2 on T1.Customer_ID = T2.Customer_ID order by T2.End_Date desc limit 1"
    },
    {
        "question": "What is the name and job title of the staff who was assigned the latest ?",
        "db_id": "department_store",
        "gold_parse": "SELECT T1.staff_name ,  T2.job_title_code FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id ORDER BY T2.date_assigned_to DESC LIMIT 1",
        "predicted_parse_with_values": "select T2.staff_name , T1.job_title_code from Staff_Department_Assignments as T1 join Staff as T2 on T1.staff_id = T2.staff_id order by T1.date_assigned_from desc limit 1"
    },
    {
        "question": "What is the least common media type in all tracks ?",
        "db_id": "chinook_1",
        "gold_parse": "SELECT T1.Name FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId  =  T2.MediaTypeId GROUP BY T2.MediaTypeId ORDER BY COUNT(*) ASC LIMIT 1",
        "predicted_parse_with_values": "select T2.Name from Track as T1 join MediaType as T2 on T1.MediaTypeId = T2.MediaTypeId group by T1.MediaTypeId order by count ( * ) asc limit 1"
    },
    {
        "question": "Show the locations of schools that have more than 1 player .",
        "db_id": "school_player",
        "gold_parse": "SELECT T2.Location FROM player AS T1 JOIN school AS T2 ON T1.School_ID  =  T2.School_ID GROUP BY T1.School_ID HAVING COUNT(*)  >  1",
        "predicted_parse_with_values": "select Location from school group by Location having count ( * ) > 1"
    },
    {
        "question": "Find the last names of teachers teaching in classroom 109 .",
        "db_id": "student_1",
        "gold_parse": "SELECT lastname FROM teachers WHERE classroom  =  109",
        "predicted_parse_with_values": "select T2.LastName from list as T1 join teachers as T2 where T1.Classroom = 111"
    },
    {
        "question": "Show all branch names with the number of members in each branch registered after 2015 .",
        "db_id": "shop_membership",
        "gold_parse": "SELECT T2.name ,  count(*) FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.register_year  >  2015 GROUP BY T2.branch_id",
        "predicted_parse_with_values": "select T2.Name , count ( * ) from membership_register_branch as T1 join branch as T2 on T1.Branch_ID = T2.Branch_ID where T1.Register_Year > 2016 group by T2.Name"
    },
    {
        "question": "What are the average ages for male and female students ?",
        "db_id": "allergy_1",
        "gold_parse": "SELECT avg(age) ,  sex FROM Student GROUP BY sex",
        "predicted_parse_with_values": "select avg ( Age ) from Student where Sex = \"M\" and Sex = \"F\""
    },
    {
        "question": "Which manager won the most manager award ? Give me the manager 's first name , last name and id .",
        "db_id": "baseball_1",
        "gold_parse": "SELECT T1.name_first ,  T1.name_last ,  T2.player_id FROM player AS T1 JOIN manager_award AS T2 ON T1.player_id  =  T2.player_id GROUP BY T2.player_id ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select T2.name_first , T1.player_id , T2.name_last from manager_award as T1 join player as T2 on T1.player_id = T2.player_id group by T1.award_id order by count ( * ) desc limit 1"
    },
    {
        "question": "What are the ids of all male students who do not play football ?",
        "db_id": "game_1",
        "gold_parse": "SELECT StuID FROM Student WHERE sex  =  'M' EXCEPT SELECT StuID FROM Sportsinfo WHERE sportname  =  \"Football\"",
        "predicted_parse_with_values": "select StuID from Student where Sex = \"F\" except select StuID from Student where Sex = \"F\""
    },
    {
        "question": "Find the different billing countries for all invoices .",
        "db_id": "chinook_1",
        "gold_parse": "SELECT distinct(BillingCountry) FROM INVOICE",
        "predicted_parse_with_values": "select BillingCountry from Invoice"
    },
    {
        "question": "What are the product id and product type of the cheapest product ?",
        "db_id": "department_store",
        "gold_parse": "SELECT product_id ,  product_type_code FROM products ORDER BY product_price LIMIT 1",
        "predicted_parse_with_values": "select product_id , product_type_code from Products order by product_price asc limit 1"
    },
    {
        "question": "which state border kentucky",
        "db_id": "geo",
        "gold_parse": "SELECT border FROM border_info WHERE state_name  =  \"kentucky\"",
        "predicted_parse_with_values": "select border from border_info where border = \"dummy value\""
    },
    {
        "question": "Which countries has the most number of airlines whose active status is ' Y ' ?",
        "db_id": "flight_4",
        "gold_parse": "SELECT country FROM airlines WHERE active  =  'Y' GROUP BY country ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select country from airlines where active = ( select max ( active ) from airlines where active = \"Y\" group by name order by count ( * ) desc limit 1 )"
    },
    {
        "question": "How films are produced by each studio ?",
        "db_id": "film_rank",
        "gold_parse": "SELECT Studio ,  COUNT(*) FROM film GROUP BY Studio",
        "predicted_parse_with_values": "select Title , Studio from film"
    },
    {
        "question": "Group by ships by flag , and return number of ships that have each flag .",
        "db_id": "ship_1",
        "gold_parse": "SELECT count(*) ,  flag FROM ship GROUP BY flag",
        "predicted_parse_with_values": "select Flag , count ( * ) from Ship group by Flag order by count ( * ) desc"
    },
    {
        "question": "What are the names and countries of origin for the artists who produced the top three highly rated songs .",
        "db_id": "music_1",
        "gold_parse": "SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name ORDER BY T2.rating DESC LIMIT 3",
        "predicted_parse_with_values": "select artist_name , country from song order by rating desc limit 1"
    },
    {
        "question": "Sort all the industries in descending order of the count of companies in each industry",
        "db_id": "company_office",
        "gold_parse": "SELECT Industry FROM Companies GROUP BY Industry ORDER BY COUNT(*) DESC",
        "predicted_parse_with_values": "select Industry , count ( * ) from Companies group by Industry order by count ( * ) desc"
    },
    {
        "question": "When was the school with the largest enrollment founded ?",
        "db_id": "university_basketball",
        "gold_parse": "SELECT founded FROM university ORDER BY enrollment DESC LIMIT 1",
        "predicted_parse_with_values": "select School from university order by Enrollment desc limit 1"
    },
    {
        "question": "What are the names of customers with accounts , and how many checking accounts do each of them have ?",
        "db_id": "small_bank_1",
        "gold_parse": "SELECT count(*) ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name",
        "predicted_parse_with_values": "select T2.name , count ( * ) from CHECKING as T1 join ACCOUNTS as T2 on T1.custid = T2.custid group by T1.custid"
    },
    {
        "question": "What are all the tv series created by \" Shonda Rhimes \" ?",
        "db_id": "imdb",
        "gold_parse": "SELECT t2.title FROM producer AS t1 JOIN made_by AS t3 ON t1.pid  =  t3.pid JOIN tv_series AS t2 ON t2.sid  =  t3.msid WHERE t1.name  =  \"Shonda Rhimes\"",
        "predicted_parse_with_values": "select T2.title from writer as T1 join tv_series as T2 where T1.name = \"dummy value\" and T1.name = \"dummy value\""
    },
    {
        "question": "how many rivers does idaho have",
        "db_id": "geo",
        "gold_parse": "SELECT COUNT ( river_name ) FROM river WHERE traverse  =  \"idaho\"",
        "predicted_parse_with_values": "select count ( * ) from river as T1 join state as T2 on T1.traverse = T2.state_name join border_info as T3 on T2.state_name = T3.border where T3.state_name = \"dummy value\""
    },
    {
        "question": "What are all role codes ?",
        "db_id": "cre_Doc_Control_Systems",
        "gold_parse": "SELECT role_code FROM ROLES",
        "predicted_parse_with_values": "select role_code from Employees"
    },
    {
        "question": "How many games are played for all football games by students on scholarship ?",
        "db_id": "game_1",
        "gold_parse": "SELECT sum(gamesplayed) FROM Sportsinfo WHERE sportname  =  \"Football\" AND onscholarship  =  'Y'",
        "predicted_parse_with_values": "select count ( * ) from SportsInfo where OnScholarship = \"N\""
    },
    {
        "question": "what is the capital of the state with the largest population",
        "db_id": "geo",
        "gold_parse": "SELECT capital FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state )",
        "predicted_parse_with_values": "select capital from state order by population desc limit 1"
    },
    {
        "question": "What is the last name of the musician that has been at the back position the most ?",
        "db_id": "music_2",
        "gold_parse": "SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id WHERE stageposition  =  \"back\" GROUP BY lastname ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select T4.Lastname from Tracklists as T1 join Songs as T2 on T1.SongId = T2.SongId join Vocals as T3 on T2.SongId = T3.SongId join Band as T4 on T3.Bandmate = T4.Id join Performance as T5 on T2.SongId = T5.SongId where T1.Position = \"dummy value\" group by T4.Lastname order by count ( T5.* ) desc limit 1"
    },
    {
        "question": "What are the ids of all students who do n't play sports ?",
        "db_id": "game_1",
        "gold_parse": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Sportsinfo",
        "predicted_parse_with_values": "select StuID from Student except select StuID from Plays_Games"
    },
    {
        "question": "What are the cities no customers live in ?",
        "db_id": "customers_and_addresses",
        "gold_parse": "SELECT city FROM addresses WHERE city NOT IN ( SELECT DISTINCT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id)",
        "predicted_parse_with_values": "select city from Addresses except select city from Addresses"
    },
    {
        "question": "which capitals are not major cities",
        "db_id": "geo",
        "gold_parse": "SELECT t2.capital FROM state AS t2 JOIN city AS t1 ON t2.capital  =  t1.city_name WHERE t1.population  <=  150000",
        "predicted_parse_with_values": "select city_name from city except select T1.capital from state as T1 join highlow as T2 on T1.state_name = T2.state_name where T2.highest_elevation = \"dummy value\""
    },
    {
        "question": "how many states have a city called springfield",
        "db_id": "geo",
        "gold_parse": "SELECT COUNT ( state_name ) FROM city WHERE city_name  =  \"springfield\"",
        "predicted_parse_with_values": "select count ( state_name ) from city where city_name = \"dummy value\""
    },
    {
        "question": "how many colorado rivers are there",
        "db_id": "geo",
        "gold_parse": "SELECT COUNT ( river_name ) FROM river WHERE river_name  =  \"colorado\"",
        "predicted_parse_with_values": "select count ( * ) from river as T1 join lake as T2 where T2.state_name = \"dummy value\""
    },
    {
        "question": "What are the names of the stations that are located in Palo Alto but have never been the ending point of the trips",
        "db_id": "bike_1",
        "gold_parse": "SELECT name FROM station WHERE city  =  \"Palo Alto\" EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  100",
        "predicted_parse_with_values": "select name from station where city = \"Palo Alto\" except select name from station"
    },
    {
        "question": "Which teachers teach the student named EVELINA BROMLEY ? Give me the first and last name of the teachers .",
        "db_id": "student_1",
        "gold_parse": "SELECT T2.firstname ,  T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"EVELINA\" AND T1.lastname  =  \"BROMLEY\"",
        "predicted_parse_with_values": "select T2.FirstName , T1.LastName from teachers as T1 join list as T2 where T1.FirstName = \" OTHA\" and T1.LastName = \"MARROTTE\""
    },
    {
        "question": "Find the name of accounts whose checking balance is higher than corresponding saving balance .",
        "db_id": "small_bank_1",
        "gold_parse": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T2.balance  >  T3.balance",
        "predicted_parse_with_values": "select T2.name from CHECKING as T1 join ACCOUNTS as T2 on T1.custid = T2.custid where T1.balance > ( select max ( balance ) from CHECKING )"
    },
    {
        "question": "what is the population density of wyoming",
        "db_id": "geo",
        "gold_parse": "SELECT density FROM state WHERE state_name  =  \"wyoming\"",
        "predicted_parse_with_values": "select density from state where area = \"dummy value\""
    },
    {
        "question": "List the names of people that are not employed by any company",
        "db_id": "company_employee",
        "gold_parse": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM employment)",
        "predicted_parse_with_values": "select Name from people except select Name from people"
    },
    {
        "question": "what rivers flow through the largest state",
        "db_id": "geo",
        "gold_parse": "SELECT river_name FROM river WHERE traverse IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) )",
        "predicted_parse_with_values": "select T1.river_name from river as T1 join lake as T2 where T2.state_name = ( select state_name from state order by density desc limit 1 )"
    },
    {
        "question": "For each zip code , select all those that have an average mean visiblity below 10 .",
        "db_id": "bike_1",
        "gold_parse": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  10",
        "predicted_parse_with_values": "select zip_code , avg ( mean_sea_level_pressure_inches ) from weather where group by zip_code having avg ( mean_sea_level_pressure_inches ) < 1"
    },
    {
        "question": "which states have points higher than the highest point in colorado",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM highlow WHERE highest_elevation  >  ( SELECT highest_elevation FROM highlow WHERE state_name  =  \"colorado\" )",
        "predicted_parse_with_values": "select T1.state_name from border_info as T1 join state as T2 on T1.border = T2.state_name join highlow as T3 on T2.state_name = T3.state_name where T3.highest_point > ( select max ( highest_point ) from highlow where highest_elevation = \"dummy value\" )"
    },
    {
        "question": "which shop has happy hour most frequently ? List its id and number of happy hours .",
        "db_id": "coffee_shop",
        "gold_parse": "SELECT shop_id ,  count(*) FROM happy_hour GROUP BY shop_id ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select Shop_ID , count ( * ) from happy_hour group by Shop_ID order by count ( * ) desc limit 1"
    },
    {
        "question": "How many medicines are offered by each trade name ?",
        "db_id": "medicine_enzyme_interaction",
        "gold_parse": "SELECT trade_name ,  count(*) FROM medicine GROUP BY trade_name",
        "predicted_parse_with_values": "select Trade_Name , count ( * ) from medicine group by Trade_Name"
    },
    {
        "question": "how high are the highest points of all the states",
        "db_id": "geo",
        "gold_parse": "SELECT highest_elevation FROM highlow",
        "predicted_parse_with_values": "select max ( highest_point ) from highlow"
    },
    {
        "question": "what are the states",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM state",
        "predicted_parse_with_values": "select state_name from state"
    },
    {
        "question": "return me the total citations of the papers in \" University of Michigan \" .",
        "db_id": "academic",
        "gold_parse": "SELECT SUM ( t4.citation_num ) FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t3 ON t3.aid  =  t1.aid JOIN publication AS t4 ON t3.pid  =  t4.pid WHERE t2.name  =  \"University of Michigan\"",
        "predicted_parse_with_values": "select sum ( T2.jid ) from organization as T1 join publication as T2 where T1.name = \"dummy value\""
    },
    {
        "question": "Find the first names of professors who are not playing Canoeing or Kayaking .",
        "db_id": "activity_1",
        "gold_parse": "SELECT lname FROM faculty WHERE rank  =  'Professor' EXCEPT SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' OR T3.activity_name  =  'Kayaking'",
        "predicted_parse_with_values": "select Fname from Faculty except select T3.Fname from Activity as T1 join Faculty_Participates_in as T2 on T1.actid = T2.actid join Faculty as T3 on T2.FacID = T3.FacID where T1.activity_name = \"Crossword Puzzles\""
    },
    {
        "question": "What are the names of customers who do not have saving accounts ?",
        "db_id": "loan_1",
        "gold_parse": "SELECT cust_name FROM customer EXCEPT SELECT cust_name FROM customer WHERE acc_type  =  'saving'",
        "predicted_parse_with_values": "select cust_name from customer except select cust_name from customer where acc_bal = 2000"
    },
    {
        "question": "return me the citations of \" Making database systems usable \" .",
        "db_id": "academic",
        "gold_parse": "SELECT citation_num FROM publication WHERE title  =  \"Making database systems usable\"",
        "predicted_parse_with_values": "select citation_num from publication where title = \"dummy value\""
    },
    {
        "question": "Show student ids who are on scholarship and have major 600 .",
        "db_id": "game_1",
        "gold_parse": "SELECT StuID FROM Student WHERE major  =  600 INTERSECT SELECT StuID FROM Sportsinfo WHERE onscholarship  =  'Y'",
        "predicted_parse_with_values": "select StuID from Student where Major = 520"
    },
    {
        "question": "which rivers run through the state with the lowest elevation in the usa",
        "db_id": "geo",
        "gold_parse": "SELECT river_name FROM river WHERE traverse IN ( SELECT state_name FROM highlow WHERE lowest_elevation  =  ( SELECT MIN ( lowest_elevation ) FROM highlow ) )",
        "predicted_parse_with_values": "select T1.river_name from river as T1 join state as T2 on T1.traverse = T2.state_name join highlow as T3 on T2.state_name = T3.state_name where T3.lowest_elevation = \"dummy value\" order by T3.lowest_elevation limit 1"
    },
    {
        "question": "Find the names of all artists that have \" a \" in their names .",
        "db_id": "chinook_1",
        "gold_parse": "SELECT Name FROM ARTIST WHERE Name LIKE \"%a%\"",
        "predicted_parse_with_values": "select Name from Artist where Name like \"Lulu Santos\""
    },
    {
        "question": "What is the total number of purchases for members with level 6 ?",
        "db_id": "shop_membership",
        "gold_parse": "SELECT count(*) FROM purchase AS T1 JOIN member AS T2 ON T1.member_id  =  T2.member_id WHERE T2.level  =  6",
        "predicted_parse_with_values": "select count ( * ) from purchase as T1 join member as T2 on T1.Member_ID = T2.Member_ID where T2.Level = 2"
    },
    {
        "question": "What is the name of the song that was released in the most recent year ?",
        "db_id": "music_1",
        "gold_parse": "SELECT song_name ,  releasedate FROM song ORDER BY releasedate DESC LIMIT 1",
        "predicted_parse_with_values": "select song_name from song order by releasedate desc limit 1"
    },
    {
        "question": "What instrument did the musician with last name \" Heilo \" use in the song \" Le Pop \" ?",
        "db_id": "music_2",
        "gold_parse": "SELECT T4.instrument FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId JOIN Instruments AS T4 ON T4.songid  =  T3.songid AND T4.bandmateid  =  T2.id WHERE T2.lastname  =  \"Heilo\" AND T3.title  =  \"Le Pop\"",
        "predicted_parse_with_values": "select T2.Instrument from Songs as T1 join Instruments as T2 on T1.SongId = T2.SongId where T1.Title = \"dummy value\""
    },
    {
        "question": "return me the journal that has the most number of papers containing keyword \" Relational Database \" .",
        "db_id": "academic",
        "gold_parse": "SELECT t3.name FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t2 ON t2.pid  =  t4.pid JOIN journal AS t3 ON t2.jid  =  t3.jid WHERE t1.keyword  =  \"Relational Database\" GROUP BY t3.name ORDER BY COUNT ( DISTINCT t2.title ) DESC LIMIT 1",
        "predicted_parse_with_values": "select count ( * ) , T1.jid from domain_journal as T1 join journal as T2 on T1.jid = T2.jid join publication as T3 on T2.jid = T3.jid join publication_keyword as T4 on T3.pid = T4.pid join keyword as T5 on T4.kid = T5.kid where T5.keyword = \"dummy value\" group by T1.jid order by count ( * ) desc limit 1"
    },
    {
        "question": "return me the paper with the most citations .",
        "db_id": "academic",
        "gold_parse": "SELECT title FROM publication ORDER BY citation_num DESC LIMIT 1",
        "predicted_parse_with_values": "select count ( jid ) , title from publication group by citation_num order by count ( jid ) desc"
    },
    {
        "question": "Return the full name of the staff who provided a customer with the first name April and the last name Burns with a film rental .",
        "db_id": "sakila_1",
        "gold_parse": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM staff AS T1 JOIN rental AS T2 ON T1.staff_id  =  T2.staff_id JOIN customer AS T3 ON T2.customer_id  =  T3.customer_id WHERE T3.first_name  =  'APRIL' AND T3.last_name  =  'BURNS'",
        "predicted_parse_with_values": "select T7.first_name , T3.last_name from customer as T1 join rental as T2 on T1.customer_id = T2.customer_id join staff as T3 on T2.staff_id = T3.staff_id join inventory as T4 on T2.inventory_id = T4.inventory_id join film as T5 on T4.film_id = T5.film_id join film_actor as T6 on T5.film_id = T6.film_id join actor as T7 on T6.actor_id = T7.actor_id where T1.first_name = \"MARTHA\" and T3.last_name = \"dummy value\""
    },
    {
        "question": "What are the product ids and color descriptions for products with two or more characteristics ?",
        "db_id": "products_gen_characteristics",
        "gold_parse": "SELECT t1.product_id ,  t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code JOIN product_characteristics AS t3 ON t1.product_id  =  t3.product_id GROUP BY t1.product_id HAVING count(*)  >=  2",
        "predicted_parse_with_values": "select T2.product_id , T3.color_description from Product_Characteristics as T1 join Products as T2 on T1.product_id = T2.product_id join Ref_Colors as T3 on T2.color_code = T3.color_code group by T1.product_id having count ( * ) >= 1"
    },
    {
        "question": "What are the document ids for the budget type code 'SF ' ?",
        "db_id": "cre_Docs_and_Epenses",
        "gold_parse": "SELECT document_id FROM Documents_with_expenses WHERE budget_type_code  =  'SF'",
        "predicted_parse_with_values": "select T4.Document_Type_Code from Ref_Budget_Codes as T1 join Documents_with_Expenses as T2 on T1.Budget_Type_Code = T2.Budget_Type_Code join Documents as T3 on T2.Document_ID = T3.Document_ID join Ref_Document_Types as T4 on T3.Document_Type_Code = T4.Document_Type_Code where T1.Budget_Type_Code = \"GV\""
    },
    {
        "question": "Find names of colleges with enrollment greater than that of some ( at least one ) college in the FL state .",
        "db_id": "soccer_2",
        "gold_parse": "SELECT DISTINCT cName FROM college WHERE enr  >  (SELECT min(enr) FROM college WHERE state  =  'FL')",
        "predicted_parse_with_values": "select cName from College where enr > ( select min ( enr ) from College where state = \"FL\" )"
    },
    {
        "question": "What is the average rating and resolution of all bangla songs ?",
        "db_id": "music_1",
        "gold_parse": "SELECT avg(rating) ,  avg(resolution) FROM song WHERE languages  =  \"bangla\"",
        "predicted_parse_with_values": "select avg ( rating ) , resolution from song where song_name = \"Shukno patar nupur pae\""
    },
    {
        "question": "What are the total number of students who are living in a male dorm ?",
        "db_id": "dorm_1",
        "gold_parse": "SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.gender  =  'M'",
        "predicted_parse_with_values": "select count ( * ) from Dorm as T1 join Lives_in as T2 on T1.dormid = T2.dormid where T1.gender = \"F\""
    },
    {
        "question": "how many rivers in idaho",
        "db_id": "geo",
        "gold_parse": "SELECT COUNT ( river_name ) FROM river WHERE traverse  =  \"idaho\"",
        "predicted_parse_with_values": "select count ( * ) from river as T1 join state as T2 on T1.traverse = T2.state_name where T2.state_name = \"dummy value\""
    },
    {
        "question": "What are the types of film market estimations in year 1995 ?",
        "db_id": "film_rank",
        "gold_parse": "SELECT TYPE FROM film_market_estimation WHERE YEAR  =  1995",
        "predicted_parse_with_values": "select Type from film_market_estimation where Year = 1944"
    },
    {
        "question": "For each file format , return the number of artists who released songs in that format .",
        "db_id": "music_1",
        "gold_parse": "SELECT count(*) ,  formats FROM files GROUP BY formats",
        "predicted_parse_with_values": "select count ( * ) , T2.formats from song as T1 join files as T2 on T1.f_id = T2.f_id group by T2.formats"
    },
    {
        "question": "Find the customer who started a policy most recently .",
        "db_id": "insurance_and_eClaims",
        "gold_parse": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.start_date  =  (SELECT max(start_date) FROM policies)",
        "predicted_parse_with_values": "select T1.Customer_Details from Customers as T1 join Policies as T2 on T1.Customer_ID = T2.Customer_ID order by T2.Start_Date desc limit 1"
    },
    {
        "question": "How many movies are there that are directed by \" Asghar Farhadi \" and featuring \" Taraneh Alidoosti \" ?",
        "db_id": "imdb",
        "gold_parse": "SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid  =  t1.aid JOIN movie AS t4 ON t4.mid  =  t5.msid JOIN directed_by AS t2 ON t4.mid  =  t2.msid JOIN director AS t3 ON t3.did  =  t2.did WHERE t1.name  =  \"Taraneh Alidoosti\" AND t3.name  =  \"Asghar Farhadi\"",
        "predicted_parse_with_values": "select count ( * ) from director where name = \"dummy value\" and name = \"dummy value\""
    },
    {
        "question": "Return the names of parties that have two or more events .",
        "db_id": "party_people",
        "gold_parse": "SELECT T2.party_name FROM party_events AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id HAVING count(*)  >=  2",
        "predicted_parse_with_values": "select Party_name from party group by Party_name having count ( * ) >= 1"
    },
    {
        "question": "Find the id and number of shops for the company that produces the most expensive furniture .",
        "db_id": "manufacturer",
        "gold_parse": "SELECT t1.manufacturer_id ,  t1.num_of_shops FROM manufacturer AS t1 JOIN furniture_manufacte AS t2 ON t1.manufacturer_id  =  t2.manufacturer_id ORDER BY t2.Price_in_Dollar DESC LIMIT 1",
        "predicted_parse_with_values": "select T1.Manufacturer_ID , count ( * ) from furniture_manufacte as T1 join furniture as T2 on T1.Furniture_ID = T2.Furniture_ID join manufacturer as T3 on T1.Manufacturer_ID = T3.Manufacturer_ID group by T3.Num_of_Shops order by sum ( T2.Market_Rate ) desc limit 1"
    },
    {
        "question": "How many female students ( sex is F ) whose age is below 25 ?",
        "db_id": "dorm_1",
        "gold_parse": "SELECT count(*) FROM student WHERE sex  =  'F' AND age  <  25",
        "predicted_parse_with_values": "select count ( * ) from Student where Sex = \"F\" and Sex = \"M\""
    },
    {
        "question": "which states do ohio river flow through",
        "db_id": "geo",
        "gold_parse": "SELECT traverse FROM river WHERE river_name  =  \"ohio\"",
        "predicted_parse_with_values": "select T3.state_name from river as T1 join state as T2 on T1.traverse = T2.state_name join border_info as T3 on T2.state_name = T3.border where T1.river_name = \"dummy value\""
    },
    {
        "question": "What are the ids of all aircrafts that can cover a distance of more than 1000 ?",
        "db_id": "flight_1",
        "gold_parse": "SELECT aid FROM Aircraft WHERE distance  >  1000",
        "predicted_parse_with_values": "select name from aircraft where distance > 1805"
    },
    {
        "question": "What are the names of customers with accounts , and what are the total savings balances for each ?",
        "db_id": "small_bank_1",
        "gold_parse": "SELECT sum(T2.balance) ,  T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name",
        "predicted_parse_with_values": "select T2.name , sum ( T1.balance ) from SAVINGS as T1 join ACCOUNTS as T2 on T1.custid = T2.custid group by T2.custid"
    },
    {
        "question": "List \" James Bond \" directors",
        "db_id": "imdb",
        "gold_parse": "SELECT t2.name FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t3.title  =  \"James Bond\"",
        "predicted_parse_with_values": "select name from director where name = \"dummy value\""
    },
    {
        "question": "what is the population of california",
        "db_id": "geo",
        "gold_parse": "SELECT population FROM state WHERE state_name  =  \"california\"",
        "predicted_parse_with_values": "select T2.population from city as T1 join state as T2 on T1.state_name = T2.state_name where T1.state_name = \"dummy value\""
    },
    {
        "question": "What are the city name , id , and number of addresses corresponding to the city with the most addressed ?",
        "db_id": "sakila_1",
        "gold_parse": "SELECT T2.city ,  count(*) ,  T1.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id  =  T2.city_id GROUP BY T1.city_id ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select city , city_id , count ( * ) from city group by city_id order by count ( * ) desc limit 1"
    },
    {
        "question": "What is the name of the artist with the greatest number of albums ?",
        "db_id": "chinook_1",
        "gold_parse": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId GROUP BY T2.Name ORDER BY COUNT(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select T1.Name from Artist as T1 join Album as T2 on T1.ArtistId = T2.ArtistId group by T2.ArtistId order by count ( * ) desc limit 1"
    },
    {
        "question": "What are the names of all students who tried out in alphabetical order ?",
        "db_id": "soccer_2",
        "gold_parse": "SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID ORDER BY T1.pName",
        "predicted_parse_with_values": "select T3.pName from College as T1 join Tryout as T2 on T1.cName = T2.cName join Player as T3 on T2.pID = T3.pID order by T1.enr"
    },
    {
        "question": "How many games were played in park \" Columbia Park \" in 1907 ?",
        "db_id": "baseball_1",
        "gold_parse": "SELECT count(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year = 1907 AND T2.park_name = 'Columbia Park'",
        "predicted_parse_with_values": "select count ( T2.city ) from home_game as T1 join park as T2 on T1.park_id = T2.park_id where T2.city = \"Miami\" and T1.year = 1926"
    },
    {
        "question": "what river flows through illinois",
        "db_id": "geo",
        "gold_parse": "SELECT river_name FROM river WHERE traverse  =  \"illinois\"",
        "predicted_parse_with_values": "select T1.river_name from river as T1 join state as T2 on T1.traverse = T2.state_name where T2.area = \"dummy value\""
    },
    {
        "question": "What are the distinct president votes on 08/30/2015 ?",
        "db_id": "voter_2",
        "gold_parse": "SELECT DISTINCT PRESIDENT_Vote FROM VOTING_RECORD WHERE Registration_Date  =  \"08/30/2015\"",
        "predicted_parse_with_values": "select President_Vote from Voting_record where President_Vote = 1004"
    },
    {
        "question": "Find the emails and phone numbers of all the customers , ordered by email address and phone number .",
        "db_id": "customer_complaints",
        "gold_parse": "SELECT email_address ,  phone_number FROM customers ORDER BY email_address ,  phone_number",
        "predicted_parse_with_values": "select email_address , phone_number from Customers order by email_address"
    },
    {
        "question": "what state is salem the capital of",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM state WHERE capital  =  \"salem\"",
        "predicted_parse_with_values": "select capital from state where capital = \"dummy value\""
    },
    {
        "question": "How many friends does Dan have ?",
        "db_id": "network_2",
        "gold_parse": "SELECT count(T2.friend) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T1.name  =  'Dan'",
        "predicted_parse_with_values": "select count ( * ) from Person where name = \"Alice\""
    },
    {
        "question": "How many books are there for each publisher ?",
        "db_id": "culture_company",
        "gold_parse": "SELECT publisher ,  count(*) FROM book_club GROUP BY publisher",
        "predicted_parse_with_values": "select count ( * ) , Publisher from book_club group by Publisher"
    },
    {
        "question": "Find the number of trains starting from each origin .",
        "db_id": "station_weather",
        "gold_parse": "SELECT origin ,  count(*) FROM train GROUP BY origin",
        "predicted_parse_with_values": "select count ( * ) , origin from train group by origin"
    },
    {
        "question": "What is the last name of the musicians who has played back position the most ?",
        "db_id": "music_2",
        "gold_parse": "SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id WHERE stageposition  =  \"back\" GROUP BY lastname ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select T4.Lastname from Tracklists as T1 join Songs as T2 on T1.SongId = T2.SongId join Vocals as T3 on T2.SongId = T3.SongId join Band as T4 on T3.Bandmate = T4.Id where T1.Position = \"dummy value\" group by T4.Lastname order by count ( * ) desc limit 1"
    },
    {
        "question": "What is the total number of people who could stay in the modern rooms in this inn ?",
        "db_id": "inn_1",
        "gold_parse": "SELECT sum(maxOccupancy) FROM Rooms WHERE decor  =  'modern'",
        "predicted_parse_with_values": "select count ( * ) from Rooms where bedType = \"Queen\""
    },
    {
        "question": "What is the total amount of products purchased before 2018-03-17 07:13:53 ?",
        "db_id": "customers_and_addresses",
        "gold_parse": "SELECT sum(t2.order_quantity) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id  =  t2.order_id WHERE t1.order_date  <  \"2018-03-17 07:13:53\"",
        "predicted_parse_with_values": "select sum ( T1.order_quantity ) from Order_Items as T1 join Customer_Orders as T2 on T1.order_id = T2.order_id join Customers as T3 on T2.customer_id = T3.customer_id join Customer_Contact_Channels as T4 on T3.customer_id = T4.customer_id where T4.active_from_date < \"2017-12-06 15:25:33\""
    },
    {
        "question": "Find all first-grade students who are NOT taught by OTHA MOYER . Report their first and last names .",
        "db_id": "student_1",
        "gold_parse": "SELECT DISTINCT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.grade  =  1 EXCEPT SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"OTHA\" AND T2.lastname  =  \"MOYER\"",
        "predicted_parse_with_values": "select T2.FirstName , T1.LastName from teachers as T1 join list as T2 except select T4.FirstName , T3.LastName from teachers as T3 join list as T4 where T3.FirstName = \" JEROME\""
    },
    {
        "question": "Find the name of branches where have some members whose hometown is in Louisville , Kentucky and some in Hiram , Georgia .",
        "db_id": "shop_membership",
        "gold_parse": "SELECT T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id JOIN member AS T3 ON T1.member_id  =  T3.member_id WHERE T3.Hometown  =  'Louisville ,  Kentucky' INTERSECT SELECT T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id JOIN member AS T3 ON T1.member_id  =  T3.member_id WHERE T3.Hometown  =  'Hiram ,  Georgia'",
        "predicted_parse_with_values": "select T1.Name from branch as T1 join purchase as T2 on T1.Branch_ID = T2.Branch_ID join member as T3 on T2.Member_ID = T3.Member_ID where T3.Hometown = \"Hiram , Georgia\" and T3.Hometown = \"Fort Campbell , Kentucky\""
    },
    {
        "question": "For each trip , return its ending station 's installation date .",
        "db_id": "bike_1",
        "gold_parse": "SELECT T1.id ,  T2.installation_date FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id",
        "predicted_parse_with_values": "select T1.installation_date , T2.end_date from station as T1 join trip as T2"
    },
    {
        "question": "Find the different first names and cities of the students who have allergy to milk or cat .",
        "db_id": "allergy_1",
        "gold_parse": "SELECT DISTINCT T1.fname ,  T1.city_code FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.stuid  =  T2.stuid WHERE T2.Allergy  =  \"Milk\" OR T2.Allergy  =  \"Cat\"",
        "predicted_parse_with_values": "select T3.Fname , T3.LName from Allergy_Type as T1 join Has_Allergy as T2 on T1.Allergy = T2.Allergy join Student as T3 on T2.StuID = T3.StuID where T1.Allergytype = \"environmental\" or T1.Allergytype = \"environmental\""
    },
    {
        "question": "how many citizens in california",
        "db_id": "geo",
        "gold_parse": "SELECT population FROM state WHERE state_name  =  \"california\"",
        "predicted_parse_with_values": "select sum ( population ) from state where state_name = \"dummy value\""
    },
    {
        "question": "what are the states through which the longest river runs",
        "db_id": "geo",
        "gold_parse": "SELECT traverse FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river )",
        "predicted_parse_with_values": "select T3.state_name from river as T1 join state as T2 on T1.traverse = T2.state_name join border_info as T3 on T2.state_name = T3.border order by T1.length desc limit 1"
    },
    {
        "question": "Find the ids of all distinct customers who made order after some orders that were Cancelled .",
        "db_id": "department_store",
        "gold_parse": "SELECT DISTINCT customer_id FROM Customer_Orders WHERE order_date  >  (SELECT min(order_date) FROM Customer_Orders WHERE order_status_code  =  \"Cancelled\")",
        "predicted_parse_with_values": "select T1.customer_id from Customers as T1 join Customer_Orders as T2 on T1.customer_id = T2.customer_id where T2.order_status_code = \"New\""
    },
    {
        "question": "List the names of all songs that have 4 minute duration or are in English .",
        "db_id": "music_1",
        "gold_parse": "SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.duration LIKE \"4:%\" UNION SELECT song_name FROM song WHERE languages  =  \"english\"",
        "predicted_parse_with_values": "select song_name from song where languages = \"bangla\" or languages = \"english\""
    },
    {
        "question": "What are the names of all stations that have more than 10 bikes available and are not located in San Jose ?",
        "db_id": "bike_1",
        "gold_parse": "SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  10 EXCEPT SELECT name FROM station WHERE city  =  \"San Jose\"",
        "predicted_parse_with_values": "select T1.name from station as T1 join status as T2 on T1.id = T2.station_id where T1.city = \"Mountain View\" and T2.bikes_available > 6"
    },
    {
        "question": "What is the id of the trip that started from the station with the highest dock count ?",
        "db_id": "bike_1",
        "gold_parse": "SELECT T1.id FROM trip AS T1 JOIN station AS T2 ON T1.start_station_id  =  T2.id ORDER BY T2.dock_count DESC LIMIT 1",
        "predicted_parse_with_values": "select T2.id from station as T1 join trip as T2 where T1.dock_count = ( select max ( dock_count ) from station )"
    },
    {
        "question": "Give me the name of the customer who ordered the most items in total .",
        "db_id": "customers_and_addresses",
        "gold_parse": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) DESC LIMIT 1",
        "predicted_parse_with_values": "select T3.customer_name from Order_Items as T1 join Customer_Orders as T2 on T1.order_id = T2.order_id join Customers as T3 on T2.customer_id = T3.customer_id group by T3.customer_id order by sum ( T1.order_quantity ) desc limit 1"
    },
    {
        "question": "What are the students ids of students who have more than one allergy ?",
        "db_id": "allergy_1",
        "gold_parse": "SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  2",
        "predicted_parse_with_values": "select T2.Fname from Has_Allergy as T1 join Student as T2 on T1.StuID = T2.StuID group by T1.StuID having count ( * ) > 1"
    },
    {
        "question": "How many female students live in Smith Hall ?",
        "db_id": "dorm_1",
        "gold_parse": "SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.dorm_name  =  'Smith Hall' AND T1.sex  =  'F'",
        "predicted_parse_with_values": "select count ( * ) from Dorm as T1 join Lives_in as T2 on T1.dormid = T2.dormid where T1.gender = \"X\" and T1.gender = \"X\""
    },
    {
        "question": "What is department name and office for the professor whose last name is Heffington ?",
        "db_id": "college_1",
        "gold_parse": "SELECT T3.dept_name  ,  T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T2.dept_code  =  T3.dept_code WHERE T1.emp_lname  =  'Heffington'",
        "predicted_parse_with_values": "select T2.DEPT_NAME , T3.PROF_OFFICE from STUDENT as T1 join DEPARTMENT as T2 on T1.DEPT_CODE = T2.DEPT_CODE join PROFESSOR as T3 on T2.DEPT_CODE = T3.DEPT_CODE where T1.STU_LNAME = \"Robertson\""
    },
    {
        "question": "what are the population of california",
        "db_id": "geo",
        "gold_parse": "SELECT population FROM state WHERE state_name  =  \"california\"",
        "predicted_parse_with_values": "select T2.population from city as T1 join state as T2 on T1.state_name = T2.state_name where T1.state_name = \"dummy value\""
    },
    {
        "question": "Find the number of students who are older than 18 and do not have allergy to either food or animal .",
        "db_id": "allergy_1",
        "gold_parse": "SELECT count(*) FROM Student WHERE age  >  18 AND StuID NOT IN ( SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\" OR T2.allergytype  =  \"animal\")",
        "predicted_parse_with_values": "select count ( * ) from Student where Age > 19 except select count ( * ) from Student where Age != 20"
    },
    {
        "question": "Give me the the customer details and id for the customers who had two or more policies but did not file any claims .",
        "db_id": "insurance_policies",
        "gold_parse": "SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2 EXCEPT SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.customer_id JOIN Claims AS T3 ON T2.policy_id  =  T3.policy_id",
        "predicted_parse_with_values": "select T2.Customer_Details , T2.Customer_ID from Customer_Policies as T1 join Customers as T2 on T1.Customer_ID = T2.Customer_ID where T1.Customer_ID not in ( select Customer_ID from Customer_Policies )"
    },
    {
        "question": "Find the names of the candidates whose support percentage is lower than their oppose rate .",
        "db_id": "candidate_poll",
        "gold_parse": "SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id WHERE t2.support_rate  <  t2.oppose_rate",
        "predicted_parse_with_values": "select T1.Name from people as T1 join candidate as T2 on T1.People_ID = T2.People_ID where T2.Support_rate < ( select min ( Support_rate ) from candidate )"
    },
    {
        "question": "Find the name of the products that have the color description \" red \" and have the characteristic name \" fast \" .",
        "db_id": "products_gen_characteristics",
        "gold_parse": "SELECT product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code  =  t4.color_code WHERE t4.color_description  =  \"red\" AND t3.characteristic_name  =  \"fast\"",
        "predicted_parse_with_values": "select T1.product_name from Products as T1 join Ref_Colors as T2 on T1.color_code = T2.color_code where T2.color_description = \"purple\" and T1.product_description = \"eius\""
    },
    {
        "question": "What are all the players who played in match season , sorted by college in ascending alphabetical order ?",
        "db_id": "match_season",
        "gold_parse": "SELECT player FROM match_season ORDER BY College ASC",
        "predicted_parse_with_values": "select T3.Player from match_season as T1 join team as T2 on T1.Team = T2.Team_id join player as T3 on T2.Team_id = T3.Team order by T1.College , T1.College"
    },
    {
        "question": "Find the first names of all professors in the Accounting department who is teaching some course and the class room .",
        "db_id": "college_1",
        "gold_parse": "SELECT T2.emp_fname ,  T1.class_room FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN professor AS T3 ON T2.emp_num  =  T3.emp_num JOIN department AS T4 ON T4.dept_code  =  T3.dept_code WHERE T4.dept_name  =  'Accounting'",
        "predicted_parse_with_values": "select T5.PROF_OFFICE , T1.CLASS_ROOM from CLASS as T1 join ENROLL as T2 on T1.CLASS_CODE = T2.CLASS_CODE join STUDENT as T3 on T2.STU_NUM = T3.STU_NUM join DEPARTMENT as T4 on T3.DEPT_CODE = T4.DEPT_CODE join PROFESSOR as T5 on T4.DEPT_CODE = T5.DEPT_CODE where T4.DEPT_NAME = \"Economics/Finance\""
    },
    {
        "question": "What is the customer id , first and last name with least number of accounts .",
        "db_id": "customers_card_transactions",
        "gold_parse": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1",
        "predicted_parse_with_values": "select T1.customer_id , T2.customer_first_name , T2.customer_last_name from Accounts as T1 join Customers as T2 group by T1.customer_id order by count ( * ) asc limit 1"
    },
    {
        "question": "what state has the most people",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state )",
        "predicted_parse_with_values": "select state_name from state group by state_name order by count ( * ) desc limit 1"
    },
    {
        "question": "What are the distinct last names of the students who have class president votes ?",
        "db_id": "voter_2",
        "gold_parse": "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.CLASS_President_VOTE",
        "predicted_parse_with_values": "select T2.LName from Voting_record as T1 join Student as T2 on T1.Class_Senator_Vote = T2.StuID where T1.Class_Senator_Vote = 1028"
    },
    {
        "question": "What is the phone number and postal code of the address 1031 Daugavpils Parkway ?",
        "db_id": "sakila_1",
        "gold_parse": "SELECT phone ,  postal_code FROM address WHERE address  =  '1031 Daugavpils Parkway'",
        "predicted_parse_with_values": "select phone , postal_code from address where address2 = \"None\""
    },
    {
        "question": "What are the cities that have more than 2 airports sorted by number of airports ?",
        "db_id": "flight_4",
        "gold_parse": "SELECT city FROM airports GROUP BY city HAVING count(*)  >  2 ORDER BY count(*)",
        "predicted_parse_with_values": "select city from airports group by city having count ( * ) > 1 order by count ( * ) > 1"
    },
    {
        "question": "What are the names and account balances of customers with the letter a in their names ?",
        "db_id": "loan_1",
        "gold_parse": "SELECT cust_name ,  acc_bal FROM customer WHERE cust_name LIKE '%a%'",
        "predicted_parse_with_values": "select cust_name , acc_bal from customer where acc_type like \"checking\""
    },
    {
        "question": "Report the first name and last name of all the students .",
        "db_id": "student_1",
        "gold_parse": "SELECT DISTINCT firstname ,  lastname FROM list",
        "predicted_parse_with_values": "select FirstName , LastName from list"
    },
    {
        "question": "List venues of all matches in the order of their dates starting from the most recent one .",
        "db_id": "city_record",
        "gold_parse": "SELECT venue FROM MATCH ORDER BY date DESC",
        "predicted_parse_with_values": "select Venue from match order by Date desc limit 1"
    },
    {
        "question": "Which grade is studying in room 105 ?",
        "db_id": "student_1",
        "gold_parse": "SELECT DISTINCT grade FROM list WHERE classroom  =  105",
        "predicted_parse_with_values": "select Grade from list where Classroom = 104"
    },
    {
        "question": "What is the type of vocables that appears most frequently ?",
        "db_id": "music_2",
        "gold_parse": "SELECT TYPE FROM vocals GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select T1.Type from Vocals as T1 join Songs as T2 on T1.SongId = T2.SongId join Instruments as T3 on T2.SongId = T3.SongId group by T1.Type order by count ( * ) desc limit 1"
    },
    {
        "question": "Find the first name of students living in city PHL whose age is between 20 and 25 .",
        "db_id": "dorm_1",
        "gold_parse": "SELECT fname FROM student WHERE city_code  =  'PHL' AND age BETWEEN 20 AND 25",
        "predicted_parse_with_values": "select Fname from Student where Age between 20 and value"
    },
    {
        "question": "For each station , find its latitude and the minimum duration of trips that ended at the station .",
        "db_id": "bike_1",
        "gold_parse": "SELECT T1.name ,  T1.lat ,  min(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.end_station_id GROUP BY T2.end_station_id",
        "predicted_parse_with_values": "select T1.lat , T2.duration from station as T1 join trip as T2"
    },
    {
        "question": "What is the count of aircrafts that have a distance between 1000 and 5000 ?",
        "db_id": "flight_1",
        "gold_parse": "SELECT count(*) FROM Aircraft WHERE distance BETWEEN 1000 AND 5000",
        "predicted_parse_with_values": "select count ( * ) from flight as T1 join aircraft as T2 on T1.aid = T2.aid where T1.distance between 802 and value"
    },
    {
        "question": "Return the maximum support rate , minimum consider rate , and minimum oppose rate across all candidates ?",
        "db_id": "candidate_poll",
        "gold_parse": "SELECT max(support_rate) ,  min(consider_rate) ,  min(oppose_rate) FROM candidate",
        "predicted_parse_with_values": "select max ( Support_rate ) , min ( Oppose_rate ) , Consider_rate from candidate"
    },
    {
        "question": "Return the rank for which there are the fewest captains .",
        "db_id": "ship_1",
        "gold_parse": "SELECT rank FROM captain GROUP BY rank ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select Rank from captain group by Rank order by count ( * ) limit 1"
    },
    {
        "question": "What are the last names for all scholarship students ?",
        "db_id": "game_1",
        "gold_parse": "SELECT T2.Lname FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T1.onscholarship  =  'Y'",
        "predicted_parse_with_values": "select LName from Student"
    },
    {
        "question": "what is capital of the state with the lowest point",
        "db_id": "geo",
        "gold_parse": "SELECT t1.capital FROM highlow AS t2 JOIN state AS t1 ON t1.state_name  =  t2.state_name WHERE t2.lowest_elevation  =  ( SELECT MIN ( lowest_elevation ) FROM highlow ) ",
        "predicted_parse_with_values": "select T1.capital from state as T1 join highlow as T2 on T1.state_name = T2.state_name order by T2.lowest_point limit 1"
    },
    {
        "question": "Find the titles of all the papers written by \" Aaron Turon \" .",
        "db_id": "icfp_1",
        "gold_parse": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Aaron\" AND t1.lname  =  \"Turon\"",
        "predicted_parse_with_values": "select T3.title from Authors as T1 join Authorship as T2 on T1.authID = T2.authID join Papers as T3 on T2.paperID = T3.paperID where T1.fname = \"Katsuhiro\""
    },
    {
        "question": "How many airports are there per city in the US ordered from most to least ?",
        "db_id": "flight_4",
        "gold_parse": "SELECT count(*) ,  city FROM airports WHERE country  =  'United States' GROUP BY city ORDER BY count(*) DESC",
        "predicted_parse_with_values": "select city , count ( * ) from airports group by city order by count ( * ) desc"
    },
    {
        "question": "Find the first names of all customers that live in Brazil and have an invoice .",
        "db_id": "chinook_1",
        "gold_parse": "SELECT DISTINCT T1.FirstName FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  \"Brazil\"",
        "predicted_parse_with_values": "select FirstName from Customer where Country = \"Ireland\" intersect select FirstName from Customer where Country = \"Austria\""
    },
    {
        "question": "return me the total citations of all the papers in PVLDB .",
        "db_id": "academic",
        "gold_parse": "SELECT SUM ( t2.citation_num ) FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\"",
        "predicted_parse_with_values": "select ( T1.jid ) from publication as T1 join writes as T2 on T1.pid = T2.pid join author as T3 on T2.aid = T3.aid where T3.name = \"dummy value\""
    },
    {
        "question": "List all the name of organizations in order of the date formed .",
        "db_id": "e_government",
        "gold_parse": "SELECT organization_name FROM organizations ORDER BY date_formed ASC",
        "predicted_parse_with_values": "select organization_name from Organizations order by date_formed"
    },
    {
        "question": "Return the names of all counties sorted by population in ascending order .",
        "db_id": "election",
        "gold_parse": "SELECT County_name FROM county ORDER BY Population ASC",
        "predicted_parse_with_values": "select County_name from county order by Population"
    },
    {
        "question": "what states neighbor kentucky",
        "db_id": "geo",
        "gold_parse": "SELECT border FROM border_info WHERE state_name  =  \"kentucky\"",
        "predicted_parse_with_values": "select state_name from state where area like \"dummy value\""
    },
    {
        "question": "What are the allergies and their types ?",
        "db_id": "allergy_1",
        "gold_parse": "SELECT allergy ,  allergytype FROM Allergy_type",
        "predicted_parse_with_values": "select T1.Allergy , T2.Allergytype from Has_Allergy as T1 join Allergy_Type as T2 on T1.Allergy = T2.Allergy"
    },
    {
        "question": "Show each author and the number of workshops they submitted to .",
        "db_id": "workshop_paper",
        "gold_parse": "SELECT T2.Author ,  COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID GROUP BY T2.Author",
        "predicted_parse_with_values": "select T1.Author , count ( * ) from submission as T1 join Acceptance as T2 on T1.Submission_ID = T2.Submission_ID join workshop as T3 on T2.Workshop_ID = T3.Workshop_ID group by T1.Author"
    },
    {
        "question": "how many people are there in california",
        "db_id": "geo",
        "gold_parse": "SELECT population FROM state WHERE state_name  =  \"california\"",
        "predicted_parse_with_values": "select count ( * ) from state where state_name = \"dummy value\""
    },
    {
        "question": "Show all statement id and the number of accounts for each statement .",
        "db_id": "cre_Docs_and_Epenses",
        "gold_parse": "SELECT STATEMENT_ID ,  count(*) FROM Accounts GROUP BY STATEMENT_ID",
        "predicted_parse_with_values": "select T2.Statement_ID , count ( * ) from Statements as T1 join Accounts as T2 on T1.Statement_ID = T2.Statement_ID group by T2.Statement_ID"
    },
    {
        "question": "Compute the average active time span of contact channels .",
        "db_id": "customers_and_addresses",
        "gold_parse": "SELECT avg(active_to_date - active_from_date) FROM customer_contact_channels",
        "predicted_parse_with_values": "select avg ( active_to_date ) from Customer_Contact_Channels"
    },
    {
        "question": "How many female students have milk or egg allergies ?",
        "db_id": "allergy_1",
        "gold_parse": "SELECT count(*) FROM has_allergy AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.sex  =  \"F\" AND T1.allergy  =  \"Milk\" OR T1.allergy  =  \"Eggs\"",
        "predicted_parse_with_values": "select count ( * ) from Student where Sex = \"M\" or Sex = \"M\""
    },
    {
        "question": "List all the distinct president votes and the vice president votes .",
        "db_id": "voter_2",
        "gold_parse": "SELECT DISTINCT President_Vote ,  VICE_President_Vote FROM VOTING_RECORD",
        "predicted_parse_with_values": "select Vice_President_Vote , count ( President_Vote ) from Voting_record group by Vice_President_Vote"
    },
    {
        "question": "Which state can address \" 6862 Kaitlyn Knolls \" possibly be in ?",
        "db_id": "e_government",
        "gold_parse": "SELECT state_province_county FROM addresses WHERE line_1_number_building LIKE \"%6862 Kaitlyn Knolls%\"",
        "predicted_parse_with_values": "select state_province_county from Addresses where town_city = \"Lake Meaghan\""
    },
    {
        "question": "What are the players who played for Columbus Crew , and how many years did each play for ?",
        "db_id": "match_season",
        "gold_parse": "SELECT T1.Player , T1.Years_Played FROM player AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Columbus Crew\"",
        "predicted_parse_with_values": "select T1.Player , count ( * ) from player as T1 join team as T2 on T1.Team = T2.Team_id where T2.Name = \"Miami Fusion\" group by T1.Player"
    },
    {
        "question": "What are the ids , names and FDA approval status of medicines in descending order of the number of enzymes that it can interact with .",
        "db_id": "medicine_enzyme_interaction",
        "gold_parse": "SELECT T1.id ,  T1.Name ,  T1.FDA_approved FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id ORDER BY count(*) DESC",
        "predicted_parse_with_values": "select id , name , FDA_approved , count ( * ) from medicine group by id order by count ( * ) desc"
    },
    {
        "question": "What are the first names and last names of the students who are 18 years old and have vice president votes .",
        "db_id": "voter_2",
        "gold_parse": "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_President_VOTE WHERE T1.age  =  18",
        "predicted_parse_with_values": "select Fname , LName from Student where Age = 17 and Age = 17"
    },
    {
        "question": "What are the names of all students who successfully tried out for the position of striker ?",
        "db_id": "soccer_2",
        "gold_parse": "SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes' AND T2.pPos  =  'striker'",
        "predicted_parse_with_values": "select T2.pName from Tryout as T1 join Player as T2 on T1.pID = T2.pID where T1.pPos = \"mid\""
    },
    {
        "question": "Find the first name and last name for the \" CTO \" of the club \" Hopkins Student Enterprises \" ?",
        "db_id": "club_1",
        "gold_parse": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Hopkins Student Enterprises\" AND t2.position  =  \"CTO\"",
        "predicted_parse_with_values": "select T1.Fname , T1.LName from Student as T1 join Member_of_club as T2 on T1.StuID = T2.StuID join Club as T3 on T2.ClubID = T3.ClubID where T3.ClubName = \"Hopkins Student Enterprises\""
    },
    {
        "question": "Which people severed as comptroller most frequently ? Give me the name of the person and the frequency count .",
        "db_id": "election",
        "gold_parse": "SELECT Comptroller ,  COUNT(*) FROM party GROUP BY Comptroller ORDER BY COUNT(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select count ( * ) , Comptroller from party group by Comptroller order by count ( * ) desc limit 1"
    },
    {
        "question": "Show the party that has the most people .",
        "db_id": "debate",
        "gold_parse": "SELECT Party FROM people GROUP BY Party ORDER BY COUNT(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select T3.Party from debate as T1 join debate_people as T2 on T1.Debate_ID = T2.Debate_ID join people as T3 on T2.Negative = T3.People_ID order by T1.Num_of_Audience desc limit 1"
    },
    {
        "question": "Find the id of songs that are available in mp4 format and have resolution lower than 1000 .",
        "db_id": "music_1",
        "gold_parse": "SELECT f_id FROM files WHERE formats  =  \"mp4\" INTERSECT SELECT f_id FROM song WHERE resolution  <  1000",
        "predicted_parse_with_values": "select T1.f_id from song as T1 join files as T2 on T1.f_id = T2.f_id where T2.formats = \"mp4\" and T1.resolution < 720"
    },
    {
        "question": "which states does not border texas",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM state WHERE state_name NOT IN ( SELECT border FROM border_info WHERE state_name  =  \"texas\" )",
        "predicted_parse_with_values": "select T2.state_name from border_info as T1 join state as T2 on T1.border = T2.state_name where T1.border != \"dummy value\""
    },
    {
        "question": "Find the name and id of the team that won the most times in 2008 postseason .",
        "db_id": "baseball_1",
        "gold_parse": "SELECT T2.name ,  T1.team_id_winner FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T1.year  =  2008 GROUP BY T1.team_id_winner ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select T2.name , T2.div_win from postseason as T1 join team as T2 where T2.year = 2008 group by T1.team_id_winner order by count ( * ) desc limit 1"
    },
    {
        "question": "what are the capitals of the states that border texas",
        "db_id": "geo",
        "gold_parse": "SELECT t2.capital FROM state AS t2 JOIN border_info AS t1 ON t2.state_name  =  t1.border WHERE t1.state_name  =  \"texas\"",
        "predicted_parse_with_values": "select T2.capital from border_info as T1 join state as T2 on T1.border = T2.state_name where T1.border = \"dummy value\""
    },
    {
        "question": "which is the highest peak not in alaska",
        "db_id": "geo",
        "gold_parse": "SELECT mountain_name FROM mountain WHERE mountain_altitude  =  ( SELECT MAX ( mountain_altitude ) FROM mountain WHERE state_name != \"alaska\" )",
        "predicted_parse_with_values": "select mountain_name from mountain where mountain_name != \"dummy value\" order by mountain_altitude desc limit 1"
    },
    {
        "question": "What is the number of different different airports that are destinations for American Airlines ?",
        "db_id": "flight_4",
        "gold_parse": "SELECT count(DISTINCT dst_apid) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid WHERE T1.name  =  'American Airlines'",
        "predicted_parse_with_values": "select count ( T1.dst_ap ) from routes as T1 join airlines as T2 on T1.alid = T2.alid where T2.name = \"Aerotaxi del Cabo\""
    },
    {
        "question": "return me the papers written by \" H. V. Jagadish \" and \" Yunyao Li \" on PVLDB after 2005 .",
        "db_id": "academic",
        "gold_parse": "SELECT t6.title FROM publication AS t6 JOIN journal AS t4 ON t6.jid  =  t4.jid JOIN writes AS t3 ON t3.pid  =  t6.pid JOIN writes AS t5 ON t5.pid  =  t6.pid JOIN author AS t1 ON t5.aid  =  t1.aid JOIN author AS t2 ON t3.aid  =  t2.aid WHERE t2.name  =  \"H. V. Jagadish\" AND t1.name  =  \"Yunyao Li\" AND t4.name  =  \"PVLDB\" AND t6.year  >  2005",
        "predicted_parse_with_values": "select T1.name from organization as T1 join publication as T2 join cite as T3 where T3.cited = \"dummy value\" and T2.year > \"dummy value\""
    },
    {
        "question": "How many airports are there per city in the United States ? Order the cities by decreasing number of airports .",
        "db_id": "flight_4",
        "gold_parse": "SELECT count(*) ,  city FROM airports WHERE country  =  'United States' GROUP BY city ORDER BY count(*) DESC",
        "predicted_parse_with_values": "select count ( * ) , city from airports group by city order by count ( * ) desc"
    },
    {
        "question": "What are the ids of the students who are under 20 years old and are involved in at least one activity .",
        "db_id": "activity_1",
        "gold_parse": "SELECT StuID FROM Participates_in INTERSECT SELECT StuID FROM Student WHERE age  <  20",
        "predicted_parse_with_values": "select T2.StuID from Participates_in as T1 join Student as T2 on T1.stuid = T2.StuID where T2.Age < 19 group by T1.stuid having count ( * ) >= 1"
    },
    {
        "question": "Show all student IDs with the number of sports and total number of games played",
        "db_id": "game_1",
        "gold_parse": "SELECT StuID ,  count(*) ,  sum(gamesplayed) FROM Sportsinfo GROUP BY StuID",
        "predicted_parse_with_values": "select StuID , count ( * ) from Plays_Games group by StuID"
    },
    {
        "question": "Who directed the movie \" James Bond \" ?",
        "db_id": "imdb",
        "gold_parse": "SELECT t2.name FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t3.title  =  \"James Bond\"",
        "predicted_parse_with_values": "select T5.name from actor as T1 join cast as T2 on T1.aid = T2.aid join copyright as T3 on T2.msid = T3.msid join directed_by as T4 on T3.msid = T4.msid join director as T5 on T4.did = T5.did where T1.name = \"dummy value\""
    },
    {
        "question": "How many sections does each course have ?",
        "db_id": "college_1",
        "gold_parse": "SELECT count(*) ,  crs_code FROM CLASS GROUP BY crs_code",
        "predicted_parse_with_values": "select count ( * ) , CRS_CODE from COURSE group by CRS_CODE"
    },
    {
        "question": "what is the biggest capital city in the us",
        "db_id": "geo",
        "gold_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( t1.population ) FROM state AS t2 JOIN city AS t1 ON t2.capital  =  t1.city_name )",
        "predicted_parse_with_values": "select T2.capital from city as T1 join state as T2 on T1.state_name = T2.state_name where T2.country_name = \"dummy value\" order by T1.population desc limit 1"
    },
    {
        "question": "how many states have cities named springfield",
        "db_id": "geo",
        "gold_parse": "SELECT COUNT ( state_name ) FROM city WHERE city_name  =  \"springfield\"",
        "predicted_parse_with_values": "select count ( state_name ) from city where city_name = \"dummy value\""
    },
    {
        "question": "What are the names of all tryout participants who are from the largest college ?",
        "db_id": "soccer_2",
        "gold_parse": "SELECT T2.pName FROM  tryout AS T1 JOIN player AS T2 ON T1.pID  =  T2.pID WHERE T1.cName  =  (SELECT cName FROM college ORDER BY enr DESC LIMIT 1)",
        "predicted_parse_with_values": "select T1.cName from Tryout as T1 join College as T2 on T1.cName = T2.cName order by T2.enr desc limit 1"
    },
    {
        "question": "what is the highest point in the united states",
        "db_id": "geo",
        "gold_parse": "SELECT highest_point FROM highlow WHERE highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow )",
        "predicted_parse_with_values": "select max ( T3.highest_point ) from mountain as T1 join state as T2 on T1.state_name = T2.state_name join highlow as T3 on T2.state_name = T3.state_name where T1.state_name = \"dummy value\" and T3.highest_elevation = ( select max ( T6.highest_point ) from mountain as T4 join state as T5 on T4.state_name = T5.state_name join highlow as T6 on T5.state_name = T6.state_name where T4.state_name = \"dummy value\" )"
    },
    {
        "question": "how many states does the missouri river run through",
        "db_id": "geo",
        "gold_parse": "SELECT COUNT ( traverse ) FROM river WHERE river_name  =  \"missouri\"",
        "predicted_parse_with_values": "select count ( * ) from river as T1 join state as T2 on T1.traverse = T2.state_name where T1.river_name = \"dummy value\""
    },
    {
        "question": "Which restaurants have highest rating ? List the restaurant name and its rating .",
        "db_id": "restaurant_1",
        "gold_parse": "SELECT ResName , Rating FROM Restaurant ORDER BY Rating DESC LIMIT 1",
        "predicted_parse_with_values": "select ResName , ResName from Restaurant order by Rating desc limit 1"
    },
    {
        "question": "Show the names of people that are on affirmative side of debates with number of audience bigger than 200 .",
        "db_id": "debate",
        "gold_parse": "SELECT T3.Name FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID  =  T2.Debate_ID JOIN people AS T3 ON T1.Affirmative  =  T3.People_ID WHERE T2.Num_of_Audience  >  200",
        "predicted_parse_with_values": "select T1.Name from people as T1 join debate_people as T2 on T1.People_ID = T2.Negative where debate_T1.Affirmative > 2"
    },
    {
        "question": "how many cities are there in the united states",
        "db_id": "geo",
        "gold_parse": "SELECT COUNT ( city_name ) FROM city",
        "predicted_parse_with_values": "select count ( * ) from city where country_name = \"dummy value\""
    },
    {
        "question": "In which year did the least people enter hall of fame ?",
        "db_id": "baseball_1",
        "gold_parse": "SELECT yearid FROM hall_of_fame GROUP BY yearid ORDER BY count(*) ASC LIMIT 1",
        "predicted_parse_with_values": "select yearid from hall_of_fame group by yearid order by count ( * ) limit 1"
    },
    {
        "question": "Find the most popular room in the hotel . The most popular room is the room that had seen the largest number of reservations .",
        "db_id": "inn_1",
        "gold_parse": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select Room from Reservations group by Room order by count ( * ) desc limit 1"
    },
    {
        "question": "Show the ministers and the time they took and left office , listed by the time they left office .",
        "db_id": "party_people",
        "gold_parse": "SELECT minister ,  took_office ,  left_office FROM party ORDER BY left_office",
        "predicted_parse_with_values": "select T1.Minister , T2.In_office from party as T1 join member as T2 on T1.Party_ID = T2.Party_ID order by T2.In_office"
    },
    {
        "question": "Find the building that has the largest number of faculty members .",
        "db_id": "activity_1",
        "gold_parse": "SELECT building FROM Faculty GROUP BY building ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select Building from Faculty group by Building order by count ( * ) desc limit 1"
    },
    {
        "question": "For each party , return the name of the party and the number of delegates from that party .",
        "db_id": "election",
        "gold_parse": "SELECT T2.Party ,  COUNT(*) FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID GROUP BY T1.Party",
        "predicted_parse_with_values": "select Party , count ( * ) from party group by Party"
    },
    {
        "question": "Give the phone and postal code corresponding to the address '1031 Daugavpils Parkway ' .",
        "db_id": "sakila_1",
        "gold_parse": "SELECT phone ,  postal_code FROM address WHERE address  =  '1031 Daugavpils Parkway'",
        "predicted_parse_with_values": "select phone , postal_code from address where address2 = \"\""
    },
    {
        "question": "What are the names of wrestlers and their teams in elimination , ordered descending by days held ?",
        "db_id": "wrestler",
        "gold_parse": "SELECT T2.Name ,  T1.Team FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID ORDER BY T2.Days_held DESC",
        "predicted_parse_with_values": "select T2.Name , T1.Team from Elimination as T1 join wrestler as T2 on T1.Wrestler_ID = T2.Wrestler_ID order by T1.Eliminated_By desc"
    },
    {
        "question": "What city does the employee who helps the customer with postal code 70174 live in ?",
        "db_id": "chinook_1",
        "gold_parse": "SELECT T2.City FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.PostalCode  =  \"70174\"",
        "predicted_parse_with_values": "select City from Customer where PostalCode = 75009"
    },
    {
        "question": "Show all card type codes and the number of customers holding cards in each type .",
        "db_id": "customers_card_transactions",
        "gold_parse": "SELECT card_type_code ,  count(DISTINCT customer_id) FROM Customers_cards GROUP BY card_type_code",
        "predicted_parse_with_values": "select card_type_code , count ( * ) from Customers_Cards group by card_type_code"
    },
    {
        "question": "What are the ranks of captains that have no captain that are in the Third-rate ship of the line class ?",
        "db_id": "ship_1",
        "gold_parse": "SELECT rank FROM captain EXCEPT SELECT rank FROM captain WHERE CLASS  =  'Third-rate ship of the line'",
        "predicted_parse_with_values": "select Rank from captain except select T2.Rank from Ship as T1 join captain as T2 on T1.Ship_ID = T2.Ship_ID where T1.Class = \"KR\""
    },
    {
        "question": "What are the distinct unit prices of all tracks ?",
        "db_id": "chinook_1",
        "gold_parse": "SELECT distinct(UnitPrice) FROM TRACK",
        "predicted_parse_with_values": "select UnitPrice from Track"
    },
    {
        "question": "How many songs use drums as an instrument ?",
        "db_id": "music_2",
        "gold_parse": "SELECT count(*) FROM instruments WHERE instrument  =  \"drums\"",
        "predicted_parse_with_values": "select count ( * ) from Songs as T1 join Instruments as T2 on T1.SongId = T2.SongId where T2.Instrument = \"dummy value\""
    },
    {
        "question": "Find the id and star rating of each hotel and sort them in increasing order of price .",
        "db_id": "cre_Theme_park",
        "gold_parse": "SELECT hotel_id ,  star_rating_code FROM HOTELS ORDER BY price_range ASC",
        "predicted_parse_with_values": "select hotel_id , star_rating_code from Hotels order by price_range desc"
    },
    {
        "question": "Find the name of the train whose route runs through greatest number of stations .",
        "db_id": "station_weather",
        "gold_parse": "SELECT t1.name FROM train AS t1 JOIN route AS t2 ON t1.id  =  t2.train_id GROUP BY t2.train_id ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select name from train group by id order by count ( * ) desc limit 1"
    },
    {
        "question": "how many rivers run through the states bordering colorado",
        "db_id": "geo",
        "gold_parse": "SELECT COUNT ( river_name ) FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name  =  \"colorado\" )",
        "predicted_parse_with_values": "select count ( * ) from river as T1 join state as T2 on T1.traverse = T2.state_name join border_info as T3 on T2.state_name = T3.border where T3.border = \"dummy value\""
    },
    {
        "question": "What are the states , account types , and credit scores for customers who have 0 loans ?",
        "db_id": "loan_1",
        "gold_parse": "SELECT state ,  acc_type ,  credit_score FROM customer WHERE no_of_loans  =  0",
        "predicted_parse_with_values": "select T2.state , T1.acc_type , T1.credit_score from customer as T1 join bank as T2 on T1.branch_ID = T2.branch_ID group by T1.acc_type having count ( * ) >= 1"
    },
    {
        "question": "Please show the nominee who has been nominated the greatest number of times .",
        "db_id": "musical",
        "gold_parse": "SELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select Nominee from musical group by Nominee order by count ( * ) desc limit 1"
    },
    {
        "question": "Find the names of schools that have some players in the mid position but not in the goalie position .",
        "db_id": "soccer_2",
        "gold_parse": "SELECT cName FROM  tryout WHERE pPos  =  'mid' EXCEPT SELECT cName FROM  tryout WHERE pPos  =  'goalie'",
        "predicted_parse_with_values": "select T2.cName from Tryout as T1 join College as T2 on T1.cName = T2.cName where T1.pPos = \"striker\" intersect select T4.cName from Tryout as T3 join College as T4 on T3.cName = T4.cName where T3.pPos = \"goalie\""
    },
    {
        "question": "how many states have a city named springfield",
        "db_id": "geo",
        "gold_parse": "SELECT COUNT ( state_name ) FROM city WHERE city_name  =  \"springfield\"",
        "predicted_parse_with_values": "select count ( state_name ) from city where city_name = \"dummy value\""
    },
    {
        "question": "What are the first names and last names of the students that minor in the department with DNO 140 .",
        "db_id": "college_3",
        "gold_parse": "SELECT T2.Fname ,  T2.Lname FROM MINOR_IN AS T1 JOIN STUDENT AS T2 ON T1.StuID  =  T2.StuID WHERE T1.DNO  =  140",
        "predicted_parse_with_values": "select Fname , LName from Student where Major = 600"
    },
    {
        "question": "Which customers have an insurance policy with the type code \" Deputy \" ? Give me the customer details .",
        "db_id": "insurance_and_eClaims",
        "gold_parse": "SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  \"Deputy\"",
        "predicted_parse_with_values": "select T1.Customer_Details from Customers as T1 join Policies as T2 on T1.Customer_ID = T2.Customer_ID where T2.Policy_Type_Code = \"Deputy\""
    },
    {
        "question": "Find the number of female students ( with F sex ) living in Smith Hall",
        "db_id": "dorm_1",
        "gold_parse": "SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.dorm_name  =  'Smith Hall' AND T1.sex  =  'F'",
        "predicted_parse_with_values": "select count ( * ) from Student as T1 join Lives_in as T2 on T1.StuID = T2.stuid where T1.Sex = \"F\" and T1.Sex = \"F\""
    },
    {
        "question": "what is the lowest point of all states through which the mississippi river runs through",
        "db_id": "geo",
        "gold_parse": "SELECT lowest_point FROM highlow WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" ) ORDER BY lowest_elevation LIMIT 1",
        "predicted_parse_with_values": "select min ( T3.lowest_point ) from river as T1 join state as T2 on T1.traverse = T2.state_name join highlow as T3 on T2.state_name = T3.state_name where T1.river_name = \"dummy value\""
    },
    {
        "question": "Show the names of companies and of employees .",
        "db_id": "company_employee",
        "gold_parse": "SELECT T3.Name ,  T2.Name FROM employment AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID JOIN company AS T3 ON T1.Company_ID  =  T3.Company_ID",
        "predicted_parse_with_values": "select Name , Name from company"
    },
    {
        "question": "Find the number of complaints with Product Failure type for each complaint status .",
        "db_id": "customer_complaints",
        "gold_parse": "SELECT complaint_status_code ,  count(*) FROM complaints WHERE complaint_type_code  =  \"Product Failure\" GROUP BY complaint_status_code",
        "predicted_parse_with_values": "select complaint_status_code , count ( * ) from Complaints group by complaint_status_code"
    },
    {
        "question": "Which cities have 2 to 4 parks ?",
        "db_id": "baseball_1",
        "gold_parse": "SELECT city FROM park GROUP BY city HAVING count(*) BETWEEN 2 AND 4",
        "predicted_parse_with_values": "select city from park group by city having count ( * ) >= 1"
    },
    {
        "question": "What are the names of players who have the best dribbling ?",
        "db_id": "soccer_1",
        "gold_parse": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.dribbling  =  ( SELECT max(overall_rating) FROM Player_Attributes)",
        "predicted_parse_with_values": "select T1.player_name from Player as T1 join Player_Attributes as T2 on T1.player_api_id = T2.player_api_id order by T2.dribbling desc limit 1"
    },
    {
        "question": "what states capital is salem",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM state WHERE capital  =  \"salem\"",
        "predicted_parse_with_values": "select T2.capital from city as T1 join state as T2 on T1.state_name = T2.state_name where T1.state_name = \"dummy value\""
    },
    {
        "question": "For each position , what is the minimum time students spent practicing ?",
        "db_id": "soccer_2",
        "gold_parse": "SELECT min(T2.HS) ,   T1.pPos FROM tryout AS T1 JOIN player AS T2 ON T1.pID  =  T2.pID GROUP BY T1.pPos",
        "predicted_parse_with_values": "select T1.pPos , max ( T2.HS ) from Tryout as T1 join Player as T2 on T1.pID = T2.pID group by T1.pPos"
    },
    {
        "question": "What are the details for statements with the details 'Private Project ' , and what are the names of the corresponding documents ?",
        "db_id": "cre_Docs_and_Epenses",
        "gold_parse": "SELECT T1.statement_details ,  T2.document_name FROM Statements AS T1 JOIN Documents AS T2 ON T1.statement_id  =  T2.document_id WHERE T1.statement_details  =  'Private Project'",
        "predicted_parse_with_values": "select T1.Statement_Details , T2.Document_Name from Statements as T1 join Documents as T2 on T1.Statement_ID = T2.Document_ID where T2.Other_Details = \"None\""
    },
    {
        "question": "Show the name of the customer who has the most orders .",
        "db_id": "customers_and_products_contacts",
        "gold_parse": "SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select T1.customer_name from Customers as T1 join Customer_Orders as T2 on T1.customer_id = T2.customer_id group by T2.customer_id order by count ( * ) desc limit 1"
    },
    {
        "question": "How many students live in each city ?",
        "db_id": "allergy_1",
        "gold_parse": "SELECT city_code ,  count(*) FROM Student GROUP BY city_code",
        "predicted_parse_with_values": "select count ( * ) , city_code from Student group by city_code"
    },
    {
        "question": "How many days had both mean humidity above 50 and mean visibility above 8 ?",
        "db_id": "bike_1",
        "gold_parse": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8",
        "predicted_parse_with_values": "select date from weather where mean_humidity > 78 intersect select date from weather where mean_humidity > 62"
    },
    {
        "question": "What is the type of interaction for the enzyme named 'ALA synthase ' and the medicine named 'Aripiprazole ' ?",
        "db_id": "medicine_enzyme_interaction",
        "gold_parse": "SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id  =  T2.id JOIN enzyme AS T3 ON T1.enzyme_id  =  T3.id WHERE T3.name  =  'ALA synthase' AND T2.name  =  'Aripiprazole'",
        "predicted_parse_with_values": "select T2.interaction_type from enzyme as T1 join medicine_enzyme_interaction as T2 on T1.id = T2.enzyme_id where T1.name = \"Coproporphyrinogen III oxidase\" and T1.name = \"Coproporphyrinogen III oxidase\""
    },
    {
        "question": "What are the numbers of all flights coming from Los Angeles ?",
        "db_id": "flight_1",
        "gold_parse": "SELECT flno FROM Flight WHERE origin  =  \"Los Angeles\"",
        "predicted_parse_with_values": "select count ( * ) from flight where destination = \"Chicago\""
    },
    {
        "question": "What is the name of the customer that made the order with the largest quantity ?",
        "db_id": "customers_and_addresses",
        "gold_parse": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t3.order_quantity  =  ( SELECT max(order_quantity) FROM order_items)",
        "predicted_parse_with_values": "select T3.customer_name from Order_Items as T1 join Customer_Orders as T2 on T1.order_id = T2.order_id join Customers as T3 on T2.customer_id = T3.customer_id order by T1.order_quantity desc limit 1"
    },
    {
        "question": "What are the course names for courses taught on MTW ?",
        "db_id": "college_3",
        "gold_parse": "SELECT CName FROM COURSE WHERE Days  =  \"MTW\"",
        "predicted_parse_with_values": "select CName from Course where CID = \"520.432\""
    },
    {
        "question": "how many states have cities or towns named springfield",
        "db_id": "geo",
        "gold_parse": "SELECT COUNT ( state_name ) FROM city WHERE city_name  =  \"springfield\"",
        "predicted_parse_with_values": "select count ( * ) from city where city_name = \"dummy value\" or city_name = \"dummy value\""
    },
    {
        "question": "how many states border kentucky",
        "db_id": "geo",
        "gold_parse": "SELECT COUNT ( border ) FROM border_info WHERE state_name  =  \"kentucky\"",
        "predicted_parse_with_values": "select count ( * ) from border_info as T1 join state as T2 on T1.border = T2.state_name where T1.border = \"dummy value\""
    },
    {
        "question": "How many papers are published in total ?",
        "db_id": "icfp_1",
        "gold_parse": "SELECT count(*) FROM papers",
        "predicted_parse_with_values": "select count ( paperID ) from Papers"
    },
    {
        "question": "Find the total number of students living in the male dorm ( with gender M ) .",
        "db_id": "dorm_1",
        "gold_parse": "SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.gender  =  'M'",
        "predicted_parse_with_values": "select count ( * ) from Dorm as T1 join Lives_in as T2 on T1.dormid = T2.dormid where T1.gender = \"F\""
    },
    {
        "question": "Who are the top 3 players in terms of overall rating ?",
        "db_id": "soccer_1",
        "gold_parse": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id  =  T2.player_api_id ORDER BY overall_rating DESC LIMIT 3",
        "predicted_parse_with_values": "select T1.player_name from Player as T1 join Player_Attributes as T2 on T1.player_api_id = T2.player_api_id order by T2.overall_rating desc limit 1"
    },
    {
        "question": "What are the first and last names of all students who are not living in the city HKG and order the results by age ?",
        "db_id": "dorm_1",
        "gold_parse": "SELECT fname ,  lname FROM student WHERE city_code != 'HKG' ORDER BY age",
        "predicted_parse_with_values": "select Fname , LName from Student where city_code != \"BAL\" order by LName"
    },
    {
        "question": "What city and state is the bank with the name morningside in ?",
        "db_id": "loan_1",
        "gold_parse": "SELECT city ,  state FROM bank WHERE bname  =  'morningside'",
        "predicted_parse_with_values": "select T2.city , T2.state from customer as T1 join bank as T2 on T1.branch_ID = T2.branch_ID where T1.cust_name like \"Owen\""
    },
    {
        "question": "What is the average time span of contact channels in the database ?",
        "db_id": "customers_and_addresses",
        "gold_parse": "SELECT avg(active_to_date - active_from_date) FROM customer_contact_channels",
        "predicted_parse_with_values": "select avg ( active_to_date ) from Customer_Contact_Channels"
    },
    {
        "question": "return me the number of papers by \" H. V. Jagadish \" .",
        "db_id": "academic",
        "gold_parse": "SELECT COUNT ( DISTINCT t3.title ) FROM writes AS t2 JOIN author AS t1 ON t2.aid  =  t1.aid JOIN publication AS t3 ON t2.pid  =  t3.pid WHERE t1.name  =  \"H. V. Jagadish\"",
        "predicted_parse_with_values": "select count ( T1.oid ) from author as T1 join writes as T2 on T1.aid = T2.aid join publication as T3 on T2.pid = T3.pid join cite as T4 on T3.pid = T4.citing where T4.cited = \"dummy value\""
    },
    {
        "question": "Find the name of the customer that has been involved in the most policies .",
        "db_id": "insurance_and_eClaims",
        "gold_parse": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t2.customer_details ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select Customer_ID from Customers group by Customer_ID order by count ( * ) desc limit 1"
    },
    {
        "question": "Return the full name of the customer who made the first rental .",
        "db_id": "sakila_1",
        "gold_parse": "SELECT T1.first_name ,  T1.last_name FROM customer AS T1 JOIN rental AS T2 ON T1.customer_id  =  T2.customer_id ORDER BY T2.rental_date ASC LIMIT 1",
        "predicted_parse_with_values": "select T1.first_name , T1.last_name from customer as T1 join rental as T2 on T1.customer_id = T2.customer_id order by T2.rental_date limit 1"
    },
    {
        "question": "Return the gender and name of artist who produced the song with the lowest resolution .",
        "db_id": "music_1",
        "gold_parse": "SELECT T1.gender ,  T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name ORDER BY T2.resolution LIMIT 1",
        "predicted_parse_with_values": "select T2.gender , T1.artist_name from song as T1 join artist as T2 on T1.artist_name = T2.artist_name order by T1.resolution limit 1"
    },
    {
        "question": "Find the names of customers who never placed an order .",
        "db_id": "customers_and_addresses",
        "gold_parse": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id",
        "predicted_parse_with_values": "select customer_name from Customers where customer_id not in ( select customer_id from Customer_Orders )"
    },
    {
        "question": "What is the age of the doctor named Zach ?",
        "db_id": "network_2",
        "gold_parse": "SELECT age FROM Person WHERE job  =  'doctor' AND name  =  'Zach'",
        "predicted_parse_with_values": "select T2.age from PersonFriend as T1 join Person as T2 on T1.friend = T2.name where T1.name = \"Zach\""
    },
    {
        "question": "Return the total number of distinct customers .",
        "db_id": "customers_and_addresses",
        "gold_parse": "SELECT count(*) FROM customers",
        "predicted_parse_with_values": "select count ( customer_id ) from Customers"
    },
    {
        "question": "How many faculty members does each building have ? List the result with the name of the building .",
        "db_id": "activity_1",
        "gold_parse": "SELECT building ,  count(*) FROM Faculty GROUP BY building",
        "predicted_parse_with_values": "select count ( * ) , Building from Faculty group by Building"
    },
    {
        "question": "Find the name and revenue of the company that earns the highest revenue in each city .",
        "db_id": "manufactory_1",
        "gold_parse": "SELECT name ,  max(revenue) ,  Headquarter FROM manufacturers GROUP BY Headquarter",
        "predicted_parse_with_values": "select Name , Revenue , Revenue from Manufacturers order by Revenue desc limit 1"
    },
    {
        "question": "which state has the most population",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state )",
        "predicted_parse_with_values": "select state_name from state order by population desc limit 1"
    },
    {
        "question": "How many departments are in each school ?",
        "db_id": "college_1",
        "gold_parse": "SELECT count(DISTINCT dept_name) ,  school_code FROM department GROUP BY school_code",
        "predicted_parse_with_values": "select count ( * ) , T4.SCHOOL_CODE from CLASS as T1 join ENROLL as T2 on T1.CLASS_CODE = T2.CLASS_CODE join STUDENT as T3 on T2.STU_NUM = T3.STU_NUM join DEPARTMENT as T4 on T3.DEPT_CODE = T4.DEPT_CODE group by T4.SCHOOL_CODE"
    },
    {
        "question": "What is the sum of revenue from companies with headquarters in Austin ?",
        "db_id": "manufactory_1",
        "gold_parse": "SELECT sum(revenue) FROM manufacturers WHERE headquarter  =  'Austin'",
        "predicted_parse_with_values": "select sum ( Revenue ) from Manufacturers where Founder = \"James\""
    },
    {
        "question": "What are the major roles in the movie \" Daddy Long Legs \"",
        "db_id": "imdb",
        "gold_parse": "SELECT t2.role FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t3.title  =  \"Daddy Long Legs\"",
        "predicted_parse_with_values": "select T1.role from cast as T1 join movie as T2 where T2.title = \"dummy value\" and T2.title = \"dummy value\""
    },
    {
        "question": "Show the statement id and the statement detail for the statement with most number of accounts .",
        "db_id": "cre_Docs_and_Epenses",
        "gold_parse": "SELECT T1.statement_id ,  T2.statement_details FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id  =  T2.statement_id GROUP BY T1.statement_id ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select Statement_ID , Statement_Details from Statements group by Statement_ID order by count ( * ) desc limit 1"
    },
    {
        "question": "For each city , what is the highest latitude for its stations ?",
        "db_id": "bike_1",
        "gold_parse": "SELECT city ,  max(lat) FROM station GROUP BY city",
        "predicted_parse_with_values": "select city , lat from station order by lat desc limit 1"
    },
    {
        "question": "what is the area of the state with the smallest population density",
        "db_id": "geo",
        "gold_parse": "SELECT area FROM state WHERE density  =  ( SELECT MIN ( density ) FROM state )",
        "predicted_parse_with_values": "select area from state order by density asc limit 1"
    },
    {
        "question": "What is the name of the airport with the most number of routes that start in China ?",
        "db_id": "flight_4",
        "gold_parse": "SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid WHERE T1.country  =  'China' GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select T1.name from airports as T1 join routes as T2 on T1.apid = T2.src_apid join airlines as T3 on T2.alid = T3.alid where T3.country = \"Liberia\" group by T1.name order by count ( * ) desc limit 1"
    },
    {
        "question": "What is the name , location and seating for the most recently opened track ?",
        "db_id": "race_track",
        "gold_parse": "SELECT name ,  LOCATION ,  seating FROM track ORDER BY year_opened DESC LIMIT 1",
        "predicted_parse_with_values": "select Name , Location , Seating from track order by Year_Opened limit 1"
    },
    {
        "question": "What are the positions of players whose average number of points scored by that position is larger than 20 ?",
        "db_id": "sports_competition",
        "gold_parse": "SELECT POSITION FROM player GROUP BY name HAVING avg(Points)  >=  20",
        "predicted_parse_with_values": "select Position from player group by Position having avg ( Points ) > 1"
    },
    {
        "question": "Sort the customer names in alphabetical order .",
        "db_id": "insurance_and_eClaims",
        "gold_parse": "SELECT customer_details FROM customers ORDER BY customer_details",
        "predicted_parse_with_values": "select Customer_Details from Customers order by Customer_Details"
    },
    {
        "question": "what is the most populous state",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state )",
        "predicted_parse_with_values": "select state_name from state group by state_name order by count ( * ) desc limit 1"
    },
    {
        "question": "what is the lowest point of the us",
        "db_id": "geo",
        "gold_parse": "SELECT lowest_point FROM highlow WHERE lowest_elevation  =  ( SELECT MIN ( lowest_elevation ) FROM highlow )",
        "predicted_parse_with_values": "select min ( T3.lowest_point ) from border_info as T1 join state as T2 on T1.border = T2.state_name join highlow as T3 on T2.state_name = T3.state_name where T1.state_name = \"dummy value\""
    },
    {
        "question": "What is the duration , file size , and song format for every pop song , ordered by title alphabetically ?",
        "db_id": "music_1",
        "gold_parse": "SELECT T1.duration ,  T1.file_size ,  T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T2.genre_is  =  \"pop\" ORDER BY T2.song_name",
        "predicted_parse_with_values": "select T1.duration , T1.file_size , T1.duration , T1.formats from files as T1 join song as T2 on T1.f_id = T2.f_id join genre as T3 on T2.genre_is = T3.g_name where T3.g_name = \"tagore\" order by T1.duration"
    },
    {
        "question": "Find the titles and studios of the films that are produced by some film studios that contained the word \" Universal \" .",
        "db_id": "film_rank",
        "gold_parse": "SELECT title ,  Studio FROM film WHERE Studio LIKE \"%Universal%\"",
        "predicted_parse_with_values": "select Title , Studio from film where Title like \"Star Trek II: The Wrath of Khan\""
    },
    {
        "question": "What is the denomination of the school the most players belong to ?",
        "db_id": "school_player",
        "gold_parse": "SELECT T2.Denomination FROM player AS T1 JOIN school AS T2 ON T1.School_ID  =  T2.School_ID GROUP BY T1.School_ID ORDER BY COUNT(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select Denomination from school group by Denomination order by count ( * ) desc limit 1"
    },
    {
        "question": "What is the state and enrollment of the colleges where have any students who got accepted in the tryout decision .",
        "db_id": "soccer_2",
        "gold_parse": "SELECT DISTINCT T1.state ,  T1.enr FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.decision  =  'yes'",
        "predicted_parse_with_values": "select state , enr from College"
    },
    {
        "question": "how many cities are there in us",
        "db_id": "geo",
        "gold_parse": "SELECT COUNT ( city_name ) FROM city",
        "predicted_parse_with_values": "select count ( * ) from city where country_name = \"dummy value\""
    },
    {
        "question": "What is the country of origin of the artist who is female and produced a song in Bangla ?",
        "db_id": "music_1",
        "gold_parse": "SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T1.gender  =  \"Female\" AND T2.languages  =  \"bangla\"",
        "predicted_parse_with_values": "select T2.country from song as T1 join artist as T2 on T1.artist_name = T2.artist_name where T2.gender = \"Female\" and T1.artist_name = \"Topu\""
    },
    {
        "question": "return me the number of citations of \" Making database systems usable \" in each year .",
        "db_id": "academic",
        "gold_parse": "SELECT YEAR  ,  SUM ( citation_num ) FROM publication WHERE title  =  \"Making database systems usable\" GROUP BY YEAR",
        "predicted_parse_with_values": "select count ( citation_num ) , year from publication where title = \"dummy value\" group by year"
    },
    {
        "question": "What are the first names of all history professors who do not teach ?",
        "db_id": "college_1",
        "gold_parse": "SELECT T1.emp_fname FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T2.dept_code  =  T3.dept_code WHERE T3.dept_name  =  'History' EXCEPT SELECT T4.emp_fname FROM employee AS T4 JOIN CLASS AS T5 ON T4.emp_num  =  T5.prof_num",
        "predicted_parse_with_values": "select PROF_OFFICE from PROFESSOR where PROF_OFFICE = \"KLR 203E\" except select T1.EMP_FNAME from EMPLOYEE as T1 join PROFESSOR as T2 on T1.EMP_NUM = T2.EMP_NUM where T2.PROF_OFFICE = \"KLR 409B\""
    },
    {
        "question": "which state has the greatest population",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state )",
        "predicted_parse_with_values": "select state_name from state order by population desc limit 1"
    },
    {
        "question": "Count the number of Professors who have office in building NEB .",
        "db_id": "activity_1",
        "gold_parse": "SELECT count(*) FROM Faculty WHERE Rank  =  \"Professor\" AND building  =  \"NEB\"",
        "predicted_parse_with_values": "select count ( * ) from Faculty where Building = \"Krieger\""
    },
    {
        "question": "Find all Sci-Fi produced in year 2010",
        "db_id": "imdb",
        "gold_parse": "SELECT t3.title FROM genre AS t2 JOIN classification AS t1 ON t2.gid  =  t1.gid JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.genre  =  \"Sci-Fi\" AND t3.release_year  =  2010",
        "predicted_parse_with_values": "select T2.title_aka from genre as T1 join movie as T2 where T1.genre = \"dummy value\" and T1.genre = \"dummy value\""
    },
    {
        "question": "what is the most populous state in the us",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state )",
        "predicted_parse_with_values": "select T2.state_name from city as T1 join state as T2 on T1.state_name = T2.state_name where T1.country_name = \"dummy value\" group by T2.state_name order by count ( * ) desc limit 1"
    },
    {
        "question": "Find the category descriptions of the products whose descriptions include letter 't ' .",
        "db_id": "products_gen_characteristics",
        "gold_parse": "SELECT T1.product_category_description FROM ref_product_categories AS T1 JOIN products AS T2 ON T1.product_category_code  =  T2.product_category_code WHERE T2.product_description LIKE '%t%'",
        "predicted_parse_with_values": "select T1.product_category_description from Ref_Product_Categories as T1 join Products as T2 on T1.product_category_code = T2.product_category_code where T2.product_name like \"cinnam\""
    },
    {
        "question": "what is the longest river in the largest state",
        "db_id": "geo",
        "gold_parse": "SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river WHERE traverse IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) ) ) AND traverse IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) )",
        "predicted_parse_with_values": "select T1.river_name from river as T1 join state as T2 on T1.traverse = T2.state_name join highlow as T3 on T2.state_name = T3.state_name where T3.highest_elevation = ( select max ( highest_elevation ) from highlow )"
    },
    {
        "question": "Find the names of all the clubs that have at least a member from the city with city code \" BAL \" .",
        "db_id": "club_1",
        "gold_parse": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.city_code  =  \"BAL\"",
        "predicted_parse_with_values": "select ClubName from Club where ClubLocation = \"AKW\""
    },
    {
        "question": "How many distinct governors are there ?",
        "db_id": "election",
        "gold_parse": "SELECT count(DISTINCT Governor) FROM party",
        "predicted_parse_with_values": "select count ( Lieutenant_Governor ) from party"
    },
    {
        "question": "Find the first names of all instructors who have taught some course and the course code .",
        "db_id": "college_1",
        "gold_parse": "SELECT T2.emp_fname ,  T1.crs_code FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num",
        "predicted_parse_with_values": "select T1.EMP_FNAME , T3.CRS_CODE from EMPLOYEE as T1 join DEPARTMENT as T2 on T1.EMP_NUM = T2.EMP_NUM join COURSE as T3 on T2.DEPT_CODE = T3.DEPT_CODE where T3.CRS_DESCRIPTION = \"Intro. to Statistics\""
    },
    {
        "question": "How many video game types exist ?",
        "db_id": "game_1",
        "gold_parse": "SELECT count(DISTINCT gtype) FROM Video_games",
        "predicted_parse_with_values": "select count ( * ) from Video_Games"
    },
    {
        "question": "what state is the biggest",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state )",
        "predicted_parse_with_values": "select state_name from state order by density desc limit 1"
    },
    {
        "question": "What is the average latitude and longitude of the starting points of all trips ?",
        "db_id": "bike_1",
        "gold_parse": "SELECT avg(T1.lat) ,  avg(T1.long) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id",
        "predicted_parse_with_values": "select avg ( long ) , avg ( long ) from station"
    },
    {
        "question": "What are the emails of customers who have filed complaints on the product which has had the greatest number of complaints ?",
        "db_id": "customer_complaints",
        "gold_parse": "SELECT t1.email_address FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_id ORDER BY count(*) LIMIT 1",
        "predicted_parse_with_values": "select T1.email_address from Customers as T1 join Complaints as T2 on T1.customer_id = T2.customer_id join Products as T3 on T2.product_id = T3.product_id where T3.product_name = ( select T5.product_id from Products as T4 join Complaints as T5 on T4.product_id = T5.product_id group by T4.product_name order by count ( * ) desc limit 1 )"
    },
    {
        "question": "what states border states that border states that border florida",
        "db_id": "geo",
        "gold_parse": "SELECT border FROM border_info WHERE state_name IN ( SELECT border FROM border_info WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"florida\" ) )",
        "predicted_parse_with_values": "select state_name from border_info where border = \"dummy value\""
    },
    {
        "question": "List all the cities in a decreasing order of each city 's stations ' highest latitude .",
        "db_id": "bike_1",
        "gold_parse": "SELECT city FROM station GROUP BY city ORDER BY max(lat) DESC",
        "predicted_parse_with_values": "select city from station order by lat desc"
    },
    {
        "question": "For each document , list the number of employees who have showed up in the circulation history of that document . List the document ids and number of employees .",
        "db_id": "cre_Doc_Control_Systems",
        "gold_parse": "SELECT document_id ,  count(DISTINCT employee_id) FROM Circulation_History GROUP BY document_id",
        "predicted_parse_with_values": "select T1.document_id , count ( * ) from Documents as T1 join Document_Drafts as T2 on T1.document_id = T2.document_id join Draft_Copies as T3 on T2.document_id = T3.document_id join Circulation_History as T4 on T3.document_id = T4.document_id group by T4.document_id"
    },
    {
        "question": "What is the average and maximum number of hours students who made the team practiced ?",
        "db_id": "soccer_2",
        "gold_parse": "SELECT avg(T1.HS) ,  max(T1.HS) FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'",
        "predicted_parse_with_values": "select avg ( HS ) , max ( HS ) from Player"
    },
    {
        "question": "Find the the names of the tourist attractions that the tourist named Alison visited but Rosalind did not visit .",
        "db_id": "cre_Theme_park",
        "gold_parse": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Alison\" EXCEPT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Rosalind\"",
        "predicted_parse_with_values": "select Name from Tourist_Attractions where Name = \"jungle cruise\" except select T2.Name from Staff as T1 join Tourist_Attractions as T2 on T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID where T1.Name = \"Kaela\""
    },
    {
        "question": "How many games in total did team Boston Red Stockings attend from 2000 to 2010 ?",
        "db_id": "baseball_1",
        "gold_parse": "SELECT sum(T1.attendance) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' AND T1.year BETWEEN 2000 AND 2010",
        "predicted_parse_with_values": "select count ( * ) from team as T1 join batting_postseason as T2 on T1.team_id = T2.team_id join player as T3 on T2.player_id = T3.player_id join team_franchise as T4 where T4.franchise_name = \"Altoona Mountain City\" and T1.year <= 1930"
    },
    {
        "question": "Find the number of universities that have over a 20000 enrollment size for each affiliation type .",
        "db_id": "university_basketball",
        "gold_parse": "SELECT count(*) ,  affiliation FROM university WHERE enrollment  >  20000 GROUP BY affiliation",
        "predicted_parse_with_values": "select count ( * ) , Affiliation from university group by Affiliation having count ( * ) > 1"
    },
    {
        "question": "Who is the writer of \" The Truman Show \"",
        "db_id": "imdb",
        "gold_parse": "SELECT t2.name FROM written_by AS t3 JOIN movie AS t1 ON t3.msid  =  t1.mid JOIN writer AS t2 ON t3.wid  =  t2.wid WHERE t1.title  =  \"The Truman Show\"",
        "predicted_parse_with_values": "select T1.name from writer as T1 join written_by as T2 on T1.wid = T2.wid join copyright as T3 on T2.msid = T3.msid join directed_by as T4 on T3.msid = T4.msid join director as T5 on T4.did = T5.did where T5.name = \"dummy value\""
    },
    {
        "question": "What are the first name and last name of the players whose death record is empty ?",
        "db_id": "baseball_1",
        "gold_parse": "SELECT name_first ,  name_last FROM player WHERE death_year = ''",
        "predicted_parse_with_values": "select name_first , name_last from player where death_day = 9"
    },
    {
        "question": "how many states does the missouri run through",
        "db_id": "geo",
        "gold_parse": "SELECT COUNT ( traverse ) FROM river WHERE river_name  =  \"missouri\"",
        "predicted_parse_with_values": "select count ( * ) from river as T1 join state as T2 on T1.traverse = T2.state_name where T1.river_name = \"dummy value\""
    },
    {
        "question": "What is the id of the longest song ?",
        "db_id": "music_1",
        "gold_parse": "SELECT f_id FROM files ORDER BY duration DESC LIMIT 1",
        "predicted_parse_with_values": "select f_id from song order by releasedate desc limit 1"
    },
    {
        "question": "What is the most common hometown of gymnasts ?",
        "db_id": "gymnast",
        "gold_parse": "SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown ORDER BY COUNT(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select T2.Hometown from gymnast as T1 join people as T2 on T1.Gymnast_ID = T2.People_ID group by T2.Hometown order by count ( * ) desc limit 1"
    },
    {
        "question": "what river flows through the most states",
        "db_id": "geo",
        "gold_parse": "SELECT river_name FROM river GROUP BY ( river_name ) ORDER BY COUNT ( DISTINCT traverse ) DESC LIMIT 1",
        "predicted_parse_with_values": "select river_name from river group by river_name order by count ( * ) desc limit 1"
    },
    {
        "question": "How many activities does Mark Giuliano participate in ?",
        "db_id": "activity_1",
        "gold_parse": "SELECT count(*) FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID WHERE T1.fname  =  \"Mark\" AND T1.lname  =  \"Giuliano\"",
        "predicted_parse_with_values": "select count ( * ) from Student where Fname = \"Tracy\" and LName = \"Lee\""
    },
    {
        "question": "What is the average and oldest age for each gender of student ?",
        "db_id": "dorm_1",
        "gold_parse": "SELECT avg(age) ,  max(age) ,  sex FROM student GROUP BY sex",
        "predicted_parse_with_values": "select avg ( T1.Age ) , T3.gender from Student as T1 join Lives_in as T2 on T1.StuID = T2.stuid join Dorm as T3 on T2.dormid = T3.dormid group by T3.gender"
    },
    {
        "question": "Show the statement detail and the corresponding document name for the statement with detail 'Private Project ' .",
        "db_id": "cre_Docs_and_Epenses",
        "gold_parse": "SELECT T1.statement_details ,  T2.document_name FROM Statements AS T1 JOIN Documents AS T2 ON T1.statement_id  =  T2.document_id WHERE T1.statement_details  =  'Private Project'",
        "predicted_parse_with_values": "select T1.Statement_Details , T2.Document_Name from Statements as T1 join Documents as T2 on T1.Statement_ID = T2.Document_ID where T1.Statement_ID = 192"
    },
    {
        "question": "Find the first names and degree of all professors who are teaching some class in Computer Info . Systems department .",
        "db_id": "college_1",
        "gold_parse": "SELECT DISTINCT T2.emp_fname ,  T3.prof_high_degree FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN professor AS T3 ON T2.emp_num  =  T3.emp_num JOIN department AS T4 ON T4.dept_code  =  T3.dept_code WHERE T4.dept_name  =  'Computer Info. Systems'",
        "predicted_parse_with_values": "select T2.DEPT_CODE , T2.PROF_HIGH_DEGREE from DEPARTMENT as T1 join PROFESSOR as T2 on T1.DEPT_CODE = T2.DEPT_CODE where T1.DEPT_NAME = \"Computer Info. Systems\""
    },
    {
        "question": "what states does the ohio run through",
        "db_id": "geo",
        "gold_parse": "SELECT traverse FROM river WHERE river_name  =  \"ohio\"",
        "predicted_parse_with_values": "select T3.state_name from river as T1 join state as T2 on T1.traverse = T2.state_name join border_info as T3 on T2.state_name = T3.border where T1.river_name = \"dummy value\""
    },
    {
        "question": "Show aircraft names and number of flights for each aircraft .",
        "db_id": "flight_1",
        "gold_parse": "SELECT T2.name ,  count(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid",
        "predicted_parse_with_values": "select name , count ( * ) from aircraft group by name"
    },
    {
        "question": "Show all the activity names and the number of faculty involved in each activity .",
        "db_id": "activity_1",
        "gold_parse": "SELECT T1.activity_name ,  count(*) FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID",
        "predicted_parse_with_values": "select activity_name , count ( * ) from Activity group by activity_name"
    },
    {
        "question": "what is the largest city in smallest state through which the mississippi runs",
        "db_id": "geo",
        "gold_parse": "SELECT city_name FROM city WHERE state_name IN ( SELECT state_name FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" ) AND area  =  ( SELECT MIN ( area ) FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" ) ) ) ORDER BY population DESC LIMIT 1",
        "predicted_parse_with_values": "select T2.capital from river as T1 join state as T2 on T1.traverse = T2.state_name where T1.river_name = \"dummy value\" order by T2.density desc limit 1"
    },
    {
        "question": "Find the first and last name of the author ( s ) who wrote the paper \" Nameless , Painless \" .",
        "db_id": "icfp_1",
        "gold_parse": "SELECT t1.fname ,  t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title  =  \"Nameless ,  Painless\"",
        "predicted_parse_with_values": "select T1.fname , T1.lname from Authors as T1 join Authorship as T2 on T1.authID = T2.authID join Papers as T3 on T2.paperID = T3.paperID where T3.title = \"Proving the Unique Fixed-Point Principle Correct: An Adventure with Category Theory\" and T1.lname = \"Blume\""
    },
    {
        "question": "Find the name of the most expensive hardware product .",
        "db_id": "department_store",
        "gold_parse": "SELECT product_name FROM products WHERE product_type_code  =  'Hardware' ORDER BY product_price DESC LIMIT 1",
        "predicted_parse_with_values": "select product_name from Products order by product_price desc limit 1"
    },
    {
        "question": "Find the description of the claim status \" Open \" .",
        "db_id": "insurance_and_eClaims",
        "gold_parse": "SELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \"Open\"",
        "predicted_parse_with_values": "select T2.Claim_Status_Description from Claim_Headers as T1 join Claims_Processing_Stages as T2 where T1.Claim_Status_Code = \"Disputed\""
    },
    {
        "question": "What is the number of movies produced in 2013 ?",
        "db_id": "imdb",
        "gold_parse": "SELECT COUNT ( DISTINCT title  ) FROM movie WHERE release_year  =  2013",
        "predicted_parse_with_values": "select count ( * ) from movie where release_year = \"dummy value\""
    },
    {
        "question": "how big is new mexico",
        "db_id": "geo",
        "gold_parse": "SELECT area FROM state WHERE state_name  =  \"new mexico\"",
        "predicted_parse_with_values": "select count ( * ) from border_info as T1 join state as T2 on T1.border = T2.state_name join highlow as T3 on T2.state_name = T3.state_name where T1.state_name = \"dummy value\" and T3.highest_elevation = \"dummy value\""
    },
    {
        "question": "What is the course description and number of credits for QM-261 ?",
        "db_id": "college_1",
        "gold_parse": "SELECT crs_credit ,  crs_description FROM course WHERE crs_code  =  'QM-261'",
        "predicted_parse_with_values": "select CRS_DESCRIPTION , CRS_CREDIT from COURSE where DEPT_CODE = \"ACCT\""
    },
    {
        "question": "How many allergy entries are there ?",
        "db_id": "allergy_1",
        "gold_parse": "SELECT count(DISTINCT allergy) FROM Allergy_type",
        "predicted_parse_with_values": "select count ( * ) from Allergy_Type"
    },
    {
        "question": "Find the max , average and min training hours of all players .",
        "db_id": "soccer_2",
        "gold_parse": "SELECT avg(HS) ,  max(HS) ,  min(HS) FROM Player",
        "predicted_parse_with_values": "select sum ( HS ) , avg ( HS ) , avg ( HS ) from Player"
    },
    {
        "question": "What is the number of different class sections offered in the course ACCT-211 ?",
        "db_id": "college_1",
        "gold_parse": "SELECT count(DISTINCT class_section) FROM CLASS WHERE crs_code  =  'ACCT-211'",
        "predicted_parse_with_values": "select count ( T1.CLASS_SECTION ) from CLASS as T1 join COURSE as T2 on T1.CRS_CODE = T2.CRS_CODE where T2.CRS_CODE = \"ACCT-212\""
    },
    {
        "question": "What is the mean longitude for all stations that have never had more than 10 bikes available ?",
        "db_id": "bike_1",
        "gold_parse": "SELECT avg(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING max(bikes_available)  >  10)",
        "predicted_parse_with_values": "select long from station group by id having count ( * ) > 1"
    },
    {
        "question": "List the codes of all courses that take place in room KLR209 .",
        "db_id": "college_1",
        "gold_parse": "SELECT class_code FROM CLASS WHERE class_room  =  'KLR209'",
        "predicted_parse_with_values": "select T2.CRS_CODE from CLASS as T1 join COURSE as T2 on T1.CRS_CODE = T2.CRS_CODE where T1.CLASS_ROOM = \"KLR209\""
    },
    {
        "question": "how many people live in boulder",
        "db_id": "geo",
        "gold_parse": "SELECT population FROM city WHERE city_name  =  \"boulder\"",
        "predicted_parse_with_values": "select count ( * ) from city where city_name = \"dummy value\""
    },
    {
        "question": "return me the number of organizations in Databases area located in \" North America \" .",
        "db_id": "academic",
        "gold_parse": "SELECT COUNT ( DISTINCT t2.name ) FROM domain_author AS t4 JOIN author AS t1 ON t4.aid  =  t1.aid JOIN DOMAIN AS t3 ON t3.did  =  t4.did JOIN organization AS t2 ON t2.oid  =  t1.oid WHERE t3.name  =  \"Databases\" AND t2.continent  =  \"North America\"",
        "predicted_parse_with_values": "select count ( * ) from organization where continent = \"dummy value\""
    },
    {
        "question": "What are the names of all the customers in alphabetical order ?",
        "db_id": "small_bank_1",
        "gold_parse": "SELECT name FROM accounts ORDER BY name",
        "predicted_parse_with_values": "select ( name ) from ACCOUNTS order by count ( name )"
    },
    {
        "question": "Find the max and min grade point for all letter grade .",
        "db_id": "college_3",
        "gold_parse": "SELECT max(gradepoint) ,  min(gradepoint) FROM GRADECONVERSION",
        "predicted_parse_with_values": "select max ( gradepoint ) , lettergrade from Gradeconversion group by lettergrade"
    },
    {
        "question": "Find the first names of the faculty members who are playing Canoeing or Kayaking .",
        "db_id": "activity_1",
        "gold_parse": "SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' OR T3.activity_name  =  'Kayaking'",
        "predicted_parse_with_values": "select T3.Fname from Activity as T1 join Faculty_Participates_in as T2 on T1.actid = T2.actid join Faculty as T3 on T2.FacID = T3.FacID where T1.activity_name = \"Canoeing\" or T1.activity_name = \"Canoeing\""
    },
    {
        "question": "Show the headquarters shared by more than two companies .",
        "db_id": "company_office",
        "gold_parse": "SELECT Headquarters FROM Companies GROUP BY Headquarters HAVING COUNT(*)  >  2",
        "predicted_parse_with_values": "select T2.Headquarters from Office_locations as T1 join Companies as T2 on T1.company_id = T2.id group by T2.Headquarters having count ( * ) > 1"
    },
    {
        "question": "how many cities are there in the us",
        "db_id": "geo",
        "gold_parse": "SELECT COUNT ( city_name ) FROM city",
        "predicted_parse_with_values": "select count ( * ) from city as T1 join state as T2 on T1.state_name = T2.state_name where T2.country_name = \"dummy value\""
    },
    {
        "question": "What are the distinct first names of the students who have class president votes ?",
        "db_id": "voter_2",
        "gold_parse": "SELECT DISTINCT T1.Fname FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.CLASS_Senator_VOTE",
        "predicted_parse_with_values": "select T2.Fname from Voting_record as T1 join Student as T2 on T1.Class_Senator_Vote = T2.StuID where T1.Class_Senator_Vote = 1028"
    },
    {
        "question": "For each player , show the team and the location of school they belong to .",
        "db_id": "school_player",
        "gold_parse": "SELECT T1.Team ,  T2.Location FROM player AS T1 JOIN school AS T2 ON T1.School_ID  =  T2.School_ID",
        "predicted_parse_with_values": "select T2.Player , T1.Location from school as T1 join player as T2 on T1.School_ID = T2.School_ID"
    },
    {
        "question": "return me the authors who have cited the papers by \" H. V. Jagadish \" .",
        "db_id": "academic",
        "gold_parse": "SELECT t2.name FROM publication AS t7 JOIN cite AS t5 ON t7.pid  =  t5.citing JOIN publication AS t6 ON t6.pid  =  t5.cited JOIN writes AS t3 ON t3.pid  =  t7.pid JOIN writes AS t4 ON t4.pid  =  t6.pid JOIN author AS t2 ON t3.aid  =  t2.aid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\"",
        "predicted_parse_with_values": "select T1.name from author as T1 join writes as T2 on T1.aid = T2.aid join publication as T3 on T2.pid = T3.pid join cite as T4 on T3.pid = T4.citing where T4.cited = \"dummy value\""
    },
    {
        "question": "Return the names and classes of ships that do not have a captain ?",
        "db_id": "ship_1",
        "gold_parse": "SELECT name ,  CLASS FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain)",
        "predicted_parse_with_values": "select Name , Type from Ship except select Name , Type from Ship"
    },
    {
        "question": "Which player has the most all star game experiences ? Give me the first name , last name and id of the player , as well as the number of times the player participated in all star game .",
        "db_id": "baseball_1",
        "gold_parse": "SELECT T1.name_first , T1.name_last ,  T1.player_id ,   count(*) FROM player AS T1 JOIN all_star AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.player_id ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select T2.name_first , T2.name_last , count ( * ) from all_star as T1 join player as T2 on T1.player_id = T2.player_id group by T1.player_id order by count ( * ) desc limit 1"
    },
    {
        "question": "Show all game names played by at least 1000 hours .",
        "db_id": "game_1",
        "gold_parse": "SELECT gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid  =  T2.gameid GROUP BY T1.gameid HAVING sum(hours_played)  >=  1000",
        "predicted_parse_with_values": "select T2.GName from Plays_Games as T1 join Video_Games as T2 on T1.GameID = T2.GameID where T1.Hours_Played >= 1337"
    },
    {
        "question": "what is the highest point in each state whose lowest point is sea level",
        "db_id": "geo",
        "gold_parse": "SELECT highest_point  ,  state_name FROM highlow WHERE lowest_elevation  =  0",
        "predicted_parse_with_values": "select max ( T2.highest_point ) , T1.state_name from state as T1 join highlow as T2 on T1.state_name = T2.state_name where T2.lowest_elevation = ( select min ( T4.lowest_point ) from state as T3 join highlow as T4 on T3.state_name = T4.state_name ) group by T3.state_name"
    },
    {
        "question": "What are the names of parties that do not have delegates in election ?",
        "db_id": "election",
        "gold_parse": "SELECT Party FROM party WHERE Party_ID NOT IN (SELECT Party FROM election)",
        "predicted_parse_with_values": "select Party from party where Party_ID not in ( select Committee from election )"
    },
    {
        "question": "What are the names of all songs that have a lower rating than some song of blues genre ?",
        "db_id": "music_1",
        "gold_parse": "SELECT song_name FROM song WHERE rating  <  (SELECT max(rating) FROM song WHERE genre_is  =  \"blues\")",
        "predicted_parse_with_values": "select T1.song_name from song as T1 join genre as T2 on T1.genre_is = T2.g_name where T2.rating < ( select min ( rating ) from genre where rating = 9 )"
    },
    {
        "question": "For each sex , what is the name and sex of the candidate with the oppose rate for their sex ?",
        "db_id": "candidate_poll",
        "gold_parse": "SELECT t1.name ,  t1.sex ,  min(oppose_rate) FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex",
        "predicted_parse_with_values": "select T1.Name , T1.Sex from people as T1 join candidate as T2 on T1.People_ID = T2.People_ID where T2.Oppose_rate = 0.45"
    },
    {
        "question": "what are the names and classes of the ships that do not have any captain yet ?",
        "db_id": "ship_1",
        "gold_parse": "SELECT name ,  CLASS FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain)",
        "predicted_parse_with_values": "select Name , Type from Ship where Ship_ID not in ( select Ship_ID from captain )"
    },
    {
        "question": "can you tell me the capital of texas",
        "db_id": "geo",
        "gold_parse": "SELECT capital FROM state WHERE state_name  =  \"texas\"",
        "predicted_parse_with_values": "select T2.capital from city as T1 join state as T2 on T1.state_name = T2.state_name where T1.state_name = \"dummy value\""
    },
    {
        "question": "What is the count of states with college students playing in the mid position but not as goalies ?",
        "db_id": "soccer_2",
        "gold_parse": "SELECT COUNT(*) FROM (SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie')",
        "predicted_parse_with_values": "select count ( T2.state ) from Tryout as T1 join College as T2 on T1.cName = T2.cName where T1.pPos = \"mid\" intersect select state from College where enr = 12000"
    },
    {
        "question": "show major cities in kansas",
        "db_id": "geo",
        "gold_parse": "SELECT city_name FROM city WHERE population  >  150000 AND state_name  =  \"kansas\"",
        "predicted_parse_with_values": "select city_name from city where state_name = \"dummy value\""
    },
    {
        "question": "How many medicines were not approved by the FDA ?",
        "db_id": "medicine_enzyme_interaction",
        "gold_parse": "SELECT count(*) FROM medicine WHERE FDA_approved  =  'No'",
        "predicted_parse_with_values": "select count ( * ) from medicine where id not in ( select medicine_id from medicine_enzyme_interaction )"
    },
    {
        "question": "Find the state , account type , and credit score of the customer whose number of loan is 0 .",
        "db_id": "loan_1",
        "gold_parse": "SELECT state ,  acc_type ,  credit_score FROM customer WHERE no_of_loans  =  0",
        "predicted_parse_with_values": "select state , acc_type , credit_score from customer where no_of_loans < 0"
    },
    {
        "question": "For each classroom , show the classroom number and find how many students are using it .",
        "db_id": "student_1",
        "gold_parse": "SELECT classroom ,  count(*) FROM list GROUP BY classroom",
        "predicted_parse_with_values": "select count ( * ) , Classroom from list group by Classroom"
    },
    {
        "question": "Which papers did the author \" Olin Shivers \" write ? Give me the paper titles .",
        "db_id": "icfp_1",
        "gold_parse": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t1.fname  =  \"Olin\" AND t1.lname  =  \"Shivers\"",
        "predicted_parse_with_values": "select T3.title from Authors as T1 join Authorship as T2 on T1.authID = T2.authID join Papers as T3 on T2.paperID = T3.paperID where T1.fname = \"Nicolas\""
    },
    {
        "question": "What are the song titles on the album \" A Kiss Before You Go : Live in Hamburg \" ?",
        "db_id": "music_2",
        "gold_parse": "SELECT T3.title FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid  =  T2.albumid JOIN songs AS T3 ON T2.songid  =  T3.songid WHERE T1.title  =  \"A Kiss Before You Go: Live in Hamburg\"",
        "predicted_parse_with_values": "select T3.Title from Albums as T1 join Tracklists as T2 on T1.AId = T2.AlbumId join Songs as T3 on T2.SongId = T3.SongId where T1.Label = \"dummy value\" and T1.Year < \"dummy value\""
    },
    {
        "question": "what is the population density of the smallest state",
        "db_id": "geo",
        "gold_parse": "SELECT density FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state )",
        "predicted_parse_with_values": "select density from state order by density limit 1"
    },
    {
        "question": "What is the first and last name of the oldest employee ?",
        "db_id": "college_1",
        "gold_parse": "SELECT emp_fname ,  emp_lname FROM employee ORDER BY emp_dob LIMIT 1",
        "predicted_parse_with_values": "select EMP_FNAME , EMP_LNAME from EMPLOYEE order by EMP_DOB desc limit 1"
    },
    {
        "question": "For each room , find its name and the number of times reservations were made for it .",
        "db_id": "inn_1",
        "gold_parse": "SELECT T2.roomName ,  count(*) ,  T1.Room FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room",
        "predicted_parse_with_values": "select count ( * ) , Room from Reservations group by Room"
    },
    {
        "question": "Whare the names , friends , and ages of all people who are older than the average age of a person ?",
        "db_id": "network_2",
        "gold_parse": "SELECT DISTINCT T2.name ,  T2.friend ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.age  >  (SELECT avg(age) FROM person)",
        "predicted_parse_with_values": "select T2.name , T1.friend , T2.age from PersonFriend as T1 join Person as T2 on T1.friend = T2.name where T2.age > ( select avg ( age ) from Person )"
    },
    {
        "question": "Give me ids for all the trip that took place in a zip code area with average mean temperature above 60 .",
        "db_id": "bike_1",
        "gold_parse": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60",
        "predicted_parse_with_values": "select T1.id from trip as T1 join weather as T2 group by T1.id having avg ( T2.mean_humidity ) > 1"
    },
    {
        "question": "Find the last names of the students in third grade that are not taught by COVIN JEROME .",
        "db_id": "student_1",
        "gold_parse": "SELECT DISTINCT T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.grade  =  3 AND T2.firstname != \"COVIN\" AND T2.lastname != \"JEROME\"",
        "predicted_parse_with_values": "select LastName from list where Grade = 3 except select T2.LastName from list as T1 join teachers as T2 where T1.Grade = 4"
    },
    {
        "question": "What are all the friends of Alice who are female ?",
        "db_id": "network_2",
        "gold_parse": "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name  =  'Alice' AND T1.gender  =  'female'",
        "predicted_parse_with_values": "select T2.friend from Person as T1 join PersonFriend as T2 on T1.name = T2.friend where T1.gender = \"male\" and T1.gender = \"male\""
    },
    {
        "question": "Show the product name and total order quantity for each product .",
        "db_id": "customers_and_products_contacts",
        "gold_parse": "SELECT T1.product_name ,  sum(T2.order_quantity) FROM products AS T1 JOIN order_items AS T2 ON T1.product_id  =  T2.product_id GROUP BY T1.product_id",
        "predicted_parse_with_values": "select T1.product_name , sum ( T2.order_quantity ) from Products as T1 join Order_Items as T2 on T1.product_id = T2.product_id group by T2.product_id"
    },
    {
        "question": "What place has the most flights coming from there ?",
        "db_id": "flight_1",
        "gold_parse": "SELECT origin FROM Flight GROUP BY origin ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select destination from flight group by destination order by count ( * ) desc limit 1"
    },
    {
        "question": "Find the classroom that the most students use .",
        "db_id": "student_1",
        "gold_parse": "SELECT classroom FROM list GROUP BY classroom ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select Classroom from list group by Classroom order by count ( * ) desc limit 1"
    },
    {
        "question": "List the duration , file size and format of songs whose genre is pop , ordered by title ?",
        "db_id": "music_1",
        "gold_parse": "SELECT T1.duration ,  T1.file_size ,  T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T2.genre_is  =  \"pop\" ORDER BY T2.song_name",
        "predicted_parse_with_values": "select T1.duration , T1.file_size , T1.formats from files as T1 join song as T2 on T1.f_id = T2.f_id join genre as T3 on T2.genre_is = T3.g_name where T3.g_name = \"nazrul\" order by T1.duration"
    },
    {
        "question": "What are the aircrafts with top 3 shortest lengthes ? List their names .",
        "db_id": "flight_1",
        "gold_parse": "SELECT name FROM Aircraft ORDER BY distance LIMIT 3",
        "predicted_parse_with_values": "select name from aircraft order by distance asc limit 1"
    },
    {
        "question": "show me all the major lakes in the us",
        "db_id": "geo",
        "gold_parse": "SELECT lake_name FROM lake WHERE area  >  750",
        "predicted_parse_with_values": "select T2.lake_name from state as T1 join lake as T2 where T1.country_name = \"dummy value\""
    },
    {
        "question": "what states are next to kentucky",
        "db_id": "geo",
        "gold_parse": "SELECT border FROM border_info WHERE state_name  =  \"kentucky\"",
        "predicted_parse_with_values": "select state_name from state where area like \"dummy value\""
    },
    {
        "question": "What are the first names of all teachers who have taught a course and the corresponding descriptions ?",
        "db_id": "college_1",
        "gold_parse": "SELECT T2.emp_fname ,  T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code",
        "predicted_parse_with_values": "select T1.EMP_FNAME , T3.CRS_DESCRIPTION from EMPLOYEE as T1 join DEPARTMENT as T2 on T1.EMP_NUM = T2.EMP_NUM join COURSE as T3 on T2.DEPT_CODE = T3.DEPT_CODE where T1.EMP_JOBCODE = \"TECH\""
    },
    {
        "question": "What are the names of all colleges that have two or more players ?",
        "db_id": "match_season",
        "gold_parse": "SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2",
        "predicted_parse_with_values": "select T2.Name from match_season as T1 join team as T2 on T1.Team = T2.Team_id group by T1.College having count ( * ) >= 1"
    },
    {
        "question": "For each zip code , return the average mean temperature of August there .",
        "db_id": "bike_1",
        "gold_parse": "SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE \"8/%\" GROUP BY zip_code",
        "predicted_parse_with_values": "select zip_code , avg ( mean_humidity ) from weather group by zip_code"
    },
    {
        "question": "How many tracks belong to rock genre ?",
        "db_id": "chinook_1",
        "gold_parse": "SELECT COUNT(*) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Rock\"",
        "predicted_parse_with_values": "select count ( * ) from Genre as T1 join Track as T2 on T1.GenreId = T2.GenreId where T1.Name = \"Drama\""
    },
    {
        "question": "How many cities are in Australia ?",
        "db_id": "sakila_1",
        "gold_parse": "SELECT count(*) FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id WHERE T2.country  =  'Australia'",
        "predicted_parse_with_values": "select count ( * ) from city as T1 join country as T2 on T1.country_id = T2.country_id where T2.country = \"Saint Vincent and the Grenadines\""
    },
    {
        "question": "how many people reside in california",
        "db_id": "geo",
        "gold_parse": "SELECT population FROM state WHERE state_name  =  \"california\"",
        "predicted_parse_with_values": "select sum ( population ) from state where area = \"dummy value\""
    },
    {
        "question": "Find the number and average age of students living in each city .",
        "db_id": "dorm_1",
        "gold_parse": "SELECT count(*) ,  avg(age) ,  city_code FROM student GROUP BY city_code",
        "predicted_parse_with_values": "select city_code , avg ( Age ) from Student group by city_code"
    },
    {
        "question": "What are the codes corresponding to document types for which there are less than 3 documents ?",
        "db_id": "cre_Docs_and_Epenses",
        "gold_parse": "SELECT document_type_code FROM Documents GROUP BY document_type_code HAVING count(*)  <  3",
        "predicted_parse_with_values": "select T2.Document_Type_Code from Documents as T1 join Ref_Document_Types as T2 on T1.Document_Type_Code = T2.Document_Type_Code group by T1.Document_Type_Code having count ( * ) < 1"
    },
    {
        "question": "What are the names of regions with two or more storms ?",
        "db_id": "storm_record",
        "gold_parse": "SELECT T1.region_name FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id HAVING count(*)  >=  2",
        "predicted_parse_with_values": "select Region_name from region group by Region_name having count ( * ) >= 1"
    },
    {
        "question": "List the name of all different customers who have some loan sorted by their total loan amount .",
        "db_id": "loan_1",
        "gold_parse": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount)",
        "predicted_parse_with_values": "select T3.cust_name from loan as T1 join bank as T2 on T1.branch_ID = T2.branch_ID join customer as T3 on T2.branch_ID = T3.branch_ID order by T1.amount"
    },
    {
        "question": "return me the authors who have more than 10 papers in the VLDB conference .",
        "db_id": "academic",
        "gold_parse": "SELECT t1.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"VLDB\" GROUP BY t1.name HAVING COUNT ( DISTINCT t4.title )  >  10",
        "predicted_parse_with_values": "select T3.* from conference as T1 join publication as T2 on T1.cid = T2.cid join writes as T3 on T2.pid = T3.pid where T1.name = \"dummy value\" group by T3.pid having count ( T1.name ) > 1"
    },
    {
        "question": "How many movies about Iraq war were produced in 2015 ?",
        "db_id": "imdb",
        "gold_parse": "SELECT COUNT ( DISTINCT t3.title  ) FROM tags AS t2 JOIN keyword AS t1 ON t2.kid  =  t1.id JOIN movie AS t3 ON t2.msid  =  t3.mid WHERE t1.keyword  =  \"Iraq war\" AND t3.release_year  =  2015",
        "predicted_parse_with_values": "select count ( * ) from movie where release_year = \"dummy value\" and release_year = \"dummy value\""
    },
    {
        "question": "What are the title and rental rate of the film with the highest rental rate ?",
        "db_id": "sakila_1",
        "gold_parse": "SELECT title ,  rental_rate FROM film ORDER BY rental_rate DESC LIMIT 1",
        "predicted_parse_with_values": "select title , rental_rate from film order by rating desc limit 1"
    },
    {
        "question": "Return the titles of films that include 'Deleted Scenes ' in their special feature section .",
        "db_id": "sakila_1",
        "gold_parse": "SELECT title FROM film WHERE special_features LIKE '%Deleted Scenes%'",
        "predicted_parse_with_values": "select T1.title from film_text as T1 join film as T2 where T2.special_features like \"Trailers\""
    },
    {
        "question": "What are the first and last name of the faculty who has the most students ?",
        "db_id": "activity_1",
        "gold_parse": "SELECT T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select T2.Fname , T2.Lname from Faculty_Participates_in as T1 join Faculty as T2 on T1.FacID = T2.FacID group by T1.FacID order by count ( * ) desc limit 1"
    },
    {
        "question": "What zip codes have a station with a max temperature greater than or equal to 80 and when did it reach that temperature ?",
        "db_id": "bike_1",
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
        "predicted_parse_with_values": "select zip_code from weather where max_temperature_f > ( select max ( max_temperature_f ) from weather where zip_code = 94041 )"
    },
    {
        "question": "For each station , return its longitude and the average duration of trips that started from the station .",
        "db_id": "bike_1",
        "gold_parse": "SELECT T1.name ,  T1.long ,  avg(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id GROUP BY T2.start_station_id",
        "predicted_parse_with_values": "select avg ( duration ) , start_station_name from trip group by start_station_name"
    },
    {
        "question": "Show the details and star ratings of the 3 least expensive hotels .",
        "db_id": "cre_Theme_park",
        "gold_parse": "SELECT other_hotel_details ,  star_rating_code FROM HOTELS ORDER BY price_range ASC LIMIT 3",
        "predicted_parse_with_values": "select other_hotel_details , star_rating_code from Hotels order by price_range limit 1"
    },
    {
        "question": "name the major lakes in michigan",
        "db_id": "geo",
        "gold_parse": "SELECT lake_name FROM lake WHERE area  >  750 AND state_name  =  \"michigan\"",
        "predicted_parse_with_values": "select T2.lake_name from state as T1 join lake as T2 where T1.state_name = \"dummy value\""
    },
    {
        "question": "What are the names of every person who has a friend over 40 and under 30 ?",
        "db_id": "network_2",
        "gold_parse": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  >  40) INTERSECT SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  <  30)",
        "predicted_parse_with_values": "select T2.name from PersonFriend as T1 join Person as T2 on T1.friend = T2.name where T1.friend > \"Bob\" and T2.age < 45"
    },
    {
        "question": "Which vocal type did the musician with last name \" Heilo \" played in the song with title \" Der Kapitan \" ?",
        "db_id": "music_2",
        "gold_parse": "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid JOIN band AS T3 ON T1.bandmate  =  T3.id WHERE T3.lastname  =  \"Heilo\" AND T2.title  =  \"Der Kapitan\"",
        "predicted_parse_with_values": "select T1.Type from Vocals as T1 join Songs as T2 on T1.SongId = T2.SongId where T2.Title = \"dummy value\" and T2.Title = \"dummy value\""
    },
    {
        "question": "Return the name of the youngest captain .",
        "db_id": "ship_1",
        "gold_parse": "SELECT name FROM captain ORDER BY age LIMIT 1",
        "predicted_parse_with_values": "select Name from captain order by age desc limit 1"
    },
    {
        "question": "Show flight number , origin , destination of all flights in the alphabetical order of the departure cities .",
        "db_id": "flight_1",
        "gold_parse": "SELECT flno ,  origin ,  destination FROM Flight ORDER BY origin",
        "predicted_parse_with_values": "select flno , origin , destination from flight order by flno"
    },
    {
        "question": "what states does the ohio river run through",
        "db_id": "geo",
        "gold_parse": "SELECT traverse FROM river WHERE river_name  =  \"ohio\"",
        "predicted_parse_with_values": "select T3.state_name from river as T1 join state as T2 on T1.traverse = T2.state_name join border_info as T3 on T2.state_name = T3.border where T1.river_name = \"dummy value\""
    },
    {
        "question": "Find the parties associated with the delegates from district 1 or 2. Who served as comptrollers of the parties ?",
        "db_id": "election",
        "gold_parse": "SELECT T2.Comptroller FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.District  =  1 OR T1.District  =  2",
        "predicted_parse_with_values": "select T2.Party from election as T1 join party as T2 on T1.Party = T2.Party_ID where T1.District = 4 and T2.Comptroller = \"John Faso\""
    },
    {
        "question": "how many people live in seattle washington",
        "db_id": "geo",
        "gold_parse": "SELECT population FROM city WHERE city_name  =  \"seattle\" AND state_name  =  \"washington\"",
        "predicted_parse_with_values": "select count ( * ) from city where city_name = \"dummy value\""
    },
    {
        "question": "what states have cities named springfield",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM city WHERE city_name  =  \"springfield\"",
        "predicted_parse_with_values": "select T2.state_name from city as T1 join state as T2 on T1.state_name = T2.state_name where T1.city_name = \"dummy value\""
    },
    {
        "question": "what is the longest river in the state with the highest point",
        "db_id": "geo",
        "gold_parse": "SELECT t1.river_name FROM highlow AS t2 JOIN river AS t1 ON t1.traverse  =  t2.state_name WHERE t2.highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow ) ORDER BY t1.length DESC LIMIT 1",
        "predicted_parse_with_values": "select T1.river_name from river as T1 join state as T2 on T1.traverse = T2.state_name join highlow as T3 on T2.state_name = T3.state_name order by T3.highest_point desc limit 1"
    },
    {
        "question": "Return the id of the staff whose Staff Department Assignment was earlier than that of any Clerical Staff .",
        "db_id": "department_store",
        "gold_parse": "SELECT staff_id FROM Staff_Department_Assignments WHERE date_assigned_to  <  (SELECT max(date_assigned_to) FROM Staff_Department_Assignments WHERE job_title_code  =  'Clerical Staff')",
        "predicted_parse_with_values": "select T2.staff_id from Staff_Department_Assignments as T1 join Staff as T2 on T1.staff_id = T2.staff_id where T1.date_assigned_from < ( select min ( date_assigned_from ) from Staff_Department_Assignments )"
    },
    {
        "question": "Find the name and country of origin for all artists who have release at least one song of resolution above 900 .",
        "db_id": "music_1",
        "gold_parse": "SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.resolution  >  900 GROUP BY T2.artist_name HAVING count(*)  >=  1",
        "predicted_parse_with_values": "select T2.artist_name , T1.country from song as T1 join artist as T2 on T1.artist_name = T2.artist_name where T1.resolution > 320"
    },
    {
        "question": "return me the total citations of all the papers in the VLDB conference .",
        "db_id": "academic",
        "gold_parse": "SELECT SUM ( t2.citation_num ) FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\"",
        "predicted_parse_with_values": "select ( T2.jid ) from conference as T1 join publication as T2 on T1.cid = T2.cid where T1.name = \"dummy value\""
    },
    {
        "question": "How many airlines operate out of each country in descending order ?",
        "db_id": "flight_4",
        "gold_parse": "SELECT country ,  count(*) FROM airlines GROUP BY country ORDER BY count(*) DESC",
        "predicted_parse_with_values": "select country , count ( * ) from airlines group by country order by count ( * ) desc"
    },
    {
        "question": "What is the average price for flights from Los Angeles to Honolulu .",
        "db_id": "flight_1",
        "gold_parse": "SELECT avg(price) FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\"",
        "predicted_parse_with_values": "select avg ( price ) from flight where destination = \"Chicago\" and destination = \"Chicago\""
    },
    {
        "question": "in which state does the highest point in usa exist",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM highlow WHERE highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow )",
        "predicted_parse_with_values": "select T1.state_name from border_info as T1 join state as T2 on T1.border = T2.state_name join highlow as T3 on T2.state_name = T3.state_name where T3.highest_elevation = \"dummy value\" order by T3.highest_point desc limit 1"
    },
    {
        "question": "What are the names , dates active , and number of deaths for storms that had 1 or more death ?",
        "db_id": "storm_record",
        "gold_parse": "SELECT name ,  dates_active ,  number_deaths FROM storm WHERE number_deaths  >=  1",
        "predicted_parse_with_values": "select Name , Dates_active , Number_Deaths from storm group by Storm_ID having count ( * ) >= 1"
    },
    {
        "question": "Which schools do not have any player ? Give me the school locations .",
        "db_id": "school_player",
        "gold_parse": "SELECT LOCATION FROM school WHERE School_ID NOT IN (SELECT School_ID FROM Player)",
        "predicted_parse_with_values": "select Location from school except select Location from school"
    },
    {
        "question": "What are the maximum and minimum resolution of songs whose duration is 3 minutes ?",
        "db_id": "music_1",
        "gold_parse": "SELECT max(T2.resolution) ,  min(T2.resolution) FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.duration LIKE \"3:%\"",
        "predicted_parse_with_values": "select max ( T1.resolution ) , min ( T1.resolution ) from song as T1 join files as T2 on T1.f_id = T2.f_id where T2.duration < \"4:34\""
    },
    {
        "question": "List the id , country , city and name of the airports ordered alphabetically by the name .",
        "db_id": "flight_company",
        "gold_parse": "SELECT id ,  country ,  city ,  name FROM airport ORDER BY name",
        "predicted_parse_with_values": "select id , City , Country from airport order by name"
    },
    {
        "question": "Find the first name and major of the students who are not allegry to soy .",
        "db_id": "allergy_1",
        "gold_parse": "SELECT fname ,  major FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Soy\")",
        "predicted_parse_with_values": "select T3.Fname , T3.Major from Allergy_Type as T1 join Has_Allergy as T2 on T1.Allergy = T2.Allergy join Student as T3 on T2.StuID = T3.StuID where T1.Allergytype != \"animal\""
    },
    {
        "question": "Find the number of papers published by the institution \" University of Pennsylvania \" .",
        "db_id": "icfp_1",
        "gold_parse": "SELECT count(DISTINCT t1.title) FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"University of Pennsylvania\"",
        "predicted_parse_with_values": "select count ( T3.paperID ) from Inst as T1 join Authorship as T2 on T1.instID = T2.instID join Papers as T3 on T2.paperID = T3.paperID where T1.name = \"Tohoku University\""
    },
    {
        "question": "Show the company name with the number of gas station .",
        "db_id": "gas_company",
        "gold_parse": "SELECT T2.company ,  count(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id GROUP BY T1.company_id",
        "predicted_parse_with_values": "select Company , count ( * ) from company group by Company_ID"
    },
    {
        "question": "give me the cities in usa",
        "db_id": "geo",
        "gold_parse": "SELECT city_name FROM city",
        "predicted_parse_with_values": "select city_name from city where country_name = \"dummy value\""
    },
    {
        "question": "How many rooms have a king bed ?",
        "db_id": "inn_1",
        "gold_parse": "SELECT count(*) FROM Rooms WHERE bedType  =  \"King\"",
        "predicted_parse_with_values": "select count ( * ) from Rooms where beds = 1"
    },
    {
        "question": "what is the length of the longest river in the usa",
        "db_id": "geo",
        "gold_parse": "SELECT LENGTH FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river )",
        "predicted_parse_with_values": "select T1.length from river as T1 join state as T2 on T1.traverse = T2.state_name where T2.country_name = \"dummy value\" order by T1.length desc limit 1"
    },
    {
        "question": "what is the most populous city in wyoming",
        "db_id": "geo",
        "gold_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name  =  \"wyoming\" ) AND state_name  =  \"wyoming\"",
        "predicted_parse_with_values": "select city_name from city where state_name = \"dummy value\" group by city_name order by count ( * ) desc limit 1"
    },
    {
        "question": "What is the \" active to date \" of the latest contact channel used by \" Tillman Ernser \" ?",
        "db_id": "customers_and_addresses",
        "gold_parse": "SELECT max(t2.active_to_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Tillman Ernser\"",
        "predicted_parse_with_values": "select active_from_date from Customer_Contact_Channels where active_to_date = \"2018-03-23 01:30:52\" order by active_to_date desc limit 1"
    },
    {
        "question": "What is the id of the shortest trip ?",
        "db_id": "bike_1",
        "gold_parse": "SELECT id FROM trip ORDER BY duration LIMIT 1",
        "predicted_parse_with_values": "select id from trip order by start_date limit 1"
    },
    {
        "question": "what state has the greatest population density",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM state WHERE density  =  ( SELECT MAX ( density ) FROM state )",
        "predicted_parse_with_values": "select state_name from state order by density desc limit 1"
    },
    {
        "question": "What are the names of colleges that have two or more players , listed in descending alphabetical order ?",
        "db_id": "match_season",
        "gold_parse": "SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2 ORDER BY College DESC",
        "predicted_parse_with_values": "select T1.College from match_season as T1 join team as T2 on T1.Team = T2.Team_id join player as T3 on T2.Team_id = T3.Team group by T1.College having count ( * ) >= 1 order by sum ( T3.Player ) desc"
    },
    {
        "question": "How many departments does the college has ?",
        "db_id": "college_1",
        "gold_parse": "SELECT count(DISTINCT dept_name) FROM department",
        "predicted_parse_with_values": "select count ( * ) from DEPARTMENT"
    },
    {
        "question": "Which school has the smallest amount of professors ?",
        "db_id": "college_1",
        "gold_parse": "SELECT T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.school_code ORDER BY count(*) LIMIT 1",
        "predicted_parse_with_values": "select T5.PROF_OFFICE from CLASS as T1 join ENROLL as T2 on T1.CLASS_CODE = T2.CLASS_CODE join STUDENT as T3 on T2.STU_NUM = T3.STU_NUM join DEPARTMENT as T4 on T3.DEPT_CODE = T4.DEPT_CODE join PROFESSOR as T5 on T4.DEPT_CODE = T5.DEPT_CODE group by T1.CLASS_CODE order by count ( * ) desc limit 1"
    },
    {
        "question": "What instrument did the musician with last name \" Heilo \" use in the song \" Badlands \" ?",
        "db_id": "music_2",
        "gold_parse": "SELECT T4.instrument FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId JOIN Instruments AS T4 ON T4.songid  =  T3.songid AND T4.bandmateid  =  T2.id WHERE T2.lastname  =  \"Heilo\" AND T3.title  =  \"Badlands\"",
        "predicted_parse_with_values": "select T2.Instrument from Songs as T1 join Instruments as T2 on T1.SongId = T2.SongId where T1.Title = \"dummy value\""
    },
    {
        "question": "What are the names of the people who have no friends who are students ?",
        "db_id": "network_2",
        "gold_parse": "SELECT name FROM person EXCEPT SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.job  =  'student'",
        "predicted_parse_with_values": "select name from Person except select name from PersonFriend where friend = \"Zach\""
    },
    {
        "question": "how many major rivers cross ohio",
        "db_id": "geo",
        "gold_parse": "SELECT COUNT ( river_name ) FROM river WHERE LENGTH  >  750 AND traverse  =  \"ohio\"",
        "predicted_parse_with_values": "select count ( * ) from river as T1 join state as T2 on T1.traverse = T2.state_name join border_info as T3 on T2.state_name = T3.border where T3.state_name = \"dummy value\""
    },
    {
        "question": "What is the first name and the last name of the customer who made the earliest rental ?",
        "db_id": "sakila_1",
        "gold_parse": "SELECT T1.first_name ,  T1.last_name FROM customer AS T1 JOIN rental AS T2 ON T1.customer_id  =  T2.customer_id ORDER BY T2.rental_date ASC LIMIT 1",
        "predicted_parse_with_values": "select T1.first_name , T1.last_name from customer as T1 join rental as T2 on T1.customer_id = T2.customer_id order by T2.rental_date limit 1"
    },
    {
        "question": "Return the distinct name of customers whose order status is Pending , in the order of customer id .",
        "db_id": "department_store",
        "gold_parse": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"Pending\" ORDER BY T2.customer_id",
        "predicted_parse_with_values": "select T1.customer_name from Customers as T1 join Customer_Orders as T2 on T1.customer_id = T2.customer_id where T2.order_status_code = \"Cancelled\" order by T1.customer_name"
    },
    {
        "question": "what rivers are in states that border alabama",
        "db_id": "geo",
        "gold_parse": "SELECT river_name FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name  =  \"alabama\" )",
        "predicted_parse_with_values": "select T1.river_name from river as T1 join state as T2 on T1.traverse = T2.state_name join border_info as T3 on T2.state_name = T3.border where T3.border = \"dummy value\""
    },
    {
        "question": "What are the party emails associated with parties that used the party form that is the most common ?",
        "db_id": "e_government",
        "gold_parse": "SELECT t1.party_email FROM parties AS t1 JOIN party_forms AS t2 ON t1.party_id  =  t2.party_id WHERE t2.form_id  =  (SELECT form_id FROM party_forms GROUP BY form_id ORDER BY count(*) DESC LIMIT 1)",
        "predicted_parse_with_values": "select T1.party_email from Parties as T1 join Party_Forms as T2 on T1.party_id = T2.party_id group by T1.party_email order by count ( party_Forms.* ) desc limit 1"
    },
    {
        "question": "What are the names of the technicians by ascending order of quality rank for the machine they are assigned ?",
        "db_id": "machine_repair",
        "gold_parse": "SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID ORDER BY T2.quality_rank",
        "predicted_parse_with_values": "select T1.Name from technician as T1 join repair_assignment as T2 on T1.technician_id = T2.technician_id join machine as T3 on T2.Machine_ID = T3.Machine_ID order by T3.quality_rank asc"
    },
    {
        "question": "return me the number of papers published in PVLDB in each year .",
        "db_id": "academic",
        "gold_parse": "SELECT COUNT ( DISTINCT t2.title )  ,  t2.year FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" GROUP BY t2.year",
        "predicted_parse_with_values": "select count ( T2.jid ) , T2.year from organization as T1 join publication as T2 where T1.name = \"dummy value\" group by T2.year"
    },
    {
        "question": "Find the first and last name of students who are living in the dorms that have amenity TV Lounge .",
        "db_id": "dorm_1",
        "gold_parse": "SELECT T1.fname ,  T1.lname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid IN (SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid  =  T4.amenid WHERE T4.amenity_name  =  'TV Lounge')",
        "predicted_parse_with_values": "select T1.Fname , T1.LName from Student as T1 join Lives_in as T2 on T1.StuID = T2.stuid join Dorm as T3 on T2.dormid = T3.dormid join Has_amenity as T4 on T3.dormid = T4.dormid join Dorm_amenity as T5 on T4.amenid = T5.amenid where T5.amenity_name = \"Allows Pets\""
    },
    {
        "question": "What is the last name of the musician that have produced the most songs ?",
        "db_id": "music_2",
        "gold_parse": "SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId GROUP BY lastname ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select T1.Lastname from Band as T1 join Vocals as T2 on T1.Id = T2.Bandmate join Songs as T3 on T2.SongId = T3.SongId group by T1.Lastname order by count ( * ) desc limit 1"
    },
    {
        "question": "Show all document type codes , document type names , document type descriptions .",
        "db_id": "cre_Docs_and_Epenses",
        "gold_parse": "SELECT document_type_code ,  document_type_name ,  document_type_description FROM Ref_document_types",
        "predicted_parse_with_values": "select T2.Document_Type_Code , T2.Document_Type_Name , T1.Document_Description from Documents as T1 join Ref_Document_Types as T2 on T1.Document_Type_Code = T2.Document_Type_Code"
    },
    {
        "question": "How many parks are there in the state of NY ?",
        "db_id": "baseball_1",
        "gold_parse": "SELECT count(*) FROM park WHERE state  =  'NY'",
        "predicted_parse_with_values": "select count ( * ) from park where state = \"FL\""
    },
    {
        "question": "Which allergy type has most number of allergies ?",
        "db_id": "allergy_1",
        "gold_parse": "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select Allergytype from Allergy_Type group by Allergytype order by count ( * ) desc limit 1"
    },
    {
        "question": "Count different addresses of each school .",
        "db_id": "college_1",
        "gold_parse": "SELECT count(DISTINCT dept_address) ,  school_code FROM department GROUP BY school_code",
        "predicted_parse_with_values": "select count ( * ) , T4.DEPT_ADDRESS from CLASS as T1 join ENROLL as T2 on T1.CLASS_CODE = T2.CLASS_CODE join STUDENT as T3 on T2.STU_NUM = T3.STU_NUM join DEPARTMENT as T4 on T3.DEPT_CODE = T4.DEPT_CODE group by T1.CLASS_CODE"
    },
    {
        "question": "List the first and last name of students who are not living in the city with code HKG , and sorted the results by their ages .",
        "db_id": "dorm_1",
        "gold_parse": "SELECT fname ,  lname FROM student WHERE city_code != 'HKG' ORDER BY age",
        "predicted_parse_with_values": "select Fname , LName from Student where city_code != \"DAL\" order by LName"
    },
    {
        "question": "Find the name and age of the person who is a friend of Dan or Alice .",
        "db_id": "network_2",
        "gold_parse": "SELECT DISTINCT T1.name ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Dan' OR T2.friend  =  'Alice'",
        "predicted_parse_with_values": "select T2.name , T2.age from PersonFriend as T1 join Person as T2 on T1.friend = T2.name where T1.friend = \"Alice\" or T1.friend = \"Dan\""
    },
    {
        "question": "What are the names of the different artists from Bangladesh who never received a rating higher than a 7 ?",
        "db_id": "music_1",
        "gold_parse": "SELECT DISTINCT artist_name FROM artist WHERE country  =  \"Bangladesh\" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating  >  7",
        "predicted_parse_with_values": "select T2.artist_name from song as T1 join artist as T2 on T1.artist_name = T2.artist_name where T2.country = \"USA\" and T1.rating > 8"
    },
    {
        "question": "What are the countries for each market ordered by decreasing number of cities ?",
        "db_id": "film_rank",
        "gold_parse": "SELECT Country FROM market ORDER BY Number_cities DESC",
        "predicted_parse_with_values": "select Country , Number_cities from market order by Number_cities desc"
    },
    {
        "question": "Show all student ids and the number of hours played .",
        "db_id": "game_1",
        "gold_parse": "SELECT Stuid ,  sum(hours_played) FROM Plays_games GROUP BY Stuid",
        "predicted_parse_with_values": "select StuID , count ( * ) from Student group by StuID"
    },
    {
        "question": "Find the average and minimum price of the rooms in different decor .",
        "db_id": "inn_1",
        "gold_parse": "SELECT decor , avg(basePrice) ,  min(basePrice) FROM Rooms GROUP BY decor",
        "predicted_parse_with_values": "select avg ( basePrice ) , min ( basePrice ) , decor from Rooms group by decor"
    },
    {
        "question": "How many schools have some students playing in goalie and mid positions .",
        "db_id": "soccer_2",
        "gold_parse": "SELECT COUNT(*) FROM (SELECT cName FROM  tryout WHERE pPos  =  'goalie' INTERSECT SELECT cName FROM  tryout WHERE pPos  =  'mid')",
        "predicted_parse_with_values": "select count ( * ) from Tryout as T1 join Player as T2 on T1.pID = T2.pID where T1.pPos = \"mid\" intersect select T4.cName from Tryout as T3 join College as T4 on T3.cName = T4.cName where T3.pPos = \"striker\""
    },
    {
        "question": "What are the names of rooms whose reservation frequency exceeds 60 times ?",
        "db_id": "inn_1",
        "gold_parse": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room HAVING count(*)  >  60",
        "predicted_parse_with_values": "select T1.roomName from Rooms as T1 join Reservations as T2 on T1.RoomId = T2.Room where T2.Rate > 156.25"
    },
    {
        "question": "For each product type , return the maximum and minimum price .",
        "db_id": "department_store",
        "gold_parse": "SELECT product_type_code ,  max(product_price) ,  min(product_price) FROM products GROUP BY product_type_code",
        "predicted_parse_with_values": "select product_type_code , max ( product_price ) from Products group by product_type_code"
    },
    {
        "question": "Return the description and unit of measurement for products in the 'Herbs ' category .",
        "db_id": "products_gen_characteristics",
        "gold_parse": "SELECT product_category_description ,  unit_of_measure FROM ref_product_categories WHERE product_category_code  =  \"Herbs\"",
        "predicted_parse_with_values": "select T1.product_category_description , T1.unit_of_measure from Ref_Product_Categories as T1 join Products as T2 on T1.product_category_code = T2.product_category_code where T2.product_name = \"ginger\""
    },
    {
        "question": "what is the capital of the texas state",
        "db_id": "geo",
        "gold_parse": "SELECT capital FROM state WHERE state_name  =  \"texas\"",
        "predicted_parse_with_values": "select T2.capital from city as T1 join state as T2 on T1.state_name = T2.state_name where T1.state_name = \"dummy value\""
    },
    {
        "question": "Give me the the first and last name of the faculty who advises the most students .",
        "db_id": "activity_1",
        "gold_parse": "SELECT T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select T2.Fname , T2.Lname from Faculty_Participates_in as T1 join Faculty as T2 on T1.FacID = T2.FacID group by T1.FacID order by count ( * ) desc limit 1"
    },
    {
        "question": "Please show the names of the buildings whose status is \" on-hold \" , in ascending order of stories .",
        "db_id": "company_office",
        "gold_parse": "SELECT name FROM buildings WHERE Status  =  \"on-hold\" ORDER BY Stories ASC",
        "predicted_parse_with_values": "select name from buildings where Status = \"on-hold\" order by Stories"
    },
    {
        "question": "what is the capital of the smallest state",
        "db_id": "geo",
        "gold_parse": "SELECT capital FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state )",
        "predicted_parse_with_values": "select capital from state order by density limit 1"
    },
    {
        "question": "which state has the least population density",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM state WHERE density  =  ( SELECT MIN ( density ) FROM state )",
        "predicted_parse_with_values": "select state_name from state order by density asc limit 1"
    },
    {
        "question": "give me the states that border kentucky",
        "db_id": "geo",
        "gold_parse": "SELECT border FROM border_info WHERE state_name  =  \"kentucky\"",
        "predicted_parse_with_values": "select T2.state_name from border_info as T1 join state as T2 on T1.border = T2.state_name where T1.border = \"dummy value\""
    },
    {
        "question": "Count the total number of games the team Boston Red Stockings attended from 1990 to 2000 .",
        "db_id": "baseball_1",
        "gold_parse": "SELECT sum(T1.games) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' AND T1.year BETWEEN 1990 AND 2000",
        "predicted_parse_with_values": "select count ( * ) from team as T1 join batting_postseason as T2 on T1.team_id = T2.team_id join player as T3 on T2.player_id = T3.player_id join team_franchise as T4 where T4.franchise_name = \"Brooklyn Ward's Wonders\" and T1.year = 1938"
    },
    {
        "question": "return me the number of authors who have cooperated with \" H. V. Jagadish \" .",
        "db_id": "academic",
        "gold_parse": "SELECT COUNT ( DISTINCT t2.name ) FROM writes AS t3 JOIN author AS t2 ON t3.aid  =  t2.aid JOIN publication AS t5 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\"",
        "predicted_parse_with_values": "select count ( * ) from cite where cited = \"dummy value\""
    },
    {
        "question": "Return the name of the party with the most members .",
        "db_id": "party_people",
        "gold_parse": "SELECT T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select T1.Party_name from party as T1 join member as T2 on T1.Party_ID = T2.Party_ID order by T2.Member_Name desc limit 1"
    },
    {
        "question": "What are the names of all clubs that do not have any players ?",
        "db_id": "sports_competition",
        "gold_parse": "SELECT name FROM CLub WHERE Club_ID NOT IN (SELECT Club_ID FROM player)",
        "predicted_parse_with_values": "select name from club except select name from club"
    },
    {
        "question": "What are the names of the clubs that have \" Davis Steven \" as a member ?",
        "db_id": "club_1",
        "gold_parse": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Davis\" AND t3.lname  =  \"Steven\"",
        "predicted_parse_with_values": "select T3.ClubName from Student as T1 join Member_of_club as T2 on T1.StuID = T2.StuID join Club as T3 on T2.ClubID = T3.ClubID where T1.Fname = \"Bruce\""
    },
    {
        "question": "What is the last name of the contact individual from the Labour party organization who was contacted most recently ?",
        "db_id": "e_government",
        "gold_parse": "SELECT t3.individual_last_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id JOIN individuals AS t3 ON t2.individual_id  =  t3.individual_id WHERE t1.organization_name  =  \"Labour Party\" ORDER BY t2.date_contact_to DESC LIMIT 1",
        "predicted_parse_with_values": "select T2.individual_last_name from Organization_Contact_Individuals as T1 join Individuals as T2 on T1.individual_id = T2.individual_id join Organizations as T3 on T1.organization_id = T3.organization_id where T3.organization_name = \"Liberal Democrats\" order by T1.date_contact_from desc limit 1"
    },
    {
        "question": "what is the city in wyoming with the largest population",
        "db_id": "geo",
        "gold_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name  =  \"wyoming\" ) AND state_name  =  \"wyoming\"",
        "predicted_parse_with_values": "select city_name from city where state_name = \"dummy value\" order by population desc limit 1"
    },
    {
        "question": "which state has the ohio river",
        "db_id": "geo",
        "gold_parse": "SELECT traverse FROM river WHERE river_name  =  \"ohio\"",
        "predicted_parse_with_values": "select T2.state_name from river as T1 join state as T2 on T1.traverse = T2.state_name where T1.river_name = \"dummy value\""
    },
    {
        "question": "what states border states that border the state with the largest population",
        "db_id": "geo",
        "gold_parse": "SELECT t1.border FROM border_info AS t2 JOIN border_info AS t1 ON t2.border  =  t1.state_name WHERE t2.state_name IN ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state ) )",
        "predicted_parse_with_values": "select T1.border from border_info as T1 join state as T2 on T1.border = T2.state_name where T2.population = ( select max ( population ) from state )"
    },
    {
        "question": "Find the total checking and saving balance of all accounts sorted by the total balance in ascending order .",
        "db_id": "small_bank_1",
        "gold_parse": "SELECT T1.balance + T2.balance FROM checking AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid ORDER BY T1.balance + T2.balance",
        "predicted_parse_with_values": "select balance , sum ( balance ) from CHECKING group by custid order by sum ( balance )"
    },
    {
        "question": "what state is the largest in population",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state )",
        "predicted_parse_with_values": "select state_name from state order by population desc limit 1"
    },
    {
        "question": "what are the major rivers in the us",
        "db_id": "geo",
        "gold_parse": "SELECT river_name FROM river",
        "predicted_parse_with_values": "select T1.river_name from river as T1 join state as T2 on T1.traverse = T2.state_name where T2.country_name = \"dummy value\""
    },
    {
        "question": "What is the name and opening year for the branch that registered the most members in 2016 ?",
        "db_id": "shop_membership",
        "gold_parse": "SELECT T2.name ,  T2.open_year FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.register_year  =  2016 GROUP BY T2.branch_id ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select T2.Name , T2.Open_year from membership_register_branch as T1 join branch as T2 on T1.Branch_ID = T2.Branch_ID where T1.Register_Year = ( select max ( Register_Year ) from membership_register_branch where Branch_ID = 5 )"
    },
    {
        "question": "Show all storm names except for those with at least two affected regions .",
        "db_id": "storm_record",
        "gold_parse": "SELECT name FROM storm EXCEPT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING count(*)  >=  2",
        "predicted_parse_with_values": "select Name from storm group by Name having count ( * ) >= 1"
    },
    {
        "question": "How old is the doctor named Zach ?",
        "db_id": "network_2",
        "gold_parse": "SELECT age FROM Person WHERE job  =  'doctor' AND name  =  'Zach'",
        "predicted_parse_with_values": "select T2.age from PersonFriend as T1 join Person as T2 on T1.friend = T2.name where T1.name = \"Bob\""
    },
    {
        "question": "return me the paper with more than 200 citations .",
        "db_id": "academic",
        "gold_parse": "SELECT title FROM publication WHERE citation_num  >  200",
        "predicted_parse_with_values": "select citation_num from publication group by citation_num having count ( jid ) > 1"
    },
    {
        "question": "For each grade , report the grade , the number of classrooms in which it is taught and the total number of students in the grade .",
        "db_id": "student_1",
        "gold_parse": "SELECT grade ,  count(DISTINCT classroom) ,  count(*) FROM list GROUP BY grade",
        "predicted_parse_with_values": "select T2.Grade , count ( * ) , T1.Classroom from teachers as T1 join list as T2 group by T2.Grade"
    },
    {
        "question": "What are the names of countains that no climber has climbed ?",
        "db_id": "climbing",
        "gold_parse": "SELECT Name FROM mountain WHERE Mountain_ID NOT IN (SELECT Mountain_ID FROM climber)",
        "predicted_parse_with_values": "select Name from climber except select Name from climber"
    },
    {
        "question": "How many artists are male and how many are female ?",
        "db_id": "music_1",
        "gold_parse": "SELECT count(*) ,  gender FROM artist GROUP BY gender",
        "predicted_parse_with_values": "select count ( * ) from artist where gender = \"Female\""
    },
    {
        "question": "Show the names and ids of tourist attractions that are visited at most once .",
        "db_id": "cre_Theme_park",
        "gold_parse": "SELECT T1.Name ,  T1.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*)  <=  1",
        "predicted_parse_with_values": "select Name , Tourist_Attraction_ID from Tourist_Attractions group by Tourist_Attraction_ID order by count ( * ) desc limit 1"
    },
    {
        "question": "what is the name of the state with the lowest point",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM highlow WHERE lowest_elevation  =  ( SELECT MIN ( lowest_elevation ) FROM highlow )",
        "predicted_parse_with_values": "select T1.state_name from mountain as T1 join state as T2 on T1.state_name = T2.state_name join highlow as T3 on T2.state_name = T3.state_name order by T3.lowest_point limit 1"
    },
    {
        "question": "what are the capital city in texas",
        "db_id": "geo",
        "gold_parse": "SELECT capital FROM state WHERE state_name  =  \"texas\"",
        "predicted_parse_with_values": "select T2.capital from city as T1 join state as T2 on T1.state_name = T2.state_name where T1.state_name = \"dummy value\""
    },
    {
        "question": "Find all actors from Canada who acted in \" James Bond \" movies",
        "db_id": "imdb",
        "gold_parse": "SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t1.nationality  =  \"Canada\" AND t3.title  =  \"James Bond\"",
        "predicted_parse_with_values": "select T1.name from actor as T1 join cast as T2 on T1.aid = T2.aid join copyright as T3 on T2.msid = T3.msid join directed_by as T4 on T3.msid = T4.msid join director as T5 on T4.did = T5.did where T1.nationality = \"dummy value\" and T5.nationality = \"dummy value\""
    },
    {
        "question": "Return the different statuses of cities , ascending by frequency .",
        "db_id": "farm",
        "gold_parse": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) ASC",
        "predicted_parse_with_values": "select Status from city order by Status asc"
    },
    {
        "question": "What are the different first names for customers from Brazil who have also had an invoice ?",
        "db_id": "chinook_1",
        "gold_parse": "SELECT DISTINCT T1.FirstName FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  \"Brazil\"",
        "predicted_parse_with_values": "select FirstName from Customer where Country = \"Brazil\" intersect select T1.FirstName from Customer as T1 join Invoice as T2 on T1.CustomerId = T2.CustomerId where T2.BillingCountry = \"Ireland\""
    },
    {
        "question": "Find names of all colleges whose enrollment is greater than that of all colleges in the FL state .",
        "db_id": "soccer_2",
        "gold_parse": "SELECT cName FROM college WHERE enr  >  (SELECT max(enr) FROM college WHERE state  =  'FL')",
        "predicted_parse_with_values": "select cName from College where enr > ( select min ( enr ) from College where state = \"OK\" )"
    },
    {
        "question": "How many tracks are in the AAC audio file media type ?",
        "db_id": "chinook_1",
        "gold_parse": "SELECT COUNT(*) FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId  =  T2.MediaTypeId WHERE T1.Name  =  \"AAC audio file\"",
        "predicted_parse_with_values": "select count ( * ) from MediaType where Name = \"MPEG audio file\""
    },
    {
        "question": "Who are the players from UCLA ?",
        "db_id": "match_season",
        "gold_parse": "SELECT Player FROM match_season WHERE College  =  \"UCLA\"",
        "predicted_parse_with_values": "select T1.Player from player as T1 join team as T2 on T1.Team = T2.Team_id where T2.Name = \"Ryley Goldner\""
    },
    {
        "question": "What is the first and last name of the student who played the most sports ?",
        "db_id": "game_1",
        "gold_parse": "SELECT T2.Fname ,  T2.Lname FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID GROUP BY T1.StuID ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select Fname , LName from Student group by StuID order by count ( * ) desc limit 1"
    },
    {
        "question": "return me the number of the keywords related to \" H. V. Jagadish \" .",
        "db_id": "academic",
        "gold_parse": "SELECT COUNT ( DISTINCT t1.keyword ) FROM publication_keyword AS t5 JOIN keyword AS t1 ON t5.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t3.pid JOIN author AS t2 ON t4.aid  =  t2.aid WHERE t2.name  =  \"H. V. Jagadish\"",
        "predicted_parse_with_values": "select count ( * ) from keyword as T1 join publication_keyword as T2 on T1.kid = T2.kid join publication as T3 on T2.pid = T3.pid join writes as T4 on T3.pid = T4.pid join author as T5 on T4.aid = T5.aid join domain_author as T6 on T5.aid = T6.aid join domain as T7 on T6.did = T7.did where T7.name = \"dummy value\""
    },
    {
        "question": "What are the support , consider , and oppose rates of each candidate , ordered ascending by their unsure rate ?",
        "db_id": "candidate_poll",
        "gold_parse": "SELECT Support_rate ,  Consider_rate ,  Oppose_rate FROM candidate ORDER BY unsure_rate",
        "predicted_parse_with_values": "select Support_rate , Consider_rate , Oppose_rate from candidate order by Unsure_rate"
    },
    {
        "question": "how many citizens in boulder",
        "db_id": "geo",
        "gold_parse": "SELECT population FROM city WHERE city_name  =  \"boulder\"",
        "predicted_parse_with_values": "select sum ( T1.population ) from city as T1 join state as T2 on T1.state_name = T2.state_name where T2.area = \"dummy value\""
    },
    {
        "question": "How many students participated in tryouts for each college by descennding count ?",
        "db_id": "soccer_2",
        "gold_parse": "SELECT count(*) ,  cName FROM tryout GROUP BY cName ORDER BY count(*) DESC",
        "predicted_parse_with_values": "select T2.cName , count ( * ) from Tryout as T1 join College as T2 on T1.cName = T2.cName group by T1.cName"
    },
    {
        "question": "Which tourist attractions can we get to by bus ? Tell me the names of the attractions .",
        "db_id": "cre_Theme_park",
        "gold_parse": "SELECT Name FROM TOURIST_ATTRACTIONS WHERE How_to_Get_There  =  \"bus\"",
        "predicted_parse_with_values": "select Name from Tourist_Attractions"
    },
    {
        "question": "What is the first and last name of the faculty members who participated in at least one activity ? For each of them , also show the number of activities they participated in .",
        "db_id": "activity_1",
        "gold_parse": "SELECT  T1.fname ,  T1.lname ,  count(*) ,  T1.FacID FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID GROUP BY T1.FacID",
        "predicted_parse_with_values": "select Fname , Lname , count ( * ) from Faculty group by FacID having count ( * ) >= 1"
    },
    {
        "question": "what is the highest point in delaware in meters",
        "db_id": "geo",
        "gold_parse": "SELECT highest_elevation FROM highlow WHERE state_name  =  \"delaware\"",
        "predicted_parse_with_values": "select max ( T3.highest_point ) from mountain as T1 join state as T2 on T1.state_name = T2.state_name join highlow as T3 on T2.state_name = T3.state_name where T1.state_name = \"dummy value\""
    },
    {
        "question": "Who are the ministers and what parties do they belong to , listed descending by the times they took office ?",
        "db_id": "party_people",
        "gold_parse": "SELECT minister ,  party_name FROM party ORDER BY took_office DESC",
        "predicted_parse_with_values": "select Minister , Took_office from party order by Took_office desc"
    },
    {
        "question": "Show the student id of the oldest student .",
        "db_id": "allergy_1",
        "gold_parse": "SELECT StuID FROM Student WHERE age  =  (SELECT max(age) FROM Student)",
        "predicted_parse_with_values": "select Fname from Student order by Age desc limit 1"
    },
    {
        "question": "Find the number of teachers who teach the student called MADLOCK RAY .",
        "db_id": "student_1",
        "gold_parse": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"MADLOCK\" AND T1.lastname  =  \"RAY\"",
        "predicted_parse_with_values": "select count ( * ) from list as T1 join teachers as T2 where T2.FirstName = \" ALFREDA\" and T1.LastName = \"NAKAHARA\""
    },
    {
        "question": "Which activity has the most faculty members participating in ? Find the activity name .",
        "db_id": "activity_1",
        "gold_parse": "SELECT T1.activity_name FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select T1.activity_name from Activity as T1 join Participates_in as T2 on T1.actid = T2.actid group by T2.actid order by count ( * ) desc limit 1"
    },
    {
        "question": "Find the name of bank branches that provided some loans .",
        "db_id": "loan_1",
        "gold_parse": "SELECT DISTINCT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id",
        "predicted_parse_with_values": "select bname from bank"
    },
    {
        "question": "For each location , how many gas stations are there in order ?",
        "db_id": "gas_company",
        "gold_parse": "SELECT LOCATION ,  count(*) FROM gas_station GROUP BY LOCATION ORDER BY count(*)",
        "predicted_parse_with_values": "select count ( * ) , Location from gas_station group by Location order by count ( * ) asc"
    },
    {
        "question": "what states contain at least one major rivers",
        "db_id": "geo",
        "gold_parse": "SELECT traverse FROM river WHERE LENGTH  >  750",
        "predicted_parse_with_values": "select T2.state_name from river as T1 join lake as T2 group by T2.state_name having count ( * ) >= 1"
    },
    {
        "question": "What is the highest salary among each team ? List the team name , id and maximum salary .",
        "db_id": "baseball_1",
        "gold_parse": "SELECT T1.name ,  T1.team_id ,  max(T2.salary) FROM team AS T1 JOIN salary AS T2 ON T1.team_id  =  T2.team_id GROUP BY T1.team_id",
        "predicted_parse_with_values": "select max ( salary ) , max ( salary ) , team_id from salary group by team_id"
    },
    {
        "question": "For each classroom report the grade that is taught in it . Report just the classroom number and the grade number .",
        "db_id": "student_1",
        "gold_parse": "SELECT DISTINCT classroom ,  grade FROM list",
        "predicted_parse_with_values": "select T2.Grade , T1.Classroom , count ( * ) from teachers as T1 join list as T2 group by T2.Grade"
    },
    {
        "question": "what state contains the highest point in the us",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM highlow WHERE highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow )",
        "predicted_parse_with_values": "select T1.state_name from border_info as T1 join state as T2 on T1.border = T2.state_name join highlow as T3 on T2.state_name = T3.state_name where T3.highest_elevation = \"dummy value\" order by T3.highest_point desc limit 1"
    },
    {
        "question": "How many Bangladeshi artists are listed ?",
        "db_id": "music_1",
        "gold_parse": "SELECT count(*) FROM artist WHERE country  =  \"Bangladesh\"",
        "predicted_parse_with_values": "select count ( * ) from artist where gender = \"Male\""
    },
    {
        "question": "How many females are in the network ?",
        "db_id": "network_2",
        "gold_parse": "SELECT count(*) FROM Person WHERE gender  =  'female'",
        "predicted_parse_with_values": "select count ( * ) from Person where gender = \"female\""
    },
    {
        "question": "What are the ids of the top three products that were purchased in the largest amount ?",
        "db_id": "department_store",
        "gold_parse": "SELECT product_id FROM product_suppliers ORDER BY total_amount_purchased DESC LIMIT 3",
        "predicted_parse_with_values": "select product_id from Products order by product_price desc limit 1"
    },
    {
        "question": "Show the name of colleges that have at least two players .",
        "db_id": "match_season",
        "gold_parse": "SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2",
        "predicted_parse_with_values": "select College from match_season group by College having count ( * ) >= 1"
    },
    {
        "question": "What is the number of cities in the United States with more than 3 airports ?",
        "db_id": "flight_4",
        "gold_parse": "SELECT city FROM airports WHERE country  =  'United States' GROUP BY city HAVING count(*)  >  3",
        "predicted_parse_with_values": "select count ( * ) from airports where city > \"Salon\" group by city having count ( * ) > 1"
    },
    {
        "question": "Which film actor ( actress ) starred the most films ? List his or her first name , last name and actor id .",
        "db_id": "sakila_1",
        "gold_parse": "SELECT T2.first_name ,  T2.last_name ,  T2.actor_id FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id  =  T2.actor_id GROUP BY T2.actor_id ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select T3.first_name , T3.last_name , T1.film_id from film_text as T1 join film_actor as T2 join actor as T3 group by T2.actor_id order by count ( * ) desc limit 1"
    },
    {
        "question": "What is the name of the department that has the largest number of students enrolled ?",
        "db_id": "college_1",
        "gold_parse": "SELECT T4.dept_name FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN department AS T4 ON T3.dept_code  =  T4.dept_code GROUP BY T3.dept_code ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select DEPT_NAME from DEPARTMENT group by DEPT_NAME order by count ( * ) desc limit 1"
    },
    {
        "question": "Find the names of the artists who are from UK and have produced English songs .",
        "db_id": "music_1",
        "gold_parse": "SELECT artist_name FROM artist WHERE country  =  \"UK\" INTERSECT SELECT artist_name FROM song WHERE languages  =  \"english\"",
        "predicted_parse_with_values": "select artist_name from song where country = \"Bangladesh\" and languages = \"english\""
    },
    {
        "question": "what is the highest mountain in the us",
        "db_id": "geo",
        "gold_parse": "SELECT mountain_name FROM mountain WHERE mountain_altitude  =  ( SELECT MAX ( mountain_altitude ) FROM mountain )",
        "predicted_parse_with_values": "select T1.mountain_altitude from mountain as T1 join state as T2 on T1.state_name = T2.state_name join highlow as T3 on T2.state_name = T3.state_name where T2.country_name = \"dummy value\" order by T3.highest_elevation desc limit 1"
    },
    {
        "question": "what is the lowest point of iowa",
        "db_id": "geo",
        "gold_parse": "SELECT lowest_point FROM highlow WHERE state_name  =  \"iowa\"",
        "predicted_parse_with_values": "select min ( lowest_point ) from highlow where state_name = \"dummy value\""
    },
    {
        "question": "Find the first and last name of all the teachers that teach EVELINA BROMLEY .",
        "db_id": "student_1",
        "gold_parse": "SELECT T2.firstname ,  T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"EVELINA\" AND T1.lastname  =  \"BROMLEY\"",
        "predicted_parse_with_values": "select T2.FirstName , T1.LastName from teachers as T1 join list as T2 where T1.FirstName = \" OTHA\""
    },
    {
        "question": "Which allergy is the most common ?",
        "db_id": "allergy_1",
        "gold_parse": "SELECT Allergy FROM Has_allergy GROUP BY Allergy ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select Allergy from Has_Allergy group by Allergy order by count ( * ) desc limit 1"
    },
    {
        "question": "What are the average prices of products , grouped by manufacturer name ?",
        "db_id": "manufactory_1",
        "gold_parse": "SELECT avg(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name",
        "predicted_parse_with_values": "select avg ( Price ) , Name from Products group by Name"
    },
    {
        "question": "return me the number of keywords in VLDB conference .",
        "db_id": "academic",
        "gold_parse": "SELECT COUNT ( DISTINCT t1.keyword ) FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t4.pid JOIN conference AS t2 ON t3.cid  =  t2.cid WHERE t2.name  =  \"VLDB\"",
        "predicted_parse_with_values": "select count ( T8.* ) from conference as T1 join publication as T2 on T1.cid = T2.cid join writes as T3 on T2.pid = T3.pid join author as T4 on T3.aid = T4.aid join domain_author as T5 on T4.aid = T5.aid join domain as T6 on T5.did = T6.did join domain_keyword as T7 on T6.did = T7.did join keyword as T8 on T7.kid = T8.kid where T1.name = \"dummy value\""
    },
    {
        "question": "For each phone , show its names and total number of stocks .",
        "db_id": "phone_market",
        "gold_parse": "SELECT T2.Name ,  sum(T1.Num_of_stock) FROM phone_market AS T1 JOIN phone AS T2 ON T1.Phone_ID  =  T2.Phone_ID GROUP BY T2.Name",
        "predicted_parse_with_values": "select Name , count ( * ) from phone group by Name"
    },
    {
        "question": "What is the name of the bank branch that has lended the largest total amount in loans , specifically to customers with credit scores below 100 ?",
        "db_id": "loan_1",
        "gold_parse": "SELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id  =  T2.branch_id JOIN customer AS T3 ON T1.cust_id  =  T3.cust_id WHERE T3.credit_score  <  100 GROUP BY T2.bname ORDER BY sum(T1.amount) DESC LIMIT 1",
        "predicted_parse_with_values": "select T3.cust_name from loan as T1 join bank as T2 on T1.branch_ID = T2.branch_ID join customer as T3 on T2.branch_ID = T3.branch_ID where T3.credit_score < 210 order by T1.amount desc limit 1"
    },
    {
        "question": "What are the names of the storms that affected Denmark ?",
        "db_id": "storm_record",
        "gold_parse": "SELECT T3.name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.region_name  =  'Denmark'",
        "predicted_parse_with_values": "select Name from storm where Name = \"One\""
    },
    {
        "question": "What is the id of the routes whose source and destination airports are in the United States ?",
        "db_id": "flight_4",
        "gold_parse": "SELECT rid FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'United States') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')",
        "predicted_parse_with_values": "select rid , dst_apid from routes where src_ap = \"ST\""
    },
    {
        "question": "What is the sum of total pounds of purchase in year 2018 for all branches in London ?",
        "db_id": "shop_membership",
        "gold_parse": "SELECT sum(total_pounds) FROM purchase AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T2.city  =  'London' AND T1.year  =  2018",
        "predicted_parse_with_values": "select sum ( T2.Total_pounds ) from branch as T1 join purchase as T2 on T1.Branch_ID = T2.Branch_ID where T1.City = \"Oxford\" and T1.Address_road = \"Concord Road\""
    },
    {
        "question": "Find all the policy types that are used by more than 2 customers .",
        "db_id": "insurance_and_eClaims",
        "gold_parse": "SELECT policy_type_code FROM policies GROUP BY policy_type_code HAVING count(*)  >  2",
        "predicted_parse_with_values": "select T2.Policy_Type_Code from Customers as T1 join Policies as T2 on T1.Customer_ID = T2.Customer_ID group by T2.Policy_Type_Code having count ( * ) > 1"
    },
    {
        "question": "return me the number of references of \" Making database systems usable \" .",
        "db_id": "academic",
        "gold_parse": "SELECT reference_num FROM publication WHERE title  =  \"Making database systems usable\"",
        "predicted_parse_with_values": "select count ( publication_T1.* ) from keyword as T1 join publication_keyword as T2 on T1.kid = T2.kid where T1.keyword = \"dummy value\""
    },
    {
        "question": "What are the names of all genres in alphabetical order , combined with its ratings ?",
        "db_id": "music_1",
        "gold_parse": "SELECT g_name ,  rating FROM genre ORDER BY g_name",
        "predicted_parse_with_values": "select g_name from genre order by g_name , rating"
    },
    {
        "question": "Give me the payment Id , the date and the amount for all the payments processed with Visa .",
        "db_id": "insurance_policies",
        "gold_parse": "SELECT Payment_ID ,  Date_Payment_Made ,  Amount_Payment FROM Payments WHERE Payment_Method_Code  =  'Visa'",
        "predicted_parse_with_values": "select Payment_ID , Date_Payment_Made , Date_Payment_Made from Payments where Payment_Method_Code = \"Discover Card\""
    },
    {
        "question": "What are the types of vocals used in the song \" Demon Kitty Rag \" ?",
        "db_id": "music_2",
        "gold_parse": "SELECT count(*) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Demon Kitty Rag\"",
        "predicted_parse_with_values": "select T1.Type from Vocals as T1 join Songs as T2 on T1.SongId = T2.SongId where T2.Title = \"dummy value\""
    },
    {
        "question": "Give the different positions of players who play for the country with the capital Dublin .",
        "db_id": "match_season",
        "gold_parse": "SELECT DISTINCT T2.Position FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Capital  =  \"Dublin\"",
        "predicted_parse_with_values": "select T1.Player from player as T1 join team as T2 on T1.Team = T2.Team_id join match_season as T3 on T2.Team_id = T3.Team join country as T4 on T3.Country = T4.Country_id where T4.Capital = \"Baghdad\""
    },
    {
        "question": "what are the major cities of the us",
        "db_id": "geo",
        "gold_parse": "SELECT city_name FROM city WHERE population  >  150000",
        "predicted_parse_with_values": "select T2.capital from city as T1 join state as T2 on T1.state_name = T2.state_name where T1.state_name = \"dummy value\""
    },
    {
        "question": "what city has the largest population",
        "db_id": "geo",
        "gold_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city )",
        "predicted_parse_with_values": "select city_name from city order by population desc limit 1"
    },
    {
        "question": "Show all card type codes .",
        "db_id": "customers_card_transactions",
        "gold_parse": "SELECT DISTINCT card_type_code FROM Customers_Cards",
        "predicted_parse_with_values": "select card_type_code from Customers_Cards"
    },
    {
        "question": "what is the highest point in the state with the capital des moines",
        "db_id": "geo",
        "gold_parse": "SELECT highest_point FROM highlow WHERE state_name IN ( SELECT state_name FROM state WHERE capital  =  \"des moines\" )",
        "predicted_parse_with_values": "select max ( T2.highest_point ) from state as T1 join highlow as T2 on T1.state_name = T2.state_name where T1.capital = \"dummy value\" and T1.capital = \"dummy value\""
    },
    {
        "question": "What is the name of the party form that is most common ?",
        "db_id": "e_government",
        "gold_parse": "SELECT t1.form_name FROM forms AS t1 JOIN party_forms AS t2 ON t1.form_id  =  t2.form_id GROUP BY t2.form_id ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select form_name from Forms group by form_name order by count ( * ) desc limit 1"
    },
    {
        "question": "Show the name of track and the number of races in each track .",
        "db_id": "race_track",
        "gold_parse": "SELECT T2.name ,  count(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id",
        "predicted_parse_with_values": "select Name , count ( * ) from track group by Name"
    },
    {
        "question": "Find the number of team franchises that are active ( have ' Y ' as \" active \" information ) .",
        "db_id": "baseball_1",
        "gold_parse": "SELECT count(*) FROM team_franchise WHERE active = 'Y'",
        "predicted_parse_with_values": "select count ( * ) from team_franchise where active like \"N\""
    },
    {
        "question": "How many credits does course CIS-220 have , and what its description ?",
        "db_id": "college_1",
        "gold_parse": "SELECT crs_credit ,  crs_description FROM course WHERE crs_code  =  'CIS-220'",
        "predicted_parse_with_values": "select sum ( CRS_CREDIT ) , CRS_DESCRIPTION from COURSE where CRS_CODE = \"ACCT-211\" group by CRS_DESCRIPTION"
    },
    {
        "question": "Count the number of Annual Meeting events that took place in the region of the United Kingdom .",
        "db_id": "party_people",
        "gold_parse": "SELECT count(*) FROM region AS t1 JOIN party AS t2 ON t1.region_id  =  t2.region_id JOIN party_events AS t3 ON t2.party_id  =  t3.party_id WHERE t1.region_name  =  \"United Kingdom\" AND t3.Event_Name  =  \"Annaual Meeting\"",
        "predicted_parse_with_values": "select count ( * ) from party_events as T1 join party as T2 on T1.Party_ID = T2.Party_ID join region as T3 on T2.Region_ID = T3.Region_ID where T3.Region_name = \"United Kingdom\""
    },
    {
        "question": "How many documents are there of each type ?",
        "db_id": "cre_Docs_and_Epenses",
        "gold_parse": "SELECT document_type_code ,  count(*) FROM Documents GROUP BY document_type_code",
        "predicted_parse_with_values": "select T2.Document_Type_Code , count ( * ) from Documents as T1 join Ref_Document_Types as T2 on T1.Document_Type_Code = T2.Document_Type_Code group by T1.Document_Type_Code"
    },
    {
        "question": "return me the number of papers in PVLDB in \" University of Michigan \" .",
        "db_id": "academic",
        "gold_parse": "SELECT COUNT ( DISTINCT t5.title ) FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t4 ON t4.aid  =  t1.aid JOIN publication AS t5 ON t4.pid  =  t5.pid JOIN journal AS t3 ON t5.jid  =  t3.jid WHERE t3.name  =  \"PVLDB\" AND t2.name  =  \"University of Michigan\"",
        "predicted_parse_with_values": "select count ( T1.oid ) from organization as T1 join author as T2 where T1.name = \"dummy value\" and T2.name = \"dummy value\""
    },
    {
        "question": "How many states have smaller colleges than average ?",
        "db_id": "soccer_2",
        "gold_parse": "SELECT count(DISTINCT state) FROM college WHERE enr  <  (SELECT avg(enr) FROM college)",
        "predicted_parse_with_values": "select count ( * ) from College where enr < ( select avg ( enr ) from College )"
    },
    {
        "question": "What is the first name and last name employee helps the customer with first name Leonie ?",
        "db_id": "chinook_1",
        "gold_parse": "SELECT T2.FirstName ,  T2.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.FirstName  =  \"Leonie\"",
        "predicted_parse_with_values": "select T2.FirstName , T1.LastName from Employee as T1 join Customer as T2 on T1.EmployeeId = T2.SupportRepId where T2.FirstName = \"Dan\""
    },
    {
        "question": "Count the number of credit cards that the customer with first name Blanche and last name Huels has .",
        "db_id": "customers_card_transactions",
        "gold_parse": "SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Blanche\" AND T2.customer_last_name  =  \"Huels\" AND T1.card_type_code  =  \"Credit\"",
        "predicted_parse_with_values": "select count ( * ) from Customers where customer_first_name = \"Armani\" and customer_last_name = \"Erdman\""
    },
    {
        "question": "what is the lowest elevation in pennsylvania",
        "db_id": "geo",
        "gold_parse": "SELECT lowest_elevation FROM highlow WHERE state_name  =  \"pennsylvania\"",
        "predicted_parse_with_values": "select min ( T3.highest_elevation ) from mountain as T1 join state as T2 on T1.state_name = T2.state_name join highlow as T3 on T2.state_name = T3.state_name where T1.state_name = \"dummy value\""
    },
    {
        "question": "Find the tourist attractions that have parking or shopping as their feature details . What are the names of the attractions ?",
        "db_id": "cre_Theme_park",
        "gold_parse": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'park' UNION SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'shopping'",
        "predicted_parse_with_values": "select T2.Name from Shops as T1 join Tourist_Attractions as T2 on T1.Shop_ID = T2.Tourist_Attraction_ID where T1.Shop_Details = \"soup\" or T1.Shop_Details = \"coffee\""
    },
    {
        "question": "What are the unique labels for the albums ?",
        "db_id": "music_2",
        "gold_parse": "SELECT count(DISTINCT label) FROM albums",
        "predicted_parse_with_values": "select Label from Albums"
    },
    {
        "question": "return me the author in the \" University of Michigan \" in Databases area whose papers have more than 5000 total citations .",
        "db_id": "academic",
        "gold_parse": "SELECT t1.name FROM domain_author AS t6 JOIN author AS t1 ON t6.aid  =  t1.aid JOIN DOMAIN AS t3 ON t3.did  =  t6.did JOIN organization AS t5 ON t5.oid  =  t1.oid JOIN writes AS t2 ON t2.aid  =  t1.aid JOIN publication AS t4 ON t2.pid  =  t4.pid WHERE t3.name  =  \"Databases\" AND t5.name  =  \"University of Michigan\" GROUP BY t1.name HAVING SUM ( t4.citation_num )  >  5000",
        "predicted_parse_with_values": "select T1.name from author as T1 join writes as T2 on T1.aid = T2.aid join publication as T3 on T2.pid = T3.pid join cite as T4 on T3.pid = T4.citing where T4.cited > \"dummy value\" and T4.cited < \"dummy value\""
    },
    {
        "question": "Give the dates of creation for documents that have both budget type codes 'GV ' and 'SF ' .",
        "db_id": "cre_Docs_and_Epenses",
        "gold_parse": "SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T2.budget_type_code  =  'GV' INTERSECT SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T2.budget_type_code  =  'SF'",
        "predicted_parse_with_values": "select T3.Document_Date from Ref_Budget_Codes as T1 join Documents_with_Expenses as T2 on T1.Budget_Type_Code = T2.Budget_Type_Code join Documents as T3 on T2.Document_ID = T3.Document_ID where T1.Budget_Type_Code = \"ORG\" intersect select T6.Document_Date from Ref_Budget_Codes as T4 join Documents_with_Expenses as T5 on T4.Budget_Type_Code = T5.Budget_Type_Code join Documents as T6 on T5.Document_ID = T6.Document_ID where T4.Budget_Type_Code = \"SF\""
    },
    {
        "question": "return me the area of the VLDB conference .",
        "db_id": "academic",
        "gold_parse": "SELECT t2.name FROM domain_conference AS t3 JOIN conference AS t1 ON t3.cid  =  t1.cid JOIN DOMAIN AS t2 ON t2.did  =  t3.did WHERE t1.name  =  \"VLDB\"",
        "predicted_parse_with_values": "select homepage from conference where name = \"dummy value\""
    },
    {
        "question": "Show the average price of hotels for each star rating code .",
        "db_id": "cre_Theme_park",
        "gold_parse": "SELECT star_rating_code ,  avg(price_range) FROM HOTELS GROUP BY star_rating_code",
        "predicted_parse_with_values": "select T2.star_rating_code , avg ( T1.star_rating_code ) from Hotels as T1 join Ref_Hotel_Star_Ratings as T2 on T1.star_rating_code = T2.star_rating_code group by T2.star_rating_code"
    },
    {
        "question": "how large is the largest city in alaska",
        "db_id": "geo",
        "gold_parse": "SELECT population FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name  =  \"alaska\" ) AND state_name  =  \"alaska\"",
        "predicted_parse_with_values": "select count ( * ) from city where state_name = \"dummy value\""
    },
    {
        "question": "What are the first names of students studying in room 107 ?",
        "db_id": "student_1",
        "gold_parse": "SELECT DISTINCT firstname FROM list WHERE classroom  =  107",
        "predicted_parse_with_values": "select FirstName from list where Classroom = 104"
    },
    {
        "question": "List the total number of horses on farms in ascending order .",
        "db_id": "farm",
        "gold_parse": "SELECT Total_Horses FROM farm ORDER BY Total_Horses ASC",
        "predicted_parse_with_values": "select sum ( Total_Horses ) from farm order by Total_Horses asc"
    },
    {
        "question": "What was the budget of the movie Juno from 2007 ?",
        "db_id": "imdb",
        "gold_parse": "SELECT budget FROM movie WHERE release_year  =  2007 AND title  =  \"Juno\"",
        "predicted_parse_with_values": "select budget from movie where title = \"dummy value\" and release_year = \"dummy value\""
    },
    {
        "question": "What are the last name and office of all history professors ?",
        "db_id": "college_1",
        "gold_parse": "SELECT T1.emp_lname ,  T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T2.dept_code  =  T3.dept_code WHERE T3.dept_name  =  'History'",
        "predicted_parse_with_values": "select T1.EMP_LNAME , T2.PROF_OFFICE from EMPLOYEE as T1 join PROFESSOR as T2 on T1.EMP_NUM = T2.EMP_NUM where T2.PROF_OFFICE = \"DRE 102\""
    },
    {
        "question": "What are the different ids and names of the stations that have had more than 12 bikes available ?",
        "db_id": "bike_1",
        "gold_parse": "SELECT DISTINCT T1.id ,  T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  >  12",
        "predicted_parse_with_values": "select T1.id , T1.name from station as T1 join status as T2 on T1.id = T2.station_id group by T2.station_id having count ( * ) > 1"
    },
    {
        "question": "What are the phone numbers of all customers and suppliers .",
        "db_id": "department_store",
        "gold_parse": "SELECT customer_phone FROM customers UNION SELECT supplier_phone FROM suppliers",
        "predicted_parse_with_values": "select customer_phone from Customers union select supplier_name from Suppliers"
    },
    {
        "question": "List the first and last name of the students who do not have any food type allergy .",
        "db_id": "allergy_1",
        "gold_parse": "SELECT fname ,  lname FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\")",
        "predicted_parse_with_values": "select T3.Fname , T3.LName from Allergy_Type as T1 join Has_Allergy as T2 on T1.Allergy = T2.Allergy join Student as T3 on T2.StuID = T3.StuID where T1.Allergytype = \"environmental\""
    },
    {
        "question": "what capital is the largest in the us",
        "db_id": "geo",
        "gold_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( t1.population ) FROM state AS t2 JOIN city AS t1 ON t2.capital  =  t1.city_name )",
        "predicted_parse_with_values": "select T2.capital from city as T1 join state as T2 on T1.state_name = T2.state_name where T1.state_name = \"dummy value\" order by T2.density desc limit 1"
    },
    {
        "question": "Show all game ids and the number of hours played .",
        "db_id": "game_1",
        "gold_parse": "SELECT gameid ,  sum(hours_played) FROM Plays_games GROUP BY gameid",
        "predicted_parse_with_values": "select T1.GameID , count ( * ) from Plays_Games as T1 join Video_Games as T2 on T1.GameID = T2.GameID group by T1.GameID"
    },
    {
        "question": "What is the full name and id of the customer who has the lowest total amount of payment ?",
        "db_id": "sakila_1",
        "gold_parse": "SELECT T1.first_name ,  T1.last_name ,  T1.customer_id FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY sum(amount) ASC LIMIT 1",
        "predicted_parse_with_values": "select T2.first_name , T2.last_name , T2.customer_id from payment as T1 join customer as T2 on T1.customer_id = T2.customer_id order by T1.amount limit 1"
    },
    {
        "question": "Find the full names of employees who help customers with the first name Leonie .",
        "db_id": "chinook_1",
        "gold_parse": "SELECT T2.FirstName ,  T2.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.FirstName  =  \"Leonie\"",
        "predicted_parse_with_values": "select Title , LastName from Employee where FirstName = \"Andrew\""
    },
    {
        "question": "What are the first names of all students who live in the dorm with the most amenities ?",
        "db_id": "dorm_1",
        "gold_parse": "SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid IN (SELECT T2.dormid FROM dorm AS T3 JOIN has_amenity AS T4 ON T3.dormid  =  T4.dormid JOIN dorm_amenity AS T5 ON T4.amenid  =  T5.amenid GROUP BY T3.dormid ORDER BY count(*) DESC LIMIT 1)",
        "predicted_parse_with_values": "select T1.Fname from Student as T1 join Lives_in as T2 on T1.StuID = T2.stuid join Dorm as T3 on T2.dormid = T3.dormid where T3.dorm_name = ( select T7.stuid from Dorm_amenity as T7 join Has_amenity as T5 on T7.amenid = T5.amenid join Dorm as T6 on T5.dormid = T6.dormid join Lives_in as T7 on T6.dormid = T7.dormid order by T4.amenity_name desc limit 1 )"
    },
    {
        "question": "What is the name of the person who has the oldest average age for their friends , and what is that average age ?",
        "db_id": "network_2",
        "gold_parse": "SELECT T2.name ,  avg(T1.age) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend GROUP BY T2.name ORDER BY avg(T1.age) DESC LIMIT 1",
        "predicted_parse_with_values": "select name , avg ( age ) from Person group by name order by avg ( age ) desc limit 1"
    },
    {
        "question": "What are the names of accounts with checking balances greater than the average checking balance and savings balances below the average savings balance ?",
        "db_id": "small_bank_1",
        "gold_parse": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM checking) INTERSECT SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM savings)",
        "predicted_parse_with_values": "select T2.name from CHECKING as T1 join ACCOUNTS as T2 on T1.custid = T2.custid where T1.balance > ( select avg ( balance ) from CHECKING )"
    },
    {
        "question": "Find the name of customers who are living in Colorado ?",
        "db_id": "customers_and_addresses",
        "gold_parse": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.state_province_county  =  \"Colorado\"",
        "predicted_parse_with_values": "select T3.customer_name from Addresses as T1 join Customer_Addresses as T2 on T1.address_id = T2.address_id join Customers as T3 on T2.customer_id = T3.customer_id where T1.country = \"USA\""
    },
    {
        "question": "How many teachers does the student named MADLOCK RAY have ?",
        "db_id": "student_1",
        "gold_parse": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"MADLOCK\" AND T1.lastname  =  \"RAY\"",
        "predicted_parse_with_values": "select count ( * ) from teachers where FirstName = \" LEIA\" and LastName = \"KRIENER\""
    },
    {
        "question": "What are the names of all the players who received a yes during tryouts , and also what are the names of their colleges ?",
        "db_id": "soccer_2",
        "gold_parse": "SELECT T1.pName ,  T2.cName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'",
        "predicted_parse_with_values": "select T3.pName , T1.cName from College as T1 join Tryout as T2 on T1.cName = T2.cName join Player as T3 on T2.pID = T3.pID"
    },
    {
        "question": "Count the number of times the team \" Boston Red Stockings \" lost in 2009 postseason .",
        "db_id": "baseball_1",
        "gold_parse": "SELECT count(*) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_loser  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' AND T1.year = 2009",
        "predicted_parse_with_values": "select count ( T2.wins ) from team as T1 join postseason as T2 join team_franchise as T3 where T3.franchise_name = \"Cleveland Infants\" and T1.year = 1923"
    },
    {
        "question": "which states border the longest river in the usa",
        "db_id": "geo",
        "gold_parse": "SELECT border FROM border_info WHERE state_name IN ( SELECT traverse FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river ) )",
        "predicted_parse_with_values": "select T3.border from river as T1 join state as T2 on T1.traverse = T2.state_name join border_info as T3 on T2.state_name = T3.border where T2.country_name = \"dummy value\" order by T1.length desc limit 1"
    },
    {
        "question": "How many actors from China have acted in \" Rush Hour 3 \"",
        "db_id": "imdb",
        "gold_parse": "SELECT COUNT ( DISTINCT t1.name  ) FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t1.nationality  =  \"China\" AND t3.title  =  \"Rush Hour 3\"",
        "predicted_parse_with_values": "select count ( * ) from actor where nationality = \"dummy value\" and nationality = \"dummy value\""
    },
    {
        "question": "What is the name of every college in alphabetical order that has more than 18000 students enrolled ?",
        "db_id": "soccer_2",
        "gold_parse": "SELECT cName FROM College WHERE enr  >  18000 ORDER BY cName",
        "predicted_parse_with_values": "select cName from College order by enr desc"
    },
    {
        "question": "What is the id of the project with least number of documents ?",
        "db_id": "cre_Docs_and_Epenses",
        "gold_parse": "SELECT project_id FROM Documents GROUP BY project_id ORDER BY count(*) ASC LIMIT 1",
        "predicted_parse_with_values": "select T2.Project_ID from Documents as T1 join Projects as T2 on T1.Project_ID = T2.Project_ID group by T1.Project_ID order by count ( * ) limit 1"
    },
    {
        "question": "what is the size of the capital of texas",
        "db_id": "geo",
        "gold_parse": "SELECT population FROM city WHERE city_name  =  ( SELECT capital FROM state WHERE state_name  =  \"texas\" )",
        "predicted_parse_with_values": "select T2.capital from city as T1 join state as T2 on T1.state_name = T2.state_name where T1.state_name = \"dummy value\""
    },
    {
        "question": "List the document type code , document name , and document description for the document with name 'Noel CV ' or name 'King Book ' .",
        "db_id": "cre_Docs_and_Epenses",
        "gold_parse": "SELECT document_type_code ,  document_name ,  document_description FROM Documents WHERE document_name  =  'Noel CV' OR document_name  =  'King Book'",
        "predicted_parse_with_values": "select T1.Document_Type_Code , T2.Document_Type_Name , T1.Document_Description from Documents as T1 join Ref_Document_Types as T2 on T1.Document_Type_Code = T2.Document_Type_Code where T1.Document_Name = \"Review on UK files\" or T1.Document_Description = \"None\""
    },
    {
        "question": "what rivers are there in illinois",
        "db_id": "geo",
        "gold_parse": "SELECT river_name FROM river WHERE traverse  =  \"illinois\"",
        "predicted_parse_with_values": "select T1.river_name from river as T1 join lake as T2 where T2.state_name = \"dummy value\""
    },
    {
        "question": "what is the longest river in the states that border tennessee",
        "db_id": "geo",
        "gold_parse": "SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name  =  \"tennessee\" ) ) AND traverse IN ( SELECT border FROM border_info WHERE state_name  =  \"tennessee\" )",
        "predicted_parse_with_values": "select T1.river_name from river as T1 join state as T2 on T1.traverse = T2.state_name join border_info as T3 on T2.state_name = T3.border where T3.border = \"dummy value\" order by T1.length desc limit 1"
    },
    {
        "question": "How many students are there for each major ?",
        "db_id": "allergy_1",
        "gold_parse": "SELECT major ,  count(*) FROM Student GROUP BY major",
        "predicted_parse_with_values": "select count ( * ) , Major from Student group by Major"
    },
    {
        "question": "return me the authors who have cooperated with \" H. V. Jagadish \" after 2000 .",
        "db_id": "academic",
        "gold_parse": "SELECT t2.name FROM writes AS t3 JOIN author AS t2 ON t3.aid  =  t2.aid JOIN publication AS t5 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" AND t5.year  >  2000",
        "predicted_parse_with_values": "select T1.name from author as T1 join writes as T2 on T1.aid = T2.aid join publication as T3 on T2.pid = T3.pid join cite as T4 on T3.pid = T4.citing where T4.cited = \"dummy value\""
    },
    {
        "question": "How many trips started from Mountain View city and ended at Palo Alto city ?",
        "db_id": "bike_1",
        "gold_parse": "SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  \"Mountain View\" AND T3.city  =  \"Palo Alto\"",
        "predicted_parse_with_values": "select count ( * ) from station as T1 join trip as T2 where T1.city = \"Palo Alto\" and T2.end_station_name = \"5th at Howard\""
    },
    {
        "question": "What are the different card type codes , and how many different customers hold each type ?",
        "db_id": "customers_card_transactions",
        "gold_parse": "SELECT card_type_code ,  count(DISTINCT customer_id) FROM Customers_cards GROUP BY card_type_code",
        "predicted_parse_with_values": "select card_type_code , count ( * ) from Customers_Cards group by card_type_code"
    },
    {
        "question": "what are the major cities in the state of kansas",
        "db_id": "geo",
        "gold_parse": "SELECT city_name FROM city WHERE population  >  150000 AND state_name  =  \"kansas\"",
        "predicted_parse_with_values": "select T1.city_name from city as T1 join state as T2 on T1.state_name = T2.state_name where T2.state_name = \"dummy value\""
    },
    {
        "question": "Which staff handled least number of payments ? List the full name and the id .",
        "db_id": "sakila_1",
        "gold_parse": "SELECT T1.first_name ,  T1.last_name ,  T1.staff_id FROM staff AS T1 JOIN payment AS T2 ON T1.staff_id  =  T2.staff_id GROUP BY T1.staff_id ORDER BY count(*) ASC LIMIT 1",
        "predicted_parse_with_values": "select T2.first_name , T2.last_name , T1.payment_id from payment as T1 join staff as T2 on T1.staff_id = T2.staff_id group by T1.staff_id order by count ( * ) asc limit 1"
    },
    {
        "question": "how many states are there in the usa",
        "db_id": "geo",
        "gold_parse": "SELECT COUNT ( state_name ) FROM state",
        "predicted_parse_with_values": "select count ( * ) from state where country_name = \"dummy value\""
    },
    {
        "question": "Show the average , minimum , and maximum ticket prices for exhibitions for all years before 2009 .",
        "db_id": "theme_gallery",
        "gold_parse": "SELECT avg(ticket_price) ,  min(ticket_price) ,  max(ticket_price) FROM exhibition WHERE YEAR  <  2009",
        "predicted_parse_with_values": "select avg ( Ticket_Price ) , max ( Ticket_Price ) , max ( Ticket_Price ) , max ( Ticket_Price ) from exhibition where Year < 2006"
    },
    {
        "question": "what is the smallest state bordering texas",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"texas\" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"texas\" )",
        "predicted_parse_with_values": "select min ( T2.density ) from border_info as T1 join state as T2 on T1.border = T2.state_name where T1.border != \"dummy value\""
    },
    {
        "question": "which river runs through most states",
        "db_id": "geo",
        "gold_parse": "SELECT river_name FROM river GROUP BY ( river_name ) ORDER BY COUNT ( DISTINCT traverse ) DESC LIMIT 1",
        "predicted_parse_with_values": "select river_name from river group by river_name order by count ( * ) desc limit 1"
    },
    {
        "question": "How many different colleges were represented at tryouts ?",
        "db_id": "soccer_2",
        "gold_parse": "SELECT count(DISTINCT cName) FROM tryout",
        "predicted_parse_with_values": "select count ( cName ) from College"
    },
    {
        "question": "How many captains are in each rank ?",
        "db_id": "ship_1",
        "gold_parse": "SELECT count(*) ,  rank FROM captain GROUP BY rank",
        "predicted_parse_with_values": "select Rank , count ( * ) from captain group by Rank"
    },
    {
        "question": "what are the major cities in the states through which the major river in virginia runs",
        "db_id": "geo",
        "gold_parse": "SELECT city_name FROM city WHERE population  >  150000 AND state_name IN ( SELECT traverse FROM river WHERE river_name IN ( SELECT river_name FROM river WHERE LENGTH  >  750 AND traverse  =  \"virginia\" ) )",
        "predicted_parse_with_values": "select T2.capital from river as T1 join state as T2 on T1.traverse = T2.state_name where T1.river_name = \"dummy value\""
    },
    {
        "question": "Which city has the least number of customers whose type code is \" Good Credit Rating \" ?",
        "db_id": "customer_complaints",
        "gold_parse": "SELECT town_city FROM customers WHERE customer_type_code  =  \"Good Credit Rating\" GROUP BY town_city ORDER BY count(*) LIMIT 1",
        "predicted_parse_with_values": "select town_city from Customers where customer_type_code = \"Good Credit Rating\" group by town_city order by count ( * ) asc limit 1"
    },
    {
        "question": "Find all movies about nuclear weapons",
        "db_id": "imdb",
        "gold_parse": "SELECT t3.title FROM tags AS t2 JOIN keyword AS t1 ON t2.kid  =  t1.id JOIN movie AS t3 ON t2.msid  =  t3.mid WHERE t1.keyword  =  \"nuclear weapons\"",
        "predicted_parse_with_values": "select T2.title from genre as T1 join movie as T2 where T1.genre = \"dummy value\""
    },
    {
        "question": "What is the interaction type of the enzyme named 'ALA synthase ' and the medicine named 'Aripiprazole ' ?",
        "db_id": "medicine_enzyme_interaction",
        "gold_parse": "SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id  =  T2.id JOIN enzyme AS T3 ON T1.enzyme_id  =  T3.id WHERE T3.name  =  'ALA synthase' AND T2.name  =  'Aripiprazole'",
        "predicted_parse_with_values": "select T2.interaction_type from enzyme as T1 join medicine_enzyme_interaction as T2 on T1.id = T2.enzyme_id where T1.name = \"Ferrochelatase\" and T1.name = \"ALA dehydratase\""
    },
    {
        "question": "What are the different cities that have more than 100 memberships ?",
        "db_id": "shop_membership",
        "gold_parse": "SELECT DISTINCT city FROM branch WHERE membership_amount  >=  100",
        "predicted_parse_with_values": "select T3.Hometown from branch as T1 join purchase as T2 on T1.Branch_ID = T2.Branch_ID join member as T3 on T2.Member_ID = T3.Member_ID where T1.membership_amount > 7"
    },
    {
        "question": "Find the names of songs whose genre is modern or language is English .",
        "db_id": "music_1",
        "gold_parse": "SELECT song_name FROM song WHERE genre_is  =  \"modern\" OR languages  =  \"english\"",
        "predicted_parse_with_values": "select song_name from song where languages = \"english\" or languages = \"bangla\""
    },
    {
        "question": "What are names for top three branches with most number of membership ?",
        "db_id": "shop_membership",
        "gold_parse": "SELECT name FROM branch ORDER BY membership_amount DESC LIMIT 3",
        "predicted_parse_with_values": "select Name from branch group by Name order by count ( * ) desc limit 1"
    },
    {
        "question": "How many students have had at least one \" B \" grade ?",
        "db_id": "college_3",
        "gold_parse": "SELECT COUNT(DISTINCT StuID) FROM ENROLLED_IN WHERE Grade  =  \"B\"",
        "predicted_parse_with_values": "select count ( * ) from Student as T1 join Enrolled_in as T2 on T1.StuID = T2.StuID where T2.Grade = \"C-\""
    },
    {
        "question": "which state has the greatest density",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM state WHERE density  =  ( SELECT MAX ( density ) FROM state )",
        "predicted_parse_with_values": "select state_name from state order by density desc limit 1"
    },
    {
        "question": "What are the first names and birthdates of the professors in charge of ACCT-211 ?",
        "db_id": "college_1",
        "gold_parse": "SELECT DISTINCT T1.EMP_FNAME ,  T1.EMP_DOB FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM  =  T2.PROF_NUM WHERE CRS_CODE  =  \"ACCT-211\"",
        "predicted_parse_with_values": "select T1.EMP_FNAME , T1.EMP_DOB from EMPLOYEE as T1 join PROFESSOR as T2 on T1.EMP_NUM = T2.EMP_NUM where T2.DEPT_CODE = \"PSYCH\""
    },
    {
        "question": "states bordering kentucky",
        "db_id": "geo",
        "gold_parse": "SELECT border FROM border_info WHERE state_name  =  \"kentucky\"",
        "predicted_parse_with_values": "select border from border_info where border = \"dummy value\""
    },
    {
        "question": "What are the student ids of students who do n't have any allergies ?",
        "db_id": "allergy_1",
        "gold_parse": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy",
        "predicted_parse_with_values": "select * from Student where StuID not in ( select StuID from Has_Allergy )"
    },
    {
        "question": "Find the name and savings balance of the top 3 accounts with the highest saving balance sorted by savings balance in descending order .",
        "db_id": "small_bank_1",
        "gold_parse": "SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid ORDER BY T2.balance DESC LIMIT 3",
        "predicted_parse_with_values": "select T2.name , T1.balance from SAVINGS as T1 join ACCOUNTS as T2 on T1.custid = T2.custid join CHECKING as T3 on T2.custid = T3.custid order by T3.balance desc limit 1"
    },
    {
        "question": "Find the city and state of the bank branch named morningside .",
        "db_id": "loan_1",
        "gold_parse": "SELECT city ,  state FROM bank WHERE bname  =  'morningside'",
        "predicted_parse_with_values": "select city , state from bank where city = \"Austin\""
    },
    {
        "question": "Find all the female actors from Austin",
        "db_id": "imdb",
        "gold_parse": "SELECT name FROM actor WHERE birth_city  =  \"Austin\" AND gender  =  \"female\"",
        "predicted_parse_with_values": "select name from actor where gender = \"dummy value\" and name = \"dummy value\""
    },
    {
        "question": "What are the names of customers who have both savings and checking accounts ?",
        "db_id": "loan_1",
        "gold_parse": "SELECT cust_name FROM customer WHERE acc_type  =  'saving' INTERSECT SELECT cust_name FROM customer WHERE acc_type  =  'checking'",
        "predicted_parse_with_values": "select cust_name from customer where acc_bal = 800000 intersect select cust_name from customer where acc_type = \"checking\""
    },
    {
        "question": "Compute the total salary that the player with first name Len and last name Barker received between 1985 to 1990 .",
        "db_id": "baseball_1",
        "gold_parse": "SELECT sum(T1.salary) FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id WHERE T2.name_first  =  'Len' AND T2.name_last = 'Barker' AND T1.year BETWEEN 1985 AND 1990",
        "predicted_parse_with_values": "select sum ( T1.salary ) from salary as T1 join player as T2 where T2.name_first = \"Hanser\" and T1.year <= 2013"
    },
    {
        "question": "List the studios which average gross is above 4500000 .",
        "db_id": "film_rank",
        "gold_parse": "SELECT Studio FROM film GROUP BY Studio HAVING avg(Gross_in_dollar)  >=  4500000",
        "predicted_parse_with_values": "select Studio from film group by Studio having avg ( Gross_in_dollar ) > 1"
    },
    {
        "question": "what states border texas and have a major river",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM border_info WHERE border  =  \"texas\" AND state_name IN ( SELECT traverse FROM river WHERE LENGTH  >  750 )",
        "predicted_parse_with_values": "select T3.border from river as T1 join state as T2 on T1.traverse = T2.state_name join border_info as T3 on T2.state_name = T3.border where T1.river_name = \"dummy value\" intersect select T6.border from river as T4 join state as T5 on T4.traverse = T5.state_name join border_info as T6 on T5.state_name = T6.border where T4.river_name = \"dummy value\""
    },
    {
        "question": "Find the visit date and details of the tourist whose detail is 'Vincent '",
        "db_id": "cre_Theme_park",
        "gold_parse": "SELECT T2.Visit_Date ,  T2.Visit_Details FROM VISITORS AS T1 JOIN VISITS AS T2 ON T1.Tourist_ID  =  T2.Tourist_ID WHERE T1.Tourist_Details  =  \"Vincent\"",
        "predicted_parse_with_values": "select T2.Visit_Date , T1.Tourist_Details from Visitors as T1 join Visits as T2 on T1.Tourist_ID = T2.Tourist_ID where T2.Visit_Details = \"\""
    },
    {
        "question": "name the states which have no surrounding states",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM state WHERE state_name NOT IN ( SELECT state_name FROM border_info )",
        "predicted_parse_with_values": "select state_name from state except select state_name from border_info"
    },
    {
        "question": "Find all the stage positions of the musicians with first name \" Solveig \"",
        "db_id": "music_2",
        "gold_parse": "SELECT DISTINCT T1.stageposition FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id WHERE Firstname  =  \"Solveig\"",
        "predicted_parse_with_values": "select T2.StagePosition from Band as T1 join Performance as T2 on T1.Id = T2.Bandmate where T1.Firstname = \"dummy value\""
    },
    {
        "question": "Find the number of different airports which are the destinations of the American Airlines .",
        "db_id": "flight_4",
        "gold_parse": "SELECT count(DISTINCT dst_apid) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid WHERE T1.name  =  'American Airlines'",
        "predicted_parse_with_values": "select count ( T1.dst_ap ) from routes as T1 join airlines as T2 on T1.alid = T2.alid where T2.name = \"Aerolineas Uruguayas\""
    },
    {
        "question": "Find the number of records of each policy type and its type code .",
        "db_id": "insurance_and_eClaims",
        "gold_parse": "SELECT policy_type_code ,  count(*) FROM policies GROUP BY policy_type_code",
        "predicted_parse_with_values": "select count ( * ) , Policy_Type_Code from Policies group by Policy_Type_Code"
    },
    {
        "question": "Find the number of professors in accounting department .",
        "db_id": "college_1",
        "gold_parse": "SELECT count(*) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE DEPT_NAME  =  \"Accounting\"",
        "predicted_parse_with_values": "select count ( * ) from PROFESSOR where DEPT_CODE = \"ART\""
    },
    {
        "question": "How many students play sports ?",
        "db_id": "game_1",
        "gold_parse": "SELECT count(DISTINCT StuID) FROM Sportsinfo",
        "predicted_parse_with_values": "select count ( StuID ) from Plays_Games"
    },
    {
        "question": "return me the papers written by \" H. V. Jagadish \" and \" Yunyao Li \" on PVLDB .",
        "db_id": "academic",
        "gold_parse": "SELECT t6.title FROM publication AS t6 JOIN journal AS t4 ON t6.jid  =  t4.jid JOIN writes AS t3 ON t3.pid  =  t6.pid JOIN writes AS t5 ON t5.pid  =  t6.pid JOIN author AS t1 ON t5.aid  =  t1.aid JOIN author AS t2 ON t3.aid  =  t2.aid WHERE t2.name  =  \"H. V. Jagadish\" AND t1.name  =  \"Yunyao Li\" AND t4.name  =  \"PVLDB\"",
        "predicted_parse_with_values": "select T1.name from organization as T1 join author as T2 where T1.name = \"dummy value\" and T2.name = \"dummy value\""
    },
    {
        "question": "What is the average and maximum damage in millions for storms that had a max speed over 1000 ?",
        "db_id": "storm_record",
        "gold_parse": "SELECT avg(damage_millions_USD) ,  max(damage_millions_USD) FROM storm WHERE max_speed  >  1000",
        "predicted_parse_with_values": "select avg ( Max_speed ) , max ( Max_speed ) from storm where Max_speed > 972"
    },
    {
        "question": "what city has the least population",
        "db_id": "geo",
        "gold_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MIN ( population ) FROM city )",
        "predicted_parse_with_values": "select city_name from city order by population asc limit 1"
    },
    {
        "question": "Who is the youngest male ?",
        "db_id": "network_2",
        "gold_parse": "SELECT name FROM Person WHERE gender  =  'male' AND age  =  (SELECT min(age) FROM person WHERE gender  =  'male' )",
        "predicted_parse_with_values": "select name from Person where age != 35 order by age desc limit 1"
    },
    {
        "question": "What is the name and address of the department with the most students ?",
        "db_id": "college_1",
        "gold_parse": "SELECT T2.dept_name ,  T2.dept_address FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select DEPT_NAME , DEPT_ADDRESS from DEPARTMENT group by DEPT_NAME order by count ( * ) desc limit 1"
    },
    {
        "question": "return me the paper in Databases area with the most citations .",
        "db_id": "academic",
        "gold_parse": "SELECT t3.title FROM DOMAIN AS t2 JOIN domain_publication AS t1 ON t2.did  =  t1.did JOIN publication AS t3 ON t3.pid  =  t1.pid WHERE t2.name  =  \"Databases\" ORDER BY t3.citation_num DESC LIMIT 1",
        "predicted_parse_with_values": "select count ( T1.jid ) , T7.keyword from publication as T1 join writes as T2 on T1.pid = T2.pid join author as T3 on T2.aid = T3.aid join domain_author as T4 on T3.aid = T4.aid join domain as T5 on T4.did = T5.did join domain_keyword as T6 on T5.did = T6.did join keyword as T7 on T6.kid = T7.kid where T7.keyword = \"dummy value\" group by T7.keyword order by count ( T1.jid ) desc"
    },
    {
        "question": "Return the name and number of reservations made for each of the rooms .",
        "db_id": "inn_1",
        "gold_parse": "SELECT T2.roomName ,  count(*) ,  T1.Room FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room",
        "predicted_parse_with_values": "select roomName , count ( * ) from Rooms group by RoomId"
    },
    {
        "question": "Find the names of customers who either have an deputy policy or uniformed policy .",
        "db_id": "insurance_and_eClaims",
        "gold_parse": "SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  \"Deputy\" OR t1.policy_type_code  =  \"Uniform\"",
        "predicted_parse_with_values": "select T1.Customer_Details from Customers as T1 join Policies as T2 on T1.Customer_ID = T2.Customer_ID where T2.Policy_Type_Code = \"Normal\" or T2.Policy_Type_Code = \"Uniformed\""
    },
    {
        "question": "What is the description of the claim status \" Open \" ?",
        "db_id": "insurance_and_eClaims",
        "gold_parse": "SELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \"Open\"",
        "predicted_parse_with_values": "select T2.Claim_Status_Description from Claim_Headers as T1 join Claims_Processing_Stages as T2 where T1.Claim_Status_Code = \"In Progress\""
    },
    {
        "question": "Show all artist names and the number of exhibitions for each artist .",
        "db_id": "theme_gallery",
        "gold_parse": "SELECT T2.name ,  count(*) FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id GROUP BY T1.artist_id",
        "predicted_parse_with_values": "select Name , count ( * ) from artist group by Name"
    },
    {
        "question": "what is the largest state that borders california",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"california\" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"california\" )",
        "predicted_parse_with_values": "select T1.state_name , T1.border from border_info as T1 join state as T2 on T1.border = T2.state_name where T1.border = \"dummy value\" order by T2.density desc limit 1"
    },
    {
        "question": "Find the ids and names of stations from which at least 200 trips started .",
        "db_id": "bike_1",
        "gold_parse": "SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  200",
        "predicted_parse_with_values": "select id , name from station group by id having count ( * ) >= 1"
    },
    {
        "question": "What are the different affiliations , and what is the total enrollment of schools founded after 1850 for each enrollment type ?",
        "db_id": "university_basketball",
        "gold_parse": "SELECT sum(Enrollment) ,  affiliation FROM university WHERE founded  >  1850 GROUP BY affiliation",
        "predicted_parse_with_values": "select Affiliation , sum ( Enrollment ) from university where Founded > 1892.0 group by Affiliation"
    },
    {
        "question": "what is the population of seattle washington",
        "db_id": "geo",
        "gold_parse": "SELECT population FROM city WHERE city_name  =  \"seattle\" AND state_name  =  \"washington\"",
        "predicted_parse_with_values": "select population from city where city_name = \"dummy value\""
    },
    {
        "question": "how many people stay in california",
        "db_id": "geo",
        "gold_parse": "SELECT population FROM state WHERE state_name  =  \"california\"",
        "predicted_parse_with_values": "select sum ( population ) from state where area = \"dummy value\""
    },
    {
        "question": "What are the names and ids of artists with 3 or more albums , listed in alphabetical order ?",
        "db_id": "chinook_1",
        "gold_parse": "SELECT T2.Name ,  T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistID GROUP BY T1.ArtistId HAVING COUNT(*)  >=  3 ORDER BY T2.Name",
        "predicted_parse_with_values": "select T1.Name , T1.ArtistId from Artist as T1 join Album as T2 on T1.ArtistId = T2.ArtistId group by T2.ArtistId having count ( * ) >= 1 order by T1.ArtistId"
    },
    {
        "question": "Which school has the fewest professors ?",
        "db_id": "college_1",
        "gold_parse": "SELECT T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.school_code ORDER BY count(*) LIMIT 1",
        "predicted_parse_with_values": "select T5.PROF_OFFICE from CLASS as T1 join ENROLL as T2 on T1.CLASS_CODE = T2.CLASS_CODE join STUDENT as T3 on T2.STU_NUM = T3.STU_NUM join DEPARTMENT as T4 on T3.DEPT_CODE = T4.DEPT_CODE join PROFESSOR as T5 on T4.DEPT_CODE = T5.DEPT_CODE group by T1.CLASS_CODE order by count ( * ) limit 1"
    },
    {
        "question": "name the 50 capitals in the usa",
        "db_id": "geo",
        "gold_parse": "SELECT DISTINCT capital FROM state",
        "predicted_parse_with_values": "select capital from state where country_name = \"dummy value\" group by capital having count ( * ) >= 1"
    },
    {
        "question": "What are the names of all students taking a course who received an A or C ?",
        "db_id": "college_1",
        "gold_parse": "SELECT T1.stu_fname ,  T1.stu_lname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE T2.enroll_grade  =  'C' OR T2.enroll_grade  =  'A'",
        "predicted_parse_with_values": "select STU_FNAME from STUDENT where STU_GPA = 3.09 or STU_GPA = 3.87"
    },
    {
        "question": "Which person whose friends have the oldest average age ?",
        "db_id": "network_2",
        "gold_parse": "SELECT T2.name ,  avg(T1.age) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend GROUP BY T2.name ORDER BY avg(T1.age) DESC LIMIT 1",
        "predicted_parse_with_values": "select name from PersonFriend where year = ( select avg ( age ) from Person )"
    },
    {
        "question": "Find the names of the customers who have an deputy policy .",
        "db_id": "insurance_and_eClaims",
        "gold_parse": "SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  \"Deputy\"",
        "predicted_parse_with_values": "select Customer_Details from Customers where Customer_ID in ( select Customer_ID from Policies where Policy_Type_Code = \"Deputy\" )"
    },
    {
        "question": "What is the average height of the players from the college named 'Yale University ' ?",
        "db_id": "baseball_1",
        "gold_parse": "SELECT avg(T1.height) FROM player AS T1 JOIN player_college AS T2 ON T1.player_id  =  T2.player_id JOIN college AS T3 ON T3.college_id  =  T2.college_id WHERE T3.name_full  =  'Yale University'",
        "predicted_parse_with_values": "select avg ( T3.height ) from college as T1 join player_college as T2 on T1.college_id = T2.college_id join player as T3 on T2.player_id = T3.player_id where T1.college_id = \"txnavar\""
    },
    {
        "question": "What are the names of enzymes in the medicine named 'Amisulpride ' that can serve as an 'inhibitor ' ?",
        "db_id": "medicine_enzyme_interaction",
        "gold_parse": "SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id  =  T3.id WHERE T3.name  =  'Amisulpride' AND T2.interaction_type  =  'inhibitor'",
        "predicted_parse_with_values": "select T1.name from enzyme as T1 join medicine_enzyme_interaction as T2 on T1.id = T2.enzyme_id join medicine as T3 on T2.medicine_id = T3.id where T3.name = \"Melperone\""
    },
    {
        "question": "Which room has the highest base price ?",
        "db_id": "inn_1",
        "gold_parse": "SELECT RoomId ,  roomName FROM Rooms ORDER BY basePrice DESC LIMIT 1",
        "predicted_parse_with_values": "select roomName from Rooms order by basePrice desc limit 1"
    },
    {
        "question": "What are the names and hours spent practicing of every student who received a yes at tryouts ?",
        "db_id": "soccer_2",
        "gold_parse": "SELECT T1.pName ,  T1.HS FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'",
        "predicted_parse_with_values": "select pName , HS from Player"
    },
    {
        "question": "What is the number of movies in which \" Shahab Hosseini \" acted ?",
        "db_id": "imdb",
        "gold_parse": "SELECT COUNT ( DISTINCT t2.title  ) FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  \"Shahab Hosseini\"",
        "predicted_parse_with_values": "select count ( * ) from actor as T1 join movie as T2 where T1.name = \"dummy value\""
    },
    {
        "question": "Find the first names of all instructors who have taught some course and the course description .",
        "db_id": "college_1",
        "gold_parse": "SELECT T2.emp_fname ,  T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code",
        "predicted_parse_with_values": "select T1.EMP_FNAME , T3.CRS_DESCRIPTION from EMPLOYEE as T1 join DEPARTMENT as T2 on T1.EMP_NUM = T2.EMP_NUM join COURSE as T3 on T2.DEPT_CODE = T3.DEPT_CODE where T3.CRS_CODE = \"CIS-420\""
    },
    {
        "question": "What is the number of airlines based in Russia ?",
        "db_id": "flight_4",
        "gold_parse": "SELECT count(*) FROM airlines WHERE country  =  'Russia'",
        "predicted_parse_with_values": "select count ( * ) from airlines where country = \"Eritrea\""
    },
    {
        "question": "How old is each student and how many students are each age ?",
        "db_id": "allergy_1",
        "gold_parse": "SELECT age ,  count(*) FROM Student GROUP BY age",
        "predicted_parse_with_values": "select count ( * ) , sum ( Age ) , Age from Student group by Age"
    },
    {
        "question": "List the authors who do not have submission to any workshop .",
        "db_id": "workshop_paper",
        "gold_parse": "SELECT Author FROM submission WHERE Submission_ID NOT IN (SELECT Submission_ID FROM acceptance)",
        "predicted_parse_with_values": "select Author from submission except select Author from submission"
    },
    {
        "question": "Show the musical nominee with award \" Bob Fosse \" or \" Cleavant Derricks \" .",
        "db_id": "musical",
        "gold_parse": "SELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" OR Award  =  \"Cleavant Derricks\"",
        "predicted_parse_with_values": "select Name from musical where Award = \"Drama Desk Award\" or Award = \"Tony Award\""
    },
    {
        "question": "What are the public schools and what are their locations ?",
        "db_id": "university_basketball",
        "gold_parse": "SELECT school ,  LOCATION FROM university WHERE affiliation  =  'Public'",
        "predicted_parse_with_values": "select School , Location from university"
    },
    {
        "question": "how many people in boulder",
        "db_id": "geo",
        "gold_parse": "SELECT population FROM city WHERE city_name  =  \"boulder\"",
        "predicted_parse_with_values": "select count ( * ) from state where area = \"dummy value\""
    },
    {
        "question": "For each team , how many technicians are there ?",
        "db_id": "machine_repair",
        "gold_parse": "SELECT Team ,  COUNT(*) FROM technician GROUP BY Team",
        "predicted_parse_with_values": "select count ( * ) , Team from technician group by Team"
    },
    {
        "question": "Show the opening year in whcih at least two churches opened .",
        "db_id": "wedding",
        "gold_parse": "SELECT open_date FROM church GROUP BY open_date HAVING count(*)  >=  2",
        "predicted_parse_with_values": "select Open_Date from church where Continuation_of = \"Church of Christ\" group by Open_Date having count ( * ) >= 1"
    },
    {
        "question": "What is the status of the city that has hosted the most competitions ?",
        "db_id": "farm",
        "gold_parse": "SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select Status from city group by Status order by count ( * ) desc limit 1"
    },
    {
        "question": "Find the number of members of club \" Pen and Paper Gaming \" .",
        "db_id": "club_1",
        "gold_parse": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Pen and Paper Gaming\"",
        "predicted_parse_with_values": "select count ( * ) from Club where ClubName = \"Hopkins Student Enterprises\" and ClubName = \"Pen and Paper Gaming\""
    },
    {
        "question": "What are the songs in album \" A Kiss Before You Go : Live in Hamburg \" ?",
        "db_id": "music_2",
        "gold_parse": "SELECT T3.title FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid  =  T2.albumid JOIN songs AS T3 ON T2.songid  =  T3.songid WHERE T1.title  =  \"A Kiss Before You Go: Live in Hamburg\"",
        "predicted_parse_with_values": "select T3.Title from Albums as T1 join Tracklists as T2 on T1.AId = T2.AlbumId join Songs as T3 on T2.SongId = T3.SongId where T1.Title = \"dummy value\" and T1.Year < \"dummy value\""
    },
    {
        "question": "Which cities have lower temperature in March than in Dec and have never served as host cities ?",
        "db_id": "city_record",
        "gold_parse": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Dec EXCEPT SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city",
        "predicted_parse_with_values": "select T2.City from temperature as T1 join city as T2 on T1.City_ID = T2.City_ID where T1.Dec = 27.8 except select T3.City from city as T3 join hosting_city as T4 on T3.City_ID = T4.Host_City where hosting_T3.Year = 2010"
    },
    {
        "question": "what rivers flow through the state with the largest population",
        "db_id": "geo",
        "gold_parse": "SELECT river_name FROM river WHERE traverse IN ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state ) )",
        "predicted_parse_with_values": "select T1.river_name from river as T1 join state as T2 on T1.traverse = T2.state_name where T2.population = ( select max ( population ) from state )"
    },
    {
        "question": "What are the names of customers with a higher checking balance than savings balance ?",
        "db_id": "small_bank_1",
        "gold_parse": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T2.balance  >  T3.balance",
        "predicted_parse_with_values": "select T2.name from SAVINGS as T1 join ACCOUNTS as T2 on T1.custid = T2.custid where T1.balance > ( select max ( balance ) from SAVINGS )"
    },
    {
        "question": "how long is the longest river in the usa",
        "db_id": "geo",
        "gold_parse": "SELECT LENGTH FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river )",
        "predicted_parse_with_values": "select T1.length from river as T1 join state as T2 on T1.traverse = T2.state_name where T2.country_name = \"dummy value\" order by T1.length desc limit 1"
    },
    {
        "question": "what states in the united states have a city of springfield",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM city WHERE city_name  =  \"springfield\"",
        "predicted_parse_with_values": "select T1.state_name from border_info as T1 join state as T2 on T1.border = T2.state_name join city as T3 on T2.state_name = T3.state_name where T3.city_name = \"dummy value\" and T2.capital = \"dummy value\""
    },
    {
        "question": "What are the names of colleges in LA that have more than 15,000 students and of colleges in AZ with less than 13,000 students ?",
        "db_id": "soccer_2",
        "gold_parse": "SELECT cName FROM College WHERE enr  <  13000 AND state = \"AZ\" UNION SELECT cName FROM College WHERE enr  >  15000 AND state = \"LA\"",
        "predicted_parse_with_values": "select cName from College where enr > 22000 intersect select cName from College where enr < 19000"
    },
    {
        "question": "what is the population of boulder",
        "db_id": "geo",
        "gold_parse": "SELECT population FROM city WHERE city_name  =  \"boulder\"",
        "predicted_parse_with_values": "select T2.population from mountain as T1 join state as T2 on T1.state_name = T2.state_name where T1.mountain_name = \"dummy value\""
    },
    {
        "question": "return me all the keywords in Databases area .",
        "db_id": "academic",
        "gold_parse": "SELECT t1.keyword FROM DOMAIN AS t3 JOIN domain_keyword AS t2 ON t3.did  =  t2.did JOIN keyword AS t1 ON t1.kid  =  t2.kid WHERE t3.name  =  \"Databases\"",
        "predicted_parse_with_values": "select keyword from keyword where keyword = \"dummy value\""
    },
    {
        "question": "what is the capital of the state with the highest point",
        "db_id": "geo",
        "gold_parse": "SELECT t1.capital FROM highlow AS t2 JOIN state AS t1 ON t1.state_name  =  t2.state_name WHERE t2.highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow )",
        "predicted_parse_with_values": "select T1.capital from state as T1 join highlow as T2 on T1.state_name = T2.state_name order by T2.highest_point desc limit 1"
    },
    {
        "question": "Find the saving balance of the account with the highest checking balance .",
        "db_id": "small_bank_1",
        "gold_parse": "SELECT T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance DESC LIMIT 1",
        "predicted_parse_with_values": "select T3.balance from SAVINGS as T1 join ACCOUNTS as T2 on T1.custid = T2.custid join CHECKING as T3 on T2.custid = T3.custid order by T1.balance desc limit 1"
    },
    {
        "question": "What are the names of customers using the most popular payment method ?",
        "db_id": "customers_and_addresses",
        "gold_parse": "SELECT customer_name FROM customers WHERE payment_method  =  (SELECT payment_method FROM customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1)",
        "predicted_parse_with_values": "select customer_name from Customers where payment_method = ( select payment_method from Customers group by payment_method order by count ( * ) desc limit 1 )"
    },
    {
        "question": "How many faculty members do we have for each faculty rank ?",
        "db_id": "activity_1",
        "gold_parse": "SELECT rank ,  count(*) FROM Faculty GROUP BY rank",
        "predicted_parse_with_values": "select count ( * ) , Rank from Faculty group by Rank"
    },
    {
        "question": "Return the id of the customer who has the most cards , as well as the number of cards .",
        "db_id": "customers_card_transactions",
        "gold_parse": "SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select customer_id , count ( * ) from Customers_Cards group by customer_id order by count ( * ) desc limit 1"
    },
    {
        "question": "what is the least populous state",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM state WHERE population  =  ( SELECT MIN ( population ) FROM state )",
        "predicted_parse_with_values": "select state_name from state group by state_name order by count ( * ) limit 1"
    },
    {
        "question": "Which customers have an insurance policy with the type code \" Deputy \" or \" Uniform \" ? Return the customer details .",
        "db_id": "insurance_and_eClaims",
        "gold_parse": "SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  \"Deputy\" OR t1.policy_type_code  =  \"Uniform\"",
        "predicted_parse_with_values": "select T1.Customer_Details from Customers as T1 join Policies as T2 on T1.Customer_ID = T2.Customer_ID where T2.Policy_Type_Code = \"Normal\" or T2.Policy_Type_Code = \"Uniformed\""
    },
    {
        "question": "What is the unit of measuerment of the product category code \" Herbs \" ?",
        "db_id": "products_gen_characteristics",
        "gold_parse": "SELECT unit_of_measure FROM ref_product_categories WHERE product_category_code  =  \"Herbs\"",
        "predicted_parse_with_values": "select T1.unit_of_measure from Ref_Product_Categories as T1 join Products as T2 on T1.product_category_code = T2.product_category_code where T2.product_category_code = \"Herbs\""
    },
    {
        "question": "How many exhibition are there in year 2005 or after ?",
        "db_id": "theme_gallery",
        "gold_parse": "SELECT count(*) FROM exhibition WHERE YEAR  >=  2005",
        "predicted_parse_with_values": "select count ( * ) from exhibition where Year > 2005"
    },
    {
        "question": "Find the first name of the professor who is teaching two courses with code CIS-220 and QM-261 .",
        "db_id": "college_1",
        "gold_parse": "SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num  =  T2.prof_num WHERE crs_code  =  'CIS-220' INTERSECT SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num  =  T2.prof_num WHERE crs_code  =  'QM-261'",
        "predicted_parse_with_values": "select T3.PROF_EXTENSION from COURSE as T1 join DEPARTMENT as T2 on T1.DEPT_CODE = T2.DEPT_CODE join PROFESSOR as T3 on T2.DEPT_CODE = T3.DEPT_CODE where T1.CRS_CODE = \"CIS-420\" intersect select T6.PROF_EXTENSION from COURSE as T4 join DEPARTMENT as T5 on T4.DEPT_CODE = T5.DEPT_CODE join PROFESSOR as T6 on T5.DEPT_CODE = T6.DEPT_CODE where T4.CRS_CODE = \"QM-261\""
    },
    {
        "question": "What is the name and city of the airport that the most routes end at ?",
        "db_id": "flight_4",
        "gold_parse": "SELECT T1.name ,  T1.city ,  T2.dst_apid FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid GROUP BY T2.dst_apid ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select name , city from airports group by apid order by count ( * ) desc limit 1"
    },
    {
        "question": "For each start station id , what is its name , longitude and average duration of trips started there ?",
        "db_id": "bike_1",
        "gold_parse": "SELECT T1.name ,  T1.long ,  avg(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id GROUP BY T2.start_station_id",
        "predicted_parse_with_values": "select T1.name , T2.start_station_id , avg ( T2.duration ) from station as T1 join trip as T2 group by T2.start_station_id"
    },
    {
        "question": "What is the name of department where has the largest number of professors with a Ph.D. degree ?",
        "db_id": "college_1",
        "gold_parse": "SELECT T2.dept_name ,  T1.dept_code FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T1.prof_high_degree  =  'Ph.D.' GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select T1.DEPT_NAME from DEPARTMENT as T1 join PROFESSOR as T2 on T1.DEPT_CODE = T2.DEPT_CODE where T2.PROF_HIGH_DEGREE = ( select max ( T4.PROF_HIGH_DEGREE ) from DEPARTMENT as T3 join PROFESSOR as T4 on T3.DEPT_CODE = T4.DEPT_CODE where T3.DEPT_NAME = \"Marketing/Management\" group by T4.DEPT_CODE order by count ( * ) desc limit 1 )"
    },
    {
        "question": "How many times does ROY SWEAZY has reserved a room .",
        "db_id": "inn_1",
        "gold_parse": "SELECT count(*) FROM Reservations WHERE FirstName = \"ROY\" AND LastName  =  \"SWEAZY\"",
        "predicted_parse_with_values": "select count ( * ) from Reservations where FirstName = \"PHEBE\" and LastName = \"WITTROCK\""
    },
    {
        "question": "What is the most popular full name of the actors ?",
        "db_id": "sakila_1",
        "gold_parse": "SELECT first_name ,  last_name FROM actor GROUP BY first_name ,  last_name ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select first_name , last_name from actor group by actor_id order by count ( * ) desc limit 1"
    },
    {
        "question": "return me the papers by \" H. V. Jagadish \" after 2000 .",
        "db_id": "academic",
        "gold_parse": "SELECT t3.title FROM writes AS t2 JOIN author AS t1 ON t2.aid  =  t1.aid JOIN publication AS t3 ON t2.pid  =  t3.pid WHERE t1.name  =  \"H. V. Jagadish\" AND t3.year  >  2000",
        "predicted_parse_with_values": "select T1.title from publication as T1 join cite as T2 on T1.pid = T2.citing where T2.cited = \"dummy value\" and T1.year > \"dummy value\""
    },
    {
        "question": "Return the name and country corresponding to the artist who has had the most exhibitions .",
        "db_id": "theme_gallery",
        "gold_parse": "SELECT T2.name , T2.country FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id GROUP BY T1.artist_id ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select Name , Country from artist group by Artist_ID order by count ( * ) desc limit 1"
    },
    {
        "question": "What are the distinct first names and cities of the students who have allergy either to milk or to cat ?",
        "db_id": "allergy_1",
        "gold_parse": "SELECT DISTINCT T1.fname ,  T1.city_code FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.stuid  =  T2.stuid WHERE T2.Allergy  =  \"Milk\" OR T2.Allergy  =  \"Cat\"",
        "predicted_parse_with_values": "select T3.Fname , T3.LName from Allergy_Type as T1 join Has_Allergy as T2 on T1.Allergy = T2.Allergy join Student as T3 on T2.StuID = T3.StuID where T1.Allergytype = \"food\" or T1.Allergytype = \"environmental\""
    },
    {
        "question": "What is the id , name and IATA code of the airport that had most number of flights ?",
        "db_id": "flight_company",
        "gold_parse": "SELECT T1.id ,  T1.name ,  T1.IATA FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select T2.airport_id , T1.name , T1.name from airport as T1 join flight as T2 on T1.id = T2.airport_id group by T2.airport_id order by count ( * ) desc limit 1"
    },
    {
        "question": "What document status codes do we have ?",
        "db_id": "cre_Doc_Control_Systems",
        "gold_parse": "SELECT document_status_code FROM Ref_Document_Status",
        "predicted_parse_with_values": "select document_status_code from Documents"
    },
    {
        "question": "What is the name of the airline with the most routes ?",
        "db_id": "flight_4",
        "gold_parse": "SELECT T1.name FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select name from airlines group by alid order by count ( * ) desc limit 1"
    },
    {
        "question": "return me the total citations of papers in PVLDB before 2005 .",
        "db_id": "academic",
        "gold_parse": "SELECT SUM ( t2.citation_num ) FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" AND t2.year  <  2005",
        "predicted_parse_with_values": "select count ( jid ) from publication where year < \"dummy value\""
    },
    {
        "question": "Show the times used by climbers to climb mountains in Country Uganda .",
        "db_id": "climbing",
        "gold_parse": "SELECT T1.Time FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T2.Country  =  \"Uganda\"",
        "predicted_parse_with_values": "select Time from climber where Country = \"United Kingdom\""
    },
    {
        "question": "Find the country that the most papers are affiliated with .",
        "db_id": "icfp_1",
        "gold_parse": "SELECT t1.country FROM inst AS t1 JOIN authorship AS t2 ON t1.instid  =  t2.instid JOIN papers AS t3 ON t2.paperid  =  t3.paperid GROUP BY t1.country ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select T1.country from Inst as T1 join Authorship as T2 on T1.instID = T2.instID join Papers as T3 on T2.paperID = T3.paperID group by T1.country order by count ( * ) desc limit 1"
    },
    {
        "question": "what is the longest river in the state with the most major cities",
        "db_id": "geo",
        "gold_parse": "SELECT river_name FROM river WHERE traverse  =  ( SELECT state_name FROM city WHERE population  >  150000 GROUP BY state_name ORDER BY COUNT ( city_name ) DESC LIMIT 1 ) ORDER BY LENGTH DESC LIMIT 1",
        "predicted_parse_with_values": "select T1.river_name from river as T1 join state as T2 on T1.traverse = T2.state_name join city as T3 on T2.state_name = T3.state_name where T3.state_name = ( select state_name from state order by density desc limit 1 )"
    },
    {
        "question": "What is the gender and name of the artist who sang the song with the smallest resolution ?",
        "db_id": "music_1",
        "gold_parse": "SELECT T1.gender ,  T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name ORDER BY T2.resolution LIMIT 1",
        "predicted_parse_with_values": "select T2.gender , T1.artist_name from song as T1 join artist as T2 on T1.artist_name = T2.artist_name order by T1.resolution limit 1"
    },
    {
        "question": "Find the total number of king beds available .",
        "db_id": "inn_1",
        "gold_parse": "SELECT sum(beds) FROM Rooms WHERE bedtype  =  'King'",
        "predicted_parse_with_values": "select count ( * ) from Rooms where beds = 2"
    },
    {
        "question": "Count the number of different characteristic names the product 'cumin ' has .",
        "db_id": "products_gen_characteristics",
        "gold_parse": "SELECT count(DISTINCT t3.characteristic_name) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"sesame\"",
        "predicted_parse_with_values": "select count ( product_Characteristics.characteristic_id ) from Products as T1 join Product_Characteristics as T2 on T1.product_id = T2.product_id where T1.product_name = \"cumin\""
    },
    {
        "question": "return me the papers in PVLDB containing keyword \" Keyword search \" .",
        "db_id": "academic",
        "gold_parse": "SELECT t4.title FROM publication_keyword AS t2 JOIN keyword AS t1 ON t2.kid  =  t1.kid JOIN publication AS t4 ON t4.pid  =  t2.pid JOIN journal AS t3 ON t4.jid  =  t3.jid WHERE t3.name  =  \"PVLDB\" AND t1.keyword  =  \"Keyword search\"",
        "predicted_parse_with_values": "select T1.jid from publication as T1 join writes as T2 on T1.pid = T2.pid join author as T3 on T2.aid = T3.aid join domain_author as T4 on T3.aid = T4.aid join domain as T5 on T4.did = T5.did join domain_keyword as T6 on T5.did = T6.did join keyword as T7 on T6.kid = T7.kid where T7.keyword = \"dummy value\""
    },
    {
        "question": "Show names for all aircrafts with distances more than the average .",
        "db_id": "flight_1",
        "gold_parse": "SELECT name FROM Aircraft WHERE distance  >  (SELECT avg(distance) FROM Aircraft)",
        "predicted_parse_with_values": "select name from aircraft where distance > ( select avg ( distance ) from flight )"
    },
    {
        "question": "Which teachers teach in classroom 110 ? Give me their first names .",
        "db_id": "student_1",
        "gold_parse": "SELECT firstname FROM teachers WHERE classroom  =  110",
        "predicted_parse_with_values": "select T2.FirstName from list as T1 join teachers as T2 where T1.Classroom = 111"
    },
    {
        "question": "what is the average population per square km in pennsylvania",
        "db_id": "geo",
        "gold_parse": "SELECT population / area FROM state WHERE state_name  =  \"pennsylvania\"",
        "predicted_parse_with_values": "select avg ( T2.population ) from border_info as T1 join state as T2 on T1.border = T2.state_name where T1.state_name = \"dummy value\""
    },
    {
        "question": "What are the details and star ratings of the three hotels with the lowest price ranges ?",
        "db_id": "cre_Theme_park",
        "gold_parse": "SELECT other_hotel_details ,  star_rating_code FROM HOTELS ORDER BY price_range ASC LIMIT 3",
        "predicted_parse_with_values": "select other_hotel_details , star_rating_code from Hotels order by price_range limit 1"
    },
    {
        "question": "What are the top 3 artists with the largest number of songs in the language Bangla ?",
        "db_id": "music_1",
        "gold_parse": "SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  \"bangla\" GROUP BY T2.artist_name ORDER BY count(*) DESC LIMIT 3",
        "predicted_parse_with_values": "select T2.artist_name from song as T1 join artist as T2 on T1.artist_name = T2.artist_name where T1.languages = \"english\" group by T2.artist_name order by count ( * ) desc limit 1"
    },
    {
        "question": "What are all the different food allergies ?",
        "db_id": "allergy_1",
        "gold_parse": "SELECT DISTINCT allergy FROM Allergy_type WHERE allergytype  =  \"food\"",
        "predicted_parse_with_values": "select Allergy from Has_Allergy"
    },
    {
        "question": "which state has the most people",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state )",
        "predicted_parse_with_values": "select state_name from state group by state_name order by sum ( population ) desc limit 1"
    },
    {
        "question": "Show the ids for all the students who participate in an activity and are under 20 .",
        "db_id": "activity_1",
        "gold_parse": "SELECT StuID FROM Participates_in INTERSECT SELECT StuID FROM Student WHERE age  <  20",
        "predicted_parse_with_values": "select StuID from Student where Age < 22"
    },
    {
        "question": "What are the name and id of the team offering the lowest average salary ?",
        "db_id": "baseball_1",
        "gold_parse": "SELECT T1.name ,  T1.team_id FROM team AS T1 JOIN salary AS T2 ON T1.team_id = T2.team_id GROUP BY T1.team_id ORDER BY avg(T2.salary) ASC LIMIT 1",
        "predicted_parse_with_values": "select T2.name , T1.team_id from salary as T1 join team as T2 group by T1.team_id order by avg ( T1.salary ) limit 1"
    },
    {
        "question": "Which contact channel codes were used less than 5 times ?",
        "db_id": "customers_and_addresses",
        "gold_parse": "SELECT channel_code FROM customer_contact_channels GROUP BY channel_code HAVING count(customer_id)  <  5",
        "predicted_parse_with_values": "select channel_code from Customer_Contact_Channels group by channel_code having count ( * ) < 1"
    },
    {
        "question": "what is the highest point in states bordering colorado",
        "db_id": "geo",
        "gold_parse": "SELECT highest_point FROM highlow WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"colorado\" ) ORDER BY highest_elevation DESC LIMIT 1",
        "predicted_parse_with_values": "select max ( T3.highest_point ) from border_info as T1 join state as T2 on T1.border = T2.state_name join highlow as T3 on T2.state_name = T3.state_name where T1.border = \"dummy value\""
    },
    {
        "question": "How many clubs does \" Linda Smith \" have membership for ?",
        "db_id": "club_1",
        "gold_parse": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Linda\" AND t3.lname  =  \"Smith\"",
        "predicted_parse_with_values": "select count ( * ) from Student where Fname = \"Jandy\""
    },
    {
        "question": "return me the number of authors who have cited the papers by \" H. V. Jagadish \" .",
        "db_id": "academic",
        "gold_parse": "SELECT COUNT ( DISTINCT t2.name ) FROM publication AS t7 JOIN cite AS t5 ON t7.pid  =  t5.citing JOIN publication AS t6 ON t6.pid  =  t5.cited JOIN writes AS t3 ON t3.pid  =  t7.pid JOIN writes AS t4 ON t4.pid  =  t6.pid JOIN author AS t2 ON t3.aid  =  t2.aid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\"",
        "predicted_parse_with_values": "select count ( T1.pid ) from writes as T1 join publication as T2 on T1.pid = T2.pid join cite as T3 on T2.pid = T3.citing where T3.cited = \"dummy value\""
    },
    {
        "question": "How many editors are there ?",
        "db_id": "journal_committee",
        "gold_parse": "SELECT count(*) FROM editor",
        "predicted_parse_with_values": "select count ( Editor_ID ) from editor"
    },
    {
        "question": "Find the number of routes whose destination airports are in Canada .",
        "db_id": "flight_4",
        "gold_parse": "SELECT count(*) FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE country  =  'Canada'",
        "predicted_parse_with_values": "select count ( * ) from routes where dst_ap = \"TTT\""
    },
    {
        "question": "Return the names of songs for which format is mp3 and resolution is below 1000 .",
        "db_id": "music_1",
        "gold_parse": "SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.formats  =  \"mp3\" INTERSECT SELECT song_name FROM song WHERE resolution  <  1000",
        "predicted_parse_with_values": "select T1.song_name from song as T1 join files as T2 on T1.f_id = T2.f_id where T2.formats = \"mp4\" and T1.resolution < 512"
    },
    {
        "question": "For each dorm , how many amenities does it have ?",
        "db_id": "dorm_1",
        "gold_parse": "SELECT count(*) ,  T1.dormid FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid WHERE T1.student_capacity  >  100 GROUP BY T1.dormid",
        "predicted_parse_with_values": "select count ( * ) , dorm_name from Dorm group by dorm_name"
    },
    {
        "question": "What is the id of the event with the most participants ?",
        "db_id": "local_govt_in_alabama",
        "gold_parse": "SELECT Event_ID FROM Participants_in_Events GROUP BY Event_ID ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select T1.Event_ID from Events as T1 join Participants_in_Events as T2 on T1.Event_ID = T2.Event_ID group by participants_in_T1.Event_ID order by count ( * ) desc limit 1"
    },
    {
        "question": "what is the state with the lowest population density",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM state WHERE density  =  ( SELECT MIN ( density ) FROM state )",
        "predicted_parse_with_values": "select state_name from state order by density asc limit 1"
    },
    {
        "question": "What are the allergies the girl named Lisa has ? And what are the types of them ? Order the result by allergy names .",
        "db_id": "allergy_1",
        "gold_parse": "SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  \"Lisa\" ORDER BY T1.Allergy",
        "predicted_parse_with_values": "select T1.Allergy , T1.Allergytype from Allergy_Type as T1 join Has_Allergy as T2 on T1.Allergy = T2.Allergy join Student as T3 on T2.StuID = T3.StuID where T3.Fname = \"David\" order by T3.LName"
    },
    {
        "question": "What are the ids of all products that were either ordered more than 3 times or have a cumulative amount purchased of above 80000 ?",
        "db_id": "department_store",
        "gold_parse": "SELECT product_id FROM Order_Items GROUP BY product_id HAVING count(*)  >  3 UNION SELECT product_id FROM Product_Suppliers GROUP BY product_id HAVING sum(total_amount_purchased)  >  80000",
        "predicted_parse_with_values": "select T1.product_id from Products as T1 join Order_Items as T2 on T1.product_id = T2.product_id group by T2.product_id having count ( * ) > 1 union select T3.product_id , T3.product_id from Order_Items as T9 join Customer_Orders as T10 on T9.order_id = T10.order_id join Customers as T9 on T10.customer_id = T9.customer_id join Customer_Addresses as T10 on T9.customer_id = T10.customer_id join Addresses as T9 on T10.address_id = T9.address_id join Supplier_Addresses as T10 on T9.address_id = T10.address_id join Suppliers as T9 on T10.supplier_id = T9.supplier_id join Product_Suppliers as T10 on T9.supplier_id = T10.supplier_id where Product_T9.total_value_purchased > 61800.95"
    },
    {
        "question": "how many states border the state with the largest population",
        "db_id": "geo",
        "gold_parse": "SELECT COUNT ( border ) FROM border_info WHERE state_name IN ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state ) )",
        "predicted_parse_with_values": "select count ( * ) from state order by population desc limit 1"
    },
    {
        "question": "how many states are in the united states",
        "db_id": "geo",
        "gold_parse": "SELECT COUNT ( state_name ) FROM state",
        "predicted_parse_with_values": "select count ( * ) from state where area = \"dummy value\""
    },
    {
        "question": "What is the detail of the location UK Gallery ?",
        "db_id": "cre_Theme_park",
        "gold_parse": "SELECT Other_Details FROM LOCATIONS WHERE Location_Name  =  \"UK Gallery\"",
        "predicted_parse_with_values": "select T3.Museum_Details from Locations as T1 join Tourist_Attractions as T2 on T1.Location_ID = T2.Location_ID join Museums as T3 on T2.Tourist_Attraction_ID = T3.Museum_ID where T1.Location_Name = \"Film Festival\""
    },
    {
        "question": "What is the product category description and unit of measurement of category \" Herbs \" ?",
        "db_id": "products_gen_characteristics",
        "gold_parse": "SELECT product_category_description ,  unit_of_measure FROM ref_product_categories WHERE product_category_code  =  \"Herbs\"",
        "predicted_parse_with_values": "select T4.product_category_description , T4.unit_of_measure from Characteristics as T1 join Product_Characteristics as T2 on T1.characteristic_id = T2.characteristic_id join Products as T3 on T2.product_id = T3.product_id join Ref_Product_Categories as T4 on T3.product_category_code = T4.product_category_code where T1.characteristic_name = \"error\""
    },
    {
        "question": "How many leagues are there in England ?",
        "db_id": "soccer_1",
        "gold_parse": "SELECT count(*) FROM Country AS T1 JOIN League AS T2 ON T1.id  =  T2.country_id WHERE T1.name  =  \"England\"",
        "predicted_parse_with_values": "select count ( * ) from League as T1 join Country as T2 on T1.country_id = T2.id where T2.name = \"Spain\""
    },
    {
        "question": "Show total hours per week and number of games played for students under 20 .",
        "db_id": "game_1",
        "gold_parse": "SELECT sum(hoursperweek) ,  sum(gamesplayed) FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.age  <  20",
        "predicted_parse_with_values": "select sum ( T3.Hours_Played ) , sum ( T3.Hours_Played ) from SportsInfo as T1 join Student as T2 on T1.StuID = T2.StuID join Plays_Games as T3 on T2.StuID = T3.StuID where T2.Age < 18 group by T1.HoursPerWeek"
    },
    {
        "question": "Which students in third grade are not taught by teacher COVIN JEROME ? Give me the last names of the students .",
        "db_id": "student_1",
        "gold_parse": "SELECT DISTINCT T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.grade  =  3 AND T2.firstname != \"COVIN\" AND T2.lastname != \"JEROME\"",
        "predicted_parse_with_values": "select LastName from list where Grade = 6 except select T2.LastName , T2.LastName from list as T1 join teachers as T2 where T1.Grade = 5"
    },
    {
        "question": "Find the first name of students who are living in the dorm that has most number of amenities .",
        "db_id": "dorm_1",
        "gold_parse": "SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid IN (SELECT T2.dormid FROM dorm AS T3 JOIN has_amenity AS T4 ON T3.dormid  =  T4.dormid JOIN dorm_amenity AS T5 ON T4.amenid  =  T5.amenid GROUP BY T3.dormid ORDER BY count(*) DESC LIMIT 1)",
        "predicted_parse_with_values": "select T1.Fname from Student as T1 join Lives_in as T2 on T1.StuID = T2.stuid group by T2.stuid order by count ( * ) desc limit 1"
    },
    {
        "question": "return me the paper after 2000 in VLDB conference with more than 200 citations .",
        "db_id": "academic",
        "gold_parse": "SELECT t2.title FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" AND t2.citation_num  >  200 AND t2.year  >  2000",
        "predicted_parse_with_values": "select T2.jid from conference as T1 join publication as T2 on T1.cid = T2.cid join writes as T3 on T2.pid = T3.pid join author as T4 on T3.aid = T4.aid where T1.name = \"dummy value\" and T2.year > \"dummy value\" and T4.name = \"dummy value\""
    },
    {
        "question": "For each team , return the team name , id and the maximum salary among the team .",
        "db_id": "baseball_1",
        "gold_parse": "SELECT T1.name ,  T1.team_id ,  max(T2.salary) FROM team AS T1 JOIN salary AS T2 ON T1.team_id  =  T2.team_id GROUP BY T1.team_id",
        "predicted_parse_with_values": "select T2.name , T1.team_id , max ( T1.salary ) from salary as T1 join team as T2 group by T1.team_id"
    },
    {
        "question": "Tell me the the claim date and settlement date for each settlement case .",
        "db_id": "insurance_policies",
        "gold_parse": "SELECT Date_Claim_Made ,  Date_Claim_Settled FROM Settlements",
        "predicted_parse_with_values": "select Date_Claim_Made , Date_Claim_Settled from Claims"
    },
    {
        "question": "Which clubs have one or more members whose advisor is \" 1121 \" ?",
        "db_id": "club_1",
        "gold_parse": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.advisor  =  1121",
        "predicted_parse_with_values": "select T3.ClubName from Student as T1 join Member_of_club as T2 on T1.StuID = T2.StuID join Club as T3 on T2.ClubID = T3.ClubID where T1.Advisor = 8772"
    },
    {
        "question": "How many students play each sport ?",
        "db_id": "game_1",
        "gold_parse": "SELECT sportname ,  count(*) FROM Sportsinfo GROUP BY sportname",
        "predicted_parse_with_values": "select T1.SportName , count ( * ) from SportsInfo as T1 join Student as T2 on T1.StuID = T2.StuID join Plays_Games as T3 on T2.StuID = T3.StuID group by T1.SportName"
    },
    {
        "question": "Find the count and code of the job has most employees .",
        "db_id": "college_1",
        "gold_parse": "SELECT emp_jobcode ,  count(*) FROM employee GROUP BY emp_jobcode ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select count ( * ) , EMP_JOBCODE from EMPLOYEE group by EMP_JOBCODE order by count ( * ) desc limit 1"
    },
    {
        "question": "How many proteins are associated with an institution in a building with at least 20 floors ?",
        "db_id": "protein_institute",
        "gold_parse": "SELECT count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id JOIN building AS T3 ON T3.building_id  =  T1.building_id WHERE T3.floors  >=  20",
        "predicted_parse_with_values": "select count ( building_id ) from building where Floors >= 17"
    },
    {
        "question": "Return the address of customer 10 .",
        "db_id": "department_store",
        "gold_parse": "SELECT T1.address_details FROM addresses AS T1 JOIN customer_addresses AS T2 ON T1.address_id  =  T2.address_id WHERE T2.customer_id  =  10",
        "predicted_parse_with_values": "select customer_address from Customers where customer_name = \"Yasmeen\""
    },
    {
        "question": "What is the number of departments in Division \" AS \" ?",
        "db_id": "college_3",
        "gold_parse": "SELECT count(*) FROM DEPARTMENT WHERE Division  =  \"AS\"",
        "predicted_parse_with_values": "select count ( DNO ) from Department where Division = \"EN\""
    },
    {
        "question": "Give me the name and year of opening of the manufacturers that have either less than 10 factories or more than 10 shops .",
        "db_id": "manufacturer",
        "gold_parse": "SELECT name ,  open_year FROM manufacturer WHERE num_of_shops  >  10 OR Num_of_Factories  <  10",
        "predicted_parse_with_values": "select Name , Open_Year from manufacturer where Num_of_Shops < 8 or Num_of_Shops > 7"
    },
    {
        "question": "Which allergy has most number of students affected ?",
        "db_id": "allergy_1",
        "gold_parse": "SELECT Allergy FROM Has_allergy GROUP BY Allergy ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select Allergy from Has_Allergy group by Allergy order by count ( * ) desc limit 1"
    },
    {
        "question": "What is the title and director for the movie with highest worldwide gross in the year 2000 or before ?",
        "db_id": "culture_company",
        "gold_parse": "SELECT title ,  director FROM movie WHERE YEAR  <=  2000 ORDER BY gross_worldwide DESC LIMIT 1",
        "predicted_parse_with_values": "select Title , Director from movie where Gross_worldwide = 456774 order by Gross_worldwide desc limit 1"
    },
    {
        "question": "which of the states bordering oklahoma has the largest population",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"oklahoma\" ) ORDER BY population DESC LIMIT 1",
        "predicted_parse_with_values": "select T1.state_name from border_info as T1 join state as T2 on T1.border = T2.state_name where T2.area = \"dummy value\" order by T2.population desc limit 1"
    },
    {
        "question": "What are all the movies directed by \" Asghar Farhadi \" featuring \" Taraneh Alidoosti \" ?",
        "db_id": "imdb",
        "gold_parse": "SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid  =  t1.aid JOIN movie AS t4 ON t4.mid  =  t5.msid JOIN directed_by AS t2 ON t4.mid  =  t2.msid JOIN director AS t3 ON t3.did  =  t2.did WHERE t1.name  =  \"Taraneh Alidoosti\" AND t3.name  =  \"Asghar Farhadi\"",
        "predicted_parse_with_values": "select T2.title from director as T1 join movie as T2 where T1.name = \"dummy value\" and T1.name = \"dummy value\""
    },
    {
        "question": "How many dorms have amenities ?",
        "db_id": "dorm_1",
        "gold_parse": "SELECT count(DISTINCT dormid) FROM has_amenity",
        "predicted_parse_with_values": "select count ( * ) from Dorm"
    },
    {
        "question": "what states are next to the ohio",
        "db_id": "geo",
        "gold_parse": "SELECT traverse FROM river WHERE river_name  =  \"ohio\"",
        "predicted_parse_with_values": "select state_name from state where area like \"dummy value\""
    },
    {
        "question": "state the state with the largest area",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state )",
        "predicted_parse_with_values": "select state_name from state order by area desc limit 1"
    },
    {
        "question": "What is the latest movie by \" Jim Jarmusch \"",
        "db_id": "imdb",
        "gold_parse": "SELECT t3.title FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.name  =  \"Jim Jarmusch\" ORDER BY t3.release_year DESC LIMIT 1",
        "predicted_parse_with_values": "select T2.title from actor as T1 join movie as T2 where T1.name = \"dummy value\" order by T1.birth_year desc limit 1"
    },
    {
        "question": "What is the name and age of every male ? Order the results by age .",
        "db_id": "network_2",
        "gold_parse": "SELECT name FROM Person WHERE gender  =  'male' ORDER BY age",
        "predicted_parse_with_values": "select name , age from Person where gender = \"male\" order by age"
    },
    {
        "question": "return me the paper after 2000 in Databases area with the most citations .",
        "db_id": "academic",
        "gold_parse": "SELECT t3.title FROM DOMAIN AS t2 JOIN domain_publication AS t1 ON t2.did  =  t1.did JOIN publication AS t3 ON t3.pid  =  t1.pid WHERE t2.name  =  \"Databases\" AND t3.year  >  2000 ORDER BY t3.citation_num DESC LIMIT 1",
        "predicted_parse_with_values": "select count ( jid ) , year from publication where year > \"dummy value\" group by year order by count ( jid ) desc"
    },
    {
        "question": "What are the names of the tourist attractions that have parking or shopping as their feature details ?",
        "db_id": "cre_Theme_park",
        "gold_parse": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'park' UNION SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'shopping'",
        "predicted_parse_with_values": "select T3.Name from Features as T1 join Tourist_Attraction_Features as T2 on T1.Feature_ID = T2.Feature_ID join Tourist_Attractions as T3 on T2.Tourist_Attraction_ID = T3.Tourist_Attraction_ID where T1.Feature_Details = \"shopping\" or T1.Feature_Details = \"shopping\""
    },
    {
        "question": "return me the papers by \" H. V. Jagadish \" on VLDB conference after 2000 .",
        "db_id": "academic",
        "gold_parse": "SELECT t4.title FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" AND t2.name  =  \"VLDB\" AND t4.year  >  2000",
        "predicted_parse_with_values": "select T1.name from conference as T1 join publication as T2 on T1.cid = T2.cid where T1.name = \"dummy value\" and T2.year > \"dummy value\""
    },
    {
        "question": "which state has the lowest population density",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM state WHERE density  =  ( SELECT MIN ( density ) FROM state )",
        "predicted_parse_with_values": "select state_name from state order by density asc limit 1"
    },
    {
        "question": "What is the first and last name of the professor in biology department ?",
        "db_id": "college_1",
        "gold_parse": "SELECT T3.EMP_FNAME ,  T3.EMP_LNAME FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code JOIN employee AS T3 ON T1.EMP_NUM  =  T3.EMP_NUM WHERE DEPT_NAME  =  \"Biology\"",
        "predicted_parse_with_values": "select T2.DEPT_CODE , T1.EMP_LNAME from EMPLOYEE as T1 join PROFESSOR as T2 on T1.EMP_NUM = T2.EMP_NUM where T2.DEPT_CODE = \"PSYCH\""
    },
    {
        "question": "What are the names of the people who are older 40 but no friends under age 30 ?",
        "db_id": "network_2",
        "gold_parse": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  >  40) EXCEPT SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  <  30)",
        "predicted_parse_with_values": "select name from Person where age > 25 except select name from PersonFriend where year < 10"
    },
    {
        "question": "Find the number of rooms with a king bed .",
        "db_id": "inn_1",
        "gold_parse": "SELECT count(*) FROM Rooms WHERE bedType  =  \"King\"",
        "predicted_parse_with_values": "select count ( * ) from Rooms where beds = 2"
    },
    {
        "question": "Show ids for the faculty members who do n't advise any student .",
        "db_id": "activity_1",
        "gold_parse": "SELECT FacID FROM Faculty EXCEPT SELECT advisor FROM Student",
        "predicted_parse_with_values": "select FacID from Faculty except select FacID from Faculty"
    },
    {
        "question": "In what city was \" Kevin Spacey \" born ?",
        "db_id": "imdb",
        "gold_parse": "SELECT birth_city FROM director WHERE name  =  \"director_name0\"",
        "predicted_parse_with_values": "select birth_city from actor where name = \"dummy value\""
    },
    {
        "question": "Return the names of artists and the themes of their exhibitions that had a ticket price higher than average .",
        "db_id": "theme_gallery",
        "gold_parse": "SELECT T1.theme ,  T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.ticket_price  >  (SELECT avg(ticket_price) FROM exhibition)",
        "predicted_parse_with_values": "select T1.Name , T2.Theme from artist as T1 join exhibition as T2 on T1.Artist_ID = T2.Artist_ID where T2.Ticket_Price > ( select avg ( Ticket_Price ) from exhibition )"
    },
    {
        "question": "Find the id of the candidate who got the lowest oppose rate .",
        "db_id": "candidate_poll",
        "gold_parse": "SELECT Candidate_ID FROM candidate ORDER BY oppose_rate LIMIT 1",
        "predicted_parse_with_values": "select Candidate_ID from candidate order by Oppose_rate asc limit 1"
    },
    {
        "question": "What is the age of the friend of Zach with longest year relationship ?",
        "db_id": "network_2",
        "gold_parse": "SELECT T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name =  'Zach' AND T2.year  =  (SELECT max(YEAR) FROM PersonFriend WHERE name =  'Zach')",
        "predicted_parse_with_values": "select T2.age from PersonFriend as T1 join Person as T2 on T1.friend = T2.name where T1.year = ( select max ( year ) from PersonFriend )"
    },
    {
        "question": "what is the number of neighboring states for kentucky",
        "db_id": "geo",
        "gold_parse": "SELECT COUNT ( border ) FROM border_info WHERE state_name  =  \"kentucky\"",
        "predicted_parse_with_values": "select count ( * ) from state where area like \"dummy value\""
    },
    {
        "question": "What is the first name and GPA of every student that has a GPA lower than average ?",
        "db_id": "college_1",
        "gold_parse": "SELECT stu_fname ,  stu_gpa FROM student WHERE stu_gpa  <  (SELECT avg(stu_gpa) FROM student)",
        "predicted_parse_with_values": "select STU_FNAME , STU_GPA from STUDENT where STU_NUM < ( select avg ( STU_NUM ) from STUDENT )"
    },
    {
        "question": "How many students are advised by each rank of faculty ? List the rank and the number of students .",
        "db_id": "activity_1",
        "gold_parse": "SELECT T1.rank ,  count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.rank",
        "predicted_parse_with_values": "select T5.Rank , count ( * ) from Student as T1 join Participates_in as T2 on T1.StuID = T2.stuid join Activity as T3 on T2.actid = T3.actid join Faculty_Participates_in as T4 on T3.actid = T4.actid join Faculty as T5 on T4.FacID = T5.FacID group by T5.Rank"
    },
    {
        "question": "number of citizens in boulder",
        "db_id": "geo",
        "gold_parse": "SELECT population FROM city WHERE city_name  =  \"boulder\"",
        "predicted_parse_with_values": "select count ( * ) from state where area = \"dummy value\""
    },
    {
        "question": "Show names and phones of customers who do not have address information .",
        "db_id": "customers_and_products_contacts",
        "gold_parse": "SELECT customer_name ,  customer_phone FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM customer_address_history)",
        "predicted_parse_with_values": "select customer_name , customer_phone from Customers where customer_address = \"10823 Rollin Spur\""
    },
    {
        "question": "what is the smallest state that borders texas",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"texas\" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"texas\" )",
        "predicted_parse_with_values": "select min ( T2.density ) from border_info as T1 join state as T2 on T1.border = T2.state_name where T1.border != \"dummy value\""
    },
    {
        "question": "What is the name and open year for the branch with most number of memberships registered in 2016 ?",
        "db_id": "shop_membership",
        "gold_parse": "SELECT T2.name ,  T2.open_year FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.register_year  =  2016 GROUP BY T2.branch_id ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select T2.Name , T2.Open_year from membership_register_branch as T1 join branch as T2 on T1.Branch_ID = T2.Branch_ID where T1.Register_Year = ( select max ( Register_Year ) from membership_register_branch where Branch_ID = 1 )"
    },
    {
        "question": "Who are the players from Indonesia ?",
        "db_id": "match_season",
        "gold_parse": "SELECT T2.Player FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Country_name  =  \"Indonesia\"",
        "predicted_parse_with_values": "select T1.Player from player as T1 join team as T2 on T1.Team = T2.Team_id join match_season as T3 on T2.Team_id = T3.Team join country as T4 on T3.Country = T4.Country_id where T4.Official_native_language = \"Persian ( Arabic script ) \""
    },
    {
        "question": "For each grade , return the grade number , the number of classrooms used for the grade , and the total number of students enrolled in the grade .",
        "db_id": "student_1",
        "gold_parse": "SELECT grade ,  count(DISTINCT classroom) ,  count(*) FROM list GROUP BY grade",
        "predicted_parse_with_values": "select count ( * ) , Grade , count ( * ) from list group by Grade"
    },
    {
        "question": "Show the manager name with most number of gas stations opened after 2000 .",
        "db_id": "gas_company",
        "gold_parse": "SELECT manager_name FROM gas_station WHERE open_year  >  2000 GROUP BY manager_name ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select Manager_Name from gas_station where Open_Year > 2008 group by Manager_Name order by count ( * ) desc limit 1"
    },
    {
        "question": "For each account type , find the average account balance of customers with credit score lower than 50 .",
        "db_id": "loan_1",
        "gold_parse": "SELECT avg(acc_bal) ,  acc_type FROM customer WHERE credit_score  <  50 GROUP BY acc_type",
        "predicted_parse_with_values": "select acc_type , avg ( acc_bal ) from customer where credit_score < 30 group by acc_type"
    },
    {
        "question": "What are the ids of all female students who play football ?",
        "db_id": "game_1",
        "gold_parse": "SELECT StuID FROM Student WHERE sex  =  'F' INTERSECT SELECT StuID FROM Sportsinfo WHERE sportname  =  \"Football\"",
        "predicted_parse_with_values": "select T3.StuID from SportsInfo as T1 join Student as T2 on T1.StuID = T2.StuID join Plays_Games as T3 on T2.StuID = T3.StuID where T2.Sex = \"M\" and T1.GamesPlayed = 25"
    },
    {
        "question": "What are the names and number of works for all artists who have sung at least one song in English ?",
        "db_id": "music_1",
        "gold_parse": "SELECT T1.artist_name ,  count(*) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  \"english\" GROUP BY T2.artist_name HAVING count(*)  >=  1",
        "predicted_parse_with_values": "select artist_name , count ( * ) from song where languages = \"bangla\""
    },
    {
        "question": "What is total number of show times per dat for each cinema ?",
        "db_id": "cinema",
        "gold_parse": "SELECT T2.name ,  sum(T1.show_times_per_day) FROM schedule AS T1 JOIN cinema AS T2 ON T1.cinema_id  =  T2.cinema_id GROUP BY T1.cinema_id",
        "predicted_parse_with_values": "select sum ( T1.Show_times_per_day ) , T2.Name from schedule as T1 join cinema as T2 on T1.Cinema_ID = T2.Cinema_ID group by T2.Name"
    },
    {
        "question": "How many clubs does the student named \" Eric Tai \" belong to ?",
        "db_id": "club_1",
        "gold_parse": "SELECT count(DISTINCT t1.clubname) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Eric\" AND t3.lname  =  \"Tai\"",
        "predicted_parse_with_values": "select count ( * ) from Student where Fname = \"Jandy\""
    },
    {
        "question": "Give me a list of cities whose temperature in Feb is higher than that in Jun or cities that were once host cities ?",
        "db_id": "city_record",
        "gold_parse": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Feb  >  T2.Jun UNION SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city",
        "predicted_parse_with_values": "select T2.City from temperature as T1 join city as T2 on T1.City_ID = T2.City_ID join hosting_city as T3 on T2.City_ID = T3.Host_City where T1.Apr > 28.3 or hosting_T2.Year = 2011"
    },
    {
        "question": "Return the city with the customer type code \" Good Credit Rating \" that had the fewest customers .",
        "db_id": "customer_complaints",
        "gold_parse": "SELECT town_city FROM customers WHERE customer_type_code  =  \"Good Credit Rating\" GROUP BY town_city ORDER BY count(*) LIMIT 1",
        "predicted_parse_with_values": "select town_city from Customers where customer_type_code = \"Defaults on payments\" group by town_city order by count ( * ) asc limit 1"
    },
    {
        "question": "return me the number of papers which contain the keyword \" Natural Language \" .",
        "db_id": "academic",
        "gold_parse": "SELECT COUNT ( DISTINCT t3.title ) FROM publication_keyword AS t2 JOIN keyword AS t1 ON t2.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t2.pid WHERE t1.keyword  =  \"Natural Language\"",
        "predicted_parse_with_values": "select count ( * ) from keyword where keyword like \"dummy value\""
    },
    {
        "question": "Return the category code and typical price of 'cumin ' .",
        "db_id": "products_gen_characteristics",
        "gold_parse": "SELECT product_category_code ,  typical_buying_price FROM products WHERE product_name  =  \"cumin\"",
        "predicted_parse_with_values": "select T4.product_category_code , T3.typical_selling_price from Characteristics as T1 join Product_Characteristics as T2 on T1.characteristic_id = T2.characteristic_id join Products as T3 on T2.product_id = T3.product_id join Ref_Product_Categories as T4 on T3.product_category_code = T4.product_category_code where T1.characteristic_name = \"error\""
    },
    {
        "question": "Show the name of aircraft which fewest people have its certificate .",
        "db_id": "flight_1",
        "gold_parse": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid GROUP BY T1.aid ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select T2.name from certificate as T1 join aircraft as T2 on T1.aid = T2.aid group by T1.aid order by count ( * ) limit 1"
    },
    {
        "question": "What is the name of the tallest building ?",
        "db_id": "protein_institute",
        "gold_parse": "SELECT name FROM building ORDER BY height_feet DESC LIMIT 1",
        "predicted_parse_with_values": "select Name from building order by Years_as_tallest desc limit 1"
    },
    {
        "question": "What is the installation date for each ending station on all the trips ?",
        "db_id": "bike_1",
        "gold_parse": "SELECT T1.id ,  T2.installation_date FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id",
        "predicted_parse_with_values": "select installation_date from station"
    },
    {
        "question": "return me the journals , which have more than 10 papers by \" H. V. Jagadish \" .",
        "db_id": "academic",
        "gold_parse": "SELECT t2.name FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" GROUP BY t2.name HAVING COUNT ( DISTINCT t4.title )  >  10",
        "predicted_parse_with_values": "select T1.name from journal as T1 join publication as T2 on T1.jid = T2.jid join writes as T3 on T2.pid = T3.pid join author as T4 on T3.aid = T4.aid where T4.name = \"dummy value\" group by T1.name having count ( * ) > 1"
    },
    {
        "question": "Which papers were written by authors from the institution \" Google \" ?",
        "db_id": "icfp_1",
        "gold_parse": "SELECT DISTINCT t1.title FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Google\"",
        "predicted_parse_with_values": "select T3.paperID from Inst as T1 join Authorship as T2 on T1.instID = T2.instID join Papers as T3 on T2.paperID = T3.paperID where T1.name = \"University of Pennsylvania\""
    },
    {
        "question": "Give me the claim date , settlement date for all the claims whose claimed amount is larger than the average .",
        "db_id": "insurance_policies",
        "gold_parse": "SELECT Date_Claim_Made ,  Date_Claim_Settled FROM Claims WHERE Amount_Claimed  >  ( SELECT avg(Amount_Claimed) FROM Claims )",
        "predicted_parse_with_values": "select T1.Date_Claim_Made , T2.Date_Claim_Settled from Claims as T1 join Settlements as T2 on T1.Claim_ID = T2.Claim_ID where T1.Amount_Claimed > ( select avg ( Amount_Claimed ) from Claims )"
    },
    {
        "question": "What are the names of products that are not 'white ' in color and are not measured by the unit 'Handful ' ?",
        "db_id": "products_gen_characteristics",
        "gold_parse": "SELECT t1.product_name FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code JOIN ref_colors AS t3 ON t1.color_code  =  t3.color_code WHERE t3.color_description  =  \"white\" AND t2.unit_of_measure != \"Handful\"",
        "predicted_parse_with_values": "select T2.product_name from Ref_Product_Categories as T1 join Products as T2 on T1.product_category_code = T2.product_category_code where T2.color_code = 1 and T1.unit_of_measure != \"Weight - pound , kilo.\""
    },
    {
        "question": "return me the papers written by \" H. V. Jagadish \" and \" Yunyao Li \" after 2005 .",
        "db_id": "academic",
        "gold_parse": "SELECT t5.title FROM writes AS t3 JOIN author AS t2 ON t3.aid  =  t2.aid JOIN publication AS t5 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t2.name  =  \"H. V. Jagadish\" AND t1.name  =  \"Yunyao Li\" AND t5.year  >  2005",
        "predicted_parse_with_values": "select T3.name from organization as T1 join publication as T2 join domain as T3 where T1.name = \"dummy value\" and T2.year > \"dummy value\""
    },
    {
        "question": "List all the contact channel codes that were used less than 5 times .",
        "db_id": "customers_and_addresses",
        "gold_parse": "SELECT channel_code FROM customer_contact_channels GROUP BY channel_code HAVING count(customer_id)  <  5",
        "predicted_parse_with_values": "select channel_code from Customer_Contact_Channels group by channel_code having count ( * ) < 1"
    },
    {
        "question": "Find all the female actors in the movie \" Saving Private Ryan \"",
        "db_id": "imdb",
        "gold_parse": "SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t1.gender  =  \"female\" AND t3.title  =  \"Saving Private Ryan\"",
        "predicted_parse_with_values": "select name from actor where gender = \"dummy value\" and gender = \"dummy value\""
    },
    {
        "question": "Select the names of manufacturer whose products have an average price higher than or equal to $ 150 .",
        "db_id": "manufactory_1",
        "gold_parse": "SELECT avg(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name HAVING avg(T1.price) >= 150",
        "predicted_parse_with_values": "select T1.Name from Manufacturers as T1 join Products as T2 on T1.Code = T2.Manufacturer group by T2.Name having avg ( T2.Price ) >= 1"
    },
    {
        "question": "What are the distinct names and phone numbers for suppliers who have red jeans ?",
        "db_id": "department_store",
        "gold_parse": "SELECT DISTINCT T1.supplier_name ,  T1.supplier_phone FROM suppliers AS T1 JOIN product_suppliers AS T2 ON T1.supplier_id  =  T2.supplier_id JOIN products AS T3 ON T2.product_id  =  T3.product_id WHERE T3.product_name  =  \"red jeans\"",
        "predicted_parse_with_values": "select supplier_name , supplier_phone from Suppliers where supplier_name = \"Audi\""
    },
    {
        "question": "what are the names of the major cities in kansas",
        "db_id": "geo",
        "gold_parse": "SELECT city_name FROM city WHERE population  >  150000 AND state_name  =  \"kansas\"",
        "predicted_parse_with_values": "select city_name from city where state_name = \"dummy value\""
    },
    {
        "question": "what rivers flow through illinois",
        "db_id": "geo",
        "gold_parse": "SELECT river_name FROM river WHERE traverse  =  \"illinois\"",
        "predicted_parse_with_values": "select T1.river_name from river as T1 join state as T2 on T1.traverse = T2.state_name where T2.area = \"dummy value\""
    },
    {
        "question": "return me the number of keywords in Databases area .",
        "db_id": "academic",
        "gold_parse": "SELECT COUNT ( DISTINCT t1.keyword ) FROM DOMAIN AS t3 JOIN domain_keyword AS t2 ON t3.did  =  t2.did JOIN keyword AS t1 ON t1.kid  =  t2.kid WHERE t3.name  =  \"Databases\"",
        "predicted_parse_with_values": "select count ( * ) from keyword where keyword = \"dummy value\""
    },
    {
        "question": "How many schools have students playing in goalie and mid-field positions ?",
        "db_id": "soccer_2",
        "gold_parse": "SELECT COUNT(*) FROM (SELECT cName FROM  tryout WHERE pPos  =  'goalie' INTERSECT SELECT cName FROM  tryout WHERE pPos  =  'mid')",
        "predicted_parse_with_values": "select count ( * ) from Tryout as T1 join College as T2 on T1.cName = T2.cName where T1.pPos = \"goalie\" intersect select T4.cName from Tryout as T3 join College as T4 on T3.cName = T4.cName where T3.pPos = \"goalie\""
    },
    {
        "question": "List the names of all music genres .",
        "db_id": "chinook_1",
        "gold_parse": "SELECT Name FROM GENRE",
        "predicted_parse_with_values": "select T5.Name from Customer as T1 join Invoice as T2 on T1.CustomerId = T2.CustomerId join InvoiceLine as T3 on T2.InvoiceId = T3.InvoiceId join Track as T4 on T3.TrackId = T4.TrackId join Genre as T5 on T4.GenreId = T5.GenreId where T1.LastName = \"Zimmermann\""
    },
    {
        "question": "Find the distinct last names of all the students who have president votes and whose advisor is 8741 .",
        "db_id": "voter_2",
        "gold_parse": "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  PRESIDENT_Vote INTERSECT SELECT DISTINCT LName FROM STUDENT WHERE Advisor  =  \"8741\"",
        "predicted_parse_with_values": "select T2.LName from Voting_record as T1 join Student as T2 on T1.Class_Senator_Vote = T2.StuID where T1.Class_President_Vote = 1031 and T2.Advisor = 7723"
    },
    {
        "question": "how many rivers are in idaho",
        "db_id": "geo",
        "gold_parse": "SELECT COUNT ( river_name ) FROM river WHERE traverse  =  \"idaho\"",
        "predicted_parse_with_values": "select count ( * ) from river as T1 join state as T2 on T1.traverse = T2.state_name where T2.state_name = \"dummy value\""
    },
    {
        "question": "What is the description of the club \" Pen and Paper Gaming \" ?",
        "db_id": "club_1",
        "gold_parse": "SELECT clubdesc FROM club WHERE clubname  =  \"Pen and Paper Gaming\"",
        "predicted_parse_with_values": "select ClubDesc from Club where ClubName = \"Tennis Club\" and ClubName = \"Pen and Paper Gaming\""
    },
    {
        "question": "How many storms occured in each region ?",
        "db_id": "storm_record",
        "gold_parse": "SELECT T1.region_name ,  count(*) FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id",
        "predicted_parse_with_values": "select count ( * ) , Region_name from region group by Region_name"
    },
    {
        "question": "How many professors are teaching class with code ACCT-211 ?",
        "db_id": "college_1",
        "gold_parse": "SELECT count(DISTINCT PROF_NUM) FROM CLASS WHERE CRS_CODE  =  \"ACCT-211\"",
        "predicted_parse_with_values": "select count ( CLASS_CODE ) from CLASS where CRS_CODE = \"QM-261\""
    },
    {
        "question": "Show the average price range of hotels that have 5 star ratings and allow pets .",
        "db_id": "cre_Theme_park",
        "gold_parse": "SELECT avg(price_range) FROM HOTELS WHERE star_rating_code  =  \"5\" AND pets_allowed_yn  =  1",
        "predicted_parse_with_values": "select avg ( price_range ) from Hotels where star_rating_code = 1 intersect select price_range from Hotels where star_rating_code = 1"
    },
    {
        "question": "What instruments did the musician with the last name \" Heilo \" play in \" Badlands \" ?",
        "db_id": "music_2",
        "gold_parse": "SELECT T4.instrument FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId JOIN Instruments AS T4 ON T4.songid  =  T3.songid AND T4.bandmateid  =  T2.id WHERE T2.lastname  =  \"Heilo\" AND T3.title  =  \"Badlands\"",
        "predicted_parse_with_values": "select T2.Instrument from Band as T1 join Instruments as T2 on T1.Id = T2.BandmateId where T1.Lastname = \"dummy value\""
    },
    {
        "question": "What are the names of all schools that have students trying out for the position of goal and 'mid'-field .",
        "db_id": "soccer_2",
        "gold_parse": "SELECT cName FROM  tryout WHERE pPos  =  'goalie' INTERSECT SELECT cName FROM  tryout WHERE pPos  =  'mid'",
        "predicted_parse_with_values": "select T2.cName from Tryout as T1 join College as T2 on T1.cName = T2.cName where T1.pPos = \"mid\" intersect select T4.cName from Tryout as T3 join College as T4 on T3.cName = T4.cName where T3.pPos = \"striker\""
    },
    {
        "question": "What are the titles of movies and books corresponding to companies incorporated in China ?",
        "db_id": "culture_company",
        "gold_parse": "SELECT T1.title ,  T3.book_title FROM movie AS T1 JOIN culture_company AS T2 ON T1.movie_id  =  T2.movie_id JOIN book_club AS T3 ON T3.book_club_id  =  T2.book_club_id WHERE T2.incorporated_in  =  'China'",
        "predicted_parse_with_values": "select T3.Title , T2.Book_Title from culture_company as T1 join book_club as T2 on T1.book_club_id = T2.book_club_id join movie as T3 on T1.movie_id = T3.movie_id where T1.Company_name = \"Cathay Pacific Culture\""
    },
    {
        "question": "return me the number of the organizations in \" North America \" .",
        "db_id": "academic",
        "gold_parse": "SELECT COUNT ( DISTINCT name ) FROM organization WHERE continent  =  \"North America\"",
        "predicted_parse_with_values": "select count ( * ) from organization where continent = \"dummy value\""
    },
    {
        "question": "return me the number of researchers in Databases area in \" University of Michigan \" .",
        "db_id": "academic",
        "gold_parse": "SELECT COUNT ( DISTINCT t1.name ) FROM domain_author AS t4 JOIN author AS t1 ON t4.aid  =  t1.aid JOIN DOMAIN AS t3 ON t3.did  =  t4.did JOIN organization AS t2 ON t2.oid  =  t1.oid WHERE t3.name  =  \"Databases\" AND t2.name  =  \"University of Michigan\"",
        "predicted_parse_with_values": "select count ( oid ) from organization where name = \"dummy value\" and name = \"dummy value\""
    },
    {
        "question": "How many exhibitions have a attendance more than 100 or have a ticket price below 10 ?",
        "db_id": "theme_gallery",
        "gold_parse": "SELECT count(*) FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  >  100 OR T2.ticket_price  <  10",
        "predicted_parse_with_values": "select count ( * ) from exhibition where Ticket_Price > 14.95 or sum ( Ticket_Price ) < 1"
    },
    {
        "question": "Find the names of all modern rooms with a base price below $ 160 and two beds .",
        "db_id": "inn_1",
        "gold_parse": "SELECT roomName FROM Rooms WHERE basePrice  <  160 AND beds =  2 AND decor  =  'modern'",
        "predicted_parse_with_values": "select roomName from Rooms where basePrice < 75 and bedType < \"Double\""
    },
    {
        "question": "Which committees have delegates from the Democratic party ?",
        "db_id": "election",
        "gold_parse": "SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  \"Democratic\"",
        "predicted_parse_with_values": "select T1.Committee from election as T1 join party as T2 on T1.Party = T2.Party_ID where T2.Party = \"Working Families\""
    },
    {
        "question": "find all films in which \" Rowan Atkinson \" acted as \" Mr. Bean \"",
        "db_id": "imdb",
        "gold_parse": "SELECT t2.title FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  \"Rowan Atkinson\" AND t3.role  =  \"Mr. Bean\"",
        "predicted_parse_with_values": "select T2.title from actor as T1 join movie as T2 where T1.name = \"dummy value\""
    },
    {
        "question": "what is the biggest american city in a state with a river",
        "db_id": "geo",
        "gold_parse": "SELECT DISTINCT t1.city_name FROM city AS t1 JOIN river AS t2 ON t2.traverse  =  t1.state_name WHERE t1.population  =  ( SELECT MAX ( t1.population ) FROM river AS t2 JOIN city AS t1 ON t2.traverse  =  t1.state_name )",
        "predicted_parse_with_values": "select T2.capital from river as T1 join state as T2 on T1.traverse = T2.state_name where T1.river_name = \"dummy value\" order by T2.density desc limit 1"
    },
    {
        "question": "List all of the player ids with a height of at least 180cm and an overall rating higher than 85 .",
        "db_id": "soccer_1",
        "gold_parse": "SELECT player_api_id FROM Player WHERE height  >=  180 INTERSECT SELECT player_api_id FROM Player_Attributes WHERE overall_rating  >  85",
        "predicted_parse_with_values": "select T1.id from Player as T1 join Player_Attributes as T2 on T1.player_api_id = T2.player_api_id where T1.height >= 157.48 and T2.overall_rating >= 87"
    },
    {
        "question": "Find the first names and last names of the authors whose institution affiliation is \" University of Oxford \" .",
        "db_id": "icfp_1",
        "gold_parse": "SELECT DISTINCT t1.fname ,  t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"University of Oxford\"",
        "predicted_parse_with_values": "select T1.fname , T1.lname from Authors as T1 join Authorship as T2 on T1.authID = T2.authID join Inst as T3 on T2.instID = T3.instID where T3.name = \"Portland State University\""
    },
    {
        "question": "How many cities are there in state \" Colorado \" ?",
        "db_id": "e_government",
        "gold_parse": "SELECT count(*) FROM addresses WHERE state_province_county  =  \"Colorado\"",
        "predicted_parse_with_values": "select count ( town_city ) from Addresses where state_province_county = \"Vermont\""
    },
    {
        "question": "What are the names of the members and branches at which they are registered sorted by year of registration ?",
        "db_id": "shop_membership",
        "gold_parse": "SELECT T3.name ,  T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id JOIN member AS T3 ON T1.member_id  =  T3.member_id ORDER BY T1.register_year",
        "predicted_parse_with_values": "select T2.Name from membership_register_branch as T1 join member as T2 on T1.Member_ID = T2.Member_ID order by T1.Register_Year"
    },
    {
        "question": "Show the minister who took office after 1961 or before 1959 .",
        "db_id": "party_people",
        "gold_parse": "SELECT minister FROM party WHERE took_office  >  1961 OR took_office  <  1959",
        "predicted_parse_with_values": "select T1.Minister from party as T1 join region as T2 on T1.Region_ID = T2.Region_ID where T1.Took_office > 1959 or T2.Date < \"16 July 2002\""
    },
    {
        "question": "Find the first name and gender of the student who has allergy to milk but not cat .",
        "db_id": "allergy_1",
        "gold_parse": "SELECT fname ,  sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Milk\" EXCEPT SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Cat\")",
        "predicted_parse_with_values": "select T3.Fname , T3.Sex from Allergy_Type as T1 join Has_Allergy as T2 on T1.Allergy = T2.Allergy join Student as T3 on T2.StuID = T3.StuID where T1.Allergytype = \"environmental\" except select T6.Fname , T6.Sex from Allergy_Type as T4 join Has_Allergy as T5 on T4.Allergy = T5.Allergy join Student as T6 on T5.StuID = T6.StuID where T4.Allergytype = \"animal\""
    },
    {
        "question": "What are the ids of the trips that lasted the longest and how long did they last ?",
        "db_id": "bike_1",
        "gold_parse": "SELECT id ,  duration FROM trip ORDER BY duration DESC LIMIT 3",
        "predicted_parse_with_values": "select id , start_date from trip order by duration desc limit 1"
    },
    {
        "question": "Return the unique name for stations that have ever had 7 bikes available .",
        "db_id": "bike_1",
        "gold_parse": "SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  7",
        "predicted_parse_with_values": "select T1.name from station as T1 join status as T2 on T1.id = T2.station_id group by T2.station_id having count ( * ) >= 1"
    },
    {
        "question": "What are the names for all aircrafts with at least 2 flights ?",
        "db_id": "flight_1",
        "gold_parse": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid HAVING count(*)  >= 2",
        "predicted_parse_with_values": "select name from aircraft group by name having count ( * ) >= 1"
    },
    {
        "question": "Who are the nominees who were nominated for either of the Bob Fosse or Cleavant Derricks awards ?",
        "db_id": "musical",
        "gold_parse": "SELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" OR Award  =  \"Cleavant Derricks\"",
        "predicted_parse_with_values": "select T1.Nominee from musical as T1 join actor as T2 where T2.Name = \"Ian Smith\" or T2.Name = \"Ian Smith\""
    },
    {
        "question": "Who is performing in the back stage position for the song \" Badlands \" ? Show the first name and the last name .",
        "db_id": "music_2",
        "gold_parse": "SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Badlands\" AND T1.StagePosition  =  \"back\"",
        "predicted_parse_with_values": "select T1.Firstname , T1.Lastname from Band as T1 join Vocals as T2 on T1.Id = T2.Bandmate join Songs as T3 on T2.SongId = T3.SongId where T3.Title = \"dummy value\""
    },
    {
        "question": "return me all the papers after 2000 in \" University of Michigan \" .",
        "db_id": "academic",
        "gold_parse": "SELECT t4.title FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t3 ON t3.aid  =  t1.aid JOIN publication AS t4 ON t3.pid  =  t4.pid WHERE t2.name  =  \"University of Michigan\" AND t4.year  >  2000",
        "predicted_parse_with_values": "select T1.name from conference as T1 join publication as T2 on T1.cid = T2.cid where T2.year > \"dummy value\" and T2.year = \"dummy value\""
    },
    {
        "question": "Please show the names and the players of clubs .",
        "db_id": "sports_competition",
        "gold_parse": "SELECT T1.name ,  T2.Player_id FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID",
        "predicted_parse_with_values": "select T1.name , T2.name from club as T1 join player as T2 on T1.Club_ID = T2.Club_ID"
    },
    {
        "question": "how long is the longest river in texas",
        "db_id": "geo",
        "gold_parse": "SELECT LENGTH FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river WHERE traverse  =  \"texas\" ) AND traverse  =  \"texas\"",
        "predicted_parse_with_values": "select T1.length from river as T1 join state as T2 on T1.traverse = T2.state_name where T2.state_name = \"dummy value\" order by T1.length desc limit 1"
    },
    {
        "question": "What are the name , id and the corresponding number of visits for each tourist attraction ?",
        "db_id": "cre_Theme_park",
        "gold_parse": "SELECT T1.Name ,  T2.Tourist_Attraction_ID ,   COUNT(*) FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID",
        "predicted_parse_with_values": "select Name , Attraction_Type_Code , count ( * ) from Tourist_Attractions group by Tourist_Attraction_ID"
    },
    {
        "question": "For each grade 0 classroom , return the classroom number and the count of students .",
        "db_id": "student_1",
        "gold_parse": "SELECT classroom ,  count(*) FROM list WHERE grade  =  \"0\" GROUP BY classroom",
        "predicted_parse_with_values": "select Grade , count ( * ) from list where Grade = 5 group by Grade"
    },
    {
        "question": "return me the number of keywords in PVLDB .",
        "db_id": "academic",
        "gold_parse": "SELECT COUNT ( DISTINCT t1.keyword ) FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t2 ON t2.pid  =  t4.pid JOIN journal AS t3 ON t2.jid  =  t3.jid WHERE t3.name  =  \"PVLDB\"",
        "predicted_parse_with_values": "select count ( * ) from organization as T1 join keyword as T2 where T1.name = \"dummy value\""
    },
    {
        "question": "Which manufacturer has the most number of shops ? List its name and year of opening .",
        "db_id": "manufacturer",
        "gold_parse": "SELECT open_year ,  name FROM manufacturer ORDER BY num_of_shops DESC LIMIT 1",
        "predicted_parse_with_values": "select Name , Open_Year from manufacturer group by Name order by count ( * ) desc limit 1"
    },
    {
        "question": "What are the titles and ids for albums containing tracks with unit price greater than 1 ?",
        "db_id": "chinook_1",
        "gold_parse": "SELECT T1.Title ,  T2.AlbumID FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId WHERE T2.UnitPrice  >  1 GROUP BY T2.AlbumID",
        "predicted_parse_with_values": "select T1.Title , T1.AlbumId from Album as T1 join Track as T2 on T1.AlbumId = T2.AlbumId where T2.UnitPrice > 1.99"
    },
    {
        "question": "How many classes exist for each school ?",
        "db_id": "college_1",
        "gold_parse": "SELECT count(*) ,  T3.school_code FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code  =  T2.crs_code JOIN department AS T3 ON T2.dept_code  =  T3.dept_code GROUP BY T3.school_code",
        "predicted_parse_with_values": "select count ( * ) , count ( T1.* ) , T4.SCHOOL_CODE from CLASS as T1 join ENROLL as T2 on T1.CLASS_CODE = T2.CLASS_CODE join STUDENT as T3 on T2.STU_NUM = T3.STU_NUM join DEPARTMENT as T4 on T3.DEPT_CODE = T4.DEPT_CODE group by T4.SCHOOL_CODE"
    },
    {
        "question": "return me the journal , which have the most number of papers by \" H. V. Jagadish \" .",
        "db_id": "academic",
        "gold_parse": "SELECT t2.name FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" GROUP BY t2.name ORDER BY COUNT ( DISTINCT t4.title ) DESC LIMIT 1",
        "predicted_parse_with_values": "select T1.name , count ( * ) from journal as T1 join publication as T2 on T1.jid = T2.jid join writes as T3 on T2.pid = T3.pid join author as T4 on T3.aid = T4.aid where T4.name = \"dummy value\" group by T1.name order by count ( T1.name ) desc limit 1"
    },
    {
        "question": "What are the ids and names of customers with addressed that contain WY and who do not use a credit card for payment ?",
        "db_id": "department_store",
        "gold_parse": "SELECT customer_id ,  customer_name FROM customers WHERE customer_address LIKE \"%WY%\" AND payment_method_code != \"Credit Card\"",
        "predicted_parse_with_values": "select customer_id , customer_name from Customers where payment_method_code like \"Direct Debit\" except select customer_id , customer_name from Customers where payment_method_code like \"Credit Card\""
    },
    {
        "question": "What is the average age of the female students with secretary votes in the spring election cycle ?",
        "db_id": "voter_2",
        "gold_parse": "SELECT avg(T1.Age) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  SECRETARY_Vote WHERE T1.Sex  =  \"F\" AND T2.Election_Cycle  =  \"Spring\"",
        "predicted_parse_with_values": "select avg ( T2.Age ) from Voting_record as T1 join Student as T2 on T1.Class_Senator_Vote = T2.StuID where T2.Sex = \"M\" and T1.Secretary_Vote = 1030"
    },
    {
        "question": "What is the first , last name , gpa of the youngest one among students whose GPA is above 3 ?",
        "db_id": "college_1",
        "gold_parse": "SELECT stu_fname ,  stu_lname ,  stu_gpa FROM student WHERE stu_gpa  >  3 ORDER BY stu_dob DESC LIMIT 1",
        "predicted_parse_with_values": "select STU_FNAME , STU_LNAME , STU_GPA from STUDENT group by STU_FNAME having count ( * ) > 1"
    },
    {
        "question": "Show the name and distance of the aircrafts with more than 5000 distance and which at least 5 people have its certificate .",
        "db_id": "flight_1",
        "gold_parse": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid WHERE T2.distance  >  5000 GROUP BY T1.aid ORDER BY count(*)  >=  5",
        "predicted_parse_with_values": "select T2.name , T1.distance from flight as T1 join aircraft as T2 on T1.aid = T2.aid where T2.distance > 6900 and T2.distance <= 8430"
    },
    {
        "question": "What is the total number of people who have no friends living in Austin ?",
        "db_id": "network_2",
        "gold_parse": "SELECT count(DISTINCT name) FROM PersonFriend WHERE friend NOT IN (SELECT name FROM person WHERE city  =  'Austin')",
        "predicted_parse_with_values": "select count ( * ) from Person where name not in ( select T2.name from Person as T1 join PersonFriend as T2 on T1.name = T2.friend where T1.city = \"salt lake city\" )"
    },
    {
        "question": "In February , which city marks the highest temperature ?",
        "db_id": "city_record",
        "gold_parse": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id ORDER BY T2.Feb DESC LIMIT 1",
        "predicted_parse_with_values": "select T2.City from temperature as T1 join city as T2 on T1.City_ID = T2.City_ID where T1.Feb = 18.9 order by T1.Sep desc limit 1"
    },
    {
        "question": "which states border kentucky",
        "db_id": "geo",
        "gold_parse": "SELECT border FROM border_info WHERE state_name  =  \"kentucky\"",
        "predicted_parse_with_values": "select border from border_info where border = \"dummy value\""
    },
    {
        "question": "what is the average number of factories and maximum number of shops for manufacturers that opened before 1990 .",
        "db_id": "manufacturer",
        "gold_parse": "SELECT max(num_of_shops) ,  avg(Num_of_Factories) FROM manufacturer WHERE open_year  <  1990",
        "predicted_parse_with_values": "select avg ( Num_of_Factories ) , count ( * ) from manufacturer where Open_Year < 2001.0"
    },
    {
        "question": "Where is the birth place of \" Kevin Spacey \"",
        "db_id": "imdb",
        "gold_parse": "SELECT birth_city FROM director WHERE name  =  \"director_name0\"",
        "predicted_parse_with_values": "select birth_city from actor where name = \"dummy value\""
    },
    {
        "question": "Find the number of rooms with price higher than 120 for different decor .",
        "db_id": "inn_1",
        "gold_parse": "SELECT decor , count(*) FROM Rooms WHERE basePrice  >  120 GROUP BY decor",
        "predicted_parse_with_values": "select count ( * ) , decor from Rooms where basePrice > 100 group by decor"
    },
    {
        "question": "Find the name and training hours of players whose hours are below 1500 .",
        "db_id": "soccer_2",
        "gold_parse": "SELECT pName ,  HS FROM Player WHERE HS  <  1500",
        "predicted_parse_with_values": "select pName , pName from Player where HS < 1200"
    },
    {
        "question": "what is the length of the longest river that runs through texas",
        "db_id": "geo",
        "gold_parse": "SELECT LENGTH FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river WHERE traverse  =  \"texas\" ) AND traverse  =  \"texas\"",
        "predicted_parse_with_values": "select T1.length from river as T1 join state as T2 on T1.traverse = T2.state_name join border_info as T3 on T2.state_name = T3.border where T3.state_name = \"dummy value\" order by T1.length desc limit 1"
    },
    {
        "question": "what is the longest river",
        "db_id": "geo",
        "gold_parse": "SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river )",
        "predicted_parse_with_values": "select river_name from river order by length desc limit 1"
    },
    {
        "question": "What are all the different zip codes that have a maximum dew point that was always below 70 ?",
        "db_id": "bike_1",
        "gold_parse": "SELECT DISTINCT zip_code FROM weather EXCEPT SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f  >=  70",
        "predicted_parse_with_values": "select zip_code from weather where max_dew_point_f < 29"
    },
    {
        "question": "How many trips did not end in San Francisco ?",
        "db_id": "bike_1",
        "gold_parse": "SELECT count(*) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id WHERE T2.city != \"San Francisco\"",
        "predicted_parse_with_values": "select count ( * ) from station where city = \"San Jose\""
    },
    {
        "question": "What are the first name , last name and id of the player with the most all star game experiences ? Also list the count .",
        "db_id": "baseball_1",
        "gold_parse": "SELECT T1.name_first , T1.name_last ,  T1.player_id ,   count(*) FROM player AS T1 JOIN all_star AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.player_id ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select T2.name_first , T2.name_last , T2.name_last from all_star as T1 join player as T2 on T1.player_id = T2.player_id group by T1.player_id order by count ( * ) desc limit 1"
    },
    {
        "question": "what are the major cities in states through which the mississippi runs",
        "db_id": "geo",
        "gold_parse": "SELECT city_name FROM city WHERE population  >  150000 AND state_name IN ( SELECT traverse FROM river WHERE LENGTH  >  750 AND river_name  =  \"mississippi\" )",
        "predicted_parse_with_values": "select T2.capital from river as T1 join state as T2 on T1.traverse = T2.state_name where T1.river_name = \"dummy value\""
    },
    {
        "question": "return me the year of \" Making database systems usable \"",
        "db_id": "academic",
        "gold_parse": "SELECT YEAR FROM publication WHERE title  =  \"Making database systems usable\"",
        "predicted_parse_with_values": "select T1.year from publication as T1 join writes as T2 on T1.pid = T2.pid join author as T3 on T2.aid = T3.aid join domain_author as T4 on T3.aid = T4.aid join domain as T5 on T4.did = T5.did where T5.name = \"dummy value\""
    },
    {
        "question": "What are the name and id of the team with the most victories in 2008 postseason ?",
        "db_id": "baseball_1",
        "gold_parse": "SELECT T2.name ,  T1.team_id_winner FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T1.year  =  2008 GROUP BY T1.team_id_winner ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select T2.name , T2.div_win from postseason as T1 join team as T2 where T2.year = 1974 order by T1.wins desc limit 1"
    },
    {
        "question": "How many events have each participants attended ? List the participant id , type and the number .",
        "db_id": "local_govt_in_alabama",
        "gold_parse": "SELECT T1.Participant_ID ,  T1.Participant_Type_Code ,  count(*) FROM Participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID  =  T2.Participant_ID GROUP BY T1.Participant_ID",
        "predicted_parse_with_values": "select T2.Participant_ID , T1.Participant_Type_Code , count ( * ) from Participants as T1 join Participants_in_Events as T2 on T1.Participant_ID = T2.Participant_ID group by T2.Participant_ID"
    },
    {
        "question": "What is the name of the song that was released most recently ?",
        "db_id": "music_1",
        "gold_parse": "SELECT song_name ,  releasedate FROM song ORDER BY releasedate DESC LIMIT 1",
        "predicted_parse_with_values": "select song_name from song order by releasedate desc limit 1"
    },
    {
        "question": "return me the paper in PVLDB with the most citations .",
        "db_id": "academic",
        "gold_parse": "SELECT t2.title FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" ORDER BY t2.citation_num DESC LIMIT 1",
        "predicted_parse_with_values": "select T1.jid , count ( T1.jid ) from publication as T1 join cite as T2 on T1.pid = T2.citing where T2.cited = \"dummy value\" group by T1.jid order by count ( T1.jid ) desc"
    },
    {
        "question": "What are the average prices of products for each manufacturer ?",
        "db_id": "manufactory_1",
        "gold_parse": "SELECT avg(T1.price) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name",
        "predicted_parse_with_values": "select avg ( T2.Price ) , T1.Name from Manufacturers as T1 join Products as T2 on T1.Code = T2.Manufacturer group by T2.Manufacturer"
    },
    {
        "question": "What are the names of all of Bob 's friends ?",
        "db_id": "network_2",
        "gold_parse": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Bob'",
        "predicted_parse_with_values": "select name from PersonFriend where year like 5"
    },
    {
        "question": "Which papers have the substring \" ML \" in their titles ? Return the titles of the papers .",
        "db_id": "icfp_1",
        "gold_parse": "SELECT title FROM papers WHERE title LIKE \"%ML%\"",
        "predicted_parse_with_values": "select paperID from Papers where title like \"Just do it: Simple Monadic Equational Reasoning\""
    },
    {
        "question": "What is the average credit score for customers who have taken a loan ?",
        "db_id": "loan_1",
        "gold_parse": "SELECT avg(credit_score) FROM customer WHERE cust_id IN (SELECT cust_id FROM loan)",
        "predicted_parse_with_values": "select avg ( credit_score ) from customer"
    },
    {
        "question": "For each zip code , how many times has the maximum wind speed reached 25 mph ?",
        "db_id": "bike_1",
        "gold_parse": "SELECT zip_code , count(*) FROM weather WHERE max_wind_Speed_mph  >=  25 GROUP BY zip_code",
        "predicted_parse_with_values": "select count ( * ) , zip_code from weather where max_wind_Speed_mph > 128 group by zip_code"
    },
    {
        "question": "what state borders the state with the smallest population",
        "db_id": "geo",
        "gold_parse": "SELECT border FROM border_info WHERE state_name IN ( SELECT state_name FROM state WHERE population  =  ( SELECT MIN ( population ) FROM state ) )",
        "predicted_parse_with_values": "select T1.border from border_info as T1 join state as T2 on T1.border = T2.state_name order by T2.population limit 1"
    },
    {
        "question": "Tell me the payment method used by the customer who ordered the least amount of goods in total .",
        "db_id": "customers_and_addresses",
        "gold_parse": "SELECT t1.payment_method FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) LIMIT 1",
        "predicted_parse_with_values": "select T3.payment_method from Order_Items as T1 join Customer_Orders as T2 on T1.order_id = T2.order_id join Customers as T3 on T2.customer_id = T3.customer_id group by T3.payment_method order by sum ( T1.order_quantity ) desc limit 1"
    },
    {
        "question": "return me the paper by \" H. V. Jagadish \" with the most citations .",
        "db_id": "academic",
        "gold_parse": "SELECT t3.title FROM writes AS t2 JOIN author AS t1 ON t2.aid  =  t1.aid JOIN publication AS t3 ON t2.pid  =  t3.pid WHERE t1.name  =  \"H. V. Jagadish\" ORDER BY t3.citation_num DESC LIMIT 1",
        "predicted_parse_with_values": "select T1.jid , count ( T1.jid ) from publication as T1 join writes as T2 on T1.pid = T2.pid join author as T3 on T2.aid = T3.aid where T3.name = \"dummy value\" group by T1.jid order by count ( T1.jid ) desc"
    },
    {
        "question": "Who are the nominees who have been nominated more than two times ?",
        "db_id": "musical",
        "gold_parse": "SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  2",
        "predicted_parse_with_values": "select Nominee from musical group by Nominee having count ( * ) > 1"
    },
    {
        "question": "What are the different names of all songs without back vocals ?",
        "db_id": "music_2",
        "gold_parse": "SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  \"back\"",
        "predicted_parse_with_values": "select T2.Title from Vocals as T1 join Songs as T2 on T1.SongId = T2.SongId where T1.Type = \"dummy value\""
    },
    {
        "question": "what is the city with the smallest population",
        "db_id": "geo",
        "gold_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MIN ( population ) FROM city )",
        "predicted_parse_with_values": "select city_name from city order by population limit 1"
    },
    {
        "question": "Find the name of the department that has the fewest members .",
        "db_id": "college_3",
        "gold_parse": "SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MEMBER_OF AS T2 ON T1.DNO  =  T2.DNO GROUP BY T2.DNO ORDER BY count(*) ASC LIMIT 1",
        "predicted_parse_with_values": "select DName from Department group by DName order by count ( * ) limit 1"
    },
    {
        "question": "what rivers run through illinois",
        "db_id": "geo",
        "gold_parse": "SELECT river_name FROM river WHERE traverse  =  \"illinois\"",
        "predicted_parse_with_values": "select T1.river_name from river as T1 join state as T2 on T1.traverse = T2.state_name where T2.area = \"dummy value\""
    },
    {
        "question": "how many states border the largest state",
        "db_id": "geo",
        "gold_parse": "SELECT COUNT ( border ) FROM border_info WHERE state_name  =  ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) )",
        "predicted_parse_with_values": "select count ( * ) from state order by density desc limit 1"
    },
    {
        "question": "which rivers flow through illinois",
        "db_id": "geo",
        "gold_parse": "SELECT river_name FROM river WHERE traverse  =  \"illinois\"",
        "predicted_parse_with_values": "select T1.river_name from river as T1 join state as T2 on T1.traverse = T2.state_name where T2.area = \"dummy value\""
    },
    {
        "question": "Show all flight number from Los Angeles .",
        "db_id": "flight_1",
        "gold_parse": "SELECT flno FROM Flight WHERE origin  =  \"Los Angeles\"",
        "predicted_parse_with_values": "select flno from flight where destination = \"Sydney\""
    },
    {
        "question": "Show the ids for all the faculty members who have at least 2 students .",
        "db_id": "activity_1",
        "gold_parse": "SELECT T1.FacID FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID HAVING count(*)  >=  2",
        "predicted_parse_with_values": "select T5.FacID from Student as T1 join Participates_in as T2 on T1.StuID = T2.stuid join Activity as T3 on T2.actid = T3.actid join Faculty_Participates_in as T4 on T3.actid = T4.actid join Faculty as T5 on T4.FacID = T5.FacID group by T5.FacID having count ( * ) >= 1"
    },
    {
        "question": "What is the average age and how many male students are there in each city ?",
        "db_id": "dorm_1",
        "gold_parse": "SELECT count(*) ,  avg(age) ,  city_code FROM student WHERE sex  =  'M' GROUP BY city_code",
        "predicted_parse_with_values": "select avg ( T1.Age ) , T1.city_code from Student as T1 join Lives_in as T2 on T1.StuID = T2.stuid join Dorm as T3 on T2.dormid = T3.dormid where T3.gender = \"X\" group by T1.city_code"
    },
    {
        "question": "What is the total number of postseason games that team Boston Red Stockings participated in ?",
        "db_id": "baseball_1",
        "gold_parse": "SELECT count(*) FROM ( SELECT * FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' UNION SELECT * FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_loser  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' )",
        "predicted_parse_with_values": "select count ( T1.wins ) from postseason as T1 join team_franchise as T2 where T2.franchise_name = \"Newark Pepper\""
    },
    {
        "question": "Show student ids who are female and play football .",
        "db_id": "game_1",
        "gold_parse": "SELECT StuID FROM Student WHERE sex  =  'F' INTERSECT SELECT StuID FROM Sportsinfo WHERE sportname  =  \"Football\"",
        "predicted_parse_with_values": "select T3.StuID from SportsInfo as T1 join Student as T2 on T1.StuID = T2.StuID join Plays_Games as T3 on T2.StuID = T3.StuID where T2.Sex = \"M\" and T1.SportName = \"Basketball\""
    },
    {
        "question": "Find the name and budget of the latest movie by \" Quentin Tarantino \"",
        "db_id": "imdb",
        "gold_parse": "SELECT t3.budget  ,  t3.title FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.name  =  \"Quentin Tarantino\" ORDER BY t3.release_year DESC LIMIT 1",
        "predicted_parse_with_values": "select T2.title , T2.budget from actor as T1 join movie as T2 where T1.name = \"dummy value\" order by T2.budget desc limit 1"
    },
    {
        "question": "what is the area of the smallest state",
        "db_id": "geo",
        "gold_parse": "SELECT area FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state )",
        "predicted_parse_with_values": "select area from state order by density limit 1"
    },
    {
        "question": "what are the highest points of all the states",
        "db_id": "geo",
        "gold_parse": "SELECT highest_point FROM highlow",
        "predicted_parse_with_values": "select max ( highest_point ) from highlow"
    },
    {
        "question": "Find the emails of customers who has filed a complaints of the product with the most complaints .",
        "db_id": "customer_complaints",
        "gold_parse": "SELECT t1.email_address FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_id ORDER BY count(*) LIMIT 1",
        "predicted_parse_with_values": "select T1.email_address from Customers as T1 join Complaints as T2 on T1.customer_id = T2.customer_id join Products as T3 on T2.product_id = T3.product_id where T3.product_name = ( select product_id from Complaints group by product_id order by count ( * ) desc limit 1 )"
    },
    {
        "question": "What is the last name of the youngest student ?",
        "db_id": "allergy_1",
        "gold_parse": "SELECT LName FROM Student WHERE age  =  (SELECT min(age) FROM Student)",
        "predicted_parse_with_values": "select LName from Student order by Age limit 1"
    },
    {
        "question": "How many students are affected by cat allergies ?",
        "db_id": "allergy_1",
        "gold_parse": "SELECT count(*) FROM Has_allergy WHERE Allergy  =  \"Cat\"",
        "predicted_parse_with_values": "select count ( * ) from Allergy_Type as T1 join Has_Allergy as T2 on T1.Allergy = T2.Allergy join Student as T3 on T2.StuID = T3.StuID where T1.Allergytype = \"environmental\""
    },
    {
        "question": "For each branch id , what are the names of the branches that were registered after 2015 ?",
        "db_id": "shop_membership",
        "gold_parse": "SELECT T2.name ,  count(*) FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.register_year  >  2015 GROUP BY T2.branch_id",
        "predicted_parse_with_values": "select T2.Name , T2.Branch_ID from membership_register_branch as T1 join branch as T2 on T1.Branch_ID = T2.Branch_ID where T1.Register_Year > 2016"
    },
    {
        "question": "What are the id and address of the shops which have a happy hour in May ?",
        "db_id": "coffee_shop",
        "gold_parse": "SELECT t1.address ,  t1.shop_id FROM shop AS t1 JOIN happy_hour AS t2 ON t1.shop_id  =  t2.shop_id WHERE MONTH  =  'May'",
        "predicted_parse_with_values": "select T2.Shop_ID , T2.Address from happy_hour as T1 join shop as T2 on T1.Shop_ID = T2.Shop_ID where T1.Month like \"April\""
    },
    {
        "question": "Find the claim id and claim date of the claim that incurred the most settlement count . Also tell me the count .",
        "db_id": "insurance_policies",
        "gold_parse": "SELECT T1.claim_id ,  T1.date_claim_made ,  count(*) FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id  =  T2.claim_id GROUP BY T1.claim_id ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select Claim_ID , Date_Claim_Made from Claims group by Claim_ID order by count ( * ) desc limit 1"
    },
    {
        "question": "What are the student IDs for everybody who worked for more than 10 hours per week on all sports ?",
        "db_id": "game_1",
        "gold_parse": "SELECT StuID FROM Sportsinfo GROUP BY StuID HAVING sum(hoursperweek)  >  10",
        "predicted_parse_with_values": "select T2.StuID from SportsInfo as T1 join Student as T2 on T1.StuID = T2.StuID where T1.HoursPerWeek > 29"
    },
    {
        "question": "how many rivers are there in us",
        "db_id": "geo",
        "gold_parse": "SELECT COUNT ( river_name ) FROM river",
        "predicted_parse_with_values": "select count ( * ) from river as T1 join state as T2 on T1.traverse = T2.state_name where T2.country_name = \"dummy value\""
    },
    {
        "question": "what is the state with the lowest point",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM highlow WHERE lowest_elevation  =  ( SELECT MIN ( lowest_elevation ) FROM highlow )",
        "predicted_parse_with_values": "select T1.state_name from state as T1 join highlow as T2 on T1.state_name = T2.state_name order by T2.lowest_point limit 1"
    },
    {
        "question": "How many movies did \" Humphrey Bogart \" act in before 1942 ?",
        "db_id": "imdb",
        "gold_parse": "SELECT COUNT ( DISTINCT t2.title  ) FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  \"Humphrey Bogart\" AND t2.release_year  <  1942",
        "predicted_parse_with_values": "select count ( * ) from actor as T1 join movie as T2 where T1.name = \"dummy value\" and T1.birth_year < \"dummy value\""
    },
    {
        "question": "how many rivers are called colorado",
        "db_id": "geo",
        "gold_parse": "SELECT COUNT ( river_name ) FROM river WHERE river_name  =  \"colorado\"",
        "predicted_parse_with_values": "select count ( * ) from river where river_name = \"dummy value\""
    },
    {
        "question": "Show the number of buildings with a height above the average or a number of floors above the average .",
        "db_id": "protein_institute",
        "gold_parse": "SELECT count(*) FROM building WHERE height_feet  >  (SELECT avg(height_feet) FROM building) OR floors  >  (SELECT avg(floors) FROM building)",
        "predicted_parse_with_values": "select count ( * ) from building where Height_feet > ( select avg ( Floors ) from building ) or Height_feet >= 537"
    },
    {
        "question": "What is the budget type code with most number of documents .",
        "db_id": "cre_Docs_and_Epenses",
        "gold_parse": "SELECT budget_type_code FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select T1.Budget_Type_Code from Ref_Budget_Codes as T1 join Documents_with_Expenses as T2 on T1.Budget_Type_Code = T2.Budget_Type_Code join Documents as T3 on T2.Document_ID = T3.Document_ID group by T3.Document_Type_Code order by count ( * ) desc limit 1"
    },
    {
        "question": "name the longest river in us",
        "db_id": "geo",
        "gold_parse": "SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river )",
        "predicted_parse_with_values": "select T1.river_name from river as T1 join state as T2 on T1.traverse = T2.state_name where T2.country_name = \"dummy value\" order by T1.length desc limit 1"
    },
    {
        "question": "return me the authors who have papers in VLDB conference in 2002 .",
        "db_id": "academic",
        "gold_parse": "SELECT t1.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"VLDB\" AND t4.year  =  2002",
        "predicted_parse_with_values": "select T3.pid from conference as T1 join publication as T2 on T1.cid = T2.cid join writes as T3 on T2.pid = T3.pid where T1.name = \"dummy value\" and T2.year = \"dummy value\""
    },
    {
        "question": "Give the full name and staff id of the staff who has handled the fewest payments .",
        "db_id": "sakila_1",
        "gold_parse": "SELECT T1.first_name ,  T1.last_name ,  T1.staff_id FROM staff AS T1 JOIN payment AS T2 ON T1.staff_id  =  T2.staff_id GROUP BY T1.staff_id ORDER BY count(*) ASC LIMIT 1",
        "predicted_parse_with_values": "select T2.first_name , T2.last_name , T1.staff_id from payment as T1 join staff as T2 on T1.staff_id = T2.staff_id group by T1.staff_id order by count ( * ) limit 1"
    },
    {
        "question": "How many employees does each role have ? List role description , id and number of employees .",
        "db_id": "cre_Doc_Control_Systems",
        "gold_parse": "SELECT T1.role_description ,  T2.role_code ,  count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code",
        "predicted_parse_with_values": "select role_code , employee_id , count ( * ) from Employees group by role_code"
    },
    {
        "question": "Show all the buildings along with the number of faculty members the buildings have .",
        "db_id": "activity_1",
        "gold_parse": "SELECT building ,  count(*) FROM Faculty GROUP BY building",
        "predicted_parse_with_values": "select Building , count ( * ) from Faculty group by Building"
    },
    {
        "question": "What is the average minimum and price of the rooms for each different decor .",
        "db_id": "inn_1",
        "gold_parse": "SELECT decor , avg(basePrice) ,  min(basePrice) FROM Rooms GROUP BY decor",
        "predicted_parse_with_values": "select avg ( basePrice ) , min ( basePrice ) , decor from Rooms group by decor"
    },
    {
        "question": "Find the name and total checking and savings balance of the accounts whose savings balance is lower than corresponding checking balance .",
        "db_id": "small_bank_1",
        "gold_parse": "SELECT T1.name ,  T3.balance + T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  <  T2.balance",
        "predicted_parse_with_values": "select T2.name , sum ( T1.balance ) , sum ( T3.balance ) from SAVINGS as T1 join ACCOUNTS as T2 on T1.custid = T2.custid join CHECKING as T3 on T2.custid = T3.custid where T3.balance < ( select min ( balance ) from SAVINGS )"
    },
    {
        "question": "What are the names of rooms that have either king or queen bed ?",
        "db_id": "inn_1",
        "gold_parse": "SELECT roomName FROM Rooms WHERE bedType  =  \"King\" OR bedType  =  \"Queen\"",
        "predicted_parse_with_values": "select roomName from Rooms where beds = 2 or beds = 1"
    },
    {
        "question": "List ids for all student who are on scholarship .",
        "db_id": "game_1",
        "gold_parse": "SELECT StuID FROM Sportsinfo WHERE onscholarship  =  'Y'",
        "predicted_parse_with_values": "select StuID from Student"
    },
    {
        "question": "Which artist has the most albums ?",
        "db_id": "chinook_1",
        "gold_parse": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId GROUP BY T2.Name ORDER BY COUNT(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select T1.Name from Artist as T1 join Album as T2 on T1.ArtistId = T2.ArtistId group by T2.ArtistId order by count ( * ) desc limit 1"
    },
    {
        "question": "How many different professors are there for the different schools ?",
        "db_id": "college_1",
        "gold_parse": "SELECT count(*) ,  T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.school_code",
        "predicted_parse_with_values": "select count ( PROF_OFFICE ) , count ( PROF_OFFICE ) from PROFESSOR"
    },
    {
        "question": "what is the biggest city in usa",
        "db_id": "geo",
        "gold_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city )",
        "predicted_parse_with_values": "select T1.city_name from city as T1 join state as T2 on T1.state_name = T2.state_name where T2.country_name = \"dummy value\" order by T1.population desc limit 1"
    },
    {
        "question": "how many states are there in united states",
        "db_id": "geo",
        "gold_parse": "SELECT COUNT ( state_name ) FROM state",
        "predicted_parse_with_values": "select count ( * ) from state where country_name = \"dummy value\""
    },
    {
        "question": "List the names of buildings with at least 200 feet of height and with at least 20 floors .",
        "db_id": "protein_institute",
        "gold_parse": "SELECT name FROM building WHERE height_feet  >=  200 AND floors  >=  20",
        "predicted_parse_with_values": "select Name from building where Height_feet >= 579 intersect select Name from building where Height_feet >= 458"
    },
    {
        "question": "Give the names of mountains in alphabetical order .",
        "db_id": "climbing",
        "gold_parse": "SELECT Name FROM mountain ORDER BY Name ASC",
        "predicted_parse_with_values": "select Name from mountain order by Name"
    },
    {
        "question": "where is the lowest spot in iowa",
        "db_id": "geo",
        "gold_parse": "SELECT lowest_point FROM highlow WHERE state_name  =  \"iowa\"",
        "predicted_parse_with_values": "select T1.area from state as T1 join highlow as T2 on T1.state_name = T2.state_name where T2.lowest_elevation != \"dummy value\" order by T2.lowest_point limit 1"
    },
    {
        "question": "what is the shortest river in texas",
        "db_id": "geo",
        "gold_parse": "SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MIN ( LENGTH ) FROM river WHERE traverse  =  \"texas\" ) AND traverse  =  \"texas\"",
        "predicted_parse_with_values": "select river_name from river where length = \"dummy value\" order by length limit 1"
    },
    {
        "question": "Show names of companies and that of employees in descending order of number of years working for that employee .",
        "db_id": "company_employee",
        "gold_parse": "SELECT T3.Name ,  T2.Name FROM employment AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID JOIN company AS T3 ON T1.Company_ID  =  T3.Company_ID ORDER BY T1.Year_working",
        "predicted_parse_with_values": "select T1.Name , T2.Year_working from company as T1 join employment as T2 on T1.Company_ID = T2.Company_ID order by T2.Year_working desc"
    },
    {
        "question": "return me the papers by \" H. V. Jagadish \" on PVLDB .",
        "db_id": "academic",
        "gold_parse": "SELECT t4.title FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" AND t2.name  =  \"PVLDB\"",
        "predicted_parse_with_values": "select T1.jid from publication as T1 join writes as T2 on T1.pid = T2.pid join author as T3 on T2.aid = T3.aid where T3.name = \"dummy value\" and T3.name = \"dummy value\""
    },
    {
        "question": "where are mountains",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM mountain",
        "predicted_parse_with_values": "select mountain_name from mountain"
    },
    {
        "question": "what state that borders oklahoma has the highest population",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"oklahoma\" ) ORDER BY population DESC LIMIT 1",
        "predicted_parse_with_values": "select T1.state_name from border_info as T1 join state as T2 on T1.border = T2.state_name where T1.border = \"dummy value\" order by T2.population desc limit 1"
    },
    {
        "question": "What are the full names of customers who do not have any accounts ?",
        "db_id": "customers_card_transactions",
        "gold_parse": "SELECT customer_first_name ,  customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id",
        "predicted_parse_with_values": "select customer_first_name , customer_last_name from Customers where customer_id not in ( select customer_id from Accounts )"
    },
    {
        "question": "Find the total amount claimed in the most recently created document .",
        "db_id": "insurance_and_eClaims",
        "gold_parse": "SELECT sum(t1.amount_claimed) FROM claim_headers AS t1 JOIN claims_documents AS t2 ON t1.claim_header_id  =  t2.claim_id WHERE t2.created_date  =  (SELECT created_date FROM claims_documents ORDER BY created_date LIMIT 1)",
        "predicted_parse_with_values": "select sum ( Created_Date ) from Claims_Documents order by Created_Date desc limit 1"
    },
    {
        "question": "Show the game name that has most number of hours played .",
        "db_id": "game_1",
        "gold_parse": "SELECT gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid  =  T2.gameid GROUP BY T1.gameid ORDER BY sum(hours_played) DESC LIMIT 1",
        "predicted_parse_with_values": "select T2.GName from Plays_Games as T1 join Video_Games as T2 on T1.GameID = T2.GameID order by T1.Hours_Played desc limit 1"
    },
    {
        "question": "return me the number of papers on VLDB conference .",
        "db_id": "academic",
        "gold_parse": "SELECT COUNT ( DISTINCT t2.title ) FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\"",
        "predicted_parse_with_values": "select count ( T2.jid ) from conference as T1 join publication as T2 on T1.cid = T2.cid where T1.name = \"dummy value\""
    },
    {
        "question": "Who was the actor that played \" Alan Turing \" in the movie \" The Imitation Game \" ?",
        "db_id": "imdb",
        "gold_parse": "SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t2.role  =  \"Alan Turing\" AND t3.title  =  \"The Imitation Game\"",
        "predicted_parse_with_values": "select T1.name from actor as T1 join movie as T2 where T2.title = \"dummy value\""
    },
    {
        "question": "what river traverses the most states",
        "db_id": "geo",
        "gold_parse": "SELECT river_name FROM river GROUP BY ( river_name ) ORDER BY COUNT ( DISTINCT traverse ) DESC LIMIT 1",
        "predicted_parse_with_values": "select traverse from river group by river_name order by count ( * ) desc limit 1"
    },
    {
        "question": "How many draft copies does the document with id 2 have ?",
        "db_id": "cre_Doc_Control_Systems",
        "gold_parse": "SELECT count(*) FROM Draft_Copies WHERE document_id = 2",
        "predicted_parse_with_values": "select count ( * ) from Document_Drafts as T1 join Draft_Copies as T2 on T1.document_id = T2.document_id where T2.document_id = 4"
    },
    {
        "question": "return me the number of papers in PVLDB after 2000 in \" University of Michigan \" .",
        "db_id": "academic",
        "gold_parse": "SELECT COUNT ( DISTINCT t5.title ) FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t4 ON t4.aid  =  t1.aid JOIN publication AS t5 ON t4.pid  =  t5.pid JOIN journal AS t3 ON t5.jid  =  t3.jid WHERE t3.name  =  \"PVLDB\" AND t2.name  =  \"University of Michigan\" AND t5.year  >  2000",
        "predicted_parse_with_values": "select count ( pid ) from publication where year > \"dummy value\" and year > \"dummy value\""
    },
    {
        "question": "Count the number of colors that are not used in any products .",
        "db_id": "products_gen_characteristics",
        "gold_parse": "SELECT count(*) FROM Ref_colors WHERE color_code NOT IN ( SELECT color_code FROM products )",
        "predicted_parse_with_values": "select count ( * ) from Products as T1 join Ref_Colors as T2 on T1.color_code = T2.color_code where T1.product_id not in ( select color_code from Products )"
    },
    {
        "question": "Show ids , first names , last names , and phones for all customers .",
        "db_id": "customers_card_transactions",
        "gold_parse": "SELECT customer_id ,  customer_first_name ,  customer_last_name ,  customer_phone FROM Customers",
        "predicted_parse_with_values": "select customer_id , customer_first_name , customer_phone , customer_phone from Customers"
    },
    {
        "question": "return me the number of papers in VLDB conference containing keyword \" Information Retrieval \" .",
        "db_id": "academic",
        "gold_parse": "SELECT COUNT ( DISTINCT t4.title ) FROM publication_keyword AS t3 JOIN keyword AS t1 ON t3.kid  =  t1.kid JOIN publication AS t4 ON t4.pid  =  t3.pid JOIN conference AS t2 ON t4.cid  =  t2.cid WHERE t2.name  =  \"VLDB\" AND t1.keyword  =  \"Information Retrieval\"",
        "predicted_parse_with_values": "select count ( T2.homepage ) from organization as T1 join conference as T2 join keyword as T3 where T3.keyword = \"dummy value\" and T1.name = \"dummy value\""
    },
    {
        "question": "Find the checking balance and saving balance in the Brown \u2019 s account .",
        "db_id": "small_bank_1",
        "gold_parse": "SELECT T2.balance ,  T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T1.name  =  'Brown'",
        "predicted_parse_with_values": "select T1.balance , T1.balance from CHECKING as T1 join ACCOUNTS as T2 on T1.custid = T2.custid where T2.name = \"Weeks\""
    },
    {
        "question": "Which students study under the teacher named OTHA MOYER ? Give me the first and last names of the students .",
        "db_id": "student_1",
        "gold_parse": "SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"OTHA\" AND T2.lastname  =  \"MOYER\"",
        "predicted_parse_with_values": "select T2.FirstName , T1.LastName from teachers as T1 join list as T2 where T1.FirstName = \" MIN\" and T1.LastName = \"SUGAI\""
    },
    {
        "question": "What are the region names affected by the storm with a number of deaths of least 10 ?",
        "db_id": "storm_record",
        "gold_parse": "SELECT T2.region_name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T3.number_deaths  >=  10",
        "predicted_parse_with_values": "select Region_name from region group by Region_name having count ( * ) >= 1"
    },
    {
        "question": "Count the number of games taken place in park \" Columbia Park \" in 1907 .",
        "db_id": "baseball_1",
        "gold_parse": "SELECT count(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year = 1907 AND T2.park_name = 'Columbia Park'",
        "predicted_parse_with_values": "select count ( T2.city ) from home_game as T1 join park as T2 on T1.park_id = T2.park_id where T2.city = \"Bloomington\" and T1.year = 2003"
    },
    {
        "question": "what state has the highest population density",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM state WHERE density  =  ( SELECT MAX ( density ) FROM state )",
        "predicted_parse_with_values": "select state_name from state order by density desc limit 1"
    },
    {
        "question": "What are the bed type and name of all the rooms with traditional decor ?",
        "db_id": "inn_1",
        "gold_parse": "SELECT roomName ,  bedType FROM Rooms WHERE decor = \"traditional\"",
        "predicted_parse_with_values": "select bedType , roomName from Rooms where decor = \"rustic\""
    },
    {
        "question": "Find the grade taught in classroom 103 .",
        "db_id": "student_1",
        "gold_parse": "SELECT DISTINCT grade FROM list WHERE classroom  =  103",
        "predicted_parse_with_values": "select T2.Grade from teachers as T1 join list as T2 where T1.Classroom = 103"
    },
    {
        "question": "what are the major cities in the smallest state in the us",
        "db_id": "geo",
        "gold_parse": "SELECT city_name FROM city WHERE population  >  150000 AND state_name  =  ( SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state ) )",
        "predicted_parse_with_values": "select T2.capital from city as T1 join state as T2 on T1.state_name = T2.state_name where T1.state_name = \"dummy value\" order by T2.density limit 1"
    },
    {
        "question": "what is the population of the state with the highest population density",
        "db_id": "geo",
        "gold_parse": "SELECT population FROM state WHERE density  =  ( SELECT MAX ( density ) FROM state )",
        "predicted_parse_with_values": "select population from state order by density desc limit 1"
    },
    {
        "question": "What are the statement ids , statement details , and account details , for all accounts ?",
        "db_id": "cre_Docs_and_Epenses",
        "gold_parse": "SELECT T1.statement_id ,  T2.statement_details ,  T1.account_details FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id  =  T2.statement_id",
        "predicted_parse_with_values": "select T1.Statement_ID , T1.Statement_Details , T2.Account_Details from Statements as T1 join Accounts as T2 on T1.Statement_ID = T2.Statement_ID"
    },
    {
        "question": "Count the number of players who were born in USA and have bats information ' R ' .",
        "db_id": "baseball_1",
        "gold_parse": "SELECT count(*) FROM player WHERE birth_country = 'USA' AND bats  =  'R'",
        "predicted_parse_with_values": "select count ( * ) from player where birth_country = \"Cuba\" and birth_year = 1857"
    },
    {
        "question": "which gender got the highest average uncertain ratio .",
        "db_id": "candidate_poll",
        "gold_parse": "SELECT t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex ORDER BY avg(t2.unsure_rate) DESC LIMIT 1",
        "predicted_parse_with_values": "select T1.Sex from people as T1 join candidate as T2 on T1.People_ID = T2.People_ID group by T1.Sex order by avg ( T2.Consider_rate ) desc limit 1"
    },
    {
        "question": "Find the distinct last names of the students who have class president votes .",
        "db_id": "voter_2",
        "gold_parse": "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.CLASS_President_VOTE",
        "predicted_parse_with_values": "select T2.LName from Voting_record as T1 join Student as T2 on T1.Class_Senator_Vote = T2.StuID where T1.Class_Senator_Vote = 1028"
    },
    {
        "question": "What are the titles of papers published by \" Jeremy Gibbons \" ?",
        "db_id": "icfp_1",
        "gold_parse": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Jeremy\" AND t1.lname  =  \"Gibbons\"",
        "predicted_parse_with_values": "select T3.title from Authors as T1 join Authorship as T2 on T1.authID = T2.authID join Papers as T3 on T2.paperID = T3.paperID where T1.fname = \"Olin\""
    },
    {
        "question": "what are the major cities of the united states",
        "db_id": "geo",
        "gold_parse": "SELECT city_name FROM city WHERE population  >  150000",
        "predicted_parse_with_values": "select T2.capital from city as T1 join state as T2 on T1.state_name = T2.state_name where T1.state_name = \"dummy value\""
    },
    {
        "question": "What are the distinct first names of the students who have vice president votes and reside in a city whose city code is not PIT ?",
        "db_id": "voter_2",
        "gold_parse": "SELECT DISTINCT T1.Fname FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_PRESIDENT_Vote EXCEPT SELECT DISTINCT Fname FROM STUDENT WHERE city_code  =  \"PIT\"",
        "predicted_parse_with_values": "select T2.Fname from Voting_record as T1 join Student as T2 on T1.Class_Senator_Vote = T2.StuID where T1.President_Vote = 1004 and T2.city_code != \"LON\""
    },
    {
        "question": "list the states",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM state",
        "predicted_parse_with_values": "select state_name from state"
    },
    {
        "question": "Find all the zip codes in which the max dew point have never reached 70 .",
        "db_id": "bike_1",
        "gold_parse": "SELECT DISTINCT zip_code FROM weather EXCEPT SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f  >=  70",
        "predicted_parse_with_values": "select zip_code from weather where max_dew_point_f != 68"
    },
    {
        "question": "Show the years , book titles , and publishers for all books , in descending order by year .",
        "db_id": "culture_company",
        "gold_parse": "SELECT YEAR ,  book_title ,  publisher FROM book_club ORDER BY YEAR DESC",
        "predicted_parse_with_values": "select T3.Year , T3.Title , T3.Title from book_club as T1 join culture_company as T2 on T1.book_club_id = T2.book_club_id join movie as T3 on T2.movie_id = T3.movie_id order by T1.Publisher desc"
    },
    {
        "question": "return me the author who has the most number of papers in the VLDB conference .",
        "db_id": "academic",
        "gold_parse": "SELECT t1.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"VLDB\" GROUP BY t1.name ORDER BY COUNT ( DISTINCT t4.title ) DESC LIMIT 1",
        "predicted_parse_with_values": "select count ( T4.name ) from conference as T1 join publication as T2 on T1.cid = T2.cid join writes as T3 on T2.pid = T3.pid join author as T4 on T3.aid = T4.aid where T1.name = \"dummy value\" group by T4.name order by count ( T1.name ) desc limit 1"
    },
    {
        "question": "What are the total number of students enrolled in ACCT-211 ?",
        "db_id": "college_1",
        "gold_parse": "SELECT count(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code WHERE T1.crs_code  =  'ACCT-211'",
        "predicted_parse_with_values": "select count ( * ) from STUDENT as T1 join ENROLL as T2 on T1.STU_NUM = T2.STU_NUM where T2.CLASS_CODE = 10021"
    },
    {
        "question": "list the names of the companies with more than 200 sales in the descending order of sales and profits .",
        "db_id": "company_employee",
        "gold_parse": "SELECT name FROM company WHERE Sales_in_Billion  >  200 ORDER BY Sales_in_Billion ,  Profits_in_Billion DESC",
        "predicted_parse_with_values": "select Name , Profits_in_Billion from company where Sales_in_Billion > 310.1 order by Profits_in_Billion desc"
    },
    {
        "question": "What are the names of the different customers who have taken out a loan , ordered by the total amount that they have taken ?",
        "db_id": "loan_1",
        "gold_parse": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount)",
        "predicted_parse_with_values": "select T3.cust_name , sum ( T1.amount ) from loan as T1 join bank as T2 on T1.branch_ID = T2.branch_ID join customer as T3 on T2.branch_ID = T3.branch_ID group by T1.cust_ID order by sum ( T1.amount )"
    },
    {
        "question": "Which building has most faculty members ?",
        "db_id": "activity_1",
        "gold_parse": "SELECT building FROM Faculty GROUP BY building ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select Building from Faculty group by Building order by count ( * ) desc limit 1"
    },
    {
        "question": "what is the shortest river",
        "db_id": "geo",
        "gold_parse": "SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MIN ( LENGTH ) FROM river )",
        "predicted_parse_with_values": "select river_name from river order by length limit 1"
    },
    {
        "question": "Find the distinct first names of all the students who have vice president votes and whose city code is not PIT .",
        "db_id": "voter_2",
        "gold_parse": "SELECT DISTINCT T1.Fname FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_PRESIDENT_Vote EXCEPT SELECT DISTINCT Fname FROM STUDENT WHERE city_code  =  \"PIT\"",
        "predicted_parse_with_values": "select T2.Fname from Voting_record as T1 join Student as T2 on T1.Class_Senator_Vote = T2.StuID where T1.Vice_President_Vote = 1017 and T2.city_code != \"BOS\""
    },
    {
        "question": "Find the captain rank that has some captains in both Cutter and Armed schooner classes .",
        "db_id": "ship_1",
        "gold_parse": "SELECT rank FROM captain WHERE CLASS  =  'Cutter' INTERSECT SELECT rank FROM captain WHERE CLASS  =  'Armed schooner'",
        "predicted_parse_with_values": "select Rank from captain where Class = \"Frigate\" intersect select T2.Rank from Ship as T1 join captain as T2 on T1.Ship_ID = T2.Ship_ID where T1.Type = \"Panamax\""
    },
    {
        "question": "Find the number of kids staying in the rooms reserved by a person called ROY SWEAZ .",
        "db_id": "inn_1",
        "gold_parse": "SELECT kids FROM Reservations WHERE FirstName = \"ROY\" AND LastName  =  \"SWEAZY\"",
        "predicted_parse_with_values": "select count ( * ) from Reservations where FirstName = \"LENNY\" and LastName = \"HANUS\""
    },
    {
        "question": "What is the name of the ship that is commanded by the youngest captain ?",
        "db_id": "ship_1",
        "gold_parse": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id ORDER BY t2.age LIMIT 1",
        "predicted_parse_with_values": "select T1.Name from Ship as T1 join captain as T2 on T1.Ship_ID = T2.Ship_ID order by T2.age desc limit 1"
    },
    {
        "question": "how many schools exist in total ?",
        "db_id": "college_1",
        "gold_parse": "SELECT count(DISTINCT school_code) FROM department",
        "predicted_parse_with_values": "select count ) ("
    },
    {
        "question": "What is the decor of room Recluse and defiance ?",
        "db_id": "inn_1",
        "gold_parse": "SELECT decor FROM Rooms WHERE roomName  =  \"Recluse and defiance\"",
        "predicted_parse_with_values": "select decor from Rooms where roomName = \"Immutable before decorum\" intersect select decor from Rooms where roomName = \"Recluse and defiance\""
    },
    {
        "question": "What is maximum group equity shareholding of the companies ?",
        "db_id": "flight_company",
        "gold_parse": "SELECT max(group_equity_shareholding) FROM operate_company",
        "predicted_parse_with_values": "select Group_Equity_Shareholding from operate_company group by Group_Equity_Shareholding order by count ( * ) desc limit 1"
    },
    {
        "question": "What is the name of the department htat has no students minoring in it ?",
        "db_id": "college_3",
        "gold_parse": "SELECT DName FROM DEPARTMENT EXCEPT SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO  =  T2.DNO",
        "predicted_parse_with_values": "select DName from Department where DName = \"English\" except select DName from Department"
    },
    {
        "question": "How many movies were produced in the year 2013 ?",
        "db_id": "imdb",
        "gold_parse": "SELECT COUNT ( DISTINCT title  ) FROM movie WHERE release_year  =  2013",
        "predicted_parse_with_values": "select count ( * ) from movie where release_year = \"dummy value\""
    },
    {
        "question": "Return the decor of the room named \" Recluse and defiance \" .",
        "db_id": "inn_1",
        "gold_parse": "SELECT decor FROM Rooms WHERE roomName  =  \"Recluse and defiance\"",
        "predicted_parse_with_values": "select decor from Rooms where roomName = \"Convoke and sanguine\" intersect select decor from Rooms where roomName = \"Riddle to exculpate\""
    },
    {
        "question": "What are the first names of all students who got a grade C in a class ?",
        "db_id": "college_1",
        "gold_parse": "SELECT DISTINCT stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE enroll_grade  =  'C'",
        "predicted_parse_with_values": "select T1.STU_FNAME from STUDENT as T1 join ENROLL as T2 on T1.STU_NUM = T2.STU_NUM where T2.ENROLL_GRADE = \"C\""
    },
    {
        "question": "What are the ids of all songs that have higher resolution of the average resolution in the modern genre ?",
        "db_id": "music_1",
        "gold_parse": "SELECT f_id FROM song WHERE resolution  >  (SELECT avg(resolution) FROM song WHERE genre_is  =  \"modern\")",
        "predicted_parse_with_values": "select f_id from song where resolution > ( select avg ( T1.resolution ) from song as T1 join genre as T2 on T1.genre_is = T2.g_name where T2.g_name = \"modern\" )"
    },
    {
        "question": "What is the number of students playing as a goalie ?",
        "db_id": "soccer_2",
        "gold_parse": "SELECT count(*) FROM tryout WHERE pPos  =  'goalie'",
        "predicted_parse_with_values": "select count ( * ) from Tryout where pPos = \"goalie\""
    },
    {
        "question": "Find the last name and age of the student who has allergy to both milk and cat .",
        "db_id": "allergy_1",
        "gold_parse": "SELECT lname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Milk\" INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Cat\")",
        "predicted_parse_with_values": "select T3.LName , T3.Age from Allergy_Type as T1 join Has_Allergy as T2 on T1.Allergy = T2.Allergy join Student as T3 on T2.StuID = T3.StuID where T1.Allergytype = \"food\" intersect select T6.LName , T6.Age from Allergy_Type as T4 join Has_Allergy as T5 on T4.Allergy = T5.Allergy join Student as T6 on T5.StuID = T6.StuID where T4.Allergytype = \"environmental\""
    },
    {
        "question": "Which service id and type has the least number of participants ?",
        "db_id": "local_govt_in_alabama",
        "gold_parse": "SELECT T3.service_id ,  T4.Service_Type_Code FROM participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID  =  T2.Participant_ID JOIN EVENTS AS T3 ON T2.Event_ID   =  T3.Event_ID JOIN services AS T4 ON T3.service_id  =  T4.service_id GROUP BY T3.service_id ORDER BY count(*) ASC LIMIT 1",
        "predicted_parse_with_values": "select Service_ID , Service_Type_Code from Services group by Service_ID order by count ( * ) limit 1"
    },
    {
        "question": "Find the first names and offices of all instructors who have taught some course and also find the course description .",
        "db_id": "college_1",
        "gold_parse": "SELECT T2.emp_fname ,  T4.prof_office ,  T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN professor AS T4 ON T2.emp_num  =  T4.emp_num",
        "predicted_parse_with_values": "select T1.EMP_FNAME , T4.PROF_OFFICE , T3.CRS_DESCRIPTION from EMPLOYEE as T1 join DEPARTMENT as T2 on T1.EMP_NUM = T2.EMP_NUM join COURSE as T3 on T2.DEPT_CODE = T3.DEPT_CODE join PROFESSOR as T4 on T1.EMP_NUM = T4.EMP_NUM where T3.CRS_CODE = \"CIS-220\""
    },
    {
        "question": "List the titles of the papers whose authors are from the institution \" Indiana University \" .",
        "db_id": "icfp_1",
        "gold_parse": "SELECT DISTINCT t1.title FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Indiana University\"",
        "predicted_parse_with_values": "select T3.title from Inst as T1 join Authorship as T2 on T1.instID = T2.instID join Papers as T3 on T2.paperID = T3.paperID where T1.name = \"INRIA\""
    },
    {
        "question": "Which teachers teach in classroom 109 ? Give me their last names .",
        "db_id": "student_1",
        "gold_parse": "SELECT lastname FROM teachers WHERE classroom  =  109",
        "predicted_parse_with_values": "select T2.LastName from list as T1 join teachers as T2 where T1.Classroom = 111"
    },
    {
        "question": "What is the name of the institution the author \" Katsuhiro Ueno \" belongs to ?",
        "db_id": "icfp_1",
        "gold_parse": "SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  \"Katsuhiro\" AND t1.lname  =  \"Ueno\"",
        "predicted_parse_with_values": "select T3.name from Authors as T1 join Authorship as T2 on T1.authID = T2.authID join Inst as T3 on T2.instID = T3.instID where T1.fname = \"Olin\""
    },
    {
        "question": "what are the biggest rivers in texas",
        "db_id": "geo",
        "gold_parse": "SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river WHERE traverse  =  \"texas\" ) AND traverse  =  \"texas\"",
        "predicted_parse_with_values": "select T1.river_name from river as T1 join state as T2 on T1.traverse = T2.state_name where T2.state_name = \"dummy value\" order by T2.density desc limit 1"
    },
    {
        "question": "Find number of products which Sony does not make .",
        "db_id": "manufactory_1",
        "gold_parse": "SELECT count(DISTINCT name) FROM products WHERE name NOT IN (SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Sony')",
        "predicted_parse_with_values": "select count ( * ) from Manufacturers where Name = \"Fujitsu\""
    },
    {
        "question": "Find the names and descriptions of the photos taken at the tourist attraction called \" film festival \" .",
        "db_id": "cre_Theme_park",
        "gold_parse": "SELECT T1.Name ,  T1.Description FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID WHERE T2.Name  =  \"film festival\"",
        "predicted_parse_with_values": "select T1.Name , T2.Description from Photos as T1 join Tourist_Attractions as T2 on T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID where T2.Name = \"exploration trial\""
    },
    {
        "question": "Find the name of amenity that is most common in all dorms .",
        "db_id": "dorm_1",
        "gold_parse": "SELECT T1.amenity_name FROM dorm_amenity AS T1 JOIN has_amenity AS T2 ON T1.amenid  =  T2.amenid GROUP BY T2.amenid ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select amenity_name from Dorm_amenity group by amenity_name order by count ( * ) desc limit 1"
    },
    {
        "question": "Return the number of kids for the room reserved and checked in by DAMIEN TRACHSEL on Sep 21 , 2010 .",
        "db_id": "inn_1",
        "gold_parse": "SELECT Kids FROM Reservations WHERE CheckIn  =  \"2010-09-21\" AND FirstName  =  \"DAMIEN\" AND LastName  =  \"TRACHSEL\"",
        "predicted_parse_with_values": "select count ( * ) from Reservations where FirstName = \"KELLY\" and LastName = \"CORSARO\" and LastName = \"JAHR\""
    },
    {
        "question": "Find the average age of the students who have allergies with food and animal types .",
        "db_id": "allergy_1",
        "gold_parse": "SELECT avg(age) FROM Student WHERE StuID IN ( SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\" INTERSECT SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"animal\")",
        "predicted_parse_with_values": "select avg ( T3.Age ) from Allergy_Type as T1 join Has_Allergy as T2 on T1.Allergy = T2.Allergy join Student as T3 on T2.StuID = T3.StuID where T1.Allergytype = \"environmental\" and T1.Allergytype = \"animal\""
    },
    {
        "question": "Which room has cheapest base price ? List the room 's name and the base price .",
        "db_id": "inn_1",
        "gold_parse": "SELECT roomName ,  basePrice FROM Rooms ORDER BY basePrice ASC LIMIT 1",
        "predicted_parse_with_values": "select roomName , basePrice from Rooms order by basePrice limit 1"
    },
    {
        "question": "Give me the times and numbers of all trains that go to Chennai , ordered by time .",
        "db_id": "station_weather",
        "gold_parse": "SELECT TIME ,  train_number FROM train WHERE destination  =  'Chennai' ORDER BY TIME",
        "predicted_parse_with_values": "select time , train_number from train where destination = \"Kanniyakumari\" order by train_number"
    },
    {
        "question": "Show the names of journalists that have reported more than one event .",
        "db_id": "news_report",
        "gold_parse": "SELECT T3.Name FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID  =  T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID  =  T3.journalist_ID GROUP BY T3.Name HAVING COUNT(*)  >  1",
        "predicted_parse_with_values": "select T2.Name from news_report as T1 join journalist as T2 on T1.journalist_ID = T2.journalist_ID group by T1.journalist_ID having count ( * ) > 1"
    },
    {
        "question": "Find the name and id of the top 3 expensive rooms .",
        "db_id": "inn_1",
        "gold_parse": "SELECT RoomId ,  roomName FROM Rooms ORDER BY basePrice DESC LIMIT 3",
        "predicted_parse_with_values": "select roomName , RoomId from Rooms order by basePrice desc limit 1"
    },
    {
        "question": "What are the names of staff who have been assigned multiple jobs ?",
        "db_id": "department_store",
        "gold_parse": "SELECT T1.staff_name FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id GROUP BY T2.staff_id HAVING COUNT (*)  >  1",
        "predicted_parse_with_values": "select staff_name from Staff group by staff_name having count ( * ) = 1"
    },
    {
        "question": "How many different classes are there ?",
        "db_id": "college_1",
        "gold_parse": "SELECT count(DISTINCT class_code) FROM CLASS",
        "predicted_parse_with_values": "select count ( ( ) )"
    },
    {
        "question": "List three countries which are the origins of the least players .",
        "db_id": "baseball_1",
        "gold_parse": "SELECT birth_country FROM player GROUP BY birth_country ORDER BY count(*) ASC LIMIT 3",
        "predicted_parse_with_values": "select T2.birth_country from postseason as T1 join player as T2 order by T1.losses limit 1"
    },
    {
        "question": "What are the emails and phone numbers of custoemrs who have never filed a complaint ?",
        "db_id": "customer_complaints",
        "gold_parse": "SELECT email_address ,  phone_number FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM complaints)",
        "predicted_parse_with_values": "select T1.email_address , T3.phone_number from Customers as T1 join Complaints as T2 on T1.customer_id = T2.customer_id join Staff as T3 on T2.staff_id = T3.staff_id where T1.email_address not in ( select product_id from Complaints )"
    },
    {
        "question": "what are the major rivers in illinois",
        "db_id": "geo",
        "gold_parse": "SELECT river_name FROM river WHERE LENGTH  >  750 AND traverse  =  \"illinois\"",
        "predicted_parse_with_values": "select T1.river_name from river as T1 join state as T2 on T1.traverse = T2.state_name where T2.state_name = \"dummy value\""
    },
    {
        "question": "Show the distinct position of players from college UCLA or Duke .",
        "db_id": "match_season",
        "gold_parse": "SELECT DISTINCT POSITION FROM match_season WHERE College  =  \"UCLA\" OR College  =  \"Duke\"",
        "predicted_parse_with_values": "select T3.Player from match_season as T1 join team as T2 on T1.Team = T2.Team_id join player as T3 on T2.Team_id = T3.Team where T1.College = \"Wake Forest\" or T1.College = \"Duke\""
    },
    {
        "question": "What are the distinct last names of the students who have president votes but do not have 2192 as the advisor ?",
        "db_id": "voter_2",
        "gold_parse": "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  PRESIDENT_Vote EXCEPT SELECT DISTINCT LName FROM STUDENT WHERE Advisor  =  \"2192\"",
        "predicted_parse_with_values": "select T2.LName from Voting_record as T1 join Student as T2 on T1.Class_Senator_Vote = T2.StuID where T1.President_Vote != 1014"
    },
    {
        "question": "what state has highest elevation",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM highlow WHERE highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow )",
        "predicted_parse_with_values": "select T1.state_name from state as T1 join highlow as T2 on T1.state_name = T2.state_name order by T2.highest_elevation desc limit 1"
    },
    {
        "question": "How many accounts are there for each customer id ?",
        "db_id": "customers_card_transactions",
        "gold_parse": "SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id",
        "predicted_parse_with_values": "select count ( * ) , customer_id from Accounts group by customer_id"
    },
    {
        "question": "what is the highest point in the state with capital des moines",
        "db_id": "geo",
        "gold_parse": "SELECT highest_point FROM highlow WHERE state_name IN ( SELECT state_name FROM state WHERE capital  =  \"des moines\" )",
        "predicted_parse_with_values": "select max ( T2.highest_point ) from state as T1 join highlow as T2 on T1.state_name = T2.state_name where T1.capital = \"dummy value\""
    },
    {
        "question": "what river is the longest one in the united states",
        "db_id": "geo",
        "gold_parse": "SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river )",
        "predicted_parse_with_values": "select T1.river_name from river as T1 join state as T2 on T1.traverse = T2.state_name join border_info as T3 on T2.state_name = T3.border where T3.state_name = \"dummy value\" order by T1.length desc limit 1"
    },
    {
        "question": "Find the number of rooms with king bed for each decor type .",
        "db_id": "inn_1",
        "gold_parse": "SELECT decor ,  count(*) FROM Rooms WHERE bedType = \"King\" GROUP BY decor",
        "predicted_parse_with_values": "select count ( * ) , bedType from Rooms where beds = 1 group by bedType"
    },
    {
        "question": "Return the address of store 1 .",
        "db_id": "sakila_1",
        "gold_parse": "SELECT T2.address FROM store AS T1 JOIN address AS T2 ON T1.address_id  =  T2.address_id WHERE store_id  =  1",
        "predicted_parse_with_values": "select address from address where address2 = \"\""
    },
    {
        "question": "What is the count and code of the job with the most employee ?",
        "db_id": "college_1",
        "gold_parse": "SELECT emp_jobcode ,  count(*) FROM employee GROUP BY emp_jobcode ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select count ( * ) , EMP_JOBCODE from EMPLOYEE group by EMP_JOBCODE order by count ( * ) desc limit 1"
    },
    {
        "question": "What are the countries with the most airlines whose active status is Y ?",
        "db_id": "flight_4",
        "gold_parse": "SELECT country FROM airlines WHERE active  =  'Y' GROUP BY country ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select country from airlines where active = ( select max ( active ) from airlines where active = \"N\" group by country order by count ( * ) desc limit 1 )"
    },
    {
        "question": "What is the total number of hours per work and number of games played by David Shieber ?",
        "db_id": "game_1",
        "gold_parse": "SELECT sum(hoursperweek) ,  sum(gamesplayed) FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.Fname  =  \"David\" AND T2.Lname  =  \"Shieber\"",
        "predicted_parse_with_values": "select sum ( T2.Hours_Played ) , sum ( T2.Hours_Played ) from Student as T1 join Plays_Games as T2 on T1.StuID = T2.StuID where T1.Fname = \"Dinesh\""
    },
    {
        "question": "List the name of a building along with the name of a company whose office is in the building .",
        "db_id": "company_office",
        "gold_parse": "SELECT T3.name ,  T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id",
        "predicted_parse_with_values": "select name , name from Companies"
    },
    {
        "question": "What is the name of party with most number of members ?",
        "db_id": "party_people",
        "gold_parse": "SELECT T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select Party_name from party group by Party_name order by count ( * ) desc limit 1"
    },
    {
        "question": "return me the authors who have cooperated with \" H. V. Jagadish \" .",
        "db_id": "academic",
        "gold_parse": "SELECT t2.name FROM writes AS t3 JOIN author AS t2 ON t3.aid  =  t2.aid JOIN publication AS t5 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\"",
        "predicted_parse_with_values": "select T2.name from organization as T1 join author as T2 where T1.name = \"dummy value\""
    },
    {
        "question": "what is the most populated capital in the usa",
        "db_id": "geo",
        "gold_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( t1.population ) FROM state AS t2 JOIN city AS t1 ON t2.capital  =  t1.city_name )",
        "predicted_parse_with_values": "select T2.capital from city as T1 join state as T2 on T1.state_name = T2.state_name where T2.country_name = \"dummy value\" order by T1.population desc limit 1"
    },
    {
        "question": "what is the longest river that flows through texas",
        "db_id": "geo",
        "gold_parse": "SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river WHERE traverse  =  \"texas\" ) AND traverse  =  \"texas\"",
        "predicted_parse_with_values": "select T1.river_name from river as T1 join state as T2 on T1.traverse = T2.state_name join border_info as T3 on T2.state_name = T3.border where T3.state_name = \"dummy value\" order by T1.length desc limit 1"
    },
    {
        "question": "Select the average price of each manufacturer 's products , showing only the manufacturer 's code .",
        "db_id": "manufactory_1",
        "gold_parse": "SELECT AVG(Price) ,  Manufacturer FROM Products GROUP BY Manufacturer",
        "predicted_parse_with_values": "select avg ( Price ) , Manufacturer from Products group by Code"
    },
    {
        "question": "Which product has been ordered most number of times ?",
        "db_id": "customers_and_addresses",
        "gold_parse": "SELECT t2.product_details FROM order_items AS t1 JOIN products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_id ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select T1.product_id from Products as T1 join Order_Items as T2 on T1.product_id = T2.product_id group by T1.product_id order by count ( * ) desc limit 1"
    },
    {
        "question": "Find the number of departments in each school .",
        "db_id": "college_1",
        "gold_parse": "SELECT count(DISTINCT dept_name) ,  school_code FROM department GROUP BY school_code",
        "predicted_parse_with_values": "select count ( * ) , T4.SCHOOL_CODE from CLASS as T1 join ENROLL as T2 on T1.CLASS_CODE = T2.CLASS_CODE join STUDENT as T3 on T2.STU_NUM = T3.STU_NUM join DEPARTMENT as T4 on T3.DEPT_CODE = T4.DEPT_CODE group by T4.SCHOOL_CODE"
    },
    {
        "question": "For each position , what is the maximum number of hours for students who spent more than 1000 hours training ?",
        "db_id": "soccer_2",
        "gold_parse": "SELECT max(T1.HS) ,  pPos FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T1.HS  >  1000 GROUP BY T2.pPos",
        "predicted_parse_with_values": "select T1.pPos , max ( T2.HS ) from Tryout as T1 join Player as T2 on T1.pID = T2.pID where T2.HS > 300 group by T1.pPos"
    },
    {
        "question": "what is the largest city of wyoming",
        "db_id": "geo",
        "gold_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name  =  \"wyoming\" ) AND state_name  =  \"wyoming\"",
        "predicted_parse_with_values": "select city_name from city where state_name = \"dummy value\" order by population desc limit 1"
    },
    {
        "question": "Return the party email that has used party services the greatest number of times .",
        "db_id": "e_government",
        "gold_parse": "SELECT t1.party_email FROM parties AS t1 JOIN party_services AS t2 ON t1.party_id  =  t2.customer_id GROUP BY t1.party_email ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select T1.party_email from Parties as T1 join Party_Services as T2 on T1.party_id = T2.customer_id group by T1.party_email order by count ( party_Services.* ) desc limit 1"
    },
    {
        "question": "how many states in the us does the shortest river run through",
        "db_id": "geo",
        "gold_parse": "SELECT COUNT ( DISTINCT traverse ) FROM river WHERE LENGTH  =  ( SELECT MIN ( DISTINCT LENGTH ) FROM river )",
        "predicted_parse_with_values": "select count ( * ) from river where length = ( select min ( length ) from river where country_name = \"dummy value\" )"
    },
    {
        "question": "What are the distinct ids of customers who made an order after any order that was Cancelled ?",
        "db_id": "department_store",
        "gold_parse": "SELECT DISTINCT customer_id FROM Customer_Orders WHERE order_date  >  (SELECT min(order_date) FROM Customer_Orders WHERE order_status_code  =  \"Cancelled\")",
        "predicted_parse_with_values": "select customer_id from Customer_Orders where order_status_code = \"Cancelled\""
    },
    {
        "question": "Find the name of customers who do not have an saving account .",
        "db_id": "loan_1",
        "gold_parse": "SELECT cust_name FROM customer EXCEPT SELECT cust_name FROM customer WHERE acc_type  =  'saving'",
        "predicted_parse_with_values": "select cust_name from customer where cust_ID not in ( select cust_ID from loan )"
    },
    {
        "question": "which states border states through which the mississippi traverses",
        "db_id": "geo",
        "gold_parse": "SELECT border FROM border_info WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" )",
        "predicted_parse_with_values": "select T3.border from river as T1 join state as T2 on T1.traverse = T2.state_name join border_info as T3 on T2.state_name = T3.border where T1.traverse = \"dummy value\""
    },
    {
        "question": "how many residents live in california",
        "db_id": "geo",
        "gold_parse": "SELECT population FROM state WHERE state_name  =  \"california\"",
        "predicted_parse_with_values": "select sum ( population ) from state where area = \"dummy value\""
    },
    {
        "question": "return me the total citations of papers in PVLDB in 2005 .",
        "db_id": "academic",
        "gold_parse": "SELECT SUM ( t2.citation_num ) FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" AND t2.year  =  2005",
        "predicted_parse_with_values": "select count ( T1.jid ) from publication as T1 join writes as T2 on T1.pid = T2.pid join author as T3 on T2.aid = T3.aid where T1.year = \"dummy value\" and T3.name = \"dummy value\""
    },
    {
        "question": "What is the last name of the staff member in charge of the complaint on the product with the lowest price ?",
        "db_id": "customer_complaints",
        "gold_parse": "SELECT t1.last_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id  =  t2.staff_id JOIN products AS t3 ON t2.product_id  =  t3.product_id ORDER BY t3.product_price LIMIT 1",
        "predicted_parse_with_values": "select T3.last_name from Products as T1 join Complaints as T2 on T1.product_id = T2.product_id join Staff as T3 on T2.staff_id = T3.staff_id order by T1.product_price asc limit 1"
    },
    {
        "question": "return me the authors who have papers containing keyword \" Relational Database \" .",
        "db_id": "academic",
        "gold_parse": "SELECT t2.name FROM publication_keyword AS t5 JOIN keyword AS t1 ON t5.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t3.pid JOIN author AS t2 ON t4.aid  =  t2.aid WHERE t1.keyword  =  \"Relational Database\"",
        "predicted_parse_with_values": "select T5.name from keyword as T1 join publication_keyword as T2 on T1.kid = T2.kid join publication as T3 on T2.pid = T3.pid join writes as T4 on T3.pid = T4.pid join author as T5 on T4.aid = T5.aid where T1.keyword = \"dummy value\""
    },
    {
        "question": "what rivers are in illinois",
        "db_id": "geo",
        "gold_parse": "SELECT river_name FROM river WHERE traverse  =  \"illinois\"",
        "predicted_parse_with_values": "select T1.river_name from river as T1 join state as T2 on T1.traverse = T2.state_name where T2.area = \"dummy value\""
    },
    {
        "question": "Show project ids and the number of documents in each project .",
        "db_id": "cre_Docs_and_Epenses",
        "gold_parse": "SELECT project_id ,  count(*) FROM Documents GROUP BY project_id",
        "predicted_parse_with_values": "select Project_ID , count ( * ) from Projects group by Project_ID"
    },
    {
        "question": "Give me a list of cities whose temperature in March is lower than that in July or higher than that in Oct ?",
        "db_id": "city_record",
        "gold_parse": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Jul OR T2.Mar  >  T2.Oct",
        "predicted_parse_with_values": "select T2.City from temperature as T1 join city as T2 on T1.City_ID = T2.City_ID where T1.Oct = 20.0 or T1.Oct >= 28.3 union select T4.City from temperature as T3 join city as T4 on T3.City_ID = T4.City_ID where T3.Oct = 30.6 and T3.Mar = 26.6"
    },
    {
        "question": "Find the names of the tourist attractions that is either accessible by bus or at address 254 Ottilie Junction .",
        "db_id": "cre_Theme_park",
        "gold_parse": "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID  =  T2.Location_ID WHERE T1.Address  =  \"254 Ottilie Junction\" OR T2.How_to_Get_There  =  \"bus\"",
        "predicted_parse_with_values": "select T2.Name from Locations as T1 join Tourist_Attractions as T2 on T1.Location_ID = T2.Location_ID where T1.Address = \"4510 Schuster Stream Apt. 613\" or T1.Address = \"0692 Georgiana Pass\""
    },
    {
        "question": "What is the average price range of hotels for each each star rating code ?",
        "db_id": "cre_Theme_park",
        "gold_parse": "SELECT star_rating_code ,  avg(price_range) FROM HOTELS GROUP BY star_rating_code",
        "predicted_parse_with_values": "select avg ( T2.price_range ) , T1.star_rating_code from Ref_Hotel_Star_Ratings as T1 join Hotels as T2 on T1.star_rating_code = T2.star_rating_code group by T2.star_rating_code"
    },
    {
        "question": "How many professors who are from either Accounting or Biology department ?",
        "db_id": "college_1",
        "gold_parse": "SELECT count(*) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T2.dept_name  =  'Accounting' OR T2.dept_name  =  'Biology'",
        "predicted_parse_with_values": "select count ( * ) from DEPARTMENT as T1 join PROFESSOR as T2 on T1.DEPT_CODE = T2.DEPT_CODE where T1.DEPT_NAME = \"Marketing/Management\" or T1.DEPT_NAME = \"Sociology\""
    },
    {
        "question": "Among all the claims , which settlements have a claimed amount that is no more than the average ? List the claim start date .",
        "db_id": "insurance_policies",
        "gold_parse": "SELECT Date_Claim_Made FROM Claims WHERE Amount_Settled  <=  ( SELECT avg(Amount_Settled) FROM Claims )",
        "predicted_parse_with_values": "select T1.Date_Claim_Settled from Claims as T1 join Settlements as T2 on T1.Claim_ID = T2.Claim_ID where T2.Amount_Claimed < ( select avg ( Amount_Claimed ) from Settlements )"
    },
    {
        "question": "What is the id of every song that has a resolution higher than that of a song with a rating below 8 ?",
        "db_id": "music_1",
        "gold_parse": "SELECT f_id FROM song WHERE resolution  >  (SELECT max(resolution) FROM song WHERE rating  <  8)",
        "predicted_parse_with_values": "select f_id from song where resolution > ( select min ( resolution ) from song where rating < 7 )"
    },
    {
        "question": "what is the population of the capital of the largest state through which the mississippi runs",
        "db_id": "geo",
        "gold_parse": "SELECT population FROM city WHERE city_name  =  ( SELECT capital FROM state WHERE area  =  ( SELECT MAX ( t1.area ) FROM state AS t1 JOIN river AS t2 ON t1.state_name  =  t2.traverse WHERE t2.river_name  =  \"mississippi\" ) )",
        "predicted_parse_with_values": "select T2.population from river as T1 join state as T2 on T1.traverse = T2.state_name where T1.river_name = \"dummy value\" order by T2.density desc limit 1"
    },
    {
        "question": "Give the maximum and minimum product prices for each product type , grouped and ordered by product type .",
        "db_id": "department_store",
        "gold_parse": "SELECT max(product_price) ,  min(product_price) ,  product_type_code FROM products GROUP BY product_type_code ORDER BY product_type_code",
        "predicted_parse_with_values": "select max ( product_price ) , min ( product_price ) , product_type_code from Products group by product_type_code order by product_name"
    },
    {
        "question": "what is the population density of the state with the smallest area",
        "db_id": "geo",
        "gold_parse": "SELECT density FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state )",
        "predicted_parse_with_values": "select population from state order by area asc limit 1"
    },
    {
        "question": "Show all director names who have a movie in the year 1999 or 2000 .",
        "db_id": "culture_company",
        "gold_parse": "SELECT director FROM movie WHERE YEAR  =  1999 OR YEAR  =  2000",
        "predicted_parse_with_values": "select Director from movie where Year = 1999 or Year = 2001"
    },
    {
        "question": "What are the all games score and location of the school called Clemson ?",
        "db_id": "university_basketball",
        "gold_parse": "SELECT t2.All_Games ,  t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  'Clemson'",
        "predicted_parse_with_values": "select T2.All_Games , T1.Location from university as T1 join basketball_match as T2 on T1.School_ID = T2.School_ID where T1.Nickname = \"Flying Dutchmen\""
    },
    {
        "question": "Show the name of track with most number of races .",
        "db_id": "race_track",
        "gold_parse": "SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select Name from track group by Name order by count ( * ) desc limit 1"
    },
    {
        "question": "what is the largest river in texas state",
        "db_id": "geo",
        "gold_parse": "SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river WHERE traverse  =  \"texas\" ) AND traverse  =  \"texas\"",
        "predicted_parse_with_values": "select T1.river_name from river as T1 join state as T2 on T1.traverse = T2.state_name where T2.state_name = \"dummy value\" order by T2.density desc limit 1"
    },
    {
        "question": "Who is the director of the tv series \" House of Cards \" from 2013 ?",
        "db_id": "imdb",
        "gold_parse": "SELECT t2.name FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN tv_series AS t3 ON t3.sid  =  t1.msid WHERE t3.release_year  =  2013 AND t3.title  =  \"House of Cards\"",
        "predicted_parse_with_values": "select T1.name from director as T1 join tv_series as T2 where T2.title = \"dummy value\" and T1.birth_year = \"dummy value\""
    },
    {
        "question": "What is the first and last name of the faculty participating in the most activities ?",
        "db_id": "activity_1",
        "gold_parse": "SELECT  T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID GROUP BY T1.FacID ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select T2.Fname , T2.Lname from Faculty_Participates_in as T1 join Faculty as T2 on T1.FacID = T2.FacID group by T1.FacID order by count ( * ) desc limit 1"
    },
    {
        "question": "Show the names of countries that have more than one roller coaster .",
        "db_id": "roller_coaster",
        "gold_parse": "SELECT T1.Name FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID GROUP BY T1.Name HAVING COUNT(*)  >  1",
        "predicted_parse_with_values": "select T1.Name from country as T1 join roller_coaster as T2 on T1.Country_ID = T2.Country_ID group by T2.Country_ID having count ( * ) > 1"
    },
    {
        "question": "How many female people are older than 30 in our record ?",
        "db_id": "wedding",
        "gold_parse": "SELECT count(*) FROM people WHERE is_male  =  'F' AND age  >  30",
        "predicted_parse_with_values": "select count ( * ) from people where Age > 30"
    },
    {
        "question": "what state has the smallest area",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state )",
        "predicted_parse_with_values": "select state_name from state order by area asc limit 1"
    },
    {
        "question": "Which party has the largest number of delegates ?",
        "db_id": "election",
        "gold_parse": "SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID GROUP BY T1.Party ORDER BY COUNT(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select T3.Party from county as T1 join election as T2 on T1.County_Id = T2.District join party as T3 on T2.Party = T3.Party_ID order by T1.Population desc limit 1"
    },
    {
        "question": "Show the position of players and the corresponding number of players .",
        "db_id": "match_season",
        "gold_parse": "SELECT POSITION ,  COUNT(*) FROM match_season GROUP BY POSITION",
        "predicted_parse_with_values": "select Player , count ( * ) from player group by Player"
    },
    {
        "question": "what are the major cities of kansas",
        "db_id": "geo",
        "gold_parse": "SELECT city_name FROM city WHERE population  >  150000 AND state_name  =  \"kansas\"",
        "predicted_parse_with_values": "select city_name from city where state_name = \"dummy value\""
    },
    {
        "question": "Report the number of students in each classroom .",
        "db_id": "student_1",
        "gold_parse": "SELECT classroom ,  count(*) FROM list GROUP BY classroom",
        "predicted_parse_with_values": "select count ( * ) , Classroom from list group by Classroom"
    },
    {
        "question": "How many hours do the students spend studying in each department ?",
        "db_id": "college_1",
        "gold_parse": "SELECT sum(stu_hrs) ,  dept_code FROM student GROUP BY dept_code",
        "predicted_parse_with_values": "select sum ( T1.STU_NUM ) , T2.DEPT_NAME from STUDENT as T1 join DEPARTMENT as T2 on T1.DEPT_CODE = T2.DEPT_CODE group by T2.DEPT_NAME"
    },
    {
        "question": "Show the region name with at least two storms .",
        "db_id": "storm_record",
        "gold_parse": "SELECT T1.region_name FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id HAVING count(*)  >=  2",
        "predicted_parse_with_values": "select Region_name from region group by Region_name having count ( * ) >= 1"
    },
    {
        "question": "Which institution has the most papers ? Find the name of the institution .",
        "db_id": "icfp_1",
        "gold_parse": "SELECT t1.name FROM inst AS t1 JOIN authorship AS t2 ON t1.instid  =  t2.instid JOIN papers AS t3 ON t2.paperid  =  t3.paperid GROUP BY t1.name ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select name from Inst group by instID order by count ( * ) desc limit 1"
    },
    {
        "question": "who acted the role of \" Mr. Bean \"",
        "db_id": "imdb",
        "gold_parse": "SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid WHERE t2.role  =  \"Mr. Bean\"",
        "predicted_parse_with_values": "select T1.role from cast as T1 join actor as T2 on T1.aid = T2.aid where T2.name = \"dummy value\""
    },
    {
        "question": "Which papers ' first author is affiliated with an institution in the country \" Japan \" and has last name \" Ohori \" ? Give me the titles of the papers .",
        "db_id": "icfp_1",
        "gold_parse": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid JOIN inst AS t4 ON t2.instid  =  t4.instid WHERE t4.country  =  \"Japan\" AND t2.authorder  =  1 AND t1.lname  =  \"Ohori\"",
        "predicted_parse_with_values": "select T4.title from Authors as T1 join Authorship as T2 on T1.authID = T2.authID join Inst as T3 on T2.instID = T3.instID join Papers as T4 on T2.paperID = T4.paperID where T3.country = \"France\" and T1.lname = \"Turon\""
    },
    {
        "question": "What year is the movie \" The Imitation Game \" from ?",
        "db_id": "imdb",
        "gold_parse": "SELECT release_year FROM movie WHERE title  =  \"The Imitation Game\"",
        "predicted_parse_with_values": "select T2.release_year from genre as T1 join movie as T2 where T1.genre = \"dummy value\""
    },
    {
        "question": "What are the ids of all students and number of hours played ?",
        "db_id": "game_1",
        "gold_parse": "SELECT Stuid ,  sum(hours_played) FROM Plays_games GROUP BY Stuid",
        "predicted_parse_with_values": "select T2.StuID , count ( * ) from Student as T1 join Plays_Games as T2 on T1.StuID = T2.StuID group by T2.StuID"
    },
    {
        "question": "what state has the sparsest population density",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM state WHERE density  =  ( SELECT MIN ( density ) FROM state )",
        "predicted_parse_with_values": "select state_name from state order by density asc limit 1"
    },
    {
        "question": "return me the number of papers in PVLDB containing keyword \" Keyword search \" .",
        "db_id": "academic",
        "gold_parse": "SELECT COUNT ( DISTINCT t4.title ) FROM publication_keyword AS t2 JOIN keyword AS t1 ON t2.kid  =  t1.kid JOIN publication AS t4 ON t4.pid  =  t2.pid JOIN journal AS t3 ON t4.jid  =  t3.jid WHERE t3.name  =  \"PVLDB\" AND t1.keyword  =  \"Keyword search\"",
        "predicted_parse_with_values": "select count ( T1.pid ) from publication as T1 join writes as T2 on T1.pid = T2.pid join author as T3 on T2.aid = T3.aid join domain_author as T4 on T3.aid = T4.aid join domain as T5 on T4.did = T5.did join domain_keyword as T6 on T5.did = T6.did join keyword as T7 on T6.kid = T7.kid where T7.keyword = \"dummy value\" and T7.keyword = \"dummy value\""
    },
    {
        "question": "What is the name of the bank branch with the greatest number of customers ?",
        "db_id": "loan_1",
        "gold_parse": "SELECT bname FROM bank ORDER BY no_of_customers DESC LIMIT 1",
        "predicted_parse_with_values": "select T1.cust_name from customer as T1 join bank as T2 on T1.branch_ID = T2.branch_ID group by T1.branch_ID order by sum ( T2.no_of_customers ) desc limit 1"
    },
    {
        "question": "what state has the largest capital",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM city WHERE population  =  ( SELECT MAX ( t1.population ) FROM state AS t2 JOIN city AS t1 ON t2.capital  =  t1.city_name )",
        "predicted_parse_with_values": "select state_name from state order by density desc limit 1"
    },
    {
        "question": "Count the number of storms in which at least 1 person died .",
        "db_id": "storm_record",
        "gold_parse": "SELECT count(*) FROM storm WHERE Number_Deaths  >  0",
        "predicted_parse_with_values": "select count ( * ) from storm"
    },
    {
        "question": "Find the number of trains for each station , as well as the station network name and services .",
        "db_id": "station_weather",
        "gold_parse": "SELECT count(*) ,  t1.network_name ,  t1.services FROM station AS t1 JOIN route AS t2 ON t1.id  =  t2.station_id GROUP BY t2.station_id",
        "predicted_parse_with_values": "select count ( * ) , network_name , network_name from station group by network_name"
    },
    {
        "question": "Show names for all aircraft with at least two flights .",
        "db_id": "flight_1",
        "gold_parse": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid HAVING count(*)  >= 2",
        "predicted_parse_with_values": "select name from aircraft group by name having count ( * ) >= 1"
    },
    {
        "question": "what river runs through the most states",
        "db_id": "geo",
        "gold_parse": "SELECT river_name FROM river GROUP BY ( river_name ) ORDER BY COUNT ( DISTINCT traverse ) DESC LIMIT 1",
        "predicted_parse_with_values": "select river_name from river group by river_name order by count ( * ) desc limit 1"
    },
    {
        "question": "Give me the first name and last name for all the female members of the club \" Bootup Baltimore \" .",
        "db_id": "club_1",
        "gold_parse": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t3.sex  =  \"F\"",
        "predicted_parse_with_values": "select T1.Fname , T1.LName from Student as T1 join Member_of_club as T2 on T1.StuID = T2.StuID join Club as T3 on T2.ClubID = T3.ClubID where T3.ClubName = \"Bootup Baltimore\" and T3.ClubName = \"Pen and Paper Gaming\""
    },
    {
        "question": "What is the label with the most albums ?",
        "db_id": "music_2",
        "gold_parse": "SELECT label FROM albums GROUP BY label ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select Label from Albums group by Label order by count ( * ) desc limit 1"
    },
    {
        "question": "What are the name and ID of the product bought the most .",
        "db_id": "customers_and_addresses",
        "gold_parse": "SELECT t2.product_details ,  t2.product_id FROM order_items AS t1 JOIN products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_id ORDER BY sum(t1.order_quantity) LIMIT 1",
        "predicted_parse_with_values": "select T4.customer_name , T1.product_id from Products as T1 join Order_Items as T2 on T1.product_id = T2.product_id join Customer_Orders as T3 on T2.order_id = T3.order_id join Customers as T4 on T3.customer_id = T4.customer_id group by T1.product_id order by count ( * ) desc limit 1"
    },
    {
        "question": "what is the highest mountain in us",
        "db_id": "geo",
        "gold_parse": "SELECT mountain_name FROM mountain WHERE mountain_altitude  =  ( SELECT MAX ( mountain_altitude ) FROM mountain )",
        "predicted_parse_with_values": "select T1.mountain_altitude from mountain as T1 join state as T2 on T1.state_name = T2.state_name join highlow as T3 on T2.state_name = T3.state_name where T2.country_name = \"dummy value\" order by T3.highest_elevation desc limit 1"
    },
    {
        "question": "What are the names of storms that both affected two or more regions and affected a total of 10 or more cities ?",
        "db_id": "storm_record",
        "gold_parse": "SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING count(*)  >=  2 INTERSECT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING sum(T2.number_city_affected)  >=  10",
        "predicted_parse_with_values": "select Name from storm group by Name having count ( * ) >= 1 intersect select Name from storm group by Name having count ( * ) >= 1"
    },
    {
        "question": "Find the ids of the students who participate in Canoeing and Kayaking .",
        "db_id": "activity_1",
        "gold_parse": "SELECT T1.stuid FROM participates_in AS T1 JOIN activity AS T2 ON T2.actid  =  T2.actid WHERE T2.activity_name  =  'Canoeing' INTERSECT SELECT T1.stuid FROM participates_in AS T1 JOIN activity AS T2 ON T2.actid  =  T2.actid WHERE T2.activity_name  =  'Kayaking'",
        "predicted_parse_with_values": "select stuid from Participates_in where actid = 776 intersect select T1.stuid from Participates_in as T1 join Activity as T2 on T1.actid = T2.actid where T2.activity_name = \"Football\""
    },
    {
        "question": "What is the station station and end station for the trips with the three smallest ids ?",
        "db_id": "bike_1",
        "gold_parse": "SELECT start_station_name ,  end_station_name FROM trip ORDER BY id LIMIT 3",
        "predicted_parse_with_values": "select T1.name , T2.end_station_id from station as T1 join trip as T2 order by T2.id limit 1"
    },
    {
        "question": "What are ids of the faculty members who not only participate in an activity but also advise a student .",
        "db_id": "activity_1",
        "gold_parse": "SELECT FacID FROM Faculty_participates_in INTERSECT SELECT advisor FROM Student",
        "predicted_parse_with_values": "select FacID from Faculty intersect select Advisor from Student"
    },
    {
        "question": "What is the total credit does each department offer ?",
        "db_id": "college_1",
        "gold_parse": "SELECT sum(crs_credit) ,  dept_code FROM course GROUP BY dept_code",
        "predicted_parse_with_values": "select sum ( T2.CRS_CREDIT ) , T1.DEPT_CODE from DEPARTMENT as T1 join COURSE as T2 on T1.DEPT_CODE = T2.DEPT_CODE group by T1.DEPT_CODE"
    },
    {
        "question": "Find the last and first name of students who are playing Football or Lacrosse .",
        "db_id": "game_1",
        "gold_parse": "SELECT T2.lname ,  T2.fname FROM SportsInfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T1.SportName  =  \"Football\" OR T1.SportName  =  \"Lacrosse\"",
        "predicted_parse_with_values": "select T2.LName , T2.Fname from SportsInfo as T1 join Student as T2 on T1.StuID = T2.StuID where T1.SportName = \"Baseball\" or T1.GamesPlayed = 18"
    },
    {
        "question": "what state has the largest population",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state )",
        "predicted_parse_with_values": "select state_name from state order by population desc limit 1"
    },
    {
        "question": "How many events are there for each party ?",
        "db_id": "party_people",
        "gold_parse": "SELECT T2.party_name ,  count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id",
        "predicted_parse_with_values": "select Event_Name , count ( * ) from party_events group by Party_ID"
    },
    {
        "question": "Which days had a minimum dew point smaller than any day in zip code 94107 , and in which zip codes were those measurements taken ?",
        "db_id": "bike_1",
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  94107)",
        "predicted_parse_with_values": "select T2.time , T1.mean_dew_point_f from weather as T1 join status as T2 where T1.zip_code < ( select min ( zip_code ) from weather where zip_code = 94041 )"
    },
    {
        "question": "which is the shortest river",
        "db_id": "geo",
        "gold_parse": "SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MIN ( LENGTH ) FROM river )",
        "predicted_parse_with_values": "select river_name from river order by length limit 1"
    },
    {
        "question": "What are the first names and date of birth of professors teaching course ACCT-211 ?",
        "db_id": "college_1",
        "gold_parse": "SELECT DISTINCT T1.EMP_FNAME ,  T1.EMP_DOB FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM  =  T2.PROF_NUM WHERE CRS_CODE  =  \"ACCT-211\"",
        "predicted_parse_with_values": "select T1.EMP_FNAME , T4.STU_DOB from EMPLOYEE as T1 join DEPARTMENT as T2 on T1.EMP_NUM = T2.EMP_NUM join COURSE as T3 on T2.DEPT_CODE = T3.DEPT_CODE join STUDENT as T4 on T2.DEPT_CODE = T4.DEPT_CODE where T3.CRS_CODE = \"CIS-220\""
    },
    {
        "question": "Find the name of the most popular party form .",
        "db_id": "e_government",
        "gold_parse": "SELECT t1.form_name FROM forms AS t1 JOIN party_forms AS t2 ON t1.form_id  =  t2.form_id GROUP BY t2.form_id ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select form_name from Forms group by form_name order by count ( * ) desc limit 1"
    },
    {
        "question": "how big is the city of boulder",
        "db_id": "geo",
        "gold_parse": "SELECT population FROM city WHERE city_name  =  \"boulder\"",
        "predicted_parse_with_values": "select count ( * ) from city where city_name = \"dummy value\""
    },
    {
        "question": "What are all the distinct participant ids who attended any events ?",
        "db_id": "local_govt_in_alabama",
        "gold_parse": "SELECT count(DISTINCT participant_id) FROM participants_in_Events",
        "predicted_parse_with_values": "select Participant_ID from Participants"
    },
    {
        "question": "Find the id and name of the staff who has been assigned for the shortest period .",
        "db_id": "department_store",
        "gold_parse": "SELECT T1.staff_id ,  T1.staff_name FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id ORDER BY date_assigned_to - date_assigned_from LIMIT 1",
        "predicted_parse_with_values": "select T2.staff_id , T2.staff_name from Staff_Department_Assignments as T1 join Staff as T2 on T1.staff_id = T2.staff_id order by T1.date_assigned_to limit 1"
    },
    {
        "question": "How many books fall into each category ?",
        "db_id": "culture_company",
        "gold_parse": "SELECT category ,  count(*) FROM book_club GROUP BY category",
        "predicted_parse_with_values": "select count ( * ) , Category from book_club group by Category"
    },
    {
        "question": "How many clubs have total medals less than 10 ?",
        "db_id": "sports_competition",
        "gold_parse": "SELECT count(*) FROM club_rank WHERE Total  <  10",
        "predicted_parse_with_values": "select count ( count ( count ( count ( count ( count ( count ( count ( count ( count ( count ( count ( count ( count ( count ( count ) from club_rank where Total < ) ) ) ) ) ) ) ) ) ) ) ) ) ) value"
    },
    {
        "question": "name the major rivers in illinois",
        "db_id": "geo",
        "gold_parse": "SELECT river_name FROM river WHERE LENGTH  >  750 AND traverse  =  \"illinois\"",
        "predicted_parse_with_values": "select T1.river_name from river as T1 join lake as T2 where T2.state_name = \"dummy value\""
    },
    {
        "question": "What are the room names and ids of all the rooms that cost more than 160 and can accommodate more than two people .",
        "db_id": "inn_1",
        "gold_parse": "SELECT roomName ,  RoomId FROM Rooms WHERE basePrice  >  160 AND maxOccupancy  >  2",
        "predicted_parse_with_values": "select roomName , RoomId from Rooms where basePrice > 250 and basePrice < 250"
    },
    {
        "question": "how long is rio grande",
        "db_id": "geo",
        "gold_parse": "SELECT LENGTH FROM river WHERE river_name  =  \"rio grande\"",
        "predicted_parse_with_values": "select sum ( length ) from river where river_name = \"dummy value\""
    },
    {
        "question": "What is id of the city that hosted events in the most recent year ?",
        "db_id": "city_record",
        "gold_parse": "SELECT host_city FROM hosting_city ORDER BY YEAR DESC LIMIT 1",
        "predicted_parse_with_values": "select T1.City from city as T1 join hosting_city as T2 on T1.City_ID = T2.Host_City order by hosting_T1.Year desc limit 1"
    },
    {
        "question": "What is the number of movies featuring \" Shahab Hosseini \" ?",
        "db_id": "imdb",
        "gold_parse": "SELECT COUNT ( DISTINCT t2.title  ) FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  \"Shahab Hosseini\"",
        "predicted_parse_with_values": "select count ( * ) from actor as T1 join movie as T2 where T1.name = \"dummy value\""
    },
    {
        "question": "What are the names and dates of races , and the names of the tracks where they are held ?",
        "db_id": "race_track",
        "gold_parse": "SELECT T1.name ,  T1.date ,  T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id",
        "predicted_parse_with_values": "select Name , Date , Date from race"
    },
    {
        "question": "What are the names of ships , ordered by year they were built and their class ?",
        "db_id": "ship_1",
        "gold_parse": "SELECT name FROM ship ORDER BY built_year ,  CLASS",
        "predicted_parse_with_values": "select Name , Type from Ship order by Built_Year"
    },
    {
        "question": "how many rivers do not traverse the state with the capital albany",
        "db_id": "geo",
        "gold_parse": "SELECT COUNT ( river_name ) FROM river WHERE traverse NOT IN ( SELECT state_name FROM state WHERE capital  =  \"albany\" )",
        "predicted_parse_with_values": "select count ( * ) from river where river_name not in ( select T1.state_name from city as T1 join state as T2 on T1.state_name = T2.state_name where T2.capital = \"dummy value\" )"
    },
    {
        "question": "which states have a river",
        "db_id": "geo",
        "gold_parse": "SELECT traverse FROM river",
        "predicted_parse_with_values": "select state_name from state"
    },
    {
        "question": "Which major has least number of students ? List the major and the number of students .",
        "db_id": "restaurant_1",
        "gold_parse": "SELECT Major ,  count(*) FROM Student GROUP BY Major ORDER BY count(Major) ASC LIMIT 1",
        "predicted_parse_with_values": "select Major , count ( * ) from Student group by Major order by count ( * ) limit 1"
    },
    {
        "question": "Show the positions of the players from the team with name \" Ryley Goldner \" .",
        "db_id": "match_season",
        "gold_parse": "SELECT T1.Position FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Ryley Goldner\"",
        "predicted_parse_with_values": "select T1.Player from player as T1 join team as T2 on T1.Team = T2.Team_id where T2.Name = \"Evalyn Feil\""
    },
    {
        "question": "How many classes are professor whose last name is Graztevski has ?",
        "db_id": "college_1",
        "gold_parse": "SELECT count(*) FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM  =  T2.PROF_NUM WHERE T1.EMP_LNAME  =  'Graztevski'",
        "predicted_parse_with_values": "select count ( * ) from STUDENT where STU_LNAME = \"Oblonski\""
    },
    {
        "question": "Which claims caused more than 2 settlements or have the maximum claim value ? List the date the claim was made and the claim id .",
        "db_id": "insurance_policies",
        "gold_parse": "SELECT T1.Date_Claim_Made ,  T1.Claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id GROUP BY T1.Claim_id HAVING count(*)  >  2 UNION SELECT T1.Date_Claim_Made ,  T1.Claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id WHERE T1.Amount_Claimed  =  ( SELECT max(Amount_Claimed) FROM Claims )",
        "predicted_parse_with_values": "select T1.Date_Claim_Made , T2.Claim_ID from Claims as T1 join Settlements as T2 on T1.Claim_ID = T2.Claim_ID group by T1.Claim_ID having count ( * ) > 1 order by count ( * ) desc limit 1"
    },
    {
        "question": "How many countries do not have an roller coaster longer than 3000 ?",
        "db_id": "roller_coaster",
        "gold_parse": "SELECT count(*) FROM country WHERE country_id NOT IN ( SELECT country_id FROM roller_coaster WHERE LENGTH  >  3000 )",
        "predicted_parse_with_values": "select count ( * ) from country where Country_ID not in ( select Country_ID from roller_coaster where Height > 163.0 )"
    },
    {
        "question": "what is the longest river in texas",
        "db_id": "geo",
        "gold_parse": "SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river WHERE traverse  =  \"texas\" ) AND traverse  =  \"texas\"",
        "predicted_parse_with_values": "select T1.river_name from river as T1 join state as T2 on T1.traverse = T2.state_name where T2.state_name = \"dummy value\" order by T1.length desc limit 1"
    },
    {
        "question": "Find the name , address , number of students in the departments that have the top 3 highest number of students .",
        "db_id": "college_1",
        "gold_parse": "SELECT T2.dept_name ,  T2.dept_address ,  count(*) FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 3",
        "predicted_parse_with_values": "select DEPT_NAME , DEPT_ADDRESS , count ( * ) from DEPARTMENT group by DEPT_NAME order by count ( * ) desc limit 1"
    },
    {
        "question": "Find Alice 's friends of friends .",
        "db_id": "network_2",
        "gold_parse": "SELECT DISTINCT T4.name FROM PersonFriend AS T1 JOIN Person AS T2 ON T1.name  =  T2.name JOIN PersonFriend AS T3 ON T1.friend  =  T3.name JOIN PersonFriend AS T4 ON T3.friend  =  T4.name WHERE T2.name  =  'Alice' AND T4.name != 'Alice'",
        "predicted_parse_with_values": "select T2.friend from Person as T1 join PersonFriend as T2 on T1.name = T2.friend where T1.name = \"Alice\""
    },
    {
        "question": "What is the number of movies in which \" Jennifer Aniston \" acted after 2010 ?",
        "db_id": "imdb",
        "gold_parse": "SELECT COUNT ( DISTINCT t2.title  ) FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  \"Jennifer Aniston\" AND t2.release_year  >  2010",
        "predicted_parse_with_values": "select count ( * ) from cast as T1 join actor as T2 on T1.aid = T2.aid join movie as T3 where T2.name = \"dummy value\" and T1.role = \"dummy value\""
    },
    {
        "question": "What are the names of everybody who has exactly one friend ?",
        "db_id": "network_2",
        "gold_parse": "SELECT name FROM PersonFriend GROUP BY name HAVING count(*)  =  1",
        "predicted_parse_with_values": "select name from Person group by name having count ( * ) = 1"
    },
    {
        "question": "How many different colleges do attend the tryout test ?",
        "db_id": "soccer_2",
        "gold_parse": "SELECT count(DISTINCT cName) FROM tryout",
        "predicted_parse_with_values": "select count ( cName ) from College"
    },
    {
        "question": "return me the number of authors who have papers in the VLDB conference .",
        "db_id": "academic",
        "gold_parse": "SELECT COUNT ( DISTINCT t1.name ) FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"VLDB\"",
        "predicted_parse_with_values": "select count ( T3.pid ) from conference as T1 join publication as T2 on T1.cid = T2.cid join writes as T3 on T2.pid = T3.pid where T1.name = \"dummy value\""
    },
    {
        "question": "What are the different affiliations , and how many schools with each have an enrollment size of above 20000 ?",
        "db_id": "university_basketball",
        "gold_parse": "SELECT count(*) ,  affiliation FROM university WHERE enrollment  >  20000 GROUP BY affiliation",
        "predicted_parse_with_values": "select count ( * ) , Affiliation from university group by Affiliation having count ( * ) > 1"
    },
    {
        "question": "what states border states that border states that border states that border texas",
        "db_id": "geo",
        "gold_parse": "SELECT t1.border FROM border_info AS t2 JOIN border_info AS t1 ON t2.border  =  t1.state_name JOIN border_info AS t3 ON t3.border  =  t2.state_name JOIN border_info AS t4 ON t4.border  =  t3.state_name WHERE t4.state_name  =  \"texas\"",
        "predicted_parse_with_values": "select border from border_info where border = \"dummy value\""
    },
    {
        "question": "What is the total number of enrollment of schools that do not have any goalie player ?",
        "db_id": "soccer_2",
        "gold_parse": "SELECT sum(enr) FROM college WHERE cName NOT IN (SELECT cName FROM tryout WHERE pPos  =  \"goalie\")",
        "predicted_parse_with_values": "select sum ( T2.enr ) from Tryout as T1 join College as T2 on T1.cName = T2.cName where T1.pPos not in ( select T4.pID from Tryout as T3 join Player as T4 on T3.pID = T4.pID where T3.pPos = \"striker\" )"
    },
    {
        "question": "What are the three countries that the least players are from ?",
        "db_id": "baseball_1",
        "gold_parse": "SELECT birth_country FROM player GROUP BY birth_country ORDER BY count(*) ASC LIMIT 3",
        "predicted_parse_with_values": "select birth_country from player order by birth_state limit 1"
    },
    {
        "question": "List all ship names in the order of built year and class .",
        "db_id": "ship_1",
        "gold_parse": "SELECT name FROM ship ORDER BY built_year ,  CLASS",
        "predicted_parse_with_values": "select Name , Class from Ship order by Built_Year"
    },
    {
        "question": "How many proteins are associated with an institution founded after 1880 or an institution with type \" Private \" ?",
        "db_id": "protein_institute",
        "gold_parse": "SELECT count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id WHERE T1.founded  >  1880 OR T1.type  =  'Private'",
        "predicted_parse_with_values": "select count ( * ) from Institution where Type = \"Private\" or Type = \"Tribal\""
    },
    {
        "question": "What are the first names of all employees that are professors ordered by date of birth ?",
        "db_id": "college_1",
        "gold_parse": "SELECT emp_fname FROM employee WHERE emp_jobcode  =  'PROF' ORDER BY emp_dob",
        "predicted_parse_with_values": "select EMP_FNAME from EMPLOYEE where EMP_DOB = \"1950-11-2\" order by EMP_DOB"
    },
    {
        "question": "name the rivers in illinois",
        "db_id": "geo",
        "gold_parse": "SELECT river_name FROM river WHERE traverse  =  \"illinois\"",
        "predicted_parse_with_values": "select T1.river_name from river as T1 join lake as T2 where T2.state_name = \"dummy value\""
    },
    {
        "question": "What are the names and opening hours of the tourist attractions that can be accessed by bus or walk ?",
        "db_id": "cre_Theme_park",
        "gold_parse": "SELECT Name ,  Opening_Hours FROM TOURIST_ATTRACTIONS WHERE How_to_Get_There  =  \"bus\" OR How_to_Get_There  =  \"walk\"",
        "predicted_parse_with_values": "select Name , Opening_Hours from Tourist_Attractions where Tourist_Attraction_ID in ( select Tourist_Attraction_ID from Tourist_Attractions where How_to_Get_There = \"bus\" or How_to_Get_There = \"walk\" )"
    },
    {
        "question": "What are the average amount purchased and value purchased for the supplier who supplies the most products .",
        "db_id": "department_store",
        "gold_parse": "SELECT avg(total_amount_purchased) ,  avg(total_value_purchased) FROM Product_Suppliers WHERE supplier_id  =  (SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id ORDER BY count(*) DESC LIMIT 1)",
        "predicted_parse_with_values": "select avg ( Product_T1.total_amount_purchased ) , T1.supplier_name from Suppliers as T1 join Product_Suppliers as T2 on T1.supplier_id = T2.supplier_id group by T1.supplier_name order by count ( Product_T1.date_supplied_to ) desc limit 1"
    },
    {
        "question": "For each company id , what are the companies and how many gas stations does each one operate ?",
        "db_id": "gas_company",
        "gold_parse": "SELECT T2.company ,  count(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id GROUP BY T1.company_id",
        "predicted_parse_with_values": "select Company_ID , count ( * ) from station_company group by Company_ID"
    },
    {
        "question": "What are the ids of all students along with how many sports and games did they play ?",
        "db_id": "game_1",
        "gold_parse": "SELECT StuID ,  count(*) ,  sum(gamesplayed) FROM Sportsinfo GROUP BY StuID",
        "predicted_parse_with_values": "select T3.StuID , T1.GamesPlayed from SportsInfo as T1 join Student as T2 on T1.StuID = T2.StuID join Plays_Games as T3 on T2.StuID = T3.StuID"
    },
    {
        "question": "For each year , return the year and the number of times the team Boston Red Stockings won in the postseasons .",
        "db_id": "baseball_1",
        "gold_parse": "SELECT count(*) ,  T1.year FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' GROUP BY T1.year",
        "predicted_parse_with_values": "select T1.year , count ( * ) from postseason as T1 join team_franchise as T2 where T2.franchise_name = \"St. Paul Apostles\" group by T1.year"
    },
    {
        "question": "what is the lowest point in the united states",
        "db_id": "geo",
        "gold_parse": "SELECT lowest_point FROM highlow WHERE lowest_elevation  =  ( SELECT MIN ( lowest_elevation ) FROM highlow )",
        "predicted_parse_with_values": "select max ( T3.lowest_point ) from border_info as T1 join state as T2 on T1.border = T2.state_name join highlow as T3 on T2.state_name = T3.state_name where T1.state_name = \"dummy value\""
    },
    {
        "question": "where is the director of \" The Past \" from",
        "db_id": "imdb",
        "gold_parse": "SELECT t2.birth_city FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t3.title  =  \"The Past\"",
        "predicted_parse_with_values": "select name from director where birth_year = \"dummy value\""
    },
    {
        "question": "what are the populations of all the major cities in wisconsin",
        "db_id": "geo",
        "gold_parse": "SELECT population FROM city WHERE population  >  150000 AND state_name  =  \"wisconsin\"",
        "predicted_parse_with_values": "select T2.population from city as T1 join state as T2 on T1.state_name = T2.state_name where T1.state_name = \"dummy value\""
    },
    {
        "question": "Show the name and opening year for three churches that opened most recently .",
        "db_id": "wedding",
        "gold_parse": "SELECT name ,  open_date FROM church ORDER BY open_date DESC LIMIT 3",
        "predicted_parse_with_values": "select Name , Open_Date from church group by Church_ID order by sum ( Open_Date ) desc limit 1"
    },
    {
        "question": "Which authors have submitted to more than one workshop ?",
        "db_id": "workshop_paper",
        "gold_parse": "SELECT T2.Author FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID GROUP BY T2.Author HAVING COUNT(DISTINCT T1.workshop_id)  >  1",
        "predicted_parse_with_values": "select T1.Author from submission as T1 join Acceptance as T2 on T1.Submission_ID = T2.Submission_ID join workshop as T3 on T2.Workshop_ID = T3.Workshop_ID group by T1.Author having count ( * ) > 1"
    },
    {
        "question": "Who is performing in the back stage position for the song \" Der Kapitan \" ? Show the first name and last name .",
        "db_id": "music_2",
        "gold_parse": "SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Der Kapitan\" AND T1.StagePosition  =  \"back\"",
        "predicted_parse_with_values": "select T1.Firstname , T1.Lastname from Band as T1 join Vocals as T2 on T1.Id = T2.Bandmate join Songs as T3 on T2.SongId = T3.SongId where T3.Title = \"dummy value\""
    },
    {
        "question": "Show the names of people , and dates and venues of debates they are on the negative side , ordered in ascending alphabetical order of name .",
        "db_id": "debate",
        "gold_parse": "SELECT T3.Name ,  T2.Date ,  T2.Venue FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID  =  T2.Debate_ID JOIN people AS T3 ON T1.Negative  =  T3.People_ID ORDER BY T3.Name ASC",
        "predicted_parse_with_values": "select T3.Name , T1.Date from debate as T1 join debate_people as T2 on T1.Debate_ID = T2.Debate_ID join people as T3 on T2.Negative = T3.People_ID order by T2.Negative , T2.Negative"
    },
    {
        "question": "Find the number of songs in all the studio albums .",
        "db_id": "music_2",
        "gold_parse": "SELECT count(DISTINCT T3.title) FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid  =  T2.albumid JOIN songs AS T3 ON T2.songid  =  T3.songid WHERE t1.type  =  \"Studio\"",
        "predicted_parse_with_values": "select count ( * ) from Albums as T1 join Tracklists as T2 on T1.AId = T2.AlbumId join Songs as T3 on T2.SongId = T3.SongId where T1.Title = \"dummy value\""
    },
    {
        "question": "List all player names who have an overall rating higher than the average .",
        "db_id": "soccer_1",
        "gold_parse": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.overall_rating  >  ( SELECT avg(overall_rating) FROM Player_Attributes )",
        "predicted_parse_with_values": "select T1.player_name from Player as T1 join Player_Attributes as T2 on T1.player_api_id = T2.player_api_id where T2.overall_rating > ( select avg ( overall_rating ) from Player_Attributes )"
    },
    {
        "question": "What are the distinct names of customers who have purchased at least three different products ?",
        "db_id": "department_store",
        "gold_parse": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.customer_id HAVING COUNT (DISTINCT T3.product_id)  >=  3",
        "predicted_parse_with_values": "select customer_name from Customers group by customer_name having count ( * ) >= 1"
    },
    {
        "question": "What is the number of professors who are in the Accounting or Biology departments ?",
        "db_id": "college_1",
        "gold_parse": "SELECT count(*) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T2.dept_name  =  'Accounting' OR T2.dept_name  =  'Biology'",
        "predicted_parse_with_values": "select count ( * ) from DEPARTMENT as T1 join PROFESSOR as T2 on T1.DEPT_CODE = T2.DEPT_CODE where T2.DEPT_CODE = \"CIS\" or T1.DEPT_NAME = \"History\""
    },
    {
        "question": "What is the label that has the most albums ?",
        "db_id": "music_2",
        "gold_parse": "SELECT label FROM albums GROUP BY label ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select Label from Albums group by Label order by count ( * ) desc limit 1"
    },
    {
        "question": "What are the names of customers who have purchased both products Latte and Americano ?",
        "db_id": "customers_and_addresses",
        "gold_parse": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Latte' INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Americano'",
        "predicted_parse_with_values": "select T4.customer_name from Products as T1 join Order_Items as T2 on T1.product_id = T2.product_id join Customer_Orders as T3 on T2.order_id = T3.order_id join Customers as T4 on T3.customer_id = T4.customer_id where T1.product_id = 2 intersect select T6.customer_name from Customer_Orders as T5 join Customers as T6 on T5.customer_id = T6.customer_id where T5.order_status = \"Delivered\""
    },
    {
        "question": "what state has the largest city",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city )",
        "predicted_parse_with_values": "select state_name from state order by density desc limit 1"
    },
    {
        "question": "Give me the names and prices of furnitures which some companies are manufacturing .",
        "db_id": "manufacturer",
        "gold_parse": "SELECT t1.name ,  t2.price_in_dollar FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID  =  t2.Furniture_ID",
        "predicted_parse_with_values": "select Name , Market_Rate from furniture"
    },
    {
        "question": "How many credits does the department offer ?",
        "db_id": "college_1",
        "gold_parse": "SELECT sum(crs_credit) ,  dept_code FROM course GROUP BY dept_code",
        "predicted_parse_with_values": "select sum ( CRS_CREDIT ) from COURSE"
    },
    {
        "question": "return me the number of papers by \" H. V. Jagadish \" on PVLDB after 2000 .",
        "db_id": "academic",
        "gold_parse": "SELECT COUNT ( DISTINCT t4.title ) FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" AND t2.name  =  \"PVLDB\" AND t4.year  >  2000",
        "predicted_parse_with_values": "select count ( T1.pid ) from publication as T1 join cite as T2 on T1.pid = T2.citing where T2.cited = \"dummy value\" and T1.year > \"dummy value\" and T1.year > \"dummy value\""
    },
    {
        "question": "What is the average gpa of the students enrolled in the course with code ACCT-211 ?",
        "db_id": "college_1",
        "gold_parse": "SELECT avg(T2.stu_gpa) FROM enroll AS T1 JOIN student AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T1.class_code  =  T3.class_code WHERE T3.crs_code  =  'ACCT-211'",
        "predicted_parse_with_values": "select avg ( T1.STU_GPA ) from STUDENT as T1 join DEPARTMENT as T2 on T1.DEPT_CODE = T2.DEPT_CODE join COURSE as T3 on T2.DEPT_CODE = T3.DEPT_CODE where T3.CRS_CODE = \"CIS-220\""
    },
    {
        "question": "What document type codes do we have ?",
        "db_id": "cre_Doc_Control_Systems",
        "gold_parse": "SELECT document_type_code FROM Ref_Document_Types",
        "predicted_parse_with_values": "select document_type_code from Documents"
    },
    {
        "question": "What is the color code and description of the product named \" chervil \" ?",
        "db_id": "products_gen_characteristics",
        "gold_parse": "SELECT t1.color_code ,  t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t1.product_name  =  \"chervil\"",
        "predicted_parse_with_values": "select T2.color_code , T2.color_description from Products as T1 join Ref_Colors as T2 on T1.color_code = T2.color_code where T1.product_name = \"cinnam\""
    },
    {
        "question": "What are the names of artist whose exhibitions draw over 200 attendees on average ?",
        "db_id": "theme_gallery",
        "gold_parse": "SELECT T3.name FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id JOIN artist AS T3 ON T3.artist_id  =  T2.artist_id GROUP BY T3.artist_id HAVING avg(T1.attendance)  >  200",
        "predicted_parse_with_values": "select T3.Name from exhibition_record as T1 join exhibition as T2 on T1.Exhibition_ID = T2.Exhibition_ID join artist as T3 on T2.Artist_ID = T3.Artist_ID group by T3.Name having avg ( T1.Attendance ) > 1"
    },
    {
        "question": "Count the number of exhibitions that happened in or after 2005 .",
        "db_id": "theme_gallery",
        "gold_parse": "SELECT count(*) FROM exhibition WHERE YEAR  >=  2005",
        "predicted_parse_with_values": "select count ( * ) from exhibition where Year > 2006"
    },
    {
        "question": "How many females does this network has ?",
        "db_id": "network_2",
        "gold_parse": "SELECT count(*) FROM Person WHERE gender  =  'female'",
        "predicted_parse_with_values": "select count ( gender ) from Person where gender = \"male\""
    },
    {
        "question": "What are the names and trade names of the medicines which has 'Yes ' value in the FDA record ?",
        "db_id": "medicine_enzyme_interaction",
        "gold_parse": "SELECT name ,  trade_name FROM medicine WHERE FDA_approved  =  'Yes'",
        "predicted_parse_with_values": "select name , Trade_Name from medicine where FDA_approved like \"Yes\""
    },
    {
        "question": "List the clubs that have at least a member with advisor \" 1121 \" .",
        "db_id": "club_1",
        "gold_parse": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.advisor  =  1121",
        "predicted_parse_with_values": "select T3.ClubName from Student as T1 join Member_of_club as T2 on T1.StuID = T2.StuID join Club as T3 on T2.ClubID = T3.ClubID where T1.Advisor = 2311"
    },
    {
        "question": "How many credit cards does customer Blanche Huels have ?",
        "db_id": "customers_card_transactions",
        "gold_parse": "SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Blanche\" AND T2.customer_last_name  =  \"Huels\" AND T1.card_type_code  =  \"Credit\"",
        "predicted_parse_with_values": "select count ( * ) from Customers where customer_first_name = \"Armani\" and customer_last_name = \"Davis\""
    },
    {
        "question": "Which city has the most addresses ? List the city name , number of addresses , and city id .",
        "db_id": "sakila_1",
        "gold_parse": "SELECT T2.city ,  count(*) ,  T1.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id  =  T2.city_id GROUP BY T1.city_id ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select T1.city , T2.city_id , count ( * ) from city as T1 join address as T2 on T1.city_id = T2.city_id group by T1.city order by count ( * ) desc limit 1"
    },
    {
        "question": "What is the first name of the students who are in age 20 to 25 and living in PHL city ?",
        "db_id": "dorm_1",
        "gold_parse": "SELECT fname FROM student WHERE city_code  =  'PHL' AND age BETWEEN 20 AND 25",
        "predicted_parse_with_values": "select Fname from Student where Age between 22 and value"
    },
    {
        "question": "What is the average age of students who are living in the dorm with the largest capacity ?",
        "db_id": "dorm_1",
        "gold_parse": "SELECT avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.student_capacity  =  (SELECT max(student_capacity) FROM dorm)",
        "predicted_parse_with_values": "select avg ( T1.Age ) from Student as T1 join Lives_in as T2 on T1.StuID = T2.stuid join Dorm as T3 on T2.dormid = T3.dormid order by T3.student_capacity desc limit 1"
    },
    {
        "question": "Show the first name and last name for all the instructors .",
        "db_id": "activity_1",
        "gold_parse": "SELECT fname ,  lname FROM Faculty WHERE Rank  =  \"Instructor\"",
        "predicted_parse_with_values": "select Fname , Lname from Faculty"
    },
    {
        "question": "What is the city with the smallest GDP ? Return the city and its GDP .",
        "db_id": "city_record",
        "gold_parse": "SELECT city ,  GDP FROM city ORDER BY GDP LIMIT 1",
        "predicted_parse_with_values": "select City , City from city order by GDP limit 1"
    },
    {
        "question": "what is the highest point in the us",
        "db_id": "geo",
        "gold_parse": "SELECT highest_point FROM highlow WHERE highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow )",
        "predicted_parse_with_values": "select max ( highest_point ) from highlow where state_name = \"dummy value\""
    },
    {
        "question": "In which locations are there more than one movie theater with capacity above 300 ?",
        "db_id": "cinema",
        "gold_parse": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >  1",
        "predicted_parse_with_values": "select T3.Location from film as T1 join schedule as T2 on T1.Film_ID = T2.Film_ID join cinema as T3 on T2.Cinema_ID = T3.Cinema_ID where T3.Capacity > 208 group by T3.Location having count ( * ) > 1"
    },
    {
        "question": "what is the lowest point in usa",
        "db_id": "geo",
        "gold_parse": "SELECT lowest_point FROM highlow WHERE lowest_elevation  =  ( SELECT MIN ( lowest_elevation ) FROM highlow )",
        "predicted_parse_with_values": "select min ( T2.lowest_point ) from state as T1 join highlow as T2 on T1.state_name = T2.state_name where T1.country_name = \"dummy value\""
    },
    {
        "question": "Which colleges do the tryout players whose name starts with letter D go to ?",
        "db_id": "soccer_2",
        "gold_parse": "SELECT T1.cName FROM  tryout AS T1 JOIN player AS T2 ON T1.pID  =  T2.pID WHERE T2.pName LIKE 'D%'",
        "predicted_parse_with_values": "select T3.cName from Player as T1 join Tryout as T2 on T1.pID = T2.pID join College as T3 on T2.cName = T3.cName where T1.pName like \"Eddie\""
    },
    {
        "question": "how many citizens live in california",
        "db_id": "geo",
        "gold_parse": "SELECT population FROM state WHERE state_name  =  \"california\"",
        "predicted_parse_with_values": "select sum ( population ) from state where area = \"dummy value\""
    },
    {
        "question": "What are the average , minimum , and maximum ticket prices for exhibitions that happened prior to 2009 ?",
        "db_id": "theme_gallery",
        "gold_parse": "SELECT avg(ticket_price) ,  min(ticket_price) ,  max(ticket_price) FROM exhibition WHERE YEAR  <  2009",
        "predicted_parse_with_values": "select avg ( Ticket_Price ) , max ( Ticket_Price ) , max ( Ticket_Price ) , max ( Ticket_Price ) from exhibition where Year < 2008"
    },
    {
        "question": "What is the total revenue of companies with revenue greater than the lowest revenue of any manufacturer in Austin ?",
        "db_id": "manufactory_1",
        "gold_parse": "SELECT sum(revenue) FROM manufacturers WHERE revenue  >  (SELECT min(revenue) FROM manufacturers WHERE headquarter  =  'Austin')",
        "predicted_parse_with_values": "select sum ( Revenue ) from Manufacturers where Founder = ( select Founder from Manufacturers where Founder = \"Mary\" ) and Founder = \"Andy\""
    },
    {
        "question": "Find the name and address of the customers who have both New and Pending orders .",
        "db_id": "department_store",
        "gold_parse": "SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"New\" INTERSECT SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"Pending\"",
        "predicted_parse_with_values": "select T1.customer_name , T1.customer_address from Customers as T1 join Customer_Addresses as T2 on T1.customer_id = T2.customer_id where customer_Addresses.address_id in ( select customer_T4.address_id from Customer_Addresses as T9 join Addresses as T10 on T9.address_id = T10.address_id join Supplier_Addresses as T9 on T10.address_id = T9.address_id join Suppliers as T10 on T9.supplier_id = T10.supplier_id join Product_Suppliers as T9 on T10.supplier_id = T9.supplier_id join Products as T10 on T9.product_id = T10.product_id join Order_Items as T9 on T10.product_id = T9.product_id join Customer_Orders as T10 on T9.order_id = T10.order_id where T10.order_status_code = \"PartFilled\" intersect select customer_T12.address_id from Customer_Addresses as T11 join Addresses as T12 on T11.address_id = T12.address_id join Supplier_Addresses as T13 on T12.address_id = T13.address_id join Suppliers as T14 on T13.supplier_id = T14.supplier_id join Product_Suppliers as T15 on T14.supplier_id = T15.supplier_id join Products as T16 on T15.product_id = T16.product_id join Order_Items as T17 on T16.product_id = T17.product_id join Customer_Orders as T18 on T17.order_id = T18.order_id where T18.order_status_code = \"Cancelled\" )"
    },
    {
        "question": "How many sections does each course has ?",
        "db_id": "college_1",
        "gold_parse": "SELECT count(*) ,  crs_code FROM CLASS GROUP BY crs_code",
        "predicted_parse_with_values": "select count ( * ) , CRS_CODE from COURSE group by CRS_CODE"
    },
    {
        "question": "How many times did Boston Red Stockings lose in 2009 postseason ?",
        "db_id": "baseball_1",
        "gold_parse": "SELECT count(*) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_loser  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' AND T1.year = 2009",
        "predicted_parse_with_values": "select count ( T2.wins ) from team as T1 join postseason as T2 where T2.year = 1989 and T1.year = 2006"
    },
    {
        "question": "How many documents correspond with each project id ?",
        "db_id": "cre_Docs_and_Epenses",
        "gold_parse": "SELECT project_id ,  count(*) FROM Documents GROUP BY project_id",
        "predicted_parse_with_values": "select Project_ID , count ( * ) from Projects group by Project_ID"
    },
    {
        "question": "what states have a capital that is the highest point in the state",
        "db_id": "geo",
        "gold_parse": "SELECT t1.state_name FROM state AS t1 JOIN highlow AS t2 ON t1.capital  =  t2.highest_point",
        "predicted_parse_with_values": "select T1.capital from state as T1 join highlow as T2 on T1.state_name = T2.state_name order by T2.highest_point desc limit 1"
    },
    {
        "question": "what is the most dense state in the usa",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM state WHERE density  =  ( SELECT MAX ( density ) FROM state )",
        "predicted_parse_with_values": "select density from state where country_name = \"dummy value\" order by density desc limit 1"
    },
    {
        "question": "What are card ids , customer ids , card types , and card numbers for each customer card ?",
        "db_id": "customers_card_transactions",
        "gold_parse": "SELECT card_id ,  customer_id ,  card_type_code ,  card_number FROM Customers_cards",
        "predicted_parse_with_values": "select card_id , customer_id , card_number , card_number from Customers_Cards"
    },
    {
        "question": "What is the title and id of the film that has the greatest number of copies in inventory ?",
        "db_id": "sakila_1",
        "gold_parse": "SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select T2.title , T2.film_id from inventory as T1 join film_text as T2 join film as T3 on T1.film_id = T3.film_id group by T1.film_id order by sum ( T3.rating ) desc limit 1"
    },
    {
        "question": "From the trip record , find the number of unique bikes .",
        "db_id": "bike_1",
        "gold_parse": "SELECT count(DISTINCT bike_id) FROM trip",
        "predicted_parse_with_values": "select count ( id ) from trip"
    },
    {
        "question": "Find the producers of all movies in which \" Kate Winslet \" is an actor",
        "db_id": "imdb",
        "gold_parse": "SELECT t1.name FROM CAST AS t3 JOIN actor AS t2 ON t3.aid  =  t2.aid JOIN movie AS t5 ON t5.mid  =  t3.msid JOIN made_by AS t4 ON t5.mid  =  t4.msid JOIN producer AS t1 ON t1.pid  =  t4.pid WHERE t2.name  =  \"Kate Winslet\"",
        "predicted_parse_with_values": "select T5.name from actor as T1 join cast as T2 on T1.aid = T2.aid join copyright as T3 on T2.msid = T3.msid join made_by as T4 on T3.msid = T4.msid join producer as T5 on T4.pid = T5.pid where T1.name = \"dummy value\" and T1.name = \"dummy value\""
    },
    {
        "question": "What are the descriptions of the categories that products with product descriptions that contain the letter t are in ?",
        "db_id": "products_gen_characteristics",
        "gold_parse": "SELECT T1.product_category_description FROM ref_product_categories AS T1 JOIN products AS T2 ON T1.product_category_code  =  T2.product_category_code WHERE T2.product_description LIKE '%t%'",
        "predicted_parse_with_values": "select T1.product_category_description from Ref_Product_Categories as T1 join Products as T2 on T1.product_category_code = T2.product_category_code where T2.product_name like \"flax\""
    },
    {
        "question": "return me the papers on PVLDB .",
        "db_id": "academic",
        "gold_parse": "SELECT t2.title FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\"",
        "predicted_parse_with_values": "select T2.title from organization as T1 join publication as T2 where T1.name = \"dummy value\""
    },
    {
        "question": "What are the codes and names of the cheapest products in each category ?",
        "db_id": "manufactory_1",
        "gold_parse": "SELECT code ,  name ,  min(price) FROM products GROUP BY name",
        "predicted_parse_with_values": "select Code , Name , Price from Products order by Price limit 1"
    },
    {
        "question": "Show all ministers who do not belong to Progress Party .",
        "db_id": "party_people",
        "gold_parse": "SELECT minister FROM party WHERE party_name != 'Progress Party'",
        "predicted_parse_with_values": "select Minister from party except select Minister from party where Party_name = 3"
    },
    {
        "question": "how many inhabitants does boulder have",
        "db_id": "geo",
        "gold_parse": "SELECT population FROM city WHERE city_name  =  \"boulder\"",
        "predicted_parse_with_values": "select count ( * ) from mountain where mountain_name = \"dummy value\""
    },
    {
        "question": "Count the number of documents with the type code BK that correspond to each product id .",
        "db_id": "cre_Docs_and_Epenses",
        "gold_parse": "SELECT count(*) ,  project_id FROM Documents WHERE document_type_code  =  \"BK\" GROUP BY project_id",
        "predicted_parse_with_values": "select count ( * ) , count ( * ) from Documents where Document_Type_Code = \"FM\" group by Document_ID"
    },
    {
        "question": "Which players are from Indonesia ?",
        "db_id": "match_season",
        "gold_parse": "SELECT T2.Player FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Country_name  =  \"Indonesia\"",
        "predicted_parse_with_values": "select T1.Player from player as T1 join team as T2 on T1.Team = T2.Team_id join match_season as T3 on T2.Team_id = T3.Team join country as T4 on T3.Country = T4.Country_id where T4.Official_native_language = \"Persian ( Arabic script ) \""
    },
    {
        "question": "How many schools are there in the department ?",
        "db_id": "college_1",
        "gold_parse": "SELECT count(DISTINCT school_code) FROM department",
        "predicted_parse_with_values": "select count ( * ) from DEPARTMENT"
    },
    {
        "question": "What are the names and sum of checking and savings balances for accounts with savings balances higher than the average savings balance ?",
        "db_id": "small_bank_1",
        "gold_parse": "SELECT T1.name ,  T2.balance + T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  >  (SELECT avg(balance) FROM savings)",
        "predicted_parse_with_values": "select T2.name , T1.balance , T3.balance from SAVINGS as T1 join ACCOUNTS as T2 on T1.custid = T2.custid join CHECKING as T3 on T2.custid = T3.custid where T3.balance > ( select avg ( balance ) from CHECKING )"
    },
    {
        "question": "return me the area of PVLDB .",
        "db_id": "academic",
        "gold_parse": "SELECT t3.name FROM DOMAIN AS t3 JOIN domain_journal AS t1 ON t3.did  =  t1.did JOIN journal AS t2 ON t2.jid  =  t1.jid WHERE t2.name  =  \"PVLDB\"",
        "predicted_parse_with_values": "select oid from organization where name = \"dummy value\""
    },
    {
        "question": "What are the first names of students , ordered by age from greatest to least ?",
        "db_id": "college_3",
        "gold_parse": "SELECT Fname FROM STUDENT ORDER BY Age DESC",
        "predicted_parse_with_values": "select Fname from Student order by Age asc"
    },
    {
        "question": "what states border kentucky",
        "db_id": "geo",
        "gold_parse": "SELECT border FROM border_info WHERE state_name  =  \"kentucky\"",
        "predicted_parse_with_values": "select border from border_info where border = \"dummy value\""
    },
    {
        "question": "What is the sport with the most scholarship students ?",
        "db_id": "game_1",
        "gold_parse": "SELECT sportname FROM Sportsinfo WHERE onscholarship  =  'Y' GROUP BY sportname ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select SportName from SportsInfo group by SportName order by count ( * ) desc limit 1"
    },
    {
        "question": "Show the number of male and female assistant professors .",
        "db_id": "activity_1",
        "gold_parse": "SELECT sex ,  count(*) FROM Faculty WHERE rank  =  \"AsstProf\" GROUP BY sex",
        "predicted_parse_with_values": "select count ( * ) , Lname from Faculty where Sex = \"F\" and Lname = \"Meyer\" )"
    },
    {
        "question": "What is the total number of people who has no friend living in the city of Austin .",
        "db_id": "network_2",
        "gold_parse": "SELECT count(DISTINCT name) FROM PersonFriend WHERE friend NOT IN (SELECT name FROM person WHERE city  =  'Austin')",
        "predicted_parse_with_values": "select count ( * ) from Person where name not in ( select T2.name from Person as T1 join PersonFriend as T2 on T1.name = T2.friend where T1.city = \"new york city\" )"
    },
    {
        "question": "What are the names and genders of staff who have held the title Sales Person , but never Clerical Staff ?",
        "db_id": "department_store",
        "gold_parse": "SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Sales Person\" EXCEPT SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Clerical Staff\"",
        "predicted_parse_with_values": "select staff_name , staff_gender from Staff where staff_id not in ( select T2.staff_id from Staff as T1 join Staff_Department_Assignments as T2 on T1.staff_id = T2.staff_id where T1.staff_name = \"Vanessa\" )"
    },
    {
        "question": "What are the distinct last names of the students who have president votes and have 8741 as the advisor ?",
        "db_id": "voter_2",
        "gold_parse": "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  PRESIDENT_Vote INTERSECT SELECT DISTINCT LName FROM STUDENT WHERE Advisor  =  \"8741\"",
        "predicted_parse_with_values": "select T2.LName from Voting_record as T1 join Student as T2 on T1.Class_Senator_Vote = T2.StuID where T1.Class_President_Vote = 1001 and T2.Advisor = 5718"
    },
    {
        "question": "what is the state with the largest density in usa",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM state WHERE density  =  ( SELECT MAX ( density ) FROM state )",
        "predicted_parse_with_values": "select T1.state_name from border_info as T1 join state as T2 on T1.border = T2.state_name where T2.population = ( select max ( density ) from state where state_name = \"dummy value\" )"
    },
    {
        "question": "What are the method , date and amount of each payment ? Sort the list in ascending order of date .",
        "db_id": "insurance_policies",
        "gold_parse": "SELECT Payment_Method_Code ,  Date_Payment_Made ,  Amount_Payment FROM Payments ORDER BY Date_Payment_Made ASC",
        "predicted_parse_with_values": "select Payment_Method_Code , Date_Payment_Made , Amount_Payment from Payments order by Amount_Payment"
    },
    {
        "question": "Which papers have the substring \" Database \" in their titles ? Show the titles of the papers .",
        "db_id": "icfp_1",
        "gold_parse": "SELECT title FROM papers WHERE title LIKE \"%Database%\"",
        "predicted_parse_with_values": "select paperID from Papers where title like \"An Equivalence-Preserving CPS Translation via Multi-Language Semantics\""
    },
    {
        "question": "return me the number of keywords .",
        "db_id": "academic",
        "gold_parse": "SELECT COUNT ( DISTINCT keyword ) FROM keyword",
        "predicted_parse_with_values": "select count ( * ) from keyword"
    },
    {
        "question": "Give the full name and customer id of the customer with the fewest accounts .",
        "db_id": "customers_card_transactions",
        "gold_parse": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1",
        "predicted_parse_with_values": "select T1.customer_first_name , T1.customer_first_name , T1.customer_id from Customers as T1 join Accounts as T2 group by T2.customer_id order by count ( * ) asc limit 1"
    },
    {
        "question": "where is springfield",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM city WHERE city_name  =  \"springfield\"",
        "predicted_parse_with_values": "select city_name from city where city_name = \"dummy value\""
    },
    {
        "question": "what is the total length of all rivers in the usa",
        "db_id": "geo",
        "gold_parse": "SELECT SUM ( LENGTH ) FROM river",
        "predicted_parse_with_values": "select sum ( length ) from river where country_name = \"dummy value\""
    },
    {
        "question": "which state has the longest river",
        "db_id": "geo",
        "gold_parse": "SELECT traverse FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river )",
        "predicted_parse_with_values": "select T2.state_name from river as T1 join state as T2 on T1.traverse = T2.state_name order by T1.length desc limit 1"
    },
    {
        "question": "How many players enter hall of fame each year ?",
        "db_id": "baseball_1",
        "gold_parse": "SELECT yearid ,  count(*) FROM hall_of_fame GROUP BY yearid",
        "predicted_parse_with_values": "select count ( * ) , T1.yearid from hall_of_fame as T1 join player as T2 on T1.player_id = T2.player_id group by T1.yearid"
    },
    {
        "question": "What are the ids of products from the supplier with id 2 , which are more expensive than the average price across all products ?",
        "db_id": "department_store",
        "gold_parse": "SELECT T1.product_id FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id  =  T2.product_id WHERE T1.supplier_id  =  2 AND T2.product_price  >  (SELECT avg(product_price) FROM products)",
        "predicted_parse_with_values": "select T2.product_id from Products as T1 join Product_Suppliers as T2 on T1.product_id = T2.product_id where T1.product_price > ( select avg ( total_value_purchased ) from Product_Suppliers )"
    },
    {
        "question": "what is the largest state that borders the state with the highest population",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state WHERE state_name IN ( SELECT state_name FROM border_info WHERE border IN ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state ) ) ) ) AND state_name IN ( SELECT state_name FROM border_info WHERE border IN ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state ) ) )",
        "predicted_parse_with_values": "select T1.state_name from border_info as T1 join state as T2 on T1.border = T2.state_name order by T2.population desc limit 1"
    },
    {
        "question": "return me the conference , which have the most number of papers by \" H. V. Jagadish \" .",
        "db_id": "academic",
        "gold_parse": "SELECT t2.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" GROUP BY t2.name ORDER BY COUNT ( DISTINCT t4.title ) DESC LIMIT 1",
        "predicted_parse_with_values": "select T1.name , domain_T1.did from conference as T1 join domain_conference as T2 on T1.cid = T2.cid join publication as T3 on T1.cid = T3.cid join writes as T4 on T3.pid = T4.pid join author as T5 on T4.aid = T5.aid where T5.name = \"dummy value\" group by T1.name order by count ( * ) desc limit 1"
    },
    {
        "question": "What is the average bike availablility for stations not in Palo Alto ?",
        "db_id": "bike_1",
        "gold_parse": "SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  \"Palo Alto\")",
        "predicted_parse_with_values": "select avg ( T2.mean_visibility_miles ) from station as T1 join weather as T2 where T1.city != \"Mountain View\""
    },
    {
        "question": "For each delegate , find the names of the party they are part of .",
        "db_id": "election",
        "gold_parse": "SELECT T1.Delegate ,  T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID",
        "predicted_parse_with_values": "select Party from party"
    },
    {
        "question": "How many sections does course ACCT-211 has ?",
        "db_id": "college_1",
        "gold_parse": "SELECT count(DISTINCT class_section) FROM CLASS WHERE crs_code  =  'ACCT-211'",
        "predicted_parse_with_values": "select count ( * ) from COURSE where CRS_CODE = \"ACCT-211\""
    },
    {
        "question": "Show the status of the city that has hosted the greatest number of competitions .",
        "db_id": "farm",
        "gold_parse": "SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select Status from city group by Status order by count ( * ) desc limit 1"
    },
    {
        "question": "Find the address line 1 and 2 of the customer with email \" vbogisich @ example.org \" .",
        "db_id": "customer_complaints",
        "gold_parse": "SELECT address_line_1 ,  address_line_2 FROM customers WHERE email_address  =  \"vbogisich@example.org\"",
        "predicted_parse_with_values": "select address_line_1 , address_line_2 from Customers where email_address = \"rzulauf@example.org\" and email_address = \"paige.hyatt@example.com\""
    },
    {
        "question": "Select the name and price of the cheapest product .",
        "db_id": "manufactory_1",
        "gold_parse": "SELECT name ,  price FROM Products ORDER BY price ASC LIMIT 1",
        "predicted_parse_with_values": "select Name , Price from Products order by Price limit 1"
    },
    {
        "question": "How many king beds are there ?",
        "db_id": "inn_1",
        "gold_parse": "SELECT sum(beds) FROM Rooms WHERE bedtype  =  'King'",
        "predicted_parse_with_values": "select count ( * ) from Rooms where roomName = \"Interim but salutary\""
    },
    {
        "question": "Show all church names that have hosted least two weddings .",
        "db_id": "wedding",
        "gold_parse": "SELECT T1.name FROM church AS T1 JOIN wedding AS T2 ON T1.church_id  =  T2.church_id GROUP BY T1.church_id HAVING count(*)  >=  2",
        "predicted_parse_with_values": "select Name from church group by Name having count ( * ) >= 1"
    },
    {
        "question": "Among all the claims , which claims have a claimed amount larger than the average ? List the date the claim was made and the date it was settled .",
        "db_id": "insurance_policies",
        "gold_parse": "SELECT Date_Claim_Made ,  Date_Claim_Settled FROM Claims WHERE Amount_Claimed  >  ( SELECT avg(Amount_Claimed) FROM Claims )",
        "predicted_parse_with_values": "select Date_Claim_Made , Date_Claim_Settled from Claims where Amount_Settled > ( select avg ( Amount_Settled ) from Claims )"
    },
    {
        "question": "what is the biggest city in the us",
        "db_id": "geo",
        "gold_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city )",
        "predicted_parse_with_values": "select city_name from city where country_name = \"dummy value\" order by population desc limit 1"
    },
    {
        "question": "what are the top 3 highest support rates ?",
        "db_id": "candidate_poll",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "predicted_parse_with_values": "select Oppose_rate from candidate order by Support_rate desc limit 1"
    },
    {
        "question": "Return the product type , name , and price for products supplied by supplier 3 .",
        "db_id": "department_store",
        "gold_parse": "SELECT T2.product_type_code ,  T2.product_name ,  T2.product_price FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id  =  T2.product_id WHERE T1.supplier_id  =  3",
        "predicted_parse_with_values": "select T1.product_type_code , T1.product_name , T1.product_price from Products as T1 join Product_Suppliers as T2 on T1.product_id = T2.product_id join Suppliers as T3 on T2.supplier_id = T3.supplier_id where T3.supplier_name = \"Tesco\""
    },
    {
        "question": "What is the average longitude of stations that never had bike availability more than 10 ?",
        "db_id": "bike_1",
        "gold_parse": "SELECT avg(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING max(bikes_available)  >  10)",
        "predicted_parse_with_values": "select avg ( long ) from station where id not in ( select station_id from status where bikes_available > 17 )"
    },
    {
        "question": "Select the name and price of all products with a price larger than or equal to $ 180 , and sort first by price ( in descending order ) , and then by name ( in ascending order ) .",
        "db_id": "manufactory_1",
        "gold_parse": "SELECT name ,  price FROM products WHERE price  >=  180 ORDER BY price DESC ,  name ASC",
        "predicted_parse_with_values": "select Name , Price from Products where Price > ( select min ( Price ) from Products ) order by Price desc"
    },
    {
        "question": "Retrieve the country that has published the most papers .",
        "db_id": "icfp_1",
        "gold_parse": "SELECT t1.country FROM inst AS t1 JOIN authorship AS t2 ON t1.instid  =  t2.instid JOIN papers AS t3 ON t2.paperid  =  t3.paperid GROUP BY t1.country ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select T1.country , count ( * ) from Inst as T1 join Authorship as T2 on T1.instID = T2.instID join Papers as T3 on T2.paperID = T3.paperID group by T1.country order by count ( * ) desc limit 1"
    },
    {
        "question": "List the names of all genres in alphabetical oder , together with its ratings .",
        "db_id": "music_1",
        "gold_parse": "SELECT g_name ,  rating FROM genre ORDER BY g_name",
        "predicted_parse_with_values": "select g_name , rating from genre where g_name = \"pop\""
    },
    {
        "question": "Which film has the most copies in the inventory ? List both title and id .",
        "db_id": "sakila_1",
        "gold_parse": "SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select T1.title , T2.film_id from film_text as T1 join film as T2 group by T2.film_id order by count ( * ) desc limit 1"
    },
    {
        "question": "What are the names of the songs that do not have back vocals ?",
        "db_id": "music_2",
        "gold_parse": "SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  \"back\"",
        "predicted_parse_with_values": "select Title from Songs where SongId not in ( select SongId from Vocals where Type = \"dummy value\" )"
    },
    {
        "question": "What is the maximum and minimum resolution of all songs that are approximately 3 minutes long ?",
        "db_id": "music_1",
        "gold_parse": "SELECT max(T2.resolution) ,  min(T2.resolution) FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.duration LIKE \"3:%\"",
        "predicted_parse_with_values": "select max ( resolution ) , min ( resolution ) from song where resolution < 1080"
    },
    {
        "question": "Find the number of routes with destination airports in Italy .",
        "db_id": "flight_4",
        "gold_parse": "SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid WHERE T2.country  =  'Italy'",
        "predicted_parse_with_values": "select count ( * ) from routes where dst_ap = \"GPT\""
    },
    {
        "question": "Find all movies featuring \" Woody Strode \" and \" Jason Robards \"",
        "db_id": "imdb",
        "gold_parse": "SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid  =  t1.aid JOIN movie AS t4 ON t4.mid  =  t5.msid JOIN CAST AS t3 ON t4.mid  =  t3.msid JOIN actor AS t2 ON t3.aid  =  t2.aid WHERE t1.name  =  \"Woody Strode\" AND t2.name  =  \"Jason Robards\"",
        "predicted_parse_with_values": "select T2.title from actor as T1 join movie as T2 where T1.name = \"dummy value\" intersect select T4.title from actor as T3 join movie as T4 where T3.name = \"dummy value\""
    },
    {
        "question": "Find the description and credit for the course QM-261 ?",
        "db_id": "college_1",
        "gold_parse": "SELECT crs_credit ,  crs_description FROM course WHERE crs_code  =  'QM-261'",
        "predicted_parse_with_values": "select CRS_DESCRIPTION , CRS_CREDIT from COURSE where CRS_CODE = \"CIS-220\""
    },
    {
        "question": "What are the names of all females who are friends with Zach ?",
        "db_id": "network_2",
        "gold_parse": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Zach' AND T1.gender  =  'female'",
        "predicted_parse_with_values": "select T2.name from PersonFriend as T1 join Person as T2 on T1.friend = T2.name where T1.friend = \"Zach\""
    },
    {
        "question": "What are the names of tourist attraction that Alison visited but Rosalind did not visit ?",
        "db_id": "cre_Theme_park",
        "gold_parse": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Alison\" EXCEPT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Rosalind\"",
        "predicted_parse_with_values": "select Name from Tourist_Attractions where Name = \"cafe\" except select Name from Tourist_Attractions where Name = \"UK gallery\""
    },
    {
        "question": "What are the maximum and minumum grade points ?",
        "db_id": "college_3",
        "gold_parse": "SELECT max(gradepoint) ,  min(gradepoint) FROM GRADECONVERSION",
        "predicted_parse_with_values": "select max ( T2.gradepoint ) , T1.Grade from Enrolled_in as T1 join Gradeconversion as T2 on T1.Grade = T2.lettergrade where T1.Grade = \"C-\""
    },
    {
        "question": "How many instruments does the song \" Le Pop \" use ?",
        "db_id": "music_2",
        "gold_parse": "SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Le Pop\"",
        "predicted_parse_with_values": "select T2.Instrument from Songs as T1 join Instruments as T2 on T1.SongId = T2.SongId where T1.Title = \"dummy value\""
    },
    {
        "question": "What are the names of the colleges that are larger than at least one college in Florida ?",
        "db_id": "soccer_2",
        "gold_parse": "SELECT DISTINCT cName FROM college WHERE enr  >  (SELECT min(enr) FROM college WHERE state  =  'FL')",
        "predicted_parse_with_values": "select cName from College where enr > ( select max ( enr ) from College where state = \"FL\" )"
    },
    {
        "question": "Find all movies written and produced by \" Woody Allen \"",
        "db_id": "imdb",
        "gold_parse": "SELECT t2.title FROM movie AS t2 JOIN made_by AS t3 ON t2.mid  =  t3.msid JOIN producer AS t1 ON t1.pid  =  t3.pid JOIN written_by AS t5 ON t5.msid  =  t2.mid JOIN writer AS t4 ON t5.wid  =  t4.wid WHERE t1.name  =  \"Woody Allen\" AND t4.name  =  \"Woody Allen\"",
        "predicted_parse_with_values": "select T2.title , T2.title from actor as T1 join movie as T2 where T1.name = \"dummy value\""
    },
    {
        "question": "Which Payments were processed with Visa ? List the payment Id , the date and the amount .",
        "db_id": "insurance_policies",
        "gold_parse": "SELECT Payment_ID ,  Date_Payment_Made ,  Amount_Payment FROM Payments WHERE Payment_Method_Code  =  'Visa'",
        "predicted_parse_with_values": "select Payment_ID , Date_Payment_Made from Payments where Payment_ID = 886"
    },
    {
        "question": "what are all the rivers in illinois",
        "db_id": "geo",
        "gold_parse": "SELECT river_name FROM river WHERE traverse  =  \"illinois\"",
        "predicted_parse_with_values": "select T1.river_name from river as T1 join state as T2 on T1.traverse = T2.state_name where T2.state_name = \"dummy value\""
    },
    {
        "question": "Find the number of students whose age is older than the average age for each gender .",
        "db_id": "dorm_1",
        "gold_parse": "SELECT count(*) ,  sex FROM student WHERE age  >  (SELECT avg(age) FROM student) GROUP BY sex",
        "predicted_parse_with_values": "select count ( * ) , T3.gender from Student as T1 join Lives_in as T2 on T1.StuID = T2.stuid join Dorm as T3 on T2.dormid = T3.dormid where T1.Age > ( select avg ( T4.Age ) from Student as T4 join Lives_in as T5 on T4.StuID = T5.stuid join Dorm as T6 on T5.dormid = T6.dormid ) , T6.gender group by T6.gender"
    },
    {
        "question": "Count the number of customers that have an email containing \" gmail.com \" .",
        "db_id": "chinook_1",
        "gold_parse": "SELECT COUNT(*) FROM CUSTOMER WHERE Email LIKE \"%gmail.com%\"",
        "predicted_parse_with_values": "select count ( CustomerId ) from Customer where Email like \"robbrown@shaw.ca\""
    },
    {
        "question": "how many people are in the state of california",
        "db_id": "geo",
        "gold_parse": "SELECT population FROM state WHERE state_name  =  \"california\"",
        "predicted_parse_with_values": "select count ( * ) from state where state_name = \"dummy value\""
    },
    {
        "question": "What is the name of the hardware product with the greatest price ?",
        "db_id": "department_store",
        "gold_parse": "SELECT product_name FROM products WHERE product_type_code  =  'Hardware' ORDER BY product_price DESC LIMIT 1",
        "predicted_parse_with_values": "select product_name from Products order by product_price desc limit 1"
    },
    {
        "question": "return me the keyword , which have been contained by the most number of papers by \" H. V. Jagadish \" .",
        "db_id": "academic",
        "gold_parse": "SELECT t1.keyword FROM publication_keyword AS t5 JOIN keyword AS t1 ON t5.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t3.pid JOIN author AS t2 ON t4.aid  =  t2.aid WHERE t2.name  =  \"H. V. Jagadish\" GROUP BY t1.keyword ORDER BY COUNT ( DISTINCT t3.title ) DESC LIMIT 1",
        "predicted_parse_with_values": "select T1.keyword , count ( * ) from keyword as T1 join publication_keyword as T2 on T1.kid = T2.kid join publication as T3 on T2.pid = T3.pid join cite as T4 on T3.pid = T4.citing where T4.cited = \"dummy value\" group by T1.keyword order by count ( * ) desc limit 1"
    },
    {
        "question": "What is the average length in feet of the bridges ?",
        "db_id": "architecture",
        "gold_parse": "SELECT avg(length_feet) FROM bridge",
        "predicted_parse_with_values": "select avg ( length_meters ) from bridge"
    },
    {
        "question": "what is the highest mountain in texas",
        "db_id": "geo",
        "gold_parse": "SELECT highest_point FROM highlow WHERE state_name  =  \"texas\"",
        "predicted_parse_with_values": "select T1.mountain_altitude from mountain as T1 join state as T2 on T1.state_name = T2.state_name join highlow as T3 on T2.state_name = T3.state_name where T1.state_name = \"dummy value\" order by T3.highest_elevation desc limit 1"
    },
    {
        "question": "What is the name of department where has the smallest number of professors ?",
        "db_id": "college_1",
        "gold_parse": "SELECT T2.dept_name FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) LIMIT 1",
        "predicted_parse_with_values": "select T1.DEPT_NAME from DEPARTMENT as T1 join PROFESSOR as T2 on T1.DEPT_CODE = T2.DEPT_CODE group by T2.DEPT_CODE order by count ( * ) desc limit 1"
    },
    {
        "question": "What is the maximum Online Mendelian Inheritance in Man ( OMIM ) value of the enzymes ?",
        "db_id": "medicine_enzyme_interaction",
        "gold_parse": "SELECT max(OMIM) FROM enzyme",
        "predicted_parse_with_values": "select max ( OMIM ) from enzyme where OMIM = 600923"
    },
    {
        "question": "What is the first and last name of the students who are not in the largest major ?",
        "db_id": "dorm_1",
        "gold_parse": "SELECT fname ,  lname FROM student WHERE major != (SELECT major FROM student GROUP BY major ORDER BY count(*) DESC LIMIT 1)",
        "predicted_parse_with_values": "select Fname , LName from Student where Major != ( select StuID from Student order by Major desc limit 1 )"
    },
    {
        "question": "What are the numbers of all flights that can cover a distance of more than 2000 ?",
        "db_id": "flight_1",
        "gold_parse": "SELECT flno FROM Flight WHERE distance  >  2000",
        "predicted_parse_with_values": "select count ( * ) from flight where distance > 2551"
    },
    {
        "question": "What are the different first names and highest degree attained for professors teaching in the Computer Information Systems department ?",
        "db_id": "college_1",
        "gold_parse": "SELECT DISTINCT T2.emp_fname ,  T3.prof_high_degree FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN professor AS T3 ON T2.emp_num  =  T3.emp_num JOIN department AS T4 ON T4.dept_code  =  T3.dept_code WHERE T4.dept_name  =  'Computer Info. Systems'",
        "predicted_parse_with_values": "select T1.STU_FNAME , T3.PROF_HIGH_DEGREE from STUDENT as T1 join DEPARTMENT as T2 on T1.DEPT_CODE = T2.DEPT_CODE join PROFESSOR as T3 on T2.DEPT_CODE = T3.DEPT_CODE where T3.DEPT_CODE = \"ECON/FIN\""
    },
    {
        "question": "What are the date , mean temperature and mean humidity for the top 3 days with the largest max gust speeds ?",
        "db_id": "bike_1",
        "gold_parse": "SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3",
        "predicted_parse_with_values": "select date , max_temperature_f , mean_humidity from weather order by max_humidity desc limit 1"
    },
    {
        "question": "What are the ids of songs that are available in either mp4 format or have resolution above 720 ?",
        "db_id": "music_1",
        "gold_parse": "SELECT f_id FROM files WHERE formats  =  \"mp4\" UNION SELECT f_id FROM song WHERE resolution  >  720",
        "predicted_parse_with_values": "select T1.f_id from song as T1 join files as T2 on T1.f_id = T2.f_id where T2.formats = \"mp3\" or T1.resolution > 512"
    },
    {
        "question": "what state borders kentucky",
        "db_id": "geo",
        "gold_parse": "SELECT border FROM border_info WHERE state_name  =  \"kentucky\"",
        "predicted_parse_with_values": "select border from border_info where border = \"dummy value\""
    },
    {
        "question": "What is the average distance and price for all flights from LA ?",
        "db_id": "flight_1",
        "gold_parse": "SELECT avg(distance) ,  avg(price) FROM Flight WHERE origin  =  \"Los Angeles\"",
        "predicted_parse_with_values": "select avg ( distance ) , avg ( price ) from flight where destination = \"Honolulu\""
    },
    {
        "question": "Show the church names for the weddings of all people older than 30 .",
        "db_id": "wedding",
        "gold_parse": "SELECT T4.name FROM wedding AS T1 JOIN people AS T2 ON T1.male_id  =  T2.people_id JOIN people AS T3 ON T1.female_id  =  T3.people_id JOIN church AS T4 ON T4.church_id  =  T1.church_id WHERE T2.age  >  30 OR T3.age  >  30",
        "predicted_parse_with_values": "select T1.Name from church as T1 join wedding as T2 on T1.Church_ID = T2.Church_ID join people as T3 on T2.Female_ID = T3.People_ID where T3.Age > 25"
    },
    {
        "question": "Find the list of distinct ranks for faculty .",
        "db_id": "activity_1",
        "gold_parse": "SELECT DISTINCT rank FROM Faculty",
        "predicted_parse_with_values": "select count ( Rank ) from Faculty"
    },
    {
        "question": "How many songs were released for each format ?",
        "db_id": "music_1",
        "gold_parse": "SELECT count(*) ,  formats FROM files GROUP BY formats",
        "predicted_parse_with_values": "select count ( * ) , T2.formats from song as T1 join files as T2 on T1.f_id = T2.f_id group by T2.formats"
    },
    {
        "question": "what capital has the largest population",
        "db_id": "geo",
        "gold_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( t1.population ) FROM state AS t2 JOIN city AS t1 ON t2.capital  =  t1.city_name )",
        "predicted_parse_with_values": "select T2.capital from city as T1 join state as T2 on T1.state_name = T2.state_name order by T1.population desc limit 1"
    },
    {
        "question": "Which customer 's name contains \" Alex \" ? Find the full name .",
        "db_id": "customers_and_addresses",
        "gold_parse": "SELECT customer_name FROM customers WHERE customer_name LIKE \"%Alex%\"",
        "predicted_parse_with_values": "select customer_name , customer_name from Customers where customer_name like \"Eunice Morar\""
    },
    {
        "question": "Give the hometowns from which two or more gymnasts are from .",
        "db_id": "gymnast",
        "gold_parse": "SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown HAVING COUNT(*)  >=  2",
        "predicted_parse_with_values": "select T2.Hometown from gymnast as T1 join people as T2 on T1.Gymnast_ID = T2.People_ID group by T2.Hometown having count ( * ) >= 1"
    },
    {
        "question": "Find each student 's first name .",
        "db_id": "club_1",
        "gold_parse": "SELECT DISTINCT fname FROM student",
        "predicted_parse_with_values": "select Fname from Student"
    },
    {
        "question": "Find the classrooms in which grade 4 is studying .",
        "db_id": "student_1",
        "gold_parse": "SELECT DISTINCT classroom FROM list WHERE grade  =  4",
        "predicted_parse_with_values": "select Classroom from list where Grade = 1"
    },
    {
        "question": "Find the states where have some college students in tryout .",
        "db_id": "soccer_2",
        "gold_parse": "SELECT DISTINCT state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName",
        "predicted_parse_with_values": "select state from College"
    },
    {
        "question": "Find the claimed amount in the claim with the least amount settled . Show both the settlement amount and claim amount .",
        "db_id": "insurance_policies",
        "gold_parse": "SELECT Amount_Settled ,  Amount_Claimed FROM Claims ORDER BY Amount_Settled ASC LIMIT 1",
        "predicted_parse_with_values": "select Amount_Claimed , Amount_Settled from Claims order by Amount_Settled limit 1"
    },
    {
        "question": "What are the first name and last name of the players who were paid salary by team Washington Nationals in both 2005 and 2007 ?",
        "db_id": "baseball_1",
        "gold_parse": "SELECT T2.name_first ,  T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = 2005 AND T3.name = 'Washington Nationals' INTERSECT SELECT T2.name_first , T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = 2007 AND T3.name = 'Washington Nationals'",
        "predicted_parse_with_values": "select T2.name_first , T2.name_last from salary as T1 join player as T2 where T1.year = 1989 intersect select T4.name_first , T4.name_last from salary as T3 join player as T4 where T3.year = 2010"
    },
    {
        "question": "Find the name of all students who were in the tryout sorted in alphabetic order .",
        "db_id": "soccer_2",
        "gold_parse": "SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID ORDER BY T1.pName",
        "predicted_parse_with_values": "select T3.pName from College as T1 join Tryout as T2 on T1.cName = T2.cName join Player as T3 on T2.pID = T3.pID order by T1.enr"
    },
    {
        "question": "Show the name for regions and the number of storms for each region .",
        "db_id": "storm_record",
        "gold_parse": "SELECT T1.region_name ,  count(*) FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id",
        "predicted_parse_with_values": "select Region_name , count ( * ) from region group by Region_name"
    },
    {
        "question": "What are the first names of the professors who do not play Canoeing or Kayaking as activities ?",
        "db_id": "activity_1",
        "gold_parse": "SELECT lname FROM faculty WHERE rank  =  'Professor' EXCEPT SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' OR T3.activity_name  =  'Kayaking'",
        "predicted_parse_with_values": "select Fname from Faculty except select T3.Fname from Activity as T1 join Faculty_Participates_in as T2 on T1.actid = T2.actid join Faculty as T3 on T2.FacID = T3.FacID where T1.activity_name = \"Bungee Jumping\""
    },
    {
        "question": "What are the medicine and trade names that can interact as an inhibitor and activitor with enzymes ?",
        "db_id": "medicine_enzyme_interaction",
        "gold_parse": "SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'inhibitor' INTERSECT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'activitor'",
        "predicted_parse_with_values": "select name , Trade_Name from medicine"
    },
    {
        "question": "Who are the players that have names containing the letter a ?",
        "db_id": "soccer_2",
        "gold_parse": "SELECT DISTINCT pName FROM Player WHERE pName LIKE '%a%'",
        "predicted_parse_with_values": "select pName from Player where pName like \"Eddie\""
    },
    {
        "question": "What is ids of the songs whose resolution is higher than the average resolution of songs in modern genre ?",
        "db_id": "music_1",
        "gold_parse": "SELECT f_id FROM song WHERE resolution  >  (SELECT avg(resolution) FROM song WHERE genre_is  =  \"modern\")",
        "predicted_parse_with_values": "select f_id from song where resolution > ( select avg ( T1.resolution ) from song as T1 join genre as T2 on T1.genre_is = T2.g_name where T2.g_name = \"blues\" )"
    },
    {
        "question": "Show the budget type code and description and the corresponding document id .",
        "db_id": "cre_Docs_and_Epenses",
        "gold_parse": "SELECT T2.budget_type_code ,  T2.budget_type_description ,  T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code  =  T2.budget_type_code",
        "predicted_parse_with_values": "select T1.Budget_Type_Code , T1.Budget_Type_Description , T3.Document_Description from Ref_Budget_Codes as T1 join Documents_with_Expenses as T2 on T1.Budget_Type_Code = T2.Budget_Type_Code join Documents as T3 on T2.Document_ID = T3.Document_ID"
    },
    {
        "question": "how many people live in the united states",
        "db_id": "geo",
        "gold_parse": "SELECT SUM ( population ) FROM state",
        "predicted_parse_with_values": "select count ( * ) from state where country_name = \"dummy value\""
    },
    {
        "question": "how many rivers are there in idaho",
        "db_id": "geo",
        "gold_parse": "SELECT COUNT ( river_name ) FROM river WHERE traverse  =  \"idaho\"",
        "predicted_parse_with_values": "select count ( * ) from river as T1 join state as T2 on T1.traverse = T2.state_name where T2.state_name = \"dummy value\""
    },
    {
        "question": "return me the number of authors who have papers in PVLDB .",
        "db_id": "academic",
        "gold_parse": "SELECT COUNT ( DISTINCT t1.name ) FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"PVLDB\"",
        "predicted_parse_with_values": "select count ( T2.pid ) from organization as T1 join writes as T2 where T1.name = \"dummy value\""
    },
    {
        "question": "what is the largest state traversed by the rio grande river",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"rio grande\" ) ) AND state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"rio grande\" )",
        "predicted_parse_with_values": "select T3.state_name from river as T1 join state as T2 on T1.traverse = T2.state_name join border_info as T3 on T2.state_name = T3.border where T1.river_name = \"dummy value\" order by T2.density desc limit 1"
    },
    {
        "question": "How many male and female assistant professors do we have ?",
        "db_id": "activity_1",
        "gold_parse": "SELECT sex ,  count(*) FROM Faculty WHERE rank  =  \"AsstProf\" GROUP BY sex",
        "predicted_parse_with_values": "select count ( * ) , Lname from Faculty where Sex = \"M\" and Lname = \"James\" group by Rank order by count ( * ) desc"
    },
    {
        "question": "What are the names of the different artists that have produced a song in English but have never receieved a rating higher than 8 ?",
        "db_id": "music_1",
        "gold_parse": "SELECT DISTINCT artist_name FROM song WHERE languages  =  \"english\" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating  >  8",
        "predicted_parse_with_values": "select artist_name from song where languages = \"bangla\" except select artist_name from song where rating > 7"
    },
    {
        "question": "What was the date of the earliest payment ?",
        "db_id": "sakila_1",
        "gold_parse": "SELECT payment_date FROM payment ORDER BY payment_date ASC LIMIT 1",
        "predicted_parse_with_values": "select payment_date from payment order by amount limit 1"
    },
    {
        "question": "which state has the highest peak in the country",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM mountain WHERE mountain_altitude  =  ( SELECT MAX ( mountain_altitude ) FROM mountain )",
        "predicted_parse_with_values": "select T1.state_name from mountain as T1 join state as T2 on T1.state_name = T2.state_name join highlow as T3 on T2.state_name = T3.state_name order by T3.highest_elevation desc limit 1"
    },
    {
        "question": "What are all the instruments used ?",
        "db_id": "music_2",
        "gold_parse": "SELECT DISTINCT instrument FROM Instruments",
        "predicted_parse_with_values": "select Instrument from Instruments"
    },
    {
        "question": "How many times the number of adults and kids staying in a room reached the maximum capacity of the room ?",
        "db_id": "inn_1",
        "gold_parse": "SELECT count(*) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE T2.maxOccupancy  =  T1.Adults + T1.Kids",
        "predicted_parse_with_values": "select count ( * ) , T2.Kids from Rooms as T1 join Reservations as T2 on T1.RoomId = T2.Room group by T1.roomName order by count ( * ) desc limit 1"
    },
    {
        "question": "What is the last name of the author that has published the most papers ?",
        "db_id": "icfp_1",
        "gold_parse": "SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid GROUP BY t1.fname ,  t1.lname ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select lname , lname from Authors group by authID order by count ( * ) desc limit 1"
    },
    {
        "question": "Select the name of each manufacturer along with the name and price of its most expensive product .",
        "db_id": "manufactory_1",
        "gold_parse": "SELECT T1.Name ,  max(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name",
        "predicted_parse_with_values": "select T1.Name , T2.Price , T2.Price from Manufacturers as T1 join Products as T2 on T1.Code = T2.Manufacturer order by T2.Price desc limit 1"
    },
    {
        "question": "where is massachusetts",
        "db_id": "geo",
        "gold_parse": "SELECT country_name FROM state WHERE state_name  =  \"massachusetts\"",
        "predicted_parse_with_values": "select area from state where state_name = \"dummy value\""
    },
    {
        "question": "Which authors did not submit to any workshop ?",
        "db_id": "workshop_paper",
        "gold_parse": "SELECT Author FROM submission WHERE Submission_ID NOT IN (SELECT Submission_ID FROM acceptance)",
        "predicted_parse_with_values": "select Author from submission except select Author from submission"
    },
    {
        "question": "Return the titles and directors of films that were never in the market of China .",
        "db_id": "film_rank",
        "gold_parse": "SELECT title ,  director FROM film WHERE film_id NOT IN (SELECT film_id FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.market_id  =  T2.Market_ID WHERE country  =  'China')",
        "predicted_parse_with_values": "select Title , Director from film except select T1.Title , T1.Director from film as T1 join film_market_estimation as T2 on T1.Film_ID = T2.Film_ID join market as T3 on T2.Market_ID = T3.Market_ID where T3.Country = \"France\""
    },
    {
        "question": "What are the names and types of the dorms that have a capacity greater than 300 or less than 100 ?",
        "db_id": "dorm_1",
        "gold_parse": "SELECT dorm_name ,  gender FROM dorm WHERE student_capacity  >  300 OR student_capacity  <  100",
        "predicted_parse_with_values": "select dorm_name , dormid from Dorm where student_capacity > 400 or student_capacity < 355"
    },
    {
        "question": "return me the number of papers by \" H. V. Jagadish \" on VLDB conference after 2000 .",
        "db_id": "academic",
        "gold_parse": "SELECT COUNT ( DISTINCT t4.title ) FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" AND t2.name  =  \"VLDB\" AND t4.year  >  2000",
        "predicted_parse_with_values": "select count ( * ) from conference as T1 join publication as T2 on T1.cid = T2.cid where T1.name = \"dummy value\" and T2.year > \"dummy value\" and T2.year > \"dummy value\""
    },
    {
        "question": "what is the population density of the state with the smallest population",
        "db_id": "geo",
        "gold_parse": "SELECT density FROM state WHERE population  =  ( SELECT MIN ( population ) FROM state )",
        "predicted_parse_with_values": "select density from state order by population asc limit 1"
    },
    {
        "question": "What is the first name of the student whose last name starting with the letter S and is taking ACCT-211 class ?",
        "db_id": "college_1",
        "gold_parse": "SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code WHERE T3.crs_code  =  'ACCT-211' AND T1.stu_lname LIKE 'S%'",
        "predicted_parse_with_values": "select STU_FNAME from STUDENT where STU_LNAME like \"Robertson\" and STU_INIT = \"P\""
    },
    {
        "question": "How many unique classes are offered ?",
        "db_id": "college_1",
        "gold_parse": "SELECT count(DISTINCT class_code) FROM CLASS",
        "predicted_parse_with_values": "select count ( ( ) )"
    },
    {
        "question": "which is the density of the state that the largest river in the united states runs through",
        "db_id": "geo",
        "gold_parse": "SELECT density FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river ) )",
        "predicted_parse_with_values": "select T2.density from river as T1 join state as T2 on T1.traverse = T2.state_name where T1.river_name = \"dummy value\" order by T2.population desc limit 1"
    },
    {
        "question": "Find the list of cities that no customer is living in .",
        "db_id": "customers_and_addresses",
        "gold_parse": "SELECT city FROM addresses WHERE city NOT IN ( SELECT DISTINCT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id)",
        "predicted_parse_with_values": "select city from Addresses except select city from Addresses"
    },
    {
        "question": "what are the populations of the states through which the mississippi river run",
        "db_id": "geo",
        "gold_parse": "SELECT population FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" )",
        "predicted_parse_with_values": "select T2.population from river as T1 join state as T2 on T1.traverse = T2.state_name where T1.river_name = \"dummy value\""
    },
    {
        "question": "List all club names in ascending order of start year .",
        "db_id": "sports_competition",
        "gold_parse": "SELECT name FROM club ORDER BY Start_year ASC",
        "predicted_parse_with_values": "select name from club order by Start_year"
    },
    {
        "question": "What is the number of routes whose destinations are Italian airports ?",
        "db_id": "flight_4",
        "gold_parse": "SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid WHERE T2.country  =  'Italy'",
        "predicted_parse_with_values": "select count ( * ) from routes where dst_ap = \"GRR\""
    },
    {
        "question": "what state has the highest population",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state )",
        "predicted_parse_with_values": "select state_name from state order by population desc limit 1"
    },
    {
        "question": "Show ids for all aircrafts with more than 1000 distance .",
        "db_id": "flight_1",
        "gold_parse": "SELECT aid FROM Aircraft WHERE distance  >  1000",
        "predicted_parse_with_values": "select name from aircraft where distance > 2605"
    },
    {
        "question": "What is the name , latitude , and city of the station that is located the furthest South ?",
        "db_id": "bike_1",
        "gold_parse": "SELECT name ,  lat ,  city FROM station ORDER BY lat LIMIT 1",
        "predicted_parse_with_values": "select name , lat , city from station order by long desc limit 1"
    },
    {
        "question": "What is the name and capacity of the dorm with the fewest amount of amenities ?",
        "db_id": "dorm_1",
        "gold_parse": "SELECT T1.dorm_name ,  T1.student_capacity FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid GROUP BY T2.dormid ORDER BY count(*) LIMIT 1",
        "predicted_parse_with_values": "select dorm_name , student_capacity , student_capacity from Dorm group by dormid order by count ( * ) desc limit 1"
    },
    {
        "question": "what are major rivers in illinois",
        "db_id": "geo",
        "gold_parse": "SELECT river_name FROM river WHERE LENGTH  >  750 AND traverse  =  \"illinois\"",
        "predicted_parse_with_values": "select T1.river_name from river as T1 join state as T2 on T1.traverse = T2.state_name where T2.state_name = \"dummy value\""
    },
    {
        "question": "Count the number of male students who had class senator votes in the fall election cycle .",
        "db_id": "voter_2",
        "gold_parse": "SELECT count(*) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  Class_Senator_Vote WHERE T1.Sex  =  \"M\" AND T2.Election_Cycle  =  \"Fall\"",
        "predicted_parse_with_values": "select count ( * ) from Voting_record where Class_Senator_Vote = 1028 and Class_Senator_Vote = 1028"
    },
    {
        "question": "Find the details of the shops that can be reached by walk .",
        "db_id": "cre_Theme_park",
        "gold_parse": "SELECT T1.Shop_Details FROM SHOPS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Shop_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  \"walk\"",
        "predicted_parse_with_values": "select Shop_Details from Shops"
    },
    {
        "question": "Find the name of the person who has no student friends .",
        "db_id": "network_2",
        "gold_parse": "SELECT name FROM person EXCEPT SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.job  =  'student'",
        "predicted_parse_with_values": "select name from Person where name not in ( select name from PersonFriend )"
    },
    {
        "question": "Please list support , consider , and oppose rates for each candidate in ascending order by unsure rate .",
        "db_id": "candidate_poll",
        "gold_parse": "SELECT Support_rate ,  Consider_rate ,  Oppose_rate FROM candidate ORDER BY unsure_rate",
        "predicted_parse_with_values": "select T1.Name , T2.Oppose_rate , T2.Oppose_rate from people as T1 join candidate as T2 on T1.People_ID = T2.People_ID order by T2.Unsure_rate asc"
    },
    {
        "question": "Find the name and checking balance of the account with the lowest saving balance .",
        "db_id": "small_bank_1",
        "gold_parse": "SELECT T2.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1",
        "predicted_parse_with_values": "select T2.name , T3.balance from SAVINGS as T1 join ACCOUNTS as T2 on T1.custid = T2.custid join CHECKING as T3 on T2.custid = T3.custid order by T1.balance limit 1"
    },
    {
        "question": "What are the different states that had students successfully try out ?",
        "db_id": "soccer_2",
        "gold_parse": "SELECT DISTINCT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.decision  =  'yes'",
        "predicted_parse_with_values": "select state from College"
    },
    {
        "question": "What is the full name of the staff member who has rented a film to a customer with the first name April and the last name Burns ?",
        "db_id": "sakila_1",
        "gold_parse": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM staff AS T1 JOIN rental AS T2 ON T1.staff_id  =  T2.staff_id JOIN customer AS T3 ON T2.customer_id  =  T3.customer_id WHERE T3.first_name  =  'APRIL' AND T3.last_name  =  'BURNS'",
        "predicted_parse_with_values": "select T6.first_name , T1.last_name from staff as T1 join store as T2 on T1.staff_id = T2.manager_staff_id join inventory as T3 on T2.store_id = T3.store_id join film as T4 on T3.film_id = T4.film_id join film_actor as T5 on T4.film_id = T5.film_id join actor as T6 on T5.actor_id = T6.actor_id where T1.first_name = \"dummy value\" and T4.release_year = 2006"
    },
    {
        "question": "what is the capital of the state with the largest population density",
        "db_id": "geo",
        "gold_parse": "SELECT DISTINCT capital FROM state WHERE density  =  ( SELECT MAX ( density ) FROM state )",
        "predicted_parse_with_values": "select capital from state order by density desc limit 1"
    },
    {
        "question": "Tell me the the date when the first claim was made .",
        "db_id": "insurance_policies",
        "gold_parse": "SELECT Date_Claim_Made FROM Claims ORDER BY Date_Claim_Made ASC LIMIT 1",
        "predicted_parse_with_values": "select Date_Claim_Made from Claims where Date_Claim_Made = ( select max ( Date_Claim_Made ) from Claims )"
    },
    {
        "question": "Show all party names and the number of members in each party .",
        "db_id": "party_people",
        "gold_parse": "SELECT T2.party_name ,  count(*) FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id",
        "predicted_parse_with_values": "select Party_name , count ( * ) from party group by Party_name"
    },
    {
        "question": "Find the average price of all product clothes .",
        "db_id": "department_store",
        "gold_parse": "SELECT avg(product_price) FROM products WHERE product_type_code  =  'Clothes'",
        "predicted_parse_with_values": "select avg ( product_price ) from Products"
    },
    {
        "question": "Show institution names along with the number of proteins for each institution .",
        "db_id": "protein_institute",
        "gold_parse": "SELECT T1.institution ,  count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id GROUP BY T1.institution_id",
        "predicted_parse_with_values": "select T2.Institution , count ( * ) from protein as T1 join Institution as T2 on T1.Institution_id = T2.Institution_id group by T1.Institution_id"
    },
    {
        "question": "Find the number of adults for the room reserved and checked in by CONRAD SELBIG on Oct 23 , 2010 .",
        "db_id": "inn_1",
        "gold_parse": "SELECT Adults FROM Reservations WHERE CheckIn  =  \"2010-10-23\" AND FirstName  =  \"CONRAD\" AND LastName  =  \"SELBIG\"",
        "predicted_parse_with_values": "select count ( * ) , CheckIn from Reservations where FirstName = \"JACKIE\" and LastName = \"MECHLING\" group by CheckIn"
    },
    {
        "question": "How many people are older than every engineer ?",
        "db_id": "network_2",
        "gold_parse": "SELECT count(*) FROM Person WHERE age  >  (SELECT max(age) FROM person WHERE job  =  'engineer')",
        "predicted_parse_with_values": "select count ( * ) from Person where age > ( select min ( age ) from Person )"
    },
    {
        "question": "Who belong to the institution \" University of Oxford \" ? Show the first names and last names .",
        "db_id": "icfp_1",
        "gold_parse": "SELECT DISTINCT t1.fname ,  t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"University of Oxford\"",
        "predicted_parse_with_values": "select T1.fname , T1.lname from Authors as T1 join Authorship as T2 on T1.authID = T2.authID join Inst as T3 on T2.instID = T3.instID where T3.name = \"Google\""
    },
    {
        "question": "Which friend of Zach has the longest-lasting friendship ?",
        "db_id": "network_2",
        "gold_parse": "SELECT friend FROM PersonFriend WHERE name =  'Zach' AND YEAR  =  (SELECT max(YEAR) FROM PersonFriend WHERE name =  'Zach')",
        "predicted_parse_with_values": "select friend from PersonFriend where name = \"Bob\" order by year desc limit 1"
    },
    {
        "question": "What is the name of the customer that has purchased the most items ?",
        "db_id": "customers_and_addresses",
        "gold_parse": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) DESC LIMIT 1",
        "predicted_parse_with_values": "select customer_name from Customers group by customer_id order by count ( * ) desc limit 1"
    },
    {
        "question": "In which state is the college that Charles attends ?",
        "db_id": "soccer_2",
        "gold_parse": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName JOIN player AS T3 ON T2.pID  =  T3.pID WHERE T3.pName  =  'Charles'",
        "predicted_parse_with_values": "select state from College where cName = \"ASU\""
    },
    {
        "question": "Return the full name and id of the actor or actress who starred in the greatest number of films .",
        "db_id": "sakila_1",
        "gold_parse": "SELECT T2.first_name ,  T2.last_name ,  T2.actor_id FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id  =  T2.actor_id GROUP BY T2.actor_id ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select T2.first_name , T2.last_name , T1.actor_id from film_actor as T1 join actor as T2 on T1.actor_id = T2.actor_id group by T1.actor_id order by count ( * ) desc limit 1"
    },
    {
        "question": "Which city has the lowest GDP ? Please list the city name and its GDP .",
        "db_id": "city_record",
        "gold_parse": "SELECT city ,  GDP FROM city ORDER BY GDP LIMIT 1",
        "predicted_parse_with_values": "select City , City from city order by GDP limit 1"
    },
    {
        "question": "return me all the papers in PVLDB after 2000 in \" University of Michigan \" .",
        "db_id": "academic",
        "gold_parse": "SELECT t5.title FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t4 ON t4.aid  =  t1.aid JOIN publication AS t5 ON t4.pid  =  t5.pid JOIN journal AS t3 ON t5.jid  =  t3.jid WHERE t3.name  =  \"PVLDB\" AND t2.name  =  \"University of Michigan\" AND t5.year  >  2000",
        "predicted_parse_with_values": "select jid from publication where year > \"dummy value\" and year > \"dummy value\""
    },
    {
        "question": "List all of the ids for left-footed players with a height between 180cm and 190cm .",
        "db_id": "soccer_1",
        "gold_parse": "SELECT player_api_id FROM Player WHERE height  >=  180 AND height  <=  190 INTERSECT SELECT player_api_id FROM Player_Attributes WHERE preferred_foot  =  \"left\"",
        "predicted_parse_with_values": "select T1.id from Player_Attributes as T1 join Player as T2 on T1.player_api_id = T2.player_api_id where T2.height between 185.42 and value"
    },
    {
        "question": "Find the product names that are colored 'white ' but do not have unit of measurement \" Handful \" .",
        "db_id": "products_gen_characteristics",
        "gold_parse": "SELECT t1.product_name FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code JOIN ref_colors AS t3 ON t1.color_code  =  t3.color_code WHERE t3.color_description  =  \"white\" AND t2.unit_of_measure != \"Handful\"",
        "predicted_parse_with_values": "select product_name from Products where color_code = 9 except select T2.product_name from Ref_Product_Categories as T1 join Products as T2 on T1.product_category_code = T2.product_category_code where T1.unit_of_measure = \"Handful \""
    },
    {
        "question": "Which people severed as governor most frequently ?",
        "db_id": "election",
        "gold_parse": "SELECT Governor FROM party GROUP BY Governor ORDER BY COUNT(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select Lieutenant_Governor from party group by Governor order by count ( * ) desc limit 1"
    },
    {
        "question": "Return the claim start date for the claims whose claimed amount is no more than the average",
        "db_id": "insurance_policies",
        "gold_parse": "SELECT Date_Claim_Made FROM Claims WHERE Amount_Settled  <=  ( SELECT avg(Amount_Settled) FROM Claims )",
        "predicted_parse_with_values": "select Date_Claim_Made from Claims where Amount_Claimed < ( select avg ( Amount_Claimed ) from Claims )"
    },
    {
        "question": "what is the state with the highest elevation in the united states",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM highlow WHERE highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow )",
        "predicted_parse_with_values": "select T1.state_name from border_info as T1 join state as T2 on T1.border = T2.state_name join mountain as T3 on T2.state_name = T3.state_name join highlow as T4 on T2.state_name = T4.state_name where T3.country_name = \"dummy value\" order by T4.highest_elevation desc limit 1"
    },
    {
        "question": "how many people live in the state with the largest population density",
        "db_id": "geo",
        "gold_parse": "SELECT population FROM state WHERE density  =  ( SELECT MAX ( density ) FROM state )",
        "predicted_parse_with_values": "select count ( * ) from state order by density desc limit 1"
    },
    {
        "question": "which state borders kentucky",
        "db_id": "geo",
        "gold_parse": "SELECT border FROM border_info WHERE state_name  =  \"kentucky\"",
        "predicted_parse_with_values": "select state_name from border_info where border = \"dummy value\""
    },
    {
        "question": "Find the max , average , and minimum gpa of all students in each department .",
        "db_id": "college_1",
        "gold_parse": "SELECT max(stu_gpa) ,  avg(stu_gpa) ,  min(stu_gpa) ,  dept_code FROM student GROUP BY dept_code",
        "predicted_parse_with_values": "select max ( STU_GPA ) , min ( STU_GPA ) , avg ( STU_GPA ) , min ( STU_GPA ) from STUDENT"
    },
    {
        "question": "What are the names of the states that have some college students playing in the positions of goalie and mid-field ?",
        "db_id": "soccer_2",
        "gold_parse": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie' INTERSECT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid'",
        "predicted_parse_with_values": "select state from College where enr = 22000 intersect select T2.state from Tryout as T1 join College as T2 on T1.cName = T2.cName where T1.pPos = \"striker\""
    },
    {
        "question": "Show names of musicals and the number of actors who have appeared in the musicals .",
        "db_id": "musical",
        "gold_parse": "SELECT T2.Name ,  COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID",
        "predicted_parse_with_values": "select Name , count ( * ) from musical group by Musical_ID"
    },
    {
        "question": "Which authors belong to the institution \" Google \" ? Show the first names and last names .",
        "db_id": "icfp_1",
        "gold_parse": "SELECT DISTINCT t1.fname ,  t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Google\"",
        "predicted_parse_with_values": "select T1.fname , T1.lname from Authors as T1 join Authorship as T2 on T1.authID = T2.authID join Inst as T3 on T2.instID = T3.instID where T3.name = \"INRIA\""
    },
    {
        "question": "Show the names and ages of editors and the theme of journals for which they serve on committees , in ascending alphabetical order of theme .",
        "db_id": "journal_committee",
        "gold_parse": "SELECT T2.Name ,  T2.age ,  T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID ORDER BY T3.Theme ASC",
        "predicted_parse_with_values": "select T1.Name , T1.Age , T3.Theme from editor as T1 join journal_committee as T2 on T1.Editor_ID = T2.Editor_ID join journal as T3 on T2.Journal_ID = T3.Journal_ID order by T1.Age"
    },
    {
        "question": "Find the names of departments that are either in division AS or in division EN and in Building NEB .",
        "db_id": "college_3",
        "gold_parse": "SELECT DName FROM DEPARTMENT WHERE Division  =  \"AS\" UNION SELECT DName FROM DEPARTMENT WHERE Division  =  \"EN\" AND Building  =  \"NEB\"",
        "predicted_parse_with_values": "select DName from Department where Division = \"AS\" and Building = \"Krieger\" union select DName from Department where Division = \"AS\" and Division = \"EN\""
    },
    {
        "question": "What are the distinct first names for students with a grade point of 3.8 or above in at least one course ?",
        "db_id": "college_3",
        "gold_parse": "SELECT DISTINCT T3.Fname FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T2.gradepoint  >=  3.8",
        "predicted_parse_with_values": "select T1.Fname from Student as T1 join Enrolled_in as T2 on T1.StuID = T2.StuID join Gradeconversion as T3 on T2.Grade = T3.lettergrade where T3.gradepoint = 1.7"
    },
    {
        "question": "Tell me the total quantity of products bought by the customer called \" Rodrick Heaney \" .",
        "db_id": "customers_and_addresses",
        "gold_parse": "SELECT sum(t3.order_quantity) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t1.customer_name  =  \"Rodrick Heaney\"",
        "predicted_parse_with_values": "select sum ( T1.order_quantity ) from Order_Items as T1 join Customer_Orders as T2 on T1.order_id = T2.order_id join Customers as T3 on T2.customer_id = T3.customer_id where T3.customer_name = \"Kitty Padberg III\" and T3.customer_name = \"Prof. Ibrahim Bashirian\""
    },
    {
        "question": "how many states have major rivers",
        "db_id": "geo",
        "gold_parse": "SELECT COUNT ( traverse ) FROM river WHERE LENGTH  >  750",
        "predicted_parse_with_values": "select count ( T2.state_name ) from river as T1 join lake as T2 where T1.river_name = \"dummy value\""
    },
    {
        "question": "Show the card type codes and the number of transactions .",
        "db_id": "customers_card_transactions",
        "gold_parse": "SELECT T2.card_type_code ,  count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id  =  T2.card_id GROUP BY T2.card_type_code",
        "predicted_parse_with_values": "select T2.card_type_code , count ( * ) from Financial_Transactions as T1 join Customers_Cards as T2 on T1.card_id = T2.card_id group by T2.card_type_code"
    },
    {
        "question": "Show the names of counties that have at least two delegates .",
        "db_id": "election",
        "gold_parse": "SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id HAVING COUNT(*)  >=  2",
        "predicted_parse_with_values": "select County_name from county group by County_name having count ( * ) >= 1"
    },
    {
        "question": "Return the ids of all products that were ordered more than three times or supplied more than 80000 .",
        "db_id": "department_store",
        "gold_parse": "SELECT product_id FROM Order_Items GROUP BY product_id HAVING count(*)  >  3 UNION SELECT product_id FROM Product_Suppliers GROUP BY product_id HAVING sum(total_amount_purchased)  >  80000",
        "predicted_parse_with_values": "select T1.product_id from Products as T1 join Order_Items as T2 on T1.product_id = T2.product_id group by T2.order_item_id having count ( * ) > 1 union select T4.product_id , T4.product_id from Products as T3 join Order_Items as T4 on T3.product_id = T4.product_id where T3.product_price > 971.44"
    },
    {
        "question": "What are the distinct billing countries of the invoices ?",
        "db_id": "chinook_1",
        "gold_parse": "SELECT distinct(BillingCountry) FROM INVOICE",
        "predicted_parse_with_values": "select BillingCountry from Invoice"
    },
    {
        "question": "Which players won awards in both 1960 and 1961 ? Return their first names and last names .",
        "db_id": "baseball_1",
        "gold_parse": "SELECT T1.name_first , T1.name_last FROM player AS T1 JOIN player_award AS T2 WHERE T2.year  =  1960 INTERSECT SELECT T1.name_first , T1.name_last FROM player AS T1 JOIN player_award AS T2 WHERE T2.year  =  1961",
        "predicted_parse_with_values": "select name_first , name_last from player where birth_year = 1904 intersect select name_first , name_last from player where birth_year = 1835"
    },
    {
        "question": "For each airport name , how many routes start at that airport ?",
        "db_id": "flight_4",
        "gold_parse": "SELECT count(*) ,  T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T1.name",
        "predicted_parse_with_values": "select T2.name , count ( * ) from routes as T1 join airports as T2 on T1.src_apid = T2.apid group by T2.name"
    },
    {
        "question": "find the highest support percentage , lowest consider rate and oppose rate of all candidates .",
        "db_id": "candidate_poll",
        "gold_parse": "SELECT max(support_rate) ,  min(consider_rate) ,  min(oppose_rate) FROM candidate",
        "predicted_parse_with_values": "select max ( Consider_rate ) , min ( Oppose_rate ) from candidate"
    },
    {
        "question": "How many Professors are in building NEB ?",
        "db_id": "activity_1",
        "gold_parse": "SELECT count(*) FROM Faculty WHERE Rank  =  \"Professor\" AND building  =  \"NEB\"",
        "predicted_parse_with_values": "select count ( * ) from Faculty where Building = \"NEB\""
    },
    {
        "question": "How many songs have vocals of type lead ?",
        "db_id": "music_2",
        "gold_parse": "SELECT count(DISTINCT title) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE TYPE  =  \"lead\"",
        "predicted_parse_with_values": "select count ( * ) from Vocals as T1 join Songs as T2 on T1.SongId = T2.SongId where T1.Type = \"dummy value\""
    },
    {
        "question": "What are the names of all singers that are from the UK and released a song in English ?",
        "db_id": "music_1",
        "gold_parse": "SELECT artist_name FROM artist WHERE country  =  \"UK\" INTERSECT SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  \"english\"",
        "predicted_parse_with_values": "select T2.artist_name from song as T1 join artist as T2 on T1.artist_name = T2.artist_name where T1.country = \"UK\" and T1.languages = \"english\""
    },
    {
        "question": "What are the names and account balances for customers who have taken a total amount of more than 5000 in loans ?",
        "db_id": "loan_1",
        "gold_parse": "SELECT T1.cust_name ,  T1.acc_type FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING sum(T2.amount)  >  5000",
        "predicted_parse_with_values": "select T3.cust_name , sum ( T1.amount ) from loan as T1 join bank as T2 on T1.branch_ID = T2.branch_ID join customer as T3 on T2.branch_ID = T3.branch_ID where T3.no_of_loans > 0 group by T3.cust_name"
    },
    {
        "question": "What is the name of member in charge of greatest number of events ?",
        "db_id": "party_people",
        "gold_parse": "SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id  =  T2.member_in_charge_id GROUP BY T2.member_in_charge_id ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select Member_Name from member group by Member_Name order by count ( * ) desc limit 1"
    },
    {
        "question": "How many documents have expenses ?",
        "db_id": "cre_Docs_and_Epenses",
        "gold_parse": "SELECT count(*) FROM Documents_with_expenses",
        "predicted_parse_with_values": "select count ( ( ) )"
    },
    {
        "question": "Show the average and maximum damage for all storms with max speed higher than 1000 .",
        "db_id": "storm_record",
        "gold_parse": "SELECT avg(damage_millions_USD) ,  max(damage_millions_USD) FROM storm WHERE max_speed  >  1000",
        "predicted_parse_with_values": "select avg ( Max_speed ) , max ( Max_speed ) from storm where Max_speed > 961"
    },
    {
        "question": "what are the rivers in the state of illinois",
        "db_id": "geo",
        "gold_parse": "SELECT river_name FROM river WHERE traverse  =  \"illinois\"",
        "predicted_parse_with_values": "select T1.river_name from river as T1 join state as T2 on T1.traverse = T2.state_name where T2.state_name = \"dummy value\""
    },
    {
        "question": "Give the state corresponding to the line number building \" 6862 Kaitlyn Knolls \" .",
        "db_id": "e_government",
        "gold_parse": "SELECT state_province_county FROM addresses WHERE line_1_number_building LIKE \"%6862 Kaitlyn Knolls%\"",
        "predicted_parse_with_values": "select state_province_county from Addresses where line_1_number_building = \"6862 Kaitlyn Knolls Suite 309\""
    },
    {
        "question": "What are the different pilot names who had piloted a flight in the country 'United States ' or in the airport named 'Billund Airport ' ?",
        "db_id": "flight_company",
        "gold_parse": "SELECT DISTINCT T2.pilot FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id WHERE T1.country  =  'United States' OR T1.name  =  'Billund Airport'",
        "predicted_parse_with_values": "select T2.Pilot from airport as T1 join flight as T2 on T1.id = T2.airport_id where T1.Country = \"Denmark\" or T1.Country = \"Iceland\""
    },
    {
        "question": "Show the institution type with an institution founded after 1990 and an institution with at least 1000 enrollment .",
        "db_id": "protein_institute",
        "gold_parse": "SELECT TYPE FROM institution WHERE founded  >  1990 AND enrollment  >=  1000",
        "predicted_parse_with_values": "select Type from Institution where Enrollment > 1200 group by Type having count ( * ) >= 1"
    },
    {
        "question": "What is the name of the media type that is least common across all tracks ?",
        "db_id": "chinook_1",
        "gold_parse": "SELECT T1.Name FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId  =  T2.MediaTypeId GROUP BY T2.MediaTypeId ORDER BY COUNT(*) ASC LIMIT 1",
        "predicted_parse_with_values": "select T2.Name from Track as T1 join MediaType as T2 on T1.MediaTypeId = T2.MediaTypeId group by T1.MediaTypeId order by count ( * ) asc limit 1"
    },
    {
        "question": "what is the largest city in the smallest state in the usa",
        "db_id": "geo",
        "gold_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state ) ) ) AND state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state ) )",
        "predicted_parse_with_values": "select T1.city_name from city as T1 join state as T2 on T1.state_name = T2.state_name where T1.state_name = \"dummy value\" order by T2.density limit 1"
    },
    {
        "question": "What are the first and last name of the author who published the paper titled \" Nameless , Painless \" ?",
        "db_id": "icfp_1",
        "gold_parse": "SELECT t1.fname ,  t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title  =  \"Nameless ,  Painless\"",
        "predicted_parse_with_values": "select T1.fname , T1.lname , T3.paperID from Authors as T1 join Authorship as T2 on T1.authID = T2.authID join Papers as T3 on T2.paperID = T3.paperID where T3.title = \"Proving the Unique Fixed-Point Principle Correct: An Adventure with Category Theory\""
    },
    {
        "question": "What are the names of the three artists who have produced the most songs , and how many works did they produce ?",
        "db_id": "music_1",
        "gold_parse": "SELECT T1.artist_name ,  count(*) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name GROUP BY T2.artist_name ORDER BY count(*) DESC LIMIT 3",
        "predicted_parse_with_values": "select artist_name , count ( * ) from song group by artist_name order by count ( * ) desc limit 1"
    },
    {
        "question": "Find the details of all the markets that are accessible by walk or bus .",
        "db_id": "cre_Theme_park",
        "gold_parse": "SELECT T1.Market_Details FROM Street_Markets AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Market_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  \"walk\" OR  T2.How_to_Get_There  =  \"bus\"",
        "predicted_parse_with_values": "select Market_Details from Street_Markets where Market_ID in ( select T1.Market_ID from Street_Markets as T1 join Tourist_Attractions as T2 on T1.Market_ID = T2.Tourist_Attraction_ID where T2.How_to_Get_There = \"bus\" or T2.How_to_Get_There = \"shuttle\" )"
    },
    {
        "question": "What is the film title and inventory id of the item in the inventory which was rented most frequently ?",
        "db_id": "sakila_1",
        "gold_parse": "SELECT T1.title ,  T2.inventory_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id JOIN rental AS T3 ON T2.inventory_id  =  T3.inventory_id GROUP BY T2.inventory_id ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select T1.title , T1.film_id from film_text as T1 join rental as T2 group by T2.inventory_id order by count ( * ) desc limit 1"
    },
    {
        "question": "return me the total citations of papers in the VLDB conference before 2005 .",
        "db_id": "academic",
        "gold_parse": "SELECT SUM ( t2.citation_num ) FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" AND t2.year  <  2005",
        "predicted_parse_with_values": "select sum ( T2.jid ) from conference as T1 join publication as T2 on T1.cid = T2.cid where T1.name = \"dummy value\" and T2.year < \"dummy value\""
    },
    {
        "question": "Find the names of the top 10 airlines that operate the most number of routes .",
        "db_id": "flight_4",
        "gold_parse": "SELECT T1.name ,  T2.alid FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T2.alid ORDER BY count(*) DESC LIMIT 10",
        "predicted_parse_with_values": "select name from airlines group by name order by count ( * ) desc limit 1"
    },
    {
        "question": "What are the ids of the faculty members who do not advise any student .",
        "db_id": "activity_1",
        "gold_parse": "SELECT FacID FROM Faculty EXCEPT SELECT advisor FROM Student",
        "predicted_parse_with_values": "select FacID from Faculty except select FacID from Faculty"
    },
    {
        "question": "What are the average height and weight across males ( sex is M ) ?",
        "db_id": "candidate_poll",
        "gold_parse": "SELECT avg(height) ,  avg(weight) FROM people WHERE sex  =  'M'",
        "predicted_parse_with_values": "select avg ( Height ) , Weight from people where Sex = \"F\""
    },
    {
        "question": "Give me the title and highest price for each film .",
        "db_id": "cinema",
        "gold_parse": "SELECT T2.title ,  max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id",
        "predicted_parse_with_values": "select T2.Title , max ( T1.Price ) from schedule as T1 join film as T2 on T1.Film_ID = T2.Film_ID group by T2.Film_ID"
    },
    {
        "question": "How many movies did \" Steven Spielberg \" direct ?",
        "db_id": "imdb",
        "gold_parse": "SELECT COUNT ( DISTINCT t3.title  ) FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.name  =  \"Steven Spielberg\"",
        "predicted_parse_with_values": "select count ( * ) from director where name = \"dummy value\""
    },
    {
        "question": "What are the codes of all the courses that are located in room KLR209 ?",
        "db_id": "college_1",
        "gold_parse": "SELECT class_code FROM CLASS WHERE class_room  =  'KLR209'",
        "predicted_parse_with_values": "select T2.CRS_CODE from CLASS as T1 join COURSE as T2 on T1.CRS_CODE = T2.CRS_CODE where T1.CLASS_ROOM = \"BUS200\""
    },
    {
        "question": "Find the number of students who is older than 20 in each dorm .",
        "db_id": "dorm_1",
        "gold_parse": "SELECT count(*) ,  T3.dorm_name FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T1.age  >  20 GROUP BY T3.dorm_name",
        "predicted_parse_with_values": "select count ( * ) , T3.dorm_name from Student as T1 join Lives_in as T2 on T1.StuID = T2.stuid join Dorm as T3 on T2.dormid = T3.dormid where T1.Age > 18 group by T3.dorm_name"
    },
    {
        "question": "What are the types of vocals that the musician with the first name \" Solveig \" played in the song \" A Bar in Amsterdam \" ?",
        "db_id": "music_2",
        "gold_parse": "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid JOIN band AS T3 ON T1.bandmate  =  T3.id WHERE T3.firstname  =  \"Solveig\" AND T2.title  =  \"A Bar In Amsterdam\"",
        "predicted_parse_with_values": "select T2.Type from Band as T1 join Vocals as T2 on T1.Id = T2.Bandmate join Songs as T3 on T2.SongId = T3.SongId where T1.Firstname = \"dummy value\" and T3.* = 1"
    },
    {
        "question": "Count the number of items store 1 has in stock .",
        "db_id": "sakila_1",
        "gold_parse": "SELECT count(*) FROM inventory WHERE store_id  =  1",
        "predicted_parse_with_values": "select count ( * ) from category as T1 join film_category as T2 on T1.category_id = T2.category_id join film as T3 on T2.film_id = T3.film_id join inventory as T4 on T3.film_id = T4.film_id where T1.name = \"Drama\""
    },
    {
        "question": "what is the state with the largest area",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state )",
        "predicted_parse_with_values": "select state_name from state order by area desc limit 1"
    },
    {
        "question": "Tell me the number of orders with \" Second time \" as order detail .",
        "db_id": "customers_and_addresses",
        "gold_parse": "SELECT count(*) FROM customer_orders WHERE order_details  =  \"Second time\"",
        "predicted_parse_with_values": "select count ( * ) from Customer_Orders where order_status = \"Delivered\""
    },
    {
        "question": "Who acts \" Olivia Pope \" in the series Scandal ?",
        "db_id": "imdb",
        "gold_parse": "SELECT t1.name FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN tv_series AS t2 ON t2.sid  =  t3.msid WHERE t3.role  =  \"Olivia Pope\" AND t2.title  =  \"Scandal\"",
        "predicted_parse_with_values": "select T1.role from cast as T1 join actor as T2 on T1.aid = T2.aid where T2.name = \"dummy value\""
    },
    {
        "question": "what is the elevation of the highest point in the usa",
        "db_id": "geo",
        "gold_parse": "SELECT MAX ( highest_elevation ) FROM highlow",
        "predicted_parse_with_values": "select T1.mountain_altitude from mountain as T1 join state as T2 on T1.state_name = T2.state_name join highlow as T3 on T2.state_name = T3.state_name where T2.country_name = \"dummy value\" order by T3.highest_point desc limit 1"
    },
    {
        "question": "For each zip code , return how many times max wind speed reached 25 ?",
        "db_id": "bike_1",
        "gold_parse": "SELECT zip_code , count(*) FROM weather WHERE max_wind_Speed_mph  >=  25 GROUP BY zip_code",
        "predicted_parse_with_values": "select count ( * ) , T1.zip_code from weather as T1 join status as T2 where T1.max_wind_Speed_mph > 86 group by T1.zip_code"
    },
    {
        "question": "What is the name of the customer who has greatest total loan amount ?",
        "db_id": "loan_1",
        "gold_parse": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount) DESC LIMIT 1",
        "predicted_parse_with_values": "select T3.cust_name from loan as T1 join bank as T2 on T1.branch_ID = T2.branch_ID join customer as T3 on T2.branch_ID = T3.branch_ID order by T1.amount desc limit 1"
    },
    {
        "question": "What is the average latitude and longitude of stations located in San Jose city ?",
        "db_id": "bike_1",
        "gold_parse": "SELECT avg(lat) ,  avg(long) FROM station WHERE city  =  \"San Jose\"",
        "predicted_parse_with_values": "select avg ( long ) , avg ( lat ) from station where city = \"San Francisco\""
    },
    {
        "question": "what are the populations of states through which the mississippi run",
        "db_id": "geo",
        "gold_parse": "SELECT population FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" )",
        "predicted_parse_with_values": "select T2.population from river as T1 join state as T2 on T1.traverse = T2.state_name where T1.river_name = \"dummy value\""
    },
    {
        "question": "Find the id of suppliers whose average amount purchased for each product is above 50000 or below 30000 .",
        "db_id": "department_store",
        "gold_parse": "SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id HAVING avg(total_amount_purchased)  >  50000 OR avg(total_amount_purchased)  <  30000",
        "predicted_parse_with_values": "select product_Suppliers.supplier_id from Product_Suppliers group by product_id having avg ( total_amount_purchased ) > 1 union select product_Suppliers.supplier_id , product_id from Product_Suppliers where total_amount_purchased < \"31862.59\""
    },
    {
        "question": "How many allergies are there ?",
        "db_id": "allergy_1",
        "gold_parse": "SELECT count(DISTINCT allergy) FROM Allergy_type",
        "predicted_parse_with_values": "select count ( * ) from Allergy_Type"
    },
    {
        "question": "Return the names of the regions affected by storms that had a death count of at least 10 .",
        "db_id": "storm_record",
        "gold_parse": "SELECT T2.region_name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T3.number_deaths  >=  10",
        "predicted_parse_with_values": "select Region_name from region group by Region_name having count ( * ) >= 1"
    },
    {
        "question": "what state that borders california is the largest",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"california\" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"california\" )",
        "predicted_parse_with_values": "select T1.state_name from border_info as T1 join state as T2 on T1.border = T2.state_name where T1.border = \"dummy value\" order by T2.density desc limit 1"
    },
    {
        "question": "What is the first name , gpa and phone number of the top 5 students with highest gpa ?",
        "db_id": "college_1",
        "gold_parse": "SELECT stu_gpa ,  stu_phone ,  stu_fname FROM student ORDER BY stu_gpa DESC LIMIT 5",
        "predicted_parse_with_values": "select STU_FNAME , STU_GPA , STU_PHONE from STUDENT order by STU_NUM desc limit 1"
    },
    {
        "question": "What are the ids of documents with the type code CV that do not have expenses .",
        "db_id": "cre_Docs_and_Epenses",
        "gold_parse": "SELECT document_id FROM Documents WHERE document_type_code  =  \"CV\" EXCEPT SELECT document_id FROM Documents_with_expenses",
        "predicted_parse_with_values": "select Document_ID from Documents where Document_Type_Code = \"PP\" except select T1.Document_ID from Documents_with_Expenses as T1 join Documents as T2 on T1.Document_ID = T2.Document_ID where T2.Document_Type_Code = \"FM\""
    },
    {
        "question": "Show the id and star rating of each hotel , ordered by its price from low to high .",
        "db_id": "cre_Theme_park",
        "gold_parse": "SELECT hotel_id ,  star_rating_code FROM HOTELS ORDER BY price_range ASC",
        "predicted_parse_with_values": "select hotel_id , star_rating_code from Hotels order by price_range desc"
    },
    {
        "question": "Find all movies directed by \" Asghar Farhadi \" and featuring \" Taraneh Alidoosti \"",
        "db_id": "imdb",
        "gold_parse": "SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid  =  t1.aid JOIN movie AS t4 ON t4.mid  =  t5.msid JOIN directed_by AS t2 ON t4.mid  =  t2.msid JOIN director AS t3 ON t3.did  =  t2.did WHERE t1.name  =  \"Taraneh Alidoosti\" AND t3.name  =  \"Asghar Farhadi\"",
        "predicted_parse_with_values": "select T2.title from director as T1 join movie as T2 where T1.name = \"dummy value\" and T1.name = \"dummy value\""
    },
    {
        "question": "What are the name of the players who received a card in descending order of the hours of training ?",
        "db_id": "soccer_2",
        "gold_parse": "SELECT pName FROM Player WHERE yCard  =  'yes' ORDER BY HS DESC",
        "predicted_parse_with_values": "select pName from Player order by HS desc"
    },
    {
        "question": "What is the total number of routes for each country and airline in that country ?",
        "db_id": "flight_4",
        "gold_parse": "SELECT T1.country ,  T1.name ,  count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.country ,  T1.name",
        "predicted_parse_with_values": "select count ( * ) , country from airlines group by alid"
    },
    {
        "question": "What are the dates for the documents with both 'GV ' type and 'SF ' type expenses ?",
        "db_id": "cre_Docs_and_Epenses",
        "gold_parse": "SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T2.budget_type_code  =  'GV' INTERSECT SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T2.budget_type_code  =  'SF'",
        "predicted_parse_with_values": "select T1.Document_Date from Documents as T1 join Ref_Document_Types as T2 on T1.Document_Type_Code = T2.Document_Type_Code where T2.Document_Type_Name = \"Film\" intersect select T3.Document_Date from Documents as T3 join Ref_Document_Types as T4 on T3.Document_Type_Code = T4.Document_Type_Code where T4.Document_Type_Name = \"Paper\""
    },
    {
        "question": "Show ids for all documents in type CV without expense budgets .",
        "db_id": "cre_Docs_and_Epenses",
        "gold_parse": "SELECT document_id FROM Documents WHERE document_type_code  =  \"CV\" EXCEPT SELECT document_id FROM Documents_with_expenses",
        "predicted_parse_with_values": "select T2.Document_ID from Documents_with_Expenses as T1 join Documents as T2 on T1.Document_ID = T2.Document_ID where T1.Budget_Type_Code = \"GV\" except select Document_ID from Documents_with_Expenses where Budget_Type_Code = \"SF\""
    },
    {
        "question": "What are the names for tracks without a race in class 'GT ' .",
        "db_id": "race_track",
        "gold_parse": "SELECT name FROM track EXCEPT SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id WHERE T1.class  =  'GT'",
        "predicted_parse_with_values": "select Name from track where Track_ID not in ( select Track_ID from race where Class = \"DP/GT\" )"
    },
    {
        "question": "Find the last name of the individuals that have been contact individuals of an organization .",
        "db_id": "e_government",
        "gold_parse": "SELECT DISTINCT t1.individual_last_name FROM individuals AS t1 JOIN organization_contact_individuals AS t2 ON t1.individual_id  =  t2.individual_id",
        "predicted_parse_with_values": "select individual_last_name from Individuals"
    },
    {
        "question": "Who made the latest order ?",
        "db_id": "customers_and_addresses",
        "gold_parse": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id ORDER BY t2.order_date DESC LIMIT 1",
        "predicted_parse_with_values": "select order_status from Customer_Orders order by order_date desc limit 1"
    },
    {
        "question": "Find the states where have some college students in tryout and their decisions are yes .",
        "db_id": "soccer_2",
        "gold_parse": "SELECT DISTINCT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.decision  =  'yes'",
        "predicted_parse_with_values": "select T2.state , T1.decision from Tryout as T1 join College as T2 on T1.cName = T2.cName where T2.enr = 19000"
    },
    {
        "question": "Return the names and typical buying and selling prices for products that have 'yellow ' as their color description .",
        "db_id": "products_gen_characteristics",
        "gold_parse": "SELECT t1.product_name ,  t1.typical_buying_price ,  t1.typical_selling_price FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"yellow\"",
        "predicted_parse_with_values": "select T1.product_name , T1.typical_buying_price , T1.typical_selling_price from Products as T1 join Ref_Colors as T2 on T1.color_code = T2.color_code where T2.color_description like \"green\""
    },
    {
        "question": "what are the highest points of states surrounding mississippi",
        "db_id": "geo",
        "gold_parse": "SELECT highest_point FROM highlow WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"mississippi\" )",
        "predicted_parse_with_values": "select max ( T2.highest_point ) from state as T1 join highlow as T2 on T1.state_name = T2.state_name where T1.area = \"dummy value\""
    },
    {
        "question": "List in alphabetic order all different amenities .",
        "db_id": "dorm_1",
        "gold_parse": "SELECT amenity_name FROM dorm_amenity ORDER BY amenity_name",
        "predicted_parse_with_values": "select T2.amenid from Dorm_amenity as T1 join Has_amenity as T2 on T1.amenid = T2.amenid order by T1.amenity_name"
    },
    {
        "question": "How many students have each different allergy ?",
        "db_id": "allergy_1",
        "gold_parse": "SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy",
        "predicted_parse_with_values": "select count ( * ) , T1.Allergytype from Allergy_Type as T1 join Has_Allergy as T2 on T1.Allergy = T2.Allergy join Student as T3 on T2.StuID = T3.StuID group by T1.Allergytype"
    },
    {
        "question": "return me the papers of \" H. V. Jagadish \" containing keyword \" User Study \" .",
        "db_id": "academic",
        "gold_parse": "SELECT t5.title FROM publication_keyword AS t3 JOIN keyword AS t1 ON t3.kid  =  t1.kid JOIN publication AS t5 ON t5.pid  =  t3.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t2 ON t4.aid  =  t2.aid WHERE t2.name  =  \"H. V. Jagadish\" AND t1.keyword  =  \"User Study\"",
        "predicted_parse_with_values": "select T1.title from publication as T1 join writes as T2 on T1.pid = T2.pid join author as T3 on T2.aid = T3.aid join domain_author as T4 on T3.aid = T4.aid join domain as T5 on T4.did = T5.did join domain_keyword as T6 on T5.did = T6.did join keyword as T7 on T6.kid = T7.kid where T7.keyword = \"dummy value\""
    },
    {
        "question": "Give the names , details , and data types of characteristics that are not found in any product .",
        "db_id": "products_gen_characteristics",
        "gold_parse": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id",
        "predicted_parse_with_values": "select characteristic_name , other_characteristic_details , characteristic_data_type from Characteristics except select characteristic_name , other_characteristic_details from Characteristics"
    },
    {
        "question": "What are the cities that do not have any branches with more than 100 members ?",
        "db_id": "shop_membership",
        "gold_parse": "SELECT city FROM branch EXCEPT SELECT city FROM branch WHERE membership_amount  >  100",
        "predicted_parse_with_values": "select Hometown from member except select Hometown from member where Name = \"David Jones\""
    },
    {
        "question": "what river runs through illinois",
        "db_id": "geo",
        "gold_parse": "SELECT river_name FROM river WHERE traverse  =  \"illinois\"",
        "predicted_parse_with_values": "select T1.river_name from river as T1 join state as T2 on T1.traverse = T2.state_name where T2.area = \"dummy value\""
    },
    {
        "question": "What are the names of different music genres ?",
        "db_id": "chinook_1",
        "gold_parse": "SELECT Name FROM GENRE",
        "predicted_parse_with_values": "select T3.Name from Album as T1 join Track as T2 on T1.AlbumId = T2.AlbumId join Genre as T3 on T2.GenreId = T3.GenreId where T1.Title = \"G\u00f3recki: Symphony No. 3\""
    },
    {
        "question": "which states adjoin kentucky",
        "db_id": "geo",
        "gold_parse": "SELECT border FROM border_info WHERE state_name  =  \"kentucky\"",
        "predicted_parse_with_values": "select state_name from state where area like \"dummy value\""
    },
    {
        "question": "What is the last name of the artist who sang the most songs ?",
        "db_id": "music_2",
        "gold_parse": "SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId GROUP BY lastname ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select T1.Lastname from Band as T1 join Vocals as T2 on T1.Id = T2.Bandmate group by T2.Bandmate order by count ( * ) desc limit 1"
    },
    {
        "question": "What is the number of routes that end at John F Kennedy International Airport ?",
        "db_id": "flight_4",
        "gold_parse": "SELECT count(*) FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE T1.name  =  'John F Kennedy International Airport'",
        "predicted_parse_with_values": "select count ( * ) from routes where dst_ap = \"RGA\""
    },
    {
        "question": "List how many times the number of people in the room reached the maximum occupancy of the room . The number of people include adults and kids .",
        "db_id": "inn_1",
        "gold_parse": "SELECT count(*) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE T2.maxOccupancy  =  T1.Adults + T1.Kids",
        "predicted_parse_with_values": "select count ( * ) , maxOccupancy from Rooms group by maxOccupancy order by count ( RoomId ) desc limit 1"
    },
    {
        "question": "what is the capital of the state with the most inhabitants",
        "db_id": "geo",
        "gold_parse": "SELECT capital FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state )",
        "predicted_parse_with_values": "select capital from state order by population desc limit 1"
    },
    {
        "question": "Which producer has worked with the most number of directors ?",
        "db_id": "imdb",
        "gold_parse": "SELECT t1.name FROM director AS t3 JOIN directed_by AS t2 ON t3.did  =  t2.did JOIN movie AS t4 ON t4.mid  =  t2.msid JOIN made_by AS t5 ON t4.mid  =  t5.msid JOIN producer AS t1 ON t1.pid  =  t5.pid GROUP BY t1.name ORDER BY COUNT ( DISTINCT t3.name  ) DESC LIMIT 1",
        "predicted_parse_with_values": "select T1.name from producer as T1 join made_by as T2 on T1.pid = T2.pid join copyright as T3 on T2.msid = T3.msid join directed_by as T4 on T3.msid = T4.msid group by T1.name order by count ( * ) desc limit 1"
    },
    {
        "question": "how many people live in the biggest city in alaska state",
        "db_id": "geo",
        "gold_parse": "SELECT population FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name  =  \"alaska\" ) AND state_name  =  \"alaska\"",
        "predicted_parse_with_values": "select count ( * ) from state as T1 join highlow as T2 on T1.state_name = T2.state_name where T1.state_name = \"dummy value\" and T2.highest_elevation = ( select max ( T4.highest_elevation ) from state as T3 join highlow as T4 on T3.state_name = T4.state_name where T3.state_name = \"dummy value\" )"
    },
    {
        "question": "Compute the average price of all products with manufacturer code equal to 2 .",
        "db_id": "manufactory_1",
        "gold_parse": "SELECT avg(price) FROM products WHERE Manufacturer  =  2",
        "predicted_parse_with_values": "select avg ( Price ) from Products where Code = 11"
    },
    {
        "question": "How many credits is the course that the student with the last name Smithson took , and what is its description ?",
        "db_id": "college_1",
        "gold_parse": "SELECT T4.crs_description ,  T4.crs_credit FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T3.stu_num  =  T2.stu_num JOIN course AS T4 ON T4.crs_code  =  T1.crs_code WHERE T3.stu_lname  =  'Smithson'",
        "predicted_parse_with_values": "select sum ( T3.CRS_CREDIT ) , T3.CRS_DESCRIPTION from STUDENT as T1 join DEPARTMENT as T2 on T1.DEPT_CODE = T2.DEPT_CODE join COURSE as T3 on T2.DEPT_CODE = T3.DEPT_CODE where T1.STU_LNAME = \"Brewer\" group by T3.CRS_CODE"
    },
    {
        "question": "Show the customer name , customer address city , date from , and date to for each customer address history .",
        "db_id": "customers_and_products_contacts",
        "gold_parse": "SELECT T2.customer_name ,  T3.city ,  T1.date_from ,  T1.date_to FROM customer_address_history AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id JOIN addresses AS T3 ON T1.address_id  =  T3.address_id",
        "predicted_parse_with_values": "select T1.customer_name , T2.date_from , T2.date_from , T2.date_to from Customers as T1 join Customer_Address_History as T2 on T1.customer_id = T2.customer_id"
    },
    {
        "question": "Which state has the most customers ?",
        "db_id": "customer_complaints",
        "gold_parse": "SELECT state FROM customers GROUP BY state ORDER BY count(*) LIMIT 1",
        "predicted_parse_with_values": "select state from Customers group by state order by count ( * ) desc limit 1"
    },
    {
        "question": "what is the lowest point in iowa",
        "db_id": "geo",
        "gold_parse": "SELECT lowest_point FROM highlow WHERE state_name  =  \"iowa\"",
        "predicted_parse_with_values": "select T2.lowest_point from state as T1 join highlow as T2 on T1.state_name = T2.state_name where T1.state_name = \"dummy value\" order by T2.lowest_point limit 1"
    },
    {
        "question": "return me the paper after 2000 in Databases area with more than 200 citations .",
        "db_id": "academic",
        "gold_parse": "SELECT t3.title FROM DOMAIN AS t2 JOIN domain_publication AS t1 ON t2.did  =  t1.did JOIN publication AS t3 ON t3.pid  =  t1.pid WHERE t2.name  =  \"Databases\" AND t3.citation_num  >  200 AND t3.year  >  2000",
        "predicted_parse_with_values": "select T1.jid from publication as T1 join cite as T2 on T1.pid = T2.citing where T2.cited = \"dummy value\" and T1.year > \"dummy value\""
    },
    {
        "question": "Which papers have \" Stephanie Weirich \" as an author ?",
        "db_id": "icfp_1",
        "gold_parse": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t1.fname  =  \"Stephanie\" AND t1.lname  =  \"Weirich\"",
        "predicted_parse_with_values": "select T3.paperID from Authors as T1 join Authorship as T2 on T1.authID = T2.authID join Papers as T3 on T2.paperID = T3.paperID where T1.fname = \"Amal\""
    },
    {
        "question": "Return the account details with the greatest value , as well as those that include the character 5 .",
        "db_id": "cre_Docs_and_Epenses",
        "gold_parse": "SELECT max(Account_details) FROM Accounts UNION SELECT Account_details FROM Accounts WHERE Account_details LIKE \"%5%\"",
        "predicted_parse_with_values": "select Account_Details from Accounts where Account_Details like \"658.26\" order by Account_Details desc limit 1"
    },
    {
        "question": "How many players are from each country ?",
        "db_id": "match_season",
        "gold_parse": "SELECT Country_name ,  COUNT(*) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country GROUP BY T1.Country_name",
        "predicted_parse_with_values": "select count ( * ) , T4.Country_name from player as T1 join team as T2 on T1.Team = T2.Team_id join match_season as T3 on T2.Team_id = T3.Team join country as T4 on T3.Country = T4.Country_id group by T4.Country_name"
    },
    {
        "question": "What are the title , id , and description of the movie with the greatest number of actors ?",
        "db_id": "sakila_1",
        "gold_parse": "SELECT T2.title ,  T2.film_id ,  T2.description FROM film_actor AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T2.film_id ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select T1.title , T2.description , T1.description from film_text as T1 join film as T2 join film_actor as T3 group by T3.actor_id order by count ( * ) desc limit 1"
    },
    {
        "question": "Find the grade studying in room 105 .",
        "db_id": "student_1",
        "gold_parse": "SELECT DISTINCT grade FROM list WHERE classroom  =  105",
        "predicted_parse_with_values": "select Grade from list where Classroom = 106"
    },
    {
        "question": "What are first and last names of players participating in all star game in 1998 ?",
        "db_id": "baseball_1",
        "gold_parse": "SELECT name_first ,  name_last FROM player AS T1 JOIN all_star AS T2 ON T1.player_id  =  T2.player_id WHERE YEAR  =  1998",
        "predicted_parse_with_values": "select T2.name_first , T2.name_last from all_star as T1 join player as T2 on T1.player_id = T2.player_id where T1.year = 1994 and T2.death_year = 1922"
    },
    {
        "question": "Return the name of the member who is in charge of the most events .",
        "db_id": "party_people",
        "gold_parse": "SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id  =  T2.member_in_charge_id GROUP BY T2.member_in_charge_id ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select Member_Name from member group by Member_Name order by count ( * ) desc limit 1"
    },
    {
        "question": "What is the total salary expenses of team Boston Red Stockings in 2010 ?",
        "db_id": "baseball_1",
        "gold_parse": "SELECT sum(T1.salary) FROM salary AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  = 'Boston Red Stockings' AND T1.year  =  2010",
        "predicted_parse_with_values": "select sum ( T1.salary ) from salary as T1 join team as T2 where T1.team_id = \"TBA\" and T2.year = 1982"
    },
    {
        "question": "What is the first name and age of every student who lives in a dorm with a TV Lounge ?",
        "db_id": "dorm_1",
        "gold_parse": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid NOT IN (SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid  =  T4.amenid WHERE T4.amenity_name  =  'TV Lounge')",
        "predicted_parse_with_values": "select T1.Fname , T1.Age from Student as T1 join Lives_in as T2 on T1.StuID = T2.stuid join Dorm as T3 on T2.dormid = T3.dormid where T3.dorm_name = \"Bud Jones Hall\""
    },
    {
        "question": "What are the file sizes and formats for all songs with a resolution lower than 800 ?",
        "db_id": "music_1",
        "gold_parse": "SELECT DISTINCT T1.file_size ,  T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T2.resolution  <  800",
        "predicted_parse_with_values": "select T2.file_size , T2.formats from song as T1 join files as T2 on T1.f_id = T2.f_id where T1.resolution < 320"
    },
    {
        "question": "What are the different types of player positions ?",
        "db_id": "soccer_2",
        "gold_parse": "SELECT count(DISTINCT pPos) FROM tryout",
        "predicted_parse_with_values": "select ( pName ) from Player"
    },
    {
        "question": "Find the names of the regions which were affected by the storm that killed the greatest number of people .",
        "db_id": "storm_record",
        "gold_parse": "SELECT T2.region_name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id ORDER BY T3.Number_Deaths DESC LIMIT 1",
        "predicted_parse_with_values": "select T1.Region_name from region as T1 join affected_region as T2 on T1.Region_id = T2.Region_id join storm as T3 on T2.Storm_ID = T3.Storm_ID group by T3.Name order by sum ( T3.Number_Deaths ) desc limit 1"
    },
    {
        "question": "Return the primary conference of the school with the lowest acc percentage score .",
        "db_id": "university_basketball",
        "gold_parse": "SELECT t1.Primary_conference FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t2.acc_percent LIMIT 1",
        "predicted_parse_with_values": "select T1.Primary_conference from university as T1 join basketball_match as T2 on T1.School_ID = T2.School_ID order by T2.ACC_Percent asc limit 1"
    },
    {
        "question": "How many regions are affected ?",
        "db_id": "storm_record",
        "gold_parse": "SELECT count(DISTINCT region_id) FROM affected_region",
        "predicted_parse_with_values": "select count ( * ) from region"
    },
    {
        "question": "What are the first name and last name of all the teachers ?",
        "db_id": "student_1",
        "gold_parse": "SELECT DISTINCT firstname ,  lastname FROM teachers",
        "predicted_parse_with_values": "select T2.FirstName , T1.LastName from teachers as T1 join list as T2"
    },
    {
        "question": "Show the pilot positions that have both pilots joining after year 2005 and pilots joining before 2000 .",
        "db_id": "pilot_record",
        "gold_parse": "SELECT POSITION FROM pilot WHERE Join_Year < 2000 INTERSECT SELECT POSITION FROM pilot WHERE Join_Year > 2005",
        "predicted_parse_with_values": "select Position from pilot where Join_Year > 2010 intersect select Position from pilot where Join_Year < 2010"
    },
    {
        "question": "What is the code of the category that the product with the name 'flax ' belongs to ?",
        "db_id": "products_gen_characteristics",
        "gold_parse": "SELECT product_category_code FROM products WHERE product_name  =  \"flax\"",
        "predicted_parse_with_values": "select T1.product_category_code from Ref_Product_Categories as T1 join Products as T2 on T1.product_category_code = T2.product_category_code where T2.product_name = \"cumin\""
    },
    {
        "question": "what states have rivers running through them",
        "db_id": "geo",
        "gold_parse": "SELECT traverse FROM river",
        "predicted_parse_with_values": "select state_name from lake"
    },
    {
        "question": "What are all the company names that have a book published by Alyson ?",
        "db_id": "culture_company",
        "gold_parse": "SELECT T1.company_name FROM culture_company AS T1 JOIN book_club AS T2 ON T1.book_club_id  =  T2.book_club_id WHERE T2.publisher  =  'Alyson'",
        "predicted_parse_with_values": "select T1.Company_name from culture_company as T1 join book_club as T2 on T1.book_club_id = T2.book_club_id where T2.Book_Title = \"The Crystal Curtain\""
    },
    {
        "question": "what is the shortest river in the us",
        "db_id": "geo",
        "gold_parse": "SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MIN ( LENGTH ) FROM river )",
        "predicted_parse_with_values": "select river_name from river where country_name = \"dummy value\" order by length limit 1"
    },
    {
        "question": "What are the full names of faculty members who are a part of department 520 ?",
        "db_id": "college_3",
        "gold_parse": "SELECT T1.Fname ,  T1.Lname FROM FACULTY AS T1 JOIN MEMBER_OF AS T2 ON T1.FacID  =  T2.FacID WHERE T2.DNO  =  520",
        "predicted_parse_with_values": "select T1.Fname , T1.Lname from Faculty as T1 join Course as T2 on T1.FacID = T2.Instructor join Department as T3 on T2.DNO = T3.DNO where T3.DName = \"Biomedical Engineering\""
    },
    {
        "question": "Which city has the highest temperature in February ?",
        "db_id": "city_record",
        "gold_parse": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id ORDER BY T2.Feb DESC LIMIT 1",
        "predicted_parse_with_values": "select T2.City from temperature as T1 join city as T2 on T1.City_ID = T2.City_ID join hosting_city as T3 on T2.City_ID = T3.Host_City where hosting_T2.Year = 2009 order by T1.Sep desc limit 1"
    },
    {
        "question": "Please show the employee last names that serves no more than 20 customers .",
        "db_id": "chinook_1",
        "gold_parse": "SELECT T1.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  <=  20",
        "predicted_parse_with_values": "select LastName from Employee where EmployeeId in ( select T2.ReportsTo from Customer as T1 join Employee as T2 on T1.SupportRepId = T2.EmployeeId where T1.Phone > \"+1 ( 408 ) 996-1010\" )"
    },
    {
        "question": "Show publishers with a book published in 1989 and a book in 1990 .",
        "db_id": "culture_company",
        "gold_parse": "SELECT publisher FROM book_club WHERE YEAR  =  1989 INTERSECT SELECT publisher FROM book_club WHERE YEAR  =  1990",
        "predicted_parse_with_values": "select Publisher from book_club where Year = 1990 intersect select T1.Publisher from book_club as T1 join culture_company as T2 on T1.book_club_id = T2.book_club_id join movie as T3 on T2.movie_id = T3.movie_id where T3.Year = 1999"
    },
    {
        "question": "How many different departments are there in each school that has less than 5 apartments ?",
        "db_id": "college_1",
        "gold_parse": "SELECT count(DISTINCT dept_name) ,  school_code FROM department GROUP BY school_code HAVING count(DISTINCT dept_name)  <  5",
        "predicted_parse_with_values": "select count ( T4.SCHOOL_CODE ) , count ( T4.SCHOOL_CODE ) from CLASS as T1 join ENROLL as T2 on T1.CLASS_CODE = T2.CLASS_CODE join STUDENT as T3 on T2.STU_NUM = T3.STU_NUM join DEPARTMENT as T4 on T3.DEPT_CODE = T4.DEPT_CODE group by T4.SCHOOL_CODE having count ( * ) < 1"
    },
    {
        "question": "Count the number of trips that did not end in San Francisco city .",
        "db_id": "bike_1",
        "gold_parse": "SELECT count(*) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id WHERE T2.city != \"San Francisco\"",
        "predicted_parse_with_values": "select count ( * ) from station where city = \"Mountain View\""
    },
    {
        "question": "Return the total points of the gymnast with the lowest age .",
        "db_id": "gymnast",
        "gold_parse": "SELECT T1.Total_Points FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T2.Age ASC LIMIT 1",
        "predicted_parse_with_values": "select T1.Total_Points from gymnast as T1 join people as T2 on T1.Gymnast_ID = T2.People_ID order by T2.Age limit 1"
    },
    {
        "question": "Find the id and color description of the products with at least 2 characteristics .",
        "db_id": "products_gen_characteristics",
        "gold_parse": "SELECT t1.product_id ,  t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code JOIN product_characteristics AS t3 ON t1.product_id  =  t3.product_id GROUP BY t1.product_id HAVING count(*)  >=  2",
        "predicted_parse_with_values": "select product_id , product_description from Products group by product_id having count ( * ) >= 1"
    },
    {
        "question": "what is the average population of the us by state",
        "db_id": "geo",
        "gold_parse": "SELECT AVG ( population ) FROM state",
        "predicted_parse_with_values": "select avg ( population ) , state_name from state where state_name = \"dummy value\" group by state_name"
    },
    {
        "question": "which state is the largest city in montana in",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name  =  \"montana\" ) AND state_name  =  \"montana\"",
        "predicted_parse_with_values": "select T1.state_name from city as T1 join state as T2 on T1.state_name = T2.state_name where T2.density = ( select max ( density ) from state ) and value"
    },
    {
        "question": "What is the name of every city that has at least 15 stations and how many stations does it have ?",
        "db_id": "bike_1",
        "gold_parse": "SELECT city ,  COUNT(*) FROM station GROUP BY city HAVING COUNT(*)  >=  15",
        "predicted_parse_with_values": "select city , count ( * ) from station group by city having count ( * ) >= 1"
    },
    {
        "question": "What is the name of the customer who has made the minimum amount of payment in one claim ?",
        "db_id": "insurance_and_eClaims",
        "gold_parse": "SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_piad  =  (SELECT min(amount_piad) FROM claim_headers)",
        "predicted_parse_with_values": "select T1.Customer_ID from Customers as T1 join Policies as T2 on T1.Customer_ID = T2.Customer_ID join Claim_Headers as T3 on T2.Policy_ID = T3.Policy_ID order by T3.Amount_Claimed limit 1"
    },
    {
        "question": "count the states which have elevations lower than what alabama has",
        "db_id": "geo",
        "gold_parse": "SELECT COUNT ( state_name ) FROM highlow WHERE lowest_elevation  <  ( SELECT lowest_elevation FROM highlow WHERE state_name  =  \"alabama\" )",
        "predicted_parse_with_values": "select count ( * ) from mountain as T1 join state as T2 on T1.state_name = T2.state_name where T1.mountain_altitude < ( select min ( mountain_altitude ) from mountain where state_name = \"dummy value\" )"
    },
    {
        "question": "What are the first and last names of all the female students who have president votes ?",
        "db_id": "voter_2",
        "gold_parse": "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.President_VOTE WHERE T1.sex  =  \"F\"",
        "predicted_parse_with_values": "select Fname , LName from Student where Sex = \"M\""
    },
    {
        "question": "Which department has the most professors with a Ph.D. ?",
        "db_id": "college_1",
        "gold_parse": "SELECT T2.dept_name ,  T1.dept_code FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T1.prof_high_degree  =  'Ph.D.' GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select T1.DEPT_NAME from DEPARTMENT as T1 join PROFESSOR as T2 on T1.DEPT_CODE = T2.DEPT_CODE where T2.PROF_HIGH_DEGREE = ( select count ( * ) from PROFESSOR where PROF_HIGH_DEGREE = \"MA\" group by DEPT_CODE order by count ( * ) desc limit 1 )"
    },
    {
        "question": "For each city , return the highest latitude among its stations .",
        "db_id": "bike_1",
        "gold_parse": "SELECT city ,  max(lat) FROM station GROUP BY city",
        "predicted_parse_with_values": "select city , lat from station order by lat desc limit 1"
    },
    {
        "question": "What is the number of routes operated by the airline American Airlines whose destinations are in Italy ?",
        "db_id": "flight_4",
        "gold_parse": "SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid JOIN airlines AS T3 ON T1.alid  =  T3.alid WHERE T2.country  =  'Italy' AND T3.name  =  'American Airlines'",
        "predicted_parse_with_values": "select count ( * ) from airlines where country = \"Oman\" and name = \"Adygeya Airlines\""
    },
    {
        "question": "Who is the actor playing \" Alan Turing \" in \" The Imitation Game \" ?",
        "db_id": "imdb",
        "gold_parse": "SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t2.role  =  \"Alan Turing\" AND t3.title  =  \"The Imitation Game\"",
        "predicted_parse_with_values": "select T2.name from cast as T1 join actor as T2 on T1.aid = T2.aid where T1.role = \"dummy value\""
    },
    {
        "question": "Which college has the most authors with submissions ?",
        "db_id": "workshop_paper",
        "gold_parse": "SELECT College FROM submission GROUP BY College ORDER BY COUNT(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select College from submission group by College order by count ( * ) desc limit 1"
    },
    {
        "question": "What are the ids of all trips that had a duration as long as the average trip duration in the zip code 94103 ?",
        "db_id": "bike_1",
        "gold_parse": "SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  94103)",
        "predicted_parse_with_values": "select id from trip where duration > ( select avg ( duration ) from trip where zip_code = 53051 )"
    },
    {
        "question": "what is the highest point in the states bordering colorado",
        "db_id": "geo",
        "gold_parse": "SELECT highest_point FROM highlow WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"colorado\" ) ORDER BY highest_elevation DESC LIMIT 1",
        "predicted_parse_with_values": "select max ( T3.highest_point ) from border_info as T1 join state as T2 on T1.border = T2.state_name join highlow as T3 on T2.state_name = T3.state_name where T1.border = \"dummy value\""
    },
    {
        "question": "Count the number of documents that do not have expenses .",
        "db_id": "cre_Docs_and_Epenses",
        "gold_parse": "SELECT count(*) FROM Documents WHERE document_id NOT IN ( SELECT document_id FROM Documents_with_expenses )",
        "predicted_parse_with_values": "select count ( * ) from Documents_with_Expenses as T1 join Documents as T2 on T1.Document_ID = T2.Document_ID where T2.Document_ID not in ( select Document_ID from Documents_with_Expenses )"
    },
    {
        "question": "in what state is mount whitney",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM mountain WHERE mountain_name  =  \"whitney\"",
        "predicted_parse_with_values": "select T2.state_name from mountain as T1 join state as T2 on T1.state_name = T2.state_name where T1.mountain_name = \"dummy value\""
    },
    {
        "question": "what are the lakes in states bordering texas",
        "db_id": "geo",
        "gold_parse": "SELECT lake_name FROM lake WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"texas\" )",
        "predicted_parse_with_values": "select T2.lake_name from border_info as T1 join lake as T2 where T1.border = \"dummy value\""
    },
    {
        "question": "What is the id of the candidate with the lowest oppose rate ?",
        "db_id": "candidate_poll",
        "gold_parse": "SELECT Candidate_ID FROM candidate ORDER BY oppose_rate LIMIT 1",
        "predicted_parse_with_values": "select Candidate_ID from candidate order by Oppose_rate asc limit 1"
    },
    {
        "question": "Show the average price of hotels for different pet policy .",
        "db_id": "cre_Theme_park",
        "gold_parse": "SELECT pets_allowed_yn ,  avg(price_range) FROM HOTELS GROUP BY pets_allowed_yn",
        "predicted_parse_with_values": "select avg ( price_range ) , avg ( price_range ) , price_range from Hotels group by price_range"
    },
    {
        "question": "what is the state with the smallest area",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state )",
        "predicted_parse_with_values": "select state_name from state order by area asc limit 1"
    },
    {
        "question": "What is the least popular kind of decor ?",
        "db_id": "inn_1",
        "gold_parse": "SELECT T2.decor FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T2.decor ORDER BY count(T2.decor) ASC LIMIT 1",
        "predicted_parse_with_values": "select decor from Rooms group by decor order by count ( decor ) limit 1"
    },
    {
        "question": "Find the team names of the universities whose enrollments are smaller than the average enrollment size .",
        "db_id": "university_basketball",
        "gold_parse": "SELECT t2.team_name FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE enrollment  <  (SELECT avg(enrollment) FROM university)",
        "predicted_parse_with_values": "select School from university where Enrollment < ( select avg ( Enrollment ) from university )"
    },
    {
        "question": "What are the names and genders of all artists who released songs in the month of March ?",
        "db_id": "music_1",
        "gold_parse": "SELECT T1.artist_name ,  T1.gender FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.releasedate LIKE \"%Mar%\"",
        "predicted_parse_with_values": "select T2.artist_name , T2.gender from song as T1 join artist as T2 on T1.artist_name = T2.artist_name where T1.song_name = \"Aj ei akash\""
    },
    {
        "question": "Find the players whose names contain letter ' a ' .",
        "db_id": "soccer_2",
        "gold_parse": "SELECT DISTINCT pName FROM Player WHERE pName LIKE '%a%'",
        "predicted_parse_with_values": "select pName from Player where pName like \"David\""
    },
    {
        "question": "what are the populations of the states through which the mississippi runs",
        "db_id": "geo",
        "gold_parse": "SELECT population FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" )",
        "predicted_parse_with_values": "select T2.population from river as T1 join state as T2 on T1.traverse = T2.state_name where T1.river_name = \"dummy value\""
    },
    {
        "question": "For each country and airline name , how many routes are there ?",
        "db_id": "flight_4",
        "gold_parse": "SELECT T1.country ,  T1.name ,  count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.country ,  T1.name",
        "predicted_parse_with_values": "select country , count ( * ) from airlines group by alid"
    },
    {
        "question": "What is the name of the manager with the most gas stations that opened after 2000 ?",
        "db_id": "gas_company",
        "gold_parse": "SELECT manager_name FROM gas_station WHERE open_year  >  2000 GROUP BY manager_name ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select Manager_Name from gas_station where Open_Year > 2007 group by Manager_Name order by count ( * ) desc limit 1"
    },
    {
        "question": "what cities in wyoming have the highest number of citizens",
        "db_id": "geo",
        "gold_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name  =  \"wyoming\" ) AND state_name  =  \"wyoming\"",
        "predicted_parse_with_values": "select T3.city_name from border_info as T1 join state as T2 on T1.border = T2.state_name join city as T3 on T2.state_name = T3.state_name where T1.state_name = \"dummy value\" order by T3.population desc limit 1"
    },
    {
        "question": "return me the paper in VLDB conference with the most citations .",
        "db_id": "academic",
        "gold_parse": "SELECT t2.title FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" ORDER BY t2.citation_num DESC LIMIT 1",
        "predicted_parse_with_values": "select T2.jid , count ( T2.jid ) from conference as T1 join publication as T2 on T1.cid = T2.cid where T1.name = \"dummy value\" group by T2.jid order by count ( T2.jid ) desc"
    },
    {
        "question": "What is the name of each dorm that has a TV Lounge but no study rooms ?",
        "db_id": "dorm_1",
        "gold_parse": "SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge' EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'Study Room'",
        "predicted_parse_with_values": "select dorm_name from Dorm where dormid in ( select T2.dormid from Dorm_amenity as T1 join Has_amenity as T2 on T1.amenid = T2.amenid where T1.amenity_name = \"Allows Pets\" except select has_amenity.dormid where amenity_name = \"Working Fireplaces\" )"
    },
    {
        "question": "How many actors have appeared in each musical ?",
        "db_id": "musical",
        "gold_parse": "SELECT T2.Name ,  COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID",
        "predicted_parse_with_values": "select count ( * ) , Musical_ID from actor group by Musical_ID"
    },
    {
        "question": "What are the official names of cities that have hosted more than one competition ?",
        "db_id": "farm",
        "gold_parse": "SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT(*)  >  1",
        "predicted_parse_with_values": "select Official_Name from city group by Official_Name having count ( * ) > 1"
    },
    {
        "question": "Find the first name , last name and id for the top three players won the most player awards .",
        "db_id": "baseball_1",
        "gold_parse": "SELECT T1.name_first ,  T1.name_last ,  T1.player_id FROM player AS T1 JOIN player_award AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.player_id ORDER BY count(*) DESC LIMIT 3",
        "predicted_parse_with_values": "select name_first , name_last , name_last from player group by name_first order by count ( * ) desc limit 1"
    },
    {
        "question": "List name and damage for all storms in a descending order of max speed .",
        "db_id": "storm_record",
        "gold_parse": "SELECT name ,  damage_millions_USD FROM storm ORDER BY max_speed DESC",
        "predicted_parse_with_values": "select Name , Name from storm order by Max_speed desc"
    },
    {
        "question": "What is the shortest and most poorly rated song for each genre , ordered alphabetically by genre ?",
        "db_id": "music_1",
        "gold_parse": "SELECT min(T1.duration) ,  min(T2.rating) ,  T2.genre_is FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id GROUP BY T2.genre_is ORDER BY T2.genre_is",
        "predicted_parse_with_values": "select T1.song_name , T1.genre_is from song as T1 join genre as T2 on T1.genre_is = T2.g_name order by T2.rating limit 1"
    },
    {
        "question": "What is the name of the department with the fewest members ?",
        "db_id": "college_3",
        "gold_parse": "SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MEMBER_OF AS T2 ON T1.DNO  =  T2.DNO GROUP BY T2.DNO ORDER BY count(*) ASC LIMIT 1",
        "predicted_parse_with_values": "select DName from Department group by DName order by count ( * ) limit 1"
    },
    {
        "question": "What are the first names and ages of all students who are playing both Football and Lacrosse ?",
        "db_id": "game_1",
        "gold_parse": "SELECT fname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Sportsinfo WHERE SportName  =  \"Football\" INTERSECT SELECT StuID FROM Sportsinfo WHERE SportName  =  \"Lacrosse\")",
        "predicted_parse_with_values": "select T2.Fname , T2.Age from SportsInfo as T1 join Student as T2 on T1.StuID = T2.StuID where T1.SportName = \"Baseball\" intersect select T4.Fname , T4.Age from SportsInfo as T3 join Student as T4 on T3.StuID = T4.StuID where T3.SportName = \"Swimming\""
    },
    {
        "question": "Find the number of amenities for each of the dorms that can accommodate more than 100 students .",
        "db_id": "dorm_1",
        "gold_parse": "SELECT count(*) ,  T1.dormid FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid WHERE T1.student_capacity  >  100 GROUP BY T1.dormid",
        "predicted_parse_with_values": "select count ( * ) , dorm_name from Dorm where student_capacity > 256 group by dorm_name"
    },
    {
        "question": "How many diffrent dorm amenities are there ?",
        "db_id": "dorm_1",
        "gold_parse": "SELECT count(*) FROM dorm_amenity",
        "predicted_parse_with_values": "select count ( * ) from Dorm"
    },
    {
        "question": "Find the first name of student who is taking classes from accounting and Computer Info . Systems departments",
        "db_id": "college_1",
        "gold_parse": "SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code JOIN department AS T5 ON T5.dept_code  =  T4.dept_code WHERE T5.dept_name  =  'Accounting' INTERSECT SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code JOIN department AS T5 ON T5.dept_code  =  T4.dept_code WHERE T5.dept_name  =  'Computer Info. Systems'",
        "predicted_parse_with_values": "select STU_FNAME from STUDENT where DEPT_CODE = \"EDU\" intersect select T1.STU_FNAME from STUDENT as T1 join DEPARTMENT as T2 on T1.DEPT_CODE = T2.DEPT_CODE where T2.DEPT_NAME = \"English\""
    },
    {
        "question": "What are the ids , full names , and phones of each customer ?",
        "db_id": "customers_card_transactions",
        "gold_parse": "SELECT customer_id ,  customer_first_name ,  customer_last_name ,  customer_phone FROM Customers",
        "predicted_parse_with_values": "select customer_first_name , customer_first_name , customer_phone , customer_phone from Customers"
    },
    {
        "question": "Which classroom has the most students ?",
        "db_id": "student_1",
        "gold_parse": "SELECT classroom FROM list GROUP BY classroom ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select Classroom from list group by Classroom order by count ( * ) desc limit 1"
    },
    {
        "question": "Find the names of schools that have some students playing in goalie and mid positions .",
        "db_id": "soccer_2",
        "gold_parse": "SELECT cName FROM  tryout WHERE pPos  =  'goalie' INTERSECT SELECT cName FROM  tryout WHERE pPos  =  'mid'",
        "predicted_parse_with_values": "select T2.cName from Tryout as T1 join College as T2 on T1.cName = T2.cName where T1.pPos = \"goalie\" intersect select T4.cName from Tryout as T3 join College as T4 on T3.cName = T4.cName where T3.pPos = \"goalie\""
    },
    {
        "question": "Show all the distinct president votes made on 08/30/2015 .",
        "db_id": "voter_2",
        "gold_parse": "SELECT DISTINCT PRESIDENT_Vote FROM VOTING_RECORD WHERE Registration_Date  =  \"08/30/2015\"",
        "predicted_parse_with_values": "select President_Vote from Voting_record where Election_Cycle = \"Fall\""
    },
    {
        "question": "How many teachers does the student named CHRISSY NABOZNY have ?",
        "db_id": "student_1",
        "gold_parse": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"CHRISSY\" AND T1.lastname  =  \"NABOZNY\"",
        "predicted_parse_with_values": "select count ( * ) from teachers as T1 join list as T2 where T2.FirstName = \" STORMY\" and T1.LastName = \"URSERY\""
    },
    {
        "question": "Return the budget type codes , budget type descriptions and document ids for documents with expenses .",
        "db_id": "cre_Docs_and_Epenses",
        "gold_parse": "SELECT T2.budget_type_code ,  T2.budget_type_description ,  T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code  =  T2.budget_type_code",
        "predicted_parse_with_values": "select T1.Budget_Type_Code , T1.Budget_Type_Description , T3.Document_Description from Ref_Budget_Codes as T1 join Documents_with_Expenses as T2 on T1.Budget_Type_Code = T2.Budget_Type_Code join Documents as T3 on T2.Document_ID = T3.Document_ID"
    },
    {
        "question": "return me all the papers , which contain the keyword \" Natural Language \" .",
        "db_id": "academic",
        "gold_parse": "SELECT t3.title FROM publication_keyword AS t2 JOIN keyword AS t1 ON t2.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t2.pid WHERE t1.keyword  =  \"Natural Language\"",
        "predicted_parse_with_values": "select T1.title from publication as T1 join writes as T2 on T1.pid = T2.pid join author as T3 on T2.aid = T3.aid join domain_author as T4 on T3.aid = T4.aid join domain as T5 on T4.did = T5.did join domain_keyword as T6 on T5.did = T6.did join keyword as T7 on T6.kid = T7.kid where T7.keyword like \"dummy value\""
    },
    {
        "question": "which state 's capital city is the largest",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM city WHERE population  =  ( SELECT MAX ( t1.population ) FROM state AS t2 JOIN city AS t1 ON t2.capital  =  t1.city_name )",
        "predicted_parse_with_values": "select T1.state_name from city as T1 join state as T2 on T1.state_name = T2.state_name order by T2.density desc limit 1"
    },
    {
        "question": "What are the name and assets of each company , sorted in ascending order of company name ?",
        "db_id": "company_office",
        "gold_parse": "SELECT name ,  Assets_billion FROM Companies ORDER BY name ASC",
        "predicted_parse_with_values": "select name , Assets_billion from Companies order by Assets_billion asc"
    },
    {
        "question": "How many papers are published by the institution \" Tokohu University \" ?",
        "db_id": "icfp_1",
        "gold_parse": "SELECT count(DISTINCT t1.title) FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Tokohu University\"",
        "predicted_parse_with_values": "select count ( * ) from Inst as T1 join Authorship as T2 on T1.instID = T2.instID join Papers as T3 on T2.paperID = T3.paperID where T1.name = \"Northeastern University\""
    },
    {
        "question": "what state has the largest population density",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM state WHERE density  =  ( SELECT MAX ( density ) FROM state )",
        "predicted_parse_with_values": "select state_name from state order by density desc limit 1"
    },
    {
        "question": "Show the number of transaction types .",
        "db_id": "customers_card_transactions",
        "gold_parse": "SELECT count(DISTINCT transaction_type) FROM Financial_Transactions",
        "predicted_parse_with_values": "select count ( * ) from Financial_Transactions"
    },
    {
        "question": "What is the address for the customer with id 10 ?",
        "db_id": "department_store",
        "gold_parse": "SELECT T1.address_details FROM addresses AS T1 JOIN customer_addresses AS T2 ON T1.address_id  =  T2.address_id WHERE T2.customer_id  =  10",
        "predicted_parse_with_values": "select T1.customer_address from Customers as T1 join Customer_Addresses as T2 on T1.customer_id = T2.customer_id where customer_Addresses.address_id = 10"
    },
    {
        "question": "Where is the history department ?",
        "db_id": "college_1",
        "gold_parse": "SELECT dept_address FROM department WHERE dept_name  =  'History'",
        "predicted_parse_with_values": "select T1.DEPT_ADDRESS from DEPARTMENT as T1 join PROFESSOR as T2 on T1.DEPT_CODE = T2.DEPT_CODE where T2.PROF_OFFICE = \"KLR 203E\""
    },
    {
        "question": "How many students does one classroom have ?",
        "db_id": "student_1",
        "gold_parse": "SELECT count(*) ,  classroom FROM list GROUP BY classroom",
        "predicted_parse_with_values": "select count ( * ) from list where Classroom = 106"
    },
    {
        "question": "Find the name , city , country , and altitude ( or elevation ) of the airports in the city of New York .",
        "db_id": "flight_4",
        "gold_parse": "SELECT name ,  city ,  country ,  elevation FROM airports WHERE city  =  'New York'",
        "predicted_parse_with_values": "select name , city , elevation from airports where elevation = 12400"
    },
    {
        "question": "which state is mount whitney in",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM mountain WHERE mountain_name  =  \"whitney\"",
        "predicted_parse_with_values": "select T2.state_name from mountain as T1 join state as T2 on T1.state_name = T2.state_name where T1.mountain_name = \"dummy value\""
    },
    {
        "question": "Who is the advisor of Linda Smith ? Give me the first name and last name .",
        "db_id": "activity_1",
        "gold_parse": "SELECT T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T2.fname  =  \"Linda\" AND T2.lname  =  \"Smith\"",
        "predicted_parse_with_values": "select Fname , Lname from Faculty where Fname = \"Brian\" and Lname = \"Davidson\""
    },
    {
        "question": "Find all movies written by \" Matt Damon \"",
        "db_id": "imdb",
        "gold_parse": "SELECT t1.title FROM written_by AS t3 JOIN movie AS t1 ON t3.msid  =  t1.mid JOIN writer AS t2 ON t3.wid  =  t2.wid WHERE t2.name  =  \"Matt Damon\"",
        "predicted_parse_with_values": "select T6.title from writer as T1 join written_by as T2 on T1.wid = T2.wid join copyright as T3 on T2.msid = T3.msid join cast as T4 on T3.msid = T4.msid join actor as T5 on T4.aid = T5.aid join movie as T6 where T5.name = \"dummy value\" and T1.name = \"dummy value\""
    },
    {
        "question": "Return the cities with more than 3 airports in the United States .",
        "db_id": "flight_4",
        "gold_parse": "SELECT city FROM airports WHERE country  =  'United States' GROUP BY city HAVING count(*)  >  3",
        "predicted_parse_with_values": "select city from airports group by city having count ( * ) > 1"
    },
    {
        "question": "which rivers run through states that border the state with the capital atlanta",
        "db_id": "geo",
        "gold_parse": "SELECT river_name FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name IN ( SELECT state_name FROM state WHERE capital  =  \"atlanta\" ) )",
        "predicted_parse_with_values": "select T1.river_name from river as T1 join state as T2 on T1.traverse = T2.state_name where T2.capital = \"dummy value\""
    },
    {
        "question": "What are the first names for students who have an \" a \" in their first name ?",
        "db_id": "college_3",
        "gold_parse": "SELECT DISTINCT Fname FROM STUDENT WHERE Fname LIKE '%a%'",
        "predicted_parse_with_values": "select Fname from Student where Fname like \"Linda\""
    },
    {
        "question": "How many home games did the team Boston Red Stockings play from 1990 to 2000 in total ?",
        "db_id": "baseball_1",
        "gold_parse": "SELECT sum(T1.games) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' AND T1.year BETWEEN 1990 AND 2000",
        "predicted_parse_with_values": "select count ( * ) from home_game as T1 join team_franchise as T2 where T2.franchise_name = \"Troy Trojans\" and T1.year = 1901"
    },
    {
        "question": "Find the top 3 artists who have the largest number of songs works whose language is Bangla .",
        "db_id": "music_1",
        "gold_parse": "SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  \"bangla\" GROUP BY T2.artist_name ORDER BY count(*) DESC LIMIT 3",
        "predicted_parse_with_values": "select T2.artist_name from song as T1 join artist as T2 on T1.artist_name = T2.artist_name where T1.languages = \"english\" group by T1.artist_name order by count ( * ) desc limit 1"
    },
    {
        "question": "What are the departure and arrival dates of all flights from LA to Honolulu ?",
        "db_id": "flight_1",
        "gold_parse": "SELECT departure_date ,  arrival_date FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\"",
        "predicted_parse_with_values": "select departure_date , arrival_date from flight where destination = \"Dallas\" and destination = \"Washington D.C.\""
    },
    {
        "question": "How many storms had death records ?",
        "db_id": "storm_record",
        "gold_parse": "SELECT count(*) FROM storm WHERE Number_Deaths  >  0",
        "predicted_parse_with_values": "select count ( Name ) from storm"
    },
    {
        "question": "return me the keyword , which have been contained by the most number of papers in VLDB conference .",
        "db_id": "academic",
        "gold_parse": "SELECT t1.keyword FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t4.pid JOIN conference AS t2 ON t3.cid  =  t2.cid WHERE t2.name  =  \"VLDB\" GROUP BY t1.keyword ORDER BY COUNT ( DISTINCT t3.title ) DESC LIMIT 1",
        "predicted_parse_with_values": "select T8.keyword from conference as T1 join publication as T2 on T1.cid = T2.cid join writes as T3 on T2.pid = T3.pid join author as T4 on T3.aid = T4.aid join domain_author as T5 on T4.aid = T5.aid join domain as T6 on T5.did = T6.did join domain_keyword as T7 on T6.did = T7.did join keyword as T8 on T7.kid = T8.kid where T1.name = \"dummy value\" group by T8.keyword order by count ( T1.name ) desc limit 1"
    },
    {
        "question": "Find the number of students in each major .",
        "db_id": "dorm_1",
        "gold_parse": "SELECT count(*) ,  major FROM student GROUP BY major",
        "predicted_parse_with_values": "select Major , count ( * ) from Student group by Major"
    },
    {
        "question": "What movies have the same director as the movie \" Revolutionary Road \" ?",
        "db_id": "imdb",
        "gold_parse": "SELECT t3.title FROM director AS t5 JOIN directed_by AS t2 ON t5.did  =  t2.did JOIN directed_by AS t1 ON t5.did  =  t1.did JOIN movie AS t4 ON t4.mid  =  t2.msid JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t4.title  =  \"Revolutionary Road\"",
        "predicted_parse_with_values": "select T2.title from director as T1 join movie as T2 where T1.name = ( select T4.id from director as T3 join directed_by as T4 on T3.did = T4.did where T3.name = \"dummy value\" )"
    },
    {
        "question": "What are the names of customers with checking balances lower than the average checking balance ?",
        "db_id": "small_bank_1",
        "gold_parse": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM checking)",
        "predicted_parse_with_values": "select T2.name from CHECKING as T1 join ACCOUNTS as T2 on T1.custid = T2.custid where T1.balance < ( select avg ( balance ) from CHECKING )"
    },
    {
        "question": "What is the first name and last name of the student who have most number of sports ?",
        "db_id": "game_1",
        "gold_parse": "SELECT T2.Fname ,  T2.Lname FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID GROUP BY T1.StuID ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select Fname , LName from Student group by StuID order by count ( * ) desc limit 1"
    },
    {
        "question": "Show the names of all the activities Mark Giuliano participates in .",
        "db_id": "activity_1",
        "gold_parse": "SELECT T3.activity_name FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN Activity AS T3 ON T3.actid  =  T2.actid WHERE T1.fname  =  \"Mark\" AND T1.lname  =  \"Giuliano\"",
        "predicted_parse_with_values": "select T1.activity_name from Activity as T1 join Participates_in as T2 on T1.actid = T2.actid join Student as T3 on T2.stuid = T3.StuID where T3.Fname = \"Linda\" and T3.LName = \"Davis\""
    },
    {
        "question": "What are the first names and support rep ids for employees serving 10 or more customers ?",
        "db_id": "chinook_1",
        "gold_parse": "SELECT T1.FirstName ,  T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  >=  10",
        "predicted_parse_with_values": "select T2.FirstName , T2.EmployeeId from Customer as T1 join Employee as T2 on T1.SupportRepId = T2.EmployeeId group by T1.SupportRepId having count ( * ) >= 1"
    },
    {
        "question": "what states border states that border colorado",
        "db_id": "geo",
        "gold_parse": "SELECT border FROM border_info WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"colorado\" )",
        "predicted_parse_with_values": "select T2.state_name from border_info as T1 join state as T2 on T1.border = T2.state_name where T1.border = \"dummy value\""
    },
    {
        "question": "What is the name of school that has the smallest enrollment in each state ?",
        "db_id": "soccer_2",
        "gold_parse": "SELECT cName ,  state ,  min(enr) FROM college GROUP BY state",
        "predicted_parse_with_values": "select state , state from College order by enr desc limit 1"
    },
    {
        "question": "What is the average GPA of students taking ACCT-211 ?",
        "db_id": "college_1",
        "gold_parse": "SELECT avg(T2.stu_gpa) FROM enroll AS T1 JOIN student AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T1.class_code  =  T3.class_code WHERE T3.crs_code  =  'ACCT-211'",
        "predicted_parse_with_values": "select avg ( STU_GPA ) from STUDENT where STU_HRS = 15"
    },
    {
        "question": "what state has the smallest population density",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM state WHERE density  =  ( SELECT MIN ( density ) FROM state )",
        "predicted_parse_with_values": "select state_name from state order by density asc limit 1"
    },
    {
        "question": "Find the cities corresponding to employees who help customers with the postal code 70174 .",
        "db_id": "chinook_1",
        "gold_parse": "SELECT T2.City FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.PostalCode  =  \"70174\"",
        "predicted_parse_with_values": "select City from Customer where PostalCode = \"B3S 1C5\""
    },
    {
        "question": "What are the names and flags of ships that do not have a captain with the rank of Midshipman ?",
        "db_id": "ship_1",
        "gold_parse": "SELECT name ,  flag FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain WHERE rank  =  'Midshipman')",
        "predicted_parse_with_values": "select Name , Flag from Ship except select T1.Name , T1.Flag from Ship as T1 join captain as T2 on T1.Ship_ID = T2.Ship_ID where T2.Rank = \"Lieutenant\""
    },
    {
        "question": "what is the longest river in the smallest state in the usa",
        "db_id": "geo",
        "gold_parse": "SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river WHERE traverse IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state ) ) ) AND traverse IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state ) )",
        "predicted_parse_with_values": "select T1.river_name from river as T1 join state as T2 on T1.traverse = T2.state_name where T2.country_name = \"dummy value\" order by T1.length limit 1"
    },
    {
        "question": "How many parks are there in Atlanta city ?",
        "db_id": "baseball_1",
        "gold_parse": "SELECT count(*) FROM park WHERE city = 'Atlanta'",
        "predicted_parse_with_values": "select count ( * ) from park where city = \"Milwaukee\""
    },
    {
        "question": "return me the papers written by \" H. V. Jagadish \" and \" Divesh Srivastava \" before 2000 .",
        "db_id": "academic",
        "gold_parse": "SELECT t5.title FROM writes AS t3 JOIN author AS t2 ON t3.aid  =  t2.aid JOIN publication AS t5 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t2.name  =  \"H. V. Jagadish\" AND t1.name  =  \"Divesh Srivastava\" AND t5.year  <  2000",
        "predicted_parse_with_values": "select T3.kid from organization as T1 join publication as T2 join keyword as T3 where T1.name = \"dummy value\" and T2.year < \"dummy value\""
    },
    {
        "question": "what is the smallest state in the usa",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state )",
        "predicted_parse_with_values": "select min ( density ) from state where country_name = \"dummy value\""
    },
    {
        "question": "What is the id of the department with the least number of staff ?",
        "db_id": "department_store",
        "gold_parse": "SELECT department_id FROM staff_department_assignments GROUP BY department_id ORDER BY count(*) LIMIT 1",
        "predicted_parse_with_values": "select department_id from Departments group by department_id order by count ( * ) limit 1"
    },
    {
        "question": "How many students have cat allergies ?",
        "db_id": "allergy_1",
        "gold_parse": "SELECT count(*) FROM Has_allergy WHERE Allergy  =  \"Cat\"",
        "predicted_parse_with_values": "select count ( * ) from Allergy_Type as T1 join Has_Allergy as T2 on T1.Allergy = T2.Allergy join Student as T3 on T2.StuID = T3.StuID where T1.Allergytype = \"food\""
    },
    {
        "question": "How many students are over 18 and do not have allergy to food type or animal type ?",
        "db_id": "allergy_1",
        "gold_parse": "SELECT count(*) FROM Student WHERE age  >  18 AND StuID NOT IN ( SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\" OR T2.allergytype  =  \"animal\")",
        "predicted_parse_with_values": "select count ( * ) from Student where StuID in ( select T1.StuID from Has_Allergy as T1 join Allergy_Type as T2 on T1.Allergy = T2.Allergy join Student as T3 on T1.StuID = T3.StuID where T2.Allergytype = \"food\" ) and T2.Allergytype != \"food\" and T2.Allergytype = \"food\" group by T2.Allergytype having count ( * ) >= 1"
    },
    {
        "question": "List the names of all players who have a crossing score higher than 90 and prefer their right foot .",
        "db_id": "soccer_1",
        "gold_parse": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.crossing  >  90 AND T2.preferred_foot  =  \"right\"",
        "predicted_parse_with_values": "select T1.player_name from Player as T1 join Player_Attributes as T2 on T1.player_api_id = T2.player_api_id where T2.crossing > 59 and T2.preferred_foot = \"right\""
    },
    {
        "question": "List the document ids for any documents with the status code done and the type code paper .",
        "db_id": "cre_Doc_Control_Systems",
        "gold_parse": "SELECT document_id FROM Documents WHERE document_status_code = \"done\" AND document_type_code = \"Paper\"",
        "predicted_parse_with_values": "select document_id , document_type_code from Documents where document_status_code = \"overdue\""
    },
    {
        "question": "What are the song names for every song whose rating is less than the minimum rating for English songs ?",
        "db_id": "music_1",
        "gold_parse": "SELECT song_name FROM song WHERE rating  <   (SELECT min(rating) FROM song WHERE languages  =  'english')",
        "predicted_parse_with_values": "select song_name from song where rating < ( select min ( rating ) from song where rating = 7 )"
    },
    {
        "question": "Find all the papers published by the institution \" Google \" .",
        "db_id": "icfp_1",
        "gold_parse": "SELECT DISTINCT t1.title FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Google\"",
        "predicted_parse_with_values": "select T3.paperID from Inst as T1 join Authorship as T2 on T1.instID = T2.instID join Papers as T3 on T2.paperID = T3.paperID where T1.name = \"Google\""
    },
    {
        "question": "return me the total citations of papers in PVLDB in each year .",
        "db_id": "academic",
        "gold_parse": "SELECT t2.year  ,  SUM ( t2.citation_num ) FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" GROUP BY t2.year",
        "predicted_parse_with_values": "select ( T2.jid ) , T2.year from organization as T1 join publication as T2 where T1.name = \"dummy value\" group by T2.year"
    },
    {
        "question": "return me the authors who have more than 10 papers containing keyword \" Relational Database \" .",
        "db_id": "academic",
        "gold_parse": "SELECT t2.name FROM publication_keyword AS t5 JOIN keyword AS t1 ON t5.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t3.pid JOIN author AS t2 ON t4.aid  =  t2.aid WHERE t1.keyword  =  \"Relational Database\" GROUP BY t2.name HAVING COUNT ( DISTINCT t3.title )  >  10",
        "predicted_parse_with_values": "select T5.name from keyword as T1 join publication_keyword as T2 on T1.kid = T2.kid join publication as T3 on T2.pid = T3.pid join writes as T4 on T3.pid = T4.pid join author as T5 on T4.aid = T5.aid where T1.keyword = \"dummy value\" group by T5.name having count ( * ) > 1"
    },
    {
        "question": "What are the names and ids of the tourist attractions that are visited at most once ?",
        "db_id": "cre_Theme_park",
        "gold_parse": "SELECT T1.Name ,  T1.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*)  <=  1",
        "predicted_parse_with_values": "select Name , Tourist_Attraction_ID from Tourist_Attractions group by Tourist_Attraction_ID order by count ( * ) desc limit 1"
    },
    {
        "question": "Find the name of amenities of the dorm where the student with last name Smith is living in .",
        "db_id": "dorm_1",
        "gold_parse": "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid JOIN lives_in AS T4 ON T4.dormid  =  T1.dormid JOIN student AS T5 ON T5.stuid  =  T4.stuid WHERE T5.lname  =  'Smith'",
        "predicted_parse_with_values": "select T3.dorm_name from Student as T1 join Lives_in as T2 on T1.StuID = T2.stuid join Dorm as T3 on T2.dormid = T3.dormid where T1.LName = \"Lee\""
    },
    {
        "question": "which states does the longest river run through",
        "db_id": "geo",
        "gold_parse": "SELECT traverse FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river )",
        "predicted_parse_with_values": "select T3.state_name from river as T1 join state as T2 on T1.traverse = T2.state_name join border_info as T3 on T2.state_name = T3.border order by T1.length desc limit 1"
    },
    {
        "question": "what is the height of the highest point in the usa",
        "db_id": "geo",
        "gold_parse": "SELECT MAX ( highest_elevation ) FROM highlow",
        "predicted_parse_with_values": "select T1.mountain_altitude from mountain as T1 join state as T2 on T1.state_name = T2.state_name join highlow as T3 on T2.state_name = T3.state_name where T2.country_name = \"dummy value\" order by T3.highest_point desc limit 1"
    },
    {
        "question": "Return the names of singers who are from UK and released an English song .",
        "db_id": "music_1",
        "gold_parse": "SELECT artist_name FROM artist WHERE country  =  \"UK\" INTERSECT SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  \"english\"",
        "predicted_parse_with_values": "select T2.artist_name from song as T1 join artist as T2 on T1.artist_name = T2.artist_name where T1.country = \"Bangladesh\" and T1.releasedate = \"17-MAR-2002\""
    },
    {
        "question": "How many rooms have not had any reservation yet ?",
        "db_id": "inn_1",
        "gold_parse": "SELECT count(*) FROM rooms WHERE roomid NOT IN (SELECT DISTINCT room FROM reservations)",
        "predicted_parse_with_values": "select count ( * ) from Rooms where RoomId not in ( select Room from Reservations )"
    },
    {
        "question": "What are the different card types , and how many transactions have been made with each ?",
        "db_id": "customers_card_transactions",
        "gold_parse": "SELECT T2.card_type_code ,  count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id  =  T2.card_id GROUP BY T2.card_type_code",
        "predicted_parse_with_values": "select transaction_type , count ( * ) from Financial_Transactions group by transaction_type"
    },
    {
        "question": "Give the ids for documents that have the budget description 'Government ' .",
        "db_id": "cre_Docs_and_Epenses",
        "gold_parse": "SELECT T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_Budget_Codes AS T2 ON T1.Budget_Type_code  =  T2.Budget_Type_code WHERE T2.budget_type_Description  =  \"Government\"",
        "predicted_parse_with_values": "select Document_ID from Documents where Document_Description = \"None\""
    },
    {
        "question": "Which movie had the character \" Daffy Duck \"",
        "db_id": "imdb",
        "gold_parse": "SELECT t1.title FROM movie AS t1 JOIN CAST AS t2 ON t1.mid  =  t2.msid WHERE t2.role  =  \"Daffy Duck\"",
        "predicted_parse_with_values": "select T2.title from actor as T1 join movie as T2 where T1.name = \"dummy value\""
    },
    {
        "question": "Which types of policy are chosen by more than 2 customers ? Give me the policy type codes .",
        "db_id": "insurance_and_eClaims",
        "gold_parse": "SELECT policy_type_code FROM policies GROUP BY policy_type_code HAVING count(*)  >  2",
        "predicted_parse_with_values": "select T2.Policy_Type_Code from Customers as T1 join Policies as T2 on T1.Customer_ID = T2.Customer_ID group by T2.Policy_Type_Code having count ( * ) > 1"
    },
    {
        "question": "Find the distinct unit prices for tracks .",
        "db_id": "chinook_1",
        "gold_parse": "SELECT distinct(UnitPrice) FROM TRACK",
        "predicted_parse_with_values": "select UnitPrice from Track"
    },
    {
        "question": "which states does the ohio river pass through",
        "db_id": "geo",
        "gold_parse": "SELECT traverse FROM river WHERE river_name  =  \"ohio\"",
        "predicted_parse_with_values": "select T3.state_name from river as T1 join state as T2 on T1.traverse = T2.state_name join border_info as T3 on T2.state_name = T3.border where T1.river_name = \"dummy value\""
    },
    {
        "question": "What are the movies related to nuclear weapons",
        "db_id": "imdb",
        "gold_parse": "SELECT t3.title FROM tags AS t2 JOIN keyword AS t1 ON t2.kid  =  t1.id JOIN movie AS t3 ON t2.msid  =  t3.mid WHERE t1.keyword  =  \"nuclear weapons\"",
        "predicted_parse_with_values": "select T2.title from genre as T1 join movie as T2 where T1.genre = \"dummy value\""
    },
    {
        "question": "In which buildings are there at least ten professors ?",
        "db_id": "activity_1",
        "gold_parse": "SELECT building FROM Faculty WHERE rank  =  \"Professor\" GROUP BY building HAVING count(*)  >=  10",
        "predicted_parse_with_values": "select Building from Faculty group by Building having count ( * ) >= 1"
    },
    {
        "question": "return me the author in the \" University of Michigan \" whose papers in Databases area have the most total citations .",
        "db_id": "academic",
        "gold_parse": "SELECT t1.name FROM DOMAIN AS t4 JOIN domain_publication AS t2 ON t4.did  =  t2.did JOIN publication AS t5 ON t5.pid  =  t2.pid JOIN writes AS t3 ON t3.pid  =  t5.pid JOIN author AS t1 ON t3.aid  =  t1.aid JOIN organization AS t6 ON t6.oid  =  t1.oid WHERE t4.name  =  \"Databases\" AND t6.name  =  \"University of Michigan\" GROUP BY t1.name ORDER BY SUM ( t5.citation_num ) DESC LIMIT 1",
        "predicted_parse_with_values": "select T1.name from author as T1 join writes as T2 on T1.aid = T2.aid join publication as T3 on T2.pid = T3.pid join cite as T4 on T3.pid = T4.citing where T4.cited = \"dummy value\" group by T1.name order by count ( * ) desc limit 1"
    },
    {
        "question": "what is the capital of the state with the longest river",
        "db_id": "geo",
        "gold_parse": "SELECT capital FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river ) )",
        "predicted_parse_with_values": "select T2.capital from river as T1 join state as T2 on T1.traverse = T2.state_name order by T1.length desc limit 1"
    },
    {
        "question": "For each fourth-grade classroom , show the classroom number and the total number of students using it .",
        "db_id": "student_1",
        "gold_parse": "SELECT classroom ,  count(*) FROM list WHERE grade  =  \"4\" GROUP BY classroom",
        "predicted_parse_with_values": "select count ( * ) , Grade from list group by Grade"
    },
    {
        "question": "return me the number of organizations in Databases area .",
        "db_id": "academic",
        "gold_parse": "SELECT COUNT ( DISTINCT t2.name ) FROM domain_author AS t4 JOIN author AS t1 ON t4.aid  =  t1.aid JOIN DOMAIN AS t3 ON t3.did  =  t4.did JOIN organization AS t2 ON t2.oid  =  t1.oid WHERE t3.name  =  \"Databases\"",
        "predicted_parse_with_values": "select count ( * ) from organization where oid = \"dummy value\""
    },
    {
        "question": "Find the number of teachers who teach the student called CHRISSY NABOZNY .",
        "db_id": "student_1",
        "gold_parse": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"CHRISSY\" AND T1.lastname  =  \"NABOZNY\"",
        "predicted_parse_with_values": "select count ( * ) from teachers where FirstName = \" OTHA\" and LastName = \"KAWA\""
    },
    {
        "question": "What are the different names for all songs that have a higher resolution than English songs ?",
        "db_id": "music_1",
        "gold_parse": "SELECT DISTINCT song_name FROM song WHERE resolution  >  (SELECT min(resolution) FROM song WHERE languages  =  \"english\")",
        "predicted_parse_with_values": "select song_name from song where resolution > ( select min ( resolution ) from song where resolution > 512 )"
    },
    {
        "question": "Find the average credit score of the customers who have some loan .",
        "db_id": "loan_1",
        "gold_parse": "SELECT avg(credit_score) FROM customer WHERE cust_id IN (SELECT cust_id FROM loan)",
        "predicted_parse_with_values": "select avg ( credit_score ) from customer"
    },
    {
        "question": "Count the number of exhibitions that have had an attendnance of over 100 or a ticket prices under 10 .",
        "db_id": "theme_gallery",
        "gold_parse": "SELECT count(*) FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  >  100 OR T2.ticket_price  <  10",
        "predicted_parse_with_values": "select count ( * ) from exhibition where Ticket_Price > 29.95 or count ( * ) > 1"
    },
    {
        "question": "How many workshops did each author submit to ? Return the author name and the number of workshops .",
        "db_id": "workshop_paper",
        "gold_parse": "SELECT T2.Author ,  COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID GROUP BY T2.Author",
        "predicted_parse_with_values": "select T3.Name , count ( * ) from submission as T1 join Acceptance as T2 on T1.Submission_ID = T2.Submission_ID join workshop as T3 on T2.Workshop_ID = T3.Workshop_ID group by T1.Author"
    },
    {
        "question": "where is the lowest point in iowa",
        "db_id": "geo",
        "gold_parse": "SELECT lowest_point FROM highlow WHERE state_name  =  \"iowa\"",
        "predicted_parse_with_values": "select T1.area from state as T1 join highlow as T2 on T1.state_name = T2.state_name where T2.lowest_elevation != \"dummy value\" order by T2.lowest_point limit 1"
    },
    {
        "question": "What is the most frequently ordered product ? Tell me the detail of the product",
        "db_id": "customers_and_addresses",
        "gold_parse": "SELECT t2.product_details FROM order_items AS t1 JOIN products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_id ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select T1.product_details from Products as T1 join Order_Items as T2 on T1.product_id = T2.product_id group by T1.product_id order by count ( * ) desc limit 1"
    },
    {
        "question": "How many students are enrolled in college ?",
        "db_id": "soccer_2",
        "gold_parse": "SELECT sum(enr) FROM College",
        "predicted_parse_with_values": "select count ( enr ) from College"
    },
    {
        "question": "Return the first names of the 5 staff members who have handled the most complaints .",
        "db_id": "customer_complaints",
        "gold_parse": "SELECT t1.first_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id  =  t2.staff_id GROUP BY t2.staff_id ORDER BY count(*) LIMIT 5",
        "predicted_parse_with_values": "select first_name from Staff group by first_name order by count ( * ) desc limit 1"
    },
    {
        "question": "Find the name of account that has the lowest total checking and saving balance .",
        "db_id": "small_bank_1",
        "gold_parse": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance LIMIT 1",
        "predicted_parse_with_values": "select T2.name , T2.name from CHECKING as T1 join ACCOUNTS as T2 on T1.custid = T2.custid order by T1.balance limit 1"
    },
    {
        "question": "return me the year of \" Making database systems usable \" .",
        "db_id": "academic",
        "gold_parse": "SELECT YEAR FROM publication WHERE title  =  \"Making database systems usable\"",
        "predicted_parse_with_values": "select T1.year from publication as T1 join writes as T2 on T1.pid = T2.pid join author as T3 on T2.aid = T3.aid join domain_author as T4 on T3.aid = T4.aid join domain as T5 on T4.did = T5.did join domain_keyword as T6 on T5.did = T6.did join keyword as T7 on T6.kid = T7.kid where T7.keyword = \"dummy value\""
    },
    {
        "question": "What is the rank , company , and market value of every comapny in the banking industry ordered by sales and profits ?",
        "db_id": "gas_company",
        "gold_parse": "SELECT rank ,  company ,  market_value FROM company WHERE main_industry  =  'Banking' ORDER BY sales_billion ,  profits_billion",
        "predicted_parse_with_values": "select Rank , Company , Market_Value , Market_Value from company where Main_Industry = \"Oil and gas\" order by Sales_billion"
    },
    {
        "question": "Which start station had the most trips starting from August ? Give me the name and id of the station .",
        "db_id": "bike_1",
        "gold_parse": "SELECT start_station_name ,  start_station_id FROM trip WHERE start_date LIKE \"8/%\" GROUP BY start_station_name ORDER BY COUNT(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select start_station_name , start_station_id from trip group by start_station_id order by count ( * ) desc limit 1"
    },
    {
        "question": "Show the ids of all the faculty members who participate in an activity and advise a student .",
        "db_id": "activity_1",
        "gold_parse": "SELECT FacID FROM Faculty_participates_in INTERSECT SELECT advisor FROM Student",
        "predicted_parse_with_values": "select FacID from Faculty_Participates_in"
    },
    {
        "question": "what is the longest river flowing through texas",
        "db_id": "geo",
        "gold_parse": "SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river WHERE traverse  =  \"texas\" ) AND traverse  =  \"texas\"",
        "predicted_parse_with_values": "select T1.river_name from river as T1 join state as T2 on T1.traverse = T2.state_name join border_info as T3 on T2.state_name = T3.border where T3.state_name = \"dummy value\" order by T1.length desc limit 1"
    },
    {
        "question": "Find the states where have the colleges whose enrollments are less than the largest size .",
        "db_id": "soccer_2",
        "gold_parse": "SELECT DISTINCT state FROM college WHERE enr  <  (SELECT max(enr) FROM college)",
        "predicted_parse_with_values": "select state from College where enr < ( select max ( enr ) from College )"
    },
    {
        "question": "Find the name of bank branch that provided the greatest total amount of loans .",
        "db_id": "loan_1",
        "gold_parse": "SELECT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id GROUP BY T1.bname ORDER BY sum(T2.amount) DESC LIMIT 1",
        "predicted_parse_with_values": "select T2.bname from loan as T1 join bank as T2 on T1.branch_ID = T2.branch_ID group by T2.branch_ID order by sum ( T1.amount ) desc limit 1"
    },
    {
        "question": "Show the names of people , and dates and venues of debates they are on the affirmative side .",
        "db_id": "debate",
        "gold_parse": "SELECT T3.Name ,  T2.Date ,  T2.Venue FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID  =  T2.Debate_ID JOIN people AS T3 ON T1.Affirmative  =  T3.People_ID",
        "predicted_parse_with_values": "select T3.Name , T1.Date , T1.Venue from debate as T1 join debate_people as T2 on T1.Debate_ID = T2.Debate_ID join people as T3 on T2.Negative = T3.People_ID where T2.Affirmative = 2"
    },
    {
        "question": "How many friends does Dan have ?",
        "db_id": "network_2",
        "gold_parse": "SELECT count(T2.friend) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T1.name  =  'Dan'",
        "predicted_parse_with_values": "select count ( * ) from Person where name = \"Dan\""
    },
    {
        "question": "What is the average price of products with manufacturer codes equal to 2 ?",
        "db_id": "manufactory_1",
        "gold_parse": "SELECT avg(price) FROM products WHERE Manufacturer  =  2",
        "predicted_parse_with_values": "select avg ( Price ) from Products where Code = 2"
    },
    {
        "question": "What are the names of stations that are located in Palo Alto city but have never been the ending point of trips more than 100 times ?",
        "db_id": "bike_1",
        "gold_parse": "SELECT name FROM station WHERE city  =  \"Palo Alto\" EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  100",
        "predicted_parse_with_values": "select name from station where city = \"Redwood City\" except select name from station where city = \"San Jose\""
    },
    {
        "question": "what state has the longest river",
        "db_id": "geo",
        "gold_parse": "SELECT DISTINCT traverse FROM river WHERE LENGTH  =  ( SELECT MAX ( DISTINCT LENGTH ) FROM river )",
        "predicted_parse_with_values": "select T2.state_name from river as T1 join state as T2 on T1.traverse = T2.state_name order by T1.length desc limit 1"
    },
    {
        "question": "How many adults stay in the room CONRAD SELBIG checked in on Oct 23 , 2010 ?",
        "db_id": "inn_1",
        "gold_parse": "SELECT Adults FROM Reservations WHERE CheckIn  =  \"2010-10-23\" AND FirstName  =  \"CONRAD\" AND LastName  =  \"SELBIG\"",
        "predicted_parse_with_values": "select count ( * ) from Reservations where FirstName = \"SHERILYN\" and LastName = \"MCNEELEY\" and LastName = \"SINGERMAN\""
    },
    {
        "question": "What are the student ids for those on scholarship in major number 600 ?",
        "db_id": "game_1",
        "gold_parse": "SELECT StuID FROM Student WHERE major  =  600 INTERSECT SELECT StuID FROM Sportsinfo WHERE onscholarship  =  'Y'",
        "predicted_parse_with_values": "select StuID from Student where Major = 600"
    },
    {
        "question": "For the airline ids with the top 10 most routes operated , what are their names ?",
        "db_id": "flight_4",
        "gold_parse": "SELECT T1.name ,  T2.alid FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T2.alid ORDER BY count(*) DESC LIMIT 10",
        "predicted_parse_with_values": "select T2.alid from routes as T1 join airlines as T2 on T1.alid = T2.alid group by T1.alid order by count ( * ) desc limit 1"
    },
    {
        "question": "return me the papers on VLDB conference after 2000 .",
        "db_id": "academic",
        "gold_parse": "SELECT t2.title FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" AND t2.year  >  2000",
        "predicted_parse_with_values": "select T1.homepage from conference as T1 join publication as T2 on T1.cid = T2.cid where T1.name = \"dummy value\" and T2.year > \"dummy value\""
    },
    {
        "question": "what states high point are higher than that of colorado",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM highlow WHERE highest_elevation  >  ( SELECT highest_elevation FROM highlow WHERE state_name  =  \"colorado\" )",
        "predicted_parse_with_values": "select T1.state_name from border_info as T1 join state as T2 on T1.border = T2.state_name join highlow as T3 on T2.state_name = T3.state_name where T3.highest_point > ( select max ( highest_point ) from highlow where state_name = \"dummy value\" )"
    },
    {
        "question": "What is the name corresponding to the accoung with the lowest sum of checking and savings balances ?",
        "db_id": "small_bank_1",
        "gold_parse": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance LIMIT 1",
        "predicted_parse_with_values": "select T2.name , T1.balance from SAVINGS as T1 join ACCOUNTS as T2 on T1.custid = T2.custid join CHECKING as T3 on T2.custid = T3.custid order by T3.balance limit 1"
    },
    {
        "question": "Find the id and rank of the team that has the highest average attendance rate in 2014 .",
        "db_id": "baseball_1",
        "gold_parse": "SELECT T2.team_id ,  T2.rank FROM home_game AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id WHERE T1.year  =  2014 GROUP BY T1.team_id ORDER BY avg(T1.attendance) DESC LIMIT 1",
        "predicted_parse_with_values": "select team_id , rank from team group by div_id order by avg ( attendance ) desc limit 1"
    },
    {
        "question": "What are the names of courses that give either 3 credits , or 1 credit and 4 hours ?",
        "db_id": "college_3",
        "gold_parse": "SELECT CName FROM COURSE WHERE Credits  =  3 UNION SELECT CName FROM COURSE WHERE Credits  =  1 AND Hours  =  4",
        "predicted_parse_with_values": "select CName from Course where Credits = 1 or Credits = 4"
    },
    {
        "question": "how many major cities are there in texas",
        "db_id": "geo",
        "gold_parse": "SELECT COUNT ( city_name ) FROM city WHERE population  >  150000 AND state_name  =  \"texas\"",
        "predicted_parse_with_values": "select count ( * ) from city where state_name = \"dummy value\""
    },
    {
        "question": "which country did participated in the most number of Tournament competitions ?",
        "db_id": "sports_competition",
        "gold_parse": "SELECT country FROM competition WHERE competition_type  =  'Tournament' GROUP BY country ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select Country from competition group by Country order by count ( * ) desc limit 1"
    },
    {
        "question": "Return the color code and description for the product with the name 'chervil ' .",
        "db_id": "products_gen_characteristics",
        "gold_parse": "SELECT t1.color_code ,  t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t1.product_name  =  \"chervil\"",
        "predicted_parse_with_values": "select T2.color_code , T2.color_description from Products as T1 join Ref_Colors as T2 on T1.color_code = T2.color_code where T1.product_name = \"cinnam\""
    },
    {
        "question": "Find the directors of all movies featuring \" Kate Winslet \"",
        "db_id": "imdb",
        "gold_parse": "SELECT t3.name FROM CAST AS t4 JOIN actor AS t1 ON t4.aid  =  t1.aid JOIN movie AS t5 ON t5.mid  =  t4.msid JOIN directed_by AS t2 ON t5.mid  =  t2.msid JOIN director AS t3 ON t3.did  =  t2.did WHERE t1.name  =  \"Kate Winslet\"",
        "predicted_parse_with_values": "select T5.name from writer as T1 join written_by as T2 on T1.wid = T2.wid join copyright as T3 on T2.msid = T3.msid join directed_by as T4 on T3.msid = T4.msid join director as T5 on T4.did = T5.did where T1.name = \"dummy value\""
    },
    {
        "question": "Find all the addresses in East Julianaside , Texas or in Gleasonmouth , Arizona .",
        "db_id": "customers_and_addresses",
        "gold_parse": "SELECT address_content FROM addresses WHERE city  =  \"East Julianaside\" AND state_province_county  =  \"Texas\" UNION SELECT address_content FROM addresses WHERE city  =  \"Gleasonmouth\" AND state_province_county  =  \"Arizona\"",
        "predicted_parse_with_values": "select * from Addresses where city = \"Lucasville\" and state_province_county = \"RhodeIsland\" union select * from Addresses where city = \"Reingertown\" and state_province_county = \"RhodeIsland\""
    },
    {
        "question": "Which building does the instructor who teaches the most number of courses live in ?",
        "db_id": "college_3",
        "gold_parse": "SELECT T2.Building FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select Building from Faculty group by Building order by count ( * ) desc limit 1"
    },
    {
        "question": "what is the total area of the usa",
        "db_id": "geo",
        "gold_parse": "SELECT SUM ( area ) FROM state",
        "predicted_parse_with_values": "select sum ( area ) from state where country_name = \"dummy value\""
    },
    {
        "question": "How many schools are in the basketball match ?",
        "db_id": "university_basketball",
        "gold_parse": "SELECT count(DISTINCT school_id) FROM basketball_match",
        "predicted_parse_with_values": "select count ( * ) from basketball_match"
    },
    {
        "question": "List all public schools and their locations .",
        "db_id": "university_basketball",
        "gold_parse": "SELECT school ,  LOCATION FROM university WHERE affiliation  =  'Public'",
        "predicted_parse_with_values": "select School , Location from university"
    },
    {
        "question": "find the rank , company names , market values of the companies in the banking industry order by their sales and profits in billion .",
        "db_id": "gas_company",
        "gold_parse": "SELECT rank ,  company ,  market_value FROM company WHERE main_industry  =  'Banking' ORDER BY sales_billion ,  profits_billion",
        "predicted_parse_with_values": "select Rank , Company , Market_Value from company where Main_Industry = \"Banking\" order by Profits_billion"
    },
    {
        "question": "What are the first and last name of the president of the club \" Bootup Baltimore \" ?",
        "db_id": "club_1",
        "gold_parse": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t2.position  =  \"President\"",
        "predicted_parse_with_values": "select T1.Fname , T1.LName from Student as T1 join Member_of_club as T2 on T1.StuID = T2.StuID join Club as T3 on T2.ClubID = T3.ClubID where T3.ClubName = \"Tennis Club\""
    },
    {
        "question": "Please show the employee first names and ids of employees who serve at least 10 customers .",
        "db_id": "chinook_1",
        "gold_parse": "SELECT T1.FirstName ,  T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  >=  10",
        "predicted_parse_with_values": "select FirstName , EmployeeId from Employee group by EmployeeId having count ( * ) >= 1"
    },
    {
        "question": "what states does the shortest river run through",
        "db_id": "geo",
        "gold_parse": "SELECT traverse FROM river WHERE LENGTH  =  ( SELECT MIN ( LENGTH ) FROM river )",
        "predicted_parse_with_values": "select T3.state_name from river as T1 join state as T2 on T1.traverse = T2.state_name join border_info as T3 on T2.state_name = T3.border order by T1.length limit 1"
    },
    {
        "question": "Find the city that hosted some events in the most recent year . What is the id of this city ?",
        "db_id": "city_record",
        "gold_parse": "SELECT host_city FROM hosting_city ORDER BY YEAR DESC LIMIT 1",
        "predicted_parse_with_values": "select T1.City from city as T1 join hosting_city as T2 on T1.City_ID = T2.Host_City order by hosting_T1.Year desc limit 1"
    },
    {
        "question": "What are the types of competition that have most 5 competitions for that type ?",
        "db_id": "sports_competition",
        "gold_parse": "SELECT Competition_type FROM competition GROUP BY Competition_type HAVING COUNT(*)  <=  5",
        "predicted_parse_with_values": "select Competition_type from competition group by Competition_type order by count ( * ) desc limit 1"
    },
    {
        "question": "How many classes are held in each department ?",
        "db_id": "college_1",
        "gold_parse": "SELECT count(*) ,  dept_code FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code  =  T2.crs_code GROUP BY dept_code",
        "predicted_parse_with_values": "select count ( * ) , T4.DEPT_NAME from CLASS as T1 join ENROLL as T2 on T1.CLASS_CODE = T2.CLASS_CODE join STUDENT as T3 on T2.STU_NUM = T3.STU_NUM join DEPARTMENT as T4 on T3.DEPT_CODE = T4.DEPT_CODE group by T4.DEPT_NAME"
    },
    {
        "question": "return me the number of papers published in the VLDB conference before 2000 .",
        "db_id": "academic",
        "gold_parse": "SELECT COUNT ( DISTINCT t2.title ) FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" AND t2.year  <  2000",
        "predicted_parse_with_values": "select count ( T2.pid ) from conference as T1 join publication as T2 on T1.cid = T2.cid where T1.name = \"dummy value\" and T2.year < \"dummy value\""
    },
    {
        "question": "What are the countries that contain 3 or more cities ?",
        "db_id": "sakila_1",
        "gold_parse": "SELECT T2.country FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id GROUP BY T2.country_id HAVING count(*)  >=  3",
        "predicted_parse_with_values": "select T2.country from city as T1 join country as T2 on T1.country_id = T2.country_id group by T2.country having count ( * ) >= 1"
    },
    {
        "question": "Find the name of persons who are friends with Alice for the shortest years .",
        "db_id": "network_2",
        "gold_parse": "SELECT name FROM PersonFriend WHERE friend =  'Alice' AND YEAR  =  (SELECT min(YEAR) FROM PersonFriend WHERE friend =  'Alice')",
        "predicted_parse_with_values": "select T2.name from PersonFriend as T1 join Person as T2 on T1.friend = T2.name where T1.friend = \"Dan\" order by T1.year limit 1"
    },
    {
        "question": "What are the names of products with 'white ' as their color description ?",
        "db_id": "products_gen_characteristics",
        "gold_parse": "SELECT t1.product_name FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"white\"",
        "predicted_parse_with_values": "select T1.product_name from Products as T1 join Ref_Colors as T2 on T1.color_code = T2.color_code where T2.color_description like \"green\""
    },
    {
        "question": "What are the names of candidates who have a lower support rate than oppose rate ?",
        "db_id": "candidate_poll",
        "gold_parse": "SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id WHERE t2.support_rate  <  t2.oppose_rate",
        "predicted_parse_with_values": "select T1.Name from people as T1 join candidate as T2 on T1.People_ID = T2.People_ID where T2.Support_rate < ( select min ( Support_rate ) from candidate )"
    },
    {
        "question": "what is the largest city in wyoming by population",
        "db_id": "geo",
        "gold_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name  =  \"wyoming\" ) AND state_name  =  \"wyoming\"",
        "predicted_parse_with_values": "select city_name , max ( population ) from city where state_name = \"dummy value\""
    },
    {
        "question": "Find the average age and experience working length of journalists working on different role type .",
        "db_id": "news_report",
        "gold_parse": "SELECT avg(t1.age) ,  avg(Years_working) ,  t2.work_type FROM journalist AS t1 JOIN news_report AS t2 ON t1.journalist_id  =  t2.journalist_id GROUP BY t2.work_type",
        "predicted_parse_with_values": "select avg ( T2.Age ) , T1.Work_Type from news_report as T1 join journalist as T2 on T1.journalist_ID = T2.journalist_ID group by T1.Work_Type"
    },
    {
        "question": "What are the first name and gender of the students who have allergy to milk but can put up with cats ?",
        "db_id": "allergy_1",
        "gold_parse": "SELECT fname ,  sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Milk\" EXCEPT SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Cat\")",
        "predicted_parse_with_values": "select T3.Fname , T3.Sex from Allergy_Type as T1 join Has_Allergy as T2 on T1.Allergy = T2.Allergy join Student as T3 on T2.StuID = T3.StuID where T1.Allergytype = \"animal\" and T1.Allergytype = \"environmental\""
    },
    {
        "question": "Give me a list of cities whose temperature in Mar is lower than that in July and which have also served as host cities ?",
        "db_id": "city_record",
        "gold_parse": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Jul INTERSECT SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city",
        "predicted_parse_with_values": "select T2.City from temperature as T1 join city as T2 on T1.City_ID = T2.City_ID where T1.Mar < 19.4 intersect select T4.City from temperature as T3 join city as T4 on T3.City_ID = T4.City_ID where T3.Mar = 19.4"
    },
    {
        "question": "What are the card numbers of members from Kentucky ?",
        "db_id": "shop_membership",
        "gold_parse": "SELECT card_number FROM member WHERE Hometown LIKE \"%Kentucky%\"",
        "predicted_parse_with_values": "select Card_Number from member where Hometown = \"Columbia , South Carolina\""
    },
    {
        "question": "Which studios have an average gross of over 4500000 ?",
        "db_id": "film_rank",
        "gold_parse": "SELECT Studio FROM film GROUP BY Studio HAVING avg(Gross_in_dollar)  >=  4500000",
        "predicted_parse_with_values": "select Studio from film group by Studio having avg ( Gross_in_dollar ) > 1"
    },
    {
        "question": "What is the code of the course which the student whose last name is Smithson took ?",
        "db_id": "college_1",
        "gold_parse": "SELECT T1.crs_code FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T3.stu_num  =  T2.stu_num WHERE T3.stu_lname  =  'Smithson'",
        "predicted_parse_with_values": "select T3.CRS_CODE from STUDENT as T1 join DEPARTMENT as T2 on T1.DEPT_CODE = T2.DEPT_CODE join COURSE as T3 on T2.DEPT_CODE = T3.DEPT_CODE where T1.STU_LNAME = \"Oblonski\""
    },
    {
        "question": "return me all the papers in VLDB conference in \" University of Michigan \" .",
        "db_id": "academic",
        "gold_parse": "SELECT t5.title FROM organization AS t3 JOIN author AS t1 ON t3.oid  =  t1.oid JOIN writes AS t4 ON t4.aid  =  t1.aid JOIN publication AS t5 ON t4.pid  =  t5.pid JOIN conference AS t2 ON t5.cid  =  t2.cid WHERE t2.name  =  \"VLDB\" AND t3.name  =  \"University of Michigan\"",
        "predicted_parse_with_values": "select T2.jid from conference as T1 join publication as T2 on T1.cid = T2.cid join writes as T3 on T2.pid = T3.pid join author as T4 on T3.aid = T4.aid where T1.name = \"dummy value\" and T4.name = \"dummy value\""
    },
    {
        "question": "What are the first and last names of the instructors who teach the top 3 number of courses ?",
        "db_id": "college_3",
        "gold_parse": "SELECT T2.Fname ,  T2.Lname FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 3",
        "predicted_parse_with_values": "select Fname , Lname from Faculty group by FacID , Lname order by count ( * ) desc limit 1"
    },
    {
        "question": "How many players did Boston Red Stockings have in 2000 ?",
        "db_id": "baseball_1",
        "gold_parse": "SELECT count(*) FROM salary AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  = 'Boston Red Stockings' AND T1.year  =  2000",
        "predicted_parse_with_values": "select count ( T3.player_id ) from team as T1 join batting_postseason as T2 on T1.team_id = T2.team_id join player as T3 on T2.player_id = T3.player_id where T1.year = 1875 and T1.year = 1883"
    },
    {
        "question": "What is the id and name of the aircraft that can cover the maximum distance ?",
        "db_id": "flight_1",
        "gold_parse": "SELECT aid ,  name FROM Aircraft ORDER BY distance DESC LIMIT 1",
        "predicted_parse_with_values": "select name , name from aircraft order by distance desc limit 1"
    },
    {
        "question": "What are the names , details and data types of the characteristics which are never used by any product ?",
        "db_id": "products_gen_characteristics",
        "gold_parse": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id",
        "predicted_parse_with_values": "select characteristic_name , other_characteristic_details , characteristic_data_type from Characteristics except select characteristic_name , other_characteristic_details from Characteristics"
    },
    {
        "question": "Which claims had exactly one settlement ? For each , tell me the the date the claim was made , the date it was settled and the amount settled .",
        "db_id": "insurance_policies",
        "gold_parse": "SELECT T1.claim_id ,  T1.date_claim_made ,  T1.Date_Claim_Settled FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id GROUP BY T1.claim_id HAVING count(*)  =  1",
        "predicted_parse_with_values": "select Date_Claim_Made , Date_Claim_Settled from Claims group by Claim_ID having count ( * ) = 1"
    },
    {
        "question": "List the name of rooms with king or queen bed .",
        "db_id": "inn_1",
        "gold_parse": "SELECT roomName FROM Rooms WHERE bedType  =  \"King\" OR bedType  =  \"Queen\"",
        "predicted_parse_with_values": "select roomName from Rooms where beds = 2"
    },
    {
        "question": "how many states does the missouri river flow through",
        "db_id": "geo",
        "gold_parse": "SELECT COUNT ( traverse ) FROM river WHERE river_name  =  \"missouri\"",
        "predicted_parse_with_values": "select count ( * ) from river as T1 join state as T2 on T1.traverse = T2.state_name where T1.river_name = \"dummy value\""
    },
    {
        "question": "What are the balances of checking accounts belonging to people with savings balances greater than the average savings balance ?",
        "db_id": "small_bank_1",
        "gold_parse": "SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name IN (SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM savings))",
        "predicted_parse_with_values": "select T3.balance from SAVINGS as T1 join ACCOUNTS as T2 on T1.custid = T2.custid join CHECKING as T3 on T2.custid = T3.custid where T1.balance > ( select avg ( balance ) from SAVINGS )"
    },
    {
        "question": "what is the largest state",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state )",
        "predicted_parse_with_values": "select state_name from state order by density desc limit 1"
    },
    {
        "question": "which is the lowest point of the states that the mississippi runs through",
        "db_id": "geo",
        "gold_parse": "SELECT lowest_point FROM highlow WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" ) ORDER BY lowest_elevation LIMIT 1",
        "predicted_parse_with_values": "select min ( T3.lowest_point ) from river as T1 join state as T2 on T1.traverse = T2.state_name join highlow as T3 on T2.state_name = T3.state_name where T1.river_name = \"dummy value\""
    },
    {
        "question": "Return the official native languages of countries who have players from Maryland or Duke colleges .",
        "db_id": "match_season",
        "gold_parse": "SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.College  =  \"Maryland\" OR T2.College  =  \"Duke\"",
        "predicted_parse_with_values": "select T2.Official_native_language from match_season as T1 join country as T2 on T1.Country = T2.Country_id join team as T3 on T1.Team = T3.Team_id join player as T4 on T3.Team_id = T4.Team where T1.College = \"Connecticut\" or T4.Player = \"Jeong Suk-Young ( 793 ) \""
    },
    {
        "question": "What are the names of artists who are Male and are from UK ?",
        "db_id": "music_1",
        "gold_parse": "SELECT artist_name FROM artist WHERE country  =  \"UK\" AND gender  =  \"Male\"",
        "predicted_parse_with_values": "select T2.artist_name from song as T1 join artist as T2 on T1.artist_name = T2.artist_name where T2.gender = \"Male\" and T1.languages = \"bangla\""
    },
    {
        "question": "Find the first name and office of history professor who did not get a Ph.D. degree .",
        "db_id": "college_1",
        "gold_parse": "SELECT T2.emp_fname ,  T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T1.dept_code  =  T3.dept_code WHERE T3.dept_name  =  'History' AND T1.prof_high_degree != 'Ph.D.'",
        "predicted_parse_with_values": "select T1.EMP_FNAME , T2.PROF_OFFICE from EMPLOYEE as T1 join PROFESSOR as T2 on T1.EMP_NUM = T2.EMP_NUM where T2.PROF_HIGH_DEGREE = \"Ph.D.\" except select T3.STU_FNAME , T5.PROF_OFFICE from STUDENT as T5 join DEPARTMENT as T4 on T5.DEPT_CODE = T4.DEPT_CODE join PROFESSOR as T5 on T4.DEPT_CODE = T5.DEPT_CODE where T5.PROF_HIGH_DEGREE = \"MBA\""
    },
    {
        "question": "What are the schools that were either founded before 1850 or are public ?",
        "db_id": "university_basketball",
        "gold_parse": "SELECT school FROM university WHERE founded  >  1850 OR affiliation  =  'Public'",
        "predicted_parse_with_values": "select School from university where Founded < 1743.0 or Founded = 1957.0"
    },
    {
        "question": "What are the details of the markets that can be accessed by walk or bus ?",
        "db_id": "cre_Theme_park",
        "gold_parse": "SELECT T1.Market_Details FROM Street_Markets AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Market_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  \"walk\" OR  T2.How_to_Get_There  =  \"bus\"",
        "predicted_parse_with_values": "select Market_Details from Street_Markets where Market_ID in ( select T3.Market_ID from Locations as T1 join Tourist_Attractions as T2 on T1.Location_ID = T2.Location_ID join Street_Markets as T3 on T2.Tourist_Attraction_ID = T3.Market_ID where T1.Address = \"0692 Georgiana Pass\" or T2.How_to_Get_There = \"bus\" )"
    },
    {
        "question": "What are the names of all colleges with a larger enrollment than the largest college in Florida ?",
        "db_id": "soccer_2",
        "gold_parse": "SELECT cName FROM college WHERE enr  >  (SELECT max(enr) FROM college WHERE state  =  'FL')",
        "predicted_parse_with_values": "select cName from College where enr > ( select max ( enr ) from College where state = \"AZ\" and state = \"FL\" )"
    },
    {
        "question": "which rivers run through the state with the largest city in the us",
        "db_id": "geo",
        "gold_parse": "SELECT river_name FROM river WHERE traverse IN ( SELECT state_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city ) )",
        "predicted_parse_with_values": "select T1.river_name from river as T1 join state as T2 on T1.traverse = T2.state_name where T1.country_name = \"dummy value\" order by T2.density desc limit 1"
    },
    {
        "question": "Show all student IDs with more than total 10 hours per week on all sports played .",
        "db_id": "game_1",
        "gold_parse": "SELECT StuID FROM Sportsinfo GROUP BY StuID HAVING sum(hoursperweek)  >  10",
        "predicted_parse_with_values": "select sum ( T2.Hours_Played ) , T1.StuID from Student as T1 join Plays_Games as T2 on T1.StuID = T2.StuID group by T1.StuID"
    },
    {
        "question": "What are the names of the tourist attractions that can be accessed by bus ?",
        "db_id": "cre_Theme_park",
        "gold_parse": "SELECT Name FROM TOURIST_ATTRACTIONS WHERE How_to_Get_There  =  \"bus\"",
        "predicted_parse_with_values": "select Name from Tourist_Attractions where Name = \"film festival\""
    },
    {
        "question": "Who served as an advisor for students who have treasurer votes in the spring election cycle ?",
        "db_id": "voter_2",
        "gold_parse": "SELECT DISTINCT T1.Advisor FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Treasurer_Vote WHERE T2.Election_Cycle  =  \"Spring\"",
        "predicted_parse_with_values": "select T2.Advisor from Voting_record as T1 join Student as T2 on T1.Class_Senator_Vote = T2.StuID where T1.Election_Cycle = \"Spring\""
    },
    {
        "question": "Show all allergies with type food .",
        "db_id": "allergy_1",
        "gold_parse": "SELECT DISTINCT allergy FROM Allergy_type WHERE allergytype  =  \"food\"",
        "predicted_parse_with_values": "select T1.Allergy from Has_Allergy as T1 join Allergy_Type as T2 on T1.Allergy = T2.Allergy where T2.Allergytype = \"animal\""
    },
    {
        "question": "What are the first name and last name of each male member in club \" Hopkins Student Enterprises \" ?",
        "db_id": "club_1",
        "gold_parse": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Hopkins Student Enterprises\" AND t3.sex  =  \"M\"",
        "predicted_parse_with_values": "select T1.Fname , T1.LName from Student as T1 join Member_of_club as T2 on T1.StuID = T2.StuID join Club as T3 on T2.ClubID = T3.ClubID where T3.ClubName = \"Bootup Baltimore\" and T1.LName = \"Woods\""
    },
    {
        "question": "Show the average , minimum , and maximum age for different majors .",
        "db_id": "game_1",
        "gold_parse": "SELECT major ,  avg(age) ,  min(age) ,  max(age) FROM Student GROUP BY major",
        "predicted_parse_with_values": "select avg ( Age ) , max ( Age ) , max ( Age ) , max ( Age ) , max ( Age ) , max ( Age ) , max ( Age ) , max ( Age ) , max ( Age ) , max ( Age ) , max ( Age ) , max ( Age ) , max ( Age ) , max ( Age ) , max ( Age ) , max ( Age ) from Student group by Major"
    },
    {
        "question": "What is the name of the wrestler with the fewest days held ?",
        "db_id": "wrestler",
        "gold_parse": "SELECT Name FROM wrestler ORDER BY Days_held ASC LIMIT 1",
        "predicted_parse_with_values": "select Name from wrestler order by Days_held limit 1"
    },
    {
        "question": "What are the first name and last name of Linda Smith 's advisor ?",
        "db_id": "activity_1",
        "gold_parse": "SELECT T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T2.fname  =  \"Linda\" AND T2.lname  =  \"Smith\"",
        "predicted_parse_with_values": "select Fname , Lname from Faculty where Fname = \"Rao\" and Lname = \"Iglesias\""
    },
    {
        "question": "What is the name of the game that has been played the most ?",
        "db_id": "game_1",
        "gold_parse": "SELECT gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid  =  T2.gameid GROUP BY T1.gameid ORDER BY sum(hours_played) DESC LIMIT 1",
        "predicted_parse_with_values": "select T2.GName from Plays_Games as T1 join Video_Games as T2 on T1.GameID = T2.GameID group by T1.GameID order by count ( * ) desc limit 1"
    },
    {
        "question": "what is the last name and gender of all students who played both Call of Destiny and Works of Widenius ?",
        "db_id": "game_1",
        "gold_parse": "SELECT lname ,  sex FROM Student WHERE StuID IN (SELECT T1.StuID FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.GameID  =  T2.GameID WHERE T2.Gname  =  \"Call of Destiny\" INTERSECT SELECT T1.StuID FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.GameID  =  T2.GameID WHERE T2.Gname  =  \"Works of Widenius\")",
        "predicted_parse_with_values": "select T2.LName , T2.Sex from SportsInfo as T1 join Student as T2 on T1.StuID = T2.StuID where T1.GamesPlayed = 45 intersect select T4.LName , T4.Sex from SportsInfo as T3 join Student as T4 on T3.StuID = T4.StuID where T3.GamesPlayed = 45"
    },
    {
        "question": "Retrieve the list of all cities .",
        "db_id": "customers_and_addresses",
        "gold_parse": "SELECT DISTINCT city FROM addresses",
        "predicted_parse_with_values": "select city from Addresses"
    },
    {
        "question": "Show the first and last name of all the faculty members who participated in some activity , together with the number of activities they participated in .",
        "db_id": "activity_1",
        "gold_parse": "SELECT  T1.fname ,  T1.lname ,  count(*) ,  T1.FacID FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID GROUP BY T1.FacID",
        "predicted_parse_with_values": "select Fname , Lname , count ( * ) from Faculty group by FacID"
    },
    {
        "question": "what state bordering oklahoma has the largest population",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"oklahoma\" ) ORDER BY population DESC LIMIT 1",
        "predicted_parse_with_values": "select T1.state_name from border_info as T1 join state as T2 on T1.border = T2.state_name where T1.border = \"dummy value\" order by T2.population desc limit 1"
    },
    {
        "question": "What are the names , ages , and jobs of all people who are friends with Alice for the longest amount of time ?",
        "db_id": "network_2",
        "gold_parse": "SELECT T1.name ,  T1.age ,  T1.job FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend =  'Alice' AND T2.year  =  (SELECT max(YEAR) FROM PersonFriend WHERE friend =  'Alice')",
        "predicted_parse_with_values": "select T2.name , T2.age , T2.job from PersonFriend as T1 join Person as T2 on T1.friend = T2.name where T1.friend = \"Bob\" order by T1.year desc limit 1"
    },
    {
        "question": "How much did the the player with first name Len and last name Barker earn between 1985 to 1990 in total ?",
        "db_id": "baseball_1",
        "gold_parse": "SELECT sum(T1.salary) FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id WHERE T2.name_first  =  'Len' AND T2.name_last = 'Barker' AND T1.year BETWEEN 1985 AND 1990",
        "predicted_parse_with_values": "select sum ( death_year ) from player where name_first = \"Cam\" and death_year <= 1923"
    },
    {
        "question": "which state has the highest population density",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM state WHERE density  =  ( SELECT MAX ( density ) FROM state )",
        "predicted_parse_with_values": "select state_name from state order by density desc limit 1"
    },
    {
        "question": "What are the teams of the players , sorted in ascending alphabetical order ?",
        "db_id": "school_player",
        "gold_parse": "SELECT Team FROM player ORDER BY Team ASC",
        "predicted_parse_with_values": "select Team from player order by Player asc"
    },
    {
        "question": "What is the salaray and name of the employee with the most certificates to fly planes more than 5000 ?",
        "db_id": "flight_1",
        "gold_parse": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.distance  >  5000 GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select T1.name , T1.name from employee as T1 join certificate as T2 on T1.eid = T2.eid join aircraft as T3 on T2.aid = T3.aid where T3.name > \"SAAB 340\" group by T1.eid order by count ( * ) desc limit 1"
    },
    {
        "question": "what is the highest point in the state with the smallest population",
        "db_id": "geo",
        "gold_parse": "SELECT t2.highest_point FROM state AS t1 JOIN highlow AS t2 ON t1.state_name  =  t2.state_name WHERE t1.state_name IN ( SELECT state_name FROM state WHERE population  =  ( SELECT MIN ( population ) FROM state ) )",
        "predicted_parse_with_values": "select max ( T2.highest_point ) from state as T1 join highlow as T2 on T1.state_name = T2.state_name where T1.population = ( select min ( population ) from state ) order by population limit 1"
    },
    {
        "question": "How many movie directors are there ?",
        "db_id": "culture_company",
        "gold_parse": "SELECT COUNT (DISTINCT director) FROM movie",
        "predicted_parse_with_values": "select count ( * ) from movie"
    },
    {
        "question": "which movie has the most number of actors from China ?",
        "db_id": "imdb",
        "gold_parse": "SELECT t2.title FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.nationality  =  \"China\" GROUP BY t2.title ORDER BY COUNT ( DISTINCT t1.name  ) DESC LIMIT 1",
        "predicted_parse_with_values": "select T2.title from actor as T1 join movie as T2 where T1.nationality = \"dummy value\" group by T2.title order by count ( * ) desc limit 1"
    },
    {
        "question": "How many players played each position ?",
        "db_id": "match_season",
        "gold_parse": "SELECT POSITION ,  COUNT(*) FROM match_season GROUP BY POSITION",
        "predicted_parse_with_values": "select count ( * ) , Position from match_season group by Position"
    },
    {
        "question": "Return the id and full name of the customer who has the fewest accounts .",
        "db_id": "customers_card_transactions",
        "gold_parse": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1",
        "predicted_parse_with_values": "select T1.customer_id , T2.customer_first_name , T2.customer_last_name from Accounts as T1 join Customers as T2 group by T1.customer_id order by count ( * ) asc limit 1"
    },
    {
        "question": "Show all allergies with number of students affected .",
        "db_id": "allergy_1",
        "gold_parse": "SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy",
        "predicted_parse_with_values": "select count ( * ) , T1.Allergy from Has_Allergy as T1 join Student as T2 on T1.StuID = T2.StuID group by T1.Allergy"
    },
    {
        "question": "How many documents have the status code done ?",
        "db_id": "cre_Doc_Control_Systems",
        "gold_parse": "SELECT count(*) FROM Documents WHERE document_status_code = \"done\"",
        "predicted_parse_with_values": "select count ( * ) from Documents"
    },
    {
        "question": "What is the id , genre , and name of the artist for every English song ordered by ascending rating ?",
        "db_id": "music_1",
        "gold_parse": "SELECT f_id ,  genre_is ,  artist_name FROM song WHERE languages  =   \"english\" ORDER BY rating",
        "predicted_parse_with_values": "select T1.f_id , T3.preferred_genre , T2.g_name from song as T1 join genre as T2 on T1.genre_is = T2.g_name join artist as T3 on T1.artist_name = T3.artist_name where T2.rating = 8 order by T1.rating"
    },
    {
        "question": "what are the last names of the teachers who teach grade 5 ?",
        "db_id": "student_1",
        "gold_parse": "SELECT DISTINCT T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE grade  =  5",
        "predicted_parse_with_values": "select T2.LastName from list as T1 join teachers as T2 where T1.Grade = 3"
    },
    {
        "question": "how many major cities are there",
        "db_id": "geo",
        "gold_parse": "SELECT COUNT ( city_name ) FROM city WHERE population  >  150000",
        "predicted_parse_with_values": "select count ( * ) from city"
    },
    {
        "question": "How many students got accepted after the tryout ?",
        "db_id": "soccer_2",
        "gold_parse": "SELECT count(*) FROM tryout WHERE decision  =  'yes'",
        "predicted_parse_with_values": "select count ( * ) from College where enr > 18000"
    },
    {
        "question": "How many parties do we have ?",
        "db_id": "party_people",
        "gold_parse": "SELECT count(DISTINCT party_name) FROM party",
        "predicted_parse_with_values": "select count ( * ) from party"
    },
    {
        "question": "How many papers are written by authors from the institution \" University of Pennsylvania \" ?",
        "db_id": "icfp_1",
        "gold_parse": "SELECT count(DISTINCT t1.title) FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"University of Pennsylvania\"",
        "predicted_parse_with_values": "select count ( * ) from Inst as T1 join Authorship as T2 on T1.instID = T2.instID join Papers as T3 on T2.paperID = T3.paperID where T1.name = \"INRIA\""
    },
    {
        "question": "How many songs appear in studio albums ?",
        "db_id": "music_2",
        "gold_parse": "SELECT count(DISTINCT T3.title) FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid  =  T2.albumid JOIN songs AS T3 ON T2.songid  =  T3.songid WHERE t1.type  =  \"Studio\"",
        "predicted_parse_with_values": "select count ( * ) from Albums as T1 join Tracklists as T2 on T1.AId = T2.AlbumId join Songs as T3 on T2.SongId = T3.SongId where T1.Title = \"dummy value\""
    },
    {
        "question": "what is the most populous city",
        "db_id": "geo",
        "gold_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city )",
        "predicted_parse_with_values": "select city_name from city group by city_name order by count ( * ) desc limit 1"
    },
    {
        "question": "Find the claim id and the number of settlements made for the claim with the most recent settlement date .",
        "db_id": "insurance_policies",
        "gold_parse": "SELECT count(*) ,  T1.claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id  =  T2.claim_id GROUP BY T1.claim_id ORDER BY T1.Date_Claim_Settled DESC LIMIT 1",
        "predicted_parse_with_values": "select T1.Claim_ID , T2.Date_Claim_Settled from Claims as T1 join Settlements as T2 on T1.Claim_ID = T2.Claim_ID order by T1.Date_Claim_Settled desc limit 1"
    },
    {
        "question": "Find the captain rank that has no captain in Third-rate ship of the line class .",
        "db_id": "ship_1",
        "gold_parse": "SELECT rank FROM captain EXCEPT SELECT rank FROM captain WHERE CLASS  =  'Third-rate ship of the line'",
        "predicted_parse_with_values": "select Rank from captain except select T2.Rank from Ship as T1 join captain as T2 on T1.Ship_ID = T2.Ship_ID where T1.Type = \"Panamax\""
    },
    {
        "question": "Find how many school locations have the word 'NY ' .",
        "db_id": "university_basketball",
        "gold_parse": "SELECT count(*) FROM university WHERE LOCATION LIKE \"%NY%\"",
        "predicted_parse_with_values": "select count ( ( ) ) from university where Location like \"Annville , PA\""
    },
    {
        "question": "Return all players sorted by college in ascending alphabetical order .",
        "db_id": "match_season",
        "gold_parse": "SELECT player FROM match_season ORDER BY College ASC",
        "predicted_parse_with_values": "select T3.Player from match_season as T1 join team as T2 on T1.Team = T2.Team_id join player as T3 on T2.Team_id = T3.Team order by T1.College"
    },
    {
        "question": "Show all artist names with an average exhibition attendance over 200 .",
        "db_id": "theme_gallery",
        "gold_parse": "SELECT T3.name FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id JOIN artist AS T3 ON T3.artist_id  =  T2.artist_id GROUP BY T3.artist_id HAVING avg(T1.attendance)  >  200",
        "predicted_parse_with_values": "select T3.Name from exhibition_record as T1 join exhibition as T2 on T1.Exhibition_ID = T2.Exhibition_ID join artist as T3 on T2.Artist_ID = T3.Artist_ID group by T3.Name having avg ( T1.Attendance ) > 1"
    },
    {
        "question": "List all the directors of movies about nuclear weapons",
        "db_id": "imdb",
        "gold_parse": "SELECT t3.name FROM director AS t3 JOIN directed_by AS t2 ON t3.did  =  t2.did JOIN movie AS t4 ON t4.mid  =  t2.msid JOIN tags AS t5 ON t5.msid  =  t4.mid JOIN keyword AS t1 ON t5.kid  =  t1.id WHERE t1.keyword  =  \"nuclear weapons\"",
        "predicted_parse_with_values": "select T5.name from genre as T1 join classification as T2 on T1.gid = T2.gid join copyright as T3 on T2.msid = T3.msid join directed_by as T4 on T3.msid = T4.msid join director as T5 on T4.did = T5.did where T1.genre = \"dummy value\""
    },
    {
        "question": "Which 3 players won the most player awards ? List their full name and id .",
        "db_id": "baseball_1",
        "gold_parse": "SELECT T1.name_first ,  T1.name_last ,  T1.player_id FROM player AS T1 JOIN player_award AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.player_id ORDER BY count(*) DESC LIMIT 3",
        "predicted_parse_with_values": "select T2.name_given , T1.player_id from player_award as T1 join player as T2 on T1.player_id = T2.player_id group by T2.player_id order by count ( * ) desc limit 1"
    },
    {
        "question": "What is the name of the youngest captain ?",
        "db_id": "ship_1",
        "gold_parse": "SELECT name FROM captain ORDER BY age LIMIT 1",
        "predicted_parse_with_values": "select Name from captain order by age desc limit 1"
    },
    {
        "question": "For each competition , count the number of matches .",
        "db_id": "city_record",
        "gold_parse": "SELECT count(*) ,  Competition FROM MATCH GROUP BY Competition",
        "predicted_parse_with_values": "select Competition , count ( * ) from match group by Competition"
    },
    {
        "question": "how large is new mexico",
        "db_id": "geo",
        "gold_parse": "SELECT area FROM state WHERE state_name  =  \"new mexico\"",
        "predicted_parse_with_values": "select count ( * ) from border_info as T1 join state as T2 on T1.border = T2.state_name join highlow as T3 on T2.state_name = T3.state_name where T1.state_name = \"dummy value\" and T3.highest_elevation = \"dummy value\""
    },
    {
        "question": "Find the match ids of the cities that hosted competition \" 1994 FIFA World Cup qualification \" ?",
        "db_id": "city_record",
        "gold_parse": "SELECT match_id FROM MATCH WHERE competition = \"1994 FIFA World Cup qualification\"",
        "predicted_parse_with_values": "select T2.City from hosting_city as T1 join city as T2 on T1.Host_City = T2.City_ID join match as T3 on T1.Match_ID = T3.Match_ID where T3.Competition = \"1994 FIFA World Cup qualification\" and T1.Year = 2011"
    },
    {
        "question": "Find the number of manufactures that are based in Tokyo or Beijing .",
        "db_id": "manufactory_1",
        "gold_parse": "SELECT count(*) FROM manufacturers WHERE headquarter  =  'Tokyo' OR headquarter  =  'Beijing'",
        "predicted_parse_with_values": "select count ( * ) from Manufacturers where Headquarter = \"Tokyo\" or Headquarter = \"Paris\""
    },
    {
        "question": "Who is the \" CTO \" of club \" Hopkins Student Enterprises \" ? Show the first name and last name .",
        "db_id": "club_1",
        "gold_parse": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Hopkins Student Enterprises\" AND t2.position  =  \"CTO\"",
        "predicted_parse_with_values": "select T1.Fname , T1.LName from Student as T1 join Member_of_club as T2 on T1.StuID = T2.StuID join Club as T3 on T2.ClubID = T3.ClubID where T3.ClubName = \"Hopkins Student Enterprises\" and T1.LName = \"Jones\""
    },
    {
        "question": "How many professors are in the accounting dept ?",
        "db_id": "college_1",
        "gold_parse": "SELECT count(*) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE DEPT_NAME  =  \"Accounting\"",
        "predicted_parse_with_values": "select count ( * ) from PROFESSOR where DEPT_CODE = \"MATH\""
    },
    {
        "question": "what is the capital city of the largest state in the us",
        "db_id": "geo",
        "gold_parse": "SELECT capital FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state )",
        "predicted_parse_with_values": "select T2.capital from city as T1 join state as T2 on T1.state_name = T2.state_name where T1.country_name = \"dummy value\" order by T2.density desc limit 1"
    },
    {
        "question": "Find the players ' first name and last name who won award both in 1960 and in 1961 .",
        "db_id": "baseball_1",
        "gold_parse": "SELECT T1.name_first , T1.name_last FROM player AS T1 JOIN player_award AS T2 WHERE T2.year  =  1960 INTERSECT SELECT T1.name_first , T1.name_last FROM player AS T1 JOIN player_award AS T2 WHERE T2.year  =  1961",
        "predicted_parse_with_values": "select name_first , name_last from player where birth_year = 1982 intersect select name_first , name_last from player where birth_year = 1831"
    },
    {
        "question": "What are the years , titles , and publishers for all books , ordered by year descending ?",
        "db_id": "culture_company",
        "gold_parse": "SELECT YEAR ,  book_title ,  publisher FROM book_club ORDER BY YEAR DESC",
        "predicted_parse_with_values": "select T1.Book_Title , T3.Title , T3.Title from book_club as T1 join culture_company as T2 on T1.book_club_id = T2.book_club_id join movie as T3 on T2.movie_id = T3.movie_id order by T1.Publisher desc"
    },
    {
        "question": "Which authors have written a paper with title containing the word \" Monadic \" ? Return their last names .",
        "db_id": "icfp_1",
        "gold_parse": "SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title LIKE \"%Monadic%\"",
        "predicted_parse_with_values": "select T1.lname from Authors as T1 join Authorship as T2 on T1.authID = T2.authID join Papers as T3 on T2.paperID = T3.paperID where T3.title like \"Binders Unbound\""
    },
    {
        "question": "Who is the oldest person whose job is student ?",
        "db_id": "network_2",
        "gold_parse": "SELECT name FROM Person WHERE job  =  'student' AND age  =  (SELECT max(age) FROM person WHERE job  =  'student' )",
        "predicted_parse_with_values": "select name from Person where job = \"doctor\" order by age desc limit 1"
    },
    {
        "question": "Show the name of each county along with the corresponding number of delegates from that county .",
        "db_id": "election",
        "gold_parse": "SELECT T1.County_name ,  COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id",
        "predicted_parse_with_values": "select County_name , count ( * ) from county group by County_name"
    },
    {
        "question": "what is the smallest state by area",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state )",
        "predicted_parse_with_values": "select min ( area ) from state"
    },
    {
        "question": "Find the name of people whose age is greater than any engineer sorted by their age .",
        "db_id": "network_2",
        "gold_parse": "SELECT name FROM Person WHERE age  >  (SELECT min(age) FROM person WHERE job  =  'engineer') ORDER BY age",
        "predicted_parse_with_values": "select name from Person where age > ( select max ( T2.age ) from PersonFriend as T1 join Person as T2 on T1.friend = T2.name ) order by T1.name"
    },
    {
        "question": "For each journal_committee , find the editor name and the journal theme .",
        "db_id": "journal_committee",
        "gold_parse": "SELECT T2.Name ,  T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID",
        "predicted_parse_with_values": "select T1.Name , T3.Theme , T3.Theme from editor as T1 join journal_committee as T2 on T1.Editor_ID = T2.Editor_ID join journal as T3 on T2.Journal_ID = T3.Journal_ID"
    },
    {
        "question": "Find the name and capacity of the dorm with least number of amenities .",
        "db_id": "dorm_1",
        "gold_parse": "SELECT T1.dorm_name ,  T1.student_capacity FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid GROUP BY T2.dormid ORDER BY count(*) LIMIT 1",
        "predicted_parse_with_values": "select dorm_name , student_capacity from Dorm group by dormid order by count ( * ) asc limit 1"
    },
    {
        "question": "What are the ids of the two department store chains with the largest number of department stores ?",
        "db_id": "department_store",
        "gold_parse": "SELECT dept_store_chain_id FROM department_stores GROUP BY dept_store_chain_id ORDER BY count(*) DESC LIMIT 2",
        "predicted_parse_with_values": "select T2.dept_store_chain_id from Department_Store_Chain as T1 join Department_Stores as T2 on T1.dept_store_chain_id = T2.dept_store_chain_id group by T2.dept_store_chain_id order by count ( * ) desc limit 1"
    },
    {
        "question": "How many distinct allergies are there ?",
        "db_id": "allergy_1",
        "gold_parse": "SELECT count(DISTINCT allergytype) FROM Allergy_type",
        "predicted_parse_with_values": "select count ( Allergy ) from Has_Allergy"
    },
    {
        "question": "How much salary did the top 3 well-paid players get in 2001 ?",
        "db_id": "baseball_1",
        "gold_parse": "SELECT salary FROM salary WHERE YEAR  =  2001 ORDER BY salary DESC LIMIT 3",
        "predicted_parse_with_values": "select salary from salary order by salary desc limit 1"
    },
    {
        "question": "what is the biggest city in wyoming",
        "db_id": "geo",
        "gold_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name  =  \"wyoming\" ) AND state_name  =  \"wyoming\"",
        "predicted_parse_with_values": "select city_name from city where state_name = \"dummy value\" order by population desc limit 1"
    },
    {
        "question": "What are the names of the artists who released a song that has the word love in its title , and where are the artists from ?",
        "db_id": "music_1",
        "gold_parse": "SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.song_name LIKE \"%love%\"",
        "predicted_parse_with_values": "select T2.artist_name , T1.releasedate from song as T1 join artist as T2 on T1.artist_name = T2.artist_name where T1.song_name like \"Aj ei akash\""
    },
    {
        "question": "Report the first name and last name of all the teachers .",
        "db_id": "student_1",
        "gold_parse": "SELECT DISTINCT firstname ,  lastname FROM teachers",
        "predicted_parse_with_values": "select T2.FirstName , T1.LastName from teachers as T1 join list as T2"
    },
    {
        "question": "List the maximum scores of the team Boston Red Stockings when the team won in postseason ?",
        "db_id": "baseball_1",
        "gold_parse": "SELECT max(T1.wins) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings'",
        "predicted_parse_with_values": "select max ( T2.wins ) from team as T1 join postseason as T2 where T1.name = \"Newark Pepper\" and T2.team_id_winner = \"PRO\""
    },
    {
        "question": "what is the size of new mexico",
        "db_id": "geo",
        "gold_parse": "SELECT area FROM state WHERE state_name  =  \"new mexico\"",
        "predicted_parse_with_values": "select T1.density from state as T1 join highlow as T2 on T1.state_name = T2.state_name where T2.state_name = \"dummy value\""
    },
    {
        "question": "Return the maximum and minimum customer codes .",
        "db_id": "department_store",
        "gold_parse": "SELECT max(customer_code) ,  min(customer_code) FROM Customers",
        "predicted_parse_with_values": "select max ( T1.customer_code ) , min ( T5.date_supplied_to ) from Customers as T1 join Customer_Orders as T2 on T1.customer_id = T2.customer_id join Order_Items as T3 on T2.order_id = T3.order_id join Products as T4 on T3.product_id = T4.product_id join Product_Suppliers as T5 on T4.product_id = T5.product_id"
    },
    {
        "question": "Who is the author of the paper titled \" Binders Unbound \" ? Give me the last name .",
        "db_id": "icfp_1",
        "gold_parse": "SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title  =  \"Binders Unbound\"",
        "predicted_parse_with_values": "select T1.lname from Authors as T1 join Authorship as T2 on T1.authID = T2.authID join Papers as T3 on T2.paperID = T3.paperID where T3.title = \"Nameless , Painless\""
    },
    {
        "question": "What is the category and typical buying price of the product with name \" cumin \" ?",
        "db_id": "products_gen_characteristics",
        "gold_parse": "SELECT product_category_code ,  typical_buying_price FROM products WHERE product_name  =  \"cumin\"",
        "predicted_parse_with_values": "select product_name , typical_buying_price from Products where product_name = \"lotus\""
    },
    {
        "question": "Which Advisor has most of students ? List advisor and the number of students .",
        "db_id": "restaurant_1",
        "gold_parse": "SELECT Advisor ,  count(*) FROM Student GROUP BY Advisor ORDER BY count(Advisor) DESC LIMIT 1",
        "predicted_parse_with_values": "select Advisor , count ( * ) from Student group by Advisor order by count ( * ) desc limit 1"
    },
    {
        "question": "Select the code of the product that is cheapest in each product category .",
        "db_id": "manufactory_1",
        "gold_parse": "SELECT code ,  name ,  min(price) FROM products GROUP BY name",
        "predicted_parse_with_values": "select Code , Name from Products order by Price limit 1"
    },
    {
        "question": "What ranks do we have for faculty ?",
        "db_id": "activity_1",
        "gold_parse": "SELECT DISTINCT rank FROM Faculty",
        "predicted_parse_with_values": "select Rank from Faculty"
    },
    {
        "question": "Find the name and ID of the product whose total order quantity is the largest .",
        "db_id": "customers_and_addresses",
        "gold_parse": "SELECT t2.product_details ,  t2.product_id FROM order_items AS t1 JOIN products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_id ORDER BY sum(t1.order_quantity) LIMIT 1",
        "predicted_parse_with_values": "select T4.customer_name , T2.product_id from Order_Items as T1 join Products as T2 on T1.product_id = T2.product_id join Customer_Orders as T3 on T1.order_id = T3.order_id join Customers as T4 on T3.customer_id = T4.customer_id order by T1.order_quantity desc limit 1"
    },
    {
        "question": "What are the distinct names of products purchased by at least two different customers ?",
        "db_id": "department_store",
        "gold_parse": "SELECT DISTINCT T3.product_name FROM customer_orders AS T1 JOIN order_items AS T2 ON T1.order_id  =  T2.order_id JOIN products AS T3 ON T2.product_id  =  T3.product_id GROUP BY T3.product_id HAVING COUNT (DISTINCT T1.customer_id)  >=  2",
        "predicted_parse_with_values": "select product_name from Products group by product_name having count ( * ) >= 1"
    },
    {
        "question": "What is the name of the room that can accommodate the most people ?",
        "db_id": "inn_1",
        "gold_parse": "SELECT roomName FROM Rooms ORDER BY maxOccupancy DESC LIMIT 1",
        "predicted_parse_with_values": "select roomName from Rooms group by RoomId order by count ( * ) desc limit 1"
    },
    {
        "question": "What are the first names and office locations for all professors sorted alphabetically by first name ?",
        "db_id": "college_1",
        "gold_parse": "SELECT T2.emp_fname ,  T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num  =  T2.emp_num ORDER BY T2.emp_fname",
        "predicted_parse_with_values": "select T1.EMP_FNAME , T2.PROF_OFFICE from EMPLOYEE as T1 join PROFESSOR as T2 on T1.EMP_NUM = T2.EMP_NUM where T1.EMP_FNAME = \"Gerald\" order by T2.PROF_OFFICE"
    },
    {
        "question": "How many stations does Mountain View city has ?",
        "db_id": "bike_1",
        "gold_parse": "SELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"",
        "predicted_parse_with_values": "select count ( * ) from station where city = \"San Francisco\""
    },
    {
        "question": "How many products have their color described as 'white ' or have a characteristic with the name 'hot ' ?",
        "db_id": "products_gen_characteristics",
        "gold_parse": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code  =  t4.color_code WHERE t4.color_description  =  \"white\" OR t3.characteristic_name  =  \"hot\"",
        "predicted_parse_with_values": "select count ( * ) from Characteristics as T1 join Product_Characteristics as T2 on T1.characteristic_id = T2.characteristic_id join Products as T3 on T2.product_id = T3.product_id join Ref_Colors as T4 on T3.color_code = T4.color_code where T4.color_description = \"purple\" or T1.characteristic_name = \"slow\""
    },
    {
        "question": "List the names , color descriptions and product descriptions of products with category \" Herbs \" .",
        "db_id": "products_gen_characteristics",
        "gold_parse": "SELECT T1.product_name ,  T2.color_description ,  T1.product_description FROM products AS T1 JOIN Ref_colors AS T2 ON T1.color_code  =  T2.color_code WHERE product_category_code  =  \"Herbs\"",
        "predicted_parse_with_values": "select T3.product_name , T5.color_description , T4.product_category_description from Characteristics as T1 join Product_Characteristics as T2 on T1.characteristic_id = T2.characteristic_id join Products as T3 on T2.product_id = T3.product_id join Ref_Product_Categories as T4 on T3.product_category_code = T4.product_category_code join Ref_Colors as T5 on T3.color_code = T5.color_code where T1.characteristic_name = \"error\""
    },
    {
        "question": "which state has the smallest population density",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM state WHERE density  =  ( SELECT MIN ( density ) FROM state )",
        "predicted_parse_with_values": "select state_name from state order by density asc limit 1"
    },
    {
        "question": "what state has the smallest urban population",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM city GROUP BY state_name ORDER BY SUM ( population ) LIMIT 1",
        "predicted_parse_with_values": "select state_name from state order by population limit 1"
    },
    {
        "question": "Find all movies that star both \" Woody Strode \" and \" Jason Robards \"",
        "db_id": "imdb",
        "gold_parse": "SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid  =  t1.aid JOIN movie AS t4 ON t4.mid  =  t5.msid JOIN CAST AS t3 ON t4.mid  =  t3.msid JOIN actor AS t2 ON t3.aid  =  t2.aid WHERE t1.name  =  \"Woody Strode\" AND t2.name  =  \"Jason Robards\"",
        "predicted_parse_with_values": "select T2.title from actor as T1 join movie as T2 where T1.name = \"dummy value\" intersect select T4.title from actor as T3 join movie as T4 where T3.name = \"dummy value\""
    },
    {
        "question": "return me the authors who have papers in VLDB conference before 2002 after 1995 .",
        "db_id": "academic",
        "gold_parse": "SELECT t1.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"VLDB\" AND t4.year  <  2002 AND t4.year  >  1995",
        "predicted_parse_with_values": "select T3.pid from conference as T1 join publication as T2 on T1.cid = T2.cid join writes as T3 on T2.pid = T3.pid where T1.name = \"dummy value\" and T2.year < \"dummy value\""
    },
    {
        "question": "Give the product id for the product that was ordered most frequently .",
        "db_id": "department_store",
        "gold_parse": "SELECT product_id FROM order_items GROUP BY product_id ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select product_id from Order_Items group by product_id order by count ( * ) desc limit 1"
    },
    {
        "question": "Show all locations and the number of gas stations in each location ordered by the count .",
        "db_id": "gas_company",
        "gold_parse": "SELECT LOCATION ,  count(*) FROM gas_station GROUP BY LOCATION ORDER BY count(*)",
        "predicted_parse_with_values": "select Location , count ( * ) from gas_station group by Location order by count ( * ) asc"
    },
    {
        "question": "which is the longest river in usa",
        "db_id": "geo",
        "gold_parse": "SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river )",
        "predicted_parse_with_values": "select T1.river_name from river as T1 join state as T2 on T1.traverse = T2.state_name where T2.country_name = \"dummy value\" order by T1.length desc limit 1"
    },
    {
        "question": "What is the name and country of origin for each artist who has released a song with a resolution higher than 900 ?",
        "db_id": "music_1",
        "gold_parse": "SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.resolution  >  900 GROUP BY T2.artist_name HAVING count(*)  >=  1",
        "predicted_parse_with_values": "select artist_name , country from song where resolution > 720"
    },
    {
        "question": "return me the author in the \" University of Michigan \" whose papers have the most total citations .",
        "db_id": "academic",
        "gold_parse": "SELECT t1.name FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t3 ON t3.aid  =  t1.aid JOIN publication AS t4 ON t3.pid  =  t4.pid WHERE t2.name  =  \"University of Michigan\" GROUP BY t1.name ORDER BY SUM ( t4.citation_num ) DESC LIMIT 1",
        "predicted_parse_with_values": "select T3.name from publication as T1 join writes as T2 on T1.pid = T2.pid join author as T3 on T2.aid = T3.aid join cite as T4 on T1.pid = T4.citing where T4.cited = \"dummy value\" group by T3.name order by count ( T1.jid ) desc limit 1"
    },
    {
        "question": "Find the number of different departments in each school whose number of different departments is less than 5 .",
        "db_id": "college_1",
        "gold_parse": "SELECT count(DISTINCT dept_name) ,  school_code FROM department GROUP BY school_code HAVING count(DISTINCT dept_name)  <  5",
        "predicted_parse_with_values": "select count ( T4.DEPT_ADDRESS ) , count ( T4.SCHOOL_CODE ) from CLASS as T1 join ENROLL as T2 on T1.CLASS_CODE = T2.CLASS_CODE join STUDENT as T3 on T2.STU_NUM = T3.STU_NUM join DEPARTMENT as T4 on T3.DEPT_CODE = T4.DEPT_CODE group by T4.SCHOOL_CODE having count ( * ) < 1"
    },
    {
        "question": "For each city , how many branches opened before 2010 ?",
        "db_id": "shop_membership",
        "gold_parse": "SELECT city ,  count(*) FROM branch WHERE open_year  <  2010 GROUP BY city",
        "predicted_parse_with_values": "select count ( * ) , City from branch where Open_year < 2015 group by City"
    },
    {
        "question": "Show the number of card types .",
        "db_id": "customers_card_transactions",
        "gold_parse": "SELECT count(DISTINCT card_type_code) FROM Customers_Cards",
        "predicted_parse_with_values": "select count ( * ) from Customers_Cards"
    },
    {
        "question": "Find the names of states that have some college students playing in the mid position but not in the goalie position .",
        "db_id": "soccer_2",
        "gold_parse": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie'",
        "predicted_parse_with_values": "select T2.state from Tryout as T1 join College as T2 on T1.cName = T2.cName where T1.pPos = \"striker\" intersect select T4.state from Tryout as T3 join College as T4 on T3.cName = T4.cName where T3.pPos = \"striker\""
    },
    {
        "question": "What is the name of the artist who produced the shortest song ?",
        "db_id": "music_1",
        "gold_parse": "SELECT T1.artist_name FROM song AS T1 JOIN files AS T2 ON T1.f_id  =  T2.f_id ORDER BY T2.duration LIMIT 1",
        "predicted_parse_with_values": "select artist_name from song order by song_name limit 1"
    },
    {
        "question": "When was \" Kevin Spacey \" born ?",
        "db_id": "imdb",
        "gold_parse": "SELECT birth_year FROM actor WHERE name  =  \"actor_name0\"",
        "predicted_parse_with_values": "select birth_year from actor where name = \"dummy value\" and birth_year = \"dummy value\""
    },
    {
        "question": "What are the names of the singers who sang the top 3 most highly rated songs and what countries do they hail from ?",
        "db_id": "music_1",
        "gold_parse": "SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name ORDER BY T2.rating DESC LIMIT 3",
        "predicted_parse_with_values": "select T2.artist_name , T1.country from song as T1 join artist as T2 on T1.artist_name = T2.artist_name order by T1.rating desc limit 1"
    },
    {
        "question": "How many faculty members do we have for each rank and gender ?",
        "db_id": "activity_1",
        "gold_parse": "SELECT rank ,  sex ,  count(*) FROM Faculty GROUP BY rank ,  sex",
        "predicted_parse_with_values": "select Rank , count ( * ) from Faculty group by Rank , Sex"
    },
    {
        "question": "On which day has it neither been foggy nor rained in the zip code of 94107 ?",
        "db_id": "bike_1",
        "gold_parse": "SELECT date FROM weather WHERE zip_code  =  94107 AND EVENTS != \"Fog\" AND EVENTS != \"Rain\"",
        "predicted_parse_with_values": "select date from weather except select date from weather where zip_code = 94301"
    },
    {
        "question": "What is the average number of attendance at home games for each year ?",
        "db_id": "baseball_1",
        "gold_parse": "SELECT YEAR ,  avg(attendance) FROM home_game GROUP BY YEAR",
        "predicted_parse_with_values": "select avg ( attendance ) , year from home_game group by year"
    },
    {
        "question": "Show statement id , statement detail , account detail for accounts .",
        "db_id": "cre_Docs_and_Epenses",
        "gold_parse": "SELECT T1.statement_id ,  T2.statement_details ,  T1.account_details FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id  =  T2.statement_id",
        "predicted_parse_with_values": "select T1.Statement_ID , T1.Statement_Details , T2.Account_Details from Statements as T1 join Accounts as T2 on T1.Statement_ID = T2.Statement_ID"
    },
    {
        "question": "people in boulder",
        "db_id": "geo",
        "gold_parse": "SELECT population FROM city WHERE city_name  =  \"boulder\"",
        "predicted_parse_with_values": "select T1.city_name from city as T1 join state as T2 on T1.state_name = T2.state_name join mountain as T3 on T2.state_name = T3.state_name where T3.mountain_name = \"dummy value\""
    },
    {
        "question": "How many different last names do the actors and actresses have ?",
        "db_id": "sakila_1",
        "gold_parse": "SELECT count(DISTINCT last_name) FROM actor",
        "predicted_parse_with_values": "select count ( last_name ) from actor intersect select T5.last_name from category as T1 join film_category as T2 on T1.category_id = T2.category_id join film as T3 on T2.film_id = T3.film_id join film_actor as T4 on T3.film_id = T4.film_id join actor as T5 on T4.actor_id = T5.actor_id where T1.name = \"Sci-Fi\""
    },
    {
        "question": "What are the types of vocals that the musician with the last name \" Heilo \" played in \" Der Kapitan \" ?",
        "db_id": "music_2",
        "gold_parse": "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid JOIN band AS T3 ON T1.bandmate  =  T3.id WHERE T3.lastname  =  \"Heilo\" AND T2.title  =  \"Der Kapitan\"",
        "predicted_parse_with_values": "select T2.Type from Band as T1 join Vocals as T2 on T1.Id = T2.Bandmate where T1.Lastname = \"dummy value\""
    },
    {
        "question": "What are the unit of measure and category code for the 'chervil ' product ?",
        "db_id": "products_gen_characteristics",
        "gold_parse": "SELECT t2.unit_of_measure ,  t2.product_category_code FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code WHERE t1.product_name  =  \"chervil\"",
        "predicted_parse_with_values": "select T1.unit_of_measure , T2.product_category_code from Ref_Product_Categories as T1 join Products as T2 on T1.product_category_code = T2.product_category_code where T2.product_name = \"cumin\""
    },
    {
        "question": "Find the number of funiture types produced by each manufacturer as well as the company names .",
        "db_id": "manufacturer",
        "gold_parse": "SELECT count(*) ,  t1.name FROM manufacturer AS t1 JOIN furniture_manufacte AS t2 ON t1.manufacturer_id  =  t2.manufacturer_id GROUP BY t1.manufacturer_id",
        "predicted_parse_with_values": "select count ( * ) , Name from manufacturer group by Name"
    },
    {
        "question": "Find the location and all games score of the school that has Clemson as its team name .",
        "db_id": "university_basketball",
        "gold_parse": "SELECT t2.All_Games ,  t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  'Clemson'",
        "predicted_parse_with_values": "select T1.Location , T2.All_Games from university as T1 join basketball_match as T2 on T1.School_ID = T2.School_ID where T2.Team_Name = \"Virginia Tech\""
    },
    {
        "question": "Find the number of distinct stages in claim processing .",
        "db_id": "insurance_and_eClaims",
        "gold_parse": "SELECT count(*) FROM claims_processing_stages",
        "predicted_parse_with_values": "select count ( Claim_Stage_ID ) from Claims_Processing"
    },
    {
        "question": "Show names of technicians in ascending order of quality rank of the machine they are assigned .",
        "db_id": "machine_repair",
        "gold_parse": "SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID ORDER BY T2.quality_rank",
        "predicted_parse_with_values": "select T1.Name from technician as T1 join repair_assignment as T2 on T1.technician_id = T2.technician_id join machine as T3 on T2.Machine_ID = T3.Machine_ID order by T3.quality_rank asc"
    },
    {
        "question": "What are the first names , office locations , and departments of all instructors , and also what are the descriptions of the courses they teach ?",
        "db_id": "college_1",
        "gold_parse": "SELECT T2.emp_fname ,  T4.prof_office ,  T3.crs_description ,  T5.dept_name FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN professor AS T4 ON T2.emp_num  =  T4.emp_num JOIN department AS T5 ON T4.dept_code  =  T5.dept_code",
        "predicted_parse_with_values": "select T1.EMP_FNAME , T2.DEPT_ADDRESS , T2.DEPT_ADDRESS from EMPLOYEE as T1 join DEPARTMENT as T2 on T1.EMP_NUM = T2.EMP_NUM join COURSE as T3 on T2.DEPT_CODE = T3.DEPT_CODE where T3.CRS_DESCRIPTION = \"Intro. to Statistics\""
    },
    {
        "question": "what states does the ohio river go through",
        "db_id": "geo",
        "gold_parse": "SELECT traverse FROM river WHERE river_name  =  \"ohio\"",
        "predicted_parse_with_values": "select T3.state_name from river as T1 join state as T2 on T1.traverse = T2.state_name join border_info as T3 on T2.state_name = T3.border where T1.river_name = \"dummy value\""
    },
    {
        "question": "Find all the songs that do not have a lead vocal .",
        "db_id": "music_2",
        "gold_parse": "SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  \"lead\"",
        "predicted_parse_with_values": "select Title from Songs where SongId not in ( select SongId from Vocals )"
    },
    {
        "question": "Find the number of settlements each claim corresponds to . Show the number together with the claim id .",
        "db_id": "insurance_policies",
        "gold_parse": "SELECT T1.Claim_id ,  count(*) FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id  =  T2.claim_id GROUP BY T1.claim_id",
        "predicted_parse_with_values": "select count ( * ) , Claim_ID from Claims group by Claim_ID"
    },
    {
        "question": "what are the states that the ohio run through",
        "db_id": "geo",
        "gold_parse": "SELECT traverse FROM river WHERE river_name  =  \"ohio\"",
        "predicted_parse_with_values": "select T3.state_name from river as T1 join state as T2 on T1.traverse = T2.state_name join border_info as T3 on T2.state_name = T3.border where T1.river_name = \"dummy value\""
    },
    {
        "question": "List the details of the customers who do not have any policies .",
        "db_id": "insurance_policies",
        "gold_parse": "SELECT customer_details FROM Customers EXCEPT SELECT T1.customer_details FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.customer_id  =  T2.customer_id",
        "predicted_parse_with_values": "select Customer_Details from Customers where Customer_ID not in ( select Customer_ID from Customer_Policies )"
    },
    {
        "question": "how many cities are in texas",
        "db_id": "geo",
        "gold_parse": "SELECT COUNT ( city_name ) FROM city WHERE state_name  =  \"texas\"",
        "predicted_parse_with_values": "select count ( * ) from city where state_name = \"dummy value\""
    },
    {
        "question": "Give me the temperature of Shanghai in January .",
        "db_id": "city_record",
        "gold_parse": "SELECT T2.Jan FROM city AS T1 JOIN temperature AS T2 ON T1.city_id = T2.city_id WHERE T1.city = \"Shanghai\"",
        "predicted_parse_with_values": "select Sep from temperature where Dec = 26.1 and Aug = 21.7"
    },
    {
        "question": "What are the ids for all sporty students who are on scholarship ?",
        "db_id": "game_1",
        "gold_parse": "SELECT StuID FROM Sportsinfo WHERE onscholarship  =  'Y'",
        "predicted_parse_with_values": "select StuID from Student"
    },
    {
        "question": "What amenities does Smith Hall have in alphabetical order ?",
        "db_id": "dorm_1",
        "gold_parse": "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T1.dorm_name  =  'Smith Hall' ORDER BY T3.amenity_name",
        "predicted_parse_with_values": "select T3.amenity_name from Dorm as T1 join Has_amenity as T2 on T1.dormid = T2.dormid join Dorm_amenity as T3 on T2.amenid = T3.amenid where T1.dorm_name = \"Anonymous Donor Hall\" order by T3.amenity_name"
    },
    {
        "question": "How many members are in each party ?",
        "db_id": "party_people",
        "gold_parse": "SELECT T2.party_name ,  count(*) FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id",
        "predicted_parse_with_values": "select count ( * ) , Party_name from party group by Party_name"
    },
    {
        "question": "Show the names of the buildings that have more than one company offices .",
        "db_id": "company_office",
        "gold_parse": "SELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id GROUP BY T1.building_id HAVING COUNT(*)  >  1",
        "predicted_parse_with_values": "select name from buildings group by name having count ( * ) > 1"
    },
    {
        "question": "What are the last names of individuals who have been contact individuals for an organization ?",
        "db_id": "e_government",
        "gold_parse": "SELECT DISTINCT t1.individual_last_name FROM individuals AS t1 JOIN organization_contact_individuals AS t2 ON t1.individual_id  =  t2.individual_id",
        "predicted_parse_with_values": "select individual_last_name from Individuals"
    },
    {
        "question": "what states border the state with the smallest area",
        "db_id": "geo",
        "gold_parse": "SELECT border FROM border_info WHERE state_name  =  ( SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state ) )",
        "predicted_parse_with_values": "select T1.border from border_info as T1 join state as T2 on T1.border = T2.state_name order by T2.area asc limit 1"
    },
    {
        "question": "Show all game names played by Linda Smith",
        "db_id": "game_1",
        "gold_parse": "SELECT Gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid  =  T2.gameid JOIN Student AS T3 ON T3.Stuid  =  T1.Stuid WHERE T3.Lname  =  \"Smith\" AND T3.Fname  =  \"Linda\"",
        "predicted_parse_with_values": "select T3.GName from Student as T1 join Plays_Games as T2 on T1.StuID = T2.StuID join Video_Games as T3 on T2.GameID = T3.GameID where T1.Fname = \"William\" and T1.LName = \"Woods\""
    },
    {
        "question": "How many movies did \" Quentin Tarantino \" direct before 2010 ?",
        "db_id": "imdb",
        "gold_parse": "SELECT COUNT ( DISTINCT t3.title  ) FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.name  =  \"Quentin Tarantino\" AND t3.release_year  <  2010",
        "predicted_parse_with_values": "select count ( * ) from producer as T1 join made_by as T2 on T1.pid = T2.pid join copyright as T3 on T2.msid = T3.msid join directed_by as T4 on T3.msid = T4.msid join director as T5 on T4.did = T5.did where T5.name = \"dummy value\" and T1.birth_year < \"dummy value\""
    },
    {
        "question": "Find names of all students who took some course and got A or C .",
        "db_id": "college_1",
        "gold_parse": "SELECT T1.stu_fname ,  T1.stu_lname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE T2.enroll_grade  =  'C' OR T2.enroll_grade  =  'A'",
        "predicted_parse_with_values": "select T1.STU_FNAME , T1.STU_LNAME from STUDENT as T1 join DEPARTMENT as T2 on T1.DEPT_CODE = T2.DEPT_CODE join COURSE as T3 on T2.DEPT_CODE = T3.DEPT_CODE where T3.CRS_CODE = \"QM-362\" or T3.CRS_CODE = \"CIS-220\""
    },
    {
        "question": "return me the paper after 2000 in VLDB conference with the most citations .",
        "db_id": "academic",
        "gold_parse": "SELECT t2.title FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" AND t2.year  >  2000 ORDER BY t2.citation_num DESC LIMIT 1",
        "predicted_parse_with_values": "select T2.jid , count ( * ) from conference as T1 join publication as T2 on T1.cid = T2.cid where T1.name = \"dummy value\" and T2.year > \"dummy value\" group by T2.jid order by count ( * ) desc"
    },
    {
        "question": "Show all member names who are not in charge of any event .",
        "db_id": "party_people",
        "gold_parse": "SELECT member_name FROM member EXCEPT SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id  =  T2.member_in_charge_id",
        "predicted_parse_with_values": "select Member_Name from member where Member_ID not in ( select Member_in_charge_ID from party_events )"
    },
    {
        "question": "Show all male student ids who do n't play football .",
        "db_id": "game_1",
        "gold_parse": "SELECT StuID FROM Student WHERE sex  =  'M' EXCEPT SELECT StuID FROM Sportsinfo WHERE sportname  =  \"Football\"",
        "predicted_parse_with_values": "select StuID from Student where Sex = \"F\" except select T2.StuID from Student as T1 join Plays_Games as T2 on T1.StuID = T2.StuID where T1.Sex = \"F\""
    },
    {
        "question": "How many students are enrolled in colleges that have student accepted during tryouts , and in which states are those colleges ?",
        "db_id": "soccer_2",
        "gold_parse": "SELECT DISTINCT T1.state ,  T1.enr FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.decision  =  'yes'",
        "predicted_parse_with_values": "select count ( * ) , state from College group by state"
    },
    {
        "question": "List the name of the pilots who have flied for both a company that mainly provide 'Cargo ' services and a company that runs 'Catering services ' activities .",
        "db_id": "flight_company",
        "gold_parse": "SELECT T2.pilot FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id WHERE T1.principal_activities  =  'Cargo' INTERSECT SELECT T2.pilot FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id WHERE T1.principal_activities  =  'Catering services'",
        "predicted_parse_with_values": "select T2.Pilot from operate_company as T1 join flight as T2 on T1.id = T2.company_id where T1.Principal_activities = \"Travel agency\" intersect select T4.Pilot from operate_company as T3 join flight as T4 on T3.id = T4.company_id where T3.Type = \"Corporate\""
    },
    {
        "question": "Find the first names of students who took exactly one class .",
        "db_id": "college_1",
        "gold_parse": "SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num GROUP BY T2.stu_num HAVING count(*)  =  1",
        "predicted_parse_with_values": "select STU_FNAME from STUDENT group by STU_FNAME having count ( * ) = 1"
    },
    {
        "question": "What is the first name , GPA , and phone number of the students with the top 5 GPAs ?",
        "db_id": "college_1",
        "gold_parse": "SELECT stu_gpa ,  stu_phone ,  stu_fname FROM student ORDER BY stu_gpa DESC LIMIT 5",
        "predicted_parse_with_values": "select STU_FNAME , STU_GPA , STU_PHONE from STUDENT order by STU_NUM desc limit 1"
    },
    {
        "question": "what mountains are in alaska",
        "db_id": "geo",
        "gold_parse": "SELECT mountain_name FROM mountain WHERE state_name  =  \"alaska\"",
        "predicted_parse_with_values": "select T1.mountain_name from mountain as T1 join state as T2 on T1.state_name = T2.state_name where T2.country_name = \"dummy value\""
    },
    {
        "question": "List the names of companies by ascending number of sales .",
        "db_id": "company_employee",
        "gold_parse": "SELECT Name FROM company ORDER BY Sales_in_Billion ASC",
        "predicted_parse_with_values": "select Name from company order by Sales_in_Billion desc"
    },
    {
        "question": "How many items in inventory does store 1 have ?",
        "db_id": "sakila_1",
        "gold_parse": "SELECT count(*) FROM inventory WHERE store_id  =  1",
        "predicted_parse_with_values": "select count ( * ) from store as T1 join inventory as T2 on T1.store_id = T2.store_id where T2.store_id = 2"
    },
    {
        "question": "what is the largest capital city in the usa",
        "db_id": "geo",
        "gold_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( t1.population ) FROM state AS t2 JOIN city AS t1 ON t2.capital  =  t1.city_name )",
        "predicted_parse_with_values": "select T2.capital from city as T1 join state as T2 on T1.state_name = T2.state_name where T2.country_name = \"dummy value\" order by T1.population desc limit 1"
    },
    {
        "question": "What is the location with the most cinemas opened in year 2010 or later ?",
        "db_id": "cinema",
        "gold_parse": "SELECT LOCATION FROM cinema WHERE openning_year  >=  2010 GROUP BY LOCATION ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select Location from cinema where Openning_year <= 2012 group by Location order by count ( * ) desc limit 1"
    },
    {
        "question": "What is the highest acc percent score in the competition ?",
        "db_id": "university_basketball",
        "gold_parse": "SELECT acc_percent FROM basketball_match ORDER BY acc_percent DESC LIMIT 1",
        "predicted_parse_with_values": "select max ( ACC_Percent ) from basketball_match"
    },
    {
        "question": "What are project ids of projects that have 2 or more corresponding documents ?",
        "db_id": "cre_Docs_and_Epenses",
        "gold_parse": "SELECT project_id FROM Documents GROUP BY project_id HAVING count(*)  >=  2",
        "predicted_parse_with_values": "select T2.Project_ID from Documents as T1 join Projects as T2 on T1.Project_ID = T2.Project_ID group by T1.Project_ID having count ( * ) >= 1"
    },
    {
        "question": "how many citizens does the biggest city have in the usa",
        "db_id": "geo",
        "gold_parse": "SELECT population FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city )",
        "predicted_parse_with_values": "select count ( * ) from state where country_name = \"dummy value\""
    },
    {
        "question": "what is the smallest city in the usa",
        "db_id": "geo",
        "gold_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MIN ( population ) FROM city )",
        "predicted_parse_with_values": "select T1.city_name from city as T1 join state as T2 on T1.state_name = T2.state_name where T1.country_name = \"dummy value\" order by T2.density limit 1"
    },
    {
        "question": "Find the last name of the first ever contact person of the organization with the highest UK Vat number .",
        "db_id": "e_government",
        "gold_parse": "SELECT t3.individual_last_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id JOIN individuals AS t3 ON t2.individual_id  =  t3.individual_id WHERE t1.uk_vat_number  =  (SELECT max(uk_vat_number) FROM organizations) ORDER BY t2.date_contact_to ASC LIMIT 1",
        "predicted_parse_with_values": "select T1.individual_last_name from Individuals as T1 join Organization_Contact_Individuals as T2 on T1.individual_id = T2.individual_id join Organizations as T3 on T2.organization_id = T3.organization_id order by T3.uk_vat_number desc limit 1"
    },
    {
        "question": "How many trips stated from a station in Mountain View and ended at one in Palo Alto ?",
        "db_id": "bike_1",
        "gold_parse": "SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  \"Mountain View\" AND T3.city  =  \"Palo Alto\"",
        "predicted_parse_with_values": "select count ( * ) from station as T1 join trip as T2 where T1.city = \"Redwood City\" and T2.end_station_name = \"Powell at Post ( Union Square ) \""
    },
    {
        "question": "What are the different ages of editors ? Show each age along with the number of editors of that age .",
        "db_id": "journal_committee",
        "gold_parse": "SELECT Age ,  COUNT(*) FROM editor GROUP BY Age",
        "predicted_parse_with_values": "select count ( Editor_ID ) , Age from editor group by Age"
    },
    {
        "question": "Find the number of students who participate in the tryout for each college ordered by descending count .",
        "db_id": "soccer_2",
        "gold_parse": "SELECT count(*) ,  cName FROM tryout GROUP BY cName ORDER BY count(*) DESC",
        "predicted_parse_with_values": "select count ( * ) , cName from Tryout group by cName order by count ( * ) desc"
    },
    {
        "question": "what are the populations of states through which the mississippi river runs",
        "db_id": "geo",
        "gold_parse": "SELECT population FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" )",
        "predicted_parse_with_values": "select T2.population from river as T1 join state as T2 on T1.traverse = T2.state_name where T1.river_name = \"dummy value\""
    },
    {
        "question": "find all dependent names who have a spouse relation with some employee .",
        "db_id": "company_1",
        "gold_parse": "SELECT Dependent_name FROM dependent WHERE relationship  =  'Spouse'",
        "predicted_parse_with_values": "select Dependent_name from dependent"
    },
    {
        "question": "List the vehicle flight number , date and pilot of all the flights , ordered by altitude .",
        "db_id": "flight_company",
        "gold_parse": "SELECT vehicle_flight_number ,  date ,  pilot FROM flight ORDER BY altitude ASC",
        "predicted_parse_with_values": "select Vehicle_Flight_number , Date , Pilot from flight order by Altitude"
    },
    {
        "question": "Which schools have more than 1 player ? Give me the school locations .",
        "db_id": "school_player",
        "gold_parse": "SELECT T2.Location FROM player AS T1 JOIN school AS T2 ON T1.School_ID  =  T2.School_ID GROUP BY T1.School_ID HAVING COUNT(*)  >  1",
        "predicted_parse_with_values": "select Location from school group by Location having count ( * ) > 1"
    },
    {
        "question": "Count the number of different affected regions .",
        "db_id": "storm_record",
        "gold_parse": "SELECT count(DISTINCT region_id) FROM affected_region",
        "predicted_parse_with_values": "select count ( Region_name ) from region"
    },
    {
        "question": "Find the titles of albums that contain tracks of both the Reggae and Rock genres .",
        "db_id": "chinook_1",
        "gold_parse": "SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId  =  T2.AlbumId JOIN Genre AS T3 ON T2.GenreID  =  T3.GenreID WHERE T3.Name  =  'Reggae' INTERSECT SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId  =  T2.AlbumId JOIN Genre AS T3 ON T2.GenreID  =  T3.GenreID WHERE T3.Name  =  'Rock'",
        "predicted_parse_with_values": "select T1.Title from Album as T1 join Track as T2 on T1.AlbumId = T2.AlbumId where T2.Name = \"Wind of Change\" intersect select T3.Title from Album as T5 join Track as T4 on T5.AlbumId = T4.AlbumId join Genre as T5 on T4.GenreId = T5.GenreId where T5.Name = \"Rock And Roll\""
    },
    {
        "question": "What are the GDP and population of the city that already served as a host more than once ?",
        "db_id": "city_record",
        "gold_parse": "SELECT t1.gdp ,  t1.Regional_Population FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id  =  T2.host_city GROUP BY t2.Host_City HAVING count(*)  >  1",
        "predicted_parse_with_values": "select T1.GDP , hosting_T1.Host_City from city as T1 join hosting_city as T2 on T1.City_ID = T2.Host_City group by T1.City_ID having count ( * ) > 1"
    },
    {
        "question": "What are the dates that have an average sea level pressure between 30.3 and 31 ?",
        "db_id": "bike_1",
        "gold_parse": "SELECT date FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31",
        "predicted_parse_with_values": "select date from weather group by date having avg ( mean_sea_level_pressure_inches ) between value and value"
    },
    {
        "question": "List the first and last name for players who participated in all star game in 1998 .",
        "db_id": "baseball_1",
        "gold_parse": "SELECT name_first ,  name_last FROM player AS T1 JOIN all_star AS T2 ON T1.player_id  =  T2.player_id WHERE YEAR  =  1998",
        "predicted_parse_with_values": "select T2.name_first , T2.name_last from all_star as T1 join player as T2 on T1.player_id = T2.player_id where T1.year = 1950 and T2.death_year = 1950"
    },
    {
        "question": "what rivers run through the states that border the state with the capital atlanta",
        "db_id": "geo",
        "gold_parse": "SELECT river_name FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name IN ( SELECT state_name FROM state WHERE capital  =  \"atlanta\" ) )",
        "predicted_parse_with_values": "select T1.river_name from river as T1 join state as T2 on T1.traverse = T2.state_name where T2.capital = \"dummy value\""
    },
    {
        "question": "How many departments are in the division AS ?",
        "db_id": "college_3",
        "gold_parse": "SELECT count(*) FROM DEPARTMENT WHERE Division  =  \"AS\"",
        "predicted_parse_with_values": "select count ( DName ) from Department"
    },
    {
        "question": "For each country , what is the average elevation of that country 's airports ?",
        "db_id": "flight_4",
        "gold_parse": "SELECT avg(elevation) ,  country FROM airports GROUP BY country",
        "predicted_parse_with_values": "select country , avg ( elevation ) from airports group by country"
    },
    {
        "question": "Find the names of all the customers and staff members .",
        "db_id": "insurance_and_eClaims",
        "gold_parse": "SELECT customer_details FROM customers UNION SELECT staff_details FROM staff",
        "predicted_parse_with_values": "select Customer_Details from Customers"
    },
    {
        "question": "Find how many different affiliation types there are .",
        "db_id": "university_basketball",
        "gold_parse": "SELECT count(DISTINCT affiliation) FROM university",
        "predicted_parse_with_values": "select count ( All_Neutral ) from basketball_match"
    },
    {
        "question": "Find the names and number of works of the three artists who have produced the most songs .",
        "db_id": "music_1",
        "gold_parse": "SELECT T1.artist_name ,  count(*) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name GROUP BY T2.artist_name ORDER BY count(*) DESC LIMIT 3",
        "predicted_parse_with_values": "select artist_name , count ( * ) from song group by artist_name order by count ( * ) desc limit 1"
    },
    {
        "question": "What are the different ship flags , and how many ships have each ?",
        "db_id": "ship_1",
        "gold_parse": "SELECT count(*) ,  flag FROM ship GROUP BY flag",
        "predicted_parse_with_values": "select Flag , count ( * ) from Ship group by Flag"
    },
    {
        "question": "What is the channel code and contact number of the customer contact channel that was active for the longest time ?",
        "db_id": "customers_and_addresses",
        "gold_parse": "SELECT channel_code ,  contact_number FROM customer_contact_channels WHERE active_to_date - active_from_date  =  (SELECT active_to_date - active_from_date FROM customer_contact_channels ORDER BY (active_to_date - active_from_date) DESC LIMIT 1)",
        "predicted_parse_with_values": "select channel_code , contact_number from Customer_Contact_Channels order by active_to_date desc limit 1"
    },
    {
        "question": "What is the first and last name of the youngest student with a GPA above 3 , and what is their GPA ?",
        "db_id": "college_1",
        "gold_parse": "SELECT stu_fname ,  stu_lname ,  stu_gpa FROM student WHERE stu_gpa  >  3 ORDER BY stu_dob DESC LIMIT 1",
        "predicted_parse_with_values": "select STU_FNAME , STU_LNAME from STUDENT order by STU_GPA desc limit 1"
    },
    {
        "question": "Please give me a list of cities whose regional population is over 8000000 or under 5000000 .",
        "db_id": "city_record",
        "gold_parse": "SELECT city FROM city WHERE regional_population  >  10000000 UNION SELECT city FROM city WHERE regional_population  <  5000000",
        "predicted_parse_with_values": "select City from city where Regional_Population > 4591972 or Regional_Population < 4614100"
    },
    {
        "question": "which state has the biggest population",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state )",
        "predicted_parse_with_values": "select state_name from state order by population desc limit 1"
    },
    {
        "question": "What is the first name of students enrolled in class ACCT-211 and got grade C ?",
        "db_id": "college_1",
        "gold_parse": "SELECT T3.stu_fname FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T2.stu_num  =  T3.stu_num WHERE T1.crs_code  =  'ACCT-211' AND T2.enroll_grade  =  'C'",
        "predicted_parse_with_values": "select T1.STU_FNAME from STUDENT as T1 join ENROLL as T2 on T1.STU_NUM = T2.STU_NUM where T2.ENROLL_GRADE = \"A\" and T2.CLASS_CODE = 10018"
    },
    {
        "question": "return me the papers by \" H. V. Jagadish \" on PVLDB with more than 200 citations .",
        "db_id": "academic",
        "gold_parse": "SELECT t4.title FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" AND t2.name  =  \"PVLDB\" AND t4.citation_num  >  200",
        "predicted_parse_with_values": "select T1.title from publication as T1 join cite as T2 on T1.pid = T2.citing where T2.cited > \"dummy value\" and T1.citation_num = \"dummy value\""
    },
    {
        "question": "For every medicine id , what are the names of the medicines that can interact with more than one enzyme ?",
        "db_id": "medicine_enzyme_interaction",
        "gold_parse": "SELECT T1.id ,  T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2",
        "predicted_parse_with_values": "select T2.name from medicine_enzyme_interaction as T1 join medicine as T2 on T1.medicine_id = T2.id group by T1.medicine_id having count ( * ) > 1"
    },
    {
        "question": "Find the average height of the players who belong to the college called 'Yale University ' .",
        "db_id": "baseball_1",
        "gold_parse": "SELECT avg(T1.height) FROM player AS T1 JOIN player_college AS T2 ON T1.player_id  =  T2.player_id JOIN college AS T3 ON T3.college_id  =  T2.college_id WHERE T3.name_full  =  'Yale University'",
        "predicted_parse_with_values": "select avg ( T3.height ) from college as T1 join player_college as T2 on T1.college_id = T2.college_id join player as T3 on T2.player_id = T3.player_id where T1.college_id = \"carioho\""
    },
    {
        "question": "What is the name of the activity with the most students ?",
        "db_id": "activity_1",
        "gold_parse": "SELECT T1.activity_name FROM Activity AS T1 JOIN Participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select activity_name from Activity group by activity_name order by count ( * ) desc limit 1"
    },
    {
        "question": "Give the full name and phone of the customer who has the account name 162 .",
        "db_id": "customers_card_transactions",
        "gold_parse": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  \"162\"",
        "predicted_parse_with_values": "select T1.customer_first_name , T1.customer_phone , T1.customer_last_name from Customers as T1 join Accounts as T2 where T2.account_name = 866"
    },
    {
        "question": "How many students , on average , does each college have enrolled ?",
        "db_id": "soccer_2",
        "gold_parse": "SELECT avg(enr) FROM College",
        "predicted_parse_with_values": "select cName , avg ( enr ) from College group by cName"
    },
    {
        "question": "Show the customer id and number of accounts with most accounts .",
        "db_id": "customers_card_transactions",
        "gold_parse": "SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select customer_id , count ( * ) from Accounts group by customer_id order by count ( * ) desc limit 1"
    },
    {
        "question": "For each classroom , report the classroom number and the number of grades using it .",
        "db_id": "student_1",
        "gold_parse": "SELECT classroom ,  count(DISTINCT grade) FROM list GROUP BY classroom",
        "predicted_parse_with_values": "select count ( * ) , T1.Grade from list as T1 join teachers as T2 group by T1.Grade"
    },
    {
        "question": "Find all actors who acted in the same movie as \" Tom Hanks \"",
        "db_id": "imdb",
        "gold_parse": "SELECT t1.name FROM CAST AS t4 JOIN actor AS t1 ON t4.aid  =  t1.aid JOIN movie AS t5 ON t5.mid  =  t4.msid JOIN CAST AS t3 ON t5.mid  =  t3.msid JOIN actor AS t2 ON t3.aid  =  t2.aid WHERE t2.name  =  \"Tom Hanks\"",
        "predicted_parse_with_values": "select T2.name from cast as T1 join actor as T2 on T1.aid = T2.aid where T1.role = ( select T6.id from writer as T5 join written_by as T6 on T5.wid = T6.wid join copyright as T5 on T6.msid = T5.msid join cast as T6 on T5.msid = T6.msid where T3.name = \"dummy value\" )"
    },
    {
        "question": "What are the first name and last name of all the instructors ?",
        "db_id": "activity_1",
        "gold_parse": "SELECT fname ,  lname FROM Faculty WHERE Rank  =  \"Instructor\"",
        "predicted_parse_with_values": "select Fname , Lname from Faculty"
    },
    {
        "question": "What is the average latitude and longitude in San Jose ?",
        "db_id": "bike_1",
        "gold_parse": "SELECT avg(lat) ,  avg(long) FROM station WHERE city  =  \"San Jose\"",
        "predicted_parse_with_values": "select avg ( long ) , avg ( long ) from station where city = \"Redwood City\""
    },
    {
        "question": "Return the name , phone number and email address for the customer with the most orders .",
        "db_id": "department_store",
        "gold_parse": "SELECT T1.customer_name ,  T1.customer_phone ,  T1.customer_email FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T2.customer_id ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select customer_name , customer_phone , customer_email from Customers group by customer_name order by count ( * ) desc limit 1"
    },
    {
        "question": "What is the average age for each dorm and what are the names of each dorm ?",
        "db_id": "dorm_1",
        "gold_parse": "SELECT avg(T1.age) ,  T3.dorm_name FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid GROUP BY T3.dorm_name",
        "predicted_parse_with_values": "select avg ( dorm_name ) , dorm_name from Dorm group by dorm_name"
    },
    {
        "question": "What are the speeds of the longest roller coaster ?",
        "db_id": "roller_coaster",
        "gold_parse": "SELECT Speed FROM roller_coaster ORDER BY LENGTH DESC LIMIT 1",
        "predicted_parse_with_values": "select Speed from roller_coaster order by Height desc limit 1"
    },
    {
        "question": "what is the largest state capital in population",
        "db_id": "geo",
        "gold_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( t1.population ) FROM state AS t2 JOIN city AS t1 ON t2.capital  =  t1.city_name )",
        "predicted_parse_with_values": "select capital from state order by population desc limit 1"
    },
    {
        "question": "Find the name of the department that offers the largest number of credits of all classes .",
        "db_id": "college_1",
        "gold_parse": "SELECT T3.dept_name FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code  =  T2.crs_code JOIN department AS T3 ON T1.dept_code  =  T3.dept_code GROUP BY T1.dept_code ORDER BY sum(T1.crs_credit) DESC LIMIT 1",
        "predicted_parse_with_values": "select T1.DEPT_NAME from DEPARTMENT as T1 join COURSE as T2 on T1.DEPT_CODE = T2.DEPT_CODE order by T2.CRS_CREDIT desc limit 1"
    },
    {
        "question": "Which paper has the most authors ? Give me the paper title .",
        "db_id": "icfp_1",
        "gold_parse": "SELECT t2.title FROM authorship AS t1 JOIN papers AS t2 ON t1.paperid  =  t2.paperid WHERE t1.authorder  =  (SELECT max(authorder) FROM authorship)",
        "predicted_parse_with_values": "select title , title from Papers group by paperID order by count ( * ) desc limit 1"
    },
    {
        "question": "What is the team name and acc regular season score of the school that was founded for the longest time ?",
        "db_id": "university_basketball",
        "gold_parse": "SELECT t2.team_name ,  t2.ACC_Regular_Season FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t1.founded LIMIT 1",
        "predicted_parse_with_values": "select Team_Name , ACC_Regular_Season from basketball_match order by ACC_Regular_Season desc limit 1"
    },
    {
        "question": "What is the name of the youngest male ?",
        "db_id": "network_2",
        "gold_parse": "SELECT name FROM Person WHERE gender  =  'male' AND age  =  (SELECT min(age) FROM person WHERE gender  =  'male' )",
        "predicted_parse_with_values": "select name from Person where age != 45 order by age desc limit 1"
    },
    {
        "question": "What are the different cities listed ?",
        "db_id": "manufactory_1",
        "gold_parse": "SELECT DISTINCT headquarter FROM manufacturers",
        "predicted_parse_with_values": "select ( Founder ) from Manufacturers"
    },
    {
        "question": "Find the names of customers who have bought by at least three distinct products .",
        "db_id": "department_store",
        "gold_parse": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.customer_id HAVING COUNT (DISTINCT T3.product_id)  >=  3",
        "predicted_parse_with_values": "select customer_name from Customers group by customer_name having count ( * ) >= 1"
    },
    {
        "question": "Give the ids of the three products purchased in the largest amounts .",
        "db_id": "department_store",
        "gold_parse": "SELECT product_id FROM product_suppliers ORDER BY total_amount_purchased DESC LIMIT 3",
        "predicted_parse_with_values": "select T1.product_id from Order_Items as T1 join Customer_Orders as T2 on T1.order_id = T2.order_id join Customers as T3 on T2.customer_id = T3.customer_id join Customer_Addresses as T4 on T3.customer_id = T4.customer_id join Addresses as T5 on T4.address_id = T5.address_id join Supplier_Addresses as T6 on T5.address_id = T6.address_id join Suppliers as T7 on T6.supplier_id = T7.supplier_id join Product_Suppliers as T8 on T7.supplier_id = T8.supplier_id order by Product_T7.total_amount_purchased desc limit 1"
    },
    {
        "question": "Among all the claims , what is the amount claimed in the claim with the least amount settled ? List both the settlement amount and claim amount .",
        "db_id": "insurance_policies",
        "gold_parse": "SELECT Amount_Settled ,  Amount_Claimed FROM Claims ORDER BY Amount_Settled ASC LIMIT 1",
        "predicted_parse_with_values": "select Amount_Settled , Amount_Claimed from Claims order by Amount_Settled limit 1"
    },
    {
        "question": "Find the person who has exactly one friend .",
        "db_id": "network_2",
        "gold_parse": "SELECT name FROM PersonFriend GROUP BY name HAVING count(*)  =  1",
        "predicted_parse_with_values": "select name from PersonFriend group by name having count ( * ) = 1"
    },
    {
        "question": "What is the name , city , country , and elevation for every airport in the city of New York ?",
        "db_id": "flight_4",
        "gold_parse": "SELECT name ,  city ,  country ,  elevation FROM airports WHERE city  =  'New York'",
        "predicted_parse_with_values": "select name , city , elevation from airports where elevation = 3396"
    },
    {
        "question": "Which tourist attractions do the tourists Vincent and Marcelle visit ? Tell me the names of the attractions .",
        "db_id": "cre_Theme_park",
        "gold_parse": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Vincent\" INTERSECT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Marcelle\"",
        "predicted_parse_with_values": "select T3.Name from Visitors as T1 join Visits as T2 on T1.Tourist_ID = T2.Tourist_ID join Tourist_Attractions as T3 on T2.Tourist_Attraction_ID = T3.Tourist_Attraction_ID where T1.Tourist_ID = 545 intersect select Name from Tourist_Attractions where Name = \"fun shops\""
    },
    {
        "question": "what states border the most populous state",
        "db_id": "geo",
        "gold_parse": "SELECT border FROM border_info WHERE state_name  =  ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state ) )",
        "predicted_parse_with_values": "select T1.border from border_info as T1 join state as T2 on T1.border = T2.state_name group by T1.border order by count ( * ) desc limit 1"
    },
    {
        "question": "What are the states with colleges that have enrollments less than the some other college ?",
        "db_id": "soccer_2",
        "gold_parse": "SELECT DISTINCT state FROM college WHERE enr  <  (SELECT max(enr) FROM college)",
        "predicted_parse_with_values": "select state from College where enr < ( select min ( enr ) from College )"
    },
    {
        "question": "how high is guadalupe peak",
        "db_id": "geo",
        "gold_parse": "SELECT highest_elevation FROM highlow WHERE highest_point  =  \"guadalupe peak\"",
        "predicted_parse_with_values": "select count ( * ) from mountain where mountain_name = \"dummy value\""
    },
    {
        "question": "How many members are not living in Hartford ?",
        "db_id": "coffee_shop",
        "gold_parse": "SELECT count(*) FROM member WHERE address != 'Hartford'",
        "predicted_parse_with_values": "select count ( * ) from member where Member_ID not in ( select T1.Member_ID from happy_hour_member as T1 join member as T2 on T1.Member_ID = T2.Member_ID where T2.Address != \"Bridgeport\" )"
    },
    {
        "question": "Show the names of phones and the districts of markets they are on , in ascending order of the ranking of the market .",
        "db_id": "phone_market",
        "gold_parse": "SELECT T3.Name ,  T2.District FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID  =  T3.Phone_ID ORDER BY T2.Ranking",
        "predicted_parse_with_values": "select T1.Name , T3.District from phone as T1 join phone_market as T2 on T1.Phone_ID = T2.Phone_ID join market as T3 on T2.Market_ID = T3.Market_ID order by T3.Ranking desc"
    },
    {
        "question": "What is the last name of the first individual contacted from the organization with the maximum UK Vat number across all organizations ?",
        "db_id": "e_government",
        "gold_parse": "SELECT t3.individual_last_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id JOIN individuals AS t3 ON t2.individual_id  =  t3.individual_id WHERE t1.uk_vat_number  =  (SELECT max(uk_vat_number) FROM organizations) ORDER BY t2.date_contact_to ASC LIMIT 1",
        "predicted_parse_with_values": "select T1.individual_last_name from Individuals as T1 join Organization_Contact_Individuals as T2 on T1.individual_id = T2.individual_id join Organizations as T3 on T2.organization_id = T3.organization_id order by T3.uk_vat_number desc limit 1"
    },
    {
        "question": "Show all the faculty ranks and the number of students advised by each rank .",
        "db_id": "activity_1",
        "gold_parse": "SELECT T1.rank ,  count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.rank",
        "predicted_parse_with_values": "select T5.Rank , count ( * ) from Student as T1 join Participates_in as T2 on T1.StuID = T2.stuid join Activity as T3 on T2.actid = T3.actid join Faculty_Participates_in as T4 on T3.actid = T4.actid join Faculty as T5 on T4.FacID = T5.FacID group by T5.Rank"
    },
    {
        "question": "Find the name and college of students whose decisions are yes in the tryout .",
        "db_id": "soccer_2",
        "gold_parse": "SELECT T1.pName ,  T2.cName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'",
        "predicted_parse_with_values": "select T3.pName , T1.cName from College as T1 join Tryout as T2 on T1.cName = T2.cName join Player as T3 on T2.pID = T3.pID where T2.decision = \"yes\""
    },
    {
        "question": "What are the first names and offices of history professors who do n't have Ph.D.s ?",
        "db_id": "college_1",
        "gold_parse": "SELECT T2.emp_fname ,  T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T1.dept_code  =  T3.dept_code WHERE T3.dept_name  =  'History' AND T1.prof_high_degree != 'Ph.D.'",
        "predicted_parse_with_values": "select T1.EMP_FNAME , T2.PROF_OFFICE from EMPLOYEE as T1 join PROFESSOR as T2 on T1.EMP_NUM = T2.EMP_NUM where T2.PROF_HIGH_DEGREE = \"DBA\" and T2.PROF_HIGH_DEGREE != \"Ph.D.\""
    },
    {
        "question": "Find the titles of papers whose first author is affiliated with an institution in the country \" Japan \" and has last name \" Ohori \" ?",
        "db_id": "icfp_1",
        "gold_parse": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid JOIN inst AS t4 ON t2.instid  =  t4.instid WHERE t4.country  =  \"Japan\" AND t2.authorder  =  1 AND t1.lname  =  \"Ohori\"",
        "predicted_parse_with_values": "select T4.title from Authors as T1 join Authorship as T2 on T1.authID = T2.authID join Inst as T3 on T2.instID = T3.instID join Papers as T4 on T2.paperID = T4.paperID where T3.country = \"UK\" and T1.lname = \"Turon\""
    },
    {
        "question": "return me the citations of each paper in the VLDB conference .",
        "db_id": "academic",
        "gold_parse": "SELECT t2.citation_num FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\"",
        "predicted_parse_with_values": "select T2.jid from conference as T1 join publication as T2 on T1.cid = T2.cid where T1.name = \"dummy value\""
    },
    {
        "question": "how many rivers are found in idaho",
        "db_id": "geo",
        "gold_parse": "SELECT COUNT ( river_name ) FROM river WHERE traverse  =  \"idaho\"",
        "predicted_parse_with_values": "select count ( * ) from river as T1 join state as T2 on T1.traverse = T2.state_name where T2.state_name = \"dummy value\""
    },
    {
        "question": "return me the keywords , which have been contained by more than 100 papers in VLDB conference .",
        "db_id": "academic",
        "gold_parse": "SELECT t1.keyword FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t4.pid JOIN conference AS t2 ON t3.cid  =  t2.cid WHERE t2.name  =  \"VLDB\" GROUP BY t1.keyword HAVING COUNT ( DISTINCT t3.title )  >  100",
        "predicted_parse_with_values": "select T8.keyword from conference as T1 join publication as T2 on T1.cid = T2.cid join writes as T3 on T2.pid = T3.pid join author as T4 on T3.aid = T4.aid join domain_author as T5 on T4.aid = T5.aid join domain as T6 on T5.did = T6.did join domain_keyword as T7 on T6.did = T7.did join keyword as T8 on T7.kid = T8.kid where T1.name = \"dummy value\" group by T8.keyword having count ( T1.name ) > 1"
    },
    {
        "question": "Count the number of universities that do not participate in the baketball match .",
        "db_id": "university_basketball",
        "gold_parse": "SELECT count(*) FROM university WHERE school_id NOT IN (SELECT school_id FROM basketball_match)",
        "predicted_parse_with_values": "select count ( * ) from basketball_match where All_Games != \"35\u20132\""
    },
    {
        "question": "what are the populations of states which border texas",
        "db_id": "geo",
        "gold_parse": "SELECT t2.population FROM state AS t2 JOIN border_info AS t1 ON t2.state_name  =  t1.border WHERE t1.state_name  =  \"texas\"",
        "predicted_parse_with_values": "select T2.population from border_info as T1 join state as T2 on T1.border = T2.state_name where T1.border = \"dummy value\""
    },
    {
        "question": "What are the names of all games played by Linda Smith ?",
        "db_id": "game_1",
        "gold_parse": "SELECT Gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid  =  T2.gameid JOIN Student AS T3 ON T3.Stuid  =  T1.Stuid WHERE T3.Lname  =  \"Smith\" AND T3.Fname  =  \"Linda\"",
        "predicted_parse_with_values": "select T3.GName from Student as T1 join Plays_Games as T2 on T1.StuID = T2.StuID join Video_Games as T3 on T2.GameID = T3.GameID where T1.Fname = \"Bruce\" and T1.LName = \"Brody\""
    },
    {
        "question": "Which teacher teaches the most students ? Give me the first name and last name of the teacher .",
        "db_id": "student_1",
        "gold_parse": "SELECT T2.firstname ,  T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom GROUP BY T2.firstname ,  T2.lastname ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select FirstName , LastName from teachers group by FirstName order by count ( * ) desc limit 1"
    },
    {
        "question": "What is the joined year of the pilot of the highest rank ?",
        "db_id": "pilot_record",
        "gold_parse": "SELECT Join_Year FROM pilot ORDER BY Rank ASC LIMIT 1",
        "predicted_parse_with_values": "select Join_Year from pilot order by Rank desc limit 1"
    },
    {
        "question": "how many cities named austin are there in the usa",
        "db_id": "geo",
        "gold_parse": "SELECT COUNT ( city_name ) FROM city WHERE city_name  =  \"austin\"",
        "predicted_parse_with_values": "select count ( * ) from city as T1 join state as T2 on T1.state_name = T2.state_name where T2.country_name = \"dummy value\" and T1.country_name = \"dummy value\""
    },
    {
        "question": "return me the authors who have papers in PVLDB after 2010 .",
        "db_id": "academic",
        "gold_parse": "SELECT t1.name FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"PVLDB\" AND t4.year  >  2010",
        "predicted_parse_with_values": "select T3.name from publication as T1 join writes as T2 on T1.pid = T2.pid join author as T3 on T2.aid = T3.aid where T1.year > \"dummy value\" and T1.year > \"dummy value\""
    },
    {
        "question": "what is the combined area of all 50 states",
        "db_id": "geo",
        "gold_parse": "SELECT SUM ( area ) FROM state",
        "predicted_parse_with_values": "select area from state group by area having count ( * ) >= 1"
    },
    {
        "question": "List the clubs having \" Davis Steven \" as a member .",
        "db_id": "club_1",
        "gold_parse": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Davis\" AND t3.lname  =  \"Steven\"",
        "predicted_parse_with_values": "select ClubName from Club where ClubName = \"Tennis Club\""
    },
    {
        "question": "What are the names and enrollment numbers for colleges that have more than 10000 enrolled and are located in Louisiana ?",
        "db_id": "soccer_2",
        "gold_parse": "SELECT cName ,  enr FROM College WHERE enr  >  10000 AND state = \"LA\"",
        "predicted_parse_with_values": "select cName , enr from College where state > \"LA\" and state = \"LA\""
    },
    {
        "question": "Who is the friend of Zach with longest year relationship ?",
        "db_id": "network_2",
        "gold_parse": "SELECT friend FROM PersonFriend WHERE name =  'Zach' AND YEAR  =  (SELECT max(YEAR) FROM PersonFriend WHERE name =  'Zach')",
        "predicted_parse_with_values": "select friend from PersonFriend where year = ( select max ( year ) from PersonFriend )"
    },
    {
        "question": "what is the biggest city in the smallest state",
        "db_id": "geo",
        "gold_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state ) ) ) AND state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state ) )",
        "predicted_parse_with_values": "select T1.city_name from city as T1 join state as T2 on T1.state_name = T2.state_name order by T2.density limit 1"
    },
    {
        "question": "return me the authors who have cooperated both with \" H. V. Jagadish \" and \" Divesh Srivastava \" .",
        "db_id": "academic",
        "gold_parse": "SELECT t2.name FROM writes AS t4 JOIN author AS t2 ON t4.aid  =  t2.aid JOIN publication AS t7 ON t4.pid  =  t7.pid JOIN writes AS t5 ON t5.pid  =  t7.pid JOIN writes AS t6 ON t6.pid  =  t7.pid JOIN author AS t1 ON t5.aid  =  t1.aid JOIN author AS t3 ON t6.aid  =  t3.aid WHERE t1.name  =  \"H. V. Jagadish\" AND t3.name  =  \"Divesh Srivastava\"",
        "predicted_parse_with_values": "select T1.name from author as T1 join writes as T2 on T1.aid = T2.aid join publication as T3 on T2.pid = T3.pid join publication_keyword as T4 on T3.pid = T4.pid join keyword as T5 on T4.kid = T5.kid join domain_keyword as T6 on T5.kid = T6.kid join domain as T7 on T6.did = T7.did where T7.name = \"dummy value\" intersect select T8.name from author as T8 join writes as T9 on T8.aid = T9.aid join publication as T10 on T9.pid = T10.pid join publication_keyword as T11 on T10.pid = T11.pid join keyword as T12 on T11.kid = T12.kid join domain_keyword as T13 on T12.kid = T13.kid join domain as T14 on T13.did = T14.did where T14.name = \"dummy value\""
    },
    {
        "question": "What are names of stations that have average bike availability above 10 and are not located in San Jose city ?",
        "db_id": "bike_1",
        "gold_parse": "SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  10 EXCEPT SELECT name FROM station WHERE city  =  \"San Jose\"",
        "predicted_parse_with_values": "select T1.name from station as T1 join status as T2 on T1.id = T2.station_id where T1.city = \"San Francisco\" and T2.bikes_available > 5"
    },
    {
        "question": "Which customer had at least 2 policies but did not file any claims ? List the customer details and id .",
        "db_id": "insurance_policies",
        "gold_parse": "SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2 EXCEPT SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.customer_id JOIN Claims AS T3 ON T2.policy_id  =  T3.policy_id",
        "predicted_parse_with_values": "select Customer_Details , Customer_ID from Customers group by Customer_ID having count ( * ) >= 1"
    },
    {
        "question": "what is the smallest city in the us",
        "db_id": "geo",
        "gold_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MIN ( population ) FROM city )",
        "predicted_parse_with_values": "select city_name from city where state_name = \"dummy value\" order by population limit 1"
    },
    {
        "question": "Find the email and phone number of the customers who have never filed a complaint before .",
        "db_id": "customer_complaints",
        "gold_parse": "SELECT email_address ,  phone_number FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM complaints)",
        "predicted_parse_with_values": "select email_address , phone_number from Customers where email_address not in ( select customer_id from Complaints )"
    },
    {
        "question": "What are the names for the 3 branches that have the most memberships ?",
        "db_id": "shop_membership",
        "gold_parse": "SELECT name FROM branch ORDER BY membership_amount DESC LIMIT 3",
        "predicted_parse_with_values": "select T2.Name from membership_register_branch as T1 join branch as T2 on T1.Branch_ID = T2.Branch_ID group by T1.Branch_ID order by count ( * ) desc limit 1"
    },
    {
        "question": "What are the names and genders of staff who were assigned in 2016 ?",
        "db_id": "department_store",
        "gold_parse": "SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.date_assigned_from LIKE \"2016%\"",
        "predicted_parse_with_values": "select T2.staff_name , T2.staff_gender from Staff_Department_Assignments as T1 join Staff as T2 on T1.staff_id = T2.staff_id where T1.date_assigned_from = \"2016-06-24 17:31:24\""
    },
    {
        "question": "Show id , first and last names for all customers with at least two cards .",
        "db_id": "customers_card_transactions",
        "gold_parse": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2",
        "predicted_parse_with_values": "select T1.customer_first_name , T1.customer_first_name , T1.customer_last_name from Customers as T1 join Customers_Cards as T2 group by T2.customer_id having count ( * ) >= 1"
    },
    {
        "question": "Find the average hours for the students whose tryout decision is no .",
        "db_id": "soccer_2",
        "gold_parse": "SELECT avg(T1.HS) FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'no'",
        "predicted_parse_with_values": "select avg ( T2.enr ) from Tryout as T1 join College as T2 on T1.cName = T2.cName where T1.decision = \"yes\""
    },
    {
        "question": "What is the name of the department with the fewest professors ?",
        "db_id": "college_1",
        "gold_parse": "SELECT T2.dept_name FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) LIMIT 1",
        "predicted_parse_with_values": "select T1.DEPT_NAME from DEPARTMENT as T1 join PROFESSOR as T2 on T1.DEPT_CODE = T2.DEPT_CODE group by T2.DEPT_CODE order by count ( * ) asc limit 1"
    },
    {
        "question": "What is the first name of students who got grade C in any class ?",
        "db_id": "college_1",
        "gold_parse": "SELECT DISTINCT stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE enroll_grade  =  'C'",
        "predicted_parse_with_values": "select T1.STU_FNAME from STUDENT as T1 join ENROLL as T2 on T1.STU_NUM = T2.STU_NUM where T2.ENROLL_GRADE = \"C\""
    },
    {
        "question": "Which room has the largest number of reservations ?",
        "db_id": "inn_1",
        "gold_parse": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select Room from Reservations group by Room order by count ( * ) desc limit 1"
    },
    {
        "question": "What are the names of parties with at least 2 events ?",
        "db_id": "party_people",
        "gold_parse": "SELECT T2.party_name FROM party_events AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id HAVING count(*)  >=  2",
        "predicted_parse_with_values": "select Party_name from party group by Party_name having count ( * ) >= 1"
    },
    {
        "question": "how many people lived in boulder",
        "db_id": "geo",
        "gold_parse": "SELECT population FROM city WHERE city_name  =  \"boulder\"",
        "predicted_parse_with_values": "select sum ( population ) from city where city_name = \"dummy value\""
    },
    {
        "question": "What is the customer first , last name and id with least number of accounts .",
        "db_id": "customers_card_transactions",
        "gold_parse": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1",
        "predicted_parse_with_values": "select T1.customer_first_name , T1.customer_last_name , T1.customer_id from Customers as T1 join Accounts as T2 group by T2.customer_id order by count ( * ) asc limit 1"
    },
    {
        "question": "return me the number of the keywords of \" Making database systems usable \" .",
        "db_id": "academic",
        "gold_parse": "SELECT COUNT ( DISTINCT t1.keyword ) FROM publication_keyword AS t3 JOIN keyword AS t1 ON t3.kid  =  t1.kid JOIN publication AS t2 ON t2.pid  =  t3.pid WHERE t2.title  =  \"Making database systems usable\"",
        "predicted_parse_with_values": "select count ( * ) from keyword where keyword = \"dummy value\""
    },
    {
        "question": "Find the id for the trips that lasted at least as long as the average duration of trips in zip code 94103 .",
        "db_id": "bike_1",
        "gold_parse": "SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  94103)",
        "predicted_parse_with_values": "select id from trip where duration > ( select avg ( duration ) from trip where zip_code = 94565 )"
    },
    {
        "question": "What are names of customers who never ordered product Latte .",
        "db_id": "customers_and_addresses",
        "gold_parse": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Latte'",
        "predicted_parse_with_values": "select customer_name from Customers where customer_id not in ( select customer_id from Customer_Orders where order_date = \"2018-02-24 13:18:49\" )"
    },
    {
        "question": "How many customers are there ?",
        "db_id": "loan_1",
        "gold_parse": "SELECT sum(no_of_customers) FROM bank",
        "predicted_parse_with_values": "select count ( * ) from customer"
    },
    {
        "question": "Find all the papers published by \" Aaron Turon \" .",
        "db_id": "icfp_1",
        "gold_parse": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Aaron\" AND t1.lname  =  \"Turon\"",
        "predicted_parse_with_values": "select T3.paperID from Authors as T1 join Authorship as T2 on T1.authID = T2.authID join Papers as T3 on T2.paperID = T3.paperID where T1.fname = \"Amal\""
    },
    {
        "question": "where is mount whitney",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM mountain WHERE mountain_name  =  \"whitney\"",
        "predicted_parse_with_values": "select count ( * ) from mountain where mountain_name = \"dummy value\""
    },
    {
        "question": "what states border the ohio river",
        "db_id": "geo",
        "gold_parse": "SELECT traverse FROM river WHERE river_name  =  \"ohio\"",
        "predicted_parse_with_values": "select T3.border from river as T1 join state as T2 on T1.traverse = T2.state_name join border_info as T3 on T2.state_name = T3.border where T1.river_name = \"dummy value\""
    },
    {
        "question": "Return the names and ids of customers who have TN in their address .",
        "db_id": "department_store",
        "gold_parse": "SELECT customer_name ,  customer_id FROM customers WHERE customer_address LIKE \"%TN%\"",
        "predicted_parse_with_values": "select customer_name , customer_id from Customers"
    },
    {
        "question": "What are the first names of all the students ?",
        "db_id": "club_1",
        "gold_parse": "SELECT DISTINCT fname FROM student",
        "predicted_parse_with_values": "select Fname from Student"
    },
    {
        "question": "What is the average latitude and longitude of all starting stations for the trips ?",
        "db_id": "bike_1",
        "gold_parse": "SELECT avg(T1.lat) ,  avg(T1.long) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id",
        "predicted_parse_with_values": "select avg ( lat ) , avg ( lat ) from station"
    },
    {
        "question": "Show all student ids who are older than 20 .",
        "db_id": "allergy_1",
        "gold_parse": "SELECT StuID FROM Student WHERE age  >  20",
        "predicted_parse_with_values": "select LName from Student where Age > 26"
    },
    {
        "question": "Find the names of the artists who have produced English songs but have never received rating higher than 8 .",
        "db_id": "music_1",
        "gold_parse": "SELECT DISTINCT artist_name FROM song WHERE languages  =  \"english\" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating  >  8",
        "predicted_parse_with_values": "select T2.artist_name from song as T1 join artist as T2 on T1.artist_name = T2.artist_name where T1.rating = 7 except select artist_name from song where rating > 7"
    },
    {
        "question": "Show company name and main industry without a gas station .",
        "db_id": "gas_company",
        "gold_parse": "SELECT company ,  main_industry FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company)",
        "predicted_parse_with_values": "select Company , Main_Industry from company except select Company , Main_Industry from company"
    },
    {
        "question": "how many states do not have rivers",
        "db_id": "geo",
        "gold_parse": "SELECT COUNT ( DISTINCT state_name ) FROM state WHERE state_name NOT IN ( SELECT traverse FROM river )",
        "predicted_parse_with_values": "select count ( * ) from state where state_name not in ( select state_name from lake )"
    },
    {
        "question": "What are the names of all aircrafts that John Williams have certificates to be able to fly ?",
        "db_id": "flight_1",
        "gold_parse": "SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T1.name  =  \"John Williams\"",
        "predicted_parse_with_values": "select T3.name from employee as T1 join certificate as T2 on T1.eid = T2.eid join aircraft as T3 on T2.aid = T3.aid where T1.name = \"Lawrence Sperry\" and T1.name = \"John Williams\""
    },
    {
        "question": "Return the name , rate , check in and check out date for the room with the highest rate .",
        "db_id": "inn_1",
        "gold_parse": "SELECT T2.roomName ,  T1.Rate ,  T1.CheckIn ,  T1.CheckOut FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY T1.Rate DESC LIMIT 1",
        "predicted_parse_with_values": "select T1.roomName , T2.CheckIn , T2.Rate from Rooms as T1 join Reservations as T2 on T1.RoomId = T2.Room order by T1.beds desc limit 1"
    },
    {
        "question": "List all people names in the order of their date of birth from old to young .",
        "db_id": "candidate_poll",
        "gold_parse": "SELECT name FROM people ORDER BY date_of_birth",
        "predicted_parse_with_values": "select Name from people order by Date_of_Birth asc"
    },
    {
        "question": "how much population does california have",
        "db_id": "geo",
        "gold_parse": "SELECT population FROM state WHERE state_name  =  \"california\"",
        "predicted_parse_with_values": "select sum ( T2.population ) from city as T1 join state as T2 on T1.state_name = T2.state_name where T1.state_name = \"dummy value\""
    },
    {
        "question": "What are the names of tourist attractions that can be reached by walk or is at address 660 Shea Crescent ?",
        "db_id": "cre_Theme_park",
        "gold_parse": "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID  =  T2.Location_ID WHERE T1.Address  =  \"660 Shea Crescent\" OR T2.How_to_Get_There  =  \"walk\"",
        "predicted_parse_with_values": "select T2.Name from Locations as T1 join Tourist_Attractions as T2 on T1.Location_ID = T2.Location_ID where T1.Address = \"88271 Barrows Union Suite 203\" union select T4.Name from Locations as T3 join Tourist_Attractions as T4 on T3.Location_ID = T4.Location_ID where T3.Address = \"4411 Sabrina Radial Suite 582\""
    },
    {
        "question": "What is the id of the bike that traveled the most in 94002 ?",
        "db_id": "bike_1",
        "gold_parse": "SELECT bike_id FROM trip WHERE zip_code  =  94002 GROUP BY bike_id ORDER BY COUNT(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select bike_id from trip where duration = ( select max ( duration ) from trip )"
    },
    {
        "question": "find the number of actors from Iran who played in \" Jim Jarmusch \" movies",
        "db_id": "imdb",
        "gold_parse": "SELECT COUNT ( DISTINCT t1.name  ) FROM CAST AS t4 JOIN actor AS t1 ON t4.aid  =  t1.aid JOIN movie AS t5 ON t5.mid  =  t4.msid JOIN directed_by AS t2 ON t5.mid  =  t2.msid JOIN director AS t3 ON t3.did  =  t2.did WHERE t1.nationality  =  \"Iran\" AND t3.name  =  \"Jim Jarmusch\"",
        "predicted_parse_with_values": "select count ( * ) from actor where nationality = \"dummy value\" and nationality = \"dummy value\""
    },
    {
        "question": "What are the names of all people who are friends with Alice for the shortest amount of time ?",
        "db_id": "network_2",
        "gold_parse": "SELECT name FROM PersonFriend WHERE friend =  'Alice' AND YEAR  =  (SELECT min(YEAR) FROM PersonFriend WHERE friend =  'Alice')",
        "predicted_parse_with_values": "select T2.name from PersonFriend as T1 join Person as T2 on T1.friend = T2.name where T1.friend = \"Alice\" order by T1.year desc limit 1"
    },
    {
        "question": "List all the movies directed by \" Asghar Farhadi \" in which \" Taraneh Alidoosti \" played",
        "db_id": "imdb",
        "gold_parse": "SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid  =  t1.aid JOIN movie AS t4 ON t4.mid  =  t5.msid JOIN directed_by AS t2 ON t4.mid  =  t2.msid JOIN director AS t3 ON t3.did  =  t2.did WHERE t1.name  =  \"Taraneh Alidoosti\" AND t3.name  =  \"Asghar Farhadi\"",
        "predicted_parse_with_values": "select T5.title from director as T1 join directed_by as T2 on T1.did = T2.did join copyright as T3 on T2.msid = T3.msid join cast as T4 on T3.msid = T4.msid join movie as T5 where T1.name = \"dummy value\" and T4.role = \"dummy value\""
    },
    {
        "question": "what is the biggest river in texas",
        "db_id": "geo",
        "gold_parse": "SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river WHERE traverse  =  \"texas\" ) AND traverse  =  \"texas\"",
        "predicted_parse_with_values": "select T1.river_name from river as T1 join state as T2 on T1.traverse = T2.state_name where T2.state_name = \"dummy value\" order by T2.density desc limit 1"
    },
    {
        "question": "what is the smallest city in the largest state",
        "db_id": "geo",
        "gold_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MIN ( population ) FROM city WHERE state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) ) ) AND state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) )",
        "predicted_parse_with_values": "select T1.city_name from city as T1 join state as T2 on T1.state_name = T2.state_name order by T2.density desc limit 1"
    },
    {
        "question": "what state has the shortest river",
        "db_id": "geo",
        "gold_parse": "SELECT DISTINCT traverse FROM river WHERE LENGTH  =  ( SELECT MIN ( DISTINCT LENGTH ) FROM river )",
        "predicted_parse_with_values": "select T2.state_name from river as T1 join state as T2 on T1.traverse = T2.state_name order by T1.length limit 1"
    },
    {
        "question": "what is the largest city in wyoming",
        "db_id": "geo",
        "gold_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name  =  \"wyoming\" ) AND state_name  =  \"wyoming\"",
        "predicted_parse_with_values": "select city_name from city where state_name = \"dummy value\" order by population desc limit 1"
    },
    {
        "question": "which river traverses most states",
        "db_id": "geo",
        "gold_parse": "SELECT river_name FROM river GROUP BY ( river_name ) ORDER BY COUNT ( DISTINCT traverse ) DESC LIMIT 1",
        "predicted_parse_with_values": "select river_name from river group by river_name order by count ( * ) desc limit 1"
    },
    {
        "question": "give me the longest river that passes through the us",
        "db_id": "geo",
        "gold_parse": "SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river )",
        "predicted_parse_with_values": "select T1.river_name from river as T1 join state as T2 on T1.traverse = T2.state_name where T2.country_name = \"dummy value\" order by T1.length desc limit 1"
    },
    {
        "question": "Show all the buildings that have at least 10 professors .",
        "db_id": "activity_1",
        "gold_parse": "SELECT building FROM Faculty WHERE rank  =  \"Professor\" GROUP BY building HAVING count(*)  >=  10",
        "predicted_parse_with_values": "select Building from Faculty group by Building having count ( * ) >= 1"
    },
    {
        "question": "What is the last name of the student who got a grade A in the class with code 10018 .",
        "db_id": "college_1",
        "gold_parse": "SELECT T1.stu_lname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE T2.enroll_grade  =  'A' AND T2.class_code  =  10018",
        "predicted_parse_with_values": "select T3.STU_LNAME from CLASS as T1 join ENROLL as T2 on T1.CLASS_CODE = T2.CLASS_CODE join STUDENT as T3 on T2.STU_NUM = T3.STU_NUM where T1.CLASS_CODE = 10017"
    },
    {
        "question": "Find all the male members of club \" Hopkins Student Enterprises \" . Show the first name and last name .",
        "db_id": "club_1",
        "gold_parse": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Hopkins Student Enterprises\" AND t3.sex  =  \"M\"",
        "predicted_parse_with_values": "select T1.Fname , T1.LName from Student as T1 join Member_of_club as T2 on T1.StuID = T2.StuID join Club as T3 on T2.ClubID = T3.ClubID where T3.ClubName = \"Tennis Club\" and T1.LName = \"Adams\""
    },
    {
        "question": "How many furniture components are there in total ?",
        "db_id": "manufacturer",
        "gold_parse": "SELECT sum(num_of_component) FROM furniture",
        "predicted_parse_with_values": "select count ( * ) from furniture"
    },
    {
        "question": "What are the first name and major of the students who are able to consume soy ?",
        "db_id": "allergy_1",
        "gold_parse": "SELECT fname ,  major FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Soy\")",
        "predicted_parse_with_values": "select T3.Fname , T3.Major from Allergy_Type as T1 join Has_Allergy as T2 on T1.Allergy = T2.Allergy join Student as T3 on T2.StuID = T3.StuID where T1.Allergytype = \"environmental\""
    },
    {
        "question": "return me the author in the \" University of Michigan \" whose papers have more than 5000 total citations .",
        "db_id": "academic",
        "gold_parse": "SELECT t1.name FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t3 ON t3.aid  =  t1.aid JOIN publication AS t4 ON t3.pid  =  t4.pid WHERE t2.name  =  \"University of Michigan\" GROUP BY t1.name HAVING SUM ( t4.citation_num )  >  5000",
        "predicted_parse_with_values": "select T2.name from organization as T1 join author as T2 join cite as T3 where T1.name = \"dummy value\" and T3.cited > \"dummy value\""
    },
    {
        "question": "Show the name , street address , and number of floors for all buildings ordered by the number of floors .",
        "db_id": "protein_institute",
        "gold_parse": "SELECT name ,  street_address ,  floors FROM building ORDER BY floors",
        "predicted_parse_with_values": "select Name , Street_address , Floors from building order by Floors desc"
    },
    {
        "question": "For each airport name , how many routes start at that airport , ordered from most to least ?",
        "db_id": "flight_4",
        "gold_parse": "SELECT count(*) ,  T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T1.name ORDER BY count(*) DESC",
        "predicted_parse_with_values": "select T2.name , count ( * ) from routes as T1 join airports as T2 on T1.src_apid = T2.apid group by T2.name order by count ( * ) desc"
    },
    {
        "question": "What are the first names of all professors who teach more than one class ?",
        "db_id": "college_1",
        "gold_parse": "SELECT T2.emp_fname FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num GROUP BY T1.prof_num HAVING count(*)  >  1",
        "predicted_parse_with_values": "select ( T5.PROF_EXTENSION ) , count ( * ) from CLASS as T1 join ENROLL as T2 on T1.CLASS_CODE = T2.CLASS_CODE join STUDENT as T3 on T2.STU_NUM = T3.STU_NUM join DEPARTMENT as T4 on T3.DEPT_CODE = T4.DEPT_CODE join PROFESSOR as T5 on T4.DEPT_CODE = T5.DEPT_CODE group by T1.CLASS_CODE having count ( * ) > 1"
    },
    {
        "question": "What are characteristic names used at least twice across all products ?",
        "db_id": "products_gen_characteristics",
        "gold_parse": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id GROUP BY t3.characteristic_name HAVING count(*)  >= 2",
        "predicted_parse_with_values": "select characteristic_name from Characteristics group by characteristic_id having count ( * ) >= 1"
    },
    {
        "question": "which state has the smallest average urban population",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM city GROUP BY state_name ORDER BY AVG ( population ) LIMIT 1",
        "predicted_parse_with_values": "select T2.state_name from city as T1 join state as T2 on T1.state_name = T2.state_name group by T1.state_name order by avg ( T2.population ) limit 1"
    },
    {
        "question": "where is the most populated area of wyoming",
        "db_id": "geo",
        "gold_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name  =  \"wyoming\" ) AND state_name  =  \"wyoming\"",
        "predicted_parse_with_values": "select T2.area from border_info as T1 join state as T2 on T1.border = T2.state_name where T1.state_name = \"dummy value\" order by T2.population desc limit 1"
    },
    {
        "question": "What is the average bike availability in stations that are not located in Palo Alto ?",
        "db_id": "bike_1",
        "gold_parse": "SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  \"Palo Alto\")",
        "predicted_parse_with_values": "select avg ( T2.bikes_available ) from station as T1 join status as T2 on T1.id = T2.station_id where T1.city != \"San Francisco\""
    },
    {
        "question": "What is the last name of the musician that have produced the most number of songs ?",
        "db_id": "music_2",
        "gold_parse": "SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId GROUP BY lastname ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select T1.Lastname from Band as T1 join Vocals as T2 on T1.Id = T2.Bandmate join Songs as T3 on T2.SongId = T3.SongId group by T1.Lastname order by count ( * ) desc limit 1"
    },
    {
        "question": "Find the name of the customers who use the most frequently used payment method .",
        "db_id": "customers_and_addresses",
        "gold_parse": "SELECT customer_name FROM customers WHERE payment_method  =  (SELECT payment_method FROM customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1)",
        "predicted_parse_with_values": "select customer_name from Customers where payment_method = ( select payment_method from Customers group by payment_method order by count ( * ) desc limit 1 )"
    },
    {
        "question": "What are the names of the artists that are from the UK and sang songs in English ?",
        "db_id": "music_1",
        "gold_parse": "SELECT artist_name FROM artist WHERE country  =  \"UK\" INTERSECT SELECT artist_name FROM song WHERE languages  =  \"english\"",
        "predicted_parse_with_values": "select T2.artist_name from song as T1 join artist as T2 on T1.artist_name = T2.artist_name where T1.country = \"Bangladesh\" and T1.languages = \"english\""
    },
    {
        "question": "What are the first and last names of all students who are living in a dorm with a TV Lounge ?",
        "db_id": "dorm_1",
        "gold_parse": "SELECT T1.fname ,  T1.lname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid IN (SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid  =  T4.amenid WHERE T4.amenity_name  =  'TV Lounge')",
        "predicted_parse_with_values": "select T1.Fname , T1.LName from Student as T1 join Lives_in as T2 on T1.StuID = T2.stuid join Dorm as T3 on T2.dormid = T3.dormid where T3.dorm_name = \"Fawlty Towers\""
    },
    {
        "question": "What are the student ids for students over 20 years old ?",
        "db_id": "allergy_1",
        "gold_parse": "SELECT StuID FROM Student WHERE age  >  20",
        "predicted_parse_with_values": "select * from Student where Age > 27"
    },
    {
        "question": "Find the team that attended the least number of home games in 1980 .",
        "db_id": "baseball_1",
        "gold_parse": "SELECT T2.name FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T1.year = 1980 ORDER BY T1.attendance ASC LIMIT 1",
        "predicted_parse_with_values": "select T2.name from home_game as T1 join team as T2 on T1.team_id = T2.team_id where T1.year = 1995 group by T1.team_id order by count ( * ) limit 1"
    },
    {
        "question": "Find the names of females who are friends with Zach",
        "db_id": "network_2",
        "gold_parse": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Zach' AND T1.gender  =  'female'",
        "predicted_parse_with_values": "select name from Person where gender = \"male\""
    },
    {
        "question": "springfield is in what state",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM city WHERE city_name  =  \"springfield\"",
        "predicted_parse_with_values": "select T2.capital from city as T1 join state as T2 on T1.state_name = T2.state_name where T1.state_name = \"dummy value\""
    },
    {
        "question": "List the file size and format for all songs that have resolution lower than 800 .",
        "db_id": "music_1",
        "gold_parse": "SELECT DISTINCT T1.file_size ,  T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T2.resolution  <  800",
        "predicted_parse_with_values": "select T2.file_size , T2.formats from song as T1 join files as T2 on T1.f_id = T2.f_id where T1.resolution < 320"
    },
    {
        "question": "Find the names of customers who ordered both products Latte and Americano .",
        "db_id": "customers_and_addresses",
        "gold_parse": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Latte' INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Americano'",
        "predicted_parse_with_values": "select customer_name from Customers where customer_id in ( select customer_id from Customer_Orders where order_status = \"Cancelled\" intersect select customer_id from Customer_Orders where order_status = \"Delivered\" )"
    },
    {
        "question": "what is the population density of the largest state",
        "db_id": "geo",
        "gold_parse": "SELECT density FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state )",
        "predicted_parse_with_values": "select density from state order by population desc limit 1"
    },
    {
        "question": "What are the names of all songs that are approximately 4 minutes long or are in English ?",
        "db_id": "music_1",
        "gold_parse": "SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.duration LIKE \"4:%\" UNION SELECT song_name FROM song WHERE languages  =  \"english\"",
        "predicted_parse_with_values": "select song_name from song where languages = \"bangla\" or languages = \"bangla\""
    },
    {
        "question": "What are the claim dates and settlement dates of all the settlements ?",
        "db_id": "insurance_policies",
        "gold_parse": "SELECT Date_Claim_Made ,  Date_Claim_Settled FROM Settlements",
        "predicted_parse_with_values": "select T1.Date_Claim_Made , T2.Date_Claim_Settled from Claims as T1 join Settlements as T2 on T1.Claim_ID = T2.Claim_ID"
    },
    {
        "question": "Which customers do not have any policies ? Find the details of these customers .",
        "db_id": "insurance_policies",
        "gold_parse": "SELECT customer_details FROM Customers EXCEPT SELECT T1.customer_details FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.customer_id  =  T2.customer_id",
        "predicted_parse_with_values": "select Customer_Details from Customers where Customer_ID not in ( select Customer_ID from Customer_Policies )"
    },
    {
        "question": "Show all allergy type with number of students affected .",
        "db_id": "allergy_1",
        "gold_parse": "SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype",
        "predicted_parse_with_values": "select Allergytype , count ( * ) from Allergy_Type group by Allergytype"
    },
    {
        "question": "Find all the policy type codes associated with the customer \" Dayana Robel \"",
        "db_id": "insurance_and_eClaims",
        "gold_parse": "SELECT policy_type_code FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.customer_details  =  \"Dayana Robel\"",
        "predicted_parse_with_values": "select T2.Policy_Type_Code from Customers as T1 join Policies as T2 on T1.Customer_ID = T2.Customer_ID where T1.Customer_Details = \"Mrs. Lilly Graham III\""
    },
    {
        "question": "return me the keywords in PVLDB .",
        "db_id": "academic",
        "gold_parse": "SELECT t1.keyword FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t2 ON t2.pid  =  t4.pid JOIN journal AS t3 ON t2.jid  =  t3.jid WHERE t3.name  =  \"PVLDB\"",
        "predicted_parse_with_values": "select T2.keyword from organization as T1 join keyword as T2 where T1.name = \"dummy value\""
    },
    {
        "question": "Find the team of each player and sort them in ascending alphabetical order .",
        "db_id": "school_player",
        "gold_parse": "SELECT Team FROM player ORDER BY Team ASC",
        "predicted_parse_with_values": "select Player from player order by Player asc"
    },
    {
        "question": "Find the name and hours of the students whose tryout decision is yes .",
        "db_id": "soccer_2",
        "gold_parse": "SELECT T1.pName ,  T1.HS FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'",
        "predicted_parse_with_values": "select T1.cName , T2.pName from Tryout as T1 join Player as T2 on T1.pID = T2.pID where T1.decision = \"yes\""
    },
    {
        "question": "what is the capital of the state that borders the state that borders texas",
        "db_id": "geo",
        "gold_parse": "SELECT capital FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"texas\" ) )",
        "predicted_parse_with_values": "select T2.capital from border_info as T1 join state as T2 on T1.border = T2.state_name where T1.border = \"dummy value\""
    },
    {
        "question": "What are the student ids for all male students ?",
        "db_id": "allergy_1",
        "gold_parse": "SELECT StuID FROM Student WHERE Sex  =  'M'",
        "predicted_parse_with_values": "select * from Student where Sex = \"F\""
    },
    {
        "question": "Show all ministers and parties they belong to in descending order of the time they took office .",
        "db_id": "party_people",
        "gold_parse": "SELECT minister ,  party_name FROM party ORDER BY took_office DESC",
        "predicted_parse_with_values": "select Minister , Took_office from party order by Took_office desc"
    },
    {
        "question": "Find the name and address of the department that has the highest number of students .",
        "db_id": "college_1",
        "gold_parse": "SELECT T2.dept_name ,  T2.dept_address FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select DEPT_NAME , DEPT_ADDRESS from DEPARTMENT group by DEPT_NAME order by count ( * ) desc limit 1"
    },
    {
        "question": "which city in wyoming has the largest population",
        "db_id": "geo",
        "gold_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name  =  \"wyoming\" ) AND state_name  =  \"wyoming\"",
        "predicted_parse_with_values": "select city_name from city where state_name = \"dummy value\" order by population desc limit 1"
    },
    {
        "question": "Find the average order quantity per order .",
        "db_id": "customers_and_addresses",
        "gold_parse": "SELECT avg(order_quantity) FROM order_items",
        "predicted_parse_with_values": "select avg ( order_quantity ) , value from Order_Items group by value"
    },
    {
        "question": "Find papers whose second author has last name \" Turon \" and is affiliated with an institution in the country \" USA \" .",
        "db_id": "icfp_1",
        "gold_parse": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid JOIN inst AS t4 ON t2.instid  =  t4.instid WHERE t4.country  =  \"USA\" AND t2.authorder  =  2 AND t1.lname  =  \"Turon\"",
        "predicted_parse_with_values": "select T3.paperID from Authors as T1 join Authorship as T2 on T1.authID = T2.authID join Papers as T3 on T2.paperID = T3.paperID where T1.fname = \"Jeremy\" and T1.lname = \"Turon\""
    },
    {
        "question": "Show student ids for all male students .",
        "db_id": "allergy_1",
        "gold_parse": "SELECT StuID FROM Student WHERE Sex  =  'M'",
        "predicted_parse_with_values": "select * from Student where Sex = \"M\""
    },
    {
        "question": "What are the names and ids of all stations that have more than 14 bikes available on average or had bikes installed in December ?",
        "db_id": "bike_1",
        "gold_parse": "SELECT T1.name ,  T1.id FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(T2.bikes_available)  >  14 UNION SELECT name ,  id FROM station WHERE installation_date LIKE \"12/%\"",
        "predicted_parse_with_values": "select T1.name , T1.id from station as T1 join status as T2 on T1.id = T2.station_id where T2.bikes_available > 8 or T2.bikes_available < 11"
    },
    {
        "question": "Return the title and director of the movie released in the year 2000 or earlier that had the highest worldwide gross .",
        "db_id": "culture_company",
        "gold_parse": "SELECT title ,  director FROM movie WHERE YEAR  <=  2000 ORDER BY gross_worldwide DESC LIMIT 1",
        "predicted_parse_with_values": "select Title , Director from movie where Gross_worldwide < 18720175 order by Gross_worldwide desc limit 1"
    },
    {
        "question": "On which day and in which zip code was the min dew point lower than any day in zip code 94107 ?",
        "db_id": "bike_1",
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  94107)",
        "predicted_parse_with_values": "select date , zip_code from weather where zip_code < ( select min ( T1.zip_code ) from trip as T1 join weather as T2 where T2.zip_code = 94063 )"
    },
    {
        "question": "Return the name of the wrestler who had the lowest number of days held .",
        "db_id": "wrestler",
        "gold_parse": "SELECT Name FROM wrestler ORDER BY Days_held ASC LIMIT 1",
        "predicted_parse_with_values": "select Name from wrestler order by Days_held limit 1"
    },
    {
        "question": "Show all main industry for all companies .",
        "db_id": "gas_company",
        "gold_parse": "SELECT DISTINCT main_industry FROM company",
        "predicted_parse_with_values": "select Main_Industry from company"
    },
    {
        "question": "How many kids stay in the rooms reserved by ROY SWEAZY ?",
        "db_id": "inn_1",
        "gold_parse": "SELECT kids FROM Reservations WHERE FirstName = \"ROY\" AND LastName  =  \"SWEAZY\"",
        "predicted_parse_with_values": "select count ( * ) from Reservations where FirstName = \"KEELY\" and LastName = \"DIEUDONNE\""
    },
    {
        "question": "How many courses does the department of Computer Information Systmes offer ?",
        "db_id": "college_1",
        "gold_parse": "SELECT count(*) FROM department AS T1 JOIN course AS T2 ON T1.dept_code  =  T2.dept_code WHERE dept_name  =  \"Computer Info. Systems\"",
        "predicted_parse_with_values": "select count ( * ) from COURSE where DEPT_CODE = \"CIS\""
    },
    {
        "question": "return me the authors who have papers in PVLDB .",
        "db_id": "academic",
        "gold_parse": "SELECT t1.name FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"PVLDB\"",
        "predicted_parse_with_values": "select T2.name from organization as T1 join author as T2 where T1.name = \"dummy value\""
    },
    {
        "question": "What is the name of all the people who are older than at least one engineer ? Order them by age .",
        "db_id": "network_2",
        "gold_parse": "SELECT name FROM Person WHERE age  >  (SELECT min(age) FROM person WHERE job  =  'engineer') ORDER BY age",
        "predicted_parse_with_values": "select name from Person where age > ( select max ( age ) from Person ) order by name"
    },
    {
        "question": "what is the longest river in america",
        "db_id": "geo",
        "gold_parse": "SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river )",
        "predicted_parse_with_values": "select T1.river_name from river as T1 join state as T2 on T1.traverse = T2.state_name where T2.country_name = \"dummy value\" order by T1.length desc limit 1"
    },
    {
        "question": "What is the name and checking balance of the account which has the lowest savings balance ?",
        "db_id": "small_bank_1",
        "gold_parse": "SELECT T2.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1",
        "predicted_parse_with_values": "select T2.name , T3.balance from SAVINGS as T1 join ACCOUNTS as T2 on T1.custid = T2.custid join CHECKING as T3 on T2.custid = T3.custid order by T1.balance limit 1"
    },
    {
        "question": "what is the population of the state with the largest area",
        "db_id": "geo",
        "gold_parse": "SELECT population FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state )",
        "predicted_parse_with_values": "select population from state order by area desc limit 1"
    },
    {
        "question": "Find the name , checking balance and savings balance of all accounts in the bank sorted by their total checking and savings balance in descending order .",
        "db_id": "small_bank_1",
        "gold_parse": "SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance DESC",
        "predicted_parse_with_values": "select T2.name , T1.balance , T1.balance from SAVINGS as T1 join ACCOUNTS as T2 on T1.custid = T2.custid join CHECKING as T3 on T2.custid = T3.custid order by T3.balance desc"
    },
    {
        "question": "For each county , find the name of the county and the number of delegates from that county .",
        "db_id": "election",
        "gold_parse": "SELECT T1.County_name ,  COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id",
        "predicted_parse_with_values": "select County_name , count ( * ) from county group by County_name"
    },
    {
        "question": "Show all allergies and their types .",
        "db_id": "allergy_1",
        "gold_parse": "SELECT allergy ,  allergytype FROM Allergy_type",
        "predicted_parse_with_values": "select T1.Allergy , T2.Allergytype from Has_Allergy as T1 join Allergy_Type as T2 on T1.Allergy = T2.Allergy"
    },
    {
        "question": "How many movies did \" Shahab Hosseini \" act in",
        "db_id": "imdb",
        "gold_parse": "SELECT COUNT ( DISTINCT t2.title  ) FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  \"Shahab Hosseini\"",
        "predicted_parse_with_values": "select count ( * ) from actor as T1 join movie as T2 where T1.name = \"dummy value\""
    },
    {
        "question": "Find all the payment dates for the payments with an amount larger than 10 and the payments handled by a staff person with the first name Elsa .",
        "db_id": "sakila_1",
        "gold_parse": "SELECT payment_date FROM payment WHERE amount  >  10 UNION SELECT T1.payment_date FROM payment AS T1 JOIN staff AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.first_name  =  'Elsa'",
        "predicted_parse_with_values": "select T1.payment_date from payment as T1 join staff as T2 on T1.staff_id = T2.staff_id where T1.amount > 1.99 and T2.last_name = \"dummy value\""
    },
    {
        "question": "how many rivers run through idaho",
        "db_id": "geo",
        "gold_parse": "SELECT COUNT ( river_name ) FROM river WHERE traverse  =  \"idaho\"",
        "predicted_parse_with_values": "select count ( * ) from river as T1 join state as T2 on T1.traverse = T2.state_name where T2.state_name = \"dummy value\""
    },
    {
        "question": "What are the ids of suppliers which have an average amount purchased of above 50000 or below 30000 ?",
        "db_id": "department_store",
        "gold_parse": "SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id HAVING avg(total_amount_purchased)  >  50000 OR avg(total_amount_purchased)  <  30000",
        "predicted_parse_with_values": "select product_Suppliers.supplier_id from Product_Suppliers group by product_Suppliers.supplier_id having avg ( total_amount_purchased ) > 1 union select product_Suppliers.supplier_id , product_Suppliers.supplier_id from Product_Suppliers where total_amount_purchased < \"83873.58\""
    },
    {
        "question": "Count the number of tracks that are part of the rock genre .",
        "db_id": "chinook_1",
        "gold_parse": "SELECT COUNT(*) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Rock\"",
        "predicted_parse_with_values": "select count ( * ) from Genre as T1 join Track as T2 on T1.GenreId = T2.GenreId where T1.Name = \"Science Fiction\""
    },
    {
        "question": "Show first name and last name for all students .",
        "db_id": "allergy_1",
        "gold_parse": "SELECT Fname ,  Lname FROM Student",
        "predicted_parse_with_values": "select Fname , LName from Student"
    },
    {
        "question": "which poll source does the highest oppose rate come from ?",
        "db_id": "candidate_poll",
        "gold_parse": "SELECT poll_source FROM candidate ORDER BY oppose_rate DESC LIMIT 1",
        "predicted_parse_with_values": "select T2.Poll_Source from people as T1 join candidate as T2 on T1.People_ID = T2.People_ID group by T2.Poll_Source order by count ( * ) desc limit 1"
    },
    {
        "question": "Show the dates , places , and names of events in descending order of the attendance .",
        "db_id": "news_report",
        "gold_parse": "SELECT Date ,  Name ,  venue FROM event ORDER BY Event_Attendance DESC",
        "predicted_parse_with_values": "select Date , Name , Name from event order by Event_Attendance desc"
    },
    {
        "question": "Find the number of papers published by authors from the institution \" Tokohu University \" .",
        "db_id": "icfp_1",
        "gold_parse": "SELECT count(DISTINCT t1.title) FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Tokohu University\"",
        "predicted_parse_with_values": "select count ( * ) from Inst as T1 join Authorship as T2 on T1.instID = T2.instID join Papers as T3 on T2.paperID = T3.paperID where T1.name = \"INRIA\""
    },
    {
        "question": "Which park did the most people attend in 2008 ?",
        "db_id": "baseball_1",
        "gold_parse": "SELECT T2.park_name FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year = 2008 ORDER BY T1.attendance DESC LIMIT 1",
        "predicted_parse_with_values": "select T4.park_name from appearances as T1 join team as T2 on T1.team_id = T2.team_id join home_game as T3 on T2.team_id = T3.team_id join park as T4 on T3.park_id = T4.park_id where T1.year = 1876 group by T4.park_name order by count ( * ) desc limit 1"
    },
    {
        "question": "Which film actors ( actresses ) played a role in more than 30 films ? List his or her first name and last name .",
        "db_id": "sakila_1",
        "gold_parse": "SELECT T2.first_name ,  T2.last_name FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id  =  T2.actor_id GROUP BY T2.actor_id HAVING count(*)  >  30",
        "predicted_parse_with_values": "select T2.first_name , T2.last_name from film_actor as T1 join actor as T2 on T1.actor_id = T2.actor_id group by T1.actor_id having count ( * ) > 1"
    },
    {
        "question": "What is the oldest age among the students ?",
        "db_id": "voter_2",
        "gold_parse": "SELECT max(Age) FROM STUDENT",
        "predicted_parse_with_values": "select Age from Student order by Age desc limit 1"
    },
    {
        "question": "Retrieve the title of the paper that has the largest number of authors .",
        "db_id": "icfp_1",
        "gold_parse": "SELECT t2.title FROM authorship AS t1 JOIN papers AS t2 ON t1.paperid  =  t2.paperid WHERE t1.authorder  =  (SELECT max(authorder) FROM authorship)",
        "predicted_parse_with_values": "select title , paperID from Papers group by paperID order by count ( * ) desc limit 1"
    },
    {
        "question": "where is the smallest city",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM city WHERE population  =  ( SELECT MIN ( population ) FROM city )",
        "predicted_parse_with_values": "select city_name from city order by population limit 1"
    },
    {
        "question": "Find the id of the song that lasts the longest .",
        "db_id": "music_1",
        "gold_parse": "SELECT f_id FROM files ORDER BY duration DESC LIMIT 1",
        "predicted_parse_with_values": "select T1.f_id from song as T1 join files as T2 on T1.f_id = T2.f_id order by T2.duration desc limit 1"
    },
    {
        "question": "List all customers \u2019 names in the alphabetical order .",
        "db_id": "small_bank_1",
        "gold_parse": "SELECT name FROM accounts ORDER BY name",
        "predicted_parse_with_values": "select ( asc ) order by count ) ("
    },
    {
        "question": "List the method , date and amount of all the payments , in ascending order of date .",
        "db_id": "insurance_policies",
        "gold_parse": "SELECT Payment_Method_Code ,  Date_Payment_Made ,  Amount_Payment FROM Payments ORDER BY Date_Payment_Made ASC",
        "predicted_parse_with_values": "select Payment_Method_Code , Date_Payment_Made , Amount_Payment from Payments order by Date_Payment_Made"
    },
    {
        "question": "what is the highest point of the usa",
        "db_id": "geo",
        "gold_parse": "SELECT highest_point FROM highlow WHERE highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow )",
        "predicted_parse_with_values": "select max ( T2.highest_point ) from state as T1 join highlow as T2 on T1.state_name = T2.state_name where T1.country_name = \"dummy value\""
    },
    {
        "question": "Show the name and date for each race and its track name .",
        "db_id": "race_track",
        "gold_parse": "SELECT T1.name ,  T1.date ,  T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id",
        "predicted_parse_with_values": "select Name , Date , Date from race"
    },
    {
        "question": "return me the number of researchers in \" University of Michigan \" .",
        "db_id": "academic",
        "gold_parse": "SELECT COUNT ( DISTINCT t1.name ) FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid WHERE t2.name  =  \"University of Michigan\"",
        "predicted_parse_with_values": "select count ( oid ) from organization where name = \"dummy value\""
    },
    {
        "question": "Which store owns most items ?",
        "db_id": "sakila_1",
        "gold_parse": "SELECT store_id FROM inventory GROUP BY store_id ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select store_id from store group by store_id order by count ( * ) desc limit 1"
    },
    {
        "question": "what are the capital cities of the states which border texas",
        "db_id": "geo",
        "gold_parse": "SELECT t2.capital FROM state AS t2 JOIN border_info AS t1 ON t2.state_name  =  t1.border WHERE t1.state_name  =  \"texas\"",
        "predicted_parse_with_values": "select T2.capital from border_info as T1 join state as T2 on T1.border = T2.state_name where T1.border = \"dummy value\""
    },
    {
        "question": "Find the number of distinct amenities .",
        "db_id": "dorm_1",
        "gold_parse": "SELECT count(*) FROM dorm_amenity",
        "predicted_parse_with_values": "select count ( amenity_name ) from Dorm_amenity"
    },
    {
        "question": "which state has the lowest point that borders idaho",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM highlow WHERE lowest_elevation  =  ( SELECT MIN ( lowest_elevation ) FROM highlow WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"idaho\" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"idaho\" )",
        "predicted_parse_with_values": "select T1.state_name from border_info as T1 join state as T2 on T1.border = T2.state_name join highlow as T3 on T2.state_name = T3.state_name where T1.border != \"dummy value\" order by T3.lowest_point limit 1"
    },
    {
        "question": "return me the number of papers by \" H. V. Jagadish \" after 2000 .",
        "db_id": "academic",
        "gold_parse": "SELECT COUNT ( DISTINCT t3.title ) FROM writes AS t2 JOIN author AS t1 ON t2.aid  =  t1.aid JOIN publication AS t3 ON t2.pid  =  t3.pid WHERE t1.name  =  \"H. V. Jagadish\" AND t3.year  >  2000",
        "predicted_parse_with_values": "select count ( * ) from publication as T1 join writes as T2 on T1.pid = T2.pid join author as T3 on T2.aid = T3.aid where T3.name = \"dummy value\" and T1.year > \"dummy value\""
    },
    {
        "question": "what state has no rivers",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM state WHERE state_name NOT IN ( SELECT traverse FROM river )",
        "predicted_parse_with_values": "select state_name from state except select state_name from lake"
    },
    {
        "question": "What are the names of banks that have loaned money to customers with credit scores below 100 ?",
        "db_id": "loan_1",
        "gold_parse": "SELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id  =  T2.branch_id JOIN customer AS T3 ON T1.cust_id  =  T3.cust_id WHERE T3.credit_score  <  100",
        "predicted_parse_with_values": "select cust_name from customer where credit_score < 210"
    },
    {
        "question": "What are the first and last names of the first-grade students who are NOT taught by teacher OTHA MOYER ?",
        "db_id": "student_1",
        "gold_parse": "SELECT DISTINCT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.grade  =  1 EXCEPT SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"OTHA\" AND T2.lastname  =  \"MOYER\"",
        "predicted_parse_with_values": "select FirstName , LastName from list except select T2.FirstName , T1.LastName from teachers as T1 join list as T2 where T1.FirstName = \" KIRK\""
    },
    {
        "question": "What are the ids , names , and FDA approval status for medicines ordered by descending number of possible enzyme interactions ?",
        "db_id": "medicine_enzyme_interaction",
        "gold_parse": "SELECT T1.id ,  T1.Name ,  T1.FDA_approved FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id ORDER BY count(*) DESC",
        "predicted_parse_with_values": "select id , name , FDA_approved from medicine order by FDA_approved , FDA_approved"
    },
    {
        "question": "How many students who are female are allergic to milk or eggs ?",
        "db_id": "allergy_1",
        "gold_parse": "SELECT count(*) FROM has_allergy AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.sex  =  \"F\" AND T1.allergy  =  \"Milk\" OR T1.allergy  =  \"Eggs\"",
        "predicted_parse_with_values": "select count ( * ) from Student where Sex = \"M\" and Sex = \"F\""
    },
    {
        "question": "How many students whose are playing the role of goalie ?",
        "db_id": "soccer_2",
        "gold_parse": "SELECT count(*) FROM tryout WHERE pPos  =  'goalie'",
        "predicted_parse_with_values": "select count ( T2.enr ) from Tryout as T1 join College as T2 on T1.cName = T2.cName where T1.pPos = \"mid\""
    },
    {
        "question": "what is the state that contains the highest point",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM highlow WHERE highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow )",
        "predicted_parse_with_values": "select T1.state_name from mountain as T1 join state as T2 on T1.state_name = T2.state_name join highlow as T3 on T2.state_name = T3.state_name order by T3.highest_point desc limit 1"
    },
    {
        "question": "which river goes through the most states",
        "db_id": "geo",
        "gold_parse": "SELECT river_name FROM river GROUP BY ( river_name ) ORDER BY COUNT ( DISTINCT traverse ) DESC LIMIT 1",
        "predicted_parse_with_values": "select river_name from river group by river_name order by count ( * ) desc limit 1"
    },
    {
        "question": "what is the population of the capital of the smallest state",
        "db_id": "geo",
        "gold_parse": "SELECT population FROM city WHERE city_name  =  ( SELECT capital FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state ) )",
        "predicted_parse_with_values": "select population from state order by density limit 1"
    },
    {
        "question": "what are the rivers of illinois",
        "db_id": "geo",
        "gold_parse": "SELECT river_name FROM river WHERE traverse  =  \"illinois\"",
        "predicted_parse_with_values": "select T1.river_name from river as T1 join state as T2 on T1.traverse = T2.state_name where T2.state_name = \"dummy value\""
    },
    {
        "question": "which state is the smallest",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state )",
        "predicted_parse_with_values": "select state_name from state order by density asc limit 1"
    },
    {
        "question": "what state has the lowest population density",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM state WHERE density  =  ( SELECT MIN ( density ) FROM state )",
        "predicted_parse_with_values": "select state_name from state order by density asc limit 1"
    },
    {
        "question": "Find all movies featuring both \" Woody Strode \" and \" Jason Robards \"",
        "db_id": "imdb",
        "gold_parse": "SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid  =  t1.aid JOIN movie AS t4 ON t4.mid  =  t5.msid JOIN CAST AS t3 ON t4.mid  =  t3.msid JOIN actor AS t2 ON t3.aid  =  t2.aid WHERE t1.name  =  \"Woody Strode\" AND t2.name  =  \"Jason Robards\"",
        "predicted_parse_with_values": "select T2.title from actor as T1 join movie as T2 where T1.name = \"dummy value\" intersect select T4.title from actor as T3 join movie as T4 where T3.name = \"dummy value\""
    },
    {
        "question": "show the lowest low temperature and highest wind speed in miles per hour .",
        "db_id": "station_weather",
        "gold_parse": "SELECT min(low_temperature) ,  max(wind_speed_mph) FROM weekly_weather",
        "predicted_parse_with_values": "select max ( wind_speed_mph ) , max ( wind_speed_mph ) from weekly_weather"
    },
    {
        "question": "What is the date , average temperature and mean humidity for the days with the 3 largest maximum gust speeds ?",
        "db_id": "bike_1",
        "gold_parse": "SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3",
        "predicted_parse_with_values": "select date , avg ( mean_humidity ) , avg ( mean_humidity ) from weather group by mean_dew_point_f order by mean_humidity desc limit 1"
    },
    {
        "question": "what is the longest river that runs through a state that borders tennessee",
        "db_id": "geo",
        "gold_parse": "SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name  =  \"tennessee\" ) ) AND traverse IN ( SELECT border FROM border_info WHERE state_name  =  \"tennessee\" )",
        "predicted_parse_with_values": "select T1.river_name from river as T1 join state as T2 on T1.traverse = T2.state_name join border_info as T3 on T2.state_name = T3.border where T3.border = \"dummy value\" order by T1.length desc limit 1"
    },
    {
        "question": "what are the cities of the state with the highest point",
        "db_id": "geo",
        "gold_parse": "SELECT city_name FROM city WHERE state_name IN ( SELECT state_name FROM highlow WHERE highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow ) )",
        "predicted_parse_with_values": "select T1.city_name from city as T1 join state as T2 on T1.state_name = T2.state_name join highlow as T3 on T2.state_name = T3.state_name order by T3.highest_point desc limit 1"
    },
    {
        "question": "Find the name of different colleges involved in the tryout in alphabetical order .",
        "db_id": "soccer_2",
        "gold_parse": "SELECT DISTINCT cName FROM tryout ORDER BY cName",
        "predicted_parse_with_values": "select T2.cName from Tryout as T1 join College as T2 on T1.cName = T2.cName order by T1.cName"
    },
    {
        "question": "What are the first names of the faculty members playing both Canoeing and Kayaking ?",
        "db_id": "activity_1",
        "gold_parse": "SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' INTERSECT SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Kayaking'",
        "predicted_parse_with_values": "select T3.Fname from Activity as T1 join Faculty_Participates_in as T2 on T1.actid = T2.actid join Faculty as T3 on T2.FacID = T3.FacID where T1.activity_name = \"Accordion Ensemble\" intersect select T6.Fname from Activity as T4 join Faculty_Participates_in as T5 on T4.actid = T5.actid join Faculty as T6 on T5.FacID = T6.FacID where T4.activity_name = \"Kayaking\""
    },
    {
        "question": "what is the capital of the state with the highest elevation",
        "db_id": "geo",
        "gold_parse": "SELECT t1.capital FROM highlow AS t2 JOIN state AS t1 ON t1.state_name  =  t2.state_name WHERE t2.highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow )",
        "predicted_parse_with_values": "select T1.capital from state as T1 join highlow as T2 on T1.state_name = T2.state_name order by T2.highest_elevation desc limit 1"
    },
    {
        "question": "What are the last names of the teachers who teach the student called GELL TAMI ?",
        "db_id": "student_1",
        "gold_parse": "SELECT T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"GELL\" AND T1.lastname  =  \"TAMI\"",
        "predicted_parse_with_values": "select LastName from teachers where FirstName = \" OTHA\""
    },
    {
        "question": "What are the names of the different banks that have provided loans ?",
        "db_id": "loan_1",
        "gold_parse": "SELECT DISTINCT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id",
        "predicted_parse_with_values": "select cust_name from customer"
    },
    {
        "question": "How many products are not made by Sony ?",
        "db_id": "manufactory_1",
        "gold_parse": "SELECT count(DISTINCT name) FROM products WHERE name NOT IN (SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Sony')",
        "predicted_parse_with_values": "select count ( * ) from Manufacturers as T1 join Products as T2 on T1.Code = T2.Manufacturer where T1.Name != \"Fujitsu\""
    },
    {
        "question": "return me the number of papers published in the VLDB conference in each year .",
        "db_id": "academic",
        "gold_parse": "SELECT COUNT ( DISTINCT t2.title )  ,  t2.year FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" GROUP BY t2.year",
        "predicted_parse_with_values": "select count ( * ) , T2.year from conference as T1 join publication as T2 on T1.cid = T2.cid where T1.name = \"dummy value\" group by T2.year"
    },
    {
        "question": "What is the total horses record for each farm , sorted ascending ?",
        "db_id": "farm",
        "gold_parse": "SELECT Total_Horses FROM farm ORDER BY Total_Horses ASC",
        "predicted_parse_with_values": "select sum ( Total_Horses ) , Farm_ID from farm group by Farm_ID order by count ( * ) asc"
    },
    {
        "question": "How many products have the characteristic named \" hot \" ?",
        "db_id": "products_gen_characteristics",
        "gold_parse": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t3.characteristic_name  =  \"hot\"",
        "predicted_parse_with_values": "select count ( * ) from Characteristics as T1 join Product_Characteristics as T2 on T1.characteristic_id = T2.characteristic_id join Products as T3 on T2.product_id = T3.product_id where T1.characteristic_name = \"cool\""
    },
    {
        "question": "What are the first names of all students who took ACCT-211 and received a C ?",
        "db_id": "college_1",
        "gold_parse": "SELECT T3.stu_fname FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T2.stu_num  =  T3.stu_num WHERE T1.crs_code  =  'ACCT-211' AND T2.enroll_grade  =  'C'",
        "predicted_parse_with_values": "select T1.STU_FNAME from STUDENT as T1 join DEPARTMENT as T2 on T1.DEPT_CODE = T2.DEPT_CODE join COURSE as T3 on T2.DEPT_CODE = T3.DEPT_CODE where T1.STU_HRS = 66 and T3.DEPT_CODE = \"CIS\""
    },
    {
        "question": "What are the names of the branches that have some members with a hometown in Louisville , Kentucky and also those from Hiram , Goergia ?",
        "db_id": "shop_membership",
        "gold_parse": "SELECT T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id JOIN member AS T3 ON T1.member_id  =  T3.member_id WHERE T3.Hometown  =  'Louisville ,  Kentucky' INTERSECT SELECT T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id JOIN member AS T3 ON T1.member_id  =  T3.member_id WHERE T3.Hometown  =  'Hiram ,  Georgia'",
        "predicted_parse_with_values": "select T1.Name from branch as T1 join purchase as T2 on T1.Branch_ID = T2.Branch_ID join member as T3 on T2.Member_ID = T3.Member_ID where T1.City = \"Oxford\" and T3.Hometown = \"Simpsonville , South Carolina\" intersect select T4.Name from branch as T4 join purchase as T5 on T4.Branch_ID = T5.Branch_ID join member as T6 on T5.Member_ID = T6.Member_ID where T6.Hometown = \"Louisville , Kentucky\""
    },
    {
        "question": "How many courses are offered ?",
        "db_id": "college_1",
        "gold_parse": "SELECT count(DISTINCT crs_code) FROM CLASS",
        "predicted_parse_with_values": "select count ( * ) from COURSE"
    },
    {
        "question": "Return the the \" active to date \" of the latest contact channel used by the customer named \" Tillman Ernser \" .",
        "db_id": "customers_and_addresses",
        "gold_parse": "SELECT max(t2.active_to_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Tillman Ernser\"",
        "predicted_parse_with_values": "select T1.active_to_date from Customer_Contact_Channels as T1 join Customers as T2 on T1.customer_id = T2.customer_id where T2.customer_name = \"Dr. Julia Wuckert MD\" order by T1.active_to_date desc limit 1"
    },
    {
        "question": "what is the height of the highest mountain in texas",
        "db_id": "geo",
        "gold_parse": "SELECT MAX ( DISTINCT highest_elevation ) FROM highlow WHERE state_name  =  \"texas\"",
        "predicted_parse_with_values": "select T1.mountain_altitude from mountain as T1 join state as T2 on T1.state_name = T2.state_name join highlow as T3 on T2.state_name = T3.state_name where T1.state_name = \"dummy value\" order by T3.highest_elevation desc limit 1"
    },
    {
        "question": "Find the first and last name of students who are not in the largest major .",
        "db_id": "dorm_1",
        "gold_parse": "SELECT fname ,  lname FROM student WHERE major != (SELECT major FROM student GROUP BY major ORDER BY count(*) DESC LIMIT 1)",
        "predicted_parse_with_values": "select Fname , LName from Student where Major != ( select StuID from Student order by Major desc limit 1 )"
    },
    {
        "question": "Show the enrollment and primary_conference of the oldest college .",
        "db_id": "university_basketball",
        "gold_parse": "SELECT enrollment ,  primary_conference FROM university ORDER BY founded LIMIT 1",
        "predicted_parse_with_values": "select Enrollment , Primary_conference from university order by Founded desc limit 1"
    },
    {
        "question": "For each manufacturer name , what are the names and prices of their most expensive product ?",
        "db_id": "manufactory_1",
        "gold_parse": "SELECT T1.Name ,  max(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name",
        "predicted_parse_with_values": "select T1.Name , T2.Price from Manufacturers as T1 join Products as T2 on T1.Code = T2.Manufacturer order by T2.Price desc limit 1"
    },
    {
        "question": "Show the album names , ids and the number of tracks for each album .",
        "db_id": "chinook_1",
        "gold_parse": "SELECT T1.Title ,  T2.AlbumID ,  COUNT(*) FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId GROUP BY T2.AlbumID",
        "predicted_parse_with_values": "select T1.Title , T1.AlbumId , count ( * ) from Album as T1 join Track as T2 on T1.AlbumId = T2.AlbumId group by T2.AlbumId"
    },
    {
        "question": "what major rivers run through illinois",
        "db_id": "geo",
        "gold_parse": "SELECT river_name FROM river WHERE LENGTH  >  750 AND traverse  =  \"illinois\"",
        "predicted_parse_with_values": "select T1.river_name from river as T1 join state as T2 on T1.traverse = T2.state_name where T2.area = \"dummy value\""
    },
    {
        "question": "What is the total revenue of companies started by founder ?",
        "db_id": "manufactory_1",
        "gold_parse": "SELECT sum(revenue) ,  founder FROM manufacturers GROUP BY founder",
        "predicted_parse_with_values": "select sum ( Revenue ) from Manufacturers"
    },
    {
        "question": "What are the names and revenues of the companies with the highest revenues in each headquarter city ?",
        "db_id": "manufactory_1",
        "gold_parse": "SELECT name ,  max(revenue) ,  Headquarter FROM manufacturers GROUP BY Headquarter",
        "predicted_parse_with_values": "select Name , Headquarter , Revenue from Manufacturers order by Headquarter desc limit 1"
    },
    {
        "question": "What are the room name and base price of the room with the lowest base price ?",
        "db_id": "inn_1",
        "gold_parse": "SELECT roomName ,  basePrice FROM Rooms ORDER BY basePrice ASC LIMIT 1",
        "predicted_parse_with_values": "select roomName , basePrice from Rooms order by basePrice limit 1"
    },
    {
        "question": "which states border the state with the smallest area",
        "db_id": "geo",
        "gold_parse": "SELECT border FROM border_info WHERE state_name  =  ( SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state ) )",
        "predicted_parse_with_values": "select T1.border from border_info as T1 join state as T2 on T1.border = T2.state_name order by T2.area asc limit 1"
    },
    {
        "question": "What are the themes of competitions that have corresponding host cities with more than 1000 residents ?",
        "db_id": "farm",
        "gold_parse": "SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID WHERE T1.Population  >  1000",
        "predicted_parse_with_values": "select T1.Theme from farm_competition as T1 join city as T2 on T1.Host_city_ID = T2.City_ID where T2.Population > 351.0"
    },
    {
        "question": "What are the codes and names for all regions , sorted by codes ?",
        "db_id": "storm_record",
        "gold_parse": "SELECT region_code ,  region_name FROM region ORDER BY region_code",
        "predicted_parse_with_values": "select Region_code , Region_name from region order by Region_name"
    },
    {
        "question": "How many faculty members participate in each activity ? Return the activity names and the number of faculty members .",
        "db_id": "activity_1",
        "gold_parse": "SELECT T1.activity_name ,  count(*) FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID",
        "predicted_parse_with_values": "select activity_name , count ( * ) from Activity group by activity_name"
    },
    {
        "question": "Show different ways to get to attractions and the number of attractions that can be accessed in the corresponding way .",
        "db_id": "cre_Theme_park",
        "gold_parse": "SELECT How_to_Get_There ,  COUNT(*) FROM Tourist_Attractions GROUP BY How_to_Get_There",
        "predicted_parse_with_values": "select count ( * ) , How_to_Get_There from Tourist_Attractions group by How_to_Get_There"
    },
    {
        "question": "What is the name of the artist , for each language , that has the most songs with a higher resolution than 500 ?",
        "db_id": "music_1",
        "gold_parse": "SELECT artist_name FROM song WHERE resolution  >  500 GROUP BY languages ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select T2.artist_name , T1.languages from song as T1 join artist as T2 on T1.artist_name = T2.artist_name where T1.resolution > 320 group by T1.languages order by count ( * ) desc limit 1"
    },
    {
        "question": "how many rivers are in the state with the largest population",
        "db_id": "geo",
        "gold_parse": "SELECT COUNT ( t2.river_name ) FROM river AS t2 JOIN state AS t1 ON t1.state_name  =  t2.traverse WHERE t1.state_name  =  ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state ) )",
        "predicted_parse_with_values": "select count ( * ) from river as T1 join state as T2 on T1.traverse = T2.state_name where T2.population = ( select max ( population ) from state )"
    },
    {
        "question": "What are the shortest duration and lowest rating of songs grouped by genre and ordered by genre ?",
        "db_id": "music_1",
        "gold_parse": "SELECT min(T1.duration) ,  min(T2.rating) ,  T2.genre_is FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id GROUP BY T2.genre_is ORDER BY T2.genre_is",
        "predicted_parse_with_values": "select max ( T1.rating ) , min ( T1.rating ) , T2.g_name from song as T1 join genre as T2 on T1.genre_is = T2.g_name group by T2.g_name order by T2.rating"
    },
    {
        "question": "What are the ids of all students who played video games and sports ?",
        "db_id": "game_1",
        "gold_parse": "SELECT StuID FROM Sportsinfo INTERSECT SELECT StuID FROM Plays_games",
        "predicted_parse_with_values": "select StuID from Plays_Games intersect select StuID from Plays_Games"
    },
    {
        "question": "Find the numbers of different majors and cities .",
        "db_id": "dorm_1",
        "gold_parse": "SELECT count(DISTINCT major) ,  count(DISTINCT city_code) FROM student",
        "predicted_parse_with_values": "select count ( * ) , T1.Major from Student as T1 join Lives_in as T2 on T1.StuID = T2.stuid group by T1.Major"
    },
    {
        "question": "which river runs through the most states",
        "db_id": "geo",
        "gold_parse": "SELECT river_name FROM river GROUP BY ( river_name ) ORDER BY COUNT ( DISTINCT traverse ) DESC LIMIT 1",
        "predicted_parse_with_values": "select river_name from river group by river_name order by count ( * ) desc limit 1"
    },
    {
        "question": "What are the first and last name of all biology professors ?",
        "db_id": "college_1",
        "gold_parse": "SELECT T3.EMP_FNAME ,  T3.EMP_LNAME FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code JOIN employee AS T3 ON T1.EMP_NUM  =  T3.EMP_NUM WHERE DEPT_NAME  =  \"Biology\"",
        "predicted_parse_with_values": "select T2.DEPT_CODE , T1.EMP_LNAME from EMPLOYEE as T1 join PROFESSOR as T2 on T1.EMP_NUM = T2.EMP_NUM where T2.PROF_OFFICE = \"DRE 156\""
    },
    {
        "question": "How many debit cards do we have ?",
        "db_id": "customers_card_transactions",
        "gold_parse": "SELECT count(*) FROM Customers_cards WHERE card_type_code  =  \"Debit\"",
        "predicted_parse_with_values": "select count ( * ) from Customers_Cards"
    },
    {
        "question": "Count the number of customers who are active .",
        "db_id": "sakila_1",
        "gold_parse": "SELECT count(*) FROM customer WHERE active = '1'",
        "predicted_parse_with_values": "select count ( * ) from customer"
    },
    {
        "question": "What are the start station 's name and id for the one that had the most start trips in August ?",
        "db_id": "bike_1",
        "gold_parse": "SELECT start_station_name ,  start_station_id FROM trip WHERE start_date LIKE \"8/%\" GROUP BY start_station_name ORDER BY COUNT(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select T1.start_station_name , T1.start_station_id from trip as T1 join weather as T2 where T2.mean_temperature_f = ( select start_station_name from trip group by start_station_id order by count ( * ) desc limit 1 )"
    },
    {
        "question": "Which bike traveled the most often in zip code 94002 ?",
        "db_id": "bike_1",
        "gold_parse": "SELECT bike_id FROM trip WHERE zip_code  =  94002 GROUP BY bike_id ORDER BY COUNT(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select bike_id from trip where zip_code = 94158 group by bike_id order by count ( * ) desc limit 1"
    },
    {
        "question": "Find the branch name of the bank that has the most number of customers .",
        "db_id": "loan_1",
        "gold_parse": "SELECT bname FROM bank ORDER BY no_of_customers DESC LIMIT 1",
        "predicted_parse_with_values": "select bname from bank where no_of_customers = ( select max ( no_of_customers ) from bank )"
    },
    {
        "question": "Which students live in the city with code \" NYC \" and have class senator votes in the spring election cycle ? Count the numbers .",
        "db_id": "voter_2",
        "gold_parse": "SELECT count(*) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  Class_Senator_Vote WHERE T1.city_code  =  \"NYC\" AND T2.Election_Cycle  =  \"Spring\"",
        "predicted_parse_with_values": "select count ( * ) from Voting_record as T1 join Student as T2 on T1.Class_Senator_Vote = T2.StuID where T2.city_code = \"BOS\" and T1.Class_Senator_Vote = 1018"
    },
    {
        "question": "How many branches where have more than average number of memberships are there ?",
        "db_id": "shop_membership",
        "gold_parse": "SELECT count(*) FROM branch WHERE membership_amount  >  (SELECT avg(membership_amount) FROM branch)",
        "predicted_parse_with_values": "select count ( * ) from membership_register_branch as T1 join branch as T2 on T1.Branch_ID = T2.Branch_ID where T2.membership_amount > ( select avg ( membership_amount ) from branch )"
    },
    {
        "question": "what are the population densities of each us state",
        "db_id": "geo",
        "gold_parse": "SELECT density FROM state",
        "predicted_parse_with_values": "select population , state_name from state where country_name = \"dummy value\""
    },
    {
        "question": "Select all the data from the products and each product 's manufacturer .",
        "db_id": "manufactory_1",
        "gold_parse": "SELECT * FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code",
        "predicted_parse_with_values": "select Name , Manufacturer from Products"
    },
    {
        "question": "what is the largest state in usa",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state )",
        "predicted_parse_with_values": "select state_name from state where country_name = \"dummy value\" order by density desc limit 1"
    },
    {
        "question": "How many regions were affected by each storm ?",
        "db_id": "storm_record",
        "gold_parse": "SELECT T1.name ,  count(*) FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id",
        "predicted_parse_with_values": "select count ( * ) , Name from storm group by Storm_ID"
    },
    {
        "question": "What is ids of the songs whose resolution is higher than the resolution of any songs with rating lower than 8 ?",
        "db_id": "music_1",
        "gold_parse": "SELECT f_id FROM song WHERE resolution  >  (SELECT max(resolution) FROM song WHERE rating  <  8)",
        "predicted_parse_with_values": "select f_id from song where resolution > ( select min ( resolution ) from song where rating < 7 )"
    },
    {
        "question": "Who are the ministers , when did they take office , and when did they leave office , ordered by when they left office ?",
        "db_id": "party_people",
        "gold_parse": "SELECT minister ,  took_office ,  left_office FROM party ORDER BY left_office",
        "predicted_parse_with_values": "select T1.Minister , T2.In_office from party as T1 join member as T2 on T1.Party_ID = T2.Party_ID order by T1.Took_office"
    },
    {
        "question": "which rivers are in illinois",
        "db_id": "geo",
        "gold_parse": "SELECT river_name FROM river WHERE traverse  =  \"illinois\"",
        "predicted_parse_with_values": "select T1.river_name from river as T1 join state as T2 on T1.traverse = T2.state_name where T2.area = \"dummy value\""
    },
    {
        "question": "What is the total salary paid by team Boston Red Stockings in 2010 ?",
        "db_id": "baseball_1",
        "gold_parse": "SELECT sum(T1.salary) FROM salary AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  = 'Boston Red Stockings' AND T1.year  =  2010",
        "predicted_parse_with_values": "select sum ( T1.salary ) from salary as T1 join team as T2 where T1.team_id = \"OAK\" and T2.year = 1897"
    },
    {
        "question": "list the name , job title of all people ordered by their names .",
        "db_id": "network_2",
        "gold_parse": "SELECT name ,  job FROM Person ORDER BY name",
        "predicted_parse_with_values": "select T2.name , T2.job from PersonFriend as T1 join Person as T2 on T1.friend = T2.name order by T1.name"
    },
    {
        "question": "what state has the city with the largest population",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city )",
        "predicted_parse_with_values": "select state_name from city order by population desc limit 1"
    },
    {
        "question": "What are the first names of all teachers who have taught a course and the corresponding course codes ?",
        "db_id": "college_1",
        "gold_parse": "SELECT T2.emp_fname ,  T1.crs_code FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num",
        "predicted_parse_with_values": "select T1.EMP_FNAME , T3.CRS_CODE from EMPLOYEE as T1 join DEPARTMENT as T2 on T1.EMP_NUM = T2.EMP_NUM join COURSE as T3 on T2.DEPT_CODE = T3.DEPT_CODE where T1.EMP_JOBCODE = \"CLRK\""
    },
    {
        "question": "What are the names of storms that did not affect two or more regions ?",
        "db_id": "storm_record",
        "gold_parse": "SELECT name FROM storm EXCEPT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING count(*)  >=  2",
        "predicted_parse_with_values": "select Name from storm group by Name having count ( * ) >= 1"
    },
    {
        "question": "What are the names of the customers and staff members ?",
        "db_id": "insurance_and_eClaims",
        "gold_parse": "SELECT customer_details FROM customers UNION SELECT staff_details FROM staff",
        "predicted_parse_with_values": "select T1.Customer_Details , T5.Staff_Details from Customers as T1 join Policies as T2 on T1.Customer_ID = T2.Customer_ID join Claim_Headers as T3 on T2.Policy_ID = T3.Policy_ID join Claims_Processing as T4 on T3.Claim_Header_ID = T4.Claim_ID join Staff as T5 on T4.Staff_ID = T5.Staff_ID"
    },
    {
        "question": "What is the minimum , maximum , and average market value for every company ?",
        "db_id": "gas_company",
        "gold_parse": "SELECT min(market_value) ,  max(market_value) ,  avg(market_value) FROM company",
        "predicted_parse_with_values": "select min ( Market_Value ) , max ( Market_Value ) , avg ( Market_Value ) , Rank from company group by Rank"
    },
    {
        "question": "How many songs have a shared vocal ?",
        "db_id": "music_2",
        "gold_parse": "SELECT count(DISTINCT title) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE TYPE  =  \"shared\"",
        "predicted_parse_with_values": "select count ( * ) from Songs"
    },
    {
        "question": "Return the detail of the location named \" UK Gallery \" .",
        "db_id": "cre_Theme_park",
        "gold_parse": "SELECT Other_Details FROM LOCATIONS WHERE Location_Name  =  \"UK Gallery\"",
        "predicted_parse_with_values": "select T3.Theme_Park_Details from Locations as T1 join Tourist_Attractions as T2 on T1.Location_ID = T2.Location_ID join Theme_Parks as T3 on T2.Tourist_Attraction_ID = T3.Theme_Park_ID where T1.Location_Name = \"American Adventure\""
    },
    {
        "question": "What are the ids of the stations in San Francisco that normally have more than 10 bikes available ?",
        "db_id": "bike_1",
        "gold_parse": "SELECT id FROM station WHERE city  =  \"San Francisco\" INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING avg(bikes_available)  >  10",
        "predicted_parse_with_values": "select T1.id from station as T1 join status as T2 on T1.id = T2.station_id where T1.city = \"Palo Alto\" and T2.bikes_available > 0"
    },
    {
        "question": "Find the number of vocal types used in song \" Le Pop \"",
        "db_id": "music_2",
        "gold_parse": "SELECT count(*) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Le Pop\"",
        "predicted_parse_with_values": "select count ( * ) from Vocals as T1 join Songs as T2 on T1.SongId = T2.SongId where T2.Title = \"dummy value\""
    },
    {
        "question": "Show the names of phones that have total number of stocks bigger than 2000 , in descending order of the total number of stocks .",
        "db_id": "phone_market",
        "gold_parse": "SELECT T2.Name FROM phone_market AS T1 JOIN phone AS T2 ON T1.Phone_ID  =  T2.Phone_ID GROUP BY T2.Name HAVING sum(T1.Num_of_stock)  >=  2000 ORDER BY sum(T1.Num_of_stock) DESC",
        "predicted_parse_with_values": "select T2.Name from phone_market as T1 join phone as T2 on T1.Phone_ID = T2.Phone_ID where T1.Num_of_stock > 874 order by sum ( T1.Num_of_stock ) desc"
    },
    {
        "question": "Show each student 's first name and last name .",
        "db_id": "student_1",
        "gold_parse": "SELECT DISTINCT firstname ,  lastname FROM list",
        "predicted_parse_with_values": "select FirstName , LastName from list"
    },
    {
        "question": "What is the name of the school with smallest enrollment size per state ?",
        "db_id": "soccer_2",
        "gold_parse": "SELECT cName ,  state ,  min(enr) FROM college GROUP BY state",
        "predicted_parse_with_values": "select cName from College order by enr limit 1"
    },
    {
        "question": "What are the names of the tourist attractions Vincent and Marcelle visit ?",
        "db_id": "cre_Theme_park",
        "gold_parse": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Vincent\" INTERSECT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Marcelle\"",
        "predicted_parse_with_values": "select Name from Tourist_Attractions where Name = \"fun games\""
    },
    {
        "question": "Return the average price of products that have each category code .",
        "db_id": "customer_complaints",
        "gold_parse": "SELECT avg(product_price) ,  product_category_code FROM products GROUP BY product_category_code",
        "predicted_parse_with_values": "select product_category_code , avg ( product_price ) from Products group by product_category_code"
    },
    {
        "question": "List all directors along with the number of films directed by each director .",
        "db_id": "cinema",
        "gold_parse": "SELECT directed_by ,  count(*) FROM film GROUP BY directed_by",
        "predicted_parse_with_values": "select T1.Directed_by , count ( * ) from film as T1 join schedule as T2 on T1.Film_ID = T2.Film_ID join cinema as T3 on T2.Cinema_ID = T3.Cinema_ID group by T1.Directed_by"
    },
    {
        "question": "How many routes end in a Canadian airport ?",
        "db_id": "flight_4",
        "gold_parse": "SELECT count(*) FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE country  =  'Canada'",
        "predicted_parse_with_values": "select count ( * ) from airports as T1 join routes as T2 on T1.apid = T2.src_apid where T1.city = \"Pembroke\""
    },
    {
        "question": "Show ids for all documents with budget types described as 'Government ' .",
        "db_id": "cre_Docs_and_Epenses",
        "gold_parse": "SELECT T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_Budget_Codes AS T2 ON T1.Budget_Type_code  =  T2.Budget_Type_code WHERE T2.budget_type_Description  =  \"Government\"",
        "predicted_parse_with_values": "select T3.Document_ID from Ref_Budget_Codes as T1 join Documents_with_Expenses as T2 on T1.Budget_Type_Code = T2.Budget_Type_Code join Documents as T3 on T2.Document_ID = T3.Document_ID where T1.Budget_Type_Description = \"Organisation\""
    },
    {
        "question": "For each end station id , what is its name , latitude , and minimum duration for trips ended there ?",
        "db_id": "bike_1",
        "gold_parse": "SELECT T1.name ,  T1.lat ,  min(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.end_station_id GROUP BY T2.end_station_id",
        "predicted_parse_with_values": "select T1.name , T1.lat , T2.duration , min ( T2.duration ) from station as T1 join trip as T2 group by T2.end_station_id"
    },
    {
        "question": "what is the largest city in states that border california",
        "db_id": "geo",
        "gold_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"california\" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"california\" )",
        "predicted_parse_with_values": "select T3.city_name from border_info as T1 join state as T2 on T1.border = T2.state_name join city as T3 on T2.state_name = T3.state_name where T1.border = \"dummy value\" order by T2.density desc limit 1"
    },
    {
        "question": "Find the number of distinct gender for dorms .",
        "db_id": "dorm_1",
        "gold_parse": "SELECT count(DISTINCT gender) FROM dorm",
        "predicted_parse_with_values": "select count ( gender ) , gender from Dorm group by gender"
    },
    {
        "question": "what is the major cities in kansas",
        "db_id": "geo",
        "gold_parse": "SELECT city_name FROM city WHERE population  >  150000 AND state_name  =  \"kansas\"",
        "predicted_parse_with_values": "select city_name from city where state_name = \"dummy value\""
    },
    {
        "question": "Find the names of customers whose name contains \" Diana \" .",
        "db_id": "insurance_and_eClaims",
        "gold_parse": "SELECT customer_details FROM customers WHERE customer_details LIKE \"%Diana%\"",
        "predicted_parse_with_values": "select ( Customer_ID ) from Customers where Customer_ID like 520"
    },
    {
        "question": "Show the names of countries and the average speed of roller coasters from each country .",
        "db_id": "roller_coaster",
        "gold_parse": "SELECT T1.Name ,  avg(T2.Speed) FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID GROUP BY T1.Name",
        "predicted_parse_with_values": "select T1.Name , avg ( T2.Speed ) from country as T1 join roller_coaster as T2 on T1.Country_ID = T2.Country_ID group by T1.Country_ID"
    },
    {
        "question": "What instruments did the musician with the last name \" Heilo \" play in the song \" Le Pop \" ?",
        "db_id": "music_2",
        "gold_parse": "SELECT T4.instrument FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId JOIN Instruments AS T4 ON T4.songid  =  T3.songid AND T4.bandmateid  =  T2.id WHERE T2.lastname  =  \"Heilo\" AND T3.title  =  \"Le Pop\"",
        "predicted_parse_with_values": "select T4.Instrument from Band as T1 join Vocals as T2 on T1.Id = T2.Bandmate join Songs as T3 on T2.SongId = T3.SongId join Instruments as T4 on T1.Id = T4.BandmateId where T3.Title = \"dummy value\" and T1.Lastname = \"dummy value\""
    },
    {
        "question": "Which allergy type has least number of allergies ?",
        "db_id": "allergy_1",
        "gold_parse": "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC LIMIT 1",
        "predicted_parse_with_values": "select Allergytype from Allergy_Type group by Allergytype order by count ( * ) limit 1"
    },
    {
        "question": "return me the total citations of papers in the VLDB conference in 2005 .",
        "db_id": "academic",
        "gold_parse": "SELECT SUM ( t2.citation_num ) FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" AND t2.year  =  2005",
        "predicted_parse_with_values": "select sum ( T2.jid ) from conference as T1 join publication as T2 on T1.cid = T2.cid where T1.name = \"dummy value\" and T2.year = \"dummy value\""
    },
    {
        "question": "Show the name of aircrafts with top three lowest distances .",
        "db_id": "flight_1",
        "gold_parse": "SELECT name FROM Aircraft ORDER BY distance LIMIT 3",
        "predicted_parse_with_values": "select name from aircraft order by distance desc limit 1"
    },
    {
        "question": "Find the name and component amount of the least popular furniture .",
        "db_id": "manufacturer",
        "gold_parse": "SELECT name ,  Num_of_Component FROM furniture ORDER BY market_rate LIMIT 1",
        "predicted_parse_with_values": "select Name , Num_of_Component from furniture group by Num_of_Component order by count ( * ) asc limit 1"
    },
    {
        "question": "Give me a list of cities whose temperature in Mar is lower than that in Dec and which have never been host cities .",
        "db_id": "city_record",
        "gold_parse": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Dec EXCEPT SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city",
        "predicted_parse_with_values": "select T2.City from temperature as T1 join city as T2 on T1.City_ID = T2.City_ID where T1.Dec < ( select min ( Dec ) from temperature where Mar = 27.8 and Nov = 21.7 )"
    },
    {
        "question": "Show storm name with at least two regions and 10 cities affected .",
        "db_id": "storm_record",
        "gold_parse": "SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING count(*)  >=  2 INTERSECT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING sum(T2.number_city_affected)  >=  10",
        "predicted_parse_with_values": "select T3.Name , T1.Number_city_affected from affected_region as T1 join region as T2 on T1.Region_id = T2.Region_id join storm as T3 on T1.Storm_ID = T3.Storm_ID group by T2.Region_name having count ( * ) >= 1"
    },
    {
        "question": "What is the role of the employee named Koby ?",
        "db_id": "cre_Doc_Control_Systems",
        "gold_parse": "SELECT T1.role_description FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code WHERE T2.employee_name = \"Koby\"",
        "predicted_parse_with_values": "select role_code from Employees where employee_name = \"Koby\""
    },
    {
        "question": "Give me the maximum low temperature and average precipitation at the Amersham station .",
        "db_id": "station_weather",
        "gold_parse": "SELECT max(t1.low_temperature) ,  avg(t1.precipitation) FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id  =  t2.id WHERE t2.network_name  =  \"Amersham\"",
        "predicted_parse_with_values": "select max ( T2.precipitation ) , avg ( T2.precipitation ) from station as T1 join weekly_weather as T2 on T1.id = T2.station_id where T1.network_name = \"Chesham\""
    },
    {
        "question": "List all the salary values players received in 2010 and 2001 .",
        "db_id": "baseball_1",
        "gold_parse": "SELECT salary FROM salary WHERE YEAR  =  2010 UNION SELECT salary FROM salary WHERE YEAR  =  2001",
        "predicted_parse_with_values": "select salary from salary where year = 1994 intersect select salary from salary where year = 1988"
    },
    {
        "question": "Who acted \" Alan Turing \" in the movie \" The Imitation Game \" ?",
        "db_id": "imdb",
        "gold_parse": "SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t2.role  =  \"Alan Turing\" AND t3.title  =  \"The Imitation Game\"",
        "predicted_parse_with_values": "select T1.name from actor as T1 join movie as T2 where T2.title = \"dummy value\""
    },
    {
        "question": "How many players born in USA are right-handed batters ? That is , have the batter value ' R ' .",
        "db_id": "baseball_1",
        "gold_parse": "SELECT count(*) FROM player WHERE birth_country = 'USA' AND bats  =  'R'",
        "predicted_parse_with_values": "select count ( player_id ) from player where birth_country = \"Bahamas\""
    },
    {
        "question": "What are the first names of all Accounting professors who teach and what are the classrooms of the courses they teach ?",
        "db_id": "college_1",
        "gold_parse": "SELECT T2.emp_fname ,  T1.class_room FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN professor AS T3 ON T2.emp_num  =  T3.emp_num JOIN department AS T4 ON T4.dept_code  =  T3.dept_code WHERE T4.dept_name  =  'Accounting'",
        "predicted_parse_with_values": "select PROF_OFFICE , PROF_OFFICE from PROFESSOR where PROF_OFFICE = \"KLR 229D\""
    },
    {
        "question": "What is the name and the average gpa of department whose students have the highest average gpa ?",
        "db_id": "college_1",
        "gold_parse": "SELECT T2.dept_name ,  avg(T1.stu_gpa) FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY avg(T1.stu_gpa) DESC LIMIT 1",
        "predicted_parse_with_values": "select T1.DEPT_NAME , avg ( T2.STU_GPA ) from DEPARTMENT as T1 join STUDENT as T2 on T1.DEPT_CODE = T2.DEPT_CODE group by T1.DEPT_NAME order by avg ( T2.STU_GPA ) desc limit 1"
    },
    {
        "question": "Who performed the song named \" Le Pop \" ?",
        "db_id": "music_2",
        "gold_parse": "SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Le Pop\"",
        "predicted_parse_with_values": "select T1.Bandmate from Performance as T1 join Songs as T2 on T1.SongId = T2.SongId where T2.Title = \"dummy value\""
    },
    {
        "question": "Find the average millisecond length of Latin and Pop tracks .",
        "db_id": "chinook_1",
        "gold_parse": "SELECT AVG(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Latin\" OR T1.Name  =  \"Pop\"",
        "predicted_parse_with_values": "select avg ( T2.Milliseconds ) from Genre as T1 join Track as T2 on T1.GenreId = T2.GenreId where T1.Name = \"Drama\" and T2.Name = \"Stone Crazy\""
    },
    {
        "question": "For which countries are there more than four distinct addresses listed ?",
        "db_id": "customers_and_addresses",
        "gold_parse": "SELECT country FROM addresses GROUP BY country HAVING count(address_id)  >  4",
        "predicted_parse_with_values": "select T1.country from Addresses as T1 join Customer_Addresses as T2 on T1.address_id = T2.address_id group by T1.country having count ( Customer_T1.date_address_to ) > 1"
    },
    {
        "question": "what is the highest elevation in the united states",
        "db_id": "geo",
        "gold_parse": "SELECT MAX ( highest_elevation ) FROM highlow",
        "predicted_parse_with_values": "select max ( T3.highest_elevation ) from mountain as T1 join state as T2 on T1.state_name = T2.state_name join highlow as T3 on T2.state_name = T3.state_name where T1.state_name = \"dummy value\" and T1.state_name = \"dummy value\""
    },
    {
        "question": "what are the major cities in the largest state",
        "db_id": "geo",
        "gold_parse": "SELECT city_name FROM city WHERE population  >  150000 AND state_name  =  ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) )",
        "predicted_parse_with_values": "select T1.city_name from city as T1 join state as T2 on T1.state_name = T2.state_name join highlow as T3 on T2.state_name = T3.state_name where T3.highest_elevation = ( select max ( highest_elevation ) from highlow )"
    },
    {
        "question": "Find the name of the teacher who teaches the largest number of students .",
        "db_id": "student_1",
        "gold_parse": "SELECT T2.firstname ,  T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom GROUP BY T2.firstname ,  T2.lastname ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select FirstName from teachers group by LastName order by count ( * ) desc limit 1"
    },
    {
        "question": "What are the zip codes that have an average mean humidity below 70 and had at least 100 trips come through there ?",
        "db_id": "bike_1",
        "gold_parse": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_humidity)  <  70 INTERSECT SELECT zip_code FROM trip GROUP BY zip_code HAVING count(*)  >=  100",
        "predicted_parse_with_values": "select zip_code from weather group by zip_code having avg ( mean_humidity ) >= 1"
    },
    {
        "question": "Return the number of routes with destination airport in Italy operated by the airline with name 'American Airlines ' .",
        "db_id": "flight_4",
        "gold_parse": "SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid JOIN airlines AS T3 ON T1.alid  =  T3.alid WHERE T2.country  =  'Italy' AND T3.name  =  'American Airlines'",
        "predicted_parse_with_values": "select count ( * ) from routes where dst_ap = \"GQ\" and airline = \"3P\""
    },
    {
        "question": "What are the names and ids of stations that had more than 14 bikes available on average or were installed in December ?",
        "db_id": "bike_1",
        "gold_parse": "SELECT T1.name ,  T1.id FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(T2.bikes_available)  >  14 UNION SELECT name ,  id FROM station WHERE installation_date LIKE \"12/%\"",
        "predicted_parse_with_values": "select T1.name , T1.id from station as T1 join status as T2 on T1.id = T2.station_id where T2.bikes_available > 7 union select T3.name , T3.id from station as T3 join status as T4 on T3.id = T4.station_id where T4.bikes_available < 5"
    },
    {
        "question": "How many schools do not participate in the basketball match ?",
        "db_id": "university_basketball",
        "gold_parse": "SELECT count(*) FROM university WHERE school_id NOT IN (SELECT school_id FROM basketball_match)",
        "predicted_parse_with_values": "select count ( * ) from basketball_match where All_Neutral not in ( select School_ID from basketball_match )"
    },
    {
        "question": "return me all the papers in \" University of Michigan \" .",
        "db_id": "academic",
        "gold_parse": "SELECT t4.title FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t3 ON t3.aid  =  t1.aid JOIN publication AS t4 ON t3.pid  =  t4.pid WHERE t2.name  =  \"University of Michigan\"",
        "predicted_parse_with_values": "select name from author where name = \"dummy value\""
    },
    {
        "question": "give me the number of rivers in idaho",
        "db_id": "geo",
        "gold_parse": "SELECT COUNT ( river_name ) FROM river WHERE traverse  =  \"idaho\"",
        "predicted_parse_with_values": "select count ( * ) from river as T1 join state as T2 on T1.traverse = T2.state_name where T2.state_name = \"dummy value\""
    },
    {
        "question": "List the names and birthdays of the top five players in terms of potential .",
        "db_id": "soccer_1",
        "gold_parse": "SELECT DISTINCT T1.player_name ,  T1.birthday FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id  =  T2.player_api_id ORDER BY potential DESC LIMIT 5",
        "predicted_parse_with_values": "select T1.player_name , T1.birthday from Player as T1 join Player_Attributes as T2 on T1.player_api_id = T2.player_api_id order by T2.potential desc limit 1"
    },
    {
        "question": "Find the last names of all the teachers that teach GELL TAMI .",
        "db_id": "student_1",
        "gold_parse": "SELECT T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"GELL\" AND T1.lastname  =  \"TAMI\"",
        "predicted_parse_with_values": "select LastName from teachers where FirstName = \" ALFREDA\""
    },
    {
        "question": "Find the name of airline which runs the most number of routes .",
        "db_id": "flight_4",
        "gold_parse": "SELECT T1.name FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select T2.name from routes as T1 join airlines as T2 on T1.alid = T2.alid group by T1.airline order by count ( * ) desc limit 1"
    },
    {
        "question": "Find the names of the students who are in the position of striker and got a yes tryout decision .",
        "db_id": "soccer_2",
        "gold_parse": "SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes' AND T2.pPos  =  'striker'",
        "predicted_parse_with_values": "select T2.pName from Tryout as T1 join Player as T2 on T1.pID = T2.pID where T1.pPos = \"goalie\" intersect select T4.pName from Tryout as T3 join Player as T4 on T3.pID = T4.pID where T3.pPos = \"striker\""
    },
    {
        "question": "what states have rivers named ohio",
        "db_id": "geo",
        "gold_parse": "SELECT traverse FROM river WHERE river_name  =  \"ohio\"",
        "predicted_parse_with_values": "select T2.state_name from river as T1 join lake as T2 where T1.river_name = \"dummy value\""
    },
    {
        "question": "What is the total point count of the youngest gymnast ?",
        "db_id": "gymnast",
        "gold_parse": "SELECT T1.Total_Points FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T2.Age ASC LIMIT 1",
        "predicted_parse_with_values": "select sum ( T1.Total_Points ) from gymnast as T1 join people as T2 on T1.Gymnast_ID = T2.People_ID where T2.Age = ( select min ( Age ) from people )"
    },
    {
        "question": "how high is the highest point of delaware",
        "db_id": "geo",
        "gold_parse": "SELECT highest_elevation FROM highlow WHERE state_name  =  \"delaware\"",
        "predicted_parse_with_values": "select max ( highest_point ) from highlow where state_name = \"dummy value\""
    },
    {
        "question": "What is the id and name of the enzyme with most number of medicines that can interact as 'activator ' ?",
        "db_id": "medicine_enzyme_interaction",
        "gold_parse": "SELECT T1.id ,  T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id WHERE T2.interaction_type  =  'activitor' GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select id , name from enzyme where Porphyria = ( select id from enzyme group by id order by count ( * ) desc limit 1 )"
    },
    {
        "question": "List the id , genre and artist name of English songs ordered by rating .",
        "db_id": "music_1",
        "gold_parse": "SELECT f_id ,  genre_is ,  artist_name FROM song WHERE languages  =   \"english\" ORDER BY rating",
        "predicted_parse_with_values": "select T1.f_id , T2.g_name , T2.rating from song as T1 join genre as T2 on T1.genre_is = T2.g_name where T1.languages = \"bangla\" order by T1.rating"
    },
    {
        "question": "Find all the female members of club \" Bootup Baltimore \" . Show the first name and last name .",
        "db_id": "club_1",
        "gold_parse": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t3.sex  =  \"F\"",
        "predicted_parse_with_values": "select T1.Fname , T1.LName from Student as T1 join Member_of_club as T2 on T1.StuID = T2.StuID join Club as T3 on T2.ClubID = T3.ClubID where T3.ClubName = \"Pen and Paper Gaming\" and T3.ClubName = \"Tennis Club\""
    },
    {
        "question": "what is the highest point in the country",
        "db_id": "geo",
        "gold_parse": "SELECT highest_point FROM highlow WHERE highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow )",
        "predicted_parse_with_values": "select max ( highest_point ) from highlow"
    },
    {
        "question": "How many classes does the professor whose last name is Graztevski teach ?",
        "db_id": "college_1",
        "gold_parse": "SELECT count(*) FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM  =  T2.PROF_NUM WHERE T1.EMP_LNAME  =  'Graztevski'",
        "predicted_parse_with_values": "select count ( * ) from STUDENT where STU_LNAME = \"Robertson\""
    },
    {
        "question": "Find the name of the person who has friends with age above 40 but not under age 30 ?",
        "db_id": "network_2",
        "gold_parse": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  >  40) EXCEPT SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  <  30)",
        "predicted_parse_with_values": "select name from Person where age > 45 or age < 26"
    },
    {
        "question": "What is the number of wins the team Boston Red Stockings got in the postseasons each year in history ?",
        "db_id": "baseball_1",
        "gold_parse": "SELECT count(*) ,  T1.year FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' GROUP BY T1.year",
        "predicted_parse_with_values": "select T2.wins from team as T1 join postseason as T2 join team_franchise as T3 where T3.franchise_name = \"Boston Red Sox\" and T1.year = 2015"
    },
    {
        "question": "Find the name of the organization that has published the largest number of papers .",
        "db_id": "icfp_1",
        "gold_parse": "SELECT t1.name FROM inst AS t1 JOIN authorship AS t2 ON t1.instid  =  t2.instid JOIN papers AS t3 ON t2.paperid  =  t3.paperid GROUP BY t1.name ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select name , name from Inst group by instID order by count ( * ) desc limit 1"
    },
    {
        "question": "Find the number of customers in the banks at New York City .",
        "db_id": "loan_1",
        "gold_parse": "SELECT sum(no_of_customers) FROM bank WHERE city  =  'New York City'",
        "predicted_parse_with_values": "select count ( * ) from bank where city = \"New York City\""
    },
    {
        "question": "What is the last name and office of the professor from the history department ?",
        "db_id": "college_1",
        "gold_parse": "SELECT T1.emp_lname ,  T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T2.dept_code  =  T3.dept_code WHERE T3.dept_name  =  'History'",
        "predicted_parse_with_values": "select T2.DEPT_CODE , T2.PROF_OFFICE from DEPARTMENT as T1 join PROFESSOR as T2 on T1.DEPT_CODE = T2.DEPT_CODE where T1.DEPT_NAME = \"Psychology\""
    },
    {
        "question": "What are the names of the songs that have a lower rating than at least one blues song ?",
        "db_id": "music_1",
        "gold_parse": "SELECT song_name FROM song WHERE rating  <  (SELECT max(rating) FROM song WHERE genre_is  =  \"blues\")",
        "predicted_parse_with_values": "select song_name from song where rating < ( select max ( T1.rating ) from song as T1 join genre as T2 on T1.genre_is = T2.g_name where T2.rating = 9 )"
    },
    {
        "question": "what state has the least population density",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM state WHERE density  =  ( SELECT MIN ( density ) FROM state )",
        "predicted_parse_with_values": "select state_name from state order by density asc limit 1"
    },
    {
        "question": "what states border states that the mississippi runs through",
        "db_id": "geo",
        "gold_parse": "SELECT border FROM border_info WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" )",
        "predicted_parse_with_values": "select T3.border from river as T1 join state as T2 on T1.traverse = T2.state_name join border_info as T3 on T2.state_name = T3.border where T1.river_name = \"dummy value\""
    },
    {
        "question": "return me the number of papers by \" H. V. Jagadish \" on VLDB conference .",
        "db_id": "academic",
        "gold_parse": "SELECT COUNT ( DISTINCT t4.title ) FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" AND t2.name  =  \"VLDB\"",
        "predicted_parse_with_values": "select count ( T1.homepage ) from conference as T1 join publication as T2 on T1.cid = T2.cid join cite as T3 on T2.pid = T3.citing where T1.name = \"dummy value\" and T3.cited = \"dummy value\""
    },
    {
        "question": "How many rooms have king beds ? Report the number for each decor type .",
        "db_id": "inn_1",
        "gold_parse": "SELECT decor ,  count(*) FROM Rooms WHERE bedType = \"King\" GROUP BY decor",
        "predicted_parse_with_values": "select count ( * ) , bedType from Rooms where beds = 2 group by bedType"
    },
    {
        "question": "What are the names of all songs that are in mp3 format and have a resolution lower than 1000 ?",
        "db_id": "music_1",
        "gold_parse": "SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.formats  =  \"mp3\" INTERSECT SELECT song_name FROM song WHERE resolution  <  1000",
        "predicted_parse_with_values": "select T1.song_name from song as T1 join files as T2 on T1.f_id = T2.f_id where T2.formats = \"mp4\" and T1.resolution < 720"
    },
    {
        "question": "What is the total number of rooms available in this inn ?",
        "db_id": "inn_1",
        "gold_parse": "SELECT count(*) FROM Rooms",
        "predicted_parse_with_values": "select count ( * )"
    },
    {
        "question": "How many states that have some college students playing in the mid position but not in the goalie position .",
        "db_id": "soccer_2",
        "gold_parse": "SELECT COUNT(*) FROM (SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie')",
        "predicted_parse_with_values": "select count ( T2.state ) from Tryout as T1 join College as T2 on T1.cName = T2.cName where T1.pPos = \"goalie\" intersect select T4.state from Tryout as T3 join College as T4 on T3.cName = T4.cName where T3.pPos = \"mid\""
    },
    {
        "question": "What is the receipt date of the document with id 3 ?",
        "db_id": "cre_Doc_Control_Systems",
        "gold_parse": "SELECT receipt_date FROM Documents WHERE document_id = 3",
        "predicted_parse_with_values": "select T1.receipt_date from Documents as T1 join Documents_Mailed as T2 on T1.document_id = T2.document_id where T2.document_id = 14"
    },
    {
        "question": "what is the state with the lowest population",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM state WHERE population  =  ( SELECT MIN ( population ) FROM state )",
        "predicted_parse_with_values": "select state_name from state order by population limit 1"
    },
    {
        "question": "Return the full name and phone of the customer who has card number 4560596484842 .",
        "db_id": "customers_card_transactions",
        "gold_parse": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.card_number  =  \"4560596484842\"",
        "predicted_parse_with_values": "select T1.customer_first_name , T1.customer_phone , T2.card_number from Customers as T1 join Customers_Cards as T2 where T2.card_number = 5122249720639438"
    },
    {
        "question": "what state which the mississippi runs through has the largest population",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" ) ) AND state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" )",
        "predicted_parse_with_values": "select T3.state_name from river as T1 join state as T2 on T1.traverse = T2.state_name join border_info as T3 on T2.state_name = T3.border where T1.river_name = \"dummy value\" order by T2.population desc limit 1"
    },
    {
        "question": "Show the album names and ids for albums that contain tracks with unit price bigger than 1 .",
        "db_id": "chinook_1",
        "gold_parse": "SELECT T1.Title ,  T2.AlbumID FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId WHERE T2.UnitPrice  >  1 GROUP BY T2.AlbumID",
        "predicted_parse_with_values": "select T1.Title , T1.AlbumId from Album as T1 join Track as T2 on T1.AlbumId = T2.AlbumId where T2.UnitPrice > 0.99"
    },
    {
        "question": "how tall is the highest point in delaware",
        "db_id": "geo",
        "gold_parse": "SELECT highest_elevation FROM highlow WHERE state_name  =  \"delaware\"",
        "predicted_parse_with_values": "select max ( highest_point ) from highlow where state_name = \"dummy value\""
    },
    {
        "question": "what is the area of new mexico",
        "db_id": "geo",
        "gold_parse": "SELECT area FROM state WHERE state_name  =  \"new mexico\"",
        "predicted_parse_with_values": "select T2.area from border_info as T1 join state as T2 on T1.border = T2.state_name where T1.state_name = \"dummy value\""
    },
    {
        "question": "Find the names of the tourist attractions that is either accessible by walk or at address 660 Shea Crescent .",
        "db_id": "cre_Theme_park",
        "gold_parse": "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID  =  T2.Location_ID WHERE T1.Address  =  \"660 Shea Crescent\" OR T2.How_to_Get_There  =  \"walk\"",
        "predicted_parse_with_values": "select T2.Name from Locations as T1 join Tourist_Attractions as T2 on T1.Location_ID = T2.Location_ID where T1.Address = \"254 Ottilie Junction\" union select T4.Name from Locations as T3 join Tourist_Attractions as T4 on T3.Location_ID = T4.Location_ID where T3.Address = \"53815 Sawayn Tunnel Apt. 297\""
    },
    {
        "question": "What are the names of all people who do not have friends ?",
        "db_id": "network_2",
        "gold_parse": "SELECT name FROM person EXCEPT SELECT name FROM PersonFriend",
        "predicted_parse_with_values": "select name from Person where name not in ( select name from PersonFriend )"
    },
    {
        "question": "What are the names of artists who have not released any albums ?",
        "db_id": "chinook_1",
        "gold_parse": "SELECT Name FROM ARTIST EXCEPT SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId",
        "predicted_parse_with_values": "select Name from Artist except select T1.Name from Artist as T1 join Album as T2 on T1.ArtistId = T2.ArtistId join Track as T3 on T2.AlbumId = T3.AlbumId join InvoiceLine as T4 on T3.TrackId = T4.TrackId join Invoice as T5 on T4.InvoiceId = T5.InvoiceId join Customer as T6 on T5.CustomerId = T6.CustomerId where T6.LastName = \"H\u00e4m\u00e4l\u00e4inen\""
    },
    {
        "question": "return me all the researchers in Databases area in \" University of Michigan \" .",
        "db_id": "academic",
        "gold_parse": "SELECT t1.name FROM domain_author AS t4 JOIN author AS t1 ON t4.aid  =  t1.aid JOIN DOMAIN AS t3 ON t3.did  =  t4.did JOIN organization AS t2 ON t2.oid  =  t1.oid WHERE t3.name  =  \"Databases\" AND t2.name  =  \"University of Michigan\"",
        "predicted_parse_with_values": "select T1.oid from organization as T1 join author as T2 where T1.name = \"dummy value\" and T2.name = \"dummy value\""
    },
    {
        "question": "which states does the longest river cross",
        "db_id": "geo",
        "gold_parse": "SELECT traverse FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river )",
        "predicted_parse_with_values": "select T3.state_name from river as T1 join state as T2 on T1.traverse = T2.state_name join border_info as T3 on T2.state_name = T3.border order by T1.length desc limit 1"
    },
    {
        "question": "return me the number of papers written by \" H. V. Jagadish \" and \" Divesh Srivastava \" .",
        "db_id": "academic",
        "gold_parse": "SELECT COUNT ( DISTINCT t5.title ) FROM writes AS t3 JOIN author AS t2 ON t3.aid  =  t2.aid JOIN publication AS t5 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t2.name  =  \"H. V. Jagadish\" AND t1.name  =  \"Divesh Srivastava\"",
        "predicted_parse_with_values": "select count ( T1.pid ) from writes as T1 join author as T2 on T1.aid = T2.aid join publication as T3 on T1.pid = T3.pid join cite as T4 on T3.pid = T4.citing where T4.cited = \"dummy value\" and T2.name = \"dummy value\""
    },
    {
        "question": "Show the delegates and the names of the party they belong to .",
        "db_id": "election",
        "gold_parse": "SELECT T1.Delegate ,  T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID",
        "predicted_parse_with_values": "select Delegate , Party from election"
    },
    {
        "question": "return me the author who has the most number of papers containing keyword \" Relational Database \" .",
        "db_id": "academic",
        "gold_parse": "SELECT t2.name FROM publication_keyword AS t5 JOIN keyword AS t1 ON t5.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t3.pid JOIN author AS t2 ON t4.aid  =  t2.aid WHERE t1.keyword  =  \"Relational Database\" GROUP BY t2.name ORDER BY COUNT ( DISTINCT t3.title ) DESC LIMIT 1",
        "predicted_parse_with_values": "select count ( * ) , T5.name from keyword as T1 join publication_keyword as T2 on T1.kid = T2.kid join publication as T3 on T2.pid = T3.pid join writes as T4 on T3.pid = T4.pid join author as T5 on T4.aid = T5.aid where T1.keyword = \"dummy value\" group by T5.name order by count ( * ) desc limit 1"
    },
    {
        "question": "Return the publisher that has published the most books .",
        "db_id": "culture_company",
        "gold_parse": "SELECT publisher FROM book_club GROUP BY publisher ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select Publisher from book_club group by Author_or_Editor order by count ( * ) desc limit 1"
    },
    {
        "question": "Find the busiest destination airport that runs most number of routes in China .",
        "db_id": "flight_4",
        "gold_parse": "SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE T1.country  =  'China' GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select T2.dst_ap from airports as T1 join routes as T2 on T1.apid = T2.src_apid where T1.country = \"Guatemala\" group by T2.dst_ap order by count ( * ) desc limit 1"
    },
    {
        "question": "where is the lowest point in the us",
        "db_id": "geo",
        "gold_parse": "SELECT lowest_point FROM highlow WHERE lowest_elevation  =  ( SELECT MIN ( lowest_elevation ) FROM highlow )",
        "predicted_parse_with_values": "select T1.area from state as T1 join highlow as T2 on T1.state_name = T2.state_name where T1.country_name = \"dummy value\" order by T2.lowest_point limit 1"
    },
    {
        "question": "Count the number of stores the chain South has .",
        "db_id": "department_store",
        "gold_parse": "SELECT count(*) FROM department_stores AS T1 JOIN department_store_chain AS T2 ON T1.dept_store_chain_id  =  T2.dept_store_chain_id WHERE T2.dept_store_chain_name  =  \"South\"",
        "predicted_parse_with_values": "select count ( * ) from Department_Store_Chain as T1 join Addresses as T2 where T1.dept_store_chain_name = \"West\""
    },
    {
        "question": "List the countries having more than 4 addresses listed .",
        "db_id": "customers_and_addresses",
        "gold_parse": "SELECT country FROM addresses GROUP BY country HAVING count(address_id)  >  4",
        "predicted_parse_with_values": "select country from Addresses group by country having count ( * ) > 1"
    },
    {
        "question": "Find the day in which the difference between the max temperature and min temperature was the smallest . Also report the difference .",
        "db_id": "bike_1",
        "gold_parse": "SELECT date ,  max_temperature_f - min_temperature_f FROM weather ORDER BY max_temperature_f - min_temperature_f LIMIT 1",
        "predicted_parse_with_values": "select date from weather order by max_temperature_f intersect select min_temperature_f from weather"
    },
    {
        "question": "Find the number of times ROY SWEAZY has reserved a room .",
        "db_id": "inn_1",
        "gold_parse": "SELECT count(*) FROM Reservations WHERE FirstName = \"ROY\" AND LastName  =  \"SWEAZY\"",
        "predicted_parse_with_values": "select count ( * ) from Reservations where FirstName = \"CAPRICE\" and LastName = \"TUPPEN\""
    },
    {
        "question": "What are the 3 most common cloud covers in the zip code of 94107 ?",
        "db_id": "bike_1",
        "gold_parse": "SELECT cloud_cover FROM weather WHERE zip_code  =  94107 GROUP BY cloud_cover ORDER BY COUNT (*) DESC LIMIT 3",
        "predicted_parse_with_values": "select cloud_cover from weather where zip_code = 94301 group by cloud_cover order by count ( * ) desc limit 1"
    },
    {
        "question": "Find the name and gender of the staff who has been assigned the job of Sales Person but never Clerical Staff .",
        "db_id": "department_store",
        "gold_parse": "SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Sales Person\" EXCEPT SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Clerical Staff\"",
        "predicted_parse_with_values": "select staff_name , staff_gender from Staff where staff_id not in ( select staff_id from Staff_Department_Assignments where job_title_code = \"Administration\" )"
    },
    {
        "question": "What is the name of the department and office location for the professor with the last name of Heffington ?",
        "db_id": "college_1",
        "gold_parse": "SELECT T3.dept_name  ,  T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T2.dept_code  =  T3.dept_code WHERE T1.emp_lname  =  'Heffington'",
        "predicted_parse_with_values": "select T2.DEPT_NAME , T3.PROF_OFFICE from STUDENT as T1 join DEPARTMENT as T2 on T1.DEPT_CODE = T2.DEPT_CODE join PROFESSOR as T3 on T2.DEPT_CODE = T3.DEPT_CODE where T1.STU_LNAME = \"Smith\""
    },
    {
        "question": "What are the names of actors ordered descending by the year in which their musical was awarded ?",
        "db_id": "musical",
        "gold_parse": "SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID ORDER BY T2.Year DESC",
        "predicted_parse_with_values": "select T2.Name , T1.Year from musical as T1 join actor as T2 order by T1.Award desc"
    },
    {
        "question": "Find the latest movie which \" Gabriele Ferzetti \" acted in",
        "db_id": "imdb",
        "gold_parse": "SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t1.name  =  \"Gabriele Ferzetti\" ORDER BY t3.release_year DESC LIMIT 1",
        "predicted_parse_with_values": "select T2.title from actor as T1 join movie as T2 where T1.name = \"dummy value\" order by T1.birth_year desc limit 1"
    },
    {
        "question": "what is the longest river in the us",
        "db_id": "geo",
        "gold_parse": "SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river )",
        "predicted_parse_with_values": "select T1.river_name from river as T1 join state as T2 on T1.traverse = T2.state_name where T2.country_name = \"dummy value\" order by T1.length desc limit 1"
    },
    {
        "question": "What is the sum of checking and savings balances for all customers , ordered by the total balance ?",
        "db_id": "small_bank_1",
        "gold_parse": "SELECT T1.balance + T2.balance FROM checking AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid ORDER BY T1.balance + T2.balance",
        "predicted_parse_with_values": "select sum ( balance ) , sum ( balance ) from CHECKING order by balance"
    },
    {
        "question": "What are the different names of the colleges involved in the tryout in alphabetical order ?",
        "db_id": "soccer_2",
        "gold_parse": "SELECT DISTINCT cName FROM tryout ORDER BY cName",
        "predicted_parse_with_values": "select T1.cName from Tryout as T1 join College as T2 on T1.cName = T2.cName order by T2.cName"
    },
    {
        "question": "Find the number and time of the train that goes from Chennai to Guruvayur .",
        "db_id": "station_weather",
        "gold_parse": "SELECT train_number ,  TIME FROM train WHERE origin  =  'Chennai' AND destination  =  'Guruvayur'",
        "predicted_parse_with_values": "select train_number , time from train where destination = \"Chennai\""
    },
    {
        "question": "what wyoming city has the largest population",
        "db_id": "geo",
        "gold_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name  =  \"wyoming\" ) AND state_name  =  \"wyoming\"",
        "predicted_parse_with_values": "select city_name from city where state_name = \"dummy value\" order by population desc limit 1"
    },
    {
        "question": "What are the titles and directors of the films were never presented in China ?",
        "db_id": "film_rank",
        "gold_parse": "SELECT title ,  director FROM film WHERE film_id NOT IN (SELECT film_id FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.market_id  =  T2.Market_ID WHERE country  =  'China')",
        "predicted_parse_with_values": "select Title , Director from film except select T1.Title , T1.Director from film as T1 join film_market_estimation as T2 on T1.Film_ID = T2.Film_ID join market as T3 on T2.Market_ID = T3.Market_ID where T3.Country = \"China\""
    },
    {
        "question": "What is the language that was used most often in songs with resolution above 500 ?",
        "db_id": "music_1",
        "gold_parse": "SELECT artist_name FROM song WHERE resolution  >  500 GROUP BY languages ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select languages from song where resolution > 512 group by languages order by count ( * ) desc limit 1"
    },
    {
        "question": "which is the smallest state",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state )",
        "predicted_parse_with_values": "select state_name from state order by density limit 1"
    },
    {
        "question": "How many products are in the 'Spices ' category and have a typical price of over 1000 ?",
        "db_id": "products_gen_characteristics",
        "gold_parse": "SELECT count(*) FROM products WHERE product_category_code  =  \"Spices\" AND typical_buying_price  >  1000",
        "predicted_parse_with_values": "select count ( * ) from Characteristics as T1 join Product_Characteristics as T2 on T1.characteristic_id = T2.characteristic_id join Products as T3 on T2.product_id = T3.product_id where T1.characteristic_name = \"slow\" and T3.typical_selling_price > \"0.1859512\""
    },
    {
        "question": "Show first name and last name for all the students advised by Michael Goodrich .",
        "db_id": "activity_1",
        "gold_parse": "SELECT T2.fname ,  T2.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T1.fname  =  \"Michael\" AND T1.lname  =  \"Goodrich\"",
        "predicted_parse_with_values": "select T1.Fname , T1.LName from Student as T1 join Participates_in as T2 on T1.StuID = T2.stuid join Activity as T3 on T2.actid = T3.actid join Faculty_Participates_in as T4 on T3.actid = T4.actid join Faculty as T5 on T4.FacID = T5.FacID where T1.Advisor = 8772 and T5.Lname = \"Iglesias\""
    },
    {
        "question": "what is the lowest point in the state of iowa",
        "db_id": "geo",
        "gold_parse": "SELECT lowest_point FROM highlow WHERE state_name  =  \"iowa\"",
        "predicted_parse_with_values": "select min ( T2.lowest_point ) from state as T1 join highlow as T2 on T1.state_name = T2.state_name where T1.state_name = \"dummy value\""
    },
    {
        "question": "What are the distinct positions of the players from a country whose capital is Dublin ?",
        "db_id": "match_season",
        "gold_parse": "SELECT DISTINCT T2.Position FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Capital  =  \"Dublin\"",
        "predicted_parse_with_values": "select T1.Player from player as T1 join team as T2 on T1.Team = T2.Team_id join match_season as T3 on T2.Team_id = T3.Team join country as T4 on T3.Country = T4.Country_id where T4.Capital = \"Tehran\""
    },
    {
        "question": "What is the match id of the competition called \" 1994 FIFA World Cup qualification \" ?",
        "db_id": "city_record",
        "gold_parse": "SELECT match_id FROM MATCH WHERE competition = \"1994 FIFA World Cup qualification\"",
        "predicted_parse_with_values": "select Match_ID from match where Date = \"4 April 1993\" and Date = \"4 April 1993\""
    },
    {
        "question": "How many airports have n't the pilot 'Thompson ' driven an aircraft ?",
        "db_id": "flight_company",
        "gold_parse": "SELECT count(*) FROM airport WHERE id NOT IN ( SELECT airport_id FROM flight WHERE pilot  =  'Thompson' )",
        "predicted_parse_with_values": "select count ( * ) from flight where Pilot != \"Peterson\""
    },
    {
        "question": "through which states does the ohio run",
        "db_id": "geo",
        "gold_parse": "SELECT traverse FROM river WHERE river_name  =  \"ohio\"",
        "predicted_parse_with_values": "select T2.state_name from river as T1 join state as T2 on T1.traverse = T2.state_name where T1.river_name = \"dummy value\""
    },
    {
        "question": "Which cities have regional population above 8000000 or below 5000000 ?",
        "db_id": "city_record",
        "gold_parse": "SELECT city FROM city WHERE regional_population  >  10000000 UNION SELECT city FROM city WHERE regional_population  <  5000000",
        "predicted_parse_with_values": "select City from city where Regional_Population > 4501700 or Regional_Population < 4591972"
    },
    {
        "question": "What is the total number of hours per week and number of games played by students under 20 ?",
        "db_id": "game_1",
        "gold_parse": "SELECT sum(hoursperweek) ,  sum(gamesplayed) FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.age  <  20",
        "predicted_parse_with_values": "select sum ( T3.Hours_Played ) , sum ( T3.Hours_Played ) from SportsInfo as T1 join Student as T2 on T1.StuID = T2.StuID join Plays_Games as T3 on T2.StuID = T3.StuID where T2.Age < 18 group by T1.HoursPerWeek"
    },
    {
        "question": "What are the average prices of products , grouped by manufacturer code ?",
        "db_id": "manufactory_1",
        "gold_parse": "SELECT AVG(Price) ,  Manufacturer FROM Products GROUP BY Manufacturer",
        "predicted_parse_with_values": "select avg ( T2.Price ) , T1.Code from Manufacturers as T1 join Products as T2 on T1.Code = T2.Manufacturer group by T2.Code"
    },
    {
        "question": "Return the unit of measure for 'Herb ' products .",
        "db_id": "products_gen_characteristics",
        "gold_parse": "SELECT unit_of_measure FROM ref_product_categories WHERE product_category_code  =  \"Herbs\"",
        "predicted_parse_with_values": "select T1.unit_of_measure from Ref_Product_Categories as T1 join Products as T2 on T1.product_category_code = T2.product_category_code where T2.product_name = \"laurel\""
    },
    {
        "question": "Find the id and local authority of the station whose maximum precipitation is higher than 50 .",
        "db_id": "station_weather",
        "gold_parse": "SELECT t2.id ,  t2.local_authority FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id  =  t2.id GROUP BY t1.station_id HAVING max(t1.precipitation)  >  50",
        "predicted_parse_with_values": "select T1.id , T1.local_authority from station as T1 join weekly_weather as T2 on T1.id = T2.station_id where T2.precipitation > 90.0 order by T1.local_authority desc limit 1"
    },
    {
        "question": "Give the state that has the most customers .",
        "db_id": "customer_complaints",
        "gold_parse": "SELECT state FROM customers GROUP BY state ORDER BY count(*) LIMIT 1",
        "predicted_parse_with_values": "select state from Customers group by state order by count ( * ) desc limit 1"
    },
    {
        "question": "what is the longest river in the united states",
        "db_id": "geo",
        "gold_parse": "SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river )",
        "predicted_parse_with_values": "select T1.river_name from river as T1 join state as T2 on T1.traverse = T2.state_name join border_info as T3 on T2.state_name = T3.border where T3.state_name = \"dummy value\" order by T1.length desc limit 1"
    },
    {
        "question": "Count the number of tracks that are of the media type \" AAC audio file \" .",
        "db_id": "chinook_1",
        "gold_parse": "SELECT COUNT(*) FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId  =  T2.MediaTypeId WHERE T1.Name  =  \"AAC audio file\"",
        "predicted_parse_with_values": "select count ( * ) from MediaType where Name = \"Protected AAC audio file\""
    },
    {
        "question": "How many students live in each city and what are their average ages ?",
        "db_id": "dorm_1",
        "gold_parse": "SELECT count(*) ,  avg(age) ,  city_code FROM student GROUP BY city_code",
        "predicted_parse_with_values": "select city_code , avg ( Age ) from Student group by city_code"
    },
    {
        "question": "what is the largest of the state that the rio grande runs through",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"rio grande\" ) ) AND state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"rio grande\" )",
        "predicted_parse_with_values": "select T3.state_name from river as T1 join state as T2 on T1.traverse = T2.state_name join border_info as T3 on T2.state_name = T3.border where T1.river_name = \"dummy value\" order by T2.density desc limit 1"
    },
    {
        "question": "What are the names of all aircrafts that can cover more distances than average ?",
        "db_id": "flight_1",
        "gold_parse": "SELECT name FROM Aircraft WHERE distance  >  (SELECT avg(distance) FROM Aircraft)",
        "predicted_parse_with_values": "select T2.name from flight as T1 join aircraft as T2 on T1.aid = T2.aid where T1.distance > ( select avg ( distance ) from flight )"
    },
    {
        "question": "Return the name of the characteristic that is most common across all products .",
        "db_id": "products_gen_characteristics",
        "gold_parse": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id GROUP BY t3.characteristic_name ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select characteristic_name from Characteristics group by characteristic_id order by count ( * ) desc limit 1"
    },
    {
        "question": "Find all the songs that do not have a back vocal .",
        "db_id": "music_2",
        "gold_parse": "SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  \"back\"",
        "predicted_parse_with_values": "select Title from Songs where SongId not in ( select SongId from Vocals where Type = \"dummy value\" )"
    },
    {
        "question": "What are the numbers of the shortest flights ?",
        "db_id": "flight_1",
        "gold_parse": "SELECT flno FROM Flight ORDER BY distance ASC LIMIT 3",
        "predicted_parse_with_values": "select count ( * ) from flight order by distance asc limit 1"
    },
    {
        "question": "What is the number of movies that \" Brad Pitt \" acts in per year ?",
        "db_id": "imdb",
        "gold_parse": "SELECT COUNT ( DISTINCT t2.title  )  ,  t2.release_year FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  \"Brad Pitt\" GROUP BY t2.release_year",
        "predicted_parse_with_values": "select count ( * ) , T1.name from actor as T1 join movie as T2 where T1.name = \"dummy value\" group by T1.birth_year"
    },
    {
        "question": "What is the total number of deaths and damage for all storms with a max speed greater than the average ?",
        "db_id": "storm_record",
        "gold_parse": "SELECT sum(number_deaths) ,  sum(damage_millions_USD) FROM storm WHERE max_speed  >  (SELECT avg(max_speed) FROM storm)",
        "predicted_parse_with_values": "select sum ( Number_Deaths ) , sum ( Number_Deaths ) from storm where Max_speed > ( select avg ( Max_speed ) from storm )"
    },
    {
        "question": "Find the average and oldest age for students with different sex .",
        "db_id": "dorm_1",
        "gold_parse": "SELECT avg(age) ,  max(age) ,  sex FROM student GROUP BY sex",
        "predicted_parse_with_values": "select avg ( Age ) , Sex from Student group by Sex"
    },
    {
        "question": "return me the paper after 2000 in PVLDB with more than 200 citations .",
        "db_id": "academic",
        "gold_parse": "SELECT t2.title FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" AND t2.citation_num  >  200 AND t2.year  >  2000",
        "predicted_parse_with_values": "select pid from publication where year > \"dummy value\" and year > \"dummy value\""
    },
    {
        "question": "return me the total citations of the papers containing keyword \" Natural Language \"",
        "db_id": "academic",
        "gold_parse": "SELECT SUM ( t3.citation_num ) FROM publication_keyword AS t2 JOIN keyword AS t1 ON t2.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t2.pid WHERE t1.keyword  =  \"Natural Language\"",
        "predicted_parse_with_values": "select T1.jid from publication as T1 join writes as T2 on T1.pid = T2.pid join author as T3 on T2.aid = T3.aid join domain_author as T4 on T3.aid = T4.aid join domain as T5 on T4.did = T5.did join domain_keyword as T6 on T5.did = T6.did join keyword as T7 on T6.kid = T7.kid where T7.keyword = \"dummy value\""
    },
    {
        "question": "Find the number of clubs where \" Tracy Kim \" is a member .",
        "db_id": "club_1",
        "gold_parse": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Tracy\" AND t3.lname  =  \"Kim\"",
        "predicted_parse_with_values": "select count ( * ) from Club where ClubName = \"Bootup Baltimore\""
    },
    {
        "question": "List all the possible ways to get to attractions , together with the number of attractions accessible by these methods .",
        "db_id": "cre_Theme_park",
        "gold_parse": "SELECT How_to_Get_There ,  COUNT(*) FROM Tourist_Attractions GROUP BY How_to_Get_There",
        "predicted_parse_with_values": "select count ( * ) , count ( * ) from Tourist_Attractions group by How_to_Get_There"
    },
    {
        "question": "What is the first and last name of the artist who performed back stage for the song \" Der Kapitan \" ?",
        "db_id": "music_2",
        "gold_parse": "SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Der Kapitan\" AND T1.StagePosition  =  \"back\"",
        "predicted_parse_with_values": "select T1.Firstname , T1.Lastname from Band as T1 join Vocals as T2 on T1.Id = T2.Bandmate join Songs as T3 on T2.SongId = T3.SongId where T3.Title = \"dummy value\""
    },
    {
        "question": "What is the description of the color for most products ?",
        "db_id": "products_gen_characteristics",
        "gold_parse": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code GROUP BY t2.color_description ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select T2.color_description from Products as T1 join Ref_Colors as T2 on T1.color_code = T2.color_code group by T1.color_code order by count ( * ) desc limit 1"
    },
    {
        "question": "Show the statuses of roller coasters longer than 3300 or higher than 100 .",
        "db_id": "roller_coaster",
        "gold_parse": "SELECT Status FROM roller_coaster WHERE LENGTH  >  3300 OR Height  >  100",
        "predicted_parse_with_values": "select Status from roller_coaster where Height > 120.0 or Height > 136.0"
    },
    {
        "question": "What are the name and phone of the customer with the most ordered product quantity ?",
        "db_id": "customers_and_products_contacts",
        "gold_parse": "SELECT  T1.customer_name ,  T1.customer_phone FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T3.order_id  =  T2.order_id GROUP BY T1.customer_id ORDER BY sum(T3.order_quantity) DESC LIMIT 1",
        "predicted_parse_with_values": "select T1.customer_name , T1.customer_phone from Customers as T1 join Customer_Orders as T2 on T1.customer_id = T2.customer_id join Order_Items as T3 on T2.order_id = T3.order_id where T3.order_quantity = ( select max ( order_quantity ) from Order_Items )"
    },
    {
        "question": "Find the number of rooms that do not have any reservation .",
        "db_id": "inn_1",
        "gold_parse": "SELECT count(*) FROM rooms WHERE roomid NOT IN (SELECT DISTINCT room FROM reservations)",
        "predicted_parse_with_values": "select count ( * ) from Rooms where RoomId not in ( select Room from Reservations )"
    },
    {
        "question": "What are the names of products with category \" Spices \" ?",
        "db_id": "products_gen_characteristics",
        "gold_parse": "SELECT product_name FROM products WHERE product_category_code  =  \"Spices\"",
        "predicted_parse_with_values": "select T3.product_name from Characteristics as T1 join Product_Characteristics as T2 on T1.characteristic_id = T2.characteristic_id join Products as T3 on T2.product_id = T3.product_id where T1.characteristic_name = \"warm\""
    },
    {
        "question": "Show cinema name , film title , date , and price for each record in schedule .",
        "db_id": "cinema",
        "gold_parse": "SELECT T3.name ,  T2.title ,  T1.date ,  T1.price FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id JOIN cinema AS T3 ON T1.cinema_id  =  T3.cinema_id",
        "predicted_parse_with_values": "select T3.Name , T2.Title , T1.Price , T1.Price from schedule as T1 join film as T2 on T1.Film_ID = T2.Film_ID join cinema as T3 on T1.Cinema_ID = T3.Cinema_ID"
    },
    {
        "question": "Show the movie titles and book titles for all companies in China .",
        "db_id": "culture_company",
        "gold_parse": "SELECT T1.title ,  T3.book_title FROM movie AS T1 JOIN culture_company AS T2 ON T1.movie_id  =  T2.movie_id JOIN book_club AS T3 ON T3.book_club_id  =  T2.book_club_id WHERE T2.incorporated_in  =  'China'",
        "predicted_parse_with_values": "select T2.Title , T2.Title from culture_company as T1 join movie as T2 on T1.movie_id = T2.movie_id where T1.Company_name = \"Culture China\""
    },
    {
        "question": "Find the names of rooms that have been reserved for more than 60 times .",
        "db_id": "inn_1",
        "gold_parse": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room HAVING count(*)  >  60",
        "predicted_parse_with_values": "select roomName from Rooms group by RoomId having count ( * ) > 1"
    },
    {
        "question": "What is the list of school locations sorted in descending order of school foundation year ?",
        "db_id": "school_player",
        "gold_parse": "SELECT LOCATION FROM school ORDER BY Founded DESC",
        "predicted_parse_with_values": "select T2.Location from school_performance as T1 join school as T2 on T1.School_Id = T2.School_ID order by T1.School_Year desc"
    },
    {
        "question": "return me the papers by \" H. V. Jagadish \" on VLDB conference with more than 200 citations .",
        "db_id": "academic",
        "gold_parse": "SELECT t4.title FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" AND t2.name  =  \"VLDB\" AND t4.citation_num  >  200",
        "predicted_parse_with_values": "select T2.jid from conference as T1 join publication as T2 on T1.cid = T2.cid join cite as T3 on T2.pid = T3.citing where T1.name = \"dummy value\" and T3.cited > \"dummy value\""
    },
    {
        "question": "return me the paper after 2000 in PVLDB with the most citations .",
        "db_id": "academic",
        "gold_parse": "SELECT t2.title FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" AND t2.year  >  2000 ORDER BY t2.citation_num DESC LIMIT 1",
        "predicted_parse_with_values": "select count ( jid ) , jid from publication where year > \"dummy value\" and year < \"dummy value\" group by title order by count ( jid ) desc"
    },
    {
        "question": "Advisor 1121 has how many students ?",
        "db_id": "restaurant_1",
        "gold_parse": "SELECT count(*) FROM Student WHERE Advisor =  1121",
        "predicted_parse_with_values": "select Advisor from Student where Advisor = 1148"
    },
    {
        "question": "what city has the most people",
        "db_id": "geo",
        "gold_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city )",
        "predicted_parse_with_values": "select city_name from city order by population desc limit 1"
    },
    {
        "question": "What are the names and phone numbers for all suppliers , sorted in alphabetical order of their addressed ?",
        "db_id": "department_store",
        "gold_parse": "SELECT T1.supplier_name ,  T1.supplier_phone FROM Suppliers AS T1 JOIN supplier_addresses AS T2 ON T1.supplier_id  =  T2.supplier_id JOIN addresses AS T3 ON T2.address_id  =  T3.address_id ORDER BY T3.address_details",
        "predicted_parse_with_values": "select supplier_name , supplier_phone from Suppliers order by supplier_name"
    },
    {
        "question": "List the name and phone number of all suppliers in the alphabetical order of their addresses .",
        "db_id": "department_store",
        "gold_parse": "SELECT T1.supplier_name ,  T1.supplier_phone FROM Suppliers AS T1 JOIN supplier_addresses AS T2 ON T1.supplier_id  =  T2.supplier_id JOIN addresses AS T3 ON T2.address_id  =  T3.address_id ORDER BY T3.address_details",
        "predicted_parse_with_values": "select supplier_name , supplier_phone from Suppliers order by supplier_name"
    },
    {
        "question": "return me the papers by \" H. V. Jagadish \" on PVLDB after 2000 .",
        "db_id": "academic",
        "gold_parse": "SELECT t4.title FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" AND t2.name  =  \"PVLDB\" AND t4.year  >  2000",
        "predicted_parse_with_values": "select T1.title from publication as T1 join cite as T2 on T1.pid = T2.citing where T2.cited = \"dummy value\" and T1.year > \"dummy value\""
    },
    {
        "question": "what cities in wyoming have the highest populations",
        "db_id": "geo",
        "gold_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name  =  \"wyoming\" ) AND state_name  =  \"wyoming\"",
        "predicted_parse_with_values": "select T1.city_name from city as T1 join state as T2 on T1.state_name = T2.state_name where T1.state_name = \"dummy value\" order by T2.population desc limit 1"
    },
    {
        "question": "Find the name of all the cities and states .",
        "db_id": "e_government",
        "gold_parse": "SELECT town_city FROM addresses UNION SELECT state_province_county FROM addresses",
        "predicted_parse_with_values": "select town_city , state_province_county from Addresses"
    },
    {
        "question": "return me the number of authors of \" Making database systems usable \" .",
        "db_id": "academic",
        "gold_parse": "SELECT COUNT ( DISTINCT t1.name ) FROM writes AS t2 JOIN author AS t1 ON t2.aid  =  t1.aid JOIN publication AS t3 ON t2.pid  =  t3.pid WHERE t3.title  =  \"Making database systems usable\"",
        "predicted_parse_with_values": "select count ( domain_T5.* ) from keyword as T1 join publication_keyword as T2 on T1.kid = T2.kid join publication as T3 on T2.pid = T3.pid join writes as T4 on T3.pid = T4.pid join author as T5 on T4.aid = T5.aid join domain_author as T6 on T5.aid = T6.aid where T1.keyword = \"dummy value\""
    },
    {
        "question": "Show last names for all student who are on scholarship .",
        "db_id": "game_1",
        "gold_parse": "SELECT T2.Lname FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T1.onscholarship  =  'Y'",
        "predicted_parse_with_values": "select LName from Student"
    },
    {
        "question": "Find the name and age of all males in order of their age .",
        "db_id": "network_2",
        "gold_parse": "SELECT name FROM Person WHERE gender  =  'male' ORDER BY age",
        "predicted_parse_with_values": "select name , age from Person where gender = \"male\" order by age"
    },
    {
        "question": "what states have no bordering state",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM state WHERE state_name NOT IN ( SELECT state_name FROM border_info )",
        "predicted_parse_with_values": "select state_name from state except select state_name from border_info"
    },
    {
        "question": "Return the staff ids and genders for any staff with the title Department Manager .",
        "db_id": "department_store",
        "gold_parse": "SELECT T1.staff_id ,  T1.staff_gender FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Department Manager\"",
        "predicted_parse_with_values": "select staff_id , staff_gender from Staff where staff_name like \"Vanessa\""
    },
    {
        "question": "How old is the youngest person for each job ?",
        "db_id": "network_2",
        "gold_parse": "SELECT min(age) ,  job FROM Person GROUP BY job",
        "predicted_parse_with_values": "select job , max ( age ) from Person group by job"
    },
    {
        "question": "which states does the ohio run through",
        "db_id": "geo",
        "gold_parse": "SELECT traverse FROM river WHERE river_name  =  \"ohio\"",
        "predicted_parse_with_values": "select T3.state_name from river as T1 join state as T2 on T1.traverse = T2.state_name join border_info as T3 on T2.state_name = T3.border where T1.river_name = \"dummy value\""
    },
    {
        "question": "Show the name of the building that has the most company offices .",
        "db_id": "company_office",
        "gold_parse": "SELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id GROUP BY T1.building_id ORDER BY COUNT(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select name from buildings group by name order by count ( * ) desc limit 1"
    },
    {
        "question": "What is the last name of the staff who has handled the first ever complaint ?",
        "db_id": "customer_complaints",
        "gold_parse": "SELECT t1.last_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id  =  t2.staff_id ORDER BY t2.date_complaint_raised LIMIT 1",
        "predicted_parse_with_values": "select last_name from Staff order by first_name limit 1"
    },
    {
        "question": "What is the most popular first name of the actors ?",
        "db_id": "sakila_1",
        "gold_parse": "SELECT first_name FROM actor GROUP BY first_name ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select first_name from actor group by first_name order by count ( * ) desc limit 1"
    },
    {
        "question": "Which countries have at least 3 cities ?",
        "db_id": "sakila_1",
        "gold_parse": "SELECT T2.country FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id GROUP BY T2.country_id HAVING count(*)  >=  3",
        "predicted_parse_with_values": "select T2.country from city as T1 join country as T2 on T1.country_id = T2.country_id group by T2.country having count ( * ) >= 1"
    },
    {
        "question": "what is the population of the largest city in the state with the largest area",
        "db_id": "geo",
        "gold_parse": "SELECT population FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) ) ) AND state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) )",
        "predicted_parse_with_values": "select population from state where area = ( select max ( area ) from state )"
    },
    {
        "question": "What is the most common amenity in the dorms ?",
        "db_id": "dorm_1",
        "gold_parse": "SELECT T1.amenity_name FROM dorm_amenity AS T1 JOIN has_amenity AS T2 ON T1.amenid  =  T2.amenid GROUP BY T2.amenid ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select amenity_name from Dorm_amenity group by amenity_name order by count ( * ) desc limit 1"
    },
    {
        "question": "Find the number of routes from the United States to Canada .",
        "db_id": "flight_4",
        "gold_parse": "SELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')",
        "predicted_parse_with_values": "select count ( * ) from routes where dst_ap = \"YXC\" and dst_ap = \"KSQ\""
    },
    {
        "question": "how many major cities are in states bordering nebraska",
        "db_id": "geo",
        "gold_parse": "SELECT COUNT ( city_name ) FROM city WHERE population  >  150000 AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"nebraska\" )",
        "predicted_parse_with_values": "select count ( * ) from border_info as T1 join state as T2 on T1.border = T2.state_name join city as T3 on T2.state_name = T3.state_name where T1.border = \"dummy value\""
    },
    {
        "question": "What is the maximum and minimum height of all players ?",
        "db_id": "soccer_1",
        "gold_parse": "SELECT max(weight) ,  min(weight) FROM Player",
        "predicted_parse_with_values": "select max ( height ) , min ( height ) from Player"
    },
    {
        "question": "What are the names , checking balances , and savings balances of customers , ordered by the total of checking and savings balances descending ?",
        "db_id": "small_bank_1",
        "gold_parse": "SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance DESC",
        "predicted_parse_with_values": "select T2.name , T1.balance , T1.balance from SAVINGS as T1 join ACCOUNTS as T2 on T1.custid = T2.custid join CHECKING as T3 on T2.custid = T3.custid order by T3.balance desc"
    },
    {
        "question": "What is the average price for flights from LA to Honolulu ?",
        "db_id": "flight_1",
        "gold_parse": "SELECT avg(price) FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\"",
        "predicted_parse_with_values": "select avg ( T2.price ) from aircraft as T1 join flight as T2 on T1.aid = T2.aid where T2.destination = \"Tokyo\" and T1.name = \"British Aerospace Jetstream 41\""
    },
    {
        "question": "what state has the smallest population",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM state WHERE population  =  ( SELECT MIN ( population ) FROM state )",
        "predicted_parse_with_values": "select state_name from state order by population limit 1"
    },
    {
        "question": "what is the highest point in the usa",
        "db_id": "geo",
        "gold_parse": "SELECT highest_point FROM highlow WHERE highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow )",
        "predicted_parse_with_values": "select max ( T2.highest_point ) from state as T1 join highlow as T2 on T1.state_name = T2.state_name where T1.country_name = \"dummy value\""
    },
    {
        "question": "what is the smallest city of the smallest state in the us",
        "db_id": "geo",
        "gold_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MIN ( population ) FROM city WHERE state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state ) ) ) AND state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state ) )",
        "predicted_parse_with_values": "select min ( T2.density ) from city as T1 join state as T2 on T1.state_name = T2.state_name where T1.state_name = \"dummy value\""
    },
    {
        "question": "Show year where a track with a seating at least 5000 opened and a track with seating no more than 4000 opened .",
        "db_id": "race_track",
        "gold_parse": "SELECT year_opened FROM track WHERE seating BETWEEN 4000 AND 5000",
        "predicted_parse_with_values": "select Year_Opened from track where Seating >= 81687.0 and Seating >= 81687.0"
    },
    {
        "question": "Which claim incurred the most number of settlements ? List the claim id , the date the claim was made , and the number .",
        "db_id": "insurance_policies",
        "gold_parse": "SELECT T1.claim_id ,  T1.date_claim_made ,  count(*) FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id  =  T2.claim_id GROUP BY T1.claim_id ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select Claim_ID , Date_Claim_Settled , count ( * ) from Claims group by Claim_ID order by count ( * ) desc limit 1"
    },
    {
        "question": "how many states are in the usa",
        "db_id": "geo",
        "gold_parse": "SELECT COUNT ( state_name ) FROM state",
        "predicted_parse_with_values": "select count ( * ) from state where country_name = \"dummy value\""
    },
    {
        "question": "What are the names of the different bank branches , and what are their total loan amounts ?",
        "db_id": "loan_1",
        "gold_parse": "SELECT sum(amount) ,  T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id GROUP BY T1.bname",
        "predicted_parse_with_values": "select sum ( amount ) , branch_ID from loan where loan_type = \"Mortgages\" group by branch_ID"
    },
    {
        "question": "Provide the last name of the youngest student .",
        "db_id": "allergy_1",
        "gold_parse": "SELECT LName FROM Student WHERE age  =  (SELECT min(age) FROM Student)",
        "predicted_parse_with_values": "select LName from Student order by Age limit 1"
    },
    {
        "question": "What are the first name and last name of the players who have weight above 220 or height below 75 ?",
        "db_id": "baseball_1",
        "gold_parse": "SELECT name_first ,  name_last FROM player WHERE weight  >  220 OR height  <  75",
        "predicted_parse_with_values": "select name_first , name_last from player group by name_first having count ( * ) > 1 or count ( * ) > 1 or count ( * ) > 1"
    },
    {
        "question": "Show the name of the party that has at least two records .",
        "db_id": "election",
        "gold_parse": "SELECT Party FROM party GROUP BY Party HAVING COUNT(*)  >=  2",
        "predicted_parse_with_values": "select Party from party group by Party having count ( * ) >= 1"
    },
    {
        "question": "What is the maximum length in meters for the bridges and what are the architects ' names ?",
        "db_id": "architecture",
        "gold_parse": "SELECT max(T1.length_meters) ,  T2.name FROM bridge AS T1 JOIN architect AS T2 ON T1.architect_id  =  T2.id",
        "predicted_parse_with_values": "select max ( T2.length_meters ) , T2.name from architect as T1 join bridge as T2 on T1.id = T2.architect_id group by T2.name order by T1.name"
    },
    {
        "question": "How many songs have a lead vocal ?",
        "db_id": "music_2",
        "gold_parse": "SELECT count(DISTINCT title) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE TYPE  =  \"lead\"",
        "predicted_parse_with_values": "select count ( * ) from Songs where SongId = \"dummy value\""
    },
    {
        "question": "what is the area of the largest state",
        "db_id": "geo",
        "gold_parse": "SELECT MAX ( area ) FROM state",
        "predicted_parse_with_values": "select area from state order by density desc limit 1"
    },
    {
        "question": "What is the name of the institution that \" Matthias Blume \" belongs to ?",
        "db_id": "icfp_1",
        "gold_parse": "SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  \"Matthias\" AND t1.lname  =  \"Blume\"",
        "predicted_parse_with_values": "select T3.name from Authors as T1 join Authorship as T2 on T1.authID = T2.authID join Inst as T3 on T2.instID = T3.instID where T1.fname = \"Katsuhiro\""
    },
    {
        "question": "What are the name and active date of the customers whose contact channel code is email ?",
        "db_id": "customers_and_addresses",
        "gold_parse": "SELECT t1.customer_name ,  t2.active_from_date FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.channel_code  =  'Email'",
        "predicted_parse_with_values": "select T2.customer_name , T1.active_to_date from Customer_Contact_Channels as T1 join Customers as T2 on T1.customer_id = T2.customer_id where T1.channel_code = \"Fax\""
    },
    {
        "question": "what is the population of the major cities in wisconsin",
        "db_id": "geo",
        "gold_parse": "SELECT population FROM city WHERE population  >  150000 AND state_name  =  \"wisconsin\"",
        "predicted_parse_with_values": "select population from state where state_name = \"dummy value\" group by capital order by count ( * ) desc limit 1"
    },
    {
        "question": "Find the distinct last names of all the students who have president votes and whose advisor is not 2192 .",
        "db_id": "voter_2",
        "gold_parse": "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  PRESIDENT_Vote EXCEPT SELECT DISTINCT LName FROM STUDENT WHERE Advisor  =  \"2192\"",
        "predicted_parse_with_values": "select T2.LName from Voting_record as T1 join Student as T2 on T1.Class_Senator_Vote = T2.StuID where T1.Class_President_Vote != 1021"
    },
    {
        "question": "How many movies did \" Quentin Tarantino \" direct after 2010 ?",
        "db_id": "imdb",
        "gold_parse": "SELECT COUNT ( DISTINCT t3.title  ) FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.name  =  \"Quentin Tarantino\" AND t3.release_year  >  2010",
        "predicted_parse_with_values": "select count ( * ) from producer as T1 join made_by as T2 on T1.pid = T2.pid join copyright as T3 on T2.msid = T3.msid join directed_by as T4 on T3.msid = T4.msid join director as T5 on T4.did = T5.did where T5.name = \"dummy value\" and T1.birth_year > \"dummy value\""
    },
    {
        "question": "How many papers are \" Atsushi Ohori \" the author of ?",
        "db_id": "icfp_1",
        "gold_parse": "SELECT count(*) FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Atsushi\" AND t1.lname  =  \"Ohori\"",
        "predicted_parse_with_values": "select count ( * ) from Authors where fname = \"Brent\""
    },
    {
        "question": "Show the people that have been comptroller the most times and the corresponding number of times .",
        "db_id": "election",
        "gold_parse": "SELECT Comptroller ,  COUNT(*) FROM party GROUP BY Comptroller ORDER BY COUNT(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select Comptroller , count ( * ) from party group by Comptroller order by count ( * ) desc limit 1"
    },
    {
        "question": "Which documents have more than 1 draft copies ? List document id and number of draft copies .",
        "db_id": "cre_Doc_Control_Systems",
        "gold_parse": "SELECT document_id , count(*) FROM Draft_Copies GROUP BY document_id HAVING count(*)  >  1",
        "predicted_parse_with_values": "select T1.document_id , count ( * ) from Documents as T1 join Document_Drafts as T2 on T1.document_id = T2.document_id join Draft_Copies as T3 on T2.document_id = T3.document_id group by T3.document_id having count ( * ) > 1"
    },
    {
        "question": "Which customer , who has made at least one payment , has spent the least money ? List his or her first name , last name , and the id .",
        "db_id": "sakila_1",
        "gold_parse": "SELECT T1.first_name ,  T1.last_name ,  T1.customer_id FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY sum(amount) ASC LIMIT 1",
        "predicted_parse_with_values": "select T2.first_name , T2.last_name , T1.payment_id , min ( T1.amount ) from payment as T1 join customer as T2 on T1.customer_id = T2.customer_id group by T1.customer_id having count ( * ) >= 1"
    },
    {
        "question": "List the name and the number of stations for all the cities that have at least 15 stations .",
        "db_id": "bike_1",
        "gold_parse": "SELECT city ,  COUNT(*) FROM station GROUP BY city HAVING COUNT(*)  >=  15",
        "predicted_parse_with_values": "select name , count ( * ) from station where city >= \"Palo Alto\" group by city"
    },
    {
        "question": "what is the population of the smallest state",
        "db_id": "geo",
        "gold_parse": "SELECT population FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state )",
        "predicted_parse_with_values": "select population from state order by density limit 1"
    },
    {
        "question": "What is the average age of students who have city code \" NYC \" and have secretary votes for the spring election cycle ?",
        "db_id": "voter_2",
        "gold_parse": "SELECT avg(T1.Age) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  SECRETARY_Vote WHERE T1.city_code  =  \"NYC\" AND T2.Election_Cycle  =  \"Spring\"",
        "predicted_parse_with_values": "select avg ( T2.Age ) from Voting_record as T1 join Student as T2 on T1.Class_Senator_Vote = T2.StuID where T2.city_code = \"ATL\" and T1.Secretary_Vote = 1030"
    },
    {
        "question": "Find all the cities that have 2 to 4 parks .",
        "db_id": "baseball_1",
        "gold_parse": "SELECT city FROM park GROUP BY city HAVING count(*) BETWEEN 2 AND 4",
        "predicted_parse_with_values": "select city from park group by city having count ( * ) >= 1"
    },
    {
        "question": "How many kids stay in the room DAMIEN TRACHSEL checked in on Sep 21 , 2010 ?",
        "db_id": "inn_1",
        "gold_parse": "SELECT Kids FROM Reservations WHERE CheckIn  =  \"2010-09-21\" AND FirstName  =  \"DAMIEN\" AND LastName  =  \"TRACHSEL\"",
        "predicted_parse_with_values": "select count ( * ) from Rooms as T1 join Reservations as T2 on T1.RoomId = T2.Room where T1.roomName = \"Immutable before decorum\" and T2.LastName = \"PORTO\" and T2.LastName = \"TOAN\""
    },
    {
        "question": "What is the name and city of the airport from most of the routes start ?",
        "db_id": "flight_4",
        "gold_parse": "SELECT T1.name ,  T1.city ,  T2.src_apid FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T2.src_apid ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select T3.name , T1.city from airports as T1 join routes as T2 on T1.apid = T2.src_apid join airlines as T3 on T2.alid = T3.alid group by T1.name order by count ( * ) desc limit 1"
    },
    {
        "question": "Who are the customers that had more than 1 policy ? List the customer details and id .",
        "db_id": "insurance_policies",
        "gold_parse": "SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.Customer_id GROUP BY T1.customer_id HAVING count(*)  >  1",
        "predicted_parse_with_values": "select T2.Customer_Details , T1.Customer_ID from Customer_Policies as T1 join Customers as T2 on T1.Customer_ID = T2.Customer_ID group by T2.Customer_ID having count ( * ) > 1"
    },
    {
        "question": "return me the keyword , which have been contained by the most number of papers in PVLDB .",
        "db_id": "academic",
        "gold_parse": "SELECT t1.keyword FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t2 ON t2.pid  =  t4.pid JOIN journal AS t3 ON t2.jid  =  t3.jid WHERE t3.name  =  \"PVLDB\" GROUP BY t1.keyword ORDER BY COUNT ( DISTINCT t2.title ) DESC LIMIT 1",
        "predicted_parse_with_values": "select keyword from keyword where count ( * ) = 1"
    },
    {
        "question": "Tell me the ages of the oldest and youngest students studying major 600 .",
        "db_id": "voter_2",
        "gold_parse": "SELECT max(Age) ,  min(Age) FROM STUDENT WHERE Major  =  600",
        "predicted_parse_with_values": "select Age , Age from Student where Major = 100 order by Age desc limit 1"
    },
    {
        "question": "what states have towns named springfield",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM city WHERE city_name  =  \"springfield\"",
        "predicted_parse_with_values": "select T2.state_name from city as T1 join state as T2 on T1.state_name = T2.state_name where T1.city_name = \"dummy value\""
    },
    {
        "question": "return me all the organizations in Databases area .",
        "db_id": "academic",
        "gold_parse": "SELECT t2.name FROM domain_author AS t4 JOIN author AS t1 ON t4.aid  =  t1.aid JOIN DOMAIN AS t3 ON t3.did  =  t4.did JOIN organization AS t2 ON t2.oid  =  t1.oid WHERE t3.name  =  \"Databases\"",
        "predicted_parse_with_values": "select name from organization where oid = \"dummy value\""
    },
    {
        "question": "what is the full name and id of the college with the largest number of baseball players ?",
        "db_id": "baseball_1",
        "gold_parse": "SELECT T1.name_full ,  T1.college_id FROM college AS T1 JOIN player_college AS T2 ON T1.college_id  =  T2.college_id GROUP BY T1.college_id ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select T2.name_full , T2.name_full , T1.college_id from player_college as T1 join college as T2 on T1.college_id = T2.college_id group by T2.college_id order by count ( * ) desc limit 1"
    },
    {
        "question": "Find the actor who played \" Alan Turing \" in the movie \" The Imitation Game \"",
        "db_id": "imdb",
        "gold_parse": "SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t2.role  =  \"Alan Turing\" AND t3.title  =  \"The Imitation Game\"",
        "predicted_parse_with_values": "select T1.name from actor as T1 join movie as T2 where T2.title = \"dummy value\""
    },
    {
        "question": "return me all the papers in PVLDB in \" University of Michigan \" .",
        "db_id": "academic",
        "gold_parse": "SELECT t5.title FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t4 ON t4.aid  =  t1.aid JOIN publication AS t5 ON t4.pid  =  t5.pid JOIN journal AS t3 ON t5.jid  =  t3.jid WHERE t3.name  =  \"PVLDB\" AND t2.name  =  \"University of Michigan\"",
        "predicted_parse_with_values": "select T1.oid from organization as T1 join author as T2 where T1.name = \"dummy value\" and T2.name = \"dummy value\""
    },
    {
        "question": "Find the total number of students enrolled in the colleges that were founded after the year of 1850 for each affiliation type .",
        "db_id": "university_basketball",
        "gold_parse": "SELECT sum(Enrollment) ,  affiliation FROM university WHERE founded  >  1850 GROUP BY affiliation",
        "predicted_parse_with_values": "select sum ( Enrollment ) , Affiliation from university group by Affiliation having sum ( Enrollment ) > 1"
    },
    {
        "question": "How many movies did \" Quentin Tarantino \" direct before 2002 and after 2010 ?",
        "db_id": "imdb",
        "gold_parse": "SELECT COUNT ( DISTINCT t4.title  ) FROM director AS t3 JOIN directed_by AS t2 ON t3.did  =  t2.did JOIN movie AS t4 ON t4.mid  =  t2.msid JOIN made_by AS t5 ON t4.mid  =  t5.msid JOIN producer AS t1 ON t1.pid  =  t5.pid WHERE t3.name  =  \"Quentin Tarantino\" AND t4.release_year  <  2010 AND t4.release_year  >  2002",
        "predicted_parse_with_values": "select count ( * ) from director as T1 join directed_by as T2 on T1.did = T2.did where T1.name = \"dummy value\" and T2.did < \"dummy value\""
    },
    {
        "question": "Find the venue of the competition \" 1994 FIFA World Cup qualification \" which was hosted by \" Nanjing ( Jiangsu ) \" .",
        "db_id": "city_record",
        "gold_parse": "SELECT T3.venue FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city JOIN MATCH AS T3 ON T2.match_id = T3.match_id WHERE T1.city = \"Nanjing ( Jiangsu )\" AND T3.competition = \"1994 FIFA World Cup qualification\"",
        "predicted_parse_with_values": "select Venue from match where Competition = \"1994 FIFA World Cup qualification\" and Competition = \"Friendly match\""
    },
    {
        "question": "What are all the addresses in East Julianaside , Texas or in Gleasonmouth , Arizona .",
        "db_id": "customers_and_addresses",
        "gold_parse": "SELECT address_content FROM addresses WHERE city  =  \"East Julianaside\" AND state_province_county  =  \"Texas\" UNION SELECT address_content FROM addresses WHERE city  =  \"Gleasonmouth\" AND state_province_county  =  \"Arizona\"",
        "predicted_parse_with_values": "select * from Addresses where city = \"Reingertown\" and state_province_county = \"NewMexico\" union select * from Addresses where city = \"Stantonville\" and state_province_county = \"Texas\""
    },
    {
        "question": "What are the names of all the states with college students playing in the mid position but no goalies ?",
        "db_id": "soccer_2",
        "gold_parse": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie'",
        "predicted_parse_with_values": "select state from College where enr = 19000 intersect select state from College where enr = 18000"
    },
    {
        "question": "Find the the customer details and id for the customers who had more than one policy .",
        "db_id": "insurance_policies",
        "gold_parse": "SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.Customer_id GROUP BY T1.customer_id HAVING count(*)  >  1",
        "predicted_parse_with_values": "select T2.Customer_Details , T1.Customer_ID from Customer_Policies as T1 join Customers as T2 on T1.Customer_ID = T2.Customer_ID group by T2.Customer_ID having count ( * ) > 1"
    },
    {
        "question": "Which institution is the author \" Matthias Blume \" belong to ? Give me the name of the institution .",
        "db_id": "icfp_1",
        "gold_parse": "SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  \"Matthias\" AND t1.lname  =  \"Blume\"",
        "predicted_parse_with_values": "select T3.name from Authors as T1 join Authorship as T2 on T1.authID = T2.authID join Inst as T3 on T2.instID = T3.instID where T1.fname = \"Aaron\""
    },
    {
        "question": "Give the distinct headquarters of manufacturers .",
        "db_id": "manufactory_1",
        "gold_parse": "SELECT DISTINCT headquarter FROM manufacturers",
        "predicted_parse_with_values": "select Founder from Manufacturers"
    },
    {
        "question": "What are the first names of all professors not teaching any classes ?",
        "db_id": "college_1",
        "gold_parse": "SELECT emp_fname FROM employee WHERE emp_jobcode  =  'PROF' EXCEPT SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num  =  T2.prof_num",
        "predicted_parse_with_values": "select T1.EMP_FNAME from EMPLOYEE as T1 join PROFESSOR as T2 on T1.EMP_NUM = T2.EMP_NUM where T2.DEPT_CODE not in ( select EMP_FNAME from EMPLOYEE )"
    },
    {
        "question": "Return the code of the document type that is most common .",
        "db_id": "cre_Docs_and_Epenses",
        "gold_parse": "SELECT document_type_code FROM Documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select Document_Type_Code from Ref_Document_Types group by Document_Type_Code order by count ( * ) desc limit 1"
    },
    {
        "question": "Who acts as \" Alan Turing \" in the movie \" The Imitation Game \" ?",
        "db_id": "imdb",
        "gold_parse": "SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t2.role  =  \"Alan Turing\" AND t3.title  =  \"The Imitation Game\"",
        "predicted_parse_with_values": "select T1.name from actor as T1 join movie as T2 where T2.title = \"dummy value\" and T2.title = \"dummy value\""
    },
    {
        "question": "what is the tallest mountain in the united states",
        "db_id": "geo",
        "gold_parse": "SELECT mountain_name FROM mountain WHERE mountain_altitude  =  ( SELECT MAX ( mountain_altitude ) FROM mountain )",
        "predicted_parse_with_values": "select mountain_name from mountain where state_name = \"dummy value\" order by mountain_altitude desc limit 1"
    },
    {
        "question": "Find the schools that were either founded after 1850 or public .",
        "db_id": "university_basketball",
        "gold_parse": "SELECT school FROM university WHERE founded  >  1850 OR affiliation  =  'Public'",
        "predicted_parse_with_values": "select School from university where Founded > 1766.0 or Founded = 1766.0"
    },
    {
        "question": "What are the different dorm amenity names in alphabetical order ?",
        "db_id": "dorm_1",
        "gold_parse": "SELECT amenity_name FROM dorm_amenity ORDER BY amenity_name",
        "predicted_parse_with_values": "select amenity_name from Dorm_amenity order by amenity_name"
    },
    {
        "question": "Find the settlement amount of the claim with the largest claim amount . Show both the settlement amount and claim amount .",
        "db_id": "insurance_policies",
        "gold_parse": "SELECT Amount_Settled ,  Amount_Claimed FROM Claims ORDER BY Amount_Claimed DESC LIMIT 1",
        "predicted_parse_with_values": "select T1.Amount_Settled , T2.Amount_Claimed from Claims as T1 join Settlements as T2 on T1.Claim_ID = T2.Claim_ID order by T2.Amount_Settled desc limit 1"
    },
    {
        "question": "For each zip code , what is the average mean temperature for all dates that start with ' 8 ' ?",
        "db_id": "bike_1",
        "gold_parse": "SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE \"8/%\" GROUP BY zip_code",
        "predicted_parse_with_values": "select zip_code , avg ( mean_humidity ) from weather where date like \"2/24/2015\" group by zip_code"
    },
    {
        "question": "Find the parties associated with the delegates from district 1. Who served as governors of the parties ?",
        "db_id": "election",
        "gold_parse": "SELECT T2.Governor FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.District  =  1",
        "predicted_parse_with_values": "select T2.Party from election as T1 join party as T2 on T1.Party = T2.Party_ID where T1.District = 1"
    },
    {
        "question": "How many professors teach a class with the code ACCT-211 ?",
        "db_id": "college_1",
        "gold_parse": "SELECT count(DISTINCT PROF_NUM) FROM CLASS WHERE CRS_CODE  =  \"ACCT-211\"",
        "predicted_parse_with_values": "select count ( CLASS_CODE ) from CLASS where CRS_CODE = \"ACCT-212\""
    },
    {
        "question": "What is the average account balance of customers with credit score below 50 for the different account types ?",
        "db_id": "loan_1",
        "gold_parse": "SELECT avg(acc_bal) ,  acc_type FROM customer WHERE credit_score  <  50 GROUP BY acc_type",
        "predicted_parse_with_values": "select acc_type , avg ( acc_bal ) from customer where credit_score < 210 group by acc_type"
    },
    {
        "question": "Show party names and the number of events for each party .",
        "db_id": "party_people",
        "gold_parse": "SELECT T2.party_name ,  count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id",
        "predicted_parse_with_values": "select Party_name , count ( * ) from party group by Party_name"
    },
    {
        "question": "What are the different schools and their nicknames , ordered by their founding years ?",
        "db_id": "university_basketball",
        "gold_parse": "SELECT school ,  nickname FROM university ORDER BY founded",
        "predicted_parse_with_values": "select School , Nickname from university order by Founded"
    },
    {
        "question": "what is the lowest point of the state with the largest area",
        "db_id": "geo",
        "gold_parse": "SELECT t2.lowest_point FROM state AS t1 JOIN highlow AS t2 ON t1.state_name  =  t2.state_name WHERE t1.state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) )",
        "predicted_parse_with_values": "select min ( T2.lowest_point ) from state as T1 join highlow as T2 on T1.state_name = T2.state_name where T1.area = ( select max ( area ) from state )"
    },
    {
        "question": "Which paper is published in an institution in \" USA \" and have \" Turon \" as its second author ?",
        "db_id": "icfp_1",
        "gold_parse": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid JOIN inst AS t4 ON t2.instid  =  t4.instid WHERE t4.country  =  \"USA\" AND t2.authorder  =  2 AND t1.lname  =  \"Turon\"",
        "predicted_parse_with_values": "select T3.paperID from Inst as T1 join Authorship as T2 on T1.instID = T2.instID join Papers as T3 on T2.paperID = T3.paperID where T1.country = \"France\" and T3.title = \"Functional Pearl: Modular Rollback through Control Logging\""
    },
    {
        "question": "Show the names of editors of age either 24 or 25 .",
        "db_id": "journal_committee",
        "gold_parse": "SELECT Name FROM editor WHERE Age  =  24 OR Age  =  25",
        "predicted_parse_with_values": "select Name from editor where Age = 35.0"
    },
    {
        "question": "What are the advisors",
        "db_id": "game_1",
        "gold_parse": "SELECT advisor FROM Student GROUP BY advisor HAVING count(*)  >=  2",
        "predicted_parse_with_values": "select ( Advisor ) from Student"
    },
    {
        "question": "what are the populations of the major cities of wisconsin",
        "db_id": "geo",
        "gold_parse": "SELECT population FROM city WHERE population  >  150000 AND state_name  =  \"wisconsin\"",
        "predicted_parse_with_values": "select population from state where state_name = \"dummy value\""
    },
    {
        "question": "Find the id and name of customers whose address contains WY state and do not use credit card for payment .",
        "db_id": "department_store",
        "gold_parse": "SELECT customer_id ,  customer_name FROM customers WHERE customer_address LIKE \"%WY%\" AND payment_method_code != \"Credit Card\"",
        "predicted_parse_with_values": "select customer_id , customer_name from Customers where payment_method_code like \"Credit Card\" except select customer_id , customer_name from Customers where payment_method_code like \"Direct Debit\""
    },
    {
        "question": "Show budget type codes and the number of documents in each budget type .",
        "db_id": "cre_Docs_and_Epenses",
        "gold_parse": "SELECT budget_type_code ,  count(*) FROM Documents_with_expenses GROUP BY budget_type_code",
        "predicted_parse_with_values": "select T1.Budget_Type_Code , count ( * ) from Ref_Budget_Codes as T1 join Documents_with_Expenses as T2 on T1.Budget_Type_Code = T2.Budget_Type_Code join Documents as T3 on T2.Document_ID = T3.Document_ID group by T3.Document_Type_Code"
    },
    {
        "question": "Find the average age of female ( sex is F ) students who have secretary votes in the spring election cycle .",
        "db_id": "voter_2",
        "gold_parse": "SELECT avg(T1.Age) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  SECRETARY_Vote WHERE T1.Sex  =  \"F\" AND T2.Election_Cycle  =  \"Spring\"",
        "predicted_parse_with_values": "select avg ( Age ) from Student where Sex = \"F\" and Age = 16"
    },
    {
        "question": "Find the names of accounts whose checking balance is above the average checking balance , but savings balance is below the average savings balance .",
        "db_id": "small_bank_1",
        "gold_parse": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM checking) INTERSECT SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM savings)",
        "predicted_parse_with_values": "select T2.name from CHECKING as T1 join ACCOUNTS as T2 on T1.custid = T2.custid where T1.balance > ( select avg ( balance ) from CHECKING )"
    },
    {
        "question": "what is the largest capital",
        "db_id": "geo",
        "gold_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( t1.population ) FROM state AS t2 JOIN city AS t1 ON t2.capital  =  t1.city_name )",
        "predicted_parse_with_values": "select T2.capital from city as T1 join state as T2 on T1.state_name = T2.state_name order by T1.population desc limit 1"
    },
    {
        "question": "what is the capital of the state texas",
        "db_id": "geo",
        "gold_parse": "SELECT capital FROM state WHERE state_name  =  \"texas\"",
        "predicted_parse_with_values": "select T2.capital from city as T1 join state as T2 on T1.state_name = T2.state_name where T1.state_name = \"dummy value\""
    },
    {
        "question": "What are lines 1 and 2 of the addressed of the customer with the email \" vbogisich @ example.org \" ?",
        "db_id": "customer_complaints",
        "gold_parse": "SELECT address_line_1 ,  address_line_2 FROM customers WHERE email_address  =  \"vbogisich@example.org\"",
        "predicted_parse_with_values": "select address_line_1 , address_line_2 from Customers where email_address = \"lavonne.frami@example.com\" and email_address = \"vbogisich@example.org\""
    },
    {
        "question": "What college has a student who successfully made the team in the role of a goalie ?",
        "db_id": "soccer_2",
        "gold_parse": "SELECT cName FROM  tryout WHERE decision  =  'yes' AND pPos  =  'goalie'",
        "predicted_parse_with_values": "select T2.cName from Tryout as T1 join College as T2 on T1.cName = T2.cName where T1.pPos = \"striker\""
    },
    {
        "question": "What are the addresses of customers living in Germany who have had an invoice ?",
        "db_id": "chinook_1",
        "gold_parse": "SELECT DISTINCT T1.Address FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  \"Germany\"",
        "predicted_parse_with_values": "select Address from Customer where Country = \"Belgium\""
    },
    {
        "question": "What are the first and last names of the performer who was in the back stage position for the song \" Badlands \" ?",
        "db_id": "music_2",
        "gold_parse": "SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Badlands\" AND T1.StagePosition  =  \"back\"",
        "predicted_parse_with_values": "select T1.Firstname , T1.Lastname from Band as T1 join Performance as T2 on T1.Id = T2.Bandmate where T2.StagePosition = \"dummy value\""
    },
    {
        "question": "Who are the different players and how many years has each played ?",
        "db_id": "match_season",
        "gold_parse": "SELECT Player ,  Years_Played FROM player",
        "predicted_parse_with_values": "select Player , sum ( Years_Played ) from player group by Player"
    },
    {
        "question": "What are the delegate and name of the county they belong to , for each county ?",
        "db_id": "election",
        "gold_parse": "SELECT T2.Delegate ,  T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District",
        "predicted_parse_with_values": "select T2.Delegate , T1.County_name , T1.County_name from county as T1 join election as T2 on T1.County_Id = T2.District"
    },
    {
        "question": "return me the number of keywords in the papers of \" University of Michigan \" .",
        "db_id": "academic",
        "gold_parse": "SELECT COUNT ( DISTINCT t1.keyword ) FROM organization AS t6 JOIN author AS t2 ON t6.oid  =  t2.oid JOIN writes AS t4 ON t4.aid  =  t2.aid JOIN publication AS t5 ON t4.pid  =  t5.pid JOIN publication_keyword AS t3 ON t5.pid  =  t3.pid JOIN keyword AS t1 ON t3.kid  =  t1.kid WHERE t6.name  =  \"University of Michigan\"",
        "predicted_parse_with_values": "select count ( * ) from organization as T1 join keyword as T2 where T1.name = \"dummy value\""
    },
    {
        "question": "what is the state with the largest population density",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM state WHERE density  =  ( SELECT MAX ( density ) FROM state )",
        "predicted_parse_with_values": "select state_name from state order by density desc limit 1"
    },
    {
        "question": "What are the title and id of the film which has a rental rate of 0.99 and an inventory of below 3 ?",
        "db_id": "sakila_1",
        "gold_parse": "SELECT title ,  film_id FROM film WHERE rental_rate  =  0.99 INTERSECT SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id HAVING count(*)  <  3",
        "predicted_parse_with_values": "select T3.title , T2.film_id from inventory as T1 join film_text as T2 join film as T3 on T1.film_id = T3.film_id where T3.rental_rate < 4.99 and T1.inventory_id = 4223"
    },
    {
        "question": "Show ids for all employees with at least 100000 salary .",
        "db_id": "flight_1",
        "gold_parse": "SELECT eid FROM Employee WHERE salary  >  100000",
        "predicted_parse_with_values": "select eid from employee where salary >= 23980"
    },
    {
        "question": "Return the the details of all products .",
        "db_id": "customers_and_addresses",
        "gold_parse": "SELECT DISTINCT product_details FROM products",
        "predicted_parse_with_values": "select product_details from Products"
    },
    {
        "question": "Give the names of tracks that do not have a race in the class 'GT ' .",
        "db_id": "race_track",
        "gold_parse": "SELECT name FROM track EXCEPT SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id WHERE T1.class  =  'GT'",
        "predicted_parse_with_values": "select Name from track where Track_ID not in ( select Track_ID from race where Class = \"DP/GT\" )"
    },
    {
        "question": "Show me the classrooms grade 5 is using .",
        "db_id": "student_1",
        "gold_parse": "SELECT DISTINCT classroom FROM list WHERE grade  =  5",
        "predicted_parse_with_values": "select Classroom from list where Grade = 2"
    },
    {
        "question": "what is the area of all the states combined",
        "db_id": "geo",
        "gold_parse": "SELECT SUM ( area ) FROM state",
        "predicted_parse_with_values": "select area from state"
    },
    {
        "question": "What are the ids of all stations that have a latitude above 37.4 and have never had less than 7 bikes available ?",
        "db_id": "bike_1",
        "gold_parse": "SELECT id FROM station WHERE lat  >  37.4 EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available)  <  7",
        "predicted_parse_with_values": "select id from station where lat > 37.335885 except select T1.id from station as T1 join status as T2 on T1.id = T2.station_id where T2.bikes_available < 9"
    },
    {
        "question": "How many students have a food allergy ?",
        "db_id": "allergy_1",
        "gold_parse": "SELECT count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy WHERE T2.allergytype  =  \"food\"",
        "predicted_parse_with_values": "select count ( StuID ) from Has_Allergy"
    },
    {
        "question": "Among all the claims , what is the settlement amount of the claim with the largest claim amount ? List both the settlement amount and claim amount .",
        "db_id": "insurance_policies",
        "gold_parse": "SELECT Amount_Settled ,  Amount_Claimed FROM Claims ORDER BY Amount_Claimed DESC LIMIT 1",
        "predicted_parse_with_values": "select Amount_Settled , Amount_Settled from Claims order by Amount_Claimed desc limit 1"
    },
    {
        "question": "Find all students taught by OTHA MOYER . Output the first and last names of the students .",
        "db_id": "student_1",
        "gold_parse": "SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"OTHA\" AND T2.lastname  =  \"MOYER\"",
        "predicted_parse_with_values": "select T2.FirstName , T1.LastName from teachers as T1 join list as T2 where T1.FirstName = \" LEIA\" and T1.LastName = \"MOYER\""
    },
    {
        "question": "number of people in boulder",
        "db_id": "geo",
        "gold_parse": "SELECT population FROM city WHERE city_name  =  \"boulder\"",
        "predicted_parse_with_values": "select count ( * ) from state where area = \"dummy value\""
    },
    {
        "question": "return me the number of papers in VLDB conference in \" University of Michigan \" .",
        "db_id": "academic",
        "gold_parse": "SELECT COUNT ( DISTINCT t5.title ) FROM organization AS t3 JOIN author AS t1 ON t3.oid  =  t1.oid JOIN writes AS t4 ON t4.aid  =  t1.aid JOIN publication AS t5 ON t4.pid  =  t5.pid JOIN conference AS t2 ON t5.cid  =  t2.cid WHERE t2.name  =  \"VLDB\" AND t3.name  =  \"University of Michigan\"",
        "predicted_parse_with_values": "select count ( T1.homepage ) from conference as T1 join publication as T2 on T1.cid = T2.cid join writes as T3 on T2.pid = T3.pid join author as T4 on T3.aid = T4.aid where T1.name = \"dummy value\" and T4.name = \"dummy value\""
    },
    {
        "question": "What are the different membership levels ?",
        "db_id": "shop_membership",
        "gold_parse": "SELECT count(DISTINCT LEVEL) FROM member",
        "predicted_parse_with_values": "select Level from member"
    },
    {
        "question": "Which state has the greatest total number of bank customers ?",
        "db_id": "loan_1",
        "gold_parse": "SELECT state FROM bank GROUP BY state ORDER BY sum(no_of_customers) DESC LIMIT 1",
        "predicted_parse_with_values": "select T1.state from customer as T1 join bank as T2 on T1.branch_ID = T2.branch_ID group by T1.state order by sum ( T2.no_of_customers ) desc limit 1"
    },
    {
        "question": "how many people live in the smallest state bordering wyoming",
        "db_id": "geo",
        "gold_parse": "SELECT population FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"wyoming\" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"wyoming\" )",
        "predicted_parse_with_values": "select count ( * ) from border_info where border != \"dummy value\""
    },
    {
        "question": "What are the names and ids of the different albums , and how many tracks are on each ?",
        "db_id": "chinook_1",
        "gold_parse": "SELECT T1.Title ,  T2.AlbumID ,  COUNT(*) FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId GROUP BY T2.AlbumID",
        "predicted_parse_with_values": "select Title , AlbumId , count ( * ) from Album group by AlbumId"
    },
    {
        "question": "What are the times of elimination for any instances in which the elimination was done by Punk or Orton ?",
        "db_id": "wrestler",
        "gold_parse": "SELECT TIME FROM elimination WHERE Eliminated_By  =  \"Punk\" OR Eliminated_By  =  \"Orton\"",
        "predicted_parse_with_values": "select T1.Time from Elimination as T1 join wrestler as T2 on T1.Wrestler_ID = T2.Wrestler_ID where T2.Name = \"Fishman\" or T1.Eliminated_By = \"Punk\""
    },
    {
        "question": "could you tell me what is the highest point in the state of texas",
        "db_id": "geo",
        "gold_parse": "SELECT highest_point FROM highlow WHERE state_name  =  \"texas\"",
        "predicted_parse_with_values": "select max ( T2.highest_point ) from state as T1 join highlow as T2 on T1.state_name = T2.state_name where T1.state_name = \"dummy value\""
    },
    {
        "question": "Which cities have higher temperature in Feb than in Jun or have once served as host cities ?",
        "db_id": "city_record",
        "gold_parse": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Feb  >  T2.Jun UNION SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city",
        "predicted_parse_with_values": "select T2.City from temperature as T1 join city as T2 on T1.City_ID = T2.City_ID where T1.Jun > 20.0 union select hosting_T4.Host_City from temperature as T5 join city as T4 on T5.City_ID = T4.City_ID join hosting_city as T5 on T4.City_ID = T5.Host_City where T3.Feb = 18.3"
    },
    {
        "question": "How many instrument does the musician with last name \" Heilo \" use ?",
        "db_id": "music_2",
        "gold_parse": "SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN Band AS T2 ON T1.bandmateid  =  T2.id WHERE T2.lastname  =  \"Heilo\"",
        "predicted_parse_with_values": "select T2.Instrument , count ( * ) from Band as T1 join Instruments as T2 on T1.Id = T2.BandmateId where T1.Lastname = \"dummy value\""
    },
    {
        "question": "What are the names and cities of bank branches that offer loans for business ?",
        "db_id": "loan_1",
        "gold_parse": "SELECT T1.bname ,  T1.city FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id WHERE T2.loan_type  =  'Business'",
        "predicted_parse_with_values": "select T3.cust_name , T2.city from loan as T1 join bank as T2 on T1.branch_ID = T2.branch_ID join customer as T3 on T2.branch_ID = T3.branch_ID where T1.loan_type = \"Auto\""
    },
    {
        "question": "What is the last name of the student who received an A in the class with the code 10018 ?",
        "db_id": "college_1",
        "gold_parse": "SELECT T1.stu_lname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE T2.enroll_grade  =  'A' AND T2.class_code  =  10018",
        "predicted_parse_with_values": "select T3.STU_LNAME from CLASS as T1 join ENROLL as T2 on T1.CLASS_CODE = T2.CLASS_CODE join STUDENT as T3 on T2.STU_NUM = T3.STU_NUM where T1.CLASS_CODE = 10017"
    },
    {
        "question": "List the medicine name and trade name which can both interact as 'inhibitor ' and 'activitor ' with enzymes .",
        "db_id": "medicine_enzyme_interaction",
        "gold_parse": "SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'inhibitor' INTERSECT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'activitor'",
        "predicted_parse_with_values": "select T3.name , T3.Trade_Name from enzyme as T1 join medicine_enzyme_interaction as T2 on T1.id = T2.enzyme_id join medicine as T3 on T2.medicine_id = T3.id where T1.name = \"Uroporphyrinogen III decarboxylase\" intersect select T6.name , T6.Trade_Name from enzyme as T4 join medicine_enzyme_interaction as T5 on T4.id = T5.enzyme_id join medicine as T6 on T5.medicine_id = T6.id where T4.name = \"Coproporphyrinogen III oxidase\""
    },
    {
        "question": "When and in what zip code did max temperature reach 80 ?",
        "db_id": "bike_1",
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
        "predicted_parse_with_values": "select T3.time , T1.zip_code from trip as T1 join weather as T2 join status as T3 where T2.max_temperature_f like 97"
    },
    {
        "question": "Return ids of all the products that are supplied by supplier id 2 and are more expensive than the average price of all products .",
        "db_id": "department_store",
        "gold_parse": "SELECT T1.product_id FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id  =  T2.product_id WHERE T1.supplier_id  =  2 AND T2.product_price  >  (SELECT avg(product_price) FROM products)",
        "predicted_parse_with_values": "select T2.product_id from Products as T1 join Product_Suppliers as T2 on T1.product_id = T2.product_id where T1.product_price > ( select avg ( Product_T3.total_value_purchased ) from Suppliers as T3 join Product_Suppliers as T4 on T3.supplier_id = T4.supplier_id ) and T3.supplier_name = \"AB Store\""
    },
    {
        "question": "What are the names of modern rooms that have a base price lower than $ 160 and two beds .",
        "db_id": "inn_1",
        "gold_parse": "SELECT roomName FROM Rooms WHERE basePrice  <  160 AND beds =  2 AND decor  =  'modern'",
        "predicted_parse_with_values": "select roomName from Rooms where basePrice < 250 and bedType < \"Double\""
    },
    {
        "question": "From which hometowns did no gymnasts come from ?",
        "db_id": "gymnast",
        "gold_parse": "SELECT DISTINCT Hometown FROM people EXCEPT SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID",
        "predicted_parse_with_values": "select Hometown from people where Hometown not in ( select Gymnast_ID from gymnast )"
    },
    {
        "question": "What is the document type name and the document type description and creation date for all the documents ?",
        "db_id": "cre_Docs_and_Epenses",
        "gold_parse": "SELECT T1.document_type_name ,  T1.document_type_description ,  T2.Document_date FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code  =  T2.document_type_code",
        "predicted_parse_with_values": "select Document_Type_Name , Document_Type_Description from Ref_Document_Types"
    },
    {
        "question": "Return the title and inventory id of the film that is rented most often .",
        "db_id": "sakila_1",
        "gold_parse": "SELECT T1.title ,  T2.inventory_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id JOIN rental AS T3 ON T2.inventory_id  =  T3.inventory_id GROUP BY T2.inventory_id ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select T2.title , T1.inventory_id from inventory as T1 join film_text as T2 join rental as T3 on T1.inventory_id = T3.inventory_id group by T3.inventory_id order by count ( * ) desc limit 1"
    },
    {
        "question": "Show the date and venue of each workshop in ascending alphabetical order of the venue .",
        "db_id": "workshop_paper",
        "gold_parse": "SELECT Date ,  Venue FROM workshop ORDER BY Venue",
        "predicted_parse_with_values": "select Date , Venue from workshop order by Venue asc"
    },
    {
        "question": "What are the average , minimum , and max ages for each of the different majors ?",
        "db_id": "game_1",
        "gold_parse": "SELECT major ,  avg(age) ,  min(age) ,  max(age) FROM Student GROUP BY major",
        "predicted_parse_with_values": "select avg ( Age ) , max ( Age ) , max ( Age ) , max ( Age ) , max ( Age ) , max ( Age ) , max ( Age ) , max ( Age ) , max ( Age ) , max ( Age ) , max ( Age ) , max ( Age ) , max ( Age ) , max ( Age ) , max ( Age ) , max ( Age ) , max ( Age ) from Student group by Major"
    },
    {
        "question": "what is the density of the wyoming",
        "db_id": "geo",
        "gold_parse": "SELECT density FROM state WHERE state_name  =  \"wyoming\"",
        "predicted_parse_with_values": "select density from state where area = \"dummy value\""
    },
    {
        "question": "What kind of decor has the least number of reservations ?",
        "db_id": "inn_1",
        "gold_parse": "SELECT T2.decor FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T2.decor ORDER BY count(T2.decor) ASC LIMIT 1",
        "predicted_parse_with_values": "select T1.decor from Rooms as T1 join Reservations as T2 on T1.RoomId = T2.Room group by T1.decor order by count ( * ) limit 1"
    },
    {
        "question": "which state has the sparsest population density",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM state WHERE density  =  ( SELECT MIN ( density ) FROM state )",
        "predicted_parse_with_values": "select state_name from state order by density asc limit 1"
    },
    {
        "question": "What are the names and players of all the clubs ?",
        "db_id": "sports_competition",
        "gold_parse": "SELECT T1.name ,  T2.Player_id FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID",
        "predicted_parse_with_values": "select T1.name , T2.name from club as T1 join player as T2 on T1.Club_ID = T2.Club_ID"
    },
    {
        "question": "Which buildings have more than one company offices ? Give me the building names .",
        "db_id": "company_office",
        "gold_parse": "SELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id GROUP BY T1.building_id HAVING COUNT(*)  >  1",
        "predicted_parse_with_values": "select name from buildings group by name having count ( * ) > 1"
    },
    {
        "question": "what rivers flow through states that border the state with the largest population",
        "db_id": "geo",
        "gold_parse": "SELECT river_name FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name IN ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state ) ) )",
        "predicted_parse_with_values": "select T1.river_name from river as T1 join state as T2 on T1.traverse = T2.state_name join border_info as T3 on T2.state_name = T3.border where T3.border = ( select max ( population ) from state )"
    },
    {
        "question": "Return the name of the team and the acc during the regular season for the school that was founded the earliest .",
        "db_id": "university_basketball",
        "gold_parse": "SELECT t2.team_name ,  t2.ACC_Regular_Season FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t1.founded LIMIT 1",
        "predicted_parse_with_values": "select T2.Team_Name , T1.School from university as T1 join basketball_match as T2 on T1.School_ID = T2.School_ID order by T2.ACC_Regular_Season limit 1"
    },
    {
        "question": "For each player , what are their name , season , and country that they belong to ?",
        "db_id": "match_season",
        "gold_parse": "SELECT T2.Season ,  T2.Player ,  T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country",
        "predicted_parse_with_values": "select T2.Name , T1.Season , T1.Country from match_season as T1 join team as T2 on T1.Team = T2.Team_id"
    },
    {
        "question": "What is the name , address , and number of students in the departments that have the 3 most students ?",
        "db_id": "college_1",
        "gold_parse": "SELECT T2.dept_name ,  T2.dept_address ,  count(*) FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 3",
        "predicted_parse_with_values": "select DEPT_NAME , DEPT_ADDRESS , count ( * ) from DEPARTMENT group by DEPT_NAME order by count ( * ) desc limit 1"
    },
    {
        "question": "what is the population of the capital of the largest state",
        "db_id": "geo",
        "gold_parse": "SELECT population FROM city WHERE city_name  =  ( SELECT capital FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) )",
        "predicted_parse_with_values": "select T2.population from city as T1 join state as T2 on T1.state_name = T2.state_name where T1.state_name = ( select capital from state order by density desc limit 1 )"
    },
    {
        "question": "return me the number of papers after 2000 in \" University of Michigan \" .",
        "db_id": "academic",
        "gold_parse": "SELECT COUNT ( DISTINCT t4.title ) FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t3 ON t3.aid  =  t1.aid JOIN publication AS t4 ON t3.pid  =  t4.pid WHERE t2.name  =  \"University of Michigan\" AND t4.year  >  2000",
        "predicted_parse_with_values": "select count ( pid ) from publication where year > \"dummy value\" and year = \"dummy value\""
    },
    {
        "question": "How many types of products have Rodrick Heaney bought in total ?",
        "db_id": "customers_and_addresses",
        "gold_parse": "SELECT count(DISTINCT t3.product_id) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t1.customer_name  =  \"Rodrick Heaney\"",
        "predicted_parse_with_values": "select count ( * ) from Customers where customer_name = \"Tillman Ernser\""
    },
    {
        "question": "How many students are older than 20 in each dorm ?",
        "db_id": "dorm_1",
        "gold_parse": "SELECT count(*) ,  T3.dorm_name FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T1.age  >  20 GROUP BY T3.dorm_name",
        "predicted_parse_with_values": "select count ( * ) , T3.dorm_name from Student as T1 join Lives_in as T2 on T1.StuID = T2.stuid join Dorm as T3 on T2.dormid = T3.dormid where T1.Age > 22 group by T3.dorm_name"
    },
    {
        "question": "Return the minimum , average and maximum distances traveled across all aircrafts .",
        "db_id": "flight_1",
        "gold_parse": "SELECT min(distance) ,  avg(distance) ,  max(distance) FROM Aircraft",
        "predicted_parse_with_values": "select min ( distance ) , max ( distance ) , max ( distance ) from flight"
    },
    {
        "question": "Find the name of customers who did not pay with Cash .",
        "db_id": "customers_and_addresses",
        "gold_parse": "SELECT customer_name FROM customers WHERE payment_method != 'Cash'",
        "predicted_parse_with_values": "select customer_name from Customers where customer_id not in ( select customer_id from Customer_Orders )"
    },
    {
        "question": "What is the minimum , average , and maximum distance of all aircrafts .",
        "db_id": "flight_1",
        "gold_parse": "SELECT min(distance) ,  avg(distance) ,  max(distance) FROM Aircraft",
        "predicted_parse_with_values": "select min ( T2.distance ) , avg ( T1.distance ) , max ( T1.distance ) from flight as T1 join aircraft as T2 on T1.aid = T2.aid"
    },
    {
        "question": "Find the country of origin for the artist who made the least number of songs ?",
        "db_id": "music_1",
        "gold_parse": "SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name GROUP BY T2.artist_name ORDER BY count(*) LIMIT 1",
        "predicted_parse_with_values": "select country from song group by country order by count ( * ) desc limit 1"
    },
    {
        "question": "Show the names and locations of institutions that are founded after 1990 and have the type \" Private \" .",
        "db_id": "protein_institute",
        "gold_parse": "SELECT institution ,  LOCATION FROM institution WHERE founded  >  1990 AND TYPE  =  'Private'",
        "predicted_parse_with_values": "select Institution , Location from Institution where Type > \"Tribal\""
    },
    {
        "question": "List the total points of gymnasts in descending order .",
        "db_id": "gymnast",
        "gold_parse": "SELECT Total_Points FROM gymnast ORDER BY Total_Points DESC",
        "predicted_parse_with_values": "select Total_Points from gymnast order by Vault_Points desc"
    },
    {
        "question": "Find the male friend of Alice whose job is a doctor ?",
        "db_id": "network_2",
        "gold_parse": "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name  =  'Alice' AND T1.gender  =  'male' AND T1.job  =  'doctor'",
        "predicted_parse_with_values": "select T2.friend from Person as T1 join PersonFriend as T2 on T1.name = T2.friend where T1.job = \"student\" and T1.job = \"student\""
    },
    {
        "question": "What are the average score and average staff number of all shops ?",
        "db_id": "coffee_shop",
        "gold_parse": "SELECT avg(num_of_staff) ,  avg(score) FROM shop",
        "predicted_parse_with_values": "select avg ( Score ) , avg ( Score ) from shop"
    },
    {
        "question": "In zip code 94107 , on which day neither Fog nor Rain was not observed ?",
        "db_id": "bike_1",
        "gold_parse": "SELECT date FROM weather WHERE zip_code  =  94107 AND EVENTS != \"Fog\" AND EVENTS != \"Rain\"",
        "predicted_parse_with_values": "select date from weather where zip_code = 94041 except select time from status"
    },
    {
        "question": "Return the highest acc percent across all basketball matches .",
        "db_id": "university_basketball",
        "gold_parse": "SELECT acc_percent FROM basketball_match ORDER BY acc_percent DESC LIMIT 1",
        "predicted_parse_with_values": "select max ( ACC_Percent ) from basketball_match"
    },
    {
        "question": "Find the name , enrollment of the colleges whose size is bigger than 10000 and location is in state LA .",
        "db_id": "soccer_2",
        "gold_parse": "SELECT cName ,  enr FROM College WHERE enr  >  10000 AND state = \"LA\"",
        "predicted_parse_with_values": "select cName , enr from College where state > \"FL\" and state = \"AZ\""
    },
    {
        "question": "What are the average rating and resolution of songs that are in Bangla ?",
        "db_id": "music_1",
        "gold_parse": "SELECT avg(rating) ,  avg(resolution) FROM song WHERE languages  =  \"bangla\"",
        "predicted_parse_with_values": "select avg ( rating ) , resolution from song where languages = \"bangla\""
    },
    {
        "question": "which state has the largest city",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city )",
        "predicted_parse_with_values": "select state_name from state order by density desc limit 1"
    },
    {
        "question": "how many states have a higher point than the highest point of the state with the largest capital city in the us",
        "db_id": "geo",
        "gold_parse": "SELECT COUNT ( state_name ) FROM highlow WHERE highest_elevation  >  ( SELECT highest_elevation FROM highlow WHERE state_name  =  ( SELECT state_name FROM state WHERE capital  =  ( SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city ) ) ) )",
        "predicted_parse_with_values": "select count ( * ) from state as T1 join highlow as T2 on T1.state_name = T2.state_name where T2.highest_point > ( select max ( T4.highest_point ) from state as T3 join highlow as T4 on T3.state_name = T4.state_name where T3.capital = \"dummy value\" )"
    },
    {
        "question": "Find the total revenue of companies whose revenue is larger than the revenue of some companies based in Austin .",
        "db_id": "manufactory_1",
        "gold_parse": "SELECT sum(revenue) FROM manufacturers WHERE revenue  >  (SELECT min(revenue) FROM manufacturers WHERE headquarter  =  'Austin')",
        "predicted_parse_with_values": "select sum ( Revenue ) from Manufacturers where Founder = ( select Revenue from Manufacturers where Founder = \"John\" )"
    },
    {
        "question": "How many different players trained for more than 1000 hours ?",
        "db_id": "soccer_2",
        "gold_parse": "SELECT count(*) FROM Player WHERE HS  >  1000",
        "predicted_parse_with_values": "select count ( pName ) from Player where HS > 1600"
    },
    {
        "question": "what is the highest point of the state with the smallest population density",
        "db_id": "geo",
        "gold_parse": "SELECT highest_point FROM highlow WHERE state_name IN ( SELECT state_name FROM state WHERE density  =  ( SELECT MIN ( density ) FROM state ) )",
        "predicted_parse_with_values": "select max ( T2.highest_point ) from state as T1 join highlow as T2 on T1.state_name = T2.state_name where T1.population = ( select min ( T3.density ) from state as T3 join highlow as T4 on T3.state_name = T4.state_name ) order by T4.highest_point limit 1"
    },
    {
        "question": "Find the names of the clubs that have at least a member from the city with city code \" HOU \" .",
        "db_id": "club_1",
        "gold_parse": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.city_code  =  \"HOU\"",
        "predicted_parse_with_values": "select T3.ClubName from Student as T1 join Member_of_club as T2 on T1.StuID = T2.StuID join Club as T3 on T2.ClubID = T3.ClubID where T1.city_code = \"BAL\""
    },
    {
        "question": "What is the venue of the competition \" 1994 FIFA World Cup qualification \" hosted by \" Nanjing ( Jiangsu ) \" ?",
        "db_id": "city_record",
        "gold_parse": "SELECT T3.venue FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city JOIN MATCH AS T3 ON T2.match_id = T3.match_id WHERE T1.city = \"Nanjing ( Jiangsu )\" AND T3.competition = \"1994 FIFA World Cup qualification\"",
        "predicted_parse_with_values": "select Venue from match where Competition = \"1994 FIFA World Cup qualification\" and Competition = \"2002 FIFA World Cup qualification\""
    },
    {
        "question": "Which customer have the most policies ? Give me the customer details .",
        "db_id": "insurance_and_eClaims",
        "gold_parse": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t2.customer_details ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select Customer_Details from Customers group by Customer_ID order by count ( * ) desc limit 1"
    },
    {
        "question": "what are the populations of the states through which the mississippi run",
        "db_id": "geo",
        "gold_parse": "SELECT population FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" )",
        "predicted_parse_with_values": "select T2.population from river as T1 join state as T2 on T1.traverse = T2.state_name where T1.river_name = \"dummy value\""
    },
    {
        "question": "How many movies about Persians were released after 1990 ?",
        "db_id": "imdb",
        "gold_parse": "SELECT COUNT ( DISTINCT t3.title  ) FROM tags AS t2 JOIN keyword AS t1 ON t2.kid  =  t1.id JOIN movie AS t3 ON t2.msid  =  t3.mid WHERE t1.keyword  =  \"Persians\" AND t3.release_year  >  1990",
        "predicted_parse_with_values": "select count ( * ) from movie where release_year > \"dummy value\" and release_year > \"dummy value\""
    },
    {
        "question": "return me the number of conferences which have papers by \" H. V. Jagadish \" .",
        "db_id": "academic",
        "gold_parse": "SELECT COUNT ( DISTINCT t2.name ) FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\"",
        "predicted_parse_with_values": "select count ( * ) from conference as T1 join publication as T2 on T1.cid = T2.cid join writes as T3 on T2.pid = T3.pid join author as T4 on T3.aid = T4.aid where T4.name = \"dummy value\""
    },
    {
        "question": "What are the ids and names of the architects who built at least 3 bridges ?",
        "db_id": "architecture",
        "gold_parse": "SELECT T1.id ,  T1.name FROM architect AS T1 JOIN bridge AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  >=  3",
        "predicted_parse_with_values": "select T2.architect_id , T1.name from architect as T1 join bridge as T2 on T1.id = T2.architect_id group by T2.architect_id having count ( * ) >= 1"
    },
    {
        "question": "Find the number of classes in each department .",
        "db_id": "college_1",
        "gold_parse": "SELECT count(*) ,  dept_code FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code  =  T2.crs_code GROUP BY dept_code",
        "predicted_parse_with_values": "select count ( * ) , T4.DEPT_NAME from CLASS as T1 join ENROLL as T2 on T1.CLASS_CODE = T2.CLASS_CODE join STUDENT as T3 on T2.STU_NUM = T3.STU_NUM join DEPARTMENT as T4 on T3.DEPT_CODE = T4.DEPT_CODE group by T4.DEPT_NAME"
    },
    {
        "question": "What are the total points for all gymnasts , ordered by total points descending ?",
        "db_id": "gymnast",
        "gold_parse": "SELECT Total_Points FROM gymnast ORDER BY Total_Points DESC",
        "predicted_parse_with_values": "select sum ( Total_Points ) from gymnast order by Total_Points desc"
    },
    {
        "question": "Which cities have lower temperature in March than in July and have been once host cities ?",
        "db_id": "city_record",
        "gold_parse": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Jul INTERSECT SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city",
        "predicted_parse_with_values": "select T1.City from city as T1 join hosting_city as T2 on T1.City_ID = T2.Host_City where hosting_T1.Year = 2011 and hosting_T1.Year < ( select min ( hosting_T4.Year ) from temperature as T5 join city as T4 on T5.City_ID = T4.City_ID join hosting_city as T5 on T4.City_ID = T5.Host_City where T3.Jul = 27.8 group by hosting_T4.Host_City having count ( * ) >= 1 )"
    },
    {
        "question": "How many instruments does the song \" Badlands \" use ?",
        "db_id": "music_2",
        "gold_parse": "SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Badlands\"",
        "predicted_parse_with_values": "select count ( * ) from Songs where Title = \"dummy value\""
    },
    {
        "question": "Which cities ' temperature in March is lower than that in July or higher than that in Oct ?",
        "db_id": "city_record",
        "gold_parse": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Jul OR T2.Mar  >  T2.Oct",
        "predicted_parse_with_values": "select T2.City from temperature as T1 join city as T2 on T1.City_ID = T2.City_ID where T1.Jul = 20.6 or T1.Oct >= 28.3 union select T4.City from temperature as T3 join city as T4 on T3.City_ID = T4.City_ID where T3.Oct > 30.6"
    },
    {
        "question": "Which faculty members are playing either Canoeing or Kayaking ? Tell me their first names .",
        "db_id": "activity_1",
        "gold_parse": "SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' OR T3.activity_name  =  'Kayaking'",
        "predicted_parse_with_values": "select T3.Fname from Activity as T1 join Faculty_Participates_in as T2 on T1.actid = T2.actid join Faculty as T3 on T2.FacID = T3.FacID where T1.activity_name = \"Spelunking\" or T1.activity_name = \"Baseball\""
    },
    {
        "question": "What is the highest , lowest , and average student GPA for every department ?",
        "db_id": "college_1",
        "gold_parse": "SELECT max(stu_gpa) ,  avg(stu_gpa) ,  min(stu_gpa) ,  dept_code FROM student GROUP BY dept_code",
        "predicted_parse_with_values": "select max ( STU_GPA ) , min ( STU_GPA ) , avg ( STU_GPA ) , avg ( STU_GPA ) , avg ( STU_GPA ) from STUDENT group by ( STU_GPA )"
    },
    {
        "question": "where is the highest point in texas",
        "db_id": "geo",
        "gold_parse": "SELECT highest_point FROM highlow WHERE state_name  =  \"texas\"",
        "predicted_parse_with_values": "select T1.area from state as T1 join highlow as T2 on T1.state_name = T2.state_name where T2.state_name = \"dummy value\" order by T2.highest_point desc limit 1"
    },
    {
        "question": "return me the journals , which have more than 60 papers containing keyword \" Relational Database \" .",
        "db_id": "academic",
        "gold_parse": "SELECT t3.name FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t2 ON t2.pid  =  t4.pid JOIN journal AS t3 ON t2.jid  =  t3.jid WHERE t1.keyword  =  \"Relational Database\" GROUP BY t3.name HAVING COUNT ( DISTINCT t2.title )  >  60",
        "predicted_parse_with_values": "select T1.jid from domain_journal as T1 join journal as T2 on T1.jid = T2.jid join publication as T3 on T2.jid = T3.jid join publication_keyword as T4 on T3.pid = T4.pid join keyword as T5 on T4.kid = T5.kid where T5.keyword = \"dummy value\" group by T1.jid having count ( T5.keyword ) > 1"
    },
    {
        "question": "what state has the largest area",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state )",
        "predicted_parse_with_values": "select state_name from state order by area desc limit 1"
    },
    {
        "question": "Find the name of the candidates whose oppose percentage is the lowest for each sex .",
        "db_id": "candidate_poll",
        "gold_parse": "SELECT t1.name ,  t1.sex ,  min(oppose_rate) FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex",
        "predicted_parse_with_values": "select T1.Name , T1.Sex from people as T1 join candidate as T2 on T1.People_ID = T2.People_ID order by T2.Support_rate limit 1"
    },
    {
        "question": "What are the names , headquarters and founders of the company with the highest revenue ?",
        "db_id": "manufactory_1",
        "gold_parse": "SELECT name ,  headquarter ,  founder FROM manufacturers ORDER BY revenue DESC LIMIT 1",
        "predicted_parse_with_values": "select Name , Founder , Founder from Manufacturers order by Revenue desc limit 1"
    },
    {
        "question": "return me the papers written by \" H. V. Jagadish \" and \" Divesh Srivastava \" .",
        "db_id": "academic",
        "gold_parse": "SELECT t5.title FROM writes AS t3 JOIN author AS t2 ON t3.aid  =  t2.aid JOIN publication AS t5 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t2.name  =  \"H. V. Jagadish\" AND t1.name  =  \"Divesh Srivastava\"",
        "predicted_parse_with_values": "select T3.name , T2.pid from organization as T1 join writes as T2 join domain as T3 where T1.name = \"dummy value\" intersect select T10.name from author as T10 join writes as T8 on T10.aid = T8.aid join publication as T9 on T8.pid = T9.pid join publication_keyword as T10 on T9.pid = T10.pid join keyword as T8 on T10.kid = T8.kid join domain_keyword as T9 on T8.kid = T9.kid join domain as T10 on T9.did = T10.did where T4.name = \"dummy value\""
    },
    {
        "question": "Who has friends that are younger than the average age ?",
        "db_id": "network_2",
        "gold_parse": "SELECT DISTINCT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.age  <  (SELECT avg(age) FROM person)",
        "predicted_parse_with_values": "select T2.name from Person as T1 join PersonFriend as T2 on T1.name = T2.friend where T1.age < ( select avg ( age ) from Person )"
    },
    {
        "question": "what are the genres of movies directed by \" Asghar Farhadi \"",
        "db_id": "imdb",
        "gold_parse": "SELECT t3.genre FROM director AS t5 JOIN directed_by AS t2 ON t5.did  =  t2.did JOIN movie AS t4 ON t4.mid  =  t2.msid JOIN classification AS t1 ON t4.mid  =  t1.msid JOIN genre AS t3 ON t3.gid  =  t1.gid WHERE t5.name  =  \"Asghar Farhadi\"",
        "predicted_parse_with_values": "select T5.genre from actor as T1 join cast as T2 on T1.aid = T2.aid join copyright as T3 on T2.msid = T3.msid join classification as T4 on T3.msid = T4.msid join genre as T5 on T4.gid = T5.gid where T1.name = \"dummy value\""
    },
    {
        "question": "return me the paper after 2000 with the most citations .",
        "db_id": "academic",
        "gold_parse": "SELECT title FROM publication WHERE YEAR  >  2000 ORDER BY citation_num DESC LIMIT 1",
        "predicted_parse_with_values": "select count ( T1.jid ) , T1.year from publication as T1 join writes as T2 on T1.pid = T2.pid join author as T3 on T2.aid = T3.aid where T1.year > \"dummy value\" group by T3.name order by count ( T1.year ) desc"
    },
    {
        "question": "Find the total number of hours have done for all students in each department .",
        "db_id": "college_1",
        "gold_parse": "SELECT sum(stu_hrs) ,  dept_code FROM student GROUP BY dept_code",
        "predicted_parse_with_values": "select sum ( STU_NUM ) , DEPT_CODE from STUDENT group by DEPT_CODE"
    },
    {
        "question": "What is the name of the bank branch that has lent the greatest amount ?",
        "db_id": "loan_1",
        "gold_parse": "SELECT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id GROUP BY T1.bname ORDER BY sum(T2.amount) DESC LIMIT 1",
        "predicted_parse_with_values": "select T2.bname from loan as T1 join bank as T2 on T1.branch_ID = T2.branch_ID order by T1.amount desc limit 1"
    },
    {
        "question": "What are the albums produced in year 2010 ?",
        "db_id": "music_2",
        "gold_parse": "SELECT * FROM Albums WHERE YEAR  =  2010",
        "predicted_parse_with_values": "select Title from Albums where Year = \"dummy value\""
    },
    {
        "question": "how long is the shortest river in the usa",
        "db_id": "geo",
        "gold_parse": "SELECT LENGTH FROM river WHERE LENGTH  =  ( SELECT MIN ( LENGTH ) FROM river )",
        "predicted_parse_with_values": "select T1.length from river as T1 join state as T2 on T1.traverse = T2.state_name where T2.country_name = \"dummy value\" order by T1.length limit 1"
    },
    {
        "question": "With which kind of payment method were the least number of payments processed ?",
        "db_id": "insurance_policies",
        "gold_parse": "SELECT Payment_Method_Code FROM Payments GROUP BY Payment_Method_Code ORDER BY count(*) ASC LIMIT 1",
        "predicted_parse_with_values": "select Payment_Method_Code from Payments group by Payment_Method_Code order by count ( * ) limit 1"
    },
    {
        "question": "In 2014 , what are the id and rank of the team that has the largest average number of attendance ?",
        "db_id": "baseball_1",
        "gold_parse": "SELECT T2.team_id ,  T2.rank FROM home_game AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id WHERE T1.year  =  2014 GROUP BY T1.team_id ORDER BY avg(T1.attendance) DESC LIMIT 1",
        "predicted_parse_with_values": "select div_id , rank from team where year = 1885 group by div_id order by avg ( attendance ) desc limit 1"
    },
    {
        "question": "What is the average amount of items ordered in each order ?",
        "db_id": "customers_and_addresses",
        "gold_parse": "SELECT avg(order_quantity) FROM order_items",
        "predicted_parse_with_values": "select avg ( T2.order_quantity ) , T1.order_id from Customer_Orders as T1 join Order_Items as T2 on T1.order_id = T2.order_id group by T1.order_id"
    },
    {
        "question": "How many games are played for all students ?",
        "db_id": "game_1",
        "gold_parse": "SELECT sum(gamesplayed) FROM Sportsinfo",
        "predicted_parse_with_values": "select count ( * ) from Plays_Games"
    },
    {
        "question": "which state has the largest density",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM state WHERE density  =  ( SELECT MAX ( density ) FROM state )",
        "predicted_parse_with_values": "select state_name from state order by density desc limit 1"
    },
    {
        "question": "what is the largest state bordering california",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"california\" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"california\" )",
        "predicted_parse_with_values": "select T1.state_name , T1.state_name from border_info as T1 join state as T2 on T1.border = T2.state_name where T1.border = \"dummy value\" order by T2.density desc limit 1"
    },
    {
        "question": "Return the most common full name among all actors .",
        "db_id": "sakila_1",
        "gold_parse": "SELECT first_name ,  last_name FROM actor GROUP BY first_name ,  last_name ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select first_name , last_name from actor group by actor_id order by count ( * ) desc limit 1"
    },
    {
        "question": "which states border no other states",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM state WHERE state_name NOT IN ( SELECT state_name FROM border_info )",
        "predicted_parse_with_values": "select state_name from state except select border from border_info"
    },
    {
        "question": "return me the citations of each paper in PVLDB .",
        "db_id": "academic",
        "gold_parse": "SELECT t2.citation_num FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\"",
        "predicted_parse_with_values": "select T1.jid from publication as T1 join writes as T2 on T1.pid = T2.pid join author as T3 on T2.aid = T3.aid where T3.name = \"dummy value\""
    },
    {
        "question": "Count the number of distinct governors .",
        "db_id": "election",
        "gold_parse": "SELECT count(DISTINCT Governor) FROM party",
        "predicted_parse_with_values": "select count ( Lieutenant_Governor ) from party"
    },
    {
        "question": "Return the name and gender of the staff who was assigned in 2016 .",
        "db_id": "department_store",
        "gold_parse": "SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.date_assigned_from LIKE \"2016%\"",
        "predicted_parse_with_values": "select T2.staff_name , T2.staff_gender from Staff_Department_Assignments as T1 join Staff as T2 on T1.staff_id = T2.staff_id where T1.date_assigned_from = \"2017-05-10 02:32:17\""
    },
    {
        "question": "Show the average age for male and female students .",
        "db_id": "allergy_1",
        "gold_parse": "SELECT avg(age) ,  sex FROM Student GROUP BY sex",
        "predicted_parse_with_values": "select avg ( Age ) from Student intersect select Sex from Student where Sex = \"M\""
    },
    {
        "question": "What are the visit date and details of the visitor whose detail is 'Vincent ' ?",
        "db_id": "cre_Theme_park",
        "gold_parse": "SELECT T2.Visit_Date ,  T2.Visit_Details FROM VISITORS AS T1 JOIN VISITS AS T2 ON T1.Tourist_ID  =  T2.Tourist_ID WHERE T1.Tourist_Details  =  \"Vincent\"",
        "predicted_parse_with_values": "select T2.Visit_Date , T1.Tourist_Details from Visitors as T1 join Visits as T2 on T1.Tourist_ID = T2.Tourist_ID where T2.Visit_Details = \"\""
    },
    {
        "question": "Which team offers the lowest average salary ? Give me the name and id of the team .",
        "db_id": "baseball_1",
        "gold_parse": "SELECT T1.name ,  T1.team_id FROM team AS T1 JOIN salary AS T2 ON T1.team_id = T2.team_id GROUP BY T1.team_id ORDER BY avg(T2.salary) ASC LIMIT 1",
        "predicted_parse_with_values": "select T2.name , T1.team_id from salary as T1 join team as T2 group by T1.team_id order by avg ( T1.salary ) limit 1"
    },
    {
        "question": "what is the salary and name of the employee who has the most number of aircraft certificates ?",
        "db_id": "flight_1",
        "gold_parse": "SELECT T1.name ,  T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select salary , name from employee group by eid order by count ( * ) desc limit 1"
    },
    {
        "question": "What are the maximum scores the team Boston Red Stockings got when the team won in postseason ?",
        "db_id": "baseball_1",
        "gold_parse": "SELECT max(T1.wins) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings'",
        "predicted_parse_with_values": "select max ( T1.wins ) from postseason as T1 join team_franchise as T2 where T2.franchise_name = \"Indianapolis Hoosiers\" and T1.league_id_winner = \"NL\""
    },
    {
        "question": "What are the id of all the files in mp3 format ?",
        "db_id": "music_1",
        "gold_parse": "SELECT f_id FROM files WHERE formats  =  \"mp3\"",
        "predicted_parse_with_values": "select file_size from files where formats = \"mp4\""
    },
    {
        "question": "List the position of players with average number of points scored by players of that position bigger than 20 .",
        "db_id": "sports_competition",
        "gold_parse": "SELECT POSITION FROM player GROUP BY name HAVING avg(Points)  >=  20",
        "predicted_parse_with_values": "select Position from player group by Position having avg ( Points ) > 1"
    },
    {
        "question": "which states have cities named springfield",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM city WHERE city_name  =  \"springfield\"",
        "predicted_parse_with_values": "select T2.state_name from city as T1 join state as T2 on T1.state_name = T2.state_name where T1.city_name = \"dummy value\""
    },
    {
        "question": "Which film is rented at a fee of 0.99 and has less than 3 in the inventory ? List the film title and id .",
        "db_id": "sakila_1",
        "gold_parse": "SELECT title ,  film_id FROM film WHERE rental_rate  =  0.99 INTERSECT SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id HAVING count(*)  <  3",
        "predicted_parse_with_values": "select T1.title , T1.film_id from film as T1 join inventory as T2 on T1.film_id = T2.film_id join rental as T3 on T2.inventory_id = T3.inventory_id where T3.inventory_id = 1676 and T1.rating < \"NC-17\""
    },
    {
        "question": "return me the homepage of PVLDB .",
        "db_id": "academic",
        "gold_parse": "SELECT homepage FROM journal WHERE name  =  \"PVLDB\"",
        "predicted_parse_with_values": "select homepage from organization where name = \"dummy value\""
    },
    {
        "question": "where is the highest mountain of the united states",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM mountain WHERE mountain_altitude  =  ( SELECT MAX ( mountain_altitude ) FROM mountain )",
        "predicted_parse_with_values": "select mountain_name from mountain where state_name = \"dummy value\" order by mountain_altitude desc limit 1"
    },
    {
        "question": "Which author has written the most papers ? Find his or her last name .",
        "db_id": "icfp_1",
        "gold_parse": "SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid GROUP BY t1.fname ,  t1.lname ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select lname from Authors group by authID order by count ( * ) desc limit 1"
    },
    {
        "question": "what is the tallest mountain in america",
        "db_id": "geo",
        "gold_parse": "SELECT mountain_name FROM mountain WHERE mountain_altitude  =  ( SELECT MAX ( mountain_altitude ) FROM mountain )",
        "predicted_parse_with_values": "select T1.mountain_name from mountain as T1 join state as T2 on T1.state_name = T2.state_name join highlow as T3 on T2.state_name = T3.state_name where T2.country_name = \"dummy value\" order by T3.highest_elevation desc limit 1"
    },
    {
        "question": "What is the first and last name of all students who play Football or Lacrosse ?",
        "db_id": "game_1",
        "gold_parse": "SELECT T2.lname ,  T2.fname FROM SportsInfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T1.SportName  =  \"Football\" OR T1.SportName  =  \"Lacrosse\"",
        "predicted_parse_with_values": "select T2.Fname , T2.LName from SportsInfo as T1 join Student as T2 on T1.StuID = T2.StuID where T1.SportName = \"Cricket\" or T1.SportName = \"Soccer\""
    },
    {
        "question": "what is the largest city in a state that borders california",
        "db_id": "geo",
        "gold_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"california\" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"california\" )",
        "predicted_parse_with_values": "select T3.city_name from border_info as T1 join state as T2 on T1.border = T2.state_name join city as T3 on T2.state_name = T3.state_name where T1.border = \"dummy value\" order by T2.density desc limit 1"
    },
    {
        "question": "Find the number of dorms and total capacity for each gender .",
        "db_id": "dorm_1",
        "gold_parse": "SELECT count(*) ,  sum(student_capacity) ,  gender FROM dorm GROUP BY gender",
        "predicted_parse_with_values": "select gender , count ( * ) , sum ( student_capacity ) from Dorm group by gender"
    },
    {
        "question": "For each state , find the total account balance of customers whose credit score is above 100 .",
        "db_id": "loan_1",
        "gold_parse": "SELECT sum(acc_bal) ,  state FROM customer WHERE credit_score  >  100 GROUP BY state",
        "predicted_parse_with_values": "select state , sum ( acc_bal ) from customer where credit_score > 30 group by state"
    },
    {
        "question": "What is the description for the CIS-220 and how many credits does it have ?",
        "db_id": "college_1",
        "gold_parse": "SELECT crs_credit ,  crs_description FROM course WHERE crs_code  =  'CIS-220'",
        "predicted_parse_with_values": "select CRS_DESCRIPTION , sum ( CRS_CREDIT ) from COURSE where DEPT_CODE = \"ACCT\" group by CRS_DESCRIPTION"
    },
    {
        "question": "Find the first name and office of the professor who is in the history department and has a Ph.D. degree .",
        "db_id": "college_1",
        "gold_parse": "SELECT T1.emp_fname ,  T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T3.dept_code  =  T2.dept_code WHERE T3.dept_name  =  'History' AND T2.prof_high_degree  =  'Ph.D.'",
        "predicted_parse_with_values": "select DEPT_CODE , PROF_OFFICE from PROFESSOR where DEPT_CODE = \"PSYCH\" intersect select PROF_OFFICE , PROF_OFFICE from PROFESSOR where PROF_HIGH_DEGREE = \"MA\""
    },
    {
        "question": "which state has the highest point",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM highlow WHERE highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow )",
        "predicted_parse_with_values": "select T1.state_name from state as T1 join highlow as T2 on T1.state_name = T2.state_name order by T2.highest_point desc limit 1"
    },
    {
        "question": "What are the first and last names of people who payed more than the rooms ' base prices ?",
        "db_id": "inn_1",
        "gold_parse": "SELECT T1.firstname ,  T1.lastname FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE T1.Rate - T2.basePrice  >  0",
        "predicted_parse_with_values": "select T2.FirstName , T2.LastName from Rooms as T1 join Reservations as T2 on T1.RoomId = T2.Room where T1.basePrice > ( select min ( basePrice ) from Rooms )"
    },
    {
        "question": "what state has the largest urban population",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM city GROUP BY state_name ORDER BY SUM ( population ) DESC LIMIT 1",
        "predicted_parse_with_values": "select state_name from state order by population desc limit 1"
    },
    {
        "question": "What are the countries for each market , ordered alphabetically ?",
        "db_id": "film_rank",
        "gold_parse": "SELECT Country FROM market ORDER BY Country ASC",
        "predicted_parse_with_values": "select Country from market order by Country"
    },
    {
        "question": "what is the most populated state bordering oklahoma",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"oklahoma\" ) ORDER BY population DESC LIMIT 1",
        "predicted_parse_with_values": "select T2.population from border_info as T1 join state as T2 on T1.border = T2.state_name where T1.border = \"dummy value\" order by T2.population desc limit 1"
    },
    {
        "question": "Show the official names of the cities that have hosted more than one competition .",
        "db_id": "farm",
        "gold_parse": "SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT(*)  >  1",
        "predicted_parse_with_values": "select Official_Name from city group by Official_Name having count ( * ) > 1"
    },
    {
        "question": "What are the grade number and classroom number of each class in the list ?",
        "db_id": "student_1",
        "gold_parse": "SELECT DISTINCT classroom ,  grade FROM list",
        "predicted_parse_with_values": "select Grade , Classroom , Classroom from list"
    },
    {
        "question": "How many different majors are there and how many different city codes are there for each student ?",
        "db_id": "dorm_1",
        "gold_parse": "SELECT count(DISTINCT major) ,  count(DISTINCT city_code) FROM student",
        "predicted_parse_with_values": "select Major , count ( city_code ) from Student group by Major"
    },
    {
        "question": "how high is the highest point in america",
        "db_id": "geo",
        "gold_parse": "SELECT MAX ( highest_elevation ) FROM highlow",
        "predicted_parse_with_values": "select max ( T2.highest_point ) from state as T1 join highlow as T2 on T1.state_name = T2.state_name where T1.country_name = \"dummy value\""
    },
    {
        "question": "What is the name of the person who is the oldest ?",
        "db_id": "network_2",
        "gold_parse": "SELECT name FROM Person WHERE age  =  (SELECT max(age) FROM person)",
        "predicted_parse_with_values": "select name from Person order by age desc limit 1"
    },
    {
        "question": "How many stations are in Mountain View ?",
        "db_id": "bike_1",
        "gold_parse": "SELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"",
        "predicted_parse_with_values": "select count ( * ) from station where city = \"Redwood City\""
    },
    {
        "question": "List the names of people that have not been on the affirmative side of debates .",
        "db_id": "debate",
        "gold_parse": "SELECT Name FROM people WHERE People_id NOT IN (SELECT Affirmative FROM debate_people)",
        "predicted_parse_with_values": "select Name from people except select T1.Name from people as T1 join debate_people as T2 on T1.People_ID = T2.Negative where debate_T1.Affirmative = 2"
    },
    {
        "question": "Find the first and last names of people who payed more than the rooms ' base prices .",
        "db_id": "inn_1",
        "gold_parse": "SELECT T1.firstname ,  T1.lastname FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE T1.Rate - T2.basePrice  >  0",
        "predicted_parse_with_values": "select T2.FirstName , T2.LastName from Rooms as T1 join Reservations as T2 on T1.RoomId = T2.Room where T1.basePrice > ( select min ( basePrice ) from Rooms )"
    },
    {
        "question": "Find all actors from Italy born after 1980",
        "db_id": "imdb",
        "gold_parse": "SELECT name FROM actor WHERE birth_year  >  1980 AND nationality  =  \"Italy\"",
        "predicted_parse_with_values": "select name from actor where nationality = \"dummy value\" and birth_year > \"dummy value\""
    },
    {
        "question": "Find the names and number of works of all artists who have at least one English songs .",
        "db_id": "music_1",
        "gold_parse": "SELECT T1.artist_name ,  count(*) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  \"english\" GROUP BY T2.artist_name HAVING count(*)  >=  1",
        "predicted_parse_with_values": "select artist_name , count ( * ) from song where country = \"UK\""
    },
    {
        "question": "What are the different names and countries of origins for all artists whose song ratings are above 9 ?",
        "db_id": "music_1",
        "gold_parse": "SELECT DISTINCT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.rating  >  9",
        "predicted_parse_with_values": "select T1.artist_name , T2.country from song as T1 join artist as T2 on T1.artist_name = T2.artist_name where T1.rating > 6"
    },
    {
        "question": "what is the maximum elevation of guadalupe peak",
        "db_id": "geo",
        "gold_parse": "SELECT highest_elevation FROM highlow WHERE highest_point  =  \"guadalupe peak\"",
        "predicted_parse_with_values": "select max ( mountain_altitude ) from mountain where mountain_name = \"dummy value\""
    },
    {
        "question": "List all document ids and receipt dates of documents .",
        "db_id": "cre_Doc_Control_Systems",
        "gold_parse": "SELECT document_id ,  receipt_date FROM Documents",
        "predicted_parse_with_values": "select T2.document_id , T1.receipt_date from Documents as T1 join Documents_Mailed as T2 on T1.document_id = T2.document_id"
    },
    {
        "question": "Find the number of games taken place in city Atlanta in 2000 .",
        "db_id": "baseball_1",
        "gold_parse": "SELECT count(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year  =  2000 AND T2.city  =  'Atlanta'",
        "predicted_parse_with_values": "select count ( * ) from home_game as T1 join park as T2 on T1.park_id = T2.park_id where T2.city = \"Detroit\" and T1.year = 1967"
    },
    {
        "question": "Find the last name of students who is either female ( sex is F ) and living in the city of code BAL or male ( sex is M ) and in age of below 20 .",
        "db_id": "dorm_1",
        "gold_parse": "SELECT lname FROM student WHERE sex  =  'F' AND city_code  =  'BAL' UNION SELECT lname FROM student WHERE sex  =  'M' AND age  <  20",
        "predicted_parse_with_values": "select T1.LName from Student as T1 join Lives_in as T2 on T1.StuID = T2.stuid join Dorm as T3 on T2.dormid = T3.dormid where T3.gender = \"M\" and T1.Age < 22 or T1.Sex = \"M\""
    },
    {
        "question": "How many songs have 4 minute duration ?",
        "db_id": "music_1",
        "gold_parse": "SELECT count(*) FROM files WHERE duration LIKE \"4:%\"",
        "predicted_parse_with_values": "select count ( * ) from song as T1 join files as T2 on T1.f_id = T2.f_id where T2.duration like \"4:34\""
    },
    {
        "question": "Which tourist attractions are visited at least twice ? Give me their names and ids .",
        "db_id": "cre_Theme_park",
        "gold_parse": "SELECT T1.Name ,  T2.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*)  >=  2",
        "predicted_parse_with_values": "select Name , Tourist_Attraction_ID from Tourist_Attractions group by Tourist_Attraction_ID having count ( * ) >= 1"
    },
    {
        "question": "Which category does the product named \" flax \" belong to ?",
        "db_id": "products_gen_characteristics",
        "gold_parse": "SELECT product_category_code FROM products WHERE product_name  =  \"flax\"",
        "predicted_parse_with_values": "select T1.product_category_description from Ref_Product_Categories as T1 join Products as T2 on T1.product_category_code = T2.product_category_code where T2.product_name = \"flax\""
    },
    {
        "question": "Report the distinct president vote and the vice president vote .",
        "db_id": "voter_2",
        "gold_parse": "SELECT DISTINCT President_Vote ,  VICE_President_Vote FROM VOTING_RECORD",
        "predicted_parse_with_values": "select Vice_President_Vote , Vice_President_Vote from Voting_record"
    },
    {
        "question": "Who are the different players , what season do they play in , and what is the name of the team they are on ?",
        "db_id": "match_season",
        "gold_parse": "SELECT T1.Season ,  T1.Player ,  T2.Name FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id",
        "predicted_parse_with_values": "select T1.Player , T2.Name , T1.Team from player as T1 join team as T2 on T1.Team = T2.Team_id"
    },
    {
        "question": "name all the lakes of us",
        "db_id": "geo",
        "gold_parse": "SELECT lake_name FROM lake",
        "predicted_parse_with_values": "select T2.lake_name from river as T1 join lake as T2 where T1.river_name = \"dummy value\""
    },
    {
        "question": "what is the shortest river in the usa",
        "db_id": "geo",
        "gold_parse": "SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MIN ( LENGTH ) FROM river )",
        "predicted_parse_with_values": "select T1.river_name from river as T1 join state as T2 on T1.traverse = T2.state_name where T2.country_name = \"dummy value\" order by T1.length limit 1"
    },
    {
        "question": "List all female students age is older than 18 who is not majoring in 600 . List students ' first name and last name .",
        "db_id": "restaurant_1",
        "gold_parse": "SELECT Fname , Lname FROM Student WHERE Age  >  18 AND Major != 600 AND Sex = 'F'",
        "predicted_parse_with_values": "select Fname , LName from Student where Sex = \"M\" and Age > 22"
    },
    {
        "question": "What are the names of all the games that have been played for at least 1000 hours ?",
        "db_id": "game_1",
        "gold_parse": "SELECT gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid  =  T2.gameid GROUP BY T1.gameid HAVING sum(hours_played)  >=  1000",
        "predicted_parse_with_values": "select T2.GName from Plays_Games as T1 join Video_Games as T2 on T1.GameID = T2.GameID where T1.Hours_Played >= 10"
    },
    {
        "question": "Return the total number of deaths and total damange in millions for storms that had a max speed greater than the average .",
        "db_id": "storm_record",
        "gold_parse": "SELECT sum(number_deaths) ,  sum(damage_millions_USD) FROM storm WHERE max_speed  >  (SELECT avg(max_speed) FROM storm)",
        "predicted_parse_with_values": "select sum ( Number_Deaths ) , sum ( Number_Deaths ) from storm where Max_speed > ( select avg ( Max_speed ) from storm )"
    },
    {
        "question": "Find the state and country of all cities with post code starting with 4 .",
        "db_id": "customers_and_addresses",
        "gold_parse": "SELECT state_province_county ,  country FROM addresses WHERE zip_postcode LIKE \"4%\"",
        "predicted_parse_with_values": "select city , country from Addresses where zip_postcode like 720"
    },
    {
        "question": "return me the papers in VLDB conference containing keyword \" Information Retrieval \" .",
        "db_id": "academic",
        "gold_parse": "SELECT t4.title FROM publication_keyword AS t3 JOIN keyword AS t1 ON t3.kid  =  t1.kid JOIN publication AS t4 ON t4.pid  =  t3.pid JOIN conference AS t2 ON t4.cid  =  t2.cid WHERE t2.name  =  \"VLDB\" AND t1.keyword  =  \"Information Retrieval\"",
        "predicted_parse_with_values": "select T1.jid from publication as T1 join writes as T2 on T1.pid = T2.pid join author as T3 on T2.aid = T3.aid join domain_author as T4 on T3.aid = T4.aid join domain as T5 on T4.did = T5.did join domain_keyword as T6 on T5.did = T6.did join keyword as T7 on T6.kid = T7.kid where T7.keyword = \"dummy value\" and T1.title = \"dummy value\""
    },
    {
        "question": "What are the names of all of Alice 's friends of friends ?",
        "db_id": "network_2",
        "gold_parse": "SELECT DISTINCT T4.name FROM PersonFriend AS T1 JOIN Person AS T2 ON T1.name  =  T2.name JOIN PersonFriend AS T3 ON T1.friend  =  T3.name JOIN PersonFriend AS T4 ON T3.friend  =  T4.name WHERE T2.name  =  'Alice' AND T4.name != 'Alice'",
        "predicted_parse_with_values": "select name from PersonFriend where friend = \"Alice\""
    },
    {
        "question": "what is the highest point in texas",
        "db_id": "geo",
        "gold_parse": "SELECT highest_point FROM highlow WHERE state_name  =  \"texas\"",
        "predicted_parse_with_values": "select max ( highest_point ) from highlow where state_name = \"dummy value\""
    },
    {
        "question": "how many square kilometers in the us",
        "db_id": "geo",
        "gold_parse": "SELECT SUM ( area ) FROM state",
        "predicted_parse_with_values": "select sum ( density ) from state where country_name = \"dummy value\""
    },
    {
        "question": "What are the names of the songs whose rating is below the rating of all songs in English ?",
        "db_id": "music_1",
        "gold_parse": "SELECT song_name FROM song WHERE rating  <   (SELECT min(rating) FROM song WHERE languages  =  'english')",
        "predicted_parse_with_values": "select song_name from song where rating < ( select min ( rating ) from song where rating = 6 )"
    },
    {
        "question": "List the cities which have more than 2 airports sorted by the number of airports .",
        "db_id": "flight_4",
        "gold_parse": "SELECT city FROM airports GROUP BY city HAVING count(*)  >  2 ORDER BY count(*)",
        "predicted_parse_with_values": "select city from airports group by city having count ( * ) > 1"
    },
    {
        "question": "Find the names of bank branches that have provided a loan to any customer whose credit score is below 100 .",
        "db_id": "loan_1",
        "gold_parse": "SELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id  =  T2.branch_id JOIN customer AS T3 ON T1.cust_id  =  T3.cust_id WHERE T3.credit_score  <  100",
        "predicted_parse_with_values": "select T1.branch_ID from loan as T1 join bank as T2 on T1.branch_ID = T2.branch_ID join customer as T3 on T2.branch_ID = T3.branch_ID where T3.credit_score < 20"
    },
    {
        "question": "What are the unique types of player positions in the tryout ?",
        "db_id": "soccer_2",
        "gold_parse": "SELECT count(DISTINCT pPos) FROM tryout",
        "predicted_parse_with_values": "select pPos from Tryout"
    },
    {
        "question": "What are the ids and names of department stores with both marketing and managing departments ?",
        "db_id": "department_store",
        "gold_parse": "SELECT T2.dept_store_id ,  T2.store_name FROM departments AS T1 JOIN department_stores AS T2 ON T1.dept_store_id  =  T2.dept_store_id WHERE T1.department_name  =  \"marketing\" INTERSECT SELECT T2.dept_store_id ,  T2.store_name FROM departments AS T1 JOIN department_stores AS T2 ON T1.dept_store_id  =  T2.dept_store_id WHERE T1.department_name  =  \"managing\"",
        "predicted_parse_with_values": "select T1.dept_store_id , T2.store_name from Departments as T1 join Department_Stores as T2 on T1.dept_store_id = T2.dept_store_id where T1.department_name = \"purchasing\" intersect select T3.dept_store_id , T4.store_name from Departments as T3 join Department_Stores as T4 on T3.dept_store_id = T4.dept_store_id where T3.department_name = \"purchasing\""
    },
    {
        "question": "How many songs , on average , are sung by a female artist ?",
        "db_id": "music_1",
        "gold_parse": "SELECT avg(T2.rating) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T1.gender  =  \"Female\"",
        "predicted_parse_with_values": "select avg ( T1.song_name ) from song as T1 join artist as T2 on T1.artist_name = T2.artist_name where T2.gender = \"Male\""
    },
    {
        "question": "Find the city and name of bank branches that provide business loans .",
        "db_id": "loan_1",
        "gold_parse": "SELECT T1.bname ,  T1.city FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id WHERE T2.loan_type  =  'Business'",
        "predicted_parse_with_values": "select T2.city , T3.cust_name from loan as T1 join bank as T2 on T1.branch_ID = T2.branch_ID join customer as T3 on T2.branch_ID = T3.branch_ID where T1.loan_type = \"Auto\""
    },
    {
        "question": "Which classrooms are used by grade 4 ?",
        "db_id": "student_1",
        "gold_parse": "SELECT DISTINCT classroom FROM list WHERE grade  =  4",
        "predicted_parse_with_values": "select Classroom from list where Grade = 2"
    },
    {
        "question": "Find the name of bank branch that provided the greatest total amount of loans to customers with credit score is less than 100 .",
        "db_id": "loan_1",
        "gold_parse": "SELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id  =  T2.branch_id JOIN customer AS T3 ON T1.cust_id  =  T3.cust_id WHERE T3.credit_score  <  100 GROUP BY T2.bname ORDER BY sum(T1.amount) DESC LIMIT 1",
        "predicted_parse_with_values": "select T3.cust_name from loan as T1 join bank as T2 on T1.branch_ID = T2.branch_ID join customer as T3 on T2.branch_ID = T3.branch_ID where T3.credit_score < 210 group by T1.branch_ID order by sum ( T3.credit_score ) desc limit 1"
    },
    {
        "question": "How many products are there for each manufacturer ?",
        "db_id": "manufactory_1",
        "gold_parse": "SELECT count(*) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name",
        "predicted_parse_with_values": "select count ( * ) , T1.Name from Manufacturers as T1 join Products as T2 on T1.Code = T2.Manufacturer group by T2.Manufacturer"
    },
    {
        "question": "what are the populations of states through which the mississippi river run",
        "db_id": "geo",
        "gold_parse": "SELECT population FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" )",
        "predicted_parse_with_values": "select T2.population from river as T1 join state as T2 on T1.traverse = T2.state_name where T1.river_name = \"dummy value\""
    },
    {
        "question": "What is the most common interaction type between enzymes and medicine ? And how many are there ?",
        "db_id": "medicine_enzyme_interaction",
        "gold_parse": "SELECT interaction_type ,  count(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select interaction_type , count ( * ) from medicine_enzyme_interaction group by interaction_type order by count ( * ) desc limit 1"
    },
    {
        "question": "How many students are from each city , and which cities have more than one cities ?",
        "db_id": "dorm_1",
        "gold_parse": "SELECT count(*) ,  city_code FROM student GROUP BY city_code HAVING count(*)  >  1",
        "predicted_parse_with_values": "select city_code , count ( * ) from Student group by city_code having count ( * ) > 1"
    },
    {
        "question": "For each main industry , what is the total number of companies for the industry with the highest total market value ?",
        "db_id": "gas_company",
        "gold_parse": "SELECT main_industry ,  count(*) FROM company GROUP BY main_industry ORDER BY sum(market_value) DESC LIMIT 1",
        "predicted_parse_with_values": "select Main_Industry , count ( * ) from company group by Main_Industry order by count ( * ) desc limit 1"
    },
    {
        "question": "What is the number of actors in the movie \" Saving Private Ryan \" ?",
        "db_id": "imdb",
        "gold_parse": "SELECT COUNT ( DISTINCT t1.name  ) FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t3.title  =  \"Saving Private Ryan\"",
        "predicted_parse_with_values": "select count ( * ) from actor as T1 join movie as T2 where T2.title = \"dummy value\""
    },
    {
        "question": "Return all the committees that have delegates from Democratic party .",
        "db_id": "election",
        "gold_parse": "SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  \"Democratic\"",
        "predicted_parse_with_values": "select T1.Committee from election as T1 join party as T2 on T1.Party = T2.Party_ID where T2.Party = \"Democratic\""
    },
    {
        "question": "What are the number of different course codes ?",
        "db_id": "college_1",
        "gold_parse": "SELECT count(DISTINCT crs_code) FROM CLASS",
        "predicted_parse_with_values": "select count ( CRS_CODE ) from COURSE"
    },
    {
        "question": "What is the name of the claim processing stage that most of the claims are on ?",
        "db_id": "insurance_and_eClaims",
        "gold_parse": "SELECT t2.claim_status_name FROM claims_processing AS t1 JOIN claims_processing_stages AS t2 ON t1.claim_stage_id  =  t2.claim_stage_id GROUP BY t1.claim_stage_id ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select Claim_Status_Name from Claims_Processing_Stages group by Claim_Stage_ID order by count ( * ) desc limit 1"
    },
    {
        "question": "Show all city with a branch opened in 2001 and a branch with more than 100 membership .",
        "db_id": "shop_membership",
        "gold_parse": "SELECT city FROM branch WHERE open_year  =  2001 AND membership_amount  >  100",
        "predicted_parse_with_values": "select City from branch where Open_year = 2009 and Open_year > 2012"
    },
    {
        "question": "Find the name of the customer who made the order of the largest amount of goods .",
        "db_id": "customers_and_addresses",
        "gold_parse": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t3.order_quantity  =  ( SELECT max(order_quantity) FROM order_items)",
        "predicted_parse_with_values": "select T3.customer_name from Order_Items as T1 join Customer_Orders as T2 on T1.order_id = T2.order_id join Customers as T3 on T2.customer_id = T3.customer_id group by T3.customer_id order by sum ( T1.order_quantity ) desc limit 1"
    },
    {
        "question": "what is the smallest state through which the longest river runs",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river ) ) ) AND state_name IN ( SELECT traverse FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river ) )",
        "predicted_parse_with_values": "select min ( T2.density ) from river as T1 join state as T2 on T1.traverse = T2.state_name where T1.length = ( select max ( length ) from river )"
    },
    {
        "question": "return me the number of papers in \" University of Michigan \" .",
        "db_id": "academic",
        "gold_parse": "SELECT COUNT ( DISTINCT t4.title ) FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t3 ON t3.aid  =  t1.aid JOIN publication AS t4 ON t3.pid  =  t4.pid WHERE t2.name  =  \"University of Michigan\"",
        "predicted_parse_with_values": "select count ( oid ) from organization where name = \"dummy value\""
    },
    {
        "question": "What is the average base price of rooms , for each bed type ?",
        "db_id": "inn_1",
        "gold_parse": "SELECT bedType ,  avg(basePrice) FROM Rooms GROUP BY bedType",
        "predicted_parse_with_values": "select avg ( basePrice ) , bedType from Rooms group by bedType"
    },
    {
        "question": "How many different locations does the school with code BUS has ?",
        "db_id": "college_1",
        "gold_parse": "SELECT count(DISTINCT dept_address) FROM department WHERE school_code  =  'BUS'",
        "predicted_parse_with_values": "select count ( T4.DEPT_ADDRESS ) from CLASS as T1 join ENROLL as T2 on T1.CLASS_CODE = T2.CLASS_CODE join STUDENT as T3 on T2.STU_NUM = T3.STU_NUM join DEPARTMENT as T4 on T3.DEPT_CODE = T4.DEPT_CODE where T1.CLASS_CODE = 10016"
    },
    {
        "question": "which capitals are in the states that border texas",
        "db_id": "geo",
        "gold_parse": "SELECT t2.capital FROM state AS t2 JOIN border_info AS t1 ON t2.state_name  =  t1.border WHERE t1.state_name  =  \"texas\"",
        "predicted_parse_with_values": "select T2.capital from border_info as T1 join state as T2 on T1.border = T2.state_name where T1.border = \"dummy value\""
    },
    {
        "question": "List the venues of debates in ascending order of the number of audience .",
        "db_id": "debate",
        "gold_parse": "SELECT Venue FROM debate ORDER BY Num_of_Audience ASC",
        "predicted_parse_with_values": "select Venue from debate order by Num_of_Audience desc"
    },
    {
        "question": "What is the sex of the candidate who had the highest unsure rate ?",
        "db_id": "candidate_poll",
        "gold_parse": "SELECT t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex ORDER BY avg(t2.unsure_rate) DESC LIMIT 1",
        "predicted_parse_with_values": "select T1.Sex from people as T1 join candidate as T2 on T1.People_ID = T2.People_ID order by T2.Unsure_rate desc limit 1"
    },
    {
        "question": "Which document has the most draft copies ? List its document id and number of draft copies .",
        "db_id": "cre_Doc_Control_Systems",
        "gold_parse": "SELECT document_id , count(copy_number) FROM Draft_Copies GROUP BY document_id ORDER BY count(copy_number) DESC LIMIT 1",
        "predicted_parse_with_values": "select document_id , count ( * ) from Documents group by document_id order by count ( * ) desc limit 1"
    },
    {
        "question": "What are the names of the schools with some players in the mid position but no goalies ?",
        "db_id": "soccer_2",
        "gold_parse": "SELECT cName FROM  tryout WHERE pPos  =  'mid' EXCEPT SELECT cName FROM  tryout WHERE pPos  =  'goalie'",
        "predicted_parse_with_values": "select T2.cName from Tryout as T1 join College as T2 on T1.cName = T2.cName where T1.pPos = \"goalie\" except select T4.cName from Tryout as T3 join College as T4 on T3.cName = T4.cName where T3.pPos = \"striker\""
    },
    {
        "question": "what is the size of the largest state in the usa",
        "db_id": "geo",
        "gold_parse": "SELECT MAX ( area ) FROM state",
        "predicted_parse_with_values": "select density from state where country_name = \"dummy value\" order by density desc limit 1"
    },
    {
        "question": "return me the number of citations of \" Making database systems usable \" before 2010 .",
        "db_id": "academic",
        "gold_parse": "SELECT COUNT ( DISTINCT t2.title ) FROM publication AS t3 JOIN cite AS t1 ON t3.pid  =  t1.cited JOIN publication AS t2 ON t2.pid  =  t1.citing WHERE t3.title  =  \"Making database systems usable\" AND t2.year  <  2010",
        "predicted_parse_with_values": "select count ( T2.jid ) from organization as T1 join publication as T2 where T1.name = \"dummy value\" and T2.year < \"dummy value\""
    },
    {
        "question": "return me the conference that has the most number of papers containing keyword \" Relational Database \" .",
        "db_id": "academic",
        "gold_parse": "SELECT t2.name FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t4.pid JOIN conference AS t2 ON t3.cid  =  t2.cid WHERE t1.keyword  =  \"Relational Database\" GROUP BY t2.name ORDER BY COUNT ( DISTINCT t3.title ) DESC LIMIT 1",
        "predicted_parse_with_values": "select T1.name , T1.name from conference as T1 join publication as T2 on T1.cid = T2.cid join writes as T3 on T2.pid = T3.pid join author as T4 on T3.aid = T4.aid join domain_author as T5 on T4.aid = T5.aid join domain as T6 on T5.did = T6.did join domain_keyword as T7 on T6.did = T7.did join keyword as T8 on T7.kid = T8.kid where T8.keyword = \"dummy value\" group by T1.name order by count ( * ) desc limit 1"
    },
    {
        "question": "what are the capitals of states that border texas",
        "db_id": "geo",
        "gold_parse": "SELECT t2.capital FROM state AS t2 JOIN border_info AS t1 ON t2.state_name  =  t1.border WHERE t1.state_name  =  \"texas\"",
        "predicted_parse_with_values": "select T2.capital from border_info as T1 join state as T2 on T1.border = T2.state_name where T1.border = \"dummy value\""
    },
    {
        "question": "what is the largest state that borders the state with the lowest point in the usa",
        "db_id": "geo",
        "gold_parse": "SELECT t1.state_name FROM highlow AS t3 JOIN border_info AS t1 ON t3.state_name  =  t1.border JOIN state AS t2 ON t2.state_name  =  t1.border WHERE t3.lowest_elevation  =  ( SELECT MIN ( lowest_elevation ) FROM highlow ) ORDER BY t2.area DESC LIMIT 1",
        "predicted_parse_with_values": "select T1.border from border_info as T1 join state as T2 on T1.border = T2.state_name join highlow as T3 on T2.state_name = T3.state_name where T3.lowest_point != \"dummy value\" order by T3.lowest_point desc limit 1"
    },
    {
        "question": "how many rivers are in the state with the highest point .",
        "db_id": "geo",
        "gold_parse": "SELECT COUNT ( t1.river_name ) FROM highlow AS t2 JOIN river AS t1 ON t1.traverse  =  t2.state_name WHERE t2.highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow )",
        "predicted_parse_with_values": "select count ( * ) from highlow order by highest_point desc limit 1"
    },
    {
        "question": "Find the first name and age of the students who are playing both Football and Lacrosse .",
        "db_id": "game_1",
        "gold_parse": "SELECT fname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Sportsinfo WHERE SportName  =  \"Football\" INTERSECT SELECT StuID FROM Sportsinfo WHERE SportName  =  \"Lacrosse\")",
        "predicted_parse_with_values": "select T2.Fname , T2.Age from SportsInfo as T1 join Student as T2 on T1.StuID = T2.StuID where T1.SportName = \"Curling\" intersect select T4.Fname , T4.Age from SportsInfo as T3 join Student as T4 on T3.StuID = T4.StuID where T3.SportName = \"Basketball\""
    },
    {
        "question": "give me the largest state",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state )",
        "predicted_parse_with_values": "select state_name from state order by density desc limit 1"
    },
    {
        "question": "Which colleges does each player with a name that starts with the letter D who tried out go to ?",
        "db_id": "soccer_2",
        "gold_parse": "SELECT T1.cName FROM  tryout AS T1 JOIN player AS T2 ON T1.pID  =  T2.pID WHERE T2.pName LIKE 'D%'",
        "predicted_parse_with_values": "select T3.cName from Player as T1 join Tryout as T2 on T1.pID = T2.pID join College as T3 on T2.cName = T3.cName where T1.pName like \"Charles\""
    },
    {
        "question": "What is the name and price of the cheapest product ?",
        "db_id": "manufactory_1",
        "gold_parse": "SELECT name ,  price FROM Products ORDER BY price ASC LIMIT 1",
        "predicted_parse_with_values": "select Name , Price from Products order by Price limit 1"
    },
    {
        "question": "which states does the ohio river run through",
        "db_id": "geo",
        "gold_parse": "SELECT traverse FROM river WHERE river_name  =  \"ohio\"",
        "predicted_parse_with_values": "select T3.state_name from river as T1 join state as T2 on T1.traverse = T2.state_name join border_info as T3 on T2.state_name = T3.border where T1.river_name = \"dummy value\""
    },
    {
        "question": "What were all the salary values of players in 2010 and 2001 ?",
        "db_id": "baseball_1",
        "gold_parse": "SELECT salary FROM salary WHERE YEAR  =  2010 UNION SELECT salary FROM salary WHERE YEAR  =  2001",
        "predicted_parse_with_values": "select salary from salary where year = 1990 or year = 1991"
    },
    {
        "question": "Find the first and last names of all the female ( sex is F ) students who have president votes .",
        "db_id": "voter_2",
        "gold_parse": "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.President_VOTE WHERE T1.sex  =  \"F\"",
        "predicted_parse_with_values": "select Fname , LName from Student where Sex = \"F\""
    },
    {
        "question": "Show the name and age for all male people who do n't have a wedding .",
        "db_id": "wedding",
        "gold_parse": "SELECT name ,  age FROM people WHERE is_male  =  'T' AND people_id NOT IN (SELECT male_id FROM wedding)",
        "predicted_parse_with_values": "select Name , Age from people where People_ID not in ( select T2.Male_ID from people as T1 join wedding as T2 on T1.People_ID = T2.Female_ID where T1.Is_Male = \"F\" )"
    },
    {
        "question": "Find the distinct student first names of all students that have grade point at least 3.8 in one course .",
        "db_id": "college_3",
        "gold_parse": "SELECT DISTINCT T3.Fname FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T2.gradepoint  >=  3.8",
        "predicted_parse_with_values": "select T1.Fname from Student as T1 join Enrolled_in as T2 on T1.StuID = T2.StuID join Gradeconversion as T3 on T2.Grade = T3.lettergrade where T3.gradepoint = 2.7"
    },
    {
        "question": "What are the emails and phone numbers of all customers , sorted by email address and phone number ?",
        "db_id": "customer_complaints",
        "gold_parse": "SELECT email_address ,  phone_number FROM customers ORDER BY email_address ,  phone_number",
        "predicted_parse_with_values": "select email_address , phone_number from Customers order by email_address"
    },
    {
        "question": "Find the names of the buildings in \" on-hold \" status , and sort them in ascending order of building stories .",
        "db_id": "company_office",
        "gold_parse": "SELECT name FROM buildings WHERE Status  =  \"on-hold\" ORDER BY Stories ASC",
        "predicted_parse_with_values": "select name from buildings where Status = \"proposed\" order by Stories"
    },
    {
        "question": "what are the major cities in the usa",
        "db_id": "geo",
        "gold_parse": "SELECT city_name FROM city WHERE population  >  150000",
        "predicted_parse_with_values": "select T2.capital from city as T1 join state as T2 on T1.state_name = T2.state_name where T1.country_name = \"dummy value\""
    },
    {
        "question": "return me the number of the papers of \" H. V. Jagadish \" containing keyword \" User Study \" .",
        "db_id": "academic",
        "gold_parse": "SELECT COUNT ( DISTINCT t5.title ) FROM publication_keyword AS t3 JOIN keyword AS t1 ON t3.kid  =  t1.kid JOIN publication AS t5 ON t5.pid  =  t3.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t2 ON t4.aid  =  t2.aid WHERE t2.name  =  \"H. V. Jagadish\" AND t1.keyword  =  \"User Study\"",
        "predicted_parse_with_values": "select count ( T1.pid ) from publication as T1 join writes as T2 on T1.pid = T2.pid join author as T3 on T2.aid = T3.aid join domain_author as T4 on T3.aid = T4.aid join domain as T5 on T4.did = T5.did join domain_keyword as T6 on T5.did = T6.did join keyword as T7 on T6.kid = T7.kid where T7.keyword = \"dummy value\""
    },
    {
        "question": "what major cities are located in kansas",
        "db_id": "geo",
        "gold_parse": "SELECT city_name FROM city WHERE population  >  150000 AND state_name  =  \"kansas\"",
        "predicted_parse_with_values": "select city_name from city where state_name = \"dummy value\""
    },
    {
        "question": "Find the names of furnitures whose prices are lower than the highest price .",
        "db_id": "manufacturer",
        "gold_parse": "SELECT t1.name FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID  =  t2.Furniture_ID WHERE t2.Price_in_Dollar  <  (SELECT max(Price_in_Dollar) FROM furniture_manufacte)",
        "predicted_parse_with_values": "select Name from furniture where Market_Rate < ( select max ( Market_Rate ) from furniture )"
    },
    {
        "question": "Find the name of the person who has friends with age above 40 and under age 30 ?",
        "db_id": "network_2",
        "gold_parse": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  >  40) INTERSECT SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  <  30)",
        "predicted_parse_with_values": "select name from Person where age > 26 and age < 45"
    },
    {
        "question": "Show me all the restaurants .",
        "db_id": "restaurant_1",
        "gold_parse": "SELECT ResName FROM Restaurant",
        "predicted_parse_with_values": "select ResName from Restaurant"
    },
    {
        "question": "Whah are the name of each industry and the number of companies in that industry ?",
        "db_id": "company_office",
        "gold_parse": "SELECT Industry ,  COUNT(*) FROM Companies GROUP BY Industry",
        "predicted_parse_with_values": "select Industry , count ( * ) from Companies group by Industry"
    },
    {
        "question": "Find the first and last name of all the students of age 18 who have vice president votes .",
        "db_id": "voter_2",
        "gold_parse": "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_President_VOTE WHERE T1.age  =  18",
        "predicted_parse_with_values": "select Fname , LName from Student where Age = 22"
    },
    {
        "question": "Which customer made the smallest amount of claim in one claim ? Return the customer details .",
        "db_id": "insurance_and_eClaims",
        "gold_parse": "SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_piad  =  (SELECT min(amount_piad) FROM claim_headers)",
        "predicted_parse_with_values": "select Customer_Details from Customers order by Customer_Details limit 1"
    },
    {
        "question": "For each tourist attraction , return its name and the date when the tourists named Vincent or Vivian visited there .",
        "db_id": "cre_Theme_park",
        "gold_parse": "SELECT T1.Name ,  T3.Visit_Date FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Vincent\" OR T2.Tourist_Details  =  \"Vivian\"",
        "predicted_parse_with_values": "select T3.Name , T3.Name from Visitors as T1 join Visits as T2 on T1.Tourist_ID = T2.Tourist_ID join Tourist_Attractions as T3 on T2.Tourist_Attraction_ID = T3.Tourist_Attraction_ID where T1.Tourist_ID = 439 or T2.Visit_Date = \"2010-10-04 01:34:12\""
    },
    {
        "question": "return me the total citations of papers in the VLDB conference in each year .",
        "db_id": "academic",
        "gold_parse": "SELECT t2.year  ,  SUM ( t2.citation_num ) FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" GROUP BY t2.year",
        "predicted_parse_with_values": "select count ( * ) , T2.year from conference as T1 join publication as T2 on T1.cid = T2.cid where T1.name = \"dummy value\" group by T2.year"
    },
    {
        "question": "What are the names of departments either in division AS , or in division EN and in building NEB ?",
        "db_id": "college_3",
        "gold_parse": "SELECT DName FROM DEPARTMENT WHERE Division  =  \"AS\" UNION SELECT DName FROM DEPARTMENT WHERE Division  =  \"EN\" AND Building  =  \"NEB\"",
        "predicted_parse_with_values": "select DName from Department where Division = \"AS\" and Building = \"NEB\" union select DName from Department where Division = \"EN\" and Division = \"AS\""
    },
    {
        "question": "Show the first names and last names of customers without any account .",
        "db_id": "customers_card_transactions",
        "gold_parse": "SELECT customer_first_name ,  customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id",
        "predicted_parse_with_values": "select customer_first_name , customer_last_name from Customers where customer_id not in ( select customer_id from Accounts )"
    },
    {
        "question": "Please show the different statuses , ordered by the number of cities that have each .",
        "db_id": "farm",
        "gold_parse": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) ASC",
        "predicted_parse_with_values": "select Status , count ( * ) from city group by Status order by count ( * ) desc"
    },
    {
        "question": "Which clubs have one or more members from the city with code \" BAL \" ? Give me the names of the clubs .",
        "db_id": "club_1",
        "gold_parse": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.city_code  =  \"BAL\"",
        "predicted_parse_with_values": "select ClubName from Club where ClubLocation = \"AKW\""
    },
    {
        "question": "what state has the city springfield",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM city WHERE city_name  =  \"springfield\"",
        "predicted_parse_with_values": "select T2.state_name from city as T1 join state as T2 on T1.state_name = T2.state_name where T1.city_name = \"dummy value\""
    },
    {
        "question": "Show the names of customers who use Credit Card payment method and have more than 2 orders .",
        "db_id": "customers_and_products_contacts",
        "gold_parse": "SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.payment_method_code  =  'Credit Card' GROUP BY T1.customer_id HAVING count(*)  >  2",
        "predicted_parse_with_values": "select customer_name from Customers where payment_method_code = \"Credit Card\" group by customer_name having count ( * ) > 1"
    },
    {
        "question": "What are the names of the songs that are modern or sung in English ?",
        "db_id": "music_1",
        "gold_parse": "SELECT song_name FROM song WHERE genre_is  =  \"modern\" OR languages  =  \"english\"",
        "predicted_parse_with_values": "select song_name from song where languages = \"english\" or languages = \"english\""
    },
    {
        "question": "what is the most populous state through which the mississippi runs",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" ) ) AND state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" )",
        "predicted_parse_with_values": "select T3.state_name from river as T1 join state as T2 on T1.traverse = T2.state_name join border_info as T3 on T2.state_name = T3.border where T1.river_name = \"dummy value\" group by T2.state_name order by count ( * ) desc limit 1"
    },
    {
        "question": "Find the name and account balance of the customers who have loans with a total amount of more than 5000 .",
        "db_id": "loan_1",
        "gold_parse": "SELECT T1.cust_name ,  T1.acc_type FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING sum(T2.amount)  >  5000",
        "predicted_parse_with_values": "select T3.cust_name , T3.acc_bal from loan as T1 join bank as T2 on T1.branch_ID = T2.branch_ID join customer as T3 on T2.branch_ID = T3.branch_ID where T1.amount > 5000"
    },
    {
        "question": "What is the first name , last name , and phone of the customer with card 4560596484842 .",
        "db_id": "customers_card_transactions",
        "gold_parse": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.card_number  =  \"4560596484842\"",
        "predicted_parse_with_values": "select T1.customer_first_name , T1.customer_last_name , T1.customer_phone from Customers as T1 join Customers_Cards as T2 where T2.card_type_code = \"Debit\""
    },
    {
        "question": "List the name and country of origin for all singers who have produced songs with rating above 9 .",
        "db_id": "music_1",
        "gold_parse": "SELECT DISTINCT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.rating  >  9",
        "predicted_parse_with_values": "select artist_name , country from song where rating > 10"
    },
    {
        "question": "how many states are next to major rivers",
        "db_id": "geo",
        "gold_parse": "SELECT COUNT ( DISTINCT traverse ) FROM river WHERE LENGTH  >  750",
        "predicted_parse_with_values": "select count ( * ) from state where area > \"dummy value\""
    },
    {
        "question": "HOw many engineers are older than 30 ?",
        "db_id": "network_2",
        "gold_parse": "SELECT count(*) FROM Person WHERE age  >  30 AND job  =  'engineer'",
        "predicted_parse_with_values": "select count ( * ) from Person where age > 26"
    },
    {
        "question": "What is the count of the songs that last approximately 4 minutes ?",
        "db_id": "music_1",
        "gold_parse": "SELECT count(*) FROM files WHERE duration LIKE \"4:%\"",
        "predicted_parse_with_values": "select count ( * ) from song as T1 join files as T2 on T1.f_id = T2.f_id where T2.duration > \"2:56\""
    },
    {
        "question": "Find the number of male ( sex is 'M ' ) students who have some food type allery .",
        "db_id": "allergy_1",
        "gold_parse": "SELECT count(*) FROM Student WHERE sex  =  \"M\" AND StuID IN (SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\")",
        "predicted_parse_with_values": "select count ( * ) from Allergy_Type as T1 join Has_Allergy as T2 on T1.Allergy = T2.Allergy join Student as T3 on T2.StuID = T3.StuID where T3.Sex = \"M\" and T1.Allergytype = \"animal\""
    },
    {
        "question": "What is the name of the customer who has made the largest amount of claim in a single claim ?",
        "db_id": "insurance_and_eClaims",
        "gold_parse": "SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_claimed  =  (SELECT max(amount_claimed) FROM claim_headers)",
        "predicted_parse_with_values": "select T1.Customer_Details from Customers as T1 join Policies as T2 on T1.Customer_ID = T2.Customer_ID join Claim_Headers as T3 on T2.Policy_ID = T3.Policy_ID order by T3.Amount_Claimed desc limit 1"
    },
    {
        "question": "Find the name of the activity that has the largest number of student participants .",
        "db_id": "activity_1",
        "gold_parse": "SELECT T1.activity_name FROM Activity AS T1 JOIN Participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select T1.activity_name from Activity as T1 join Participates_in as T2 on T1.actid = T2.actid group by T2.actid order by count ( * ) desc limit 1"
    },
    {
        "question": "Find the contact channel code that was used by the customer named \" Tillman Ernser \" .",
        "db_id": "customers_and_addresses",
        "gold_parse": "SELECT DISTINCT channel_code FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Tillman Ernser\"",
        "predicted_parse_with_values": "select T1.channel_code from Customer_Contact_Channels as T1 join Customers as T2 on T1.customer_id = T2.customer_id where T2.customer_name = \"Dr. Julia Wuckert MD\""
    },
    {
        "question": "Find the total amount of loans offered by each bank branch .",
        "db_id": "loan_1",
        "gold_parse": "SELECT sum(amount) ,  T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id GROUP BY T1.bname",
        "predicted_parse_with_values": "select sum ( amount ) , branch_ID from loan group by branch_ID"
    },
    {
        "question": "Show all region code and region name sorted by the codes .",
        "db_id": "storm_record",
        "gold_parse": "SELECT region_code ,  region_name FROM region ORDER BY region_code",
        "predicted_parse_with_values": "select Region_code , Region_name from region order by Region_name"
    },
    {
        "question": "What is id of the staff who had a Staff Department Assignment earlier than any Clerical Staff ?",
        "db_id": "department_store",
        "gold_parse": "SELECT staff_id FROM Staff_Department_Assignments WHERE date_assigned_to  <  (SELECT max(date_assigned_to) FROM Staff_Department_Assignments WHERE job_title_code  =  'Clerical Staff')",
        "predicted_parse_with_values": "select T2.staff_id from Staff_Department_Assignments as T1 join Staff as T2 on T1.staff_id = T2.staff_id where T1.date_assigned_from < ( select min ( date_assigned_to ) from Staff_Department_Assignments )"
    },
    {
        "question": "What is the number of professors for different school ?",
        "db_id": "college_1",
        "gold_parse": "SELECT count(*) ,  T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.school_code",
        "predicted_parse_with_values": "select count ( * ) , T5.PROF_OFFICE from CLASS as T1 join ENROLL as T2 on T1.CLASS_CODE = T2.CLASS_CODE join STUDENT as T3 on T2.STU_NUM = T3.STU_NUM join DEPARTMENT as T4 on T3.DEPT_CODE = T4.DEPT_CODE join PROFESSOR as T5 on T4.DEPT_CODE = T5.DEPT_CODE group by T5.PROF_OFFICE"
    },
    {
        "question": "Find the average age of students who are living in the dorm with the largest capacity .",
        "db_id": "dorm_1",
        "gold_parse": "SELECT avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.student_capacity  =  (SELECT max(student_capacity) FROM dorm)",
        "predicted_parse_with_values": "select avg ( T1.Age ) from Student as T1 join Lives_in as T2 on T1.StuID = T2.stuid join Dorm as T3 on T2.dormid = T3.dormid order by T3.student_capacity desc limit 1"
    },
    {
        "question": "What are the titles of films that are either longer than 100 minutes or rated PG other than those that cost more than 200 to replace ?",
        "db_id": "sakila_1",
        "gold_parse": "SELECT title FROM film WHERE LENGTH  >  100 OR rating  =  'PG' EXCEPT SELECT title FROM film WHERE replacement_cost  >  200",
        "predicted_parse_with_values": "select title from film where replacement_cost > 9.99 or rating > \"R\""
    },
    {
        "question": "What are the last names of employees who serve at most 20 customers ?",
        "db_id": "chinook_1",
        "gold_parse": "SELECT T1.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  <=  20",
        "predicted_parse_with_values": "select T2.LastName from Customer as T1 join Employee as T2 on T1.SupportRepId = T2.EmployeeId group by T1.LastName having count ( * ) <= 1"
    },
    {
        "question": "which state has the lowest elevation",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM highlow WHERE lowest_elevation  =  ( SELECT MIN ( lowest_elevation ) FROM highlow )",
        "predicted_parse_with_values": "select T1.state_name from state as T1 join highlow as T2 on T1.state_name = T2.state_name order by T2.lowest_elevation limit 1"
    },
    {
        "question": "What are the times used by climbers who climbed mountains in the country of Uganda ?",
        "db_id": "climbing",
        "gold_parse": "SELECT T1.Time FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T2.Country  =  \"Uganda\"",
        "predicted_parse_with_values": "select Time from climber where Country = \"Switzerland\""
    },
    {
        "question": "What is the name and distance of every aircraft that can cover a distance of more than 5000 and which at least 5 people can fly ?",
        "db_id": "flight_1",
        "gold_parse": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid WHERE T2.distance  >  5000 GROUP BY T1.aid ORDER BY count(*)  >=  5",
        "predicted_parse_with_values": "select name , distance from aircraft where distance > 30 and distance >= 7120"
    },
    {
        "question": "How many courses are offered by the Computer Info . Systems department ?",
        "db_id": "college_1",
        "gold_parse": "SELECT count(*) FROM department AS T1 JOIN course AS T2 ON T1.dept_code  =  T2.dept_code WHERE dept_name  =  \"Computer Info. Systems\"",
        "predicted_parse_with_values": "select count ( * ) from DEPARTMENT as T1 join COURSE as T2 on T1.DEPT_CODE = T2.DEPT_CODE where T1.DEPT_NAME = \"Biology\""
    },
    {
        "question": "Which grade is studying in classroom 103 ?",
        "db_id": "student_1",
        "gold_parse": "SELECT DISTINCT grade FROM list WHERE classroom  =  103",
        "predicted_parse_with_values": "select Grade from list where Classroom = 107"
    },
    {
        "question": "how many states border colorado and border new mexico",
        "db_id": "geo",
        "gold_parse": "SELECT COUNT ( border ) FROM border_info WHERE border IN ( SELECT border FROM border_info WHERE state_name  =  \"new mexico\" ) AND state_name  =  \"colorado\"",
        "predicted_parse_with_values": "select count ( * ) from border_info where border = \"dummy value\" and border = \"dummy value\""
    },
    {
        "question": "What are the names of the enzymes used in the medicine Amisulpride that acts as inhibitors ?",
        "db_id": "medicine_enzyme_interaction",
        "gold_parse": "SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id  =  T3.id WHERE T3.name  =  'Amisulpride' AND T2.interaction_type  =  'inhibitor'",
        "predicted_parse_with_values": "select T1.name from enzyme as T1 join medicine_enzyme_interaction as T2 on T1.id = T2.enzyme_id join medicine as T3 on T2.medicine_id = T3.id where T3.name = \"Asenapine\" intersect select T4.name from enzyme as T4 join medicine_enzyme_interaction as T5 on T4.id = T5.enzyme_id join medicine as T6 on T5.medicine_id = T6.id where T6.name = \"Aripiprazole\""
    },
    {
        "question": "What are the names of members who are not in charge of any events ?",
        "db_id": "party_people",
        "gold_parse": "SELECT member_name FROM member EXCEPT SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id  =  T2.member_in_charge_id",
        "predicted_parse_with_values": "select Member_Name from member where Member_ID not in ( select Member_in_charge_ID from party_events )"
    },
    {
        "question": "How many players were in the team Boston Red Stockings in 2000 ?",
        "db_id": "baseball_1",
        "gold_parse": "SELECT count(*) FROM salary AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  = 'Boston Red Stockings' AND T1.year  =  2000",
        "predicted_parse_with_values": "select count ( T3.player_id ) from team as T1 join batting_postseason as T2 on T1.team_id = T2.team_id join player as T3 on T2.player_id = T3.player_id join team_franchise as T4 where T4.franchise_name = \"Cleveland Infants\" and T1.year = 2010"
    },
    {
        "question": "What is the count of different game types ?",
        "db_id": "game_1",
        "gold_parse": "SELECT count(DISTINCT gtype) FROM Video_games",
        "predicted_parse_with_values": "select count ( * ) from Video_Games"
    },
    {
        "question": "Find the name and id of accounts whose checking balance is below the maximum checking balance .",
        "db_id": "small_bank_1",
        "gold_parse": "SELECT T1.custid ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT max(balance) FROM checking)",
        "predicted_parse_with_values": "select T2.name , T2.custid from CHECKING as T1 join ACCOUNTS as T2 on T1.custid = T2.custid where T1.balance < ( select max ( balance ) from CHECKING )"
    },
    {
        "question": "Find the first names of students whose first names contain letter \" a \" .",
        "db_id": "college_3",
        "gold_parse": "SELECT DISTINCT Fname FROM STUDENT WHERE Fname LIKE '%a%'",
        "predicted_parse_with_values": "select Fname from Student where Fname like \"William\""
    },
    {
        "question": "What is the customer id of the customer with the most accounts , and how many accounts does this person have ?",
        "db_id": "customers_card_transactions",
        "gold_parse": "SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select customer_id , count ( * ) from Accounts group by customer_id order by count ( * ) desc limit 1"
    },
    {
        "question": "For each classroom , show the classroom number and count the number of distinct grades that use the room .",
        "db_id": "student_1",
        "gold_parse": "SELECT classroom ,  count(DISTINCT grade) FROM list GROUP BY classroom",
        "predicted_parse_with_values": "select count ( T2.Grade ) , T1.Classroom from teachers as T1 join list as T2 group by T1.Classroom"
    },
    {
        "question": "what state contains the highest point of those the colorado river traverses",
        "db_id": "geo",
        "gold_parse": "SELECT state_name FROM highlow WHERE highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"colorado\" ) )",
        "predicted_parse_with_values": "select T3.state_name from river as T1 join state as T2 on T1.traverse = T2.state_name join border_info as T3 on T2.state_name = T3.border join highlow as T4 on T2.state_name = T4.state_name where T1.river_name = \"dummy value\" order by T4.highest_point desc limit 1"
    },
    {
        "question": "What is the id of the files that are available in the format of mp4 and a resolution smaller than 1000 ?",
        "db_id": "music_1",
        "gold_parse": "SELECT f_id FROM files WHERE formats  =  \"mp4\" INTERSECT SELECT f_id FROM song WHERE resolution  <  1000",
        "predicted_parse_with_values": "select * from files where formats = \"mp4\" and file_size < \"3.78 MB\""
    },
    {
        "question": "Find the last name and gender of the students who are playing both Call of Destiny and Works of Widenius games .",
        "db_id": "game_1",
        "gold_parse": "SELECT lname ,  sex FROM Student WHERE StuID IN (SELECT T1.StuID FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.GameID  =  T2.GameID WHERE T2.Gname  =  \"Call of Destiny\" INTERSECT SELECT T1.StuID FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.GameID  =  T2.GameID WHERE T2.Gname  =  \"Works of Widenius\")",
        "predicted_parse_with_values": "select T2.LName , T2.Sex from SportsInfo as T1 join Student as T2 on T1.StuID = T2.StuID where T1.GamesPlayed = 18 intersect select T4.LName , T4.Sex from SportsInfo as T3 join Student as T4 on T3.StuID = T4.StuID where T3.GamesPlayed = 56"
    },
    {
        "question": "how many states border at least one other state",
        "db_id": "geo",
        "gold_parse": "SELECT COUNT ( DISTINCT state_name ) FROM border_info",
        "predicted_parse_with_values": "select count ( * ) from border_info as T1 join state as T2 on T1.border = T2.state_name where T1.border > \"dummy value\""
    },
    {
        "question": "Return the average total amount purchased and total value purchased for the supplier who supplies the greatest number of products .",
        "db_id": "department_store",
        "gold_parse": "SELECT avg(total_amount_purchased) ,  avg(total_value_purchased) FROM Product_Suppliers WHERE supplier_id  =  (SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id ORDER BY count(*) DESC LIMIT 1)",
        "predicted_parse_with_values": "select avg ( total_amount_purchased ) , sum ( total_value_purchased ) from Product_Suppliers group by product_Suppliers.supplier_id order by count ( date_supplied_to ) desc limit 1"
    },
    {
        "question": "What are the names of all students who took a class and the corresponding course descriptions ?",
        "db_id": "college_1",
        "gold_parse": "SELECT T1.stu_fname ,  T1.stu_lname ,  T4.crs_description FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code",
        "predicted_parse_with_values": "select T1.STU_FNAME , T3.CRS_DESCRIPTION from STUDENT as T1 join DEPARTMENT as T2 on T1.DEPT_CODE = T2.DEPT_CODE join COURSE as T3 on T2.DEPT_CODE = T3.DEPT_CODE"
    },
    {
        "question": "How many movies did \" Shahab Hosseini \" act in ?",
        "db_id": "imdb",
        "gold_parse": "SELECT COUNT ( DISTINCT t2.title  ) FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  \"Shahab Hosseini\"",
        "predicted_parse_with_values": "select count ( * ) from actor as T1 join movie as T2 where T1.name = \"dummy value\""
    },
    {
        "question": "return me the number of papers written by \" H. V. Jagadish \" , \" Yunyao Li \" , and \" Cong Yu \" .",
        "db_id": "academic",
        "gold_parse": "SELECT COUNT ( DISTINCT t7.title ) FROM writes AS t4 JOIN author AS t2 ON t4.aid  =  t2.aid JOIN publication AS t7 ON t4.pid  =  t7.pid JOIN writes AS t5 ON t5.pid  =  t7.pid JOIN writes AS t6 ON t6.pid  =  t7.pid JOIN author AS t1 ON t5.aid  =  t1.aid JOIN author AS t3 ON t6.aid  =  t3.aid WHERE t2.name  =  \"Cong Yu\" AND t1.name  =  \"H. V. Jagadish\" AND t3.name  =  \"Yunyao Li\"",
        "predicted_parse_with_values": "select count ( T5.keyword ) from author as T1 join writes as T2 on T1.aid = T2.aid join publication as T3 on T2.pid = T3.pid join publication_keyword as T4 on T3.pid = T4.pid join keyword as T5 on T4.kid = T5.kid where T1.name = \"dummy value\" and T1.name = \"dummy value\""
    },
    {
        "question": "What information do you have on colleges sorted by increasing enrollment numbers ?",
        "db_id": "soccer_2",
        "gold_parse": "SELECT * FROM College ORDER BY enr",
        "predicted_parse_with_values": "select * from College order by enr desc"
    },
    {
        "question": "Show the pair of male and female names in all weddings after year 2014",
        "db_id": "wedding",
        "gold_parse": "SELECT T2.name ,  T3.name FROM wedding AS T1 JOIN people AS T2 ON T1.male_id  =  T2.people_id JOIN people AS T3 ON T1.female_id  =  T3.people_id WHERE T1.year  >  2014",
        "predicted_parse_with_values": "select T1.Name from people as T1 join wedding as T2 on T1.People_ID = T2.Female_ID where T2.Year > 2015 and T2.Year >= 2014"
    },
    {
        "question": "What are the names of the songs without a lead vocal ?",
        "db_id": "music_2",
        "gold_parse": "SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  \"lead\"",
        "predicted_parse_with_values": "select Title from Songs where SongId not in ( select SongId from Vocals )"
    },
    {
        "question": "Find the name and city of the airport which is the source for the most number of flight routes .",
        "db_id": "flight_4",
        "gold_parse": "SELECT T1.name ,  T1.city ,  T2.src_apid FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T2.src_apid ORDER BY count(*) DESC LIMIT 1",
        "predicted_parse_with_values": "select name , city from airports group by apid order by count ( * ) desc limit 1"
    },
    {
        "question": "Find the first names and offices of all professors sorted by alphabetical order of their first name .",
        "db_id": "college_1",
        "gold_parse": "SELECT T2.emp_fname ,  T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num  =  T2.emp_num ORDER BY T2.emp_fname",
        "predicted_parse_with_values": "select T1.EMP_FNAME , T2.PROF_OFFICE from EMPLOYEE as T1 join PROFESSOR as T2 on T1.EMP_NUM = T2.EMP_NUM where T1.EMP_FNAME = \"Carlos\" order by T2.PROF_OFFICE"
    },
    {
        "question": "How many students are enrolled in the class taught by some professor from the accounting department ?",
        "db_id": "college_1",
        "gold_parse": "SELECT count(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN department AS T4 ON T3.dept_code  =  T4.dept_code WHERE T4.dept_name  =  'Accounting'",
        "predicted_parse_with_values": "select count ( * ) from COURSE where DEPT_CODE = \"ACCT\""
    }
]